; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4004a8__init_type = type <{ [23 x i8] }>
%seg_4004c0__plt_type = type <{ [64 x i8] }>
%seg_400500__text_type = type <{ [10546 x i8] }>
%seg_402e34__fini_type = type <{ [9 x i8] }>
%seg_402e40__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_403188__eh_frame_hdr_type = type <{ [156 x i8] }>
%seg_403228__eh_frame_type = type <{ [592 x i8] }>
%seg_603de0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604000__got_plt_type = type <{ [24 x i8], i64, i64, i64 }>
%seg_604030__data_type = type <{ [16 x i8] }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_4004a8__init = internal constant %seg_4004a8__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05E; \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4004c0__plt = internal constant %seg_4004c0__plt_type <{ [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%B; \00\00\00\00\00\00\00\00\00\00\00\FF%:; \00\00\00\00\00\00\00\00\00\00\00\FF%2; \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400500__text = internal constant %seg_400500__text_type <{ [10546 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C00.@\00H\C7\C1\C0-@\00H\C7\C7@\06@\00\FF\15\C6: \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8@@`\00H=@@`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF@@`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE@@`\00UH\81\EE@@`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF@@`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\91: \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\7F: \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10\E8\D3\FE\FF\FF\F3\0F\10\05?(\00\00H\89E\F0\F3H\0F*M\F0\F3\0F^\C8\F3\0F\11M\FC\F3\0F\10E\FCH\83\C4\10]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\F0\03\00\00H\BE\EB.@\00\00\00\00\00\F3\0F\10\05\EB'\00\00H\B8\CA.@\00\00\00\00\00H\B9\B0.@\00\00\00\00\001\D2\BF\D0\02\00\00A\89\F8L\8D\8D\C0\FC\FF\FF\C7E\FC\00\00\00\00L\89\CFH\89\B5\B8\FC\FF\FF\89\D6L\89\C2H\89\8D\B0\FC\FF\FF\F3\0F\11\85\AC\FC\FF\FFH\89\85\A0\FC\FF\FF\E8-\FE\FF\FF\C6\85\C0\FC\FF\FF H\8B\85\B0\FC\FF\FFH\89E\A0H\8B\8D\A0\FC\FF\FFH\89M\98\C7\04%P@`\00\C9\00\00\00\C7\04%T@`\00\C8\00\00\00\F3\0F\10\85\AC\FC\FF\FF\F3\0F\11E\F8\C7\04%X@`\00d\00\00\00H\8B<%@@`\00H\8B\B5\B8\FC\FF\FF\B0\00\E8\DC\FD\FF\FFH\BE\F3.@\00\00\00\00\00H\8B<%@@`\00\89\85\9C\FC\FF\FF\B0\00\E8\BD\FD\FF\FFH\BE\FB.@\00\00\00\00\00H\8B<%@@`\00\89\85\98\FC\FF\FF\B0\00\E8\9E\FD\FF\FFH\BE1/@\00\00\00\00\00H\8B<%@@`\00H\8BU\A0\89\85\94\FC\FF\FF\B0\00\E8{\FD\FF\FFH\BEB/@\00\00\00\00\00H\8B<%@@`\00H\8BU\98\89\85\90\FC\FF\FF\B0\00\E8X\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\F2\0F\10\05\A0&\00\00\F2\0F\10\0D\A0&\00\00D\8B\14%X@`\00D\0F\AF\14%X@`\00D\0F\AF\14%X@`\00\F2A\0F*\D2\0F(\D8\F2\0FY\DA\F2\0F^\D9D\8B\14%X@`\00D\0F\AF\14%X@`\00\F2A\0F*\CA\F2\0FY\C1\F2\0FX\D8\F2\0FZ\C3\F3\0F\11E\F4\8B4%P@`\00\8B\14%X@`\00\89\85\8C\FC\FF\FF\E86\0F\00\00\E8\C1\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\F3\0F\11E\D8\8B4%P@`\00\8B\14%X@`\00\E8\CB\10\00\00\E8\86\FD\FF\FF\F3\0F\5CE\D8\F3\0F\11\04%\D0\BAb\00\E8s\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\F3\0F\11E\D8\8B4%P@`\00\8B\14%X@`\00\E8\8A\13\00\00\E85\FD\FF\FF\F3\0F\5CE\D8\F3\0F\11\04%\0C\BBb\00\F3\0F\10\04%\D0\BAb\00\F3\0FX\04%\0C\BBb\00\F3\0F\11E\F0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8D8\00\00\00Hc\04%\EC\BCb\00\F3\0F\10\04\85\80\B4b\00Hc\04%\EC\BCb\00\F3\0F\11\04\85\F0\BCb\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\B4\FF\FF\FFH\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8\FE\0D\00\00\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8DF\00\00\00Hc\04%\EC\BCb\00\F3\0F\10\04\85\80\B4b\00f\0F~\C1\81\F1\00\00\00\80f\0Fn\C1Hc\04%\EC\BCb\00\F3\0F\11\04\85\80\B4b\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A6\FF\FF\FFH\BE\80\B4b\00\00\00\00\00I\B8\F0\BCb\00\00\00\00\00I\B9`@`\00\00\00\00\00\8B<%X@`\00\8B\14%X@`\00\8B\0C%P@`\00\E8\C1\15\00\00\0FW\C0\F3\0F\11E\E4\F3\0F\11E\E8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8D\FA\00\00\00\F3\0FZE\E4Hc\04%\EC\BCb\00\F3\0FZ\0C\85\80\B4b\00\0F(\15X$\00\00f\0F\DB\CAf\0F.\C1\0F\86\12\00\00\00\F3\0FZE\E4\F2\0F\11\85\80\FC\FF\FF\E9$\00\00\00Hc\04%\EC\BCb\00\F3\0FZ\04\85\80\B4b\00\0F(\0D $\00\00f\0F\DB\C1\F2\0F\11\85\80\FC\FF\FF\F2\0F\10\85\80\FC\FF\FF\F2\0FZ\C0\F3\0F\11E\E4\F3\0FZE\E8Hc\04%\EC\BCb\00\F3\0FZ\0C\85\F0\BCb\00\0F(\15\E6#\00\00f\0F\DB\CAf\0F.\C1\0F\86\12\00\00\00\F3\0FZE\E8\F2\0F\11\85x\FC\FF\FF\E9$\00\00\00Hc\04%\EC\BCb\00\F3\0FZ\04\85\F0\BCb\00\0F(\0D\AE#\00\00f\0F\DB\C1\F2\0F\11\85x\FC\FF\FF\F2\0F\10\85x\FC\FF\FF\F2\0FZ\C0\F3\0F\11E\E8\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\F2\FE\FF\FF\F3\0F\10\05\1F#\00\00\E8\8E\1C\00\00H\BET/@\00\00\00\00\00\F3\0F\10\0D\08#\00\00\F3\0F\11E\DC\F3\0F\10E\E4\F3\0F*\14%X@`\00\F3\0FYU\EC\F3\0FYU\E8\F3\0FYU\DC\F3\0F^\C2\F3\0F\11E\E0\F3\0F\10E\DC\F3\0F\11E\D0\F3\0F\10\04%\F0\BCb\00\F3\0F\5C\C1\F3\0F\11E\CC\8B\04%X@`\00\83\E8\01Hc\C8\F3\0F\10\04\8D\F0\BCb\00\F3\0F\5C\C1\F3\0F\11E\C8H\8B<%@@`\00\B0\00\E87\F9\FF\FFH\BE{/@\00\00\00\00\00H\8B<%@@`\00\89\85t\FC\FF\FF\B0\00\E8\18\F9\FF\FFH\BE\9E/@\00\00\00\00\00H\8B<%@@`\00\F3\0FZE\E0\F3\0FZM\E4\F3\0FZU\D0\F3\0FZ]\CC\F3\0FZe\C8\89\85p\FC\FF\FF\B0\05\E8\E0\F8\FF\FFH\BE\BF/@\00\00\00\00\00H\8B<%@@`\00\8B\14%X@`\00\89\85l\FC\FF\FF\B0\00\E8\BA\F8\FF\FFH\BE\F4/@\00\00\00\00\00H\8B<%@@`\00\8B\14%P@`\00\89\85h\FC\FF\FF\B0\00\E8\94\F8\FF\FFH\BE*0@\00\00\00\00\00H\8B<%@@`\00\89\85d\FC\FF\FF\B0\00\E8u\F8\FF\FFH\BEb0@\00\00\00\00\00H\8B<%@@`\00\89\85`\FC\FF\FF\B0\00\E8V\F8\FF\FF\0FW\C0\F3\0F\10M\F0\F3\0F\11\0C%H\BBb\00\F3\0FZM\F0f\0F.\C8\89\85\5C\FC\FF\FF\0F\86N\00\00\00\F2\0F\10\05\90!\00\00\F2\0F\10\0D\98!\00\00\F3\0FZU\F4\F3\0FZ]\F0\F2\0FY\CB\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\84\BBb\00\F3\0FZ\0C%\84\BBb\00\F2\0F^\C1\F2\0FZ\C0\F3\0F\11\04%\C0\BBb\00\E9\15\00\00\00\0FW\C0\F3\0F\11\04%\84\BBb\00\F3\0F\11\04%\C0\BBb\001\FF\F3\0F\10E\F0\F3\0F^E\F8\F3\0F\11\04%\FC\BBb\00\E83\1B\00\00H\BEo0@\00\00\00\00\00H\8B<%@@`\00\B0\00\E8\9A\F7\FF\FF\C7E\C0\FD\FF\FF\FF\C7E\BCd\00\00\00\89\85X\FC\FF\FF\E8\81\F8\FF\FF\F3\0F\11E\B0\8BE\C0\83\C0\01\89E\C0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;E\BC\0F\8DA\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8\9D\09\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\AF\FF\FF\FF\E8\12\F8\FF\FFH\BE\8D0@\00\00\00\00\00\0FW\C9\F3\0F\11E\AC\F3\0F\10E\AC\F3\0F\5CE\B0\F3\0F\11E\B8H\8B<%@@`\00\8BU\BC\0F(\C1\B0\01\E8\DC\F6\FF\FF\83}\C0\00\89\85T\FC\FF\FF\0F\8D\09\00\00\00\8BE\BC\C1\E0\01\89E\BC\E9\00\00\00\00\83}\C0\00\0F\8C.\FF\FF\FFH\BE\A70@\00\00\00\00\00\0FW\C0\F3\0FZM\B8\F2\0F*U\BC\F2\0F^\CA\F2\0FZ\C9\F3\0F\11M\B8H\8B<%@@`\00\B0\01\E8\81\F6\FF\FFH\BE\CE0@\00\00\00\00\00H\8B<%@@`\00\89\85P\FC\FF\FF\B0\00\E8b\F6\FF\FF\C7E\C0\FD\FF\FF\FF\C7\04%\10\C0b\00d\00\00\00\89\85L\FC\FF\FF\E8E\F7\FF\FF\F3\0F\11E\B0\8BE\C0\83\C0\01\89E\C0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8]\08\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%P@`\00\8B\14%X@`\00\E8\FC\09\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8\A1\F6\FF\FFH\BE\8D0@\00\00\00\00\00\0FW\C9\F3\0F\5CE\B0\F3\0F\11E\ACH\8B<%@@`\00\8B\14%\10\C0b\00\0F(\C1\B0\01\E8q\F5\FF\FF\83}\C0\00\89\85H\FC\FF\FF\0F\8D\11\00\00\00\8B\04%\10\C0b\00\C1\E0\01\89\04%\10\C0b\00\E9\00\00\00\00\83}\C0\00\0F\8C\F7\FE\FF\FF\C7\04%\10\C0b\00\E8\03\00\00\83<%\10\C0b\00\00\0F\85\0B\00\00\00\C7\04%\10\C0b\00\01\00\00\00H\BE\FD0@\00\00\00\00\001\D2H\8B<%@@`\00\B0\00\E8\02\F5\FF\FFH\BE\111@\00\00\00\00\00H\8B<%@@`\00\8B\14%P@`\00\89\85D\FC\FF\FF\B0\00\E8\DC\F4\FF\FFH\BE*0@\00\00\00\00\00H\8B<%@@`\00\89\85@\FC\FF\FF\B0\00\E8\BD\F4\FF\FFH\BEb0@\00\00\00\00\00H\8B<%@@`\00\89\85<\FC\FF\FF\B0\00\E8\9E\F4\FF\FF\0FW\C0\F3\0F*\0C%\10\C0b\00\F3\0FYM\B8\F3\0F\11M\D4\F3\0F\11\04%\9C\BBb\00\C7\04%\14\C0b\00\01\00\00\00\89\858\FC\FF\FF\83<%\14\C0b\00\06\0F\8Da\02\00\00\E8[\F5\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8|\06\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%P@`\00\8B\14%X@`\00\E8\1B\08\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8\C0\F4\FF\FF\F3\0F\5CE\D8\F3\0F\5CE\D4\F3\0F*\0C%\10\C0b\00\F3\0F^\C1Hc\04%\14\C0b\00\F3\0F\11\04\85\D0\BAb\00\E8\93\F4\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8DJ\00\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\8B4%P@`\00\8B\14%X@`\00\E8\8B\0A\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A2\FF\FF\FF\E8 \F4\FF\FF\F2\0F\10\0D\80\1C\00\00\F2\0F\10\15\88\1C\00\00\F3\0F\5CE\D8\F3\0F*\1C%\10\C0b\00\F3\0F^\C3Hc\04%\14\C0b\00\F3\0F\11\04\85\0C\BBb\00Hc\04%\14\C0b\00\F3\0F\10\04\85\D0\BAb\00Hc\04%\14\C0b\00\F3\0FX\04\85\0C\BBb\00\F3\0F\11E\F0\F3\0F\10E\F0Hc\04%\14\C0b\00\F3\0F\11\04\85H\BBb\00\F3\0FZE\F4\F3\0FZ]\F0\F2\0FY\D3\F2\0F^\C2\F2\0FZ\C0Hc\04%\14\C0b\00\F3\0F\11\04\85\84\BBb\00Hc\04%\14\C0b\00\F3\0FZ\04\85\84\BBb\00\F2\0F^\C8\F2\0FZ\C1Hc\04%\14\C0b\00\F3\0F\11\04\85\C0\BBb\00\F3\0F\10E\F0\F3\0F^E\F8Hc\04%\14\C0b\00\F3\0F\11\04\85\FC\BBb\00\F3\0F\10\04%\9C\BBb\00Hc\04%\14\C0b\00\F3\0FX\04\85\84\BBb\00\F3\0F\11\04%\9C\BBb\00\8B<%\14\C0b\00\E8\95\15\00\00\8B\04%\14\C0b\00\83\C0\01\89\04%\14\C0b\00\E9\91\FD\FF\FFH\BE@1@\00\00\00\00\00\0FW\C0\F2\0F\10\0Dj\1B\00\00\F3\0FZ\14%\9C\BBb\00\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\9C\BBb\00H\8B<%@@`\00\B0\01\E8\C1\F1\FF\FFH\BEi1@\00\00\00\00\00H\8B<%@@`\00\89\854\FC\FF\FF\B0\00\E8\A2\F1\FF\FF\89\850\FC\FF\FF\E8\97\F2\FF\FF\F3\0F\11E\B0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;E\BC\0F\8DA\00\00\00H\BF \C0b\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%T@`\00\8B\14%X@`\00\E8\BC\03\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\AF\FF\FF\FF\E81\F2\FF\FFH\BE\A70@\00\00\00\00\00\0FW\C9\F3\0F\11E\AC\F3\0F\10E\AC\F3\0F\5CE\B0\F3\0F\11E\B4\F3\0FZE\B4\F2\0F*U\BC\F2\0F^\C2\F2\0FZ\C0\F3\0F\11E\B4H\8B<%@@`\00\0F(\C1\B0\01\E8\E7\F0\FF\FFH\BE\111@\00\00\00\00\00H\8B<%@@`\00\8B\14%T@`\00\89\85,\FC\FF\FF\B0\00\E8\C1\F0\FF\FFH\BE*0@\00\00\00\00\00H\8B<%@@`\00\89\85(\FC\FF\FF\B0\00\E8\A2\F0\FF\FFH\BEb0@\00\00\00\00\00H\8B<%@@`\00\89\85$\FC\FF\FF\B0\00\E8\83\F0\FF\FF\0FW\C0\F3\0F*\0C%\10\C0b\00\F3\0FYM\B4\F3\0F\11M\D4\F3\0F\11\04%\B4\BBb\00\C7\04%\14\C0b\00\07\00\00\00\89\85 \FC\FF\FF\83<%\14\C0b\00\0C\0F\8Da\02\00\00\E8@\F1\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF \C0b\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%T@`\00\8B\14%X@`\00\E8a\02\00\00H\BF \C0b\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%T@`\00\8B\14%X@`\00\E8\00\04\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8\A5\F0\FF\FF\F3\0F\5CE\D8\F3\0F\5CE\D4\F3\0F*\0C%\10\C0b\00\F3\0F^\C1Hc\04%\14\C0b\00\F3\0F\11\04\85\D0\BAb\00\E8x\F0\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8DJ\00\00\00H\BF \C0b\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\8B4%T@`\00\8B\14%X@`\00\E8p\06\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A2\FF\FF\FF\E8\05\F0\FF\FF\F2\0F\10\0De\18\00\00\F2\0F\10\15m\18\00\00\F3\0F\5CE\D8\F3\0F*\1C%\10\C0b\00\F3\0F^\C3Hc\04%\14\C0b\00\F3\0F\11\04\85\0C\BBb\00Hc\04%\14\C0b\00\F3\0F\10\04\85\D0\BAb\00Hc\04%\14\C0b\00\F3\0FX\04\85\0C\BBb\00\F3\0F\11E\F0\F3\0F\10E\F0Hc\04%\14\C0b\00\F3\0F\11\04\85H\BBb\00\F3\0FZE\F4\F3\0FZ]\F0\F2\0FY\D3\F2\0F^\C2\F2\0FZ\C0Hc\04%\14\C0b\00\F3\0F\11\04\85\84\BBb\00Hc\04%\14\C0b\00\F3\0FZ\04\85\84\BBb\00\F2\0F^\C8\F2\0FZ\C1Hc\04%\14\C0b\00\F3\0F\11\04\85\C0\BBb\00\F3\0F\10E\F0\F3\0F^E\F8Hc\04%\14\C0b\00\F3\0F\11\04\85\FC\BBb\00\F3\0F\10\04%\B4\BBb\00Hc\04%\14\C0b\00\F3\0FX\04\85\84\BBb\00\F3\0F\11\04%\B4\BBb\00\8B<%\14\C0b\00\E8z\11\00\00\8B\04%\14\C0b\00\83\C0\01\89\04%\14\C0b\00\E9\91\FD\FF\FFH\BE@1@\00\00\00\00\00\0FW\C0\F2\0F\10\0DO\17\00\00\F3\0FZ\14%\B4\BBb\00\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\B4\BBb\00H\8B<%@@`\00\B0\01\E8\A6\ED\FF\FF1\C9\89\85\1C\FC\FF\FF\89\C8H\81\C4\F0\03\00\00]\C3\0F\1F\00UH\89\E5\0FW\C0H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0\C7E\DC-\05\00\00H\8BM\E0\F3\0F\11\01\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8D\E2\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D\BC\00\00\00\F2\0F\10\05\C2\16\00\00\F2\0F\10\0D\C2\16\00\00\B8\00\00\01\00iM\DC5\0C\00\00\89E\D0\89\C8\99\8BM\D0\F7\F9\89U\DC\F2\0F*U\DC\F2\0F\5C\D1\F2\0F^\D0\F2\0FZ\C2H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\FA\F3\0F\11\04\BEH\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\FA\F3\0F\10\04\BEH\8Bu\E0\0F.\06\0F\86 \00\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\D8Hc\D1\F3\0F\10\04\90\F3\0F\11E\CC\E9\0D\00\00\00H\8BE\E0\F3\0F\10\00\F3\0F\11E\CC\F3\0F\10E\CCH\8BE\E0\F3\0F\11\00\8BE\D8\83\C0\01\89E\D8\E98\FF\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\12\FF\FF\FF\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D\1E\00\00\00\0FW\C0H\8BE\E8HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\D6\FF\FF\FF\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8Dd\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D>\00\00\00H\8BE\E8HcM\D8\F3\0F\10\04\88H\8BE\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\CA\F3\0FX\04\88H\8BE\E8HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\B6\FF\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\90\FF\FF\FF]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0H\8BM\E0\C7\01\00\00\00\00\8BU\F0\83\EA\01\89U\C8\83}\C8\00\0F\8Cq\02\00\00\C7E\D4\00\00\00\00\8BE\D4;E\C8\0F\8DY\02\00\00\BA\01\00\00\00\8BE\D4\83\C0\01\89E\D0\8BE\F0+E\D4H\8BM\F8\8Bu\F4\0F\AFu\D4\03u\D4Hc\FEH\C1\E7\02H\01\F9\89\C7H\89\CE\E8\A0\11\00\00\0FW\C0\03E\D4\89E\CC\8BE\CCH\8BM\E8Hcu\D4\89\04\B1H\8BM\F8\8BE\F4\0F\AFE\D4\03E\CCHc\F0\F3\0FZ\0C\B1f\0F.\C8\0F\85\0B\00\00\00\0F\8A\05\00\00\00\E9\C5\01\00\00\8BE\CC;E\D4\0F\84b\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\CCHc\D1\F3\0F\10\04\90\F3\0F\11E\DCH\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\D1\F3\0F\10\04\90H\8BE\F8\8BM\F4\0F\AFM\D4\03M\CCHc\D1\F3\0F\11\04\90\F3\0F\10E\DCH\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\D1\F3\0F\11\04\90\BA\01\00\00\00\F2\0F\10\05\1B\14\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\F1\F3\0FZ\0C\B0\F2\0F^\C1\F2\0FZ\C0\F3\0F\11E\DC\8BM\F0\8B}\D4\83\C7\01)\F9\F3\0F\10E\DCH\8BE\F8\8B}\F4\0F\AF}\D4\03}\D4\83\C7\01Hc\F7H\C1\E6\02H\01\F0\89\CFH\89\C6\E8+\12\00\00\8BM\D0\89M\D8\8BE\D8;E\F0\0F\8D\DB\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D8\03M\CCHc\D1\F3\0F\10\04\90\F3\0F\11E\DC\8BM\CC;M\D4\0F\84G\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D8\03M\D4Hc\D1\F3\0F\10\04\90H\8BE\F8\8BM\F4\0F\AFM\D8\03M\CCHc\D1\F3\0F\11\04\90\F3\0F\10E\DCH\8BE\F8\8BM\F4\0F\AFM\D8\03M\D4Hc\D1\F3\0F\11\04\90\B8\01\00\00\00\8BM\F0\8BU\D4\83\C2\01)\D1\F3\0F\10E\DCH\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\F8\8BU\F4\0F\AFU\D8\03U\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\C0\89\CF\89\C2H\8BM\C0A\89\C0\E8\DC\0C\00\00\8BE\D8\83\C0\01\89E\D8\E9\19\FF\FF\FF\E9\09\00\00\00\8BE\D4H\8BM\E0\89\01\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\9B\FD\FF\FF\E9\00\00\00\00\0FW\C0\8BE\F0\83\E8\01H\8BM\E8\8BU\F0\83\EA\01Hc\F2\89\04\B1H\8BM\F8\8BE\F4\8BU\F0\83\EA\01\0F\AF\C2\8BU\F0\83\EA\01\01\D0Hc\F0\F3\0FZ\0C\B1f\0F.\C8\0F\85\12\00\00\00\0F\8A\0C\00\00\00\8BE\F0\83\E8\01H\8BM\E0\89\01H\83\C4@]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC`H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0D\89M\DC\8BU\F0\83\EA\01\89U\C8\83}\DC\00\0F\85\97\01\00\00\83}\C8\01\0F\8C\D6\00\00\00\C7E\D4\00\00\00\00\8BE\D4;E\C8\0F\8D\BE\00\00\00H\8BE\E8HcM\D4\8B\14\88\89U\CCH\8BE\E0HcM\CC\F3\0F\10\04\88\F3\0F\11E\D8\8BU\CC;U\D4\0F\84,\00\00\00H\8BE\E0HcM\D4\F3\0F\10\04\88H\8BE\E0HcM\CC\F3\0F\11\04\88\F3\0F\10E\D8H\8BE\E0HcM\D4\F3\0F\11\04\88\B8\01\00\00\00\8BM\F0\8BU\D4\83\C2\01)\D1\F3\0F\10E\D8H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\E0\8BU\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\C0\89\CF\89\C2H\8BM\C0A\89\C0\E8B\0B\00\00\8BE\D4\83\C0\01\89E\D4\E96\FF\FF\FF\E9\00\00\00\00\C7E\D0\00\00\00\00\8BE\D0;E\F0\0F\8D\9F\00\00\00\B8\01\00\00\00\8BM\F0\8BU\D0\83\C2\01)\D1\89M\D4H\8Bu\E0Hc}\D4\F3\0F\10\04\BEH\8Bu\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\F9\F3\0F^\04\BEH\8Bu\E0Hc}\D4\F3\0F\11\04\BEH\8Bu\E0Hc}\D4\F3\0F\10\04\BEf\0F~\C1\81\F1\00\00\00\80f\0Fn\C1\F3\0F\11E\D8\8B}\D4\F3\0F\10E\D8H\8Bu\F8\8BM\F4\0F\AFM\D4\83\C1\00Lc\C1I\C1\E0\02L\01\C6H\8BM\E0\89\C2A\89\C0\E8\8B\0A\00\00\8BE\D0\83\C0\01\89E\D0\E9U\FF\FF\FF\E9\AF\01\00\00\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8D\81\00\00\00\B8\01\00\00\00\8B}\D4H\8BM\F8\8BU\F4\0F\AFU\D4\83\C2\00Hc\F2H\C1\E6\02H\01\F1H\8Bu\E0H\89u\B8H\89\CE\89\C2H\8BM\B8A\89\C0\E8\9C\0B\00\00\F3\0F\11E\D8H\8BM\E0Hcu\D4\F3\0F\10\04\B1\F3\0F\5CE\D8H\8BM\F8\8BE\F4\0F\AFE\D4\03E\D4Hc\F0\F3\0F^\04\B1H\8BM\E0Hcu\D4\F3\0F\11\04\B1\8BE\D4\83\C0\01\89E\D4\E9s\FF\FF\FF\83}\C8\01\0F\8C\0C\01\00\00\C7E\D0\01\00\00\00\8BE\D0;E\C8\0F\8D\F4\00\00\00\B8\01\00\00\00\8BM\F0\8BU\D0\83\C2\01)\D1\89M\D4H\8Bu\E0Hc}\D4\F3\0F\10\04\BE\8BM\F0\8BU\D4\83\C2\01)\D1H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\E0\8BU\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\B0\89\CF\89\C2H\8BM\B0A\89\C0\F3\0F\11E\AC\E8\C4\0A\00\00\F3\0F\10M\AC\F3\0FX\C8H\8BM\E0Hcu\D4\F3\0F\11\0C\B1H\8BM\E8Hcu\D4\8B\04\B1\89E\CC\8BE\CC;E\D4\0F\84>\00\00\00H\8BE\E0HcM\CC\F3\0F\10\04\88\F3\0F\11E\D8H\8BE\E0HcM\D4\F3\0F\10\04\88H\8BE\E0HcM\CC\F3\0F\11\04\88\F3\0F\10E\D8H\8BE\E0HcM\D4\F3\0F\11\04\88\E9\00\00\00\00\8BE\D0\83\C0\01\89E\D0\E9\00\FF\FF\FF\E9\00\00\00\00\E9\00\00\00\00H\83\C4`]\C3\0F\1F\00UH\89\E5\B8\02\00\00\00\89}\FCH\89u\F0\89U\EC\89M\E8L\89E\E0L\89M\D8\8BM\EC\89E\C8\89\C8\99\8BM\C8\F7\F9\89U\D4\83}\D4\01\0F\8Cp\00\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8DO\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\A5\FF\FF\FF\E9\00\00\00\00\B8\04\00\00\00\8BM\EC\89E\C4\89\C8\99\8BM\C4\F7\F9\89U\D4\83}\D4\02\0F\8C\A1\00\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\80\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9t\FF\FF\FF\E9\00\00\00\00\B8\08\00\00\00\8BM\EC\89E\C0\89\C8\99\8BM\C0\F7\F9\89U\D4\83}\D4\04\0F\8C\03\01\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\E2\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\12\FF\FF\FF\E9\00\00\00\00\B8\10\00\00\00\8BM\EC\89E\BC\89\C8\99\8BM\BC\F7\F9\89U\D4\83}\D4\08\0F\8C\C7\01\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\A6\01\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\07Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\07\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\06Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\06\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\05Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\05\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\04Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\04\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9N\FE\FF\FF\E9\00\00\00\00\B8\10\00\00\00\8BM\EC\89E\B8\89\C8\99\8BM\B8\F7\F9\83\C2\10\89U\CC\8BU\CC\83\EA\01\89U\D4\8BE\D4;E\EC\0F\8DT\03\00\00\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D.\03\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\0FHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0F\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0EHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0E\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0DHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0D\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0CHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0C\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0BHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0B\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0AHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0A\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\09Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\09\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\08Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\08\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\07Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\07\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\06Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\06\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\05Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\05\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\04Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\04\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\C6\FC\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\10\89E\D4\E9\A0\FC\FF\FF]\C3\0F\1F\84\00\00\00\00\00UH\89\E5\0FW\C9\F3\0F\10\15\81\06\00\00\F3\0F\11E\FC\F3\0F\11U\F8\F3\0F\11M\EC\0FW\C0\F3\0FZM\ECf\0F.\C8\0F\85V\00\00\00\0F\8AP\00\00\00\F2\0F\10\05\92\06\00\00\F3\0FZM\F8\F2\0F\5C\C8\F2\0FZ\C9\F3\0F\11M\F4\F3\0F\10M\F4\F3\0FXM\F4\F3\0FXM\F4\F3\0F\11M\F0\F3\0FZM\F0\F2\0F\5C\C8\0F(\05l\06\00\00f\0F\DB\C8\F2\0FZ\C1\F3\0F\11E\EC\E9\98\FF\FF\FF\F3\0FZE\EC\F3\0FZM\FC\0F(\15I\06\00\00f\0F\DB\CA\F2\0FY\C1\F2\0FZ\C0]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC]\C3\0F\1F\80\00\00\00\00UH\89\E5\89}\FC\F3\0F\11E\F8H\89u\F0\89U\ECH\89M\E0D\89E\DC\C7E\C8\00\00\00\00\C7E\CC\00\00\00\00\83}\FC\00\0F\8F\05\00\00\00\E9/\01\00\00\0FW\C0\F3\0FZM\F8f\0F.\C8\0F\85\0B\00\00\00\0F\8A\05\00\00\00\E9\12\01\00\00\83}\EC\01\0F\85\0A\00\00\00\83}\DC\01\0F\84\A8\00\00\00\C7E\D4\00\00\00\00\C7E\D0\00\00\00\00\83}\EC\00\0F\8D\0F\00\00\001\C0+E\FC\83\C0\01\0F\AFE\EC\89E\D4\83}\DC\00\0F\8D\0F\00\00\001\C0+E\FC\83\C0\01\0F\AFE\DC\89E\D0\C7E\D8\00\00\00\00\8BE\D8;E\FC\0F\8DP\00\00\00H\8BE\E0HcM\D0\F3\0F\10\04\88\F3\0F\10M\F8H\8BE\F0HcM\D4\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D0\F3\0F\11\04\88\8BU\D4\03U\EC\89U\D4\8BU\D0\03U\DC\89U\D0\8BE\D8\83\C0\01\89E\D8\E9\A4\FF\FF\FF\E9V\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\FC\0F\8D>\00\00\00H\8BE\E0HcM\D8\F3\0F\10\04\88\F3\0F\10M\F8H\8BE\F0HcM\D8\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\B6\FF\FF\FF\E9\00\00\00\00]\C3\0F\1F\80\00\00\00\00UH\89\E5\0FW\C0\89}\F8H\89u\F0\89U\ECH\89M\E0D\89E\DC\C7E\C4\00\00\00\00\C7E\C8\00\00\00\00\F3\0F\11E\D8\83}\F8\00\0F\8F\0D\00\00\00\0FW\C0\F3\0F\11E\FC\E9\11\01\00\00\83}\EC\01\0F\85\0A\00\00\00\83}\DC\01\0F\84\AA\00\00\00\C7E\D0\00\00\00\00\C7E\CC\00\00\00\00\83}\EC\00\0F\8D\0F\00\00\001\C0+E\F8\83\C0\01\0F\AFE\EC\89E\D0\83}\DC\00\0F\8D\0F\00\00\001\C0+E\F8\83\C0\01\0F\AFE\DC\89E\CC\C7E\D4\00\00\00\00\8BE\D4;E\F8\0F\8DH\00\00\00\F3\0F\10E\D8H\8BE\F0HcM\D0\F3\0F\10\0C\88H\8BE\E0HcM\CC\F3\0FY\0C\88\F3\0FX\C1\F3\0F\11E\D8\8BU\D0\03U\EC\89U\D0\8BU\CC\03U\DC\89U\CC\8BE\D4\83\C0\01\89E\D4\E9\AC\FF\FF\FF\F3\0F\10E\D8\F3\0F\11E\FC\E9S\00\00\00\C7E\D4\00\00\00\00\8BE\D4;E\F8\0F\8D6\00\00\00\F3\0F\10E\D8H\8BE\F0HcM\D4\F3\0F\10\0C\88H\8BE\E0HcM\D4\F3\0FY\0C\88\F3\0FX\C1\F3\0F\11E\D8\8BE\D4\83\C0\01\89E\D4\E9\BE\FF\FF\FF\F3\0F\10E\D8\F3\0F\11E\FC\F3\0F\10E\FC]\C3\0F\1FD\00\00UH\89\E5\89}\F8H\89u\F0\89U\EC\83}\F8\01\0F\8D\0C\00\00\00\C7E\FC\FF\FF\FF\FF\E9k\01\00\00\83}\F8\01\0F\85\0C\00\00\00\C7E\FC\00\00\00\00\E9U\01\00\00\83}\EC\01\0F\84\A9\00\00\00\C7E\E0\01\00\00\00H\8BE\F0\F3\0FZ\00\0F(\0D\F6\02\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\8BM\E0\03M\EC\89M\E0\C7E\E4\01\00\00\00\8BE\E4;E\F8\0F\8De\00\00\00H\8BE\F0HcM\E0\F3\0FZ\04\88\0F(\0D\B9\02\00\00f\0F\DB\C1\F3\0FZM\E8f\0F.\C1\0F\86'\00\00\00\8BE\E4\89E\DCH\8BM\F0HcU\E0\F3\0FZ\04\91\0F(\0D\8C\02\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\8BE\E0\03E\EC\89E\E0\8BE\E4\83\C0\01\89E\E4\E9\8F\FF\FF\FF\E9\9C\00\00\00\C7E\DC\00\00\00\00H\8BE\F0\F3\0FZ\00\0F(\0DM\02\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\C7E\E4\01\00\00\00\8BE\E4;E\F8\0F\8Da\00\00\00H\8BE\F0HcM\E4\F3\0FZ\04\88\0F(\0D\19\02\00\00f\0F\DB\C1\F3\0FZM\E8f\0F.\C1\0F\86'\00\00\00\8BE\E4\89E\DCH\8BM\F0HcU\E4\F3\0FZ\04\91\0F(\0D\EC\01\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\E9\00\00\00\00\8BE\E4\83\C0\01\89E\E4\E9\93\FF\FF\FF\E9\00\00\00\00\8BE\DC\89E\FC\8BE\FC]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\F3\0F\11E\F8H\89u\F0\89U\EC\C7E\E0\00\00\00\00\C7E\E4\00\00\00\00\83}\FC\00\0F\8F\05\00\00\00\E9\99\00\00\00\83}\EC\01\0F\84O\00\00\00\8BE\FC\0F\AFE\EC\89E\DC\C7E\E8\00\00\00\00\8BE\E8;E\DC\0F\8D-\00\00\00\F3\0F\10E\F8H\8BE\F0HcM\E8\F3\0FY\04\88H\8BE\F0HcM\E8\F3\0F\11\04\88\8BE\E8\03E\EC\89E\E8\E9\C7\FF\FF\FF\E9@\00\00\00\C7E\E8\00\00\00\00\8BE\E8;E\FC\0F\8D-\00\00\00\F3\0F\10E\F8H\8BE\F0HcM\E8\F3\0FY\04\88H\8BE\F0HcM\E8\F3\0F\11\04\88\8BE\E8\83\C0\01\89E\E8\E9\C7\FF\FF\FF]\C3\0F\1FD\00\00AWAVI\89\D7AUATL\8D%\0E\10 \00UH\8D-\0E\10 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\B7\D6\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_402e34__fini = internal constant %seg_402e34__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_402e40__rodata = internal constant %seg_402e40__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_403188__eh_frame_hdr = internal constant %seg_403188__eh_frame_hdr_type <{ [156 x i8] c"\01\1B\03;\9C\00\00\00\12\00\00\008\D3\FF\FF\F8\00\00\00x\D3\FF\FF\B8\00\00\00\A8\D3\FF\FF\E4\00\00\00h\D4\FF\FF \01\00\00\A8\D4\FF\FF<\01\00\00\B8\D4\FF\FFX\01\00\00\D8\E5\FF\FFt\01\00\00\A8\E7\FF\FF\90\01\00\00\B8\EA\FF\FF\AC\01\00\008\EE\FF\FF\C8\01\00\008\F6\FF\FF\E4\01\00\00\E8\F6\FF\FF\00\02\00\00\F8\F6\FF\FF\1C\02\00\00h\F8\FF\FF8\02\00\00\C8\F9\FF\FFT\02\00\00h\FB\FF\FFp\02\00\008\FC\FF\FF\90\02\00\00\A8\FC\FF\FF\D8\02\00\00" }>
@seg_403228__eh_frame = internal constant %seg_403228__eh_frame_type <{ [592 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\B8\D2\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\BC\D2\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\008\D2\FF\FF@\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00@\D3\FF\FF3\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00d\D3\FF\FF\06\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00X\D3\FF\FF\1D\11\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\5C\E4\FF\FF\C7\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\10\E6\FF\FF\03\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\04\E9\FF\FF}\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00h\EC\FF\FF\F8\07\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00L\F4\FF\FF\A5\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\00\E0\F4\FF\FF\09\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00\D4\F4\FF\FFi\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00p\01\00\00(\F6\FF\FF[\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\01\00\00l\F7\FF\FF\94\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\A8\01\00\00\F0\F8\FF\FF\CB\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00\C8\01\00\00\A0\F9\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\10\02\00\00\C8\F9\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_603de0__init_array = internal global %seg_603de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4005b0___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604000__got_plt = internal global %seg_604000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 ()* @clock to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64) }>
@seg_604030__data = internal global %seg_604030__data_type zeroinitializer
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e30___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402dc0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4004a8__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4027c0_epslon_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400540_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402b50_idamax_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402cf0_dscal_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401fc0_dmxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_401930_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401930:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 17
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %R8D = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 7
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 9
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 11
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RDI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 13
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RSP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 15
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RBP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 17
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R8 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = sub i64 %66, 64
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  %70 = icmp ult i64 %66, 64
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2432
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2446
  %80 = xor i64 64, %66
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %66, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i64, i64* %RDI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 12
  %106 = load i32, i32* %ESI
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 16
  %113 = load i32, i32* %EDX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 24
  %120 = load i64, i64* %RCX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 32
  %126 = load i64, i64* %R8
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 32
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %RCX, align 8, !tbaa !2428
  %136 = load i64, i64* %RCX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 6
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i32*
  store i32 0, i32* %139
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 16
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i32*
  %145 = load i32, i32* %144
  %146 = zext i32 %145 to i64
  store i64 %146, i64* %RDX, align 8, !tbaa !2428
  %147 = load i64, i64* %RDX
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 3
  store i64 %149, i64* %PC
  %150 = trunc i64 %147 to i32
  %151 = sub i32 %150, 1
  %152 = zext i32 %151 to i64
  store i64 %152, i64* %RDX, align 8, !tbaa !2428
  %153 = icmp ult i32 %150, 1
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %154, i8* %155, align 1, !tbaa !2432
  %156 = and i32 %151, 255
  %157 = call i32 @llvm.ctpop.i32(i32 %156) #16
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %160, i8* %161, align 1, !tbaa !2446
  %162 = xor i64 1, %147
  %163 = trunc i64 %162 to i32
  %164 = xor i32 %163, %151
  %165 = lshr i32 %164, 4
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %167, i8* %168, align 1, !tbaa !2447
  %169 = icmp eq i32 %151, 0
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %170, i8* %171, align 1, !tbaa !2448
  %172 = lshr i32 %151, 31
  %173 = trunc i32 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %173, i8* %174, align 1, !tbaa !2449
  %175 = lshr i32 %150, 31
  %176 = xor i32 %172, %175
  %177 = add nuw nsw i32 %176, %175
  %178 = icmp eq i32 %177, 2
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %179, i8* %180, align 1, !tbaa !2450
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 56
  %183 = load i32, i32* %EDX
  %184 = zext i32 %183 to i64
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 3
  store i64 %186, i64* %PC
  %187 = inttoptr i64 %182 to i32*
  store i32 %183, i32* %187
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 56
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %189 to i32*
  %193 = load i32, i32* %192
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %194, align 1, !tbaa !2432
  %195 = and i32 %193, 255
  %196 = call i32 @llvm.ctpop.i32(i32 %195) #16
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %199, i8* %200, align 1, !tbaa !2446
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %201, align 1, !tbaa !2447
  %202 = icmp eq i32 %193, 0
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %203, i8* %204, align 1, !tbaa !2448
  %205 = lshr i32 %193, 31
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %206, i8* %207, align 1, !tbaa !2449
  %208 = lshr i32 %193, 31
  %209 = xor i32 %205, %208
  %210 = add nuw nsw i32 %209, %208
  %211 = icmp eq i32 %210, 2
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %212, i8* %213, align 1, !tbaa !2450
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 631
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 6
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 6
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %221 = load i8, i8* %220, align 1, !tbaa !2449
  %222 = icmp ne i8 %221, 0
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %224 = load i8, i8* %223, align 1, !tbaa !2450
  %225 = icmp ne i8 %224, 0
  %226 = xor i1 %222, %225
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = select i1 %226, i64 %215, i64 %217
  store i64 %229, i64* %228, align 8, !tbaa !2428
  %230 = load i8, i8* %BRANCH_TAKEN
  %231 = icmp eq i8 %230, 1
  br i1 %231, label %block_401bd8, label %block_401967

block_401afe:                                     ; preds = %block_401ad7
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 8
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = load i64, i64* %RBP
  %239 = sub i64 %238, 12
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %239 to i32*
  %243 = load i32, i32* %242
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RCX, align 8, !tbaa !2428
  %245 = load i64, i64* %RCX
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 40
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i32*
  %251 = load i32, i32* %250
  %252 = shl i64 %245, 32
  %253 = ashr exact i64 %252, 32
  %254 = sext i32 %251 to i64
  %255 = mul nsw i64 %254, %253
  %256 = trunc i64 %255 to i32
  %257 = and i64 %255, 4294967295
  store i64 %257, i64* %RCX, align 8, !tbaa !2428
  %258 = shl i64 %255, 32
  %259 = ashr exact i64 %258, 32
  %260 = icmp ne i64 %259, %255
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %261, i8* %262, align 1, !tbaa !2432
  %263 = and i32 %256, 255
  %264 = call i32 @llvm.ctpop.i32(i32 %263) #16
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  %267 = xor i8 %266, 1
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %267, i8* %268, align 1, !tbaa !2446
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %269, align 1, !tbaa !2447
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %270, align 1, !tbaa !2448
  %271 = lshr i32 %256, 31
  %272 = trunc i32 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %261, i8* %274, align 1, !tbaa !2450
  %275 = load i64, i64* %RCX
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 44
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  %280 = trunc i64 %275 to i32
  %281 = inttoptr i64 %277 to i32*
  %282 = load i32, i32* %281
  %283 = add i32 %282, %280
  %284 = zext i32 %283 to i64
  store i64 %284, i64* %RCX, align 8, !tbaa !2428
  %285 = icmp ult i32 %283, %280
  %286 = icmp ult i32 %283, %282
  %287 = or i1 %285, %286
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %288, i8* %289, align 1, !tbaa !2432
  %290 = and i32 %283, 255
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %294, i8* %295, align 1, !tbaa !2446
  %296 = xor i32 %282, %280
  %297 = xor i32 %296, %283
  %298 = lshr i32 %297, 4
  %299 = trunc i32 %298 to i8
  %300 = and i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %300, i8* %301, align 1, !tbaa !2447
  %302 = icmp eq i32 %283, 0
  %303 = zext i1 %302 to i8
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %303, i8* %304, align 1, !tbaa !2448
  %305 = lshr i32 %283, 31
  %306 = trunc i32 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %306, i8* %307, align 1, !tbaa !2449
  %308 = lshr i32 %280, 31
  %309 = lshr i32 %282, 31
  %310 = xor i32 %305, %308
  %311 = xor i32 %305, %309
  %312 = add nuw nsw i32 %310, %311
  %313 = icmp eq i32 %312, 2
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %314, i8* %315, align 1, !tbaa !2450
  %316 = load i32, i32* %ECX
  %317 = zext i32 %316 to i64
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 3
  store i64 %319, i64* %PC
  %320 = shl i64 %317, 32
  %321 = ashr exact i64 %320, 32
  store i64 %321, i64* %RDX, align 8, !tbaa !2428
  %322 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %323 = load i64, i64* %RAX
  %324 = load i64, i64* %RDX
  %325 = mul i64 %324, 4
  %326 = add i64 %325, %323
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to float*
  %330 = load float, float* %329
  %331 = bitcast i8* %322 to float*
  store float %330, float* %331, align 1, !tbaa !2452
  %332 = getelementptr inbounds i8, i8* %322, i64 4
  %333 = bitcast i8* %332 to float*
  store float 0.000000e+00, float* %333, align 1, !tbaa !2452
  %334 = getelementptr inbounds i8, i8* %322, i64 8
  %335 = bitcast i8* %334 to float*
  store float 0.000000e+00, float* %335, align 1, !tbaa !2452
  %336 = getelementptr inbounds i8, i8* %322, i64 12
  %337 = bitcast i8* %336 to float*
  store float 0.000000e+00, float* %337, align 1, !tbaa !2452
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 8
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i64*
  %343 = load i64, i64* %342
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 12
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i32*
  %349 = load i32, i32* %348
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RCX, align 8, !tbaa !2428
  %351 = load i64, i64* %RCX
  %352 = load i64, i64* %RBP
  %353 = sub i64 %352, 40
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 4
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i32*
  %357 = load i32, i32* %356
  %358 = shl i64 %351, 32
  %359 = ashr exact i64 %358, 32
  %360 = sext i32 %357 to i64
  %361 = mul nsw i64 %360, %359
  %362 = trunc i64 %361 to i32
  %363 = and i64 %361, 4294967295
  store i64 %363, i64* %RCX, align 8, !tbaa !2428
  %364 = shl i64 %361, 32
  %365 = ashr exact i64 %364, 32
  %366 = icmp ne i64 %365, %361
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %367, i8* %368, align 1, !tbaa !2432
  %369 = and i32 %362, 255
  %370 = call i32 @llvm.ctpop.i32(i32 %369) #16
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %373, i8* %374, align 1, !tbaa !2446
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %375, align 1, !tbaa !2447
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %376, align 1, !tbaa !2448
  %377 = lshr i32 %362, 31
  %378 = trunc i32 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %378, i8* %379, align 1, !tbaa !2449
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %367, i8* %380, align 1, !tbaa !2450
  %381 = load i64, i64* %RCX
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 52
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 3
  store i64 %385, i64* %PC
  %386 = trunc i64 %381 to i32
  %387 = inttoptr i64 %383 to i32*
  %388 = load i32, i32* %387
  %389 = add i32 %388, %386
  %390 = zext i32 %389 to i64
  store i64 %390, i64* %RCX, align 8, !tbaa !2428
  %391 = icmp ult i32 %389, %386
  %392 = icmp ult i32 %389, %388
  %393 = or i1 %391, %392
  %394 = zext i1 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %394, i8* %395, align 1, !tbaa !2432
  %396 = and i32 %389, 255
  %397 = call i32 @llvm.ctpop.i32(i32 %396) #16
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  %400 = xor i8 %399, 1
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %400, i8* %401, align 1, !tbaa !2446
  %402 = xor i32 %388, %386
  %403 = xor i32 %402, %389
  %404 = lshr i32 %403, 4
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %406, i8* %407, align 1, !tbaa !2447
  %408 = icmp eq i32 %389, 0
  %409 = zext i1 %408 to i8
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %409, i8* %410, align 1, !tbaa !2448
  %411 = lshr i32 %389, 31
  %412 = trunc i32 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %412, i8* %413, align 1, !tbaa !2449
  %414 = lshr i32 %386, 31
  %415 = lshr i32 %388, 31
  %416 = xor i32 %411, %414
  %417 = xor i32 %411, %415
  %418 = add nuw nsw i32 %416, %417
  %419 = icmp eq i32 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i32, i32* %ECX
  %423 = zext i32 %422 to i64
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = shl i64 %423, 32
  %427 = ashr exact i64 %426, 32
  store i64 %427, i64* %RDX, align 8, !tbaa !2428
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %RDX
  %430 = mul i64 %429, 4
  %431 = add i64 %430, %428
  %432 = bitcast %union.vec128_t* %XMM0 to i8*
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 5
  store i64 %434, i64* %PC
  %435 = bitcast i8* %432 to <2 x float>*
  %436 = load <2 x float>, <2 x float>* %435, align 1
  %437 = extractelement <2 x float> %436, i32 0
  %438 = inttoptr i64 %431 to float*
  store float %437, float* %438
  %439 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 36
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to float*
  %445 = load float, float* %444
  %446 = bitcast i8* %439 to float*
  store float %445, float* %446, align 1, !tbaa !2452
  %447 = getelementptr inbounds i8, i8* %439, i64 4
  %448 = bitcast i8* %447 to float*
  store float 0.000000e+00, float* %448, align 1, !tbaa !2452
  %449 = getelementptr inbounds i8, i8* %439, i64 8
  %450 = bitcast i8* %449 to float*
  store float 0.000000e+00, float* %450, align 1, !tbaa !2452
  %451 = getelementptr inbounds i8, i8* %439, i64 12
  %452 = bitcast i8* %451 to float*
  store float 0.000000e+00, float* %452, align 1, !tbaa !2452
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 8
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 4
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i64*
  %458 = load i64, i64* %457
  store i64 %458, i64* %RAX, align 8, !tbaa !2428
  %459 = load i64, i64* %RBP
  %460 = sub i64 %459, 12
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 3
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %460 to i32*
  %464 = load i32, i32* %463
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 40
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471
  %473 = shl i64 %466, 32
  %474 = ashr exact i64 %473, 32
  %475 = sext i32 %472 to i64
  %476 = mul nsw i64 %475, %474
  %477 = trunc i64 %476 to i32
  %478 = and i64 %476, 4294967295
  store i64 %478, i64* %RCX, align 8, !tbaa !2428
  %479 = shl i64 %476, 32
  %480 = ashr exact i64 %479, 32
  %481 = icmp ne i64 %480, %476
  %482 = zext i1 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %482, i8* %483, align 1, !tbaa !2432
  %484 = and i32 %477, 255
  %485 = call i32 @llvm.ctpop.i32(i32 %484) #16
  %486 = trunc i32 %485 to i8
  %487 = and i8 %486, 1
  %488 = xor i8 %487, 1
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %488, i8* %489, align 1, !tbaa !2446
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %490, align 1, !tbaa !2447
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %491, align 1, !tbaa !2448
  %492 = lshr i32 %477, 31
  %493 = trunc i32 %492 to i8
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %493, i8* %494, align 1, !tbaa !2449
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %482, i8* %495, align 1, !tbaa !2450
  %496 = load i64, i64* %RCX
  %497 = load i64, i64* %RBP
  %498 = sub i64 %497, 44
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 3
  store i64 %500, i64* %PC
  %501 = trunc i64 %496 to i32
  %502 = inttoptr i64 %498 to i32*
  %503 = load i32, i32* %502
  %504 = add i32 %503, %501
  %505 = zext i32 %504 to i64
  store i64 %505, i64* %RCX, align 8, !tbaa !2428
  %506 = icmp ult i32 %504, %501
  %507 = icmp ult i32 %504, %503
  %508 = or i1 %506, %507
  %509 = zext i1 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %509, i8* %510, align 1, !tbaa !2432
  %511 = and i32 %504, 255
  %512 = call i32 @llvm.ctpop.i32(i32 %511) #16
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  %515 = xor i8 %514, 1
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %515, i8* %516, align 1, !tbaa !2446
  %517 = xor i32 %503, %501
  %518 = xor i32 %517, %504
  %519 = lshr i32 %518, 4
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %521, i8* %522, align 1, !tbaa !2447
  %523 = icmp eq i32 %504, 0
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %524, i8* %525, align 1, !tbaa !2448
  %526 = lshr i32 %504, 31
  %527 = trunc i32 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %527, i8* %528, align 1, !tbaa !2449
  %529 = lshr i32 %501, 31
  %530 = lshr i32 %503, 31
  %531 = xor i32 %526, %529
  %532 = xor i32 %526, %530
  %533 = add nuw nsw i32 %531, %532
  %534 = icmp eq i32 %533, 2
  %535 = zext i1 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %535, i8* %536, align 1, !tbaa !2450
  %537 = load i32, i32* %ECX
  %538 = zext i32 %537 to i64
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 3
  store i64 %540, i64* %PC
  %541 = shl i64 %538, 32
  %542 = ashr exact i64 %541, 32
  store i64 %542, i64* %RDX, align 8, !tbaa !2428
  %543 = load i64, i64* %RAX
  %544 = load i64, i64* %RDX
  %545 = mul i64 %544, 4
  %546 = add i64 %545, %543
  %547 = bitcast %union.vec128_t* %XMM0 to i8*
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 5
  store i64 %549, i64* %PC
  %550 = bitcast i8* %547 to <2 x float>*
  %551 = load <2 x float>, <2 x float>* %550, align 1
  %552 = extractelement <2 x float> %551, i32 0
  %553 = inttoptr i64 %546 to float*
  store float %552, float* %553
  br label %block_401b45

block_4019f2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1, %block_4019e7
  %MEMORY.0 = phi %struct.Memory* [ %1641, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %1641, %block_4019e7 ]
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 52
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 3
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  %559 = load i32, i32* %558
  %560 = zext i32 %559 to i64
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i32, i32* %EAX
  %562 = zext i32 %561 to i64
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 44
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 3
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = sub i32 %561, %568
  %570 = icmp ult i32 %561, %568
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = and i32 %569, 255
  %574 = call i32 @llvm.ctpop.i32(i32 %573) #16
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %577, i8* %578, align 1, !tbaa !2446
  %579 = xor i32 %568, %561
  %580 = xor i32 %579, %569
  %581 = lshr i32 %580, 4
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %583, i8* %584, align 1, !tbaa !2447
  %585 = icmp eq i32 %569, 0
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %586, i8* %587, align 1, !tbaa !2448
  %588 = lshr i32 %569, 31
  %589 = trunc i32 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %589, i8* %590, align 1, !tbaa !2449
  %591 = lshr i32 %561, 31
  %592 = lshr i32 %568, 31
  %593 = xor i32 %592, %591
  %594 = xor i32 %588, %591
  %595 = add nuw nsw i32 %594, %593
  %596 = icmp eq i32 %595, 2
  %597 = zext i1 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %597, i8* %598, align 1, !tbaa !2450
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 104
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 6
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 6
  store i64 %604, i64* %PC
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %606 = load i8, i8* %605, align 1, !tbaa !2448
  store i8 %606, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %608 = icmp ne i8 %606, 0
  %609 = select i1 %608, i64 %600, i64 %602
  store i64 %609, i64* %607, align 8, !tbaa !2428
  %610 = load i8, i8* %BRANCH_TAKEN
  %611 = icmp eq i8 %610, 1
  br i1 %611, label %block_401a60, label %block_4019fe

block_40196e:                                     ; preds = %block_401bc0, %block_401967
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401967 ], [ %MEMORY.5, %block_401bc0 ]
  %612 = load i64, i64* %RBP
  %613 = sub i64 %612, 44
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 3
  store i64 %615, i64* %PC
  %616 = inttoptr i64 %613 to i32*
  %617 = load i32, i32* %616
  %618 = zext i32 %617 to i64
  store i64 %618, i64* %RAX, align 8, !tbaa !2428
  %619 = load i32, i32* %EAX
  %620 = zext i32 %619 to i64
  %621 = load i64, i64* %RBP
  %622 = sub i64 %621, 56
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 3
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %622 to i32*
  %626 = load i32, i32* %625
  %627 = sub i32 %619, %626
  %628 = icmp ult i32 %619, %626
  %629 = zext i1 %628 to i8
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %629, i8* %630, align 1, !tbaa !2432
  %631 = and i32 %627, 255
  %632 = call i32 @llvm.ctpop.i32(i32 %631) #16
  %633 = trunc i32 %632 to i8
  %634 = and i8 %633, 1
  %635 = xor i8 %634, 1
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %635, i8* %636, align 1, !tbaa !2446
  %637 = xor i32 %626, %619
  %638 = xor i32 %637, %627
  %639 = lshr i32 %638, 4
  %640 = trunc i32 %639 to i8
  %641 = and i8 %640, 1
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %641, i8* %642, align 1, !tbaa !2447
  %643 = icmp eq i32 %627, 0
  %644 = zext i1 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %644, i8* %645, align 1, !tbaa !2448
  %646 = lshr i32 %627, 31
  %647 = trunc i32 %646 to i8
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %647, i8* %648, align 1, !tbaa !2449
  %649 = lshr i32 %619, 31
  %650 = lshr i32 %626, 31
  %651 = xor i32 %650, %649
  %652 = xor i32 %646, %649
  %653 = add nuw nsw i32 %652, %651
  %654 = icmp eq i32 %653, 2
  %655 = zext i1 %654 to i8
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %655, i8* %656, align 1, !tbaa !2450
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 607
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 6
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 6
  store i64 %662, i64* %PC
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %664 = load i8, i8* %663, align 1, !tbaa !2449
  %665 = icmp ne i8 %664, 0
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %667 = load i8, i8* %666, align 1, !tbaa !2450
  %668 = icmp ne i8 %667, 0
  %669 = xor i1 %665, %668
  %670 = xor i1 %669, true
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %673 = select i1 %669, i64 %660, i64 %658
  store i64 %673, i64* %672, align 8, !tbaa !2428
  %674 = load i8, i8* %BRANCH_TAKEN
  %675 = icmp eq i8 %674, 1
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 5
  br i1 %675, label %block_401bd3, label %block_40197a

block_4019fe:                                     ; preds = %block_4019f2
  %678 = load i64, i64* %RBP
  %679 = sub i64 %678, 8
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 4
  store i64 %681, i64* %PC
  %682 = inttoptr i64 %679 to i64*
  %683 = load i64, i64* %682
  store i64 %683, i64* %RAX, align 8, !tbaa !2428
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 12
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 3
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to i32*
  %689 = load i32, i32* %688
  %690 = zext i32 %689 to i64
  store i64 %690, i64* %RCX, align 8, !tbaa !2428
  %691 = load i64, i64* %RCX
  %692 = load i64, i64* %RBP
  %693 = sub i64 %692, 44
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 4
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %693 to i32*
  %697 = load i32, i32* %696
  %698 = shl i64 %691, 32
  %699 = ashr exact i64 %698, 32
  %700 = sext i32 %697 to i64
  %701 = mul nsw i64 %700, %699
  %702 = trunc i64 %701 to i32
  %703 = and i64 %701, 4294967295
  store i64 %703, i64* %RCX, align 8, !tbaa !2428
  %704 = shl i64 %701, 32
  %705 = ashr exact i64 %704, 32
  %706 = icmp ne i64 %705, %701
  %707 = zext i1 %706 to i8
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %707, i8* %708, align 1, !tbaa !2432
  %709 = and i32 %702, 255
  %710 = call i32 @llvm.ctpop.i32(i32 %709) #16
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  %713 = xor i8 %712, 1
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %713, i8* %714, align 1, !tbaa !2446
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %715, align 1, !tbaa !2447
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %716, align 1, !tbaa !2448
  %717 = lshr i32 %702, 31
  %718 = trunc i32 %717 to i8
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %718, i8* %719, align 1, !tbaa !2449
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %707, i8* %720, align 1, !tbaa !2450
  %721 = load i64, i64* %RCX
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 52
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 3
  store i64 %725, i64* %PC
  %726 = trunc i64 %721 to i32
  %727 = inttoptr i64 %723 to i32*
  %728 = load i32, i32* %727
  %729 = add i32 %728, %726
  %730 = zext i32 %729 to i64
  store i64 %730, i64* %RCX, align 8, !tbaa !2428
  %731 = icmp ult i32 %729, %726
  %732 = icmp ult i32 %729, %728
  %733 = or i1 %731, %732
  %734 = zext i1 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %734, i8* %735, align 1, !tbaa !2432
  %736 = and i32 %729, 255
  %737 = call i32 @llvm.ctpop.i32(i32 %736) #16
  %738 = trunc i32 %737 to i8
  %739 = and i8 %738, 1
  %740 = xor i8 %739, 1
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %740, i8* %741, align 1, !tbaa !2446
  %742 = xor i32 %728, %726
  %743 = xor i32 %742, %729
  %744 = lshr i32 %743, 4
  %745 = trunc i32 %744 to i8
  %746 = and i8 %745, 1
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %746, i8* %747, align 1, !tbaa !2447
  %748 = icmp eq i32 %729, 0
  %749 = zext i1 %748 to i8
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %749, i8* %750, align 1, !tbaa !2448
  %751 = lshr i32 %729, 31
  %752 = trunc i32 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %752, i8* %753, align 1, !tbaa !2449
  %754 = lshr i32 %726, 31
  %755 = lshr i32 %728, 31
  %756 = xor i32 %751, %754
  %757 = xor i32 %751, %755
  %758 = add nuw nsw i32 %756, %757
  %759 = icmp eq i32 %758, 2
  %760 = zext i1 %759 to i8
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %760, i8* %761, align 1, !tbaa !2450
  %762 = load i32, i32* %ECX
  %763 = zext i32 %762 to i64
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 3
  store i64 %765, i64* %PC
  %766 = shl i64 %763, 32
  %767 = ashr exact i64 %766, 32
  store i64 %767, i64* %RDX, align 8, !tbaa !2428
  %768 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %769 = load i64, i64* %RAX
  %770 = load i64, i64* %RDX
  %771 = mul i64 %770, 4
  %772 = add i64 %771, %769
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 5
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %772 to float*
  %776 = load float, float* %775
  %777 = bitcast i8* %768 to float*
  store float %776, float* %777, align 1, !tbaa !2452
  %778 = getelementptr inbounds i8, i8* %768, i64 4
  %779 = bitcast i8* %778 to float*
  store float 0.000000e+00, float* %779, align 1, !tbaa !2452
  %780 = getelementptr inbounds i8, i8* %768, i64 8
  %781 = bitcast i8* %780 to float*
  store float 0.000000e+00, float* %781, align 1, !tbaa !2452
  %782 = getelementptr inbounds i8, i8* %768, i64 12
  %783 = bitcast i8* %782 to float*
  store float 0.000000e+00, float* %783, align 1, !tbaa !2452
  %784 = load i64, i64* %RBP
  %785 = sub i64 %784, 36
  %786 = bitcast %union.vec128_t* %XMM0 to i8*
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 5
  store i64 %788, i64* %PC
  %789 = bitcast i8* %786 to <2 x float>*
  %790 = load <2 x float>, <2 x float>* %789, align 1
  %791 = extractelement <2 x float> %790, i32 0
  %792 = inttoptr i64 %785 to float*
  store float %791, float* %792
  %793 = load i64, i64* %RBP
  %794 = sub i64 %793, 8
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 4
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i64*
  %798 = load i64, i64* %797
  store i64 %798, i64* %RAX, align 8, !tbaa !2428
  %799 = load i64, i64* %RBP
  %800 = sub i64 %799, 12
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 3
  store i64 %802, i64* %PC
  %803 = inttoptr i64 %800 to i32*
  %804 = load i32, i32* %803
  %805 = zext i32 %804 to i64
  store i64 %805, i64* %RCX, align 8, !tbaa !2428
  %806 = load i64, i64* %RCX
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 44
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 4
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i32*
  %812 = load i32, i32* %811
  %813 = shl i64 %806, 32
  %814 = ashr exact i64 %813, 32
  %815 = sext i32 %812 to i64
  %816 = mul nsw i64 %815, %814
  %817 = trunc i64 %816 to i32
  %818 = and i64 %816, 4294967295
  store i64 %818, i64* %RCX, align 8, !tbaa !2428
  %819 = shl i64 %816, 32
  %820 = ashr exact i64 %819, 32
  %821 = icmp ne i64 %820, %816
  %822 = zext i1 %821 to i8
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %822, i8* %823, align 1, !tbaa !2432
  %824 = and i32 %817, 255
  %825 = call i32 @llvm.ctpop.i32(i32 %824) #16
  %826 = trunc i32 %825 to i8
  %827 = and i8 %826, 1
  %828 = xor i8 %827, 1
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %828, i8* %829, align 1, !tbaa !2446
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %830, align 1, !tbaa !2447
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %831, align 1, !tbaa !2448
  %832 = lshr i32 %817, 31
  %833 = trunc i32 %832 to i8
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %833, i8* %834, align 1, !tbaa !2449
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %822, i8* %835, align 1, !tbaa !2450
  %836 = load i64, i64* %RCX
  %837 = load i64, i64* %RBP
  %838 = sub i64 %837, 44
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 3
  store i64 %840, i64* %PC
  %841 = trunc i64 %836 to i32
  %842 = inttoptr i64 %838 to i32*
  %843 = load i32, i32* %842
  %844 = add i32 %843, %841
  %845 = zext i32 %844 to i64
  store i64 %845, i64* %RCX, align 8, !tbaa !2428
  %846 = icmp ult i32 %844, %841
  %847 = icmp ult i32 %844, %843
  %848 = or i1 %846, %847
  %849 = zext i1 %848 to i8
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %849, i8* %850, align 1, !tbaa !2432
  %851 = and i32 %844, 255
  %852 = call i32 @llvm.ctpop.i32(i32 %851) #16
  %853 = trunc i32 %852 to i8
  %854 = and i8 %853, 1
  %855 = xor i8 %854, 1
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %855, i8* %856, align 1, !tbaa !2446
  %857 = xor i32 %843, %841
  %858 = xor i32 %857, %844
  %859 = lshr i32 %858, 4
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %861, i8* %862, align 1, !tbaa !2447
  %863 = icmp eq i32 %844, 0
  %864 = zext i1 %863 to i8
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %864, i8* %865, align 1, !tbaa !2448
  %866 = lshr i32 %844, 31
  %867 = trunc i32 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %867, i8* %868, align 1, !tbaa !2449
  %869 = lshr i32 %841, 31
  %870 = lshr i32 %843, 31
  %871 = xor i32 %866, %869
  %872 = xor i32 %866, %870
  %873 = add nuw nsw i32 %871, %872
  %874 = icmp eq i32 %873, 2
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %875, i8* %876, align 1, !tbaa !2450
  %877 = load i32, i32* %ECX
  %878 = zext i32 %877 to i64
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 3
  store i64 %880, i64* %PC
  %881 = shl i64 %878, 32
  %882 = ashr exact i64 %881, 32
  store i64 %882, i64* %RDX, align 8, !tbaa !2428
  %883 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %884 = load i64, i64* %RAX
  %885 = load i64, i64* %RDX
  %886 = mul i64 %885, 4
  %887 = add i64 %886, %884
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 5
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to float*
  %891 = load float, float* %890
  %892 = bitcast i8* %883 to float*
  store float %891, float* %892, align 1, !tbaa !2452
  %893 = getelementptr inbounds i8, i8* %883, i64 4
  %894 = bitcast i8* %893 to float*
  store float 0.000000e+00, float* %894, align 1, !tbaa !2452
  %895 = getelementptr inbounds i8, i8* %883, i64 8
  %896 = bitcast i8* %895 to float*
  store float 0.000000e+00, float* %896, align 1, !tbaa !2452
  %897 = getelementptr inbounds i8, i8* %883, i64 12
  %898 = bitcast i8* %897 to float*
  store float 0.000000e+00, float* %898, align 1, !tbaa !2452
  %899 = load i64, i64* %RBP
  %900 = sub i64 %899, 8
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 4
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i64*
  %904 = load i64, i64* %903
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = load i64, i64* %RBP
  %906 = sub i64 %905, 12
  %907 = load i64, i64* %PC
  %908 = add i64 %907, 3
  store i64 %908, i64* %PC
  %909 = inttoptr i64 %906 to i32*
  %910 = load i32, i32* %909
  %911 = zext i32 %910 to i64
  store i64 %911, i64* %RCX, align 8, !tbaa !2428
  %912 = load i64, i64* %RCX
  %913 = load i64, i64* %RBP
  %914 = sub i64 %913, 44
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 4
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %914 to i32*
  %918 = load i32, i32* %917
  %919 = shl i64 %912, 32
  %920 = ashr exact i64 %919, 32
  %921 = sext i32 %918 to i64
  %922 = mul nsw i64 %921, %920
  %923 = trunc i64 %922 to i32
  %924 = and i64 %922, 4294967295
  store i64 %924, i64* %RCX, align 8, !tbaa !2428
  %925 = shl i64 %922, 32
  %926 = ashr exact i64 %925, 32
  %927 = icmp ne i64 %926, %922
  %928 = zext i1 %927 to i8
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %928, i8* %929, align 1, !tbaa !2432
  %930 = and i32 %923, 255
  %931 = call i32 @llvm.ctpop.i32(i32 %930) #16
  %932 = trunc i32 %931 to i8
  %933 = and i8 %932, 1
  %934 = xor i8 %933, 1
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %934, i8* %935, align 1, !tbaa !2446
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %936, align 1, !tbaa !2447
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %937, align 1, !tbaa !2448
  %938 = lshr i32 %923, 31
  %939 = trunc i32 %938 to i8
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %939, i8* %940, align 1, !tbaa !2449
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %928, i8* %941, align 1, !tbaa !2450
  %942 = load i64, i64* %RCX
  %943 = load i64, i64* %RBP
  %944 = sub i64 %943, 52
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 3
  store i64 %946, i64* %PC
  %947 = trunc i64 %942 to i32
  %948 = inttoptr i64 %944 to i32*
  %949 = load i32, i32* %948
  %950 = add i32 %949, %947
  %951 = zext i32 %950 to i64
  store i64 %951, i64* %RCX, align 8, !tbaa !2428
  %952 = icmp ult i32 %950, %947
  %953 = icmp ult i32 %950, %949
  %954 = or i1 %952, %953
  %955 = zext i1 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %955, i8* %956, align 1, !tbaa !2432
  %957 = and i32 %950, 255
  %958 = call i32 @llvm.ctpop.i32(i32 %957) #16
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = xor i8 %960, 1
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %961, i8* %962, align 1, !tbaa !2446
  %963 = xor i32 %949, %947
  %964 = xor i32 %963, %950
  %965 = lshr i32 %964, 4
  %966 = trunc i32 %965 to i8
  %967 = and i8 %966, 1
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %967, i8* %968, align 1, !tbaa !2447
  %969 = icmp eq i32 %950, 0
  %970 = zext i1 %969 to i8
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %970, i8* %971, align 1, !tbaa !2448
  %972 = lshr i32 %950, 31
  %973 = trunc i32 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %973, i8* %974, align 1, !tbaa !2449
  %975 = lshr i32 %947, 31
  %976 = lshr i32 %949, 31
  %977 = xor i32 %972, %975
  %978 = xor i32 %972, %976
  %979 = add nuw nsw i32 %977, %978
  %980 = icmp eq i32 %979, 2
  %981 = zext i1 %980 to i8
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %981, i8* %982, align 1, !tbaa !2450
  %983 = load i32, i32* %ECX
  %984 = zext i32 %983 to i64
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 3
  store i64 %986, i64* %PC
  %987 = shl i64 %984, 32
  %988 = ashr exact i64 %987, 32
  store i64 %988, i64* %RDX, align 8, !tbaa !2428
  %989 = load i64, i64* %RAX
  %990 = load i64, i64* %RDX
  %991 = mul i64 %990, 4
  %992 = add i64 %991, %989
  %993 = bitcast %union.vec128_t* %XMM0 to i8*
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 5
  store i64 %995, i64* %PC
  %996 = bitcast i8* %993 to <2 x float>*
  %997 = load <2 x float>, <2 x float>* %996, align 1
  %998 = extractelement <2 x float> %997, i32 0
  %999 = inttoptr i64 %992 to float*
  store float %998, float* %999
  %1000 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1001 = load i64, i64* %RBP
  %1002 = sub i64 %1001, 36
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 5
  store i64 %1004, i64* %PC
  %1005 = inttoptr i64 %1002 to float*
  %1006 = load float, float* %1005
  %1007 = bitcast i8* %1000 to float*
  store float %1006, float* %1007, align 1, !tbaa !2452
  %1008 = getelementptr inbounds i8, i8* %1000, i64 4
  %1009 = bitcast i8* %1008 to float*
  store float 0.000000e+00, float* %1009, align 1, !tbaa !2452
  %1010 = getelementptr inbounds i8, i8* %1000, i64 8
  %1011 = bitcast i8* %1010 to float*
  store float 0.000000e+00, float* %1011, align 1, !tbaa !2452
  %1012 = getelementptr inbounds i8, i8* %1000, i64 12
  %1013 = bitcast i8* %1012 to float*
  store float 0.000000e+00, float* %1013, align 1, !tbaa !2452
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 8
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 4
  store i64 %1017, i64* %PC
  %1018 = inttoptr i64 %1015 to i64*
  %1019 = load i64, i64* %1018
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = load i64, i64* %RBP
  %1021 = sub i64 %1020, 12
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 3
  store i64 %1023, i64* %PC
  %1024 = inttoptr i64 %1021 to i32*
  %1025 = load i32, i32* %1024
  %1026 = zext i32 %1025 to i64
  store i64 %1026, i64* %RCX, align 8, !tbaa !2428
  %1027 = load i64, i64* %RCX
  %1028 = load i64, i64* %RBP
  %1029 = sub i64 %1028, 44
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 4
  store i64 %1031, i64* %PC
  %1032 = inttoptr i64 %1029 to i32*
  %1033 = load i32, i32* %1032
  %1034 = shl i64 %1027, 32
  %1035 = ashr exact i64 %1034, 32
  %1036 = sext i32 %1033 to i64
  %1037 = mul nsw i64 %1036, %1035
  %1038 = trunc i64 %1037 to i32
  %1039 = and i64 %1037, 4294967295
  store i64 %1039, i64* %RCX, align 8, !tbaa !2428
  %1040 = shl i64 %1037, 32
  %1041 = ashr exact i64 %1040, 32
  %1042 = icmp ne i64 %1041, %1037
  %1043 = zext i1 %1042 to i8
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1043, i8* %1044, align 1, !tbaa !2432
  %1045 = and i32 %1038, 255
  %1046 = call i32 @llvm.ctpop.i32(i32 %1045) #16
  %1047 = trunc i32 %1046 to i8
  %1048 = and i8 %1047, 1
  %1049 = xor i8 %1048, 1
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1049, i8* %1050, align 1, !tbaa !2446
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1051, align 1, !tbaa !2447
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1052, align 1, !tbaa !2448
  %1053 = lshr i32 %1038, 31
  %1054 = trunc i32 %1053 to i8
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1054, i8* %1055, align 1, !tbaa !2449
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1043, i8* %1056, align 1, !tbaa !2450
  %1057 = load i64, i64* %RCX
  %1058 = load i64, i64* %RBP
  %1059 = sub i64 %1058, 44
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 3
  store i64 %1061, i64* %PC
  %1062 = trunc i64 %1057 to i32
  %1063 = inttoptr i64 %1059 to i32*
  %1064 = load i32, i32* %1063
  %1065 = add i32 %1064, %1062
  %1066 = zext i32 %1065 to i64
  store i64 %1066, i64* %RCX, align 8, !tbaa !2428
  %1067 = icmp ult i32 %1065, %1062
  %1068 = icmp ult i32 %1065, %1064
  %1069 = or i1 %1067, %1068
  %1070 = zext i1 %1069 to i8
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1070, i8* %1071, align 1, !tbaa !2432
  %1072 = and i32 %1065, 255
  %1073 = call i32 @llvm.ctpop.i32(i32 %1072) #16
  %1074 = trunc i32 %1073 to i8
  %1075 = and i8 %1074, 1
  %1076 = xor i8 %1075, 1
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1076, i8* %1077, align 1, !tbaa !2446
  %1078 = xor i32 %1064, %1062
  %1079 = xor i32 %1078, %1065
  %1080 = lshr i32 %1079, 4
  %1081 = trunc i32 %1080 to i8
  %1082 = and i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1082, i8* %1083, align 1, !tbaa !2447
  %1084 = icmp eq i32 %1065, 0
  %1085 = zext i1 %1084 to i8
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1085, i8* %1086, align 1, !tbaa !2448
  %1087 = lshr i32 %1065, 31
  %1088 = trunc i32 %1087 to i8
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1088, i8* %1089, align 1, !tbaa !2449
  %1090 = lshr i32 %1062, 31
  %1091 = lshr i32 %1064, 31
  %1092 = xor i32 %1087, %1090
  %1093 = xor i32 %1087, %1091
  %1094 = add nuw nsw i32 %1092, %1093
  %1095 = icmp eq i32 %1094, 2
  %1096 = zext i1 %1095 to i8
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1096, i8* %1097, align 1, !tbaa !2450
  %1098 = load i32, i32* %ECX
  %1099 = zext i32 %1098 to i64
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 3
  store i64 %1101, i64* %PC
  %1102 = shl i64 %1099, 32
  %1103 = ashr exact i64 %1102, 32
  store i64 %1103, i64* %RDX, align 8, !tbaa !2428
  %1104 = load i64, i64* %RAX
  %1105 = load i64, i64* %RDX
  %1106 = mul i64 %1105, 4
  %1107 = add i64 %1106, %1104
  %1108 = bitcast %union.vec128_t* %XMM0 to i8*
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 5
  store i64 %1110, i64* %PC
  %1111 = bitcast i8* %1108 to <2 x float>*
  %1112 = load <2 x float>, <2 x float>* %1111, align 1
  %1113 = extractelement <2 x float> %1112, i32 0
  %1114 = inttoptr i64 %1107 to float*
  store float %1113, float* %1114
  br label %block_401a60

block_4019e7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 11
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 6
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 6
  store i64 %1120, i64* %PC
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1122 = load i8, i8* %1121, align 1, !tbaa !2446
  store i8 %1122, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1124 = icmp ne i8 %1122, 0
  %1125 = select i1 %1124, i64 %1116, i64 %1118
  store i64 %1125, i64* %1123, align 8, !tbaa !2428
  %1126 = load i8, i8* %BRANCH_TAKEN
  %1127 = icmp eq i8 %1126, 1
  br i1 %1127, label %block_4019f2, label %block_4019ed

block_40197a:                                     ; preds = %block_40196e
  store i64 %677, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %1128 = load i64, i64* %RBP
  %1129 = sub i64 %1128, 44
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 3
  store i64 %1131, i64* %PC
  %1132 = inttoptr i64 %1129 to i32*
  %1133 = load i32, i32* %1132
  %1134 = zext i32 %1133 to i64
  store i64 %1134, i64* %RAX, align 8, !tbaa !2428
  %1135 = load i64, i64* %RAX
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 3
  store i64 %1137, i64* %PC
  %1138 = trunc i64 %1135 to i32
  %1139 = add i32 1, %1138
  %1140 = zext i32 %1139 to i64
  store i64 %1140, i64* %RAX, align 8, !tbaa !2428
  %1141 = icmp ult i32 %1139, %1138
  %1142 = icmp ult i32 %1139, 1
  %1143 = or i1 %1141, %1142
  %1144 = zext i1 %1143 to i8
  %1145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1144, i8* %1145, align 1, !tbaa !2432
  %1146 = and i32 %1139, 255
  %1147 = call i32 @llvm.ctpop.i32(i32 %1146) #16
  %1148 = trunc i32 %1147 to i8
  %1149 = and i8 %1148, 1
  %1150 = xor i8 %1149, 1
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1150, i8* %1151, align 1, !tbaa !2446
  %1152 = xor i64 1, %1135
  %1153 = trunc i64 %1152 to i32
  %1154 = xor i32 %1153, %1139
  %1155 = lshr i32 %1154, 4
  %1156 = trunc i32 %1155 to i8
  %1157 = and i8 %1156, 1
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1157, i8* %1158, align 1, !tbaa !2447
  %1159 = icmp eq i32 %1139, 0
  %1160 = zext i1 %1159 to i8
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1160, i8* %1161, align 1, !tbaa !2448
  %1162 = lshr i32 %1139, 31
  %1163 = trunc i32 %1162 to i8
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1163, i8* %1164, align 1, !tbaa !2449
  %1165 = lshr i32 %1138, 31
  %1166 = xor i32 %1162, %1165
  %1167 = add nuw nsw i32 %1166, %1162
  %1168 = icmp eq i32 %1167, 2
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1169, i8* %1170, align 1, !tbaa !2450
  %1171 = load i64, i64* %RBP
  %1172 = sub i64 %1171, 48
  %1173 = load i32, i32* %EAX
  %1174 = zext i32 %1173 to i64
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 3
  store i64 %1176, i64* %PC
  %1177 = inttoptr i64 %1172 to i32*
  store i32 %1173, i32* %1177
  %1178 = load i64, i64* %RBP
  %1179 = sub i64 %1178, 16
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 3
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1179 to i32*
  %1183 = load i32, i32* %1182
  %1184 = zext i32 %1183 to i64
  store i64 %1184, i64* %RAX, align 8, !tbaa !2428
  %1185 = load i64, i64* %RAX
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 44
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 3
  store i64 %1189, i64* %PC
  %1190 = trunc i64 %1185 to i32
  %1191 = inttoptr i64 %1187 to i32*
  %1192 = load i32, i32* %1191
  %1193 = sub i32 %1190, %1192
  %1194 = zext i32 %1193 to i64
  store i64 %1194, i64* %RAX, align 8, !tbaa !2428
  %1195 = icmp ult i32 %1190, %1192
  %1196 = zext i1 %1195 to i8
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1196, i8* %1197, align 1, !tbaa !2432
  %1198 = and i32 %1193, 255
  %1199 = call i32 @llvm.ctpop.i32(i32 %1198) #16
  %1200 = trunc i32 %1199 to i8
  %1201 = and i8 %1200, 1
  %1202 = xor i8 %1201, 1
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1202, i8* %1203, align 1, !tbaa !2446
  %1204 = xor i32 %1192, %1190
  %1205 = xor i32 %1204, %1193
  %1206 = lshr i32 %1205, 4
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1208, i8* %1209, align 1, !tbaa !2447
  %1210 = icmp eq i32 %1193, 0
  %1211 = zext i1 %1210 to i8
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1211, i8* %1212, align 1, !tbaa !2448
  %1213 = lshr i32 %1193, 31
  %1214 = trunc i32 %1213 to i8
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1214, i8* %1215, align 1, !tbaa !2449
  %1216 = lshr i32 %1190, 31
  %1217 = lshr i32 %1192, 31
  %1218 = xor i32 %1217, %1216
  %1219 = xor i32 %1213, %1216
  %1220 = add nuw nsw i32 %1219, %1218
  %1221 = icmp eq i32 %1220, 2
  %1222 = zext i1 %1221 to i8
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1222, i8* %1223, align 1, !tbaa !2450
  %1224 = load i64, i64* %RBP
  %1225 = sub i64 %1224, 8
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 4
  store i64 %1227, i64* %PC
  %1228 = inttoptr i64 %1225 to i64*
  %1229 = load i64, i64* %1228
  store i64 %1229, i64* %RCX, align 8, !tbaa !2428
  %1230 = load i64, i64* %RBP
  %1231 = sub i64 %1230, 12
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 3
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1231 to i32*
  %1235 = load i32, i32* %1234
  %1236 = zext i32 %1235 to i64
  store i64 %1236, i64* %RSI, align 8, !tbaa !2428
  %1237 = load i64, i64* %RSI
  %1238 = load i64, i64* %RBP
  %1239 = sub i64 %1238, 44
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 4
  store i64 %1241, i64* %PC
  %1242 = inttoptr i64 %1239 to i32*
  %1243 = load i32, i32* %1242
  %1244 = shl i64 %1237, 32
  %1245 = ashr exact i64 %1244, 32
  %1246 = sext i32 %1243 to i64
  %1247 = mul nsw i64 %1246, %1245
  %1248 = trunc i64 %1247 to i32
  %1249 = and i64 %1247, 4294967295
  store i64 %1249, i64* %RSI, align 8, !tbaa !2428
  %1250 = shl i64 %1247, 32
  %1251 = ashr exact i64 %1250, 32
  %1252 = icmp ne i64 %1251, %1247
  %1253 = zext i1 %1252 to i8
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1253, i8* %1254, align 1, !tbaa !2432
  %1255 = and i32 %1248, 255
  %1256 = call i32 @llvm.ctpop.i32(i32 %1255) #16
  %1257 = trunc i32 %1256 to i8
  %1258 = and i8 %1257, 1
  %1259 = xor i8 %1258, 1
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1259, i8* %1260, align 1, !tbaa !2446
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1261, align 1, !tbaa !2447
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1262, align 1, !tbaa !2448
  %1263 = lshr i32 %1248, 31
  %1264 = trunc i32 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1264, i8* %1265, align 1, !tbaa !2449
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1253, i8* %1266, align 1, !tbaa !2450
  %1267 = load i64, i64* %RSI
  %1268 = load i64, i64* %RBP
  %1269 = sub i64 %1268, 44
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 3
  store i64 %1271, i64* %PC
  %1272 = trunc i64 %1267 to i32
  %1273 = inttoptr i64 %1269 to i32*
  %1274 = load i32, i32* %1273
  %1275 = add i32 %1274, %1272
  %1276 = zext i32 %1275 to i64
  store i64 %1276, i64* %RSI, align 8, !tbaa !2428
  %1277 = icmp ult i32 %1275, %1272
  %1278 = icmp ult i32 %1275, %1274
  %1279 = or i1 %1277, %1278
  %1280 = zext i1 %1279 to i8
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1280, i8* %1281, align 1, !tbaa !2432
  %1282 = and i32 %1275, 255
  %1283 = call i32 @llvm.ctpop.i32(i32 %1282) #16
  %1284 = trunc i32 %1283 to i8
  %1285 = and i8 %1284, 1
  %1286 = xor i8 %1285, 1
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1286, i8* %1287, align 1, !tbaa !2446
  %1288 = xor i32 %1274, %1272
  %1289 = xor i32 %1288, %1275
  %1290 = lshr i32 %1289, 4
  %1291 = trunc i32 %1290 to i8
  %1292 = and i8 %1291, 1
  %1293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1292, i8* %1293, align 1, !tbaa !2447
  %1294 = icmp eq i32 %1275, 0
  %1295 = zext i1 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1295, i8* %1296, align 1, !tbaa !2448
  %1297 = lshr i32 %1275, 31
  %1298 = trunc i32 %1297 to i8
  %1299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1298, i8* %1299, align 1, !tbaa !2449
  %1300 = lshr i32 %1272, 31
  %1301 = lshr i32 %1274, 31
  %1302 = xor i32 %1297, %1300
  %1303 = xor i32 %1297, %1301
  %1304 = add nuw nsw i32 %1302, %1303
  %1305 = icmp eq i32 %1304, 2
  %1306 = zext i1 %1305 to i8
  %1307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1306, i8* %1307, align 1, !tbaa !2450
  %1308 = load i32, i32* %ESI
  %1309 = zext i32 %1308 to i64
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 3
  store i64 %1311, i64* %PC
  %1312 = shl i64 %1309, 32
  %1313 = ashr exact i64 %1312, 32
  store i64 %1313, i64* %RDI, align 8, !tbaa !2428
  %1314 = load i64, i64* %RDI
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 4
  store i64 %1316, i64* %PC
  %1317 = shl i64 %1314, 1
  %1318 = icmp slt i64 %1317, 0
  %1319 = shl i64 %1317, 1
  store i64 %1319, i64* %RDI, align 8, !tbaa !2428
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1321 = zext i1 %1318 to i8
  store i8 %1321, i8* %1320, align 1, !tbaa !2451
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1323 = trunc i64 %1319 to i32
  %1324 = and i32 %1323, 254
  %1325 = call i32 @llvm.ctpop.i32(i32 %1324) #16
  %1326 = trunc i32 %1325 to i8
  %1327 = and i8 %1326, 1
  %1328 = xor i8 %1327, 1
  store i8 %1328, i8* %1322, align 1, !tbaa !2451
  %1329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1329, align 1, !tbaa !2451
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1331 = icmp eq i64 %1319, 0
  %1332 = zext i1 %1331 to i8
  store i8 %1332, i8* %1330, align 1, !tbaa !2451
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1334 = lshr i64 %1319, 63
  %1335 = trunc i64 %1334 to i8
  store i8 %1335, i8* %1333, align 1, !tbaa !2451
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1336, align 1, !tbaa !2451
  %1337 = load i64, i64* %RCX
  %1338 = load i64, i64* %RDI
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 3
  store i64 %1340, i64* %PC
  %1341 = add i64 %1338, %1337
  store i64 %1341, i64* %RCX, align 8, !tbaa !2428
  %1342 = icmp ult i64 %1341, %1337
  %1343 = icmp ult i64 %1341, %1338
  %1344 = or i1 %1342, %1343
  %1345 = zext i1 %1344 to i8
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1345, i8* %1346, align 1, !tbaa !2432
  %1347 = trunc i64 %1341 to i32
  %1348 = and i32 %1347, 255
  %1349 = call i32 @llvm.ctpop.i32(i32 %1348) #16
  %1350 = trunc i32 %1349 to i8
  %1351 = and i8 %1350, 1
  %1352 = xor i8 %1351, 1
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1352, i8* %1353, align 1, !tbaa !2446
  %1354 = xor i64 %1338, %1337
  %1355 = xor i64 %1354, %1341
  %1356 = lshr i64 %1355, 4
  %1357 = trunc i64 %1356 to i8
  %1358 = and i8 %1357, 1
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1358, i8* %1359, align 1, !tbaa !2447
  %1360 = icmp eq i64 %1341, 0
  %1361 = zext i1 %1360 to i8
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1361, i8* %1362, align 1, !tbaa !2448
  %1363 = lshr i64 %1341, 63
  %1364 = trunc i64 %1363 to i8
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1364, i8* %1365, align 1, !tbaa !2449
  %1366 = lshr i64 %1337, 63
  %1367 = lshr i64 %1338, 63
  %1368 = xor i64 %1363, %1366
  %1369 = xor i64 %1363, %1367
  %1370 = add nuw nsw i64 %1368, %1369
  %1371 = icmp eq i64 %1370, 2
  %1372 = zext i1 %1371 to i8
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1372, i8* %1373, align 1, !tbaa !2450
  %1374 = load i32, i32* %EAX
  %1375 = zext i32 %1374 to i64
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 2
  store i64 %1377, i64* %PC
  %1378 = and i64 %1375, 4294967295
  store i64 %1378, i64* %RDI, align 8, !tbaa !2428
  %1379 = load i64, i64* %RCX
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 3
  store i64 %1381, i64* %PC
  store i64 %1379, i64* %RSI, align 8, !tbaa !2428
  %1382 = load i64, i64* %PC
  %1383 = add i64 %1382, 4517
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 5
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 5
  store i64 %1387, i64* %PC
  %1388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1389 = load i64, i64* %1388, align 8, !tbaa !2428
  %1390 = add i64 %1389, -8
  %1391 = inttoptr i64 %1390 to i64*
  store i64 %1385, i64* %1391
  store i64 %1390, i64* %1388, align 8, !tbaa !2428
  %1392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1383, i64* %1392, align 8, !tbaa !2428
  %1393 = load i64, i64* %PC
  %1394 = call %struct.Memory* @sub_402b50_idamax_renamed_(%struct.State* %0, i64 %1393, %struct.Memory* %MEMORY.1)
  %1395 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1396 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1397 = bitcast %union.vec128_t* %XMM0 to i8*
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 3
  store i64 %1399, i64* %PC
  %1400 = bitcast i8* %1396 to i64*
  %1401 = load i64, i64* %1400, align 1
  %1402 = getelementptr inbounds i8, i8* %1396, i64 8
  %1403 = bitcast i8* %1402 to i64*
  %1404 = load i64, i64* %1403, align 1
  %1405 = bitcast i8* %1397 to i64*
  %1406 = load i64, i64* %1405, align 1
  %1407 = getelementptr inbounds i8, i8* %1397, i64 8
  %1408 = bitcast i8* %1407 to i64*
  %1409 = load i64, i64* %1408, align 1
  %1410 = xor i64 %1406, %1401
  %1411 = xor i64 %1409, %1404
  %1412 = trunc i64 %1410 to i32
  %1413 = lshr i64 %1410, 32
  %1414 = trunc i64 %1413 to i32
  %1415 = bitcast i8* %1395 to i32*
  store i32 %1412, i32* %1415, align 1, !tbaa !2454
  %1416 = getelementptr inbounds i8, i8* %1395, i64 4
  %1417 = bitcast i8* %1416 to i32*
  store i32 %1414, i32* %1417, align 1, !tbaa !2454
  %1418 = trunc i64 %1411 to i32
  %1419 = getelementptr inbounds i8, i8* %1395, i64 8
  %1420 = bitcast i8* %1419 to i32*
  store i32 %1418, i32* %1420, align 1, !tbaa !2454
  %1421 = lshr i64 %1411, 32
  %1422 = trunc i64 %1421 to i32
  %1423 = getelementptr inbounds i8, i8* %1395, i64 12
  %1424 = bitcast i8* %1423 to i32*
  store i32 %1422, i32* %1424, align 1, !tbaa !2454
  %1425 = load i64, i64* %RAX
  %1426 = load i64, i64* %RBP
  %1427 = sub i64 %1426, 44
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 3
  store i64 %1429, i64* %PC
  %1430 = trunc i64 %1425 to i32
  %1431 = inttoptr i64 %1427 to i32*
  %1432 = load i32, i32* %1431
  %1433 = add i32 %1432, %1430
  %1434 = zext i32 %1433 to i64
  store i64 %1434, i64* %RAX, align 8, !tbaa !2428
  %1435 = icmp ult i32 %1433, %1430
  %1436 = icmp ult i32 %1433, %1432
  %1437 = or i1 %1435, %1436
  %1438 = zext i1 %1437 to i8
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1438, i8* %1439, align 1, !tbaa !2432
  %1440 = and i32 %1433, 255
  %1441 = call i32 @llvm.ctpop.i32(i32 %1440) #16
  %1442 = trunc i32 %1441 to i8
  %1443 = and i8 %1442, 1
  %1444 = xor i8 %1443, 1
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1444, i8* %1445, align 1, !tbaa !2446
  %1446 = xor i32 %1432, %1430
  %1447 = xor i32 %1446, %1433
  %1448 = lshr i32 %1447, 4
  %1449 = trunc i32 %1448 to i8
  %1450 = and i8 %1449, 1
  %1451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1450, i8* %1451, align 1, !tbaa !2447
  %1452 = icmp eq i32 %1433, 0
  %1453 = zext i1 %1452 to i8
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1453, i8* %1454, align 1, !tbaa !2448
  %1455 = lshr i32 %1433, 31
  %1456 = trunc i32 %1455 to i8
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1456, i8* %1457, align 1, !tbaa !2449
  %1458 = lshr i32 %1430, 31
  %1459 = lshr i32 %1432, 31
  %1460 = xor i32 %1455, %1458
  %1461 = xor i32 %1455, %1459
  %1462 = add nuw nsw i32 %1460, %1461
  %1463 = icmp eq i32 %1462, 2
  %1464 = zext i1 %1463 to i8
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1464, i8* %1465, align 1, !tbaa !2450
  %1466 = load i64, i64* %RBP
  %1467 = sub i64 %1466, 52
  %1468 = load i32, i32* %EAX
  %1469 = zext i32 %1468 to i64
  %1470 = load i64, i64* %PC
  %1471 = add i64 %1470, 3
  store i64 %1471, i64* %PC
  %1472 = inttoptr i64 %1467 to i32*
  store i32 %1468, i32* %1472
  %1473 = load i64, i64* %RBP
  %1474 = sub i64 %1473, 52
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 3
  store i64 %1476, i64* %PC
  %1477 = inttoptr i64 %1474 to i32*
  %1478 = load i32, i32* %1477
  %1479 = zext i32 %1478 to i64
  store i64 %1479, i64* %RAX, align 8, !tbaa !2428
  %1480 = load i64, i64* %RBP
  %1481 = sub i64 %1480, 24
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 4
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i64*
  %1485 = load i64, i64* %1484
  store i64 %1485, i64* %RCX, align 8, !tbaa !2428
  %1486 = load i64, i64* %RBP
  %1487 = sub i64 %1486, 44
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 4
  store i64 %1489, i64* %PC
  %1490 = inttoptr i64 %1487 to i32*
  %1491 = load i32, i32* %1490
  %1492 = sext i32 %1491 to i64
  store i64 %1492, i64* %RSI, align 8, !tbaa !2428
  %1493 = load i64, i64* %RCX
  %1494 = load i64, i64* %RSI
  %1495 = mul i64 %1494, 4
  %1496 = add i64 %1495, %1493
  %1497 = load i32, i32* %EAX
  %1498 = zext i32 %1497 to i64
  %1499 = load i64, i64* %PC
  %1500 = add i64 %1499, 3
  store i64 %1500, i64* %PC
  %1501 = inttoptr i64 %1496 to i32*
  store i32 %1497, i32* %1501
  %1502 = load i64, i64* %RBP
  %1503 = sub i64 %1502, 8
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 4
  store i64 %1505, i64* %PC
  %1506 = inttoptr i64 %1503 to i64*
  %1507 = load i64, i64* %1506
  store i64 %1507, i64* %RCX, align 8, !tbaa !2428
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 12
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 3
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i32*
  %1513 = load i32, i32* %1512
  %1514 = zext i32 %1513 to i64
  store i64 %1514, i64* %RAX, align 8, !tbaa !2428
  %1515 = load i64, i64* %RAX
  %1516 = load i64, i64* %RBP
  %1517 = sub i64 %1516, 44
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 4
  store i64 %1519, i64* %PC
  %1520 = inttoptr i64 %1517 to i32*
  %1521 = load i32, i32* %1520
  %1522 = shl i64 %1515, 32
  %1523 = ashr exact i64 %1522, 32
  %1524 = sext i32 %1521 to i64
  %1525 = mul nsw i64 %1524, %1523
  %1526 = trunc i64 %1525 to i32
  %1527 = and i64 %1525, 4294967295
  store i64 %1527, i64* %RAX, align 8, !tbaa !2428
  %1528 = shl i64 %1525, 32
  %1529 = ashr exact i64 %1528, 32
  %1530 = icmp ne i64 %1529, %1525
  %1531 = zext i1 %1530 to i8
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1531, i8* %1532, align 1, !tbaa !2432
  %1533 = and i32 %1526, 255
  %1534 = call i32 @llvm.ctpop.i32(i32 %1533) #16
  %1535 = trunc i32 %1534 to i8
  %1536 = and i8 %1535, 1
  %1537 = xor i8 %1536, 1
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1537, i8* %1538, align 1, !tbaa !2446
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1539, align 1, !tbaa !2447
  %1540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1540, align 1, !tbaa !2448
  %1541 = lshr i32 %1526, 31
  %1542 = trunc i32 %1541 to i8
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1542, i8* %1543, align 1, !tbaa !2449
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1531, i8* %1544, align 1, !tbaa !2450
  %1545 = load i64, i64* %RAX
  %1546 = load i64, i64* %RBP
  %1547 = sub i64 %1546, 52
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 3
  store i64 %1549, i64* %PC
  %1550 = trunc i64 %1545 to i32
  %1551 = inttoptr i64 %1547 to i32*
  %1552 = load i32, i32* %1551
  %1553 = add i32 %1552, %1550
  %1554 = zext i32 %1553 to i64
  store i64 %1554, i64* %RAX, align 8, !tbaa !2428
  %1555 = icmp ult i32 %1553, %1550
  %1556 = icmp ult i32 %1553, %1552
  %1557 = or i1 %1555, %1556
  %1558 = zext i1 %1557 to i8
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1558, i8* %1559, align 1, !tbaa !2432
  %1560 = and i32 %1553, 255
  %1561 = call i32 @llvm.ctpop.i32(i32 %1560) #16
  %1562 = trunc i32 %1561 to i8
  %1563 = and i8 %1562, 1
  %1564 = xor i8 %1563, 1
  %1565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1564, i8* %1565, align 1, !tbaa !2446
  %1566 = xor i32 %1552, %1550
  %1567 = xor i32 %1566, %1553
  %1568 = lshr i32 %1567, 4
  %1569 = trunc i32 %1568 to i8
  %1570 = and i8 %1569, 1
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1570, i8* %1571, align 1, !tbaa !2447
  %1572 = icmp eq i32 %1553, 0
  %1573 = zext i1 %1572 to i8
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1573, i8* %1574, align 1, !tbaa !2448
  %1575 = lshr i32 %1553, 31
  %1576 = trunc i32 %1575 to i8
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1576, i8* %1577, align 1, !tbaa !2449
  %1578 = lshr i32 %1550, 31
  %1579 = lshr i32 %1552, 31
  %1580 = xor i32 %1575, %1578
  %1581 = xor i32 %1575, %1579
  %1582 = add nuw nsw i32 %1580, %1581
  %1583 = icmp eq i32 %1582, 2
  %1584 = zext i1 %1583 to i8
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1584, i8* %1585, align 1, !tbaa !2450
  %1586 = load i32, i32* %EAX
  %1587 = zext i32 %1586 to i64
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 3
  store i64 %1589, i64* %PC
  %1590 = shl i64 %1587, 32
  %1591 = ashr exact i64 %1590, 32
  store i64 %1591, i64* %RSI, align 8, !tbaa !2428
  %1592 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1593 = load i64, i64* %RCX
  %1594 = load i64, i64* %RSI
  %1595 = mul i64 %1594, 4
  %1596 = add i64 %1595, %1593
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 5
  store i64 %1598, i64* %PC
  %1599 = inttoptr i64 %1596 to float*
  %1600 = load float, float* %1599
  %1601 = fpext float %1600 to double
  %1602 = bitcast i8* %1592 to double*
  store double %1601, double* %1602, align 1, !tbaa !2455
  %1603 = bitcast %union.vec128_t* %XMM1 to i8*
  %1604 = bitcast %union.vec128_t* %XMM0 to i8*
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 4
  store i64 %1606, i64* %PC
  %1607 = bitcast i8* %1603 to double*
  %1608 = load double, double* %1607, align 1
  %1609 = bitcast i8* %1604 to double*
  %1610 = load double, double* %1609, align 1
  %1611 = fcmp uno double %1608, %1610
  br i1 %1611, label %1612, label %1624

; <label>:1612:                                   ; preds = %block_40197a
  %1613 = fadd double %1608, %1610
  %1614 = bitcast double %1613 to i64
  %1615 = and i64 %1614, 9221120237041090560
  %1616 = icmp eq i64 %1615, 9218868437227405312
  %1617 = and i64 %1614, 2251799813685247
  %1618 = icmp ne i64 %1617, 0
  %1619 = and i1 %1616, %1618
  br i1 %1619, label %1620, label %1630

; <label>:1620:                                   ; preds = %1612
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1622 = load i64, i64* %1621, align 8, !tbaa !2428
  %1623 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1622, %struct.Memory* %1394) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:1624:                                   ; preds = %block_40197a
  %1625 = fcmp ogt double %1608, %1610
  br i1 %1625, label %1630, label %1626

; <label>:1626:                                   ; preds = %1624
  %1627 = fcmp olt double %1608, %1610
  br i1 %1627, label %1630, label %1628

; <label>:1628:                                   ; preds = %1626
  %1629 = fcmp oeq double %1608, %1610
  br i1 %1629, label %1630, label %1637

; <label>:1630:                                   ; preds = %1628, %1626, %1624, %1612
  %1631 = phi i8 [ 0, %1624 ], [ 0, %1626 ], [ 1, %1628 ], [ 1, %1612 ]
  %1632 = phi i8 [ 0, %1624 ], [ 0, %1626 ], [ 0, %1628 ], [ 1, %1612 ]
  %1633 = phi i8 [ 0, %1624 ], [ 1, %1626 ], [ 0, %1628 ], [ 1, %1612 ]
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1631, i8* %1634, align 1, !tbaa !2451
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1632, i8* %1635, align 1, !tbaa !2451
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1633, i8* %1636, align 1, !tbaa !2451
  br label %1637

; <label>:1637:                                   ; preds = %1630, %1628
  %1638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1638, align 1, !tbaa !2451
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1639, align 1, !tbaa !2451
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1640, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %1620, %1637
  %1641 = phi %struct.Memory* [ %1623, %1620 ], [ %1394, %1637 ]
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 17
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 6
  %1646 = load i64, i64* %PC
  %1647 = add i64 %1646, 6
  store i64 %1647, i64* %PC
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1649 = load i8, i8* %1648, align 1, !tbaa !2448
  %1650 = icmp eq i8 %1649, 0
  %1651 = zext i1 %1650 to i8
  store i8 %1651, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1653 = select i1 %1650, i64 %1643, i64 %1645
  store i64 %1653, i64* %1652, align 8, !tbaa !2428
  %1654 = load i8, i8* %BRANCH_TAKEN
  %1655 = icmp eq i8 %1654, 1
  br i1 %1655, label %block_4019f2, label %block_4019e7

block_4019ed:                                     ; preds = %block_4019e7
  %1656 = load i64, i64* %PC
  %1657 = add i64 %1656, 458
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 5
  store i64 %1659, i64* %PC
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1657, i64* %1660, align 8, !tbaa !2428
  %1661 = load i64, i64* %RBP
  %1662 = sub i64 %1661, 44
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 3
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1662 to i32*
  %1666 = load i32, i32* %1665
  %1667 = zext i32 %1666 to i64
  store i64 %1667, i64* %RAX, align 8, !tbaa !2428
  %1668 = load i64, i64* %RBP
  %1669 = sub i64 %1668, 32
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 4
  store i64 %1671, i64* %PC
  %1672 = inttoptr i64 %1669 to i64*
  %1673 = load i64, i64* %1672
  store i64 %1673, i64* %RCX, align 8, !tbaa !2428
  %1674 = load i64, i64* %RCX
  %1675 = load i32, i32* %EAX
  %1676 = zext i32 %1675 to i64
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 2
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1674 to i32*
  store i32 %1675, i32* %1679
  br label %block_401bc0

block_401a60:                                     ; preds = %block_4019fe, %block_4019f2
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_4019f2 ], [ %MEMORY.0, %block_4019fe ]
  %1680 = load i64, i64* %PC
  %1681 = add i64 %1680, 5
  store i64 %1681, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %1682 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 8
  store i64 %1684, i64* %PC
  %1685 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 72) to double*)
  %1686 = bitcast i8* %1682 to double*
  store double %1685, double* %1686, align 1, !tbaa !2455
  %1687 = getelementptr inbounds i8, i8* %1682, i64 8
  %1688 = bitcast i8* %1687 to double*
  store double 0.000000e+00, double* %1688, align 1, !tbaa !2455
  %1689 = load i64, i64* %RBP
  %1690 = sub i64 %1689, 8
  %1691 = load i64, i64* %PC
  %1692 = add i64 %1691, 4
  store i64 %1692, i64* %PC
  %1693 = inttoptr i64 %1690 to i64*
  %1694 = load i64, i64* %1693
  store i64 %1694, i64* %RAX, align 8, !tbaa !2428
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 12
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699
  %1701 = zext i32 %1700 to i64
  store i64 %1701, i64* %RCX, align 8, !tbaa !2428
  %1702 = load i64, i64* %RCX
  %1703 = load i64, i64* %RBP
  %1704 = sub i64 %1703, 44
  %1705 = load i64, i64* %PC
  %1706 = add i64 %1705, 4
  store i64 %1706, i64* %PC
  %1707 = inttoptr i64 %1704 to i32*
  %1708 = load i32, i32* %1707
  %1709 = shl i64 %1702, 32
  %1710 = ashr exact i64 %1709, 32
  %1711 = sext i32 %1708 to i64
  %1712 = mul nsw i64 %1711, %1710
  %1713 = trunc i64 %1712 to i32
  %1714 = and i64 %1712, 4294967295
  store i64 %1714, i64* %RCX, align 8, !tbaa !2428
  %1715 = shl i64 %1712, 32
  %1716 = ashr exact i64 %1715, 32
  %1717 = icmp ne i64 %1716, %1712
  %1718 = zext i1 %1717 to i8
  %1719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1718, i8* %1719, align 1, !tbaa !2432
  %1720 = and i32 %1713, 255
  %1721 = call i32 @llvm.ctpop.i32(i32 %1720) #16
  %1722 = trunc i32 %1721 to i8
  %1723 = and i8 %1722, 1
  %1724 = xor i8 %1723, 1
  %1725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1724, i8* %1725, align 1, !tbaa !2446
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1726, align 1, !tbaa !2447
  %1727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1727, align 1, !tbaa !2448
  %1728 = lshr i32 %1713, 31
  %1729 = trunc i32 %1728 to i8
  %1730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1729, i8* %1730, align 1, !tbaa !2449
  %1731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1718, i8* %1731, align 1, !tbaa !2450
  %1732 = load i64, i64* %RCX
  %1733 = load i64, i64* %RBP
  %1734 = sub i64 %1733, 44
  %1735 = load i64, i64* %PC
  %1736 = add i64 %1735, 3
  store i64 %1736, i64* %PC
  %1737 = trunc i64 %1732 to i32
  %1738 = inttoptr i64 %1734 to i32*
  %1739 = load i32, i32* %1738
  %1740 = add i32 %1739, %1737
  %1741 = zext i32 %1740 to i64
  store i64 %1741, i64* %RCX, align 8, !tbaa !2428
  %1742 = icmp ult i32 %1740, %1737
  %1743 = icmp ult i32 %1740, %1739
  %1744 = or i1 %1742, %1743
  %1745 = zext i1 %1744 to i8
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1745, i8* %1746, align 1, !tbaa !2432
  %1747 = and i32 %1740, 255
  %1748 = call i32 @llvm.ctpop.i32(i32 %1747) #16
  %1749 = trunc i32 %1748 to i8
  %1750 = and i8 %1749, 1
  %1751 = xor i8 %1750, 1
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1751, i8* %1752, align 1, !tbaa !2446
  %1753 = xor i32 %1739, %1737
  %1754 = xor i32 %1753, %1740
  %1755 = lshr i32 %1754, 4
  %1756 = trunc i32 %1755 to i8
  %1757 = and i8 %1756, 1
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1757, i8* %1758, align 1, !tbaa !2447
  %1759 = icmp eq i32 %1740, 0
  %1760 = zext i1 %1759 to i8
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1760, i8* %1761, align 1, !tbaa !2448
  %1762 = lshr i32 %1740, 31
  %1763 = trunc i32 %1762 to i8
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1763, i8* %1764, align 1, !tbaa !2449
  %1765 = lshr i32 %1737, 31
  %1766 = lshr i32 %1739, 31
  %1767 = xor i32 %1762, %1765
  %1768 = xor i32 %1762, %1766
  %1769 = add nuw nsw i32 %1767, %1768
  %1770 = icmp eq i32 %1769, 2
  %1771 = zext i1 %1770 to i8
  %1772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1771, i8* %1772, align 1, !tbaa !2450
  %1773 = load i32, i32* %ECX
  %1774 = zext i32 %1773 to i64
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 3
  store i64 %1776, i64* %PC
  %1777 = shl i64 %1774, 32
  %1778 = ashr exact i64 %1777, 32
  store i64 %1778, i64* %RSI, align 8, !tbaa !2428
  %1779 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1780 = load i64, i64* %RAX
  %1781 = load i64, i64* %RSI
  %1782 = mul i64 %1781, 4
  %1783 = add i64 %1782, %1780
  %1784 = load i64, i64* %PC
  %1785 = add i64 %1784, 5
  store i64 %1785, i64* %PC
  %1786 = inttoptr i64 %1783 to float*
  %1787 = load float, float* %1786
  %1788 = fpext float %1787 to double
  %1789 = bitcast i8* %1779 to double*
  store double %1788, double* %1789, align 1, !tbaa !2455
  %1790 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1791 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1792 = bitcast %union.vec128_t* %XMM1 to i8*
  %1793 = load i64, i64* %PC
  %1794 = add i64 %1793, 4
  store i64 %1794, i64* %PC
  %1795 = bitcast i8* %1791 to double*
  %1796 = load double, double* %1795, align 1
  %1797 = getelementptr inbounds i8, i8* %1791, i64 8
  %1798 = bitcast i8* %1797 to i64*
  %1799 = load i64, i64* %1798, align 1
  %1800 = bitcast i8* %1792 to double*
  %1801 = load double, double* %1800, align 1
  %1802 = fdiv double %1796, %1801
  %1803 = bitcast i8* %1790 to double*
  store double %1802, double* %1803, align 1, !tbaa !2455
  %1804 = getelementptr inbounds i8, i8* %1790, i64 8
  %1805 = bitcast i8* %1804 to i64*
  store i64 %1799, i64* %1805, align 1, !tbaa !2455
  %1806 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1807 = bitcast %union.vec128_t* %XMM0 to i8*
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = bitcast i8* %1806 to <2 x i32>*
  %1811 = load <2 x i32>, <2 x i32>* %1810, align 1
  %1812 = getelementptr inbounds i8, i8* %1806, i64 8
  %1813 = bitcast i8* %1812 to <2 x i32>*
  %1814 = load <2 x i32>, <2 x i32>* %1813, align 1
  %1815 = bitcast i8* %1807 to double*
  %1816 = load double, double* %1815, align 1
  %1817 = fptrunc double %1816 to float
  %1818 = bitcast i8* %1806 to float*
  store float %1817, float* %1818, align 1, !tbaa !2452
  %1819 = extractelement <2 x i32> %1811, i32 1
  %1820 = getelementptr inbounds i8, i8* %1806, i64 4
  %1821 = bitcast i8* %1820 to i32*
  store i32 %1819, i32* %1821, align 1, !tbaa !2452
  %1822 = extractelement <2 x i32> %1814, i32 0
  %1823 = bitcast i8* %1812 to i32*
  store i32 %1822, i32* %1823, align 1, !tbaa !2452
  %1824 = extractelement <2 x i32> %1814, i32 1
  %1825 = getelementptr inbounds i8, i8* %1806, i64 12
  %1826 = bitcast i8* %1825 to i32*
  store i32 %1824, i32* %1826, align 1, !tbaa !2452
  %1827 = load i64, i64* %RBP
  %1828 = sub i64 %1827, 36
  %1829 = bitcast %union.vec128_t* %XMM0 to i8*
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 5
  store i64 %1831, i64* %PC
  %1832 = bitcast i8* %1829 to <2 x float>*
  %1833 = load <2 x float>, <2 x float>* %1832, align 1
  %1834 = extractelement <2 x float> %1833, i32 0
  %1835 = inttoptr i64 %1828 to float*
  store float %1834, float* %1835
  %1836 = load i64, i64* %RBP
  %1837 = sub i64 %1836, 16
  %1838 = load i64, i64* %PC
  %1839 = add i64 %1838, 3
  store i64 %1839, i64* %PC
  %1840 = inttoptr i64 %1837 to i32*
  %1841 = load i32, i32* %1840
  %1842 = zext i32 %1841 to i64
  store i64 %1842, i64* %RCX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 44
  %1845 = load i64, i64* %PC
  %1846 = add i64 %1845, 3
  store i64 %1846, i64* %PC
  %1847 = inttoptr i64 %1844 to i32*
  %1848 = load i32, i32* %1847
  %1849 = zext i32 %1848 to i64
  store i64 %1849, i64* %RDI, align 8, !tbaa !2428
  %1850 = load i64, i64* %RDI
  %1851 = load i64, i64* %PC
  %1852 = add i64 %1851, 3
  store i64 %1852, i64* %PC
  %1853 = trunc i64 %1850 to i32
  %1854 = add i32 1, %1853
  %1855 = zext i32 %1854 to i64
  store i64 %1855, i64* %RDI, align 8, !tbaa !2428
  %1856 = icmp ult i32 %1854, %1853
  %1857 = icmp ult i32 %1854, 1
  %1858 = or i1 %1856, %1857
  %1859 = zext i1 %1858 to i8
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1859, i8* %1860, align 1, !tbaa !2432
  %1861 = and i32 %1854, 255
  %1862 = call i32 @llvm.ctpop.i32(i32 %1861) #16
  %1863 = trunc i32 %1862 to i8
  %1864 = and i8 %1863, 1
  %1865 = xor i8 %1864, 1
  %1866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1865, i8* %1866, align 1, !tbaa !2446
  %1867 = xor i64 1, %1850
  %1868 = trunc i64 %1867 to i32
  %1869 = xor i32 %1868, %1854
  %1870 = lshr i32 %1869, 4
  %1871 = trunc i32 %1870 to i8
  %1872 = and i8 %1871, 1
  %1873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1872, i8* %1873, align 1, !tbaa !2447
  %1874 = icmp eq i32 %1854, 0
  %1875 = zext i1 %1874 to i8
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1875, i8* %1876, align 1, !tbaa !2448
  %1877 = lshr i32 %1854, 31
  %1878 = trunc i32 %1877 to i8
  %1879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1878, i8* %1879, align 1, !tbaa !2449
  %1880 = lshr i32 %1853, 31
  %1881 = xor i32 %1877, %1880
  %1882 = add nuw nsw i32 %1881, %1877
  %1883 = icmp eq i32 %1882, 2
  %1884 = zext i1 %1883 to i8
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1884, i8* %1885, align 1, !tbaa !2450
  %1886 = load i64, i64* %RCX
  %1887 = load i32, i32* %EDI
  %1888 = zext i32 %1887 to i64
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 2
  store i64 %1890, i64* %PC
  %1891 = trunc i64 %1886 to i32
  %1892 = sub i32 %1891, %1887
  %1893 = zext i32 %1892 to i64
  store i64 %1893, i64* %RCX, align 8, !tbaa !2428
  %1894 = icmp ult i32 %1891, %1887
  %1895 = zext i1 %1894 to i8
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1895, i8* %1896, align 1, !tbaa !2432
  %1897 = and i32 %1892, 255
  %1898 = call i32 @llvm.ctpop.i32(i32 %1897) #16
  %1899 = trunc i32 %1898 to i8
  %1900 = and i8 %1899, 1
  %1901 = xor i8 %1900, 1
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1901, i8* %1902, align 1, !tbaa !2446
  %1903 = xor i64 %1888, %1886
  %1904 = trunc i64 %1903 to i32
  %1905 = xor i32 %1904, %1892
  %1906 = lshr i32 %1905, 4
  %1907 = trunc i32 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1908, i8* %1909, align 1, !tbaa !2447
  %1910 = icmp eq i32 %1892, 0
  %1911 = zext i1 %1910 to i8
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1911, i8* %1912, align 1, !tbaa !2448
  %1913 = lshr i32 %1892, 31
  %1914 = trunc i32 %1913 to i8
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1914, i8* %1915, align 1, !tbaa !2449
  %1916 = lshr i32 %1891, 31
  %1917 = lshr i32 %1887, 31
  %1918 = xor i32 %1917, %1916
  %1919 = xor i32 %1913, %1916
  %1920 = add nuw nsw i32 %1919, %1918
  %1921 = icmp eq i32 %1920, 2
  %1922 = zext i1 %1921 to i8
  %1923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1922, i8* %1923, align 1, !tbaa !2450
  %1924 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1925 = load i64, i64* %RBP
  %1926 = sub i64 %1925, 36
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 5
  store i64 %1928, i64* %PC
  %1929 = inttoptr i64 %1926 to float*
  %1930 = load float, float* %1929
  %1931 = bitcast i8* %1924 to float*
  store float %1930, float* %1931, align 1, !tbaa !2452
  %1932 = getelementptr inbounds i8, i8* %1924, i64 4
  %1933 = bitcast i8* %1932 to float*
  store float 0.000000e+00, float* %1933, align 1, !tbaa !2452
  %1934 = getelementptr inbounds i8, i8* %1924, i64 8
  %1935 = bitcast i8* %1934 to float*
  store float 0.000000e+00, float* %1935, align 1, !tbaa !2452
  %1936 = getelementptr inbounds i8, i8* %1924, i64 12
  %1937 = bitcast i8* %1936 to float*
  store float 0.000000e+00, float* %1937, align 1, !tbaa !2452
  %1938 = load i64, i64* %RBP
  %1939 = sub i64 %1938, 8
  %1940 = load i64, i64* %PC
  %1941 = add i64 %1940, 4
  store i64 %1941, i64* %PC
  %1942 = inttoptr i64 %1939 to i64*
  %1943 = load i64, i64* %1942
  store i64 %1943, i64* %RAX, align 8, !tbaa !2428
  %1944 = load i64, i64* %RBP
  %1945 = sub i64 %1944, 12
  %1946 = load i64, i64* %PC
  %1947 = add i64 %1946, 3
  store i64 %1947, i64* %PC
  %1948 = inttoptr i64 %1945 to i32*
  %1949 = load i32, i32* %1948
  %1950 = zext i32 %1949 to i64
  store i64 %1950, i64* %RDI, align 8, !tbaa !2428
  %1951 = load i64, i64* %RDI
  %1952 = load i64, i64* %RBP
  %1953 = sub i64 %1952, 44
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 4
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i32*
  %1957 = load i32, i32* %1956
  %1958 = shl i64 %1951, 32
  %1959 = ashr exact i64 %1958, 32
  %1960 = sext i32 %1957 to i64
  %1961 = mul nsw i64 %1960, %1959
  %1962 = trunc i64 %1961 to i32
  %1963 = and i64 %1961, 4294967295
  store i64 %1963, i64* %RDI, align 8, !tbaa !2428
  %1964 = shl i64 %1961, 32
  %1965 = ashr exact i64 %1964, 32
  %1966 = icmp ne i64 %1965, %1961
  %1967 = zext i1 %1966 to i8
  %1968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1967, i8* %1968, align 1, !tbaa !2432
  %1969 = and i32 %1962, 255
  %1970 = call i32 @llvm.ctpop.i32(i32 %1969) #16
  %1971 = trunc i32 %1970 to i8
  %1972 = and i8 %1971, 1
  %1973 = xor i8 %1972, 1
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1973, i8* %1974, align 1, !tbaa !2446
  %1975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1975, align 1, !tbaa !2447
  %1976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1976, align 1, !tbaa !2448
  %1977 = lshr i32 %1962, 31
  %1978 = trunc i32 %1977 to i8
  %1979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1978, i8* %1979, align 1, !tbaa !2449
  %1980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1967, i8* %1980, align 1, !tbaa !2450
  %1981 = load i64, i64* %RDI
  %1982 = load i64, i64* %RBP
  %1983 = sub i64 %1982, 44
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 3
  store i64 %1985, i64* %PC
  %1986 = trunc i64 %1981 to i32
  %1987 = inttoptr i64 %1983 to i32*
  %1988 = load i32, i32* %1987
  %1989 = add i32 %1988, %1986
  %1990 = zext i32 %1989 to i64
  store i64 %1990, i64* %RDI, align 8, !tbaa !2428
  %1991 = icmp ult i32 %1989, %1986
  %1992 = icmp ult i32 %1989, %1988
  %1993 = or i1 %1991, %1992
  %1994 = zext i1 %1993 to i8
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1994, i8* %1995, align 1, !tbaa !2432
  %1996 = and i32 %1989, 255
  %1997 = call i32 @llvm.ctpop.i32(i32 %1996) #16
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2000, i8* %2001, align 1, !tbaa !2446
  %2002 = xor i32 %1988, %1986
  %2003 = xor i32 %2002, %1989
  %2004 = lshr i32 %2003, 4
  %2005 = trunc i32 %2004 to i8
  %2006 = and i8 %2005, 1
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2006, i8* %2007, align 1, !tbaa !2447
  %2008 = icmp eq i32 %1989, 0
  %2009 = zext i1 %2008 to i8
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2009, i8* %2010, align 1, !tbaa !2448
  %2011 = lshr i32 %1989, 31
  %2012 = trunc i32 %2011 to i8
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2012, i8* %2013, align 1, !tbaa !2449
  %2014 = lshr i32 %1986, 31
  %2015 = lshr i32 %1988, 31
  %2016 = xor i32 %2011, %2014
  %2017 = xor i32 %2011, %2015
  %2018 = add nuw nsw i32 %2016, %2017
  %2019 = icmp eq i32 %2018, 2
  %2020 = zext i1 %2019 to i8
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2020, i8* %2021, align 1, !tbaa !2450
  %2022 = load i64, i64* %RDI
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 3
  store i64 %2024, i64* %PC
  %2025 = trunc i64 %2022 to i32
  %2026 = add i32 1, %2025
  %2027 = zext i32 %2026 to i64
  store i64 %2027, i64* %RDI, align 8, !tbaa !2428
  %2028 = icmp ult i32 %2026, %2025
  %2029 = icmp ult i32 %2026, 1
  %2030 = or i1 %2028, %2029
  %2031 = zext i1 %2030 to i8
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2031, i8* %2032, align 1, !tbaa !2432
  %2033 = and i32 %2026, 255
  %2034 = call i32 @llvm.ctpop.i32(i32 %2033) #16
  %2035 = trunc i32 %2034 to i8
  %2036 = and i8 %2035, 1
  %2037 = xor i8 %2036, 1
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2037, i8* %2038, align 1, !tbaa !2446
  %2039 = xor i64 1, %2022
  %2040 = trunc i64 %2039 to i32
  %2041 = xor i32 %2040, %2026
  %2042 = lshr i32 %2041, 4
  %2043 = trunc i32 %2042 to i8
  %2044 = and i8 %2043, 1
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2044, i8* %2045, align 1, !tbaa !2447
  %2046 = icmp eq i32 %2026, 0
  %2047 = zext i1 %2046 to i8
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2047, i8* %2048, align 1, !tbaa !2448
  %2049 = lshr i32 %2026, 31
  %2050 = trunc i32 %2049 to i8
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2050, i8* %2051, align 1, !tbaa !2449
  %2052 = lshr i32 %2025, 31
  %2053 = xor i32 %2049, %2052
  %2054 = add nuw nsw i32 %2053, %2049
  %2055 = icmp eq i32 %2054, 2
  %2056 = zext i1 %2055 to i8
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2056, i8* %2057, align 1, !tbaa !2450
  %2058 = load i32, i32* %EDI
  %2059 = zext i32 %2058 to i64
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 3
  store i64 %2061, i64* %PC
  %2062 = shl i64 %2059, 32
  %2063 = ashr exact i64 %2062, 32
  store i64 %2063, i64* %RSI, align 8, !tbaa !2428
  %2064 = load i64, i64* %RSI
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 4
  store i64 %2066, i64* %PC
  %2067 = shl i64 %2064, 1
  %2068 = icmp slt i64 %2067, 0
  %2069 = shl i64 %2067, 1
  store i64 %2069, i64* %RSI, align 8, !tbaa !2428
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2071 = zext i1 %2068 to i8
  store i8 %2071, i8* %2070, align 1, !tbaa !2451
  %2072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2073 = trunc i64 %2069 to i32
  %2074 = and i32 %2073, 254
  %2075 = call i32 @llvm.ctpop.i32(i32 %2074) #16
  %2076 = trunc i32 %2075 to i8
  %2077 = and i8 %2076, 1
  %2078 = xor i8 %2077, 1
  store i8 %2078, i8* %2072, align 1, !tbaa !2451
  %2079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2079, align 1, !tbaa !2451
  %2080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2081 = icmp eq i64 %2069, 0
  %2082 = zext i1 %2081 to i8
  store i8 %2082, i8* %2080, align 1, !tbaa !2451
  %2083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2084 = lshr i64 %2069, 63
  %2085 = trunc i64 %2084 to i8
  store i8 %2085, i8* %2083, align 1, !tbaa !2451
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2086, align 1, !tbaa !2451
  %2087 = load i64, i64* %RAX
  %2088 = load i64, i64* %RSI
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 3
  store i64 %2090, i64* %PC
  %2091 = add i64 %2088, %2087
  store i64 %2091, i64* %RAX, align 8, !tbaa !2428
  %2092 = icmp ult i64 %2091, %2087
  %2093 = icmp ult i64 %2091, %2088
  %2094 = or i1 %2092, %2093
  %2095 = zext i1 %2094 to i8
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2095, i8* %2096, align 1, !tbaa !2432
  %2097 = trunc i64 %2091 to i32
  %2098 = and i32 %2097, 255
  %2099 = call i32 @llvm.ctpop.i32(i32 %2098) #16
  %2100 = trunc i32 %2099 to i8
  %2101 = and i8 %2100, 1
  %2102 = xor i8 %2101, 1
  %2103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2102, i8* %2103, align 1, !tbaa !2446
  %2104 = xor i64 %2088, %2087
  %2105 = xor i64 %2104, %2091
  %2106 = lshr i64 %2105, 4
  %2107 = trunc i64 %2106 to i8
  %2108 = and i8 %2107, 1
  %2109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2108, i8* %2109, align 1, !tbaa !2447
  %2110 = icmp eq i64 %2091, 0
  %2111 = zext i1 %2110 to i8
  %2112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2111, i8* %2112, align 1, !tbaa !2448
  %2113 = lshr i64 %2091, 63
  %2114 = trunc i64 %2113 to i8
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2114, i8* %2115, align 1, !tbaa !2449
  %2116 = lshr i64 %2087, 63
  %2117 = lshr i64 %2088, 63
  %2118 = xor i64 %2113, %2116
  %2119 = xor i64 %2113, %2117
  %2120 = add nuw nsw i64 %2118, %2119
  %2121 = icmp eq i64 %2120, 2
  %2122 = zext i1 %2121 to i8
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2122, i8* %2123, align 1, !tbaa !2450
  %2124 = load i32, i32* %ECX
  %2125 = zext i32 %2124 to i64
  %2126 = load i64, i64* %PC
  %2127 = add i64 %2126, 2
  store i64 %2127, i64* %PC
  %2128 = and i64 %2125, 4294967295
  store i64 %2128, i64* %RDI, align 8, !tbaa !2428
  %2129 = load i64, i64* %RAX
  %2130 = load i64, i64* %PC
  %2131 = add i64 %2130, 3
  store i64 %2131, i64* %PC
  store i64 %2129, i64* %RSI, align 8, !tbaa !2428
  %2132 = load i64, i64* %PC
  %2133 = add i64 %2132, 4656
  %2134 = load i64, i64* %PC
  %2135 = add i64 %2134, 5
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 5
  store i64 %2137, i64* %PC
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2139 = load i64, i64* %2138, align 8, !tbaa !2428
  %2140 = add i64 %2139, -8
  %2141 = inttoptr i64 %2140 to i64*
  store i64 %2135, i64* %2141
  store i64 %2140, i64* %2138, align 8, !tbaa !2428
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2133, i64* %2142, align 8, !tbaa !2428
  %2143 = load i64, i64* %PC
  %2144 = call %struct.Memory* @sub_402cf0_dscal_renamed_(%struct.State* %0, i64 %2143, %struct.Memory* %MEMORY.2)
  %2145 = load i64, i64* %RBP
  %2146 = sub i64 %2145, 48
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 3
  store i64 %2148, i64* %PC
  %2149 = inttoptr i64 %2146 to i32*
  %2150 = load i32, i32* %2149
  %2151 = zext i32 %2150 to i64
  store i64 %2151, i64* %RCX, align 8, !tbaa !2428
  %2152 = load i64, i64* %RBP
  %2153 = sub i64 %2152, 40
  %2154 = load i32, i32* %ECX
  %2155 = zext i32 %2154 to i64
  %2156 = load i64, i64* %PC
  %2157 = add i64 %2156, 3
  store i64 %2157, i64* %PC
  %2158 = inttoptr i64 %2153 to i32*
  store i32 %2154, i32* %2158
  br label %block_401acb

block_401bd8:                                     ; preds = %block_401bd3, %block_401930
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_401930 ], [ %MEMORY.1, %block_401bd3 ]
  %2159 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2160 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2161 = bitcast %union.vec128_t* %XMM0 to i8*
  %2162 = load i64, i64* %PC
  %2163 = add i64 %2162, 3
  store i64 %2163, i64* %PC
  %2164 = bitcast i8* %2160 to i64*
  %2165 = load i64, i64* %2164, align 1
  %2166 = getelementptr inbounds i8, i8* %2160, i64 8
  %2167 = bitcast i8* %2166 to i64*
  %2168 = load i64, i64* %2167, align 1
  %2169 = bitcast i8* %2161 to i64*
  %2170 = load i64, i64* %2169, align 1
  %2171 = getelementptr inbounds i8, i8* %2161, i64 8
  %2172 = bitcast i8* %2171 to i64*
  %2173 = load i64, i64* %2172, align 1
  %2174 = xor i64 %2170, %2165
  %2175 = xor i64 %2173, %2168
  %2176 = trunc i64 %2174 to i32
  %2177 = lshr i64 %2174, 32
  %2178 = trunc i64 %2177 to i32
  %2179 = bitcast i8* %2159 to i32*
  store i32 %2176, i32* %2179, align 1, !tbaa !2454
  %2180 = getelementptr inbounds i8, i8* %2159, i64 4
  %2181 = bitcast i8* %2180 to i32*
  store i32 %2178, i32* %2181, align 1, !tbaa !2454
  %2182 = trunc i64 %2175 to i32
  %2183 = getelementptr inbounds i8, i8* %2159, i64 8
  %2184 = bitcast i8* %2183 to i32*
  store i32 %2182, i32* %2184, align 1, !tbaa !2454
  %2185 = lshr i64 %2175, 32
  %2186 = trunc i64 %2185 to i32
  %2187 = getelementptr inbounds i8, i8* %2159, i64 12
  %2188 = bitcast i8* %2187 to i32*
  store i32 %2186, i32* %2188, align 1, !tbaa !2454
  %2189 = load i64, i64* %RBP
  %2190 = sub i64 %2189, 16
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 3
  store i64 %2192, i64* %PC
  %2193 = inttoptr i64 %2190 to i32*
  %2194 = load i32, i32* %2193
  %2195 = zext i32 %2194 to i64
  store i64 %2195, i64* %RAX, align 8, !tbaa !2428
  %2196 = load i64, i64* %RAX
  %2197 = load i64, i64* %PC
  %2198 = add i64 %2197, 3
  store i64 %2198, i64* %PC
  %2199 = trunc i64 %2196 to i32
  %2200 = sub i32 %2199, 1
  %2201 = zext i32 %2200 to i64
  store i64 %2201, i64* %RAX, align 8, !tbaa !2428
  %2202 = icmp ult i32 %2199, 1
  %2203 = zext i1 %2202 to i8
  %2204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2203, i8* %2204, align 1, !tbaa !2432
  %2205 = and i32 %2200, 255
  %2206 = call i32 @llvm.ctpop.i32(i32 %2205) #16
  %2207 = trunc i32 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = xor i8 %2208, 1
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2209, i8* %2210, align 1, !tbaa !2446
  %2211 = xor i64 1, %2196
  %2212 = trunc i64 %2211 to i32
  %2213 = xor i32 %2212, %2200
  %2214 = lshr i32 %2213, 4
  %2215 = trunc i32 %2214 to i8
  %2216 = and i8 %2215, 1
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2216, i8* %2217, align 1, !tbaa !2447
  %2218 = icmp eq i32 %2200, 0
  %2219 = zext i1 %2218 to i8
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2219, i8* %2220, align 1, !tbaa !2448
  %2221 = lshr i32 %2200, 31
  %2222 = trunc i32 %2221 to i8
  %2223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2222, i8* %2223, align 1, !tbaa !2449
  %2224 = lshr i32 %2199, 31
  %2225 = xor i32 %2221, %2224
  %2226 = add nuw nsw i32 %2225, %2224
  %2227 = icmp eq i32 %2226, 2
  %2228 = zext i1 %2227 to i8
  %2229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2228, i8* %2229, align 1, !tbaa !2450
  %2230 = load i64, i64* %RBP
  %2231 = sub i64 %2230, 24
  %2232 = load i64, i64* %PC
  %2233 = add i64 %2232, 4
  store i64 %2233, i64* %PC
  %2234 = inttoptr i64 %2231 to i64*
  %2235 = load i64, i64* %2234
  store i64 %2235, i64* %RCX, align 8, !tbaa !2428
  %2236 = load i64, i64* %RBP
  %2237 = sub i64 %2236, 16
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 3
  store i64 %2239, i64* %PC
  %2240 = inttoptr i64 %2237 to i32*
  %2241 = load i32, i32* %2240
  %2242 = zext i32 %2241 to i64
  store i64 %2242, i64* %RDX, align 8, !tbaa !2428
  %2243 = load i64, i64* %RDX
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 3
  store i64 %2245, i64* %PC
  %2246 = trunc i64 %2243 to i32
  %2247 = sub i32 %2246, 1
  %2248 = zext i32 %2247 to i64
  store i64 %2248, i64* %RDX, align 8, !tbaa !2428
  %2249 = icmp ult i32 %2246, 1
  %2250 = zext i1 %2249 to i8
  %2251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2250, i8* %2251, align 1, !tbaa !2432
  %2252 = and i32 %2247, 255
  %2253 = call i32 @llvm.ctpop.i32(i32 %2252) #16
  %2254 = trunc i32 %2253 to i8
  %2255 = and i8 %2254, 1
  %2256 = xor i8 %2255, 1
  %2257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2256, i8* %2257, align 1, !tbaa !2446
  %2258 = xor i64 1, %2243
  %2259 = trunc i64 %2258 to i32
  %2260 = xor i32 %2259, %2247
  %2261 = lshr i32 %2260, 4
  %2262 = trunc i32 %2261 to i8
  %2263 = and i8 %2262, 1
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2263, i8* %2264, align 1, !tbaa !2447
  %2265 = icmp eq i32 %2247, 0
  %2266 = zext i1 %2265 to i8
  %2267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2266, i8* %2267, align 1, !tbaa !2448
  %2268 = lshr i32 %2247, 31
  %2269 = trunc i32 %2268 to i8
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2269, i8* %2270, align 1, !tbaa !2449
  %2271 = lshr i32 %2246, 31
  %2272 = xor i32 %2268, %2271
  %2273 = add nuw nsw i32 %2272, %2271
  %2274 = icmp eq i32 %2273, 2
  %2275 = zext i1 %2274 to i8
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2275, i8* %2276, align 1, !tbaa !2450
  %2277 = load i32, i32* %EDX
  %2278 = zext i32 %2277 to i64
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 3
  store i64 %2280, i64* %PC
  %2281 = shl i64 %2278, 32
  %2282 = ashr exact i64 %2281, 32
  store i64 %2282, i64* %RSI, align 8, !tbaa !2428
  %2283 = load i64, i64* %RCX
  %2284 = load i64, i64* %RSI
  %2285 = mul i64 %2284, 4
  %2286 = add i64 %2285, %2283
  %2287 = load i32, i32* %EAX
  %2288 = zext i32 %2287 to i64
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 3
  store i64 %2290, i64* %PC
  %2291 = inttoptr i64 %2286 to i32*
  store i32 %2287, i32* %2291
  %2292 = load i64, i64* %RBP
  %2293 = sub i64 %2292, 8
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 4
  store i64 %2295, i64* %PC
  %2296 = inttoptr i64 %2293 to i64*
  %2297 = load i64, i64* %2296
  store i64 %2297, i64* %RCX, align 8, !tbaa !2428
  %2298 = load i64, i64* %RBP
  %2299 = sub i64 %2298, 12
  %2300 = load i64, i64* %PC
  %2301 = add i64 %2300, 3
  store i64 %2301, i64* %PC
  %2302 = inttoptr i64 %2299 to i32*
  %2303 = load i32, i32* %2302
  %2304 = zext i32 %2303 to i64
  store i64 %2304, i64* %RAX, align 8, !tbaa !2428
  %2305 = load i64, i64* %RBP
  %2306 = sub i64 %2305, 16
  %2307 = load i64, i64* %PC
  %2308 = add i64 %2307, 3
  store i64 %2308, i64* %PC
  %2309 = inttoptr i64 %2306 to i32*
  %2310 = load i32, i32* %2309
  %2311 = zext i32 %2310 to i64
  store i64 %2311, i64* %RDX, align 8, !tbaa !2428
  %2312 = load i64, i64* %RDX
  %2313 = load i64, i64* %PC
  %2314 = add i64 %2313, 3
  store i64 %2314, i64* %PC
  %2315 = trunc i64 %2312 to i32
  %2316 = sub i32 %2315, 1
  %2317 = zext i32 %2316 to i64
  store i64 %2317, i64* %RDX, align 8, !tbaa !2428
  %2318 = icmp ult i32 %2315, 1
  %2319 = zext i1 %2318 to i8
  %2320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2319, i8* %2320, align 1, !tbaa !2432
  %2321 = and i32 %2316, 255
  %2322 = call i32 @llvm.ctpop.i32(i32 %2321) #16
  %2323 = trunc i32 %2322 to i8
  %2324 = and i8 %2323, 1
  %2325 = xor i8 %2324, 1
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2325, i8* %2326, align 1, !tbaa !2446
  %2327 = xor i64 1, %2312
  %2328 = trunc i64 %2327 to i32
  %2329 = xor i32 %2328, %2316
  %2330 = lshr i32 %2329, 4
  %2331 = trunc i32 %2330 to i8
  %2332 = and i8 %2331, 1
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2332, i8* %2333, align 1, !tbaa !2447
  %2334 = icmp eq i32 %2316, 0
  %2335 = zext i1 %2334 to i8
  %2336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2335, i8* %2336, align 1, !tbaa !2448
  %2337 = lshr i32 %2316, 31
  %2338 = trunc i32 %2337 to i8
  %2339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2338, i8* %2339, align 1, !tbaa !2449
  %2340 = lshr i32 %2315, 31
  %2341 = xor i32 %2337, %2340
  %2342 = add nuw nsw i32 %2341, %2340
  %2343 = icmp eq i32 %2342, 2
  %2344 = zext i1 %2343 to i8
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2344, i8* %2345, align 1, !tbaa !2450
  %2346 = load i64, i64* %RAX
  %2347 = load i32, i32* %EDX
  %2348 = zext i32 %2347 to i64
  %2349 = load i64, i64* %PC
  %2350 = add i64 %2349, 3
  store i64 %2350, i64* %PC
  %2351 = shl i64 %2346, 32
  %2352 = ashr exact i64 %2351, 32
  %2353 = shl i64 %2348, 32
  %2354 = ashr exact i64 %2353, 32
  %2355 = mul nsw i64 %2354, %2352
  %2356 = trunc i64 %2355 to i32
  %2357 = and i64 %2355, 4294967295
  store i64 %2357, i64* %RAX, align 8, !tbaa !2428
  %2358 = shl i64 %2355, 32
  %2359 = ashr exact i64 %2358, 32
  %2360 = icmp ne i64 %2359, %2355
  %2361 = zext i1 %2360 to i8
  %2362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2361, i8* %2362, align 1, !tbaa !2432
  %2363 = and i32 %2356, 255
  %2364 = call i32 @llvm.ctpop.i32(i32 %2363) #16
  %2365 = trunc i32 %2364 to i8
  %2366 = and i8 %2365, 1
  %2367 = xor i8 %2366, 1
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2367, i8* %2368, align 1, !tbaa !2446
  %2369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2369, align 1, !tbaa !2447
  %2370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2370, align 1, !tbaa !2448
  %2371 = lshr i32 %2356, 31
  %2372 = trunc i32 %2371 to i8
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2372, i8* %2373, align 1, !tbaa !2449
  %2374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2361, i8* %2374, align 1, !tbaa !2450
  %2375 = load i64, i64* %RBP
  %2376 = sub i64 %2375, 16
  %2377 = load i64, i64* %PC
  %2378 = add i64 %2377, 3
  store i64 %2378, i64* %PC
  %2379 = inttoptr i64 %2376 to i32*
  %2380 = load i32, i32* %2379
  %2381 = zext i32 %2380 to i64
  store i64 %2381, i64* %RDX, align 8, !tbaa !2428
  %2382 = load i64, i64* %RDX
  %2383 = load i64, i64* %PC
  %2384 = add i64 %2383, 3
  store i64 %2384, i64* %PC
  %2385 = trunc i64 %2382 to i32
  %2386 = sub i32 %2385, 1
  %2387 = zext i32 %2386 to i64
  store i64 %2387, i64* %RDX, align 8, !tbaa !2428
  %2388 = icmp ult i32 %2385, 1
  %2389 = zext i1 %2388 to i8
  %2390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2389, i8* %2390, align 1, !tbaa !2432
  %2391 = and i32 %2386, 255
  %2392 = call i32 @llvm.ctpop.i32(i32 %2391) #16
  %2393 = trunc i32 %2392 to i8
  %2394 = and i8 %2393, 1
  %2395 = xor i8 %2394, 1
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2395, i8* %2396, align 1, !tbaa !2446
  %2397 = xor i64 1, %2382
  %2398 = trunc i64 %2397 to i32
  %2399 = xor i32 %2398, %2386
  %2400 = lshr i32 %2399, 4
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2402, i8* %2403, align 1, !tbaa !2447
  %2404 = icmp eq i32 %2386, 0
  %2405 = zext i1 %2404 to i8
  %2406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2405, i8* %2406, align 1, !tbaa !2448
  %2407 = lshr i32 %2386, 31
  %2408 = trunc i32 %2407 to i8
  %2409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2408, i8* %2409, align 1, !tbaa !2449
  %2410 = lshr i32 %2385, 31
  %2411 = xor i32 %2407, %2410
  %2412 = add nuw nsw i32 %2411, %2410
  %2413 = icmp eq i32 %2412, 2
  %2414 = zext i1 %2413 to i8
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2414, i8* %2415, align 1, !tbaa !2450
  %2416 = load i64, i64* %RAX
  %2417 = load i32, i32* %EDX
  %2418 = zext i32 %2417 to i64
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 2
  store i64 %2420, i64* %PC
  %2421 = trunc i64 %2416 to i32
  %2422 = add i32 %2417, %2421
  %2423 = zext i32 %2422 to i64
  store i64 %2423, i64* %RAX, align 8, !tbaa !2428
  %2424 = icmp ult i32 %2422, %2421
  %2425 = icmp ult i32 %2422, %2417
  %2426 = or i1 %2424, %2425
  %2427 = zext i1 %2426 to i8
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2427, i8* %2428, align 1, !tbaa !2432
  %2429 = and i32 %2422, 255
  %2430 = call i32 @llvm.ctpop.i32(i32 %2429) #16
  %2431 = trunc i32 %2430 to i8
  %2432 = and i8 %2431, 1
  %2433 = xor i8 %2432, 1
  %2434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2433, i8* %2434, align 1, !tbaa !2446
  %2435 = xor i64 %2418, %2416
  %2436 = trunc i64 %2435 to i32
  %2437 = xor i32 %2436, %2422
  %2438 = lshr i32 %2437, 4
  %2439 = trunc i32 %2438 to i8
  %2440 = and i8 %2439, 1
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2440, i8* %2441, align 1, !tbaa !2447
  %2442 = icmp eq i32 %2422, 0
  %2443 = zext i1 %2442 to i8
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2443, i8* %2444, align 1, !tbaa !2448
  %2445 = lshr i32 %2422, 31
  %2446 = trunc i32 %2445 to i8
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2446, i8* %2447, align 1, !tbaa !2449
  %2448 = lshr i32 %2421, 31
  %2449 = lshr i32 %2417, 31
  %2450 = xor i32 %2445, %2448
  %2451 = xor i32 %2445, %2449
  %2452 = add nuw nsw i32 %2450, %2451
  %2453 = icmp eq i32 %2452, 2
  %2454 = zext i1 %2453 to i8
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2454, i8* %2455, align 1, !tbaa !2450
  %2456 = load i32, i32* %EAX
  %2457 = zext i32 %2456 to i64
  %2458 = load i64, i64* %PC
  %2459 = add i64 %2458, 3
  store i64 %2459, i64* %PC
  %2460 = shl i64 %2457, 32
  %2461 = ashr exact i64 %2460, 32
  store i64 %2461, i64* %RSI, align 8, !tbaa !2428
  %2462 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2463 = load i64, i64* %RCX
  %2464 = load i64, i64* %RSI
  %2465 = mul i64 %2464, 4
  %2466 = add i64 %2465, %2463
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 5
  store i64 %2468, i64* %PC
  %2469 = inttoptr i64 %2466 to float*
  %2470 = load float, float* %2469
  %2471 = fpext float %2470 to double
  %2472 = bitcast i8* %2462 to double*
  store double %2471, double* %2472, align 1, !tbaa !2455
  %2473 = bitcast %union.vec128_t* %XMM1 to i8*
  %2474 = bitcast %union.vec128_t* %XMM0 to i8*
  %2475 = load i64, i64* %PC
  %2476 = add i64 %2475, 4
  store i64 %2476, i64* %PC
  %2477 = bitcast i8* %2473 to double*
  %2478 = load double, double* %2477, align 1
  %2479 = bitcast i8* %2474 to double*
  %2480 = load double, double* %2479, align 1
  %2481 = fcmp uno double %2478, %2480
  br i1 %2481, label %2482, label %2494

; <label>:2482:                                   ; preds = %block_401bd8
  %2483 = fadd double %2478, %2480
  %2484 = bitcast double %2483 to i64
  %2485 = and i64 %2484, 9221120237041090560
  %2486 = icmp eq i64 %2485, 9218868437227405312
  %2487 = and i64 %2484, 2251799813685247
  %2488 = icmp ne i64 %2487, 0
  %2489 = and i1 %2486, %2488
  br i1 %2489, label %2490, label %2500

; <label>:2490:                                   ; preds = %2482
  %2491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2492 = load i64, i64* %2491, align 8, !tbaa !2428
  %2493 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2492, %struct.Memory* %MEMORY.3) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:2494:                                   ; preds = %block_401bd8
  %2495 = fcmp ogt double %2478, %2480
  br i1 %2495, label %2500, label %2496

; <label>:2496:                                   ; preds = %2494
  %2497 = fcmp olt double %2478, %2480
  br i1 %2497, label %2500, label %2498

; <label>:2498:                                   ; preds = %2496
  %2499 = fcmp oeq double %2478, %2480
  br i1 %2499, label %2500, label %2507

; <label>:2500:                                   ; preds = %2498, %2496, %2494, %2482
  %2501 = phi i8 [ 0, %2494 ], [ 0, %2496 ], [ 1, %2498 ], [ 1, %2482 ]
  %2502 = phi i8 [ 0, %2494 ], [ 0, %2496 ], [ 0, %2498 ], [ 1, %2482 ]
  %2503 = phi i8 [ 0, %2494 ], [ 1, %2496 ], [ 0, %2498 ], [ 1, %2482 ]
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2501, i8* %2504, align 1, !tbaa !2451
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2502, i8* %2505, align 1, !tbaa !2451
  %2506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2503, i8* %2506, align 1, !tbaa !2451
  br label %2507

; <label>:2507:                                   ; preds = %2500, %2498
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2508, align 1, !tbaa !2451
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2509, align 1, !tbaa !2451
  %2510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2510, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %2490, %2507
  %2511 = phi %struct.Memory* [ %2493, %2490 ], [ %MEMORY.3, %2507 ]
  %2512 = load i64, i64* %PC
  %2513 = add i64 %2512, 24
  %2514 = load i64, i64* %PC
  %2515 = add i64 %2514, 6
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 6
  store i64 %2517, i64* %PC
  %2518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2519 = load i8, i8* %2518, align 1, !tbaa !2448
  %2520 = icmp eq i8 %2519, 0
  %2521 = zext i1 %2520 to i8
  store i8 %2521, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2523 = select i1 %2520, i64 %2513, i64 %2515
  store i64 %2523, i64* %2522, align 8, !tbaa !2428
  %2524 = load i8, i8* %BRANCH_TAKEN
  %2525 = icmp eq i8 %2524, 1
  br i1 %2525, label %block_401c2d, label %block_401c1b

block_401967:                                     ; preds = %block_401930
  %2526 = load i64, i64* %RBP
  %2527 = sub i64 %2526, 44
  %2528 = load i64, i64* %PC
  %2529 = add i64 %2528, 7
  store i64 %2529, i64* %PC
  %2530 = inttoptr i64 %2527 to i32*
  store i32 0, i32* %2530
  br label %block_40196e

block_401ad7:                                     ; preds = %block_401acb
  %2531 = load i64, i64* %RBP
  %2532 = sub i64 %2531, 8
  %2533 = load i64, i64* %PC
  %2534 = add i64 %2533, 4
  store i64 %2534, i64* %PC
  %2535 = inttoptr i64 %2532 to i64*
  %2536 = load i64, i64* %2535
  store i64 %2536, i64* %RAX, align 8, !tbaa !2428
  %2537 = load i64, i64* %RBP
  %2538 = sub i64 %2537, 12
  %2539 = load i64, i64* %PC
  %2540 = add i64 %2539, 3
  store i64 %2540, i64* %PC
  %2541 = inttoptr i64 %2538 to i32*
  %2542 = load i32, i32* %2541
  %2543 = zext i32 %2542 to i64
  store i64 %2543, i64* %RCX, align 8, !tbaa !2428
  %2544 = load i64, i64* %RCX
  %2545 = load i64, i64* %RBP
  %2546 = sub i64 %2545, 40
  %2547 = load i64, i64* %PC
  %2548 = add i64 %2547, 4
  store i64 %2548, i64* %PC
  %2549 = inttoptr i64 %2546 to i32*
  %2550 = load i32, i32* %2549
  %2551 = shl i64 %2544, 32
  %2552 = ashr exact i64 %2551, 32
  %2553 = sext i32 %2550 to i64
  %2554 = mul nsw i64 %2553, %2552
  %2555 = trunc i64 %2554 to i32
  %2556 = and i64 %2554, 4294967295
  store i64 %2556, i64* %RCX, align 8, !tbaa !2428
  %2557 = shl i64 %2554, 32
  %2558 = ashr exact i64 %2557, 32
  %2559 = icmp ne i64 %2558, %2554
  %2560 = zext i1 %2559 to i8
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2560, i8* %2561, align 1, !tbaa !2432
  %2562 = and i32 %2555, 255
  %2563 = call i32 @llvm.ctpop.i32(i32 %2562) #16
  %2564 = trunc i32 %2563 to i8
  %2565 = and i8 %2564, 1
  %2566 = xor i8 %2565, 1
  %2567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2566, i8* %2567, align 1, !tbaa !2446
  %2568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2568, align 1, !tbaa !2447
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2569, align 1, !tbaa !2448
  %2570 = lshr i32 %2555, 31
  %2571 = trunc i32 %2570 to i8
  %2572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2571, i8* %2572, align 1, !tbaa !2449
  %2573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2560, i8* %2573, align 1, !tbaa !2450
  %2574 = load i64, i64* %RCX
  %2575 = load i64, i64* %RBP
  %2576 = sub i64 %2575, 52
  %2577 = load i64, i64* %PC
  %2578 = add i64 %2577, 3
  store i64 %2578, i64* %PC
  %2579 = trunc i64 %2574 to i32
  %2580 = inttoptr i64 %2576 to i32*
  %2581 = load i32, i32* %2580
  %2582 = add i32 %2581, %2579
  %2583 = zext i32 %2582 to i64
  store i64 %2583, i64* %RCX, align 8, !tbaa !2428
  %2584 = icmp ult i32 %2582, %2579
  %2585 = icmp ult i32 %2582, %2581
  %2586 = or i1 %2584, %2585
  %2587 = zext i1 %2586 to i8
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2587, i8* %2588, align 1, !tbaa !2432
  %2589 = and i32 %2582, 255
  %2590 = call i32 @llvm.ctpop.i32(i32 %2589) #16
  %2591 = trunc i32 %2590 to i8
  %2592 = and i8 %2591, 1
  %2593 = xor i8 %2592, 1
  %2594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2593, i8* %2594, align 1, !tbaa !2446
  %2595 = xor i32 %2581, %2579
  %2596 = xor i32 %2595, %2582
  %2597 = lshr i32 %2596, 4
  %2598 = trunc i32 %2597 to i8
  %2599 = and i8 %2598, 1
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2599, i8* %2600, align 1, !tbaa !2447
  %2601 = icmp eq i32 %2582, 0
  %2602 = zext i1 %2601 to i8
  %2603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2602, i8* %2603, align 1, !tbaa !2448
  %2604 = lshr i32 %2582, 31
  %2605 = trunc i32 %2604 to i8
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2605, i8* %2606, align 1, !tbaa !2449
  %2607 = lshr i32 %2579, 31
  %2608 = lshr i32 %2581, 31
  %2609 = xor i32 %2604, %2607
  %2610 = xor i32 %2604, %2608
  %2611 = add nuw nsw i32 %2609, %2610
  %2612 = icmp eq i32 %2611, 2
  %2613 = zext i1 %2612 to i8
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2613, i8* %2614, align 1, !tbaa !2450
  %2615 = load i32, i32* %ECX
  %2616 = zext i32 %2615 to i64
  %2617 = load i64, i64* %PC
  %2618 = add i64 %2617, 3
  store i64 %2618, i64* %PC
  %2619 = shl i64 %2616, 32
  %2620 = ashr exact i64 %2619, 32
  store i64 %2620, i64* %RDX, align 8, !tbaa !2428
  %2621 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2622 = load i64, i64* %RAX
  %2623 = load i64, i64* %RDX
  %2624 = mul i64 %2623, 4
  %2625 = add i64 %2624, %2622
  %2626 = load i64, i64* %PC
  %2627 = add i64 %2626, 5
  store i64 %2627, i64* %PC
  %2628 = inttoptr i64 %2625 to float*
  %2629 = load float, float* %2628
  %2630 = bitcast i8* %2621 to float*
  store float %2629, float* %2630, align 1, !tbaa !2452
  %2631 = getelementptr inbounds i8, i8* %2621, i64 4
  %2632 = bitcast i8* %2631 to float*
  store float 0.000000e+00, float* %2632, align 1, !tbaa !2452
  %2633 = getelementptr inbounds i8, i8* %2621, i64 8
  %2634 = bitcast i8* %2633 to float*
  store float 0.000000e+00, float* %2634, align 1, !tbaa !2452
  %2635 = getelementptr inbounds i8, i8* %2621, i64 12
  %2636 = bitcast i8* %2635 to float*
  store float 0.000000e+00, float* %2636, align 1, !tbaa !2452
  %2637 = load i64, i64* %RBP
  %2638 = sub i64 %2637, 36
  %2639 = bitcast %union.vec128_t* %XMM0 to i8*
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 5
  store i64 %2641, i64* %PC
  %2642 = bitcast i8* %2639 to <2 x float>*
  %2643 = load <2 x float>, <2 x float>* %2642, align 1
  %2644 = extractelement <2 x float> %2643, i32 0
  %2645 = inttoptr i64 %2638 to float*
  store float %2644, float* %2645
  %2646 = load i64, i64* %RBP
  %2647 = sub i64 %2646, 52
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 3
  store i64 %2649, i64* %PC
  %2650 = inttoptr i64 %2647 to i32*
  %2651 = load i32, i32* %2650
  %2652 = zext i32 %2651 to i64
  store i64 %2652, i64* %RCX, align 8, !tbaa !2428
  %2653 = load i32, i32* %ECX
  %2654 = zext i32 %2653 to i64
  %2655 = load i64, i64* %RBP
  %2656 = sub i64 %2655, 44
  %2657 = load i64, i64* %PC
  %2658 = add i64 %2657, 3
  store i64 %2658, i64* %PC
  %2659 = inttoptr i64 %2656 to i32*
  %2660 = load i32, i32* %2659
  %2661 = sub i32 %2653, %2660
  %2662 = icmp ult i32 %2653, %2660
  %2663 = zext i1 %2662 to i8
  %2664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2663, i8* %2664, align 1, !tbaa !2432
  %2665 = and i32 %2661, 255
  %2666 = call i32 @llvm.ctpop.i32(i32 %2665) #16
  %2667 = trunc i32 %2666 to i8
  %2668 = and i8 %2667, 1
  %2669 = xor i8 %2668, 1
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2669, i8* %2670, align 1, !tbaa !2446
  %2671 = xor i32 %2660, %2653
  %2672 = xor i32 %2671, %2661
  %2673 = lshr i32 %2672, 4
  %2674 = trunc i32 %2673 to i8
  %2675 = and i8 %2674, 1
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2675, i8* %2676, align 1, !tbaa !2447
  %2677 = icmp eq i32 %2661, 0
  %2678 = zext i1 %2677 to i8
  %2679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2678, i8* %2679, align 1, !tbaa !2448
  %2680 = lshr i32 %2661, 31
  %2681 = trunc i32 %2680 to i8
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2681, i8* %2682, align 1, !tbaa !2449
  %2683 = lshr i32 %2653, 31
  %2684 = lshr i32 %2660, 31
  %2685 = xor i32 %2684, %2683
  %2686 = xor i32 %2680, %2683
  %2687 = add nuw nsw i32 %2686, %2685
  %2688 = icmp eq i32 %2687, 2
  %2689 = zext i1 %2688 to i8
  %2690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2689, i8* %2690, align 1, !tbaa !2450
  %2691 = load i64, i64* %PC
  %2692 = add i64 %2691, 77
  %2693 = load i64, i64* %PC
  %2694 = add i64 %2693, 6
  %2695 = load i64, i64* %PC
  %2696 = add i64 %2695, 6
  store i64 %2696, i64* %PC
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2698 = load i8, i8* %2697, align 1, !tbaa !2448
  store i8 %2698, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2700 = icmp ne i8 %2698, 0
  %2701 = select i1 %2700, i64 %2692, i64 %2694
  store i64 %2701, i64* %2699, align 8, !tbaa !2428
  %2702 = load i8, i8* %BRANCH_TAKEN
  %2703 = icmp eq i8 %2702, 1
  br i1 %2703, label %block_401b45, label %block_401afe

block_401bd3:                                     ; preds = %block_40196e
  %2704 = load i64, i64* %PC
  %2705 = add i64 %2704, 5
  store i64 %2705, i64* %PC
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %677, i64* %2706, align 8, !tbaa !2428
  br label %block_401bd8

block_401acb:                                     ; preds = %block_401b45, %block_401a60
  %MEMORY.4 = phi %struct.Memory* [ %2144, %block_401a60 ], [ %3454, %block_401b45 ]
  %2707 = load i64, i64* %RBP
  %2708 = sub i64 %2707, 40
  %2709 = load i64, i64* %PC
  %2710 = add i64 %2709, 3
  store i64 %2710, i64* %PC
  %2711 = inttoptr i64 %2708 to i32*
  %2712 = load i32, i32* %2711
  %2713 = zext i32 %2712 to i64
  store i64 %2713, i64* %RAX, align 8, !tbaa !2428
  %2714 = load i32, i32* %EAX
  %2715 = zext i32 %2714 to i64
  %2716 = load i64, i64* %RBP
  %2717 = sub i64 %2716, 16
  %2718 = load i64, i64* %PC
  %2719 = add i64 %2718, 3
  store i64 %2719, i64* %PC
  %2720 = inttoptr i64 %2717 to i32*
  %2721 = load i32, i32* %2720
  %2722 = sub i32 %2714, %2721
  %2723 = icmp ult i32 %2714, %2721
  %2724 = zext i1 %2723 to i8
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2724, i8* %2725, align 1, !tbaa !2432
  %2726 = and i32 %2722, 255
  %2727 = call i32 @llvm.ctpop.i32(i32 %2726) #16
  %2728 = trunc i32 %2727 to i8
  %2729 = and i8 %2728, 1
  %2730 = xor i8 %2729, 1
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2730, i8* %2731, align 1, !tbaa !2446
  %2732 = xor i32 %2721, %2714
  %2733 = xor i32 %2732, %2722
  %2734 = lshr i32 %2733, 4
  %2735 = trunc i32 %2734 to i8
  %2736 = and i8 %2735, 1
  %2737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2736, i8* %2737, align 1, !tbaa !2447
  %2738 = icmp eq i32 %2722, 0
  %2739 = zext i1 %2738 to i8
  %2740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2739, i8* %2740, align 1, !tbaa !2448
  %2741 = lshr i32 %2722, 31
  %2742 = trunc i32 %2741 to i8
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2742, i8* %2743, align 1, !tbaa !2449
  %2744 = lshr i32 %2714, 31
  %2745 = lshr i32 %2721, 31
  %2746 = xor i32 %2745, %2744
  %2747 = xor i32 %2741, %2744
  %2748 = add nuw nsw i32 %2747, %2746
  %2749 = icmp eq i32 %2748, 2
  %2750 = zext i1 %2749 to i8
  %2751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2750, i8* %2751, align 1, !tbaa !2450
  %2752 = load i64, i64* %PC
  %2753 = add i64 %2752, 225
  %2754 = load i64, i64* %PC
  %2755 = add i64 %2754, 6
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 6
  store i64 %2757, i64* %PC
  %2758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2759 = load i8, i8* %2758, align 1, !tbaa !2449
  %2760 = icmp ne i8 %2759, 0
  %2761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2762 = load i8, i8* %2761, align 1, !tbaa !2450
  %2763 = icmp ne i8 %2762, 0
  %2764 = xor i1 %2760, %2763
  %2765 = xor i1 %2764, true
  %2766 = zext i1 %2765 to i8
  store i8 %2766, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2768 = select i1 %2764, i64 %2755, i64 %2753
  store i64 %2768, i64* %2767, align 8, !tbaa !2428
  %2769 = load i8, i8* %BRANCH_TAKEN
  %2770 = icmp eq i8 %2769, 1
  br i1 %2770, label %block_401bb2, label %block_401ad7

block_401bc0:                                     ; preds = %block_401bb2, %block_4019ed
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.4, %block_401bb2 ], [ %1641, %block_4019ed ]
  %2771 = load i64, i64* %PC
  %2772 = add i64 %2771, 5
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 5
  store i64 %2774, i64* %PC
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2772, i64* %2775, align 8, !tbaa !2428
  %2776 = load i64, i64* %RBP
  %2777 = sub i64 %2776, 44
  %2778 = load i64, i64* %PC
  %2779 = add i64 %2778, 3
  store i64 %2779, i64* %PC
  %2780 = inttoptr i64 %2777 to i32*
  %2781 = load i32, i32* %2780
  %2782 = zext i32 %2781 to i64
  store i64 %2782, i64* %RAX, align 8, !tbaa !2428
  %2783 = load i64, i64* %RAX
  %2784 = load i64, i64* %PC
  %2785 = add i64 %2784, 3
  store i64 %2785, i64* %PC
  %2786 = trunc i64 %2783 to i32
  %2787 = add i32 1, %2786
  %2788 = zext i32 %2787 to i64
  store i64 %2788, i64* %RAX, align 8, !tbaa !2428
  %2789 = icmp ult i32 %2787, %2786
  %2790 = icmp ult i32 %2787, 1
  %2791 = or i1 %2789, %2790
  %2792 = zext i1 %2791 to i8
  %2793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2792, i8* %2793, align 1, !tbaa !2432
  %2794 = and i32 %2787, 255
  %2795 = call i32 @llvm.ctpop.i32(i32 %2794) #16
  %2796 = trunc i32 %2795 to i8
  %2797 = and i8 %2796, 1
  %2798 = xor i8 %2797, 1
  %2799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2798, i8* %2799, align 1, !tbaa !2446
  %2800 = xor i64 1, %2783
  %2801 = trunc i64 %2800 to i32
  %2802 = xor i32 %2801, %2787
  %2803 = lshr i32 %2802, 4
  %2804 = trunc i32 %2803 to i8
  %2805 = and i8 %2804, 1
  %2806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2805, i8* %2806, align 1, !tbaa !2447
  %2807 = icmp eq i32 %2787, 0
  %2808 = zext i1 %2807 to i8
  %2809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2808, i8* %2809, align 1, !tbaa !2448
  %2810 = lshr i32 %2787, 31
  %2811 = trunc i32 %2810 to i8
  %2812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2811, i8* %2812, align 1, !tbaa !2449
  %2813 = lshr i32 %2786, 31
  %2814 = xor i32 %2810, %2813
  %2815 = add nuw nsw i32 %2814, %2810
  %2816 = icmp eq i32 %2815, 2
  %2817 = zext i1 %2816 to i8
  %2818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2817, i8* %2818, align 1, !tbaa !2450
  %2819 = load i64, i64* %RBP
  %2820 = sub i64 %2819, 44
  %2821 = load i32, i32* %EAX
  %2822 = zext i32 %2821 to i64
  %2823 = load i64, i64* %PC
  %2824 = add i64 %2823, 3
  store i64 %2824, i64* %PC
  %2825 = inttoptr i64 %2820 to i32*
  store i32 %2821, i32* %2825
  %2826 = load i64, i64* %PC
  %2827 = sub i64 %2826, 608
  %2828 = load i64, i64* %PC
  %2829 = add i64 %2828, 5
  store i64 %2829, i64* %PC
  %2830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2827, i64* %2830, align 8, !tbaa !2428
  br label %block_40196e

block_401bb2:                                     ; preds = %block_401acb
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 14
  %2833 = load i64, i64* %PC
  %2834 = add i64 %2833, 5
  store i64 %2834, i64* %PC
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2832, i64* %2835, align 8, !tbaa !2428
  br label %block_401bc0

block_401c2d:                                     ; preds = %block_401c1b, %block_401c21, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.6 = phi %struct.Memory* [ %2511, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %2511, %block_401c1b ], [ %2511, %block_401c21 ]
  %2836 = load i64, i64* %RSP
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 4
  store i64 %2838, i64* %PC
  %2839 = add i64 64, %2836
  store i64 %2839, i64* %RSP, align 8, !tbaa !2428
  %2840 = icmp ult i64 %2839, %2836
  %2841 = icmp ult i64 %2839, 64
  %2842 = or i1 %2840, %2841
  %2843 = zext i1 %2842 to i8
  %2844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2843, i8* %2844, align 1, !tbaa !2432
  %2845 = trunc i64 %2839 to i32
  %2846 = and i32 %2845, 255
  %2847 = call i32 @llvm.ctpop.i32(i32 %2846) #16
  %2848 = trunc i32 %2847 to i8
  %2849 = and i8 %2848, 1
  %2850 = xor i8 %2849, 1
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2850, i8* %2851, align 1, !tbaa !2446
  %2852 = xor i64 64, %2836
  %2853 = xor i64 %2852, %2839
  %2854 = lshr i64 %2853, 4
  %2855 = trunc i64 %2854 to i8
  %2856 = and i8 %2855, 1
  %2857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2856, i8* %2857, align 1, !tbaa !2447
  %2858 = icmp eq i64 %2839, 0
  %2859 = zext i1 %2858 to i8
  %2860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2859, i8* %2860, align 1, !tbaa !2448
  %2861 = lshr i64 %2839, 63
  %2862 = trunc i64 %2861 to i8
  %2863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2862, i8* %2863, align 1, !tbaa !2449
  %2864 = lshr i64 %2836, 63
  %2865 = xor i64 %2861, %2864
  %2866 = add nuw nsw i64 %2865, %2861
  %2867 = icmp eq i64 %2866, 2
  %2868 = zext i1 %2867 to i8
  %2869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2868, i8* %2869, align 1, !tbaa !2450
  %2870 = load i64, i64* %PC
  %2871 = add i64 %2870, 1
  store i64 %2871, i64* %PC
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2873 = load i64, i64* %2872, align 8, !tbaa !2428
  %2874 = add i64 %2873, 8
  %2875 = inttoptr i64 %2873 to i64*
  %2876 = load i64, i64* %2875
  store i64 %2876, i64* %RBP, align 8, !tbaa !2428
  store i64 %2874, i64* %2872, align 8, !tbaa !2428
  %2877 = load i64, i64* %PC
  %2878 = add i64 %2877, 1
  store i64 %2878, i64* %PC
  %2879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2881 = load i64, i64* %2880, align 8, !tbaa !2428
  %2882 = inttoptr i64 %2881 to i64*
  %2883 = load i64, i64* %2882
  store i64 %2883, i64* %2879, align 8, !tbaa !2428
  %2884 = add i64 %2881, 8
  store i64 %2884, i64* %2880, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_401c21:                                     ; preds = %block_401c1b
  %2885 = load i64, i64* %RBP
  %2886 = sub i64 %2885, 16
  %2887 = load i64, i64* %PC
  %2888 = add i64 %2887, 3
  store i64 %2888, i64* %PC
  %2889 = inttoptr i64 %2886 to i32*
  %2890 = load i32, i32* %2889
  %2891 = zext i32 %2890 to i64
  store i64 %2891, i64* %RAX, align 8, !tbaa !2428
  %2892 = load i64, i64* %RAX
  %2893 = load i64, i64* %PC
  %2894 = add i64 %2893, 3
  store i64 %2894, i64* %PC
  %2895 = trunc i64 %2892 to i32
  %2896 = sub i32 %2895, 1
  %2897 = zext i32 %2896 to i64
  store i64 %2897, i64* %RAX, align 8, !tbaa !2428
  %2898 = icmp ult i32 %2895, 1
  %2899 = zext i1 %2898 to i8
  %2900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2899, i8* %2900, align 1, !tbaa !2432
  %2901 = and i32 %2896, 255
  %2902 = call i32 @llvm.ctpop.i32(i32 %2901) #16
  %2903 = trunc i32 %2902 to i8
  %2904 = and i8 %2903, 1
  %2905 = xor i8 %2904, 1
  %2906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2905, i8* %2906, align 1, !tbaa !2446
  %2907 = xor i64 1, %2892
  %2908 = trunc i64 %2907 to i32
  %2909 = xor i32 %2908, %2896
  %2910 = lshr i32 %2909, 4
  %2911 = trunc i32 %2910 to i8
  %2912 = and i8 %2911, 1
  %2913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2912, i8* %2913, align 1, !tbaa !2447
  %2914 = icmp eq i32 %2896, 0
  %2915 = zext i1 %2914 to i8
  %2916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2915, i8* %2916, align 1, !tbaa !2448
  %2917 = lshr i32 %2896, 31
  %2918 = trunc i32 %2917 to i8
  %2919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2918, i8* %2919, align 1, !tbaa !2449
  %2920 = lshr i32 %2895, 31
  %2921 = xor i32 %2917, %2920
  %2922 = add nuw nsw i32 %2921, %2920
  %2923 = icmp eq i32 %2922, 2
  %2924 = zext i1 %2923 to i8
  %2925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2924, i8* %2925, align 1, !tbaa !2450
  %2926 = load i64, i64* %RBP
  %2927 = sub i64 %2926, 32
  %2928 = load i64, i64* %PC
  %2929 = add i64 %2928, 4
  store i64 %2929, i64* %PC
  %2930 = inttoptr i64 %2927 to i64*
  %2931 = load i64, i64* %2930
  store i64 %2931, i64* %RCX, align 8, !tbaa !2428
  %2932 = load i64, i64* %RCX
  %2933 = load i32, i32* %EAX
  %2934 = zext i32 %2933 to i64
  %2935 = load i64, i64* %PC
  %2936 = add i64 %2935, 2
  store i64 %2936, i64* %PC
  %2937 = inttoptr i64 %2932 to i32*
  store i32 %2933, i32* %2937
  br label %block_401c2d

block_401b45:                                     ; preds = %block_401ad7, %block_401afe
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.4, %block_401ad7 ], [ %MEMORY.4, %block_401afe ]
  %2938 = load i64, i64* %PC
  %2939 = add i64 %2938, 5
  store i64 %2939, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %2940 = load i64, i64* %RBP
  %2941 = sub i64 %2940, 16
  %2942 = load i64, i64* %PC
  %2943 = add i64 %2942, 3
  store i64 %2943, i64* %PC
  %2944 = inttoptr i64 %2941 to i32*
  %2945 = load i32, i32* %2944
  %2946 = zext i32 %2945 to i64
  store i64 %2946, i64* %RCX, align 8, !tbaa !2428
  %2947 = load i64, i64* %RBP
  %2948 = sub i64 %2947, 44
  %2949 = load i64, i64* %PC
  %2950 = add i64 %2949, 3
  store i64 %2950, i64* %PC
  %2951 = inttoptr i64 %2948 to i32*
  %2952 = load i32, i32* %2951
  %2953 = zext i32 %2952 to i64
  store i64 %2953, i64* %RDX, align 8, !tbaa !2428
  %2954 = load i64, i64* %RDX
  %2955 = load i64, i64* %PC
  %2956 = add i64 %2955, 3
  store i64 %2956, i64* %PC
  %2957 = trunc i64 %2954 to i32
  %2958 = add i32 1, %2957
  %2959 = zext i32 %2958 to i64
  store i64 %2959, i64* %RDX, align 8, !tbaa !2428
  %2960 = icmp ult i32 %2958, %2957
  %2961 = icmp ult i32 %2958, 1
  %2962 = or i1 %2960, %2961
  %2963 = zext i1 %2962 to i8
  %2964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2963, i8* %2964, align 1, !tbaa !2432
  %2965 = and i32 %2958, 255
  %2966 = call i32 @llvm.ctpop.i32(i32 %2965) #16
  %2967 = trunc i32 %2966 to i8
  %2968 = and i8 %2967, 1
  %2969 = xor i8 %2968, 1
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2969, i8* %2970, align 1, !tbaa !2446
  %2971 = xor i64 1, %2954
  %2972 = trunc i64 %2971 to i32
  %2973 = xor i32 %2972, %2958
  %2974 = lshr i32 %2973, 4
  %2975 = trunc i32 %2974 to i8
  %2976 = and i8 %2975, 1
  %2977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2976, i8* %2977, align 1, !tbaa !2447
  %2978 = icmp eq i32 %2958, 0
  %2979 = zext i1 %2978 to i8
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2979, i8* %2980, align 1, !tbaa !2448
  %2981 = lshr i32 %2958, 31
  %2982 = trunc i32 %2981 to i8
  %2983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2982, i8* %2983, align 1, !tbaa !2449
  %2984 = lshr i32 %2957, 31
  %2985 = xor i32 %2981, %2984
  %2986 = add nuw nsw i32 %2985, %2981
  %2987 = icmp eq i32 %2986, 2
  %2988 = zext i1 %2987 to i8
  %2989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2988, i8* %2989, align 1, !tbaa !2450
  %2990 = load i64, i64* %RCX
  %2991 = load i32, i32* %EDX
  %2992 = zext i32 %2991 to i64
  %2993 = load i64, i64* %PC
  %2994 = add i64 %2993, 2
  store i64 %2994, i64* %PC
  %2995 = trunc i64 %2990 to i32
  %2996 = sub i32 %2995, %2991
  %2997 = zext i32 %2996 to i64
  store i64 %2997, i64* %RCX, align 8, !tbaa !2428
  %2998 = icmp ult i32 %2995, %2991
  %2999 = zext i1 %2998 to i8
  %3000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2999, i8* %3000, align 1, !tbaa !2432
  %3001 = and i32 %2996, 255
  %3002 = call i32 @llvm.ctpop.i32(i32 %3001) #16
  %3003 = trunc i32 %3002 to i8
  %3004 = and i8 %3003, 1
  %3005 = xor i8 %3004, 1
  %3006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3005, i8* %3006, align 1, !tbaa !2446
  %3007 = xor i64 %2992, %2990
  %3008 = trunc i64 %3007 to i32
  %3009 = xor i32 %3008, %2996
  %3010 = lshr i32 %3009, 4
  %3011 = trunc i32 %3010 to i8
  %3012 = and i8 %3011, 1
  %3013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3012, i8* %3013, align 1, !tbaa !2447
  %3014 = icmp eq i32 %2996, 0
  %3015 = zext i1 %3014 to i8
  %3016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3015, i8* %3016, align 1, !tbaa !2448
  %3017 = lshr i32 %2996, 31
  %3018 = trunc i32 %3017 to i8
  %3019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3018, i8* %3019, align 1, !tbaa !2449
  %3020 = lshr i32 %2995, 31
  %3021 = lshr i32 %2991, 31
  %3022 = xor i32 %3021, %3020
  %3023 = xor i32 %3017, %3020
  %3024 = add nuw nsw i32 %3023, %3022
  %3025 = icmp eq i32 %3024, 2
  %3026 = zext i1 %3025 to i8
  %3027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3026, i8* %3027, align 1, !tbaa !2450
  %3028 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3029 = load i64, i64* %RBP
  %3030 = sub i64 %3029, 36
  %3031 = load i64, i64* %PC
  %3032 = add i64 %3031, 5
  store i64 %3032, i64* %PC
  %3033 = inttoptr i64 %3030 to float*
  %3034 = load float, float* %3033
  %3035 = bitcast i8* %3028 to float*
  store float %3034, float* %3035, align 1, !tbaa !2452
  %3036 = getelementptr inbounds i8, i8* %3028, i64 4
  %3037 = bitcast i8* %3036 to float*
  store float 0.000000e+00, float* %3037, align 1, !tbaa !2452
  %3038 = getelementptr inbounds i8, i8* %3028, i64 8
  %3039 = bitcast i8* %3038 to float*
  store float 0.000000e+00, float* %3039, align 1, !tbaa !2452
  %3040 = getelementptr inbounds i8, i8* %3028, i64 12
  %3041 = bitcast i8* %3040 to float*
  store float 0.000000e+00, float* %3041, align 1, !tbaa !2452
  %3042 = load i64, i64* %RBP
  %3043 = sub i64 %3042, 8
  %3044 = load i64, i64* %PC
  %3045 = add i64 %3044, 4
  store i64 %3045, i64* %PC
  %3046 = inttoptr i64 %3043 to i64*
  %3047 = load i64, i64* %3046
  store i64 %3047, i64* %RSI, align 8, !tbaa !2428
  %3048 = load i64, i64* %RBP
  %3049 = sub i64 %3048, 12
  %3050 = load i64, i64* %PC
  %3051 = add i64 %3050, 3
  store i64 %3051, i64* %PC
  %3052 = inttoptr i64 %3049 to i32*
  %3053 = load i32, i32* %3052
  %3054 = zext i32 %3053 to i64
  store i64 %3054, i64* %RDX, align 8, !tbaa !2428
  %3055 = load i64, i64* %RDX
  %3056 = load i64, i64* %RBP
  %3057 = sub i64 %3056, 44
  %3058 = load i64, i64* %PC
  %3059 = add i64 %3058, 4
  store i64 %3059, i64* %PC
  %3060 = inttoptr i64 %3057 to i32*
  %3061 = load i32, i32* %3060
  %3062 = shl i64 %3055, 32
  %3063 = ashr exact i64 %3062, 32
  %3064 = sext i32 %3061 to i64
  %3065 = mul nsw i64 %3064, %3063
  %3066 = trunc i64 %3065 to i32
  %3067 = and i64 %3065, 4294967295
  store i64 %3067, i64* %RDX, align 8, !tbaa !2428
  %3068 = shl i64 %3065, 32
  %3069 = ashr exact i64 %3068, 32
  %3070 = icmp ne i64 %3069, %3065
  %3071 = zext i1 %3070 to i8
  %3072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3071, i8* %3072, align 1, !tbaa !2432
  %3073 = and i32 %3066, 255
  %3074 = call i32 @llvm.ctpop.i32(i32 %3073) #16
  %3075 = trunc i32 %3074 to i8
  %3076 = and i8 %3075, 1
  %3077 = xor i8 %3076, 1
  %3078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3077, i8* %3078, align 1, !tbaa !2446
  %3079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3079, align 1, !tbaa !2447
  %3080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3080, align 1, !tbaa !2448
  %3081 = lshr i32 %3066, 31
  %3082 = trunc i32 %3081 to i8
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3082, i8* %3083, align 1, !tbaa !2449
  %3084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3071, i8* %3084, align 1, !tbaa !2450
  %3085 = load i64, i64* %RDX
  %3086 = load i64, i64* %RBP
  %3087 = sub i64 %3086, 44
  %3088 = load i64, i64* %PC
  %3089 = add i64 %3088, 3
  store i64 %3089, i64* %PC
  %3090 = trunc i64 %3085 to i32
  %3091 = inttoptr i64 %3087 to i32*
  %3092 = load i32, i32* %3091
  %3093 = add i32 %3092, %3090
  %3094 = zext i32 %3093 to i64
  store i64 %3094, i64* %RDX, align 8, !tbaa !2428
  %3095 = icmp ult i32 %3093, %3090
  %3096 = icmp ult i32 %3093, %3092
  %3097 = or i1 %3095, %3096
  %3098 = zext i1 %3097 to i8
  %3099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3098, i8* %3099, align 1, !tbaa !2432
  %3100 = and i32 %3093, 255
  %3101 = call i32 @llvm.ctpop.i32(i32 %3100) #16
  %3102 = trunc i32 %3101 to i8
  %3103 = and i8 %3102, 1
  %3104 = xor i8 %3103, 1
  %3105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3104, i8* %3105, align 1, !tbaa !2446
  %3106 = xor i32 %3092, %3090
  %3107 = xor i32 %3106, %3093
  %3108 = lshr i32 %3107, 4
  %3109 = trunc i32 %3108 to i8
  %3110 = and i8 %3109, 1
  %3111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3110, i8* %3111, align 1, !tbaa !2447
  %3112 = icmp eq i32 %3093, 0
  %3113 = zext i1 %3112 to i8
  %3114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3113, i8* %3114, align 1, !tbaa !2448
  %3115 = lshr i32 %3093, 31
  %3116 = trunc i32 %3115 to i8
  %3117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3116, i8* %3117, align 1, !tbaa !2449
  %3118 = lshr i32 %3090, 31
  %3119 = lshr i32 %3092, 31
  %3120 = xor i32 %3115, %3118
  %3121 = xor i32 %3115, %3119
  %3122 = add nuw nsw i32 %3120, %3121
  %3123 = icmp eq i32 %3122, 2
  %3124 = zext i1 %3123 to i8
  %3125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3124, i8* %3125, align 1, !tbaa !2450
  %3126 = load i64, i64* %RDX
  %3127 = load i64, i64* %PC
  %3128 = add i64 %3127, 3
  store i64 %3128, i64* %PC
  %3129 = trunc i64 %3126 to i32
  %3130 = add i32 1, %3129
  %3131 = zext i32 %3130 to i64
  store i64 %3131, i64* %RDX, align 8, !tbaa !2428
  %3132 = icmp ult i32 %3130, %3129
  %3133 = icmp ult i32 %3130, 1
  %3134 = or i1 %3132, %3133
  %3135 = zext i1 %3134 to i8
  %3136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3135, i8* %3136, align 1, !tbaa !2432
  %3137 = and i32 %3130, 255
  %3138 = call i32 @llvm.ctpop.i32(i32 %3137) #16
  %3139 = trunc i32 %3138 to i8
  %3140 = and i8 %3139, 1
  %3141 = xor i8 %3140, 1
  %3142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3141, i8* %3142, align 1, !tbaa !2446
  %3143 = xor i64 1, %3126
  %3144 = trunc i64 %3143 to i32
  %3145 = xor i32 %3144, %3130
  %3146 = lshr i32 %3145, 4
  %3147 = trunc i32 %3146 to i8
  %3148 = and i8 %3147, 1
  %3149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3148, i8* %3149, align 1, !tbaa !2447
  %3150 = icmp eq i32 %3130, 0
  %3151 = zext i1 %3150 to i8
  %3152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3151, i8* %3152, align 1, !tbaa !2448
  %3153 = lshr i32 %3130, 31
  %3154 = trunc i32 %3153 to i8
  %3155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3154, i8* %3155, align 1, !tbaa !2449
  %3156 = lshr i32 %3129, 31
  %3157 = xor i32 %3153, %3156
  %3158 = add nuw nsw i32 %3157, %3153
  %3159 = icmp eq i32 %3158, 2
  %3160 = zext i1 %3159 to i8
  %3161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3160, i8* %3161, align 1, !tbaa !2450
  %3162 = load i32, i32* %EDX
  %3163 = zext i32 %3162 to i64
  %3164 = load i64, i64* %PC
  %3165 = add i64 %3164, 3
  store i64 %3165, i64* %PC
  %3166 = shl i64 %3163, 32
  %3167 = ashr exact i64 %3166, 32
  store i64 %3167, i64* %RDI, align 8, !tbaa !2428
  %3168 = load i64, i64* %RDI
  %3169 = load i64, i64* %PC
  %3170 = add i64 %3169, 4
  store i64 %3170, i64* %PC
  %3171 = shl i64 %3168, 1
  %3172 = icmp slt i64 %3171, 0
  %3173 = shl i64 %3171, 1
  store i64 %3173, i64* %RDI, align 8, !tbaa !2428
  %3174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3175 = zext i1 %3172 to i8
  store i8 %3175, i8* %3174, align 1, !tbaa !2451
  %3176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3177 = trunc i64 %3173 to i32
  %3178 = and i32 %3177, 254
  %3179 = call i32 @llvm.ctpop.i32(i32 %3178) #16
  %3180 = trunc i32 %3179 to i8
  %3181 = and i8 %3180, 1
  %3182 = xor i8 %3181, 1
  store i8 %3182, i8* %3176, align 1, !tbaa !2451
  %3183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3183, align 1, !tbaa !2451
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3185 = icmp eq i64 %3173, 0
  %3186 = zext i1 %3185 to i8
  store i8 %3186, i8* %3184, align 1, !tbaa !2451
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3188 = lshr i64 %3173, 63
  %3189 = trunc i64 %3188 to i8
  store i8 %3189, i8* %3187, align 1, !tbaa !2451
  %3190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3190, align 1, !tbaa !2451
  %3191 = load i64, i64* %RSI
  %3192 = load i64, i64* %RDI
  %3193 = load i64, i64* %PC
  %3194 = add i64 %3193, 3
  store i64 %3194, i64* %PC
  %3195 = add i64 %3192, %3191
  store i64 %3195, i64* %RSI, align 8, !tbaa !2428
  %3196 = icmp ult i64 %3195, %3191
  %3197 = icmp ult i64 %3195, %3192
  %3198 = or i1 %3196, %3197
  %3199 = zext i1 %3198 to i8
  %3200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3199, i8* %3200, align 1, !tbaa !2432
  %3201 = trunc i64 %3195 to i32
  %3202 = and i32 %3201, 255
  %3203 = call i32 @llvm.ctpop.i32(i32 %3202) #16
  %3204 = trunc i32 %3203 to i8
  %3205 = and i8 %3204, 1
  %3206 = xor i8 %3205, 1
  %3207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3206, i8* %3207, align 1, !tbaa !2446
  %3208 = xor i64 %3192, %3191
  %3209 = xor i64 %3208, %3195
  %3210 = lshr i64 %3209, 4
  %3211 = trunc i64 %3210 to i8
  %3212 = and i8 %3211, 1
  %3213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3212, i8* %3213, align 1, !tbaa !2447
  %3214 = icmp eq i64 %3195, 0
  %3215 = zext i1 %3214 to i8
  %3216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3215, i8* %3216, align 1, !tbaa !2448
  %3217 = lshr i64 %3195, 63
  %3218 = trunc i64 %3217 to i8
  %3219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3218, i8* %3219, align 1, !tbaa !2449
  %3220 = lshr i64 %3191, 63
  %3221 = lshr i64 %3192, 63
  %3222 = xor i64 %3217, %3220
  %3223 = xor i64 %3217, %3221
  %3224 = add nuw nsw i64 %3222, %3223
  %3225 = icmp eq i64 %3224, 2
  %3226 = zext i1 %3225 to i8
  %3227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3226, i8* %3227, align 1, !tbaa !2450
  %3228 = load i64, i64* %RBP
  %3229 = sub i64 %3228, 8
  %3230 = load i64, i64* %PC
  %3231 = add i64 %3230, 4
  store i64 %3231, i64* %PC
  %3232 = inttoptr i64 %3229 to i64*
  %3233 = load i64, i64* %3232
  store i64 %3233, i64* %RDI, align 8, !tbaa !2428
  %3234 = load i64, i64* %RBP
  %3235 = sub i64 %3234, 12
  %3236 = load i64, i64* %PC
  %3237 = add i64 %3236, 3
  store i64 %3237, i64* %PC
  %3238 = inttoptr i64 %3235 to i32*
  %3239 = load i32, i32* %3238
  %3240 = zext i32 %3239 to i64
  store i64 %3240, i64* %RDX, align 8, !tbaa !2428
  %3241 = load i64, i64* %RDX
  %3242 = load i64, i64* %RBP
  %3243 = sub i64 %3242, 40
  %3244 = load i64, i64* %PC
  %3245 = add i64 %3244, 4
  store i64 %3245, i64* %PC
  %3246 = inttoptr i64 %3243 to i32*
  %3247 = load i32, i32* %3246
  %3248 = shl i64 %3241, 32
  %3249 = ashr exact i64 %3248, 32
  %3250 = sext i32 %3247 to i64
  %3251 = mul nsw i64 %3250, %3249
  %3252 = trunc i64 %3251 to i32
  %3253 = and i64 %3251, 4294967295
  store i64 %3253, i64* %RDX, align 8, !tbaa !2428
  %3254 = shl i64 %3251, 32
  %3255 = ashr exact i64 %3254, 32
  %3256 = icmp ne i64 %3255, %3251
  %3257 = zext i1 %3256 to i8
  %3258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3257, i8* %3258, align 1, !tbaa !2432
  %3259 = and i32 %3252, 255
  %3260 = call i32 @llvm.ctpop.i32(i32 %3259) #16
  %3261 = trunc i32 %3260 to i8
  %3262 = and i8 %3261, 1
  %3263 = xor i8 %3262, 1
  %3264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3263, i8* %3264, align 1, !tbaa !2446
  %3265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3265, align 1, !tbaa !2447
  %3266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3266, align 1, !tbaa !2448
  %3267 = lshr i32 %3252, 31
  %3268 = trunc i32 %3267 to i8
  %3269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3268, i8* %3269, align 1, !tbaa !2449
  %3270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3257, i8* %3270, align 1, !tbaa !2450
  %3271 = load i64, i64* %RDX
  %3272 = load i64, i64* %RBP
  %3273 = sub i64 %3272, 44
  %3274 = load i64, i64* %PC
  %3275 = add i64 %3274, 3
  store i64 %3275, i64* %PC
  %3276 = trunc i64 %3271 to i32
  %3277 = inttoptr i64 %3273 to i32*
  %3278 = load i32, i32* %3277
  %3279 = add i32 %3278, %3276
  %3280 = zext i32 %3279 to i64
  store i64 %3280, i64* %RDX, align 8, !tbaa !2428
  %3281 = icmp ult i32 %3279, %3276
  %3282 = icmp ult i32 %3279, %3278
  %3283 = or i1 %3281, %3282
  %3284 = zext i1 %3283 to i8
  %3285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3284, i8* %3285, align 1, !tbaa !2432
  %3286 = and i32 %3279, 255
  %3287 = call i32 @llvm.ctpop.i32(i32 %3286) #16
  %3288 = trunc i32 %3287 to i8
  %3289 = and i8 %3288, 1
  %3290 = xor i8 %3289, 1
  %3291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3290, i8* %3291, align 1, !tbaa !2446
  %3292 = xor i32 %3278, %3276
  %3293 = xor i32 %3292, %3279
  %3294 = lshr i32 %3293, 4
  %3295 = trunc i32 %3294 to i8
  %3296 = and i8 %3295, 1
  %3297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3296, i8* %3297, align 1, !tbaa !2447
  %3298 = icmp eq i32 %3279, 0
  %3299 = zext i1 %3298 to i8
  %3300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3299, i8* %3300, align 1, !tbaa !2448
  %3301 = lshr i32 %3279, 31
  %3302 = trunc i32 %3301 to i8
  %3303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3302, i8* %3303, align 1, !tbaa !2449
  %3304 = lshr i32 %3276, 31
  %3305 = lshr i32 %3278, 31
  %3306 = xor i32 %3301, %3304
  %3307 = xor i32 %3301, %3305
  %3308 = add nuw nsw i32 %3306, %3307
  %3309 = icmp eq i32 %3308, 2
  %3310 = zext i1 %3309 to i8
  %3311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3310, i8* %3311, align 1, !tbaa !2450
  %3312 = load i64, i64* %RDX
  %3313 = load i64, i64* %PC
  %3314 = add i64 %3313, 3
  store i64 %3314, i64* %PC
  %3315 = trunc i64 %3312 to i32
  %3316 = add i32 1, %3315
  %3317 = zext i32 %3316 to i64
  store i64 %3317, i64* %RDX, align 8, !tbaa !2428
  %3318 = icmp ult i32 %3316, %3315
  %3319 = icmp ult i32 %3316, 1
  %3320 = or i1 %3318, %3319
  %3321 = zext i1 %3320 to i8
  %3322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3321, i8* %3322, align 1, !tbaa !2432
  %3323 = and i32 %3316, 255
  %3324 = call i32 @llvm.ctpop.i32(i32 %3323) #16
  %3325 = trunc i32 %3324 to i8
  %3326 = and i8 %3325, 1
  %3327 = xor i8 %3326, 1
  %3328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3327, i8* %3328, align 1, !tbaa !2446
  %3329 = xor i64 1, %3312
  %3330 = trunc i64 %3329 to i32
  %3331 = xor i32 %3330, %3316
  %3332 = lshr i32 %3331, 4
  %3333 = trunc i32 %3332 to i8
  %3334 = and i8 %3333, 1
  %3335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3334, i8* %3335, align 1, !tbaa !2447
  %3336 = icmp eq i32 %3316, 0
  %3337 = zext i1 %3336 to i8
  %3338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3337, i8* %3338, align 1, !tbaa !2448
  %3339 = lshr i32 %3316, 31
  %3340 = trunc i32 %3339 to i8
  %3341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3340, i8* %3341, align 1, !tbaa !2449
  %3342 = lshr i32 %3315, 31
  %3343 = xor i32 %3339, %3342
  %3344 = add nuw nsw i32 %3343, %3339
  %3345 = icmp eq i32 %3344, 2
  %3346 = zext i1 %3345 to i8
  %3347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3346, i8* %3347, align 1, !tbaa !2450
  %3348 = load i32, i32* %EDX
  %3349 = zext i32 %3348 to i64
  %3350 = load i64, i64* %PC
  %3351 = add i64 %3350, 3
  store i64 %3351, i64* %PC
  %3352 = shl i64 %3349, 32
  %3353 = ashr exact i64 %3352, 32
  store i64 %3353, i64* %R8, align 8, !tbaa !2428
  %3354 = load i64, i64* %R8
  %3355 = load i64, i64* %PC
  %3356 = add i64 %3355, 4
  store i64 %3356, i64* %PC
  %3357 = shl i64 %3354, 1
  %3358 = icmp slt i64 %3357, 0
  %3359 = shl i64 %3357, 1
  store i64 %3359, i64* %R8, align 8, !tbaa !2428
  %3360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3361 = zext i1 %3358 to i8
  store i8 %3361, i8* %3360, align 1, !tbaa !2451
  %3362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3363 = trunc i64 %3359 to i32
  %3364 = and i32 %3363, 254
  %3365 = call i32 @llvm.ctpop.i32(i32 %3364) #16
  %3366 = trunc i32 %3365 to i8
  %3367 = and i8 %3366, 1
  %3368 = xor i8 %3367, 1
  store i8 %3368, i8* %3362, align 1, !tbaa !2451
  %3369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3369, align 1, !tbaa !2451
  %3370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3371 = icmp eq i64 %3359, 0
  %3372 = zext i1 %3371 to i8
  store i8 %3372, i8* %3370, align 1, !tbaa !2451
  %3373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3374 = lshr i64 %3359, 63
  %3375 = trunc i64 %3374 to i8
  store i8 %3375, i8* %3373, align 1, !tbaa !2451
  %3376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3376, align 1, !tbaa !2451
  %3377 = load i64, i64* %RDI
  %3378 = load i64, i64* %R8
  %3379 = load i64, i64* %PC
  %3380 = add i64 %3379, 3
  store i64 %3380, i64* %PC
  %3381 = add i64 %3378, %3377
  store i64 %3381, i64* %RDI, align 8, !tbaa !2428
  %3382 = icmp ult i64 %3381, %3377
  %3383 = icmp ult i64 %3381, %3378
  %3384 = or i1 %3382, %3383
  %3385 = zext i1 %3384 to i8
  %3386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3385, i8* %3386, align 1, !tbaa !2432
  %3387 = trunc i64 %3381 to i32
  %3388 = and i32 %3387, 255
  %3389 = call i32 @llvm.ctpop.i32(i32 %3388) #16
  %3390 = trunc i32 %3389 to i8
  %3391 = and i8 %3390, 1
  %3392 = xor i8 %3391, 1
  %3393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3392, i8* %3393, align 1, !tbaa !2446
  %3394 = xor i64 %3378, %3377
  %3395 = xor i64 %3394, %3381
  %3396 = lshr i64 %3395, 4
  %3397 = trunc i64 %3396 to i8
  %3398 = and i8 %3397, 1
  %3399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3398, i8* %3399, align 1, !tbaa !2447
  %3400 = icmp eq i64 %3381, 0
  %3401 = zext i1 %3400 to i8
  %3402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3401, i8* %3402, align 1, !tbaa !2448
  %3403 = lshr i64 %3381, 63
  %3404 = trunc i64 %3403 to i8
  %3405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3404, i8* %3405, align 1, !tbaa !2449
  %3406 = lshr i64 %3377, 63
  %3407 = lshr i64 %3378, 63
  %3408 = xor i64 %3403, %3406
  %3409 = xor i64 %3403, %3407
  %3410 = add nuw nsw i64 %3408, %3409
  %3411 = icmp eq i64 %3410, 2
  %3412 = zext i1 %3411 to i8
  %3413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3412, i8* %3413, align 1, !tbaa !2450
  %3414 = load i64, i64* %RBP
  %3415 = sub i64 %3414, 64
  %3416 = load i64, i64* %RDI
  %3417 = load i64, i64* %PC
  %3418 = add i64 %3417, 4
  store i64 %3418, i64* %PC
  %3419 = inttoptr i64 %3415 to i64*
  store i64 %3416, i64* %3419
  %3420 = load i32, i32* %ECX
  %3421 = zext i32 %3420 to i64
  %3422 = load i64, i64* %PC
  %3423 = add i64 %3422, 2
  store i64 %3423, i64* %PC
  %3424 = and i64 %3421, 4294967295
  store i64 %3424, i64* %RDI, align 8, !tbaa !2428
  %3425 = load i32, i32* %EAX
  %3426 = zext i32 %3425 to i64
  %3427 = load i64, i64* %PC
  %3428 = add i64 %3427, 2
  store i64 %3428, i64* %PC
  %3429 = and i64 %3426, 4294967295
  store i64 %3429, i64* %RDX, align 8, !tbaa !2428
  %3430 = load i64, i64* %RBP
  %3431 = sub i64 %3430, 64
  %3432 = load i64, i64* %PC
  %3433 = add i64 %3432, 4
  store i64 %3433, i64* %PC
  %3434 = inttoptr i64 %3431 to i64*
  %3435 = load i64, i64* %3434
  store i64 %3435, i64* %RCX, align 8, !tbaa !2428
  %3436 = bitcast i32* %R8D to i64*
  %3437 = load i32, i32* %EAX
  %3438 = zext i32 %3437 to i64
  %3439 = load i64, i64* %PC
  %3440 = add i64 %3439, 3
  store i64 %3440, i64* %PC
  %3441 = and i64 %3438, 4294967295
  store i64 %3441, i64* %3436, align 8, !tbaa !2428
  %3442 = load i64, i64* %PC
  %3443 = add i64 %3442, 3297
  %3444 = load i64, i64* %PC
  %3445 = add i64 %3444, 5
  %3446 = load i64, i64* %PC
  %3447 = add i64 %3446, 5
  store i64 %3447, i64* %PC
  %3448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3449 = load i64, i64* %3448, align 8, !tbaa !2428
  %3450 = add i64 %3449, -8
  %3451 = inttoptr i64 %3450 to i64*
  store i64 %3445, i64* %3451
  store i64 %3450, i64* %3448, align 8, !tbaa !2428
  %3452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3443, i64* %3452, align 8, !tbaa !2428
  %3453 = load i64, i64* %PC
  %3454 = call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* %0, i64 %3453, %struct.Memory* %MEMORY.7)
  %3455 = load i64, i64* %RBP
  %3456 = sub i64 %3455, 40
  %3457 = load i64, i64* %PC
  %3458 = add i64 %3457, 3
  store i64 %3458, i64* %PC
  %3459 = inttoptr i64 %3456 to i32*
  %3460 = load i32, i32* %3459
  %3461 = zext i32 %3460 to i64
  store i64 %3461, i64* %RAX, align 8, !tbaa !2428
  %3462 = load i64, i64* %RAX
  %3463 = load i64, i64* %PC
  %3464 = add i64 %3463, 3
  store i64 %3464, i64* %PC
  %3465 = trunc i64 %3462 to i32
  %3466 = add i32 1, %3465
  %3467 = zext i32 %3466 to i64
  store i64 %3467, i64* %RAX, align 8, !tbaa !2428
  %3468 = icmp ult i32 %3466, %3465
  %3469 = icmp ult i32 %3466, 1
  %3470 = or i1 %3468, %3469
  %3471 = zext i1 %3470 to i8
  %3472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3471, i8* %3472, align 1, !tbaa !2432
  %3473 = and i32 %3466, 255
  %3474 = call i32 @llvm.ctpop.i32(i32 %3473) #16
  %3475 = trunc i32 %3474 to i8
  %3476 = and i8 %3475, 1
  %3477 = xor i8 %3476, 1
  %3478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3477, i8* %3478, align 1, !tbaa !2446
  %3479 = xor i64 1, %3462
  %3480 = trunc i64 %3479 to i32
  %3481 = xor i32 %3480, %3466
  %3482 = lshr i32 %3481, 4
  %3483 = trunc i32 %3482 to i8
  %3484 = and i8 %3483, 1
  %3485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3484, i8* %3485, align 1, !tbaa !2447
  %3486 = icmp eq i32 %3466, 0
  %3487 = zext i1 %3486 to i8
  %3488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3487, i8* %3488, align 1, !tbaa !2448
  %3489 = lshr i32 %3466, 31
  %3490 = trunc i32 %3489 to i8
  %3491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3490, i8* %3491, align 1, !tbaa !2449
  %3492 = lshr i32 %3465, 31
  %3493 = xor i32 %3489, %3492
  %3494 = add nuw nsw i32 %3493, %3489
  %3495 = icmp eq i32 %3494, 2
  %3496 = zext i1 %3495 to i8
  %3497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3496, i8* %3497, align 1, !tbaa !2450
  %3498 = load i64, i64* %RBP
  %3499 = sub i64 %3498, 40
  %3500 = load i32, i32* %EAX
  %3501 = zext i32 %3500 to i64
  %3502 = load i64, i64* %PC
  %3503 = add i64 %3502, 3
  store i64 %3503, i64* %PC
  %3504 = inttoptr i64 %3499 to i32*
  store i32 %3500, i32* %3504
  %3505 = load i64, i64* %PC
  %3506 = sub i64 %3505, 226
  %3507 = load i64, i64* %PC
  %3508 = add i64 %3507, 5
  store i64 %3508, i64* %PC
  %3509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3506, i64* %3509, align 8, !tbaa !2428
  br label %block_401acb

block_401c1b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %3510 = load i64, i64* %PC
  %3511 = add i64 %3510, 18
  %3512 = load i64, i64* %PC
  %3513 = add i64 %3512, 6
  %3514 = load i64, i64* %PC
  %3515 = add i64 %3514, 6
  store i64 %3515, i64* %PC
  %3516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3517 = load i8, i8* %3516, align 1, !tbaa !2446
  store i8 %3517, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3519 = icmp ne i8 %3517, 0
  %3520 = select i1 %3519, i64 %3511, i64 %3513
  store i64 %3520, i64* %3518, align 8, !tbaa !2428
  %3521 = load i8, i8* %BRANCH_TAKEN
  %3522 = icmp eq i8 %3521, 1
  br i1 %3522, label %block_401c2d, label %block_401c21
}

; Function Attrs: noinline
define %struct.Memory* @sub_400630_what_date(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400630:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %31, align 8, !tbaa !2428
  %36 = add i64 %33, 8
  store i64 %36, i64* %32, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4005d0, label %block_4005b9

block_4005d0:                                     ; preds = %block_4005b0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4005b9:                                     ; preds = %block_4005b0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400540_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c40_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 17
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %R8D = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 19
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %R9D = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 7
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 9
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 11
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RDI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 13
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RSP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 15
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RBP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 17
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R8 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = sub i64 %66, 96
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  %70 = icmp ult i64 %66, 96
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2432
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2446
  %80 = xor i64 96, %66
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %66, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i64, i64* %RDI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 12
  %106 = load i32, i32* %ESI
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 16
  %113 = load i32, i32* %EDX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 24
  %120 = load i64, i64* %RCX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 32
  %126 = load i64, i64* %R8
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 36
  %132 = load i32, i32* %R9D
  %133 = zext i32 %132 to i64
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %131 to i32*
  store i32 %132, i32* %136
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  %142 = load i32, i32* %141
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RDX, align 8, !tbaa !2428
  %144 = load i64, i64* %RDX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  %147 = trunc i64 %144 to i32
  %148 = sub i32 %147, 1
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RDX, align 8, !tbaa !2428
  %150 = icmp ult i32 %147, 1
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2432
  %153 = and i32 %148, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2446
  %159 = xor i64 1, %144
  %160 = trunc i64 %159 to i32
  %161 = xor i32 %160, %148
  %162 = lshr i32 %161, 4
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %164, i8* %165, align 1, !tbaa !2447
  %166 = icmp eq i32 %148, 0
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %167, i8* %168, align 1, !tbaa !2448
  %169 = lshr i32 %148, 31
  %170 = trunc i32 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2449
  %172 = lshr i32 %147, 31
  %173 = xor i32 %169, %172
  %174 = add nuw nsw i32 %173, %172
  %175 = icmp eq i32 %174, 2
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %176, i8* %177, align 1, !tbaa !2450
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 56
  %180 = load i32, i32* %EDX
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %179 to i32*
  store i32 %180, i32* %184
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 36
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i32*
  %190 = load i32, i32* %189
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %191, align 1, !tbaa !2432
  %192 = and i32 %190, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %198, align 1, !tbaa !2447
  %199 = icmp eq i32 %190, 0
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %200, i8* %201, align 1, !tbaa !2448
  %202 = lshr i32 %190, 31
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %203, i8* %204, align 1, !tbaa !2449
  %205 = lshr i32 %190, 31
  %206 = xor i32 %202, %205
  %207 = add nuw nsw i32 %206, %205
  %208 = icmp eq i32 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2450
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 413
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 6
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 6
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %218 = load i8, i8* %217, align 1, !tbaa !2448
  %219 = icmp eq i8 %218, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %222 = select i1 %219, i64 %212, i64 %214
  store i64 %222, i64* %221, align 8, !tbaa !2428
  %223 = load i8, i8* %BRANCH_TAKEN
  %224 = icmp eq i8 %223, 1
  %225 = load i64, i64* %RBP
  br i1 %224, label %block_401e08, label %block_401c71

block_401c7b:                                     ; preds = %block_401c71
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 44
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  store i32 0, i32* %230
  br label %block_401c82

block_401d64:                                     ; preds = %block_401d58
  %231 = add i64 %1016, 5
  store i64 %231, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 16
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RCX, align 8, !tbaa !2428
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 48
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 3
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %240 to i32*
  %244 = load i32, i32* %243
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RDX, align 8, !tbaa !2428
  %246 = load i64, i64* %RDX
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = trunc i64 %246 to i32
  %250 = add i32 1, %249
  %251 = zext i32 %250 to i64
  store i64 %251, i64* %RDX, align 8, !tbaa !2428
  %252 = icmp ult i32 %250, %249
  %253 = icmp ult i32 %250, 1
  %254 = or i1 %252, %253
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %255, i8* %256, align 1, !tbaa !2432
  %257 = and i32 %250, 255
  %258 = call i32 @llvm.ctpop.i32(i32 %257) #16
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %261, i8* %262, align 1, !tbaa !2446
  %263 = xor i64 1, %246
  %264 = trunc i64 %263 to i32
  %265 = xor i32 %264, %250
  %266 = lshr i32 %265, 4
  %267 = trunc i32 %266 to i8
  %268 = and i8 %267, 1
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %268, i8* %269, align 1, !tbaa !2447
  %270 = icmp eq i32 %250, 0
  %271 = zext i1 %270 to i8
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %271, i8* %272, align 1, !tbaa !2448
  %273 = lshr i32 %250, 31
  %274 = trunc i32 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %274, i8* %275, align 1, !tbaa !2449
  %276 = lshr i32 %249, 31
  %277 = xor i32 %273, %276
  %278 = add nuw nsw i32 %277, %273
  %279 = icmp eq i32 %278, 2
  %280 = zext i1 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %280, i8* %281, align 1, !tbaa !2450
  %282 = load i64, i64* %RCX
  %283 = load i32, i32* %EDX
  %284 = zext i32 %283 to i64
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 2
  store i64 %286, i64* %PC
  %287 = trunc i64 %282 to i32
  %288 = sub i32 %287, %283
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %RCX, align 8, !tbaa !2428
  %290 = icmp ult i32 %287, %283
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2432
  %293 = and i32 %288, 255
  %294 = call i32 @llvm.ctpop.i32(i32 %293) #16
  %295 = trunc i32 %294 to i8
  %296 = and i8 %295, 1
  %297 = xor i8 %296, 1
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %297, i8* %298, align 1, !tbaa !2446
  %299 = xor i64 %284, %282
  %300 = trunc i64 %299 to i32
  %301 = xor i32 %300, %288
  %302 = lshr i32 %301, 4
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2447
  %306 = icmp eq i32 %288, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2448
  %309 = lshr i32 %288, 31
  %310 = trunc i32 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2449
  %312 = lshr i32 %287, 31
  %313 = lshr i32 %283, 31
  %314 = xor i32 %313, %312
  %315 = xor i32 %309, %312
  %316 = add nuw nsw i32 %315, %314
  %317 = icmp eq i32 %316, 2
  %318 = zext i1 %317 to i8
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %318, i8* %319, align 1, !tbaa !2450
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 44
  %322 = load i32, i32* %ECX
  %323 = zext i32 %322 to i64
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %321 to i32*
  store i32 %322, i32* %326
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 32
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 4
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i64*
  %332 = load i64, i64* %331
  store i64 %332, i64* %RSI, align 8, !tbaa !2428
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 44
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 4
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i32*
  %338 = load i32, i32* %337
  %339 = sext i32 %338 to i64
  store i64 %339, i64* %RDI, align 8, !tbaa !2428
  %340 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %341 = load i64, i64* %RSI
  %342 = load i64, i64* %RDI
  %343 = mul i64 %342, 4
  %344 = add i64 %343, %341
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC
  %347 = inttoptr i64 %344 to float*
  %348 = load float, float* %347
  %349 = bitcast i8* %340 to float*
  store float %348, float* %349, align 1, !tbaa !2452
  %350 = getelementptr inbounds i8, i8* %340, i64 4
  %351 = bitcast i8* %350 to float*
  store float 0.000000e+00, float* %351, align 1, !tbaa !2452
  %352 = getelementptr inbounds i8, i8* %340, i64 8
  %353 = bitcast i8* %352 to float*
  store float 0.000000e+00, float* %353, align 1, !tbaa !2452
  %354 = getelementptr inbounds i8, i8* %340, i64 12
  %355 = bitcast i8* %354 to float*
  store float 0.000000e+00, float* %355, align 1, !tbaa !2452
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 8
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360
  store i64 %361, i64* %RSI, align 8, !tbaa !2428
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 12
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i32*
  %367 = load i32, i32* %366
  %368 = zext i32 %367 to i64
  store i64 %368, i64* %RCX, align 8, !tbaa !2428
  %369 = load i64, i64* %RCX
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 44
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 4
  store i64 %373, i64* %PC
  %374 = inttoptr i64 %371 to i32*
  %375 = load i32, i32* %374
  %376 = shl i64 %369, 32
  %377 = ashr exact i64 %376, 32
  %378 = sext i32 %375 to i64
  %379 = mul nsw i64 %378, %377
  %380 = trunc i64 %379 to i32
  %381 = and i64 %379, 4294967295
  store i64 %381, i64* %RCX, align 8, !tbaa !2428
  %382 = shl i64 %379, 32
  %383 = ashr exact i64 %382, 32
  %384 = icmp ne i64 %383, %379
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %385, i8* %386, align 1, !tbaa !2432
  %387 = and i32 %380, 255
  %388 = call i32 @llvm.ctpop.i32(i32 %387) #16
  %389 = trunc i32 %388 to i8
  %390 = and i8 %389, 1
  %391 = xor i8 %390, 1
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %391, i8* %392, align 1, !tbaa !2446
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %393, align 1, !tbaa !2447
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %394, align 1, !tbaa !2448
  %395 = lshr i32 %380, 31
  %396 = trunc i32 %395 to i8
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %396, i8* %397, align 1, !tbaa !2449
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %385, i8* %398, align 1, !tbaa !2450
  %399 = load i64, i64* %RCX
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 44
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 3
  store i64 %403, i64* %PC
  %404 = trunc i64 %399 to i32
  %405 = inttoptr i64 %401 to i32*
  %406 = load i32, i32* %405
  %407 = add i32 %406, %404
  %408 = zext i32 %407 to i64
  store i64 %408, i64* %RCX, align 8, !tbaa !2428
  %409 = icmp ult i32 %407, %404
  %410 = icmp ult i32 %407, %406
  %411 = or i1 %409, %410
  %412 = zext i1 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %412, i8* %413, align 1, !tbaa !2432
  %414 = and i32 %407, 255
  %415 = call i32 @llvm.ctpop.i32(i32 %414) #16
  %416 = trunc i32 %415 to i8
  %417 = and i8 %416, 1
  %418 = xor i8 %417, 1
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %418, i8* %419, align 1, !tbaa !2446
  %420 = xor i32 %406, %404
  %421 = xor i32 %420, %407
  %422 = lshr i32 %421, 4
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %424, i8* %425, align 1, !tbaa !2447
  %426 = icmp eq i32 %407, 0
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %427, i8* %428, align 1, !tbaa !2448
  %429 = lshr i32 %407, 31
  %430 = trunc i32 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %430, i8* %431, align 1, !tbaa !2449
  %432 = lshr i32 %404, 31
  %433 = lshr i32 %406, 31
  %434 = xor i32 %429, %432
  %435 = xor i32 %429, %433
  %436 = add nuw nsw i32 %434, %435
  %437 = icmp eq i32 %436, 2
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %438, i8* %439, align 1, !tbaa !2450
  %440 = load i32, i32* %ECX
  %441 = zext i32 %440 to i64
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 3
  store i64 %443, i64* %PC
  %444 = shl i64 %441, 32
  %445 = ashr exact i64 %444, 32
  store i64 %445, i64* %RDI, align 8, !tbaa !2428
  %446 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %447 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %448 = load i64, i64* %RSI
  %449 = load i64, i64* %RDI
  %450 = mul i64 %449, 4
  %451 = add i64 %450, %448
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 5
  store i64 %453, i64* %PC
  %454 = bitcast i8* %447 to <2 x float>*
  %455 = load <2 x float>, <2 x float>* %454, align 1
  %456 = getelementptr inbounds i8, i8* %447, i64 8
  %457 = bitcast i8* %456 to <2 x i32>*
  %458 = load <2 x i32>, <2 x i32>* %457, align 1
  %459 = inttoptr i64 %451 to float*
  %460 = load float, float* %459
  %461 = extractelement <2 x float> %455, i32 0
  %462 = fdiv float %461, %460
  %463 = bitcast i8* %446 to float*
  store float %462, float* %463, align 1, !tbaa !2452
  %464 = bitcast <2 x float> %455 to <2 x i32>
  %465 = extractelement <2 x i32> %464, i32 1
  %466 = getelementptr inbounds i8, i8* %446, i64 4
  %467 = bitcast i8* %466 to i32*
  store i32 %465, i32* %467, align 1, !tbaa !2452
  %468 = extractelement <2 x i32> %458, i32 0
  %469 = getelementptr inbounds i8, i8* %446, i64 8
  %470 = bitcast i8* %469 to i32*
  store i32 %468, i32* %470, align 1, !tbaa !2452
  %471 = extractelement <2 x i32> %458, i32 1
  %472 = getelementptr inbounds i8, i8* %446, i64 12
  %473 = bitcast i8* %472 to i32*
  store i32 %471, i32* %473, align 1, !tbaa !2452
  %474 = load i64, i64* %RBP
  %475 = sub i64 %474, 32
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 4
  store i64 %477, i64* %PC
  %478 = inttoptr i64 %475 to i64*
  %479 = load i64, i64* %478
  store i64 %479, i64* %RSI, align 8, !tbaa !2428
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 44
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i32*
  %485 = load i32, i32* %484
  %486 = sext i32 %485 to i64
  store i64 %486, i64* %RDI, align 8, !tbaa !2428
  %487 = load i64, i64* %RSI
  %488 = load i64, i64* %RDI
  %489 = mul i64 %488, 4
  %490 = add i64 %489, %487
  %491 = bitcast %union.vec128_t* %XMM0 to i8*
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 5
  store i64 %493, i64* %PC
  %494 = bitcast i8* %491 to <2 x float>*
  %495 = load <2 x float>, <2 x float>* %494, align 1
  %496 = extractelement <2 x float> %495, i32 0
  %497 = inttoptr i64 %490 to float*
  store float %496, float* %497
  %498 = load i64, i64* %RBP
  %499 = sub i64 %498, 32
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 4
  store i64 %501, i64* %PC
  %502 = inttoptr i64 %499 to i64*
  %503 = load i64, i64* %502
  store i64 %503, i64* %RSI, align 8, !tbaa !2428
  %504 = load i64, i64* %RBP
  %505 = sub i64 %504, 44
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 4
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %505 to i32*
  %509 = load i32, i32* %508
  %510 = sext i32 %509 to i64
  store i64 %510, i64* %RDI, align 8, !tbaa !2428
  %511 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %512 = load i64, i64* %RSI
  %513 = load i64, i64* %RDI
  %514 = mul i64 %513, 4
  %515 = add i64 %514, %512
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to float*
  %519 = load float, float* %518
  %520 = bitcast i8* %511 to float*
  store float %519, float* %520, align 1, !tbaa !2452
  %521 = getelementptr inbounds i8, i8* %511, i64 4
  %522 = bitcast i8* %521 to float*
  store float 0.000000e+00, float* %522, align 1, !tbaa !2452
  %523 = getelementptr inbounds i8, i8* %511, i64 8
  %524 = bitcast i8* %523 to float*
  store float 0.000000e+00, float* %524, align 1, !tbaa !2452
  %525 = getelementptr inbounds i8, i8* %511, i64 12
  %526 = bitcast i8* %525 to float*
  store float 0.000000e+00, float* %526, align 1, !tbaa !2452
  %527 = bitcast %union.vec128_t* %XMM0 to i8*
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 4
  store i64 %529, i64* %PC
  %530 = bitcast i8* %527 to i64*
  %531 = load i64, i64* %530, align 1
  %532 = trunc i64 %531 to i32
  %533 = bitcast i64* %RCX to [2 x i32]*
  %534 = bitcast i64* %RCX to i32*
  store i32 %532, i32* %534, align 1, !tbaa !2454
  %535 = getelementptr inbounds [2 x i32], [2 x i32]* %533, i64 0, i64 1
  store i32 0, i32* %535, align 1, !tbaa !2454
  %536 = load i64, i64* %RCX
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 6
  store i64 %538, i64* %PC
  %539 = xor i64 -2147483648, %536
  %540 = trunc i64 %539 to i32
  %541 = and i64 %539, 4294967295
  store i64 %541, i64* %RCX, align 8, !tbaa !2428
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %542, align 1, !tbaa !2432
  %543 = and i32 %540, 255
  %544 = call i32 @llvm.ctpop.i32(i32 %543) #16
  %545 = trunc i32 %544 to i8
  %546 = and i8 %545, 1
  %547 = xor i8 %546, 1
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %547, i8* %548, align 1, !tbaa !2446
  %549 = icmp eq i32 %540, 0
  %550 = zext i1 %549 to i8
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %550, i8* %551, align 1, !tbaa !2448
  %552 = lshr i32 %540, 31
  %553 = trunc i32 %552 to i8
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %553, i8* %554, align 1, !tbaa !2449
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %555, align 1, !tbaa !2450
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %556, align 1, !tbaa !2447
  %557 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %558 = load i32, i32* %ECX
  %559 = zext i32 %558 to i64
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 4
  store i64 %561, i64* %PC
  %562 = bitcast i8* %557 to i32*
  store i32 %558, i32* %562, align 1, !tbaa !2454
  %563 = getelementptr inbounds i8, i8* %557, i64 4
  %564 = bitcast i8* %563 to i32*
  store i32 0, i32* %564, align 1, !tbaa !2454
  %565 = getelementptr inbounds i8, i8* %557, i64 8
  %566 = bitcast i8* %565 to i32*
  store i32 0, i32* %566, align 1, !tbaa !2454
  %567 = getelementptr inbounds i8, i8* %557, i64 12
  %568 = bitcast i8* %567 to i32*
  store i32 0, i32* %568, align 1, !tbaa !2454
  %569 = load i64, i64* %RBP
  %570 = sub i64 %569, 40
  %571 = bitcast %union.vec128_t* %XMM0 to i8*
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 5
  store i64 %573, i64* %PC
  %574 = bitcast i8* %571 to <2 x float>*
  %575 = load <2 x float>, <2 x float>* %574, align 1
  %576 = extractelement <2 x float> %575, i32 0
  %577 = inttoptr i64 %570 to float*
  store float %576, float* %577
  %578 = load i64, i64* %RBP
  %579 = sub i64 %578, 44
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  %582 = inttoptr i64 %579 to i32*
  %583 = load i32, i32* %582
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RDI, align 8, !tbaa !2428
  %585 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 40
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 5
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to float*
  %591 = load float, float* %590
  %592 = bitcast i8* %585 to float*
  store float %591, float* %592, align 1, !tbaa !2452
  %593 = getelementptr inbounds i8, i8* %585, i64 4
  %594 = bitcast i8* %593 to float*
  store float 0.000000e+00, float* %594, align 1, !tbaa !2452
  %595 = getelementptr inbounds i8, i8* %585, i64 8
  %596 = bitcast i8* %595 to float*
  store float 0.000000e+00, float* %596, align 1, !tbaa !2452
  %597 = getelementptr inbounds i8, i8* %585, i64 12
  %598 = bitcast i8* %597 to float*
  store float 0.000000e+00, float* %598, align 1, !tbaa !2452
  %599 = load i64, i64* %RBP
  %600 = sub i64 %599, 8
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %600 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %RSI, align 8, !tbaa !2428
  %605 = load i64, i64* %RBP
  %606 = sub i64 %605, 12
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 3
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i32*
  %610 = load i32, i32* %609
  %611 = zext i32 %610 to i64
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = load i64, i64* %RCX
  %613 = load i64, i64* %RBP
  %614 = sub i64 %613, 44
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 4
  store i64 %616, i64* %PC
  %617 = inttoptr i64 %614 to i32*
  %618 = load i32, i32* %617
  %619 = shl i64 %612, 32
  %620 = ashr exact i64 %619, 32
  %621 = sext i32 %618 to i64
  %622 = mul nsw i64 %621, %620
  %623 = trunc i64 %622 to i32
  %624 = and i64 %622, 4294967295
  store i64 %624, i64* %RCX, align 8, !tbaa !2428
  %625 = shl i64 %622, 32
  %626 = ashr exact i64 %625, 32
  %627 = icmp ne i64 %626, %622
  %628 = zext i1 %627 to i8
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %628, i8* %629, align 1, !tbaa !2432
  %630 = and i32 %623, 255
  %631 = call i32 @llvm.ctpop.i32(i32 %630) #16
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  %634 = xor i8 %633, 1
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %634, i8* %635, align 1, !tbaa !2446
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %636, align 1, !tbaa !2447
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %637, align 1, !tbaa !2448
  %638 = lshr i32 %623, 31
  %639 = trunc i32 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %639, i8* %640, align 1, !tbaa !2449
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %628, i8* %641, align 1, !tbaa !2450
  %642 = load i64, i64* %RCX
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 3
  store i64 %644, i64* %PC
  %645 = trunc i64 %642 to i32
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RCX, align 8, !tbaa !2428
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %647, align 1, !tbaa !2432
  %648 = and i32 %645, 255
  %649 = call i32 @llvm.ctpop.i32(i32 %648) #16
  %650 = trunc i32 %649 to i8
  %651 = and i8 %650, 1
  %652 = xor i8 %651, 1
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %652, i8* %653, align 1, !tbaa !2446
  %654 = trunc i64 %642 to i32
  %655 = xor i32 %654, %645
  %656 = lshr i32 %655, 4
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %658, i8* %659, align 1, !tbaa !2447
  %660 = icmp eq i32 %645, 0
  %661 = zext i1 %660 to i8
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %661, i8* %662, align 1, !tbaa !2448
  %663 = lshr i32 %645, 31
  %664 = trunc i32 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %664, i8* %665, align 1, !tbaa !2449
  %666 = lshr i32 %645, 31
  %667 = xor i32 %663, %666
  %668 = add nuw nsw i32 %667, %663
  %669 = icmp eq i32 %668, 2
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %670, i8* %671, align 1, !tbaa !2450
  %672 = load i32, i32* %ECX
  %673 = zext i32 %672 to i64
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 3
  store i64 %675, i64* %PC
  %676 = shl i64 %673, 32
  %677 = ashr exact i64 %676, 32
  store i64 %677, i64* %R8, align 8, !tbaa !2428
  %678 = load i64, i64* %R8
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 4
  store i64 %680, i64* %PC
  %681 = shl i64 %678, 1
  %682 = icmp slt i64 %681, 0
  %683 = shl i64 %681, 1
  store i64 %683, i64* %R8, align 8, !tbaa !2428
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %685 = zext i1 %682 to i8
  store i8 %685, i8* %684, align 1, !tbaa !2451
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %687 = trunc i64 %683 to i32
  %688 = and i32 %687, 254
  %689 = call i32 @llvm.ctpop.i32(i32 %688) #16
  %690 = trunc i32 %689 to i8
  %691 = and i8 %690, 1
  %692 = xor i8 %691, 1
  store i8 %692, i8* %686, align 1, !tbaa !2451
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %693, align 1, !tbaa !2451
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %695 = icmp eq i64 %683, 0
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %694, align 1, !tbaa !2451
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %698 = lshr i64 %683, 63
  %699 = trunc i64 %698 to i8
  store i8 %699, i8* %697, align 1, !tbaa !2451
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %700, align 1, !tbaa !2451
  %701 = load i64, i64* %RSI
  %702 = load i64, i64* %R8
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = add i64 %702, %701
  store i64 %705, i64* %RSI, align 8, !tbaa !2428
  %706 = icmp ult i64 %705, %701
  %707 = icmp ult i64 %705, %702
  %708 = or i1 %706, %707
  %709 = zext i1 %708 to i8
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %709, i8* %710, align 1, !tbaa !2432
  %711 = trunc i64 %705 to i32
  %712 = and i32 %711, 255
  %713 = call i32 @llvm.ctpop.i32(i32 %712) #16
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = xor i8 %715, 1
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %716, i8* %717, align 1, !tbaa !2446
  %718 = xor i64 %702, %701
  %719 = xor i64 %718, %705
  %720 = lshr i64 %719, 4
  %721 = trunc i64 %720 to i8
  %722 = and i8 %721, 1
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %722, i8* %723, align 1, !tbaa !2447
  %724 = icmp eq i64 %705, 0
  %725 = zext i1 %724 to i8
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %725, i8* %726, align 1, !tbaa !2448
  %727 = lshr i64 %705, 63
  %728 = trunc i64 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %728, i8* %729, align 1, !tbaa !2449
  %730 = lshr i64 %701, 63
  %731 = lshr i64 %702, 63
  %732 = xor i64 %727, %730
  %733 = xor i64 %727, %731
  %734 = add nuw nsw i64 %732, %733
  %735 = icmp eq i64 %734, 2
  %736 = zext i1 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %736, i8* %737, align 1, !tbaa !2450
  %738 = load i64, i64* %RBP
  %739 = sub i64 %738, 32
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 4
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742
  store i64 %743, i64* %RCX, align 8, !tbaa !2428
  %744 = load i32, i32* %EAX
  %745 = zext i32 %744 to i64
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 2
  store i64 %747, i64* %PC
  %748 = and i64 %745, 4294967295
  store i64 %748, i64* %RDX, align 8, !tbaa !2428
  %749 = bitcast i32* %R8D to i64*
  %750 = load i32, i32* %EAX
  %751 = zext i32 %750 to i64
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 3
  store i64 %753, i64* %PC
  %754 = and i64 %751, 4294967295
  store i64 %754, i64* %749, align 8, !tbaa !2428
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 2704
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 5
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 5
  store i64 %760, i64* %PC
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %762 = load i64, i64* %761, align 8, !tbaa !2428
  %763 = add i64 %762, -8
  %764 = inttoptr i64 %763 to i64*
  store i64 %758, i64* %764
  store i64 %763, i64* %761, align 8, !tbaa !2428
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %756, i64* %765, align 8, !tbaa !2428
  %766 = load i64, i64* %PC
  %767 = call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* %0, i64 %766, %struct.Memory* %MEMORY.0)
  %768 = load i64, i64* %RBP
  %769 = sub i64 %768, 48
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 3
  store i64 %771, i64* %PC
  %772 = inttoptr i64 %769 to i32*
  %773 = load i32, i32* %772
  %774 = zext i32 %773 to i64
  store i64 %774, i64* %RAX, align 8, !tbaa !2428
  %775 = load i64, i64* %RAX
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 3
  store i64 %777, i64* %PC
  %778 = trunc i64 %775 to i32
  %779 = add i32 1, %778
  %780 = zext i32 %779 to i64
  store i64 %780, i64* %RAX, align 8, !tbaa !2428
  %781 = icmp ult i32 %779, %778
  %782 = icmp ult i32 %779, 1
  %783 = or i1 %781, %782
  %784 = zext i1 %783 to i8
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %784, i8* %785, align 1, !tbaa !2432
  %786 = and i32 %779, 255
  %787 = call i32 @llvm.ctpop.i32(i32 %786) #16
  %788 = trunc i32 %787 to i8
  %789 = and i8 %788, 1
  %790 = xor i8 %789, 1
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %790, i8* %791, align 1, !tbaa !2446
  %792 = xor i64 1, %775
  %793 = trunc i64 %792 to i32
  %794 = xor i32 %793, %779
  %795 = lshr i32 %794, 4
  %796 = trunc i32 %795 to i8
  %797 = and i8 %796, 1
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %797, i8* %798, align 1, !tbaa !2447
  %799 = icmp eq i32 %779, 0
  %800 = zext i1 %799 to i8
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %800, i8* %801, align 1, !tbaa !2448
  %802 = lshr i32 %779, 31
  %803 = trunc i32 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %803, i8* %804, align 1, !tbaa !2449
  %805 = lshr i32 %778, 31
  %806 = xor i32 %802, %805
  %807 = add nuw nsw i32 %806, %802
  %808 = icmp eq i32 %807, 2
  %809 = zext i1 %808 to i8
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %809, i8* %810, align 1, !tbaa !2450
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 48
  %813 = load i32, i32* %EAX
  %814 = zext i32 %813 to i64
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 3
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %812 to i32*
  store i32 %813, i32* %817
  %818 = load i64, i64* %PC
  %819 = sub i64 %818, 166
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 5
  store i64 %821, i64* %PC
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %819, i64* %822, align 8, !tbaa !2428
  br label %block_401d58

block_401f5c:                                     ; preds = %block_401eb9
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 32
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 4
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to i64*
  %828 = load i64, i64* %827
  store i64 %828, i64* %RAX, align 8, !tbaa !2428
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 52
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 4
  store i64 %832, i64* %PC
  %833 = inttoptr i64 %830 to i32*
  %834 = load i32, i32* %833
  %835 = sext i32 %834 to i64
  store i64 %835, i64* %RCX, align 8, !tbaa !2428
  %836 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %837 = load i64, i64* %RAX
  %838 = load i64, i64* %RCX
  %839 = mul i64 %838, 4
  %840 = add i64 %839, %837
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 5
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to float*
  %844 = load float, float* %843
  %845 = bitcast i8* %836 to float*
  store float %844, float* %845, align 1, !tbaa !2452
  %846 = getelementptr inbounds i8, i8* %836, i64 4
  %847 = bitcast i8* %846 to float*
  store float 0.000000e+00, float* %847, align 1, !tbaa !2452
  %848 = getelementptr inbounds i8, i8* %836, i64 8
  %849 = bitcast i8* %848 to float*
  store float 0.000000e+00, float* %849, align 1, !tbaa !2452
  %850 = getelementptr inbounds i8, i8* %836, i64 12
  %851 = bitcast i8* %850 to float*
  store float 0.000000e+00, float* %851, align 1, !tbaa !2452
  %852 = load i64, i64* %RBP
  %853 = sub i64 %852, 40
  %854 = bitcast %union.vec128_t* %XMM0 to i8*
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 5
  store i64 %856, i64* %PC
  %857 = bitcast i8* %854 to <2 x float>*
  %858 = load <2 x float>, <2 x float>* %857, align 1
  %859 = extractelement <2 x float> %858, i32 0
  %860 = inttoptr i64 %853 to float*
  store float %859, float* %860
  %861 = load i64, i64* %RBP
  %862 = sub i64 %861, 32
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 4
  store i64 %864, i64* %PC
  %865 = inttoptr i64 %862 to i64*
  %866 = load i64, i64* %865
  store i64 %866, i64* %RAX, align 8, !tbaa !2428
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 44
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 4
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i32*
  %872 = load i32, i32* %871
  %873 = sext i32 %872 to i64
  store i64 %873, i64* %RCX, align 8, !tbaa !2428
  %874 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %875 = load i64, i64* %RAX
  %876 = load i64, i64* %RCX
  %877 = mul i64 %876, 4
  %878 = add i64 %877, %875
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 5
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %878 to float*
  %882 = load float, float* %881
  %883 = bitcast i8* %874 to float*
  store float %882, float* %883, align 1, !tbaa !2452
  %884 = getelementptr inbounds i8, i8* %874, i64 4
  %885 = bitcast i8* %884 to float*
  store float 0.000000e+00, float* %885, align 1, !tbaa !2452
  %886 = getelementptr inbounds i8, i8* %874, i64 8
  %887 = bitcast i8* %886 to float*
  store float 0.000000e+00, float* %887, align 1, !tbaa !2452
  %888 = getelementptr inbounds i8, i8* %874, i64 12
  %889 = bitcast i8* %888 to float*
  store float 0.000000e+00, float* %889, align 1, !tbaa !2452
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 32
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 4
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i64*
  %895 = load i64, i64* %894
  store i64 %895, i64* %RAX, align 8, !tbaa !2428
  %896 = load i64, i64* %RBP
  %897 = sub i64 %896, 52
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 4
  store i64 %899, i64* %PC
  %900 = inttoptr i64 %897 to i32*
  %901 = load i32, i32* %900
  %902 = sext i32 %901 to i64
  store i64 %902, i64* %RCX, align 8, !tbaa !2428
  %903 = load i64, i64* %RAX
  %904 = load i64, i64* %RCX
  %905 = mul i64 %904, 4
  %906 = add i64 %905, %903
  %907 = bitcast %union.vec128_t* %XMM0 to i8*
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC
  %910 = bitcast i8* %907 to <2 x float>*
  %911 = load <2 x float>, <2 x float>* %910, align 1
  %912 = extractelement <2 x float> %911, i32 0
  %913 = inttoptr i64 %906 to float*
  store float %912, float* %913
  %914 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %915 = load i64, i64* %RBP
  %916 = sub i64 %915, 40
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 5
  store i64 %918, i64* %PC
  %919 = inttoptr i64 %916 to float*
  %920 = load float, float* %919
  %921 = bitcast i8* %914 to float*
  store float %920, float* %921, align 1, !tbaa !2452
  %922 = getelementptr inbounds i8, i8* %914, i64 4
  %923 = bitcast i8* %922 to float*
  store float 0.000000e+00, float* %923, align 1, !tbaa !2452
  %924 = getelementptr inbounds i8, i8* %914, i64 8
  %925 = bitcast i8* %924 to float*
  store float 0.000000e+00, float* %925, align 1, !tbaa !2452
  %926 = getelementptr inbounds i8, i8* %914, i64 12
  %927 = bitcast i8* %926 to float*
  store float 0.000000e+00, float* %927, align 1, !tbaa !2452
  %928 = load i64, i64* %RBP
  %929 = sub i64 %928, 32
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 4
  store i64 %931, i64* %PC
  %932 = inttoptr i64 %929 to i64*
  %933 = load i64, i64* %932
  store i64 %933, i64* %RAX, align 8, !tbaa !2428
  %934 = load i64, i64* %RBP
  %935 = sub i64 %934, 44
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 4
  store i64 %937, i64* %PC
  %938 = inttoptr i64 %935 to i32*
  %939 = load i32, i32* %938
  %940 = sext i32 %939 to i64
  store i64 %940, i64* %RCX, align 8, !tbaa !2428
  %941 = load i64, i64* %RAX
  %942 = load i64, i64* %RCX
  %943 = mul i64 %942, 4
  %944 = add i64 %943, %941
  %945 = bitcast %union.vec128_t* %XMM0 to i8*
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 5
  store i64 %947, i64* %PC
  %948 = bitcast i8* %945 to <2 x float>*
  %949 = load <2 x float>, <2 x float>* %948, align 1
  %950 = extractelement <2 x float> %949, i32 0
  %951 = inttoptr i64 %944 to float*
  store float %950, float* %951
  br label %block_401f9a

block_401d58:                                     ; preds = %block_401d51, %block_401d64
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_401d51 ], [ %767, %block_401d64 ]
  %952 = load i64, i64* %RBP
  %953 = sub i64 %952, 48
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 3
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %953 to i32*
  %957 = load i32, i32* %956
  %958 = zext i32 %957 to i64
  store i64 %958, i64* %RAX, align 8, !tbaa !2428
  %959 = load i32, i32* %EAX
  %960 = zext i32 %959 to i64
  %961 = load i64, i64* %RBP
  %962 = sub i64 %961, 16
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 3
  store i64 %964, i64* %PC
  %965 = inttoptr i64 %962 to i32*
  %966 = load i32, i32* %965
  %967 = sub i32 %959, %966
  %968 = icmp ult i32 %959, %966
  %969 = zext i1 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %969, i8* %970, align 1, !tbaa !2432
  %971 = and i32 %967, 255
  %972 = call i32 @llvm.ctpop.i32(i32 %971) #16
  %973 = trunc i32 %972 to i8
  %974 = and i8 %973, 1
  %975 = xor i8 %974, 1
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %975, i8* %976, align 1, !tbaa !2446
  %977 = xor i32 %966, %959
  %978 = xor i32 %977, %967
  %979 = lshr i32 %978, 4
  %980 = trunc i32 %979 to i8
  %981 = and i8 %980, 1
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %981, i8* %982, align 1, !tbaa !2447
  %983 = icmp eq i32 %967, 0
  %984 = zext i1 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %984, i8* %985, align 1, !tbaa !2448
  %986 = lshr i32 %967, 31
  %987 = trunc i32 %986 to i8
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %987, i8* %988, align 1, !tbaa !2449
  %989 = lshr i32 %959, 31
  %990 = lshr i32 %966, 31
  %991 = xor i32 %990, %989
  %992 = xor i32 %986, %989
  %993 = add nuw nsw i32 %992, %991
  %994 = icmp eq i32 %993, 2
  %995 = zext i1 %994 to i8
  %996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %995, i8* %996, align 1, !tbaa !2450
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 165
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 6
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 6
  store i64 %1002, i64* %PC
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1004 = load i8, i8* %1003, align 1, !tbaa !2449
  %1005 = icmp ne i8 %1004, 0
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1007 = load i8, i8* %1006, align 1, !tbaa !2450
  %1008 = icmp ne i8 %1007, 0
  %1009 = xor i1 %1005, %1008
  %1010 = xor i1 %1009, true
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1013 = select i1 %1009, i64 %1000, i64 %998
  store i64 %1013, i64* %1012, align 8, !tbaa !2428
  %1014 = load i8, i8* %BRANCH_TAKEN
  %1015 = icmp eq i8 %1014, 1
  %1016 = load i64, i64* %PC
  br i1 %1015, label %block_401e03, label %block_401d64

block_401d4c:                                     ; preds = %block_401c82
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 5
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 5
  store i64 %1020, i64* %PC
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1018, i64* %1021, align 8, !tbaa !2428
  br label %block_401d51

block_401fad:                                     ; preds = %block_401ead
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 5
  store i64 %1023, i64* %PC
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1191, i64* %1024, align 8, !tbaa !2428
  br label %block_401fb2

block_401cba:                                     ; preds = %block_401c8e
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 32
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 4
  store i64 %1028, i64* %PC
  %1029 = inttoptr i64 %1026 to i64*
  %1030 = load i64, i64* %1029
  store i64 %1030, i64* %RAX, align 8, !tbaa !2428
  %1031 = load i64, i64* %RBP
  %1032 = sub i64 %1031, 44
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 4
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1032 to i32*
  %1036 = load i32, i32* %1035
  %1037 = sext i32 %1036 to i64
  store i64 %1037, i64* %RCX, align 8, !tbaa !2428
  %1038 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1039 = load i64, i64* %RAX
  %1040 = load i64, i64* %RCX
  %1041 = mul i64 %1040, 4
  %1042 = add i64 %1041, %1039
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 5
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to float*
  %1046 = load float, float* %1045
  %1047 = bitcast i8* %1038 to float*
  store float %1046, float* %1047, align 1, !tbaa !2452
  %1048 = getelementptr inbounds i8, i8* %1038, i64 4
  %1049 = bitcast i8* %1048 to float*
  store float 0.000000e+00, float* %1049, align 1, !tbaa !2452
  %1050 = getelementptr inbounds i8, i8* %1038, i64 8
  %1051 = bitcast i8* %1050 to float*
  store float 0.000000e+00, float* %1051, align 1, !tbaa !2452
  %1052 = getelementptr inbounds i8, i8* %1038, i64 12
  %1053 = bitcast i8* %1052 to float*
  store float 0.000000e+00, float* %1053, align 1, !tbaa !2452
  %1054 = load i64, i64* %RBP
  %1055 = sub i64 %1054, 32
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 4
  store i64 %1057, i64* %PC
  %1058 = inttoptr i64 %1055 to i64*
  %1059 = load i64, i64* %1058
  store i64 %1059, i64* %RAX, align 8, !tbaa !2428
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 52
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 4
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i32*
  %1065 = load i32, i32* %1064
  %1066 = sext i32 %1065 to i64
  store i64 %1066, i64* %RCX, align 8, !tbaa !2428
  %1067 = load i64, i64* %RAX
  %1068 = load i64, i64* %RCX
  %1069 = mul i64 %1068, 4
  %1070 = add i64 %1069, %1067
  %1071 = bitcast %union.vec128_t* %XMM0 to i8*
  %1072 = load i64, i64* %PC
  %1073 = add i64 %1072, 5
  store i64 %1073, i64* %PC
  %1074 = bitcast i8* %1071 to <2 x float>*
  %1075 = load <2 x float>, <2 x float>* %1074, align 1
  %1076 = extractelement <2 x float> %1075, i32 0
  %1077 = inttoptr i64 %1070 to float*
  store float %1076, float* %1077
  %1078 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1079 = load i64, i64* %RBP
  %1080 = sub i64 %1079, 40
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 5
  store i64 %1082, i64* %PC
  %1083 = inttoptr i64 %1080 to float*
  %1084 = load float, float* %1083
  %1085 = bitcast i8* %1078 to float*
  store float %1084, float* %1085, align 1, !tbaa !2452
  %1086 = getelementptr inbounds i8, i8* %1078, i64 4
  %1087 = bitcast i8* %1086 to float*
  store float 0.000000e+00, float* %1087, align 1, !tbaa !2452
  %1088 = getelementptr inbounds i8, i8* %1078, i64 8
  %1089 = bitcast i8* %1088 to float*
  store float 0.000000e+00, float* %1089, align 1, !tbaa !2452
  %1090 = getelementptr inbounds i8, i8* %1078, i64 12
  %1091 = bitcast i8* %1090 to float*
  store float 0.000000e+00, float* %1091, align 1, !tbaa !2452
  %1092 = load i64, i64* %RBP
  %1093 = sub i64 %1092, 32
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 4
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1093 to i64*
  %1097 = load i64, i64* %1096
  store i64 %1097, i64* %RAX, align 8, !tbaa !2428
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 44
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 4
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1099 to i32*
  %1103 = load i32, i32* %1102
  %1104 = sext i32 %1103 to i64
  store i64 %1104, i64* %RCX, align 8, !tbaa !2428
  %1105 = load i64, i64* %RAX
  %1106 = load i64, i64* %RCX
  %1107 = mul i64 %1106, 4
  %1108 = add i64 %1107, %1105
  %1109 = bitcast %union.vec128_t* %XMM0 to i8*
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 5
  store i64 %1111, i64* %PC
  %1112 = bitcast i8* %1109 to <2 x float>*
  %1113 = load <2 x float>, <2 x float>* %1112, align 1
  %1114 = extractelement <2 x float> %1113, i32 0
  %1115 = inttoptr i64 %1108 to float*
  store float %1114, float* %1115
  br label %block_401ce6

block_401d51:                                     ; preds = %block_401c71, %block_401d4c
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401c71 ], [ %MEMORY.8, %block_401d4c ]
  %1116 = load i64, i64* %RBP
  %1117 = sub i64 %1116, 48
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 7
  store i64 %1119, i64* %PC
  %1120 = inttoptr i64 %1117 to i32*
  store i32 0, i32* %1120
  br label %block_401d58

block_401fb2:                                     ; preds = %block_401e9c, %block_401fad
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.6, %block_401e9c ], [ %MEMORY.3, %block_401fad ]
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  store i64 %1124, i64* %PC
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1122, i64* %1125, align 8, !tbaa !2428
  br label %block_401fb7

block_401ead:                                     ; preds = %block_401f9a, %block_401ea6
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.6, %block_401ea6 ], [ %MEMORY.5, %block_401f9a ]
  %1126 = load i64, i64* %RBP
  %1127 = sub i64 %1126, 48
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 3
  store i64 %1129, i64* %PC
  %1130 = inttoptr i64 %1127 to i32*
  %1131 = load i32, i32* %1130
  %1132 = zext i32 %1131 to i64
  store i64 %1132, i64* %RAX, align 8, !tbaa !2428
  %1133 = load i32, i32* %EAX
  %1134 = zext i32 %1133 to i64
  %1135 = load i64, i64* %RBP
  %1136 = sub i64 %1135, 56
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 3
  store i64 %1138, i64* %PC
  %1139 = inttoptr i64 %1136 to i32*
  %1140 = load i32, i32* %1139
  %1141 = sub i32 %1133, %1140
  %1142 = icmp ult i32 %1133, %1140
  %1143 = zext i1 %1142 to i8
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1143, i8* %1144, align 1, !tbaa !2432
  %1145 = and i32 %1141, 255
  %1146 = call i32 @llvm.ctpop.i32(i32 %1145) #16
  %1147 = trunc i32 %1146 to i8
  %1148 = and i8 %1147, 1
  %1149 = xor i8 %1148, 1
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1149, i8* %1150, align 1, !tbaa !2446
  %1151 = xor i32 %1140, %1133
  %1152 = xor i32 %1151, %1141
  %1153 = lshr i32 %1152, 4
  %1154 = trunc i32 %1153 to i8
  %1155 = and i8 %1154, 1
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1155, i8* %1156, align 1, !tbaa !2447
  %1157 = icmp eq i32 %1141, 0
  %1158 = zext i1 %1157 to i8
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1158, i8* %1159, align 1, !tbaa !2448
  %1160 = lshr i32 %1141, 31
  %1161 = trunc i32 %1160 to i8
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1161, i8* %1162, align 1, !tbaa !2449
  %1163 = lshr i32 %1133, 31
  %1164 = lshr i32 %1140, 31
  %1165 = xor i32 %1164, %1163
  %1166 = xor i32 %1160, %1163
  %1167 = add nuw nsw i32 %1166, %1165
  %1168 = icmp eq i32 %1167, 2
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1169, i8* %1170, align 1, !tbaa !2450
  %1171 = load i64, i64* %PC
  %1172 = add i64 %1171, 250
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 6
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 6
  store i64 %1176, i64* %PC
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1178 = load i8, i8* %1177, align 1, !tbaa !2449
  %1179 = icmp ne i8 %1178, 0
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1181 = load i8, i8* %1180, align 1, !tbaa !2450
  %1182 = icmp ne i8 %1181, 0
  %1183 = xor i1 %1179, %1182
  %1184 = xor i1 %1183, true
  %1185 = zext i1 %1184 to i8
  store i8 %1185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1187 = select i1 %1183, i64 %1174, i64 %1172
  store i64 %1187, i64* %1186, align 8, !tbaa !2428
  %1188 = load i8, i8* %BRANCH_TAKEN
  %1189 = icmp eq i8 %1188, 1
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 5
  br i1 %1189, label %block_401fad, label %block_401eb9

block_401ea6:                                     ; preds = %block_401e9c
  %1192 = load i64, i64* %RBP
  %1193 = sub i64 %1192, 48
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 7
  store i64 %1195, i64* %PC
  %1196 = inttoptr i64 %1193 to i32*
  store i32 1, i32* %1196
  br label %block_401ead

block_401eb9:                                     ; preds = %block_401ead
  store i64 %1191, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1197 = load i64, i64* %RBP
  %1198 = sub i64 %1197, 16
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 3
  store i64 %1200, i64* %PC
  %1201 = inttoptr i64 %1198 to i32*
  %1202 = load i32, i32* %1201
  %1203 = zext i32 %1202 to i64
  store i64 %1203, i64* %RCX, align 8, !tbaa !2428
  %1204 = load i64, i64* %RBP
  %1205 = sub i64 %1204, 48
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 3
  store i64 %1207, i64* %PC
  %1208 = inttoptr i64 %1205 to i32*
  %1209 = load i32, i32* %1208
  %1210 = zext i32 %1209 to i64
  store i64 %1210, i64* %RDX, align 8, !tbaa !2428
  %1211 = load i64, i64* %RDX
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 3
  store i64 %1213, i64* %PC
  %1214 = trunc i64 %1211 to i32
  %1215 = add i32 1, %1214
  %1216 = zext i32 %1215 to i64
  store i64 %1216, i64* %RDX, align 8, !tbaa !2428
  %1217 = icmp ult i32 %1215, %1214
  %1218 = icmp ult i32 %1215, 1
  %1219 = or i1 %1217, %1218
  %1220 = zext i1 %1219 to i8
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1220, i8* %1221, align 1, !tbaa !2432
  %1222 = and i32 %1215, 255
  %1223 = call i32 @llvm.ctpop.i32(i32 %1222) #16
  %1224 = trunc i32 %1223 to i8
  %1225 = and i8 %1224, 1
  %1226 = xor i8 %1225, 1
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1226, i8* %1227, align 1, !tbaa !2446
  %1228 = xor i64 1, %1211
  %1229 = trunc i64 %1228 to i32
  %1230 = xor i32 %1229, %1215
  %1231 = lshr i32 %1230, 4
  %1232 = trunc i32 %1231 to i8
  %1233 = and i8 %1232, 1
  %1234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1233, i8* %1234, align 1, !tbaa !2447
  %1235 = icmp eq i32 %1215, 0
  %1236 = zext i1 %1235 to i8
  %1237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1236, i8* %1237, align 1, !tbaa !2448
  %1238 = lshr i32 %1215, 31
  %1239 = trunc i32 %1238 to i8
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1239, i8* %1240, align 1, !tbaa !2449
  %1241 = lshr i32 %1214, 31
  %1242 = xor i32 %1238, %1241
  %1243 = add nuw nsw i32 %1242, %1238
  %1244 = icmp eq i32 %1243, 2
  %1245 = zext i1 %1244 to i8
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1245, i8* %1246, align 1, !tbaa !2450
  %1247 = load i64, i64* %RCX
  %1248 = load i32, i32* %EDX
  %1249 = zext i32 %1248 to i64
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 2
  store i64 %1251, i64* %PC
  %1252 = trunc i64 %1247 to i32
  %1253 = sub i32 %1252, %1248
  %1254 = zext i32 %1253 to i64
  store i64 %1254, i64* %RCX, align 8, !tbaa !2428
  %1255 = icmp ult i32 %1252, %1248
  %1256 = zext i1 %1255 to i8
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1256, i8* %1257, align 1, !tbaa !2432
  %1258 = and i32 %1253, 255
  %1259 = call i32 @llvm.ctpop.i32(i32 %1258) #16
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = xor i8 %1261, 1
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1262, i8* %1263, align 1, !tbaa !2446
  %1264 = xor i64 %1249, %1247
  %1265 = trunc i64 %1264 to i32
  %1266 = xor i32 %1265, %1253
  %1267 = lshr i32 %1266, 4
  %1268 = trunc i32 %1267 to i8
  %1269 = and i8 %1268, 1
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1269, i8* %1270, align 1, !tbaa !2447
  %1271 = icmp eq i32 %1253, 0
  %1272 = zext i1 %1271 to i8
  %1273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1272, i8* %1273, align 1, !tbaa !2448
  %1274 = lshr i32 %1253, 31
  %1275 = trunc i32 %1274 to i8
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1275, i8* %1276, align 1, !tbaa !2449
  %1277 = lshr i32 %1252, 31
  %1278 = lshr i32 %1248, 31
  %1279 = xor i32 %1278, %1277
  %1280 = xor i32 %1274, %1277
  %1281 = add nuw nsw i32 %1280, %1279
  %1282 = icmp eq i32 %1281, 2
  %1283 = zext i1 %1282 to i8
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1283, i8* %1284, align 1, !tbaa !2450
  %1285 = load i64, i64* %RBP
  %1286 = sub i64 %1285, 44
  %1287 = load i32, i32* %ECX
  %1288 = zext i32 %1287 to i64
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 3
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1286 to i32*
  store i32 %1287, i32* %1291
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 32
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 4
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1293 to i64*
  %1297 = load i64, i64* %1296
  store i64 %1297, i64* %RSI, align 8, !tbaa !2428
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 44
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 4
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i32*
  %1303 = load i32, i32* %1302
  %1304 = sext i32 %1303 to i64
  store i64 %1304, i64* %RDI, align 8, !tbaa !2428
  %1305 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1306 = load i64, i64* %RSI
  %1307 = load i64, i64* %RDI
  %1308 = mul i64 %1307, 4
  %1309 = add i64 %1308, %1306
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 5
  store i64 %1311, i64* %PC
  %1312 = inttoptr i64 %1309 to float*
  %1313 = load float, float* %1312
  %1314 = bitcast i8* %1305 to float*
  store float %1313, float* %1314, align 1, !tbaa !2452
  %1315 = getelementptr inbounds i8, i8* %1305, i64 4
  %1316 = bitcast i8* %1315 to float*
  store float 0.000000e+00, float* %1316, align 1, !tbaa !2452
  %1317 = getelementptr inbounds i8, i8* %1305, i64 8
  %1318 = bitcast i8* %1317 to float*
  store float 0.000000e+00, float* %1318, align 1, !tbaa !2452
  %1319 = getelementptr inbounds i8, i8* %1305, i64 12
  %1320 = bitcast i8* %1319 to float*
  store float 0.000000e+00, float* %1320, align 1, !tbaa !2452
  %1321 = load i64, i64* %RBP
  %1322 = sub i64 %1321, 16
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 3
  store i64 %1324, i64* %PC
  %1325 = inttoptr i64 %1322 to i32*
  %1326 = load i32, i32* %1325
  %1327 = zext i32 %1326 to i64
  store i64 %1327, i64* %RCX, align 8, !tbaa !2428
  %1328 = load i64, i64* %RBP
  %1329 = sub i64 %1328, 44
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 3
  store i64 %1331, i64* %PC
  %1332 = inttoptr i64 %1329 to i32*
  %1333 = load i32, i32* %1332
  %1334 = zext i32 %1333 to i64
  store i64 %1334, i64* %RDX, align 8, !tbaa !2428
  %1335 = load i64, i64* %RDX
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 3
  store i64 %1337, i64* %PC
  %1338 = trunc i64 %1335 to i32
  %1339 = add i32 1, %1338
  %1340 = zext i32 %1339 to i64
  store i64 %1340, i64* %RDX, align 8, !tbaa !2428
  %1341 = icmp ult i32 %1339, %1338
  %1342 = icmp ult i32 %1339, 1
  %1343 = or i1 %1341, %1342
  %1344 = zext i1 %1343 to i8
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1344, i8* %1345, align 1, !tbaa !2432
  %1346 = and i32 %1339, 255
  %1347 = call i32 @llvm.ctpop.i32(i32 %1346) #16
  %1348 = trunc i32 %1347 to i8
  %1349 = and i8 %1348, 1
  %1350 = xor i8 %1349, 1
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1350, i8* %1351, align 1, !tbaa !2446
  %1352 = xor i64 1, %1335
  %1353 = trunc i64 %1352 to i32
  %1354 = xor i32 %1353, %1339
  %1355 = lshr i32 %1354, 4
  %1356 = trunc i32 %1355 to i8
  %1357 = and i8 %1356, 1
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1357, i8* %1358, align 1, !tbaa !2447
  %1359 = icmp eq i32 %1339, 0
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1360, i8* %1361, align 1, !tbaa !2448
  %1362 = lshr i32 %1339, 31
  %1363 = trunc i32 %1362 to i8
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1363, i8* %1364, align 1, !tbaa !2449
  %1365 = lshr i32 %1338, 31
  %1366 = xor i32 %1362, %1365
  %1367 = add nuw nsw i32 %1366, %1362
  %1368 = icmp eq i32 %1367, 2
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1369, i8* %1370, align 1, !tbaa !2450
  %1371 = load i64, i64* %RCX
  %1372 = load i32, i32* %EDX
  %1373 = zext i32 %1372 to i64
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 2
  store i64 %1375, i64* %PC
  %1376 = trunc i64 %1371 to i32
  %1377 = sub i32 %1376, %1372
  %1378 = zext i32 %1377 to i64
  store i64 %1378, i64* %RCX, align 8, !tbaa !2428
  %1379 = icmp ult i32 %1376, %1372
  %1380 = zext i1 %1379 to i8
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1380, i8* %1381, align 1, !tbaa !2432
  %1382 = and i32 %1377, 255
  %1383 = call i32 @llvm.ctpop.i32(i32 %1382) #16
  %1384 = trunc i32 %1383 to i8
  %1385 = and i8 %1384, 1
  %1386 = xor i8 %1385, 1
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1386, i8* %1387, align 1, !tbaa !2446
  %1388 = xor i64 %1373, %1371
  %1389 = trunc i64 %1388 to i32
  %1390 = xor i32 %1389, %1377
  %1391 = lshr i32 %1390, 4
  %1392 = trunc i32 %1391 to i8
  %1393 = and i8 %1392, 1
  %1394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1393, i8* %1394, align 1, !tbaa !2447
  %1395 = icmp eq i32 %1377, 0
  %1396 = zext i1 %1395 to i8
  %1397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1396, i8* %1397, align 1, !tbaa !2448
  %1398 = lshr i32 %1377, 31
  %1399 = trunc i32 %1398 to i8
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1399, i8* %1400, align 1, !tbaa !2449
  %1401 = lshr i32 %1376, 31
  %1402 = lshr i32 %1372, 31
  %1403 = xor i32 %1402, %1401
  %1404 = xor i32 %1398, %1401
  %1405 = add nuw nsw i32 %1404, %1403
  %1406 = icmp eq i32 %1405, 2
  %1407 = zext i1 %1406 to i8
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1407, i8* %1408, align 1, !tbaa !2450
  %1409 = load i64, i64* %RBP
  %1410 = sub i64 %1409, 8
  %1411 = load i64, i64* %PC
  %1412 = add i64 %1411, 4
  store i64 %1412, i64* %PC
  %1413 = inttoptr i64 %1410 to i64*
  %1414 = load i64, i64* %1413
  store i64 %1414, i64* %RSI, align 8, !tbaa !2428
  %1415 = load i64, i64* %RBP
  %1416 = sub i64 %1415, 12
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 3
  store i64 %1418, i64* %PC
  %1419 = inttoptr i64 %1416 to i32*
  %1420 = load i32, i32* %1419
  %1421 = zext i32 %1420 to i64
  store i64 %1421, i64* %RDX, align 8, !tbaa !2428
  %1422 = load i64, i64* %RDX
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 44
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 4
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i32*
  %1428 = load i32, i32* %1427
  %1429 = shl i64 %1422, 32
  %1430 = ashr exact i64 %1429, 32
  %1431 = sext i32 %1428 to i64
  %1432 = mul nsw i64 %1431, %1430
  %1433 = trunc i64 %1432 to i32
  %1434 = and i64 %1432, 4294967295
  store i64 %1434, i64* %RDX, align 8, !tbaa !2428
  %1435 = shl i64 %1432, 32
  %1436 = ashr exact i64 %1435, 32
  %1437 = icmp ne i64 %1436, %1432
  %1438 = zext i1 %1437 to i8
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1438, i8* %1439, align 1, !tbaa !2432
  %1440 = and i32 %1433, 255
  %1441 = call i32 @llvm.ctpop.i32(i32 %1440) #16
  %1442 = trunc i32 %1441 to i8
  %1443 = and i8 %1442, 1
  %1444 = xor i8 %1443, 1
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1444, i8* %1445, align 1, !tbaa !2446
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1446, align 1, !tbaa !2447
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1447, align 1, !tbaa !2448
  %1448 = lshr i32 %1433, 31
  %1449 = trunc i32 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1449, i8* %1450, align 1, !tbaa !2449
  %1451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1438, i8* %1451, align 1, !tbaa !2450
  %1452 = load i64, i64* %RDX
  %1453 = load i64, i64* %RBP
  %1454 = sub i64 %1453, 44
  %1455 = load i64, i64* %PC
  %1456 = add i64 %1455, 3
  store i64 %1456, i64* %PC
  %1457 = trunc i64 %1452 to i32
  %1458 = inttoptr i64 %1454 to i32*
  %1459 = load i32, i32* %1458
  %1460 = add i32 %1459, %1457
  %1461 = zext i32 %1460 to i64
  store i64 %1461, i64* %RDX, align 8, !tbaa !2428
  %1462 = icmp ult i32 %1460, %1457
  %1463 = icmp ult i32 %1460, %1459
  %1464 = or i1 %1462, %1463
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1465, i8* %1466, align 1, !tbaa !2432
  %1467 = and i32 %1460, 255
  %1468 = call i32 @llvm.ctpop.i32(i32 %1467) #16
  %1469 = trunc i32 %1468 to i8
  %1470 = and i8 %1469, 1
  %1471 = xor i8 %1470, 1
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1471, i8* %1472, align 1, !tbaa !2446
  %1473 = xor i32 %1459, %1457
  %1474 = xor i32 %1473, %1460
  %1475 = lshr i32 %1474, 4
  %1476 = trunc i32 %1475 to i8
  %1477 = and i8 %1476, 1
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1477, i8* %1478, align 1, !tbaa !2447
  %1479 = icmp eq i32 %1460, 0
  %1480 = zext i1 %1479 to i8
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1480, i8* %1481, align 1, !tbaa !2448
  %1482 = lshr i32 %1460, 31
  %1483 = trunc i32 %1482 to i8
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1483, i8* %1484, align 1, !tbaa !2449
  %1485 = lshr i32 %1457, 31
  %1486 = lshr i32 %1459, 31
  %1487 = xor i32 %1482, %1485
  %1488 = xor i32 %1482, %1486
  %1489 = add nuw nsw i32 %1487, %1488
  %1490 = icmp eq i32 %1489, 2
  %1491 = zext i1 %1490 to i8
  %1492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1491, i8* %1492, align 1, !tbaa !2450
  %1493 = load i64, i64* %RDX
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 3
  store i64 %1495, i64* %PC
  %1496 = trunc i64 %1493 to i32
  %1497 = add i32 1, %1496
  %1498 = zext i32 %1497 to i64
  store i64 %1498, i64* %RDX, align 8, !tbaa !2428
  %1499 = icmp ult i32 %1497, %1496
  %1500 = icmp ult i32 %1497, 1
  %1501 = or i1 %1499, %1500
  %1502 = zext i1 %1501 to i8
  %1503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1502, i8* %1503, align 1, !tbaa !2432
  %1504 = and i32 %1497, 255
  %1505 = call i32 @llvm.ctpop.i32(i32 %1504) #16
  %1506 = trunc i32 %1505 to i8
  %1507 = and i8 %1506, 1
  %1508 = xor i8 %1507, 1
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1508, i8* %1509, align 1, !tbaa !2446
  %1510 = xor i64 1, %1493
  %1511 = trunc i64 %1510 to i32
  %1512 = xor i32 %1511, %1497
  %1513 = lshr i32 %1512, 4
  %1514 = trunc i32 %1513 to i8
  %1515 = and i8 %1514, 1
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1515, i8* %1516, align 1, !tbaa !2447
  %1517 = icmp eq i32 %1497, 0
  %1518 = zext i1 %1517 to i8
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1518, i8* %1519, align 1, !tbaa !2448
  %1520 = lshr i32 %1497, 31
  %1521 = trunc i32 %1520 to i8
  %1522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1521, i8* %1522, align 1, !tbaa !2449
  %1523 = lshr i32 %1496, 31
  %1524 = xor i32 %1520, %1523
  %1525 = add nuw nsw i32 %1524, %1520
  %1526 = icmp eq i32 %1525, 2
  %1527 = zext i1 %1526 to i8
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1527, i8* %1528, align 1, !tbaa !2450
  %1529 = load i32, i32* %EDX
  %1530 = zext i32 %1529 to i64
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 3
  store i64 %1532, i64* %PC
  %1533 = shl i64 %1530, 32
  %1534 = ashr exact i64 %1533, 32
  store i64 %1534, i64* %RDI, align 8, !tbaa !2428
  %1535 = load i64, i64* %RDI
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 4
  store i64 %1537, i64* %PC
  %1538 = shl i64 %1535, 1
  %1539 = icmp slt i64 %1538, 0
  %1540 = shl i64 %1538, 1
  store i64 %1540, i64* %RDI, align 8, !tbaa !2428
  %1541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1542 = zext i1 %1539 to i8
  store i8 %1542, i8* %1541, align 1, !tbaa !2451
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1544 = trunc i64 %1540 to i32
  %1545 = and i32 %1544, 254
  %1546 = call i32 @llvm.ctpop.i32(i32 %1545) #16
  %1547 = trunc i32 %1546 to i8
  %1548 = and i8 %1547, 1
  %1549 = xor i8 %1548, 1
  store i8 %1549, i8* %1543, align 1, !tbaa !2451
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1550, align 1, !tbaa !2451
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1552 = icmp eq i64 %1540, 0
  %1553 = zext i1 %1552 to i8
  store i8 %1553, i8* %1551, align 1, !tbaa !2451
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1555 = lshr i64 %1540, 63
  %1556 = trunc i64 %1555 to i8
  store i8 %1556, i8* %1554, align 1, !tbaa !2451
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1557, align 1, !tbaa !2451
  %1558 = load i64, i64* %RSI
  %1559 = load i64, i64* %RDI
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 3
  store i64 %1561, i64* %PC
  %1562 = add i64 %1559, %1558
  store i64 %1562, i64* %RSI, align 8, !tbaa !2428
  %1563 = icmp ult i64 %1562, %1558
  %1564 = icmp ult i64 %1562, %1559
  %1565 = or i1 %1563, %1564
  %1566 = zext i1 %1565 to i8
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1566, i8* %1567, align 1, !tbaa !2432
  %1568 = trunc i64 %1562 to i32
  %1569 = and i32 %1568, 255
  %1570 = call i32 @llvm.ctpop.i32(i32 %1569) #16
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  %1573 = xor i8 %1572, 1
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1573, i8* %1574, align 1, !tbaa !2446
  %1575 = xor i64 %1559, %1558
  %1576 = xor i64 %1575, %1562
  %1577 = lshr i64 %1576, 4
  %1578 = trunc i64 %1577 to i8
  %1579 = and i8 %1578, 1
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1579, i8* %1580, align 1, !tbaa !2447
  %1581 = icmp eq i64 %1562, 0
  %1582 = zext i1 %1581 to i8
  %1583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1582, i8* %1583, align 1, !tbaa !2448
  %1584 = lshr i64 %1562, 63
  %1585 = trunc i64 %1584 to i8
  %1586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1585, i8* %1586, align 1, !tbaa !2449
  %1587 = lshr i64 %1558, 63
  %1588 = lshr i64 %1559, 63
  %1589 = xor i64 %1584, %1587
  %1590 = xor i64 %1584, %1588
  %1591 = add nuw nsw i64 %1589, %1590
  %1592 = icmp eq i64 %1591, 2
  %1593 = zext i1 %1592 to i8
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1593, i8* %1594, align 1, !tbaa !2450
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 32
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 4
  store i64 %1598, i64* %PC
  %1599 = inttoptr i64 %1596 to i64*
  %1600 = load i64, i64* %1599
  store i64 %1600, i64* %RDI, align 8, !tbaa !2428
  %1601 = load i64, i64* %RBP
  %1602 = sub i64 %1601, 44
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 3
  store i64 %1604, i64* %PC
  %1605 = inttoptr i64 %1602 to i32*
  %1606 = load i32, i32* %1605
  %1607 = zext i32 %1606 to i64
  store i64 %1607, i64* %RDX, align 8, !tbaa !2428
  %1608 = load i64, i64* %RDX
  %1609 = load i64, i64* %PC
  %1610 = add i64 %1609, 3
  store i64 %1610, i64* %PC
  %1611 = trunc i64 %1608 to i32
  %1612 = add i32 1, %1611
  %1613 = zext i32 %1612 to i64
  store i64 %1613, i64* %RDX, align 8, !tbaa !2428
  %1614 = icmp ult i32 %1612, %1611
  %1615 = icmp ult i32 %1612, 1
  %1616 = or i1 %1614, %1615
  %1617 = zext i1 %1616 to i8
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1617, i8* %1618, align 1, !tbaa !2432
  %1619 = and i32 %1612, 255
  %1620 = call i32 @llvm.ctpop.i32(i32 %1619) #16
  %1621 = trunc i32 %1620 to i8
  %1622 = and i8 %1621, 1
  %1623 = xor i8 %1622, 1
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1623, i8* %1624, align 1, !tbaa !2446
  %1625 = xor i64 1, %1608
  %1626 = trunc i64 %1625 to i32
  %1627 = xor i32 %1626, %1612
  %1628 = lshr i32 %1627, 4
  %1629 = trunc i32 %1628 to i8
  %1630 = and i8 %1629, 1
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1630, i8* %1631, align 1, !tbaa !2447
  %1632 = icmp eq i32 %1612, 0
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1633, i8* %1634, align 1, !tbaa !2448
  %1635 = lshr i32 %1612, 31
  %1636 = trunc i32 %1635 to i8
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1636, i8* %1637, align 1, !tbaa !2449
  %1638 = lshr i32 %1611, 31
  %1639 = xor i32 %1635, %1638
  %1640 = add nuw nsw i32 %1639, %1635
  %1641 = icmp eq i32 %1640, 2
  %1642 = zext i1 %1641 to i8
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1642, i8* %1643, align 1, !tbaa !2450
  %1644 = load i32, i32* %EDX
  %1645 = zext i32 %1644 to i64
  %1646 = load i64, i64* %PC
  %1647 = add i64 %1646, 3
  store i64 %1647, i64* %PC
  %1648 = shl i64 %1645, 32
  %1649 = ashr exact i64 %1648, 32
  store i64 %1649, i64* %R8, align 8, !tbaa !2428
  %1650 = load i64, i64* %R8
  %1651 = load i64, i64* %PC
  %1652 = add i64 %1651, 4
  store i64 %1652, i64* %PC
  %1653 = shl i64 %1650, 1
  %1654 = icmp slt i64 %1653, 0
  %1655 = shl i64 %1653, 1
  store i64 %1655, i64* %R8, align 8, !tbaa !2428
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1657 = zext i1 %1654 to i8
  store i8 %1657, i8* %1656, align 1, !tbaa !2451
  %1658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1659 = trunc i64 %1655 to i32
  %1660 = and i32 %1659, 254
  %1661 = call i32 @llvm.ctpop.i32(i32 %1660) #16
  %1662 = trunc i32 %1661 to i8
  %1663 = and i8 %1662, 1
  %1664 = xor i8 %1663, 1
  store i8 %1664, i8* %1658, align 1, !tbaa !2451
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1665, align 1, !tbaa !2451
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1667 = icmp eq i64 %1655, 0
  %1668 = zext i1 %1667 to i8
  store i8 %1668, i8* %1666, align 1, !tbaa !2451
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1670 = lshr i64 %1655, 63
  %1671 = trunc i64 %1670 to i8
  store i8 %1671, i8* %1669, align 1, !tbaa !2451
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1672, align 1, !tbaa !2451
  %1673 = load i64, i64* %RDI
  %1674 = load i64, i64* %R8
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 3
  store i64 %1676, i64* %PC
  %1677 = add i64 %1674, %1673
  store i64 %1677, i64* %RDI, align 8, !tbaa !2428
  %1678 = icmp ult i64 %1677, %1673
  %1679 = icmp ult i64 %1677, %1674
  %1680 = or i1 %1678, %1679
  %1681 = zext i1 %1680 to i8
  %1682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1681, i8* %1682, align 1, !tbaa !2432
  %1683 = trunc i64 %1677 to i32
  %1684 = and i32 %1683, 255
  %1685 = call i32 @llvm.ctpop.i32(i32 %1684) #16
  %1686 = trunc i32 %1685 to i8
  %1687 = and i8 %1686, 1
  %1688 = xor i8 %1687, 1
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1688, i8* %1689, align 1, !tbaa !2446
  %1690 = xor i64 %1674, %1673
  %1691 = xor i64 %1690, %1677
  %1692 = lshr i64 %1691, 4
  %1693 = trunc i64 %1692 to i8
  %1694 = and i8 %1693, 1
  %1695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1694, i8* %1695, align 1, !tbaa !2447
  %1696 = icmp eq i64 %1677, 0
  %1697 = zext i1 %1696 to i8
  %1698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1697, i8* %1698, align 1, !tbaa !2448
  %1699 = lshr i64 %1677, 63
  %1700 = trunc i64 %1699 to i8
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1700, i8* %1701, align 1, !tbaa !2449
  %1702 = lshr i64 %1673, 63
  %1703 = lshr i64 %1674, 63
  %1704 = xor i64 %1699, %1702
  %1705 = xor i64 %1699, %1703
  %1706 = add nuw nsw i64 %1704, %1705
  %1707 = icmp eq i64 %1706, 2
  %1708 = zext i1 %1707 to i8
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1708, i8* %1709, align 1, !tbaa !2450
  %1710 = load i64, i64* %RBP
  %1711 = sub i64 %1710, 80
  %1712 = load i64, i64* %RDI
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 4
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1711 to i64*
  store i64 %1712, i64* %1715
  %1716 = load i32, i32* %ECX
  %1717 = zext i32 %1716 to i64
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 2
  store i64 %1719, i64* %PC
  %1720 = and i64 %1717, 4294967295
  store i64 %1720, i64* %RDI, align 8, !tbaa !2428
  %1721 = load i32, i32* %EAX
  %1722 = zext i32 %1721 to i64
  %1723 = load i64, i64* %PC
  %1724 = add i64 %1723, 2
  store i64 %1724, i64* %PC
  %1725 = and i64 %1722, 4294967295
  store i64 %1725, i64* %RDX, align 8, !tbaa !2428
  %1726 = load i64, i64* %RBP
  %1727 = sub i64 %1726, 80
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 4
  store i64 %1729, i64* %PC
  %1730 = inttoptr i64 %1727 to i64*
  %1731 = load i64, i64* %1730
  store i64 %1731, i64* %RCX, align 8, !tbaa !2428
  %1732 = bitcast i32* %R8D to i64*
  %1733 = load i32, i32* %EAX
  %1734 = zext i32 %1733 to i64
  %1735 = load i64, i64* %PC
  %1736 = add i64 %1735, 3
  store i64 %1736, i64* %PC
  %1737 = and i64 %1734, 4294967295
  store i64 %1737, i64* %1732, align 8, !tbaa !2428
  %1738 = load i64, i64* %RBP
  %1739 = sub i64 %1738, 84
  %1740 = bitcast %union.vec128_t* %XMM0 to i8*
  %1741 = load i64, i64* %PC
  %1742 = add i64 %1741, 5
  store i64 %1742, i64* %PC
  %1743 = bitcast i8* %1740 to <2 x float>*
  %1744 = load <2 x float>, <2 x float>* %1743, align 1
  %1745 = extractelement <2 x float> %1744, i32 0
  %1746 = inttoptr i64 %1739 to float*
  store float %1745, float* %1746
  %1747 = load i64, i64* %PC
  %1748 = add i64 %1747, 2761
  %1749 = load i64, i64* %PC
  %1750 = add i64 %1749, 5
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 5
  store i64 %1752, i64* %PC
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1754 = load i64, i64* %1753, align 8, !tbaa !2428
  %1755 = add i64 %1754, -8
  %1756 = inttoptr i64 %1755 to i64*
  store i64 %1750, i64* %1756
  store i64 %1755, i64* %1753, align 8, !tbaa !2428
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1748, i64* %1757, align 8, !tbaa !2428
  %1758 = load i64, i64* %PC
  %1759 = call %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* %0, i64 %1758, %struct.Memory* %MEMORY.3)
  %1760 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 84
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 5
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1762 to float*
  %1766 = load float, float* %1765
  %1767 = bitcast i8* %1760 to float*
  store float %1766, float* %1767, align 1, !tbaa !2452
  %1768 = getelementptr inbounds i8, i8* %1760, i64 4
  %1769 = bitcast i8* %1768 to float*
  store float 0.000000e+00, float* %1769, align 1, !tbaa !2452
  %1770 = getelementptr inbounds i8, i8* %1760, i64 8
  %1771 = bitcast i8* %1770 to float*
  store float 0.000000e+00, float* %1771, align 1, !tbaa !2452
  %1772 = getelementptr inbounds i8, i8* %1760, i64 12
  %1773 = bitcast i8* %1772 to float*
  store float 0.000000e+00, float* %1773, align 1, !tbaa !2452
  %1774 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1775 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1776 = bitcast %union.vec128_t* %XMM0 to i8*
  %1777 = load i64, i64* %PC
  %1778 = add i64 %1777, 4
  store i64 %1778, i64* %PC
  %1779 = bitcast i8* %1775 to <2 x float>*
  %1780 = load <2 x float>, <2 x float>* %1779, align 1
  %1781 = getelementptr inbounds i8, i8* %1775, i64 8
  %1782 = bitcast i8* %1781 to <2 x i32>*
  %1783 = load <2 x i32>, <2 x i32>* %1782, align 1
  %1784 = bitcast i8* %1776 to <2 x float>*
  %1785 = load <2 x float>, <2 x float>* %1784, align 1
  %1786 = extractelement <2 x float> %1780, i32 0
  %1787 = extractelement <2 x float> %1785, i32 0
  %1788 = fadd float %1786, %1787
  %1789 = bitcast i8* %1774 to float*
  store float %1788, float* %1789, align 1, !tbaa !2452
  %1790 = bitcast <2 x float> %1780 to <2 x i32>
  %1791 = extractelement <2 x i32> %1790, i32 1
  %1792 = getelementptr inbounds i8, i8* %1774, i64 4
  %1793 = bitcast i8* %1792 to i32*
  store i32 %1791, i32* %1793, align 1, !tbaa !2452
  %1794 = extractelement <2 x i32> %1783, i32 0
  %1795 = getelementptr inbounds i8, i8* %1774, i64 8
  %1796 = bitcast i8* %1795 to i32*
  store i32 %1794, i32* %1796, align 1, !tbaa !2452
  %1797 = extractelement <2 x i32> %1783, i32 1
  %1798 = getelementptr inbounds i8, i8* %1774, i64 12
  %1799 = bitcast i8* %1798 to i32*
  store i32 %1797, i32* %1799, align 1, !tbaa !2452
  %1800 = load i64, i64* %RBP
  %1801 = sub i64 %1800, 32
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 4
  store i64 %1803, i64* %PC
  %1804 = inttoptr i64 %1801 to i64*
  %1805 = load i64, i64* %1804
  store i64 %1805, i64* %RCX, align 8, !tbaa !2428
  %1806 = load i64, i64* %RBP
  %1807 = sub i64 %1806, 44
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = inttoptr i64 %1807 to i32*
  %1811 = load i32, i32* %1810
  %1812 = sext i32 %1811 to i64
  store i64 %1812, i64* %RSI, align 8, !tbaa !2428
  %1813 = load i64, i64* %RCX
  %1814 = load i64, i64* %RSI
  %1815 = mul i64 %1814, 4
  %1816 = add i64 %1815, %1813
  %1817 = bitcast %union.vec128_t* %XMM1 to i8*
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 5
  store i64 %1819, i64* %PC
  %1820 = bitcast i8* %1817 to <2 x float>*
  %1821 = load <2 x float>, <2 x float>* %1820, align 1
  %1822 = extractelement <2 x float> %1821, i32 0
  %1823 = inttoptr i64 %1816 to float*
  store float %1822, float* %1823
  %1824 = load i64, i64* %RBP
  %1825 = sub i64 %1824, 24
  %1826 = load i64, i64* %PC
  %1827 = add i64 %1826, 4
  store i64 %1827, i64* %PC
  %1828 = inttoptr i64 %1825 to i64*
  %1829 = load i64, i64* %1828
  store i64 %1829, i64* %RCX, align 8, !tbaa !2428
  %1830 = load i64, i64* %RBP
  %1831 = sub i64 %1830, 44
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 4
  store i64 %1833, i64* %PC
  %1834 = inttoptr i64 %1831 to i32*
  %1835 = load i32, i32* %1834
  %1836 = sext i32 %1835 to i64
  store i64 %1836, i64* %RSI, align 8, !tbaa !2428
  %1837 = load i64, i64* %RCX
  %1838 = load i64, i64* %RSI
  %1839 = mul i64 %1838, 4
  %1840 = add i64 %1839, %1837
  %1841 = load i64, i64* %PC
  %1842 = add i64 %1841, 3
  store i64 %1842, i64* %PC
  %1843 = inttoptr i64 %1840 to i32*
  %1844 = load i32, i32* %1843
  %1845 = zext i32 %1844 to i64
  store i64 %1845, i64* %RAX, align 8, !tbaa !2428
  %1846 = load i64, i64* %RBP
  %1847 = sub i64 %1846, 52
  %1848 = load i32, i32* %EAX
  %1849 = zext i32 %1848 to i64
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 3
  store i64 %1851, i64* %PC
  %1852 = inttoptr i64 %1847 to i32*
  store i32 %1848, i32* %1852
  %1853 = load i64, i64* %RBP
  %1854 = sub i64 %1853, 52
  %1855 = load i64, i64* %PC
  %1856 = add i64 %1855, 3
  store i64 %1856, i64* %PC
  %1857 = inttoptr i64 %1854 to i32*
  %1858 = load i32, i32* %1857
  %1859 = zext i32 %1858 to i64
  store i64 %1859, i64* %RAX, align 8, !tbaa !2428
  %1860 = load i32, i32* %EAX
  %1861 = zext i32 %1860 to i64
  %1862 = load i64, i64* %RBP
  %1863 = sub i64 %1862, 44
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 3
  store i64 %1865, i64* %PC
  %1866 = inttoptr i64 %1863 to i32*
  %1867 = load i32, i32* %1866
  %1868 = sub i32 %1860, %1867
  %1869 = icmp ult i32 %1860, %1867
  %1870 = zext i1 %1869 to i8
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1870, i8* %1871, align 1, !tbaa !2432
  %1872 = and i32 %1868, 255
  %1873 = call i32 @llvm.ctpop.i32(i32 %1872) #16
  %1874 = trunc i32 %1873 to i8
  %1875 = and i8 %1874, 1
  %1876 = xor i8 %1875, 1
  %1877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1876, i8* %1877, align 1, !tbaa !2446
  %1878 = xor i32 %1867, %1860
  %1879 = xor i32 %1878, %1868
  %1880 = lshr i32 %1879, 4
  %1881 = trunc i32 %1880 to i8
  %1882 = and i8 %1881, 1
  %1883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1882, i8* %1883, align 1, !tbaa !2447
  %1884 = icmp eq i32 %1868, 0
  %1885 = zext i1 %1884 to i8
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1885, i8* %1886, align 1, !tbaa !2448
  %1887 = lshr i32 %1868, 31
  %1888 = trunc i32 %1887 to i8
  %1889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1888, i8* %1889, align 1, !tbaa !2449
  %1890 = lshr i32 %1860, 31
  %1891 = lshr i32 %1867, 31
  %1892 = xor i32 %1891, %1890
  %1893 = xor i32 %1887, %1890
  %1894 = add nuw nsw i32 %1893, %1892
  %1895 = icmp eq i32 %1894, 2
  %1896 = zext i1 %1895 to i8
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1896, i8* %1897, align 1, !tbaa !2450
  %1898 = load i64, i64* %PC
  %1899 = add i64 %1898, 68
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 6
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 6
  store i64 %1903, i64* %PC
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1905 = load i8, i8* %1904, align 1, !tbaa !2448
  store i8 %1905, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1907 = icmp ne i8 %1905, 0
  %1908 = select i1 %1907, i64 %1899, i64 %1901
  store i64 %1908, i64* %1906, align 8, !tbaa !2428
  %1909 = load i8, i8* %BRANCH_TAKEN
  %1910 = icmp eq i8 %1909, 1
  br i1 %1910, label %block_401f9a, label %block_401f5c

block_401e9c:                                     ; preds = %block_401e0f
  %1911 = load i64, i64* %RBP
  %1912 = sub i64 %1911, 56
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 4
  store i64 %1914, i64* %PC
  %1915 = inttoptr i64 %1912 to i32*
  %1916 = load i32, i32* %1915
  %1917 = sub i32 %1916, 1
  %1918 = icmp ult i32 %1916, 1
  %1919 = zext i1 %1918 to i8
  %1920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1919, i8* %1920, align 1, !tbaa !2432
  %1921 = and i32 %1917, 255
  %1922 = call i32 @llvm.ctpop.i32(i32 %1921) #16
  %1923 = trunc i32 %1922 to i8
  %1924 = and i8 %1923, 1
  %1925 = xor i8 %1924, 1
  %1926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1925, i8* %1926, align 1, !tbaa !2446
  %1927 = xor i32 %1916, 1
  %1928 = xor i32 %1927, %1917
  %1929 = lshr i32 %1928, 4
  %1930 = trunc i32 %1929 to i8
  %1931 = and i8 %1930, 1
  %1932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1931, i8* %1932, align 1, !tbaa !2447
  %1933 = icmp eq i32 %1917, 0
  %1934 = zext i1 %1933 to i8
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1934, i8* %1935, align 1, !tbaa !2448
  %1936 = lshr i32 %1917, 31
  %1937 = trunc i32 %1936 to i8
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1937, i8* %1938, align 1, !tbaa !2449
  %1939 = lshr i32 %1916, 31
  %1940 = xor i32 %1936, %1939
  %1941 = add nuw nsw i32 %1940, %1939
  %1942 = icmp eq i32 %1941, 2
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1943, i8* %1944, align 1, !tbaa !2450
  %1945 = load i64, i64* %PC
  %1946 = add i64 %1945, 274
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 6
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 6
  store i64 %1950, i64* %PC
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1952 = load i8, i8* %1951, align 1, !tbaa !2449
  %1953 = icmp ne i8 %1952, 0
  %1954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1955 = load i8, i8* %1954, align 1, !tbaa !2450
  %1956 = icmp ne i8 %1955, 0
  %1957 = xor i1 %1953, %1956
  %1958 = zext i1 %1957 to i8
  store i8 %1958, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1960 = select i1 %1957, i64 %1946, i64 %1948
  store i64 %1960, i64* %1959, align 8, !tbaa !2428
  %1961 = load i8, i8* %BRANCH_TAKEN
  %1962 = icmp eq i8 %1961, 1
  br i1 %1962, label %block_401fb2, label %block_401ea6

block_401e1b:                                     ; preds = %block_401e0f
  %1963 = load i64, i64* %PC
  %1964 = add i64 %1963, 5
  store i64 %1964, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1965 = load i64, i64* %RBP
  %1966 = sub i64 %1965, 44
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 3
  store i64 %1968, i64* %PC
  %1969 = inttoptr i64 %1966 to i32*
  %1970 = load i32, i32* %1969
  %1971 = zext i32 %1970 to i64
  store i64 %1971, i64* %RDI, align 8, !tbaa !2428
  %1972 = load i64, i64* %RBP
  %1973 = sub i64 %1972, 8
  %1974 = load i64, i64* %PC
  %1975 = add i64 %1974, 4
  store i64 %1975, i64* %PC
  %1976 = inttoptr i64 %1973 to i64*
  %1977 = load i64, i64* %1976
  store i64 %1977, i64* %RCX, align 8, !tbaa !2428
  %1978 = load i64, i64* %RBP
  %1979 = sub i64 %1978, 12
  %1980 = load i64, i64* %PC
  %1981 = add i64 %1980, 3
  store i64 %1981, i64* %PC
  %1982 = inttoptr i64 %1979 to i32*
  %1983 = load i32, i32* %1982
  %1984 = zext i32 %1983 to i64
  store i64 %1984, i64* %RDX, align 8, !tbaa !2428
  %1985 = load i64, i64* %RDX
  %1986 = load i64, i64* %RBP
  %1987 = sub i64 %1986, 44
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 4
  store i64 %1989, i64* %PC
  %1990 = inttoptr i64 %1987 to i32*
  %1991 = load i32, i32* %1990
  %1992 = shl i64 %1985, 32
  %1993 = ashr exact i64 %1992, 32
  %1994 = sext i32 %1991 to i64
  %1995 = mul nsw i64 %1994, %1993
  %1996 = trunc i64 %1995 to i32
  %1997 = and i64 %1995, 4294967295
  store i64 %1997, i64* %RDX, align 8, !tbaa !2428
  %1998 = shl i64 %1995, 32
  %1999 = ashr exact i64 %1998, 32
  %2000 = icmp ne i64 %1999, %1995
  %2001 = zext i1 %2000 to i8
  %2002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2001, i8* %2002, align 1, !tbaa !2432
  %2003 = and i32 %1996, 255
  %2004 = call i32 @llvm.ctpop.i32(i32 %2003) #16
  %2005 = trunc i32 %2004 to i8
  %2006 = and i8 %2005, 1
  %2007 = xor i8 %2006, 1
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2007, i8* %2008, align 1, !tbaa !2446
  %2009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2009, align 1, !tbaa !2447
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2010, align 1, !tbaa !2448
  %2011 = lshr i32 %1996, 31
  %2012 = trunc i32 %2011 to i8
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2012, i8* %2013, align 1, !tbaa !2449
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2001, i8* %2014, align 1, !tbaa !2450
  %2015 = load i64, i64* %RDX
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 3
  store i64 %2017, i64* %PC
  %2018 = trunc i64 %2015 to i32
  %2019 = zext i32 %2018 to i64
  store i64 %2019, i64* %RDX, align 8, !tbaa !2428
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2020, align 1, !tbaa !2432
  %2021 = and i32 %2018, 255
  %2022 = call i32 @llvm.ctpop.i32(i32 %2021) #16
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = xor i8 %2024, 1
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2025, i8* %2026, align 1, !tbaa !2446
  %2027 = trunc i64 %2015 to i32
  %2028 = xor i32 %2027, %2018
  %2029 = lshr i32 %2028, 4
  %2030 = trunc i32 %2029 to i8
  %2031 = and i8 %2030, 1
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2031, i8* %2032, align 1, !tbaa !2447
  %2033 = icmp eq i32 %2018, 0
  %2034 = zext i1 %2033 to i8
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2034, i8* %2035, align 1, !tbaa !2448
  %2036 = lshr i32 %2018, 31
  %2037 = trunc i32 %2036 to i8
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2037, i8* %2038, align 1, !tbaa !2449
  %2039 = lshr i32 %2018, 31
  %2040 = xor i32 %2036, %2039
  %2041 = add nuw nsw i32 %2040, %2036
  %2042 = icmp eq i32 %2041, 2
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2043, i8* %2044, align 1, !tbaa !2450
  %2045 = load i32, i32* %EDX
  %2046 = zext i32 %2045 to i64
  %2047 = load i64, i64* %PC
  %2048 = add i64 %2047, 3
  store i64 %2048, i64* %PC
  %2049 = shl i64 %2046, 32
  %2050 = ashr exact i64 %2049, 32
  store i64 %2050, i64* %RSI, align 8, !tbaa !2428
  %2051 = load i64, i64* %RSI
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 4
  store i64 %2053, i64* %PC
  %2054 = shl i64 %2051, 1
  %2055 = icmp slt i64 %2054, 0
  %2056 = shl i64 %2054, 1
  store i64 %2056, i64* %RSI, align 8, !tbaa !2428
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2058 = zext i1 %2055 to i8
  store i8 %2058, i8* %2057, align 1, !tbaa !2451
  %2059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2060 = trunc i64 %2056 to i32
  %2061 = and i32 %2060, 254
  %2062 = call i32 @llvm.ctpop.i32(i32 %2061) #16
  %2063 = trunc i32 %2062 to i8
  %2064 = and i8 %2063, 1
  %2065 = xor i8 %2064, 1
  store i8 %2065, i8* %2059, align 1, !tbaa !2451
  %2066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2066, align 1, !tbaa !2451
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2068 = icmp eq i64 %2056, 0
  %2069 = zext i1 %2068 to i8
  store i8 %2069, i8* %2067, align 1, !tbaa !2451
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2071 = lshr i64 %2056, 63
  %2072 = trunc i64 %2071 to i8
  store i8 %2072, i8* %2070, align 1, !tbaa !2451
  %2073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2073, align 1, !tbaa !2451
  %2074 = load i64, i64* %RCX
  %2075 = load i64, i64* %RSI
  %2076 = load i64, i64* %PC
  %2077 = add i64 %2076, 3
  store i64 %2077, i64* %PC
  %2078 = add i64 %2075, %2074
  store i64 %2078, i64* %RCX, align 8, !tbaa !2428
  %2079 = icmp ult i64 %2078, %2074
  %2080 = icmp ult i64 %2078, %2075
  %2081 = or i1 %2079, %2080
  %2082 = zext i1 %2081 to i8
  %2083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2082, i8* %2083, align 1, !tbaa !2432
  %2084 = trunc i64 %2078 to i32
  %2085 = and i32 %2084, 255
  %2086 = call i32 @llvm.ctpop.i32(i32 %2085) #16
  %2087 = trunc i32 %2086 to i8
  %2088 = and i8 %2087, 1
  %2089 = xor i8 %2088, 1
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2089, i8* %2090, align 1, !tbaa !2446
  %2091 = xor i64 %2075, %2074
  %2092 = xor i64 %2091, %2078
  %2093 = lshr i64 %2092, 4
  %2094 = trunc i64 %2093 to i8
  %2095 = and i8 %2094, 1
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2095, i8* %2096, align 1, !tbaa !2447
  %2097 = icmp eq i64 %2078, 0
  %2098 = zext i1 %2097 to i8
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2098, i8* %2099, align 1, !tbaa !2448
  %2100 = lshr i64 %2078, 63
  %2101 = trunc i64 %2100 to i8
  %2102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2101, i8* %2102, align 1, !tbaa !2449
  %2103 = lshr i64 %2074, 63
  %2104 = lshr i64 %2075, 63
  %2105 = xor i64 %2100, %2103
  %2106 = xor i64 %2100, %2104
  %2107 = add nuw nsw i64 %2105, %2106
  %2108 = icmp eq i64 %2107, 2
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2109, i8* %2110, align 1, !tbaa !2450
  %2111 = load i64, i64* %RBP
  %2112 = sub i64 %2111, 32
  %2113 = load i64, i64* %PC
  %2114 = add i64 %2113, 4
  store i64 %2114, i64* %PC
  %2115 = inttoptr i64 %2112 to i64*
  %2116 = load i64, i64* %2115
  store i64 %2116, i64* %RSI, align 8, !tbaa !2428
  %2117 = load i64, i64* %RBP
  %2118 = sub i64 %2117, 72
  %2119 = load i64, i64* %RSI
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 4
  store i64 %2121, i64* %PC
  %2122 = inttoptr i64 %2118 to i64*
  store i64 %2119, i64* %2122
  %2123 = load i64, i64* %RCX
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 3
  store i64 %2125, i64* %PC
  store i64 %2123, i64* %RSI, align 8, !tbaa !2428
  %2126 = load i32, i32* %EAX
  %2127 = zext i32 %2126 to i64
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 2
  store i64 %2129, i64* %PC
  %2130 = and i64 %2127, 4294967295
  store i64 %2130, i64* %RDX, align 8, !tbaa !2428
  %2131 = load i64, i64* %RBP
  %2132 = sub i64 %2131, 72
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 4
  store i64 %2134, i64* %PC
  %2135 = inttoptr i64 %2132 to i64*
  %2136 = load i64, i64* %2135
  store i64 %2136, i64* %RCX, align 8, !tbaa !2428
  %2137 = bitcast i32* %R8D to i64*
  %2138 = load i32, i32* %EAX
  %2139 = zext i32 %2138 to i64
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 3
  store i64 %2141, i64* %PC
  %2142 = and i64 %2139, 4294967295
  store i64 %2142, i64* %2137, align 8, !tbaa !2428
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 2977
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 5
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 5
  store i64 %2148, i64* %PC
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2150 = load i64, i64* %2149, align 8, !tbaa !2428
  %2151 = add i64 %2150, -8
  %2152 = inttoptr i64 %2151 to i64*
  store i64 %2146, i64* %2152
  store i64 %2151, i64* %2149, align 8, !tbaa !2428
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2144, i64* %2153, align 8, !tbaa !2428
  %2154 = load i64, i64* %PC
  %2155 = call %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* %0, i64 %2154, %struct.Memory* %MEMORY.6)
  %2156 = load i64, i64* %RBP
  %2157 = sub i64 %2156, 40
  %2158 = bitcast %union.vec128_t* %XMM0 to i8*
  %2159 = load i64, i64* %PC
  %2160 = add i64 %2159, 5
  store i64 %2160, i64* %PC
  %2161 = bitcast i8* %2158 to <2 x float>*
  %2162 = load <2 x float>, <2 x float>* %2161, align 1
  %2163 = extractelement <2 x float> %2162, i32 0
  %2164 = inttoptr i64 %2157 to float*
  store float %2163, float* %2164
  %2165 = load i64, i64* %RBP
  %2166 = sub i64 %2165, 32
  %2167 = load i64, i64* %PC
  %2168 = add i64 %2167, 4
  store i64 %2168, i64* %PC
  %2169 = inttoptr i64 %2166 to i64*
  %2170 = load i64, i64* %2169
  store i64 %2170, i64* %RCX, align 8, !tbaa !2428
  %2171 = load i64, i64* %RBP
  %2172 = sub i64 %2171, 44
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 4
  store i64 %2174, i64* %PC
  %2175 = inttoptr i64 %2172 to i32*
  %2176 = load i32, i32* %2175
  %2177 = sext i32 %2176 to i64
  store i64 %2177, i64* %RSI, align 8, !tbaa !2428
  %2178 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2179 = load i64, i64* %RCX
  %2180 = load i64, i64* %RSI
  %2181 = mul i64 %2180, 4
  %2182 = add i64 %2181, %2179
  %2183 = load i64, i64* %PC
  %2184 = add i64 %2183, 5
  store i64 %2184, i64* %PC
  %2185 = inttoptr i64 %2182 to float*
  %2186 = load float, float* %2185
  %2187 = bitcast i8* %2178 to float*
  store float %2186, float* %2187, align 1, !tbaa !2452
  %2188 = getelementptr inbounds i8, i8* %2178, i64 4
  %2189 = bitcast i8* %2188 to float*
  store float 0.000000e+00, float* %2189, align 1, !tbaa !2452
  %2190 = getelementptr inbounds i8, i8* %2178, i64 8
  %2191 = bitcast i8* %2190 to float*
  store float 0.000000e+00, float* %2191, align 1, !tbaa !2452
  %2192 = getelementptr inbounds i8, i8* %2178, i64 12
  %2193 = bitcast i8* %2192 to float*
  store float 0.000000e+00, float* %2193, align 1, !tbaa !2452
  %2194 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2195 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2196 = load i64, i64* %RBP
  %2197 = sub i64 %2196, 40
  %2198 = load i64, i64* %PC
  %2199 = add i64 %2198, 5
  store i64 %2199, i64* %PC
  %2200 = bitcast i8* %2195 to <2 x float>*
  %2201 = load <2 x float>, <2 x float>* %2200, align 1
  %2202 = getelementptr inbounds i8, i8* %2195, i64 8
  %2203 = bitcast i8* %2202 to <2 x i32>*
  %2204 = load <2 x i32>, <2 x i32>* %2203, align 1
  %2205 = inttoptr i64 %2197 to float*
  %2206 = load float, float* %2205
  %2207 = extractelement <2 x float> %2201, i32 0
  %2208 = fsub float %2207, %2206
  %2209 = bitcast i8* %2194 to float*
  store float %2208, float* %2209, align 1, !tbaa !2452
  %2210 = bitcast <2 x float> %2201 to <2 x i32>
  %2211 = extractelement <2 x i32> %2210, i32 1
  %2212 = getelementptr inbounds i8, i8* %2194, i64 4
  %2213 = bitcast i8* %2212 to i32*
  store i32 %2211, i32* %2213, align 1, !tbaa !2452
  %2214 = extractelement <2 x i32> %2204, i32 0
  %2215 = getelementptr inbounds i8, i8* %2194, i64 8
  %2216 = bitcast i8* %2215 to i32*
  store i32 %2214, i32* %2216, align 1, !tbaa !2452
  %2217 = extractelement <2 x i32> %2204, i32 1
  %2218 = getelementptr inbounds i8, i8* %2194, i64 12
  %2219 = bitcast i8* %2218 to i32*
  store i32 %2217, i32* %2219, align 1, !tbaa !2452
  %2220 = load i64, i64* %RBP
  %2221 = sub i64 %2220, 8
  %2222 = load i64, i64* %PC
  %2223 = add i64 %2222, 4
  store i64 %2223, i64* %PC
  %2224 = inttoptr i64 %2221 to i64*
  %2225 = load i64, i64* %2224
  store i64 %2225, i64* %RCX, align 8, !tbaa !2428
  %2226 = load i64, i64* %RBP
  %2227 = sub i64 %2226, 12
  %2228 = load i64, i64* %PC
  %2229 = add i64 %2228, 3
  store i64 %2229, i64* %PC
  %2230 = inttoptr i64 %2227 to i32*
  %2231 = load i32, i32* %2230
  %2232 = zext i32 %2231 to i64
  store i64 %2232, i64* %RAX, align 8, !tbaa !2428
  %2233 = load i64, i64* %RAX
  %2234 = load i64, i64* %RBP
  %2235 = sub i64 %2234, 44
  %2236 = load i64, i64* %PC
  %2237 = add i64 %2236, 4
  store i64 %2237, i64* %PC
  %2238 = inttoptr i64 %2235 to i32*
  %2239 = load i32, i32* %2238
  %2240 = shl i64 %2233, 32
  %2241 = ashr exact i64 %2240, 32
  %2242 = sext i32 %2239 to i64
  %2243 = mul nsw i64 %2242, %2241
  %2244 = trunc i64 %2243 to i32
  %2245 = and i64 %2243, 4294967295
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = shl i64 %2243, 32
  %2247 = ashr exact i64 %2246, 32
  %2248 = icmp ne i64 %2247, %2243
  %2249 = zext i1 %2248 to i8
  %2250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2249, i8* %2250, align 1, !tbaa !2432
  %2251 = and i32 %2244, 255
  %2252 = call i32 @llvm.ctpop.i32(i32 %2251) #16
  %2253 = trunc i32 %2252 to i8
  %2254 = and i8 %2253, 1
  %2255 = xor i8 %2254, 1
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2255, i8* %2256, align 1, !tbaa !2446
  %2257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2257, align 1, !tbaa !2447
  %2258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2258, align 1, !tbaa !2448
  %2259 = lshr i32 %2244, 31
  %2260 = trunc i32 %2259 to i8
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2260, i8* %2261, align 1, !tbaa !2449
  %2262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2249, i8* %2262, align 1, !tbaa !2450
  %2263 = load i64, i64* %RAX
  %2264 = load i64, i64* %RBP
  %2265 = sub i64 %2264, 44
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 3
  store i64 %2267, i64* %PC
  %2268 = trunc i64 %2263 to i32
  %2269 = inttoptr i64 %2265 to i32*
  %2270 = load i32, i32* %2269
  %2271 = add i32 %2270, %2268
  %2272 = zext i32 %2271 to i64
  store i64 %2272, i64* %RAX, align 8, !tbaa !2428
  %2273 = icmp ult i32 %2271, %2268
  %2274 = icmp ult i32 %2271, %2270
  %2275 = or i1 %2273, %2274
  %2276 = zext i1 %2275 to i8
  %2277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2276, i8* %2277, align 1, !tbaa !2432
  %2278 = and i32 %2271, 255
  %2279 = call i32 @llvm.ctpop.i32(i32 %2278) #16
  %2280 = trunc i32 %2279 to i8
  %2281 = and i8 %2280, 1
  %2282 = xor i8 %2281, 1
  %2283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2282, i8* %2283, align 1, !tbaa !2446
  %2284 = xor i32 %2270, %2268
  %2285 = xor i32 %2284, %2271
  %2286 = lshr i32 %2285, 4
  %2287 = trunc i32 %2286 to i8
  %2288 = and i8 %2287, 1
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2288, i8* %2289, align 1, !tbaa !2447
  %2290 = icmp eq i32 %2271, 0
  %2291 = zext i1 %2290 to i8
  %2292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2291, i8* %2292, align 1, !tbaa !2448
  %2293 = lshr i32 %2271, 31
  %2294 = trunc i32 %2293 to i8
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2294, i8* %2295, align 1, !tbaa !2449
  %2296 = lshr i32 %2268, 31
  %2297 = lshr i32 %2270, 31
  %2298 = xor i32 %2293, %2296
  %2299 = xor i32 %2293, %2297
  %2300 = add nuw nsw i32 %2298, %2299
  %2301 = icmp eq i32 %2300, 2
  %2302 = zext i1 %2301 to i8
  %2303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2302, i8* %2303, align 1, !tbaa !2450
  %2304 = load i32, i32* %EAX
  %2305 = zext i32 %2304 to i64
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 3
  store i64 %2307, i64* %PC
  %2308 = shl i64 %2305, 32
  %2309 = ashr exact i64 %2308, 32
  store i64 %2309, i64* %RSI, align 8, !tbaa !2428
  %2310 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2311 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2312 = load i64, i64* %RCX
  %2313 = load i64, i64* %RSI
  %2314 = mul i64 %2313, 4
  %2315 = add i64 %2314, %2312
  %2316 = load i64, i64* %PC
  %2317 = add i64 %2316, 5
  store i64 %2317, i64* %PC
  %2318 = bitcast i8* %2311 to <2 x float>*
  %2319 = load <2 x float>, <2 x float>* %2318, align 1
  %2320 = getelementptr inbounds i8, i8* %2311, i64 8
  %2321 = bitcast i8* %2320 to <2 x i32>*
  %2322 = load <2 x i32>, <2 x i32>* %2321, align 1
  %2323 = inttoptr i64 %2315 to float*
  %2324 = load float, float* %2323
  %2325 = extractelement <2 x float> %2319, i32 0
  %2326 = fdiv float %2325, %2324
  %2327 = bitcast i8* %2310 to float*
  store float %2326, float* %2327, align 1, !tbaa !2452
  %2328 = bitcast <2 x float> %2319 to <2 x i32>
  %2329 = extractelement <2 x i32> %2328, i32 1
  %2330 = getelementptr inbounds i8, i8* %2310, i64 4
  %2331 = bitcast i8* %2330 to i32*
  store i32 %2329, i32* %2331, align 1, !tbaa !2452
  %2332 = extractelement <2 x i32> %2322, i32 0
  %2333 = getelementptr inbounds i8, i8* %2310, i64 8
  %2334 = bitcast i8* %2333 to i32*
  store i32 %2332, i32* %2334, align 1, !tbaa !2452
  %2335 = extractelement <2 x i32> %2322, i32 1
  %2336 = getelementptr inbounds i8, i8* %2310, i64 12
  %2337 = bitcast i8* %2336 to i32*
  store i32 %2335, i32* %2337, align 1, !tbaa !2452
  %2338 = load i64, i64* %RBP
  %2339 = sub i64 %2338, 32
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 4
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RCX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 44
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 4
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i32*
  %2349 = load i32, i32* %2348
  %2350 = sext i32 %2349 to i64
  store i64 %2350, i64* %RSI, align 8, !tbaa !2428
  %2351 = load i64, i64* %RCX
  %2352 = load i64, i64* %RSI
  %2353 = mul i64 %2352, 4
  %2354 = add i64 %2353, %2351
  %2355 = bitcast %union.vec128_t* %XMM0 to i8*
  %2356 = load i64, i64* %PC
  %2357 = add i64 %2356, 5
  store i64 %2357, i64* %PC
  %2358 = bitcast i8* %2355 to <2 x float>*
  %2359 = load <2 x float>, <2 x float>* %2358, align 1
  %2360 = extractelement <2 x float> %2359, i32 0
  %2361 = inttoptr i64 %2354 to float*
  store float %2360, float* %2361
  %2362 = load i64, i64* %RBP
  %2363 = sub i64 %2362, 44
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 3
  store i64 %2365, i64* %PC
  %2366 = inttoptr i64 %2363 to i32*
  %2367 = load i32, i32* %2366
  %2368 = zext i32 %2367 to i64
  store i64 %2368, i64* %RAX, align 8, !tbaa !2428
  %2369 = load i64, i64* %RAX
  %2370 = load i64, i64* %PC
  %2371 = add i64 %2370, 3
  store i64 %2371, i64* %PC
  %2372 = trunc i64 %2369 to i32
  %2373 = add i32 1, %2372
  %2374 = zext i32 %2373 to i64
  store i64 %2374, i64* %RAX, align 8, !tbaa !2428
  %2375 = icmp ult i32 %2373, %2372
  %2376 = icmp ult i32 %2373, 1
  %2377 = or i1 %2375, %2376
  %2378 = zext i1 %2377 to i8
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2378, i8* %2379, align 1, !tbaa !2432
  %2380 = and i32 %2373, 255
  %2381 = call i32 @llvm.ctpop.i32(i32 %2380) #16
  %2382 = trunc i32 %2381 to i8
  %2383 = and i8 %2382, 1
  %2384 = xor i8 %2383, 1
  %2385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2384, i8* %2385, align 1, !tbaa !2446
  %2386 = xor i64 1, %2369
  %2387 = trunc i64 %2386 to i32
  %2388 = xor i32 %2387, %2373
  %2389 = lshr i32 %2388, 4
  %2390 = trunc i32 %2389 to i8
  %2391 = and i8 %2390, 1
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2391, i8* %2392, align 1, !tbaa !2447
  %2393 = icmp eq i32 %2373, 0
  %2394 = zext i1 %2393 to i8
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2394, i8* %2395, align 1, !tbaa !2448
  %2396 = lshr i32 %2373, 31
  %2397 = trunc i32 %2396 to i8
  %2398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2397, i8* %2398, align 1, !tbaa !2449
  %2399 = lshr i32 %2372, 31
  %2400 = xor i32 %2396, %2399
  %2401 = add nuw nsw i32 %2400, %2396
  %2402 = icmp eq i32 %2401, 2
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2403, i8* %2404, align 1, !tbaa !2450
  %2405 = load i64, i64* %RBP
  %2406 = sub i64 %2405, 44
  %2407 = load i32, i32* %EAX
  %2408 = zext i32 %2407 to i64
  %2409 = load i64, i64* %PC
  %2410 = add i64 %2409, 3
  store i64 %2410, i64* %PC
  %2411 = inttoptr i64 %2406 to i32*
  store i32 %2407, i32* %2411
  %2412 = load i64, i64* %PC
  %2413 = sub i64 %2412, 136
  %2414 = load i64, i64* %PC
  %2415 = add i64 %2414, 5
  store i64 %2415, i64* %PC
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2413, i64* %2416, align 8, !tbaa !2428
  br label %block_401e0f

block_401fb7:                                     ; preds = %block_401e03, %block_401fb2
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_401fb2 ], [ %MEMORY.0, %block_401e03 ]
  %2417 = load i64, i64* %RSP
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 4
  store i64 %2419, i64* %PC
  %2420 = add i64 96, %2417
  store i64 %2420, i64* %RSP, align 8, !tbaa !2428
  %2421 = icmp ult i64 %2420, %2417
  %2422 = icmp ult i64 %2420, 96
  %2423 = or i1 %2421, %2422
  %2424 = zext i1 %2423 to i8
  %2425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2424, i8* %2425, align 1, !tbaa !2432
  %2426 = trunc i64 %2420 to i32
  %2427 = and i32 %2426, 255
  %2428 = call i32 @llvm.ctpop.i32(i32 %2427) #16
  %2429 = trunc i32 %2428 to i8
  %2430 = and i8 %2429, 1
  %2431 = xor i8 %2430, 1
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2431, i8* %2432, align 1, !tbaa !2446
  %2433 = xor i64 96, %2417
  %2434 = xor i64 %2433, %2420
  %2435 = lshr i64 %2434, 4
  %2436 = trunc i64 %2435 to i8
  %2437 = and i8 %2436, 1
  %2438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2437, i8* %2438, align 1, !tbaa !2447
  %2439 = icmp eq i64 %2420, 0
  %2440 = zext i1 %2439 to i8
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2440, i8* %2441, align 1, !tbaa !2448
  %2442 = lshr i64 %2420, 63
  %2443 = trunc i64 %2442 to i8
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2443, i8* %2444, align 1, !tbaa !2449
  %2445 = lshr i64 %2417, 63
  %2446 = xor i64 %2442, %2445
  %2447 = add nuw nsw i64 %2446, %2442
  %2448 = icmp eq i64 %2447, 2
  %2449 = zext i1 %2448 to i8
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2449, i8* %2450, align 1, !tbaa !2450
  %2451 = load i64, i64* %PC
  %2452 = add i64 %2451, 1
  store i64 %2452, i64* %PC
  %2453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2454 = load i64, i64* %2453, align 8, !tbaa !2428
  %2455 = add i64 %2454, 8
  %2456 = inttoptr i64 %2454 to i64*
  %2457 = load i64, i64* %2456
  store i64 %2457, i64* %RBP, align 8, !tbaa !2428
  store i64 %2455, i64* %2453, align 8, !tbaa !2428
  %2458 = load i64, i64* %PC
  %2459 = add i64 %2458, 1
  store i64 %2459, i64* %PC
  %2460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2462 = load i64, i64* %2461, align 8, !tbaa !2428
  %2463 = inttoptr i64 %2462 to i64*
  %2464 = load i64, i64* %2463
  store i64 %2464, i64* %2460, align 8, !tbaa !2428
  %2465 = add i64 %2462, 8
  store i64 %2465, i64* %2461, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_401f9a:                                     ; preds = %block_401eb9, %block_401f5c
  %MEMORY.5 = phi %struct.Memory* [ %1759, %block_401eb9 ], [ %1759, %block_401f5c ]
  %2466 = load i64, i64* %PC
  %2467 = add i64 %2466, 5
  %2468 = load i64, i64* %PC
  %2469 = add i64 %2468, 5
  store i64 %2469, i64* %PC
  %2470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2467, i64* %2470, align 8, !tbaa !2428
  %2471 = load i64, i64* %RBP
  %2472 = sub i64 %2471, 48
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 3
  store i64 %2474, i64* %PC
  %2475 = inttoptr i64 %2472 to i32*
  %2476 = load i32, i32* %2475
  %2477 = zext i32 %2476 to i64
  store i64 %2477, i64* %RAX, align 8, !tbaa !2428
  %2478 = load i64, i64* %RAX
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 3
  store i64 %2480, i64* %PC
  %2481 = trunc i64 %2478 to i32
  %2482 = add i32 1, %2481
  %2483 = zext i32 %2482 to i64
  store i64 %2483, i64* %RAX, align 8, !tbaa !2428
  %2484 = icmp ult i32 %2482, %2481
  %2485 = icmp ult i32 %2482, 1
  %2486 = or i1 %2484, %2485
  %2487 = zext i1 %2486 to i8
  %2488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2487, i8* %2488, align 1, !tbaa !2432
  %2489 = and i32 %2482, 255
  %2490 = call i32 @llvm.ctpop.i32(i32 %2489) #16
  %2491 = trunc i32 %2490 to i8
  %2492 = and i8 %2491, 1
  %2493 = xor i8 %2492, 1
  %2494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2493, i8* %2494, align 1, !tbaa !2446
  %2495 = xor i64 1, %2478
  %2496 = trunc i64 %2495 to i32
  %2497 = xor i32 %2496, %2482
  %2498 = lshr i32 %2497, 4
  %2499 = trunc i32 %2498 to i8
  %2500 = and i8 %2499, 1
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2500, i8* %2501, align 1, !tbaa !2447
  %2502 = icmp eq i32 %2482, 0
  %2503 = zext i1 %2502 to i8
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2503, i8* %2504, align 1, !tbaa !2448
  %2505 = lshr i32 %2482, 31
  %2506 = trunc i32 %2505 to i8
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2506, i8* %2507, align 1, !tbaa !2449
  %2508 = lshr i32 %2481, 31
  %2509 = xor i32 %2505, %2508
  %2510 = add nuw nsw i32 %2509, %2505
  %2511 = icmp eq i32 %2510, 2
  %2512 = zext i1 %2511 to i8
  %2513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2512, i8* %2513, align 1, !tbaa !2450
  %2514 = load i64, i64* %RBP
  %2515 = sub i64 %2514, 48
  %2516 = load i32, i32* %EAX
  %2517 = zext i32 %2516 to i64
  %2518 = load i64, i64* %PC
  %2519 = add i64 %2518, 3
  store i64 %2519, i64* %PC
  %2520 = inttoptr i64 %2515 to i32*
  store i32 %2516, i32* %2520
  %2521 = load i64, i64* %PC
  %2522 = sub i64 %2521, 251
  %2523 = load i64, i64* %PC
  %2524 = add i64 %2523, 5
  store i64 %2524, i64* %PC
  %2525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2522, i64* %2525, align 8, !tbaa !2428
  br label %block_401ead

block_401e0f:                                     ; preds = %block_401e08, %block_401e1b
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_401e08 ], [ %2155, %block_401e1b ]
  %2526 = load i64, i64* %RBP
  %2527 = sub i64 %2526, 44
  %2528 = load i64, i64* %PC
  %2529 = add i64 %2528, 3
  store i64 %2529, i64* %PC
  %2530 = inttoptr i64 %2527 to i32*
  %2531 = load i32, i32* %2530
  %2532 = zext i32 %2531 to i64
  store i64 %2532, i64* %RAX, align 8, !tbaa !2428
  %2533 = load i32, i32* %EAX
  %2534 = zext i32 %2533 to i64
  %2535 = load i64, i64* %RBP
  %2536 = sub i64 %2535, 16
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 3
  store i64 %2538, i64* %PC
  %2539 = inttoptr i64 %2536 to i32*
  %2540 = load i32, i32* %2539
  %2541 = sub i32 %2533, %2540
  %2542 = icmp ult i32 %2533, %2540
  %2543 = zext i1 %2542 to i8
  %2544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2543, i8* %2544, align 1, !tbaa !2432
  %2545 = and i32 %2541, 255
  %2546 = call i32 @llvm.ctpop.i32(i32 %2545) #16
  %2547 = trunc i32 %2546 to i8
  %2548 = and i8 %2547, 1
  %2549 = xor i8 %2548, 1
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2549, i8* %2550, align 1, !tbaa !2446
  %2551 = xor i32 %2540, %2533
  %2552 = xor i32 %2551, %2541
  %2553 = lshr i32 %2552, 4
  %2554 = trunc i32 %2553 to i8
  %2555 = and i8 %2554, 1
  %2556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2555, i8* %2556, align 1, !tbaa !2447
  %2557 = icmp eq i32 %2541, 0
  %2558 = zext i1 %2557 to i8
  %2559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2558, i8* %2559, align 1, !tbaa !2448
  %2560 = lshr i32 %2541, 31
  %2561 = trunc i32 %2560 to i8
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2561, i8* %2562, align 1, !tbaa !2449
  %2563 = lshr i32 %2533, 31
  %2564 = lshr i32 %2540, 31
  %2565 = xor i32 %2564, %2563
  %2566 = xor i32 %2560, %2563
  %2567 = add nuw nsw i32 %2566, %2565
  %2568 = icmp eq i32 %2567, 2
  %2569 = zext i1 %2568 to i8
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2569, i8* %2570, align 1, !tbaa !2450
  %2571 = load i64, i64* %PC
  %2572 = add i64 %2571, 135
  %2573 = load i64, i64* %PC
  %2574 = add i64 %2573, 6
  %2575 = load i64, i64* %PC
  %2576 = add i64 %2575, 6
  store i64 %2576, i64* %PC
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2578 = load i8, i8* %2577, align 1, !tbaa !2449
  %2579 = icmp ne i8 %2578, 0
  %2580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2581 = load i8, i8* %2580, align 1, !tbaa !2450
  %2582 = icmp ne i8 %2581, 0
  %2583 = xor i1 %2579, %2582
  %2584 = xor i1 %2583, true
  %2585 = zext i1 %2584 to i8
  store i8 %2585, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2587 = select i1 %2583, i64 %2574, i64 %2572
  store i64 %2587, i64* %2586, align 8, !tbaa !2428
  %2588 = load i8, i8* %BRANCH_TAKEN
  %2589 = icmp eq i8 %2588, 1
  br i1 %2589, label %block_401e9c, label %block_401e1b

block_401c71:                                     ; preds = %block_401c40
  %2590 = sub i64 %225, 56
  %2591 = load i64, i64* %PC
  %2592 = add i64 %2591, 4
  store i64 %2592, i64* %PC
  %2593 = inttoptr i64 %2590 to i32*
  %2594 = load i32, i32* %2593
  %2595 = sub i32 %2594, 1
  %2596 = icmp ult i32 %2594, 1
  %2597 = zext i1 %2596 to i8
  %2598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2597, i8* %2598, align 1, !tbaa !2432
  %2599 = and i32 %2595, 255
  %2600 = call i32 @llvm.ctpop.i32(i32 %2599) #16
  %2601 = trunc i32 %2600 to i8
  %2602 = and i8 %2601, 1
  %2603 = xor i8 %2602, 1
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2603, i8* %2604, align 1, !tbaa !2446
  %2605 = xor i32 %2594, 1
  %2606 = xor i32 %2605, %2595
  %2607 = lshr i32 %2606, 4
  %2608 = trunc i32 %2607 to i8
  %2609 = and i8 %2608, 1
  %2610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2609, i8* %2610, align 1, !tbaa !2447
  %2611 = icmp eq i32 %2595, 0
  %2612 = zext i1 %2611 to i8
  %2613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2612, i8* %2613, align 1, !tbaa !2448
  %2614 = lshr i32 %2595, 31
  %2615 = trunc i32 %2614 to i8
  %2616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2615, i8* %2616, align 1, !tbaa !2449
  %2617 = lshr i32 %2594, 31
  %2618 = xor i32 %2614, %2617
  %2619 = add nuw nsw i32 %2618, %2617
  %2620 = icmp eq i32 %2619, 2
  %2621 = zext i1 %2620 to i8
  %2622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2621, i8* %2622, align 1, !tbaa !2450
  %2623 = load i64, i64* %PC
  %2624 = add i64 %2623, 220
  %2625 = load i64, i64* %PC
  %2626 = add i64 %2625, 6
  %2627 = load i64, i64* %PC
  %2628 = add i64 %2627, 6
  store i64 %2628, i64* %PC
  %2629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2630 = load i8, i8* %2629, align 1, !tbaa !2449
  %2631 = icmp ne i8 %2630, 0
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2633 = load i8, i8* %2632, align 1, !tbaa !2450
  %2634 = icmp ne i8 %2633, 0
  %2635 = xor i1 %2631, %2634
  %2636 = zext i1 %2635 to i8
  store i8 %2636, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2638 = select i1 %2635, i64 %2624, i64 %2626
  store i64 %2638, i64* %2637, align 8, !tbaa !2428
  %2639 = load i8, i8* %BRANCH_TAKEN
  %2640 = icmp eq i8 %2639, 1
  br i1 %2640, label %block_401d51, label %block_401c7b

block_401c8e:                                     ; preds = %block_401c82
  %2641 = load i64, i64* %RBP
  %2642 = sub i64 %2641, 24
  %2643 = load i64, i64* %PC
  %2644 = add i64 %2643, 4
  store i64 %2644, i64* %PC
  %2645 = inttoptr i64 %2642 to i64*
  %2646 = load i64, i64* %2645
  store i64 %2646, i64* %RAX, align 8, !tbaa !2428
  %2647 = load i64, i64* %RBP
  %2648 = sub i64 %2647, 44
  %2649 = load i64, i64* %PC
  %2650 = add i64 %2649, 4
  store i64 %2650, i64* %PC
  %2651 = inttoptr i64 %2648 to i32*
  %2652 = load i32, i32* %2651
  %2653 = sext i32 %2652 to i64
  store i64 %2653, i64* %RCX, align 8, !tbaa !2428
  %2654 = load i64, i64* %RAX
  %2655 = load i64, i64* %RCX
  %2656 = mul i64 %2655, 4
  %2657 = add i64 %2656, %2654
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 3
  store i64 %2659, i64* %PC
  %2660 = inttoptr i64 %2657 to i32*
  %2661 = load i32, i32* %2660
  %2662 = zext i32 %2661 to i64
  store i64 %2662, i64* %RDX, align 8, !tbaa !2428
  %2663 = load i64, i64* %RBP
  %2664 = sub i64 %2663, 52
  %2665 = load i32, i32* %EDX
  %2666 = zext i32 %2665 to i64
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 3
  store i64 %2668, i64* %PC
  %2669 = inttoptr i64 %2664 to i32*
  store i32 %2665, i32* %2669
  %2670 = load i64, i64* %RBP
  %2671 = sub i64 %2670, 32
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 4
  store i64 %2673, i64* %PC
  %2674 = inttoptr i64 %2671 to i64*
  %2675 = load i64, i64* %2674
  store i64 %2675, i64* %RAX, align 8, !tbaa !2428
  %2676 = load i64, i64* %RBP
  %2677 = sub i64 %2676, 52
  %2678 = load i64, i64* %PC
  %2679 = add i64 %2678, 4
  store i64 %2679, i64* %PC
  %2680 = inttoptr i64 %2677 to i32*
  %2681 = load i32, i32* %2680
  %2682 = sext i32 %2681 to i64
  store i64 %2682, i64* %RCX, align 8, !tbaa !2428
  %2683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2684 = load i64, i64* %RAX
  %2685 = load i64, i64* %RCX
  %2686 = mul i64 %2685, 4
  %2687 = add i64 %2686, %2684
  %2688 = load i64, i64* %PC
  %2689 = add i64 %2688, 5
  store i64 %2689, i64* %PC
  %2690 = inttoptr i64 %2687 to float*
  %2691 = load float, float* %2690
  %2692 = bitcast i8* %2683 to float*
  store float %2691, float* %2692, align 1, !tbaa !2452
  %2693 = getelementptr inbounds i8, i8* %2683, i64 4
  %2694 = bitcast i8* %2693 to float*
  store float 0.000000e+00, float* %2694, align 1, !tbaa !2452
  %2695 = getelementptr inbounds i8, i8* %2683, i64 8
  %2696 = bitcast i8* %2695 to float*
  store float 0.000000e+00, float* %2696, align 1, !tbaa !2452
  %2697 = getelementptr inbounds i8, i8* %2683, i64 12
  %2698 = bitcast i8* %2697 to float*
  store float 0.000000e+00, float* %2698, align 1, !tbaa !2452
  %2699 = load i64, i64* %RBP
  %2700 = sub i64 %2699, 40
  %2701 = bitcast %union.vec128_t* %XMM0 to i8*
  %2702 = load i64, i64* %PC
  %2703 = add i64 %2702, 5
  store i64 %2703, i64* %PC
  %2704 = bitcast i8* %2701 to <2 x float>*
  %2705 = load <2 x float>, <2 x float>* %2704, align 1
  %2706 = extractelement <2 x float> %2705, i32 0
  %2707 = inttoptr i64 %2700 to float*
  store float %2706, float* %2707
  %2708 = load i64, i64* %RBP
  %2709 = sub i64 %2708, 52
  %2710 = load i64, i64* %PC
  %2711 = add i64 %2710, 3
  store i64 %2711, i64* %PC
  %2712 = inttoptr i64 %2709 to i32*
  %2713 = load i32, i32* %2712
  %2714 = zext i32 %2713 to i64
  store i64 %2714, i64* %RDX, align 8, !tbaa !2428
  %2715 = load i32, i32* %EDX
  %2716 = zext i32 %2715 to i64
  %2717 = load i64, i64* %RBP
  %2718 = sub i64 %2717, 44
  %2719 = load i64, i64* %PC
  %2720 = add i64 %2719, 3
  store i64 %2720, i64* %PC
  %2721 = inttoptr i64 %2718 to i32*
  %2722 = load i32, i32* %2721
  %2723 = sub i32 %2715, %2722
  %2724 = icmp ult i32 %2715, %2722
  %2725 = zext i1 %2724 to i8
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2725, i8* %2726, align 1, !tbaa !2432
  %2727 = and i32 %2723, 255
  %2728 = call i32 @llvm.ctpop.i32(i32 %2727) #16
  %2729 = trunc i32 %2728 to i8
  %2730 = and i8 %2729, 1
  %2731 = xor i8 %2730, 1
  %2732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2731, i8* %2732, align 1, !tbaa !2446
  %2733 = xor i32 %2722, %2715
  %2734 = xor i32 %2733, %2723
  %2735 = lshr i32 %2734, 4
  %2736 = trunc i32 %2735 to i8
  %2737 = and i8 %2736, 1
  %2738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2737, i8* %2738, align 1, !tbaa !2447
  %2739 = icmp eq i32 %2723, 0
  %2740 = zext i1 %2739 to i8
  %2741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2740, i8* %2741, align 1, !tbaa !2448
  %2742 = lshr i32 %2723, 31
  %2743 = trunc i32 %2742 to i8
  %2744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2743, i8* %2744, align 1, !tbaa !2449
  %2745 = lshr i32 %2715, 31
  %2746 = lshr i32 %2722, 31
  %2747 = xor i32 %2746, %2745
  %2748 = xor i32 %2742, %2745
  %2749 = add nuw nsw i32 %2748, %2747
  %2750 = icmp eq i32 %2749, 2
  %2751 = zext i1 %2750 to i8
  %2752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2751, i8* %2752, align 1, !tbaa !2450
  %2753 = load i64, i64* %PC
  %2754 = add i64 %2753, 50
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 6
  %2757 = load i64, i64* %PC
  %2758 = add i64 %2757, 6
  store i64 %2758, i64* %PC
  %2759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2760 = load i8, i8* %2759, align 1, !tbaa !2448
  store i8 %2760, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2762 = icmp ne i8 %2760, 0
  %2763 = select i1 %2762, i64 %2754, i64 %2756
  store i64 %2763, i64* %2761, align 8, !tbaa !2428
  %2764 = load i8, i8* %BRANCH_TAKEN
  %2765 = icmp eq i8 %2764, 1
  br i1 %2765, label %block_401ce6, label %block_401cba

block_401ce6:                                     ; preds = %block_401c8e, %block_401cba
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.8, %block_401c8e ], [ %MEMORY.8, %block_401cba ]
  %2766 = load i64, i64* %PC
  %2767 = add i64 %2766, 5
  store i64 %2767, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %2768 = load i64, i64* %RBP
  %2769 = sub i64 %2768, 16
  %2770 = load i64, i64* %PC
  %2771 = add i64 %2770, 3
  store i64 %2771, i64* %PC
  %2772 = inttoptr i64 %2769 to i32*
  %2773 = load i32, i32* %2772
  %2774 = zext i32 %2773 to i64
  store i64 %2774, i64* %RCX, align 8, !tbaa !2428
  %2775 = load i64, i64* %RBP
  %2776 = sub i64 %2775, 44
  %2777 = load i64, i64* %PC
  %2778 = add i64 %2777, 3
  store i64 %2778, i64* %PC
  %2779 = inttoptr i64 %2776 to i32*
  %2780 = load i32, i32* %2779
  %2781 = zext i32 %2780 to i64
  store i64 %2781, i64* %RDX, align 8, !tbaa !2428
  %2782 = load i64, i64* %RDX
  %2783 = load i64, i64* %PC
  %2784 = add i64 %2783, 3
  store i64 %2784, i64* %PC
  %2785 = trunc i64 %2782 to i32
  %2786 = add i32 1, %2785
  %2787 = zext i32 %2786 to i64
  store i64 %2787, i64* %RDX, align 8, !tbaa !2428
  %2788 = icmp ult i32 %2786, %2785
  %2789 = icmp ult i32 %2786, 1
  %2790 = or i1 %2788, %2789
  %2791 = zext i1 %2790 to i8
  %2792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2791, i8* %2792, align 1, !tbaa !2432
  %2793 = and i32 %2786, 255
  %2794 = call i32 @llvm.ctpop.i32(i32 %2793) #16
  %2795 = trunc i32 %2794 to i8
  %2796 = and i8 %2795, 1
  %2797 = xor i8 %2796, 1
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2797, i8* %2798, align 1, !tbaa !2446
  %2799 = xor i64 1, %2782
  %2800 = trunc i64 %2799 to i32
  %2801 = xor i32 %2800, %2786
  %2802 = lshr i32 %2801, 4
  %2803 = trunc i32 %2802 to i8
  %2804 = and i8 %2803, 1
  %2805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2804, i8* %2805, align 1, !tbaa !2447
  %2806 = icmp eq i32 %2786, 0
  %2807 = zext i1 %2806 to i8
  %2808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2807, i8* %2808, align 1, !tbaa !2448
  %2809 = lshr i32 %2786, 31
  %2810 = trunc i32 %2809 to i8
  %2811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2810, i8* %2811, align 1, !tbaa !2449
  %2812 = lshr i32 %2785, 31
  %2813 = xor i32 %2809, %2812
  %2814 = add nuw nsw i32 %2813, %2809
  %2815 = icmp eq i32 %2814, 2
  %2816 = zext i1 %2815 to i8
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2816, i8* %2817, align 1, !tbaa !2450
  %2818 = load i64, i64* %RCX
  %2819 = load i32, i32* %EDX
  %2820 = zext i32 %2819 to i64
  %2821 = load i64, i64* %PC
  %2822 = add i64 %2821, 2
  store i64 %2822, i64* %PC
  %2823 = trunc i64 %2818 to i32
  %2824 = sub i32 %2823, %2819
  %2825 = zext i32 %2824 to i64
  store i64 %2825, i64* %RCX, align 8, !tbaa !2428
  %2826 = icmp ult i32 %2823, %2819
  %2827 = zext i1 %2826 to i8
  %2828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2827, i8* %2828, align 1, !tbaa !2432
  %2829 = and i32 %2824, 255
  %2830 = call i32 @llvm.ctpop.i32(i32 %2829) #16
  %2831 = trunc i32 %2830 to i8
  %2832 = and i8 %2831, 1
  %2833 = xor i8 %2832, 1
  %2834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2833, i8* %2834, align 1, !tbaa !2446
  %2835 = xor i64 %2820, %2818
  %2836 = trunc i64 %2835 to i32
  %2837 = xor i32 %2836, %2824
  %2838 = lshr i32 %2837, 4
  %2839 = trunc i32 %2838 to i8
  %2840 = and i8 %2839, 1
  %2841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2840, i8* %2841, align 1, !tbaa !2447
  %2842 = icmp eq i32 %2824, 0
  %2843 = zext i1 %2842 to i8
  %2844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2843, i8* %2844, align 1, !tbaa !2448
  %2845 = lshr i32 %2824, 31
  %2846 = trunc i32 %2845 to i8
  %2847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2846, i8* %2847, align 1, !tbaa !2449
  %2848 = lshr i32 %2823, 31
  %2849 = lshr i32 %2819, 31
  %2850 = xor i32 %2849, %2848
  %2851 = xor i32 %2845, %2848
  %2852 = add nuw nsw i32 %2851, %2850
  %2853 = icmp eq i32 %2852, 2
  %2854 = zext i1 %2853 to i8
  %2855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2854, i8* %2855, align 1, !tbaa !2450
  %2856 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2857 = load i64, i64* %RBP
  %2858 = sub i64 %2857, 40
  %2859 = load i64, i64* %PC
  %2860 = add i64 %2859, 5
  store i64 %2860, i64* %PC
  %2861 = inttoptr i64 %2858 to float*
  %2862 = load float, float* %2861
  %2863 = bitcast i8* %2856 to float*
  store float %2862, float* %2863, align 1, !tbaa !2452
  %2864 = getelementptr inbounds i8, i8* %2856, i64 4
  %2865 = bitcast i8* %2864 to float*
  store float 0.000000e+00, float* %2865, align 1, !tbaa !2452
  %2866 = getelementptr inbounds i8, i8* %2856, i64 8
  %2867 = bitcast i8* %2866 to float*
  store float 0.000000e+00, float* %2867, align 1, !tbaa !2452
  %2868 = getelementptr inbounds i8, i8* %2856, i64 12
  %2869 = bitcast i8* %2868 to float*
  store float 0.000000e+00, float* %2869, align 1, !tbaa !2452
  %2870 = load i64, i64* %RBP
  %2871 = sub i64 %2870, 8
  %2872 = load i64, i64* %PC
  %2873 = add i64 %2872, 4
  store i64 %2873, i64* %PC
  %2874 = inttoptr i64 %2871 to i64*
  %2875 = load i64, i64* %2874
  store i64 %2875, i64* %RSI, align 8, !tbaa !2428
  %2876 = load i64, i64* %RBP
  %2877 = sub i64 %2876, 12
  %2878 = load i64, i64* %PC
  %2879 = add i64 %2878, 3
  store i64 %2879, i64* %PC
  %2880 = inttoptr i64 %2877 to i32*
  %2881 = load i32, i32* %2880
  %2882 = zext i32 %2881 to i64
  store i64 %2882, i64* %RDX, align 8, !tbaa !2428
  %2883 = load i64, i64* %RDX
  %2884 = load i64, i64* %RBP
  %2885 = sub i64 %2884, 44
  %2886 = load i64, i64* %PC
  %2887 = add i64 %2886, 4
  store i64 %2887, i64* %PC
  %2888 = inttoptr i64 %2885 to i32*
  %2889 = load i32, i32* %2888
  %2890 = shl i64 %2883, 32
  %2891 = ashr exact i64 %2890, 32
  %2892 = sext i32 %2889 to i64
  %2893 = mul nsw i64 %2892, %2891
  %2894 = trunc i64 %2893 to i32
  %2895 = and i64 %2893, 4294967295
  store i64 %2895, i64* %RDX, align 8, !tbaa !2428
  %2896 = shl i64 %2893, 32
  %2897 = ashr exact i64 %2896, 32
  %2898 = icmp ne i64 %2897, %2893
  %2899 = zext i1 %2898 to i8
  %2900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2899, i8* %2900, align 1, !tbaa !2432
  %2901 = and i32 %2894, 255
  %2902 = call i32 @llvm.ctpop.i32(i32 %2901) #16
  %2903 = trunc i32 %2902 to i8
  %2904 = and i8 %2903, 1
  %2905 = xor i8 %2904, 1
  %2906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2905, i8* %2906, align 1, !tbaa !2446
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2907, align 1, !tbaa !2447
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2908, align 1, !tbaa !2448
  %2909 = lshr i32 %2894, 31
  %2910 = trunc i32 %2909 to i8
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2910, i8* %2911, align 1, !tbaa !2449
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2899, i8* %2912, align 1, !tbaa !2450
  %2913 = load i64, i64* %RDX
  %2914 = load i64, i64* %RBP
  %2915 = sub i64 %2914, 44
  %2916 = load i64, i64* %PC
  %2917 = add i64 %2916, 3
  store i64 %2917, i64* %PC
  %2918 = trunc i64 %2913 to i32
  %2919 = inttoptr i64 %2915 to i32*
  %2920 = load i32, i32* %2919
  %2921 = add i32 %2920, %2918
  %2922 = zext i32 %2921 to i64
  store i64 %2922, i64* %RDX, align 8, !tbaa !2428
  %2923 = icmp ult i32 %2921, %2918
  %2924 = icmp ult i32 %2921, %2920
  %2925 = or i1 %2923, %2924
  %2926 = zext i1 %2925 to i8
  %2927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2926, i8* %2927, align 1, !tbaa !2432
  %2928 = and i32 %2921, 255
  %2929 = call i32 @llvm.ctpop.i32(i32 %2928) #16
  %2930 = trunc i32 %2929 to i8
  %2931 = and i8 %2930, 1
  %2932 = xor i8 %2931, 1
  %2933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2932, i8* %2933, align 1, !tbaa !2446
  %2934 = xor i32 %2920, %2918
  %2935 = xor i32 %2934, %2921
  %2936 = lshr i32 %2935, 4
  %2937 = trunc i32 %2936 to i8
  %2938 = and i8 %2937, 1
  %2939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2938, i8* %2939, align 1, !tbaa !2447
  %2940 = icmp eq i32 %2921, 0
  %2941 = zext i1 %2940 to i8
  %2942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2941, i8* %2942, align 1, !tbaa !2448
  %2943 = lshr i32 %2921, 31
  %2944 = trunc i32 %2943 to i8
  %2945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2944, i8* %2945, align 1, !tbaa !2449
  %2946 = lshr i32 %2918, 31
  %2947 = lshr i32 %2920, 31
  %2948 = xor i32 %2943, %2946
  %2949 = xor i32 %2943, %2947
  %2950 = add nuw nsw i32 %2948, %2949
  %2951 = icmp eq i32 %2950, 2
  %2952 = zext i1 %2951 to i8
  %2953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2952, i8* %2953, align 1, !tbaa !2450
  %2954 = load i64, i64* %RDX
  %2955 = load i64, i64* %PC
  %2956 = add i64 %2955, 3
  store i64 %2956, i64* %PC
  %2957 = trunc i64 %2954 to i32
  %2958 = add i32 1, %2957
  %2959 = zext i32 %2958 to i64
  store i64 %2959, i64* %RDX, align 8, !tbaa !2428
  %2960 = icmp ult i32 %2958, %2957
  %2961 = icmp ult i32 %2958, 1
  %2962 = or i1 %2960, %2961
  %2963 = zext i1 %2962 to i8
  %2964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2963, i8* %2964, align 1, !tbaa !2432
  %2965 = and i32 %2958, 255
  %2966 = call i32 @llvm.ctpop.i32(i32 %2965) #16
  %2967 = trunc i32 %2966 to i8
  %2968 = and i8 %2967, 1
  %2969 = xor i8 %2968, 1
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2969, i8* %2970, align 1, !tbaa !2446
  %2971 = xor i64 1, %2954
  %2972 = trunc i64 %2971 to i32
  %2973 = xor i32 %2972, %2958
  %2974 = lshr i32 %2973, 4
  %2975 = trunc i32 %2974 to i8
  %2976 = and i8 %2975, 1
  %2977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2976, i8* %2977, align 1, !tbaa !2447
  %2978 = icmp eq i32 %2958, 0
  %2979 = zext i1 %2978 to i8
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2979, i8* %2980, align 1, !tbaa !2448
  %2981 = lshr i32 %2958, 31
  %2982 = trunc i32 %2981 to i8
  %2983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2982, i8* %2983, align 1, !tbaa !2449
  %2984 = lshr i32 %2957, 31
  %2985 = xor i32 %2981, %2984
  %2986 = add nuw nsw i32 %2985, %2981
  %2987 = icmp eq i32 %2986, 2
  %2988 = zext i1 %2987 to i8
  %2989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2988, i8* %2989, align 1, !tbaa !2450
  %2990 = load i32, i32* %EDX
  %2991 = zext i32 %2990 to i64
  %2992 = load i64, i64* %PC
  %2993 = add i64 %2992, 3
  store i64 %2993, i64* %PC
  %2994 = shl i64 %2991, 32
  %2995 = ashr exact i64 %2994, 32
  store i64 %2995, i64* %RDI, align 8, !tbaa !2428
  %2996 = load i64, i64* %RDI
  %2997 = load i64, i64* %PC
  %2998 = add i64 %2997, 4
  store i64 %2998, i64* %PC
  %2999 = shl i64 %2996, 1
  %3000 = icmp slt i64 %2999, 0
  %3001 = shl i64 %2999, 1
  store i64 %3001, i64* %RDI, align 8, !tbaa !2428
  %3002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3003 = zext i1 %3000 to i8
  store i8 %3003, i8* %3002, align 1, !tbaa !2451
  %3004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3005 = trunc i64 %3001 to i32
  %3006 = and i32 %3005, 254
  %3007 = call i32 @llvm.ctpop.i32(i32 %3006) #16
  %3008 = trunc i32 %3007 to i8
  %3009 = and i8 %3008, 1
  %3010 = xor i8 %3009, 1
  store i8 %3010, i8* %3004, align 1, !tbaa !2451
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3011, align 1, !tbaa !2451
  %3012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3013 = icmp eq i64 %3001, 0
  %3014 = zext i1 %3013 to i8
  store i8 %3014, i8* %3012, align 1, !tbaa !2451
  %3015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3016 = lshr i64 %3001, 63
  %3017 = trunc i64 %3016 to i8
  store i8 %3017, i8* %3015, align 1, !tbaa !2451
  %3018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3018, align 1, !tbaa !2451
  %3019 = load i64, i64* %RSI
  %3020 = load i64, i64* %RDI
  %3021 = load i64, i64* %PC
  %3022 = add i64 %3021, 3
  store i64 %3022, i64* %PC
  %3023 = add i64 %3020, %3019
  store i64 %3023, i64* %RSI, align 8, !tbaa !2428
  %3024 = icmp ult i64 %3023, %3019
  %3025 = icmp ult i64 %3023, %3020
  %3026 = or i1 %3024, %3025
  %3027 = zext i1 %3026 to i8
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3027, i8* %3028, align 1, !tbaa !2432
  %3029 = trunc i64 %3023 to i32
  %3030 = and i32 %3029, 255
  %3031 = call i32 @llvm.ctpop.i32(i32 %3030) #16
  %3032 = trunc i32 %3031 to i8
  %3033 = and i8 %3032, 1
  %3034 = xor i8 %3033, 1
  %3035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3034, i8* %3035, align 1, !tbaa !2446
  %3036 = xor i64 %3020, %3019
  %3037 = xor i64 %3036, %3023
  %3038 = lshr i64 %3037, 4
  %3039 = trunc i64 %3038 to i8
  %3040 = and i8 %3039, 1
  %3041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3040, i8* %3041, align 1, !tbaa !2447
  %3042 = icmp eq i64 %3023, 0
  %3043 = zext i1 %3042 to i8
  %3044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3043, i8* %3044, align 1, !tbaa !2448
  %3045 = lshr i64 %3023, 63
  %3046 = trunc i64 %3045 to i8
  %3047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3046, i8* %3047, align 1, !tbaa !2449
  %3048 = lshr i64 %3019, 63
  %3049 = lshr i64 %3020, 63
  %3050 = xor i64 %3045, %3048
  %3051 = xor i64 %3045, %3049
  %3052 = add nuw nsw i64 %3050, %3051
  %3053 = icmp eq i64 %3052, 2
  %3054 = zext i1 %3053 to i8
  %3055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3054, i8* %3055, align 1, !tbaa !2450
  %3056 = load i64, i64* %RBP
  %3057 = sub i64 %3056, 32
  %3058 = load i64, i64* %PC
  %3059 = add i64 %3058, 4
  store i64 %3059, i64* %PC
  %3060 = inttoptr i64 %3057 to i64*
  %3061 = load i64, i64* %3060
  store i64 %3061, i64* %RDI, align 8, !tbaa !2428
  %3062 = load i64, i64* %RBP
  %3063 = sub i64 %3062, 44
  %3064 = load i64, i64* %PC
  %3065 = add i64 %3064, 3
  store i64 %3065, i64* %PC
  %3066 = inttoptr i64 %3063 to i32*
  %3067 = load i32, i32* %3066
  %3068 = zext i32 %3067 to i64
  store i64 %3068, i64* %RDX, align 8, !tbaa !2428
  %3069 = load i64, i64* %RDX
  %3070 = load i64, i64* %PC
  %3071 = add i64 %3070, 3
  store i64 %3071, i64* %PC
  %3072 = trunc i64 %3069 to i32
  %3073 = add i32 1, %3072
  %3074 = zext i32 %3073 to i64
  store i64 %3074, i64* %RDX, align 8, !tbaa !2428
  %3075 = icmp ult i32 %3073, %3072
  %3076 = icmp ult i32 %3073, 1
  %3077 = or i1 %3075, %3076
  %3078 = zext i1 %3077 to i8
  %3079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3078, i8* %3079, align 1, !tbaa !2432
  %3080 = and i32 %3073, 255
  %3081 = call i32 @llvm.ctpop.i32(i32 %3080) #16
  %3082 = trunc i32 %3081 to i8
  %3083 = and i8 %3082, 1
  %3084 = xor i8 %3083, 1
  %3085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3084, i8* %3085, align 1, !tbaa !2446
  %3086 = xor i64 1, %3069
  %3087 = trunc i64 %3086 to i32
  %3088 = xor i32 %3087, %3073
  %3089 = lshr i32 %3088, 4
  %3090 = trunc i32 %3089 to i8
  %3091 = and i8 %3090, 1
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3091, i8* %3092, align 1, !tbaa !2447
  %3093 = icmp eq i32 %3073, 0
  %3094 = zext i1 %3093 to i8
  %3095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3094, i8* %3095, align 1, !tbaa !2448
  %3096 = lshr i32 %3073, 31
  %3097 = trunc i32 %3096 to i8
  %3098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3097, i8* %3098, align 1, !tbaa !2449
  %3099 = lshr i32 %3072, 31
  %3100 = xor i32 %3096, %3099
  %3101 = add nuw nsw i32 %3100, %3096
  %3102 = icmp eq i32 %3101, 2
  %3103 = zext i1 %3102 to i8
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3103, i8* %3104, align 1, !tbaa !2450
  %3105 = load i32, i32* %EDX
  %3106 = zext i32 %3105 to i64
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 3
  store i64 %3108, i64* %PC
  %3109 = shl i64 %3106, 32
  %3110 = ashr exact i64 %3109, 32
  store i64 %3110, i64* %R8, align 8, !tbaa !2428
  %3111 = load i64, i64* %R8
  %3112 = load i64, i64* %PC
  %3113 = add i64 %3112, 4
  store i64 %3113, i64* %PC
  %3114 = shl i64 %3111, 1
  %3115 = icmp slt i64 %3114, 0
  %3116 = shl i64 %3114, 1
  store i64 %3116, i64* %R8, align 8, !tbaa !2428
  %3117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3118 = zext i1 %3115 to i8
  store i8 %3118, i8* %3117, align 1, !tbaa !2451
  %3119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3120 = trunc i64 %3116 to i32
  %3121 = and i32 %3120, 254
  %3122 = call i32 @llvm.ctpop.i32(i32 %3121) #16
  %3123 = trunc i32 %3122 to i8
  %3124 = and i8 %3123, 1
  %3125 = xor i8 %3124, 1
  store i8 %3125, i8* %3119, align 1, !tbaa !2451
  %3126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3126, align 1, !tbaa !2451
  %3127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3128 = icmp eq i64 %3116, 0
  %3129 = zext i1 %3128 to i8
  store i8 %3129, i8* %3127, align 1, !tbaa !2451
  %3130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3131 = lshr i64 %3116, 63
  %3132 = trunc i64 %3131 to i8
  store i8 %3132, i8* %3130, align 1, !tbaa !2451
  %3133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3133, align 1, !tbaa !2451
  %3134 = load i64, i64* %RDI
  %3135 = load i64, i64* %R8
  %3136 = load i64, i64* %PC
  %3137 = add i64 %3136, 3
  store i64 %3137, i64* %PC
  %3138 = add i64 %3135, %3134
  store i64 %3138, i64* %RDI, align 8, !tbaa !2428
  %3139 = icmp ult i64 %3138, %3134
  %3140 = icmp ult i64 %3138, %3135
  %3141 = or i1 %3139, %3140
  %3142 = zext i1 %3141 to i8
  %3143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3142, i8* %3143, align 1, !tbaa !2432
  %3144 = trunc i64 %3138 to i32
  %3145 = and i32 %3144, 255
  %3146 = call i32 @llvm.ctpop.i32(i32 %3145) #16
  %3147 = trunc i32 %3146 to i8
  %3148 = and i8 %3147, 1
  %3149 = xor i8 %3148, 1
  %3150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3149, i8* %3150, align 1, !tbaa !2446
  %3151 = xor i64 %3135, %3134
  %3152 = xor i64 %3151, %3138
  %3153 = lshr i64 %3152, 4
  %3154 = trunc i64 %3153 to i8
  %3155 = and i8 %3154, 1
  %3156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3155, i8* %3156, align 1, !tbaa !2447
  %3157 = icmp eq i64 %3138, 0
  %3158 = zext i1 %3157 to i8
  %3159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3158, i8* %3159, align 1, !tbaa !2448
  %3160 = lshr i64 %3138, 63
  %3161 = trunc i64 %3160 to i8
  %3162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3161, i8* %3162, align 1, !tbaa !2449
  %3163 = lshr i64 %3134, 63
  %3164 = lshr i64 %3135, 63
  %3165 = xor i64 %3160, %3163
  %3166 = xor i64 %3160, %3164
  %3167 = add nuw nsw i64 %3165, %3166
  %3168 = icmp eq i64 %3167, 2
  %3169 = zext i1 %3168 to i8
  %3170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3169, i8* %3170, align 1, !tbaa !2450
  %3171 = load i64, i64* %RBP
  %3172 = sub i64 %3171, 64
  %3173 = load i64, i64* %RDI
  %3174 = load i64, i64* %PC
  %3175 = add i64 %3174, 4
  store i64 %3175, i64* %PC
  %3176 = inttoptr i64 %3172 to i64*
  store i64 %3173, i64* %3176
  %3177 = load i32, i32* %ECX
  %3178 = zext i32 %3177 to i64
  %3179 = load i64, i64* %PC
  %3180 = add i64 %3179, 2
  store i64 %3180, i64* %PC
  %3181 = and i64 %3178, 4294967295
  store i64 %3181, i64* %RDI, align 8, !tbaa !2428
  %3182 = load i32, i32* %EAX
  %3183 = zext i32 %3182 to i64
  %3184 = load i64, i64* %PC
  %3185 = add i64 %3184, 2
  store i64 %3185, i64* %PC
  %3186 = and i64 %3183, 4294967295
  store i64 %3186, i64* %RDX, align 8, !tbaa !2428
  %3187 = load i64, i64* %RBP
  %3188 = sub i64 %3187, 64
  %3189 = load i64, i64* %PC
  %3190 = add i64 %3189, 4
  store i64 %3190, i64* %PC
  %3191 = inttoptr i64 %3188 to i64*
  %3192 = load i64, i64* %3191
  store i64 %3192, i64* %RCX, align 8, !tbaa !2428
  %3193 = bitcast i32* %R8D to i64*
  %3194 = load i32, i32* %EAX
  %3195 = zext i32 %3194 to i64
  %3196 = load i64, i64* %PC
  %3197 = add i64 %3196, 3
  store i64 %3197, i64* %PC
  %3198 = and i64 %3195, 4294967295
  store i64 %3198, i64* %3193, align 8, !tbaa !2428
  %3199 = load i64, i64* %PC
  %3200 = add i64 %3199, 2887
  %3201 = load i64, i64* %PC
  %3202 = add i64 %3201, 5
  %3203 = load i64, i64* %PC
  %3204 = add i64 %3203, 5
  store i64 %3204, i64* %PC
  %3205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3206 = load i64, i64* %3205, align 8, !tbaa !2428
  %3207 = add i64 %3206, -8
  %3208 = inttoptr i64 %3207 to i64*
  store i64 %3202, i64* %3208
  store i64 %3207, i64* %3205, align 8, !tbaa !2428
  %3209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3200, i64* %3209, align 8, !tbaa !2428
  %3210 = load i64, i64* %PC
  %3211 = call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* %0, i64 %3210, %struct.Memory* %MEMORY.7)
  %3212 = load i64, i64* %RBP
  %3213 = sub i64 %3212, 44
  %3214 = load i64, i64* %PC
  %3215 = add i64 %3214, 3
  store i64 %3215, i64* %PC
  %3216 = inttoptr i64 %3213 to i32*
  %3217 = load i32, i32* %3216
  %3218 = zext i32 %3217 to i64
  store i64 %3218, i64* %RAX, align 8, !tbaa !2428
  %3219 = load i64, i64* %RAX
  %3220 = load i64, i64* %PC
  %3221 = add i64 %3220, 3
  store i64 %3221, i64* %PC
  %3222 = trunc i64 %3219 to i32
  %3223 = add i32 1, %3222
  %3224 = zext i32 %3223 to i64
  store i64 %3224, i64* %RAX, align 8, !tbaa !2428
  %3225 = icmp ult i32 %3223, %3222
  %3226 = icmp ult i32 %3223, 1
  %3227 = or i1 %3225, %3226
  %3228 = zext i1 %3227 to i8
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3228, i8* %3229, align 1, !tbaa !2432
  %3230 = and i32 %3223, 255
  %3231 = call i32 @llvm.ctpop.i32(i32 %3230) #16
  %3232 = trunc i32 %3231 to i8
  %3233 = and i8 %3232, 1
  %3234 = xor i8 %3233, 1
  %3235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3234, i8* %3235, align 1, !tbaa !2446
  %3236 = xor i64 1, %3219
  %3237 = trunc i64 %3236 to i32
  %3238 = xor i32 %3237, %3223
  %3239 = lshr i32 %3238, 4
  %3240 = trunc i32 %3239 to i8
  %3241 = and i8 %3240, 1
  %3242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3241, i8* %3242, align 1, !tbaa !2447
  %3243 = icmp eq i32 %3223, 0
  %3244 = zext i1 %3243 to i8
  %3245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3244, i8* %3245, align 1, !tbaa !2448
  %3246 = lshr i32 %3223, 31
  %3247 = trunc i32 %3246 to i8
  %3248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3247, i8* %3248, align 1, !tbaa !2449
  %3249 = lshr i32 %3222, 31
  %3250 = xor i32 %3246, %3249
  %3251 = add nuw nsw i32 %3250, %3246
  %3252 = icmp eq i32 %3251, 2
  %3253 = zext i1 %3252 to i8
  %3254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3253, i8* %3254, align 1, !tbaa !2450
  %3255 = load i64, i64* %RBP
  %3256 = sub i64 %3255, 44
  %3257 = load i32, i32* %EAX
  %3258 = zext i32 %3257 to i64
  %3259 = load i64, i64* %PC
  %3260 = add i64 %3259, 3
  store i64 %3260, i64* %PC
  %3261 = inttoptr i64 %3256 to i32*
  store i32 %3257, i32* %3261
  %3262 = load i64, i64* %PC
  %3263 = sub i64 %3262, 197
  %3264 = load i64, i64* %PC
  %3265 = add i64 %3264, 5
  store i64 %3265, i64* %PC
  %3266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3263, i64* %3266, align 8, !tbaa !2428
  br label %block_401c82

block_401e08:                                     ; preds = %block_401c40
  %3267 = sub i64 %225, 44
  %3268 = load i64, i64* %PC
  %3269 = add i64 %3268, 7
  store i64 %3269, i64* %PC
  %3270 = inttoptr i64 %3267 to i32*
  store i32 0, i32* %3270
  br label %block_401e0f

block_401e03:                                     ; preds = %block_401d58
  %3271 = add i64 %1016, 436
  %3272 = load i64, i64* %PC
  %3273 = add i64 %3272, 5
  store i64 %3273, i64* %PC
  %3274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3271, i64* %3274, align 8, !tbaa !2428
  br label %block_401fb7

block_401c82:                                     ; preds = %block_401ce6, %block_401c7b
  %MEMORY.8 = phi %struct.Memory* [ %2, %block_401c7b ], [ %3211, %block_401ce6 ]
  %3275 = load i64, i64* %RBP
  %3276 = sub i64 %3275, 44
  %3277 = load i64, i64* %PC
  %3278 = add i64 %3277, 3
  store i64 %3278, i64* %PC
  %3279 = inttoptr i64 %3276 to i32*
  %3280 = load i32, i32* %3279
  %3281 = zext i32 %3280 to i64
  store i64 %3281, i64* %RAX, align 8, !tbaa !2428
  %3282 = load i32, i32* %EAX
  %3283 = zext i32 %3282 to i64
  %3284 = load i64, i64* %RBP
  %3285 = sub i64 %3284, 56
  %3286 = load i64, i64* %PC
  %3287 = add i64 %3286, 3
  store i64 %3287, i64* %PC
  %3288 = inttoptr i64 %3285 to i32*
  %3289 = load i32, i32* %3288
  %3290 = sub i32 %3282, %3289
  %3291 = icmp ult i32 %3282, %3289
  %3292 = zext i1 %3291 to i8
  %3293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3292, i8* %3293, align 1, !tbaa !2432
  %3294 = and i32 %3290, 255
  %3295 = call i32 @llvm.ctpop.i32(i32 %3294) #16
  %3296 = trunc i32 %3295 to i8
  %3297 = and i8 %3296, 1
  %3298 = xor i8 %3297, 1
  %3299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3298, i8* %3299, align 1, !tbaa !2446
  %3300 = xor i32 %3289, %3282
  %3301 = xor i32 %3300, %3290
  %3302 = lshr i32 %3301, 4
  %3303 = trunc i32 %3302 to i8
  %3304 = and i8 %3303, 1
  %3305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3304, i8* %3305, align 1, !tbaa !2447
  %3306 = icmp eq i32 %3290, 0
  %3307 = zext i1 %3306 to i8
  %3308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3307, i8* %3308, align 1, !tbaa !2448
  %3309 = lshr i32 %3290, 31
  %3310 = trunc i32 %3309 to i8
  %3311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3310, i8* %3311, align 1, !tbaa !2449
  %3312 = lshr i32 %3282, 31
  %3313 = lshr i32 %3289, 31
  %3314 = xor i32 %3313, %3312
  %3315 = xor i32 %3309, %3312
  %3316 = add nuw nsw i32 %3315, %3314
  %3317 = icmp eq i32 %3316, 2
  %3318 = zext i1 %3317 to i8
  %3319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3318, i8* %3319, align 1, !tbaa !2450
  %3320 = load i64, i64* %PC
  %3321 = add i64 %3320, 196
  %3322 = load i64, i64* %PC
  %3323 = add i64 %3322, 6
  %3324 = load i64, i64* %PC
  %3325 = add i64 %3324, 6
  store i64 %3325, i64* %PC
  %3326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3327 = load i8, i8* %3326, align 1, !tbaa !2449
  %3328 = icmp ne i8 %3327, 0
  %3329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3330 = load i8, i8* %3329, align 1, !tbaa !2450
  %3331 = icmp ne i8 %3330, 0
  %3332 = xor i1 %3328, %3331
  %3333 = xor i1 %3332, true
  %3334 = zext i1 %3333 to i8
  store i8 %3334, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3336 = select i1 %3332, i64 %3323, i64 %3321
  store i64 %3336, i64* %3335, align 8, !tbaa !2428
  %3337 = load i8, i8* %BRANCH_TAKEN
  %3338 = icmp eq i8 %3337, 1
  br i1 %3338, label %block_401d4c, label %block_401c8e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4027c0_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4027c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %13 to %"class.std::bitset"*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %15 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %14, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %15 to %"class.std::bitset"*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %17 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %16, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %17 to %"class.std::bitset"*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %19 to %union.vec128_t*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %23 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %22, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %23 to %union.vec128_t*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %35 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %36 = bitcast %union.vec128_t* %XMM1 to i8*
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC
  %39 = bitcast i8* %35 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = getelementptr inbounds i8, i8* %35, i64 8
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = bitcast i8* %36 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = getelementptr inbounds i8, i8* %36, i64 8
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = xor i64 %45, %40
  %50 = xor i64 %48, %43
  %51 = trunc i64 %49 to i32
  %52 = lshr i64 %49, 32
  %53 = trunc i64 %52 to i32
  %54 = bitcast i8* %34 to i32*
  store i32 %51, i32* %54, align 1, !tbaa !2454
  %55 = getelementptr inbounds i8, i8* %34, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1, !tbaa !2454
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %34, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !2454
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %34, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !2454
  %64 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 8
  store i64 %66, i64* %PC
  %67 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 16) to float*)
  %68 = bitcast i8* %64 to float*
  store float %67, float* %68, align 1, !tbaa !2452
  %69 = getelementptr inbounds i8, i8* %64, i64 4
  %70 = bitcast i8* %69 to float*
  store float 0.000000e+00, float* %70, align 1, !tbaa !2452
  %71 = getelementptr inbounds i8, i8* %64, i64 8
  %72 = bitcast i8* %71 to float*
  store float 0.000000e+00, float* %72, align 1, !tbaa !2452
  %73 = getelementptr inbounds i8, i8* %64, i64 12
  %74 = bitcast i8* %73 to float*
  store float 0.000000e+00, float* %74, align 1, !tbaa !2452
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 4
  %77 = bitcast %union.vec128_t* %XMM0 to i8*
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 5
  store i64 %79, i64* %PC
  %80 = bitcast i8* %77 to <2 x float>*
  %81 = load <2 x float>, <2 x float>* %80, align 1
  %82 = extractelement <2 x float> %81, i32 0
  %83 = inttoptr i64 %76 to float*
  store float %82, float* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = bitcast %union.vec128_t* %XMM2 to i8*
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 5
  store i64 %88, i64* %PC
  %89 = bitcast i8* %86 to <2 x float>*
  %90 = load <2 x float>, <2 x float>* %89, align 1
  %91 = extractelement <2 x float> %90, i32 0
  %92 = inttoptr i64 %85 to float*
  store float %91, float* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 20
  %95 = bitcast %union.vec128_t* %XMM1 to i8*
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  %98 = bitcast i8* %95 to <2 x float>*
  %99 = load <2 x float>, <2 x float>* %98, align 1
  %100 = extractelement <2 x float> %99, i32 0
  %101 = inttoptr i64 %94 to float*
  store float %100, float* %101
  br label %block_4027de

block_4027de:                                     ; preds = %block_4027f6, %block_4027c0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4027c0 ], [ %179, %block_4027f6 ]
  %102 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %103 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %104 = bitcast %union.vec128_t* %XMM0 to i8*
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 3
  store i64 %106, i64* %PC
  %107 = bitcast i8* %103 to i64*
  %108 = load i64, i64* %107, align 1
  %109 = getelementptr inbounds i8, i8* %103, i64 8
  %110 = bitcast i8* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = bitcast i8* %104 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = getelementptr inbounds i8, i8* %104, i64 8
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = xor i64 %113, %108
  %118 = xor i64 %116, %111
  %119 = trunc i64 %117 to i32
  %120 = lshr i64 %117, 32
  %121 = trunc i64 %120 to i32
  %122 = bitcast i8* %102 to i32*
  store i32 %119, i32* %122, align 1, !tbaa !2454
  %123 = getelementptr inbounds i8, i8* %102, i64 4
  %124 = bitcast i8* %123 to i32*
  store i32 %121, i32* %124, align 1, !tbaa !2454
  %125 = trunc i64 %118 to i32
  %126 = getelementptr inbounds i8, i8* %102, i64 8
  %127 = bitcast i8* %126 to i32*
  store i32 %125, i32* %127, align 1, !tbaa !2454
  %128 = lshr i64 %118, 32
  %129 = trunc i64 %128 to i32
  %130 = getelementptr inbounds i8, i8* %102, i64 12
  %131 = bitcast i8* %130 to i32*
  store i32 %129, i32* %131, align 1, !tbaa !2454
  %132 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %133 = load i64, i64* %RBP
  %134 = sub i64 %133, 20
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %134 to float*
  %138 = load float, float* %137
  %139 = fpext float %138 to double
  %140 = bitcast i8* %132 to double*
  store double %139, double* %140, align 1, !tbaa !2455
  %141 = bitcast %union.vec128_t* %XMM1 to i8*
  %142 = bitcast %union.vec128_t* %XMM0 to i8*
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 4
  store i64 %144, i64* %PC
  %145 = bitcast i8* %141 to double*
  %146 = load double, double* %145, align 1
  %147 = bitcast i8* %142 to double*
  %148 = load double, double* %147, align 1
  %149 = fcmp uno double %146, %148
  br i1 %149, label %150, label %162

; <label>:150:                                    ; preds = %block_4027de
  %151 = fadd double %146, %148
  %152 = bitcast double %151 to i64
  %153 = and i64 %152, 9221120237041090560
  %154 = icmp eq i64 %153, 9218868437227405312
  %155 = and i64 %152, 2251799813685247
  %156 = icmp ne i64 %155, 0
  %157 = and i1 %154, %156
  br i1 %157, label %158, label %168

; <label>:158:                                    ; preds = %150
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %160 = load i64, i64* %159, align 8, !tbaa !2428
  %161 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %160, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:162:                                    ; preds = %block_4027de
  %163 = fcmp ogt double %146, %148
  br i1 %163, label %168, label %164

; <label>:164:                                    ; preds = %162
  %165 = fcmp olt double %146, %148
  br i1 %165, label %168, label %166

; <label>:166:                                    ; preds = %164
  %167 = fcmp oeq double %146, %148
  br i1 %167, label %168, label %175

; <label>:168:                                    ; preds = %166, %164, %162, %150
  %169 = phi i8 [ 0, %162 ], [ 0, %164 ], [ 1, %166 ], [ 1, %150 ]
  %170 = phi i8 [ 0, %162 ], [ 0, %164 ], [ 0, %166 ], [ 1, %150 ]
  %171 = phi i8 [ 0, %162 ], [ 1, %164 ], [ 0, %166 ], [ 1, %150 ]
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %169, i8* %172, align 1, !tbaa !2451
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %170, i8* %173, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %171, i8* %174, align 1, !tbaa !2451
  br label %175

; <label>:175:                                    ; preds = %168, %166
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %178, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %158, %175
  %179 = phi %struct.Memory* [ %161, %158 ], [ %MEMORY.0, %175 ]
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 92
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 6
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 6
  store i64 %185, i64* %PC
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %187 = load i8, i8* %186, align 1, !tbaa !2448
  %188 = icmp eq i8 %187, 0
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %191 = select i1 %188, i64 %181, i64 %183
  store i64 %191, i64* %190, align 8, !tbaa !2428
  %192 = load i8, i8* %BRANCH_TAKEN
  %193 = icmp eq i8 %192, 1
  br i1 %193, label %block_402846, label %block_4027f0

block_4027f6:                                     ; preds = %block_4027f0
  %194 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 8
  store i64 %196, i64* %PC
  %197 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 80) to double*)
  %198 = bitcast i8* %194 to double*
  store double %197, double* %198, align 1, !tbaa !2455
  %199 = getelementptr inbounds i8, i8* %194, i64 8
  %200 = bitcast i8* %199 to double*
  store double 0.000000e+00, double* %200, align 1, !tbaa !2455
  %201 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 8
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to float*
  %207 = load float, float* %206
  %208 = fpext float %207 to double
  %209 = bitcast i8* %201 to double*
  store double %208, double* %209, align 1, !tbaa !2455
  %210 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %211 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %212 = bitcast %union.vec128_t* %XMM0 to i8*
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = bitcast i8* %211 to double*
  %216 = load double, double* %215, align 1
  %217 = getelementptr inbounds i8, i8* %211, i64 8
  %218 = bitcast i8* %217 to i64*
  %219 = load i64, i64* %218, align 1
  %220 = bitcast i8* %212 to double*
  %221 = load double, double* %220, align 1
  %222 = fsub double %216, %221
  %223 = bitcast i8* %210 to double*
  store double %222, double* %223, align 1, !tbaa !2455
  %224 = getelementptr inbounds i8, i8* %210, i64 8
  %225 = bitcast i8* %224 to i64*
  store i64 %219, i64* %225, align 1, !tbaa !2455
  %226 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %227 = bitcast %union.vec128_t* %XMM1 to i8*
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = bitcast i8* %226 to <2 x i32>*
  %231 = load <2 x i32>, <2 x i32>* %230, align 1
  %232 = getelementptr inbounds i8, i8* %226, i64 8
  %233 = bitcast i8* %232 to <2 x i32>*
  %234 = load <2 x i32>, <2 x i32>* %233, align 1
  %235 = bitcast i8* %227 to double*
  %236 = load double, double* %235, align 1
  %237 = fptrunc double %236 to float
  %238 = bitcast i8* %226 to float*
  store float %237, float* %238, align 1, !tbaa !2452
  %239 = extractelement <2 x i32> %231, i32 1
  %240 = getelementptr inbounds i8, i8* %226, i64 4
  %241 = bitcast i8* %240 to i32*
  store i32 %239, i32* %241, align 1, !tbaa !2452
  %242 = extractelement <2 x i32> %234, i32 0
  %243 = bitcast i8* %232 to i32*
  store i32 %242, i32* %243, align 1, !tbaa !2452
  %244 = extractelement <2 x i32> %234, i32 1
  %245 = getelementptr inbounds i8, i8* %226, i64 12
  %246 = bitcast i8* %245 to i32*
  store i32 %244, i32* %246, align 1, !tbaa !2452
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 12
  %249 = bitcast %union.vec128_t* %XMM1 to i8*
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 5
  store i64 %251, i64* %PC
  %252 = bitcast i8* %249 to <2 x float>*
  %253 = load <2 x float>, <2 x float>* %252, align 1
  %254 = extractelement <2 x float> %253, i32 0
  %255 = inttoptr i64 %248 to float*
  store float %254, float* %255
  %256 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 12
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 5
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to float*
  %262 = load float, float* %261
  %263 = bitcast i8* %256 to float*
  store float %262, float* %263, align 1, !tbaa !2452
  %264 = getelementptr inbounds i8, i8* %256, i64 4
  %265 = bitcast i8* %264 to float*
  store float 0.000000e+00, float* %265, align 1, !tbaa !2452
  %266 = getelementptr inbounds i8, i8* %256, i64 8
  %267 = bitcast i8* %266 to float*
  store float 0.000000e+00, float* %267, align 1, !tbaa !2452
  %268 = getelementptr inbounds i8, i8* %256, i64 12
  %269 = bitcast i8* %268 to float*
  store float 0.000000e+00, float* %269, align 1, !tbaa !2452
  %270 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %271 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 12
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  store i64 %275, i64* %PC
  %276 = bitcast i8* %271 to <2 x float>*
  %277 = load <2 x float>, <2 x float>* %276, align 1
  %278 = getelementptr inbounds i8, i8* %271, i64 8
  %279 = bitcast i8* %278 to <2 x i32>*
  %280 = load <2 x i32>, <2 x i32>* %279, align 1
  %281 = inttoptr i64 %273 to float*
  %282 = load float, float* %281
  %283 = extractelement <2 x float> %277, i32 0
  %284 = fadd float %283, %282
  %285 = bitcast i8* %270 to float*
  store float %284, float* %285, align 1, !tbaa !2452
  %286 = bitcast <2 x float> %277 to <2 x i32>
  %287 = extractelement <2 x i32> %286, i32 1
  %288 = getelementptr inbounds i8, i8* %270, i64 4
  %289 = bitcast i8* %288 to i32*
  store i32 %287, i32* %289, align 1, !tbaa !2452
  %290 = extractelement <2 x i32> %280, i32 0
  %291 = getelementptr inbounds i8, i8* %270, i64 8
  %292 = bitcast i8* %291 to i32*
  store i32 %290, i32* %292, align 1, !tbaa !2452
  %293 = extractelement <2 x i32> %280, i32 1
  %294 = getelementptr inbounds i8, i8* %270, i64 12
  %295 = bitcast i8* %294 to i32*
  store i32 %293, i32* %295, align 1, !tbaa !2452
  %296 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %297 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 12
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 5
  store i64 %301, i64* %PC
  %302 = bitcast i8* %297 to <2 x float>*
  %303 = load <2 x float>, <2 x float>* %302, align 1
  %304 = getelementptr inbounds i8, i8* %297, i64 8
  %305 = bitcast i8* %304 to <2 x i32>*
  %306 = load <2 x i32>, <2 x i32>* %305, align 1
  %307 = inttoptr i64 %299 to float*
  %308 = load float, float* %307
  %309 = extractelement <2 x float> %303, i32 0
  %310 = fadd float %309, %308
  %311 = bitcast i8* %296 to float*
  store float %310, float* %311, align 1, !tbaa !2452
  %312 = bitcast <2 x float> %303 to <2 x i32>
  %313 = extractelement <2 x i32> %312, i32 1
  %314 = getelementptr inbounds i8, i8* %296, i64 4
  %315 = bitcast i8* %314 to i32*
  store i32 %313, i32* %315, align 1, !tbaa !2452
  %316 = extractelement <2 x i32> %306, i32 0
  %317 = getelementptr inbounds i8, i8* %296, i64 8
  %318 = bitcast i8* %317 to i32*
  store i32 %316, i32* %318, align 1, !tbaa !2452
  %319 = extractelement <2 x i32> %306, i32 1
  %320 = getelementptr inbounds i8, i8* %296, i64 12
  %321 = bitcast i8* %320 to i32*
  store i32 %319, i32* %321, align 1, !tbaa !2452
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 16
  %324 = bitcast %union.vec128_t* %XMM1 to i8*
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = bitcast i8* %324 to <2 x float>*
  %328 = load <2 x float>, <2 x float>* %327, align 1
  %329 = extractelement <2 x float> %328, i32 0
  %330 = inttoptr i64 %323 to float*
  store float %329, float* %330
  %331 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 16
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = inttoptr i64 %333 to float*
  %337 = load float, float* %336
  %338 = fpext float %337 to double
  %339 = bitcast i8* %331 to double*
  store double %338, double* %339, align 1, !tbaa !2455
  %340 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %341 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %342 = bitcast %union.vec128_t* %XMM0 to i8*
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 4
  store i64 %344, i64* %PC
  %345 = bitcast i8* %341 to double*
  %346 = load double, double* %345, align 1
  %347 = getelementptr inbounds i8, i8* %341, i64 8
  %348 = bitcast i8* %347 to i64*
  %349 = load i64, i64* %348, align 1
  %350 = bitcast i8* %342 to double*
  %351 = load double, double* %350, align 1
  %352 = fsub double %346, %351
  %353 = bitcast i8* %340 to double*
  store double %352, double* %353, align 1, !tbaa !2455
  %354 = getelementptr inbounds i8, i8* %340, i64 8
  %355 = bitcast i8* %354 to i64*
  store i64 %349, i64* %355, align 1, !tbaa !2455
  %356 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 7
  store i64 %358, i64* %PC
  %359 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %360 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %361 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %362 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %363 = bitcast i8* %356 to float*
  store float %359, float* %363, align 1, !tbaa !2452
  %364 = getelementptr inbounds i8, i8* %356, i64 4
  %365 = bitcast i8* %364 to float*
  store float %360, float* %365, align 1, !tbaa !2452
  %366 = getelementptr inbounds i8, i8* %356, i64 8
  %367 = bitcast i8* %366 to float*
  store float %361, float* %367, align 1, !tbaa !2452
  %368 = getelementptr inbounds i8, i8* %356, i64 12
  %369 = bitcast i8* %368 to float*
  store float %362, float* %369, align 1, !tbaa !2452
  %370 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %371 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %372 = bitcast %union.vec128_t* %XMM0 to i8*
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 4
  store i64 %374, i64* %PC
  %375 = bitcast i8* %371 to i64*
  %376 = load i64, i64* %375, align 1
  %377 = getelementptr inbounds i8, i8* %371, i64 8
  %378 = bitcast i8* %377 to i64*
  %379 = load i64, i64* %378, align 1
  %380 = bitcast i8* %372 to i64*
  %381 = load i64, i64* %380, align 1
  %382 = getelementptr inbounds i8, i8* %372, i64 8
  %383 = bitcast i8* %382 to i64*
  %384 = load i64, i64* %383, align 1
  %385 = and i64 %381, %376
  %386 = and i64 %384, %379
  %387 = trunc i64 %385 to i32
  %388 = lshr i64 %385, 32
  %389 = trunc i64 %388 to i32
  %390 = bitcast i8* %370 to i32*
  store i32 %387, i32* %390, align 1, !tbaa !2454
  %391 = getelementptr inbounds i8, i8* %370, i64 4
  %392 = bitcast i8* %391 to i32*
  store i32 %389, i32* %392, align 1, !tbaa !2454
  %393 = trunc i64 %386 to i32
  %394 = getelementptr inbounds i8, i8* %370, i64 8
  %395 = bitcast i8* %394 to i32*
  store i32 %393, i32* %395, align 1, !tbaa !2454
  %396 = lshr i64 %386, 32
  %397 = trunc i64 %396 to i32
  %398 = getelementptr inbounds i8, i8* %370, i64 12
  %399 = bitcast i8* %398 to i32*
  store i32 %397, i32* %399, align 1, !tbaa !2454
  %400 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %401 = bitcast %union.vec128_t* %XMM1 to i8*
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = bitcast i8* %400 to <2 x i32>*
  %405 = load <2 x i32>, <2 x i32>* %404, align 1
  %406 = getelementptr inbounds i8, i8* %400, i64 8
  %407 = bitcast i8* %406 to <2 x i32>*
  %408 = load <2 x i32>, <2 x i32>* %407, align 1
  %409 = bitcast i8* %401 to double*
  %410 = load double, double* %409, align 1
  %411 = fptrunc double %410 to float
  %412 = bitcast i8* %400 to float*
  store float %411, float* %412, align 1, !tbaa !2452
  %413 = extractelement <2 x i32> %405, i32 1
  %414 = getelementptr inbounds i8, i8* %400, i64 4
  %415 = bitcast i8* %414 to i32*
  store i32 %413, i32* %415, align 1, !tbaa !2452
  %416 = extractelement <2 x i32> %408, i32 0
  %417 = bitcast i8* %406 to i32*
  store i32 %416, i32* %417, align 1, !tbaa !2452
  %418 = extractelement <2 x i32> %408, i32 1
  %419 = getelementptr inbounds i8, i8* %400, i64 12
  %420 = bitcast i8* %419 to i32*
  store i32 %418, i32* %420, align 1, !tbaa !2452
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 20
  %423 = bitcast %union.vec128_t* %XMM0 to i8*
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 5
  store i64 %425, i64* %PC
  %426 = bitcast i8* %423 to <2 x float>*
  %427 = load <2 x float>, <2 x float>* %426, align 1
  %428 = extractelement <2 x float> %427, i32 0
  %429 = inttoptr i64 %422 to float*
  store float %428, float* %429
  %430 = load i64, i64* %PC
  %431 = sub i64 %430, 99
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  store i64 %433, i64* %PC
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %431, i64* %434, align 8, !tbaa !2428
  br label %block_4027de

block_4027f0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 86
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 6
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 6
  store i64 %440, i64* %PC
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %442 = load i8, i8* %441, align 1, !tbaa !2446
  store i8 %442, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %444 = icmp ne i8 %442, 0
  %445 = select i1 %444, i64 %436, i64 %438
  store i64 %445, i64* %443, align 8, !tbaa !2428
  %446 = load i8, i8* %BRANCH_TAKEN
  %447 = icmp eq i8 %446, 1
  br i1 %447, label %block_402846, label %block_4027f6

block_402846:                                     ; preds = %block_4027f0, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.1 = phi %struct.Memory* [ %179, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %179, %block_4027f0 ]
  %448 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %449 = load i64, i64* %RBP
  %450 = sub i64 %449, 20
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 5
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to float*
  %454 = load float, float* %453
  %455 = fpext float %454 to double
  %456 = bitcast i8* %448 to double*
  store double %455, double* %456, align 1, !tbaa !2455
  %457 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %458 = load i64, i64* %RBP
  %459 = sub i64 %458, 4
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 5
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %459 to float*
  %463 = load float, float* %462
  %464 = fpext float %463 to double
  %465 = bitcast i8* %457 to double*
  store double %464, double* %465, align 1, !tbaa !2455
  %466 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 7
  store i64 %468, i64* %PC
  %469 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %470 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %471 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %472 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %473 = bitcast i8* %466 to float*
  store float %469, float* %473, align 1, !tbaa !2452
  %474 = getelementptr inbounds i8, i8* %466, i64 4
  %475 = bitcast i8* %474 to float*
  store float %470, float* %475, align 1, !tbaa !2452
  %476 = getelementptr inbounds i8, i8* %466, i64 8
  %477 = bitcast i8* %476 to float*
  store float %471, float* %477, align 1, !tbaa !2452
  %478 = getelementptr inbounds i8, i8* %466, i64 12
  %479 = bitcast i8* %478 to float*
  store float %472, float* %479, align 1, !tbaa !2452
  %480 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %481 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %482 = bitcast %union.vec128_t* %XMM2 to i8*
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 4
  store i64 %484, i64* %PC
  %485 = bitcast i8* %481 to i64*
  %486 = load i64, i64* %485, align 1
  %487 = getelementptr inbounds i8, i8* %481, i64 8
  %488 = bitcast i8* %487 to i64*
  %489 = load i64, i64* %488, align 1
  %490 = bitcast i8* %482 to i64*
  %491 = load i64, i64* %490, align 1
  %492 = getelementptr inbounds i8, i8* %482, i64 8
  %493 = bitcast i8* %492 to i64*
  %494 = load i64, i64* %493, align 1
  %495 = and i64 %491, %486
  %496 = and i64 %494, %489
  %497 = trunc i64 %495 to i32
  %498 = lshr i64 %495, 32
  %499 = trunc i64 %498 to i32
  %500 = bitcast i8* %480 to i32*
  store i32 %497, i32* %500, align 1, !tbaa !2454
  %501 = getelementptr inbounds i8, i8* %480, i64 4
  %502 = bitcast i8* %501 to i32*
  store i32 %499, i32* %502, align 1, !tbaa !2454
  %503 = trunc i64 %496 to i32
  %504 = getelementptr inbounds i8, i8* %480, i64 8
  %505 = bitcast i8* %504 to i32*
  store i32 %503, i32* %505, align 1, !tbaa !2454
  %506 = lshr i64 %496, 32
  %507 = trunc i64 %506 to i32
  %508 = getelementptr inbounds i8, i8* %480, i64 12
  %509 = bitcast i8* %508 to i32*
  store i32 %507, i32* %509, align 1, !tbaa !2454
  %510 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %511 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %512 = bitcast %union.vec128_t* %XMM1 to i8*
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 4
  store i64 %514, i64* %PC
  %515 = bitcast i8* %511 to double*
  %516 = load double, double* %515, align 1
  %517 = getelementptr inbounds i8, i8* %511, i64 8
  %518 = bitcast i8* %517 to i64*
  %519 = load i64, i64* %518, align 1
  %520 = bitcast i8* %512 to double*
  %521 = load double, double* %520, align 1
  %522 = fmul double %516, %521
  %523 = bitcast i8* %510 to double*
  store double %522, double* %523, align 1, !tbaa !2455
  %524 = getelementptr inbounds i8, i8* %510, i64 8
  %525 = bitcast i8* %524 to i64*
  store i64 %519, i64* %525, align 1, !tbaa !2455
  %526 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %527 = bitcast %union.vec128_t* %XMM0 to i8*
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 4
  store i64 %529, i64* %PC
  %530 = bitcast i8* %526 to <2 x i32>*
  %531 = load <2 x i32>, <2 x i32>* %530, align 1
  %532 = getelementptr inbounds i8, i8* %526, i64 8
  %533 = bitcast i8* %532 to <2 x i32>*
  %534 = load <2 x i32>, <2 x i32>* %533, align 1
  %535 = bitcast i8* %527 to double*
  %536 = load double, double* %535, align 1
  %537 = fptrunc double %536 to float
  %538 = bitcast i8* %526 to float*
  store float %537, float* %538, align 1, !tbaa !2452
  %539 = extractelement <2 x i32> %531, i32 1
  %540 = getelementptr inbounds i8, i8* %526, i64 4
  %541 = bitcast i8* %540 to i32*
  store i32 %539, i32* %541, align 1, !tbaa !2452
  %542 = extractelement <2 x i32> %534, i32 0
  %543 = bitcast i8* %532 to i32*
  store i32 %542, i32* %543, align 1, !tbaa !2452
  %544 = extractelement <2 x i32> %534, i32 1
  %545 = getelementptr inbounds i8, i8* %526, i64 12
  %546 = bitcast i8* %545 to i32*
  store i32 %544, i32* %546, align 1, !tbaa !2452
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 1
  store i64 %548, i64* %PC
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %550 = load i64, i64* %549, align 8, !tbaa !2428
  %551 = add i64 %550, 8
  %552 = inttoptr i64 %550 to i64*
  %553 = load i64, i64* %552
  store i64 %553, i64* %RBP, align 8, !tbaa !2428
  store i64 %551, i64* %549, align 8, !tbaa !2428
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 1
  store i64 %555, i64* %PC
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %558 = load i64, i64* %557, align 8, !tbaa !2428
  %559 = inttoptr i64 %558 to i64*
  %560 = load i64, i64* %559
  store i64 %560, i64* %556, align 8, !tbaa !2428
  %561 = add i64 %558, 8
  store i64 %561, i64* %557, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400570_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400640_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400640:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 17
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %R8D = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 19
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R9D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 21
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %R10D = bitcast %union.anon* %30 to i32*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 1
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RAX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 5
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RCX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 7
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RDX = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 9
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RSI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RDI = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 13
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RSP = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 15
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %RBP = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 17
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R8 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 19
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %R9 = bitcast %union.anon* %57 to i64*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %59 to %"class.std::bitset"*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %65 to %"class.std::bitset"*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %67 to %"class.std::bitset"*
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %69 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %68, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %69 to %union.vec128_t*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %71 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %70, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %71 to %union.vec128_t*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %73 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %72, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %73 to %union.vec128_t*
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %75 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %74, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %75 to %union.vec128_t*
  %76 = load i64, i64* %RBP
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 1
  store i64 %78, i64* %PC
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %80 = load i64, i64* %79, align 8, !tbaa !2428
  %81 = add i64 %80, -8
  %82 = inttoptr i64 %81 to i64*
  store i64 %76, i64* %82
  store i64 %81, i64* %79, align 8, !tbaa !2428
  %83 = load i64, i64* %RSP
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 3
  store i64 %85, i64* %PC
  store i64 %83, i64* %RBP, align 8, !tbaa !2428
  %86 = load i64, i64* %RSP
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = sub i64 %86, 1008
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  %90 = icmp ult i64 %86, 1008
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %91, i8* %92, align 1, !tbaa !2432
  %93 = trunc i64 %89 to i32
  %94 = and i32 %93, 255
  %95 = call i32 @llvm.ctpop.i32(i32 %94) #16
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %98, i8* %99, align 1, !tbaa !2446
  %100 = xor i64 1008, %86
  %101 = xor i64 %100, %89
  %102 = lshr i64 %101, 4
  %103 = trunc i64 %102 to i8
  %104 = and i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = icmp eq i64 %89, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2448
  %109 = lshr i64 %89, 63
  %110 = trunc i64 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %110, i8* %111, align 1, !tbaa !2449
  %112 = lshr i64 %86, 63
  %113 = xor i64 %109, %112
  %114 = add nuw nsw i64 %113, %112
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %116, i8* %117, align 1, !tbaa !2450
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 10
  store i64 %119, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 8
  store i64 %122, i64* %PC
  %123 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 8) to float*)
  %124 = bitcast i8* %120 to float*
  store float %123, float* %124, align 1, !tbaa !2452
  %125 = getelementptr inbounds i8, i8* %120, i64 4
  %126 = bitcast i8* %125 to float*
  store float 0.000000e+00, float* %126, align 1, !tbaa !2452
  %127 = getelementptr inbounds i8, i8* %120, i64 8
  %128 = bitcast i8* %127 to float*
  store float 0.000000e+00, float* %128, align 1, !tbaa !2452
  %129 = getelementptr inbounds i8, i8* %120, i64 12
  %130 = bitcast i8* %129 to float*
  store float 0.000000e+00, float* %130, align 1, !tbaa !2452
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 10
  store i64 %132, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 10
  store i64 %134, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  %135 = load i64, i64* %RDX
  %136 = load i32, i32* %EDX
  %137 = zext i32 %136 to i64
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 2
  store i64 %139, i64* %PC
  %140 = xor i64 %137, %135
  %141 = trunc i64 %140 to i32
  %142 = and i64 %140, 4294967295
  store i64 %142, i64* %RDX, align 8, !tbaa !2428
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %143, align 1, !tbaa !2432
  %144 = and i32 %141, 255
  %145 = call i32 @llvm.ctpop.i32(i32 %144) #16
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %148, i8* %149, align 1, !tbaa !2446
  %150 = icmp eq i32 %141, 0
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %151, i8* %152, align 1, !tbaa !2448
  %153 = lshr i32 %141, 31
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %154, i8* %155, align 1, !tbaa !2449
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %156, align 1, !tbaa !2450
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %157, align 1, !tbaa !2447
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  store i64 720, i64* %RDI, align 8, !tbaa !2428
  %160 = bitcast i32* %R8D to i64*
  %161 = load i32, i32* %EDI
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  %165 = and i64 %162, 4294967295
  store i64 %165, i64* %160, align 8, !tbaa !2428
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 832
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 7
  store i64 %169, i64* %PC
  store i64 %167, i64* %R9, align 8, !tbaa !2428
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 4
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 7
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i32*
  store i32 0, i32* %174
  %175 = load i64, i64* %R9
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 3
  store i64 %177, i64* %PC
  store i64 %175, i64* %RDI, align 8, !tbaa !2428
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 840
  %180 = load i64, i64* %RSI
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 7
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %179 to i64*
  store i64 %180, i64* %183
  %184 = load i32, i32* %EDX
  %185 = zext i32 %184 to i64
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 2
  store i64 %187, i64* %PC
  %188 = and i64 %185, 4294967295
  store i64 %188, i64* %RSI, align 8, !tbaa !2428
  %189 = load i64, i64* %R8
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 3
  store i64 %191, i64* %PC
  store i64 %189, i64* %RDX, align 8, !tbaa !2428
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 848
  %194 = load i64, i64* %RCX
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 7
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %193 to i64*
  store i64 %194, i64* %197
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 852
  %200 = bitcast %union.vec128_t* %XMM0 to i8*
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 8
  store i64 %202, i64* %PC
  %203 = bitcast i8* %200 to <2 x float>*
  %204 = load <2 x float>, <2 x float>* %203, align 1
  %205 = extractelement <2 x float> %204, i32 0
  %206 = inttoptr i64 %199 to float*
  store float %205, float* %206
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 864
  %209 = load i64, i64* %RAX
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212
  %213 = load i64, i64* %PC
  %214 = sub i64 %213, 462
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 5
  store i64 %218, i64* %PC
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %220 = load i64, i64* %219, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %216, i64* %222
  store i64 %221, i64* %219, align 8, !tbaa !2428
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %223, align 8, !tbaa !2428
  %224 = load i64, i64* %PC
  %225 = call %struct.Memory* @ext_653148_memset(%struct.State* %0, i64 %224, %struct.Memory* %2)
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 832
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i8*
  store i8 32, i8* %230
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 848
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 7
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = load i64, i64* %RBP
  %238 = sub i64 %237, 96
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %238 to i64*
  store i64 %239, i64* %242
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 864
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i64*
  %248 = load i64, i64* %247
  store i64 %248, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* %RBP
  %250 = sub i64 %249, 104
  %251 = load i64, i64* %RCX
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %254
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 11
  store i64 %256, i64* %PC
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 11
  store i64 %258, i64* %PC
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %259 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 852
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 8
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to float*
  %265 = load float, float* %264
  %266 = bitcast i8* %259 to float*
  store float %265, float* %266, align 1, !tbaa !2452
  %267 = getelementptr inbounds i8, i8* %259, i64 4
  %268 = bitcast i8* %267 to float*
  store float 0.000000e+00, float* %268, align 1, !tbaa !2452
  %269 = getelementptr inbounds i8, i8* %259, i64 8
  %270 = bitcast i8* %269 to float*
  store float 0.000000e+00, float* %270, align 1, !tbaa !2452
  %271 = getelementptr inbounds i8, i8* %259, i64 12
  %272 = bitcast i8* %271 to float*
  store float 0.000000e+00, float* %272, align 1, !tbaa !2452
  %273 = load i64, i64* %RBP
  %274 = sub i64 %273, 8
  %275 = bitcast %union.vec128_t* %XMM0 to i8*
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = bitcast i8* %275 to <2 x float>*
  %279 = load <2 x float>, <2 x float>* %278, align 1
  %280 = extractelement <2 x float> %279, i32 0
  %281 = inttoptr i64 %274 to float*
  store float %280, float* %281
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 11
  store i64 %283, i64* %PC
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 8
  store i64 %285, i64* %PC
  %286 = load i64, i64* @stderr
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = load i64, i64* %RBP
  %288 = sub i64 %287, 840
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 7
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RSI, align 8, !tbaa !2428
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 2
  store i64 %294, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %295 = load i64, i64* %PC
  %296 = sub i64 %295, 543
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 5
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 5
  store i64 %300, i64* %PC
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %302 = load i64, i64* %301, align 8, !tbaa !2428
  %303 = add i64 %302, -8
  %304 = inttoptr i64 %303 to i64*
  store i64 %298, i64* %304
  store i64 %303, i64* %301, align 8, !tbaa !2428
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %296, i64* %305, align 8, !tbaa !2428
  %306 = load i64, i64* %PC
  %307 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %306, %struct.Memory* %225)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 10
  store i64 %309, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 8
  store i64 %311, i64* %PC
  %312 = load i64, i64* @stderr
  store i64 %312, i64* %RDI, align 8, !tbaa !2428
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 868
  %315 = load i32, i32* %EAX
  %316 = zext i32 %315 to i64
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 6
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %314 to i32*
  store i32 %315, i32* %319
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 2
  store i64 %321, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %322 = load i64, i64* %PC
  %323 = sub i64 %322, 574
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 5
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 5
  store i64 %327, i64* %PC
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %329 = load i64, i64* %328, align 8, !tbaa !2428
  %330 = add i64 %329, -8
  %331 = inttoptr i64 %330 to i64*
  store i64 %325, i64* %331
  store i64 %330, i64* %328, align 8, !tbaa !2428
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %323, i64* %332, align 8, !tbaa !2428
  %333 = load i64, i64* %PC
  %334 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %333, %struct.Memory* %307)
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 10
  store i64 %336, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 8
  store i64 %338, i64* %PC
  %339 = load i64, i64* @stderr
  store i64 %339, i64* %RDI, align 8, !tbaa !2428
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 872
  %342 = load i32, i32* %EAX
  %343 = zext i32 %342 to i64
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 6
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %341 to i32*
  store i32 %342, i32* %346
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 2
  store i64 %348, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %349 = load i64, i64* %PC
  %350 = sub i64 %349, 605
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 5
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  store i64 %354, i64* %PC
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %356 = load i64, i64* %355, align 8, !tbaa !2428
  %357 = add i64 %356, -8
  %358 = inttoptr i64 %357 to i64*
  store i64 %352, i64* %358
  store i64 %357, i64* %355, align 8, !tbaa !2428
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %350, i64* %359, align 8, !tbaa !2428
  %360 = load i64, i64* %PC
  %361 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %360, %struct.Memory* %334)
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 10
  store i64 %363, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 8
  store i64 %365, i64* %PC
  %366 = load i64, i64* @stderr
  store i64 %366, i64* %RDI, align 8, !tbaa !2428
  %367 = load i64, i64* %RBP
  %368 = sub i64 %367, 96
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %RDX, align 8, !tbaa !2428
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 876
  %375 = load i32, i32* %EAX
  %376 = zext i32 %375 to i64
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 6
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %379
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 2
  store i64 %381, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %382 = load i64, i64* %PC
  %383 = sub i64 %382, 640
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %389 = load i64, i64* %388, align 8, !tbaa !2428
  %390 = add i64 %389, -8
  %391 = inttoptr i64 %390 to i64*
  store i64 %385, i64* %391
  store i64 %390, i64* %388, align 8, !tbaa !2428
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %383, i64* %392, align 8, !tbaa !2428
  %393 = load i64, i64* %PC
  %394 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %393, %struct.Memory* %361)
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 10
  store i64 %396, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 8
  store i64 %398, i64* %PC
  %399 = load i64, i64* @stderr
  store i64 %399, i64* %RDI, align 8, !tbaa !2428
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 104
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i64*
  %405 = load i64, i64* %404
  store i64 %405, i64* %RDX, align 8, !tbaa !2428
  %406 = load i64, i64* %RBP
  %407 = sub i64 %406, 880
  %408 = load i32, i32* %EAX
  %409 = zext i32 %408 to i64
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 6
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %407 to i32*
  store i32 %408, i32* %412
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 2
  store i64 %414, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %415 = load i64, i64* %PC
  %416 = sub i64 %415, 675
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 5
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 5
  store i64 %420, i64* %PC
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %422 = load i64, i64* %421, align 8, !tbaa !2428
  %423 = add i64 %422, -8
  %424 = inttoptr i64 %423 to i64*
  store i64 %418, i64* %424
  store i64 %423, i64* %421, align 8, !tbaa !2428
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %416, i64* %425, align 8, !tbaa !2428
  %426 = load i64, i64* %PC
  %427 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %426, %struct.Memory* %394)
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 10
  store i64 %429, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 10
  store i64 %431, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 20
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 4
  store i64 %435, i64* %PC
  store i64 %433, i64* %R8, align 8, !tbaa !2428
  %436 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 8
  store i64 %438, i64* %PC
  %439 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to double*)
  %440 = bitcast i8* %436 to double*
  store double %439, double* %440, align 1, !tbaa !2455
  %441 = getelementptr inbounds i8, i8* %436, i64 8
  %442 = bitcast i8* %441 to double*
  store double 0.000000e+00, double* %442, align 1, !tbaa !2455
  %443 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 8
  store i64 %445, i64* %PC
  %446 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 32) to double*)
  %447 = bitcast i8* %443 to double*
  store double %446, double* %447, align 1, !tbaa !2455
  %448 = getelementptr inbounds i8, i8* %443, i64 8
  %449 = bitcast i8* %448 to double*
  store double 0.000000e+00, double* %449, align 1, !tbaa !2455
  %450 = bitcast i32* %R10D to i64*
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 8
  store i64 %452, i64* %PC
  %453 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %454 = zext i32 %453 to i64
  store i64 %454, i64* %450, align 8, !tbaa !2428
  %455 = bitcast i32* %R10D to i64*
  %456 = load i32, i32* %R10D
  %457 = zext i32 %456 to i64
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 9
  store i64 %459, i64* %PC
  %460 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %461 = shl i64 %457, 32
  %462 = ashr exact i64 %461, 32
  %463 = sext i32 %460 to i64
  %464 = mul nsw i64 %463, %462
  %465 = trunc i64 %464 to i32
  %466 = and i64 %464, 4294967295
  store i64 %466, i64* %455, align 8, !tbaa !2428
  %467 = shl i64 %464, 32
  %468 = ashr exact i64 %467, 32
  %469 = icmp ne i64 %468, %464
  %470 = zext i1 %469 to i8
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %470, i8* %471, align 1, !tbaa !2432
  %472 = and i32 %465, 255
  %473 = call i32 @llvm.ctpop.i32(i32 %472) #16
  %474 = trunc i32 %473 to i8
  %475 = and i8 %474, 1
  %476 = xor i8 %475, 1
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %476, i8* %477, align 1, !tbaa !2446
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %478, align 1, !tbaa !2447
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %479, align 1, !tbaa !2448
  %480 = lshr i32 %465, 31
  %481 = trunc i32 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %470, i8* %483, align 1, !tbaa !2450
  %484 = bitcast i32* %R10D to i64*
  %485 = load i32, i32* %R10D
  %486 = zext i32 %485 to i64
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 9
  store i64 %488, i64* %PC
  %489 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %490 = shl i64 %486, 32
  %491 = ashr exact i64 %490, 32
  %492 = sext i32 %489 to i64
  %493 = mul nsw i64 %492, %491
  %494 = trunc i64 %493 to i32
  %495 = and i64 %493, 4294967295
  store i64 %495, i64* %484, align 8, !tbaa !2428
  %496 = shl i64 %493, 32
  %497 = ashr exact i64 %496, 32
  %498 = icmp ne i64 %497, %493
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %499, i8* %500, align 1, !tbaa !2432
  %501 = and i32 %494, 255
  %502 = call i32 @llvm.ctpop.i32(i32 %501) #16
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = xor i8 %504, 1
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %505, i8* %506, align 1, !tbaa !2446
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %507, align 1, !tbaa !2447
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %508, align 1, !tbaa !2448
  %509 = lshr i32 %494, 31
  %510 = trunc i32 %509 to i8
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %510, i8* %511, align 1, !tbaa !2449
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %499, i8* %512, align 1, !tbaa !2450
  %513 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %514 = load i32, i32* %R10D
  %515 = zext i32 %514 to i64
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = sitofp i32 %514 to double
  %519 = bitcast i8* %513 to double*
  store double %518, double* %519, align 1, !tbaa !2455
  %520 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %521 = bitcast %union.vec128_t* %XMM0 to i8*
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 3
  store i64 %523, i64* %PC
  %524 = bitcast i8* %521 to <2 x i32>*
  %525 = load <2 x i32>, <2 x i32>* %524, align 1
  %526 = getelementptr inbounds i8, i8* %521, i64 8
  %527 = bitcast i8* %526 to <2 x i32>*
  %528 = load <2 x i32>, <2 x i32>* %527, align 1
  %529 = extractelement <2 x i32> %525, i32 0
  %530 = bitcast i8* %520 to i32*
  store i32 %529, i32* %530, align 1, !tbaa !2452
  %531 = extractelement <2 x i32> %525, i32 1
  %532 = getelementptr inbounds i8, i8* %520, i64 4
  %533 = bitcast i8* %532 to i32*
  store i32 %531, i32* %533, align 1, !tbaa !2452
  %534 = extractelement <2 x i32> %528, i32 0
  %535 = getelementptr inbounds i8, i8* %520, i64 8
  %536 = bitcast i8* %535 to i32*
  store i32 %534, i32* %536, align 1, !tbaa !2452
  %537 = extractelement <2 x i32> %528, i32 1
  %538 = getelementptr inbounds i8, i8* %520, i64 12
  %539 = bitcast i8* %538 to i32*
  store i32 %537, i32* %539, align 1, !tbaa !2452
  %540 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %541 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %542 = bitcast %union.vec128_t* %XMM2 to i8*
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = bitcast i8* %541 to double*
  %546 = load double, double* %545, align 1
  %547 = getelementptr inbounds i8, i8* %541, i64 8
  %548 = bitcast i8* %547 to i64*
  %549 = load i64, i64* %548, align 1
  %550 = bitcast i8* %542 to double*
  %551 = load double, double* %550, align 1
  %552 = fmul double %546, %551
  %553 = bitcast i8* %540 to double*
  store double %552, double* %553, align 1, !tbaa !2455
  %554 = getelementptr inbounds i8, i8* %540, i64 8
  %555 = bitcast i8* %554 to i64*
  store i64 %549, i64* %555, align 1, !tbaa !2455
  %556 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %557 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %558 = bitcast %union.vec128_t* %XMM1 to i8*
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = bitcast i8* %557 to double*
  %562 = load double, double* %561, align 1
  %563 = getelementptr inbounds i8, i8* %557, i64 8
  %564 = bitcast i8* %563 to i64*
  %565 = load i64, i64* %564, align 1
  %566 = bitcast i8* %558 to double*
  %567 = load double, double* %566, align 1
  %568 = fdiv double %562, %567
  %569 = bitcast i8* %556 to double*
  store double %568, double* %569, align 1, !tbaa !2455
  %570 = getelementptr inbounds i8, i8* %556, i64 8
  %571 = bitcast i8* %570 to i64*
  store i64 %565, i64* %571, align 1, !tbaa !2455
  %572 = bitcast i32* %R10D to i64*
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 8
  store i64 %574, i64* %PC
  %575 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %572, align 8, !tbaa !2428
  %577 = bitcast i32* %R10D to i64*
  %578 = load i32, i32* %R10D
  %579 = zext i32 %578 to i64
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 9
  store i64 %581, i64* %PC
  %582 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %583 = shl i64 %579, 32
  %584 = ashr exact i64 %583, 32
  %585 = sext i32 %582 to i64
  %586 = mul nsw i64 %585, %584
  %587 = trunc i64 %586 to i32
  %588 = and i64 %586, 4294967295
  store i64 %588, i64* %577, align 8, !tbaa !2428
  %589 = shl i64 %586, 32
  %590 = ashr exact i64 %589, 32
  %591 = icmp ne i64 %590, %586
  %592 = zext i1 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %592, i8* %593, align 1, !tbaa !2432
  %594 = and i32 %587, 255
  %595 = call i32 @llvm.ctpop.i32(i32 %594) #16
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %598, i8* %599, align 1, !tbaa !2446
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %600, align 1, !tbaa !2447
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %601, align 1, !tbaa !2448
  %602 = lshr i32 %587, 31
  %603 = trunc i32 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %603, i8* %604, align 1, !tbaa !2449
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %592, i8* %605, align 1, !tbaa !2450
  %606 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %607 = load i32, i32* %R10D
  %608 = zext i32 %607 to i64
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 5
  store i64 %610, i64* %PC
  %611 = sitofp i32 %607 to double
  %612 = bitcast i8* %606 to double*
  store double %611, double* %612, align 1, !tbaa !2455
  %613 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %614 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %615 = bitcast %union.vec128_t* %XMM1 to i8*
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 4
  store i64 %617, i64* %PC
  %618 = bitcast i8* %614 to double*
  %619 = load double, double* %618, align 1
  %620 = getelementptr inbounds i8, i8* %614, i64 8
  %621 = bitcast i8* %620 to i64*
  %622 = load i64, i64* %621, align 1
  %623 = bitcast i8* %615 to double*
  %624 = load double, double* %623, align 1
  %625 = fmul double %619, %624
  %626 = bitcast i8* %613 to double*
  store double %625, double* %626, align 1, !tbaa !2455
  %627 = getelementptr inbounds i8, i8* %613, i64 8
  %628 = bitcast i8* %627 to i64*
  store i64 %622, i64* %628, align 1, !tbaa !2455
  %629 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %630 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %631 = bitcast %union.vec128_t* %XMM0 to i8*
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC
  %634 = bitcast i8* %630 to double*
  %635 = load double, double* %634, align 1
  %636 = getelementptr inbounds i8, i8* %630, i64 8
  %637 = bitcast i8* %636 to i64*
  %638 = load i64, i64* %637, align 1
  %639 = bitcast i8* %631 to double*
  %640 = load double, double* %639, align 1
  %641 = fadd double %635, %640
  %642 = bitcast i8* %629 to double*
  store double %641, double* %642, align 1, !tbaa !2455
  %643 = getelementptr inbounds i8, i8* %629, i64 8
  %644 = bitcast i8* %643 to i64*
  store i64 %638, i64* %644, align 1, !tbaa !2455
  %645 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %646 = bitcast %union.vec128_t* %XMM3 to i8*
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 4
  store i64 %648, i64* %PC
  %649 = bitcast i8* %645 to <2 x i32>*
  %650 = load <2 x i32>, <2 x i32>* %649, align 1
  %651 = getelementptr inbounds i8, i8* %645, i64 8
  %652 = bitcast i8* %651 to <2 x i32>*
  %653 = load <2 x i32>, <2 x i32>* %652, align 1
  %654 = bitcast i8* %646 to double*
  %655 = load double, double* %654, align 1
  %656 = fptrunc double %655 to float
  %657 = bitcast i8* %645 to float*
  store float %656, float* %657, align 1, !tbaa !2452
  %658 = extractelement <2 x i32> %650, i32 1
  %659 = getelementptr inbounds i8, i8* %645, i64 4
  %660 = bitcast i8* %659 to i32*
  store i32 %658, i32* %660, align 1, !tbaa !2452
  %661 = extractelement <2 x i32> %653, i32 0
  %662 = bitcast i8* %651 to i32*
  store i32 %661, i32* %662, align 1, !tbaa !2452
  %663 = extractelement <2 x i32> %653, i32 1
  %664 = getelementptr inbounds i8, i8* %645, i64 12
  %665 = bitcast i8* %664 to i32*
  store i32 %663, i32* %665, align 1, !tbaa !2452
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 12
  %668 = bitcast %union.vec128_t* %XMM0 to i8*
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 5
  store i64 %670, i64* %PC
  %671 = bitcast i8* %668 to <2 x float>*
  %672 = load <2 x float>, <2 x float>* %671, align 1
  %673 = extractelement <2 x float> %672, i32 0
  %674 = inttoptr i64 %667 to float*
  store float %673, float* %674
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 7
  store i64 %676, i64* %PC
  %677 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %678 = zext i32 %677 to i64
  store i64 %678, i64* %RSI, align 8, !tbaa !2428
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 7
  store i64 %680, i64* %PC
  %681 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RDX, align 8, !tbaa !2428
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 884
  %685 = load i32, i32* %EAX
  %686 = zext i32 %685 to i64
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 6
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %684 to i32*
  store i32 %685, i32* %689
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 3899
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 5
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 5
  store i64 %695, i64* %PC
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %697 = load i64, i64* %696, align 8, !tbaa !2428
  %698 = add i64 %697, -8
  %699 = inttoptr i64 %698 to i64*
  store i64 %693, i64* %699
  store i64 %698, i64* %696, align 8, !tbaa !2428
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %691, i64* %700, align 8, !tbaa !2428
  %701 = load i64, i64* %PC
  %702 = call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* %0, i64 %701, %struct.Memory* %427)
  %703 = load i64, i64* %PC
  %704 = sub i64 %703, 570
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 5
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 5
  store i64 %708, i64* %PC
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %710 = load i64, i64* %709, align 8, !tbaa !2428
  %711 = add i64 %710, -8
  %712 = inttoptr i64 %711 to i64*
  store i64 %706, i64* %712
  store i64 %711, i64* %709, align 8, !tbaa !2428
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %704, i64* %713, align 8, !tbaa !2428
  %714 = load i64, i64* %PC
  %715 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %714, %struct.Memory* %702)
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 10
  store i64 %717, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 10
  store i64 %719, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 10
  store i64 %721, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 40
  %724 = bitcast %union.vec128_t* %XMM0 to i8*
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 5
  store i64 %726, i64* %PC
  %727 = bitcast i8* %724 to <2 x float>*
  %728 = load <2 x float>, <2 x float>* %727, align 1
  %729 = extractelement <2 x float> %728, i32 0
  %730 = inttoptr i64 %723 to float*
  store float %729, float* %730
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 7
  store i64 %732, i64* %PC
  %733 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %734 = zext i32 %733 to i64
  store i64 %734, i64* %RSI, align 8, !tbaa !2428
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 7
  store i64 %736, i64* %PC
  %737 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %738 = zext i32 %737 to i64
  store i64 %738, i64* %RDX, align 8, !tbaa !2428
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 4304
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 5
  store i64 %744, i64* %PC
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %746 = load i64, i64* %745, align 8, !tbaa !2428
  %747 = add i64 %746, -8
  %748 = inttoptr i64 %747 to i64*
  store i64 %742, i64* %748
  store i64 %747, i64* %745, align 8, !tbaa !2428
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %740, i64* %749, align 8, !tbaa !2428
  %750 = load i64, i64* %PC
  %751 = call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* %0, i64 %750, %struct.Memory* %715)
  %752 = load i64, i64* %PC
  %753 = sub i64 %752, 629
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 5
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  store i64 %757, i64* %PC
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %759 = load i64, i64* %758, align 8, !tbaa !2428
  %760 = add i64 %759, -8
  %761 = inttoptr i64 %760 to i64*
  store i64 %755, i64* %761
  store i64 %760, i64* %758, align 8, !tbaa !2428
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %762, align 8, !tbaa !2428
  %763 = load i64, i64* %PC
  %764 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %763, %struct.Memory* %751)
  %765 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %766 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %767 = load i64, i64* %RBP
  %768 = sub i64 %767, 40
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 5
  store i64 %770, i64* %PC
  %771 = bitcast i8* %766 to <2 x float>*
  %772 = load <2 x float>, <2 x float>* %771, align 1
  %773 = getelementptr inbounds i8, i8* %766, i64 8
  %774 = bitcast i8* %773 to <2 x i32>*
  %775 = load <2 x i32>, <2 x i32>* %774, align 1
  %776 = inttoptr i64 %768 to float*
  %777 = load float, float* %776
  %778 = extractelement <2 x float> %772, i32 0
  %779 = fsub float %778, %777
  %780 = bitcast i8* %765 to float*
  store float %779, float* %780, align 1, !tbaa !2452
  %781 = bitcast <2 x float> %772 to <2 x i32>
  %782 = extractelement <2 x i32> %781, i32 1
  %783 = getelementptr inbounds i8, i8* %765, i64 4
  %784 = bitcast i8* %783 to i32*
  store i32 %782, i32* %784, align 1, !tbaa !2452
  %785 = extractelement <2 x i32> %775, i32 0
  %786 = getelementptr inbounds i8, i8* %765, i64 8
  %787 = bitcast i8* %786 to i32*
  store i32 %785, i32* %787, align 1, !tbaa !2452
  %788 = extractelement <2 x i32> %775, i32 1
  %789 = getelementptr inbounds i8, i8* %765, i64 12
  %790 = bitcast i8* %789 to i32*
  store i32 %788, i32* %790, align 1, !tbaa !2452
  %791 = bitcast %union.vec128_t* %XMM0 to i8*
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 9
  store i64 %793, i64* %PC
  %794 = bitcast i8* %791 to <2 x float>*
  %795 = load <2 x float>, <2 x float>* %794, align 1
  %796 = extractelement <2 x float> %795, i32 0
  store float %796, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*)
  %797 = load i64, i64* %PC
  %798 = sub i64 %797, 648
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 5
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 5
  store i64 %802, i64* %PC
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %804 = load i64, i64* %803, align 8, !tbaa !2428
  %805 = add i64 %804, -8
  %806 = inttoptr i64 %805 to i64*
  store i64 %800, i64* %806
  store i64 %805, i64* %803, align 8, !tbaa !2428
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %798, i64* %807, align 8, !tbaa !2428
  %808 = load i64, i64* %PC
  %809 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %808, %struct.Memory* %764)
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 10
  store i64 %811, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 10
  store i64 %813, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 10
  store i64 %815, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %816 = bitcast i32* %R9D to i64*
  %817 = load i32, i32* %R9D
  %818 = zext i32 %817 to i64
  %819 = load i32, i32* %R9D
  %820 = zext i32 %819 to i64
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 3
  store i64 %822, i64* %PC
  %823 = xor i64 %820, %818
  %824 = trunc i64 %823 to i32
  %825 = and i64 %823, 4294967295
  store i64 %825, i64* %816, align 8, !tbaa !2428
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %826, align 1, !tbaa !2432
  %827 = and i32 %824, 255
  %828 = call i32 @llvm.ctpop.i32(i32 %827) #16
  %829 = trunc i32 %828 to i8
  %830 = and i8 %829, 1
  %831 = xor i8 %830, 1
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %831, i8* %832, align 1, !tbaa !2446
  %833 = icmp eq i32 %824, 0
  %834 = zext i1 %833 to i8
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %834, i8* %835, align 1, !tbaa !2448
  %836 = lshr i32 %824, 31
  %837 = trunc i32 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %837, i8* %838, align 1, !tbaa !2449
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %839, align 1, !tbaa !2450
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %840, align 1, !tbaa !2447
  %841 = load i64, i64* %RBP
  %842 = sub i64 %841, 40
  %843 = bitcast %union.vec128_t* %XMM0 to i8*
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 5
  store i64 %845, i64* %PC
  %846 = bitcast i8* %843 to <2 x float>*
  %847 = load <2 x float>, <2 x float>* %846, align 1
  %848 = extractelement <2 x float> %847, i32 0
  %849 = inttoptr i64 %842 to float*
  store float %848, float* %849
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 7
  store i64 %851, i64* %PC
  %852 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RSI, align 8, !tbaa !2428
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 7
  store i64 %855, i64* %PC
  %856 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RDX, align 8, !tbaa !2428
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 5007
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 5
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 5
  store i64 %863, i64* %PC
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %865 = load i64, i64* %864, align 8, !tbaa !2428
  %866 = add i64 %865, -8
  %867 = inttoptr i64 %866 to i64*
  store i64 %861, i64* %867
  store i64 %866, i64* %864, align 8, !tbaa !2428
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %859, i64* %868, align 8, !tbaa !2428
  %869 = load i64, i64* %PC
  %870 = call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* %0, i64 %869, %struct.Memory* %809)
  %871 = load i64, i64* %PC
  %872 = sub i64 %871, 710
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 5
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 5
  store i64 %876, i64* %PC
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %878 = load i64, i64* %877, align 8, !tbaa !2428
  %879 = add i64 %878, -8
  %880 = inttoptr i64 %879 to i64*
  store i64 %874, i64* %880
  store i64 %879, i64* %877, align 8, !tbaa !2428
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %872, i64* %881, align 8, !tbaa !2428
  %882 = load i64, i64* %PC
  %883 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %882, %struct.Memory* %870)
  %884 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %885 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %886 = load i64, i64* %RBP
  %887 = sub i64 %886, 40
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 5
  store i64 %889, i64* %PC
  %890 = bitcast i8* %885 to <2 x float>*
  %891 = load <2 x float>, <2 x float>* %890, align 1
  %892 = getelementptr inbounds i8, i8* %885, i64 8
  %893 = bitcast i8* %892 to <2 x i32>*
  %894 = load <2 x i32>, <2 x i32>* %893, align 1
  %895 = inttoptr i64 %887 to float*
  %896 = load float, float* %895
  %897 = extractelement <2 x float> %891, i32 0
  %898 = fsub float %897, %896
  %899 = bitcast i8* %884 to float*
  store float %898, float* %899, align 1, !tbaa !2452
  %900 = bitcast <2 x float> %891 to <2 x i32>
  %901 = extractelement <2 x i32> %900, i32 1
  %902 = getelementptr inbounds i8, i8* %884, i64 4
  %903 = bitcast i8* %902 to i32*
  store i32 %901, i32* %903, align 1, !tbaa !2452
  %904 = extractelement <2 x i32> %894, i32 0
  %905 = getelementptr inbounds i8, i8* %884, i64 8
  %906 = bitcast i8* %905 to i32*
  store i32 %904, i32* %906, align 1, !tbaa !2452
  %907 = extractelement <2 x i32> %894, i32 1
  %908 = getelementptr inbounds i8, i8* %884, i64 12
  %909 = bitcast i8* %908 to i32*
  store i32 %907, i32* %909, align 1, !tbaa !2452
  %910 = bitcast %union.vec128_t* %XMM0 to i8*
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 9
  store i64 %912, i64* %PC
  %913 = bitcast i8* %910 to <2 x float>*
  %914 = load <2 x float>, <2 x float>* %913, align 1
  %915 = extractelement <2 x float> %914, i32 0
  store float %915, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*)
  %916 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 9
  store i64 %918, i64* %PC
  %919 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*)
  %920 = bitcast i8* %916 to float*
  store float %919, float* %920, align 1, !tbaa !2452
  %921 = getelementptr inbounds i8, i8* %916, i64 4
  %922 = bitcast i8* %921 to float*
  store float 0.000000e+00, float* %922, align 1, !tbaa !2452
  %923 = getelementptr inbounds i8, i8* %916, i64 8
  %924 = bitcast i8* %923 to float*
  store float 0.000000e+00, float* %924, align 1, !tbaa !2452
  %925 = getelementptr inbounds i8, i8* %916, i64 12
  %926 = bitcast i8* %925 to float*
  store float 0.000000e+00, float* %926, align 1, !tbaa !2452
  %927 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %928 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 9
  store i64 %930, i64* %PC
  %931 = bitcast i8* %928 to <2 x float>*
  %932 = load <2 x float>, <2 x float>* %931, align 1
  %933 = getelementptr inbounds i8, i8* %928, i64 8
  %934 = bitcast i8* %933 to <2 x i32>*
  %935 = load <2 x i32>, <2 x i32>* %934, align 1
  %936 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*)
  %937 = extractelement <2 x float> %932, i32 0
  %938 = fadd float %937, %936
  %939 = bitcast i8* %927 to float*
  store float %938, float* %939, align 1, !tbaa !2452
  %940 = bitcast <2 x float> %932 to <2 x i32>
  %941 = extractelement <2 x i32> %940, i32 1
  %942 = getelementptr inbounds i8, i8* %927, i64 4
  %943 = bitcast i8* %942 to i32*
  store i32 %941, i32* %943, align 1, !tbaa !2452
  %944 = extractelement <2 x i32> %935, i32 0
  %945 = getelementptr inbounds i8, i8* %927, i64 8
  %946 = bitcast i8* %945 to i32*
  store i32 %944, i32* %946, align 1, !tbaa !2452
  %947 = extractelement <2 x i32> %935, i32 1
  %948 = getelementptr inbounds i8, i8* %927, i64 12
  %949 = bitcast i8* %948 to i32*
  store i32 %947, i32* %949, align 1, !tbaa !2452
  %950 = load i64, i64* %RBP
  %951 = sub i64 %950, 16
  %952 = bitcast %union.vec128_t* %XMM0 to i8*
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 5
  store i64 %954, i64* %PC
  %955 = bitcast i8* %952 to <2 x float>*
  %956 = load <2 x float>, <2 x float>* %955, align 1
  %957 = extractelement <2 x float> %956, i32 0
  %958 = inttoptr i64 %951 to float*
  store float %957, float* %958
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 11
  store i64 %960, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4008eb

block_40096d:                                     ; preds = %block_400981, %block_400937
  %MEMORY.0 = phi %struct.Memory* [ %6144, %block_400937 ], [ %MEMORY.0, %block_400981 ]
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 7
  store i64 %962, i64* %PC
  %963 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %964 = zext i32 %963 to i64
  store i64 %964, i64* %RAX, align 8, !tbaa !2428
  %965 = load i32, i32* %EAX
  %966 = zext i32 %965 to i64
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 7
  store i64 %968, i64* %PC
  %969 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %970 = sub i32 %965, %969
  %971 = icmp ult i32 %965, %969
  %972 = zext i1 %971 to i8
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %972, i8* %973, align 1, !tbaa !2432
  %974 = and i32 %970, 255
  %975 = call i32 @llvm.ctpop.i32(i32 %974) #16
  %976 = trunc i32 %975 to i8
  %977 = and i8 %976, 1
  %978 = xor i8 %977, 1
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %978, i8* %979, align 1, !tbaa !2446
  %980 = xor i32 %969, %965
  %981 = xor i32 %980, %970
  %982 = lshr i32 %981, 4
  %983 = trunc i32 %982 to i8
  %984 = and i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %984, i8* %985, align 1, !tbaa !2447
  %986 = icmp eq i32 %970, 0
  %987 = zext i1 %986 to i8
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %987, i8* %988, align 1, !tbaa !2448
  %989 = lshr i32 %970, 31
  %990 = trunc i32 %989 to i8
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %990, i8* %991, align 1, !tbaa !2449
  %992 = lshr i32 %965, 31
  %993 = lshr i32 %969, 31
  %994 = xor i32 %993, %992
  %995 = xor i32 %989, %992
  %996 = add nuw nsw i32 %995, %994
  %997 = icmp eq i32 %996, 2
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %998, i8* %999, align 1, !tbaa !2450
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 76
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 6
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 6
  store i64 %1005, i64* %PC
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1007 = load i8, i8* %1006, align 1, !tbaa !2449
  %1008 = icmp ne i8 %1007, 0
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1010 = load i8, i8* %1009, align 1, !tbaa !2450
  %1011 = icmp ne i8 %1010, 0
  %1012 = xor i1 %1008, %1011
  %1013 = xor i1 %1012, true
  %1014 = zext i1 %1013 to i8
  store i8 %1014, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1016 = select i1 %1012, i64 %1003, i64 %1001
  store i64 %1016, i64* %1015, align 8, !tbaa !2428
  %1017 = load i8, i8* %BRANCH_TAKEN
  %1018 = icmp eq i8 %1017, 1
  %1019 = load i64, i64* %PC
  br i1 %1018, label %block_4009c7, label %block_400981

block_4012f1:                                     ; preds = %block_401082
  %1020 = add i64 %7306, 10
  store i64 %1020, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %1021 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1022 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1023 = bitcast %union.vec128_t* %XMM0 to i8*
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 3
  store i64 %1025, i64* %PC
  %1026 = bitcast i8* %1022 to i64*
  %1027 = load i64, i64* %1026, align 1
  %1028 = getelementptr inbounds i8, i8* %1022, i64 8
  %1029 = bitcast i8* %1028 to i64*
  %1030 = load i64, i64* %1029, align 1
  %1031 = bitcast i8* %1023 to i64*
  %1032 = load i64, i64* %1031, align 1
  %1033 = getelementptr inbounds i8, i8* %1023, i64 8
  %1034 = bitcast i8* %1033 to i64*
  %1035 = load i64, i64* %1034, align 1
  %1036 = xor i64 %1032, %1027
  %1037 = xor i64 %1035, %1030
  %1038 = trunc i64 %1036 to i32
  %1039 = lshr i64 %1036, 32
  %1040 = trunc i64 %1039 to i32
  %1041 = bitcast i8* %1021 to i32*
  store i32 %1038, i32* %1041, align 1, !tbaa !2454
  %1042 = getelementptr inbounds i8, i8* %1021, i64 4
  %1043 = bitcast i8* %1042 to i32*
  store i32 %1040, i32* %1043, align 1, !tbaa !2454
  %1044 = trunc i64 %1037 to i32
  %1045 = getelementptr inbounds i8, i8* %1021, i64 8
  %1046 = bitcast i8* %1045 to i32*
  store i32 %1044, i32* %1046, align 1, !tbaa !2454
  %1047 = lshr i64 %1037, 32
  %1048 = trunc i64 %1047 to i32
  %1049 = getelementptr inbounds i8, i8* %1021, i64 12
  %1050 = bitcast i8* %1049 to i32*
  store i32 %1048, i32* %1050, align 1, !tbaa !2454
  %1051 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 8
  store i64 %1053, i64* %PC
  %1054 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 48) to double*)
  %1055 = bitcast i8* %1051 to double*
  store double %1054, double* %1055, align 1, !tbaa !2455
  %1056 = getelementptr inbounds i8, i8* %1051, i64 8
  %1057 = bitcast i8* %1056 to double*
  store double 0.000000e+00, double* %1057, align 1, !tbaa !2455
  %1058 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 9
  store i64 %1060, i64* %PC
  %1061 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %1062 = fpext float %1061 to double
  %1063 = bitcast i8* %1058 to double*
  store double %1062, double* %1063, align 1, !tbaa !2455
  %1064 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1065 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1066 = bitcast %union.vec128_t* %XMM1 to i8*
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 4
  store i64 %1068, i64* %PC
  %1069 = bitcast i8* %1065 to double*
  %1070 = load double, double* %1069, align 1
  %1071 = getelementptr inbounds i8, i8* %1065, i64 8
  %1072 = bitcast i8* %1071 to i64*
  %1073 = load i64, i64* %1072, align 1
  %1074 = bitcast i8* %1066 to double*
  %1075 = load double, double* %1074, align 1
  %1076 = fdiv double %1070, %1075
  %1077 = bitcast i8* %1064 to double*
  store double %1076, double* %1077, align 1, !tbaa !2455
  %1078 = getelementptr inbounds i8, i8* %1064, i64 8
  %1079 = bitcast i8* %1078 to i64*
  store i64 %1073, i64* %1079, align 1, !tbaa !2455
  %1080 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1081 = bitcast %union.vec128_t* %XMM2 to i8*
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 4
  store i64 %1083, i64* %PC
  %1084 = bitcast i8* %1080 to <2 x i32>*
  %1085 = load <2 x i32>, <2 x i32>* %1084, align 1
  %1086 = getelementptr inbounds i8, i8* %1080, i64 8
  %1087 = bitcast i8* %1086 to <2 x i32>*
  %1088 = load <2 x i32>, <2 x i32>* %1087, align 1
  %1089 = bitcast i8* %1081 to double*
  %1090 = load double, double* %1089, align 1
  %1091 = fptrunc double %1090 to float
  %1092 = bitcast i8* %1080 to float*
  store float %1091, float* %1092, align 1, !tbaa !2452
  %1093 = extractelement <2 x i32> %1085, i32 1
  %1094 = getelementptr inbounds i8, i8* %1080, i64 4
  %1095 = bitcast i8* %1094 to i32*
  store i32 %1093, i32* %1095, align 1, !tbaa !2452
  %1096 = extractelement <2 x i32> %1088, i32 0
  %1097 = bitcast i8* %1086 to i32*
  store i32 %1096, i32* %1097, align 1, !tbaa !2452
  %1098 = extractelement <2 x i32> %1088, i32 1
  %1099 = getelementptr inbounds i8, i8* %1080, i64 12
  %1100 = bitcast i8* %1099 to i32*
  store i32 %1098, i32* %1100, align 1, !tbaa !2452
  %1101 = bitcast %union.vec128_t* %XMM1 to i8*
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 9
  store i64 %1103, i64* %PC
  %1104 = bitcast i8* %1101 to <2 x float>*
  %1105 = load <2 x float>, <2 x float>* %1104, align 1
  %1106 = extractelement <2 x float> %1105, i32 0
  store float %1106, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 8
  store i64 %1108, i64* %PC
  %1109 = load i64, i64* @stderr
  store i64 %1109, i64* %RDI, align 8, !tbaa !2428
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 2
  store i64 %1111, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1112 = load i64, i64* %PC
  %1113 = sub i64 %1112, 3642
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 5
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  store i64 %1117, i64* %PC
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1119 = load i64, i64* %1118, align 8, !tbaa !2428
  %1120 = add i64 %1119, -8
  %1121 = inttoptr i64 %1120 to i64*
  store i64 %1115, i64* %1121
  store i64 %1120, i64* %1118, align 8, !tbaa !2428
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1113, i64* %1122, align 8, !tbaa !2428
  %1123 = load i64, i64* %PC
  %1124 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %1123, %struct.Memory* %MEMORY.19)
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 10
  store i64 %1126, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 8
  store i64 %1128, i64* %PC
  %1129 = load i64, i64* @stderr
  store i64 %1129, i64* %RDI, align 8, !tbaa !2428
  %1130 = load i64, i64* %RBP
  %1131 = sub i64 %1130, 972
  %1132 = load i32, i32* %EAX
  %1133 = zext i32 %1132 to i64
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 6
  store i64 %1135, i64* %PC
  %1136 = inttoptr i64 %1131 to i32*
  store i32 %1132, i32* %1136
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 2
  store i64 %1138, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %1139 = load i64, i64* %PC
  %1140 = sub i64 %1139, 3673
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 5
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 5
  store i64 %1144, i64* %PC
  %1145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1146 = load i64, i64* %1145, align 8, !tbaa !2428
  %1147 = add i64 %1146, -8
  %1148 = inttoptr i64 %1147 to i64*
  store i64 %1142, i64* %1148
  store i64 %1147, i64* %1145, align 8, !tbaa !2428
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1140, i64* %1149, align 8, !tbaa !2428
  %1150 = load i64, i64* %PC
  %1151 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %1150, %struct.Memory* %1124)
  %1152 = load i64, i64* %RBP
  %1153 = sub i64 %1152, 976
  %1154 = load i32, i32* %EAX
  %1155 = zext i32 %1154 to i64
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 6
  store i64 %1157, i64* %PC
  %1158 = inttoptr i64 %1153 to i32*
  store i32 %1154, i32* %1158
  %1159 = load i64, i64* %PC
  %1160 = sub i64 %1159, 3428
  %1161 = load i64, i64* %PC
  %1162 = add i64 %1161, 5
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 5
  store i64 %1164, i64* %PC
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1166 = load i64, i64* %1165, align 8, !tbaa !2428
  %1167 = add i64 %1166, -8
  %1168 = inttoptr i64 %1167 to i64*
  store i64 %1162, i64* %1168
  store i64 %1167, i64* %1165, align 8, !tbaa !2428
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1160, i64* %1169, align 8, !tbaa !2428
  %1170 = load i64, i64* %PC
  %1171 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %1170, %struct.Memory* %1151)
  %1172 = load i64, i64* %RBP
  %1173 = sub i64 %1172, 80
  %1174 = bitcast %union.vec128_t* %XMM0 to i8*
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  store i64 %1176, i64* %PC
  %1177 = bitcast i8* %1174 to <2 x float>*
  %1178 = load <2 x float>, <2 x float>* %1177, align 1
  %1179 = extractelement <2 x float> %1178, i32 0
  %1180 = inttoptr i64 %1173 to float*
  store float %1179, float* %1180
  %1181 = load i64, i64* %PC
  %1182 = add i64 %1181, 11
  store i64 %1182, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_401369

block_40116d:                                     ; preds = %block_40112b, %block_401181
  %MEMORY.1 = phi %struct.Memory* [ %7244, %block_40112b ], [ %6982, %block_401181 ]
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 7
  store i64 %1184, i64* %PC
  %1185 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1186 = zext i32 %1185 to i64
  store i64 %1186, i64* %RAX, align 8, !tbaa !2428
  %1187 = load i32, i32* %EAX
  %1188 = zext i32 %1187 to i64
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 7
  store i64 %1190, i64* %PC
  %1191 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %1192 = sub i32 %1187, %1191
  %1193 = icmp ult i32 %1187, %1191
  %1194 = zext i1 %1193 to i8
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1194, i8* %1195, align 1, !tbaa !2432
  %1196 = and i32 %1192, 255
  %1197 = call i32 @llvm.ctpop.i32(i32 %1196) #16
  %1198 = trunc i32 %1197 to i8
  %1199 = and i8 %1198, 1
  %1200 = xor i8 %1199, 1
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1200, i8* %1201, align 1, !tbaa !2446
  %1202 = xor i32 %1191, %1187
  %1203 = xor i32 %1202, %1192
  %1204 = lshr i32 %1203, 4
  %1205 = trunc i32 %1204 to i8
  %1206 = and i8 %1205, 1
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1206, i8* %1207, align 1, !tbaa !2447
  %1208 = icmp eq i32 %1192, 0
  %1209 = zext i1 %1208 to i8
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1209, i8* %1210, align 1, !tbaa !2448
  %1211 = lshr i32 %1192, 31
  %1212 = trunc i32 %1211 to i8
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1212, i8* %1213, align 1, !tbaa !2449
  %1214 = lshr i32 %1187, 31
  %1215 = lshr i32 %1191, 31
  %1216 = xor i32 %1215, %1214
  %1217 = xor i32 %1211, %1214
  %1218 = add nuw nsw i32 %1217, %1216
  %1219 = icmp eq i32 %1218, 2
  %1220 = zext i1 %1219 to i8
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1220, i8* %1221, align 1, !tbaa !2450
  %1222 = load i64, i64* %PC
  %1223 = add i64 %1222, 80
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 6
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 6
  store i64 %1227, i64* %PC
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1229 = load i8, i8* %1228, align 1, !tbaa !2449
  %1230 = icmp ne i8 %1229, 0
  %1231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1232 = load i8, i8* %1231, align 1, !tbaa !2450
  %1233 = icmp ne i8 %1232, 0
  %1234 = xor i1 %1230, %1233
  %1235 = xor i1 %1234, true
  %1236 = zext i1 %1235 to i8
  store i8 %1236, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1238 = select i1 %1234, i64 %1225, i64 %1223
  store i64 %1238, i64* %1237, align 8, !tbaa !2428
  %1239 = load i8, i8* %BRANCH_TAKEN
  %1240 = icmp eq i8 %1239, 1
  %1241 = load i64, i64* %PC
  br i1 %1240, label %block_4011cb, label %block_401181

block_400cc0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 8
  store i64 %1243, i64* %PC
  %1244 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to double*)
  %1245 = bitcast i8* %5668 to double*
  store double %1244, double* %1245, align 1, !tbaa !2455
  %1246 = getelementptr inbounds i8, i8* %5668, i64 8
  %1247 = bitcast i8* %1246 to double*
  store double 0.000000e+00, double* %1247, align 1, !tbaa !2455
  %1248 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 8
  store i64 %1250, i64* %PC
  %1251 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to double*)
  %1252 = bitcast i8* %1248 to double*
  store double %1251, double* %1252, align 1, !tbaa !2455
  %1253 = getelementptr inbounds i8, i8* %1248, i64 8
  %1254 = bitcast i8* %1253 to double*
  store double 0.000000e+00, double* %1254, align 1, !tbaa !2455
  %1255 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1256 = load i64, i64* %RBP
  %1257 = sub i64 %1256, 12
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 5
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1257 to float*
  %1261 = load float, float* %1260
  %1262 = fpext float %1261 to double
  %1263 = bitcast i8* %1255 to double*
  store double %1262, double* %1263, align 1, !tbaa !2455
  %1264 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1265 = load i64, i64* %RBP
  %1266 = sub i64 %1265, 16
  %1267 = load i64, i64* %PC
  %1268 = add i64 %1267, 5
  store i64 %1268, i64* %PC
  %1269 = inttoptr i64 %1266 to float*
  %1270 = load float, float* %1269
  %1271 = fpext float %1270 to double
  %1272 = bitcast i8* %1264 to double*
  store double %1271, double* %1272, align 1, !tbaa !2455
  %1273 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1274 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1275 = bitcast %union.vec128_t* %XMM3 to i8*
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 4
  store i64 %1277, i64* %PC
  %1278 = bitcast i8* %1274 to double*
  %1279 = load double, double* %1278, align 1
  %1280 = getelementptr inbounds i8, i8* %1274, i64 8
  %1281 = bitcast i8* %1280 to i64*
  %1282 = load i64, i64* %1281, align 1
  %1283 = bitcast i8* %1275 to double*
  %1284 = load double, double* %1283, align 1
  %1285 = fmul double %1279, %1284
  %1286 = bitcast i8* %1273 to double*
  store double %1285, double* %1286, align 1, !tbaa !2455
  %1287 = getelementptr inbounds i8, i8* %1273, i64 8
  %1288 = bitcast i8* %1287 to i64*
  store i64 %1282, i64* %1288, align 1, !tbaa !2455
  %1289 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1290 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1291 = bitcast %union.vec128_t* %XMM1 to i8*
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 4
  store i64 %1293, i64* %PC
  %1294 = bitcast i8* %1290 to double*
  %1295 = load double, double* %1294, align 1
  %1296 = getelementptr inbounds i8, i8* %1290, i64 8
  %1297 = bitcast i8* %1296 to i64*
  %1298 = load i64, i64* %1297, align 1
  %1299 = bitcast i8* %1291 to double*
  %1300 = load double, double* %1299, align 1
  %1301 = fdiv double %1295, %1300
  %1302 = bitcast i8* %1289 to double*
  store double %1301, double* %1302, align 1, !tbaa !2455
  %1303 = getelementptr inbounds i8, i8* %1289, i64 8
  %1304 = bitcast i8* %1303 to i64*
  store i64 %1298, i64* %1304, align 1, !tbaa !2455
  %1305 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1306 = bitcast %union.vec128_t* %XMM2 to i8*
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 4
  store i64 %1308, i64* %PC
  %1309 = bitcast i8* %1305 to <2 x i32>*
  %1310 = load <2 x i32>, <2 x i32>* %1309, align 1
  %1311 = getelementptr inbounds i8, i8* %1305, i64 8
  %1312 = bitcast i8* %1311 to <2 x i32>*
  %1313 = load <2 x i32>, <2 x i32>* %1312, align 1
  %1314 = bitcast i8* %1306 to double*
  %1315 = load double, double* %1314, align 1
  %1316 = fptrunc double %1315 to float
  %1317 = bitcast i8* %1305 to float*
  store float %1316, float* %1317, align 1, !tbaa !2452
  %1318 = extractelement <2 x i32> %1310, i32 1
  %1319 = getelementptr inbounds i8, i8* %1305, i64 4
  %1320 = bitcast i8* %1319 to i32*
  store i32 %1318, i32* %1320, align 1, !tbaa !2452
  %1321 = extractelement <2 x i32> %1313, i32 0
  %1322 = bitcast i8* %1311 to i32*
  store i32 %1321, i32* %1322, align 1, !tbaa !2452
  %1323 = extractelement <2 x i32> %1313, i32 1
  %1324 = getelementptr inbounds i8, i8* %1305, i64 12
  %1325 = bitcast i8* %1324 to i32*
  store i32 %1323, i32* %1325, align 1, !tbaa !2452
  %1326 = bitcast %union.vec128_t* %XMM1 to i8*
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 9
  store i64 %1328, i64* %PC
  %1329 = bitcast i8* %1326 to <2 x float>*
  %1330 = load <2 x float>, <2 x float>* %1329, align 1
  %1331 = extractelement <2 x float> %1330, i32 0
  store float %1331, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %1332 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 9
  store i64 %1334, i64* %PC
  %1335 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %1336 = fpext float %1335 to double
  %1337 = bitcast i8* %1332 to double*
  store double %1336, double* %1337, align 1, !tbaa !2455
  %1338 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1339 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1340 = bitcast %union.vec128_t* %XMM1 to i8*
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 4
  store i64 %1342, i64* %PC
  %1343 = bitcast i8* %1339 to double*
  %1344 = load double, double* %1343, align 1
  %1345 = getelementptr inbounds i8, i8* %1339, i64 8
  %1346 = bitcast i8* %1345 to i64*
  %1347 = load i64, i64* %1346, align 1
  %1348 = bitcast i8* %1340 to double*
  %1349 = load double, double* %1348, align 1
  %1350 = fdiv double %1344, %1349
  %1351 = bitcast i8* %1338 to double*
  store double %1350, double* %1351, align 1, !tbaa !2455
  %1352 = getelementptr inbounds i8, i8* %1338, i64 8
  %1353 = bitcast i8* %1352 to i64*
  store i64 %1347, i64* %1353, align 1, !tbaa !2455
  %1354 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1355 = bitcast %union.vec128_t* %XMM0 to i8*
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 4
  store i64 %1357, i64* %PC
  %1358 = bitcast i8* %1354 to <2 x i32>*
  %1359 = load <2 x i32>, <2 x i32>* %1358, align 1
  %1360 = getelementptr inbounds i8, i8* %1354, i64 8
  %1361 = bitcast i8* %1360 to <2 x i32>*
  %1362 = load <2 x i32>, <2 x i32>* %1361, align 1
  %1363 = bitcast i8* %1355 to double*
  %1364 = load double, double* %1363, align 1
  %1365 = fptrunc double %1364 to float
  %1366 = bitcast i8* %1354 to float*
  store float %1365, float* %1366, align 1, !tbaa !2452
  %1367 = extractelement <2 x i32> %1359, i32 1
  %1368 = getelementptr inbounds i8, i8* %1354, i64 4
  %1369 = bitcast i8* %1368 to i32*
  store i32 %1367, i32* %1369, align 1, !tbaa !2452
  %1370 = extractelement <2 x i32> %1362, i32 0
  %1371 = bitcast i8* %1360 to i32*
  store i32 %1370, i32* %1371, align 1, !tbaa !2452
  %1372 = extractelement <2 x i32> %1362, i32 1
  %1373 = getelementptr inbounds i8, i8* %1354, i64 12
  %1374 = bitcast i8* %1373 to i32*
  store i32 %1372, i32* %1374, align 1, !tbaa !2452
  %1375 = bitcast %union.vec128_t* %XMM0 to i8*
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 9
  store i64 %1377, i64* %PC
  %1378 = bitcast i8* %1375 to <2 x float>*
  %1379 = load <2 x float>, <2 x float>* %1378, align 1
  %1380 = extractelement <2 x float> %1379, i32 0
  store float %1380, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*)
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 26
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 5
  store i64 %1384, i64* %PC
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1382, i64* %1385, align 8, !tbaa !2428
  br label %block_400d23

block_400afe:                                     ; preds = %block_400ac8, %block_400ada
  %MEMORY.2 = phi %struct.Memory* [ %6852, %block_400ada ], [ %6852, %block_400ac8 ]
  %1386 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 904
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 8
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to double*
  %1392 = load double, double* %1391
  %1393 = bitcast i8* %1386 to double*
  store double %1392, double* %1393, align 1, !tbaa !2455
  %1394 = getelementptr inbounds i8, i8* %1386, i64 8
  %1395 = bitcast i8* %1394 to double*
  store double 0.000000e+00, double* %1395, align 1, !tbaa !2455
  %1396 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1397 = bitcast %union.vec128_t* %XMM0 to i8*
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 4
  store i64 %1399, i64* %PC
  %1400 = bitcast i8* %1396 to <2 x i32>*
  %1401 = load <2 x i32>, <2 x i32>* %1400, align 1
  %1402 = getelementptr inbounds i8, i8* %1396, i64 8
  %1403 = bitcast i8* %1402 to <2 x i32>*
  %1404 = load <2 x i32>, <2 x i32>* %1403, align 1
  %1405 = bitcast i8* %1397 to double*
  %1406 = load double, double* %1405, align 1
  %1407 = fptrunc double %1406 to float
  %1408 = bitcast i8* %1396 to float*
  store float %1407, float* %1408, align 1, !tbaa !2452
  %1409 = extractelement <2 x i32> %1401, i32 1
  %1410 = getelementptr inbounds i8, i8* %1396, i64 4
  %1411 = bitcast i8* %1410 to i32*
  store i32 %1409, i32* %1411, align 1, !tbaa !2452
  %1412 = extractelement <2 x i32> %1404, i32 0
  %1413 = bitcast i8* %1402 to i32*
  store i32 %1412, i32* %1413, align 1, !tbaa !2452
  %1414 = extractelement <2 x i32> %1404, i32 1
  %1415 = getelementptr inbounds i8, i8* %1396, i64 12
  %1416 = bitcast i8* %1415 to i32*
  store i32 %1414, i32* %1416, align 1, !tbaa !2452
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 24
  %1419 = bitcast %union.vec128_t* %XMM0 to i8*
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 5
  store i64 %1421, i64* %PC
  %1422 = bitcast i8* %1419 to <2 x float>*
  %1423 = load <2 x float>, <2 x float>* %1422, align 1
  %1424 = extractelement <2 x float> %1423, i32 0
  %1425 = inttoptr i64 %1418 to float*
  store float %1424, float* %1425
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 7
  store i64 %1427, i64* %PC
  %1428 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1429 = zext i32 %1428 to i64
  store i64 %1429, i64* %RAX, align 8, !tbaa !2428
  %1430 = load i64, i64* %RAX
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 3
  store i64 %1432, i64* %PC
  %1433 = trunc i64 %1430 to i32
  %1434 = add i32 1, %1433
  %1435 = zext i32 %1434 to i64
  store i64 %1435, i64* %RAX, align 8, !tbaa !2428
  %1436 = icmp ult i32 %1434, %1433
  %1437 = icmp ult i32 %1434, 1
  %1438 = or i1 %1436, %1437
  %1439 = zext i1 %1438 to i8
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1439, i8* %1440, align 1, !tbaa !2432
  %1441 = and i32 %1434, 255
  %1442 = call i32 @llvm.ctpop.i32(i32 %1441) #16
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1445, i8* %1446, align 1, !tbaa !2446
  %1447 = xor i64 1, %1430
  %1448 = trunc i64 %1447 to i32
  %1449 = xor i32 %1448, %1434
  %1450 = lshr i32 %1449, 4
  %1451 = trunc i32 %1450 to i8
  %1452 = and i8 %1451, 1
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1452, i8* %1453, align 1, !tbaa !2447
  %1454 = icmp eq i32 %1434, 0
  %1455 = zext i1 %1454 to i8
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1455, i8* %1456, align 1, !tbaa !2448
  %1457 = lshr i32 %1434, 31
  %1458 = trunc i32 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1458, i8* %1459, align 1, !tbaa !2449
  %1460 = lshr i32 %1433, 31
  %1461 = xor i32 %1457, %1460
  %1462 = add nuw nsw i32 %1461, %1457
  %1463 = icmp eq i32 %1462, 2
  %1464 = zext i1 %1463 to i8
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1464, i8* %1465, align 1, !tbaa !2450
  %1466 = load i32, i32* %EAX
  %1467 = zext i32 %1466 to i64
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 7
  store i64 %1469, i64* %PC
  store i32 %1466, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1470 = load i64, i64* %PC
  %1471 = sub i64 %1470, 265
  %1472 = load i64, i64* %PC
  %1473 = add i64 %1472, 5
  store i64 %1473, i64* %PC
  %1474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1471, i64* %1474, align 8, !tbaa !2428
  br label %block_400a17

block_4008eb:                                     ; preds = %block_4008ff, %block_400640
  %MEMORY.3 = phi %struct.Memory* [ %883, %block_400640 ], [ %MEMORY.3, %block_4008ff ]
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 7
  store i64 %1476, i64* %PC
  %1477 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1478 = zext i32 %1477 to i64
  store i64 %1478, i64* %RAX, align 8, !tbaa !2428
  %1479 = load i32, i32* %EAX
  %1480 = zext i32 %1479 to i64
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 7
  store i64 %1482, i64* %PC
  %1483 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %1484 = sub i32 %1479, %1483
  %1485 = icmp ult i32 %1479, %1483
  %1486 = zext i1 %1485 to i8
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1486, i8* %1487, align 1, !tbaa !2432
  %1488 = and i32 %1484, 255
  %1489 = call i32 @llvm.ctpop.i32(i32 %1488) #16
  %1490 = trunc i32 %1489 to i8
  %1491 = and i8 %1490, 1
  %1492 = xor i8 %1491, 1
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1492, i8* %1493, align 1, !tbaa !2446
  %1494 = xor i32 %1483, %1479
  %1495 = xor i32 %1494, %1484
  %1496 = lshr i32 %1495, 4
  %1497 = trunc i32 %1496 to i8
  %1498 = and i8 %1497, 1
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1498, i8* %1499, align 1, !tbaa !2447
  %1500 = icmp eq i32 %1484, 0
  %1501 = zext i1 %1500 to i8
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1501, i8* %1502, align 1, !tbaa !2448
  %1503 = lshr i32 %1484, 31
  %1504 = trunc i32 %1503 to i8
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1504, i8* %1505, align 1, !tbaa !2449
  %1506 = lshr i32 %1479, 31
  %1507 = lshr i32 %1483, 31
  %1508 = xor i32 %1507, %1506
  %1509 = xor i32 %1503, %1506
  %1510 = add nuw nsw i32 %1509, %1508
  %1511 = icmp eq i32 %1510, 2
  %1512 = zext i1 %1511 to i8
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1512, i8* %1513, align 1, !tbaa !2450
  %1514 = load i64, i64* %PC
  %1515 = add i64 %1514, 62
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 6
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 6
  store i64 %1519, i64* %PC
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1521 = load i8, i8* %1520, align 1, !tbaa !2449
  %1522 = icmp ne i8 %1521, 0
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1524 = load i8, i8* %1523, align 1, !tbaa !2450
  %1525 = icmp ne i8 %1524, 0
  %1526 = xor i1 %1522, %1525
  %1527 = xor i1 %1526, true
  %1528 = zext i1 %1527 to i8
  store i8 %1528, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1530 = select i1 %1526, i64 %1517, i64 %1515
  store i64 %1530, i64* %1529, align 8, !tbaa !2428
  %1531 = load i8, i8* %BRANCH_TAKEN
  %1532 = icmp eq i8 %1531, 1
  %1533 = load i64, i64* %PC
  br i1 %1532, label %block_400937, label %block_4008ff

block_400a68:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 8
  store i64 %1535, i64* %PC
  %1536 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1537 = sext i32 %1536 to i64
  store i64 %1537, i64* %RAX, align 8, !tbaa !2428
  %1538 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1539 = load i64, i64* %RAX
  %1540 = mul i64 %1539, 4
  %1541 = add i64 %1540, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 9
  store i64 %1543, i64* %PC
  %1544 = inttoptr i64 %1541 to float*
  %1545 = load float, float* %1544
  %1546 = fpext float %1545 to double
  %1547 = bitcast i8* %1538 to double*
  store double %1546, double* %1547, align 1, !tbaa !2455
  %1548 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 7
  store i64 %1550, i64* %PC
  %1551 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %1552 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %1553 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %1554 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %1555 = bitcast i8* %1548 to float*
  store float %1551, float* %1555, align 1, !tbaa !2452
  %1556 = getelementptr inbounds i8, i8* %1548, i64 4
  %1557 = bitcast i8* %1556 to float*
  store float %1552, float* %1557, align 1, !tbaa !2452
  %1558 = getelementptr inbounds i8, i8* %1548, i64 8
  %1559 = bitcast i8* %1558 to float*
  store float %1553, float* %1559, align 1, !tbaa !2452
  %1560 = getelementptr inbounds i8, i8* %1548, i64 12
  %1561 = bitcast i8* %1560 to float*
  store float %1554, float* %1561, align 1, !tbaa !2452
  %1562 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1563 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1564 = bitcast %union.vec128_t* %XMM1 to i8*
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 4
  store i64 %1566, i64* %PC
  %1567 = bitcast i8* %1563 to i64*
  %1568 = load i64, i64* %1567, align 1
  %1569 = getelementptr inbounds i8, i8* %1563, i64 8
  %1570 = bitcast i8* %1569 to i64*
  %1571 = load i64, i64* %1570, align 1
  %1572 = bitcast i8* %1564 to i64*
  %1573 = load i64, i64* %1572, align 1
  %1574 = getelementptr inbounds i8, i8* %1564, i64 8
  %1575 = bitcast i8* %1574 to i64*
  %1576 = load i64, i64* %1575, align 1
  %1577 = and i64 %1573, %1568
  %1578 = and i64 %1576, %1571
  %1579 = trunc i64 %1577 to i32
  %1580 = lshr i64 %1577, 32
  %1581 = trunc i64 %1580 to i32
  %1582 = bitcast i8* %1562 to i32*
  store i32 %1579, i32* %1582, align 1, !tbaa !2454
  %1583 = getelementptr inbounds i8, i8* %1562, i64 4
  %1584 = bitcast i8* %1583 to i32*
  store i32 %1581, i32* %1584, align 1, !tbaa !2454
  %1585 = trunc i64 %1578 to i32
  %1586 = getelementptr inbounds i8, i8* %1562, i64 8
  %1587 = bitcast i8* %1586 to i32*
  store i32 %1585, i32* %1587, align 1, !tbaa !2454
  %1588 = lshr i64 %1578, 32
  %1589 = trunc i64 %1588 to i32
  %1590 = getelementptr inbounds i8, i8* %1562, i64 12
  %1591 = bitcast i8* %1590 to i32*
  store i32 %1589, i32* %1591, align 1, !tbaa !2454
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 896
  %1594 = bitcast %union.vec128_t* %XMM0 to i8*
  %1595 = load i64, i64* %PC
  %1596 = add i64 %1595, 8
  store i64 %1596, i64* %PC
  %1597 = bitcast i8* %1594 to double*
  %1598 = load double, double* %1597, align 1
  %1599 = inttoptr i64 %1593 to double*
  store double %1598, double* %1599
  br label %block_400a8c

block_4015e6:                                     ; preds = %block_401588
  %1600 = sub i64 %4619, 4086
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 5
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 5
  store i64 %1604, i64* %PC
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1606 = load i64, i64* %1605, align 8, !tbaa !2428
  %1607 = add i64 %1606, -8
  %1608 = inttoptr i64 %1607 to i64*
  store i64 %1602, i64* %1608
  store i64 %1607, i64* %1605, align 8, !tbaa !2428
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1600, i64* %1609, align 8, !tbaa !2428
  %1610 = load i64, i64* %PC
  %1611 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %1610, %struct.Memory* %MEMORY.10)
  %1612 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 8
  store i64 %1614, i64* %PC
  %1615 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to double*)
  %1616 = bitcast i8* %1612 to double*
  store double %1615, double* %1616, align 1, !tbaa !2455
  %1617 = getelementptr inbounds i8, i8* %1612, i64 8
  %1618 = bitcast i8* %1617 to double*
  store double 0.000000e+00, double* %1618, align 1, !tbaa !2455
  %1619 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 8
  store i64 %1621, i64* %PC
  %1622 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to double*)
  %1623 = bitcast i8* %1619 to double*
  store double %1622, double* %1623, align 1, !tbaa !2455
  %1624 = getelementptr inbounds i8, i8* %1619, i64 8
  %1625 = bitcast i8* %1624 to double*
  store double 0.000000e+00, double* %1625, align 1, !tbaa !2455
  %1626 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1627 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1628 = load i64, i64* %RBP
  %1629 = sub i64 %1628, 40
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 5
  store i64 %1631, i64* %PC
  %1632 = bitcast i8* %1627 to <2 x float>*
  %1633 = load <2 x float>, <2 x float>* %1632, align 1
  %1634 = getelementptr inbounds i8, i8* %1627, i64 8
  %1635 = bitcast i8* %1634 to <2 x i32>*
  %1636 = load <2 x i32>, <2 x i32>* %1635, align 1
  %1637 = inttoptr i64 %1629 to float*
  %1638 = load float, float* %1637
  %1639 = extractelement <2 x float> %1633, i32 0
  %1640 = fsub float %1639, %1638
  %1641 = bitcast i8* %1626 to float*
  store float %1640, float* %1641, align 1, !tbaa !2452
  %1642 = bitcast <2 x float> %1633 to <2 x i32>
  %1643 = extractelement <2 x i32> %1642, i32 1
  %1644 = getelementptr inbounds i8, i8* %1626, i64 4
  %1645 = bitcast i8* %1644 to i32*
  store i32 %1643, i32* %1645, align 1, !tbaa !2452
  %1646 = extractelement <2 x i32> %1636, i32 0
  %1647 = getelementptr inbounds i8, i8* %1626, i64 8
  %1648 = bitcast i8* %1647 to i32*
  store i32 %1646, i32* %1648, align 1, !tbaa !2452
  %1649 = extractelement <2 x i32> %1636, i32 1
  %1650 = getelementptr inbounds i8, i8* %1626, i64 12
  %1651 = bitcast i8* %1650 to i32*
  store i32 %1649, i32* %1651, align 1, !tbaa !2452
  %1652 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 9
  store i64 %1654, i64* %PC
  %1655 = bitcast i8* %1652 to <2 x i32>*
  %1656 = load <2 x i32>, <2 x i32>* %1655, align 1
  %1657 = getelementptr inbounds i8, i8* %1652, i64 8
  %1658 = bitcast i8* %1657 to <2 x i32>*
  %1659 = load <2 x i32>, <2 x i32>* %1658, align 1
  %1660 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %1661 = sitofp i32 %1660 to float
  %1662 = bitcast i8* %1652 to float*
  store float %1661, float* %1662, align 1, !tbaa !2452
  %1663 = extractelement <2 x i32> %1656, i32 1
  %1664 = getelementptr inbounds i8, i8* %1652, i64 4
  %1665 = bitcast i8* %1664 to i32*
  store i32 %1663, i32* %1665, align 1, !tbaa !2452
  %1666 = extractelement <2 x i32> %1659, i32 0
  %1667 = bitcast i8* %1657 to i32*
  store i32 %1666, i32* %1667, align 1, !tbaa !2452
  %1668 = extractelement <2 x i32> %1659, i32 1
  %1669 = getelementptr inbounds i8, i8* %1652, i64 12
  %1670 = bitcast i8* %1669 to i32*
  store i32 %1668, i32* %1670, align 1, !tbaa !2452
  %1671 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1672 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1673 = bitcast %union.vec128_t* %XMM3 to i8*
  %1674 = load i64, i64* %PC
  %1675 = add i64 %1674, 4
  store i64 %1675, i64* %PC
  %1676 = bitcast i8* %1672 to <2 x float>*
  %1677 = load <2 x float>, <2 x float>* %1676, align 1
  %1678 = getelementptr inbounds i8, i8* %1672, i64 8
  %1679 = bitcast i8* %1678 to <2 x i32>*
  %1680 = load <2 x i32>, <2 x i32>* %1679, align 1
  %1681 = bitcast i8* %1673 to <2 x float>*
  %1682 = load <2 x float>, <2 x float>* %1681, align 1
  %1683 = extractelement <2 x float> %1677, i32 0
  %1684 = extractelement <2 x float> %1682, i32 0
  %1685 = fdiv float %1683, %1684
  %1686 = bitcast i8* %1671 to float*
  store float %1685, float* %1686, align 1, !tbaa !2452
  %1687 = bitcast <2 x float> %1677 to <2 x i32>
  %1688 = extractelement <2 x i32> %1687, i32 1
  %1689 = getelementptr inbounds i8, i8* %1671, i64 4
  %1690 = bitcast i8* %1689 to i32*
  store i32 %1688, i32* %1690, align 1, !tbaa !2452
  %1691 = extractelement <2 x i32> %1680, i32 0
  %1692 = getelementptr inbounds i8, i8* %1671, i64 8
  %1693 = bitcast i8* %1692 to i32*
  store i32 %1691, i32* %1693, align 1, !tbaa !2452
  %1694 = extractelement <2 x i32> %1680, i32 1
  %1695 = getelementptr inbounds i8, i8* %1671, i64 12
  %1696 = bitcast i8* %1695 to i32*
  store i32 %1694, i32* %1696, align 1, !tbaa !2452
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 8
  store i64 %1698, i64* %PC
  %1699 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1700 = sext i32 %1699 to i64
  store i64 %1700, i64* %RAX, align 8, !tbaa !2428
  %1701 = load i64, i64* %RAX
  %1702 = mul i64 %1701, 4
  %1703 = add i64 %1702, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1704 = bitcast %union.vec128_t* %XMM0 to i8*
  %1705 = load i64, i64* %PC
  %1706 = add i64 %1705, 9
  store i64 %1706, i64* %PC
  %1707 = bitcast i8* %1704 to <2 x float>*
  %1708 = load <2 x float>, <2 x float>* %1707, align 1
  %1709 = extractelement <2 x float> %1708, i32 0
  %1710 = inttoptr i64 %1703 to float*
  store float %1709, float* %1710
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 8
  store i64 %1712, i64* %PC
  %1713 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1714 = sext i32 %1713 to i64
  store i64 %1714, i64* %RAX, align 8, !tbaa !2428
  %1715 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1716 = load i64, i64* %RAX
  %1717 = mul i64 %1716, 4
  %1718 = add i64 %1717, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 9
  store i64 %1720, i64* %PC
  %1721 = inttoptr i64 %1718 to float*
  %1722 = load float, float* %1721
  %1723 = bitcast i8* %1715 to float*
  store float %1722, float* %1723, align 1, !tbaa !2452
  %1724 = getelementptr inbounds i8, i8* %1715, i64 4
  %1725 = bitcast i8* %1724 to float*
  store float 0.000000e+00, float* %1725, align 1, !tbaa !2452
  %1726 = getelementptr inbounds i8, i8* %1715, i64 8
  %1727 = bitcast i8* %1726 to float*
  store float 0.000000e+00, float* %1727, align 1, !tbaa !2452
  %1728 = getelementptr inbounds i8, i8* %1715, i64 12
  %1729 = bitcast i8* %1728 to float*
  store float 0.000000e+00, float* %1729, align 1, !tbaa !2452
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 8
  store i64 %1731, i64* %PC
  %1732 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1733 = sext i32 %1732 to i64
  store i64 %1733, i64* %RAX, align 8, !tbaa !2428
  %1734 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1735 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1736 = load i64, i64* %RAX
  %1737 = mul i64 %1736, 4
  %1738 = add i64 %1737, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1739 = load i64, i64* %PC
  %1740 = add i64 %1739, 9
  store i64 %1740, i64* %PC
  %1741 = bitcast i8* %1735 to <2 x float>*
  %1742 = load <2 x float>, <2 x float>* %1741, align 1
  %1743 = getelementptr inbounds i8, i8* %1735, i64 8
  %1744 = bitcast i8* %1743 to <2 x i32>*
  %1745 = load <2 x i32>, <2 x i32>* %1744, align 1
  %1746 = inttoptr i64 %1738 to float*
  %1747 = load float, float* %1746
  %1748 = extractelement <2 x float> %1742, i32 0
  %1749 = fadd float %1748, %1747
  %1750 = bitcast i8* %1734 to float*
  store float %1749, float* %1750, align 1, !tbaa !2452
  %1751 = bitcast <2 x float> %1742 to <2 x i32>
  %1752 = extractelement <2 x i32> %1751, i32 1
  %1753 = getelementptr inbounds i8, i8* %1734, i64 4
  %1754 = bitcast i8* %1753 to i32*
  store i32 %1752, i32* %1754, align 1, !tbaa !2452
  %1755 = extractelement <2 x i32> %1745, i32 0
  %1756 = getelementptr inbounds i8, i8* %1734, i64 8
  %1757 = bitcast i8* %1756 to i32*
  store i32 %1755, i32* %1757, align 1, !tbaa !2452
  %1758 = extractelement <2 x i32> %1745, i32 1
  %1759 = getelementptr inbounds i8, i8* %1734, i64 12
  %1760 = bitcast i8* %1759 to i32*
  store i32 %1758, i32* %1760, align 1, !tbaa !2452
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 16
  %1763 = bitcast %union.vec128_t* %XMM0 to i8*
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 5
  store i64 %1765, i64* %PC
  %1766 = bitcast i8* %1763 to <2 x float>*
  %1767 = load <2 x float>, <2 x float>* %1766, align 1
  %1768 = extractelement <2 x float> %1767, i32 0
  %1769 = inttoptr i64 %1762 to float*
  store float %1768, float* %1769
  %1770 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1771 = load i64, i64* %RBP
  %1772 = sub i64 %1771, 16
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 5
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1772 to float*
  %1776 = load float, float* %1775
  %1777 = bitcast i8* %1770 to float*
  store float %1776, float* %1777, align 1, !tbaa !2452
  %1778 = getelementptr inbounds i8, i8* %1770, i64 4
  %1779 = bitcast i8* %1778 to float*
  store float 0.000000e+00, float* %1779, align 1, !tbaa !2452
  %1780 = getelementptr inbounds i8, i8* %1770, i64 8
  %1781 = bitcast i8* %1780 to float*
  store float 0.000000e+00, float* %1781, align 1, !tbaa !2452
  %1782 = getelementptr inbounds i8, i8* %1770, i64 12
  %1783 = bitcast i8* %1782 to float*
  store float 0.000000e+00, float* %1783, align 1, !tbaa !2452
  %1784 = load i64, i64* %PC
  %1785 = add i64 %1784, 8
  store i64 %1785, i64* %PC
  %1786 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1787 = sext i32 %1786 to i64
  store i64 %1787, i64* %RAX, align 8, !tbaa !2428
  %1788 = load i64, i64* %RAX
  %1789 = mul i64 %1788, 4
  %1790 = add i64 %1789, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1791 = bitcast %union.vec128_t* %XMM0 to i8*
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 9
  store i64 %1793, i64* %PC
  %1794 = bitcast i8* %1791 to <2 x float>*
  %1795 = load <2 x float>, <2 x float>* %1794, align 1
  %1796 = extractelement <2 x float> %1795, i32 0
  %1797 = inttoptr i64 %1790 to float*
  store float %1796, float* %1797
  %1798 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1799 = load i64, i64* %RBP
  %1800 = sub i64 %1799, 12
  %1801 = load i64, i64* %PC
  %1802 = add i64 %1801, 5
  store i64 %1802, i64* %PC
  %1803 = inttoptr i64 %1800 to float*
  %1804 = load float, float* %1803
  %1805 = fpext float %1804 to double
  %1806 = bitcast i8* %1798 to double*
  store double %1805, double* %1806, align 1, !tbaa !2455
  %1807 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1808 = load i64, i64* %RBP
  %1809 = sub i64 %1808, 16
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 5
  store i64 %1811, i64* %PC
  %1812 = inttoptr i64 %1809 to float*
  %1813 = load float, float* %1812
  %1814 = fpext float %1813 to double
  %1815 = bitcast i8* %1807 to double*
  store double %1814, double* %1815, align 1, !tbaa !2455
  %1816 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1817 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1818 = bitcast %union.vec128_t* %XMM3 to i8*
  %1819 = load i64, i64* %PC
  %1820 = add i64 %1819, 4
  store i64 %1820, i64* %PC
  %1821 = bitcast i8* %1817 to double*
  %1822 = load double, double* %1821, align 1
  %1823 = getelementptr inbounds i8, i8* %1817, i64 8
  %1824 = bitcast i8* %1823 to i64*
  %1825 = load i64, i64* %1824, align 1
  %1826 = bitcast i8* %1818 to double*
  %1827 = load double, double* %1826, align 1
  %1828 = fmul double %1822, %1827
  %1829 = bitcast i8* %1816 to double*
  store double %1828, double* %1829, align 1, !tbaa !2455
  %1830 = getelementptr inbounds i8, i8* %1816, i64 8
  %1831 = bitcast i8* %1830 to i64*
  store i64 %1825, i64* %1831, align 1, !tbaa !2455
  %1832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1833 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1834 = bitcast %union.vec128_t* %XMM2 to i8*
  %1835 = load i64, i64* %PC
  %1836 = add i64 %1835, 4
  store i64 %1836, i64* %PC
  %1837 = bitcast i8* %1833 to double*
  %1838 = load double, double* %1837, align 1
  %1839 = getelementptr inbounds i8, i8* %1833, i64 8
  %1840 = bitcast i8* %1839 to i64*
  %1841 = load i64, i64* %1840, align 1
  %1842 = bitcast i8* %1834 to double*
  %1843 = load double, double* %1842, align 1
  %1844 = fdiv double %1838, %1843
  %1845 = bitcast i8* %1832 to double*
  store double %1844, double* %1845, align 1, !tbaa !2455
  %1846 = getelementptr inbounds i8, i8* %1832, i64 8
  %1847 = bitcast i8* %1846 to i64*
  store i64 %1841, i64* %1847, align 1, !tbaa !2455
  %1848 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1849 = bitcast %union.vec128_t* %XMM0 to i8*
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 4
  store i64 %1851, i64* %PC
  %1852 = bitcast i8* %1848 to <2 x i32>*
  %1853 = load <2 x i32>, <2 x i32>* %1852, align 1
  %1854 = getelementptr inbounds i8, i8* %1848, i64 8
  %1855 = bitcast i8* %1854 to <2 x i32>*
  %1856 = load <2 x i32>, <2 x i32>* %1855, align 1
  %1857 = bitcast i8* %1849 to double*
  %1858 = load double, double* %1857, align 1
  %1859 = fptrunc double %1858 to float
  %1860 = bitcast i8* %1848 to float*
  store float %1859, float* %1860, align 1, !tbaa !2452
  %1861 = extractelement <2 x i32> %1853, i32 1
  %1862 = getelementptr inbounds i8, i8* %1848, i64 4
  %1863 = bitcast i8* %1862 to i32*
  store i32 %1861, i32* %1863, align 1, !tbaa !2452
  %1864 = extractelement <2 x i32> %1856, i32 0
  %1865 = bitcast i8* %1854 to i32*
  store i32 %1864, i32* %1865, align 1, !tbaa !2452
  %1866 = extractelement <2 x i32> %1856, i32 1
  %1867 = getelementptr inbounds i8, i8* %1848, i64 12
  %1868 = bitcast i8* %1867 to i32*
  store i32 %1866, i32* %1868, align 1, !tbaa !2452
  %1869 = load i64, i64* %PC
  %1870 = add i64 %1869, 8
  store i64 %1870, i64* %PC
  %1871 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1872 = sext i32 %1871 to i64
  store i64 %1872, i64* %RAX, align 8, !tbaa !2428
  %1873 = load i64, i64* %RAX
  %1874 = mul i64 %1873, 4
  %1875 = add i64 %1874, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1876 = bitcast %union.vec128_t* %XMM0 to i8*
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 9
  store i64 %1878, i64* %PC
  %1879 = bitcast i8* %1876 to <2 x float>*
  %1880 = load <2 x float>, <2 x float>* %1879, align 1
  %1881 = extractelement <2 x float> %1880, i32 0
  %1882 = inttoptr i64 %1875 to float*
  store float %1881, float* %1882
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 8
  store i64 %1884, i64* %PC
  %1885 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1886 = sext i32 %1885 to i64
  store i64 %1886, i64* %RAX, align 8, !tbaa !2428
  %1887 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1888 = load i64, i64* %RAX
  %1889 = mul i64 %1888, 4
  %1890 = add i64 %1889, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1891 = load i64, i64* %PC
  %1892 = add i64 %1891, 9
  store i64 %1892, i64* %PC
  %1893 = inttoptr i64 %1890 to float*
  %1894 = load float, float* %1893
  %1895 = fpext float %1894 to double
  %1896 = bitcast i8* %1887 to double*
  store double %1895, double* %1896, align 1, !tbaa !2455
  %1897 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1898 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1899 = bitcast %union.vec128_t* %XMM0 to i8*
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 4
  store i64 %1901, i64* %PC
  %1902 = bitcast i8* %1898 to double*
  %1903 = load double, double* %1902, align 1
  %1904 = getelementptr inbounds i8, i8* %1898, i64 8
  %1905 = bitcast i8* %1904 to i64*
  %1906 = load i64, i64* %1905, align 1
  %1907 = bitcast i8* %1899 to double*
  %1908 = load double, double* %1907, align 1
  %1909 = fdiv double %1903, %1908
  %1910 = bitcast i8* %1897 to double*
  store double %1909, double* %1910, align 1, !tbaa !2455
  %1911 = getelementptr inbounds i8, i8* %1897, i64 8
  %1912 = bitcast i8* %1911 to i64*
  store i64 %1906, i64* %1912, align 1, !tbaa !2455
  %1913 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1914 = bitcast %union.vec128_t* %XMM1 to i8*
  %1915 = load i64, i64* %PC
  %1916 = add i64 %1915, 4
  store i64 %1916, i64* %PC
  %1917 = bitcast i8* %1913 to <2 x i32>*
  %1918 = load <2 x i32>, <2 x i32>* %1917, align 1
  %1919 = getelementptr inbounds i8, i8* %1913, i64 8
  %1920 = bitcast i8* %1919 to <2 x i32>*
  %1921 = load <2 x i32>, <2 x i32>* %1920, align 1
  %1922 = bitcast i8* %1914 to double*
  %1923 = load double, double* %1922, align 1
  %1924 = fptrunc double %1923 to float
  %1925 = bitcast i8* %1913 to float*
  store float %1924, float* %1925, align 1, !tbaa !2452
  %1926 = extractelement <2 x i32> %1918, i32 1
  %1927 = getelementptr inbounds i8, i8* %1913, i64 4
  %1928 = bitcast i8* %1927 to i32*
  store i32 %1926, i32* %1928, align 1, !tbaa !2452
  %1929 = extractelement <2 x i32> %1921, i32 0
  %1930 = bitcast i8* %1919 to i32*
  store i32 %1929, i32* %1930, align 1, !tbaa !2452
  %1931 = extractelement <2 x i32> %1921, i32 1
  %1932 = getelementptr inbounds i8, i8* %1913, i64 12
  %1933 = bitcast i8* %1932 to i32*
  store i32 %1931, i32* %1933, align 1, !tbaa !2452
  %1934 = load i64, i64* %PC
  %1935 = add i64 %1934, 8
  store i64 %1935, i64* %PC
  %1936 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1937 = sext i32 %1936 to i64
  store i64 %1937, i64* %RAX, align 8, !tbaa !2428
  %1938 = load i64, i64* %RAX
  %1939 = mul i64 %1938, 4
  %1940 = add i64 %1939, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1941 = bitcast %union.vec128_t* %XMM0 to i8*
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 9
  store i64 %1943, i64* %PC
  %1944 = bitcast i8* %1941 to <2 x float>*
  %1945 = load <2 x float>, <2 x float>* %1944, align 1
  %1946 = extractelement <2 x float> %1945, i32 0
  %1947 = inttoptr i64 %1940 to float*
  store float %1946, float* %1947
  %1948 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1949 = load i64, i64* %RBP
  %1950 = sub i64 %1949, 16
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 5
  store i64 %1952, i64* %PC
  %1953 = inttoptr i64 %1950 to float*
  %1954 = load float, float* %1953
  %1955 = bitcast i8* %1948 to float*
  store float %1954, float* %1955, align 1, !tbaa !2452
  %1956 = getelementptr inbounds i8, i8* %1948, i64 4
  %1957 = bitcast i8* %1956 to float*
  store float 0.000000e+00, float* %1957, align 1, !tbaa !2452
  %1958 = getelementptr inbounds i8, i8* %1948, i64 8
  %1959 = bitcast i8* %1958 to float*
  store float 0.000000e+00, float* %1959, align 1, !tbaa !2452
  %1960 = getelementptr inbounds i8, i8* %1948, i64 12
  %1961 = bitcast i8* %1960 to float*
  store float 0.000000e+00, float* %1961, align 1, !tbaa !2452
  %1962 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1963 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1964 = load i64, i64* %RBP
  %1965 = sub i64 %1964, 8
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 5
  store i64 %1967, i64* %PC
  %1968 = bitcast i8* %1963 to <2 x float>*
  %1969 = load <2 x float>, <2 x float>* %1968, align 1
  %1970 = getelementptr inbounds i8, i8* %1963, i64 8
  %1971 = bitcast i8* %1970 to <2 x i32>*
  %1972 = load <2 x i32>, <2 x i32>* %1971, align 1
  %1973 = inttoptr i64 %1965 to float*
  %1974 = load float, float* %1973
  %1975 = extractelement <2 x float> %1969, i32 0
  %1976 = fdiv float %1975, %1974
  %1977 = bitcast i8* %1962 to float*
  store float %1976, float* %1977, align 1, !tbaa !2452
  %1978 = bitcast <2 x float> %1969 to <2 x i32>
  %1979 = extractelement <2 x i32> %1978, i32 1
  %1980 = getelementptr inbounds i8, i8* %1962, i64 4
  %1981 = bitcast i8* %1980 to i32*
  store i32 %1979, i32* %1981, align 1, !tbaa !2452
  %1982 = extractelement <2 x i32> %1972, i32 0
  %1983 = getelementptr inbounds i8, i8* %1962, i64 8
  %1984 = bitcast i8* %1983 to i32*
  store i32 %1982, i32* %1984, align 1, !tbaa !2452
  %1985 = extractelement <2 x i32> %1972, i32 1
  %1986 = getelementptr inbounds i8, i8* %1962, i64 12
  %1987 = bitcast i8* %1986 to i32*
  store i32 %1985, i32* %1987, align 1, !tbaa !2452
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 8
  store i64 %1989, i64* %PC
  %1990 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1991 = sext i32 %1990 to i64
  store i64 %1991, i64* %RAX, align 8, !tbaa !2428
  %1992 = load i64, i64* %RAX
  %1993 = mul i64 %1992, 4
  %1994 = add i64 %1993, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1995 = bitcast %union.vec128_t* %XMM0 to i8*
  %1996 = load i64, i64* %PC
  %1997 = add i64 %1996, 9
  store i64 %1997, i64* %PC
  %1998 = bitcast i8* %1995 to <2 x float>*
  %1999 = load <2 x float>, <2 x float>* %1998, align 1
  %2000 = extractelement <2 x float> %1999, i32 0
  %2001 = inttoptr i64 %1994 to float*
  store float %2000, float* %2001
  %2002 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2003 = load i64, i64* %PC
  %2004 = add i64 %2003, 9
  store i64 %2004, i64* %PC
  %2005 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %2006 = bitcast i8* %2002 to float*
  store float %2005, float* %2006, align 1, !tbaa !2452
  %2007 = getelementptr inbounds i8, i8* %2002, i64 4
  %2008 = bitcast i8* %2007 to float*
  store float 0.000000e+00, float* %2008, align 1, !tbaa !2452
  %2009 = getelementptr inbounds i8, i8* %2002, i64 8
  %2010 = bitcast i8* %2009 to float*
  store float 0.000000e+00, float* %2010, align 1, !tbaa !2452
  %2011 = getelementptr inbounds i8, i8* %2002, i64 12
  %2012 = bitcast i8* %2011 to float*
  store float 0.000000e+00, float* %2012, align 1, !tbaa !2452
  %2013 = load i64, i64* %PC
  %2014 = add i64 %2013, 8
  store i64 %2014, i64* %PC
  %2015 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2016 = sext i32 %2015 to i64
  store i64 %2016, i64* %RAX, align 8, !tbaa !2428
  %2017 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2018 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2019 = load i64, i64* %RAX
  %2020 = mul i64 %2019, 4
  %2021 = add i64 %2020, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %2022 = load i64, i64* %PC
  %2023 = add i64 %2022, 9
  store i64 %2023, i64* %PC
  %2024 = bitcast i8* %2018 to <2 x float>*
  %2025 = load <2 x float>, <2 x float>* %2024, align 1
  %2026 = getelementptr inbounds i8, i8* %2018, i64 8
  %2027 = bitcast i8* %2026 to <2 x i32>*
  %2028 = load <2 x i32>, <2 x i32>* %2027, align 1
  %2029 = inttoptr i64 %2021 to float*
  %2030 = load float, float* %2029
  %2031 = extractelement <2 x float> %2025, i32 0
  %2032 = fadd float %2031, %2030
  %2033 = bitcast i8* %2017 to float*
  store float %2032, float* %2033, align 1, !tbaa !2452
  %2034 = bitcast <2 x float> %2025 to <2 x i32>
  %2035 = extractelement <2 x i32> %2034, i32 1
  %2036 = getelementptr inbounds i8, i8* %2017, i64 4
  %2037 = bitcast i8* %2036 to i32*
  store i32 %2035, i32* %2037, align 1, !tbaa !2452
  %2038 = extractelement <2 x i32> %2028, i32 0
  %2039 = getelementptr inbounds i8, i8* %2017, i64 8
  %2040 = bitcast i8* %2039 to i32*
  store i32 %2038, i32* %2040, align 1, !tbaa !2452
  %2041 = extractelement <2 x i32> %2028, i32 1
  %2042 = getelementptr inbounds i8, i8* %2017, i64 12
  %2043 = bitcast i8* %2042 to i32*
  store i32 %2041, i32* %2043, align 1, !tbaa !2452
  %2044 = bitcast %union.vec128_t* %XMM0 to i8*
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 9
  store i64 %2046, i64* %PC
  %2047 = bitcast i8* %2044 to <2 x float>*
  %2048 = load <2 x float>, <2 x float>* %2047, align 1
  %2049 = extractelement <2 x float> %2048, i32 0
  store float %2049, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 7
  store i64 %2051, i64* %PC
  %2052 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2053 = zext i32 %2052 to i64
  store i64 %2053, i64* %RDI, align 8, !tbaa !2428
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 4479
  %2056 = load i64, i64* %PC
  %2057 = add i64 %2056, 5
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 5
  store i64 %2059, i64* %PC
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2061 = load i64, i64* %2060, align 8, !tbaa !2428
  %2062 = add i64 %2061, -8
  %2063 = inttoptr i64 %2062 to i64*
  store i64 %2057, i64* %2063
  store i64 %2062, i64* %2060, align 8, !tbaa !2428
  %2064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2055, i64* %2064, align 8, !tbaa !2428
  %2065 = load i64, i64* %PC
  %2066 = call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* %0, i64 %2065, %struct.Memory* %1611)
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 7
  store i64 %2068, i64* %PC
  %2069 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2070 = zext i32 %2069 to i64
  store i64 %2070, i64* %RAX, align 8, !tbaa !2428
  %2071 = load i64, i64* %RAX
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 3
  store i64 %2073, i64* %PC
  %2074 = trunc i64 %2071 to i32
  %2075 = add i32 1, %2074
  %2076 = zext i32 %2075 to i64
  store i64 %2076, i64* %RAX, align 8, !tbaa !2428
  %2077 = icmp ult i32 %2075, %2074
  %2078 = icmp ult i32 %2075, 1
  %2079 = or i1 %2077, %2078
  %2080 = zext i1 %2079 to i8
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2080, i8* %2081, align 1, !tbaa !2432
  %2082 = and i32 %2075, 255
  %2083 = call i32 @llvm.ctpop.i32(i32 %2082) #16
  %2084 = trunc i32 %2083 to i8
  %2085 = and i8 %2084, 1
  %2086 = xor i8 %2085, 1
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2086, i8* %2087, align 1, !tbaa !2446
  %2088 = xor i64 1, %2071
  %2089 = trunc i64 %2088 to i32
  %2090 = xor i32 %2089, %2075
  %2091 = lshr i32 %2090, 4
  %2092 = trunc i32 %2091 to i8
  %2093 = and i8 %2092, 1
  %2094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2093, i8* %2094, align 1, !tbaa !2447
  %2095 = icmp eq i32 %2075, 0
  %2096 = zext i1 %2095 to i8
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2096, i8* %2097, align 1, !tbaa !2448
  %2098 = lshr i32 %2075, 31
  %2099 = trunc i32 %2098 to i8
  %2100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2099, i8* %2100, align 1, !tbaa !2449
  %2101 = lshr i32 %2074, 31
  %2102 = xor i32 %2098, %2101
  %2103 = add nuw nsw i32 %2102, %2098
  %2104 = icmp eq i32 %2103, 2
  %2105 = zext i1 %2104 to i8
  %2106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2105, i8* %2106, align 1, !tbaa !2450
  %2107 = load i32, i32* %EAX
  %2108 = zext i32 %2107 to i64
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 7
  store i64 %2110, i64* %PC
  store i32 %2107, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2111 = load i64, i64* %PC
  %2112 = sub i64 %2111, 618
  %2113 = load i64, i64* %PC
  %2114 = add i64 %2113, 5
  store i64 %2114, i64* %PC
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2112, i64* %2115, align 8, !tbaa !2428
  br label %block_40149d

block_401369:                                     ; preds = %block_401379, %block_4012f1
  %MEMORY.4 = phi %struct.Memory* [ %1171, %block_4012f1 ], [ %7059, %block_401379 ]
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 7
  store i64 %2117, i64* %PC
  %2118 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2119 = zext i32 %2118 to i64
  store i64 %2119, i64* %RAX, align 8, !tbaa !2428
  %2120 = load i32, i32* %EAX
  %2121 = zext i32 %2120 to i64
  %2122 = load i64, i64* %RBP
  %2123 = sub i64 %2122, 68
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 3
  store i64 %2125, i64* %PC
  %2126 = inttoptr i64 %2123 to i32*
  %2127 = load i32, i32* %2126
  %2128 = sub i32 %2120, %2127
  %2129 = icmp ult i32 %2120, %2127
  %2130 = zext i1 %2129 to i8
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2130, i8* %2131, align 1, !tbaa !2432
  %2132 = and i32 %2128, 255
  %2133 = call i32 @llvm.ctpop.i32(i32 %2132) #16
  %2134 = trunc i32 %2133 to i8
  %2135 = and i8 %2134, 1
  %2136 = xor i8 %2135, 1
  %2137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2136, i8* %2137, align 1, !tbaa !2446
  %2138 = xor i32 %2127, %2120
  %2139 = xor i32 %2138, %2128
  %2140 = lshr i32 %2139, 4
  %2141 = trunc i32 %2140 to i8
  %2142 = and i8 %2141, 1
  %2143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2142, i8* %2143, align 1, !tbaa !2447
  %2144 = icmp eq i32 %2128, 0
  %2145 = zext i1 %2144 to i8
  %2146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2145, i8* %2146, align 1, !tbaa !2448
  %2147 = lshr i32 %2128, 31
  %2148 = trunc i32 %2147 to i8
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2148, i8* %2149, align 1, !tbaa !2449
  %2150 = lshr i32 %2120, 31
  %2151 = lshr i32 %2127, 31
  %2152 = xor i32 %2151, %2150
  %2153 = xor i32 %2147, %2150
  %2154 = add nuw nsw i32 %2153, %2152
  %2155 = icmp eq i32 %2154, 2
  %2156 = zext i1 %2155 to i8
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2156, i8* %2157, align 1, !tbaa !2450
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 71
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 6
  %2162 = load i64, i64* %PC
  %2163 = add i64 %2162, 6
  store i64 %2163, i64* %PC
  %2164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2165 = load i8, i8* %2164, align 1, !tbaa !2449
  %2166 = icmp ne i8 %2165, 0
  %2167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2168 = load i8, i8* %2167, align 1, !tbaa !2450
  %2169 = icmp ne i8 %2168, 0
  %2170 = xor i1 %2166, %2169
  %2171 = xor i1 %2170, true
  %2172 = zext i1 %2171 to i8
  store i8 %2172, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2174 = select i1 %2170, i64 %2161, i64 %2159
  store i64 %2174, i64* %2173, align 8, !tbaa !2428
  %2175 = load i8, i8* %BRANCH_TAKEN
  %2176 = icmp eq i8 %2175, 1
  %2177 = load i64, i64* %PC
  br i1 %2176, label %block_4013ba, label %block_401379

block_4010a5:                                     ; preds = %block_401090, %block_4010b9
  %MEMORY.5 = phi %struct.Memory* [ %6316, %block_401090 ], [ %4835, %block_4010b9 ]
  %2178 = load i64, i64* %PC
  %2179 = add i64 %2178, 7
  store i64 %2179, i64* %PC
  %2180 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2181 = zext i32 %2180 to i64
  store i64 %2181, i64* %RAX, align 8, !tbaa !2428
  %2182 = load i32, i32* %EAX
  %2183 = zext i32 %2182 to i64
  %2184 = load i64, i64* %PC
  %2185 = add i64 %2184, 7
  store i64 %2185, i64* %PC
  %2186 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %2187 = sub i32 %2182, %2186
  %2188 = icmp ult i32 %2182, %2186
  %2189 = zext i1 %2188 to i8
  %2190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2189, i8* %2190, align 1, !tbaa !2432
  %2191 = and i32 %2187, 255
  %2192 = call i32 @llvm.ctpop.i32(i32 %2191) #16
  %2193 = trunc i32 %2192 to i8
  %2194 = and i8 %2193, 1
  %2195 = xor i8 %2194, 1
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2195, i8* %2196, align 1, !tbaa !2446
  %2197 = xor i32 %2186, %2182
  %2198 = xor i32 %2197, %2187
  %2199 = lshr i32 %2198, 4
  %2200 = trunc i32 %2199 to i8
  %2201 = and i8 %2200, 1
  %2202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2201, i8* %2202, align 1, !tbaa !2447
  %2203 = icmp eq i32 %2187, 0
  %2204 = zext i1 %2203 to i8
  %2205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2204, i8* %2205, align 1, !tbaa !2448
  %2206 = lshr i32 %2187, 31
  %2207 = trunc i32 %2206 to i8
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2207, i8* %2208, align 1, !tbaa !2449
  %2209 = lshr i32 %2182, 31
  %2210 = lshr i32 %2186, 31
  %2211 = xor i32 %2210, %2209
  %2212 = xor i32 %2206, %2209
  %2213 = add nuw nsw i32 %2212, %2211
  %2214 = icmp eq i32 %2213, 2
  %2215 = zext i1 %2214 to i8
  %2216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2215, i8* %2216, align 1, !tbaa !2450
  %2217 = load i64, i64* %PC
  %2218 = add i64 %2217, 120
  %2219 = load i64, i64* %PC
  %2220 = add i64 %2219, 6
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 6
  store i64 %2222, i64* %PC
  %2223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2224 = load i8, i8* %2223, align 1, !tbaa !2449
  %2225 = icmp ne i8 %2224, 0
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2227 = load i8, i8* %2226, align 1, !tbaa !2450
  %2228 = icmp ne i8 %2227, 0
  %2229 = xor i1 %2225, %2228
  %2230 = xor i1 %2229, true
  %2231 = zext i1 %2230 to i8
  store i8 %2231, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2233 = select i1 %2229, i64 %2220, i64 %2218
  store i64 %2233, i64* %2232, align 8, !tbaa !2428
  %2234 = load i8, i8* %BRANCH_TAKEN
  %2235 = icmp eq i8 %2234, 1
  %2236 = load i64, i64* %PC
  br i1 %2235, label %block_40112b, label %block_4010b9

block_400ada:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 8
  store i64 %2238, i64* %PC
  %2239 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2240 = sext i32 %2239 to i64
  store i64 %2240, i64* %RAX, align 8, !tbaa !2428
  %2241 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2242 = load i64, i64* %RAX
  %2243 = mul i64 %2242, 4
  %2244 = add i64 %2243, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2245 = load i64, i64* %PC
  %2246 = add i64 %2245, 9
  store i64 %2246, i64* %PC
  %2247 = inttoptr i64 %2244 to float*
  %2248 = load float, float* %2247
  %2249 = fpext float %2248 to double
  %2250 = bitcast i8* %2241 to double*
  store double %2249, double* %2250, align 1, !tbaa !2455
  %2251 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2252 = load i64, i64* %PC
  %2253 = add i64 %2252, 7
  store i64 %2253, i64* %PC
  %2254 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %2255 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %2256 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %2257 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %2258 = bitcast i8* %2251 to float*
  store float %2254, float* %2258, align 1, !tbaa !2452
  %2259 = getelementptr inbounds i8, i8* %2251, i64 4
  %2260 = bitcast i8* %2259 to float*
  store float %2255, float* %2260, align 1, !tbaa !2452
  %2261 = getelementptr inbounds i8, i8* %2251, i64 8
  %2262 = bitcast i8* %2261 to float*
  store float %2256, float* %2262, align 1, !tbaa !2452
  %2263 = getelementptr inbounds i8, i8* %2251, i64 12
  %2264 = bitcast i8* %2263 to float*
  store float %2257, float* %2264, align 1, !tbaa !2452
  %2265 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2266 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2267 = bitcast %union.vec128_t* %XMM1 to i8*
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 4
  store i64 %2269, i64* %PC
  %2270 = bitcast i8* %2266 to i64*
  %2271 = load i64, i64* %2270, align 1
  %2272 = getelementptr inbounds i8, i8* %2266, i64 8
  %2273 = bitcast i8* %2272 to i64*
  %2274 = load i64, i64* %2273, align 1
  %2275 = bitcast i8* %2267 to i64*
  %2276 = load i64, i64* %2275, align 1
  %2277 = getelementptr inbounds i8, i8* %2267, i64 8
  %2278 = bitcast i8* %2277 to i64*
  %2279 = load i64, i64* %2278, align 1
  %2280 = and i64 %2276, %2271
  %2281 = and i64 %2279, %2274
  %2282 = trunc i64 %2280 to i32
  %2283 = lshr i64 %2280, 32
  %2284 = trunc i64 %2283 to i32
  %2285 = bitcast i8* %2265 to i32*
  store i32 %2282, i32* %2285, align 1, !tbaa !2454
  %2286 = getelementptr inbounds i8, i8* %2265, i64 4
  %2287 = bitcast i8* %2286 to i32*
  store i32 %2284, i32* %2287, align 1, !tbaa !2454
  %2288 = trunc i64 %2281 to i32
  %2289 = getelementptr inbounds i8, i8* %2265, i64 8
  %2290 = bitcast i8* %2289 to i32*
  store i32 %2288, i32* %2290, align 1, !tbaa !2454
  %2291 = lshr i64 %2281, 32
  %2292 = trunc i64 %2291 to i32
  %2293 = getelementptr inbounds i8, i8* %2265, i64 12
  %2294 = bitcast i8* %2293 to i32*
  store i32 %2292, i32* %2294, align 1, !tbaa !2454
  %2295 = load i64, i64* %RBP
  %2296 = sub i64 %2295, 904
  %2297 = bitcast %union.vec128_t* %XMM0 to i8*
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 8
  store i64 %2299, i64* %PC
  %2300 = bitcast i8* %2297 to double*
  %2301 = load double, double* %2300, align 1
  %2302 = inttoptr i64 %2296 to double*
  store double %2301, double* %2302
  br label %block_400afe

block_400dd9:                                     ; preds = %block_400d88
  %2303 = sub i64 %6931, 2025
  %2304 = load i64, i64* %PC
  %2305 = add i64 %2304, 5
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 5
  store i64 %2307, i64* %PC
  %2308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2309 = load i64, i64* %2308, align 8, !tbaa !2428
  %2310 = add i64 %2309, -8
  %2311 = inttoptr i64 %2310 to i64*
  store i64 %2305, i64* %2311
  store i64 %2310, i64* %2308, align 8, !tbaa !2428
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2303, i64* %2312, align 8, !tbaa !2428
  %2313 = load i64, i64* %PC
  %2314 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %2313, %struct.Memory* %MEMORY.18)
  %2315 = load i64, i64* %PC
  %2316 = add i64 %2315, 10
  store i64 %2316, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  %2317 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2318 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2319 = bitcast %union.vec128_t* %XMM1 to i8*
  %2320 = load i64, i64* %PC
  %2321 = add i64 %2320, 3
  store i64 %2321, i64* %PC
  %2322 = bitcast i8* %2318 to i64*
  %2323 = load i64, i64* %2322, align 1
  %2324 = getelementptr inbounds i8, i8* %2318, i64 8
  %2325 = bitcast i8* %2324 to i64*
  %2326 = load i64, i64* %2325, align 1
  %2327 = bitcast i8* %2319 to i64*
  %2328 = load i64, i64* %2327, align 1
  %2329 = getelementptr inbounds i8, i8* %2319, i64 8
  %2330 = bitcast i8* %2329 to i64*
  %2331 = load i64, i64* %2330, align 1
  %2332 = xor i64 %2328, %2323
  %2333 = xor i64 %2331, %2326
  %2334 = trunc i64 %2332 to i32
  %2335 = lshr i64 %2332, 32
  %2336 = trunc i64 %2335 to i32
  %2337 = bitcast i8* %2317 to i32*
  store i32 %2334, i32* %2337, align 1, !tbaa !2454
  %2338 = getelementptr inbounds i8, i8* %2317, i64 4
  %2339 = bitcast i8* %2338 to i32*
  store i32 %2336, i32* %2339, align 1, !tbaa !2454
  %2340 = trunc i64 %2333 to i32
  %2341 = getelementptr inbounds i8, i8* %2317, i64 8
  %2342 = bitcast i8* %2341 to i32*
  store i32 %2340, i32* %2342, align 1, !tbaa !2454
  %2343 = lshr i64 %2333, 32
  %2344 = trunc i64 %2343 to i32
  %2345 = getelementptr inbounds i8, i8* %2317, i64 12
  %2346 = bitcast i8* %2345 to i32*
  store i32 %2344, i32* %2346, align 1, !tbaa !2454
  %2347 = load i64, i64* %RBP
  %2348 = sub i64 %2347, 84
  %2349 = bitcast %union.vec128_t* %XMM0 to i8*
  %2350 = load i64, i64* %PC
  %2351 = add i64 %2350, 5
  store i64 %2351, i64* %PC
  %2352 = bitcast i8* %2349 to <2 x float>*
  %2353 = load <2 x float>, <2 x float>* %2352, align 1
  %2354 = extractelement <2 x float> %2353, i32 0
  %2355 = inttoptr i64 %2348 to float*
  store float %2354, float* %2355
  %2356 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2357 = load i64, i64* %RBP
  %2358 = sub i64 %2357, 84
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 5
  store i64 %2360, i64* %PC
  %2361 = inttoptr i64 %2358 to float*
  %2362 = load float, float* %2361
  %2363 = bitcast i8* %2356 to float*
  store float %2362, float* %2363, align 1, !tbaa !2452
  %2364 = getelementptr inbounds i8, i8* %2356, i64 4
  %2365 = bitcast i8* %2364 to float*
  store float 0.000000e+00, float* %2365, align 1, !tbaa !2452
  %2366 = getelementptr inbounds i8, i8* %2356, i64 8
  %2367 = bitcast i8* %2366 to float*
  store float 0.000000e+00, float* %2367, align 1, !tbaa !2452
  %2368 = getelementptr inbounds i8, i8* %2356, i64 12
  %2369 = bitcast i8* %2368 to float*
  store float 0.000000e+00, float* %2369, align 1, !tbaa !2452
  %2370 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2371 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2372 = load i64, i64* %RBP
  %2373 = sub i64 %2372, 80
  %2374 = load i64, i64* %PC
  %2375 = add i64 %2374, 5
  store i64 %2375, i64* %PC
  %2376 = bitcast i8* %2371 to <2 x float>*
  %2377 = load <2 x float>, <2 x float>* %2376, align 1
  %2378 = getelementptr inbounds i8, i8* %2371, i64 8
  %2379 = bitcast i8* %2378 to <2 x i32>*
  %2380 = load <2 x i32>, <2 x i32>* %2379, align 1
  %2381 = inttoptr i64 %2373 to float*
  %2382 = load float, float* %2381
  %2383 = extractelement <2 x float> %2377, i32 0
  %2384 = fsub float %2383, %2382
  %2385 = bitcast i8* %2370 to float*
  store float %2384, float* %2385, align 1, !tbaa !2452
  %2386 = bitcast <2 x float> %2377 to <2 x i32>
  %2387 = extractelement <2 x i32> %2386, i32 1
  %2388 = getelementptr inbounds i8, i8* %2370, i64 4
  %2389 = bitcast i8* %2388 to i32*
  store i32 %2387, i32* %2389, align 1, !tbaa !2452
  %2390 = extractelement <2 x i32> %2380, i32 0
  %2391 = getelementptr inbounds i8, i8* %2370, i64 8
  %2392 = bitcast i8* %2391 to i32*
  store i32 %2390, i32* %2392, align 1, !tbaa !2452
  %2393 = extractelement <2 x i32> %2380, i32 1
  %2394 = getelementptr inbounds i8, i8* %2370, i64 12
  %2395 = bitcast i8* %2394 to i32*
  store i32 %2393, i32* %2395, align 1, !tbaa !2452
  %2396 = load i64, i64* %RBP
  %2397 = sub i64 %2396, 72
  %2398 = bitcast %union.vec128_t* %XMM0 to i8*
  %2399 = load i64, i64* %PC
  %2400 = add i64 %2399, 5
  store i64 %2400, i64* %PC
  %2401 = bitcast i8* %2398 to <2 x float>*
  %2402 = load <2 x float>, <2 x float>* %2401, align 1
  %2403 = extractelement <2 x float> %2402, i32 0
  %2404 = inttoptr i64 %2397 to float*
  store float %2403, float* %2404
  %2405 = load i64, i64* %PC
  %2406 = add i64 %2405, 8
  store i64 %2406, i64* %PC
  %2407 = load i64, i64* @stderr
  store i64 %2407, i64* %RDI, align 8, !tbaa !2428
  %2408 = load i64, i64* %RBP
  %2409 = sub i64 %2408, 68
  %2410 = load i64, i64* %PC
  %2411 = add i64 %2410, 3
  store i64 %2411, i64* %PC
  %2412 = inttoptr i64 %2409 to i32*
  %2413 = load i32, i32* %2412
  %2414 = zext i32 %2413 to i64
  store i64 %2414, i64* %RDX, align 8, !tbaa !2428
  %2415 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2416 = bitcast %union.vec128_t* %XMM1 to i8*
  %2417 = load i64, i64* %PC
  %2418 = add i64 %2417, 3
  store i64 %2418, i64* %PC
  %2419 = bitcast i8* %2416 to <2 x i32>*
  %2420 = load <2 x i32>, <2 x i32>* %2419, align 1
  %2421 = getelementptr inbounds i8, i8* %2416, i64 8
  %2422 = bitcast i8* %2421 to <2 x i32>*
  %2423 = load <2 x i32>, <2 x i32>* %2422, align 1
  %2424 = extractelement <2 x i32> %2420, i32 0
  %2425 = bitcast i8* %2415 to i32*
  store i32 %2424, i32* %2425, align 1, !tbaa !2452
  %2426 = extractelement <2 x i32> %2420, i32 1
  %2427 = getelementptr inbounds i8, i8* %2415, i64 4
  %2428 = bitcast i8* %2427 to i32*
  store i32 %2426, i32* %2428, align 1, !tbaa !2452
  %2429 = extractelement <2 x i32> %2423, i32 0
  %2430 = getelementptr inbounds i8, i8* %2415, i64 8
  %2431 = bitcast i8* %2430 to i32*
  store i32 %2429, i32* %2431, align 1, !tbaa !2452
  %2432 = extractelement <2 x i32> %2423, i32 1
  %2433 = getelementptr inbounds i8, i8* %2415, i64 12
  %2434 = bitcast i8* %2433 to i32*
  store i32 %2432, i32* %2434, align 1, !tbaa !2452
  %2435 = load i64, i64* %PC
  %2436 = add i64 %2435, 2
  store i64 %2436, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %2437 = load i64, i64* %PC
  %2438 = sub i64 %2437, 2335
  %2439 = load i64, i64* %PC
  %2440 = add i64 %2439, 5
  %2441 = load i64, i64* %PC
  %2442 = add i64 %2441, 5
  store i64 %2442, i64* %PC
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2444 = load i64, i64* %2443, align 8, !tbaa !2428
  %2445 = add i64 %2444, -8
  %2446 = inttoptr i64 %2445 to i64*
  store i64 %2440, i64* %2446
  store i64 %2445, i64* %2443, align 8, !tbaa !2428
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2438, i64* %2447, align 8, !tbaa !2428
  %2448 = load i64, i64* %PC
  %2449 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2448, %struct.Memory* %2314)
  %2450 = load i64, i64* %RBP
  %2451 = sub i64 %2450, 64
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 4
  store i64 %2453, i64* %PC
  %2454 = inttoptr i64 %2451 to i32*
  %2455 = load i32, i32* %2454
  %2456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2456, align 1, !tbaa !2432
  %2457 = and i32 %2455, 255
  %2458 = call i32 @llvm.ctpop.i32(i32 %2457) #16
  %2459 = trunc i32 %2458 to i8
  %2460 = and i8 %2459, 1
  %2461 = xor i8 %2460, 1
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2461, i8* %2462, align 1, !tbaa !2446
  %2463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2463, align 1, !tbaa !2447
  %2464 = icmp eq i32 %2455, 0
  %2465 = zext i1 %2464 to i8
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2465, i8* %2466, align 1, !tbaa !2448
  %2467 = lshr i32 %2455, 31
  %2468 = trunc i32 %2467 to i8
  %2469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2468, i8* %2469, align 1, !tbaa !2449
  %2470 = lshr i32 %2455, 31
  %2471 = xor i32 %2467, %2470
  %2472 = add nuw nsw i32 %2471, %2470
  %2473 = icmp eq i32 %2472, 2
  %2474 = zext i1 %2473 to i8
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2474, i8* %2475, align 1, !tbaa !2450
  %2476 = load i64, i64* %RBP
  %2477 = sub i64 %2476, 940
  %2478 = load i32, i32* %EAX
  %2479 = zext i32 %2478 to i64
  %2480 = load i64, i64* %PC
  %2481 = add i64 %2480, 6
  store i64 %2481, i64* %PC
  %2482 = inttoptr i64 %2477 to i32*
  store i32 %2478, i32* %2482
  %2483 = load i64, i64* %PC
  %2484 = add i64 %2483, 15
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 6
  %2487 = load i64, i64* %PC
  %2488 = add i64 %2487, 6
  store i64 %2488, i64* %PC
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2490 = load i8, i8* %2489, align 1, !tbaa !2449
  %2491 = icmp ne i8 %2490, 0
  %2492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2493 = load i8, i8* %2492, align 1, !tbaa !2450
  %2494 = icmp ne i8 %2493, 0
  %2495 = xor i1 %2491, %2494
  %2496 = xor i1 %2495, true
  %2497 = zext i1 %2496 to i8
  store i8 %2497, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2499 = select i1 %2495, i64 %2486, i64 %2484
  store i64 %2499, i64* %2498, align 8, !tbaa !2428
  %2500 = load i8, i8* %BRANCH_TAKEN
  %2501 = icmp eq i8 %2500, 1
  br i1 %2501, label %block_400e2d, label %block_400e24

block_400ed8:                                     ; preds = %block_400ec4
  %2502 = add i64 %3929, 10
  store i64 %2502, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %2503 = load i64, i64* %PC
  %2504 = add i64 %2503, 10
  store i64 %2504, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2505 = load i64, i64* %RBP
  %2506 = sub i64 %2505, 20
  %2507 = load i64, i64* %PC
  %2508 = add i64 %2507, 4
  store i64 %2508, i64* %PC
  store i64 %2506, i64* %R8, align 8, !tbaa !2428
  %2509 = load i64, i64* %PC
  %2510 = add i64 %2509, 7
  store i64 %2510, i64* %PC
  %2511 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %2512 = zext i32 %2511 to i64
  store i64 %2512, i64* %RSI, align 8, !tbaa !2428
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 7
  store i64 %2514, i64* %PC
  %2515 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %2516 = zext i32 %2515 to i64
  store i64 %2516, i64* %RDX, align 8, !tbaa !2428
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 2146
  %2519 = load i64, i64* %PC
  %2520 = add i64 %2519, 5
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 5
  store i64 %2522, i64* %PC
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2524 = load i64, i64* %2523, align 8, !tbaa !2428
  %2525 = add i64 %2524, -8
  %2526 = inttoptr i64 %2525 to i64*
  store i64 %2520, i64* %2526
  store i64 %2525, i64* %2523, align 8, !tbaa !2428
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2518, i64* %2527, align 8, !tbaa !2428
  %2528 = load i64, i64* %PC
  %2529 = call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* %0, i64 %2528, %struct.Memory* %MEMORY.8)
  %2530 = load i64, i64* %PC
  %2531 = add i64 %2530, 10
  store i64 %2531, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %2532 = load i64, i64* %PC
  %2533 = add i64 %2532, 10
  store i64 %2533, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %2534 = load i64, i64* %PC
  %2535 = add i64 %2534, 10
  store i64 %2535, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 7
  store i64 %2537, i64* %PC
  %2538 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %2539 = zext i32 %2538 to i64
  store i64 %2539, i64* %RSI, align 8, !tbaa !2428
  %2540 = load i64, i64* %PC
  %2541 = add i64 %2540, 7
  store i64 %2541, i64* %PC
  %2542 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %2543 = zext i32 %2542 to i64
  store i64 %2543, i64* %RDX, align 8, !tbaa !2428
  %2544 = load i64, i64* %PC
  %2545 = add i64 %2544, 2561
  %2546 = load i64, i64* %PC
  %2547 = add i64 %2546, 5
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 5
  store i64 %2549, i64* %PC
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2551 = load i64, i64* %2550, align 8, !tbaa !2428
  %2552 = add i64 %2551, -8
  %2553 = inttoptr i64 %2552 to i64*
  store i64 %2547, i64* %2553
  store i64 %2552, i64* %2550, align 8, !tbaa !2428
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2545, i64* %2554, align 8, !tbaa !2428
  %2555 = load i64, i64* %PC
  %2556 = call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* %0, i64 %2555, %struct.Memory* %2529)
  %2557 = load i64, i64* %PC
  %2558 = add i64 %2557, 7
  store i64 %2558, i64* %PC
  %2559 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2560 = zext i32 %2559 to i64
  store i64 %2560, i64* %RAX, align 8, !tbaa !2428
  %2561 = load i64, i64* %RAX
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 3
  store i64 %2563, i64* %PC
  %2564 = trunc i64 %2561 to i32
  %2565 = add i32 1, %2564
  %2566 = zext i32 %2565 to i64
  store i64 %2566, i64* %RAX, align 8, !tbaa !2428
  %2567 = icmp ult i32 %2565, %2564
  %2568 = icmp ult i32 %2565, 1
  %2569 = or i1 %2567, %2568
  %2570 = zext i1 %2569 to i8
  %2571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2570, i8* %2571, align 1, !tbaa !2432
  %2572 = and i32 %2565, 255
  %2573 = call i32 @llvm.ctpop.i32(i32 %2572) #16
  %2574 = trunc i32 %2573 to i8
  %2575 = and i8 %2574, 1
  %2576 = xor i8 %2575, 1
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2576, i8* %2577, align 1, !tbaa !2446
  %2578 = xor i64 1, %2561
  %2579 = trunc i64 %2578 to i32
  %2580 = xor i32 %2579, %2565
  %2581 = lshr i32 %2580, 4
  %2582 = trunc i32 %2581 to i8
  %2583 = and i8 %2582, 1
  %2584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2583, i8* %2584, align 1, !tbaa !2447
  %2585 = icmp eq i32 %2565, 0
  %2586 = zext i1 %2585 to i8
  %2587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2586, i8* %2587, align 1, !tbaa !2448
  %2588 = lshr i32 %2565, 31
  %2589 = trunc i32 %2588 to i8
  %2590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2589, i8* %2590, align 1, !tbaa !2449
  %2591 = lshr i32 %2564, 31
  %2592 = xor i32 %2588, %2591
  %2593 = add nuw nsw i32 %2592, %2588
  %2594 = icmp eq i32 %2593, 2
  %2595 = zext i1 %2594 to i8
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2595, i8* %2596, align 1, !tbaa !2450
  %2597 = load i32, i32* %EAX
  %2598 = zext i32 %2597 to i64
  %2599 = load i64, i64* %PC
  %2600 = add i64 %2599, 7
  store i64 %2600, i64* %PC
  store i32 %2597, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2601 = load i64, i64* %PC
  %2602 = sub i64 %2601, 129
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 5
  store i64 %2604, i64* %PC
  %2605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2602, i64* %2605, align 8, !tbaa !2428
  br label %block_400ec4

block_400a56:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %2606 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2607 = load i64, i64* %RBP
  %2608 = sub i64 %2607, 28
  %2609 = load i64, i64* %PC
  %2610 = add i64 %2609, 5
  store i64 %2610, i64* %PC
  %2611 = inttoptr i64 %2608 to float*
  %2612 = load float, float* %2611
  %2613 = fpext float %2612 to double
  %2614 = bitcast i8* %2606 to double*
  store double %2613, double* %2614, align 1, !tbaa !2455
  %2615 = load i64, i64* %RBP
  %2616 = sub i64 %2615, 896
  %2617 = bitcast %union.vec128_t* %XMM0 to i8*
  %2618 = load i64, i64* %PC
  %2619 = add i64 %2618, 8
  store i64 %2619, i64* %PC
  %2620 = bitcast i8* %2617 to double*
  %2621 = load double, double* %2620, align 1
  %2622 = inttoptr i64 %2616 to double*
  store double %2621, double* %2622
  %2623 = load i64, i64* %PC
  %2624 = add i64 %2623, 41
  %2625 = load i64, i64* %PC
  %2626 = add i64 %2625, 5
  store i64 %2626, i64* %PC
  %2627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2624, i64* %2627, align 8, !tbaa !2428
  br label %block_400a8c

block_4014d4:                                     ; preds = %block_4014c0
  %2628 = add i64 %4069, 10
  store i64 %2628, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 10
  store i64 %2630, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2631 = load i64, i64* %RBP
  %2632 = sub i64 %2631, 20
  %2633 = load i64, i64* %PC
  %2634 = add i64 %2633, 4
  store i64 %2634, i64* %PC
  store i64 %2632, i64* %R8, align 8, !tbaa !2428
  %2635 = load i64, i64* %PC
  %2636 = add i64 %2635, 7
  store i64 %2636, i64* %PC
  %2637 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %2638 = zext i32 %2637 to i64
  store i64 %2638, i64* %RSI, align 8, !tbaa !2428
  %2639 = load i64, i64* %PC
  %2640 = add i64 %2639, 7
  store i64 %2640, i64* %PC
  %2641 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %2642 = zext i32 %2641 to i64
  store i64 %2642, i64* %RDX, align 8, !tbaa !2428
  %2643 = load i64, i64* %PC
  %2644 = add i64 %2643, 614
  %2645 = load i64, i64* %PC
  %2646 = add i64 %2645, 5
  %2647 = load i64, i64* %PC
  %2648 = add i64 %2647, 5
  store i64 %2648, i64* %PC
  %2649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2650 = load i64, i64* %2649, align 8, !tbaa !2428
  %2651 = add i64 %2650, -8
  %2652 = inttoptr i64 %2651 to i64*
  store i64 %2646, i64* %2652
  store i64 %2651, i64* %2649, align 8, !tbaa !2428
  %2653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2644, i64* %2653, align 8, !tbaa !2428
  %2654 = load i64, i64* %PC
  %2655 = call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* %0, i64 %2654, %struct.Memory* %MEMORY.9)
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 10
  store i64 %2657, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 10
  store i64 %2659, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 10
  store i64 %2661, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2662 = load i64, i64* %PC
  %2663 = add i64 %2662, 7
  store i64 %2663, i64* %PC
  %2664 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %2665 = zext i32 %2664 to i64
  store i64 %2665, i64* %RSI, align 8, !tbaa !2428
  %2666 = load i64, i64* %PC
  %2667 = add i64 %2666, 7
  store i64 %2667, i64* %PC
  %2668 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %2669 = zext i32 %2668 to i64
  store i64 %2669, i64* %RDX, align 8, !tbaa !2428
  %2670 = load i64, i64* %PC
  %2671 = add i64 %2670, 1029
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 5
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 5
  store i64 %2675, i64* %PC
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2677 = load i64, i64* %2676, align 8, !tbaa !2428
  %2678 = add i64 %2677, -8
  %2679 = inttoptr i64 %2678 to i64*
  store i64 %2673, i64* %2679
  store i64 %2678, i64* %2676, align 8, !tbaa !2428
  %2680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2671, i64* %2680, align 8, !tbaa !2428
  %2681 = load i64, i64* %PC
  %2682 = call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* %0, i64 %2681, %struct.Memory* %2655)
  %2683 = load i64, i64* %PC
  %2684 = add i64 %2683, 7
  store i64 %2684, i64* %PC
  %2685 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2686 = zext i32 %2685 to i64
  store i64 %2686, i64* %RAX, align 8, !tbaa !2428
  %2687 = load i64, i64* %RAX
  %2688 = load i64, i64* %PC
  %2689 = add i64 %2688, 3
  store i64 %2689, i64* %PC
  %2690 = trunc i64 %2687 to i32
  %2691 = add i32 1, %2690
  %2692 = zext i32 %2691 to i64
  store i64 %2692, i64* %RAX, align 8, !tbaa !2428
  %2693 = icmp ult i32 %2691, %2690
  %2694 = icmp ult i32 %2691, 1
  %2695 = or i1 %2693, %2694
  %2696 = zext i1 %2695 to i8
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2696, i8* %2697, align 1, !tbaa !2432
  %2698 = and i32 %2691, 255
  %2699 = call i32 @llvm.ctpop.i32(i32 %2698) #16
  %2700 = trunc i32 %2699 to i8
  %2701 = and i8 %2700, 1
  %2702 = xor i8 %2701, 1
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2702, i8* %2703, align 1, !tbaa !2446
  %2704 = xor i64 1, %2687
  %2705 = trunc i64 %2704 to i32
  %2706 = xor i32 %2705, %2691
  %2707 = lshr i32 %2706, 4
  %2708 = trunc i32 %2707 to i8
  %2709 = and i8 %2708, 1
  %2710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2709, i8* %2710, align 1, !tbaa !2447
  %2711 = icmp eq i32 %2691, 0
  %2712 = zext i1 %2711 to i8
  %2713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2712, i8* %2713, align 1, !tbaa !2448
  %2714 = lshr i32 %2691, 31
  %2715 = trunc i32 %2714 to i8
  %2716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2715, i8* %2716, align 1, !tbaa !2449
  %2717 = lshr i32 %2690, 31
  %2718 = xor i32 %2714, %2717
  %2719 = add nuw nsw i32 %2718, %2714
  %2720 = icmp eq i32 %2719, 2
  %2721 = zext i1 %2720 to i8
  %2722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2721, i8* %2722, align 1, !tbaa !2450
  %2723 = load i32, i32* %EAX
  %2724 = zext i32 %2723 to i64
  %2725 = load i64, i64* %PC
  %2726 = add i64 %2725, 7
  store i64 %2726, i64* %PC
  store i32 %2723, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2727 = load i64, i64* %PC
  %2728 = sub i64 %2727, 129
  %2729 = load i64, i64* %PC
  %2730 = add i64 %2729, 5
  store i64 %2730, i64* %PC
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2728, i64* %2731, align 8, !tbaa !2428
  br label %block_4014c0

block_400fd3:                                     ; preds = %block_400faf, %block_400fc8
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.13, %block_400faf ], [ %MEMORY.13, %block_400fc8 ]
  %2732 = load i64, i64* %PC
  %2733 = add i64 %2732, 10
  store i64 %2733, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  %2734 = load i64, i64* %RDX
  %2735 = load i32, i32* %EDX
  %2736 = zext i32 %2735 to i64
  %2737 = load i64, i64* %PC
  %2738 = add i64 %2737, 2
  store i64 %2738, i64* %PC
  %2739 = xor i64 %2736, %2734
  %2740 = trunc i64 %2739 to i32
  %2741 = and i64 %2739, 4294967295
  store i64 %2741, i64* %RDX, align 8, !tbaa !2428
  %2742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2742, align 1, !tbaa !2432
  %2743 = and i32 %2740, 255
  %2744 = call i32 @llvm.ctpop.i32(i32 %2743) #16
  %2745 = trunc i32 %2744 to i8
  %2746 = and i8 %2745, 1
  %2747 = xor i8 %2746, 1
  %2748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2747, i8* %2748, align 1, !tbaa !2446
  %2749 = icmp eq i32 %2740, 0
  %2750 = zext i1 %2749 to i8
  %2751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2750, i8* %2751, align 1, !tbaa !2448
  %2752 = lshr i32 %2740, 31
  %2753 = trunc i32 %2752 to i8
  %2754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2753, i8* %2754, align 1, !tbaa !2449
  %2755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2755, align 1, !tbaa !2450
  %2756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2756, align 1, !tbaa !2447
  %2757 = load i64, i64* %PC
  %2758 = add i64 %2757, 8
  store i64 %2758, i64* %PC
  %2759 = load i64, i64* @stderr
  store i64 %2759, i64* %RDI, align 8, !tbaa !2428
  %2760 = load i64, i64* %PC
  %2761 = add i64 %2760, 2
  store i64 %2761, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2762 = load i64, i64* %PC
  %2763 = sub i64 %2762, 2809
  %2764 = load i64, i64* %PC
  %2765 = add i64 %2764, 5
  %2766 = load i64, i64* %PC
  %2767 = add i64 %2766, 5
  store i64 %2767, i64* %PC
  %2768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2769 = load i64, i64* %2768, align 8, !tbaa !2428
  %2770 = add i64 %2769, -8
  %2771 = inttoptr i64 %2770 to i64*
  store i64 %2765, i64* %2771
  store i64 %2770, i64* %2768, align 8, !tbaa !2428
  %2772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2763, i64* %2772, align 8, !tbaa !2428
  %2773 = load i64, i64* %PC
  %2774 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2773, %struct.Memory* %MEMORY.6)
  %2775 = load i64, i64* %PC
  %2776 = add i64 %2775, 10
  store i64 %2776, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %2777 = load i64, i64* %PC
  %2778 = add i64 %2777, 8
  store i64 %2778, i64* %PC
  %2779 = load i64, i64* @stderr
  store i64 %2779, i64* %RDI, align 8, !tbaa !2428
  %2780 = load i64, i64* %PC
  %2781 = add i64 %2780, 7
  store i64 %2781, i64* %PC
  %2782 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %2783 = zext i32 %2782 to i64
  store i64 %2783, i64* %RDX, align 8, !tbaa !2428
  %2784 = load i64, i64* %RBP
  %2785 = sub i64 %2784, 956
  %2786 = load i32, i32* %EAX
  %2787 = zext i32 %2786 to i64
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 6
  store i64 %2789, i64* %PC
  %2790 = inttoptr i64 %2785 to i32*
  store i32 %2786, i32* %2790
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 2
  store i64 %2792, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2793 = load i64, i64* %PC
  %2794 = sub i64 %2793, 2847
  %2795 = load i64, i64* %PC
  %2796 = add i64 %2795, 5
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 5
  store i64 %2798, i64* %PC
  %2799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2800 = load i64, i64* %2799, align 8, !tbaa !2428
  %2801 = add i64 %2800, -8
  %2802 = inttoptr i64 %2801 to i64*
  store i64 %2796, i64* %2802
  store i64 %2801, i64* %2799, align 8, !tbaa !2428
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2794, i64* %2803, align 8, !tbaa !2428
  %2804 = load i64, i64* %PC
  %2805 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2804, %struct.Memory* %2774)
  %2806 = load i64, i64* %PC
  %2807 = add i64 %2806, 10
  store i64 %2807, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %2808 = load i64, i64* %PC
  %2809 = add i64 %2808, 8
  store i64 %2809, i64* %PC
  %2810 = load i64, i64* @stderr
  store i64 %2810, i64* %RDI, align 8, !tbaa !2428
  %2811 = load i64, i64* %RBP
  %2812 = sub i64 %2811, 960
  %2813 = load i32, i32* %EAX
  %2814 = zext i32 %2813 to i64
  %2815 = load i64, i64* %PC
  %2816 = add i64 %2815, 6
  store i64 %2816, i64* %PC
  %2817 = inttoptr i64 %2812 to i32*
  store i32 %2813, i32* %2817
  %2818 = load i64, i64* %PC
  %2819 = add i64 %2818, 2
  store i64 %2819, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2820 = load i64, i64* %PC
  %2821 = sub i64 %2820, 2878
  %2822 = load i64, i64* %PC
  %2823 = add i64 %2822, 5
  %2824 = load i64, i64* %PC
  %2825 = add i64 %2824, 5
  store i64 %2825, i64* %PC
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2827 = load i64, i64* %2826, align 8, !tbaa !2428
  %2828 = add i64 %2827, -8
  %2829 = inttoptr i64 %2828 to i64*
  store i64 %2823, i64* %2829
  store i64 %2828, i64* %2826, align 8, !tbaa !2428
  %2830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2821, i64* %2830, align 8, !tbaa !2428
  %2831 = load i64, i64* %PC
  %2832 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2831, %struct.Memory* %2805)
  %2833 = load i64, i64* %PC
  %2834 = add i64 %2833, 10
  store i64 %2834, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %2835 = load i64, i64* %PC
  %2836 = add i64 %2835, 8
  store i64 %2836, i64* %PC
  %2837 = load i64, i64* @stderr
  store i64 %2837, i64* %RDI, align 8, !tbaa !2428
  %2838 = load i64, i64* %RBP
  %2839 = sub i64 %2838, 964
  %2840 = load i32, i32* %EAX
  %2841 = zext i32 %2840 to i64
  %2842 = load i64, i64* %PC
  %2843 = add i64 %2842, 6
  store i64 %2843, i64* %PC
  %2844 = inttoptr i64 %2839 to i32*
  store i32 %2840, i32* %2844
  %2845 = load i64, i64* %PC
  %2846 = add i64 %2845, 2
  store i64 %2846, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2847 = load i64, i64* %PC
  %2848 = sub i64 %2847, 2909
  %2849 = load i64, i64* %PC
  %2850 = add i64 %2849, 5
  %2851 = load i64, i64* %PC
  %2852 = add i64 %2851, 5
  store i64 %2852, i64* %PC
  %2853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2854 = load i64, i64* %2853, align 8, !tbaa !2428
  %2855 = add i64 %2854, -8
  %2856 = inttoptr i64 %2855 to i64*
  store i64 %2850, i64* %2856
  store i64 %2855, i64* %2853, align 8, !tbaa !2428
  %2857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2848, i64* %2857, align 8, !tbaa !2428
  %2858 = load i64, i64* %PC
  %2859 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2858, %struct.Memory* %2832)
  %2860 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2862 = bitcast %union.vec128_t* %XMM0 to i8*
  %2863 = load i64, i64* %PC
  %2864 = add i64 %2863, 3
  store i64 %2864, i64* %PC
  %2865 = bitcast i8* %2861 to i64*
  %2866 = load i64, i64* %2865, align 1
  %2867 = getelementptr inbounds i8, i8* %2861, i64 8
  %2868 = bitcast i8* %2867 to i64*
  %2869 = load i64, i64* %2868, align 1
  %2870 = bitcast i8* %2862 to i64*
  %2871 = load i64, i64* %2870, align 1
  %2872 = getelementptr inbounds i8, i8* %2862, i64 8
  %2873 = bitcast i8* %2872 to i64*
  %2874 = load i64, i64* %2873, align 1
  %2875 = xor i64 %2871, %2866
  %2876 = xor i64 %2874, %2869
  %2877 = trunc i64 %2875 to i32
  %2878 = lshr i64 %2875, 32
  %2879 = trunc i64 %2878 to i32
  %2880 = bitcast i8* %2860 to i32*
  store i32 %2877, i32* %2880, align 1, !tbaa !2454
  %2881 = getelementptr inbounds i8, i8* %2860, i64 4
  %2882 = bitcast i8* %2881 to i32*
  store i32 %2879, i32* %2882, align 1, !tbaa !2454
  %2883 = trunc i64 %2876 to i32
  %2884 = getelementptr inbounds i8, i8* %2860, i64 8
  %2885 = bitcast i8* %2884 to i32*
  store i32 %2883, i32* %2885, align 1, !tbaa !2454
  %2886 = lshr i64 %2876, 32
  %2887 = trunc i64 %2886 to i32
  %2888 = getelementptr inbounds i8, i8* %2860, i64 12
  %2889 = bitcast i8* %2888 to i32*
  store i32 %2887, i32* %2889, align 1, !tbaa !2454
  %2890 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2891 = load i64, i64* %PC
  %2892 = add i64 %2891, 9
  store i64 %2892, i64* %PC
  %2893 = bitcast i8* %2890 to <2 x i32>*
  %2894 = load <2 x i32>, <2 x i32>* %2893, align 1
  %2895 = getelementptr inbounds i8, i8* %2890, i64 8
  %2896 = bitcast i8* %2895 to <2 x i32>*
  %2897 = load <2 x i32>, <2 x i32>* %2896, align 1
  %2898 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %2899 = sitofp i32 %2898 to float
  %2900 = bitcast i8* %2890 to float*
  store float %2899, float* %2900, align 1, !tbaa !2452
  %2901 = extractelement <2 x i32> %2894, i32 1
  %2902 = getelementptr inbounds i8, i8* %2890, i64 4
  %2903 = bitcast i8* %2902 to i32*
  store i32 %2901, i32* %2903, align 1, !tbaa !2452
  %2904 = extractelement <2 x i32> %2897, i32 0
  %2905 = bitcast i8* %2895 to i32*
  store i32 %2904, i32* %2905, align 1, !tbaa !2452
  %2906 = extractelement <2 x i32> %2897, i32 1
  %2907 = getelementptr inbounds i8, i8* %2890, i64 12
  %2908 = bitcast i8* %2907 to i32*
  store i32 %2906, i32* %2908, align 1, !tbaa !2452
  %2909 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2910 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2911 = load i64, i64* %RBP
  %2912 = sub i64 %2911, 72
  %2913 = load i64, i64* %PC
  %2914 = add i64 %2913, 5
  store i64 %2914, i64* %PC
  %2915 = bitcast i8* %2910 to <2 x float>*
  %2916 = load <2 x float>, <2 x float>* %2915, align 1
  %2917 = getelementptr inbounds i8, i8* %2910, i64 8
  %2918 = bitcast i8* %2917 to <2 x i32>*
  %2919 = load <2 x i32>, <2 x i32>* %2918, align 1
  %2920 = inttoptr i64 %2912 to float*
  %2921 = load float, float* %2920
  %2922 = extractelement <2 x float> %2916, i32 0
  %2923 = fmul float %2922, %2921
  %2924 = bitcast i8* %2909 to float*
  store float %2923, float* %2924, align 1, !tbaa !2452
  %2925 = bitcast <2 x float> %2916 to <2 x i32>
  %2926 = extractelement <2 x i32> %2925, i32 1
  %2927 = getelementptr inbounds i8, i8* %2909, i64 4
  %2928 = bitcast i8* %2927 to i32*
  store i32 %2926, i32* %2928, align 1, !tbaa !2452
  %2929 = extractelement <2 x i32> %2919, i32 0
  %2930 = getelementptr inbounds i8, i8* %2909, i64 8
  %2931 = bitcast i8* %2930 to i32*
  store i32 %2929, i32* %2931, align 1, !tbaa !2452
  %2932 = extractelement <2 x i32> %2919, i32 1
  %2933 = getelementptr inbounds i8, i8* %2909, i64 12
  %2934 = bitcast i8* %2933 to i32*
  store i32 %2932, i32* %2934, align 1, !tbaa !2452
  %2935 = load i64, i64* %RBP
  %2936 = sub i64 %2935, 44
  %2937 = bitcast %union.vec128_t* %XMM1 to i8*
  %2938 = load i64, i64* %PC
  %2939 = add i64 %2938, 5
  store i64 %2939, i64* %PC
  %2940 = bitcast i8* %2937 to <2 x float>*
  %2941 = load <2 x float>, <2 x float>* %2940, align 1
  %2942 = extractelement <2 x float> %2941, i32 0
  %2943 = inttoptr i64 %2936 to float*
  store float %2942, float* %2943
  %2944 = bitcast %union.vec128_t* %XMM0 to i8*
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 9
  store i64 %2946, i64* %PC
  %2947 = bitcast i8* %2944 to <2 x float>*
  %2948 = load <2 x float>, <2 x float>* %2947, align 1
  %2949 = extractelement <2 x float> %2948, i32 0
  store float %2949, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %2950 = load i64, i64* %PC
  %2951 = add i64 %2950, 11
  store i64 %2951, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2952 = load i64, i64* %RBP
  %2953 = sub i64 %2952, 968
  %2954 = load i32, i32* %EAX
  %2955 = zext i32 %2954 to i64
  %2956 = load i64, i64* %PC
  %2957 = add i64 %2956, 6
  store i64 %2957, i64* %PC
  %2958 = inttoptr i64 %2953 to i32*
  store i32 %2954, i32* %2958
  br label %block_401082

block_400d6a:                                     ; preds = %block_400e2d, %block_400d23
  %MEMORY.7 = phi %struct.Memory* [ %5999, %block_400d23 ], [ %MEMORY.16, %block_400e2d ]
  %2959 = load i64, i64* %PC
  %2960 = sub i64 %2959, 1914
  %2961 = load i64, i64* %PC
  %2962 = add i64 %2961, 5
  %2963 = load i64, i64* %PC
  %2964 = add i64 %2963, 5
  store i64 %2964, i64* %PC
  %2965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2966 = load i64, i64* %2965, align 8, !tbaa !2428
  %2967 = add i64 %2966, -8
  %2968 = inttoptr i64 %2967 to i64*
  store i64 %2962, i64* %2968
  store i64 %2967, i64* %2965, align 8, !tbaa !2428
  %2969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2960, i64* %2969, align 8, !tbaa !2428
  %2970 = load i64, i64* %PC
  %2971 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %2970, %struct.Memory* %MEMORY.7)
  %2972 = load i64, i64* %RBP
  %2973 = sub i64 %2972, 80
  %2974 = bitcast %union.vec128_t* %XMM0 to i8*
  %2975 = load i64, i64* %PC
  %2976 = add i64 %2975, 5
  store i64 %2976, i64* %PC
  %2977 = bitcast i8* %2974 to <2 x float>*
  %2978 = load <2 x float>, <2 x float>* %2977, align 1
  %2979 = extractelement <2 x float> %2978, i32 0
  %2980 = inttoptr i64 %2973 to float*
  store float %2979, float* %2980
  %2981 = load i64, i64* %RBP
  %2982 = sub i64 %2981, 64
  %2983 = load i64, i64* %PC
  %2984 = add i64 %2983, 3
  store i64 %2984, i64* %PC
  %2985 = inttoptr i64 %2982 to i32*
  %2986 = load i32, i32* %2985
  %2987 = zext i32 %2986 to i64
  store i64 %2987, i64* %RAX, align 8, !tbaa !2428
  %2988 = load i64, i64* %RAX
  %2989 = load i64, i64* %PC
  %2990 = add i64 %2989, 3
  store i64 %2990, i64* %PC
  %2991 = trunc i64 %2988 to i32
  %2992 = add i32 1, %2991
  %2993 = zext i32 %2992 to i64
  store i64 %2993, i64* %RAX, align 8, !tbaa !2428
  %2994 = icmp ult i32 %2992, %2991
  %2995 = icmp ult i32 %2992, 1
  %2996 = or i1 %2994, %2995
  %2997 = zext i1 %2996 to i8
  %2998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2997, i8* %2998, align 1, !tbaa !2432
  %2999 = and i32 %2992, 255
  %3000 = call i32 @llvm.ctpop.i32(i32 %2999) #16
  %3001 = trunc i32 %3000 to i8
  %3002 = and i8 %3001, 1
  %3003 = xor i8 %3002, 1
  %3004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3003, i8* %3004, align 1, !tbaa !2446
  %3005 = xor i64 1, %2988
  %3006 = trunc i64 %3005 to i32
  %3007 = xor i32 %3006, %2992
  %3008 = lshr i32 %3007, 4
  %3009 = trunc i32 %3008 to i8
  %3010 = and i8 %3009, 1
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3010, i8* %3011, align 1, !tbaa !2447
  %3012 = icmp eq i32 %2992, 0
  %3013 = zext i1 %3012 to i8
  %3014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3013, i8* %3014, align 1, !tbaa !2448
  %3015 = lshr i32 %2992, 31
  %3016 = trunc i32 %3015 to i8
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3016, i8* %3017, align 1, !tbaa !2449
  %3018 = lshr i32 %2991, 31
  %3019 = xor i32 %3015, %3018
  %3020 = add nuw nsw i32 %3019, %3015
  %3021 = icmp eq i32 %3020, 2
  %3022 = zext i1 %3021 to i8
  %3023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3022, i8* %3023, align 1, !tbaa !2450
  %3024 = load i64, i64* %RBP
  %3025 = sub i64 %3024, 64
  %3026 = load i32, i32* %EAX
  %3027 = zext i32 %3026 to i64
  %3028 = load i64, i64* %PC
  %3029 = add i64 %3028, 3
  store i64 %3029, i64* %PC
  %3030 = inttoptr i64 %3025 to i32*
  store i32 %3026, i32* %3030
  %3031 = load i64, i64* %PC
  %3032 = add i64 %3031, 11
  store i64 %3032, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_400d88

block_4011cb:                                     ; preds = %block_40116d
  %3033 = sub i64 %1241, 3035
  %3034 = load i64, i64* %PC
  %3035 = add i64 %3034, 5
  %3036 = load i64, i64* %PC
  %3037 = add i64 %3036, 5
  store i64 %3037, i64* %PC
  %3038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3039 = load i64, i64* %3038, align 8, !tbaa !2428
  %3040 = add i64 %3039, -8
  %3041 = inttoptr i64 %3040 to i64*
  store i64 %3035, i64* %3041
  store i64 %3040, i64* %3038, align 8, !tbaa !2428
  %3042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3033, i64* %3042, align 8, !tbaa !2428
  %3043 = load i64, i64* %PC
  %3044 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %3043, %struct.Memory* %MEMORY.1)
  %3045 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3046 = load i64, i64* %PC
  %3047 = add i64 %3046, 8
  store i64 %3047, i64* %PC
  %3048 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to double*)
  %3049 = bitcast i8* %3045 to double*
  store double %3048, double* %3049, align 1, !tbaa !2455
  %3050 = getelementptr inbounds i8, i8* %3045, i64 8
  %3051 = bitcast i8* %3050 to double*
  store double 0.000000e+00, double* %3051, align 1, !tbaa !2455
  %3052 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3053 = load i64, i64* %PC
  %3054 = add i64 %3053, 8
  store i64 %3054, i64* %PC
  %3055 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to double*)
  %3056 = bitcast i8* %3052 to double*
  store double %3055, double* %3056, align 1, !tbaa !2455
  %3057 = getelementptr inbounds i8, i8* %3052, i64 8
  %3058 = bitcast i8* %3057 to double*
  store double 0.000000e+00, double* %3058, align 1, !tbaa !2455
  %3059 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3060 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3061 = load i64, i64* %RBP
  %3062 = sub i64 %3061, 40
  %3063 = load i64, i64* %PC
  %3064 = add i64 %3063, 5
  store i64 %3064, i64* %PC
  %3065 = bitcast i8* %3060 to <2 x float>*
  %3066 = load <2 x float>, <2 x float>* %3065, align 1
  %3067 = getelementptr inbounds i8, i8* %3060, i64 8
  %3068 = bitcast i8* %3067 to <2 x i32>*
  %3069 = load <2 x i32>, <2 x i32>* %3068, align 1
  %3070 = inttoptr i64 %3062 to float*
  %3071 = load float, float* %3070
  %3072 = extractelement <2 x float> %3066, i32 0
  %3073 = fsub float %3072, %3071
  %3074 = bitcast i8* %3059 to float*
  store float %3073, float* %3074, align 1, !tbaa !2452
  %3075 = bitcast <2 x float> %3066 to <2 x i32>
  %3076 = extractelement <2 x i32> %3075, i32 1
  %3077 = getelementptr inbounds i8, i8* %3059, i64 4
  %3078 = bitcast i8* %3077 to i32*
  store i32 %3076, i32* %3078, align 1, !tbaa !2452
  %3079 = extractelement <2 x i32> %3069, i32 0
  %3080 = getelementptr inbounds i8, i8* %3059, i64 8
  %3081 = bitcast i8* %3080 to i32*
  store i32 %3079, i32* %3081, align 1, !tbaa !2452
  %3082 = extractelement <2 x i32> %3069, i32 1
  %3083 = getelementptr inbounds i8, i8* %3059, i64 12
  %3084 = bitcast i8* %3083 to i32*
  store i32 %3082, i32* %3084, align 1, !tbaa !2452
  %3085 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3086 = load i64, i64* %PC
  %3087 = add i64 %3086, 9
  store i64 %3087, i64* %PC
  %3088 = bitcast i8* %3085 to <2 x i32>*
  %3089 = load <2 x i32>, <2 x i32>* %3088, align 1
  %3090 = getelementptr inbounds i8, i8* %3085, i64 8
  %3091 = bitcast i8* %3090 to <2 x i32>*
  %3092 = load <2 x i32>, <2 x i32>* %3091, align 1
  %3093 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3094 = sitofp i32 %3093 to float
  %3095 = bitcast i8* %3085 to float*
  store float %3094, float* %3095, align 1, !tbaa !2452
  %3096 = extractelement <2 x i32> %3089, i32 1
  %3097 = getelementptr inbounds i8, i8* %3085, i64 4
  %3098 = bitcast i8* %3097 to i32*
  store i32 %3096, i32* %3098, align 1, !tbaa !2452
  %3099 = extractelement <2 x i32> %3092, i32 0
  %3100 = bitcast i8* %3090 to i32*
  store i32 %3099, i32* %3100, align 1, !tbaa !2452
  %3101 = extractelement <2 x i32> %3092, i32 1
  %3102 = getelementptr inbounds i8, i8* %3085, i64 12
  %3103 = bitcast i8* %3102 to i32*
  store i32 %3101, i32* %3103, align 1, !tbaa !2452
  %3104 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3105 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3106 = bitcast %union.vec128_t* %XMM3 to i8*
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 4
  store i64 %3108, i64* %PC
  %3109 = bitcast i8* %3105 to <2 x float>*
  %3110 = load <2 x float>, <2 x float>* %3109, align 1
  %3111 = getelementptr inbounds i8, i8* %3105, i64 8
  %3112 = bitcast i8* %3111 to <2 x i32>*
  %3113 = load <2 x i32>, <2 x i32>* %3112, align 1
  %3114 = bitcast i8* %3106 to <2 x float>*
  %3115 = load <2 x float>, <2 x float>* %3114, align 1
  %3116 = extractelement <2 x float> %3110, i32 0
  %3117 = extractelement <2 x float> %3115, i32 0
  %3118 = fdiv float %3116, %3117
  %3119 = bitcast i8* %3104 to float*
  store float %3118, float* %3119, align 1, !tbaa !2452
  %3120 = bitcast <2 x float> %3110 to <2 x i32>
  %3121 = extractelement <2 x i32> %3120, i32 1
  %3122 = getelementptr inbounds i8, i8* %3104, i64 4
  %3123 = bitcast i8* %3122 to i32*
  store i32 %3121, i32* %3123, align 1, !tbaa !2452
  %3124 = extractelement <2 x i32> %3113, i32 0
  %3125 = getelementptr inbounds i8, i8* %3104, i64 8
  %3126 = bitcast i8* %3125 to i32*
  store i32 %3124, i32* %3126, align 1, !tbaa !2452
  %3127 = extractelement <2 x i32> %3113, i32 1
  %3128 = getelementptr inbounds i8, i8* %3104, i64 12
  %3129 = bitcast i8* %3128 to i32*
  store i32 %3127, i32* %3129, align 1, !tbaa !2452
  %3130 = load i64, i64* %PC
  %3131 = add i64 %3130, 8
  store i64 %3131, i64* %PC
  %3132 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3133 = sext i32 %3132 to i64
  store i64 %3133, i64* %RAX, align 8, !tbaa !2428
  %3134 = load i64, i64* %RAX
  %3135 = mul i64 %3134, 4
  %3136 = add i64 %3135, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %3137 = bitcast %union.vec128_t* %XMM0 to i8*
  %3138 = load i64, i64* %PC
  %3139 = add i64 %3138, 9
  store i64 %3139, i64* %PC
  %3140 = bitcast i8* %3137 to <2 x float>*
  %3141 = load <2 x float>, <2 x float>* %3140, align 1
  %3142 = extractelement <2 x float> %3141, i32 0
  %3143 = inttoptr i64 %3136 to float*
  store float %3142, float* %3143
  %3144 = load i64, i64* %PC
  %3145 = add i64 %3144, 8
  store i64 %3145, i64* %PC
  %3146 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3147 = sext i32 %3146 to i64
  store i64 %3147, i64* %RAX, align 8, !tbaa !2428
  %3148 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3149 = load i64, i64* %RAX
  %3150 = mul i64 %3149, 4
  %3151 = add i64 %3150, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3152 = load i64, i64* %PC
  %3153 = add i64 %3152, 9
  store i64 %3153, i64* %PC
  %3154 = inttoptr i64 %3151 to float*
  %3155 = load float, float* %3154
  %3156 = bitcast i8* %3148 to float*
  store float %3155, float* %3156, align 1, !tbaa !2452
  %3157 = getelementptr inbounds i8, i8* %3148, i64 4
  %3158 = bitcast i8* %3157 to float*
  store float 0.000000e+00, float* %3158, align 1, !tbaa !2452
  %3159 = getelementptr inbounds i8, i8* %3148, i64 8
  %3160 = bitcast i8* %3159 to float*
  store float 0.000000e+00, float* %3160, align 1, !tbaa !2452
  %3161 = getelementptr inbounds i8, i8* %3148, i64 12
  %3162 = bitcast i8* %3161 to float*
  store float 0.000000e+00, float* %3162, align 1, !tbaa !2452
  %3163 = load i64, i64* %PC
  %3164 = add i64 %3163, 8
  store i64 %3164, i64* %PC
  %3165 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3166 = sext i32 %3165 to i64
  store i64 %3166, i64* %RAX, align 8, !tbaa !2428
  %3167 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3168 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3169 = load i64, i64* %RAX
  %3170 = mul i64 %3169, 4
  %3171 = add i64 %3170, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %3172 = load i64, i64* %PC
  %3173 = add i64 %3172, 9
  store i64 %3173, i64* %PC
  %3174 = bitcast i8* %3168 to <2 x float>*
  %3175 = load <2 x float>, <2 x float>* %3174, align 1
  %3176 = getelementptr inbounds i8, i8* %3168, i64 8
  %3177 = bitcast i8* %3176 to <2 x i32>*
  %3178 = load <2 x i32>, <2 x i32>* %3177, align 1
  %3179 = inttoptr i64 %3171 to float*
  %3180 = load float, float* %3179
  %3181 = extractelement <2 x float> %3175, i32 0
  %3182 = fadd float %3181, %3180
  %3183 = bitcast i8* %3167 to float*
  store float %3182, float* %3183, align 1, !tbaa !2452
  %3184 = bitcast <2 x float> %3175 to <2 x i32>
  %3185 = extractelement <2 x i32> %3184, i32 1
  %3186 = getelementptr inbounds i8, i8* %3167, i64 4
  %3187 = bitcast i8* %3186 to i32*
  store i32 %3185, i32* %3187, align 1, !tbaa !2452
  %3188 = extractelement <2 x i32> %3178, i32 0
  %3189 = getelementptr inbounds i8, i8* %3167, i64 8
  %3190 = bitcast i8* %3189 to i32*
  store i32 %3188, i32* %3190, align 1, !tbaa !2452
  %3191 = extractelement <2 x i32> %3178, i32 1
  %3192 = getelementptr inbounds i8, i8* %3167, i64 12
  %3193 = bitcast i8* %3192 to i32*
  store i32 %3191, i32* %3193, align 1, !tbaa !2452
  %3194 = load i64, i64* %RBP
  %3195 = sub i64 %3194, 16
  %3196 = bitcast %union.vec128_t* %XMM0 to i8*
  %3197 = load i64, i64* %PC
  %3198 = add i64 %3197, 5
  store i64 %3198, i64* %PC
  %3199 = bitcast i8* %3196 to <2 x float>*
  %3200 = load <2 x float>, <2 x float>* %3199, align 1
  %3201 = extractelement <2 x float> %3200, i32 0
  %3202 = inttoptr i64 %3195 to float*
  store float %3201, float* %3202
  %3203 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3204 = load i64, i64* %RBP
  %3205 = sub i64 %3204, 16
  %3206 = load i64, i64* %PC
  %3207 = add i64 %3206, 5
  store i64 %3207, i64* %PC
  %3208 = inttoptr i64 %3205 to float*
  %3209 = load float, float* %3208
  %3210 = bitcast i8* %3203 to float*
  store float %3209, float* %3210, align 1, !tbaa !2452
  %3211 = getelementptr inbounds i8, i8* %3203, i64 4
  %3212 = bitcast i8* %3211 to float*
  store float 0.000000e+00, float* %3212, align 1, !tbaa !2452
  %3213 = getelementptr inbounds i8, i8* %3203, i64 8
  %3214 = bitcast i8* %3213 to float*
  store float 0.000000e+00, float* %3214, align 1, !tbaa !2452
  %3215 = getelementptr inbounds i8, i8* %3203, i64 12
  %3216 = bitcast i8* %3215 to float*
  store float 0.000000e+00, float* %3216, align 1, !tbaa !2452
  %3217 = load i64, i64* %PC
  %3218 = add i64 %3217, 8
  store i64 %3218, i64* %PC
  %3219 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3220 = sext i32 %3219 to i64
  store i64 %3220, i64* %RAX, align 8, !tbaa !2428
  %3221 = load i64, i64* %RAX
  %3222 = mul i64 %3221, 4
  %3223 = add i64 %3222, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %3224 = bitcast %union.vec128_t* %XMM0 to i8*
  %3225 = load i64, i64* %PC
  %3226 = add i64 %3225, 9
  store i64 %3226, i64* %PC
  %3227 = bitcast i8* %3224 to <2 x float>*
  %3228 = load <2 x float>, <2 x float>* %3227, align 1
  %3229 = extractelement <2 x float> %3228, i32 0
  %3230 = inttoptr i64 %3223 to float*
  store float %3229, float* %3230
  %3231 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3232 = load i64, i64* %RBP
  %3233 = sub i64 %3232, 12
  %3234 = load i64, i64* %PC
  %3235 = add i64 %3234, 5
  store i64 %3235, i64* %PC
  %3236 = inttoptr i64 %3233 to float*
  %3237 = load float, float* %3236
  %3238 = fpext float %3237 to double
  %3239 = bitcast i8* %3231 to double*
  store double %3238, double* %3239, align 1, !tbaa !2455
  %3240 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3241 = load i64, i64* %RBP
  %3242 = sub i64 %3241, 16
  %3243 = load i64, i64* %PC
  %3244 = add i64 %3243, 5
  store i64 %3244, i64* %PC
  %3245 = inttoptr i64 %3242 to float*
  %3246 = load float, float* %3245
  %3247 = fpext float %3246 to double
  %3248 = bitcast i8* %3240 to double*
  store double %3247, double* %3248, align 1, !tbaa !2455
  %3249 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3250 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3251 = bitcast %union.vec128_t* %XMM3 to i8*
  %3252 = load i64, i64* %PC
  %3253 = add i64 %3252, 4
  store i64 %3253, i64* %PC
  %3254 = bitcast i8* %3250 to double*
  %3255 = load double, double* %3254, align 1
  %3256 = getelementptr inbounds i8, i8* %3250, i64 8
  %3257 = bitcast i8* %3256 to i64*
  %3258 = load i64, i64* %3257, align 1
  %3259 = bitcast i8* %3251 to double*
  %3260 = load double, double* %3259, align 1
  %3261 = fmul double %3255, %3260
  %3262 = bitcast i8* %3249 to double*
  store double %3261, double* %3262, align 1, !tbaa !2455
  %3263 = getelementptr inbounds i8, i8* %3249, i64 8
  %3264 = bitcast i8* %3263 to i64*
  store i64 %3258, i64* %3264, align 1, !tbaa !2455
  %3265 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3266 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3267 = bitcast %union.vec128_t* %XMM2 to i8*
  %3268 = load i64, i64* %PC
  %3269 = add i64 %3268, 4
  store i64 %3269, i64* %PC
  %3270 = bitcast i8* %3266 to double*
  %3271 = load double, double* %3270, align 1
  %3272 = getelementptr inbounds i8, i8* %3266, i64 8
  %3273 = bitcast i8* %3272 to i64*
  %3274 = load i64, i64* %3273, align 1
  %3275 = bitcast i8* %3267 to double*
  %3276 = load double, double* %3275, align 1
  %3277 = fdiv double %3271, %3276
  %3278 = bitcast i8* %3265 to double*
  store double %3277, double* %3278, align 1, !tbaa !2455
  %3279 = getelementptr inbounds i8, i8* %3265, i64 8
  %3280 = bitcast i8* %3279 to i64*
  store i64 %3274, i64* %3280, align 1, !tbaa !2455
  %3281 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3282 = bitcast %union.vec128_t* %XMM0 to i8*
  %3283 = load i64, i64* %PC
  %3284 = add i64 %3283, 4
  store i64 %3284, i64* %PC
  %3285 = bitcast i8* %3281 to <2 x i32>*
  %3286 = load <2 x i32>, <2 x i32>* %3285, align 1
  %3287 = getelementptr inbounds i8, i8* %3281, i64 8
  %3288 = bitcast i8* %3287 to <2 x i32>*
  %3289 = load <2 x i32>, <2 x i32>* %3288, align 1
  %3290 = bitcast i8* %3282 to double*
  %3291 = load double, double* %3290, align 1
  %3292 = fptrunc double %3291 to float
  %3293 = bitcast i8* %3281 to float*
  store float %3292, float* %3293, align 1, !tbaa !2452
  %3294 = extractelement <2 x i32> %3286, i32 1
  %3295 = getelementptr inbounds i8, i8* %3281, i64 4
  %3296 = bitcast i8* %3295 to i32*
  store i32 %3294, i32* %3296, align 1, !tbaa !2452
  %3297 = extractelement <2 x i32> %3289, i32 0
  %3298 = bitcast i8* %3287 to i32*
  store i32 %3297, i32* %3298, align 1, !tbaa !2452
  %3299 = extractelement <2 x i32> %3289, i32 1
  %3300 = getelementptr inbounds i8, i8* %3281, i64 12
  %3301 = bitcast i8* %3300 to i32*
  store i32 %3299, i32* %3301, align 1, !tbaa !2452
  %3302 = load i64, i64* %PC
  %3303 = add i64 %3302, 8
  store i64 %3303, i64* %PC
  %3304 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3305 = sext i32 %3304 to i64
  store i64 %3305, i64* %RAX, align 8, !tbaa !2428
  %3306 = load i64, i64* %RAX
  %3307 = mul i64 %3306, 4
  %3308 = add i64 %3307, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %3309 = bitcast %union.vec128_t* %XMM0 to i8*
  %3310 = load i64, i64* %PC
  %3311 = add i64 %3310, 9
  store i64 %3311, i64* %PC
  %3312 = bitcast i8* %3309 to <2 x float>*
  %3313 = load <2 x float>, <2 x float>* %3312, align 1
  %3314 = extractelement <2 x float> %3313, i32 0
  %3315 = inttoptr i64 %3308 to float*
  store float %3314, float* %3315
  %3316 = load i64, i64* %PC
  %3317 = add i64 %3316, 8
  store i64 %3317, i64* %PC
  %3318 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3319 = sext i32 %3318 to i64
  store i64 %3319, i64* %RAX, align 8, !tbaa !2428
  %3320 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3321 = load i64, i64* %RAX
  %3322 = mul i64 %3321, 4
  %3323 = add i64 %3322, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %3324 = load i64, i64* %PC
  %3325 = add i64 %3324, 9
  store i64 %3325, i64* %PC
  %3326 = inttoptr i64 %3323 to float*
  %3327 = load float, float* %3326
  %3328 = fpext float %3327 to double
  %3329 = bitcast i8* %3320 to double*
  store double %3328, double* %3329, align 1, !tbaa !2455
  %3330 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3331 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3332 = bitcast %union.vec128_t* %XMM0 to i8*
  %3333 = load i64, i64* %PC
  %3334 = add i64 %3333, 4
  store i64 %3334, i64* %PC
  %3335 = bitcast i8* %3331 to double*
  %3336 = load double, double* %3335, align 1
  %3337 = getelementptr inbounds i8, i8* %3331, i64 8
  %3338 = bitcast i8* %3337 to i64*
  %3339 = load i64, i64* %3338, align 1
  %3340 = bitcast i8* %3332 to double*
  %3341 = load double, double* %3340, align 1
  %3342 = fdiv double %3336, %3341
  %3343 = bitcast i8* %3330 to double*
  store double %3342, double* %3343, align 1, !tbaa !2455
  %3344 = getelementptr inbounds i8, i8* %3330, i64 8
  %3345 = bitcast i8* %3344 to i64*
  store i64 %3339, i64* %3345, align 1, !tbaa !2455
  %3346 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3347 = bitcast %union.vec128_t* %XMM1 to i8*
  %3348 = load i64, i64* %PC
  %3349 = add i64 %3348, 4
  store i64 %3349, i64* %PC
  %3350 = bitcast i8* %3346 to <2 x i32>*
  %3351 = load <2 x i32>, <2 x i32>* %3350, align 1
  %3352 = getelementptr inbounds i8, i8* %3346, i64 8
  %3353 = bitcast i8* %3352 to <2 x i32>*
  %3354 = load <2 x i32>, <2 x i32>* %3353, align 1
  %3355 = bitcast i8* %3347 to double*
  %3356 = load double, double* %3355, align 1
  %3357 = fptrunc double %3356 to float
  %3358 = bitcast i8* %3346 to float*
  store float %3357, float* %3358, align 1, !tbaa !2452
  %3359 = extractelement <2 x i32> %3351, i32 1
  %3360 = getelementptr inbounds i8, i8* %3346, i64 4
  %3361 = bitcast i8* %3360 to i32*
  store i32 %3359, i32* %3361, align 1, !tbaa !2452
  %3362 = extractelement <2 x i32> %3354, i32 0
  %3363 = bitcast i8* %3352 to i32*
  store i32 %3362, i32* %3363, align 1, !tbaa !2452
  %3364 = extractelement <2 x i32> %3354, i32 1
  %3365 = getelementptr inbounds i8, i8* %3346, i64 12
  %3366 = bitcast i8* %3365 to i32*
  store i32 %3364, i32* %3366, align 1, !tbaa !2452
  %3367 = load i64, i64* %PC
  %3368 = add i64 %3367, 8
  store i64 %3368, i64* %PC
  %3369 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3370 = sext i32 %3369 to i64
  store i64 %3370, i64* %RAX, align 8, !tbaa !2428
  %3371 = load i64, i64* %RAX
  %3372 = mul i64 %3371, 4
  %3373 = add i64 %3372, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %3374 = bitcast %union.vec128_t* %XMM0 to i8*
  %3375 = load i64, i64* %PC
  %3376 = add i64 %3375, 9
  store i64 %3376, i64* %PC
  %3377 = bitcast i8* %3374 to <2 x float>*
  %3378 = load <2 x float>, <2 x float>* %3377, align 1
  %3379 = extractelement <2 x float> %3378, i32 0
  %3380 = inttoptr i64 %3373 to float*
  store float %3379, float* %3380
  %3381 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3382 = load i64, i64* %RBP
  %3383 = sub i64 %3382, 16
  %3384 = load i64, i64* %PC
  %3385 = add i64 %3384, 5
  store i64 %3385, i64* %PC
  %3386 = inttoptr i64 %3383 to float*
  %3387 = load float, float* %3386
  %3388 = bitcast i8* %3381 to float*
  store float %3387, float* %3388, align 1, !tbaa !2452
  %3389 = getelementptr inbounds i8, i8* %3381, i64 4
  %3390 = bitcast i8* %3389 to float*
  store float 0.000000e+00, float* %3390, align 1, !tbaa !2452
  %3391 = getelementptr inbounds i8, i8* %3381, i64 8
  %3392 = bitcast i8* %3391 to float*
  store float 0.000000e+00, float* %3392, align 1, !tbaa !2452
  %3393 = getelementptr inbounds i8, i8* %3381, i64 12
  %3394 = bitcast i8* %3393 to float*
  store float 0.000000e+00, float* %3394, align 1, !tbaa !2452
  %3395 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3396 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3397 = load i64, i64* %RBP
  %3398 = sub i64 %3397, 8
  %3399 = load i64, i64* %PC
  %3400 = add i64 %3399, 5
  store i64 %3400, i64* %PC
  %3401 = bitcast i8* %3396 to <2 x float>*
  %3402 = load <2 x float>, <2 x float>* %3401, align 1
  %3403 = getelementptr inbounds i8, i8* %3396, i64 8
  %3404 = bitcast i8* %3403 to <2 x i32>*
  %3405 = load <2 x i32>, <2 x i32>* %3404, align 1
  %3406 = inttoptr i64 %3398 to float*
  %3407 = load float, float* %3406
  %3408 = extractelement <2 x float> %3402, i32 0
  %3409 = fdiv float %3408, %3407
  %3410 = bitcast i8* %3395 to float*
  store float %3409, float* %3410, align 1, !tbaa !2452
  %3411 = bitcast <2 x float> %3402 to <2 x i32>
  %3412 = extractelement <2 x i32> %3411, i32 1
  %3413 = getelementptr inbounds i8, i8* %3395, i64 4
  %3414 = bitcast i8* %3413 to i32*
  store i32 %3412, i32* %3414, align 1, !tbaa !2452
  %3415 = extractelement <2 x i32> %3405, i32 0
  %3416 = getelementptr inbounds i8, i8* %3395, i64 8
  %3417 = bitcast i8* %3416 to i32*
  store i32 %3415, i32* %3417, align 1, !tbaa !2452
  %3418 = extractelement <2 x i32> %3405, i32 1
  %3419 = getelementptr inbounds i8, i8* %3395, i64 12
  %3420 = bitcast i8* %3419 to i32*
  store i32 %3418, i32* %3420, align 1, !tbaa !2452
  %3421 = load i64, i64* %PC
  %3422 = add i64 %3421, 8
  store i64 %3422, i64* %PC
  %3423 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3424 = sext i32 %3423 to i64
  store i64 %3424, i64* %RAX, align 8, !tbaa !2428
  %3425 = load i64, i64* %RAX
  %3426 = mul i64 %3425, 4
  %3427 = add i64 %3426, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %3428 = bitcast %union.vec128_t* %XMM0 to i8*
  %3429 = load i64, i64* %PC
  %3430 = add i64 %3429, 9
  store i64 %3430, i64* %PC
  %3431 = bitcast i8* %3428 to <2 x float>*
  %3432 = load <2 x float>, <2 x float>* %3431, align 1
  %3433 = extractelement <2 x float> %3432, i32 0
  %3434 = inttoptr i64 %3427 to float*
  store float %3433, float* %3434
  %3435 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3436 = load i64, i64* %PC
  %3437 = add i64 %3436, 9
  store i64 %3437, i64* %PC
  %3438 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %3439 = bitcast i8* %3435 to float*
  store float %3438, float* %3439, align 1, !tbaa !2452
  %3440 = getelementptr inbounds i8, i8* %3435, i64 4
  %3441 = bitcast i8* %3440 to float*
  store float 0.000000e+00, float* %3441, align 1, !tbaa !2452
  %3442 = getelementptr inbounds i8, i8* %3435, i64 8
  %3443 = bitcast i8* %3442 to float*
  store float 0.000000e+00, float* %3443, align 1, !tbaa !2452
  %3444 = getelementptr inbounds i8, i8* %3435, i64 12
  %3445 = bitcast i8* %3444 to float*
  store float 0.000000e+00, float* %3445, align 1, !tbaa !2452
  %3446 = load i64, i64* %PC
  %3447 = add i64 %3446, 8
  store i64 %3447, i64* %PC
  %3448 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3449 = sext i32 %3448 to i64
  store i64 %3449, i64* %RAX, align 8, !tbaa !2428
  %3450 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3451 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3452 = load i64, i64* %RAX
  %3453 = mul i64 %3452, 4
  %3454 = add i64 %3453, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %3455 = load i64, i64* %PC
  %3456 = add i64 %3455, 9
  store i64 %3456, i64* %PC
  %3457 = bitcast i8* %3451 to <2 x float>*
  %3458 = load <2 x float>, <2 x float>* %3457, align 1
  %3459 = getelementptr inbounds i8, i8* %3451, i64 8
  %3460 = bitcast i8* %3459 to <2 x i32>*
  %3461 = load <2 x i32>, <2 x i32>* %3460, align 1
  %3462 = inttoptr i64 %3454 to float*
  %3463 = load float, float* %3462
  %3464 = extractelement <2 x float> %3458, i32 0
  %3465 = fadd float %3464, %3463
  %3466 = bitcast i8* %3450 to float*
  store float %3465, float* %3466, align 1, !tbaa !2452
  %3467 = bitcast <2 x float> %3458 to <2 x i32>
  %3468 = extractelement <2 x i32> %3467, i32 1
  %3469 = getelementptr inbounds i8, i8* %3450, i64 4
  %3470 = bitcast i8* %3469 to i32*
  store i32 %3468, i32* %3470, align 1, !tbaa !2452
  %3471 = extractelement <2 x i32> %3461, i32 0
  %3472 = getelementptr inbounds i8, i8* %3450, i64 8
  %3473 = bitcast i8* %3472 to i32*
  store i32 %3471, i32* %3473, align 1, !tbaa !2452
  %3474 = extractelement <2 x i32> %3461, i32 1
  %3475 = getelementptr inbounds i8, i8* %3450, i64 12
  %3476 = bitcast i8* %3475 to i32*
  store i32 %3474, i32* %3476, align 1, !tbaa !2452
  %3477 = bitcast %union.vec128_t* %XMM0 to i8*
  %3478 = load i64, i64* %PC
  %3479 = add i64 %3478, 9
  store i64 %3479, i64* %PC
  %3480 = bitcast i8* %3477 to <2 x float>*
  %3481 = load <2 x float>, <2 x float>* %3480, align 1
  %3482 = extractelement <2 x float> %3481, i32 0
  store float %3482, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %3483 = load i64, i64* %PC
  %3484 = add i64 %3483, 7
  store i64 %3484, i64* %PC
  %3485 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3486 = zext i32 %3485 to i64
  store i64 %3486, i64* %RDI, align 8, !tbaa !2428
  %3487 = load i64, i64* %PC
  %3488 = add i64 %3487, 5530
  %3489 = load i64, i64* %PC
  %3490 = add i64 %3489, 5
  %3491 = load i64, i64* %PC
  %3492 = add i64 %3491, 5
  store i64 %3492, i64* %PC
  %3493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3494 = load i64, i64* %3493, align 8, !tbaa !2428
  %3495 = add i64 %3494, -8
  %3496 = inttoptr i64 %3495 to i64*
  store i64 %3490, i64* %3496
  store i64 %3495, i64* %3493, align 8, !tbaa !2428
  %3497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3488, i64* %3497, align 8, !tbaa !2428
  %3498 = load i64, i64* %PC
  %3499 = call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* %0, i64 %3498, %struct.Memory* %3044)
  %3500 = load i64, i64* %PC
  %3501 = add i64 %3500, 7
  store i64 %3501, i64* %PC
  %3502 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3503 = zext i32 %3502 to i64
  store i64 %3503, i64* %RAX, align 8, !tbaa !2428
  %3504 = load i64, i64* %RAX
  %3505 = load i64, i64* %PC
  %3506 = add i64 %3505, 3
  store i64 %3506, i64* %PC
  %3507 = trunc i64 %3504 to i32
  %3508 = add i32 1, %3507
  %3509 = zext i32 %3508 to i64
  store i64 %3509, i64* %RAX, align 8, !tbaa !2428
  %3510 = icmp ult i32 %3508, %3507
  %3511 = icmp ult i32 %3508, 1
  %3512 = or i1 %3510, %3511
  %3513 = zext i1 %3512 to i8
  %3514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3513, i8* %3514, align 1, !tbaa !2432
  %3515 = and i32 %3508, 255
  %3516 = call i32 @llvm.ctpop.i32(i32 %3515) #16
  %3517 = trunc i32 %3516 to i8
  %3518 = and i8 %3517, 1
  %3519 = xor i8 %3518, 1
  %3520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3519, i8* %3520, align 1, !tbaa !2446
  %3521 = xor i64 1, %3504
  %3522 = trunc i64 %3521 to i32
  %3523 = xor i32 %3522, %3508
  %3524 = lshr i32 %3523, 4
  %3525 = trunc i32 %3524 to i8
  %3526 = and i8 %3525, 1
  %3527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3526, i8* %3527, align 1, !tbaa !2447
  %3528 = icmp eq i32 %3508, 0
  %3529 = zext i1 %3528 to i8
  %3530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3529, i8* %3530, align 1, !tbaa !2448
  %3531 = lshr i32 %3508, 31
  %3532 = trunc i32 %3531 to i8
  %3533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3532, i8* %3533, align 1, !tbaa !2449
  %3534 = lshr i32 %3507, 31
  %3535 = xor i32 %3531, %3534
  %3536 = add nuw nsw i32 %3535, %3531
  %3537 = icmp eq i32 %3536, 2
  %3538 = zext i1 %3537 to i8
  %3539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3538, i8* %3539, align 1, !tbaa !2450
  %3540 = load i32, i32* %EAX
  %3541 = zext i32 %3540 to i64
  %3542 = load i64, i64* %PC
  %3543 = add i64 %3542, 7
  store i64 %3543, i64* %PC
  store i32 %3540, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3544 = load i64, i64* %PC
  %3545 = sub i64 %3544, 618
  %3546 = load i64, i64* %PC
  %3547 = add i64 %3546, 5
  store i64 %3547, i64* %PC
  %3548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3545, i64* %3548, align 8, !tbaa !2428
  br label %block_401082

block_400f4a:                                     ; preds = %block_400ec4
  %3549 = sub i64 %3929, 2394
  %3550 = load i64, i64* %PC
  %3551 = add i64 %3550, 5
  %3552 = load i64, i64* %PC
  %3553 = add i64 %3552, 5
  store i64 %3553, i64* %PC
  %3554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3555 = load i64, i64* %3554, align 8, !tbaa !2428
  %3556 = add i64 %3555, -8
  %3557 = inttoptr i64 %3556 to i64*
  store i64 %3551, i64* %3557
  store i64 %3556, i64* %3554, align 8, !tbaa !2428
  %3558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3549, i64* %3558, align 8, !tbaa !2428
  %3559 = load i64, i64* %PC
  %3560 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %3559, %struct.Memory* %MEMORY.8)
  %3561 = load i64, i64* %PC
  %3562 = add i64 %3561, 10
  store i64 %3562, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  %3563 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3564 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3565 = bitcast %union.vec128_t* %XMM1 to i8*
  %3566 = load i64, i64* %PC
  %3567 = add i64 %3566, 3
  store i64 %3567, i64* %PC
  %3568 = bitcast i8* %3564 to i64*
  %3569 = load i64, i64* %3568, align 1
  %3570 = getelementptr inbounds i8, i8* %3564, i64 8
  %3571 = bitcast i8* %3570 to i64*
  %3572 = load i64, i64* %3571, align 1
  %3573 = bitcast i8* %3565 to i64*
  %3574 = load i64, i64* %3573, align 1
  %3575 = getelementptr inbounds i8, i8* %3565, i64 8
  %3576 = bitcast i8* %3575 to i64*
  %3577 = load i64, i64* %3576, align 1
  %3578 = xor i64 %3574, %3569
  %3579 = xor i64 %3577, %3572
  %3580 = trunc i64 %3578 to i32
  %3581 = lshr i64 %3578, 32
  %3582 = trunc i64 %3581 to i32
  %3583 = bitcast i8* %3563 to i32*
  store i32 %3580, i32* %3583, align 1, !tbaa !2454
  %3584 = getelementptr inbounds i8, i8* %3563, i64 4
  %3585 = bitcast i8* %3584 to i32*
  store i32 %3582, i32* %3585, align 1, !tbaa !2454
  %3586 = trunc i64 %3579 to i32
  %3587 = getelementptr inbounds i8, i8* %3563, i64 8
  %3588 = bitcast i8* %3587 to i32*
  store i32 %3586, i32* %3588, align 1, !tbaa !2454
  %3589 = lshr i64 %3579, 32
  %3590 = trunc i64 %3589 to i32
  %3591 = getelementptr inbounds i8, i8* %3563, i64 12
  %3592 = bitcast i8* %3591 to i32*
  store i32 %3590, i32* %3592, align 1, !tbaa !2454
  %3593 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3594 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3595 = load i64, i64* %RBP
  %3596 = sub i64 %3595, 80
  %3597 = load i64, i64* %PC
  %3598 = add i64 %3597, 5
  store i64 %3598, i64* %PC
  %3599 = bitcast i8* %3594 to <2 x float>*
  %3600 = load <2 x float>, <2 x float>* %3599, align 1
  %3601 = getelementptr inbounds i8, i8* %3594, i64 8
  %3602 = bitcast i8* %3601 to <2 x i32>*
  %3603 = load <2 x i32>, <2 x i32>* %3602, align 1
  %3604 = inttoptr i64 %3596 to float*
  %3605 = load float, float* %3604
  %3606 = extractelement <2 x float> %3600, i32 0
  %3607 = fsub float %3606, %3605
  %3608 = bitcast i8* %3593 to float*
  store float %3607, float* %3608, align 1, !tbaa !2452
  %3609 = bitcast <2 x float> %3600 to <2 x i32>
  %3610 = extractelement <2 x i32> %3609, i32 1
  %3611 = getelementptr inbounds i8, i8* %3593, i64 4
  %3612 = bitcast i8* %3611 to i32*
  store i32 %3610, i32* %3612, align 1, !tbaa !2452
  %3613 = extractelement <2 x i32> %3603, i32 0
  %3614 = getelementptr inbounds i8, i8* %3593, i64 8
  %3615 = bitcast i8* %3614 to i32*
  store i32 %3613, i32* %3615, align 1, !tbaa !2452
  %3616 = extractelement <2 x i32> %3603, i32 1
  %3617 = getelementptr inbounds i8, i8* %3593, i64 12
  %3618 = bitcast i8* %3617 to i32*
  store i32 %3616, i32* %3618, align 1, !tbaa !2452
  %3619 = load i64, i64* %RBP
  %3620 = sub i64 %3619, 84
  %3621 = bitcast %union.vec128_t* %XMM0 to i8*
  %3622 = load i64, i64* %PC
  %3623 = add i64 %3622, 5
  store i64 %3623, i64* %PC
  %3624 = bitcast i8* %3621 to <2 x float>*
  %3625 = load <2 x float>, <2 x float>* %3624, align 1
  %3626 = extractelement <2 x float> %3625, i32 0
  %3627 = inttoptr i64 %3620 to float*
  store float %3626, float* %3627
  %3628 = load i64, i64* %PC
  %3629 = add i64 %3628, 8
  store i64 %3629, i64* %PC
  %3630 = load i64, i64* @stderr
  store i64 %3630, i64* %RDI, align 8, !tbaa !2428
  %3631 = load i64, i64* %PC
  %3632 = add i64 %3631, 7
  store i64 %3632, i64* %PC
  %3633 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3634 = zext i32 %3633 to i64
  store i64 %3634, i64* %RDX, align 8, !tbaa !2428
  %3635 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3636 = bitcast %union.vec128_t* %XMM1 to i8*
  %3637 = load i64, i64* %PC
  %3638 = add i64 %3637, 3
  store i64 %3638, i64* %PC
  %3639 = bitcast i8* %3636 to <2 x i32>*
  %3640 = load <2 x i32>, <2 x i32>* %3639, align 1
  %3641 = getelementptr inbounds i8, i8* %3636, i64 8
  %3642 = bitcast i8* %3641 to <2 x i32>*
  %3643 = load <2 x i32>, <2 x i32>* %3642, align 1
  %3644 = extractelement <2 x i32> %3640, i32 0
  %3645 = bitcast i8* %3635 to i32*
  store i32 %3644, i32* %3645, align 1, !tbaa !2452
  %3646 = extractelement <2 x i32> %3640, i32 1
  %3647 = getelementptr inbounds i8, i8* %3635, i64 4
  %3648 = bitcast i8* %3647 to i32*
  store i32 %3646, i32* %3648, align 1, !tbaa !2452
  %3649 = extractelement <2 x i32> %3643, i32 0
  %3650 = getelementptr inbounds i8, i8* %3635, i64 8
  %3651 = bitcast i8* %3650 to i32*
  store i32 %3649, i32* %3651, align 1, !tbaa !2452
  %3652 = extractelement <2 x i32> %3643, i32 1
  %3653 = getelementptr inbounds i8, i8* %3635, i64 12
  %3654 = bitcast i8* %3653 to i32*
  store i32 %3652, i32* %3654, align 1, !tbaa !2452
  %3655 = load i64, i64* %PC
  %3656 = add i64 %3655, 2
  store i64 %3656, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %3657 = load i64, i64* %PC
  %3658 = sub i64 %3657, 2698
  %3659 = load i64, i64* %PC
  %3660 = add i64 %3659, 5
  %3661 = load i64, i64* %PC
  %3662 = add i64 %3661, 5
  store i64 %3662, i64* %PC
  %3663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3664 = load i64, i64* %3663, align 8, !tbaa !2428
  %3665 = add i64 %3664, -8
  %3666 = inttoptr i64 %3665 to i64*
  store i64 %3660, i64* %3666
  store i64 %3665, i64* %3663, align 8, !tbaa !2428
  %3667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3658, i64* %3667, align 8, !tbaa !2428
  %3668 = load i64, i64* %PC
  %3669 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %3668, %struct.Memory* %3560)
  %3670 = load i64, i64* %RBP
  %3671 = sub i64 %3670, 64
  %3672 = load i64, i64* %PC
  %3673 = add i64 %3672, 4
  store i64 %3673, i64* %PC
  %3674 = inttoptr i64 %3671 to i32*
  %3675 = load i32, i32* %3674
  %3676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3676, align 1, !tbaa !2432
  %3677 = and i32 %3675, 255
  %3678 = call i32 @llvm.ctpop.i32(i32 %3677) #16
  %3679 = trunc i32 %3678 to i8
  %3680 = and i8 %3679, 1
  %3681 = xor i8 %3680, 1
  %3682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3681, i8* %3682, align 1, !tbaa !2446
  %3683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3683, align 1, !tbaa !2447
  %3684 = icmp eq i32 %3675, 0
  %3685 = zext i1 %3684 to i8
  %3686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3685, i8* %3686, align 1, !tbaa !2448
  %3687 = lshr i32 %3675, 31
  %3688 = trunc i32 %3687 to i8
  %3689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3688, i8* %3689, align 1, !tbaa !2449
  %3690 = lshr i32 %3675, 31
  %3691 = xor i32 %3687, %3690
  %3692 = add nuw nsw i32 %3691, %3690
  %3693 = icmp eq i32 %3692, 2
  %3694 = zext i1 %3693 to i8
  %3695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3694, i8* %3695, align 1, !tbaa !2450
  %3696 = load i64, i64* %RBP
  %3697 = sub i64 %3696, 952
  %3698 = load i32, i32* %EAX
  %3699 = zext i32 %3698 to i64
  %3700 = load i64, i64* %PC
  %3701 = add i64 %3700, 6
  store i64 %3701, i64* %PC
  %3702 = inttoptr i64 %3697 to i32*
  store i32 %3698, i32* %3702
  %3703 = load i64, i64* %PC
  %3704 = add i64 %3703, 23
  %3705 = load i64, i64* %PC
  %3706 = add i64 %3705, 6
  %3707 = load i64, i64* %PC
  %3708 = add i64 %3707, 6
  store i64 %3708, i64* %PC
  %3709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3710 = load i8, i8* %3709, align 1, !tbaa !2449
  %3711 = icmp ne i8 %3710, 0
  %3712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3713 = load i8, i8* %3712, align 1, !tbaa !2450
  %3714 = icmp ne i8 %3713, 0
  %3715 = xor i1 %3711, %3714
  %3716 = xor i1 %3715, true
  %3717 = zext i1 %3716 to i8
  store i8 %3717, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3719 = select i1 %3715, i64 %3706, i64 %3704
  store i64 %3719, i64* %3718, align 8, !tbaa !2428
  %3720 = load i8, i8* %BRANCH_TAKEN
  %3721 = icmp eq i8 %3720, 1
  br i1 %3721, label %block_400fa0, label %block_400f8f

block_400fc8:                                     ; preds = %block_400faf
  %3722 = load i64, i64* %PC
  %3723 = add i64 %3722, 11
  store i64 %3723, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  br label %block_400fd3

block_401546:                                     ; preds = %block_4014c0
  %3724 = sub i64 %4069, 3926
  %3725 = load i64, i64* %PC
  %3726 = add i64 %3725, 5
  %3727 = load i64, i64* %PC
  %3728 = add i64 %3727, 5
  store i64 %3728, i64* %PC
  %3729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3730 = load i64, i64* %3729, align 8, !tbaa !2428
  %3731 = add i64 %3730, -8
  %3732 = inttoptr i64 %3731 to i64*
  store i64 %3726, i64* %3732
  store i64 %3731, i64* %3729, align 8, !tbaa !2428
  %3733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3724, i64* %3733, align 8, !tbaa !2428
  %3734 = load i64, i64* %PC
  %3735 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %3734, %struct.Memory* %MEMORY.9)
  %3736 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3737 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3738 = load i64, i64* %RBP
  %3739 = sub i64 %3738, 40
  %3740 = load i64, i64* %PC
  %3741 = add i64 %3740, 5
  store i64 %3741, i64* %PC
  %3742 = bitcast i8* %3737 to <2 x float>*
  %3743 = load <2 x float>, <2 x float>* %3742, align 1
  %3744 = getelementptr inbounds i8, i8* %3737, i64 8
  %3745 = bitcast i8* %3744 to <2 x i32>*
  %3746 = load <2 x i32>, <2 x i32>* %3745, align 1
  %3747 = inttoptr i64 %3739 to float*
  %3748 = load float, float* %3747
  %3749 = extractelement <2 x float> %3743, i32 0
  %3750 = fsub float %3749, %3748
  %3751 = bitcast i8* %3736 to float*
  store float %3750, float* %3751, align 1, !tbaa !2452
  %3752 = bitcast <2 x float> %3743 to <2 x i32>
  %3753 = extractelement <2 x i32> %3752, i32 1
  %3754 = getelementptr inbounds i8, i8* %3736, i64 4
  %3755 = bitcast i8* %3754 to i32*
  store i32 %3753, i32* %3755, align 1, !tbaa !2452
  %3756 = extractelement <2 x i32> %3746, i32 0
  %3757 = getelementptr inbounds i8, i8* %3736, i64 8
  %3758 = bitcast i8* %3757 to i32*
  store i32 %3756, i32* %3758, align 1, !tbaa !2452
  %3759 = extractelement <2 x i32> %3746, i32 1
  %3760 = getelementptr inbounds i8, i8* %3736, i64 12
  %3761 = bitcast i8* %3760 to i32*
  store i32 %3759, i32* %3761, align 1, !tbaa !2452
  %3762 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3763 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3764 = load i64, i64* %RBP
  %3765 = sub i64 %3764, 44
  %3766 = load i64, i64* %PC
  %3767 = add i64 %3766, 5
  store i64 %3767, i64* %PC
  %3768 = bitcast i8* %3763 to <2 x float>*
  %3769 = load <2 x float>, <2 x float>* %3768, align 1
  %3770 = getelementptr inbounds i8, i8* %3763, i64 8
  %3771 = bitcast i8* %3770 to <2 x i32>*
  %3772 = load <2 x i32>, <2 x i32>* %3771, align 1
  %3773 = inttoptr i64 %3765 to float*
  %3774 = load float, float* %3773
  %3775 = extractelement <2 x float> %3769, i32 0
  %3776 = fsub float %3775, %3774
  %3777 = bitcast i8* %3762 to float*
  store float %3776, float* %3777, align 1, !tbaa !2452
  %3778 = bitcast <2 x float> %3769 to <2 x i32>
  %3779 = extractelement <2 x i32> %3778, i32 1
  %3780 = getelementptr inbounds i8, i8* %3762, i64 4
  %3781 = bitcast i8* %3780 to i32*
  store i32 %3779, i32* %3781, align 1, !tbaa !2452
  %3782 = extractelement <2 x i32> %3772, i32 0
  %3783 = getelementptr inbounds i8, i8* %3762, i64 8
  %3784 = bitcast i8* %3783 to i32*
  store i32 %3782, i32* %3784, align 1, !tbaa !2452
  %3785 = extractelement <2 x i32> %3772, i32 1
  %3786 = getelementptr inbounds i8, i8* %3762, i64 12
  %3787 = bitcast i8* %3786 to i32*
  store i32 %3785, i32* %3787, align 1, !tbaa !2452
  %3788 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3789 = load i64, i64* %PC
  %3790 = add i64 %3789, 9
  store i64 %3790, i64* %PC
  %3791 = bitcast i8* %3788 to <2 x i32>*
  %3792 = load <2 x i32>, <2 x i32>* %3791, align 1
  %3793 = getelementptr inbounds i8, i8* %3788, i64 8
  %3794 = bitcast i8* %3793 to <2 x i32>*
  %3795 = load <2 x i32>, <2 x i32>* %3794, align 1
  %3796 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3797 = sitofp i32 %3796 to float
  %3798 = bitcast i8* %3788 to float*
  store float %3797, float* %3798, align 1, !tbaa !2452
  %3799 = extractelement <2 x i32> %3792, i32 1
  %3800 = getelementptr inbounds i8, i8* %3788, i64 4
  %3801 = bitcast i8* %3800 to i32*
  store i32 %3799, i32* %3801, align 1, !tbaa !2452
  %3802 = extractelement <2 x i32> %3795, i32 0
  %3803 = bitcast i8* %3793 to i32*
  store i32 %3802, i32* %3803, align 1, !tbaa !2452
  %3804 = extractelement <2 x i32> %3795, i32 1
  %3805 = getelementptr inbounds i8, i8* %3788, i64 12
  %3806 = bitcast i8* %3805 to i32*
  store i32 %3804, i32* %3806, align 1, !tbaa !2452
  %3807 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3808 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3809 = bitcast %union.vec128_t* %XMM1 to i8*
  %3810 = load i64, i64* %PC
  %3811 = add i64 %3810, 4
  store i64 %3811, i64* %PC
  %3812 = bitcast i8* %3808 to <2 x float>*
  %3813 = load <2 x float>, <2 x float>* %3812, align 1
  %3814 = getelementptr inbounds i8, i8* %3808, i64 8
  %3815 = bitcast i8* %3814 to <2 x i32>*
  %3816 = load <2 x i32>, <2 x i32>* %3815, align 1
  %3817 = bitcast i8* %3809 to <2 x float>*
  %3818 = load <2 x float>, <2 x float>* %3817, align 1
  %3819 = extractelement <2 x float> %3813, i32 0
  %3820 = extractelement <2 x float> %3818, i32 0
  %3821 = fdiv float %3819, %3820
  %3822 = bitcast i8* %3807 to float*
  store float %3821, float* %3822, align 1, !tbaa !2452
  %3823 = bitcast <2 x float> %3813 to <2 x i32>
  %3824 = extractelement <2 x i32> %3823, i32 1
  %3825 = getelementptr inbounds i8, i8* %3807, i64 4
  %3826 = bitcast i8* %3825 to i32*
  store i32 %3824, i32* %3826, align 1, !tbaa !2452
  %3827 = extractelement <2 x i32> %3816, i32 0
  %3828 = getelementptr inbounds i8, i8* %3807, i64 8
  %3829 = bitcast i8* %3828 to i32*
  store i32 %3827, i32* %3829, align 1, !tbaa !2452
  %3830 = extractelement <2 x i32> %3816, i32 1
  %3831 = getelementptr inbounds i8, i8* %3807, i64 12
  %3832 = bitcast i8* %3831 to i32*
  store i32 %3830, i32* %3832, align 1, !tbaa !2452
  %3833 = load i64, i64* %PC
  %3834 = add i64 %3833, 8
  store i64 %3834, i64* %PC
  %3835 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3836 = sext i32 %3835 to i64
  store i64 %3836, i64* %RAX, align 8, !tbaa !2428
  %3837 = load i64, i64* %RAX
  %3838 = mul i64 %3837, 4
  %3839 = add i64 %3838, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3840 = bitcast %union.vec128_t* %XMM0 to i8*
  %3841 = load i64, i64* %PC
  %3842 = add i64 %3841, 9
  store i64 %3842, i64* %PC
  %3843 = bitcast i8* %3840 to <2 x float>*
  %3844 = load <2 x float>, <2 x float>* %3843, align 1
  %3845 = extractelement <2 x float> %3844, i32 0
  %3846 = inttoptr i64 %3839 to float*
  store float %3845, float* %3846
  %3847 = load i64, i64* %PC
  %3848 = sub i64 %3847, 3971
  %3849 = load i64, i64* %PC
  %3850 = add i64 %3849, 5
  %3851 = load i64, i64* %PC
  %3852 = add i64 %3851, 5
  store i64 %3852, i64* %PC
  %3853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3854 = load i64, i64* %3853, align 8, !tbaa !2428
  %3855 = add i64 %3854, -8
  %3856 = inttoptr i64 %3855 to i64*
  store i64 %3850, i64* %3856
  store i64 %3855, i64* %3853, align 8, !tbaa !2428
  %3857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3848, i64* %3857, align 8, !tbaa !2428
  %3858 = load i64, i64* %PC
  %3859 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %3858, %struct.Memory* %3735)
  %3860 = load i64, i64* %RBP
  %3861 = sub i64 %3860, 40
  %3862 = bitcast %union.vec128_t* %XMM0 to i8*
  %3863 = load i64, i64* %PC
  %3864 = add i64 %3863, 5
  store i64 %3864, i64* %PC
  %3865 = bitcast i8* %3862 to <2 x float>*
  %3866 = load <2 x float>, <2 x float>* %3865, align 1
  %3867 = extractelement <2 x float> %3866, i32 0
  %3868 = inttoptr i64 %3861 to float*
  store float %3867, float* %3868
  %3869 = load i64, i64* %PC
  %3870 = add i64 %3869, 11
  store i64 %3870, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_401588

block_400ec4:                                     ; preds = %block_400ea6, %block_400ed8
  %MEMORY.8 = phi %struct.Memory* [ %4897, %block_400ea6 ], [ %2556, %block_400ed8 ]
  %3871 = load i64, i64* %PC
  %3872 = add i64 %3871, 7
  store i64 %3872, i64* %PC
  %3873 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %3874 = zext i32 %3873 to i64
  store i64 %3874, i64* %RAX, align 8, !tbaa !2428
  %3875 = load i32, i32* %EAX
  %3876 = zext i32 %3875 to i64
  %3877 = load i64, i64* %PC
  %3878 = add i64 %3877, 7
  store i64 %3878, i64* %PC
  %3879 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3880 = sub i32 %3875, %3879
  %3881 = icmp ult i32 %3875, %3879
  %3882 = zext i1 %3881 to i8
  %3883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3882, i8* %3883, align 1, !tbaa !2432
  %3884 = and i32 %3880, 255
  %3885 = call i32 @llvm.ctpop.i32(i32 %3884) #16
  %3886 = trunc i32 %3885 to i8
  %3887 = and i8 %3886, 1
  %3888 = xor i8 %3887, 1
  %3889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3888, i8* %3889, align 1, !tbaa !2446
  %3890 = xor i32 %3879, %3875
  %3891 = xor i32 %3890, %3880
  %3892 = lshr i32 %3891, 4
  %3893 = trunc i32 %3892 to i8
  %3894 = and i8 %3893, 1
  %3895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3894, i8* %3895, align 1, !tbaa !2447
  %3896 = icmp eq i32 %3880, 0
  %3897 = zext i1 %3896 to i8
  %3898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3897, i8* %3898, align 1, !tbaa !2448
  %3899 = lshr i32 %3880, 31
  %3900 = trunc i32 %3899 to i8
  %3901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3900, i8* %3901, align 1, !tbaa !2449
  %3902 = lshr i32 %3875, 31
  %3903 = lshr i32 %3879, 31
  %3904 = xor i32 %3903, %3902
  %3905 = xor i32 %3899, %3902
  %3906 = add nuw nsw i32 %3905, %3904
  %3907 = icmp eq i32 %3906, 2
  %3908 = zext i1 %3907 to i8
  %3909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3908, i8* %3909, align 1, !tbaa !2450
  %3910 = load i64, i64* %PC
  %3911 = add i64 %3910, 120
  %3912 = load i64, i64* %PC
  %3913 = add i64 %3912, 6
  %3914 = load i64, i64* %PC
  %3915 = add i64 %3914, 6
  store i64 %3915, i64* %PC
  %3916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3917 = load i8, i8* %3916, align 1, !tbaa !2449
  %3918 = icmp ne i8 %3917, 0
  %3919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3920 = load i8, i8* %3919, align 1, !tbaa !2450
  %3921 = icmp ne i8 %3920, 0
  %3922 = xor i1 %3918, %3921
  %3923 = xor i1 %3922, true
  %3924 = zext i1 %3923 to i8
  store i8 %3924, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3926 = select i1 %3922, i64 %3913, i64 %3911
  store i64 %3926, i64* %3925, align 8, !tbaa !2428
  %3927 = load i8, i8* %BRANCH_TAKEN
  %3928 = icmp eq i8 %3927, 1
  %3929 = load i64, i64* %PC
  br i1 %3928, label %block_400f4a, label %block_400ed8

block_4008ff:                                     ; preds = %block_4008eb
  %3930 = add i64 %1533, 8
  store i64 %3930, i64* %PC
  %3931 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %3932 = sext i32 %3931 to i64
  store i64 %3932, i64* %RAX, align 8, !tbaa !2428
  %3933 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3934 = load i64, i64* %RAX
  %3935 = mul i64 %3934, 4
  %3936 = add i64 %3935, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %3937 = load i64, i64* %PC
  %3938 = add i64 %3937, 9
  store i64 %3938, i64* %PC
  %3939 = inttoptr i64 %3936 to float*
  %3940 = load float, float* %3939
  %3941 = bitcast i8* %3933 to float*
  store float %3940, float* %3941, align 1, !tbaa !2452
  %3942 = getelementptr inbounds i8, i8* %3933, i64 4
  %3943 = bitcast i8* %3942 to float*
  store float 0.000000e+00, float* %3943, align 1, !tbaa !2452
  %3944 = getelementptr inbounds i8, i8* %3933, i64 8
  %3945 = bitcast i8* %3944 to float*
  store float 0.000000e+00, float* %3945, align 1, !tbaa !2452
  %3946 = getelementptr inbounds i8, i8* %3933, i64 12
  %3947 = bitcast i8* %3946 to float*
  store float 0.000000e+00, float* %3947, align 1, !tbaa !2452
  %3948 = load i64, i64* %PC
  %3949 = add i64 %3948, 8
  store i64 %3949, i64* %PC
  %3950 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %3951 = sext i32 %3950 to i64
  store i64 %3951, i64* %RAX, align 8, !tbaa !2428
  %3952 = load i64, i64* %RAX
  %3953 = mul i64 %3952, 4
  %3954 = add i64 %3953, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %3955 = bitcast %union.vec128_t* %XMM0 to i8*
  %3956 = load i64, i64* %PC
  %3957 = add i64 %3956, 9
  store i64 %3957, i64* %PC
  %3958 = bitcast i8* %3955 to <2 x float>*
  %3959 = load <2 x float>, <2 x float>* %3958, align 1
  %3960 = extractelement <2 x float> %3959, i32 0
  %3961 = inttoptr i64 %3954 to float*
  store float %3960, float* %3961
  %3962 = load i64, i64* %PC
  %3963 = add i64 %3962, 7
  store i64 %3963, i64* %PC
  %3964 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %3965 = zext i32 %3964 to i64
  store i64 %3965, i64* %RAX, align 8, !tbaa !2428
  %3966 = load i64, i64* %RAX
  %3967 = load i64, i64* %PC
  %3968 = add i64 %3967, 3
  store i64 %3968, i64* %PC
  %3969 = trunc i64 %3966 to i32
  %3970 = add i32 1, %3969
  %3971 = zext i32 %3970 to i64
  store i64 %3971, i64* %RAX, align 8, !tbaa !2428
  %3972 = icmp ult i32 %3970, %3969
  %3973 = icmp ult i32 %3970, 1
  %3974 = or i1 %3972, %3973
  %3975 = zext i1 %3974 to i8
  %3976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3975, i8* %3976, align 1, !tbaa !2432
  %3977 = and i32 %3970, 255
  %3978 = call i32 @llvm.ctpop.i32(i32 %3977) #16
  %3979 = trunc i32 %3978 to i8
  %3980 = and i8 %3979, 1
  %3981 = xor i8 %3980, 1
  %3982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3981, i8* %3982, align 1, !tbaa !2446
  %3983 = xor i64 1, %3966
  %3984 = trunc i64 %3983 to i32
  %3985 = xor i32 %3984, %3970
  %3986 = lshr i32 %3985, 4
  %3987 = trunc i32 %3986 to i8
  %3988 = and i8 %3987, 1
  %3989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3988, i8* %3989, align 1, !tbaa !2447
  %3990 = icmp eq i32 %3970, 0
  %3991 = zext i1 %3990 to i8
  %3992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3991, i8* %3992, align 1, !tbaa !2448
  %3993 = lshr i32 %3970, 31
  %3994 = trunc i32 %3993 to i8
  %3995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3994, i8* %3995, align 1, !tbaa !2449
  %3996 = lshr i32 %3969, 31
  %3997 = xor i32 %3993, %3996
  %3998 = add nuw nsw i32 %3997, %3993
  %3999 = icmp eq i32 %3998, 2
  %4000 = zext i1 %3999 to i8
  %4001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4000, i8* %4001, align 1, !tbaa !2450
  %4002 = load i32, i32* %EAX
  %4003 = zext i32 %4002 to i64
  %4004 = load i64, i64* %PC
  %4005 = add i64 %4004, 7
  store i64 %4005, i64* %PC
  store i32 %4002, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4006 = load i64, i64* %PC
  %4007 = sub i64 %4006, 71
  %4008 = load i64, i64* %PC
  %4009 = add i64 %4008, 5
  store i64 %4009, i64* %PC
  %4010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4007, i64* %4010, align 8, !tbaa !2428
  br label %block_4008eb

block_4014c0:                                     ; preds = %block_4014ab, %block_4014d4
  %MEMORY.9 = phi %struct.Memory* [ %4081, %block_4014ab ], [ %2682, %block_4014d4 ]
  %4011 = load i64, i64* %PC
  %4012 = add i64 %4011, 7
  store i64 %4012, i64* %PC
  %4013 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4014 = zext i32 %4013 to i64
  store i64 %4014, i64* %RAX, align 8, !tbaa !2428
  %4015 = load i32, i32* %EAX
  %4016 = zext i32 %4015 to i64
  %4017 = load i64, i64* %PC
  %4018 = add i64 %4017, 7
  store i64 %4018, i64* %PC
  %4019 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4020 = sub i32 %4015, %4019
  %4021 = icmp ult i32 %4015, %4019
  %4022 = zext i1 %4021 to i8
  %4023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4022, i8* %4023, align 1, !tbaa !2432
  %4024 = and i32 %4020, 255
  %4025 = call i32 @llvm.ctpop.i32(i32 %4024) #16
  %4026 = trunc i32 %4025 to i8
  %4027 = and i8 %4026, 1
  %4028 = xor i8 %4027, 1
  %4029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4028, i8* %4029, align 1, !tbaa !2446
  %4030 = xor i32 %4019, %4015
  %4031 = xor i32 %4030, %4020
  %4032 = lshr i32 %4031, 4
  %4033 = trunc i32 %4032 to i8
  %4034 = and i8 %4033, 1
  %4035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4034, i8* %4035, align 1, !tbaa !2447
  %4036 = icmp eq i32 %4020, 0
  %4037 = zext i1 %4036 to i8
  %4038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4037, i8* %4038, align 1, !tbaa !2448
  %4039 = lshr i32 %4020, 31
  %4040 = trunc i32 %4039 to i8
  %4041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4040, i8* %4041, align 1, !tbaa !2449
  %4042 = lshr i32 %4015, 31
  %4043 = lshr i32 %4019, 31
  %4044 = xor i32 %4043, %4042
  %4045 = xor i32 %4039, %4042
  %4046 = add nuw nsw i32 %4045, %4044
  %4047 = icmp eq i32 %4046, 2
  %4048 = zext i1 %4047 to i8
  %4049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4048, i8* %4049, align 1, !tbaa !2450
  %4050 = load i64, i64* %PC
  %4051 = add i64 %4050, 120
  %4052 = load i64, i64* %PC
  %4053 = add i64 %4052, 6
  %4054 = load i64, i64* %PC
  %4055 = add i64 %4054, 6
  store i64 %4055, i64* %PC
  %4056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4057 = load i8, i8* %4056, align 1, !tbaa !2449
  %4058 = icmp ne i8 %4057, 0
  %4059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4060 = load i8, i8* %4059, align 1, !tbaa !2450
  %4061 = icmp ne i8 %4060, 0
  %4062 = xor i1 %4058, %4061
  %4063 = xor i1 %4062, true
  %4064 = zext i1 %4063 to i8
  store i8 %4064, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4066 = select i1 %4062, i64 %4053, i64 %4051
  store i64 %4066, i64* %4065, align 8, !tbaa !2428
  %4067 = load i8, i8* %BRANCH_TAKEN
  %4068 = icmp eq i8 %4067, 1
  %4069 = load i64, i64* %PC
  br i1 %4068, label %block_401546, label %block_4014d4

block_4014ab:                                     ; preds = %block_40149d
  %4070 = sub i64 %6116, 3771
  %4071 = load i64, i64* %PC
  %4072 = add i64 %4071, 5
  %4073 = load i64, i64* %PC
  %4074 = add i64 %4073, 5
  store i64 %4074, i64* %PC
  %4075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4076 = load i64, i64* %4075, align 8, !tbaa !2428
  %4077 = add i64 %4076, -8
  %4078 = inttoptr i64 %4077 to i64*
  store i64 %4072, i64* %4078
  store i64 %4077, i64* %4075, align 8, !tbaa !2428
  %4079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4070, i64* %4079, align 8, !tbaa !2428
  %4080 = load i64, i64* %PC
  %4081 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %4080, %struct.Memory* %MEMORY.14)
  %4082 = load i64, i64* %RBP
  %4083 = sub i64 %4082, 40
  %4084 = bitcast %union.vec128_t* %XMM0 to i8*
  %4085 = load i64, i64* %PC
  %4086 = add i64 %4085, 5
  store i64 %4086, i64* %PC
  %4087 = bitcast i8* %4084 to <2 x float>*
  %4088 = load <2 x float>, <2 x float>* %4087, align 1
  %4089 = extractelement <2 x float> %4088, i32 0
  %4090 = inttoptr i64 %4083 to float*
  store float %4089, float* %4090
  %4091 = load i64, i64* %PC
  %4092 = add i64 %4091, 11
  store i64 %4092, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4014c0

block_4013ba:                                     ; preds = %block_401369
  %4093 = sub i64 %2177, 3530
  %4094 = load i64, i64* %PC
  %4095 = add i64 %4094, 5
  %4096 = load i64, i64* %PC
  %4097 = add i64 %4096, 5
  store i64 %4097, i64* %PC
  %4098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4099 = load i64, i64* %4098, align 8, !tbaa !2428
  %4100 = add i64 %4099, -8
  %4101 = inttoptr i64 %4100 to i64*
  store i64 %4095, i64* %4101
  store i64 %4100, i64* %4098, align 8, !tbaa !2428
  %4102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4093, i64* %4102, align 8, !tbaa !2428
  %4103 = load i64, i64* %PC
  %4104 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %4103, %struct.Memory* %MEMORY.4)
  %4105 = load i64, i64* %PC
  %4106 = add i64 %4105, 10
  store i64 %4106, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %4107 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4108 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4109 = bitcast %union.vec128_t* %XMM1 to i8*
  %4110 = load i64, i64* %PC
  %4111 = add i64 %4110, 3
  store i64 %4111, i64* %PC
  %4112 = bitcast i8* %4108 to i64*
  %4113 = load i64, i64* %4112, align 1
  %4114 = getelementptr inbounds i8, i8* %4108, i64 8
  %4115 = bitcast i8* %4114 to i64*
  %4116 = load i64, i64* %4115, align 1
  %4117 = bitcast i8* %4109 to i64*
  %4118 = load i64, i64* %4117, align 1
  %4119 = getelementptr inbounds i8, i8* %4109, i64 8
  %4120 = bitcast i8* %4119 to i64*
  %4121 = load i64, i64* %4120, align 1
  %4122 = xor i64 %4118, %4113
  %4123 = xor i64 %4121, %4116
  %4124 = trunc i64 %4122 to i32
  %4125 = lshr i64 %4122, 32
  %4126 = trunc i64 %4125 to i32
  %4127 = bitcast i8* %4107 to i32*
  store i32 %4124, i32* %4127, align 1, !tbaa !2454
  %4128 = getelementptr inbounds i8, i8* %4107, i64 4
  %4129 = bitcast i8* %4128 to i32*
  store i32 %4126, i32* %4129, align 1, !tbaa !2454
  %4130 = trunc i64 %4123 to i32
  %4131 = getelementptr inbounds i8, i8* %4107, i64 8
  %4132 = bitcast i8* %4131 to i32*
  store i32 %4130, i32* %4132, align 1, !tbaa !2454
  %4133 = lshr i64 %4123, 32
  %4134 = trunc i64 %4133 to i32
  %4135 = getelementptr inbounds i8, i8* %4107, i64 12
  %4136 = bitcast i8* %4135 to i32*
  store i32 %4134, i32* %4136, align 1, !tbaa !2454
  %4137 = load i64, i64* %RBP
  %4138 = sub i64 %4137, 84
  %4139 = bitcast %union.vec128_t* %XMM0 to i8*
  %4140 = load i64, i64* %PC
  %4141 = add i64 %4140, 5
  store i64 %4141, i64* %PC
  %4142 = bitcast i8* %4139 to <2 x float>*
  %4143 = load <2 x float>, <2 x float>* %4142, align 1
  %4144 = extractelement <2 x float> %4143, i32 0
  %4145 = inttoptr i64 %4138 to float*
  store float %4144, float* %4145
  %4146 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4147 = load i64, i64* %RBP
  %4148 = sub i64 %4147, 84
  %4149 = load i64, i64* %PC
  %4150 = add i64 %4149, 5
  store i64 %4150, i64* %PC
  %4151 = inttoptr i64 %4148 to float*
  %4152 = load float, float* %4151
  %4153 = bitcast i8* %4146 to float*
  store float %4152, float* %4153, align 1, !tbaa !2452
  %4154 = getelementptr inbounds i8, i8* %4146, i64 4
  %4155 = bitcast i8* %4154 to float*
  store float 0.000000e+00, float* %4155, align 1, !tbaa !2452
  %4156 = getelementptr inbounds i8, i8* %4146, i64 8
  %4157 = bitcast i8* %4156 to float*
  store float 0.000000e+00, float* %4157, align 1, !tbaa !2452
  %4158 = getelementptr inbounds i8, i8* %4146, i64 12
  %4159 = bitcast i8* %4158 to float*
  store float 0.000000e+00, float* %4159, align 1, !tbaa !2452
  %4160 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4161 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4162 = load i64, i64* %RBP
  %4163 = sub i64 %4162, 80
  %4164 = load i64, i64* %PC
  %4165 = add i64 %4164, 5
  store i64 %4165, i64* %PC
  %4166 = bitcast i8* %4161 to <2 x float>*
  %4167 = load <2 x float>, <2 x float>* %4166, align 1
  %4168 = getelementptr inbounds i8, i8* %4161, i64 8
  %4169 = bitcast i8* %4168 to <2 x i32>*
  %4170 = load <2 x i32>, <2 x i32>* %4169, align 1
  %4171 = inttoptr i64 %4163 to float*
  %4172 = load float, float* %4171
  %4173 = extractelement <2 x float> %4167, i32 0
  %4174 = fsub float %4173, %4172
  %4175 = bitcast i8* %4160 to float*
  store float %4174, float* %4175, align 1, !tbaa !2452
  %4176 = bitcast <2 x float> %4167 to <2 x i32>
  %4177 = extractelement <2 x i32> %4176, i32 1
  %4178 = getelementptr inbounds i8, i8* %4160, i64 4
  %4179 = bitcast i8* %4178 to i32*
  store i32 %4177, i32* %4179, align 1, !tbaa !2452
  %4180 = extractelement <2 x i32> %4170, i32 0
  %4181 = getelementptr inbounds i8, i8* %4160, i64 8
  %4182 = bitcast i8* %4181 to i32*
  store i32 %4180, i32* %4182, align 1, !tbaa !2452
  %4183 = extractelement <2 x i32> %4170, i32 1
  %4184 = getelementptr inbounds i8, i8* %4160, i64 12
  %4185 = bitcast i8* %4184 to i32*
  store i32 %4183, i32* %4185, align 1, !tbaa !2452
  %4186 = load i64, i64* %RBP
  %4187 = sub i64 %4186, 76
  %4188 = bitcast %union.vec128_t* %XMM0 to i8*
  %4189 = load i64, i64* %PC
  %4190 = add i64 %4189, 5
  store i64 %4190, i64* %PC
  %4191 = bitcast i8* %4188 to <2 x float>*
  %4192 = load <2 x float>, <2 x float>* %4191, align 1
  %4193 = extractelement <2 x float> %4192, i32 0
  %4194 = inttoptr i64 %4187 to float*
  store float %4193, float* %4194
  %4195 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4196 = load i64, i64* %RBP
  %4197 = sub i64 %4196, 76
  %4198 = load i64, i64* %PC
  %4199 = add i64 %4198, 5
  store i64 %4199, i64* %PC
  %4200 = inttoptr i64 %4197 to float*
  %4201 = load float, float* %4200
  %4202 = fpext float %4201 to double
  %4203 = bitcast i8* %4195 to double*
  store double %4202, double* %4203, align 1, !tbaa !2455
  %4204 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4205 = load i64, i64* %RBP
  %4206 = sub i64 %4205, 68
  %4207 = load i64, i64* %PC
  %4208 = add i64 %4207, 5
  store i64 %4208, i64* %PC
  %4209 = inttoptr i64 %4206 to i32*
  %4210 = load i32, i32* %4209
  %4211 = sitofp i32 %4210 to double
  %4212 = bitcast i8* %4204 to double*
  store double %4211, double* %4212, align 1, !tbaa !2455
  %4213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4214 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4215 = bitcast %union.vec128_t* %XMM2 to i8*
  %4216 = load i64, i64* %PC
  %4217 = add i64 %4216, 4
  store i64 %4217, i64* %PC
  %4218 = bitcast i8* %4214 to double*
  %4219 = load double, double* %4218, align 1
  %4220 = getelementptr inbounds i8, i8* %4214, i64 8
  %4221 = bitcast i8* %4220 to i64*
  %4222 = load i64, i64* %4221, align 1
  %4223 = bitcast i8* %4215 to double*
  %4224 = load double, double* %4223, align 1
  %4225 = fdiv double %4219, %4224
  %4226 = bitcast i8* %4213 to double*
  store double %4225, double* %4226, align 1, !tbaa !2455
  %4227 = getelementptr inbounds i8, i8* %4213, i64 8
  %4228 = bitcast i8* %4227 to i64*
  store i64 %4222, i64* %4228, align 1, !tbaa !2455
  %4229 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4230 = bitcast %union.vec128_t* %XMM0 to i8*
  %4231 = load i64, i64* %PC
  %4232 = add i64 %4231, 4
  store i64 %4232, i64* %PC
  %4233 = bitcast i8* %4229 to <2 x i32>*
  %4234 = load <2 x i32>, <2 x i32>* %4233, align 1
  %4235 = getelementptr inbounds i8, i8* %4229, i64 8
  %4236 = bitcast i8* %4235 to <2 x i32>*
  %4237 = load <2 x i32>, <2 x i32>* %4236, align 1
  %4238 = bitcast i8* %4230 to double*
  %4239 = load double, double* %4238, align 1
  %4240 = fptrunc double %4239 to float
  %4241 = bitcast i8* %4229 to float*
  store float %4240, float* %4241, align 1, !tbaa !2452
  %4242 = extractelement <2 x i32> %4234, i32 1
  %4243 = getelementptr inbounds i8, i8* %4229, i64 4
  %4244 = bitcast i8* %4243 to i32*
  store i32 %4242, i32* %4244, align 1, !tbaa !2452
  %4245 = extractelement <2 x i32> %4237, i32 0
  %4246 = bitcast i8* %4235 to i32*
  store i32 %4245, i32* %4246, align 1, !tbaa !2452
  %4247 = extractelement <2 x i32> %4237, i32 1
  %4248 = getelementptr inbounds i8, i8* %4229, i64 12
  %4249 = bitcast i8* %4248 to i32*
  store i32 %4247, i32* %4249, align 1, !tbaa !2452
  %4250 = load i64, i64* %RBP
  %4251 = sub i64 %4250, 76
  %4252 = bitcast %union.vec128_t* %XMM0 to i8*
  %4253 = load i64, i64* %PC
  %4254 = add i64 %4253, 5
  store i64 %4254, i64* %PC
  %4255 = bitcast i8* %4252 to <2 x float>*
  %4256 = load <2 x float>, <2 x float>* %4255, align 1
  %4257 = extractelement <2 x float> %4256, i32 0
  %4258 = inttoptr i64 %4251 to float*
  store float %4257, float* %4258
  %4259 = load i64, i64* %PC
  %4260 = add i64 %4259, 8
  store i64 %4260, i64* %PC
  %4261 = load i64, i64* @stderr
  store i64 %4261, i64* %RDI, align 8, !tbaa !2428
  %4262 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4263 = bitcast %union.vec128_t* %XMM1 to i8*
  %4264 = load i64, i64* %PC
  %4265 = add i64 %4264, 3
  store i64 %4265, i64* %PC
  %4266 = bitcast i8* %4263 to <2 x i32>*
  %4267 = load <2 x i32>, <2 x i32>* %4266, align 1
  %4268 = getelementptr inbounds i8, i8* %4263, i64 8
  %4269 = bitcast i8* %4268 to <2 x i32>*
  %4270 = load <2 x i32>, <2 x i32>* %4269, align 1
  %4271 = extractelement <2 x i32> %4267, i32 0
  %4272 = bitcast i8* %4262 to i32*
  store i32 %4271, i32* %4272, align 1, !tbaa !2452
  %4273 = extractelement <2 x i32> %4267, i32 1
  %4274 = getelementptr inbounds i8, i8* %4262, i64 4
  %4275 = bitcast i8* %4274 to i32*
  store i32 %4273, i32* %4275, align 1, !tbaa !2452
  %4276 = extractelement <2 x i32> %4270, i32 0
  %4277 = getelementptr inbounds i8, i8* %4262, i64 8
  %4278 = bitcast i8* %4277 to i32*
  store i32 %4276, i32* %4278, align 1, !tbaa !2452
  %4279 = extractelement <2 x i32> %4270, i32 1
  %4280 = getelementptr inbounds i8, i8* %4262, i64 12
  %4281 = bitcast i8* %4280 to i32*
  store i32 %4279, i32* %4281, align 1, !tbaa !2452
  %4282 = load i64, i64* %PC
  %4283 = add i64 %4282, 2
  store i64 %4283, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %4284 = load i64, i64* %PC
  %4285 = sub i64 %4284, 3860
  %4286 = load i64, i64* %PC
  %4287 = add i64 %4286, 5
  %4288 = load i64, i64* %PC
  %4289 = add i64 %4288, 5
  store i64 %4289, i64* %PC
  %4290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4291 = load i64, i64* %4290, align 8, !tbaa !2428
  %4292 = add i64 %4291, -8
  %4293 = inttoptr i64 %4292 to i64*
  store i64 %4287, i64* %4293
  store i64 %4292, i64* %4290, align 8, !tbaa !2428
  %4294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4285, i64* %4294, align 8, !tbaa !2428
  %4295 = load i64, i64* %PC
  %4296 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4295, %struct.Memory* %4104)
  %4297 = load i64, i64* %PC
  %4298 = add i64 %4297, 10
  store i64 %4298, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %4299 = load i64, i64* %PC
  %4300 = add i64 %4299, 8
  store i64 %4300, i64* %PC
  %4301 = load i64, i64* @stderr
  store i64 %4301, i64* %RDI, align 8, !tbaa !2428
  %4302 = load i64, i64* %PC
  %4303 = add i64 %4302, 7
  store i64 %4303, i64* %PC
  %4304 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %4305 = zext i32 %4304 to i64
  store i64 %4305, i64* %RDX, align 8, !tbaa !2428
  %4306 = load i64, i64* %RBP
  %4307 = sub i64 %4306, 980
  %4308 = load i32, i32* %EAX
  %4309 = zext i32 %4308 to i64
  %4310 = load i64, i64* %PC
  %4311 = add i64 %4310, 6
  store i64 %4311, i64* %PC
  %4312 = inttoptr i64 %4307 to i32*
  store i32 %4308, i32* %4312
  %4313 = load i64, i64* %PC
  %4314 = add i64 %4313, 2
  store i64 %4314, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4315 = load i64, i64* %PC
  %4316 = sub i64 %4315, 3898
  %4317 = load i64, i64* %PC
  %4318 = add i64 %4317, 5
  %4319 = load i64, i64* %PC
  %4320 = add i64 %4319, 5
  store i64 %4320, i64* %PC
  %4321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4322 = load i64, i64* %4321, align 8, !tbaa !2428
  %4323 = add i64 %4322, -8
  %4324 = inttoptr i64 %4323 to i64*
  store i64 %4318, i64* %4324
  store i64 %4323, i64* %4321, align 8, !tbaa !2428
  %4325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4316, i64* %4325, align 8, !tbaa !2428
  %4326 = load i64, i64* %PC
  %4327 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4326, %struct.Memory* %4296)
  %4328 = load i64, i64* %PC
  %4329 = add i64 %4328, 10
  store i64 %4329, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %4330 = load i64, i64* %PC
  %4331 = add i64 %4330, 8
  store i64 %4331, i64* %PC
  %4332 = load i64, i64* @stderr
  store i64 %4332, i64* %RDI, align 8, !tbaa !2428
  %4333 = load i64, i64* %RBP
  %4334 = sub i64 %4333, 984
  %4335 = load i32, i32* %EAX
  %4336 = zext i32 %4335 to i64
  %4337 = load i64, i64* %PC
  %4338 = add i64 %4337, 6
  store i64 %4338, i64* %PC
  %4339 = inttoptr i64 %4334 to i32*
  store i32 %4335, i32* %4339
  %4340 = load i64, i64* %PC
  %4341 = add i64 %4340, 2
  store i64 %4341, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4342 = load i64, i64* %PC
  %4343 = sub i64 %4342, 3929
  %4344 = load i64, i64* %PC
  %4345 = add i64 %4344, 5
  %4346 = load i64, i64* %PC
  %4347 = add i64 %4346, 5
  store i64 %4347, i64* %PC
  %4348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4349 = load i64, i64* %4348, align 8, !tbaa !2428
  %4350 = add i64 %4349, -8
  %4351 = inttoptr i64 %4350 to i64*
  store i64 %4345, i64* %4351
  store i64 %4350, i64* %4348, align 8, !tbaa !2428
  %4352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4343, i64* %4352, align 8, !tbaa !2428
  %4353 = load i64, i64* %PC
  %4354 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4353, %struct.Memory* %4327)
  %4355 = load i64, i64* %PC
  %4356 = add i64 %4355, 10
  store i64 %4356, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %4357 = load i64, i64* %PC
  %4358 = add i64 %4357, 8
  store i64 %4358, i64* %PC
  %4359 = load i64, i64* @stderr
  store i64 %4359, i64* %RDI, align 8, !tbaa !2428
  %4360 = load i64, i64* %RBP
  %4361 = sub i64 %4360, 988
  %4362 = load i32, i32* %EAX
  %4363 = zext i32 %4362 to i64
  %4364 = load i64, i64* %PC
  %4365 = add i64 %4364, 6
  store i64 %4365, i64* %PC
  %4366 = inttoptr i64 %4361 to i32*
  store i32 %4362, i32* %4366
  %4367 = load i64, i64* %PC
  %4368 = add i64 %4367, 2
  store i64 %4368, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4369 = load i64, i64* %PC
  %4370 = sub i64 %4369, 3960
  %4371 = load i64, i64* %PC
  %4372 = add i64 %4371, 5
  %4373 = load i64, i64* %PC
  %4374 = add i64 %4373, 5
  store i64 %4374, i64* %PC
  %4375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4376 = load i64, i64* %4375, align 8, !tbaa !2428
  %4377 = add i64 %4376, -8
  %4378 = inttoptr i64 %4377 to i64*
  store i64 %4372, i64* %4378
  store i64 %4377, i64* %4375, align 8, !tbaa !2428
  %4379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4370, i64* %4379, align 8, !tbaa !2428
  %4380 = load i64, i64* %PC
  %4381 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4380, %struct.Memory* %4354)
  %4382 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4383 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4384 = bitcast %union.vec128_t* %XMM0 to i8*
  %4385 = load i64, i64* %PC
  %4386 = add i64 %4385, 3
  store i64 %4386, i64* %PC
  %4387 = bitcast i8* %4383 to i64*
  %4388 = load i64, i64* %4387, align 1
  %4389 = getelementptr inbounds i8, i8* %4383, i64 8
  %4390 = bitcast i8* %4389 to i64*
  %4391 = load i64, i64* %4390, align 1
  %4392 = bitcast i8* %4384 to i64*
  %4393 = load i64, i64* %4392, align 1
  %4394 = getelementptr inbounds i8, i8* %4384, i64 8
  %4395 = bitcast i8* %4394 to i64*
  %4396 = load i64, i64* %4395, align 1
  %4397 = xor i64 %4393, %4388
  %4398 = xor i64 %4396, %4391
  %4399 = trunc i64 %4397 to i32
  %4400 = lshr i64 %4397, 32
  %4401 = trunc i64 %4400 to i32
  %4402 = bitcast i8* %4382 to i32*
  store i32 %4399, i32* %4402, align 1, !tbaa !2454
  %4403 = getelementptr inbounds i8, i8* %4382, i64 4
  %4404 = bitcast i8* %4403 to i32*
  store i32 %4401, i32* %4404, align 1, !tbaa !2454
  %4405 = trunc i64 %4398 to i32
  %4406 = getelementptr inbounds i8, i8* %4382, i64 8
  %4407 = bitcast i8* %4406 to i32*
  store i32 %4405, i32* %4407, align 1, !tbaa !2454
  %4408 = lshr i64 %4398, 32
  %4409 = trunc i64 %4408 to i32
  %4410 = getelementptr inbounds i8, i8* %4382, i64 12
  %4411 = bitcast i8* %4410 to i32*
  store i32 %4409, i32* %4411, align 1, !tbaa !2454
  %4412 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4413 = load i64, i64* %PC
  %4414 = add i64 %4413, 9
  store i64 %4414, i64* %PC
  %4415 = bitcast i8* %4412 to <2 x i32>*
  %4416 = load <2 x i32>, <2 x i32>* %4415, align 1
  %4417 = getelementptr inbounds i8, i8* %4412, i64 8
  %4418 = bitcast i8* %4417 to <2 x i32>*
  %4419 = load <2 x i32>, <2 x i32>* %4418, align 1
  %4420 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4421 = sitofp i32 %4420 to float
  %4422 = bitcast i8* %4412 to float*
  store float %4421, float* %4422, align 1, !tbaa !2452
  %4423 = extractelement <2 x i32> %4416, i32 1
  %4424 = getelementptr inbounds i8, i8* %4412, i64 4
  %4425 = bitcast i8* %4424 to i32*
  store i32 %4423, i32* %4425, align 1, !tbaa !2452
  %4426 = extractelement <2 x i32> %4419, i32 0
  %4427 = bitcast i8* %4417 to i32*
  store i32 %4426, i32* %4427, align 1, !tbaa !2452
  %4428 = extractelement <2 x i32> %4419, i32 1
  %4429 = getelementptr inbounds i8, i8* %4412, i64 12
  %4430 = bitcast i8* %4429 to i32*
  store i32 %4428, i32* %4430, align 1, !tbaa !2452
  %4431 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4432 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4433 = load i64, i64* %RBP
  %4434 = sub i64 %4433, 76
  %4435 = load i64, i64* %PC
  %4436 = add i64 %4435, 5
  store i64 %4436, i64* %PC
  %4437 = bitcast i8* %4432 to <2 x float>*
  %4438 = load <2 x float>, <2 x float>* %4437, align 1
  %4439 = getelementptr inbounds i8, i8* %4432, i64 8
  %4440 = bitcast i8* %4439 to <2 x i32>*
  %4441 = load <2 x i32>, <2 x i32>* %4440, align 1
  %4442 = inttoptr i64 %4434 to float*
  %4443 = load float, float* %4442
  %4444 = extractelement <2 x float> %4438, i32 0
  %4445 = fmul float %4444, %4443
  %4446 = bitcast i8* %4431 to float*
  store float %4445, float* %4446, align 1, !tbaa !2452
  %4447 = bitcast <2 x float> %4438 to <2 x i32>
  %4448 = extractelement <2 x i32> %4447, i32 1
  %4449 = getelementptr inbounds i8, i8* %4431, i64 4
  %4450 = bitcast i8* %4449 to i32*
  store i32 %4448, i32* %4450, align 1, !tbaa !2452
  %4451 = extractelement <2 x i32> %4441, i32 0
  %4452 = getelementptr inbounds i8, i8* %4431, i64 8
  %4453 = bitcast i8* %4452 to i32*
  store i32 %4451, i32* %4453, align 1, !tbaa !2452
  %4454 = extractelement <2 x i32> %4441, i32 1
  %4455 = getelementptr inbounds i8, i8* %4431, i64 12
  %4456 = bitcast i8* %4455 to i32*
  store i32 %4454, i32* %4456, align 1, !tbaa !2452
  %4457 = load i64, i64* %RBP
  %4458 = sub i64 %4457, 44
  %4459 = bitcast %union.vec128_t* %XMM1 to i8*
  %4460 = load i64, i64* %PC
  %4461 = add i64 %4460, 5
  store i64 %4461, i64* %PC
  %4462 = bitcast i8* %4459 to <2 x float>*
  %4463 = load <2 x float>, <2 x float>* %4462, align 1
  %4464 = extractelement <2 x float> %4463, i32 0
  %4465 = inttoptr i64 %4458 to float*
  store float %4464, float* %4465
  %4466 = bitcast %union.vec128_t* %XMM0 to i8*
  %4467 = load i64, i64* %PC
  %4468 = add i64 %4467, 9
  store i64 %4468, i64* %PC
  %4469 = bitcast i8* %4466 to <2 x float>*
  %4470 = load <2 x float>, <2 x float>* %4469, align 1
  %4471 = extractelement <2 x float> %4470, i32 0
  store float %4471, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %4472 = load i64, i64* %PC
  %4473 = add i64 %4472, 11
  store i64 %4473, i64* %PC
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4474 = load i64, i64* %RBP
  %4475 = sub i64 %4474, 992
  %4476 = load i32, i32* %EAX
  %4477 = zext i32 %4476 to i64
  %4478 = load i64, i64* %PC
  %4479 = add i64 %4478, 6
  store i64 %4479, i64* %PC
  %4480 = inttoptr i64 %4475 to i32*
  store i32 %4476, i32* %4480
  br label %block_40149d

block_4009c7:                                     ; preds = %block_40096d
  %4481 = add i64 %1019, 10
  store i64 %4481, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  %4482 = load i64, i64* %PC
  %4483 = add i64 %4482, 10
  store i64 %4483, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  %4484 = load i64, i64* %PC
  %4485 = add i64 %4484, 10
  store i64 %4485, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %4486 = load i64, i64* %PC
  %4487 = add i64 %4486, 7
  store i64 %4487, i64* %PC
  %4488 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %4489 = zext i32 %4488 to i64
  store i64 %4489, i64* %RDI, align 8, !tbaa !2428
  %4490 = load i64, i64* %PC
  %4491 = add i64 %4490, 7
  store i64 %4491, i64* %PC
  %4492 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %4493 = zext i32 %4492 to i64
  store i64 %4493, i64* %RDX, align 8, !tbaa !2428
  %4494 = load i64, i64* %PC
  %4495 = add i64 %4494, 7
  store i64 %4495, i64* %PC
  %4496 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %4497 = zext i32 %4496 to i64
  store i64 %4497, i64* %RCX, align 8, !tbaa !2428
  %4498 = load i64, i64* %PC
  %4499 = add i64 %4498, 5574
  %4500 = load i64, i64* %PC
  %4501 = add i64 %4500, 5
  %4502 = load i64, i64* %PC
  %4503 = add i64 %4502, 5
  store i64 %4503, i64* %PC
  %4504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4505 = load i64, i64* %4504, align 8, !tbaa !2428
  %4506 = add i64 %4505, -8
  %4507 = inttoptr i64 %4506 to i64*
  store i64 %4501, i64* %4507
  store i64 %4506, i64* %4504, align 8, !tbaa !2428
  %4508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4499, i64* %4508, align 8, !tbaa !2428
  %4509 = load i64, i64* %PC
  %4510 = call %struct.Memory* @sub_401fc0_dmxpy_renamed_(%struct.State* %0, i64 %4509, %struct.Memory* %MEMORY.0)
  %4511 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4512 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4513 = bitcast %union.vec128_t* %XMM0 to i8*
  %4514 = load i64, i64* %PC
  %4515 = add i64 %4514, 3
  store i64 %4515, i64* %PC
  %4516 = bitcast i8* %4512 to i64*
  %4517 = load i64, i64* %4516, align 1
  %4518 = getelementptr inbounds i8, i8* %4512, i64 8
  %4519 = bitcast i8* %4518 to i64*
  %4520 = load i64, i64* %4519, align 1
  %4521 = bitcast i8* %4513 to i64*
  %4522 = load i64, i64* %4521, align 1
  %4523 = getelementptr inbounds i8, i8* %4513, i64 8
  %4524 = bitcast i8* %4523 to i64*
  %4525 = load i64, i64* %4524, align 1
  %4526 = xor i64 %4522, %4517
  %4527 = xor i64 %4525, %4520
  %4528 = trunc i64 %4526 to i32
  %4529 = lshr i64 %4526, 32
  %4530 = trunc i64 %4529 to i32
  %4531 = bitcast i8* %4511 to i32*
  store i32 %4528, i32* %4531, align 1, !tbaa !2454
  %4532 = getelementptr inbounds i8, i8* %4511, i64 4
  %4533 = bitcast i8* %4532 to i32*
  store i32 %4530, i32* %4533, align 1, !tbaa !2454
  %4534 = trunc i64 %4527 to i32
  %4535 = getelementptr inbounds i8, i8* %4511, i64 8
  %4536 = bitcast i8* %4535 to i32*
  store i32 %4534, i32* %4536, align 1, !tbaa !2454
  %4537 = lshr i64 %4527, 32
  %4538 = trunc i64 %4537 to i32
  %4539 = getelementptr inbounds i8, i8* %4511, i64 12
  %4540 = bitcast i8* %4539 to i32*
  store i32 %4538, i32* %4540, align 1, !tbaa !2454
  %4541 = load i64, i64* %RBP
  %4542 = sub i64 %4541, 28
  %4543 = bitcast %union.vec128_t* %XMM0 to i8*
  %4544 = load i64, i64* %PC
  %4545 = add i64 %4544, 5
  store i64 %4545, i64* %PC
  %4546 = bitcast i8* %4543 to <2 x float>*
  %4547 = load <2 x float>, <2 x float>* %4546, align 1
  %4548 = extractelement <2 x float> %4547, i32 0
  %4549 = inttoptr i64 %4542 to float*
  store float %4548, float* %4549
  %4550 = load i64, i64* %RBP
  %4551 = sub i64 %4550, 24
  %4552 = bitcast %union.vec128_t* %XMM0 to i8*
  %4553 = load i64, i64* %PC
  %4554 = add i64 %4553, 5
  store i64 %4554, i64* %PC
  %4555 = bitcast i8* %4552 to <2 x float>*
  %4556 = load <2 x float>, <2 x float>* %4555, align 1
  %4557 = extractelement <2 x float> %4556, i32 0
  %4558 = inttoptr i64 %4551 to float*
  store float %4557, float* %4558
  %4559 = load i64, i64* %PC
  %4560 = add i64 %4559, 11
  store i64 %4560, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_400a17

block_401588:                                     ; preds = %block_40159c, %block_401546
  %MEMORY.10 = phi %struct.Memory* [ %3859, %block_401546 ], [ %6657, %block_40159c ]
  %4561 = load i64, i64* %PC
  %4562 = add i64 %4561, 7
  store i64 %4562, i64* %PC
  %4563 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4564 = zext i32 %4563 to i64
  store i64 %4564, i64* %RAX, align 8, !tbaa !2428
  %4565 = load i32, i32* %EAX
  %4566 = zext i32 %4565 to i64
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 7
  store i64 %4568, i64* %PC
  %4569 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4570 = sub i32 %4565, %4569
  %4571 = icmp ult i32 %4565, %4569
  %4572 = zext i1 %4571 to i8
  %4573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4572, i8* %4573, align 1, !tbaa !2432
  %4574 = and i32 %4570, 255
  %4575 = call i32 @llvm.ctpop.i32(i32 %4574) #16
  %4576 = trunc i32 %4575 to i8
  %4577 = and i8 %4576, 1
  %4578 = xor i8 %4577, 1
  %4579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4578, i8* %4579, align 1, !tbaa !2446
  %4580 = xor i32 %4569, %4565
  %4581 = xor i32 %4580, %4570
  %4582 = lshr i32 %4581, 4
  %4583 = trunc i32 %4582 to i8
  %4584 = and i8 %4583, 1
  %4585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4584, i8* %4585, align 1, !tbaa !2447
  %4586 = icmp eq i32 %4570, 0
  %4587 = zext i1 %4586 to i8
  %4588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4587, i8* %4588, align 1, !tbaa !2448
  %4589 = lshr i32 %4570, 31
  %4590 = trunc i32 %4589 to i8
  %4591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4590, i8* %4591, align 1, !tbaa !2449
  %4592 = lshr i32 %4565, 31
  %4593 = lshr i32 %4569, 31
  %4594 = xor i32 %4593, %4592
  %4595 = xor i32 %4589, %4592
  %4596 = add nuw nsw i32 %4595, %4594
  %4597 = icmp eq i32 %4596, 2
  %4598 = zext i1 %4597 to i8
  %4599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4598, i8* %4599, align 1, !tbaa !2450
  %4600 = load i64, i64* %PC
  %4601 = add i64 %4600, 80
  %4602 = load i64, i64* %PC
  %4603 = add i64 %4602, 6
  %4604 = load i64, i64* %PC
  %4605 = add i64 %4604, 6
  store i64 %4605, i64* %PC
  %4606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4607 = load i8, i8* %4606, align 1, !tbaa !2449
  %4608 = icmp ne i8 %4607, 0
  %4609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4610 = load i8, i8* %4609, align 1, !tbaa !2450
  %4611 = icmp ne i8 %4610, 0
  %4612 = xor i1 %4608, %4611
  %4613 = xor i1 %4612, true
  %4614 = zext i1 %4613 to i8
  store i8 %4614, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4616 = select i1 %4612, i64 %4603, i64 %4601
  store i64 %4616, i64* %4615, align 8, !tbaa !2428
  %4617 = load i8, i8* %BRANCH_TAKEN
  %4618 = icmp eq i8 %4617, 1
  %4619 = load i64, i64* %PC
  br i1 %4618, label %block_4015e6, label %block_40159c

block_400faf:                                     ; preds = %block_400fa0
  %4620 = load i64, i64* %PC
  %4621 = add i64 %4620, 11
  store i64 %4621, i64* %PC
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4622 = load i64, i64* %PC
  %4623 = add i64 %4622, 8
  store i64 %4623, i64* %PC
  %4624 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4625, align 1, !tbaa !2432
  %4626 = and i32 %4624, 255
  %4627 = call i32 @llvm.ctpop.i32(i32 %4626) #16
  %4628 = trunc i32 %4627 to i8
  %4629 = and i8 %4628, 1
  %4630 = xor i8 %4629, 1
  %4631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4630, i8* %4631, align 1, !tbaa !2446
  %4632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4632, align 1, !tbaa !2447
  %4633 = icmp eq i32 %4624, 0
  %4634 = zext i1 %4633 to i8
  %4635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4634, i8* %4635, align 1, !tbaa !2448
  %4636 = lshr i32 %4624, 31
  %4637 = trunc i32 %4636 to i8
  %4638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4637, i8* %4638, align 1, !tbaa !2449
  %4639 = lshr i32 %4624, 31
  %4640 = xor i32 %4636, %4639
  %4641 = add nuw nsw i32 %4640, %4639
  %4642 = icmp eq i32 %4641, 2
  %4643 = zext i1 %4642 to i8
  %4644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4643, i8* %4644, align 1, !tbaa !2450
  %4645 = load i64, i64* %PC
  %4646 = add i64 %4645, 17
  %4647 = load i64, i64* %PC
  %4648 = add i64 %4647, 6
  %4649 = load i64, i64* %PC
  %4650 = add i64 %4649, 6
  store i64 %4650, i64* %PC
  %4651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4652 = load i8, i8* %4651, align 1, !tbaa !2448
  %4653 = icmp eq i8 %4652, 0
  %4654 = zext i1 %4653 to i8
  store i8 %4654, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4656 = select i1 %4653, i64 %4646, i64 %4648
  store i64 %4656, i64* %4655, align 8, !tbaa !2428
  %4657 = load i8, i8* %BRANCH_TAKEN
  %4658 = icmp eq i8 %4657, 1
  br i1 %4658, label %block_400fd3, label %block_400fc8

block_400a2b:                                     ; preds = %block_400a17
  %4659 = load i64, i64* %RBP
  %4660 = sub i64 %4659, 28
  %4661 = load i64, i64* %PC
  %4662 = add i64 %4661, 5
  store i64 %4662, i64* %PC
  %4663 = inttoptr i64 %4660 to float*
  %4664 = load float, float* %4663
  %4665 = fpext float %4664 to double
  %4666 = bitcast i8* %6304 to double*
  store double %4665, double* %4666, align 1, !tbaa !2455
  %4667 = load i64, i64* %PC
  %4668 = add i64 %4667, 8
  store i64 %4668, i64* %PC
  %4669 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4670 = sext i32 %4669 to i64
  store i64 %4670, i64* %RAX, align 8, !tbaa !2428
  %4671 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4672 = load i64, i64* %RAX
  %4673 = mul i64 %4672, 4
  %4674 = add i64 %4673, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %4675 = load i64, i64* %PC
  %4676 = add i64 %4675, 9
  store i64 %4676, i64* %PC
  %4677 = inttoptr i64 %4674 to float*
  %4678 = load float, float* %4677
  %4679 = fpext float %4678 to double
  %4680 = bitcast i8* %4671 to double*
  store double %4679, double* %4680, align 1, !tbaa !2455
  %4681 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4682 = load i64, i64* %PC
  %4683 = add i64 %4682, 7
  store i64 %4683, i64* %PC
  %4684 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %4685 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %4686 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %4687 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %4688 = bitcast i8* %4681 to float*
  store float %4684, float* %4688, align 1, !tbaa !2452
  %4689 = getelementptr inbounds i8, i8* %4681, i64 4
  %4690 = bitcast i8* %4689 to float*
  store float %4685, float* %4690, align 1, !tbaa !2452
  %4691 = getelementptr inbounds i8, i8* %4681, i64 8
  %4692 = bitcast i8* %4691 to float*
  store float %4686, float* %4692, align 1, !tbaa !2452
  %4693 = getelementptr inbounds i8, i8* %4681, i64 12
  %4694 = bitcast i8* %4693 to float*
  store float %4687, float* %4694, align 1, !tbaa !2452
  %4695 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4696 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4697 = bitcast %union.vec128_t* %XMM2 to i8*
  %4698 = load i64, i64* %PC
  %4699 = add i64 %4698, 4
  store i64 %4699, i64* %PC
  %4700 = bitcast i8* %4696 to i64*
  %4701 = load i64, i64* %4700, align 1
  %4702 = getelementptr inbounds i8, i8* %4696, i64 8
  %4703 = bitcast i8* %4702 to i64*
  %4704 = load i64, i64* %4703, align 1
  %4705 = bitcast i8* %4697 to i64*
  %4706 = load i64, i64* %4705, align 1
  %4707 = getelementptr inbounds i8, i8* %4697, i64 8
  %4708 = bitcast i8* %4707 to i64*
  %4709 = load i64, i64* %4708, align 1
  %4710 = and i64 %4706, %4701
  %4711 = and i64 %4709, %4704
  %4712 = trunc i64 %4710 to i32
  %4713 = lshr i64 %4710, 32
  %4714 = trunc i64 %4713 to i32
  %4715 = bitcast i8* %4695 to i32*
  store i32 %4712, i32* %4715, align 1, !tbaa !2454
  %4716 = getelementptr inbounds i8, i8* %4695, i64 4
  %4717 = bitcast i8* %4716 to i32*
  store i32 %4714, i32* %4717, align 1, !tbaa !2454
  %4718 = trunc i64 %4711 to i32
  %4719 = getelementptr inbounds i8, i8* %4695, i64 8
  %4720 = bitcast i8* %4719 to i32*
  store i32 %4718, i32* %4720, align 1, !tbaa !2454
  %4721 = lshr i64 %4711, 32
  %4722 = trunc i64 %4721 to i32
  %4723 = getelementptr inbounds i8, i8* %4695, i64 12
  %4724 = bitcast i8* %4723 to i32*
  store i32 %4722, i32* %4724, align 1, !tbaa !2454
  %4725 = bitcast %union.vec128_t* %XMM0 to i8*
  %4726 = bitcast %union.vec128_t* %XMM1 to i8*
  %4727 = load i64, i64* %PC
  %4728 = add i64 %4727, 4
  store i64 %4728, i64* %PC
  %4729 = bitcast i8* %4725 to double*
  %4730 = load double, double* %4729, align 1
  %4731 = bitcast i8* %4726 to double*
  %4732 = load double, double* %4731, align 1
  %4733 = fcmp uno double %4730, %4732
  br i1 %4733, label %4734, label %4746

; <label>:4734:                                   ; preds = %block_400a2b
  %4735 = fadd double %4730, %4732
  %4736 = bitcast double %4735 to i64
  %4737 = and i64 %4736, 9221120237041090560
  %4738 = icmp eq i64 %4737, 9218868437227405312
  %4739 = and i64 %4736, 2251799813685247
  %4740 = icmp ne i64 %4739, 0
  %4741 = and i1 %4738, %4740
  br i1 %4741, label %4742, label %4752

; <label>:4742:                                   ; preds = %4734
  %4743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4744 = load i64, i64* %4743, align 8, !tbaa !2428
  %4745 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4744, %struct.Memory* %MEMORY.15) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:4746:                                   ; preds = %block_400a2b
  %4747 = fcmp ogt double %4730, %4732
  br i1 %4747, label %4752, label %4748

; <label>:4748:                                   ; preds = %4746
  %4749 = fcmp olt double %4730, %4732
  br i1 %4749, label %4752, label %4750

; <label>:4750:                                   ; preds = %4748
  %4751 = fcmp oeq double %4730, %4732
  br i1 %4751, label %4752, label %4759

; <label>:4752:                                   ; preds = %4750, %4748, %4746, %4734
  %4753 = phi i8 [ 0, %4746 ], [ 0, %4748 ], [ 1, %4750 ], [ 1, %4734 ]
  %4754 = phi i8 [ 0, %4746 ], [ 0, %4748 ], [ 0, %4750 ], [ 1, %4734 ]
  %4755 = phi i8 [ 0, %4746 ], [ 1, %4748 ], [ 0, %4750 ], [ 1, %4734 ]
  %4756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4753, i8* %4756, align 1, !tbaa !2451
  %4757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4754, i8* %4757, align 1, !tbaa !2451
  %4758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4755, i8* %4758, align 1, !tbaa !2451
  br label %4759

; <label>:4759:                                   ; preds = %4752, %4750
  %4760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4760, align 1, !tbaa !2451
  %4761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4761, align 1, !tbaa !2451
  %4762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4762, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %4742, %4759
  %4763 = phi %struct.Memory* [ %4745, %4742 ], [ %MEMORY.15, %4759 ]
  %4764 = load i64, i64* %PC
  %4765 = add i64 %4764, 24
  %4766 = load i64, i64* %PC
  %4767 = add i64 %4766, 6
  %4768 = load i64, i64* %PC
  %4769 = add i64 %4768, 6
  store i64 %4769, i64* %PC
  %4770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4771 = load i8, i8* %4770, align 1, !tbaa !2432
  %4772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4773 = load i8, i8* %4772, align 1, !tbaa !2448
  %4774 = or i8 %4773, %4771
  %4775 = icmp ne i8 %4774, 0
  %4776 = zext i1 %4775 to i8
  store i8 %4776, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4778 = select i1 %4775, i64 %4765, i64 %4767
  store i64 %4778, i64* %4777, align 8, !tbaa !2428
  %4779 = load i8, i8* %BRANCH_TAKEN
  %4780 = icmp eq i8 %4779, 1
  br i1 %4780, label %block_400a68, label %block_400a56

block_4010b9:                                     ; preds = %block_4010a5
  %4781 = add i64 %2236, 10
  store i64 %4781, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %4782 = load i64, i64* %PC
  %4783 = add i64 %4782, 10
  store i64 %4783, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %4784 = load i64, i64* %RBP
  %4785 = sub i64 %4784, 20
  %4786 = load i64, i64* %PC
  %4787 = add i64 %4786, 4
  store i64 %4787, i64* %PC
  store i64 %4785, i64* %R8, align 8, !tbaa !2428
  %4788 = load i64, i64* %PC
  %4789 = add i64 %4788, 7
  store i64 %4789, i64* %PC
  %4790 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %4791 = zext i32 %4790 to i64
  store i64 %4791, i64* %RSI, align 8, !tbaa !2428
  %4792 = load i64, i64* %PC
  %4793 = add i64 %4792, 7
  store i64 %4793, i64* %PC
  %4794 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %4795 = zext i32 %4794 to i64
  store i64 %4795, i64* %RDX, align 8, !tbaa !2428
  %4796 = load i64, i64* %PC
  %4797 = add i64 %4796, 1665
  %4798 = load i64, i64* %PC
  %4799 = add i64 %4798, 5
  %4800 = load i64, i64* %PC
  %4801 = add i64 %4800, 5
  store i64 %4801, i64* %PC
  %4802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4803 = load i64, i64* %4802, align 8, !tbaa !2428
  %4804 = add i64 %4803, -8
  %4805 = inttoptr i64 %4804 to i64*
  store i64 %4799, i64* %4805
  store i64 %4804, i64* %4802, align 8, !tbaa !2428
  %4806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4797, i64* %4806, align 8, !tbaa !2428
  %4807 = load i64, i64* %PC
  %4808 = call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* %0, i64 %4807, %struct.Memory* %MEMORY.5)
  %4809 = load i64, i64* %PC
  %4810 = add i64 %4809, 10
  store i64 %4810, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %4811 = load i64, i64* %PC
  %4812 = add i64 %4811, 10
  store i64 %4812, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %4813 = load i64, i64* %PC
  %4814 = add i64 %4813, 10
  store i64 %4814, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %4815 = load i64, i64* %PC
  %4816 = add i64 %4815, 7
  store i64 %4816, i64* %PC
  %4817 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %4818 = zext i32 %4817 to i64
  store i64 %4818, i64* %RSI, align 8, !tbaa !2428
  %4819 = load i64, i64* %PC
  %4820 = add i64 %4819, 7
  store i64 %4820, i64* %PC
  %4821 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %4822 = zext i32 %4821 to i64
  store i64 %4822, i64* %RDX, align 8, !tbaa !2428
  %4823 = load i64, i64* %PC
  %4824 = add i64 %4823, 2080
  %4825 = load i64, i64* %PC
  %4826 = add i64 %4825, 5
  %4827 = load i64, i64* %PC
  %4828 = add i64 %4827, 5
  store i64 %4828, i64* %PC
  %4829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4830 = load i64, i64* %4829, align 8, !tbaa !2428
  %4831 = add i64 %4830, -8
  %4832 = inttoptr i64 %4831 to i64*
  store i64 %4826, i64* %4832
  store i64 %4831, i64* %4829, align 8, !tbaa !2428
  %4833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4824, i64* %4833, align 8, !tbaa !2428
  %4834 = load i64, i64* %PC
  %4835 = call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* %0, i64 %4834, %struct.Memory* %4808)
  %4836 = load i64, i64* %PC
  %4837 = add i64 %4836, 7
  store i64 %4837, i64* %PC
  %4838 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4839 = zext i32 %4838 to i64
  store i64 %4839, i64* %RAX, align 8, !tbaa !2428
  %4840 = load i64, i64* %RAX
  %4841 = load i64, i64* %PC
  %4842 = add i64 %4841, 3
  store i64 %4842, i64* %PC
  %4843 = trunc i64 %4840 to i32
  %4844 = add i32 1, %4843
  %4845 = zext i32 %4844 to i64
  store i64 %4845, i64* %RAX, align 8, !tbaa !2428
  %4846 = icmp ult i32 %4844, %4843
  %4847 = icmp ult i32 %4844, 1
  %4848 = or i1 %4846, %4847
  %4849 = zext i1 %4848 to i8
  %4850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4849, i8* %4850, align 1, !tbaa !2432
  %4851 = and i32 %4844, 255
  %4852 = call i32 @llvm.ctpop.i32(i32 %4851) #16
  %4853 = trunc i32 %4852 to i8
  %4854 = and i8 %4853, 1
  %4855 = xor i8 %4854, 1
  %4856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4855, i8* %4856, align 1, !tbaa !2446
  %4857 = xor i64 1, %4840
  %4858 = trunc i64 %4857 to i32
  %4859 = xor i32 %4858, %4844
  %4860 = lshr i32 %4859, 4
  %4861 = trunc i32 %4860 to i8
  %4862 = and i8 %4861, 1
  %4863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4862, i8* %4863, align 1, !tbaa !2447
  %4864 = icmp eq i32 %4844, 0
  %4865 = zext i1 %4864 to i8
  %4866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4865, i8* %4866, align 1, !tbaa !2448
  %4867 = lshr i32 %4844, 31
  %4868 = trunc i32 %4867 to i8
  %4869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4868, i8* %4869, align 1, !tbaa !2449
  %4870 = lshr i32 %4843, 31
  %4871 = xor i32 %4867, %4870
  %4872 = add nuw nsw i32 %4871, %4867
  %4873 = icmp eq i32 %4872, 2
  %4874 = zext i1 %4873 to i8
  %4875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4874, i8* %4875, align 1, !tbaa !2450
  %4876 = load i32, i32* %EAX
  %4877 = zext i32 %4876 to i64
  %4878 = load i64, i64* %PC
  %4879 = add i64 %4878, 7
  store i64 %4879, i64* %PC
  store i32 %4876, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4880 = load i64, i64* %PC
  %4881 = sub i64 %4880, 129
  %4882 = load i64, i64* %PC
  %4883 = add i64 %4882, 5
  store i64 %4883, i64* %PC
  %4884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4881, i64* %4884, align 8, !tbaa !2428
  br label %block_4010a5

block_400ea6:                                     ; preds = %block_400e3c, %block_400fa0
  %MEMORY.11 = phi %struct.Memory* [ %6592, %block_400e3c ], [ %MEMORY.13, %block_400fa0 ]
  %4885 = load i64, i64* %PC
  %4886 = sub i64 %4885, 2230
  %4887 = load i64, i64* %PC
  %4888 = add i64 %4887, 5
  %4889 = load i64, i64* %PC
  %4890 = add i64 %4889, 5
  store i64 %4890, i64* %PC
  %4891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4892 = load i64, i64* %4891, align 8, !tbaa !2428
  %4893 = add i64 %4892, -8
  %4894 = inttoptr i64 %4893 to i64*
  store i64 %4888, i64* %4894
  store i64 %4893, i64* %4891, align 8, !tbaa !2428
  %4895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4886, i64* %4895, align 8, !tbaa !2428
  %4896 = load i64, i64* %PC
  %4897 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %4896, %struct.Memory* %MEMORY.11)
  %4898 = load i64, i64* %RBP
  %4899 = sub i64 %4898, 80
  %4900 = bitcast %union.vec128_t* %XMM0 to i8*
  %4901 = load i64, i64* %PC
  %4902 = add i64 %4901, 5
  store i64 %4902, i64* %PC
  %4903 = bitcast i8* %4900 to <2 x float>*
  %4904 = load <2 x float>, <2 x float>* %4903, align 1
  %4905 = extractelement <2 x float> %4904, i32 0
  %4906 = inttoptr i64 %4899 to float*
  store float %4905, float* %4906
  %4907 = load i64, i64* %RBP
  %4908 = sub i64 %4907, 64
  %4909 = load i64, i64* %PC
  %4910 = add i64 %4909, 3
  store i64 %4910, i64* %PC
  %4911 = inttoptr i64 %4908 to i32*
  %4912 = load i32, i32* %4911
  %4913 = zext i32 %4912 to i64
  store i64 %4913, i64* %RAX, align 8, !tbaa !2428
  %4914 = load i64, i64* %RAX
  %4915 = load i64, i64* %PC
  %4916 = add i64 %4915, 3
  store i64 %4916, i64* %PC
  %4917 = trunc i64 %4914 to i32
  %4918 = add i32 1, %4917
  %4919 = zext i32 %4918 to i64
  store i64 %4919, i64* %RAX, align 8, !tbaa !2428
  %4920 = icmp ult i32 %4918, %4917
  %4921 = icmp ult i32 %4918, 1
  %4922 = or i1 %4920, %4921
  %4923 = zext i1 %4922 to i8
  %4924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4923, i8* %4924, align 1, !tbaa !2432
  %4925 = and i32 %4918, 255
  %4926 = call i32 @llvm.ctpop.i32(i32 %4925) #16
  %4927 = trunc i32 %4926 to i8
  %4928 = and i8 %4927, 1
  %4929 = xor i8 %4928, 1
  %4930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4929, i8* %4930, align 1, !tbaa !2446
  %4931 = xor i64 1, %4914
  %4932 = trunc i64 %4931 to i32
  %4933 = xor i32 %4932, %4918
  %4934 = lshr i32 %4933, 4
  %4935 = trunc i32 %4934 to i8
  %4936 = and i8 %4935, 1
  %4937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4936, i8* %4937, align 1, !tbaa !2447
  %4938 = icmp eq i32 %4918, 0
  %4939 = zext i1 %4938 to i8
  %4940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4939, i8* %4940, align 1, !tbaa !2448
  %4941 = lshr i32 %4918, 31
  %4942 = trunc i32 %4941 to i8
  %4943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4942, i8* %4943, align 1, !tbaa !2449
  %4944 = lshr i32 %4917, 31
  %4945 = xor i32 %4941, %4944
  %4946 = add nuw nsw i32 %4945, %4941
  %4947 = icmp eq i32 %4946, 2
  %4948 = zext i1 %4947 to i8
  %4949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4948, i8* %4949, align 1, !tbaa !2450
  %4950 = load i64, i64* %RBP
  %4951 = sub i64 %4950, 64
  %4952 = load i32, i32* %EAX
  %4953 = zext i32 %4952 to i64
  %4954 = load i64, i64* %PC
  %4955 = add i64 %4954, 3
  store i64 %4955, i64* %PC
  %4956 = inttoptr i64 %4951 to i32*
  store i32 %4952, i32* %4956
  %4957 = load i64, i64* %PC
  %4958 = add i64 %4957, 11
  store i64 %4958, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_400ec4

block_400b25:                                     ; preds = %block_400a17
  %4959 = load i64, i64* %PC
  %4960 = add i64 %4959, 8
  store i64 %4960, i64* %PC
  %4961 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 12) to float*)
  %4962 = bitcast i8* %6304 to float*
  store float %4961, float* %4962, align 1, !tbaa !2452
  %4963 = getelementptr inbounds i8, i8* %6304, i64 4
  %4964 = bitcast i8* %4963 to float*
  store float 0.000000e+00, float* %4964, align 1, !tbaa !2452
  %4965 = getelementptr inbounds i8, i8* %6304, i64 8
  %4966 = bitcast i8* %4965 to float*
  store float 0.000000e+00, float* %4966, align 1, !tbaa !2452
  %4967 = getelementptr inbounds i8, i8* %6304, i64 12
  %4968 = bitcast i8* %4967 to float*
  store float 0.000000e+00, float* %4968, align 1, !tbaa !2452
  %4969 = load i64, i64* %PC
  %4970 = add i64 %4969, 7315
  %4971 = load i64, i64* %PC
  %4972 = add i64 %4971, 5
  %4973 = load i64, i64* %PC
  %4974 = add i64 %4973, 5
  store i64 %4974, i64* %PC
  %4975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4976 = load i64, i64* %4975, align 8, !tbaa !2428
  %4977 = add i64 %4976, -8
  %4978 = inttoptr i64 %4977 to i64*
  store i64 %4972, i64* %4978
  store i64 %4977, i64* %4975, align 8, !tbaa !2428
  %4979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4970, i64* %4979, align 8, !tbaa !2428
  %4980 = load i64, i64* %PC
  %4981 = call %struct.Memory* @sub_4027c0_epslon_renamed_(%struct.State* %0, i64 %4980, %struct.Memory* %MEMORY.15)
  %4982 = load i64, i64* %PC
  %4983 = add i64 %4982, 10
  store i64 %4983, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %4984 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4985 = load i64, i64* %PC
  %4986 = add i64 %4985, 8
  store i64 %4986, i64* %PC
  %4987 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 12) to float*)
  %4988 = bitcast i8* %4984 to float*
  store float %4987, float* %4988, align 1, !tbaa !2452
  %4989 = getelementptr inbounds i8, i8* %4984, i64 4
  %4990 = bitcast i8* %4989 to float*
  store float 0.000000e+00, float* %4990, align 1, !tbaa !2452
  %4991 = getelementptr inbounds i8, i8* %4984, i64 8
  %4992 = bitcast i8* %4991 to float*
  store float 0.000000e+00, float* %4992, align 1, !tbaa !2452
  %4993 = getelementptr inbounds i8, i8* %4984, i64 12
  %4994 = bitcast i8* %4993 to float*
  store float 0.000000e+00, float* %4994, align 1, !tbaa !2452
  %4995 = load i64, i64* %RBP
  %4996 = sub i64 %4995, 36
  %4997 = bitcast %union.vec128_t* %XMM0 to i8*
  %4998 = load i64, i64* %PC
  %4999 = add i64 %4998, 5
  store i64 %4999, i64* %PC
  %5000 = bitcast i8* %4997 to <2 x float>*
  %5001 = load <2 x float>, <2 x float>* %5000, align 1
  %5002 = extractelement <2 x float> %5001, i32 0
  %5003 = inttoptr i64 %4996 to float*
  store float %5002, float* %5003
  %5004 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5005 = load i64, i64* %RBP
  %5006 = sub i64 %5005, 28
  %5007 = load i64, i64* %PC
  %5008 = add i64 %5007, 5
  store i64 %5008, i64* %PC
  %5009 = inttoptr i64 %5006 to float*
  %5010 = load float, float* %5009
  %5011 = bitcast i8* %5004 to float*
  store float %5010, float* %5011, align 1, !tbaa !2452
  %5012 = getelementptr inbounds i8, i8* %5004, i64 4
  %5013 = bitcast i8* %5012 to float*
  store float 0.000000e+00, float* %5013, align 1, !tbaa !2452
  %5014 = getelementptr inbounds i8, i8* %5004, i64 8
  %5015 = bitcast i8* %5014 to float*
  store float 0.000000e+00, float* %5015, align 1, !tbaa !2452
  %5016 = getelementptr inbounds i8, i8* %5004, i64 12
  %5017 = bitcast i8* %5016 to float*
  store float 0.000000e+00, float* %5017, align 1, !tbaa !2452
  %5018 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5019 = load i64, i64* %PC
  %5020 = add i64 %5019, 9
  store i64 %5020, i64* %PC
  %5021 = bitcast i8* %5018 to <2 x i32>*
  %5022 = load <2 x i32>, <2 x i32>* %5021, align 1
  %5023 = getelementptr inbounds i8, i8* %5018, i64 8
  %5024 = bitcast i8* %5023 to <2 x i32>*
  %5025 = load <2 x i32>, <2 x i32>* %5024, align 1
  %5026 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5027 = sitofp i32 %5026 to float
  %5028 = bitcast i8* %5018 to float*
  store float %5027, float* %5028, align 1, !tbaa !2452
  %5029 = extractelement <2 x i32> %5022, i32 1
  %5030 = getelementptr inbounds i8, i8* %5018, i64 4
  %5031 = bitcast i8* %5030 to i32*
  store i32 %5029, i32* %5031, align 1, !tbaa !2452
  %5032 = extractelement <2 x i32> %5025, i32 0
  %5033 = bitcast i8* %5023 to i32*
  store i32 %5032, i32* %5033, align 1, !tbaa !2452
  %5034 = extractelement <2 x i32> %5025, i32 1
  %5035 = getelementptr inbounds i8, i8* %5018, i64 12
  %5036 = bitcast i8* %5035 to i32*
  store i32 %5034, i32* %5036, align 1, !tbaa !2452
  %5037 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5038 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5039 = load i64, i64* %RBP
  %5040 = sub i64 %5039, 20
  %5041 = load i64, i64* %PC
  %5042 = add i64 %5041, 5
  store i64 %5042, i64* %PC
  %5043 = bitcast i8* %5038 to <2 x float>*
  %5044 = load <2 x float>, <2 x float>* %5043, align 1
  %5045 = getelementptr inbounds i8, i8* %5038, i64 8
  %5046 = bitcast i8* %5045 to <2 x i32>*
  %5047 = load <2 x i32>, <2 x i32>* %5046, align 1
  %5048 = inttoptr i64 %5040 to float*
  %5049 = load float, float* %5048
  %5050 = extractelement <2 x float> %5044, i32 0
  %5051 = fmul float %5050, %5049
  %5052 = bitcast i8* %5037 to float*
  store float %5051, float* %5052, align 1, !tbaa !2452
  %5053 = bitcast <2 x float> %5044 to <2 x i32>
  %5054 = extractelement <2 x i32> %5053, i32 1
  %5055 = getelementptr inbounds i8, i8* %5037, i64 4
  %5056 = bitcast i8* %5055 to i32*
  store i32 %5054, i32* %5056, align 1, !tbaa !2452
  %5057 = extractelement <2 x i32> %5047, i32 0
  %5058 = getelementptr inbounds i8, i8* %5037, i64 8
  %5059 = bitcast i8* %5058 to i32*
  store i32 %5057, i32* %5059, align 1, !tbaa !2452
  %5060 = extractelement <2 x i32> %5047, i32 1
  %5061 = getelementptr inbounds i8, i8* %5037, i64 12
  %5062 = bitcast i8* %5061 to i32*
  store i32 %5060, i32* %5062, align 1, !tbaa !2452
  %5063 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5064 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5065 = load i64, i64* %RBP
  %5066 = sub i64 %5065, 24
  %5067 = load i64, i64* %PC
  %5068 = add i64 %5067, 5
  store i64 %5068, i64* %PC
  %5069 = bitcast i8* %5064 to <2 x float>*
  %5070 = load <2 x float>, <2 x float>* %5069, align 1
  %5071 = getelementptr inbounds i8, i8* %5064, i64 8
  %5072 = bitcast i8* %5071 to <2 x i32>*
  %5073 = load <2 x i32>, <2 x i32>* %5072, align 1
  %5074 = inttoptr i64 %5066 to float*
  %5075 = load float, float* %5074
  %5076 = extractelement <2 x float> %5070, i32 0
  %5077 = fmul float %5076, %5075
  %5078 = bitcast i8* %5063 to float*
  store float %5077, float* %5078, align 1, !tbaa !2452
  %5079 = bitcast <2 x float> %5070 to <2 x i32>
  %5080 = extractelement <2 x i32> %5079, i32 1
  %5081 = getelementptr inbounds i8, i8* %5063, i64 4
  %5082 = bitcast i8* %5081 to i32*
  store i32 %5080, i32* %5082, align 1, !tbaa !2452
  %5083 = extractelement <2 x i32> %5073, i32 0
  %5084 = getelementptr inbounds i8, i8* %5063, i64 8
  %5085 = bitcast i8* %5084 to i32*
  store i32 %5083, i32* %5085, align 1, !tbaa !2452
  %5086 = extractelement <2 x i32> %5073, i32 1
  %5087 = getelementptr inbounds i8, i8* %5063, i64 12
  %5088 = bitcast i8* %5087 to i32*
  store i32 %5086, i32* %5088, align 1, !tbaa !2452
  %5089 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5090 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5091 = load i64, i64* %RBP
  %5092 = sub i64 %5091, 36
  %5093 = load i64, i64* %PC
  %5094 = add i64 %5093, 5
  store i64 %5094, i64* %PC
  %5095 = bitcast i8* %5090 to <2 x float>*
  %5096 = load <2 x float>, <2 x float>* %5095, align 1
  %5097 = getelementptr inbounds i8, i8* %5090, i64 8
  %5098 = bitcast i8* %5097 to <2 x i32>*
  %5099 = load <2 x i32>, <2 x i32>* %5098, align 1
  %5100 = inttoptr i64 %5092 to float*
  %5101 = load float, float* %5100
  %5102 = extractelement <2 x float> %5096, i32 0
  %5103 = fmul float %5102, %5101
  %5104 = bitcast i8* %5089 to float*
  store float %5103, float* %5104, align 1, !tbaa !2452
  %5105 = bitcast <2 x float> %5096 to <2 x i32>
  %5106 = extractelement <2 x i32> %5105, i32 1
  %5107 = getelementptr inbounds i8, i8* %5089, i64 4
  %5108 = bitcast i8* %5107 to i32*
  store i32 %5106, i32* %5108, align 1, !tbaa !2452
  %5109 = extractelement <2 x i32> %5099, i32 0
  %5110 = getelementptr inbounds i8, i8* %5089, i64 8
  %5111 = bitcast i8* %5110 to i32*
  store i32 %5109, i32* %5111, align 1, !tbaa !2452
  %5112 = extractelement <2 x i32> %5099, i32 1
  %5113 = getelementptr inbounds i8, i8* %5089, i64 12
  %5114 = bitcast i8* %5113 to i32*
  store i32 %5112, i32* %5114, align 1, !tbaa !2452
  %5115 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5116 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5117 = bitcast %union.vec128_t* %XMM2 to i8*
  %5118 = load i64, i64* %PC
  %5119 = add i64 %5118, 4
  store i64 %5119, i64* %PC
  %5120 = bitcast i8* %5116 to <2 x float>*
  %5121 = load <2 x float>, <2 x float>* %5120, align 1
  %5122 = getelementptr inbounds i8, i8* %5116, i64 8
  %5123 = bitcast i8* %5122 to <2 x i32>*
  %5124 = load <2 x i32>, <2 x i32>* %5123, align 1
  %5125 = bitcast i8* %5117 to <2 x float>*
  %5126 = load <2 x float>, <2 x float>* %5125, align 1
  %5127 = extractelement <2 x float> %5121, i32 0
  %5128 = extractelement <2 x float> %5126, i32 0
  %5129 = fdiv float %5127, %5128
  %5130 = bitcast i8* %5115 to float*
  store float %5129, float* %5130, align 1, !tbaa !2452
  %5131 = bitcast <2 x float> %5121 to <2 x i32>
  %5132 = extractelement <2 x i32> %5131, i32 1
  %5133 = getelementptr inbounds i8, i8* %5115, i64 4
  %5134 = bitcast i8* %5133 to i32*
  store i32 %5132, i32* %5134, align 1, !tbaa !2452
  %5135 = extractelement <2 x i32> %5124, i32 0
  %5136 = getelementptr inbounds i8, i8* %5115, i64 8
  %5137 = bitcast i8* %5136 to i32*
  store i32 %5135, i32* %5137, align 1, !tbaa !2452
  %5138 = extractelement <2 x i32> %5124, i32 1
  %5139 = getelementptr inbounds i8, i8* %5115, i64 12
  %5140 = bitcast i8* %5139 to i32*
  store i32 %5138, i32* %5140, align 1, !tbaa !2452
  %5141 = load i64, i64* %RBP
  %5142 = sub i64 %5141, 32
  %5143 = bitcast %union.vec128_t* %XMM0 to i8*
  %5144 = load i64, i64* %PC
  %5145 = add i64 %5144, 5
  store i64 %5145, i64* %PC
  %5146 = bitcast i8* %5143 to <2 x float>*
  %5147 = load <2 x float>, <2 x float>* %5146, align 1
  %5148 = extractelement <2 x float> %5147, i32 0
  %5149 = inttoptr i64 %5142 to float*
  store float %5148, float* %5149
  %5150 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5151 = load i64, i64* %RBP
  %5152 = sub i64 %5151, 36
  %5153 = load i64, i64* %PC
  %5154 = add i64 %5153, 5
  store i64 %5154, i64* %PC
  %5155 = inttoptr i64 %5152 to float*
  %5156 = load float, float* %5155
  %5157 = bitcast i8* %5150 to float*
  store float %5156, float* %5157, align 1, !tbaa !2452
  %5158 = getelementptr inbounds i8, i8* %5150, i64 4
  %5159 = bitcast i8* %5158 to float*
  store float 0.000000e+00, float* %5159, align 1, !tbaa !2452
  %5160 = getelementptr inbounds i8, i8* %5150, i64 8
  %5161 = bitcast i8* %5160 to float*
  store float 0.000000e+00, float* %5161, align 1, !tbaa !2452
  %5162 = getelementptr inbounds i8, i8* %5150, i64 12
  %5163 = bitcast i8* %5162 to float*
  store float 0.000000e+00, float* %5163, align 1, !tbaa !2452
  %5164 = load i64, i64* %RBP
  %5165 = sub i64 %5164, 48
  %5166 = bitcast %union.vec128_t* %XMM0 to i8*
  %5167 = load i64, i64* %PC
  %5168 = add i64 %5167, 5
  store i64 %5168, i64* %PC
  %5169 = bitcast i8* %5166 to <2 x float>*
  %5170 = load <2 x float>, <2 x float>* %5169, align 1
  %5171 = extractelement <2 x float> %5170, i32 0
  %5172 = inttoptr i64 %5165 to float*
  store float %5171, float* %5172
  %5173 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5174 = load i64, i64* %PC
  %5175 = add i64 %5174, 9
  store i64 %5175, i64* %PC
  %5176 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to float*)
  %5177 = bitcast i8* %5173 to float*
  store float %5176, float* %5177, align 1, !tbaa !2452
  %5178 = getelementptr inbounds i8, i8* %5173, i64 4
  %5179 = bitcast i8* %5178 to float*
  store float 0.000000e+00, float* %5179, align 1, !tbaa !2452
  %5180 = getelementptr inbounds i8, i8* %5173, i64 8
  %5181 = bitcast i8* %5180 to float*
  store float 0.000000e+00, float* %5181, align 1, !tbaa !2452
  %5182 = getelementptr inbounds i8, i8* %5173, i64 12
  %5183 = bitcast i8* %5182 to float*
  store float 0.000000e+00, float* %5183, align 1, !tbaa !2452
  %5184 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5186 = bitcast %union.vec128_t* %XMM1 to i8*
  %5187 = load i64, i64* %PC
  %5188 = add i64 %5187, 4
  store i64 %5188, i64* %PC
  %5189 = bitcast i8* %5185 to <2 x float>*
  %5190 = load <2 x float>, <2 x float>* %5189, align 1
  %5191 = getelementptr inbounds i8, i8* %5185, i64 8
  %5192 = bitcast i8* %5191 to <2 x i32>*
  %5193 = load <2 x i32>, <2 x i32>* %5192, align 1
  %5194 = bitcast i8* %5186 to <2 x float>*
  %5195 = load <2 x float>, <2 x float>* %5194, align 1
  %5196 = extractelement <2 x float> %5190, i32 0
  %5197 = extractelement <2 x float> %5195, i32 0
  %5198 = fsub float %5196, %5197
  %5199 = bitcast i8* %5184 to float*
  store float %5198, float* %5199, align 1, !tbaa !2452
  %5200 = bitcast <2 x float> %5190 to <2 x i32>
  %5201 = extractelement <2 x i32> %5200, i32 1
  %5202 = getelementptr inbounds i8, i8* %5184, i64 4
  %5203 = bitcast i8* %5202 to i32*
  store i32 %5201, i32* %5203, align 1, !tbaa !2452
  %5204 = extractelement <2 x i32> %5193, i32 0
  %5205 = getelementptr inbounds i8, i8* %5184, i64 8
  %5206 = bitcast i8* %5205 to i32*
  store i32 %5204, i32* %5206, align 1, !tbaa !2452
  %5207 = extractelement <2 x i32> %5193, i32 1
  %5208 = getelementptr inbounds i8, i8* %5184, i64 12
  %5209 = bitcast i8* %5208 to i32*
  store i32 %5207, i32* %5209, align 1, !tbaa !2452
  %5210 = load i64, i64* %RBP
  %5211 = sub i64 %5210, 52
  %5212 = bitcast %union.vec128_t* %XMM0 to i8*
  %5213 = load i64, i64* %PC
  %5214 = add i64 %5213, 5
  store i64 %5214, i64* %PC
  %5215 = bitcast i8* %5212 to <2 x float>*
  %5216 = load <2 x float>, <2 x float>* %5215, align 1
  %5217 = extractelement <2 x float> %5216, i32 0
  %5218 = inttoptr i64 %5211 to float*
  store float %5217, float* %5218
  %5219 = load i64, i64* %PC
  %5220 = add i64 %5219, 7
  store i64 %5220, i64* %PC
  %5221 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5222 = zext i32 %5221 to i64
  store i64 %5222, i64* %RAX, align 8, !tbaa !2428
  %5223 = load i64, i64* %RAX
  %5224 = load i64, i64* %PC
  %5225 = add i64 %5224, 3
  store i64 %5225, i64* %PC
  %5226 = trunc i64 %5223 to i32
  %5227 = sub i32 %5226, 1
  %5228 = zext i32 %5227 to i64
  store i64 %5228, i64* %RAX, align 8, !tbaa !2428
  %5229 = icmp ult i32 %5226, 1
  %5230 = zext i1 %5229 to i8
  %5231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5230, i8* %5231, align 1, !tbaa !2432
  %5232 = and i32 %5227, 255
  %5233 = call i32 @llvm.ctpop.i32(i32 %5232) #16
  %5234 = trunc i32 %5233 to i8
  %5235 = and i8 %5234, 1
  %5236 = xor i8 %5235, 1
  %5237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5236, i8* %5237, align 1, !tbaa !2446
  %5238 = xor i64 1, %5223
  %5239 = trunc i64 %5238 to i32
  %5240 = xor i32 %5239, %5227
  %5241 = lshr i32 %5240, 4
  %5242 = trunc i32 %5241 to i8
  %5243 = and i8 %5242, 1
  %5244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5243, i8* %5244, align 1, !tbaa !2447
  %5245 = icmp eq i32 %5227, 0
  %5246 = zext i1 %5245 to i8
  %5247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5246, i8* %5247, align 1, !tbaa !2448
  %5248 = lshr i32 %5227, 31
  %5249 = trunc i32 %5248 to i8
  %5250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5249, i8* %5250, align 1, !tbaa !2449
  %5251 = lshr i32 %5226, 31
  %5252 = xor i32 %5248, %5251
  %5253 = add nuw nsw i32 %5252, %5251
  %5254 = icmp eq i32 %5253, 2
  %5255 = zext i1 %5254 to i8
  %5256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5255, i8* %5256, align 1, !tbaa !2450
  %5257 = load i32, i32* %EAX
  %5258 = zext i32 %5257 to i64
  %5259 = load i64, i64* %PC
  %5260 = add i64 %5259, 3
  store i64 %5260, i64* %PC
  %5261 = shl i64 %5258, 32
  %5262 = ashr exact i64 %5261, 32
  store i64 %5262, i64* %RCX, align 8, !tbaa !2428
  %5263 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5264 = load i64, i64* %RCX
  %5265 = mul i64 %5264, 4
  %5266 = add i64 %5265, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %5267 = load i64, i64* %PC
  %5268 = add i64 %5267, 9
  store i64 %5268, i64* %PC
  %5269 = inttoptr i64 %5266 to float*
  %5270 = load float, float* %5269
  %5271 = bitcast i8* %5263 to float*
  store float %5270, float* %5271, align 1, !tbaa !2452
  %5272 = getelementptr inbounds i8, i8* %5263, i64 4
  %5273 = bitcast i8* %5272 to float*
  store float 0.000000e+00, float* %5273, align 1, !tbaa !2452
  %5274 = getelementptr inbounds i8, i8* %5263, i64 8
  %5275 = bitcast i8* %5274 to float*
  store float 0.000000e+00, float* %5275, align 1, !tbaa !2452
  %5276 = getelementptr inbounds i8, i8* %5263, i64 12
  %5277 = bitcast i8* %5276 to float*
  store float 0.000000e+00, float* %5277, align 1, !tbaa !2452
  %5278 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5279 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5280 = bitcast %union.vec128_t* %XMM1 to i8*
  %5281 = load i64, i64* %PC
  %5282 = add i64 %5281, 4
  store i64 %5282, i64* %PC
  %5283 = bitcast i8* %5279 to <2 x float>*
  %5284 = load <2 x float>, <2 x float>* %5283, align 1
  %5285 = getelementptr inbounds i8, i8* %5279, i64 8
  %5286 = bitcast i8* %5285 to <2 x i32>*
  %5287 = load <2 x i32>, <2 x i32>* %5286, align 1
  %5288 = bitcast i8* %5280 to <2 x float>*
  %5289 = load <2 x float>, <2 x float>* %5288, align 1
  %5290 = extractelement <2 x float> %5284, i32 0
  %5291 = extractelement <2 x float> %5289, i32 0
  %5292 = fsub float %5290, %5291
  %5293 = bitcast i8* %5278 to float*
  store float %5292, float* %5293, align 1, !tbaa !2452
  %5294 = bitcast <2 x float> %5284 to <2 x i32>
  %5295 = extractelement <2 x i32> %5294, i32 1
  %5296 = getelementptr inbounds i8, i8* %5278, i64 4
  %5297 = bitcast i8* %5296 to i32*
  store i32 %5295, i32* %5297, align 1, !tbaa !2452
  %5298 = extractelement <2 x i32> %5287, i32 0
  %5299 = getelementptr inbounds i8, i8* %5278, i64 8
  %5300 = bitcast i8* %5299 to i32*
  store i32 %5298, i32* %5300, align 1, !tbaa !2452
  %5301 = extractelement <2 x i32> %5287, i32 1
  %5302 = getelementptr inbounds i8, i8* %5278, i64 12
  %5303 = bitcast i8* %5302 to i32*
  store i32 %5301, i32* %5303, align 1, !tbaa !2452
  %5304 = load i64, i64* %RBP
  %5305 = sub i64 %5304, 56
  %5306 = bitcast %union.vec128_t* %XMM0 to i8*
  %5307 = load i64, i64* %PC
  %5308 = add i64 %5307, 5
  store i64 %5308, i64* %PC
  %5309 = bitcast i8* %5306 to <2 x float>*
  %5310 = load <2 x float>, <2 x float>* %5309, align 1
  %5311 = extractelement <2 x float> %5310, i32 0
  %5312 = inttoptr i64 %5305 to float*
  store float %5311, float* %5312
  %5313 = load i64, i64* %PC
  %5314 = add i64 %5313, 8
  store i64 %5314, i64* %PC
  %5315 = load i64, i64* @stderr
  store i64 %5315, i64* %RDI, align 8, !tbaa !2428
  %5316 = load i64, i64* %PC
  %5317 = add i64 %5316, 2
  store i64 %5317, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5318 = load i64, i64* %PC
  %5319 = sub i64 %5318, 1732
  %5320 = load i64, i64* %PC
  %5321 = add i64 %5320, 5
  %5322 = load i64, i64* %PC
  %5323 = add i64 %5322, 5
  store i64 %5323, i64* %PC
  %5324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5325 = load i64, i64* %5324, align 8, !tbaa !2428
  %5326 = add i64 %5325, -8
  %5327 = inttoptr i64 %5326 to i64*
  store i64 %5321, i64* %5327
  store i64 %5326, i64* %5324, align 8, !tbaa !2428
  %5328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5319, i64* %5328, align 8, !tbaa !2428
  %5329 = load i64, i64* %PC
  %5330 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5329, %struct.Memory* %4981)
  %5331 = load i64, i64* %PC
  %5332 = add i64 %5331, 10
  store i64 %5332, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %5333 = load i64, i64* %PC
  %5334 = add i64 %5333, 8
  store i64 %5334, i64* %PC
  %5335 = load i64, i64* @stderr
  store i64 %5335, i64* %RDI, align 8, !tbaa !2428
  %5336 = load i64, i64* %RBP
  %5337 = sub i64 %5336, 908
  %5338 = load i32, i32* %EAX
  %5339 = zext i32 %5338 to i64
  %5340 = load i64, i64* %PC
  %5341 = add i64 %5340, 6
  store i64 %5341, i64* %PC
  %5342 = inttoptr i64 %5337 to i32*
  store i32 %5338, i32* %5342
  %5343 = load i64, i64* %PC
  %5344 = add i64 %5343, 2
  store i64 %5344, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5345 = load i64, i64* %PC
  %5346 = sub i64 %5345, 1763
  %5347 = load i64, i64* %PC
  %5348 = add i64 %5347, 5
  %5349 = load i64, i64* %PC
  %5350 = add i64 %5349, 5
  store i64 %5350, i64* %PC
  %5351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5352 = load i64, i64* %5351, align 8, !tbaa !2428
  %5353 = add i64 %5352, -8
  %5354 = inttoptr i64 %5353 to i64*
  store i64 %5348, i64* %5354
  store i64 %5353, i64* %5351, align 8, !tbaa !2428
  %5355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5346, i64* %5355, align 8, !tbaa !2428
  %5356 = load i64, i64* %PC
  %5357 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5356, %struct.Memory* %5330)
  %5358 = load i64, i64* %PC
  %5359 = add i64 %5358, 10
  store i64 %5359, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %5360 = load i64, i64* %PC
  %5361 = add i64 %5360, 8
  store i64 %5361, i64* %PC
  %5362 = load i64, i64* @stderr
  store i64 %5362, i64* %RDI, align 8, !tbaa !2428
  %5363 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5364 = load i64, i64* %RBP
  %5365 = sub i64 %5364, 32
  %5366 = load i64, i64* %PC
  %5367 = add i64 %5366, 5
  store i64 %5367, i64* %PC
  %5368 = inttoptr i64 %5365 to float*
  %5369 = load float, float* %5368
  %5370 = fpext float %5369 to double
  %5371 = bitcast i8* %5363 to double*
  store double %5370, double* %5371, align 1, !tbaa !2455
  %5372 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5373 = load i64, i64* %RBP
  %5374 = sub i64 %5373, 28
  %5375 = load i64, i64* %PC
  %5376 = add i64 %5375, 5
  store i64 %5376, i64* %PC
  %5377 = inttoptr i64 %5374 to float*
  %5378 = load float, float* %5377
  %5379 = fpext float %5378 to double
  %5380 = bitcast i8* %5372 to double*
  store double %5379, double* %5380, align 1, !tbaa !2455
  %5381 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5382 = load i64, i64* %RBP
  %5383 = sub i64 %5382, 48
  %5384 = load i64, i64* %PC
  %5385 = add i64 %5384, 5
  store i64 %5385, i64* %PC
  %5386 = inttoptr i64 %5383 to float*
  %5387 = load float, float* %5386
  %5388 = fpext float %5387 to double
  %5389 = bitcast i8* %5381 to double*
  store double %5388, double* %5389, align 1, !tbaa !2455
  %5390 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5391 = load i64, i64* %RBP
  %5392 = sub i64 %5391, 52
  %5393 = load i64, i64* %PC
  %5394 = add i64 %5393, 5
  store i64 %5394, i64* %PC
  %5395 = inttoptr i64 %5392 to float*
  %5396 = load float, float* %5395
  %5397 = fpext float %5396 to double
  %5398 = bitcast i8* %5390 to double*
  store double %5397, double* %5398, align 1, !tbaa !2455
  %5399 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5400 = load i64, i64* %RBP
  %5401 = sub i64 %5400, 56
  %5402 = load i64, i64* %PC
  %5403 = add i64 %5402, 5
  store i64 %5403, i64* %PC
  %5404 = inttoptr i64 %5401 to float*
  %5405 = load float, float* %5404
  %5406 = fpext float %5405 to double
  %5407 = bitcast i8* %5399 to double*
  store double %5406, double* %5407, align 1, !tbaa !2455
  %5408 = load i64, i64* %RBP
  %5409 = sub i64 %5408, 912
  %5410 = load i32, i32* %EAX
  %5411 = zext i32 %5410 to i64
  %5412 = load i64, i64* %PC
  %5413 = add i64 %5412, 6
  store i64 %5413, i64* %PC
  %5414 = inttoptr i64 %5409 to i32*
  store i32 %5410, i32* %5414
  %5415 = load i64, i64* %PC
  %5416 = add i64 %5415, 2
  store i64 %5416, i64* %PC
  store i8 5, i8* %AL, align 1, !tbaa !2451
  %5417 = load i64, i64* %PC
  %5418 = sub i64 %5417, 1819
  %5419 = load i64, i64* %PC
  %5420 = add i64 %5419, 5
  %5421 = load i64, i64* %PC
  %5422 = add i64 %5421, 5
  store i64 %5422, i64* %PC
  %5423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5424 = load i64, i64* %5423, align 8, !tbaa !2428
  %5425 = add i64 %5424, -8
  %5426 = inttoptr i64 %5425 to i64*
  store i64 %5420, i64* %5426
  store i64 %5425, i64* %5423, align 8, !tbaa !2428
  %5427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5418, i64* %5427, align 8, !tbaa !2428
  %5428 = load i64, i64* %PC
  %5429 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5428, %struct.Memory* %5357)
  %5430 = load i64, i64* %PC
  %5431 = add i64 %5430, 10
  store i64 %5431, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %5432 = load i64, i64* %PC
  %5433 = add i64 %5432, 8
  store i64 %5433, i64* %PC
  %5434 = load i64, i64* @stderr
  store i64 %5434, i64* %RDI, align 8, !tbaa !2428
  %5435 = load i64, i64* %PC
  %5436 = add i64 %5435, 7
  store i64 %5436, i64* %PC
  %5437 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5438 = zext i32 %5437 to i64
  store i64 %5438, i64* %RDX, align 8, !tbaa !2428
  %5439 = load i64, i64* %RBP
  %5440 = sub i64 %5439, 916
  %5441 = load i32, i32* %EAX
  %5442 = zext i32 %5441 to i64
  %5443 = load i64, i64* %PC
  %5444 = add i64 %5443, 6
  store i64 %5444, i64* %PC
  %5445 = inttoptr i64 %5440 to i32*
  store i32 %5441, i32* %5445
  %5446 = load i64, i64* %PC
  %5447 = add i64 %5446, 2
  store i64 %5447, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5448 = load i64, i64* %PC
  %5449 = sub i64 %5448, 1857
  %5450 = load i64, i64* %PC
  %5451 = add i64 %5450, 5
  %5452 = load i64, i64* %PC
  %5453 = add i64 %5452, 5
  store i64 %5453, i64* %PC
  %5454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5455 = load i64, i64* %5454, align 8, !tbaa !2428
  %5456 = add i64 %5455, -8
  %5457 = inttoptr i64 %5456 to i64*
  store i64 %5451, i64* %5457
  store i64 %5456, i64* %5454, align 8, !tbaa !2428
  %5458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5449, i64* %5458, align 8, !tbaa !2428
  %5459 = load i64, i64* %PC
  %5460 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5459, %struct.Memory* %5429)
  %5461 = load i64, i64* %PC
  %5462 = add i64 %5461, 10
  store i64 %5462, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %5463 = load i64, i64* %PC
  %5464 = add i64 %5463, 8
  store i64 %5464, i64* %PC
  %5465 = load i64, i64* @stderr
  store i64 %5465, i64* %RDI, align 8, !tbaa !2428
  %5466 = load i64, i64* %PC
  %5467 = add i64 %5466, 7
  store i64 %5467, i64* %PC
  %5468 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %5469 = zext i32 %5468 to i64
  store i64 %5469, i64* %RDX, align 8, !tbaa !2428
  %5470 = load i64, i64* %RBP
  %5471 = sub i64 %5470, 920
  %5472 = load i32, i32* %EAX
  %5473 = zext i32 %5472 to i64
  %5474 = load i64, i64* %PC
  %5475 = add i64 %5474, 6
  store i64 %5475, i64* %PC
  %5476 = inttoptr i64 %5471 to i32*
  store i32 %5472, i32* %5476
  %5477 = load i64, i64* %PC
  %5478 = add i64 %5477, 2
  store i64 %5478, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5479 = load i64, i64* %PC
  %5480 = sub i64 %5479, 1895
  %5481 = load i64, i64* %PC
  %5482 = add i64 %5481, 5
  %5483 = load i64, i64* %PC
  %5484 = add i64 %5483, 5
  store i64 %5484, i64* %PC
  %5485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5486 = load i64, i64* %5485, align 8, !tbaa !2428
  %5487 = add i64 %5486, -8
  %5488 = inttoptr i64 %5487 to i64*
  store i64 %5482, i64* %5488
  store i64 %5487, i64* %5485, align 8, !tbaa !2428
  %5489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5480, i64* %5489, align 8, !tbaa !2428
  %5490 = load i64, i64* %PC
  %5491 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5490, %struct.Memory* %5460)
  %5492 = load i64, i64* %PC
  %5493 = add i64 %5492, 10
  store i64 %5493, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %5494 = load i64, i64* %PC
  %5495 = add i64 %5494, 8
  store i64 %5495, i64* %PC
  %5496 = load i64, i64* @stderr
  store i64 %5496, i64* %RDI, align 8, !tbaa !2428
  %5497 = load i64, i64* %RBP
  %5498 = sub i64 %5497, 924
  %5499 = load i32, i32* %EAX
  %5500 = zext i32 %5499 to i64
  %5501 = load i64, i64* %PC
  %5502 = add i64 %5501, 6
  store i64 %5502, i64* %PC
  %5503 = inttoptr i64 %5498 to i32*
  store i32 %5499, i32* %5503
  %5504 = load i64, i64* %PC
  %5505 = add i64 %5504, 2
  store i64 %5505, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5506 = load i64, i64* %PC
  %5507 = sub i64 %5506, 1926
  %5508 = load i64, i64* %PC
  %5509 = add i64 %5508, 5
  %5510 = load i64, i64* %PC
  %5511 = add i64 %5510, 5
  store i64 %5511, i64* %PC
  %5512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5513 = load i64, i64* %5512, align 8, !tbaa !2428
  %5514 = add i64 %5513, -8
  %5515 = inttoptr i64 %5514 to i64*
  store i64 %5509, i64* %5515
  store i64 %5514, i64* %5512, align 8, !tbaa !2428
  %5516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5507, i64* %5516, align 8, !tbaa !2428
  %5517 = load i64, i64* %PC
  %5518 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5517, %struct.Memory* %5491)
  %5519 = load i64, i64* %PC
  %5520 = add i64 %5519, 10
  store i64 %5520, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %5521 = load i64, i64* %PC
  %5522 = add i64 %5521, 8
  store i64 %5522, i64* %PC
  %5523 = load i64, i64* @stderr
  store i64 %5523, i64* %RDI, align 8, !tbaa !2428
  %5524 = load i64, i64* %RBP
  %5525 = sub i64 %5524, 928
  %5526 = load i32, i32* %EAX
  %5527 = zext i32 %5526 to i64
  %5528 = load i64, i64* %PC
  %5529 = add i64 %5528, 6
  store i64 %5529, i64* %PC
  %5530 = inttoptr i64 %5525 to i32*
  store i32 %5526, i32* %5530
  %5531 = load i64, i64* %PC
  %5532 = add i64 %5531, 2
  store i64 %5532, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5533 = load i64, i64* %PC
  %5534 = sub i64 %5533, 1957
  %5535 = load i64, i64* %PC
  %5536 = add i64 %5535, 5
  %5537 = load i64, i64* %PC
  %5538 = add i64 %5537, 5
  store i64 %5538, i64* %PC
  %5539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5540 = load i64, i64* %5539, align 8, !tbaa !2428
  %5541 = add i64 %5540, -8
  %5542 = inttoptr i64 %5541 to i64*
  store i64 %5536, i64* %5542
  store i64 %5541, i64* %5539, align 8, !tbaa !2428
  %5543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5534, i64* %5543, align 8, !tbaa !2428
  %5544 = load i64, i64* %PC
  %5545 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5544, %struct.Memory* %5518)
  %5546 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5547 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5548 = bitcast %union.vec128_t* %XMM0 to i8*
  %5549 = load i64, i64* %PC
  %5550 = add i64 %5549, 3
  store i64 %5550, i64* %PC
  %5551 = bitcast i8* %5547 to i64*
  %5552 = load i64, i64* %5551, align 1
  %5553 = getelementptr inbounds i8, i8* %5547, i64 8
  %5554 = bitcast i8* %5553 to i64*
  %5555 = load i64, i64* %5554, align 1
  %5556 = bitcast i8* %5548 to i64*
  %5557 = load i64, i64* %5556, align 1
  %5558 = getelementptr inbounds i8, i8* %5548, i64 8
  %5559 = bitcast i8* %5558 to i64*
  %5560 = load i64, i64* %5559, align 1
  %5561 = xor i64 %5557, %5552
  %5562 = xor i64 %5560, %5555
  %5563 = trunc i64 %5561 to i32
  %5564 = lshr i64 %5561, 32
  %5565 = trunc i64 %5564 to i32
  %5566 = bitcast i8* %5546 to i32*
  store i32 %5563, i32* %5566, align 1, !tbaa !2454
  %5567 = getelementptr inbounds i8, i8* %5546, i64 4
  %5568 = bitcast i8* %5567 to i32*
  store i32 %5565, i32* %5568, align 1, !tbaa !2454
  %5569 = trunc i64 %5562 to i32
  %5570 = getelementptr inbounds i8, i8* %5546, i64 8
  %5571 = bitcast i8* %5570 to i32*
  store i32 %5569, i32* %5571, align 1, !tbaa !2454
  %5572 = lshr i64 %5562, 32
  %5573 = trunc i64 %5572 to i32
  %5574 = getelementptr inbounds i8, i8* %5546, i64 12
  %5575 = bitcast i8* %5574 to i32*
  store i32 %5573, i32* %5575, align 1, !tbaa !2454
  %5576 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5577 = load i64, i64* %RBP
  %5578 = sub i64 %5577, 16
  %5579 = load i64, i64* %PC
  %5580 = add i64 %5579, 5
  store i64 %5580, i64* %PC
  %5581 = inttoptr i64 %5578 to float*
  %5582 = load float, float* %5581
  %5583 = bitcast i8* %5576 to float*
  store float %5582, float* %5583, align 1, !tbaa !2452
  %5584 = getelementptr inbounds i8, i8* %5576, i64 4
  %5585 = bitcast i8* %5584 to float*
  store float 0.000000e+00, float* %5585, align 1, !tbaa !2452
  %5586 = getelementptr inbounds i8, i8* %5576, i64 8
  %5587 = bitcast i8* %5586 to float*
  store float 0.000000e+00, float* %5587, align 1, !tbaa !2452
  %5588 = getelementptr inbounds i8, i8* %5576, i64 12
  %5589 = bitcast i8* %5588 to float*
  store float 0.000000e+00, float* %5589, align 1, !tbaa !2452
  %5590 = bitcast %union.vec128_t* %XMM1 to i8*
  %5591 = load i64, i64* %PC
  %5592 = add i64 %5591, 9
  store i64 %5592, i64* %PC
  %5593 = bitcast i8* %5590 to <2 x float>*
  %5594 = load <2 x float>, <2 x float>* %5593, align 1
  %5595 = extractelement <2 x float> %5594, i32 0
  store float %5595, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*)
  %5596 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5597 = load i64, i64* %RBP
  %5598 = sub i64 %5597, 16
  %5599 = load i64, i64* %PC
  %5600 = add i64 %5599, 5
  store i64 %5600, i64* %PC
  %5601 = inttoptr i64 %5598 to float*
  %5602 = load float, float* %5601
  %5603 = fpext float %5602 to double
  %5604 = bitcast i8* %5596 to double*
  store double %5603, double* %5604, align 1, !tbaa !2455
  %5605 = bitcast %union.vec128_t* %XMM1 to i8*
  %5606 = bitcast %union.vec128_t* %XMM0 to i8*
  %5607 = load i64, i64* %PC
  %5608 = add i64 %5607, 4
  store i64 %5608, i64* %PC
  %5609 = bitcast i8* %5605 to double*
  %5610 = load double, double* %5609, align 1
  %5611 = bitcast i8* %5606 to double*
  %5612 = load double, double* %5611, align 1
  %5613 = fcmp uno double %5610, %5612
  br i1 %5613, label %5614, label %5626

; <label>:5614:                                   ; preds = %block_400b25
  %5615 = fadd double %5610, %5612
  %5616 = bitcast double %5615 to i64
  %5617 = and i64 %5616, 9221120237041090560
  %5618 = icmp eq i64 %5617, 9218868437227405312
  %5619 = and i64 %5616, 2251799813685247
  %5620 = icmp ne i64 %5619, 0
  %5621 = and i1 %5618, %5620
  br i1 %5621, label %5622, label %5632

; <label>:5622:                                   ; preds = %5614
  %5623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5624 = load i64, i64* %5623, align 8, !tbaa !2428
  %5625 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5624, %struct.Memory* %5545) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:5626:                                   ; preds = %block_400b25
  %5627 = fcmp ogt double %5610, %5612
  br i1 %5627, label %5632, label %5628

; <label>:5628:                                   ; preds = %5626
  %5629 = fcmp olt double %5610, %5612
  br i1 %5629, label %5632, label %5630

; <label>:5630:                                   ; preds = %5628
  %5631 = fcmp oeq double %5610, %5612
  br i1 %5631, label %5632, label %5639

; <label>:5632:                                   ; preds = %5630, %5628, %5626, %5614
  %5633 = phi i8 [ 0, %5626 ], [ 0, %5628 ], [ 1, %5630 ], [ 1, %5614 ]
  %5634 = phi i8 [ 0, %5626 ], [ 0, %5628 ], [ 0, %5630 ], [ 1, %5614 ]
  %5635 = phi i8 [ 0, %5626 ], [ 1, %5628 ], [ 0, %5630 ], [ 1, %5614 ]
  %5636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5633, i8* %5636, align 1, !tbaa !2451
  %5637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5634, i8* %5637, align 1, !tbaa !2451
  %5638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5635, i8* %5638, align 1, !tbaa !2451
  br label %5639

; <label>:5639:                                   ; preds = %5632, %5630
  %5640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5640, align 1, !tbaa !2451
  %5641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5641, align 1, !tbaa !2451
  %5642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5642, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %5622, %5639
  %5643 = phi %struct.Memory* [ %5625, %5622 ], [ %5545, %5639 ]
  %5644 = load i64, i64* %RBP
  %5645 = sub i64 %5644, 932
  %5646 = load i32, i32* %EAX
  %5647 = zext i32 %5646 to i64
  %5648 = load i64, i64* %PC
  %5649 = add i64 %5648, 6
  store i64 %5649, i64* %PC
  %5650 = inttoptr i64 %5645 to i32*
  store i32 %5646, i32* %5650
  %5651 = load i64, i64* %PC
  %5652 = add i64 %5651, 84
  %5653 = load i64, i64* %PC
  %5654 = add i64 %5653, 6
  %5655 = load i64, i64* %PC
  %5656 = add i64 %5655, 6
  store i64 %5656, i64* %PC
  %5657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5658 = load i8, i8* %5657, align 1, !tbaa !2432
  %5659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5660 = load i8, i8* %5659, align 1, !tbaa !2448
  %5661 = or i8 %5660, %5658
  %5662 = icmp ne i8 %5661, 0
  %5663 = zext i1 %5662 to i8
  store i8 %5663, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5665 = select i1 %5662, i64 %5652, i64 %5654
  store i64 %5665, i64* %5664, align 8, !tbaa !2428
  %5666 = load i8, i8* %BRANCH_TAKEN
  %5667 = icmp eq i8 %5666, 1
  %5668 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %5667, label %block_400d0e, label %block_400cc0

block_400e24:                                     ; preds = %block_400dd9
  %5669 = load i64, i64* %RBP
  %5670 = sub i64 %5669, 68
  %5671 = load i64, i64* %PC
  %5672 = add i64 %5671, 3
  store i64 %5672, i64* %PC
  %5673 = inttoptr i64 %5670 to i32*
  %5674 = load i32, i32* %5673
  %5675 = zext i32 %5674 to i64
  store i64 %5675, i64* %RAX, align 8, !tbaa !2428
  %5676 = load i64, i64* %RAX
  %5677 = load i64, i64* %PC
  %5678 = add i64 %5677, 3
  store i64 %5678, i64* %PC
  %5679 = trunc i64 %5676 to i32
  %5680 = shl i32 %5679, 1
  %5681 = icmp slt i32 %5679, 0
  %5682 = icmp slt i32 %5680, 0
  %5683 = xor i1 %5681, %5682
  %5684 = zext i32 %5680 to i64
  store i64 %5684, i64* %RAX, align 8, !tbaa !2428
  %5685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5686 = zext i1 %5681 to i8
  store i8 %5686, i8* %5685, align 1, !tbaa !2451
  %5687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5688 = and i32 %5680, 254
  %5689 = call i32 @llvm.ctpop.i32(i32 %5688) #16
  %5690 = trunc i32 %5689 to i8
  %5691 = and i8 %5690, 1
  %5692 = xor i8 %5691, 1
  store i8 %5692, i8* %5687, align 1, !tbaa !2451
  %5693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5693, align 1, !tbaa !2451
  %5694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5695 = icmp eq i32 %5680, 0
  %5696 = zext i1 %5695 to i8
  store i8 %5696, i8* %5694, align 1, !tbaa !2451
  %5697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5698 = lshr i32 %5680, 31
  %5699 = trunc i32 %5698 to i8
  store i8 %5699, i8* %5697, align 1, !tbaa !2451
  %5700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5701 = zext i1 %5683 to i8
  store i8 %5701, i8* %5700, align 1, !tbaa !2451
  %5702 = load i64, i64* %RBP
  %5703 = sub i64 %5702, 68
  %5704 = load i32, i32* %EAX
  %5705 = zext i32 %5704 to i64
  %5706 = load i64, i64* %PC
  %5707 = add i64 %5706, 3
  store i64 %5707, i64* %PC
  %5708 = inttoptr i64 %5703 to i32*
  store i32 %5704, i32* %5708
  br label %block_400e2d

block_40170c:                                     ; preds = %block_40149d
  %5709 = add i64 %6116, 10
  store i64 %5709, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %5710 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5711 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5712 = bitcast %union.vec128_t* %XMM0 to i8*
  %5713 = load i64, i64* %PC
  %5714 = add i64 %5713, 3
  store i64 %5714, i64* %PC
  %5715 = bitcast i8* %5711 to i64*
  %5716 = load i64, i64* %5715, align 1
  %5717 = getelementptr inbounds i8, i8* %5711, i64 8
  %5718 = bitcast i8* %5717 to i64*
  %5719 = load i64, i64* %5718, align 1
  %5720 = bitcast i8* %5712 to i64*
  %5721 = load i64, i64* %5720, align 1
  %5722 = getelementptr inbounds i8, i8* %5712, i64 8
  %5723 = bitcast i8* %5722 to i64*
  %5724 = load i64, i64* %5723, align 1
  %5725 = xor i64 %5721, %5716
  %5726 = xor i64 %5724, %5719
  %5727 = trunc i64 %5725 to i32
  %5728 = lshr i64 %5725, 32
  %5729 = trunc i64 %5728 to i32
  %5730 = bitcast i8* %5710 to i32*
  store i32 %5727, i32* %5730, align 1, !tbaa !2454
  %5731 = getelementptr inbounds i8, i8* %5710, i64 4
  %5732 = bitcast i8* %5731 to i32*
  store i32 %5729, i32* %5732, align 1, !tbaa !2454
  %5733 = trunc i64 %5726 to i32
  %5734 = getelementptr inbounds i8, i8* %5710, i64 8
  %5735 = bitcast i8* %5734 to i32*
  store i32 %5733, i32* %5735, align 1, !tbaa !2454
  %5736 = lshr i64 %5726, 32
  %5737 = trunc i64 %5736 to i32
  %5738 = getelementptr inbounds i8, i8* %5710, i64 12
  %5739 = bitcast i8* %5738 to i32*
  store i32 %5737, i32* %5739, align 1, !tbaa !2454
  %5740 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5741 = load i64, i64* %PC
  %5742 = add i64 %5741, 8
  store i64 %5742, i64* %PC
  %5743 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 48) to double*)
  %5744 = bitcast i8* %5740 to double*
  store double %5743, double* %5744, align 1, !tbaa !2455
  %5745 = getelementptr inbounds i8, i8* %5740, i64 8
  %5746 = bitcast i8* %5745 to double*
  store double 0.000000e+00, double* %5746, align 1, !tbaa !2455
  %5747 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5748 = load i64, i64* %PC
  %5749 = add i64 %5748, 9
  store i64 %5749, i64* %PC
  %5750 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %5751 = fpext float %5750 to double
  %5752 = bitcast i8* %5747 to double*
  store double %5751, double* %5752, align 1, !tbaa !2455
  %5753 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5754 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5755 = bitcast %union.vec128_t* %XMM1 to i8*
  %5756 = load i64, i64* %PC
  %5757 = add i64 %5756, 4
  store i64 %5757, i64* %PC
  %5758 = bitcast i8* %5754 to double*
  %5759 = load double, double* %5758, align 1
  %5760 = getelementptr inbounds i8, i8* %5754, i64 8
  %5761 = bitcast i8* %5760 to i64*
  %5762 = load i64, i64* %5761, align 1
  %5763 = bitcast i8* %5755 to double*
  %5764 = load double, double* %5763, align 1
  %5765 = fdiv double %5759, %5764
  %5766 = bitcast i8* %5753 to double*
  store double %5765, double* %5766, align 1, !tbaa !2455
  %5767 = getelementptr inbounds i8, i8* %5753, i64 8
  %5768 = bitcast i8* %5767 to i64*
  store i64 %5762, i64* %5768, align 1, !tbaa !2455
  %5769 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5770 = bitcast %union.vec128_t* %XMM2 to i8*
  %5771 = load i64, i64* %PC
  %5772 = add i64 %5771, 4
  store i64 %5772, i64* %PC
  %5773 = bitcast i8* %5769 to <2 x i32>*
  %5774 = load <2 x i32>, <2 x i32>* %5773, align 1
  %5775 = getelementptr inbounds i8, i8* %5769, i64 8
  %5776 = bitcast i8* %5775 to <2 x i32>*
  %5777 = load <2 x i32>, <2 x i32>* %5776, align 1
  %5778 = bitcast i8* %5770 to double*
  %5779 = load double, double* %5778, align 1
  %5780 = fptrunc double %5779 to float
  %5781 = bitcast i8* %5769 to float*
  store float %5780, float* %5781, align 1, !tbaa !2452
  %5782 = extractelement <2 x i32> %5774, i32 1
  %5783 = getelementptr inbounds i8, i8* %5769, i64 4
  %5784 = bitcast i8* %5783 to i32*
  store i32 %5782, i32* %5784, align 1, !tbaa !2452
  %5785 = extractelement <2 x i32> %5777, i32 0
  %5786 = bitcast i8* %5775 to i32*
  store i32 %5785, i32* %5786, align 1, !tbaa !2452
  %5787 = extractelement <2 x i32> %5777, i32 1
  %5788 = getelementptr inbounds i8, i8* %5769, i64 12
  %5789 = bitcast i8* %5788 to i32*
  store i32 %5787, i32* %5789, align 1, !tbaa !2452
  %5790 = bitcast %union.vec128_t* %XMM1 to i8*
  %5791 = load i64, i64* %PC
  %5792 = add i64 %5791, 9
  store i64 %5792, i64* %PC
  %5793 = bitcast i8* %5790 to <2 x float>*
  %5794 = load <2 x float>, <2 x float>* %5793, align 1
  %5795 = extractelement <2 x float> %5794, i32 0
  store float %5795, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %5796 = load i64, i64* %PC
  %5797 = add i64 %5796, 8
  store i64 %5797, i64* %PC
  %5798 = load i64, i64* @stderr
  store i64 %5798, i64* %RDI, align 8, !tbaa !2428
  %5799 = load i64, i64* %PC
  %5800 = add i64 %5799, 2
  store i64 %5800, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %5801 = load i64, i64* %PC
  %5802 = sub i64 %5801, 4693
  %5803 = load i64, i64* %PC
  %5804 = add i64 %5803, 5
  %5805 = load i64, i64* %PC
  %5806 = add i64 %5805, 5
  store i64 %5806, i64* %PC
  %5807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5808 = load i64, i64* %5807, align 8, !tbaa !2428
  %5809 = add i64 %5808, -8
  %5810 = inttoptr i64 %5809 to i64*
  store i64 %5804, i64* %5810
  store i64 %5809, i64* %5807, align 8, !tbaa !2428
  %5811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5802, i64* %5811, align 8, !tbaa !2428
  %5812 = load i64, i64* %PC
  %5813 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5812, %struct.Memory* %MEMORY.14)
  %5814 = load i64, i64* %RCX
  %5815 = load i32, i32* %ECX
  %5816 = zext i32 %5815 to i64
  %5817 = load i64, i64* %PC
  %5818 = add i64 %5817, 2
  store i64 %5818, i64* %PC
  %5819 = xor i64 %5816, %5814
  %5820 = trunc i64 %5819 to i32
  %5821 = and i64 %5819, 4294967295
  store i64 %5821, i64* %RCX, align 8, !tbaa !2428
  %5822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5822, align 1, !tbaa !2432
  %5823 = and i32 %5820, 255
  %5824 = call i32 @llvm.ctpop.i32(i32 %5823) #16
  %5825 = trunc i32 %5824 to i8
  %5826 = and i8 %5825, 1
  %5827 = xor i8 %5826, 1
  %5828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5827, i8* %5828, align 1, !tbaa !2446
  %5829 = icmp eq i32 %5820, 0
  %5830 = zext i1 %5829 to i8
  %5831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5830, i8* %5831, align 1, !tbaa !2448
  %5832 = lshr i32 %5820, 31
  %5833 = trunc i32 %5832 to i8
  %5834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5833, i8* %5834, align 1, !tbaa !2449
  %5835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5835, align 1, !tbaa !2450
  %5836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5836, align 1, !tbaa !2447
  %5837 = load i64, i64* %RBP
  %5838 = sub i64 %5837, 996
  %5839 = load i32, i32* %EAX
  %5840 = zext i32 %5839 to i64
  %5841 = load i64, i64* %PC
  %5842 = add i64 %5841, 6
  store i64 %5842, i64* %PC
  %5843 = inttoptr i64 %5838 to i32*
  store i32 %5839, i32* %5843
  %5844 = load i32, i32* %ECX
  %5845 = zext i32 %5844 to i64
  %5846 = load i64, i64* %PC
  %5847 = add i64 %5846, 2
  store i64 %5847, i64* %PC
  %5848 = and i64 %5845, 4294967295
  store i64 %5848, i64* %RAX, align 8, !tbaa !2428
  %5849 = load i64, i64* %RSP
  %5850 = load i64, i64* %PC
  %5851 = add i64 %5850, 7
  store i64 %5851, i64* %PC
  %5852 = add i64 1008, %5849
  store i64 %5852, i64* %RSP, align 8, !tbaa !2428
  %5853 = icmp ult i64 %5852, %5849
  %5854 = icmp ult i64 %5852, 1008
  %5855 = or i1 %5853, %5854
  %5856 = zext i1 %5855 to i8
  %5857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5856, i8* %5857, align 1, !tbaa !2432
  %5858 = trunc i64 %5852 to i32
  %5859 = and i32 %5858, 255
  %5860 = call i32 @llvm.ctpop.i32(i32 %5859) #16
  %5861 = trunc i32 %5860 to i8
  %5862 = and i8 %5861, 1
  %5863 = xor i8 %5862, 1
  %5864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5863, i8* %5864, align 1, !tbaa !2446
  %5865 = xor i64 1008, %5849
  %5866 = xor i64 %5865, %5852
  %5867 = lshr i64 %5866, 4
  %5868 = trunc i64 %5867 to i8
  %5869 = and i8 %5868, 1
  %5870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5869, i8* %5870, align 1, !tbaa !2447
  %5871 = icmp eq i64 %5852, 0
  %5872 = zext i1 %5871 to i8
  %5873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5872, i8* %5873, align 1, !tbaa !2448
  %5874 = lshr i64 %5852, 63
  %5875 = trunc i64 %5874 to i8
  %5876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5875, i8* %5876, align 1, !tbaa !2449
  %5877 = lshr i64 %5849, 63
  %5878 = xor i64 %5874, %5877
  %5879 = add nuw nsw i64 %5878, %5874
  %5880 = icmp eq i64 %5879, 2
  %5881 = zext i1 %5880 to i8
  %5882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5881, i8* %5882, align 1, !tbaa !2450
  %5883 = load i64, i64* %PC
  %5884 = add i64 %5883, 1
  store i64 %5884, i64* %PC
  %5885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5886 = load i64, i64* %5885, align 8, !tbaa !2428
  %5887 = add i64 %5886, 8
  %5888 = inttoptr i64 %5886 to i64*
  %5889 = load i64, i64* %5888
  store i64 %5889, i64* %RBP, align 8, !tbaa !2428
  store i64 %5887, i64* %5885, align 8, !tbaa !2428
  %5890 = load i64, i64* %PC
  %5891 = add i64 %5890, 1
  store i64 %5891, i64* %PC
  %5892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5894 = load i64, i64* %5893, align 8, !tbaa !2428
  %5895 = inttoptr i64 %5894 to i64*
  %5896 = load i64, i64* %5895
  store i64 %5896, i64* %5892, align 8, !tbaa !2428
  %5897 = add i64 %5894, 8
  store i64 %5897, i64* %5893, align 8, !tbaa !2428
  ret %struct.Memory* %5813

block_400d23:                                     ; preds = %block_400d0e, %block_400cc0
  %MEMORY.12 = phi %struct.Memory* [ %5643, %block_400d0e ], [ %5643, %block_400cc0 ]
  %5898 = load i64, i64* %RDI
  %5899 = load i32, i32* %EDI
  %5900 = zext i32 %5899 to i64
  %5901 = load i64, i64* %PC
  %5902 = add i64 %5901, 2
  store i64 %5902, i64* %PC
  %5903 = xor i64 %5900, %5898
  %5904 = trunc i64 %5903 to i32
  %5905 = and i64 %5903, 4294967295
  store i64 %5905, i64* %RDI, align 8, !tbaa !2428
  %5906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5906, align 1, !tbaa !2432
  %5907 = and i32 %5904, 255
  %5908 = call i32 @llvm.ctpop.i32(i32 %5907) #16
  %5909 = trunc i32 %5908 to i8
  %5910 = and i8 %5909, 1
  %5911 = xor i8 %5910, 1
  %5912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5911, i8* %5912, align 1, !tbaa !2446
  %5913 = icmp eq i32 %5904, 0
  %5914 = zext i1 %5913 to i8
  %5915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5914, i8* %5915, align 1, !tbaa !2448
  %5916 = lshr i32 %5904, 31
  %5917 = trunc i32 %5916 to i8
  %5918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5917, i8* %5918, align 1, !tbaa !2449
  %5919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5919, align 1, !tbaa !2450
  %5920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5920, align 1, !tbaa !2447
  %5921 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5922 = load i64, i64* %RBP
  %5923 = sub i64 %5922, 16
  %5924 = load i64, i64* %PC
  %5925 = add i64 %5924, 5
  store i64 %5925, i64* %PC
  %5926 = inttoptr i64 %5923 to float*
  %5927 = load float, float* %5926
  %5928 = bitcast i8* %5921 to float*
  store float %5927, float* %5928, align 1, !tbaa !2452
  %5929 = getelementptr inbounds i8, i8* %5921, i64 4
  %5930 = bitcast i8* %5929 to float*
  store float 0.000000e+00, float* %5930, align 1, !tbaa !2452
  %5931 = getelementptr inbounds i8, i8* %5921, i64 8
  %5932 = bitcast i8* %5931 to float*
  store float 0.000000e+00, float* %5932, align 1, !tbaa !2452
  %5933 = getelementptr inbounds i8, i8* %5921, i64 12
  %5934 = bitcast i8* %5933 to float*
  store float 0.000000e+00, float* %5934, align 1, !tbaa !2452
  %5935 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5936 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5937 = load i64, i64* %RBP
  %5938 = sub i64 %5937, 8
  %5939 = load i64, i64* %PC
  %5940 = add i64 %5939, 5
  store i64 %5940, i64* %PC
  %5941 = bitcast i8* %5936 to <2 x float>*
  %5942 = load <2 x float>, <2 x float>* %5941, align 1
  %5943 = getelementptr inbounds i8, i8* %5936, i64 8
  %5944 = bitcast i8* %5943 to <2 x i32>*
  %5945 = load <2 x i32>, <2 x i32>* %5944, align 1
  %5946 = inttoptr i64 %5938 to float*
  %5947 = load float, float* %5946
  %5948 = extractelement <2 x float> %5942, i32 0
  %5949 = fdiv float %5948, %5947
  %5950 = bitcast i8* %5935 to float*
  store float %5949, float* %5950, align 1, !tbaa !2452
  %5951 = bitcast <2 x float> %5942 to <2 x i32>
  %5952 = extractelement <2 x i32> %5951, i32 1
  %5953 = getelementptr inbounds i8, i8* %5935, i64 4
  %5954 = bitcast i8* %5953 to i32*
  store i32 %5952, i32* %5954, align 1, !tbaa !2452
  %5955 = extractelement <2 x i32> %5945, i32 0
  %5956 = getelementptr inbounds i8, i8* %5935, i64 8
  %5957 = bitcast i8* %5956 to i32*
  store i32 %5955, i32* %5957, align 1, !tbaa !2452
  %5958 = extractelement <2 x i32> %5945, i32 1
  %5959 = getelementptr inbounds i8, i8* %5935, i64 12
  %5960 = bitcast i8* %5959 to i32*
  store i32 %5958, i32* %5960, align 1, !tbaa !2452
  %5961 = bitcast %union.vec128_t* %XMM0 to i8*
  %5962 = load i64, i64* %PC
  %5963 = add i64 %5962, 9
  store i64 %5963, i64* %PC
  %5964 = bitcast i8* %5961 to <2 x float>*
  %5965 = load <2 x float>, <2 x float>* %5964, align 1
  %5966 = extractelement <2 x float> %5965, i32 0
  store float %5966, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*)
  %5967 = load i64, i64* %PC
  %5968 = add i64 %5967, 6968
  %5969 = load i64, i64* %PC
  %5970 = add i64 %5969, 5
  %5971 = load i64, i64* %PC
  %5972 = add i64 %5971, 5
  store i64 %5972, i64* %PC
  %5973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5974 = load i64, i64* %5973, align 8, !tbaa !2428
  %5975 = add i64 %5974, -8
  %5976 = inttoptr i64 %5975 to i64*
  store i64 %5970, i64* %5976
  store i64 %5975, i64* %5973, align 8, !tbaa !2428
  %5977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5968, i64* %5977, align 8, !tbaa !2428
  %5978 = load i64, i64* %PC
  %5979 = call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* %0, i64 %5978, %struct.Memory* %MEMORY.12)
  %5980 = load i64, i64* %PC
  %5981 = add i64 %5980, 10
  store i64 %5981, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %5982 = load i64, i64* %PC
  %5983 = add i64 %5982, 8
  store i64 %5983, i64* %PC
  %5984 = load i64, i64* @stderr
  store i64 %5984, i64* %RDI, align 8, !tbaa !2428
  %5985 = load i64, i64* %PC
  %5986 = add i64 %5985, 2
  store i64 %5986, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5987 = load i64, i64* %PC
  %5988 = sub i64 %5987, 2145
  %5989 = load i64, i64* %PC
  %5990 = add i64 %5989, 5
  %5991 = load i64, i64* %PC
  %5992 = add i64 %5991, 5
  store i64 %5992, i64* %PC
  %5993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5994 = load i64, i64* %5993, align 8, !tbaa !2428
  %5995 = add i64 %5994, -8
  %5996 = inttoptr i64 %5995 to i64*
  store i64 %5990, i64* %5996
  store i64 %5995, i64* %5993, align 8, !tbaa !2428
  %5997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5988, i64* %5997, align 8, !tbaa !2428
  %5998 = load i64, i64* %PC
  %5999 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5998, %struct.Memory* %5979)
  %6000 = load i64, i64* %RBP
  %6001 = sub i64 %6000, 64
  %6002 = load i64, i64* %PC
  %6003 = add i64 %6002, 7
  store i64 %6003, i64* %PC
  %6004 = inttoptr i64 %6001 to i32*
  store i32 -3, i32* %6004
  %6005 = load i64, i64* %RBP
  %6006 = sub i64 %6005, 68
  %6007 = load i64, i64* %PC
  %6008 = add i64 %6007, 7
  store i64 %6008, i64* %PC
  %6009 = inttoptr i64 %6006 to i32*
  store i32 100, i32* %6009
  %6010 = load i64, i64* %RBP
  %6011 = sub i64 %6010, 936
  %6012 = load i32, i32* %EAX
  %6013 = zext i32 %6012 to i64
  %6014 = load i64, i64* %PC
  %6015 = add i64 %6014, 6
  store i64 %6015, i64* %PC
  %6016 = inttoptr i64 %6011 to i32*
  store i32 %6012, i32* %6016
  br label %block_400d6a

block_400fa0:                                     ; preds = %block_400f8f, %block_400f4a
  %MEMORY.13 = phi %struct.Memory* [ %3669, %block_400f4a ], [ %3669, %block_400f8f ]
  %6017 = load i64, i64* %PC
  %6018 = add i64 %6017, 5
  %6019 = load i64, i64* %PC
  %6020 = add i64 %6019, 5
  store i64 %6020, i64* %PC
  %6021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6018, i64* %6021, align 8, !tbaa !2428
  %6022 = load i64, i64* %RBP
  %6023 = sub i64 %6022, 64
  %6024 = load i64, i64* %PC
  %6025 = add i64 %6024, 4
  store i64 %6025, i64* %PC
  %6026 = inttoptr i64 %6023 to i32*
  %6027 = load i32, i32* %6026
  %6028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6028, align 1, !tbaa !2432
  %6029 = and i32 %6027, 255
  %6030 = call i32 @llvm.ctpop.i32(i32 %6029) #16
  %6031 = trunc i32 %6030 to i8
  %6032 = and i8 %6031, 1
  %6033 = xor i8 %6032, 1
  %6034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6033, i8* %6034, align 1, !tbaa !2446
  %6035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6035, align 1, !tbaa !2447
  %6036 = icmp eq i32 %6027, 0
  %6037 = zext i1 %6036 to i8
  %6038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6037, i8* %6038, align 1, !tbaa !2448
  %6039 = lshr i32 %6027, 31
  %6040 = trunc i32 %6039 to i8
  %6041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6040, i8* %6041, align 1, !tbaa !2449
  %6042 = lshr i32 %6027, 31
  %6043 = xor i32 %6039, %6042
  %6044 = add nuw nsw i32 %6043, %6042
  %6045 = icmp eq i32 %6044, 2
  %6046 = zext i1 %6045 to i8
  %6047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6046, i8* %6047, align 1, !tbaa !2450
  %6048 = load i64, i64* %PC
  %6049 = sub i64 %6048, 259
  %6050 = load i64, i64* %PC
  %6051 = add i64 %6050, 6
  %6052 = load i64, i64* %PC
  %6053 = add i64 %6052, 6
  store i64 %6053, i64* %PC
  %6054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6055 = load i8, i8* %6054, align 1, !tbaa !2449
  %6056 = icmp ne i8 %6055, 0
  %6057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6058 = load i8, i8* %6057, align 1, !tbaa !2450
  %6059 = icmp ne i8 %6058, 0
  %6060 = xor i1 %6056, %6059
  %6061 = zext i1 %6060 to i8
  store i8 %6061, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6063 = select i1 %6060, i64 %6049, i64 %6051
  store i64 %6063, i64* %6062, align 8, !tbaa !2428
  %6064 = load i8, i8* %BRANCH_TAKEN
  %6065 = icmp eq i8 %6064, 1
  br i1 %6065, label %block_400ea6, label %block_400faf

block_40149d:                                     ; preds = %block_4013ba, %block_4015e6
  %MEMORY.14 = phi %struct.Memory* [ %4381, %block_4013ba ], [ %2066, %block_4015e6 ]
  %6066 = load i64, i64* %PC
  %6067 = add i64 %6066, 8
  store i64 %6067, i64* %PC
  %6068 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %6069 = sub i32 %6068, 12
  %6070 = icmp ult i32 %6068, 12
  %6071 = zext i1 %6070 to i8
  %6072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6071, i8* %6072, align 1, !tbaa !2432
  %6073 = and i32 %6069, 255
  %6074 = call i32 @llvm.ctpop.i32(i32 %6073) #16
  %6075 = trunc i32 %6074 to i8
  %6076 = and i8 %6075, 1
  %6077 = xor i8 %6076, 1
  %6078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6077, i8* %6078, align 1, !tbaa !2446
  %6079 = xor i32 %6068, 12
  %6080 = xor i32 %6079, %6069
  %6081 = lshr i32 %6080, 4
  %6082 = trunc i32 %6081 to i8
  %6083 = and i8 %6082, 1
  %6084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6083, i8* %6084, align 1, !tbaa !2447
  %6085 = icmp eq i32 %6069, 0
  %6086 = zext i1 %6085 to i8
  %6087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6086, i8* %6087, align 1, !tbaa !2448
  %6088 = lshr i32 %6069, 31
  %6089 = trunc i32 %6088 to i8
  %6090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6089, i8* %6090, align 1, !tbaa !2449
  %6091 = lshr i32 %6068, 31
  %6092 = xor i32 %6088, %6091
  %6093 = add nuw nsw i32 %6092, %6091
  %6094 = icmp eq i32 %6093, 2
  %6095 = zext i1 %6094 to i8
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6095, i8* %6096, align 1, !tbaa !2450
  %6097 = load i64, i64* %PC
  %6098 = add i64 %6097, 615
  %6099 = load i64, i64* %PC
  %6100 = add i64 %6099, 6
  %6101 = load i64, i64* %PC
  %6102 = add i64 %6101, 6
  store i64 %6102, i64* %PC
  %6103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6104 = load i8, i8* %6103, align 1, !tbaa !2449
  %6105 = icmp ne i8 %6104, 0
  %6106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6107 = load i8, i8* %6106, align 1, !tbaa !2450
  %6108 = icmp ne i8 %6107, 0
  %6109 = xor i1 %6105, %6108
  %6110 = xor i1 %6109, true
  %6111 = zext i1 %6110 to i8
  store i8 %6111, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6113 = select i1 %6109, i64 %6100, i64 %6098
  store i64 %6113, i64* %6112, align 8, !tbaa !2428
  %6114 = load i8, i8* %BRANCH_TAKEN
  %6115 = icmp eq i8 %6114, 1
  %6116 = load i64, i64* %PC
  br i1 %6115, label %block_40170c, label %block_4014ab

block_400937:                                     ; preds = %block_4008eb
  %6117 = add i64 %1533, 10
  store i64 %6117, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %6118 = load i64, i64* %PC
  %6119 = add i64 %6118, 10
  store i64 %6119, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %6120 = load i64, i64* %RBP
  %6121 = sub i64 %6120, 20
  %6122 = load i64, i64* %PC
  %6123 = add i64 %6122, 4
  store i64 %6123, i64* %PC
  store i64 %6121, i64* %R8, align 8, !tbaa !2428
  %6124 = load i64, i64* %PC
  %6125 = add i64 %6124, 7
  store i64 %6125, i64* %PC
  %6126 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %6127 = zext i32 %6126 to i64
  store i64 %6127, i64* %RSI, align 8, !tbaa !2428
  %6128 = load i64, i64* %PC
  %6129 = add i64 %6128, 7
  store i64 %6129, i64* %PC
  %6130 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6131 = zext i32 %6130 to i64
  store i64 %6131, i64* %RDX, align 8, !tbaa !2428
  %6132 = load i64, i64* %PC
  %6133 = add i64 %6132, 3587
  %6134 = load i64, i64* %PC
  %6135 = add i64 %6134, 5
  %6136 = load i64, i64* %PC
  %6137 = add i64 %6136, 5
  store i64 %6137, i64* %PC
  %6138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6139 = load i64, i64* %6138, align 8, !tbaa !2428
  %6140 = add i64 %6139, -8
  %6141 = inttoptr i64 %6140 to i64*
  store i64 %6135, i64* %6141
  store i64 %6140, i64* %6138, align 8, !tbaa !2428
  %6142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6133, i64* %6142, align 8, !tbaa !2428
  %6143 = load i64, i64* %PC
  %6144 = call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* %0, i64 %6143, %struct.Memory* %MEMORY.3)
  %6145 = load i64, i64* %PC
  %6146 = add i64 %6145, 11
  store i64 %6146, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_40096d

block_400d98:                                     ; preds = %block_400d88
  %6147 = add i64 %6931, 10
  store i64 %6147, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %6148 = load i64, i64* %PC
  %6149 = add i64 %6148, 10
  store i64 %6149, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %6150 = load i64, i64* %RBP
  %6151 = sub i64 %6150, 20
  %6152 = load i64, i64* %PC
  %6153 = add i64 %6152, 4
  store i64 %6153, i64* %PC
  store i64 %6151, i64* %R8, align 8, !tbaa !2428
  %6154 = load i64, i64* %PC
  %6155 = add i64 %6154, 7
  store i64 %6155, i64* %PC
  %6156 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %6157 = zext i32 %6156 to i64
  store i64 %6157, i64* %RSI, align 8, !tbaa !2428
  %6158 = load i64, i64* %PC
  %6159 = add i64 %6158, 7
  store i64 %6159, i64* %PC
  %6160 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6161 = zext i32 %6160 to i64
  store i64 %6161, i64* %RDX, align 8, !tbaa !2428
  %6162 = load i64, i64* %PC
  %6163 = add i64 %6162, 2466
  %6164 = load i64, i64* %PC
  %6165 = add i64 %6164, 5
  %6166 = load i64, i64* %PC
  %6167 = add i64 %6166, 5
  store i64 %6167, i64* %PC
  %6168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6169 = load i64, i64* %6168, align 8, !tbaa !2428
  %6170 = add i64 %6169, -8
  %6171 = inttoptr i64 %6170 to i64*
  store i64 %6165, i64* %6171
  store i64 %6170, i64* %6168, align 8, !tbaa !2428
  %6172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6163, i64* %6172, align 8, !tbaa !2428
  %6173 = load i64, i64* %PC
  %6174 = call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* %0, i64 %6173, %struct.Memory* %MEMORY.18)
  %6175 = load i64, i64* %PC
  %6176 = add i64 %6175, 7
  store i64 %6176, i64* %PC
  %6177 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6178 = zext i32 %6177 to i64
  store i64 %6178, i64* %RAX, align 8, !tbaa !2428
  %6179 = load i64, i64* %RAX
  %6180 = load i64, i64* %PC
  %6181 = add i64 %6180, 3
  store i64 %6181, i64* %PC
  %6182 = trunc i64 %6179 to i32
  %6183 = add i32 1, %6182
  %6184 = zext i32 %6183 to i64
  store i64 %6184, i64* %RAX, align 8, !tbaa !2428
  %6185 = icmp ult i32 %6183, %6182
  %6186 = icmp ult i32 %6183, 1
  %6187 = or i1 %6185, %6186
  %6188 = zext i1 %6187 to i8
  %6189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6188, i8* %6189, align 1, !tbaa !2432
  %6190 = and i32 %6183, 255
  %6191 = call i32 @llvm.ctpop.i32(i32 %6190) #16
  %6192 = trunc i32 %6191 to i8
  %6193 = and i8 %6192, 1
  %6194 = xor i8 %6193, 1
  %6195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6194, i8* %6195, align 1, !tbaa !2446
  %6196 = xor i64 1, %6179
  %6197 = trunc i64 %6196 to i32
  %6198 = xor i32 %6197, %6183
  %6199 = lshr i32 %6198, 4
  %6200 = trunc i32 %6199 to i8
  %6201 = and i8 %6200, 1
  %6202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6201, i8* %6202, align 1, !tbaa !2447
  %6203 = icmp eq i32 %6183, 0
  %6204 = zext i1 %6203 to i8
  %6205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6204, i8* %6205, align 1, !tbaa !2448
  %6206 = lshr i32 %6183, 31
  %6207 = trunc i32 %6206 to i8
  %6208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6207, i8* %6208, align 1, !tbaa !2449
  %6209 = lshr i32 %6182, 31
  %6210 = xor i32 %6206, %6209
  %6211 = add nuw nsw i32 %6210, %6206
  %6212 = icmp eq i32 %6211, 2
  %6213 = zext i1 %6212 to i8
  %6214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6213, i8* %6214, align 1, !tbaa !2450
  %6215 = load i32, i32* %EAX
  %6216 = zext i32 %6215 to i64
  %6217 = load i64, i64* %PC
  %6218 = add i64 %6217, 7
  store i64 %6218, i64* %PC
  store i32 %6215, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6219 = load i64, i64* %PC
  %6220 = sub i64 %6219, 76
  %6221 = load i64, i64* %PC
  %6222 = add i64 %6221, 5
  store i64 %6222, i64* %PC
  %6223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6220, i64* %6223, align 8, !tbaa !2428
  br label %block_400d88

block_400ac8:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %6224 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6225 = load i64, i64* %RBP
  %6226 = sub i64 %6225, 24
  %6227 = load i64, i64* %PC
  %6228 = add i64 %6227, 5
  store i64 %6228, i64* %PC
  %6229 = inttoptr i64 %6226 to float*
  %6230 = load float, float* %6229
  %6231 = fpext float %6230 to double
  %6232 = bitcast i8* %6224 to double*
  store double %6231, double* %6232, align 1, !tbaa !2455
  %6233 = load i64, i64* %RBP
  %6234 = sub i64 %6233, 904
  %6235 = bitcast %union.vec128_t* %XMM0 to i8*
  %6236 = load i64, i64* %PC
  %6237 = add i64 %6236, 8
  store i64 %6237, i64* %PC
  %6238 = bitcast i8* %6235 to double*
  %6239 = load double, double* %6238, align 1
  %6240 = inttoptr i64 %6234 to double*
  store double %6239, double* %6240
  %6241 = load i64, i64* %PC
  %6242 = add i64 %6241, 41
  %6243 = load i64, i64* %PC
  %6244 = add i64 %6243, 5
  store i64 %6244, i64* %PC
  %6245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6242, i64* %6245, align 8, !tbaa !2428
  br label %block_400afe

block_400a17:                                     ; preds = %block_4009c7, %block_400afe
  %MEMORY.15 = phi %struct.Memory* [ %4510, %block_4009c7 ], [ %MEMORY.2, %block_400afe ]
  %6246 = load i64, i64* %PC
  %6247 = add i64 %6246, 7
  store i64 %6247, i64* %PC
  %6248 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6249 = zext i32 %6248 to i64
  store i64 %6249, i64* %RAX, align 8, !tbaa !2428
  %6250 = load i32, i32* %EAX
  %6251 = zext i32 %6250 to i64
  %6252 = load i64, i64* %PC
  %6253 = add i64 %6252, 7
  store i64 %6253, i64* %PC
  %6254 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6255 = sub i32 %6250, %6254
  %6256 = icmp ult i32 %6250, %6254
  %6257 = zext i1 %6256 to i8
  %6258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6257, i8* %6258, align 1, !tbaa !2432
  %6259 = and i32 %6255, 255
  %6260 = call i32 @llvm.ctpop.i32(i32 %6259) #16
  %6261 = trunc i32 %6260 to i8
  %6262 = and i8 %6261, 1
  %6263 = xor i8 %6262, 1
  %6264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6263, i8* %6264, align 1, !tbaa !2446
  %6265 = xor i32 %6254, %6250
  %6266 = xor i32 %6265, %6255
  %6267 = lshr i32 %6266, 4
  %6268 = trunc i32 %6267 to i8
  %6269 = and i8 %6268, 1
  %6270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6269, i8* %6270, align 1, !tbaa !2447
  %6271 = icmp eq i32 %6255, 0
  %6272 = zext i1 %6271 to i8
  %6273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6272, i8* %6273, align 1, !tbaa !2448
  %6274 = lshr i32 %6255, 31
  %6275 = trunc i32 %6274 to i8
  %6276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6275, i8* %6276, align 1, !tbaa !2449
  %6277 = lshr i32 %6250, 31
  %6278 = lshr i32 %6254, 31
  %6279 = xor i32 %6278, %6277
  %6280 = xor i32 %6274, %6277
  %6281 = add nuw nsw i32 %6280, %6279
  %6282 = icmp eq i32 %6281, 2
  %6283 = zext i1 %6282 to i8
  %6284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6283, i8* %6284, align 1, !tbaa !2450
  %6285 = load i64, i64* %PC
  %6286 = add i64 %6285, 256
  %6287 = load i64, i64* %PC
  %6288 = add i64 %6287, 6
  %6289 = load i64, i64* %PC
  %6290 = add i64 %6289, 6
  store i64 %6290, i64* %PC
  %6291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6292 = load i8, i8* %6291, align 1, !tbaa !2449
  %6293 = icmp ne i8 %6292, 0
  %6294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6295 = load i8, i8* %6294, align 1, !tbaa !2450
  %6296 = icmp ne i8 %6295, 0
  %6297 = xor i1 %6293, %6296
  %6298 = xor i1 %6297, true
  %6299 = zext i1 %6298 to i8
  store i8 %6299, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6301 = select i1 %6297, i64 %6288, i64 %6286
  store i64 %6301, i64* %6300, align 8, !tbaa !2428
  %6302 = load i8, i8* %BRANCH_TAKEN
  %6303 = icmp eq i8 %6302, 1
  %6304 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %6303, label %block_400b25, label %block_400a2b

block_401090:                                     ; preds = %block_401082
  %6305 = sub i64 %7306, 2720
  %6306 = load i64, i64* %PC
  %6307 = add i64 %6306, 5
  %6308 = load i64, i64* %PC
  %6309 = add i64 %6308, 5
  store i64 %6309, i64* %PC
  %6310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6311 = load i64, i64* %6310, align 8, !tbaa !2428
  %6312 = add i64 %6311, -8
  %6313 = inttoptr i64 %6312 to i64*
  store i64 %6307, i64* %6313
  store i64 %6312, i64* %6310, align 8, !tbaa !2428
  %6314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6305, i64* %6314, align 8, !tbaa !2428
  %6315 = load i64, i64* %PC
  %6316 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %6315, %struct.Memory* %MEMORY.19)
  %6317 = load i64, i64* %RBP
  %6318 = sub i64 %6317, 40
  %6319 = bitcast %union.vec128_t* %XMM0 to i8*
  %6320 = load i64, i64* %PC
  %6321 = add i64 %6320, 5
  store i64 %6321, i64* %PC
  %6322 = bitcast i8* %6319 to <2 x float>*
  %6323 = load <2 x float>, <2 x float>* %6322, align 1
  %6324 = extractelement <2 x float> %6323, i32 0
  %6325 = inttoptr i64 %6318 to float*
  store float %6324, float* %6325
  %6326 = load i64, i64* %PC
  %6327 = add i64 %6326, 11
  store i64 %6327, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4010a5

block_400e2d:                                     ; preds = %block_400e24, %block_400dd9
  %MEMORY.16 = phi %struct.Memory* [ %2449, %block_400dd9 ], [ %2449, %block_400e24 ]
  %6328 = load i64, i64* %PC
  %6329 = add i64 %6328, 5
  %6330 = load i64, i64* %PC
  %6331 = add i64 %6330, 5
  store i64 %6331, i64* %PC
  %6332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6329, i64* %6332, align 8, !tbaa !2428
  %6333 = load i64, i64* %RBP
  %6334 = sub i64 %6333, 64
  %6335 = load i64, i64* %PC
  %6336 = add i64 %6335, 4
  store i64 %6336, i64* %PC
  %6337 = inttoptr i64 %6334 to i32*
  %6338 = load i32, i32* %6337
  %6339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6339, align 1, !tbaa !2432
  %6340 = and i32 %6338, 255
  %6341 = call i32 @llvm.ctpop.i32(i32 %6340) #16
  %6342 = trunc i32 %6341 to i8
  %6343 = and i8 %6342, 1
  %6344 = xor i8 %6343, 1
  %6345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6344, i8* %6345, align 1, !tbaa !2446
  %6346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6346, align 1, !tbaa !2447
  %6347 = icmp eq i32 %6338, 0
  %6348 = zext i1 %6347 to i8
  %6349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6348, i8* %6349, align 1, !tbaa !2448
  %6350 = lshr i32 %6338, 31
  %6351 = trunc i32 %6350 to i8
  %6352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6351, i8* %6352, align 1, !tbaa !2449
  %6353 = lshr i32 %6338, 31
  %6354 = xor i32 %6350, %6353
  %6355 = add nuw nsw i32 %6354, %6353
  %6356 = icmp eq i32 %6355, 2
  %6357 = zext i1 %6356 to i8
  %6358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6357, i8* %6358, align 1, !tbaa !2450
  %6359 = load i64, i64* %PC
  %6360 = sub i64 %6359, 204
  %6361 = load i64, i64* %PC
  %6362 = add i64 %6361, 6
  %6363 = load i64, i64* %PC
  %6364 = add i64 %6363, 6
  store i64 %6364, i64* %PC
  %6365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6366 = load i8, i8* %6365, align 1, !tbaa !2449
  %6367 = icmp ne i8 %6366, 0
  %6368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6369 = load i8, i8* %6368, align 1, !tbaa !2450
  %6370 = icmp ne i8 %6369, 0
  %6371 = xor i1 %6367, %6370
  %6372 = zext i1 %6371 to i8
  store i8 %6372, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6374 = select i1 %6371, i64 %6360, i64 %6362
  store i64 %6374, i64* %6373, align 8, !tbaa !2428
  %6375 = load i8, i8* %BRANCH_TAKEN
  %6376 = icmp eq i8 %6375, 1
  br i1 %6376, label %block_400d6a, label %block_400e3c

block_400f8f:                                     ; preds = %block_400f4a
  %6377 = load i64, i64* %PC
  %6378 = add i64 %6377, 7
  store i64 %6378, i64* %PC
  %6379 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %6380 = zext i32 %6379 to i64
  store i64 %6380, i64* %RAX, align 8, !tbaa !2428
  %6381 = load i64, i64* %RAX
  %6382 = load i64, i64* %PC
  %6383 = add i64 %6382, 3
  store i64 %6383, i64* %PC
  %6384 = trunc i64 %6381 to i32
  %6385 = shl i32 %6384, 1
  %6386 = icmp slt i32 %6384, 0
  %6387 = icmp slt i32 %6385, 0
  %6388 = xor i1 %6386, %6387
  %6389 = zext i32 %6385 to i64
  store i64 %6389, i64* %RAX, align 8, !tbaa !2428
  %6390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6391 = zext i1 %6386 to i8
  store i8 %6391, i8* %6390, align 1, !tbaa !2451
  %6392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6393 = and i32 %6385, 254
  %6394 = call i32 @llvm.ctpop.i32(i32 %6393) #16
  %6395 = trunc i32 %6394 to i8
  %6396 = and i8 %6395, 1
  %6397 = xor i8 %6396, 1
  store i8 %6397, i8* %6392, align 1, !tbaa !2451
  %6398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6398, align 1, !tbaa !2451
  %6399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6400 = icmp eq i32 %6385, 0
  %6401 = zext i1 %6400 to i8
  store i8 %6401, i8* %6399, align 1, !tbaa !2451
  %6402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6403 = lshr i32 %6385, 31
  %6404 = trunc i32 %6403 to i8
  store i8 %6404, i8* %6402, align 1, !tbaa !2451
  %6405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6406 = zext i1 %6388 to i8
  store i8 %6406, i8* %6405, align 1, !tbaa !2451
  %6407 = load i32, i32* %EAX
  %6408 = zext i32 %6407 to i64
  %6409 = load i64, i64* %PC
  %6410 = add i64 %6409, 7
  store i64 %6410, i64* %PC
  store i32 %6407, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  br label %block_400fa0

block_400d0e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %6411 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6412 = bitcast %union.vec128_t* %XMM0 to i8*
  %6413 = load i64, i64* %PC
  %6414 = add i64 %6413, 3
  store i64 %6414, i64* %PC
  %6415 = bitcast i8* %6411 to i64*
  %6416 = load i64, i64* %6415, align 1
  %6417 = getelementptr inbounds i8, i8* %6411, i64 8
  %6418 = bitcast i8* %6417 to i64*
  %6419 = load i64, i64* %6418, align 1
  %6420 = bitcast i8* %6412 to i64*
  %6421 = load i64, i64* %6420, align 1
  %6422 = getelementptr inbounds i8, i8* %6412, i64 8
  %6423 = bitcast i8* %6422 to i64*
  %6424 = load i64, i64* %6423, align 1
  %6425 = xor i64 %6421, %6416
  %6426 = xor i64 %6424, %6419
  %6427 = trunc i64 %6425 to i32
  %6428 = lshr i64 %6425, 32
  %6429 = trunc i64 %6428 to i32
  %6430 = bitcast i8* %5668 to i32*
  store i32 %6427, i32* %6430, align 1, !tbaa !2454
  %6431 = getelementptr inbounds i8, i8* %5668, i64 4
  %6432 = bitcast i8* %6431 to i32*
  store i32 %6429, i32* %6432, align 1, !tbaa !2454
  %6433 = trunc i64 %6426 to i32
  %6434 = getelementptr inbounds i8, i8* %5668, i64 8
  %6435 = bitcast i8* %6434 to i32*
  store i32 %6433, i32* %6435, align 1, !tbaa !2454
  %6436 = lshr i64 %6426, 32
  %6437 = trunc i64 %6436 to i32
  %6438 = getelementptr inbounds i8, i8* %5668, i64 12
  %6439 = bitcast i8* %6438 to i32*
  store i32 %6437, i32* %6439, align 1, !tbaa !2454
  %6440 = bitcast %union.vec128_t* %XMM0 to i8*
  %6441 = load i64, i64* %PC
  %6442 = add i64 %6441, 9
  store i64 %6442, i64* %PC
  %6443 = bitcast i8* %6440 to <2 x float>*
  %6444 = load <2 x float>, <2 x float>* %6443, align 1
  %6445 = extractelement <2 x float> %6444, i32 0
  store float %6445, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %6446 = bitcast %union.vec128_t* %XMM0 to i8*
  %6447 = load i64, i64* %PC
  %6448 = add i64 %6447, 9
  store i64 %6448, i64* %PC
  %6449 = bitcast i8* %6446 to <2 x float>*
  %6450 = load <2 x float>, <2 x float>* %6449, align 1
  %6451 = extractelement <2 x float> %6450, i32 0
  store float %6451, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*)
  br label %block_400d23

block_400e3c:                                     ; preds = %block_400e2d
  %6452 = load i64, i64* %PC
  %6453 = add i64 %6452, 10
  store i64 %6453, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %6454 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6456 = bitcast %union.vec128_t* %XMM0 to i8*
  %6457 = load i64, i64* %PC
  %6458 = add i64 %6457, 3
  store i64 %6458, i64* %PC
  %6459 = bitcast i8* %6455 to i64*
  %6460 = load i64, i64* %6459, align 1
  %6461 = getelementptr inbounds i8, i8* %6455, i64 8
  %6462 = bitcast i8* %6461 to i64*
  %6463 = load i64, i64* %6462, align 1
  %6464 = bitcast i8* %6456 to i64*
  %6465 = load i64, i64* %6464, align 1
  %6466 = getelementptr inbounds i8, i8* %6456, i64 8
  %6467 = bitcast i8* %6466 to i64*
  %6468 = load i64, i64* %6467, align 1
  %6469 = xor i64 %6465, %6460
  %6470 = xor i64 %6468, %6463
  %6471 = trunc i64 %6469 to i32
  %6472 = lshr i64 %6469, 32
  %6473 = trunc i64 %6472 to i32
  %6474 = bitcast i8* %6454 to i32*
  store i32 %6471, i32* %6474, align 1, !tbaa !2454
  %6475 = getelementptr inbounds i8, i8* %6454, i64 4
  %6476 = bitcast i8* %6475 to i32*
  store i32 %6473, i32* %6476, align 1, !tbaa !2454
  %6477 = trunc i64 %6470 to i32
  %6478 = getelementptr inbounds i8, i8* %6454, i64 8
  %6479 = bitcast i8* %6478 to i32*
  store i32 %6477, i32* %6479, align 1, !tbaa !2454
  %6480 = lshr i64 %6470, 32
  %6481 = trunc i64 %6480 to i32
  %6482 = getelementptr inbounds i8, i8* %6454, i64 12
  %6483 = bitcast i8* %6482 to i32*
  store i32 %6481, i32* %6483, align 1, !tbaa !2454
  %6484 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6485 = load i64, i64* %RBP
  %6486 = sub i64 %6485, 72
  %6487 = load i64, i64* %PC
  %6488 = add i64 %6487, 5
  store i64 %6488, i64* %PC
  %6489 = inttoptr i64 %6486 to float*
  %6490 = load float, float* %6489
  %6491 = fpext float %6490 to double
  %6492 = bitcast i8* %6484 to double*
  store double %6491, double* %6492, align 1, !tbaa !2455
  %6493 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6494 = load i64, i64* %RBP
  %6495 = sub i64 %6494, 68
  %6496 = load i64, i64* %PC
  %6497 = add i64 %6496, 5
  store i64 %6497, i64* %PC
  %6498 = inttoptr i64 %6495 to i32*
  %6499 = load i32, i32* %6498
  %6500 = sitofp i32 %6499 to double
  %6501 = bitcast i8* %6493 to double*
  store double %6500, double* %6501, align 1, !tbaa !2455
  %6502 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6503 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6504 = bitcast %union.vec128_t* %XMM2 to i8*
  %6505 = load i64, i64* %PC
  %6506 = add i64 %6505, 4
  store i64 %6506, i64* %PC
  %6507 = bitcast i8* %6503 to double*
  %6508 = load double, double* %6507, align 1
  %6509 = getelementptr inbounds i8, i8* %6503, i64 8
  %6510 = bitcast i8* %6509 to i64*
  %6511 = load i64, i64* %6510, align 1
  %6512 = bitcast i8* %6504 to double*
  %6513 = load double, double* %6512, align 1
  %6514 = fdiv double %6508, %6513
  %6515 = bitcast i8* %6502 to double*
  store double %6514, double* %6515, align 1, !tbaa !2455
  %6516 = getelementptr inbounds i8, i8* %6502, i64 8
  %6517 = bitcast i8* %6516 to i64*
  store i64 %6511, i64* %6517, align 1, !tbaa !2455
  %6518 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6519 = bitcast %union.vec128_t* %XMM1 to i8*
  %6520 = load i64, i64* %PC
  %6521 = add i64 %6520, 4
  store i64 %6521, i64* %PC
  %6522 = bitcast i8* %6518 to <2 x i32>*
  %6523 = load <2 x i32>, <2 x i32>* %6522, align 1
  %6524 = getelementptr inbounds i8, i8* %6518, i64 8
  %6525 = bitcast i8* %6524 to <2 x i32>*
  %6526 = load <2 x i32>, <2 x i32>* %6525, align 1
  %6527 = bitcast i8* %6519 to double*
  %6528 = load double, double* %6527, align 1
  %6529 = fptrunc double %6528 to float
  %6530 = bitcast i8* %6518 to float*
  store float %6529, float* %6530, align 1, !tbaa !2452
  %6531 = extractelement <2 x i32> %6523, i32 1
  %6532 = getelementptr inbounds i8, i8* %6518, i64 4
  %6533 = bitcast i8* %6532 to i32*
  store i32 %6531, i32* %6533, align 1, !tbaa !2452
  %6534 = extractelement <2 x i32> %6526, i32 0
  %6535 = bitcast i8* %6524 to i32*
  store i32 %6534, i32* %6535, align 1, !tbaa !2452
  %6536 = extractelement <2 x i32> %6526, i32 1
  %6537 = getelementptr inbounds i8, i8* %6518, i64 12
  %6538 = bitcast i8* %6537 to i32*
  store i32 %6536, i32* %6538, align 1, !tbaa !2452
  %6539 = load i64, i64* %RBP
  %6540 = sub i64 %6539, 72
  %6541 = bitcast %union.vec128_t* %XMM1 to i8*
  %6542 = load i64, i64* %PC
  %6543 = add i64 %6542, 5
  store i64 %6543, i64* %PC
  %6544 = bitcast i8* %6541 to <2 x float>*
  %6545 = load <2 x float>, <2 x float>* %6544, align 1
  %6546 = extractelement <2 x float> %6545, i32 0
  %6547 = inttoptr i64 %6540 to float*
  store float %6546, float* %6547
  %6548 = load i64, i64* %PC
  %6549 = add i64 %6548, 8
  store i64 %6549, i64* %PC
  %6550 = load i64, i64* @stderr
  store i64 %6550, i64* %RDI, align 8, !tbaa !2428
  %6551 = load i64, i64* %PC
  %6552 = add i64 %6551, 2
  store i64 %6552, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %6553 = load i64, i64* %PC
  %6554 = sub i64 %6553, 2426
  %6555 = load i64, i64* %PC
  %6556 = add i64 %6555, 5
  %6557 = load i64, i64* %PC
  %6558 = add i64 %6557, 5
  store i64 %6558, i64* %PC
  %6559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6560 = load i64, i64* %6559, align 8, !tbaa !2428
  %6561 = add i64 %6560, -8
  %6562 = inttoptr i64 %6561 to i64*
  store i64 %6556, i64* %6562
  store i64 %6561, i64* %6559, align 8, !tbaa !2428
  %6563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6554, i64* %6563, align 8, !tbaa !2428
  %6564 = load i64, i64* %PC
  %6565 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %6564, %struct.Memory* %MEMORY.16)
  %6566 = load i64, i64* %PC
  %6567 = add i64 %6566, 10
  store i64 %6567, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %6568 = load i64, i64* %PC
  %6569 = add i64 %6568, 8
  store i64 %6569, i64* %PC
  %6570 = load i64, i64* @stderr
  store i64 %6570, i64* %RDI, align 8, !tbaa !2428
  %6571 = load i64, i64* %RBP
  %6572 = sub i64 %6571, 944
  %6573 = load i32, i32* %EAX
  %6574 = zext i32 %6573 to i64
  %6575 = load i64, i64* %PC
  %6576 = add i64 %6575, 6
  store i64 %6576, i64* %PC
  %6577 = inttoptr i64 %6572 to i32*
  store i32 %6573, i32* %6577
  %6578 = load i64, i64* %PC
  %6579 = add i64 %6578, 2
  store i64 %6579, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %6580 = load i64, i64* %PC
  %6581 = sub i64 %6580, 2457
  %6582 = load i64, i64* %PC
  %6583 = add i64 %6582, 5
  %6584 = load i64, i64* %PC
  %6585 = add i64 %6584, 5
  store i64 %6585, i64* %PC
  %6586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6587 = load i64, i64* %6586, align 8, !tbaa !2428
  %6588 = add i64 %6587, -8
  %6589 = inttoptr i64 %6588 to i64*
  store i64 %6583, i64* %6589
  store i64 %6588, i64* %6586, align 8, !tbaa !2428
  %6590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6581, i64* %6590, align 8, !tbaa !2428
  %6591 = load i64, i64* %PC
  %6592 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %6591, %struct.Memory* %6565)
  %6593 = load i64, i64* %RBP
  %6594 = sub i64 %6593, 64
  %6595 = load i64, i64* %PC
  %6596 = add i64 %6595, 7
  store i64 %6596, i64* %PC
  %6597 = inttoptr i64 %6594 to i32*
  store i32 -3, i32* %6597
  %6598 = load i64, i64* %PC
  %6599 = add i64 %6598, 11
  store i64 %6599, i64* %PC
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %6600 = load i64, i64* %RBP
  %6601 = sub i64 %6600, 948
  %6602 = load i32, i32* %EAX
  %6603 = zext i32 %6602 to i64
  %6604 = load i64, i64* %PC
  %6605 = add i64 %6604, 6
  store i64 %6605, i64* %PC
  %6606 = inttoptr i64 %6601 to i32*
  store i32 %6602, i32* %6606
  br label %block_400ea6

block_40159c:                                     ; preds = %block_401588
  %6607 = add i64 %4619, 10
  store i64 %6607, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %6608 = load i64, i64* %PC
  %6609 = add i64 %6608, 10
  store i64 %6609, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %6610 = load i64, i64* %PC
  %6611 = add i64 %6610, 10
  store i64 %6611, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %6612 = bitcast i32* %R9D to i64*
  %6613 = load i32, i32* %R9D
  %6614 = zext i32 %6613 to i64
  %6615 = load i32, i32* %R9D
  %6616 = zext i32 %6615 to i64
  %6617 = load i64, i64* %PC
  %6618 = add i64 %6617, 3
  store i64 %6618, i64* %PC
  %6619 = xor i64 %6616, %6614
  %6620 = trunc i64 %6619 to i32
  %6621 = and i64 %6619, 4294967295
  store i64 %6621, i64* %6612, align 8, !tbaa !2428
  %6622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6622, align 1, !tbaa !2432
  %6623 = and i32 %6620, 255
  %6624 = call i32 @llvm.ctpop.i32(i32 %6623) #16
  %6625 = trunc i32 %6624 to i8
  %6626 = and i8 %6625, 1
  %6627 = xor i8 %6626, 1
  %6628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6627, i8* %6628, align 1, !tbaa !2446
  %6629 = icmp eq i32 %6620, 0
  %6630 = zext i1 %6629 to i8
  %6631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6630, i8* %6631, align 1, !tbaa !2448
  %6632 = lshr i32 %6620, 31
  %6633 = trunc i32 %6632 to i8
  %6634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6633, i8* %6634, align 1, !tbaa !2449
  %6635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6635, align 1, !tbaa !2450
  %6636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6636, align 1, !tbaa !2447
  %6637 = load i64, i64* %PC
  %6638 = add i64 %6637, 7
  store i64 %6638, i64* %PC
  %6639 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %6640 = zext i32 %6639 to i64
  store i64 %6640, i64* %RSI, align 8, !tbaa !2428
  %6641 = load i64, i64* %PC
  %6642 = add i64 %6641, 7
  store i64 %6642, i64* %PC
  %6643 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6644 = zext i32 %6643 to i64
  store i64 %6644, i64* %RDX, align 8, !tbaa !2428
  %6645 = load i64, i64* %PC
  %6646 = add i64 %6645, 1653
  %6647 = load i64, i64* %PC
  %6648 = add i64 %6647, 5
  %6649 = load i64, i64* %PC
  %6650 = add i64 %6649, 5
  store i64 %6650, i64* %PC
  %6651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6652 = load i64, i64* %6651, align 8, !tbaa !2428
  %6653 = add i64 %6652, -8
  %6654 = inttoptr i64 %6653 to i64*
  store i64 %6648, i64* %6654
  store i64 %6653, i64* %6651, align 8, !tbaa !2428
  %6655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6646, i64* %6655, align 8, !tbaa !2428
  %6656 = load i64, i64* %PC
  %6657 = call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* %0, i64 %6656, %struct.Memory* %MEMORY.10)
  %6658 = load i64, i64* %PC
  %6659 = add i64 %6658, 7
  store i64 %6659, i64* %PC
  %6660 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6661 = zext i32 %6660 to i64
  store i64 %6661, i64* %RAX, align 8, !tbaa !2428
  %6662 = load i64, i64* %RAX
  %6663 = load i64, i64* %PC
  %6664 = add i64 %6663, 3
  store i64 %6664, i64* %PC
  %6665 = trunc i64 %6662 to i32
  %6666 = add i32 1, %6665
  %6667 = zext i32 %6666 to i64
  store i64 %6667, i64* %RAX, align 8, !tbaa !2428
  %6668 = icmp ult i32 %6666, %6665
  %6669 = icmp ult i32 %6666, 1
  %6670 = or i1 %6668, %6669
  %6671 = zext i1 %6670 to i8
  %6672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6671, i8* %6672, align 1, !tbaa !2432
  %6673 = and i32 %6666, 255
  %6674 = call i32 @llvm.ctpop.i32(i32 %6673) #16
  %6675 = trunc i32 %6674 to i8
  %6676 = and i8 %6675, 1
  %6677 = xor i8 %6676, 1
  %6678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6677, i8* %6678, align 1, !tbaa !2446
  %6679 = xor i64 1, %6662
  %6680 = trunc i64 %6679 to i32
  %6681 = xor i32 %6680, %6666
  %6682 = lshr i32 %6681, 4
  %6683 = trunc i32 %6682 to i8
  %6684 = and i8 %6683, 1
  %6685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6684, i8* %6685, align 1, !tbaa !2447
  %6686 = icmp eq i32 %6666, 0
  %6687 = zext i1 %6686 to i8
  %6688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6687, i8* %6688, align 1, !tbaa !2448
  %6689 = lshr i32 %6666, 31
  %6690 = trunc i32 %6689 to i8
  %6691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6690, i8* %6691, align 1, !tbaa !2449
  %6692 = lshr i32 %6665, 31
  %6693 = xor i32 %6689, %6692
  %6694 = add nuw nsw i32 %6693, %6689
  %6695 = icmp eq i32 %6694, 2
  %6696 = zext i1 %6695 to i8
  %6697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6696, i8* %6697, align 1, !tbaa !2450
  %6698 = load i32, i32* %EAX
  %6699 = zext i32 %6698 to i64
  %6700 = load i64, i64* %PC
  %6701 = add i64 %6700, 7
  store i64 %6701, i64* %PC
  store i32 %6698, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6702 = load i64, i64* %PC
  %6703 = sub i64 %6702, 89
  %6704 = load i64, i64* %PC
  %6705 = add i64 %6704, 5
  store i64 %6705, i64* %PC
  %6706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6703, i64* %6706, align 8, !tbaa !2428
  br label %block_401588

block_400a8c:                                     ; preds = %block_400a56, %block_400a68
  %MEMORY.17 = phi %struct.Memory* [ %4763, %block_400a68 ], [ %4763, %block_400a56 ]
  %6707 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6708 = load i64, i64* %RBP
  %6709 = sub i64 %6708, 896
  %6710 = load i64, i64* %PC
  %6711 = add i64 %6710, 8
  store i64 %6711, i64* %PC
  %6712 = inttoptr i64 %6709 to double*
  %6713 = load double, double* %6712
  %6714 = bitcast i8* %6707 to double*
  store double %6713, double* %6714, align 1, !tbaa !2455
  %6715 = getelementptr inbounds i8, i8* %6707, i64 8
  %6716 = bitcast i8* %6715 to double*
  store double 0.000000e+00, double* %6716, align 1, !tbaa !2455
  %6717 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6718 = bitcast %union.vec128_t* %XMM0 to i8*
  %6719 = load i64, i64* %PC
  %6720 = add i64 %6719, 4
  store i64 %6720, i64* %PC
  %6721 = bitcast i8* %6717 to <2 x i32>*
  %6722 = load <2 x i32>, <2 x i32>* %6721, align 1
  %6723 = getelementptr inbounds i8, i8* %6717, i64 8
  %6724 = bitcast i8* %6723 to <2 x i32>*
  %6725 = load <2 x i32>, <2 x i32>* %6724, align 1
  %6726 = bitcast i8* %6718 to double*
  %6727 = load double, double* %6726, align 1
  %6728 = fptrunc double %6727 to float
  %6729 = bitcast i8* %6717 to float*
  store float %6728, float* %6729, align 1, !tbaa !2452
  %6730 = extractelement <2 x i32> %6722, i32 1
  %6731 = getelementptr inbounds i8, i8* %6717, i64 4
  %6732 = bitcast i8* %6731 to i32*
  store i32 %6730, i32* %6732, align 1, !tbaa !2452
  %6733 = extractelement <2 x i32> %6725, i32 0
  %6734 = bitcast i8* %6723 to i32*
  store i32 %6733, i32* %6734, align 1, !tbaa !2452
  %6735 = extractelement <2 x i32> %6725, i32 1
  %6736 = getelementptr inbounds i8, i8* %6717, i64 12
  %6737 = bitcast i8* %6736 to i32*
  store i32 %6735, i32* %6737, align 1, !tbaa !2452
  %6738 = load i64, i64* %RBP
  %6739 = sub i64 %6738, 28
  %6740 = bitcast %union.vec128_t* %XMM0 to i8*
  %6741 = load i64, i64* %PC
  %6742 = add i64 %6741, 5
  store i64 %6742, i64* %PC
  %6743 = bitcast i8* %6740 to <2 x float>*
  %6744 = load <2 x float>, <2 x float>* %6743, align 1
  %6745 = extractelement <2 x float> %6744, i32 0
  %6746 = inttoptr i64 %6739 to float*
  store float %6745, float* %6746
  %6747 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6748 = load i64, i64* %RBP
  %6749 = sub i64 %6748, 24
  %6750 = load i64, i64* %PC
  %6751 = add i64 %6750, 5
  store i64 %6751, i64* %PC
  %6752 = inttoptr i64 %6749 to float*
  %6753 = load float, float* %6752
  %6754 = fpext float %6753 to double
  %6755 = bitcast i8* %6747 to double*
  store double %6754, double* %6755, align 1, !tbaa !2455
  %6756 = load i64, i64* %PC
  %6757 = add i64 %6756, 8
  store i64 %6757, i64* %PC
  %6758 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6759 = sext i32 %6758 to i64
  store i64 %6759, i64* %RAX, align 8, !tbaa !2428
  %6760 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6761 = load i64, i64* %RAX
  %6762 = mul i64 %6761, 4
  %6763 = add i64 %6762, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %6764 = load i64, i64* %PC
  %6765 = add i64 %6764, 9
  store i64 %6765, i64* %PC
  %6766 = inttoptr i64 %6763 to float*
  %6767 = load float, float* %6766
  %6768 = fpext float %6767 to double
  %6769 = bitcast i8* %6760 to double*
  store double %6768, double* %6769, align 1, !tbaa !2455
  %6770 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6771 = load i64, i64* %PC
  %6772 = add i64 %6771, 7
  store i64 %6772, i64* %PC
  %6773 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %6774 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %6775 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %6776 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %6777 = bitcast i8* %6770 to float*
  store float %6773, float* %6777, align 1, !tbaa !2452
  %6778 = getelementptr inbounds i8, i8* %6770, i64 4
  %6779 = bitcast i8* %6778 to float*
  store float %6774, float* %6779, align 1, !tbaa !2452
  %6780 = getelementptr inbounds i8, i8* %6770, i64 8
  %6781 = bitcast i8* %6780 to float*
  store float %6775, float* %6781, align 1, !tbaa !2452
  %6782 = getelementptr inbounds i8, i8* %6770, i64 12
  %6783 = bitcast i8* %6782 to float*
  store float %6776, float* %6783, align 1, !tbaa !2452
  %6784 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6785 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6786 = bitcast %union.vec128_t* %XMM2 to i8*
  %6787 = load i64, i64* %PC
  %6788 = add i64 %6787, 4
  store i64 %6788, i64* %PC
  %6789 = bitcast i8* %6785 to i64*
  %6790 = load i64, i64* %6789, align 1
  %6791 = getelementptr inbounds i8, i8* %6785, i64 8
  %6792 = bitcast i8* %6791 to i64*
  %6793 = load i64, i64* %6792, align 1
  %6794 = bitcast i8* %6786 to i64*
  %6795 = load i64, i64* %6794, align 1
  %6796 = getelementptr inbounds i8, i8* %6786, i64 8
  %6797 = bitcast i8* %6796 to i64*
  %6798 = load i64, i64* %6797, align 1
  %6799 = and i64 %6795, %6790
  %6800 = and i64 %6798, %6793
  %6801 = trunc i64 %6799 to i32
  %6802 = lshr i64 %6799, 32
  %6803 = trunc i64 %6802 to i32
  %6804 = bitcast i8* %6784 to i32*
  store i32 %6801, i32* %6804, align 1, !tbaa !2454
  %6805 = getelementptr inbounds i8, i8* %6784, i64 4
  %6806 = bitcast i8* %6805 to i32*
  store i32 %6803, i32* %6806, align 1, !tbaa !2454
  %6807 = trunc i64 %6800 to i32
  %6808 = getelementptr inbounds i8, i8* %6784, i64 8
  %6809 = bitcast i8* %6808 to i32*
  store i32 %6807, i32* %6809, align 1, !tbaa !2454
  %6810 = lshr i64 %6800, 32
  %6811 = trunc i64 %6810 to i32
  %6812 = getelementptr inbounds i8, i8* %6784, i64 12
  %6813 = bitcast i8* %6812 to i32*
  store i32 %6811, i32* %6813, align 1, !tbaa !2454
  %6814 = bitcast %union.vec128_t* %XMM0 to i8*
  %6815 = bitcast %union.vec128_t* %XMM1 to i8*
  %6816 = load i64, i64* %PC
  %6817 = add i64 %6816, 4
  store i64 %6817, i64* %PC
  %6818 = bitcast i8* %6814 to double*
  %6819 = load double, double* %6818, align 1
  %6820 = bitcast i8* %6815 to double*
  %6821 = load double, double* %6820, align 1
  %6822 = fcmp uno double %6819, %6821
  br i1 %6822, label %6823, label %6835

; <label>:6823:                                   ; preds = %block_400a8c
  %6824 = fadd double %6819, %6821
  %6825 = bitcast double %6824 to i64
  %6826 = and i64 %6825, 9221120237041090560
  %6827 = icmp eq i64 %6826, 9218868437227405312
  %6828 = and i64 %6825, 2251799813685247
  %6829 = icmp ne i64 %6828, 0
  %6830 = and i1 %6827, %6829
  br i1 %6830, label %6831, label %6841

; <label>:6831:                                   ; preds = %6823
  %6832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6833 = load i64, i64* %6832, align 8, !tbaa !2428
  %6834 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6833, %struct.Memory* %MEMORY.17) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:6835:                                   ; preds = %block_400a8c
  %6836 = fcmp ogt double %6819, %6821
  br i1 %6836, label %6841, label %6837

; <label>:6837:                                   ; preds = %6835
  %6838 = fcmp olt double %6819, %6821
  br i1 %6838, label %6841, label %6839

; <label>:6839:                                   ; preds = %6837
  %6840 = fcmp oeq double %6819, %6821
  br i1 %6840, label %6841, label %6848

; <label>:6841:                                   ; preds = %6839, %6837, %6835, %6823
  %6842 = phi i8 [ 0, %6835 ], [ 0, %6837 ], [ 1, %6839 ], [ 1, %6823 ]
  %6843 = phi i8 [ 0, %6835 ], [ 0, %6837 ], [ 0, %6839 ], [ 1, %6823 ]
  %6844 = phi i8 [ 0, %6835 ], [ 1, %6837 ], [ 0, %6839 ], [ 1, %6823 ]
  %6845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6842, i8* %6845, align 1, !tbaa !2451
  %6846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6843, i8* %6846, align 1, !tbaa !2451
  %6847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6844, i8* %6847, align 1, !tbaa !2451
  br label %6848

; <label>:6848:                                   ; preds = %6841, %6839
  %6849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6849, align 1, !tbaa !2451
  %6850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6850, align 1, !tbaa !2451
  %6851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6851, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %6831, %6848
  %6852 = phi %struct.Memory* [ %6834, %6831 ], [ %MEMORY.17, %6848 ]
  %6853 = load i64, i64* %PC
  %6854 = add i64 %6853, 24
  %6855 = load i64, i64* %PC
  %6856 = add i64 %6855, 6
  %6857 = load i64, i64* %PC
  %6858 = add i64 %6857, 6
  store i64 %6858, i64* %PC
  %6859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6860 = load i8, i8* %6859, align 1, !tbaa !2432
  %6861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6862 = load i8, i8* %6861, align 1, !tbaa !2448
  %6863 = or i8 %6862, %6860
  %6864 = icmp ne i8 %6863, 0
  %6865 = zext i1 %6864 to i8
  store i8 %6865, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6867 = select i1 %6864, i64 %6854, i64 %6856
  store i64 %6867, i64* %6866, align 8, !tbaa !2428
  %6868 = load i8, i8* %BRANCH_TAKEN
  %6869 = icmp eq i8 %6868, 1
  br i1 %6869, label %block_400ada, label %block_400ac8

block_400d88:                                     ; preds = %block_400d98, %block_400d6a
  %MEMORY.18 = phi %struct.Memory* [ %2971, %block_400d6a ], [ %6174, %block_400d98 ]
  %6870 = load i64, i64* %PC
  %6871 = add i64 %6870, 7
  store i64 %6871, i64* %PC
  %6872 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6873 = zext i32 %6872 to i64
  store i64 %6873, i64* %RAX, align 8, !tbaa !2428
  %6874 = load i32, i32* %EAX
  %6875 = zext i32 %6874 to i64
  %6876 = load i64, i64* %RBP
  %6877 = sub i64 %6876, 68
  %6878 = load i64, i64* %PC
  %6879 = add i64 %6878, 3
  store i64 %6879, i64* %PC
  %6880 = inttoptr i64 %6877 to i32*
  %6881 = load i32, i32* %6880
  %6882 = sub i32 %6874, %6881
  %6883 = icmp ult i32 %6874, %6881
  %6884 = zext i1 %6883 to i8
  %6885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6884, i8* %6885, align 1, !tbaa !2432
  %6886 = and i32 %6882, 255
  %6887 = call i32 @llvm.ctpop.i32(i32 %6886) #16
  %6888 = trunc i32 %6887 to i8
  %6889 = and i8 %6888, 1
  %6890 = xor i8 %6889, 1
  %6891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6890, i8* %6891, align 1, !tbaa !2446
  %6892 = xor i32 %6881, %6874
  %6893 = xor i32 %6892, %6882
  %6894 = lshr i32 %6893, 4
  %6895 = trunc i32 %6894 to i8
  %6896 = and i8 %6895, 1
  %6897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6896, i8* %6897, align 1, !tbaa !2447
  %6898 = icmp eq i32 %6882, 0
  %6899 = zext i1 %6898 to i8
  %6900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6899, i8* %6900, align 1, !tbaa !2448
  %6901 = lshr i32 %6882, 31
  %6902 = trunc i32 %6901 to i8
  %6903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6902, i8* %6903, align 1, !tbaa !2449
  %6904 = lshr i32 %6874, 31
  %6905 = lshr i32 %6881, 31
  %6906 = xor i32 %6905, %6904
  %6907 = xor i32 %6901, %6904
  %6908 = add nuw nsw i32 %6907, %6906
  %6909 = icmp eq i32 %6908, 2
  %6910 = zext i1 %6909 to i8
  %6911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6910, i8* %6911, align 1, !tbaa !2450
  %6912 = load i64, i64* %PC
  %6913 = add i64 %6912, 71
  %6914 = load i64, i64* %PC
  %6915 = add i64 %6914, 6
  %6916 = load i64, i64* %PC
  %6917 = add i64 %6916, 6
  store i64 %6917, i64* %PC
  %6918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6919 = load i8, i8* %6918, align 1, !tbaa !2449
  %6920 = icmp ne i8 %6919, 0
  %6921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6922 = load i8, i8* %6921, align 1, !tbaa !2450
  %6923 = icmp ne i8 %6922, 0
  %6924 = xor i1 %6920, %6923
  %6925 = xor i1 %6924, true
  %6926 = zext i1 %6925 to i8
  store i8 %6926, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6928 = select i1 %6924, i64 %6915, i64 %6913
  store i64 %6928, i64* %6927, align 8, !tbaa !2428
  %6929 = load i8, i8* %BRANCH_TAKEN
  %6930 = icmp eq i8 %6929, 1
  %6931 = load i64, i64* %PC
  br i1 %6930, label %block_400dd9, label %block_400d98

block_401181:                                     ; preds = %block_40116d
  %6932 = add i64 %1241, 10
  store i64 %6932, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %6933 = load i64, i64* %PC
  %6934 = add i64 %6933, 10
  store i64 %6934, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %6935 = load i64, i64* %PC
  %6936 = add i64 %6935, 10
  store i64 %6936, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %6937 = bitcast i32* %R9D to i64*
  %6938 = load i32, i32* %R9D
  %6939 = zext i32 %6938 to i64
  %6940 = load i32, i32* %R9D
  %6941 = zext i32 %6940 to i64
  %6942 = load i64, i64* %PC
  %6943 = add i64 %6942, 3
  store i64 %6943, i64* %PC
  %6944 = xor i64 %6941, %6939
  %6945 = trunc i64 %6944 to i32
  %6946 = and i64 %6944, 4294967295
  store i64 %6946, i64* %6937, align 8, !tbaa !2428
  %6947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6947, align 1, !tbaa !2432
  %6948 = and i32 %6945, 255
  %6949 = call i32 @llvm.ctpop.i32(i32 %6948) #16
  %6950 = trunc i32 %6949 to i8
  %6951 = and i8 %6950, 1
  %6952 = xor i8 %6951, 1
  %6953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6952, i8* %6953, align 1, !tbaa !2446
  %6954 = icmp eq i32 %6945, 0
  %6955 = zext i1 %6954 to i8
  %6956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6955, i8* %6956, align 1, !tbaa !2448
  %6957 = lshr i32 %6945, 31
  %6958 = trunc i32 %6957 to i8
  %6959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6958, i8* %6959, align 1, !tbaa !2449
  %6960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6960, align 1, !tbaa !2450
  %6961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6961, align 1, !tbaa !2447
  %6962 = load i64, i64* %PC
  %6963 = add i64 %6962, 7
  store i64 %6963, i64* %PC
  %6964 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %6965 = zext i32 %6964 to i64
  store i64 %6965, i64* %RSI, align 8, !tbaa !2428
  %6966 = load i64, i64* %PC
  %6967 = add i64 %6966, 7
  store i64 %6967, i64* %PC
  %6968 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6969 = zext i32 %6968 to i64
  store i64 %6969, i64* %RDX, align 8, !tbaa !2428
  %6970 = load i64, i64* %PC
  %6971 = add i64 %6970, 2704
  %6972 = load i64, i64* %PC
  %6973 = add i64 %6972, 5
  %6974 = load i64, i64* %PC
  %6975 = add i64 %6974, 5
  store i64 %6975, i64* %PC
  %6976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6977 = load i64, i64* %6976, align 8, !tbaa !2428
  %6978 = add i64 %6977, -8
  %6979 = inttoptr i64 %6978 to i64*
  store i64 %6973, i64* %6979
  store i64 %6978, i64* %6976, align 8, !tbaa !2428
  %6980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6971, i64* %6980, align 8, !tbaa !2428
  %6981 = load i64, i64* %PC
  %6982 = call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* %0, i64 %6981, %struct.Memory* %MEMORY.1)
  %6983 = load i64, i64* %PC
  %6984 = add i64 %6983, 7
  store i64 %6984, i64* %PC
  %6985 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6986 = zext i32 %6985 to i64
  store i64 %6986, i64* %RAX, align 8, !tbaa !2428
  %6987 = load i64, i64* %RAX
  %6988 = load i64, i64* %PC
  %6989 = add i64 %6988, 3
  store i64 %6989, i64* %PC
  %6990 = trunc i64 %6987 to i32
  %6991 = add i32 1, %6990
  %6992 = zext i32 %6991 to i64
  store i64 %6992, i64* %RAX, align 8, !tbaa !2428
  %6993 = icmp ult i32 %6991, %6990
  %6994 = icmp ult i32 %6991, 1
  %6995 = or i1 %6993, %6994
  %6996 = zext i1 %6995 to i8
  %6997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6996, i8* %6997, align 1, !tbaa !2432
  %6998 = and i32 %6991, 255
  %6999 = call i32 @llvm.ctpop.i32(i32 %6998) #16
  %7000 = trunc i32 %6999 to i8
  %7001 = and i8 %7000, 1
  %7002 = xor i8 %7001, 1
  %7003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7002, i8* %7003, align 1, !tbaa !2446
  %7004 = xor i64 1, %6987
  %7005 = trunc i64 %7004 to i32
  %7006 = xor i32 %7005, %6991
  %7007 = lshr i32 %7006, 4
  %7008 = trunc i32 %7007 to i8
  %7009 = and i8 %7008, 1
  %7010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7009, i8* %7010, align 1, !tbaa !2447
  %7011 = icmp eq i32 %6991, 0
  %7012 = zext i1 %7011 to i8
  %7013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7012, i8* %7013, align 1, !tbaa !2448
  %7014 = lshr i32 %6991, 31
  %7015 = trunc i32 %7014 to i8
  %7016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7015, i8* %7016, align 1, !tbaa !2449
  %7017 = lshr i32 %6990, 31
  %7018 = xor i32 %7014, %7017
  %7019 = add nuw nsw i32 %7018, %7014
  %7020 = icmp eq i32 %7019, 2
  %7021 = zext i1 %7020 to i8
  %7022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7021, i8* %7022, align 1, !tbaa !2450
  %7023 = load i32, i32* %EAX
  %7024 = zext i32 %7023 to i64
  %7025 = load i64, i64* %PC
  %7026 = add i64 %7025, 7
  store i64 %7026, i64* %PC
  store i32 %7023, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7027 = load i64, i64* %PC
  %7028 = sub i64 %7027, 89
  %7029 = load i64, i64* %PC
  %7030 = add i64 %7029, 5
  store i64 %7030, i64* %PC
  %7031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7028, i64* %7031, align 8, !tbaa !2428
  br label %block_40116d

block_401379:                                     ; preds = %block_401369
  %7032 = add i64 %2177, 10
  store i64 %7032, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %7033 = load i64, i64* %PC
  %7034 = add i64 %7033, 10
  store i64 %7034, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %7035 = load i64, i64* %RBP
  %7036 = sub i64 %7035, 20
  %7037 = load i64, i64* %PC
  %7038 = add i64 %7037, 4
  store i64 %7038, i64* %PC
  store i64 %7036, i64* %R8, align 8, !tbaa !2428
  %7039 = load i64, i64* %PC
  %7040 = add i64 %7039, 7
  store i64 %7040, i64* %PC
  %7041 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %7042 = zext i32 %7041 to i64
  store i64 %7042, i64* %RSI, align 8, !tbaa !2428
  %7043 = load i64, i64* %PC
  %7044 = add i64 %7043, 7
  store i64 %7044, i64* %PC
  %7045 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7046 = zext i32 %7045 to i64
  store i64 %7046, i64* %RDX, align 8, !tbaa !2428
  %7047 = load i64, i64* %PC
  %7048 = add i64 %7047, 961
  %7049 = load i64, i64* %PC
  %7050 = add i64 %7049, 5
  %7051 = load i64, i64* %PC
  %7052 = add i64 %7051, 5
  store i64 %7052, i64* %PC
  %7053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7054 = load i64, i64* %7053, align 8, !tbaa !2428
  %7055 = add i64 %7054, -8
  %7056 = inttoptr i64 %7055 to i64*
  store i64 %7050, i64* %7056
  store i64 %7055, i64* %7053, align 8, !tbaa !2428
  %7057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7048, i64* %7057, align 8, !tbaa !2428
  %7058 = load i64, i64* %PC
  %7059 = call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* %0, i64 %7058, %struct.Memory* %MEMORY.4)
  %7060 = load i64, i64* %PC
  %7061 = add i64 %7060, 7
  store i64 %7061, i64* %PC
  %7062 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7063 = zext i32 %7062 to i64
  store i64 %7063, i64* %RAX, align 8, !tbaa !2428
  %7064 = load i64, i64* %RAX
  %7065 = load i64, i64* %PC
  %7066 = add i64 %7065, 3
  store i64 %7066, i64* %PC
  %7067 = trunc i64 %7064 to i32
  %7068 = add i32 1, %7067
  %7069 = zext i32 %7068 to i64
  store i64 %7069, i64* %RAX, align 8, !tbaa !2428
  %7070 = icmp ult i32 %7068, %7067
  %7071 = icmp ult i32 %7068, 1
  %7072 = or i1 %7070, %7071
  %7073 = zext i1 %7072 to i8
  %7074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7073, i8* %7074, align 1, !tbaa !2432
  %7075 = and i32 %7068, 255
  %7076 = call i32 @llvm.ctpop.i32(i32 %7075) #16
  %7077 = trunc i32 %7076 to i8
  %7078 = and i8 %7077, 1
  %7079 = xor i8 %7078, 1
  %7080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7079, i8* %7080, align 1, !tbaa !2446
  %7081 = xor i64 1, %7064
  %7082 = trunc i64 %7081 to i32
  %7083 = xor i32 %7082, %7068
  %7084 = lshr i32 %7083, 4
  %7085 = trunc i32 %7084 to i8
  %7086 = and i8 %7085, 1
  %7087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7086, i8* %7087, align 1, !tbaa !2447
  %7088 = icmp eq i32 %7068, 0
  %7089 = zext i1 %7088 to i8
  %7090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7089, i8* %7090, align 1, !tbaa !2448
  %7091 = lshr i32 %7068, 31
  %7092 = trunc i32 %7091 to i8
  %7093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7092, i8* %7093, align 1, !tbaa !2449
  %7094 = lshr i32 %7067, 31
  %7095 = xor i32 %7091, %7094
  %7096 = add nuw nsw i32 %7095, %7091
  %7097 = icmp eq i32 %7096, 2
  %7098 = zext i1 %7097 to i8
  %7099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7098, i8* %7099, align 1, !tbaa !2450
  %7100 = load i32, i32* %EAX
  %7101 = zext i32 %7100 to i64
  %7102 = load i64, i64* %PC
  %7103 = add i64 %7102, 7
  store i64 %7103, i64* %PC
  store i32 %7100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7104 = load i64, i64* %PC
  %7105 = sub i64 %7104, 76
  %7106 = load i64, i64* %PC
  %7107 = add i64 %7106, 5
  store i64 %7107, i64* %PC
  %7108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7105, i64* %7108, align 8, !tbaa !2428
  br label %block_401369

block_40112b:                                     ; preds = %block_4010a5
  %7109 = sub i64 %2236, 2875
  %7110 = load i64, i64* %PC
  %7111 = add i64 %7110, 5
  %7112 = load i64, i64* %PC
  %7113 = add i64 %7112, 5
  store i64 %7113, i64* %PC
  %7114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7115 = load i64, i64* %7114, align 8, !tbaa !2428
  %7116 = add i64 %7115, -8
  %7117 = inttoptr i64 %7116 to i64*
  store i64 %7111, i64* %7117
  store i64 %7116, i64* %7114, align 8, !tbaa !2428
  %7118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7109, i64* %7118, align 8, !tbaa !2428
  %7119 = load i64, i64* %PC
  %7120 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %7119, %struct.Memory* %MEMORY.5)
  %7121 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7122 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7123 = load i64, i64* %RBP
  %7124 = sub i64 %7123, 40
  %7125 = load i64, i64* %PC
  %7126 = add i64 %7125, 5
  store i64 %7126, i64* %PC
  %7127 = bitcast i8* %7122 to <2 x float>*
  %7128 = load <2 x float>, <2 x float>* %7127, align 1
  %7129 = getelementptr inbounds i8, i8* %7122, i64 8
  %7130 = bitcast i8* %7129 to <2 x i32>*
  %7131 = load <2 x i32>, <2 x i32>* %7130, align 1
  %7132 = inttoptr i64 %7124 to float*
  %7133 = load float, float* %7132
  %7134 = extractelement <2 x float> %7128, i32 0
  %7135 = fsub float %7134, %7133
  %7136 = bitcast i8* %7121 to float*
  store float %7135, float* %7136, align 1, !tbaa !2452
  %7137 = bitcast <2 x float> %7128 to <2 x i32>
  %7138 = extractelement <2 x i32> %7137, i32 1
  %7139 = getelementptr inbounds i8, i8* %7121, i64 4
  %7140 = bitcast i8* %7139 to i32*
  store i32 %7138, i32* %7140, align 1, !tbaa !2452
  %7141 = extractelement <2 x i32> %7131, i32 0
  %7142 = getelementptr inbounds i8, i8* %7121, i64 8
  %7143 = bitcast i8* %7142 to i32*
  store i32 %7141, i32* %7143, align 1, !tbaa !2452
  %7144 = extractelement <2 x i32> %7131, i32 1
  %7145 = getelementptr inbounds i8, i8* %7121, i64 12
  %7146 = bitcast i8* %7145 to i32*
  store i32 %7144, i32* %7146, align 1, !tbaa !2452
  %7147 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7148 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7149 = load i64, i64* %RBP
  %7150 = sub i64 %7149, 44
  %7151 = load i64, i64* %PC
  %7152 = add i64 %7151, 5
  store i64 %7152, i64* %PC
  %7153 = bitcast i8* %7148 to <2 x float>*
  %7154 = load <2 x float>, <2 x float>* %7153, align 1
  %7155 = getelementptr inbounds i8, i8* %7148, i64 8
  %7156 = bitcast i8* %7155 to <2 x i32>*
  %7157 = load <2 x i32>, <2 x i32>* %7156, align 1
  %7158 = inttoptr i64 %7150 to float*
  %7159 = load float, float* %7158
  %7160 = extractelement <2 x float> %7154, i32 0
  %7161 = fsub float %7160, %7159
  %7162 = bitcast i8* %7147 to float*
  store float %7161, float* %7162, align 1, !tbaa !2452
  %7163 = bitcast <2 x float> %7154 to <2 x i32>
  %7164 = extractelement <2 x i32> %7163, i32 1
  %7165 = getelementptr inbounds i8, i8* %7147, i64 4
  %7166 = bitcast i8* %7165 to i32*
  store i32 %7164, i32* %7166, align 1, !tbaa !2452
  %7167 = extractelement <2 x i32> %7157, i32 0
  %7168 = getelementptr inbounds i8, i8* %7147, i64 8
  %7169 = bitcast i8* %7168 to i32*
  store i32 %7167, i32* %7169, align 1, !tbaa !2452
  %7170 = extractelement <2 x i32> %7157, i32 1
  %7171 = getelementptr inbounds i8, i8* %7147, i64 12
  %7172 = bitcast i8* %7171 to i32*
  store i32 %7170, i32* %7172, align 1, !tbaa !2452
  %7173 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7174 = load i64, i64* %PC
  %7175 = add i64 %7174, 9
  store i64 %7175, i64* %PC
  %7176 = bitcast i8* %7173 to <2 x i32>*
  %7177 = load <2 x i32>, <2 x i32>* %7176, align 1
  %7178 = getelementptr inbounds i8, i8* %7173, i64 8
  %7179 = bitcast i8* %7178 to <2 x i32>*
  %7180 = load <2 x i32>, <2 x i32>* %7179, align 1
  %7181 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %7182 = sitofp i32 %7181 to float
  %7183 = bitcast i8* %7173 to float*
  store float %7182, float* %7183, align 1, !tbaa !2452
  %7184 = extractelement <2 x i32> %7177, i32 1
  %7185 = getelementptr inbounds i8, i8* %7173, i64 4
  %7186 = bitcast i8* %7185 to i32*
  store i32 %7184, i32* %7186, align 1, !tbaa !2452
  %7187 = extractelement <2 x i32> %7180, i32 0
  %7188 = bitcast i8* %7178 to i32*
  store i32 %7187, i32* %7188, align 1, !tbaa !2452
  %7189 = extractelement <2 x i32> %7180, i32 1
  %7190 = getelementptr inbounds i8, i8* %7173, i64 12
  %7191 = bitcast i8* %7190 to i32*
  store i32 %7189, i32* %7191, align 1, !tbaa !2452
  %7192 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7193 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7194 = bitcast %union.vec128_t* %XMM1 to i8*
  %7195 = load i64, i64* %PC
  %7196 = add i64 %7195, 4
  store i64 %7196, i64* %PC
  %7197 = bitcast i8* %7193 to <2 x float>*
  %7198 = load <2 x float>, <2 x float>* %7197, align 1
  %7199 = getelementptr inbounds i8, i8* %7193, i64 8
  %7200 = bitcast i8* %7199 to <2 x i32>*
  %7201 = load <2 x i32>, <2 x i32>* %7200, align 1
  %7202 = bitcast i8* %7194 to <2 x float>*
  %7203 = load <2 x float>, <2 x float>* %7202, align 1
  %7204 = extractelement <2 x float> %7198, i32 0
  %7205 = extractelement <2 x float> %7203, i32 0
  %7206 = fdiv float %7204, %7205
  %7207 = bitcast i8* %7192 to float*
  store float %7206, float* %7207, align 1, !tbaa !2452
  %7208 = bitcast <2 x float> %7198 to <2 x i32>
  %7209 = extractelement <2 x i32> %7208, i32 1
  %7210 = getelementptr inbounds i8, i8* %7192, i64 4
  %7211 = bitcast i8* %7210 to i32*
  store i32 %7209, i32* %7211, align 1, !tbaa !2452
  %7212 = extractelement <2 x i32> %7201, i32 0
  %7213 = getelementptr inbounds i8, i8* %7192, i64 8
  %7214 = bitcast i8* %7213 to i32*
  store i32 %7212, i32* %7214, align 1, !tbaa !2452
  %7215 = extractelement <2 x i32> %7201, i32 1
  %7216 = getelementptr inbounds i8, i8* %7192, i64 12
  %7217 = bitcast i8* %7216 to i32*
  store i32 %7215, i32* %7217, align 1, !tbaa !2452
  %7218 = load i64, i64* %PC
  %7219 = add i64 %7218, 8
  store i64 %7219, i64* %PC
  %7220 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %7221 = sext i32 %7220 to i64
  store i64 %7221, i64* %RAX, align 8, !tbaa !2428
  %7222 = load i64, i64* %RAX
  %7223 = mul i64 %7222, 4
  %7224 = add i64 %7223, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %7225 = bitcast %union.vec128_t* %XMM0 to i8*
  %7226 = load i64, i64* %PC
  %7227 = add i64 %7226, 9
  store i64 %7227, i64* %PC
  %7228 = bitcast i8* %7225 to <2 x float>*
  %7229 = load <2 x float>, <2 x float>* %7228, align 1
  %7230 = extractelement <2 x float> %7229, i32 0
  %7231 = inttoptr i64 %7224 to float*
  store float %7230, float* %7231
  %7232 = load i64, i64* %PC
  %7233 = sub i64 %7232, 2920
  %7234 = load i64, i64* %PC
  %7235 = add i64 %7234, 5
  %7236 = load i64, i64* %PC
  %7237 = add i64 %7236, 5
  store i64 %7237, i64* %PC
  %7238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7239 = load i64, i64* %7238, align 8, !tbaa !2428
  %7240 = add i64 %7239, -8
  %7241 = inttoptr i64 %7240 to i64*
  store i64 %7235, i64* %7241
  store i64 %7240, i64* %7238, align 8, !tbaa !2428
  %7242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7233, i64* %7242, align 8, !tbaa !2428
  %7243 = load i64, i64* %PC
  %7244 = call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* %0, i64 %7243, %struct.Memory* %7120)
  %7245 = load i64, i64* %RBP
  %7246 = sub i64 %7245, 40
  %7247 = bitcast %union.vec128_t* %XMM0 to i8*
  %7248 = load i64, i64* %PC
  %7249 = add i64 %7248, 5
  store i64 %7249, i64* %PC
  %7250 = bitcast i8* %7247 to <2 x float>*
  %7251 = load <2 x float>, <2 x float>* %7250, align 1
  %7252 = extractelement <2 x float> %7251, i32 0
  %7253 = inttoptr i64 %7246 to float*
  store float %7252, float* %7253
  %7254 = load i64, i64* %PC
  %7255 = add i64 %7254, 11
  store i64 %7255, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_40116d

block_401082:                                     ; preds = %block_4011cb, %block_400fd3
  %MEMORY.19 = phi %struct.Memory* [ %2859, %block_400fd3 ], [ %3499, %block_4011cb ]
  %7256 = load i64, i64* %PC
  %7257 = add i64 %7256, 8
  store i64 %7257, i64* %PC
  %7258 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %7259 = sub i32 %7258, 6
  %7260 = icmp ult i32 %7258, 6
  %7261 = zext i1 %7260 to i8
  %7262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7261, i8* %7262, align 1, !tbaa !2432
  %7263 = and i32 %7259, 255
  %7264 = call i32 @llvm.ctpop.i32(i32 %7263) #16
  %7265 = trunc i32 %7264 to i8
  %7266 = and i8 %7265, 1
  %7267 = xor i8 %7266, 1
  %7268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7267, i8* %7268, align 1, !tbaa !2446
  %7269 = xor i32 %7258, 6
  %7270 = xor i32 %7269, %7259
  %7271 = lshr i32 %7270, 4
  %7272 = trunc i32 %7271 to i8
  %7273 = and i8 %7272, 1
  %7274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7273, i8* %7274, align 1, !tbaa !2447
  %7275 = icmp eq i32 %7259, 0
  %7276 = zext i1 %7275 to i8
  %7277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7276, i8* %7277, align 1, !tbaa !2448
  %7278 = lshr i32 %7259, 31
  %7279 = trunc i32 %7278 to i8
  %7280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7279, i8* %7280, align 1, !tbaa !2449
  %7281 = lshr i32 %7258, 31
  %7282 = xor i32 %7278, %7281
  %7283 = add nuw nsw i32 %7282, %7281
  %7284 = icmp eq i32 %7283, 2
  %7285 = zext i1 %7284 to i8
  %7286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7285, i8* %7286, align 1, !tbaa !2450
  %7287 = load i64, i64* %PC
  %7288 = add i64 %7287, 615
  %7289 = load i64, i64* %PC
  %7290 = add i64 %7289, 6
  %7291 = load i64, i64* %PC
  %7292 = add i64 %7291, 6
  store i64 %7292, i64* %PC
  %7293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7294 = load i8, i8* %7293, align 1, !tbaa !2449
  %7295 = icmp ne i8 %7294, 0
  %7296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7297 = load i8, i8* %7296, align 1, !tbaa !2450
  %7298 = icmp ne i8 %7297, 0
  %7299 = xor i1 %7295, %7298
  %7300 = xor i1 %7299, true
  %7301 = zext i1 %7300 to i8
  store i8 %7301, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7303 = select i1 %7299, i64 %7290, i64 %7288
  store i64 %7303, i64* %7302, align 8, !tbaa !2428
  %7304 = load i8, i8* %BRANCH_TAKEN
  %7305 = icmp eq i8 %7304, 1
  %7306 = load i64, i64* %PC
  br i1 %7305, label %block_4012f1, label %block_401090

block_400981:                                     ; preds = %block_40096d
  %7307 = add i64 %1019, 8
  store i64 %7307, i64* %PC
  %7308 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7309 = sext i32 %7308 to i64
  store i64 %7309, i64* %RAX, align 8, !tbaa !2428
  %7310 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7311 = load i64, i64* %RAX
  %7312 = mul i64 %7311, 4
  %7313 = add i64 %7312, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %7314 = load i64, i64* %PC
  %7315 = add i64 %7314, 9
  store i64 %7315, i64* %PC
  %7316 = inttoptr i64 %7313 to float*
  %7317 = load float, float* %7316
  %7318 = bitcast i8* %7310 to float*
  store float %7317, float* %7318, align 1, !tbaa !2452
  %7319 = getelementptr inbounds i8, i8* %7310, i64 4
  %7320 = bitcast i8* %7319 to float*
  store float 0.000000e+00, float* %7320, align 1, !tbaa !2452
  %7321 = getelementptr inbounds i8, i8* %7310, i64 8
  %7322 = bitcast i8* %7321 to float*
  store float 0.000000e+00, float* %7322, align 1, !tbaa !2452
  %7323 = getelementptr inbounds i8, i8* %7310, i64 12
  %7324 = bitcast i8* %7323 to float*
  store float 0.000000e+00, float* %7324, align 1, !tbaa !2452
  %7325 = bitcast %union.vec128_t* %XMM0 to i8*
  %7326 = load i64, i64* %PC
  %7327 = add i64 %7326, 4
  store i64 %7327, i64* %PC
  %7328 = bitcast i8* %7325 to i64*
  %7329 = load i64, i64* %7328, align 1
  %7330 = trunc i64 %7329 to i32
  %7331 = bitcast i64* %RCX to [2 x i32]*
  %7332 = bitcast i64* %RCX to i32*
  store i32 %7330, i32* %7332, align 1, !tbaa !2454
  %7333 = getelementptr inbounds [2 x i32], [2 x i32]* %7331, i64 0, i64 1
  store i32 0, i32* %7333, align 1, !tbaa !2454
  %7334 = load i64, i64* %RCX
  %7335 = load i64, i64* %PC
  %7336 = add i64 %7335, 6
  store i64 %7336, i64* %PC
  %7337 = xor i64 -2147483648, %7334
  %7338 = trunc i64 %7337 to i32
  %7339 = and i64 %7337, 4294967295
  store i64 %7339, i64* %RCX, align 8, !tbaa !2428
  %7340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7340, align 1, !tbaa !2432
  %7341 = and i32 %7338, 255
  %7342 = call i32 @llvm.ctpop.i32(i32 %7341) #16
  %7343 = trunc i32 %7342 to i8
  %7344 = and i8 %7343, 1
  %7345 = xor i8 %7344, 1
  %7346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7345, i8* %7346, align 1, !tbaa !2446
  %7347 = icmp eq i32 %7338, 0
  %7348 = zext i1 %7347 to i8
  %7349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7348, i8* %7349, align 1, !tbaa !2448
  %7350 = lshr i32 %7338, 31
  %7351 = trunc i32 %7350 to i8
  %7352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7351, i8* %7352, align 1, !tbaa !2449
  %7353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7353, align 1, !tbaa !2450
  %7354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7354, align 1, !tbaa !2447
  %7355 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7356 = load i32, i32* %ECX
  %7357 = zext i32 %7356 to i64
  %7358 = load i64, i64* %PC
  %7359 = add i64 %7358, 4
  store i64 %7359, i64* %PC
  %7360 = bitcast i8* %7355 to i32*
  store i32 %7356, i32* %7360, align 1, !tbaa !2454
  %7361 = getelementptr inbounds i8, i8* %7355, i64 4
  %7362 = bitcast i8* %7361 to i32*
  store i32 0, i32* %7362, align 1, !tbaa !2454
  %7363 = getelementptr inbounds i8, i8* %7355, i64 8
  %7364 = bitcast i8* %7363 to i32*
  store i32 0, i32* %7364, align 1, !tbaa !2454
  %7365 = getelementptr inbounds i8, i8* %7355, i64 12
  %7366 = bitcast i8* %7365 to i32*
  store i32 0, i32* %7366, align 1, !tbaa !2454
  %7367 = load i64, i64* %PC
  %7368 = add i64 %7367, 8
  store i64 %7368, i64* %PC
  %7369 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7370 = sext i32 %7369 to i64
  store i64 %7370, i64* %RAX, align 8, !tbaa !2428
  %7371 = load i64, i64* %RAX
  %7372 = mul i64 %7371, 4
  %7373 = add i64 %7372, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %7374 = bitcast %union.vec128_t* %XMM0 to i8*
  %7375 = load i64, i64* %PC
  %7376 = add i64 %7375, 9
  store i64 %7376, i64* %PC
  %7377 = bitcast i8* %7374 to <2 x float>*
  %7378 = load <2 x float>, <2 x float>* %7377, align 1
  %7379 = extractelement <2 x float> %7378, i32 0
  %7380 = inttoptr i64 %7373 to float*
  store float %7379, float* %7380
  %7381 = load i64, i64* %PC
  %7382 = add i64 %7381, 7
  store i64 %7382, i64* %PC
  %7383 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7384 = zext i32 %7383 to i64
  store i64 %7384, i64* %RAX, align 8, !tbaa !2428
  %7385 = load i64, i64* %RAX
  %7386 = load i64, i64* %PC
  %7387 = add i64 %7386, 3
  store i64 %7387, i64* %PC
  %7388 = trunc i64 %7385 to i32
  %7389 = add i32 1, %7388
  %7390 = zext i32 %7389 to i64
  store i64 %7390, i64* %RAX, align 8, !tbaa !2428
  %7391 = icmp ult i32 %7389, %7388
  %7392 = icmp ult i32 %7389, 1
  %7393 = or i1 %7391, %7392
  %7394 = zext i1 %7393 to i8
  %7395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7394, i8* %7395, align 1, !tbaa !2432
  %7396 = and i32 %7389, 255
  %7397 = call i32 @llvm.ctpop.i32(i32 %7396) #16
  %7398 = trunc i32 %7397 to i8
  %7399 = and i8 %7398, 1
  %7400 = xor i8 %7399, 1
  %7401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7400, i8* %7401, align 1, !tbaa !2446
  %7402 = xor i64 1, %7385
  %7403 = trunc i64 %7402 to i32
  %7404 = xor i32 %7403, %7389
  %7405 = lshr i32 %7404, 4
  %7406 = trunc i32 %7405 to i8
  %7407 = and i8 %7406, 1
  %7408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7407, i8* %7408, align 1, !tbaa !2447
  %7409 = icmp eq i32 %7389, 0
  %7410 = zext i1 %7409 to i8
  %7411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7410, i8* %7411, align 1, !tbaa !2448
  %7412 = lshr i32 %7389, 31
  %7413 = trunc i32 %7412 to i8
  %7414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7413, i8* %7414, align 1, !tbaa !2449
  %7415 = lshr i32 %7388, 31
  %7416 = xor i32 %7412, %7415
  %7417 = add nuw nsw i32 %7416, %7412
  %7418 = icmp eq i32 %7417, 2
  %7419 = zext i1 %7418 to i8
  %7420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7419, i8* %7420, align 1, !tbaa !2450
  %7421 = load i32, i32* %EAX
  %7422 = zext i32 %7421 to i64
  %7423 = load i64, i64* %PC
  %7424 = add i64 %7423, 7
  store i64 %7424, i64* %PC
  store i32 %7421, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7425 = load i64, i64* %PC
  %7426 = sub i64 %7425, 85
  %7427 = load i64, i64* %PC
  %7428 = add i64 %7427, 5
  store i64 %7428, i64* %PC
  %7429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7426, i64* %7429, align 8, !tbaa !2428
  br label %block_40096d
}

; Function Attrs: noinline
define %struct.Memory* @sub_402870_print_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402870:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RBP
  %26 = sub i64 %25, 4
  %27 = load i32, i32* %EDI
  %28 = zext i32 %27 to i64
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  %31 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %31
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 1
  store i64 %40, i64* %PC
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %41, align 8, !tbaa !2428
  %46 = add i64 %43, 8
  store i64 %46, i64* %42, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402dc0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402dc0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_603de0__init_array_type* @seg_603de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_603de0__init_array_type* @seg_603de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 10564
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4004a8__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_402e16, label %block_402df6

block_402e16:                                     ; preds = %block_402e00, %block_402dc0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_402dc0 ], [ %387, %block_402e00 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402df6:                                     ; preds = %block_402dc0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_402e00

block_402e00:                                     ; preds = %block_402e00, %block_402df6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_402df6 ], [ %387, %block_402e00 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_402e00, label %block_402e16
}

; Function Attrs: noinline
define %struct.Memory* @sub_402880_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402880:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 4
  %56 = load i32, i32* %EDI
  %57 = zext i32 %56 to i64
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %60
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 8
  %63 = bitcast %union.vec128_t* %XMM0 to i8*
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 5
  store i64 %65, i64* %PC
  %66 = bitcast i8* %63 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 1
  %68 = extractelement <2 x float> %67, i32 0
  %69 = inttoptr i64 %62 to float*
  store float %68, float* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 16
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 20
  %78 = load i32, i32* %EDX
  %79 = zext i32 %78 to i64
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %77 to i32*
  store i32 %78, i32* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 32
  %85 = load i64, i64* %RCX
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 36
  %91 = load i32, i32* %R8D
  %92 = zext i32 %91 to i64
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %90 to i32*
  store i32 %91, i32* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 56
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 7
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i32*
  store i32 0, i32* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 52
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 7
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i32*
  store i32 0, i32* %105
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 4
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i32*
  %111 = load i32, i32* %110
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %112, align 1, !tbaa !2432
  %113 = and i32 %111, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2446
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %119, align 1, !tbaa !2447
  %120 = icmp eq i32 %111, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2448
  %123 = lshr i32 %111, 31
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2449
  %126 = lshr i32 %111, 31
  %127 = xor i32 %123, %126
  %128 = add nuw nsw i32 %127, %126
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 11
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 6
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 6
  store i64 %137, i64* %PC
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %139 = load i8, i8* %138, align 1, !tbaa !2448
  %140 = icmp eq i8 %139, 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %142 = load i8, i8* %141, align 1, !tbaa !2449
  %143 = icmp ne i8 %142, 0
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %145 = load i8, i8* %144, align 1, !tbaa !2450
  %146 = icmp ne i8 %145, 0
  %147 = xor i1 %143, %146
  %148 = xor i1 %147, true
  %149 = and i1 %140, %148
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %152 = select i1 %149, i64 %133, i64 %135
  store i64 %152, i64* %151, align 8, !tbaa !2428
  %153 = load i8, i8* %BRANCH_TAKEN
  %154 = icmp eq i8 %153, 1
  br i1 %154, label %block_4028b8, label %block_4028b3

block_4028df:                                     ; preds = %block_4028d5
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 36
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  %160 = load i32, i32* %159
  %161 = sub i32 %160, 1
  %162 = icmp ult i32 %160, 1
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %163, i8* %164, align 1, !tbaa !2432
  %165 = and i32 %161, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %169, i8* %170, align 1, !tbaa !2446
  %171 = xor i32 %160, 1
  %172 = xor i32 %171, %161
  %173 = lshr i32 %172, 4
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %175, i8* %176, align 1, !tbaa !2447
  %177 = icmp eq i32 %161, 0
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %178, i8* %179, align 1, !tbaa !2448
  %180 = lshr i32 %161, 31
  %181 = trunc i32 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %181, i8* %182, align 1, !tbaa !2449
  %183 = lshr i32 %160, 31
  %184 = xor i32 %180, %183
  %185 = add nuw nsw i32 %184, %183
  %186 = icmp eq i32 %185, 2
  %187 = zext i1 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %187, i8* %188, align 1, !tbaa !2450
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 174
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 6
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 6
  store i64 %194, i64* %PC
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %196 = load i8, i8* %195, align 1, !tbaa !2448
  store i8 %196, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %198 = icmp ne i8 %196, 0
  %199 = select i1 %198, i64 %190, i64 %192
  store i64 %199, i64* %197, align 8, !tbaa !2428
  %200 = load i8, i8* %BRANCH_TAKEN
  %201 = icmp eq i8 %200, 1
  br i1 %201, label %block_402991, label %block_4028e9

block_4028b8:                                     ; preds = %block_402880
  %202 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %203 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %204 = bitcast %union.vec128_t* %XMM0 to i8*
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 3
  store i64 %206, i64* %PC
  %207 = bitcast i8* %203 to i64*
  %208 = load i64, i64* %207, align 1
  %209 = getelementptr inbounds i8, i8* %203, i64 8
  %210 = bitcast i8* %209 to i64*
  %211 = load i64, i64* %210, align 1
  %212 = bitcast i8* %204 to i64*
  %213 = load i64, i64* %212, align 1
  %214 = getelementptr inbounds i8, i8* %204, i64 8
  %215 = bitcast i8* %214 to i64*
  %216 = load i64, i64* %215, align 1
  %217 = xor i64 %213, %208
  %218 = xor i64 %216, %211
  %219 = trunc i64 %217 to i32
  %220 = lshr i64 %217, 32
  %221 = trunc i64 %220 to i32
  %222 = bitcast i8* %202 to i32*
  store i32 %219, i32* %222, align 1, !tbaa !2454
  %223 = getelementptr inbounds i8, i8* %202, i64 4
  %224 = bitcast i8* %223 to i32*
  store i32 %221, i32* %224, align 1, !tbaa !2454
  %225 = trunc i64 %218 to i32
  %226 = getelementptr inbounds i8, i8* %202, i64 8
  %227 = bitcast i8* %226 to i32*
  store i32 %225, i32* %227, align 1, !tbaa !2454
  %228 = lshr i64 %218, 32
  %229 = trunc i64 %228 to i32
  %230 = getelementptr inbounds i8, i8* %202, i64 12
  %231 = bitcast i8* %230 to i32*
  store i32 %229, i32* %231, align 1, !tbaa !2454
  %232 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %233 = load i64, i64* %RBP
  %234 = sub i64 %233, 8
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 5
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to float*
  %238 = load float, float* %237
  %239 = fpext float %238 to double
  %240 = bitcast i8* %232 to double*
  store double %239, double* %240, align 1, !tbaa !2455
  %241 = bitcast %union.vec128_t* %XMM1 to i8*
  %242 = bitcast %union.vec128_t* %XMM0 to i8*
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 4
  store i64 %244, i64* %PC
  %245 = bitcast i8* %241 to double*
  %246 = load double, double* %245, align 1
  %247 = bitcast i8* %242 to double*
  %248 = load double, double* %247, align 1
  %249 = fcmp uno double %246, %248
  br i1 %249, label %250, label %262

; <label>:250:                                    ; preds = %block_4028b8
  %251 = fadd double %246, %248
  %252 = bitcast double %251 to i64
  %253 = and i64 %252, 9221120237041090560
  %254 = icmp eq i64 %253, 9218868437227405312
  %255 = and i64 %252, 2251799813685247
  %256 = icmp ne i64 %255, 0
  %257 = and i1 %254, %256
  br i1 %257, label %258, label %268

; <label>:258:                                    ; preds = %250
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = load i64, i64* %259, align 8, !tbaa !2428
  %261 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %260, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:262:                                    ; preds = %block_4028b8
  %263 = fcmp ogt double %246, %248
  br i1 %263, label %268, label %264

; <label>:264:                                    ; preds = %262
  %265 = fcmp olt double %246, %248
  br i1 %265, label %268, label %266

; <label>:266:                                    ; preds = %264
  %267 = fcmp oeq double %246, %248
  br i1 %267, label %268, label %275

; <label>:268:                                    ; preds = %266, %264, %262, %250
  %269 = phi i8 [ 0, %262 ], [ 0, %264 ], [ 1, %266 ], [ 1, %250 ]
  %270 = phi i8 [ 0, %262 ], [ 0, %264 ], [ 0, %266 ], [ 1, %250 ]
  %271 = phi i8 [ 0, %262 ], [ 1, %264 ], [ 0, %266 ], [ 1, %250 ]
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %272, align 1, !tbaa !2451
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %270, i8* %273, align 1, !tbaa !2451
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %271, i8* %274, align 1, !tbaa !2451
  br label %275

; <label>:275:                                    ; preds = %268, %266
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %276, align 1, !tbaa !2451
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %277, align 1, !tbaa !2451
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %278, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %258, %275
  %279 = phi %struct.Memory* [ %261, %258 ], [ %2, %275 ]
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 17
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 6
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 6
  store i64 %285, i64* %PC
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %287 = load i8, i8* %286, align 1, !tbaa !2448
  %288 = icmp eq i8 %287, 0
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %291 = select i1 %288, i64 %281, i64 %283
  store i64 %291, i64* %290, align 8, !tbaa !2428
  %292 = load i8, i8* %BRANCH_TAKEN
  %293 = icmp eq i8 %292, 1
  br i1 %293, label %block_4028d5, label %block_4028ca

block_4028d0:                                     ; preds = %block_4028ca
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 279
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 5
  store i64 %297, i64* %PC
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %295, i64* %298, align 8, !tbaa !2428
  br label %block_4029e7

block_40293c:                                     ; preds = %block_402930
  %299 = load i64, i64* %RBP
  %300 = sub i64 %299, 32
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to i64*
  %304 = load i64, i64* %303
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 48
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 4
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  store i64 %311, i64* %RCX, align 8, !tbaa !2428
  %312 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %313 = load i64, i64* %RAX
  %314 = load i64, i64* %RCX
  %315 = mul i64 %314, 4
  %316 = add i64 %315, %313
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 5
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to float*
  %320 = load float, float* %319
  %321 = bitcast i8* %312 to float*
  store float %320, float* %321, align 1, !tbaa !2452
  %322 = getelementptr inbounds i8, i8* %312, i64 4
  %323 = bitcast i8* %322 to float*
  store float 0.000000e+00, float* %323, align 1, !tbaa !2452
  %324 = getelementptr inbounds i8, i8* %312, i64 8
  %325 = bitcast i8* %324 to float*
  store float 0.000000e+00, float* %325, align 1, !tbaa !2452
  %326 = getelementptr inbounds i8, i8* %312, i64 12
  %327 = bitcast i8* %326 to float*
  store float 0.000000e+00, float* %327, align 1, !tbaa !2452
  %328 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 8
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 5
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %330 to float*
  %334 = load float, float* %333
  %335 = bitcast i8* %328 to float*
  store float %334, float* %335, align 1, !tbaa !2452
  %336 = getelementptr inbounds i8, i8* %328, i64 4
  %337 = bitcast i8* %336 to float*
  store float 0.000000e+00, float* %337, align 1, !tbaa !2452
  %338 = getelementptr inbounds i8, i8* %328, i64 8
  %339 = bitcast i8* %338 to float*
  store float 0.000000e+00, float* %339, align 1, !tbaa !2452
  %340 = getelementptr inbounds i8, i8* %328, i64 12
  %341 = bitcast i8* %340 to float*
  store float 0.000000e+00, float* %341, align 1, !tbaa !2452
  %342 = load i64, i64* %RBP
  %343 = sub i64 %342, 16
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 4
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %343 to i64*
  %347 = load i64, i64* %346
  store i64 %347, i64* %RAX, align 8, !tbaa !2428
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 44
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %349 to i32*
  %353 = load i32, i32* %352
  %354 = sext i32 %353 to i64
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %355 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %356 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %357 = load i64, i64* %RAX
  %358 = load i64, i64* %RCX
  %359 = mul i64 %358, 4
  %360 = add i64 %359, %357
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 5
  store i64 %362, i64* %PC
  %363 = bitcast i8* %356 to <2 x float>*
  %364 = load <2 x float>, <2 x float>* %363, align 1
  %365 = getelementptr inbounds i8, i8* %356, i64 8
  %366 = bitcast i8* %365 to <2 x i32>*
  %367 = load <2 x i32>, <2 x i32>* %366, align 1
  %368 = inttoptr i64 %360 to float*
  %369 = load float, float* %368
  %370 = extractelement <2 x float> %364, i32 0
  %371 = fmul float %370, %369
  %372 = bitcast i8* %355 to float*
  store float %371, float* %372, align 1, !tbaa !2452
  %373 = bitcast <2 x float> %364 to <2 x i32>
  %374 = extractelement <2 x i32> %373, i32 1
  %375 = getelementptr inbounds i8, i8* %355, i64 4
  %376 = bitcast i8* %375 to i32*
  store i32 %374, i32* %376, align 1, !tbaa !2452
  %377 = extractelement <2 x i32> %367, i32 0
  %378 = getelementptr inbounds i8, i8* %355, i64 8
  %379 = bitcast i8* %378 to i32*
  store i32 %377, i32* %379, align 1, !tbaa !2452
  %380 = extractelement <2 x i32> %367, i32 1
  %381 = getelementptr inbounds i8, i8* %355, i64 12
  %382 = bitcast i8* %381 to i32*
  store i32 %380, i32* %382, align 1, !tbaa !2452
  %383 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %384 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %385 = bitcast %union.vec128_t* %XMM1 to i8*
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 4
  store i64 %387, i64* %PC
  %388 = bitcast i8* %384 to <2 x float>*
  %389 = load <2 x float>, <2 x float>* %388, align 1
  %390 = getelementptr inbounds i8, i8* %384, i64 8
  %391 = bitcast i8* %390 to <2 x i32>*
  %392 = load <2 x i32>, <2 x i32>* %391, align 1
  %393 = bitcast i8* %385 to <2 x float>*
  %394 = load <2 x float>, <2 x float>* %393, align 1
  %395 = extractelement <2 x float> %389, i32 0
  %396 = extractelement <2 x float> %394, i32 0
  %397 = fadd float %395, %396
  %398 = bitcast i8* %383 to float*
  store float %397, float* %398, align 1, !tbaa !2452
  %399 = bitcast <2 x float> %389 to <2 x i32>
  %400 = extractelement <2 x i32> %399, i32 1
  %401 = getelementptr inbounds i8, i8* %383, i64 4
  %402 = bitcast i8* %401 to i32*
  store i32 %400, i32* %402, align 1, !tbaa !2452
  %403 = extractelement <2 x i32> %392, i32 0
  %404 = getelementptr inbounds i8, i8* %383, i64 8
  %405 = bitcast i8* %404 to i32*
  store i32 %403, i32* %405, align 1, !tbaa !2452
  %406 = extractelement <2 x i32> %392, i32 1
  %407 = getelementptr inbounds i8, i8* %383, i64 12
  %408 = bitcast i8* %407 to i32*
  store i32 %406, i32* %408, align 1, !tbaa !2452
  %409 = load i64, i64* %RBP
  %410 = sub i64 %409, 32
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 4
  store i64 %412, i64* %PC
  %413 = inttoptr i64 %410 to i64*
  %414 = load i64, i64* %413
  store i64 %414, i64* %RAX, align 8, !tbaa !2428
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 48
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 4
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i32*
  %420 = load i32, i32* %419
  %421 = sext i32 %420 to i64
  store i64 %421, i64* %RCX, align 8, !tbaa !2428
  %422 = load i64, i64* %RAX
  %423 = load i64, i64* %RCX
  %424 = mul i64 %423, 4
  %425 = add i64 %424, %422
  %426 = bitcast %union.vec128_t* %XMM0 to i8*
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 5
  store i64 %428, i64* %PC
  %429 = bitcast i8* %426 to <2 x float>*
  %430 = load <2 x float>, <2 x float>* %429, align 1
  %431 = extractelement <2 x float> %430, i32 0
  %432 = inttoptr i64 %425 to float*
  store float %431, float* %432
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 44
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 3
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i32*
  %438 = load i32, i32* %437
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %RDX, align 8, !tbaa !2428
  %440 = load i64, i64* %RDX
  %441 = load i64, i64* %RBP
  %442 = sub i64 %441, 20
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 3
  store i64 %444, i64* %PC
  %445 = trunc i64 %440 to i32
  %446 = inttoptr i64 %442 to i32*
  %447 = load i32, i32* %446
  %448 = add i32 %447, %445
  %449 = zext i32 %448 to i64
  store i64 %449, i64* %RDX, align 8, !tbaa !2428
  %450 = icmp ult i32 %448, %445
  %451 = icmp ult i32 %448, %447
  %452 = or i1 %450, %451
  %453 = zext i1 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %453, i8* %454, align 1, !tbaa !2432
  %455 = and i32 %448, 255
  %456 = call i32 @llvm.ctpop.i32(i32 %455) #16
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  %459 = xor i8 %458, 1
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %459, i8* %460, align 1, !tbaa !2446
  %461 = xor i32 %447, %445
  %462 = xor i32 %461, %448
  %463 = lshr i32 %462, 4
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %465, i8* %466, align 1, !tbaa !2447
  %467 = icmp eq i32 %448, 0
  %468 = zext i1 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %468, i8* %469, align 1, !tbaa !2448
  %470 = lshr i32 %448, 31
  %471 = trunc i32 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %471, i8* %472, align 1, !tbaa !2449
  %473 = lshr i32 %445, 31
  %474 = lshr i32 %447, 31
  %475 = xor i32 %470, %473
  %476 = xor i32 %470, %474
  %477 = add nuw nsw i32 %475, %476
  %478 = icmp eq i32 %477, 2
  %479 = zext i1 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %479, i8* %480, align 1, !tbaa !2450
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 44
  %483 = load i32, i32* %EDX
  %484 = zext i32 %483 to i64
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 3
  store i64 %486, i64* %PC
  %487 = inttoptr i64 %482 to i32*
  store i32 %483, i32* %487
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 48
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 3
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i32*
  %493 = load i32, i32* %492
  %494 = zext i32 %493 to i64
  store i64 %494, i64* %RDX, align 8, !tbaa !2428
  %495 = load i64, i64* %RDX
  %496 = load i64, i64* %RBP
  %497 = sub i64 %496, 36
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 3
  store i64 %499, i64* %PC
  %500 = trunc i64 %495 to i32
  %501 = inttoptr i64 %497 to i32*
  %502 = load i32, i32* %501
  %503 = add i32 %502, %500
  %504 = zext i32 %503 to i64
  store i64 %504, i64* %RDX, align 8, !tbaa !2428
  %505 = icmp ult i32 %503, %500
  %506 = icmp ult i32 %503, %502
  %507 = or i1 %505, %506
  %508 = zext i1 %507 to i8
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %508, i8* %509, align 1, !tbaa !2432
  %510 = and i32 %503, 255
  %511 = call i32 @llvm.ctpop.i32(i32 %510) #16
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  %514 = xor i8 %513, 1
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %514, i8* %515, align 1, !tbaa !2446
  %516 = xor i32 %502, %500
  %517 = xor i32 %516, %503
  %518 = lshr i32 %517, 4
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %520, i8* %521, align 1, !tbaa !2447
  %522 = icmp eq i32 %503, 0
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %523, i8* %524, align 1, !tbaa !2448
  %525 = lshr i32 %503, 31
  %526 = trunc i32 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %526, i8* %527, align 1, !tbaa !2449
  %528 = lshr i32 %500, 31
  %529 = lshr i32 %502, 31
  %530 = xor i32 %525, %528
  %531 = xor i32 %525, %529
  %532 = add nuw nsw i32 %530, %531
  %533 = icmp eq i32 %532, 2
  %534 = zext i1 %533 to i8
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %534, i8* %535, align 1, !tbaa !2450
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 48
  %538 = load i32, i32* %EDX
  %539 = zext i32 %538 to i64
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 3
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %537 to i32*
  store i32 %538, i32* %542
  %543 = load i64, i64* %RBP
  %544 = sub i64 %543, 40
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 3
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i32*
  %548 = load i32, i32* %547
  %549 = zext i32 %548 to i64
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  %553 = trunc i64 %550 to i32
  %554 = add i32 1, %553
  %555 = zext i32 %554 to i64
  store i64 %555, i64* %RAX, align 8, !tbaa !2428
  %556 = icmp ult i32 %554, %553
  %557 = icmp ult i32 %554, 1
  %558 = or i1 %556, %557
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %559, i8* %560, align 1, !tbaa !2432
  %561 = and i32 %554, 255
  %562 = call i32 @llvm.ctpop.i32(i32 %561) #16
  %563 = trunc i32 %562 to i8
  %564 = and i8 %563, 1
  %565 = xor i8 %564, 1
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %565, i8* %566, align 1, !tbaa !2446
  %567 = xor i64 1, %550
  %568 = trunc i64 %567 to i32
  %569 = xor i32 %568, %554
  %570 = lshr i32 %569, 4
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %572, i8* %573, align 1, !tbaa !2447
  %574 = icmp eq i32 %554, 0
  %575 = zext i1 %574 to i8
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %575, i8* %576, align 1, !tbaa !2448
  %577 = lshr i32 %554, 31
  %578 = trunc i32 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %578, i8* %579, align 1, !tbaa !2449
  %580 = lshr i32 %553, 31
  %581 = xor i32 %577, %580
  %582 = add nuw nsw i32 %581, %577
  %583 = icmp eq i32 %582, 2
  %584 = zext i1 %583 to i8
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %584, i8* %585, align 1, !tbaa !2450
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 40
  %588 = load i32, i32* %EAX
  %589 = zext i32 %588 to i64
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %587 to i32*
  store i32 %588, i32* %592
  %593 = load i64, i64* %PC
  %594 = sub i64 %593, 87
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 5
  store i64 %596, i64* %PC
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %594, i64* %597, align 8, !tbaa !2428
  br label %block_402930

block_402998:                                     ; preds = %block_4029a4, %block_402991
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.5, %block_402991 ], [ %MEMORY.0, %block_4029a4 ]
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 40
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 3
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %599 to i32*
  %603 = load i32, i32* %602
  %604 = zext i32 %603 to i64
  store i64 %604, i64* %RAX, align 8, !tbaa !2428
  %605 = load i32, i32* %EAX
  %606 = zext i32 %605 to i64
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 4
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 3
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  %612 = load i32, i32* %611
  %613 = sub i32 %605, %612
  %614 = icmp ult i32 %605, %612
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %615, i8* %616, align 1, !tbaa !2432
  %617 = and i32 %613, 255
  %618 = call i32 @llvm.ctpop.i32(i32 %617) #16
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %621, i8* %622, align 1, !tbaa !2446
  %623 = xor i32 %612, %605
  %624 = xor i32 %623, %613
  %625 = lshr i32 %624, 4
  %626 = trunc i32 %625 to i8
  %627 = and i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %627, i8* %628, align 1, !tbaa !2447
  %629 = icmp eq i32 %613, 0
  %630 = zext i1 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %630, i8* %631, align 1, !tbaa !2448
  %632 = lshr i32 %613, 31
  %633 = trunc i32 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %633, i8* %634, align 1, !tbaa !2449
  %635 = lshr i32 %605, 31
  %636 = lshr i32 %612, 31
  %637 = xor i32 %636, %635
  %638 = xor i32 %632, %635
  %639 = add nuw nsw i32 %638, %637
  %640 = icmp eq i32 %639, 2
  %641 = zext i1 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %641, i8* %642, align 1, !tbaa !2450
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 68
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 6
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 6
  store i64 %648, i64* %PC
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %650 = load i8, i8* %649, align 1, !tbaa !2449
  %651 = icmp ne i8 %650, 0
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %653 = load i8, i8* %652, align 1, !tbaa !2450
  %654 = icmp ne i8 %653, 0
  %655 = xor i1 %651, %654
  %656 = xor i1 %655, true
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %659 = select i1 %655, i64 %646, i64 %644
  store i64 %659, i64* %658, align 8, !tbaa !2428
  %660 = load i8, i8* %BRANCH_TAKEN
  %661 = icmp eq i8 %660, 1
  br i1 %661, label %block_4029e2, label %block_4029a4

block_402929:                                     ; preds = %block_40291a, %block_402910
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_402910 ], [ %MEMORY.2, %block_40291a ]
  %662 = load i64, i64* %RBP
  %663 = sub i64 %662, 40
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 7
  store i64 %665, i64* %PC
  %666 = inttoptr i64 %663 to i32*
  store i32 0, i32* %666
  br label %block_402930

block_402991:                                     ; preds = %block_4028df
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 40
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 7
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %668 to i32*
  store i32 0, i32* %671
  br label %block_402998

block_402910:                                     ; preds = %block_402901, %block_4028e9
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.4, %block_4028e9 ], [ %MEMORY.4, %block_402901 ]
  %672 = load i64, i64* %RBP
  %673 = sub i64 %672, 36
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 4
  store i64 %675, i64* %PC
  %676 = inttoptr i64 %673 to i32*
  %677 = load i32, i32* %676
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %678, align 1, !tbaa !2432
  %679 = and i32 %677, 255
  %680 = call i32 @llvm.ctpop.i32(i32 %679) #16
  %681 = trunc i32 %680 to i8
  %682 = and i8 %681, 1
  %683 = xor i8 %682, 1
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %683, i8* %684, align 1, !tbaa !2446
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %685, align 1, !tbaa !2447
  %686 = icmp eq i32 %677, 0
  %687 = zext i1 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %687, i8* %688, align 1, !tbaa !2448
  %689 = lshr i32 %677, 31
  %690 = trunc i32 %689 to i8
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %690, i8* %691, align 1, !tbaa !2449
  %692 = lshr i32 %677, 31
  %693 = xor i32 %689, %692
  %694 = add nuw nsw i32 %693, %692
  %695 = icmp eq i32 %694, 2
  %696 = zext i1 %695 to i8
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %696, i8* %697, align 1, !tbaa !2450
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 21
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 6
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 6
  store i64 %703, i64* %PC
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %705 = load i8, i8* %704, align 1, !tbaa !2449
  %706 = icmp ne i8 %705, 0
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %708 = load i8, i8* %707, align 1, !tbaa !2450
  %709 = icmp ne i8 %708, 0
  %710 = xor i1 %706, %709
  %711 = xor i1 %710, true
  %712 = zext i1 %711 to i8
  store i8 %712, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %714 = select i1 %710, i64 %701, i64 %699
  store i64 %714, i64* %713, align 8, !tbaa !2428
  %715 = load i8, i8* %BRANCH_TAKEN
  %716 = icmp eq i8 %715, 1
  br i1 %716, label %block_402929, label %block_40291a

block_402930:                                     ; preds = %block_402929, %block_40293c
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_402929 ], [ %MEMORY.3, %block_40293c ]
  %717 = load i64, i64* %RBP
  %718 = sub i64 %717, 40
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 3
  store i64 %720, i64* %PC
  %721 = inttoptr i64 %718 to i32*
  %722 = load i32, i32* %721
  %723 = zext i32 %722 to i64
  store i64 %723, i64* %RAX, align 8, !tbaa !2428
  %724 = load i32, i32* %EAX
  %725 = zext i32 %724 to i64
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 4
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 3
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  %731 = load i32, i32* %730
  %732 = sub i32 %724, %731
  %733 = icmp ult i32 %724, %731
  %734 = zext i1 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %734, i8* %735, align 1, !tbaa !2432
  %736 = and i32 %732, 255
  %737 = call i32 @llvm.ctpop.i32(i32 %736) #16
  %738 = trunc i32 %737 to i8
  %739 = and i8 %738, 1
  %740 = xor i8 %739, 1
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %740, i8* %741, align 1, !tbaa !2446
  %742 = xor i32 %731, %724
  %743 = xor i32 %742, %732
  %744 = lshr i32 %743, 4
  %745 = trunc i32 %744 to i8
  %746 = and i8 %745, 1
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %746, i8* %747, align 1, !tbaa !2447
  %748 = icmp eq i32 %732, 0
  %749 = zext i1 %748 to i8
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %749, i8* %750, align 1, !tbaa !2448
  %751 = lshr i32 %732, 31
  %752 = trunc i32 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %752, i8* %753, align 1, !tbaa !2449
  %754 = lshr i32 %724, 31
  %755 = lshr i32 %731, 31
  %756 = xor i32 %755, %754
  %757 = xor i32 %751, %754
  %758 = add nuw nsw i32 %757, %756
  %759 = icmp eq i32 %758, 2
  %760 = zext i1 %759 to i8
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %760, i8* %761, align 1, !tbaa !2450
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 86
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 6
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 6
  store i64 %767, i64* %PC
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %769 = load i8, i8* %768, align 1, !tbaa !2449
  %770 = icmp ne i8 %769, 0
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %772 = load i8, i8* %771, align 1, !tbaa !2450
  %773 = icmp ne i8 %772, 0
  %774 = xor i1 %770, %773
  %775 = xor i1 %774, true
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %778 = select i1 %774, i64 %765, i64 %763
  store i64 %778, i64* %777, align 8, !tbaa !2428
  %779 = load i8, i8* %BRANCH_TAKEN
  %780 = icmp eq i8 %779, 1
  br i1 %780, label %block_40298c, label %block_40293c

block_40298c:                                     ; preds = %block_402930
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 91
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 5
  store i64 %784, i64* %PC
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %782, i64* %785, align 8, !tbaa !2428
  br label %block_4029e7

block_4028b3:                                     ; preds = %block_402880
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 308
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 5
  store i64 %789, i64* %PC
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %787, i64* %790, align 8, !tbaa !2428
  br label %block_4029e7

block_4028ca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 11
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 6
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 6
  store i64 %796, i64* %PC
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %798 = load i8, i8* %797, align 1, !tbaa !2446
  store i8 %798, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %800 = icmp ne i8 %798, 0
  %801 = select i1 %800, i64 %792, i64 %794
  store i64 %801, i64* %799, align 8, !tbaa !2428
  %802 = load i8, i8* %BRANCH_TAKEN
  %803 = icmp eq i8 %802, 1
  br i1 %803, label %block_4028d5, label %block_4028d0

block_4028e9:                                     ; preds = %block_4028d5, %block_4028df
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_4028d5 ], [ %MEMORY.5, %block_4028df ]
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 44
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 7
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i32*
  store i32 0, i32* %808
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 48
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 7
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %810 to i32*
  store i32 0, i32* %813
  %814 = load i64, i64* %RBP
  %815 = sub i64 %814, 20
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 4
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to i32*
  %819 = load i32, i32* %818
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %820, align 1, !tbaa !2432
  %821 = and i32 %819, 255
  %822 = call i32 @llvm.ctpop.i32(i32 %821) #16
  %823 = trunc i32 %822 to i8
  %824 = and i8 %823, 1
  %825 = xor i8 %824, 1
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %825, i8* %826, align 1, !tbaa !2446
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %827, align 1, !tbaa !2447
  %828 = icmp eq i32 %819, 0
  %829 = zext i1 %828 to i8
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %829, i8* %830, align 1, !tbaa !2448
  %831 = lshr i32 %819, 31
  %832 = trunc i32 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %832, i8* %833, align 1, !tbaa !2449
  %834 = lshr i32 %819, 31
  %835 = xor i32 %831, %834
  %836 = add nuw nsw i32 %835, %834
  %837 = icmp eq i32 %836, 2
  %838 = zext i1 %837 to i8
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %838, i8* %839, align 1, !tbaa !2450
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 21
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 6
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 6
  store i64 %845, i64* %PC
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %847 = load i8, i8* %846, align 1, !tbaa !2449
  %848 = icmp ne i8 %847, 0
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %850 = load i8, i8* %849, align 1, !tbaa !2450
  %851 = icmp ne i8 %850, 0
  %852 = xor i1 %848, %851
  %853 = xor i1 %852, true
  %854 = zext i1 %853 to i8
  store i8 %854, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %856 = select i1 %852, i64 %843, i64 %841
  store i64 %856, i64* %855, align 8, !tbaa !2428
  %857 = load i8, i8* %BRANCH_TAKEN
  %858 = icmp eq i8 %857, 1
  br i1 %858, label %block_402910, label %block_402901

block_40291a:                                     ; preds = %block_402910
  %859 = load i64, i64* %RAX
  %860 = load i32, i32* %EAX
  %861 = zext i32 %860 to i64
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 2
  store i64 %863, i64* %PC
  %864 = xor i64 %861, %859
  %865 = trunc i64 %864 to i32
  %866 = and i64 %864, 4294967295
  store i64 %866, i64* %RAX, align 8, !tbaa !2428
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %867, align 1, !tbaa !2432
  %868 = and i32 %865, 255
  %869 = call i32 @llvm.ctpop.i32(i32 %868) #16
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = xor i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %872, i8* %873, align 1, !tbaa !2446
  %874 = icmp eq i32 %865, 0
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %875, i8* %876, align 1, !tbaa !2448
  %877 = lshr i32 %865, 31
  %878 = trunc i32 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %878, i8* %879, align 1, !tbaa !2449
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %880, align 1, !tbaa !2450
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %881, align 1, !tbaa !2447
  %882 = load i64, i64* %RAX
  %883 = load i64, i64* %RBP
  %884 = sub i64 %883, 4
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 3
  store i64 %886, i64* %PC
  %887 = trunc i64 %882 to i32
  %888 = inttoptr i64 %884 to i32*
  %889 = load i32, i32* %888
  %890 = sub i32 %887, %889
  %891 = zext i32 %890 to i64
  store i64 %891, i64* %RAX, align 8, !tbaa !2428
  %892 = icmp ult i32 %887, %889
  %893 = zext i1 %892 to i8
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %893, i8* %894, align 1, !tbaa !2432
  %895 = and i32 %890, 255
  %896 = call i32 @llvm.ctpop.i32(i32 %895) #16
  %897 = trunc i32 %896 to i8
  %898 = and i8 %897, 1
  %899 = xor i8 %898, 1
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %899, i8* %900, align 1, !tbaa !2446
  %901 = xor i32 %889, %887
  %902 = xor i32 %901, %890
  %903 = lshr i32 %902, 4
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %905, i8* %906, align 1, !tbaa !2447
  %907 = icmp eq i32 %890, 0
  %908 = zext i1 %907 to i8
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %908, i8* %909, align 1, !tbaa !2448
  %910 = lshr i32 %890, 31
  %911 = trunc i32 %910 to i8
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %911, i8* %912, align 1, !tbaa !2449
  %913 = lshr i32 %887, 31
  %914 = lshr i32 %889, 31
  %915 = xor i32 %914, %913
  %916 = xor i32 %910, %913
  %917 = add nuw nsw i32 %916, %915
  %918 = icmp eq i32 %917, 2
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %919, i8* %920, align 1, !tbaa !2450
  %921 = load i64, i64* %RAX
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 3
  store i64 %923, i64* %PC
  %924 = trunc i64 %921 to i32
  %925 = add i32 1, %924
  %926 = zext i32 %925 to i64
  store i64 %926, i64* %RAX, align 8, !tbaa !2428
  %927 = icmp ult i32 %925, %924
  %928 = icmp ult i32 %925, 1
  %929 = or i1 %927, %928
  %930 = zext i1 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %930, i8* %931, align 1, !tbaa !2432
  %932 = and i32 %925, 255
  %933 = call i32 @llvm.ctpop.i32(i32 %932) #16
  %934 = trunc i32 %933 to i8
  %935 = and i8 %934, 1
  %936 = xor i8 %935, 1
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %936, i8* %937, align 1, !tbaa !2446
  %938 = xor i64 1, %921
  %939 = trunc i64 %938 to i32
  %940 = xor i32 %939, %925
  %941 = lshr i32 %940, 4
  %942 = trunc i32 %941 to i8
  %943 = and i8 %942, 1
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %943, i8* %944, align 1, !tbaa !2447
  %945 = icmp eq i32 %925, 0
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %946, i8* %947, align 1, !tbaa !2448
  %948 = lshr i32 %925, 31
  %949 = trunc i32 %948 to i8
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %949, i8* %950, align 1, !tbaa !2449
  %951 = lshr i32 %924, 31
  %952 = xor i32 %948, %951
  %953 = add nuw nsw i32 %952, %948
  %954 = icmp eq i32 %953, 2
  %955 = zext i1 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %955, i8* %956, align 1, !tbaa !2450
  %957 = load i64, i64* %RAX
  %958 = load i64, i64* %RBP
  %959 = sub i64 %958, 36
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 4
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %959 to i32*
  %963 = load i32, i32* %962
  %964 = shl i64 %957, 32
  %965 = ashr exact i64 %964, 32
  %966 = sext i32 %963 to i64
  %967 = mul nsw i64 %966, %965
  %968 = trunc i64 %967 to i32
  %969 = and i64 %967, 4294967295
  store i64 %969, i64* %RAX, align 8, !tbaa !2428
  %970 = shl i64 %967, 32
  %971 = ashr exact i64 %970, 32
  %972 = icmp ne i64 %971, %967
  %973 = zext i1 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %973, i8* %974, align 1, !tbaa !2432
  %975 = and i32 %968, 255
  %976 = call i32 @llvm.ctpop.i32(i32 %975) #16
  %977 = trunc i32 %976 to i8
  %978 = and i8 %977, 1
  %979 = xor i8 %978, 1
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %979, i8* %980, align 1, !tbaa !2446
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %981, align 1, !tbaa !2447
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %982, align 1, !tbaa !2448
  %983 = lshr i32 %968, 31
  %984 = trunc i32 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %984, i8* %985, align 1, !tbaa !2449
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %973, i8* %986, align 1, !tbaa !2450
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 48
  %989 = load i32, i32* %EAX
  %990 = zext i32 %989 to i64
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 3
  store i64 %992, i64* %PC
  %993 = inttoptr i64 %988 to i32*
  store i32 %989, i32* %993
  br label %block_402929

block_4028d5:                                     ; preds = %block_4028ca, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.5 = phi %struct.Memory* [ %279, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %279, %block_4028ca ]
  %994 = load i64, i64* %RBP
  %995 = sub i64 %994, 20
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 4
  store i64 %997, i64* %PC
  %998 = inttoptr i64 %995 to i32*
  %999 = load i32, i32* %998
  %1000 = sub i32 %999, 1
  %1001 = icmp ult i32 %999, 1
  %1002 = zext i1 %1001 to i8
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1002, i8* %1003, align 1, !tbaa !2432
  %1004 = and i32 %1000, 255
  %1005 = call i32 @llvm.ctpop.i32(i32 %1004) #16
  %1006 = trunc i32 %1005 to i8
  %1007 = and i8 %1006, 1
  %1008 = xor i8 %1007, 1
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1008, i8* %1009, align 1, !tbaa !2446
  %1010 = xor i32 %999, 1
  %1011 = xor i32 %1010, %1000
  %1012 = lshr i32 %1011, 4
  %1013 = trunc i32 %1012 to i8
  %1014 = and i8 %1013, 1
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1014, i8* %1015, align 1, !tbaa !2447
  %1016 = icmp eq i32 %1000, 0
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1017, i8* %1018, align 1, !tbaa !2448
  %1019 = lshr i32 %1000, 31
  %1020 = trunc i32 %1019 to i8
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1020, i8* %1021, align 1, !tbaa !2449
  %1022 = lshr i32 %999, 31
  %1023 = xor i32 %1019, %1022
  %1024 = add nuw nsw i32 %1023, %1022
  %1025 = icmp eq i32 %1024, 2
  %1026 = zext i1 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1026, i8* %1027, align 1, !tbaa !2450
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 16
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 6
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 6
  store i64 %1033, i64* %PC
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1035 = load i8, i8* %1034, align 1, !tbaa !2448
  %1036 = icmp eq i8 %1035, 0
  %1037 = zext i1 %1036 to i8
  store i8 %1037, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1039 = select i1 %1036, i64 %1029, i64 %1031
  store i64 %1039, i64* %1038, align 8, !tbaa !2428
  %1040 = load i8, i8* %BRANCH_TAKEN
  %1041 = icmp eq i8 %1040, 1
  br i1 %1041, label %block_4028e9, label %block_4028df

block_4029a4:                                     ; preds = %block_402998
  %1042 = load i64, i64* %RBP
  %1043 = sub i64 %1042, 32
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 4
  store i64 %1045, i64* %PC
  %1046 = inttoptr i64 %1043 to i64*
  %1047 = load i64, i64* %1046
  store i64 %1047, i64* %RAX, align 8, !tbaa !2428
  %1048 = load i64, i64* %RBP
  %1049 = sub i64 %1048, 40
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 4
  store i64 %1051, i64* %PC
  %1052 = inttoptr i64 %1049 to i32*
  %1053 = load i32, i32* %1052
  %1054 = sext i32 %1053 to i64
  store i64 %1054, i64* %RCX, align 8, !tbaa !2428
  %1055 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1056 = load i64, i64* %RAX
  %1057 = load i64, i64* %RCX
  %1058 = mul i64 %1057, 4
  %1059 = add i64 %1058, %1056
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 5
  store i64 %1061, i64* %PC
  %1062 = inttoptr i64 %1059 to float*
  %1063 = load float, float* %1062
  %1064 = bitcast i8* %1055 to float*
  store float %1063, float* %1064, align 1, !tbaa !2452
  %1065 = getelementptr inbounds i8, i8* %1055, i64 4
  %1066 = bitcast i8* %1065 to float*
  store float 0.000000e+00, float* %1066, align 1, !tbaa !2452
  %1067 = getelementptr inbounds i8, i8* %1055, i64 8
  %1068 = bitcast i8* %1067 to float*
  store float 0.000000e+00, float* %1068, align 1, !tbaa !2452
  %1069 = getelementptr inbounds i8, i8* %1055, i64 12
  %1070 = bitcast i8* %1069 to float*
  store float 0.000000e+00, float* %1070, align 1, !tbaa !2452
  %1071 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1072 = load i64, i64* %RBP
  %1073 = sub i64 %1072, 8
  %1074 = load i64, i64* %PC
  %1075 = add i64 %1074, 5
  store i64 %1075, i64* %PC
  %1076 = inttoptr i64 %1073 to float*
  %1077 = load float, float* %1076
  %1078 = bitcast i8* %1071 to float*
  store float %1077, float* %1078, align 1, !tbaa !2452
  %1079 = getelementptr inbounds i8, i8* %1071, i64 4
  %1080 = bitcast i8* %1079 to float*
  store float 0.000000e+00, float* %1080, align 1, !tbaa !2452
  %1081 = getelementptr inbounds i8, i8* %1071, i64 8
  %1082 = bitcast i8* %1081 to float*
  store float 0.000000e+00, float* %1082, align 1, !tbaa !2452
  %1083 = getelementptr inbounds i8, i8* %1071, i64 12
  %1084 = bitcast i8* %1083 to float*
  store float 0.000000e+00, float* %1084, align 1, !tbaa !2452
  %1085 = load i64, i64* %RBP
  %1086 = sub i64 %1085, 16
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 4
  store i64 %1088, i64* %PC
  %1089 = inttoptr i64 %1086 to i64*
  %1090 = load i64, i64* %1089
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = load i64, i64* %RBP
  %1092 = sub i64 %1091, 40
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 4
  store i64 %1094, i64* %PC
  %1095 = inttoptr i64 %1092 to i32*
  %1096 = load i32, i32* %1095
  %1097 = sext i32 %1096 to i64
  store i64 %1097, i64* %RCX, align 8, !tbaa !2428
  %1098 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1099 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1100 = load i64, i64* %RAX
  %1101 = load i64, i64* %RCX
  %1102 = mul i64 %1101, 4
  %1103 = add i64 %1102, %1100
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = bitcast i8* %1099 to <2 x float>*
  %1107 = load <2 x float>, <2 x float>* %1106, align 1
  %1108 = getelementptr inbounds i8, i8* %1099, i64 8
  %1109 = bitcast i8* %1108 to <2 x i32>*
  %1110 = load <2 x i32>, <2 x i32>* %1109, align 1
  %1111 = inttoptr i64 %1103 to float*
  %1112 = load float, float* %1111
  %1113 = extractelement <2 x float> %1107, i32 0
  %1114 = fmul float %1113, %1112
  %1115 = bitcast i8* %1098 to float*
  store float %1114, float* %1115, align 1, !tbaa !2452
  %1116 = bitcast <2 x float> %1107 to <2 x i32>
  %1117 = extractelement <2 x i32> %1116, i32 1
  %1118 = getelementptr inbounds i8, i8* %1098, i64 4
  %1119 = bitcast i8* %1118 to i32*
  store i32 %1117, i32* %1119, align 1, !tbaa !2452
  %1120 = extractelement <2 x i32> %1110, i32 0
  %1121 = getelementptr inbounds i8, i8* %1098, i64 8
  %1122 = bitcast i8* %1121 to i32*
  store i32 %1120, i32* %1122, align 1, !tbaa !2452
  %1123 = extractelement <2 x i32> %1110, i32 1
  %1124 = getelementptr inbounds i8, i8* %1098, i64 12
  %1125 = bitcast i8* %1124 to i32*
  store i32 %1123, i32* %1125, align 1, !tbaa !2452
  %1126 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1127 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1128 = bitcast %union.vec128_t* %XMM1 to i8*
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 4
  store i64 %1130, i64* %PC
  %1131 = bitcast i8* %1127 to <2 x float>*
  %1132 = load <2 x float>, <2 x float>* %1131, align 1
  %1133 = getelementptr inbounds i8, i8* %1127, i64 8
  %1134 = bitcast i8* %1133 to <2 x i32>*
  %1135 = load <2 x i32>, <2 x i32>* %1134, align 1
  %1136 = bitcast i8* %1128 to <2 x float>*
  %1137 = load <2 x float>, <2 x float>* %1136, align 1
  %1138 = extractelement <2 x float> %1132, i32 0
  %1139 = extractelement <2 x float> %1137, i32 0
  %1140 = fadd float %1138, %1139
  %1141 = bitcast i8* %1126 to float*
  store float %1140, float* %1141, align 1, !tbaa !2452
  %1142 = bitcast <2 x float> %1132 to <2 x i32>
  %1143 = extractelement <2 x i32> %1142, i32 1
  %1144 = getelementptr inbounds i8, i8* %1126, i64 4
  %1145 = bitcast i8* %1144 to i32*
  store i32 %1143, i32* %1145, align 1, !tbaa !2452
  %1146 = extractelement <2 x i32> %1135, i32 0
  %1147 = getelementptr inbounds i8, i8* %1126, i64 8
  %1148 = bitcast i8* %1147 to i32*
  store i32 %1146, i32* %1148, align 1, !tbaa !2452
  %1149 = extractelement <2 x i32> %1135, i32 1
  %1150 = getelementptr inbounds i8, i8* %1126, i64 12
  %1151 = bitcast i8* %1150 to i32*
  store i32 %1149, i32* %1151, align 1, !tbaa !2452
  %1152 = load i64, i64* %RBP
  %1153 = sub i64 %1152, 32
  %1154 = load i64, i64* %PC
  %1155 = add i64 %1154, 4
  store i64 %1155, i64* %PC
  %1156 = inttoptr i64 %1153 to i64*
  %1157 = load i64, i64* %1156
  store i64 %1157, i64* %RAX, align 8, !tbaa !2428
  %1158 = load i64, i64* %RBP
  %1159 = sub i64 %1158, 40
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 4
  store i64 %1161, i64* %PC
  %1162 = inttoptr i64 %1159 to i32*
  %1163 = load i32, i32* %1162
  %1164 = sext i32 %1163 to i64
  store i64 %1164, i64* %RCX, align 8, !tbaa !2428
  %1165 = load i64, i64* %RAX
  %1166 = load i64, i64* %RCX
  %1167 = mul i64 %1166, 4
  %1168 = add i64 %1167, %1165
  %1169 = bitcast %union.vec128_t* %XMM0 to i8*
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 5
  store i64 %1171, i64* %PC
  %1172 = bitcast i8* %1169 to <2 x float>*
  %1173 = load <2 x float>, <2 x float>* %1172, align 1
  %1174 = extractelement <2 x float> %1173, i32 0
  %1175 = inttoptr i64 %1168 to float*
  store float %1174, float* %1175
  %1176 = load i64, i64* %RBP
  %1177 = sub i64 %1176, 40
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 3
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1177 to i32*
  %1181 = load i32, i32* %1180
  %1182 = zext i32 %1181 to i64
  store i64 %1182, i64* %RAX, align 8, !tbaa !2428
  %1183 = load i64, i64* %RAX
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 3
  store i64 %1185, i64* %PC
  %1186 = trunc i64 %1183 to i32
  %1187 = add i32 1, %1186
  %1188 = zext i32 %1187 to i64
  store i64 %1188, i64* %RAX, align 8, !tbaa !2428
  %1189 = icmp ult i32 %1187, %1186
  %1190 = icmp ult i32 %1187, 1
  %1191 = or i1 %1189, %1190
  %1192 = zext i1 %1191 to i8
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1192, i8* %1193, align 1, !tbaa !2432
  %1194 = and i32 %1187, 255
  %1195 = call i32 @llvm.ctpop.i32(i32 %1194) #16
  %1196 = trunc i32 %1195 to i8
  %1197 = and i8 %1196, 1
  %1198 = xor i8 %1197, 1
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1198, i8* %1199, align 1, !tbaa !2446
  %1200 = xor i64 1, %1183
  %1201 = trunc i64 %1200 to i32
  %1202 = xor i32 %1201, %1187
  %1203 = lshr i32 %1202, 4
  %1204 = trunc i32 %1203 to i8
  %1205 = and i8 %1204, 1
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1205, i8* %1206, align 1, !tbaa !2447
  %1207 = icmp eq i32 %1187, 0
  %1208 = zext i1 %1207 to i8
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1208, i8* %1209, align 1, !tbaa !2448
  %1210 = lshr i32 %1187, 31
  %1211 = trunc i32 %1210 to i8
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1211, i8* %1212, align 1, !tbaa !2449
  %1213 = lshr i32 %1186, 31
  %1214 = xor i32 %1210, %1213
  %1215 = add nuw nsw i32 %1214, %1210
  %1216 = icmp eq i32 %1215, 2
  %1217 = zext i1 %1216 to i8
  %1218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1217, i8* %1218, align 1, !tbaa !2450
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 40
  %1221 = load i32, i32* %EAX
  %1222 = zext i32 %1221 to i64
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 3
  store i64 %1224, i64* %PC
  %1225 = inttoptr i64 %1220 to i32*
  store i32 %1221, i32* %1225
  %1226 = load i64, i64* %PC
  %1227 = sub i64 %1226, 69
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 5
  store i64 %1229, i64* %PC
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1227, i64* %1230, align 8, !tbaa !2428
  br label %block_402998

block_4029e2:                                     ; preds = %block_402998
  %1231 = load i64, i64* %PC
  %1232 = add i64 %1231, 5
  %1233 = load i64, i64* %PC
  %1234 = add i64 %1233, 5
  store i64 %1234, i64* %PC
  %1235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1232, i64* %1235, align 8, !tbaa !2428
  br label %block_4029e7

block_4029e7:                                     ; preds = %block_4029e2, %block_4028b3, %block_40298c, %block_4028d0
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.3, %block_40298c ], [ %MEMORY.0, %block_4029e2 ], [ %279, %block_4028d0 ], [ %2, %block_4028b3 ]
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 1
  store i64 %1237, i64* %PC
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1239 = load i64, i64* %1238, align 8, !tbaa !2428
  %1240 = add i64 %1239, 8
  %1241 = inttoptr i64 %1239 to i64*
  %1242 = load i64, i64* %1241
  store i64 %1242, i64* %RBP, align 8, !tbaa !2428
  store i64 %1240, i64* %1238, align 8, !tbaa !2428
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 1
  store i64 %1244, i64* %PC
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1247 = load i64, i64* %1246, align 8, !tbaa !2428
  %1248 = inttoptr i64 %1247 to i64*
  %1249 = load i64, i64* %1248
  store i64 %1249, i64* %1245, align 8, !tbaa !2428
  %1250 = add i64 %1247, 8
  store i64 %1250, i64* %1246, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_402901:                                     ; preds = %block_4028e9
  %1251 = load i64, i64* %RAX
  %1252 = load i32, i32* %EAX
  %1253 = zext i32 %1252 to i64
  %1254 = load i64, i64* %PC
  %1255 = add i64 %1254, 2
  store i64 %1255, i64* %PC
  %1256 = xor i64 %1253, %1251
  %1257 = trunc i64 %1256 to i32
  %1258 = and i64 %1256, 4294967295
  store i64 %1258, i64* %RAX, align 8, !tbaa !2428
  %1259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1259, align 1, !tbaa !2432
  %1260 = and i32 %1257, 255
  %1261 = call i32 @llvm.ctpop.i32(i32 %1260) #16
  %1262 = trunc i32 %1261 to i8
  %1263 = and i8 %1262, 1
  %1264 = xor i8 %1263, 1
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1264, i8* %1265, align 1, !tbaa !2446
  %1266 = icmp eq i32 %1257, 0
  %1267 = zext i1 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1267, i8* %1268, align 1, !tbaa !2448
  %1269 = lshr i32 %1257, 31
  %1270 = trunc i32 %1269 to i8
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1270, i8* %1271, align 1, !tbaa !2449
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1272, align 1, !tbaa !2450
  %1273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1273, align 1, !tbaa !2447
  %1274 = load i64, i64* %RAX
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 4
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 3
  store i64 %1278, i64* %PC
  %1279 = trunc i64 %1274 to i32
  %1280 = inttoptr i64 %1276 to i32*
  %1281 = load i32, i32* %1280
  %1282 = sub i32 %1279, %1281
  %1283 = zext i32 %1282 to i64
  store i64 %1283, i64* %RAX, align 8, !tbaa !2428
  %1284 = icmp ult i32 %1279, %1281
  %1285 = zext i1 %1284 to i8
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1285, i8* %1286, align 1, !tbaa !2432
  %1287 = and i32 %1282, 255
  %1288 = call i32 @llvm.ctpop.i32(i32 %1287) #16
  %1289 = trunc i32 %1288 to i8
  %1290 = and i8 %1289, 1
  %1291 = xor i8 %1290, 1
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1291, i8* %1292, align 1, !tbaa !2446
  %1293 = xor i32 %1281, %1279
  %1294 = xor i32 %1293, %1282
  %1295 = lshr i32 %1294, 4
  %1296 = trunc i32 %1295 to i8
  %1297 = and i8 %1296, 1
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1297, i8* %1298, align 1, !tbaa !2447
  %1299 = icmp eq i32 %1282, 0
  %1300 = zext i1 %1299 to i8
  %1301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1300, i8* %1301, align 1, !tbaa !2448
  %1302 = lshr i32 %1282, 31
  %1303 = trunc i32 %1302 to i8
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1303, i8* %1304, align 1, !tbaa !2449
  %1305 = lshr i32 %1279, 31
  %1306 = lshr i32 %1281, 31
  %1307 = xor i32 %1306, %1305
  %1308 = xor i32 %1302, %1305
  %1309 = add nuw nsw i32 %1308, %1307
  %1310 = icmp eq i32 %1309, 2
  %1311 = zext i1 %1310 to i8
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1311, i8* %1312, align 1, !tbaa !2450
  %1313 = load i64, i64* %RAX
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 3
  store i64 %1315, i64* %PC
  %1316 = trunc i64 %1313 to i32
  %1317 = add i32 1, %1316
  %1318 = zext i32 %1317 to i64
  store i64 %1318, i64* %RAX, align 8, !tbaa !2428
  %1319 = icmp ult i32 %1317, %1316
  %1320 = icmp ult i32 %1317, 1
  %1321 = or i1 %1319, %1320
  %1322 = zext i1 %1321 to i8
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1322, i8* %1323, align 1, !tbaa !2432
  %1324 = and i32 %1317, 255
  %1325 = call i32 @llvm.ctpop.i32(i32 %1324) #16
  %1326 = trunc i32 %1325 to i8
  %1327 = and i8 %1326, 1
  %1328 = xor i8 %1327, 1
  %1329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1328, i8* %1329, align 1, !tbaa !2446
  %1330 = xor i64 1, %1313
  %1331 = trunc i64 %1330 to i32
  %1332 = xor i32 %1331, %1317
  %1333 = lshr i32 %1332, 4
  %1334 = trunc i32 %1333 to i8
  %1335 = and i8 %1334, 1
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1335, i8* %1336, align 1, !tbaa !2447
  %1337 = icmp eq i32 %1317, 0
  %1338 = zext i1 %1337 to i8
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1338, i8* %1339, align 1, !tbaa !2448
  %1340 = lshr i32 %1317, 31
  %1341 = trunc i32 %1340 to i8
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1341, i8* %1342, align 1, !tbaa !2449
  %1343 = lshr i32 %1316, 31
  %1344 = xor i32 %1340, %1343
  %1345 = add nuw nsw i32 %1344, %1340
  %1346 = icmp eq i32 %1345, 2
  %1347 = zext i1 %1346 to i8
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1347, i8* %1348, align 1, !tbaa !2450
  %1349 = load i64, i64* %RAX
  %1350 = load i64, i64* %RBP
  %1351 = sub i64 %1350, 20
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 4
  store i64 %1353, i64* %PC
  %1354 = inttoptr i64 %1351 to i32*
  %1355 = load i32, i32* %1354
  %1356 = shl i64 %1349, 32
  %1357 = ashr exact i64 %1356, 32
  %1358 = sext i32 %1355 to i64
  %1359 = mul nsw i64 %1358, %1357
  %1360 = trunc i64 %1359 to i32
  %1361 = and i64 %1359, 4294967295
  store i64 %1361, i64* %RAX, align 8, !tbaa !2428
  %1362 = shl i64 %1359, 32
  %1363 = ashr exact i64 %1362, 32
  %1364 = icmp ne i64 %1363, %1359
  %1365 = zext i1 %1364 to i8
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1365, i8* %1366, align 1, !tbaa !2432
  %1367 = and i32 %1360, 255
  %1368 = call i32 @llvm.ctpop.i32(i32 %1367) #16
  %1369 = trunc i32 %1368 to i8
  %1370 = and i8 %1369, 1
  %1371 = xor i8 %1370, 1
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1371, i8* %1372, align 1, !tbaa !2446
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1373, align 1, !tbaa !2447
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1374, align 1, !tbaa !2448
  %1375 = lshr i32 %1360, 31
  %1376 = trunc i32 %1375 to i8
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1376, i8* %1377, align 1, !tbaa !2449
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1365, i8* %1378, align 1, !tbaa !2450
  %1379 = load i64, i64* %RBP
  %1380 = sub i64 %1379, 44
  %1381 = load i32, i32* %EAX
  %1382 = zext i32 %1381 to i64
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 3
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1380 to i32*
  store i32 %1381, i32* %1385
  br label %block_402910
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004a8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004a8:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4004ba, label %block_4004b8

block_4004b8:                                     ; preds = %block_4004a8
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4004ba

block_4004ba:                                     ; preds = %block_4004b8, %block_4004a8
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004a8 ], [ %92, %block_4004b8 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005f0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %16 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %15, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %16 to %"class.std::bitset"*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %18 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %17, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %18 to %"class.std::bitset"*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %20 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %19, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %20 to %union.vec128_t*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %22 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %21, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %22 to %union.vec128_t*
  %23 = load i64, i64* %RBP
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 1
  store i64 %25, i64* %PC
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %27 = load i64, i64* %26, align 8, !tbaa !2428
  %28 = add i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %23, i64* %29
  store i64 %28, i64* %26, align 8, !tbaa !2428
  %30 = load i64, i64* %RSP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 3
  store i64 %32, i64* %PC
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  %33 = load i64, i64* %RSP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 16
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %37 = icmp ult i64 %33, 16
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 16, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = load i64, i64* %PC
  %66 = sub i64 %65, 296
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 5
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %66, i64* %75, align 8, !tbaa !2428
  %76 = load i64, i64* %PC
  %77 = call %struct.Memory* @ext_653140_clock(%struct.State* %0, i64 %76, %struct.Memory* %2)
  %78 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 8
  store i64 %80, i64* %PC
  %81 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 4) to float*)
  %82 = bitcast i8* %78 to float*
  store float %81, float* %82, align 1, !tbaa !2452
  %83 = getelementptr inbounds i8, i8* %78, i64 4
  %84 = bitcast i8* %83 to float*
  store float 0.000000e+00, float* %84, align 1, !tbaa !2452
  %85 = getelementptr inbounds i8, i8* %78, i64 8
  %86 = bitcast i8* %85 to float*
  store float 0.000000e+00, float* %86, align 1, !tbaa !2452
  %87 = getelementptr inbounds i8, i8* %78, i64 12
  %88 = bitcast i8* %87 to float*
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 16
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 6
  store i64 %99, i64* %PC
  %100 = bitcast i8* %95 to <2 x i32>*
  %101 = load <2 x i32>, <2 x i32>* %100, align 1
  %102 = getelementptr inbounds i8, i8* %95, i64 8
  %103 = bitcast i8* %102 to <2 x i32>*
  %104 = load <2 x i32>, <2 x i32>* %103, align 1
  %105 = inttoptr i64 %97 to i64*
  %106 = load i64, i64* %105
  %107 = sitofp i64 %106 to float
  %108 = bitcast i8* %95 to float*
  store float %107, float* %108, align 1, !tbaa !2452
  %109 = extractelement <2 x i32> %101, i32 1
  %110 = getelementptr inbounds i8, i8* %95, i64 4
  %111 = bitcast i8* %110 to i32*
  store i32 %109, i32* %111, align 1, !tbaa !2452
  %112 = extractelement <2 x i32> %104, i32 0
  %113 = bitcast i8* %102 to i32*
  store i32 %112, i32* %113, align 1, !tbaa !2452
  %114 = extractelement <2 x i32> %104, i32 1
  %115 = getelementptr inbounds i8, i8* %95, i64 12
  %116 = bitcast i8* %115 to i32*
  store i32 %114, i32* %116, align 1, !tbaa !2452
  %117 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %118 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %119 = bitcast %union.vec128_t* %XMM0 to i8*
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = bitcast i8* %118 to <2 x float>*
  %123 = load <2 x float>, <2 x float>* %122, align 1
  %124 = getelementptr inbounds i8, i8* %118, i64 8
  %125 = bitcast i8* %124 to <2 x i32>*
  %126 = load <2 x i32>, <2 x i32>* %125, align 1
  %127 = bitcast i8* %119 to <2 x float>*
  %128 = load <2 x float>, <2 x float>* %127, align 1
  %129 = extractelement <2 x float> %123, i32 0
  %130 = extractelement <2 x float> %128, i32 0
  %131 = fdiv float %129, %130
  %132 = bitcast i8* %117 to float*
  store float %131, float* %132, align 1, !tbaa !2452
  %133 = bitcast <2 x float> %123 to <2 x i32>
  %134 = extractelement <2 x i32> %133, i32 1
  %135 = getelementptr inbounds i8, i8* %117, i64 4
  %136 = bitcast i8* %135 to i32*
  store i32 %134, i32* %136, align 1, !tbaa !2452
  %137 = extractelement <2 x i32> %126, i32 0
  %138 = getelementptr inbounds i8, i8* %117, i64 8
  %139 = bitcast i8* %138 to i32*
  store i32 %137, i32* %139, align 1, !tbaa !2452
  %140 = extractelement <2 x i32> %126, i32 1
  %141 = getelementptr inbounds i8, i8* %117, i64 12
  %142 = bitcast i8* %141 to i32*
  store i32 %140, i32* %142, align 1, !tbaa !2452
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 4
  %145 = bitcast %union.vec128_t* %XMM1 to i8*
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC
  %148 = bitcast i8* %145 to <2 x float>*
  %149 = load <2 x float>, <2 x float>* %148, align 1
  %150 = extractelement <2 x float> %149, i32 0
  %151 = inttoptr i64 %144 to float*
  store float %150, float* %151
  %152 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 4
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to float*
  %158 = load float, float* %157
  %159 = bitcast i8* %152 to float*
  store float %158, float* %159, align 1, !tbaa !2452
  %160 = getelementptr inbounds i8, i8* %152, i64 4
  %161 = bitcast i8* %160 to float*
  store float 0.000000e+00, float* %161, align 1, !tbaa !2452
  %162 = getelementptr inbounds i8, i8* %152, i64 8
  %163 = bitcast i8* %162 to float*
  store float 0.000000e+00, float* %163, align 1, !tbaa !2452
  %164 = getelementptr inbounds i8, i8* %152, i64 12
  %165 = bitcast i8* %164 to float*
  store float 0.000000e+00, float* %165, align 1, !tbaa !2452
  %166 = load i64, i64* %RSP
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = add i64 16, %166
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  %170 = icmp ult i64 %169, %166
  %171 = icmp ult i64 %169, 16
  %172 = or i1 %170, %171
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %173, i8* %174, align 1, !tbaa !2432
  %175 = trunc i64 %169 to i32
  %176 = and i32 %175, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2446
  %182 = xor i64 16, %166
  %183 = xor i64 %182, %169
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %186, i8* %187, align 1, !tbaa !2447
  %188 = icmp eq i64 %169, 0
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %189, i8* %190, align 1, !tbaa !2448
  %191 = lshr i64 %169, 63
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %192, i8* %193, align 1, !tbaa !2449
  %194 = lshr i64 %166, 63
  %195 = xor i64 %191, %194
  %196 = add nuw nsw i64 %195, %191
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %198, i8* %199, align 1, !tbaa !2450
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline
define %struct.Memory* @sub_401fc0_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401fc0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 19
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R9 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %46 to %"class.std::bitset"*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %48 to %"class.std::bitset"*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %50 to %union.vec128_t*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %52 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %51, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %52 to %union.vec128_t*
  %53 = load i64, i64* %RBP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 1
  store i64 %55, i64* %PC
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = add i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  store i64 %53, i64* %59
  store i64 %58, i64* %56, align 8, !tbaa !2428
  %60 = load i64, i64* %RSP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 5
  store i64 %64, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %65 = load i64, i64* %RBP
  %66 = sub i64 %65, 4
  %67 = load i32, i32* %EDI
  %68 = zext i32 %67 to i64
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %66 to i32*
  store i32 %67, i32* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 16
  %74 = load i64, i64* %RSI
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %73 to i64*
  store i64 %74, i64* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 20
  %80 = load i32, i32* %EDX
  %81 = zext i32 %80 to i64
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %79 to i32*
  store i32 %80, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = load i32, i32* %ECX
  %88 = zext i32 %87 to i64
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 3
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 32
  %94 = load i64, i64* %R8
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %93 to i64*
  store i64 %94, i64* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 40
  %100 = load i64, i64* %R9
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 20
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 56
  %113 = load i32, i32* %EAX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i32, i32* %ECX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  store i64 %121, i64* %PC
  %122 = and i64 %119, 4294967295
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %127 = bitcast %union.anon* %126 to i32*
  %128 = load i32, i32* %127, align 8, !tbaa !2454
  %129 = sext i32 %128 to i64
  %130 = lshr i64 %129, 32
  store i64 %130, i64* %125, align 8, !tbaa !2428
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 56
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  %136 = load i32, i32* %135
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RCX, align 8, !tbaa !2428
  %138 = load i32, i32* %ECX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 2
  store i64 %141, i64* %PC
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %143 = bitcast %union.anon* %142 to i32*
  %144 = load i32, i32* %143, align 8, !tbaa !2454
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %147 = bitcast %union.anon* %146 to i32*
  %148 = load i32, i32* %147, align 8, !tbaa !2454
  %149 = zext i32 %148 to i64
  %150 = shl i64 %139, 32
  %151 = ashr exact i64 %150, 32
  %152 = shl nuw i64 %149, 32
  %153 = or i64 %152, %145
  %154 = sdiv i64 %153, %151
  %155 = shl i64 %154, 32
  %156 = ashr exact i64 %155, 32
  %157 = icmp eq i64 %154, %156
  br i1 %157, label %162, label %158

; <label>:158:                                    ; preds = %block_401fc0
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %160 = load i64, i64* %159, align 8, !tbaa !2428
  %161 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %160, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:162:                                    ; preds = %block_401fc0
  %163 = srem i64 %153, %151
  %164 = getelementptr inbounds %union.anon, %union.anon* %142, i64 0, i32 0
  %165 = and i64 %154, 4294967295
  store i64 %165, i64* %164, align 8, !tbaa !2428
  %166 = getelementptr inbounds %union.anon, %union.anon* %146, i64 0, i32 0
  %167 = and i64 %163, 4294967295
  store i64 %167, i64* %166, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %168, align 1, !tbaa !2432
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %169, align 1, !tbaa !2446
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2447
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %171, align 1, !tbaa !2448
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %172, align 1, !tbaa !2449
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %173, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %158, %162
  %174 = phi %struct.Memory* [ %161, %158 ], [ %2, %162 ]
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 44
  %177 = load i32, i32* %EDX
  %178 = zext i32 %177 to i64
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 3
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %176 to i32*
  store i32 %177, i32* %181
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 44
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = sub i32 %187, 1
  %189 = icmp ult i32 %187, 1
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %190, i8* %191, align 1, !tbaa !2432
  %192 = and i32 %188, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = xor i32 %187, 1
  %199 = xor i32 %198, %188
  %200 = lshr i32 %199, 4
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %202, i8* %203, align 1, !tbaa !2447
  %204 = icmp eq i32 %188, 0
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %205, i8* %206, align 1, !tbaa !2448
  %207 = lshr i32 %188, 31
  %208 = trunc i32 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %208, i8* %209, align 1, !tbaa !2449
  %210 = lshr i32 %187, 31
  %211 = xor i32 %207, %210
  %212 = add nuw nsw i32 %211, %210
  %213 = icmp eq i32 %212, 2
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %214, i8* %215, align 1, !tbaa !2450
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 118
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 6
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  store i64 %221, i64* %PC
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %223 = load i8, i8* %222, align 1, !tbaa !2449
  %224 = icmp ne i8 %223, 0
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %226 = load i8, i8* %225, align 1, !tbaa !2450
  %227 = icmp ne i8 %226, 0
  %228 = xor i1 %224, %227
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %231 = select i1 %228, i64 %217, i64 %219
  store i64 %231, i64* %230, align 8, !tbaa !2428
  %232 = load i8, i8* %BRANCH_TAKEN
  %233 = icmp eq i8 %232, 1
  br i1 %233, label %block_402069, label %block_401ff9

block_40227d:                                     ; preds = %block_402289, %block_40226d
  %MEMORY.0 = phi %struct.Memory* [ %5681, %block_40226d ], [ %MEMORY.0, %block_402289 ]
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 48
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i32*
  %239 = load i32, i32* %238
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  %241 = load i32, i32* %EAX
  %242 = zext i32 %241 to i64
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 4
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 3
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i32*
  %248 = load i32, i32* %247
  %249 = sub i32 %241, %248
  %250 = icmp ult i32 %241, %248
  %251 = zext i1 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %251, i8* %252, align 1, !tbaa !2432
  %253 = and i32 %249, 255
  %254 = call i32 @llvm.ctpop.i32(i32 %253) #16
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %257, i8* %258, align 1, !tbaa !2446
  %259 = xor i32 %248, %241
  %260 = xor i32 %259, %249
  %261 = lshr i32 %260, 4
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %263, i8* %264, align 1, !tbaa !2447
  %265 = icmp eq i32 %249, 0
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %266, i8* %267, align 1, !tbaa !2448
  %268 = lshr i32 %249, 31
  %269 = trunc i32 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %269, i8* %270, align 1, !tbaa !2449
  %271 = lshr i32 %241, 31
  %272 = lshr i32 %248, 31
  %273 = xor i32 %272, %271
  %274 = xor i32 %268, %271
  %275 = add nuw nsw i32 %274, %273
  %276 = icmp eq i32 %275, 2
  %277 = zext i1 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %277, i8* %278, align 1, !tbaa !2450
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 428
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 6
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 6
  store i64 %284, i64* %PC
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %286 = load i8, i8* %285, align 1, !tbaa !2449
  %287 = icmp ne i8 %286, 0
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %289 = load i8, i8* %288, align 1, !tbaa !2450
  %290 = icmp ne i8 %289, 0
  %291 = xor i1 %287, %290
  %292 = xor i1 %291, true
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %295 = select i1 %291, i64 %282, i64 %280
  store i64 %295, i64* %294, align 8, !tbaa !2428
  %296 = load i8, i8* %BRANCH_TAKEN
  %297 = icmp eq i8 %296, 1
  br i1 %297, label %block_40242f, label %block_402289

block_401ff9:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 44
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = zext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 3
  store i64 %307, i64* %PC
  %308 = trunc i64 %305 to i32
  %309 = sub i32 %308, 1
  %310 = zext i32 %309 to i64
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = icmp ult i32 %308, 1
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %312, i8* %313, align 1, !tbaa !2432
  %314 = and i32 %309, 255
  %315 = call i32 @llvm.ctpop.i32(i32 %314) #16
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %319, align 1, !tbaa !2446
  %320 = xor i64 1, %305
  %321 = trunc i64 %320 to i32
  %322 = xor i32 %321, %309
  %323 = lshr i32 %322, 4
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = icmp eq i32 %309, 0
  %328 = zext i1 %327 to i8
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %328, i8* %329, align 1, !tbaa !2448
  %330 = lshr i32 %309, 31
  %331 = trunc i32 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %331, i8* %332, align 1, !tbaa !2449
  %333 = lshr i32 %308, 31
  %334 = xor i32 %330, %333
  %335 = add nuw nsw i32 %334, %333
  %336 = icmp eq i32 %335, 2
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 44
  %341 = load i32, i32* %EAX
  %342 = zext i32 %341 to i64
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %340 to i32*
  store i32 %341, i32* %345
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 48
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 7
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i32*
  store i32 0, i32* %350
  br label %block_402009

block_402069:                                     ; preds = %block_402064, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %MEMORY.1 = phi %struct.Memory* [ %174, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ], [ %MEMORY.3, %block_402064 ]
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 5
  store i64 %352, i64* %PC
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 20
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  %357 = inttoptr i64 %354 to i32*
  %358 = load i32, i32* %357
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RCX, align 8, !tbaa !2428
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 60
  %362 = load i32, i32* %EAX
  %363 = zext i32 %362 to i64
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %361 to i32*
  store i32 %362, i32* %366
  %367 = load i32, i32* %ECX
  %368 = zext i32 %367 to i64
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 2
  store i64 %370, i64* %PC
  %371 = and i64 %368, 4294967295
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 1
  store i64 %373, i64* %PC
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %376 = bitcast %union.anon* %375 to i32*
  %377 = load i32, i32* %376, align 8, !tbaa !2454
  %378 = sext i32 %377 to i64
  %379 = lshr i64 %378, 32
  store i64 %379, i64* %374, align 8, !tbaa !2428
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 60
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 3
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i32*
  %385 = load i32, i32* %384
  %386 = zext i32 %385 to i64
  store i64 %386, i64* %RCX, align 8, !tbaa !2428
  %387 = load i32, i32* %ECX
  %388 = zext i32 %387 to i64
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 2
  store i64 %390, i64* %PC
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %392 = bitcast %union.anon* %391 to i32*
  %393 = load i32, i32* %392, align 8, !tbaa !2454
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %396 = bitcast %union.anon* %395 to i32*
  %397 = load i32, i32* %396, align 8, !tbaa !2454
  %398 = zext i32 %397 to i64
  %399 = shl i64 %388, 32
  %400 = ashr exact i64 %399, 32
  %401 = shl nuw i64 %398, 32
  %402 = or i64 %401, %394
  %403 = sdiv i64 %402, %400
  %404 = shl i64 %403, 32
  %405 = ashr exact i64 %404, 32
  %406 = icmp eq i64 %403, %405
  br i1 %406, label %411, label %407

; <label>:407:                                    ; preds = %block_402069
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %409 = load i64, i64* %408, align 8, !tbaa !2428
  %410 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %409, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:411:                                    ; preds = %block_402069
  %412 = srem i64 %402, %400
  %413 = getelementptr inbounds %union.anon, %union.anon* %391, i64 0, i32 0
  %414 = and i64 %403, 4294967295
  store i64 %414, i64* %413, align 8, !tbaa !2428
  %415 = getelementptr inbounds %union.anon, %union.anon* %395, i64 0, i32 0
  %416 = and i64 %412, 4294967295
  store i64 %416, i64* %415, align 8, !tbaa !2428
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %417, align 1, !tbaa !2432
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %418, align 1, !tbaa !2446
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %419, align 1, !tbaa !2447
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %420, align 1, !tbaa !2448
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %421, align 1, !tbaa !2449
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %422, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %407, %411
  %423 = phi %struct.Memory* [ %410, %407 ], [ %MEMORY.1, %411 ]
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 44
  %426 = load i32, i32* %EDX
  %427 = zext i32 %426 to i64
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %425 to i32*
  store i32 %426, i32* %430
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 44
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 4
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %432 to i32*
  %436 = load i32, i32* %435
  %437 = sub i32 %436, 2
  %438 = icmp ult i32 %436, 2
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %439, i8* %440, align 1, !tbaa !2432
  %441 = and i32 %437, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2446
  %447 = xor i32 %436, 2
  %448 = xor i32 %447, %437
  %449 = lshr i32 %448, 4
  %450 = trunc i32 %449 to i8
  %451 = and i8 %450, 1
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %451, i8* %452, align 1, !tbaa !2447
  %453 = icmp eq i32 %437, 0
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %454, i8* %455, align 1, !tbaa !2448
  %456 = lshr i32 %437, 31
  %457 = trunc i32 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %457, i8* %458, align 1, !tbaa !2449
  %459 = lshr i32 %436, 31
  %460 = xor i32 %456, %459
  %461 = add nuw nsw i32 %460, %459
  %462 = icmp eq i32 %461, 2
  %463 = zext i1 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %463, i8* %464, align 1, !tbaa !2450
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 167
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 6
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 6
  store i64 %470, i64* %PC
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %472 = load i8, i8* %471, align 1, !tbaa !2449
  %473 = icmp ne i8 %472, 0
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %475 = load i8, i8* %474, align 1, !tbaa !2450
  %476 = icmp ne i8 %475, 0
  %477 = xor i1 %473, %476
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %480 = select i1 %477, i64 %466, i64 %468
  store i64 %480, i64* %479, align 8, !tbaa !2428
  %481 = load i8, i8* %BRANCH_TAKEN
  %482 = icmp eq i8 %481, 1
  br i1 %482, label %block_40212a, label %block_402089

block_402475:                                     ; preds = %block_402469
  %483 = load i64, i64* %RBP
  %484 = sub i64 %483, 16
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 4
  store i64 %486, i64* %PC
  %487 = inttoptr i64 %484 to i64*
  %488 = load i64, i64* %487
  store i64 %488, i64* %RAX, align 8, !tbaa !2428
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 48
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 4
  store i64 %492, i64* %PC
  %493 = inttoptr i64 %490 to i32*
  %494 = load i32, i32* %493
  %495 = sext i32 %494 to i64
  store i64 %495, i64* %RCX, align 8, !tbaa !2428
  %496 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %497 = load i64, i64* %RAX
  %498 = load i64, i64* %RCX
  %499 = mul i64 %498, 4
  %500 = add i64 %499, %497
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 5
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to float*
  %504 = load float, float* %503
  %505 = bitcast i8* %496 to float*
  store float %504, float* %505, align 1, !tbaa !2452
  %506 = getelementptr inbounds i8, i8* %496, i64 4
  %507 = bitcast i8* %506 to float*
  store float 0.000000e+00, float* %507, align 1, !tbaa !2452
  %508 = getelementptr inbounds i8, i8* %496, i64 8
  %509 = bitcast i8* %508 to float*
  store float 0.000000e+00, float* %509, align 1, !tbaa !2452
  %510 = getelementptr inbounds i8, i8* %496, i64 12
  %511 = bitcast i8* %510 to float*
  store float 0.000000e+00, float* %511, align 1, !tbaa !2452
  %512 = load i64, i64* %RBP
  %513 = sub i64 %512, 32
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 4
  store i64 %515, i64* %PC
  %516 = inttoptr i64 %513 to i64*
  %517 = load i64, i64* %516
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = load i64, i64* %RBP
  %519 = sub i64 %518, 44
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 3
  store i64 %521, i64* %PC
  %522 = inttoptr i64 %519 to i32*
  %523 = load i32, i32* %522
  %524 = zext i32 %523 to i64
  store i64 %524, i64* %RDX, align 8, !tbaa !2428
  %525 = load i64, i64* %RDX
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 3
  store i64 %527, i64* %PC
  %528 = trunc i64 %525 to i32
  %529 = sub i32 %528, 15
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RDX, align 8, !tbaa !2428
  %531 = icmp ult i32 %528, 15
  %532 = zext i1 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %532, i8* %533, align 1, !tbaa !2432
  %534 = and i32 %529, 255
  %535 = call i32 @llvm.ctpop.i32(i32 %534) #16
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %538, i8* %539, align 1, !tbaa !2446
  %540 = xor i64 15, %525
  %541 = trunc i64 %540 to i32
  %542 = xor i32 %541, %529
  %543 = lshr i32 %542, 4
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %545, i8* %546, align 1, !tbaa !2447
  %547 = icmp eq i32 %529, 0
  %548 = zext i1 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %548, i8* %549, align 1, !tbaa !2448
  %550 = lshr i32 %529, 31
  %551 = trunc i32 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %551, i8* %552, align 1, !tbaa !2449
  %553 = lshr i32 %528, 31
  %554 = xor i32 %550, %553
  %555 = add nuw nsw i32 %554, %553
  %556 = icmp eq i32 %555, 2
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %557, i8* %558, align 1, !tbaa !2450
  %559 = load i32, i32* %EDX
  %560 = zext i32 %559 to i64
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 3
  store i64 %562, i64* %PC
  %563 = shl i64 %560, 32
  %564 = ashr exact i64 %563, 32
  store i64 %564, i64* %RCX, align 8, !tbaa !2428
  %565 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %566 = load i64, i64* %RAX
  %567 = load i64, i64* %RCX
  %568 = mul i64 %567, 4
  %569 = add i64 %568, %566
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 5
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to float*
  %573 = load float, float* %572
  %574 = bitcast i8* %565 to float*
  store float %573, float* %574, align 1, !tbaa !2452
  %575 = getelementptr inbounds i8, i8* %565, i64 4
  %576 = bitcast i8* %575 to float*
  store float 0.000000e+00, float* %576, align 1, !tbaa !2452
  %577 = getelementptr inbounds i8, i8* %565, i64 8
  %578 = bitcast i8* %577 to float*
  store float 0.000000e+00, float* %578, align 1, !tbaa !2452
  %579 = getelementptr inbounds i8, i8* %565, i64 12
  %580 = bitcast i8* %579 to float*
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  %581 = load i64, i64* %RBP
  %582 = sub i64 %581, 40
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 4
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %582 to i64*
  %586 = load i64, i64* %585
  store i64 %586, i64* %RAX, align 8, !tbaa !2428
  %587 = load i64, i64* %RBP
  %588 = sub i64 %587, 24
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 3
  store i64 %590, i64* %PC
  %591 = inttoptr i64 %588 to i32*
  %592 = load i32, i32* %591
  %593 = zext i32 %592 to i64
  store i64 %593, i64* %RDX, align 8, !tbaa !2428
  %594 = load i64, i64* %RBP
  %595 = sub i64 %594, 44
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 3
  store i64 %597, i64* %PC
  %598 = inttoptr i64 %595 to i32*
  %599 = load i32, i32* %598
  %600 = zext i32 %599 to i64
  store i64 %600, i64* %RSI, align 8, !tbaa !2428
  %601 = load i64, i64* %RSI
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = trunc i64 %601 to i32
  %605 = sub i32 %604, 15
  %606 = zext i32 %605 to i64
  store i64 %606, i64* %RSI, align 8, !tbaa !2428
  %607 = icmp ult i32 %604, 15
  %608 = zext i1 %607 to i8
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %608, i8* %609, align 1, !tbaa !2432
  %610 = and i32 %605, 255
  %611 = call i32 @llvm.ctpop.i32(i32 %610) #16
  %612 = trunc i32 %611 to i8
  %613 = and i8 %612, 1
  %614 = xor i8 %613, 1
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %614, i8* %615, align 1, !tbaa !2446
  %616 = xor i64 15, %601
  %617 = trunc i64 %616 to i32
  %618 = xor i32 %617, %605
  %619 = lshr i32 %618, 4
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %621, i8* %622, align 1, !tbaa !2447
  %623 = icmp eq i32 %605, 0
  %624 = zext i1 %623 to i8
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %624, i8* %625, align 1, !tbaa !2448
  %626 = lshr i32 %605, 31
  %627 = trunc i32 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %627, i8* %628, align 1, !tbaa !2449
  %629 = lshr i32 %604, 31
  %630 = xor i32 %626, %629
  %631 = add nuw nsw i32 %630, %629
  %632 = icmp eq i32 %631, 2
  %633 = zext i1 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %633, i8* %634, align 1, !tbaa !2450
  %635 = load i64, i64* %RDX
  %636 = load i32, i32* %ESI
  %637 = zext i32 %636 to i64
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC
  %640 = shl i64 %635, 32
  %641 = ashr exact i64 %640, 32
  %642 = shl i64 %637, 32
  %643 = ashr exact i64 %642, 32
  %644 = mul nsw i64 %643, %641
  %645 = trunc i64 %644 to i32
  %646 = and i64 %644, 4294967295
  store i64 %646, i64* %RDX, align 8, !tbaa !2428
  %647 = shl i64 %644, 32
  %648 = ashr exact i64 %647, 32
  %649 = icmp ne i64 %648, %644
  %650 = zext i1 %649 to i8
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %650, i8* %651, align 1, !tbaa !2432
  %652 = and i32 %645, 255
  %653 = call i32 @llvm.ctpop.i32(i32 %652) #16
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %656, i8* %657, align 1, !tbaa !2446
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %658, align 1, !tbaa !2447
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %659, align 1, !tbaa !2448
  %660 = lshr i32 %645, 31
  %661 = trunc i32 %660 to i8
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %661, i8* %662, align 1, !tbaa !2449
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %650, i8* %663, align 1, !tbaa !2450
  %664 = load i64, i64* %RDX
  %665 = load i64, i64* %RBP
  %666 = sub i64 %665, 48
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 3
  store i64 %668, i64* %PC
  %669 = trunc i64 %664 to i32
  %670 = inttoptr i64 %666 to i32*
  %671 = load i32, i32* %670
  %672 = add i32 %671, %669
  %673 = zext i32 %672 to i64
  store i64 %673, i64* %RDX, align 8, !tbaa !2428
  %674 = icmp ult i32 %672, %669
  %675 = icmp ult i32 %672, %671
  %676 = or i1 %674, %675
  %677 = zext i1 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %677, i8* %678, align 1, !tbaa !2432
  %679 = and i32 %672, 255
  %680 = call i32 @llvm.ctpop.i32(i32 %679) #16
  %681 = trunc i32 %680 to i8
  %682 = and i8 %681, 1
  %683 = xor i8 %682, 1
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %683, i8* %684, align 1, !tbaa !2446
  %685 = xor i32 %671, %669
  %686 = xor i32 %685, %672
  %687 = lshr i32 %686, 4
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %689, i8* %690, align 1, !tbaa !2447
  %691 = icmp eq i32 %672, 0
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %692, i8* %693, align 1, !tbaa !2448
  %694 = lshr i32 %672, 31
  %695 = trunc i32 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %695, i8* %696, align 1, !tbaa !2449
  %697 = lshr i32 %669, 31
  %698 = lshr i32 %671, 31
  %699 = xor i32 %694, %697
  %700 = xor i32 %694, %698
  %701 = add nuw nsw i32 %699, %700
  %702 = icmp eq i32 %701, 2
  %703 = zext i1 %702 to i8
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %703, i8* %704, align 1, !tbaa !2450
  %705 = load i32, i32* %EDX
  %706 = zext i32 %705 to i64
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 3
  store i64 %708, i64* %PC
  %709 = shl i64 %706, 32
  %710 = ashr exact i64 %709, 32
  store i64 %710, i64* %RCX, align 8, !tbaa !2428
  %711 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %712 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %713 = load i64, i64* %RAX
  %714 = load i64, i64* %RCX
  %715 = mul i64 %714, 4
  %716 = add i64 %715, %713
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  store i64 %718, i64* %PC
  %719 = bitcast i8* %712 to <2 x float>*
  %720 = load <2 x float>, <2 x float>* %719, align 1
  %721 = getelementptr inbounds i8, i8* %712, i64 8
  %722 = bitcast i8* %721 to <2 x i32>*
  %723 = load <2 x i32>, <2 x i32>* %722, align 1
  %724 = inttoptr i64 %716 to float*
  %725 = load float, float* %724
  %726 = extractelement <2 x float> %720, i32 0
  %727 = fmul float %726, %725
  %728 = bitcast i8* %711 to float*
  store float %727, float* %728, align 1, !tbaa !2452
  %729 = bitcast <2 x float> %720 to <2 x i32>
  %730 = extractelement <2 x i32> %729, i32 1
  %731 = getelementptr inbounds i8, i8* %711, i64 4
  %732 = bitcast i8* %731 to i32*
  store i32 %730, i32* %732, align 1, !tbaa !2452
  %733 = extractelement <2 x i32> %723, i32 0
  %734 = getelementptr inbounds i8, i8* %711, i64 8
  %735 = bitcast i8* %734 to i32*
  store i32 %733, i32* %735, align 1, !tbaa !2452
  %736 = extractelement <2 x i32> %723, i32 1
  %737 = getelementptr inbounds i8, i8* %711, i64 12
  %738 = bitcast i8* %737 to i32*
  store i32 %736, i32* %738, align 1, !tbaa !2452
  %739 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %740 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %741 = bitcast %union.vec128_t* %XMM1 to i8*
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = bitcast i8* %740 to <2 x float>*
  %745 = load <2 x float>, <2 x float>* %744, align 1
  %746 = getelementptr inbounds i8, i8* %740, i64 8
  %747 = bitcast i8* %746 to <2 x i32>*
  %748 = load <2 x i32>, <2 x i32>* %747, align 1
  %749 = bitcast i8* %741 to <2 x float>*
  %750 = load <2 x float>, <2 x float>* %749, align 1
  %751 = extractelement <2 x float> %745, i32 0
  %752 = extractelement <2 x float> %750, i32 0
  %753 = fadd float %751, %752
  %754 = bitcast i8* %739 to float*
  store float %753, float* %754, align 1, !tbaa !2452
  %755 = bitcast <2 x float> %745 to <2 x i32>
  %756 = extractelement <2 x i32> %755, i32 1
  %757 = getelementptr inbounds i8, i8* %739, i64 4
  %758 = bitcast i8* %757 to i32*
  store i32 %756, i32* %758, align 1, !tbaa !2452
  %759 = extractelement <2 x i32> %748, i32 0
  %760 = getelementptr inbounds i8, i8* %739, i64 8
  %761 = bitcast i8* %760 to i32*
  store i32 %759, i32* %761, align 1, !tbaa !2452
  %762 = extractelement <2 x i32> %748, i32 1
  %763 = getelementptr inbounds i8, i8* %739, i64 12
  %764 = bitcast i8* %763 to i32*
  store i32 %762, i32* %764, align 1, !tbaa !2452
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 32
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i64*
  %770 = load i64, i64* %769
  store i64 %770, i64* %RAX, align 8, !tbaa !2428
  %771 = load i64, i64* %RBP
  %772 = sub i64 %771, 44
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 3
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %772 to i32*
  %776 = load i32, i32* %775
  %777 = zext i32 %776 to i64
  store i64 %777, i64* %RDX, align 8, !tbaa !2428
  %778 = load i64, i64* %RDX
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 3
  store i64 %780, i64* %PC
  %781 = trunc i64 %778 to i32
  %782 = sub i32 %781, 14
  %783 = zext i32 %782 to i64
  store i64 %783, i64* %RDX, align 8, !tbaa !2428
  %784 = icmp ult i32 %781, 14
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %785, i8* %786, align 1, !tbaa !2432
  %787 = and i32 %782, 255
  %788 = call i32 @llvm.ctpop.i32(i32 %787) #16
  %789 = trunc i32 %788 to i8
  %790 = and i8 %789, 1
  %791 = xor i8 %790, 1
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %791, i8* %792, align 1, !tbaa !2446
  %793 = xor i64 14, %778
  %794 = trunc i64 %793 to i32
  %795 = xor i32 %794, %782
  %796 = lshr i32 %795, 4
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %798, i8* %799, align 1, !tbaa !2447
  %800 = icmp eq i32 %782, 0
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %801, i8* %802, align 1, !tbaa !2448
  %803 = lshr i32 %782, 31
  %804 = trunc i32 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %804, i8* %805, align 1, !tbaa !2449
  %806 = lshr i32 %781, 31
  %807 = xor i32 %803, %806
  %808 = add nuw nsw i32 %807, %806
  %809 = icmp eq i32 %808, 2
  %810 = zext i1 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %810, i8* %811, align 1, !tbaa !2450
  %812 = load i32, i32* %EDX
  %813 = zext i32 %812 to i64
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 3
  store i64 %815, i64* %PC
  %816 = shl i64 %813, 32
  %817 = ashr exact i64 %816, 32
  store i64 %817, i64* %RCX, align 8, !tbaa !2428
  %818 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %819 = load i64, i64* %RAX
  %820 = load i64, i64* %RCX
  %821 = mul i64 %820, 4
  %822 = add i64 %821, %819
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 5
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %822 to float*
  %826 = load float, float* %825
  %827 = bitcast i8* %818 to float*
  store float %826, float* %827, align 1, !tbaa !2452
  %828 = getelementptr inbounds i8, i8* %818, i64 4
  %829 = bitcast i8* %828 to float*
  store float 0.000000e+00, float* %829, align 1, !tbaa !2452
  %830 = getelementptr inbounds i8, i8* %818, i64 8
  %831 = bitcast i8* %830 to float*
  store float 0.000000e+00, float* %831, align 1, !tbaa !2452
  %832 = getelementptr inbounds i8, i8* %818, i64 12
  %833 = bitcast i8* %832 to float*
  store float 0.000000e+00, float* %833, align 1, !tbaa !2452
  %834 = load i64, i64* %RBP
  %835 = sub i64 %834, 40
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 4
  store i64 %837, i64* %PC
  %838 = inttoptr i64 %835 to i64*
  %839 = load i64, i64* %838
  store i64 %839, i64* %RAX, align 8, !tbaa !2428
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 24
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 3
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to i32*
  %845 = load i32, i32* %844
  %846 = zext i32 %845 to i64
  store i64 %846, i64* %RDX, align 8, !tbaa !2428
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 44
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 3
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i32*
  %852 = load i32, i32* %851
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RSI, align 8, !tbaa !2428
  %854 = load i64, i64* %RSI
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 3
  store i64 %856, i64* %PC
  %857 = trunc i64 %854 to i32
  %858 = sub i32 %857, 14
  %859 = zext i32 %858 to i64
  store i64 %859, i64* %RSI, align 8, !tbaa !2428
  %860 = icmp ult i32 %857, 14
  %861 = zext i1 %860 to i8
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %861, i8* %862, align 1, !tbaa !2432
  %863 = and i32 %858, 255
  %864 = call i32 @llvm.ctpop.i32(i32 %863) #16
  %865 = trunc i32 %864 to i8
  %866 = and i8 %865, 1
  %867 = xor i8 %866, 1
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %867, i8* %868, align 1, !tbaa !2446
  %869 = xor i64 14, %854
  %870 = trunc i64 %869 to i32
  %871 = xor i32 %870, %858
  %872 = lshr i32 %871, 4
  %873 = trunc i32 %872 to i8
  %874 = and i8 %873, 1
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %874, i8* %875, align 1, !tbaa !2447
  %876 = icmp eq i32 %858, 0
  %877 = zext i1 %876 to i8
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %877, i8* %878, align 1, !tbaa !2448
  %879 = lshr i32 %858, 31
  %880 = trunc i32 %879 to i8
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %880, i8* %881, align 1, !tbaa !2449
  %882 = lshr i32 %857, 31
  %883 = xor i32 %879, %882
  %884 = add nuw nsw i32 %883, %882
  %885 = icmp eq i32 %884, 2
  %886 = zext i1 %885 to i8
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %886, i8* %887, align 1, !tbaa !2450
  %888 = load i64, i64* %RDX
  %889 = load i32, i32* %ESI
  %890 = zext i32 %889 to i64
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 3
  store i64 %892, i64* %PC
  %893 = shl i64 %888, 32
  %894 = ashr exact i64 %893, 32
  %895 = shl i64 %890, 32
  %896 = ashr exact i64 %895, 32
  %897 = mul nsw i64 %896, %894
  %898 = trunc i64 %897 to i32
  %899 = and i64 %897, 4294967295
  store i64 %899, i64* %RDX, align 8, !tbaa !2428
  %900 = shl i64 %897, 32
  %901 = ashr exact i64 %900, 32
  %902 = icmp ne i64 %901, %897
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %903, i8* %904, align 1, !tbaa !2432
  %905 = and i32 %898, 255
  %906 = call i32 @llvm.ctpop.i32(i32 %905) #16
  %907 = trunc i32 %906 to i8
  %908 = and i8 %907, 1
  %909 = xor i8 %908, 1
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %909, i8* %910, align 1, !tbaa !2446
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %911, align 1, !tbaa !2447
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %912, align 1, !tbaa !2448
  %913 = lshr i32 %898, 31
  %914 = trunc i32 %913 to i8
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %914, i8* %915, align 1, !tbaa !2449
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %903, i8* %916, align 1, !tbaa !2450
  %917 = load i64, i64* %RDX
  %918 = load i64, i64* %RBP
  %919 = sub i64 %918, 48
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 3
  store i64 %921, i64* %PC
  %922 = trunc i64 %917 to i32
  %923 = inttoptr i64 %919 to i32*
  %924 = load i32, i32* %923
  %925 = add i32 %924, %922
  %926 = zext i32 %925 to i64
  store i64 %926, i64* %RDX, align 8, !tbaa !2428
  %927 = icmp ult i32 %925, %922
  %928 = icmp ult i32 %925, %924
  %929 = or i1 %927, %928
  %930 = zext i1 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %930, i8* %931, align 1, !tbaa !2432
  %932 = and i32 %925, 255
  %933 = call i32 @llvm.ctpop.i32(i32 %932) #16
  %934 = trunc i32 %933 to i8
  %935 = and i8 %934, 1
  %936 = xor i8 %935, 1
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %936, i8* %937, align 1, !tbaa !2446
  %938 = xor i32 %924, %922
  %939 = xor i32 %938, %925
  %940 = lshr i32 %939, 4
  %941 = trunc i32 %940 to i8
  %942 = and i8 %941, 1
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %942, i8* %943, align 1, !tbaa !2447
  %944 = icmp eq i32 %925, 0
  %945 = zext i1 %944 to i8
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %945, i8* %946, align 1, !tbaa !2448
  %947 = lshr i32 %925, 31
  %948 = trunc i32 %947 to i8
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %948, i8* %949, align 1, !tbaa !2449
  %950 = lshr i32 %922, 31
  %951 = lshr i32 %924, 31
  %952 = xor i32 %947, %950
  %953 = xor i32 %947, %951
  %954 = add nuw nsw i32 %952, %953
  %955 = icmp eq i32 %954, 2
  %956 = zext i1 %955 to i8
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %956, i8* %957, align 1, !tbaa !2450
  %958 = load i32, i32* %EDX
  %959 = zext i32 %958 to i64
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 3
  store i64 %961, i64* %PC
  %962 = shl i64 %959, 32
  %963 = ashr exact i64 %962, 32
  store i64 %963, i64* %RCX, align 8, !tbaa !2428
  %964 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %965 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %966 = load i64, i64* %RAX
  %967 = load i64, i64* %RCX
  %968 = mul i64 %967, 4
  %969 = add i64 %968, %966
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 5
  store i64 %971, i64* %PC
  %972 = bitcast i8* %965 to <2 x float>*
  %973 = load <2 x float>, <2 x float>* %972, align 1
  %974 = getelementptr inbounds i8, i8* %965, i64 8
  %975 = bitcast i8* %974 to <2 x i32>*
  %976 = load <2 x i32>, <2 x i32>* %975, align 1
  %977 = inttoptr i64 %969 to float*
  %978 = load float, float* %977
  %979 = extractelement <2 x float> %973, i32 0
  %980 = fmul float %979, %978
  %981 = bitcast i8* %964 to float*
  store float %980, float* %981, align 1, !tbaa !2452
  %982 = bitcast <2 x float> %973 to <2 x i32>
  %983 = extractelement <2 x i32> %982, i32 1
  %984 = getelementptr inbounds i8, i8* %964, i64 4
  %985 = bitcast i8* %984 to i32*
  store i32 %983, i32* %985, align 1, !tbaa !2452
  %986 = extractelement <2 x i32> %976, i32 0
  %987 = getelementptr inbounds i8, i8* %964, i64 8
  %988 = bitcast i8* %987 to i32*
  store i32 %986, i32* %988, align 1, !tbaa !2452
  %989 = extractelement <2 x i32> %976, i32 1
  %990 = getelementptr inbounds i8, i8* %964, i64 12
  %991 = bitcast i8* %990 to i32*
  store i32 %989, i32* %991, align 1, !tbaa !2452
  %992 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %993 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %994 = bitcast %union.vec128_t* %XMM1 to i8*
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 4
  store i64 %996, i64* %PC
  %997 = bitcast i8* %993 to <2 x float>*
  %998 = load <2 x float>, <2 x float>* %997, align 1
  %999 = getelementptr inbounds i8, i8* %993, i64 8
  %1000 = bitcast i8* %999 to <2 x i32>*
  %1001 = load <2 x i32>, <2 x i32>* %1000, align 1
  %1002 = bitcast i8* %994 to <2 x float>*
  %1003 = load <2 x float>, <2 x float>* %1002, align 1
  %1004 = extractelement <2 x float> %998, i32 0
  %1005 = extractelement <2 x float> %1003, i32 0
  %1006 = fadd float %1004, %1005
  %1007 = bitcast i8* %992 to float*
  store float %1006, float* %1007, align 1, !tbaa !2452
  %1008 = bitcast <2 x float> %998 to <2 x i32>
  %1009 = extractelement <2 x i32> %1008, i32 1
  %1010 = getelementptr inbounds i8, i8* %992, i64 4
  %1011 = bitcast i8* %1010 to i32*
  store i32 %1009, i32* %1011, align 1, !tbaa !2452
  %1012 = extractelement <2 x i32> %1001, i32 0
  %1013 = getelementptr inbounds i8, i8* %992, i64 8
  %1014 = bitcast i8* %1013 to i32*
  store i32 %1012, i32* %1014, align 1, !tbaa !2452
  %1015 = extractelement <2 x i32> %1001, i32 1
  %1016 = getelementptr inbounds i8, i8* %992, i64 12
  %1017 = bitcast i8* %1016 to i32*
  store i32 %1015, i32* %1017, align 1, !tbaa !2452
  %1018 = load i64, i64* %RBP
  %1019 = sub i64 %1018, 32
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 4
  store i64 %1021, i64* %PC
  %1022 = inttoptr i64 %1019 to i64*
  %1023 = load i64, i64* %1022
  store i64 %1023, i64* %RAX, align 8, !tbaa !2428
  %1024 = load i64, i64* %RBP
  %1025 = sub i64 %1024, 44
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 3
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1025 to i32*
  %1029 = load i32, i32* %1028
  %1030 = zext i32 %1029 to i64
  store i64 %1030, i64* %RDX, align 8, !tbaa !2428
  %1031 = load i64, i64* %RDX
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 3
  store i64 %1033, i64* %PC
  %1034 = trunc i64 %1031 to i32
  %1035 = sub i32 %1034, 13
  %1036 = zext i32 %1035 to i64
  store i64 %1036, i64* %RDX, align 8, !tbaa !2428
  %1037 = icmp ult i32 %1034, 13
  %1038 = zext i1 %1037 to i8
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1038, i8* %1039, align 1, !tbaa !2432
  %1040 = and i32 %1035, 255
  %1041 = call i32 @llvm.ctpop.i32(i32 %1040) #16
  %1042 = trunc i32 %1041 to i8
  %1043 = and i8 %1042, 1
  %1044 = xor i8 %1043, 1
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1044, i8* %1045, align 1, !tbaa !2446
  %1046 = xor i64 13, %1031
  %1047 = trunc i64 %1046 to i32
  %1048 = xor i32 %1047, %1035
  %1049 = lshr i32 %1048, 4
  %1050 = trunc i32 %1049 to i8
  %1051 = and i8 %1050, 1
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1051, i8* %1052, align 1, !tbaa !2447
  %1053 = icmp eq i32 %1035, 0
  %1054 = zext i1 %1053 to i8
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1054, i8* %1055, align 1, !tbaa !2448
  %1056 = lshr i32 %1035, 31
  %1057 = trunc i32 %1056 to i8
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1057, i8* %1058, align 1, !tbaa !2449
  %1059 = lshr i32 %1034, 31
  %1060 = xor i32 %1056, %1059
  %1061 = add nuw nsw i32 %1060, %1059
  %1062 = icmp eq i32 %1061, 2
  %1063 = zext i1 %1062 to i8
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1063, i8* %1064, align 1, !tbaa !2450
  %1065 = load i32, i32* %EDX
  %1066 = zext i32 %1065 to i64
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 3
  store i64 %1068, i64* %PC
  %1069 = shl i64 %1066, 32
  %1070 = ashr exact i64 %1069, 32
  store i64 %1070, i64* %RCX, align 8, !tbaa !2428
  %1071 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1072 = load i64, i64* %RAX
  %1073 = load i64, i64* %RCX
  %1074 = mul i64 %1073, 4
  %1075 = add i64 %1074, %1072
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 5
  store i64 %1077, i64* %PC
  %1078 = inttoptr i64 %1075 to float*
  %1079 = load float, float* %1078
  %1080 = bitcast i8* %1071 to float*
  store float %1079, float* %1080, align 1, !tbaa !2452
  %1081 = getelementptr inbounds i8, i8* %1071, i64 4
  %1082 = bitcast i8* %1081 to float*
  store float 0.000000e+00, float* %1082, align 1, !tbaa !2452
  %1083 = getelementptr inbounds i8, i8* %1071, i64 8
  %1084 = bitcast i8* %1083 to float*
  store float 0.000000e+00, float* %1084, align 1, !tbaa !2452
  %1085 = getelementptr inbounds i8, i8* %1071, i64 12
  %1086 = bitcast i8* %1085 to float*
  store float 0.000000e+00, float* %1086, align 1, !tbaa !2452
  %1087 = load i64, i64* %RBP
  %1088 = sub i64 %1087, 40
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 4
  store i64 %1090, i64* %PC
  %1091 = inttoptr i64 %1088 to i64*
  %1092 = load i64, i64* %1091
  store i64 %1092, i64* %RAX, align 8, !tbaa !2428
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 24
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i32*
  %1098 = load i32, i32* %1097
  %1099 = zext i32 %1098 to i64
  store i64 %1099, i64* %RDX, align 8, !tbaa !2428
  %1100 = load i64, i64* %RBP
  %1101 = sub i64 %1100, 44
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 3
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1101 to i32*
  %1105 = load i32, i32* %1104
  %1106 = zext i32 %1105 to i64
  store i64 %1106, i64* %RSI, align 8, !tbaa !2428
  %1107 = load i64, i64* %RSI
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 3
  store i64 %1109, i64* %PC
  %1110 = trunc i64 %1107 to i32
  %1111 = sub i32 %1110, 13
  %1112 = zext i32 %1111 to i64
  store i64 %1112, i64* %RSI, align 8, !tbaa !2428
  %1113 = icmp ult i32 %1110, 13
  %1114 = zext i1 %1113 to i8
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1114, i8* %1115, align 1, !tbaa !2432
  %1116 = and i32 %1111, 255
  %1117 = call i32 @llvm.ctpop.i32(i32 %1116) #16
  %1118 = trunc i32 %1117 to i8
  %1119 = and i8 %1118, 1
  %1120 = xor i8 %1119, 1
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1120, i8* %1121, align 1, !tbaa !2446
  %1122 = xor i64 13, %1107
  %1123 = trunc i64 %1122 to i32
  %1124 = xor i32 %1123, %1111
  %1125 = lshr i32 %1124, 4
  %1126 = trunc i32 %1125 to i8
  %1127 = and i8 %1126, 1
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1127, i8* %1128, align 1, !tbaa !2447
  %1129 = icmp eq i32 %1111, 0
  %1130 = zext i1 %1129 to i8
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1130, i8* %1131, align 1, !tbaa !2448
  %1132 = lshr i32 %1111, 31
  %1133 = trunc i32 %1132 to i8
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1133, i8* %1134, align 1, !tbaa !2449
  %1135 = lshr i32 %1110, 31
  %1136 = xor i32 %1132, %1135
  %1137 = add nuw nsw i32 %1136, %1135
  %1138 = icmp eq i32 %1137, 2
  %1139 = zext i1 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1139, i8* %1140, align 1, !tbaa !2450
  %1141 = load i64, i64* %RDX
  %1142 = load i32, i32* %ESI
  %1143 = zext i32 %1142 to i64
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 3
  store i64 %1145, i64* %PC
  %1146 = shl i64 %1141, 32
  %1147 = ashr exact i64 %1146, 32
  %1148 = shl i64 %1143, 32
  %1149 = ashr exact i64 %1148, 32
  %1150 = mul nsw i64 %1149, %1147
  %1151 = trunc i64 %1150 to i32
  %1152 = and i64 %1150, 4294967295
  store i64 %1152, i64* %RDX, align 8, !tbaa !2428
  %1153 = shl i64 %1150, 32
  %1154 = ashr exact i64 %1153, 32
  %1155 = icmp ne i64 %1154, %1150
  %1156 = zext i1 %1155 to i8
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1156, i8* %1157, align 1, !tbaa !2432
  %1158 = and i32 %1151, 255
  %1159 = call i32 @llvm.ctpop.i32(i32 %1158) #16
  %1160 = trunc i32 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = xor i8 %1161, 1
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1162, i8* %1163, align 1, !tbaa !2446
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1164, align 1, !tbaa !2447
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1165, align 1, !tbaa !2448
  %1166 = lshr i32 %1151, 31
  %1167 = trunc i32 %1166 to i8
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1167, i8* %1168, align 1, !tbaa !2449
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1156, i8* %1169, align 1, !tbaa !2450
  %1170 = load i64, i64* %RDX
  %1171 = load i64, i64* %RBP
  %1172 = sub i64 %1171, 48
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 3
  store i64 %1174, i64* %PC
  %1175 = trunc i64 %1170 to i32
  %1176 = inttoptr i64 %1172 to i32*
  %1177 = load i32, i32* %1176
  %1178 = add i32 %1177, %1175
  %1179 = zext i32 %1178 to i64
  store i64 %1179, i64* %RDX, align 8, !tbaa !2428
  %1180 = icmp ult i32 %1178, %1175
  %1181 = icmp ult i32 %1178, %1177
  %1182 = or i1 %1180, %1181
  %1183 = zext i1 %1182 to i8
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1183, i8* %1184, align 1, !tbaa !2432
  %1185 = and i32 %1178, 255
  %1186 = call i32 @llvm.ctpop.i32(i32 %1185) #16
  %1187 = trunc i32 %1186 to i8
  %1188 = and i8 %1187, 1
  %1189 = xor i8 %1188, 1
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1189, i8* %1190, align 1, !tbaa !2446
  %1191 = xor i32 %1177, %1175
  %1192 = xor i32 %1191, %1178
  %1193 = lshr i32 %1192, 4
  %1194 = trunc i32 %1193 to i8
  %1195 = and i8 %1194, 1
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1195, i8* %1196, align 1, !tbaa !2447
  %1197 = icmp eq i32 %1178, 0
  %1198 = zext i1 %1197 to i8
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1198, i8* %1199, align 1, !tbaa !2448
  %1200 = lshr i32 %1178, 31
  %1201 = trunc i32 %1200 to i8
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1201, i8* %1202, align 1, !tbaa !2449
  %1203 = lshr i32 %1175, 31
  %1204 = lshr i32 %1177, 31
  %1205 = xor i32 %1200, %1203
  %1206 = xor i32 %1200, %1204
  %1207 = add nuw nsw i32 %1205, %1206
  %1208 = icmp eq i32 %1207, 2
  %1209 = zext i1 %1208 to i8
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1209, i8* %1210, align 1, !tbaa !2450
  %1211 = load i32, i32* %EDX
  %1212 = zext i32 %1211 to i64
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 3
  store i64 %1214, i64* %PC
  %1215 = shl i64 %1212, 32
  %1216 = ashr exact i64 %1215, 32
  store i64 %1216, i64* %RCX, align 8, !tbaa !2428
  %1217 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1218 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1219 = load i64, i64* %RAX
  %1220 = load i64, i64* %RCX
  %1221 = mul i64 %1220, 4
  %1222 = add i64 %1221, %1219
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 5
  store i64 %1224, i64* %PC
  %1225 = bitcast i8* %1218 to <2 x float>*
  %1226 = load <2 x float>, <2 x float>* %1225, align 1
  %1227 = getelementptr inbounds i8, i8* %1218, i64 8
  %1228 = bitcast i8* %1227 to <2 x i32>*
  %1229 = load <2 x i32>, <2 x i32>* %1228, align 1
  %1230 = inttoptr i64 %1222 to float*
  %1231 = load float, float* %1230
  %1232 = extractelement <2 x float> %1226, i32 0
  %1233 = fmul float %1232, %1231
  %1234 = bitcast i8* %1217 to float*
  store float %1233, float* %1234, align 1, !tbaa !2452
  %1235 = bitcast <2 x float> %1226 to <2 x i32>
  %1236 = extractelement <2 x i32> %1235, i32 1
  %1237 = getelementptr inbounds i8, i8* %1217, i64 4
  %1238 = bitcast i8* %1237 to i32*
  store i32 %1236, i32* %1238, align 1, !tbaa !2452
  %1239 = extractelement <2 x i32> %1229, i32 0
  %1240 = getelementptr inbounds i8, i8* %1217, i64 8
  %1241 = bitcast i8* %1240 to i32*
  store i32 %1239, i32* %1241, align 1, !tbaa !2452
  %1242 = extractelement <2 x i32> %1229, i32 1
  %1243 = getelementptr inbounds i8, i8* %1217, i64 12
  %1244 = bitcast i8* %1243 to i32*
  store i32 %1242, i32* %1244, align 1, !tbaa !2452
  %1245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1246 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1247 = bitcast %union.vec128_t* %XMM1 to i8*
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 4
  store i64 %1249, i64* %PC
  %1250 = bitcast i8* %1246 to <2 x float>*
  %1251 = load <2 x float>, <2 x float>* %1250, align 1
  %1252 = getelementptr inbounds i8, i8* %1246, i64 8
  %1253 = bitcast i8* %1252 to <2 x i32>*
  %1254 = load <2 x i32>, <2 x i32>* %1253, align 1
  %1255 = bitcast i8* %1247 to <2 x float>*
  %1256 = load <2 x float>, <2 x float>* %1255, align 1
  %1257 = extractelement <2 x float> %1251, i32 0
  %1258 = extractelement <2 x float> %1256, i32 0
  %1259 = fadd float %1257, %1258
  %1260 = bitcast i8* %1245 to float*
  store float %1259, float* %1260, align 1, !tbaa !2452
  %1261 = bitcast <2 x float> %1251 to <2 x i32>
  %1262 = extractelement <2 x i32> %1261, i32 1
  %1263 = getelementptr inbounds i8, i8* %1245, i64 4
  %1264 = bitcast i8* %1263 to i32*
  store i32 %1262, i32* %1264, align 1, !tbaa !2452
  %1265 = extractelement <2 x i32> %1254, i32 0
  %1266 = getelementptr inbounds i8, i8* %1245, i64 8
  %1267 = bitcast i8* %1266 to i32*
  store i32 %1265, i32* %1267, align 1, !tbaa !2452
  %1268 = extractelement <2 x i32> %1254, i32 1
  %1269 = getelementptr inbounds i8, i8* %1245, i64 12
  %1270 = bitcast i8* %1269 to i32*
  store i32 %1268, i32* %1270, align 1, !tbaa !2452
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 32
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 4
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to i64*
  %1276 = load i64, i64* %1275
  store i64 %1276, i64* %RAX, align 8, !tbaa !2428
  %1277 = load i64, i64* %RBP
  %1278 = sub i64 %1277, 44
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 3
  store i64 %1280, i64* %PC
  %1281 = inttoptr i64 %1278 to i32*
  %1282 = load i32, i32* %1281
  %1283 = zext i32 %1282 to i64
  store i64 %1283, i64* %RDX, align 8, !tbaa !2428
  %1284 = load i64, i64* %RDX
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 3
  store i64 %1286, i64* %PC
  %1287 = trunc i64 %1284 to i32
  %1288 = sub i32 %1287, 12
  %1289 = zext i32 %1288 to i64
  store i64 %1289, i64* %RDX, align 8, !tbaa !2428
  %1290 = icmp ult i32 %1287, 12
  %1291 = zext i1 %1290 to i8
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1291, i8* %1292, align 1, !tbaa !2432
  %1293 = and i32 %1288, 255
  %1294 = call i32 @llvm.ctpop.i32(i32 %1293) #16
  %1295 = trunc i32 %1294 to i8
  %1296 = and i8 %1295, 1
  %1297 = xor i8 %1296, 1
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1297, i8* %1298, align 1, !tbaa !2446
  %1299 = xor i64 12, %1284
  %1300 = trunc i64 %1299 to i32
  %1301 = xor i32 %1300, %1288
  %1302 = lshr i32 %1301, 4
  %1303 = trunc i32 %1302 to i8
  %1304 = and i8 %1303, 1
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1304, i8* %1305, align 1, !tbaa !2447
  %1306 = icmp eq i32 %1288, 0
  %1307 = zext i1 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1307, i8* %1308, align 1, !tbaa !2448
  %1309 = lshr i32 %1288, 31
  %1310 = trunc i32 %1309 to i8
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1310, i8* %1311, align 1, !tbaa !2449
  %1312 = lshr i32 %1287, 31
  %1313 = xor i32 %1309, %1312
  %1314 = add nuw nsw i32 %1313, %1312
  %1315 = icmp eq i32 %1314, 2
  %1316 = zext i1 %1315 to i8
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1316, i8* %1317, align 1, !tbaa !2450
  %1318 = load i32, i32* %EDX
  %1319 = zext i32 %1318 to i64
  %1320 = load i64, i64* %PC
  %1321 = add i64 %1320, 3
  store i64 %1321, i64* %PC
  %1322 = shl i64 %1319, 32
  %1323 = ashr exact i64 %1322, 32
  store i64 %1323, i64* %RCX, align 8, !tbaa !2428
  %1324 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1325 = load i64, i64* %RAX
  %1326 = load i64, i64* %RCX
  %1327 = mul i64 %1326, 4
  %1328 = add i64 %1327, %1325
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 5
  store i64 %1330, i64* %PC
  %1331 = inttoptr i64 %1328 to float*
  %1332 = load float, float* %1331
  %1333 = bitcast i8* %1324 to float*
  store float %1332, float* %1333, align 1, !tbaa !2452
  %1334 = getelementptr inbounds i8, i8* %1324, i64 4
  %1335 = bitcast i8* %1334 to float*
  store float 0.000000e+00, float* %1335, align 1, !tbaa !2452
  %1336 = getelementptr inbounds i8, i8* %1324, i64 8
  %1337 = bitcast i8* %1336 to float*
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2452
  %1338 = getelementptr inbounds i8, i8* %1324, i64 12
  %1339 = bitcast i8* %1338 to float*
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2452
  %1340 = load i64, i64* %RBP
  %1341 = sub i64 %1340, 40
  %1342 = load i64, i64* %PC
  %1343 = add i64 %1342, 4
  store i64 %1343, i64* %PC
  %1344 = inttoptr i64 %1341 to i64*
  %1345 = load i64, i64* %1344
  store i64 %1345, i64* %RAX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RBP
  %1347 = sub i64 %1346, 24
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 3
  store i64 %1349, i64* %PC
  %1350 = inttoptr i64 %1347 to i32*
  %1351 = load i32, i32* %1350
  %1352 = zext i32 %1351 to i64
  store i64 %1352, i64* %RDX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RBP
  %1354 = sub i64 %1353, 44
  %1355 = load i64, i64* %PC
  %1356 = add i64 %1355, 3
  store i64 %1356, i64* %PC
  %1357 = inttoptr i64 %1354 to i32*
  %1358 = load i32, i32* %1357
  %1359 = zext i32 %1358 to i64
  store i64 %1359, i64* %RSI, align 8, !tbaa !2428
  %1360 = load i64, i64* %RSI
  %1361 = load i64, i64* %PC
  %1362 = add i64 %1361, 3
  store i64 %1362, i64* %PC
  %1363 = trunc i64 %1360 to i32
  %1364 = sub i32 %1363, 12
  %1365 = zext i32 %1364 to i64
  store i64 %1365, i64* %RSI, align 8, !tbaa !2428
  %1366 = icmp ult i32 %1363, 12
  %1367 = zext i1 %1366 to i8
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1367, i8* %1368, align 1, !tbaa !2432
  %1369 = and i32 %1364, 255
  %1370 = call i32 @llvm.ctpop.i32(i32 %1369) #16
  %1371 = trunc i32 %1370 to i8
  %1372 = and i8 %1371, 1
  %1373 = xor i8 %1372, 1
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1373, i8* %1374, align 1, !tbaa !2446
  %1375 = xor i64 12, %1360
  %1376 = trunc i64 %1375 to i32
  %1377 = xor i32 %1376, %1364
  %1378 = lshr i32 %1377, 4
  %1379 = trunc i32 %1378 to i8
  %1380 = and i8 %1379, 1
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1380, i8* %1381, align 1, !tbaa !2447
  %1382 = icmp eq i32 %1364, 0
  %1383 = zext i1 %1382 to i8
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1383, i8* %1384, align 1, !tbaa !2448
  %1385 = lshr i32 %1364, 31
  %1386 = trunc i32 %1385 to i8
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1386, i8* %1387, align 1, !tbaa !2449
  %1388 = lshr i32 %1363, 31
  %1389 = xor i32 %1385, %1388
  %1390 = add nuw nsw i32 %1389, %1388
  %1391 = icmp eq i32 %1390, 2
  %1392 = zext i1 %1391 to i8
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1392, i8* %1393, align 1, !tbaa !2450
  %1394 = load i64, i64* %RDX
  %1395 = load i32, i32* %ESI
  %1396 = zext i32 %1395 to i64
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 3
  store i64 %1398, i64* %PC
  %1399 = shl i64 %1394, 32
  %1400 = ashr exact i64 %1399, 32
  %1401 = shl i64 %1396, 32
  %1402 = ashr exact i64 %1401, 32
  %1403 = mul nsw i64 %1402, %1400
  %1404 = trunc i64 %1403 to i32
  %1405 = and i64 %1403, 4294967295
  store i64 %1405, i64* %RDX, align 8, !tbaa !2428
  %1406 = shl i64 %1403, 32
  %1407 = ashr exact i64 %1406, 32
  %1408 = icmp ne i64 %1407, %1403
  %1409 = zext i1 %1408 to i8
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1409, i8* %1410, align 1, !tbaa !2432
  %1411 = and i32 %1404, 255
  %1412 = call i32 @llvm.ctpop.i32(i32 %1411) #16
  %1413 = trunc i32 %1412 to i8
  %1414 = and i8 %1413, 1
  %1415 = xor i8 %1414, 1
  %1416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1415, i8* %1416, align 1, !tbaa !2446
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1417, align 1, !tbaa !2447
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1418, align 1, !tbaa !2448
  %1419 = lshr i32 %1404, 31
  %1420 = trunc i32 %1419 to i8
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1420, i8* %1421, align 1, !tbaa !2449
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1409, i8* %1422, align 1, !tbaa !2450
  %1423 = load i64, i64* %RDX
  %1424 = load i64, i64* %RBP
  %1425 = sub i64 %1424, 48
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 3
  store i64 %1427, i64* %PC
  %1428 = trunc i64 %1423 to i32
  %1429 = inttoptr i64 %1425 to i32*
  %1430 = load i32, i32* %1429
  %1431 = add i32 %1430, %1428
  %1432 = zext i32 %1431 to i64
  store i64 %1432, i64* %RDX, align 8, !tbaa !2428
  %1433 = icmp ult i32 %1431, %1428
  %1434 = icmp ult i32 %1431, %1430
  %1435 = or i1 %1433, %1434
  %1436 = zext i1 %1435 to i8
  %1437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1436, i8* %1437, align 1, !tbaa !2432
  %1438 = and i32 %1431, 255
  %1439 = call i32 @llvm.ctpop.i32(i32 %1438) #16
  %1440 = trunc i32 %1439 to i8
  %1441 = and i8 %1440, 1
  %1442 = xor i8 %1441, 1
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1442, i8* %1443, align 1, !tbaa !2446
  %1444 = xor i32 %1430, %1428
  %1445 = xor i32 %1444, %1431
  %1446 = lshr i32 %1445, 4
  %1447 = trunc i32 %1446 to i8
  %1448 = and i8 %1447, 1
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1448, i8* %1449, align 1, !tbaa !2447
  %1450 = icmp eq i32 %1431, 0
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1451, i8* %1452, align 1, !tbaa !2448
  %1453 = lshr i32 %1431, 31
  %1454 = trunc i32 %1453 to i8
  %1455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1454, i8* %1455, align 1, !tbaa !2449
  %1456 = lshr i32 %1428, 31
  %1457 = lshr i32 %1430, 31
  %1458 = xor i32 %1453, %1456
  %1459 = xor i32 %1453, %1457
  %1460 = add nuw nsw i32 %1458, %1459
  %1461 = icmp eq i32 %1460, 2
  %1462 = zext i1 %1461 to i8
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1462, i8* %1463, align 1, !tbaa !2450
  %1464 = load i32, i32* %EDX
  %1465 = zext i32 %1464 to i64
  %1466 = load i64, i64* %PC
  %1467 = add i64 %1466, 3
  store i64 %1467, i64* %PC
  %1468 = shl i64 %1465, 32
  %1469 = ashr exact i64 %1468, 32
  store i64 %1469, i64* %RCX, align 8, !tbaa !2428
  %1470 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1471 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1472 = load i64, i64* %RAX
  %1473 = load i64, i64* %RCX
  %1474 = mul i64 %1473, 4
  %1475 = add i64 %1474, %1472
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 5
  store i64 %1477, i64* %PC
  %1478 = bitcast i8* %1471 to <2 x float>*
  %1479 = load <2 x float>, <2 x float>* %1478, align 1
  %1480 = getelementptr inbounds i8, i8* %1471, i64 8
  %1481 = bitcast i8* %1480 to <2 x i32>*
  %1482 = load <2 x i32>, <2 x i32>* %1481, align 1
  %1483 = inttoptr i64 %1475 to float*
  %1484 = load float, float* %1483
  %1485 = extractelement <2 x float> %1479, i32 0
  %1486 = fmul float %1485, %1484
  %1487 = bitcast i8* %1470 to float*
  store float %1486, float* %1487, align 1, !tbaa !2452
  %1488 = bitcast <2 x float> %1479 to <2 x i32>
  %1489 = extractelement <2 x i32> %1488, i32 1
  %1490 = getelementptr inbounds i8, i8* %1470, i64 4
  %1491 = bitcast i8* %1490 to i32*
  store i32 %1489, i32* %1491, align 1, !tbaa !2452
  %1492 = extractelement <2 x i32> %1482, i32 0
  %1493 = getelementptr inbounds i8, i8* %1470, i64 8
  %1494 = bitcast i8* %1493 to i32*
  store i32 %1492, i32* %1494, align 1, !tbaa !2452
  %1495 = extractelement <2 x i32> %1482, i32 1
  %1496 = getelementptr inbounds i8, i8* %1470, i64 12
  %1497 = bitcast i8* %1496 to i32*
  store i32 %1495, i32* %1497, align 1, !tbaa !2452
  %1498 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1499 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1500 = bitcast %union.vec128_t* %XMM1 to i8*
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 4
  store i64 %1502, i64* %PC
  %1503 = bitcast i8* %1499 to <2 x float>*
  %1504 = load <2 x float>, <2 x float>* %1503, align 1
  %1505 = getelementptr inbounds i8, i8* %1499, i64 8
  %1506 = bitcast i8* %1505 to <2 x i32>*
  %1507 = load <2 x i32>, <2 x i32>* %1506, align 1
  %1508 = bitcast i8* %1500 to <2 x float>*
  %1509 = load <2 x float>, <2 x float>* %1508, align 1
  %1510 = extractelement <2 x float> %1504, i32 0
  %1511 = extractelement <2 x float> %1509, i32 0
  %1512 = fadd float %1510, %1511
  %1513 = bitcast i8* %1498 to float*
  store float %1512, float* %1513, align 1, !tbaa !2452
  %1514 = bitcast <2 x float> %1504 to <2 x i32>
  %1515 = extractelement <2 x i32> %1514, i32 1
  %1516 = getelementptr inbounds i8, i8* %1498, i64 4
  %1517 = bitcast i8* %1516 to i32*
  store i32 %1515, i32* %1517, align 1, !tbaa !2452
  %1518 = extractelement <2 x i32> %1507, i32 0
  %1519 = getelementptr inbounds i8, i8* %1498, i64 8
  %1520 = bitcast i8* %1519 to i32*
  store i32 %1518, i32* %1520, align 1, !tbaa !2452
  %1521 = extractelement <2 x i32> %1507, i32 1
  %1522 = getelementptr inbounds i8, i8* %1498, i64 12
  %1523 = bitcast i8* %1522 to i32*
  store i32 %1521, i32* %1523, align 1, !tbaa !2452
  %1524 = load i64, i64* %RBP
  %1525 = sub i64 %1524, 32
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 4
  store i64 %1527, i64* %PC
  %1528 = inttoptr i64 %1525 to i64*
  %1529 = load i64, i64* %1528
  store i64 %1529, i64* %RAX, align 8, !tbaa !2428
  %1530 = load i64, i64* %RBP
  %1531 = sub i64 %1530, 44
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 3
  store i64 %1533, i64* %PC
  %1534 = inttoptr i64 %1531 to i32*
  %1535 = load i32, i32* %1534
  %1536 = zext i32 %1535 to i64
  store i64 %1536, i64* %RDX, align 8, !tbaa !2428
  %1537 = load i64, i64* %RDX
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 3
  store i64 %1539, i64* %PC
  %1540 = trunc i64 %1537 to i32
  %1541 = sub i32 %1540, 11
  %1542 = zext i32 %1541 to i64
  store i64 %1542, i64* %RDX, align 8, !tbaa !2428
  %1543 = icmp ult i32 %1540, 11
  %1544 = zext i1 %1543 to i8
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1544, i8* %1545, align 1, !tbaa !2432
  %1546 = and i32 %1541, 255
  %1547 = call i32 @llvm.ctpop.i32(i32 %1546) #16
  %1548 = trunc i32 %1547 to i8
  %1549 = and i8 %1548, 1
  %1550 = xor i8 %1549, 1
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1550, i8* %1551, align 1, !tbaa !2446
  %1552 = xor i64 11, %1537
  %1553 = trunc i64 %1552 to i32
  %1554 = xor i32 %1553, %1541
  %1555 = lshr i32 %1554, 4
  %1556 = trunc i32 %1555 to i8
  %1557 = and i8 %1556, 1
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1557, i8* %1558, align 1, !tbaa !2447
  %1559 = icmp eq i32 %1541, 0
  %1560 = zext i1 %1559 to i8
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1560, i8* %1561, align 1, !tbaa !2448
  %1562 = lshr i32 %1541, 31
  %1563 = trunc i32 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1563, i8* %1564, align 1, !tbaa !2449
  %1565 = lshr i32 %1540, 31
  %1566 = xor i32 %1562, %1565
  %1567 = add nuw nsw i32 %1566, %1565
  %1568 = icmp eq i32 %1567, 2
  %1569 = zext i1 %1568 to i8
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1569, i8* %1570, align 1, !tbaa !2450
  %1571 = load i32, i32* %EDX
  %1572 = zext i32 %1571 to i64
  %1573 = load i64, i64* %PC
  %1574 = add i64 %1573, 3
  store i64 %1574, i64* %PC
  %1575 = shl i64 %1572, 32
  %1576 = ashr exact i64 %1575, 32
  store i64 %1576, i64* %RCX, align 8, !tbaa !2428
  %1577 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1578 = load i64, i64* %RAX
  %1579 = load i64, i64* %RCX
  %1580 = mul i64 %1579, 4
  %1581 = add i64 %1580, %1578
  %1582 = load i64, i64* %PC
  %1583 = add i64 %1582, 5
  store i64 %1583, i64* %PC
  %1584 = inttoptr i64 %1581 to float*
  %1585 = load float, float* %1584
  %1586 = bitcast i8* %1577 to float*
  store float %1585, float* %1586, align 1, !tbaa !2452
  %1587 = getelementptr inbounds i8, i8* %1577, i64 4
  %1588 = bitcast i8* %1587 to float*
  store float 0.000000e+00, float* %1588, align 1, !tbaa !2452
  %1589 = getelementptr inbounds i8, i8* %1577, i64 8
  %1590 = bitcast i8* %1589 to float*
  store float 0.000000e+00, float* %1590, align 1, !tbaa !2452
  %1591 = getelementptr inbounds i8, i8* %1577, i64 12
  %1592 = bitcast i8* %1591 to float*
  store float 0.000000e+00, float* %1592, align 1, !tbaa !2452
  %1593 = load i64, i64* %RBP
  %1594 = sub i64 %1593, 40
  %1595 = load i64, i64* %PC
  %1596 = add i64 %1595, 4
  store i64 %1596, i64* %PC
  %1597 = inttoptr i64 %1594 to i64*
  %1598 = load i64, i64* %1597
  store i64 %1598, i64* %RAX, align 8, !tbaa !2428
  %1599 = load i64, i64* %RBP
  %1600 = sub i64 %1599, 24
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 3
  store i64 %1602, i64* %PC
  %1603 = inttoptr i64 %1600 to i32*
  %1604 = load i32, i32* %1603
  %1605 = zext i32 %1604 to i64
  store i64 %1605, i64* %RDX, align 8, !tbaa !2428
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 44
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 3
  store i64 %1609, i64* %PC
  %1610 = inttoptr i64 %1607 to i32*
  %1611 = load i32, i32* %1610
  %1612 = zext i32 %1611 to i64
  store i64 %1612, i64* %RSI, align 8, !tbaa !2428
  %1613 = load i64, i64* %RSI
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 3
  store i64 %1615, i64* %PC
  %1616 = trunc i64 %1613 to i32
  %1617 = sub i32 %1616, 11
  %1618 = zext i32 %1617 to i64
  store i64 %1618, i64* %RSI, align 8, !tbaa !2428
  %1619 = icmp ult i32 %1616, 11
  %1620 = zext i1 %1619 to i8
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1620, i8* %1621, align 1, !tbaa !2432
  %1622 = and i32 %1617, 255
  %1623 = call i32 @llvm.ctpop.i32(i32 %1622) #16
  %1624 = trunc i32 %1623 to i8
  %1625 = and i8 %1624, 1
  %1626 = xor i8 %1625, 1
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1626, i8* %1627, align 1, !tbaa !2446
  %1628 = xor i64 11, %1613
  %1629 = trunc i64 %1628 to i32
  %1630 = xor i32 %1629, %1617
  %1631 = lshr i32 %1630, 4
  %1632 = trunc i32 %1631 to i8
  %1633 = and i8 %1632, 1
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1633, i8* %1634, align 1, !tbaa !2447
  %1635 = icmp eq i32 %1617, 0
  %1636 = zext i1 %1635 to i8
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1636, i8* %1637, align 1, !tbaa !2448
  %1638 = lshr i32 %1617, 31
  %1639 = trunc i32 %1638 to i8
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1639, i8* %1640, align 1, !tbaa !2449
  %1641 = lshr i32 %1616, 31
  %1642 = xor i32 %1638, %1641
  %1643 = add nuw nsw i32 %1642, %1641
  %1644 = icmp eq i32 %1643, 2
  %1645 = zext i1 %1644 to i8
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1645, i8* %1646, align 1, !tbaa !2450
  %1647 = load i64, i64* %RDX
  %1648 = load i32, i32* %ESI
  %1649 = zext i32 %1648 to i64
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 3
  store i64 %1651, i64* %PC
  %1652 = shl i64 %1647, 32
  %1653 = ashr exact i64 %1652, 32
  %1654 = shl i64 %1649, 32
  %1655 = ashr exact i64 %1654, 32
  %1656 = mul nsw i64 %1655, %1653
  %1657 = trunc i64 %1656 to i32
  %1658 = and i64 %1656, 4294967295
  store i64 %1658, i64* %RDX, align 8, !tbaa !2428
  %1659 = shl i64 %1656, 32
  %1660 = ashr exact i64 %1659, 32
  %1661 = icmp ne i64 %1660, %1656
  %1662 = zext i1 %1661 to i8
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1662, i8* %1663, align 1, !tbaa !2432
  %1664 = and i32 %1657, 255
  %1665 = call i32 @llvm.ctpop.i32(i32 %1664) #16
  %1666 = trunc i32 %1665 to i8
  %1667 = and i8 %1666, 1
  %1668 = xor i8 %1667, 1
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1668, i8* %1669, align 1, !tbaa !2446
  %1670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1670, align 1, !tbaa !2447
  %1671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1671, align 1, !tbaa !2448
  %1672 = lshr i32 %1657, 31
  %1673 = trunc i32 %1672 to i8
  %1674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1673, i8* %1674, align 1, !tbaa !2449
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1662, i8* %1675, align 1, !tbaa !2450
  %1676 = load i64, i64* %RDX
  %1677 = load i64, i64* %RBP
  %1678 = sub i64 %1677, 48
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 3
  store i64 %1680, i64* %PC
  %1681 = trunc i64 %1676 to i32
  %1682 = inttoptr i64 %1678 to i32*
  %1683 = load i32, i32* %1682
  %1684 = add i32 %1683, %1681
  %1685 = zext i32 %1684 to i64
  store i64 %1685, i64* %RDX, align 8, !tbaa !2428
  %1686 = icmp ult i32 %1684, %1681
  %1687 = icmp ult i32 %1684, %1683
  %1688 = or i1 %1686, %1687
  %1689 = zext i1 %1688 to i8
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1689, i8* %1690, align 1, !tbaa !2432
  %1691 = and i32 %1684, 255
  %1692 = call i32 @llvm.ctpop.i32(i32 %1691) #16
  %1693 = trunc i32 %1692 to i8
  %1694 = and i8 %1693, 1
  %1695 = xor i8 %1694, 1
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1695, i8* %1696, align 1, !tbaa !2446
  %1697 = xor i32 %1683, %1681
  %1698 = xor i32 %1697, %1684
  %1699 = lshr i32 %1698, 4
  %1700 = trunc i32 %1699 to i8
  %1701 = and i8 %1700, 1
  %1702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1701, i8* %1702, align 1, !tbaa !2447
  %1703 = icmp eq i32 %1684, 0
  %1704 = zext i1 %1703 to i8
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1704, i8* %1705, align 1, !tbaa !2448
  %1706 = lshr i32 %1684, 31
  %1707 = trunc i32 %1706 to i8
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1707, i8* %1708, align 1, !tbaa !2449
  %1709 = lshr i32 %1681, 31
  %1710 = lshr i32 %1683, 31
  %1711 = xor i32 %1706, %1709
  %1712 = xor i32 %1706, %1710
  %1713 = add nuw nsw i32 %1711, %1712
  %1714 = icmp eq i32 %1713, 2
  %1715 = zext i1 %1714 to i8
  %1716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1715, i8* %1716, align 1, !tbaa !2450
  %1717 = load i32, i32* %EDX
  %1718 = zext i32 %1717 to i64
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 3
  store i64 %1720, i64* %PC
  %1721 = shl i64 %1718, 32
  %1722 = ashr exact i64 %1721, 32
  store i64 %1722, i64* %RCX, align 8, !tbaa !2428
  %1723 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1724 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1725 = load i64, i64* %RAX
  %1726 = load i64, i64* %RCX
  %1727 = mul i64 %1726, 4
  %1728 = add i64 %1727, %1725
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 5
  store i64 %1730, i64* %PC
  %1731 = bitcast i8* %1724 to <2 x float>*
  %1732 = load <2 x float>, <2 x float>* %1731, align 1
  %1733 = getelementptr inbounds i8, i8* %1724, i64 8
  %1734 = bitcast i8* %1733 to <2 x i32>*
  %1735 = load <2 x i32>, <2 x i32>* %1734, align 1
  %1736 = inttoptr i64 %1728 to float*
  %1737 = load float, float* %1736
  %1738 = extractelement <2 x float> %1732, i32 0
  %1739 = fmul float %1738, %1737
  %1740 = bitcast i8* %1723 to float*
  store float %1739, float* %1740, align 1, !tbaa !2452
  %1741 = bitcast <2 x float> %1732 to <2 x i32>
  %1742 = extractelement <2 x i32> %1741, i32 1
  %1743 = getelementptr inbounds i8, i8* %1723, i64 4
  %1744 = bitcast i8* %1743 to i32*
  store i32 %1742, i32* %1744, align 1, !tbaa !2452
  %1745 = extractelement <2 x i32> %1735, i32 0
  %1746 = getelementptr inbounds i8, i8* %1723, i64 8
  %1747 = bitcast i8* %1746 to i32*
  store i32 %1745, i32* %1747, align 1, !tbaa !2452
  %1748 = extractelement <2 x i32> %1735, i32 1
  %1749 = getelementptr inbounds i8, i8* %1723, i64 12
  %1750 = bitcast i8* %1749 to i32*
  store i32 %1748, i32* %1750, align 1, !tbaa !2452
  %1751 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1752 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1753 = bitcast %union.vec128_t* %XMM1 to i8*
  %1754 = load i64, i64* %PC
  %1755 = add i64 %1754, 4
  store i64 %1755, i64* %PC
  %1756 = bitcast i8* %1752 to <2 x float>*
  %1757 = load <2 x float>, <2 x float>* %1756, align 1
  %1758 = getelementptr inbounds i8, i8* %1752, i64 8
  %1759 = bitcast i8* %1758 to <2 x i32>*
  %1760 = load <2 x i32>, <2 x i32>* %1759, align 1
  %1761 = bitcast i8* %1753 to <2 x float>*
  %1762 = load <2 x float>, <2 x float>* %1761, align 1
  %1763 = extractelement <2 x float> %1757, i32 0
  %1764 = extractelement <2 x float> %1762, i32 0
  %1765 = fadd float %1763, %1764
  %1766 = bitcast i8* %1751 to float*
  store float %1765, float* %1766, align 1, !tbaa !2452
  %1767 = bitcast <2 x float> %1757 to <2 x i32>
  %1768 = extractelement <2 x i32> %1767, i32 1
  %1769 = getelementptr inbounds i8, i8* %1751, i64 4
  %1770 = bitcast i8* %1769 to i32*
  store i32 %1768, i32* %1770, align 1, !tbaa !2452
  %1771 = extractelement <2 x i32> %1760, i32 0
  %1772 = getelementptr inbounds i8, i8* %1751, i64 8
  %1773 = bitcast i8* %1772 to i32*
  store i32 %1771, i32* %1773, align 1, !tbaa !2452
  %1774 = extractelement <2 x i32> %1760, i32 1
  %1775 = getelementptr inbounds i8, i8* %1751, i64 12
  %1776 = bitcast i8* %1775 to i32*
  store i32 %1774, i32* %1776, align 1, !tbaa !2452
  %1777 = load i64, i64* %RBP
  %1778 = sub i64 %1777, 32
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 4
  store i64 %1780, i64* %PC
  %1781 = inttoptr i64 %1778 to i64*
  %1782 = load i64, i64* %1781
  store i64 %1782, i64* %RAX, align 8, !tbaa !2428
  %1783 = load i64, i64* %RBP
  %1784 = sub i64 %1783, 44
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 3
  store i64 %1786, i64* %PC
  %1787 = inttoptr i64 %1784 to i32*
  %1788 = load i32, i32* %1787
  %1789 = zext i32 %1788 to i64
  store i64 %1789, i64* %RDX, align 8, !tbaa !2428
  %1790 = load i64, i64* %RDX
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 3
  store i64 %1792, i64* %PC
  %1793 = trunc i64 %1790 to i32
  %1794 = sub i32 %1793, 10
  %1795 = zext i32 %1794 to i64
  store i64 %1795, i64* %RDX, align 8, !tbaa !2428
  %1796 = icmp ult i32 %1793, 10
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1797, i8* %1798, align 1, !tbaa !2432
  %1799 = and i32 %1794, 255
  %1800 = call i32 @llvm.ctpop.i32(i32 %1799) #16
  %1801 = trunc i32 %1800 to i8
  %1802 = and i8 %1801, 1
  %1803 = xor i8 %1802, 1
  %1804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1803, i8* %1804, align 1, !tbaa !2446
  %1805 = xor i64 10, %1790
  %1806 = trunc i64 %1805 to i32
  %1807 = xor i32 %1806, %1794
  %1808 = lshr i32 %1807, 4
  %1809 = trunc i32 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1810, i8* %1811, align 1, !tbaa !2447
  %1812 = icmp eq i32 %1794, 0
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1813, i8* %1814, align 1, !tbaa !2448
  %1815 = lshr i32 %1794, 31
  %1816 = trunc i32 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1816, i8* %1817, align 1, !tbaa !2449
  %1818 = lshr i32 %1793, 31
  %1819 = xor i32 %1815, %1818
  %1820 = add nuw nsw i32 %1819, %1818
  %1821 = icmp eq i32 %1820, 2
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1822, i8* %1823, align 1, !tbaa !2450
  %1824 = load i32, i32* %EDX
  %1825 = zext i32 %1824 to i64
  %1826 = load i64, i64* %PC
  %1827 = add i64 %1826, 3
  store i64 %1827, i64* %PC
  %1828 = shl i64 %1825, 32
  %1829 = ashr exact i64 %1828, 32
  store i64 %1829, i64* %RCX, align 8, !tbaa !2428
  %1830 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1831 = load i64, i64* %RAX
  %1832 = load i64, i64* %RCX
  %1833 = mul i64 %1832, 4
  %1834 = add i64 %1833, %1831
  %1835 = load i64, i64* %PC
  %1836 = add i64 %1835, 5
  store i64 %1836, i64* %PC
  %1837 = inttoptr i64 %1834 to float*
  %1838 = load float, float* %1837
  %1839 = bitcast i8* %1830 to float*
  store float %1838, float* %1839, align 1, !tbaa !2452
  %1840 = getelementptr inbounds i8, i8* %1830, i64 4
  %1841 = bitcast i8* %1840 to float*
  store float 0.000000e+00, float* %1841, align 1, !tbaa !2452
  %1842 = getelementptr inbounds i8, i8* %1830, i64 8
  %1843 = bitcast i8* %1842 to float*
  store float 0.000000e+00, float* %1843, align 1, !tbaa !2452
  %1844 = getelementptr inbounds i8, i8* %1830, i64 12
  %1845 = bitcast i8* %1844 to float*
  store float 0.000000e+00, float* %1845, align 1, !tbaa !2452
  %1846 = load i64, i64* %RBP
  %1847 = sub i64 %1846, 40
  %1848 = load i64, i64* %PC
  %1849 = add i64 %1848, 4
  store i64 %1849, i64* %PC
  %1850 = inttoptr i64 %1847 to i64*
  %1851 = load i64, i64* %1850
  store i64 %1851, i64* %RAX, align 8, !tbaa !2428
  %1852 = load i64, i64* %RBP
  %1853 = sub i64 %1852, 24
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 3
  store i64 %1855, i64* %PC
  %1856 = inttoptr i64 %1853 to i32*
  %1857 = load i32, i32* %1856
  %1858 = zext i32 %1857 to i64
  store i64 %1858, i64* %RDX, align 8, !tbaa !2428
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 44
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 3
  store i64 %1862, i64* %PC
  %1863 = inttoptr i64 %1860 to i32*
  %1864 = load i32, i32* %1863
  %1865 = zext i32 %1864 to i64
  store i64 %1865, i64* %RSI, align 8, !tbaa !2428
  %1866 = load i64, i64* %RSI
  %1867 = load i64, i64* %PC
  %1868 = add i64 %1867, 3
  store i64 %1868, i64* %PC
  %1869 = trunc i64 %1866 to i32
  %1870 = sub i32 %1869, 10
  %1871 = zext i32 %1870 to i64
  store i64 %1871, i64* %RSI, align 8, !tbaa !2428
  %1872 = icmp ult i32 %1869, 10
  %1873 = zext i1 %1872 to i8
  %1874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1873, i8* %1874, align 1, !tbaa !2432
  %1875 = and i32 %1870, 255
  %1876 = call i32 @llvm.ctpop.i32(i32 %1875) #16
  %1877 = trunc i32 %1876 to i8
  %1878 = and i8 %1877, 1
  %1879 = xor i8 %1878, 1
  %1880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1879, i8* %1880, align 1, !tbaa !2446
  %1881 = xor i64 10, %1866
  %1882 = trunc i64 %1881 to i32
  %1883 = xor i32 %1882, %1870
  %1884 = lshr i32 %1883, 4
  %1885 = trunc i32 %1884 to i8
  %1886 = and i8 %1885, 1
  %1887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1886, i8* %1887, align 1, !tbaa !2447
  %1888 = icmp eq i32 %1870, 0
  %1889 = zext i1 %1888 to i8
  %1890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1889, i8* %1890, align 1, !tbaa !2448
  %1891 = lshr i32 %1870, 31
  %1892 = trunc i32 %1891 to i8
  %1893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1892, i8* %1893, align 1, !tbaa !2449
  %1894 = lshr i32 %1869, 31
  %1895 = xor i32 %1891, %1894
  %1896 = add nuw nsw i32 %1895, %1894
  %1897 = icmp eq i32 %1896, 2
  %1898 = zext i1 %1897 to i8
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1898, i8* %1899, align 1, !tbaa !2450
  %1900 = load i64, i64* %RDX
  %1901 = load i32, i32* %ESI
  %1902 = zext i32 %1901 to i64
  %1903 = load i64, i64* %PC
  %1904 = add i64 %1903, 3
  store i64 %1904, i64* %PC
  %1905 = shl i64 %1900, 32
  %1906 = ashr exact i64 %1905, 32
  %1907 = shl i64 %1902, 32
  %1908 = ashr exact i64 %1907, 32
  %1909 = mul nsw i64 %1908, %1906
  %1910 = trunc i64 %1909 to i32
  %1911 = and i64 %1909, 4294967295
  store i64 %1911, i64* %RDX, align 8, !tbaa !2428
  %1912 = shl i64 %1909, 32
  %1913 = ashr exact i64 %1912, 32
  %1914 = icmp ne i64 %1913, %1909
  %1915 = zext i1 %1914 to i8
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1915, i8* %1916, align 1, !tbaa !2432
  %1917 = and i32 %1910, 255
  %1918 = call i32 @llvm.ctpop.i32(i32 %1917) #16
  %1919 = trunc i32 %1918 to i8
  %1920 = and i8 %1919, 1
  %1921 = xor i8 %1920, 1
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1921, i8* %1922, align 1, !tbaa !2446
  %1923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1923, align 1, !tbaa !2447
  %1924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1924, align 1, !tbaa !2448
  %1925 = lshr i32 %1910, 31
  %1926 = trunc i32 %1925 to i8
  %1927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1926, i8* %1927, align 1, !tbaa !2449
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1915, i8* %1928, align 1, !tbaa !2450
  %1929 = load i64, i64* %RDX
  %1930 = load i64, i64* %RBP
  %1931 = sub i64 %1930, 48
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 3
  store i64 %1933, i64* %PC
  %1934 = trunc i64 %1929 to i32
  %1935 = inttoptr i64 %1931 to i32*
  %1936 = load i32, i32* %1935
  %1937 = add i32 %1936, %1934
  %1938 = zext i32 %1937 to i64
  store i64 %1938, i64* %RDX, align 8, !tbaa !2428
  %1939 = icmp ult i32 %1937, %1934
  %1940 = icmp ult i32 %1937, %1936
  %1941 = or i1 %1939, %1940
  %1942 = zext i1 %1941 to i8
  %1943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1942, i8* %1943, align 1, !tbaa !2432
  %1944 = and i32 %1937, 255
  %1945 = call i32 @llvm.ctpop.i32(i32 %1944) #16
  %1946 = trunc i32 %1945 to i8
  %1947 = and i8 %1946, 1
  %1948 = xor i8 %1947, 1
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1948, i8* %1949, align 1, !tbaa !2446
  %1950 = xor i32 %1936, %1934
  %1951 = xor i32 %1950, %1937
  %1952 = lshr i32 %1951, 4
  %1953 = trunc i32 %1952 to i8
  %1954 = and i8 %1953, 1
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1954, i8* %1955, align 1, !tbaa !2447
  %1956 = icmp eq i32 %1937, 0
  %1957 = zext i1 %1956 to i8
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1957, i8* %1958, align 1, !tbaa !2448
  %1959 = lshr i32 %1937, 31
  %1960 = trunc i32 %1959 to i8
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1960, i8* %1961, align 1, !tbaa !2449
  %1962 = lshr i32 %1934, 31
  %1963 = lshr i32 %1936, 31
  %1964 = xor i32 %1959, %1962
  %1965 = xor i32 %1959, %1963
  %1966 = add nuw nsw i32 %1964, %1965
  %1967 = icmp eq i32 %1966, 2
  %1968 = zext i1 %1967 to i8
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1968, i8* %1969, align 1, !tbaa !2450
  %1970 = load i32, i32* %EDX
  %1971 = zext i32 %1970 to i64
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 3
  store i64 %1973, i64* %PC
  %1974 = shl i64 %1971, 32
  %1975 = ashr exact i64 %1974, 32
  store i64 %1975, i64* %RCX, align 8, !tbaa !2428
  %1976 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1977 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1978 = load i64, i64* %RAX
  %1979 = load i64, i64* %RCX
  %1980 = mul i64 %1979, 4
  %1981 = add i64 %1980, %1978
  %1982 = load i64, i64* %PC
  %1983 = add i64 %1982, 5
  store i64 %1983, i64* %PC
  %1984 = bitcast i8* %1977 to <2 x float>*
  %1985 = load <2 x float>, <2 x float>* %1984, align 1
  %1986 = getelementptr inbounds i8, i8* %1977, i64 8
  %1987 = bitcast i8* %1986 to <2 x i32>*
  %1988 = load <2 x i32>, <2 x i32>* %1987, align 1
  %1989 = inttoptr i64 %1981 to float*
  %1990 = load float, float* %1989
  %1991 = extractelement <2 x float> %1985, i32 0
  %1992 = fmul float %1991, %1990
  %1993 = bitcast i8* %1976 to float*
  store float %1992, float* %1993, align 1, !tbaa !2452
  %1994 = bitcast <2 x float> %1985 to <2 x i32>
  %1995 = extractelement <2 x i32> %1994, i32 1
  %1996 = getelementptr inbounds i8, i8* %1976, i64 4
  %1997 = bitcast i8* %1996 to i32*
  store i32 %1995, i32* %1997, align 1, !tbaa !2452
  %1998 = extractelement <2 x i32> %1988, i32 0
  %1999 = getelementptr inbounds i8, i8* %1976, i64 8
  %2000 = bitcast i8* %1999 to i32*
  store i32 %1998, i32* %2000, align 1, !tbaa !2452
  %2001 = extractelement <2 x i32> %1988, i32 1
  %2002 = getelementptr inbounds i8, i8* %1976, i64 12
  %2003 = bitcast i8* %2002 to i32*
  store i32 %2001, i32* %2003, align 1, !tbaa !2452
  %2004 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2005 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2006 = bitcast %union.vec128_t* %XMM1 to i8*
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 4
  store i64 %2008, i64* %PC
  %2009 = bitcast i8* %2005 to <2 x float>*
  %2010 = load <2 x float>, <2 x float>* %2009, align 1
  %2011 = getelementptr inbounds i8, i8* %2005, i64 8
  %2012 = bitcast i8* %2011 to <2 x i32>*
  %2013 = load <2 x i32>, <2 x i32>* %2012, align 1
  %2014 = bitcast i8* %2006 to <2 x float>*
  %2015 = load <2 x float>, <2 x float>* %2014, align 1
  %2016 = extractelement <2 x float> %2010, i32 0
  %2017 = extractelement <2 x float> %2015, i32 0
  %2018 = fadd float %2016, %2017
  %2019 = bitcast i8* %2004 to float*
  store float %2018, float* %2019, align 1, !tbaa !2452
  %2020 = bitcast <2 x float> %2010 to <2 x i32>
  %2021 = extractelement <2 x i32> %2020, i32 1
  %2022 = getelementptr inbounds i8, i8* %2004, i64 4
  %2023 = bitcast i8* %2022 to i32*
  store i32 %2021, i32* %2023, align 1, !tbaa !2452
  %2024 = extractelement <2 x i32> %2013, i32 0
  %2025 = getelementptr inbounds i8, i8* %2004, i64 8
  %2026 = bitcast i8* %2025 to i32*
  store i32 %2024, i32* %2026, align 1, !tbaa !2452
  %2027 = extractelement <2 x i32> %2013, i32 1
  %2028 = getelementptr inbounds i8, i8* %2004, i64 12
  %2029 = bitcast i8* %2028 to i32*
  store i32 %2027, i32* %2029, align 1, !tbaa !2452
  %2030 = load i64, i64* %RBP
  %2031 = sub i64 %2030, 32
  %2032 = load i64, i64* %PC
  %2033 = add i64 %2032, 4
  store i64 %2033, i64* %PC
  %2034 = inttoptr i64 %2031 to i64*
  %2035 = load i64, i64* %2034
  store i64 %2035, i64* %RAX, align 8, !tbaa !2428
  %2036 = load i64, i64* %RBP
  %2037 = sub i64 %2036, 44
  %2038 = load i64, i64* %PC
  %2039 = add i64 %2038, 3
  store i64 %2039, i64* %PC
  %2040 = inttoptr i64 %2037 to i32*
  %2041 = load i32, i32* %2040
  %2042 = zext i32 %2041 to i64
  store i64 %2042, i64* %RDX, align 8, !tbaa !2428
  %2043 = load i64, i64* %RDX
  %2044 = load i64, i64* %PC
  %2045 = add i64 %2044, 3
  store i64 %2045, i64* %PC
  %2046 = trunc i64 %2043 to i32
  %2047 = sub i32 %2046, 9
  %2048 = zext i32 %2047 to i64
  store i64 %2048, i64* %RDX, align 8, !tbaa !2428
  %2049 = icmp ult i32 %2046, 9
  %2050 = zext i1 %2049 to i8
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2050, i8* %2051, align 1, !tbaa !2432
  %2052 = and i32 %2047, 255
  %2053 = call i32 @llvm.ctpop.i32(i32 %2052) #16
  %2054 = trunc i32 %2053 to i8
  %2055 = and i8 %2054, 1
  %2056 = xor i8 %2055, 1
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2056, i8* %2057, align 1, !tbaa !2446
  %2058 = xor i64 9, %2043
  %2059 = trunc i64 %2058 to i32
  %2060 = xor i32 %2059, %2047
  %2061 = lshr i32 %2060, 4
  %2062 = trunc i32 %2061 to i8
  %2063 = and i8 %2062, 1
  %2064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2063, i8* %2064, align 1, !tbaa !2447
  %2065 = icmp eq i32 %2047, 0
  %2066 = zext i1 %2065 to i8
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2066, i8* %2067, align 1, !tbaa !2448
  %2068 = lshr i32 %2047, 31
  %2069 = trunc i32 %2068 to i8
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2069, i8* %2070, align 1, !tbaa !2449
  %2071 = lshr i32 %2046, 31
  %2072 = xor i32 %2068, %2071
  %2073 = add nuw nsw i32 %2072, %2071
  %2074 = icmp eq i32 %2073, 2
  %2075 = zext i1 %2074 to i8
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2075, i8* %2076, align 1, !tbaa !2450
  %2077 = load i32, i32* %EDX
  %2078 = zext i32 %2077 to i64
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 3
  store i64 %2080, i64* %PC
  %2081 = shl i64 %2078, 32
  %2082 = ashr exact i64 %2081, 32
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2084 = load i64, i64* %RAX
  %2085 = load i64, i64* %RCX
  %2086 = mul i64 %2085, 4
  %2087 = add i64 %2086, %2084
  %2088 = load i64, i64* %PC
  %2089 = add i64 %2088, 5
  store i64 %2089, i64* %PC
  %2090 = inttoptr i64 %2087 to float*
  %2091 = load float, float* %2090
  %2092 = bitcast i8* %2083 to float*
  store float %2091, float* %2092, align 1, !tbaa !2452
  %2093 = getelementptr inbounds i8, i8* %2083, i64 4
  %2094 = bitcast i8* %2093 to float*
  store float 0.000000e+00, float* %2094, align 1, !tbaa !2452
  %2095 = getelementptr inbounds i8, i8* %2083, i64 8
  %2096 = bitcast i8* %2095 to float*
  store float 0.000000e+00, float* %2096, align 1, !tbaa !2452
  %2097 = getelementptr inbounds i8, i8* %2083, i64 12
  %2098 = bitcast i8* %2097 to float*
  store float 0.000000e+00, float* %2098, align 1, !tbaa !2452
  %2099 = load i64, i64* %RBP
  %2100 = sub i64 %2099, 40
  %2101 = load i64, i64* %PC
  %2102 = add i64 %2101, 4
  store i64 %2102, i64* %PC
  %2103 = inttoptr i64 %2100 to i64*
  %2104 = load i64, i64* %2103
  store i64 %2104, i64* %RAX, align 8, !tbaa !2428
  %2105 = load i64, i64* %RBP
  %2106 = sub i64 %2105, 24
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 3
  store i64 %2108, i64* %PC
  %2109 = inttoptr i64 %2106 to i32*
  %2110 = load i32, i32* %2109
  %2111 = zext i32 %2110 to i64
  store i64 %2111, i64* %RDX, align 8, !tbaa !2428
  %2112 = load i64, i64* %RBP
  %2113 = sub i64 %2112, 44
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 3
  store i64 %2115, i64* %PC
  %2116 = inttoptr i64 %2113 to i32*
  %2117 = load i32, i32* %2116
  %2118 = zext i32 %2117 to i64
  store i64 %2118, i64* %RSI, align 8, !tbaa !2428
  %2119 = load i64, i64* %RSI
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 3
  store i64 %2121, i64* %PC
  %2122 = trunc i64 %2119 to i32
  %2123 = sub i32 %2122, 9
  %2124 = zext i32 %2123 to i64
  store i64 %2124, i64* %RSI, align 8, !tbaa !2428
  %2125 = icmp ult i32 %2122, 9
  %2126 = zext i1 %2125 to i8
  %2127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2126, i8* %2127, align 1, !tbaa !2432
  %2128 = and i32 %2123, 255
  %2129 = call i32 @llvm.ctpop.i32(i32 %2128) #16
  %2130 = trunc i32 %2129 to i8
  %2131 = and i8 %2130, 1
  %2132 = xor i8 %2131, 1
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2132, i8* %2133, align 1, !tbaa !2446
  %2134 = xor i64 9, %2119
  %2135 = trunc i64 %2134 to i32
  %2136 = xor i32 %2135, %2123
  %2137 = lshr i32 %2136, 4
  %2138 = trunc i32 %2137 to i8
  %2139 = and i8 %2138, 1
  %2140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2139, i8* %2140, align 1, !tbaa !2447
  %2141 = icmp eq i32 %2123, 0
  %2142 = zext i1 %2141 to i8
  %2143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2142, i8* %2143, align 1, !tbaa !2448
  %2144 = lshr i32 %2123, 31
  %2145 = trunc i32 %2144 to i8
  %2146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2145, i8* %2146, align 1, !tbaa !2449
  %2147 = lshr i32 %2122, 31
  %2148 = xor i32 %2144, %2147
  %2149 = add nuw nsw i32 %2148, %2147
  %2150 = icmp eq i32 %2149, 2
  %2151 = zext i1 %2150 to i8
  %2152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2151, i8* %2152, align 1, !tbaa !2450
  %2153 = load i64, i64* %RDX
  %2154 = load i32, i32* %ESI
  %2155 = zext i32 %2154 to i64
  %2156 = load i64, i64* %PC
  %2157 = add i64 %2156, 3
  store i64 %2157, i64* %PC
  %2158 = shl i64 %2153, 32
  %2159 = ashr exact i64 %2158, 32
  %2160 = shl i64 %2155, 32
  %2161 = ashr exact i64 %2160, 32
  %2162 = mul nsw i64 %2161, %2159
  %2163 = trunc i64 %2162 to i32
  %2164 = and i64 %2162, 4294967295
  store i64 %2164, i64* %RDX, align 8, !tbaa !2428
  %2165 = shl i64 %2162, 32
  %2166 = ashr exact i64 %2165, 32
  %2167 = icmp ne i64 %2166, %2162
  %2168 = zext i1 %2167 to i8
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2168, i8* %2169, align 1, !tbaa !2432
  %2170 = and i32 %2163, 255
  %2171 = call i32 @llvm.ctpop.i32(i32 %2170) #16
  %2172 = trunc i32 %2171 to i8
  %2173 = and i8 %2172, 1
  %2174 = xor i8 %2173, 1
  %2175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2174, i8* %2175, align 1, !tbaa !2446
  %2176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2176, align 1, !tbaa !2447
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2177, align 1, !tbaa !2448
  %2178 = lshr i32 %2163, 31
  %2179 = trunc i32 %2178 to i8
  %2180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2179, i8* %2180, align 1, !tbaa !2449
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2168, i8* %2181, align 1, !tbaa !2450
  %2182 = load i64, i64* %RDX
  %2183 = load i64, i64* %RBP
  %2184 = sub i64 %2183, 48
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 3
  store i64 %2186, i64* %PC
  %2187 = trunc i64 %2182 to i32
  %2188 = inttoptr i64 %2184 to i32*
  %2189 = load i32, i32* %2188
  %2190 = add i32 %2189, %2187
  %2191 = zext i32 %2190 to i64
  store i64 %2191, i64* %RDX, align 8, !tbaa !2428
  %2192 = icmp ult i32 %2190, %2187
  %2193 = icmp ult i32 %2190, %2189
  %2194 = or i1 %2192, %2193
  %2195 = zext i1 %2194 to i8
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2195, i8* %2196, align 1, !tbaa !2432
  %2197 = and i32 %2190, 255
  %2198 = call i32 @llvm.ctpop.i32(i32 %2197) #16
  %2199 = trunc i32 %2198 to i8
  %2200 = and i8 %2199, 1
  %2201 = xor i8 %2200, 1
  %2202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2201, i8* %2202, align 1, !tbaa !2446
  %2203 = xor i32 %2189, %2187
  %2204 = xor i32 %2203, %2190
  %2205 = lshr i32 %2204, 4
  %2206 = trunc i32 %2205 to i8
  %2207 = and i8 %2206, 1
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2207, i8* %2208, align 1, !tbaa !2447
  %2209 = icmp eq i32 %2190, 0
  %2210 = zext i1 %2209 to i8
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2210, i8* %2211, align 1, !tbaa !2448
  %2212 = lshr i32 %2190, 31
  %2213 = trunc i32 %2212 to i8
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2213, i8* %2214, align 1, !tbaa !2449
  %2215 = lshr i32 %2187, 31
  %2216 = lshr i32 %2189, 31
  %2217 = xor i32 %2212, %2215
  %2218 = xor i32 %2212, %2216
  %2219 = add nuw nsw i32 %2217, %2218
  %2220 = icmp eq i32 %2219, 2
  %2221 = zext i1 %2220 to i8
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2221, i8* %2222, align 1, !tbaa !2450
  %2223 = load i32, i32* %EDX
  %2224 = zext i32 %2223 to i64
  %2225 = load i64, i64* %PC
  %2226 = add i64 %2225, 3
  store i64 %2226, i64* %PC
  %2227 = shl i64 %2224, 32
  %2228 = ashr exact i64 %2227, 32
  store i64 %2228, i64* %RCX, align 8, !tbaa !2428
  %2229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2230 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2231 = load i64, i64* %RAX
  %2232 = load i64, i64* %RCX
  %2233 = mul i64 %2232, 4
  %2234 = add i64 %2233, %2231
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 5
  store i64 %2236, i64* %PC
  %2237 = bitcast i8* %2230 to <2 x float>*
  %2238 = load <2 x float>, <2 x float>* %2237, align 1
  %2239 = getelementptr inbounds i8, i8* %2230, i64 8
  %2240 = bitcast i8* %2239 to <2 x i32>*
  %2241 = load <2 x i32>, <2 x i32>* %2240, align 1
  %2242 = inttoptr i64 %2234 to float*
  %2243 = load float, float* %2242
  %2244 = extractelement <2 x float> %2238, i32 0
  %2245 = fmul float %2244, %2243
  %2246 = bitcast i8* %2229 to float*
  store float %2245, float* %2246, align 1, !tbaa !2452
  %2247 = bitcast <2 x float> %2238 to <2 x i32>
  %2248 = extractelement <2 x i32> %2247, i32 1
  %2249 = getelementptr inbounds i8, i8* %2229, i64 4
  %2250 = bitcast i8* %2249 to i32*
  store i32 %2248, i32* %2250, align 1, !tbaa !2452
  %2251 = extractelement <2 x i32> %2241, i32 0
  %2252 = getelementptr inbounds i8, i8* %2229, i64 8
  %2253 = bitcast i8* %2252 to i32*
  store i32 %2251, i32* %2253, align 1, !tbaa !2452
  %2254 = extractelement <2 x i32> %2241, i32 1
  %2255 = getelementptr inbounds i8, i8* %2229, i64 12
  %2256 = bitcast i8* %2255 to i32*
  store i32 %2254, i32* %2256, align 1, !tbaa !2452
  %2257 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2258 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2259 = bitcast %union.vec128_t* %XMM1 to i8*
  %2260 = load i64, i64* %PC
  %2261 = add i64 %2260, 4
  store i64 %2261, i64* %PC
  %2262 = bitcast i8* %2258 to <2 x float>*
  %2263 = load <2 x float>, <2 x float>* %2262, align 1
  %2264 = getelementptr inbounds i8, i8* %2258, i64 8
  %2265 = bitcast i8* %2264 to <2 x i32>*
  %2266 = load <2 x i32>, <2 x i32>* %2265, align 1
  %2267 = bitcast i8* %2259 to <2 x float>*
  %2268 = load <2 x float>, <2 x float>* %2267, align 1
  %2269 = extractelement <2 x float> %2263, i32 0
  %2270 = extractelement <2 x float> %2268, i32 0
  %2271 = fadd float %2269, %2270
  %2272 = bitcast i8* %2257 to float*
  store float %2271, float* %2272, align 1, !tbaa !2452
  %2273 = bitcast <2 x float> %2263 to <2 x i32>
  %2274 = extractelement <2 x i32> %2273, i32 1
  %2275 = getelementptr inbounds i8, i8* %2257, i64 4
  %2276 = bitcast i8* %2275 to i32*
  store i32 %2274, i32* %2276, align 1, !tbaa !2452
  %2277 = extractelement <2 x i32> %2266, i32 0
  %2278 = getelementptr inbounds i8, i8* %2257, i64 8
  %2279 = bitcast i8* %2278 to i32*
  store i32 %2277, i32* %2279, align 1, !tbaa !2452
  %2280 = extractelement <2 x i32> %2266, i32 1
  %2281 = getelementptr inbounds i8, i8* %2257, i64 12
  %2282 = bitcast i8* %2281 to i32*
  store i32 %2280, i32* %2282, align 1, !tbaa !2452
  %2283 = load i64, i64* %RBP
  %2284 = sub i64 %2283, 32
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 4
  store i64 %2286, i64* %PC
  %2287 = inttoptr i64 %2284 to i64*
  %2288 = load i64, i64* %2287
  store i64 %2288, i64* %RAX, align 8, !tbaa !2428
  %2289 = load i64, i64* %RBP
  %2290 = sub i64 %2289, 44
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 3
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2290 to i32*
  %2294 = load i32, i32* %2293
  %2295 = zext i32 %2294 to i64
  store i64 %2295, i64* %RDX, align 8, !tbaa !2428
  %2296 = load i64, i64* %RDX
  %2297 = load i64, i64* %PC
  %2298 = add i64 %2297, 3
  store i64 %2298, i64* %PC
  %2299 = trunc i64 %2296 to i32
  %2300 = sub i32 %2299, 8
  %2301 = zext i32 %2300 to i64
  store i64 %2301, i64* %RDX, align 8, !tbaa !2428
  %2302 = icmp ult i32 %2299, 8
  %2303 = zext i1 %2302 to i8
  %2304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2303, i8* %2304, align 1, !tbaa !2432
  %2305 = and i32 %2300, 255
  %2306 = call i32 @llvm.ctpop.i32(i32 %2305) #16
  %2307 = trunc i32 %2306 to i8
  %2308 = and i8 %2307, 1
  %2309 = xor i8 %2308, 1
  %2310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2309, i8* %2310, align 1, !tbaa !2446
  %2311 = xor i64 8, %2296
  %2312 = trunc i64 %2311 to i32
  %2313 = xor i32 %2312, %2300
  %2314 = lshr i32 %2313, 4
  %2315 = trunc i32 %2314 to i8
  %2316 = and i8 %2315, 1
  %2317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2316, i8* %2317, align 1, !tbaa !2447
  %2318 = icmp eq i32 %2300, 0
  %2319 = zext i1 %2318 to i8
  %2320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2319, i8* %2320, align 1, !tbaa !2448
  %2321 = lshr i32 %2300, 31
  %2322 = trunc i32 %2321 to i8
  %2323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2322, i8* %2323, align 1, !tbaa !2449
  %2324 = lshr i32 %2299, 31
  %2325 = xor i32 %2321, %2324
  %2326 = add nuw nsw i32 %2325, %2324
  %2327 = icmp eq i32 %2326, 2
  %2328 = zext i1 %2327 to i8
  %2329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2328, i8* %2329, align 1, !tbaa !2450
  %2330 = load i32, i32* %EDX
  %2331 = zext i32 %2330 to i64
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 3
  store i64 %2333, i64* %PC
  %2334 = shl i64 %2331, 32
  %2335 = ashr exact i64 %2334, 32
  store i64 %2335, i64* %RCX, align 8, !tbaa !2428
  %2336 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2337 = load i64, i64* %RAX
  %2338 = load i64, i64* %RCX
  %2339 = mul i64 %2338, 4
  %2340 = add i64 %2339, %2337
  %2341 = load i64, i64* %PC
  %2342 = add i64 %2341, 5
  store i64 %2342, i64* %PC
  %2343 = inttoptr i64 %2340 to float*
  %2344 = load float, float* %2343
  %2345 = bitcast i8* %2336 to float*
  store float %2344, float* %2345, align 1, !tbaa !2452
  %2346 = getelementptr inbounds i8, i8* %2336, i64 4
  %2347 = bitcast i8* %2346 to float*
  store float 0.000000e+00, float* %2347, align 1, !tbaa !2452
  %2348 = getelementptr inbounds i8, i8* %2336, i64 8
  %2349 = bitcast i8* %2348 to float*
  store float 0.000000e+00, float* %2349, align 1, !tbaa !2452
  %2350 = getelementptr inbounds i8, i8* %2336, i64 12
  %2351 = bitcast i8* %2350 to float*
  store float 0.000000e+00, float* %2351, align 1, !tbaa !2452
  %2352 = load i64, i64* %RBP
  %2353 = sub i64 %2352, 40
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 4
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2353 to i64*
  %2357 = load i64, i64* %2356
  store i64 %2357, i64* %RAX, align 8, !tbaa !2428
  %2358 = load i64, i64* %RBP
  %2359 = sub i64 %2358, 24
  %2360 = load i64, i64* %PC
  %2361 = add i64 %2360, 3
  store i64 %2361, i64* %PC
  %2362 = inttoptr i64 %2359 to i32*
  %2363 = load i32, i32* %2362
  %2364 = zext i32 %2363 to i64
  store i64 %2364, i64* %RDX, align 8, !tbaa !2428
  %2365 = load i64, i64* %RBP
  %2366 = sub i64 %2365, 44
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 3
  store i64 %2368, i64* %PC
  %2369 = inttoptr i64 %2366 to i32*
  %2370 = load i32, i32* %2369
  %2371 = zext i32 %2370 to i64
  store i64 %2371, i64* %RSI, align 8, !tbaa !2428
  %2372 = load i64, i64* %RSI
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 3
  store i64 %2374, i64* %PC
  %2375 = trunc i64 %2372 to i32
  %2376 = sub i32 %2375, 8
  %2377 = zext i32 %2376 to i64
  store i64 %2377, i64* %RSI, align 8, !tbaa !2428
  %2378 = icmp ult i32 %2375, 8
  %2379 = zext i1 %2378 to i8
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2379, i8* %2380, align 1, !tbaa !2432
  %2381 = and i32 %2376, 255
  %2382 = call i32 @llvm.ctpop.i32(i32 %2381) #16
  %2383 = trunc i32 %2382 to i8
  %2384 = and i8 %2383, 1
  %2385 = xor i8 %2384, 1
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2385, i8* %2386, align 1, !tbaa !2446
  %2387 = xor i64 8, %2372
  %2388 = trunc i64 %2387 to i32
  %2389 = xor i32 %2388, %2376
  %2390 = lshr i32 %2389, 4
  %2391 = trunc i32 %2390 to i8
  %2392 = and i8 %2391, 1
  %2393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2392, i8* %2393, align 1, !tbaa !2447
  %2394 = icmp eq i32 %2376, 0
  %2395 = zext i1 %2394 to i8
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2395, i8* %2396, align 1, !tbaa !2448
  %2397 = lshr i32 %2376, 31
  %2398 = trunc i32 %2397 to i8
  %2399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2398, i8* %2399, align 1, !tbaa !2449
  %2400 = lshr i32 %2375, 31
  %2401 = xor i32 %2397, %2400
  %2402 = add nuw nsw i32 %2401, %2400
  %2403 = icmp eq i32 %2402, 2
  %2404 = zext i1 %2403 to i8
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2404, i8* %2405, align 1, !tbaa !2450
  %2406 = load i64, i64* %RDX
  %2407 = load i32, i32* %ESI
  %2408 = zext i32 %2407 to i64
  %2409 = load i64, i64* %PC
  %2410 = add i64 %2409, 3
  store i64 %2410, i64* %PC
  %2411 = shl i64 %2406, 32
  %2412 = ashr exact i64 %2411, 32
  %2413 = shl i64 %2408, 32
  %2414 = ashr exact i64 %2413, 32
  %2415 = mul nsw i64 %2414, %2412
  %2416 = trunc i64 %2415 to i32
  %2417 = and i64 %2415, 4294967295
  store i64 %2417, i64* %RDX, align 8, !tbaa !2428
  %2418 = shl i64 %2415, 32
  %2419 = ashr exact i64 %2418, 32
  %2420 = icmp ne i64 %2419, %2415
  %2421 = zext i1 %2420 to i8
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2421, i8* %2422, align 1, !tbaa !2432
  %2423 = and i32 %2416, 255
  %2424 = call i32 @llvm.ctpop.i32(i32 %2423) #16
  %2425 = trunc i32 %2424 to i8
  %2426 = and i8 %2425, 1
  %2427 = xor i8 %2426, 1
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2427, i8* %2428, align 1, !tbaa !2446
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2429, align 1, !tbaa !2447
  %2430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2430, align 1, !tbaa !2448
  %2431 = lshr i32 %2416, 31
  %2432 = trunc i32 %2431 to i8
  %2433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2432, i8* %2433, align 1, !tbaa !2449
  %2434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2421, i8* %2434, align 1, !tbaa !2450
  %2435 = load i64, i64* %RDX
  %2436 = load i64, i64* %RBP
  %2437 = sub i64 %2436, 48
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 3
  store i64 %2439, i64* %PC
  %2440 = trunc i64 %2435 to i32
  %2441 = inttoptr i64 %2437 to i32*
  %2442 = load i32, i32* %2441
  %2443 = add i32 %2442, %2440
  %2444 = zext i32 %2443 to i64
  store i64 %2444, i64* %RDX, align 8, !tbaa !2428
  %2445 = icmp ult i32 %2443, %2440
  %2446 = icmp ult i32 %2443, %2442
  %2447 = or i1 %2445, %2446
  %2448 = zext i1 %2447 to i8
  %2449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2448, i8* %2449, align 1, !tbaa !2432
  %2450 = and i32 %2443, 255
  %2451 = call i32 @llvm.ctpop.i32(i32 %2450) #16
  %2452 = trunc i32 %2451 to i8
  %2453 = and i8 %2452, 1
  %2454 = xor i8 %2453, 1
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2454, i8* %2455, align 1, !tbaa !2446
  %2456 = xor i32 %2442, %2440
  %2457 = xor i32 %2456, %2443
  %2458 = lshr i32 %2457, 4
  %2459 = trunc i32 %2458 to i8
  %2460 = and i8 %2459, 1
  %2461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2460, i8* %2461, align 1, !tbaa !2447
  %2462 = icmp eq i32 %2443, 0
  %2463 = zext i1 %2462 to i8
  %2464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2463, i8* %2464, align 1, !tbaa !2448
  %2465 = lshr i32 %2443, 31
  %2466 = trunc i32 %2465 to i8
  %2467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2466, i8* %2467, align 1, !tbaa !2449
  %2468 = lshr i32 %2440, 31
  %2469 = lshr i32 %2442, 31
  %2470 = xor i32 %2465, %2468
  %2471 = xor i32 %2465, %2469
  %2472 = add nuw nsw i32 %2470, %2471
  %2473 = icmp eq i32 %2472, 2
  %2474 = zext i1 %2473 to i8
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2474, i8* %2475, align 1, !tbaa !2450
  %2476 = load i32, i32* %EDX
  %2477 = zext i32 %2476 to i64
  %2478 = load i64, i64* %PC
  %2479 = add i64 %2478, 3
  store i64 %2479, i64* %PC
  %2480 = shl i64 %2477, 32
  %2481 = ashr exact i64 %2480, 32
  store i64 %2481, i64* %RCX, align 8, !tbaa !2428
  %2482 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2483 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2484 = load i64, i64* %RAX
  %2485 = load i64, i64* %RCX
  %2486 = mul i64 %2485, 4
  %2487 = add i64 %2486, %2484
  %2488 = load i64, i64* %PC
  %2489 = add i64 %2488, 5
  store i64 %2489, i64* %PC
  %2490 = bitcast i8* %2483 to <2 x float>*
  %2491 = load <2 x float>, <2 x float>* %2490, align 1
  %2492 = getelementptr inbounds i8, i8* %2483, i64 8
  %2493 = bitcast i8* %2492 to <2 x i32>*
  %2494 = load <2 x i32>, <2 x i32>* %2493, align 1
  %2495 = inttoptr i64 %2487 to float*
  %2496 = load float, float* %2495
  %2497 = extractelement <2 x float> %2491, i32 0
  %2498 = fmul float %2497, %2496
  %2499 = bitcast i8* %2482 to float*
  store float %2498, float* %2499, align 1, !tbaa !2452
  %2500 = bitcast <2 x float> %2491 to <2 x i32>
  %2501 = extractelement <2 x i32> %2500, i32 1
  %2502 = getelementptr inbounds i8, i8* %2482, i64 4
  %2503 = bitcast i8* %2502 to i32*
  store i32 %2501, i32* %2503, align 1, !tbaa !2452
  %2504 = extractelement <2 x i32> %2494, i32 0
  %2505 = getelementptr inbounds i8, i8* %2482, i64 8
  %2506 = bitcast i8* %2505 to i32*
  store i32 %2504, i32* %2506, align 1, !tbaa !2452
  %2507 = extractelement <2 x i32> %2494, i32 1
  %2508 = getelementptr inbounds i8, i8* %2482, i64 12
  %2509 = bitcast i8* %2508 to i32*
  store i32 %2507, i32* %2509, align 1, !tbaa !2452
  %2510 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2511 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2512 = bitcast %union.vec128_t* %XMM1 to i8*
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 4
  store i64 %2514, i64* %PC
  %2515 = bitcast i8* %2511 to <2 x float>*
  %2516 = load <2 x float>, <2 x float>* %2515, align 1
  %2517 = getelementptr inbounds i8, i8* %2511, i64 8
  %2518 = bitcast i8* %2517 to <2 x i32>*
  %2519 = load <2 x i32>, <2 x i32>* %2518, align 1
  %2520 = bitcast i8* %2512 to <2 x float>*
  %2521 = load <2 x float>, <2 x float>* %2520, align 1
  %2522 = extractelement <2 x float> %2516, i32 0
  %2523 = extractelement <2 x float> %2521, i32 0
  %2524 = fadd float %2522, %2523
  %2525 = bitcast i8* %2510 to float*
  store float %2524, float* %2525, align 1, !tbaa !2452
  %2526 = bitcast <2 x float> %2516 to <2 x i32>
  %2527 = extractelement <2 x i32> %2526, i32 1
  %2528 = getelementptr inbounds i8, i8* %2510, i64 4
  %2529 = bitcast i8* %2528 to i32*
  store i32 %2527, i32* %2529, align 1, !tbaa !2452
  %2530 = extractelement <2 x i32> %2519, i32 0
  %2531 = getelementptr inbounds i8, i8* %2510, i64 8
  %2532 = bitcast i8* %2531 to i32*
  store i32 %2530, i32* %2532, align 1, !tbaa !2452
  %2533 = extractelement <2 x i32> %2519, i32 1
  %2534 = getelementptr inbounds i8, i8* %2510, i64 12
  %2535 = bitcast i8* %2534 to i32*
  store i32 %2533, i32* %2535, align 1, !tbaa !2452
  %2536 = load i64, i64* %RBP
  %2537 = sub i64 %2536, 32
  %2538 = load i64, i64* %PC
  %2539 = add i64 %2538, 4
  store i64 %2539, i64* %PC
  %2540 = inttoptr i64 %2537 to i64*
  %2541 = load i64, i64* %2540
  store i64 %2541, i64* %RAX, align 8, !tbaa !2428
  %2542 = load i64, i64* %RBP
  %2543 = sub i64 %2542, 44
  %2544 = load i64, i64* %PC
  %2545 = add i64 %2544, 3
  store i64 %2545, i64* %PC
  %2546 = inttoptr i64 %2543 to i32*
  %2547 = load i32, i32* %2546
  %2548 = zext i32 %2547 to i64
  store i64 %2548, i64* %RDX, align 8, !tbaa !2428
  %2549 = load i64, i64* %RDX
  %2550 = load i64, i64* %PC
  %2551 = add i64 %2550, 3
  store i64 %2551, i64* %PC
  %2552 = trunc i64 %2549 to i32
  %2553 = sub i32 %2552, 7
  %2554 = zext i32 %2553 to i64
  store i64 %2554, i64* %RDX, align 8, !tbaa !2428
  %2555 = icmp ult i32 %2552, 7
  %2556 = zext i1 %2555 to i8
  %2557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2556, i8* %2557, align 1, !tbaa !2432
  %2558 = and i32 %2553, 255
  %2559 = call i32 @llvm.ctpop.i32(i32 %2558) #16
  %2560 = trunc i32 %2559 to i8
  %2561 = and i8 %2560, 1
  %2562 = xor i8 %2561, 1
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2562, i8* %2563, align 1, !tbaa !2446
  %2564 = xor i64 7, %2549
  %2565 = trunc i64 %2564 to i32
  %2566 = xor i32 %2565, %2553
  %2567 = lshr i32 %2566, 4
  %2568 = trunc i32 %2567 to i8
  %2569 = and i8 %2568, 1
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2569, i8* %2570, align 1, !tbaa !2447
  %2571 = icmp eq i32 %2553, 0
  %2572 = zext i1 %2571 to i8
  %2573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2572, i8* %2573, align 1, !tbaa !2448
  %2574 = lshr i32 %2553, 31
  %2575 = trunc i32 %2574 to i8
  %2576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2575, i8* %2576, align 1, !tbaa !2449
  %2577 = lshr i32 %2552, 31
  %2578 = xor i32 %2574, %2577
  %2579 = add nuw nsw i32 %2578, %2577
  %2580 = icmp eq i32 %2579, 2
  %2581 = zext i1 %2580 to i8
  %2582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2581, i8* %2582, align 1, !tbaa !2450
  %2583 = load i32, i32* %EDX
  %2584 = zext i32 %2583 to i64
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 3
  store i64 %2586, i64* %PC
  %2587 = shl i64 %2584, 32
  %2588 = ashr exact i64 %2587, 32
  store i64 %2588, i64* %RCX, align 8, !tbaa !2428
  %2589 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2590 = load i64, i64* %RAX
  %2591 = load i64, i64* %RCX
  %2592 = mul i64 %2591, 4
  %2593 = add i64 %2592, %2590
  %2594 = load i64, i64* %PC
  %2595 = add i64 %2594, 5
  store i64 %2595, i64* %PC
  %2596 = inttoptr i64 %2593 to float*
  %2597 = load float, float* %2596
  %2598 = bitcast i8* %2589 to float*
  store float %2597, float* %2598, align 1, !tbaa !2452
  %2599 = getelementptr inbounds i8, i8* %2589, i64 4
  %2600 = bitcast i8* %2599 to float*
  store float 0.000000e+00, float* %2600, align 1, !tbaa !2452
  %2601 = getelementptr inbounds i8, i8* %2589, i64 8
  %2602 = bitcast i8* %2601 to float*
  store float 0.000000e+00, float* %2602, align 1, !tbaa !2452
  %2603 = getelementptr inbounds i8, i8* %2589, i64 12
  %2604 = bitcast i8* %2603 to float*
  store float 0.000000e+00, float* %2604, align 1, !tbaa !2452
  %2605 = load i64, i64* %RBP
  %2606 = sub i64 %2605, 40
  %2607 = load i64, i64* %PC
  %2608 = add i64 %2607, 4
  store i64 %2608, i64* %PC
  %2609 = inttoptr i64 %2606 to i64*
  %2610 = load i64, i64* %2609
  store i64 %2610, i64* %RAX, align 8, !tbaa !2428
  %2611 = load i64, i64* %RBP
  %2612 = sub i64 %2611, 24
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 3
  store i64 %2614, i64* %PC
  %2615 = inttoptr i64 %2612 to i32*
  %2616 = load i32, i32* %2615
  %2617 = zext i32 %2616 to i64
  store i64 %2617, i64* %RDX, align 8, !tbaa !2428
  %2618 = load i64, i64* %RBP
  %2619 = sub i64 %2618, 44
  %2620 = load i64, i64* %PC
  %2621 = add i64 %2620, 3
  store i64 %2621, i64* %PC
  %2622 = inttoptr i64 %2619 to i32*
  %2623 = load i32, i32* %2622
  %2624 = zext i32 %2623 to i64
  store i64 %2624, i64* %RSI, align 8, !tbaa !2428
  %2625 = load i64, i64* %RSI
  %2626 = load i64, i64* %PC
  %2627 = add i64 %2626, 3
  store i64 %2627, i64* %PC
  %2628 = trunc i64 %2625 to i32
  %2629 = sub i32 %2628, 7
  %2630 = zext i32 %2629 to i64
  store i64 %2630, i64* %RSI, align 8, !tbaa !2428
  %2631 = icmp ult i32 %2628, 7
  %2632 = zext i1 %2631 to i8
  %2633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2632, i8* %2633, align 1, !tbaa !2432
  %2634 = and i32 %2629, 255
  %2635 = call i32 @llvm.ctpop.i32(i32 %2634) #16
  %2636 = trunc i32 %2635 to i8
  %2637 = and i8 %2636, 1
  %2638 = xor i8 %2637, 1
  %2639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2638, i8* %2639, align 1, !tbaa !2446
  %2640 = xor i64 7, %2625
  %2641 = trunc i64 %2640 to i32
  %2642 = xor i32 %2641, %2629
  %2643 = lshr i32 %2642, 4
  %2644 = trunc i32 %2643 to i8
  %2645 = and i8 %2644, 1
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2645, i8* %2646, align 1, !tbaa !2447
  %2647 = icmp eq i32 %2629, 0
  %2648 = zext i1 %2647 to i8
  %2649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2648, i8* %2649, align 1, !tbaa !2448
  %2650 = lshr i32 %2629, 31
  %2651 = trunc i32 %2650 to i8
  %2652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2651, i8* %2652, align 1, !tbaa !2449
  %2653 = lshr i32 %2628, 31
  %2654 = xor i32 %2650, %2653
  %2655 = add nuw nsw i32 %2654, %2653
  %2656 = icmp eq i32 %2655, 2
  %2657 = zext i1 %2656 to i8
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2657, i8* %2658, align 1, !tbaa !2450
  %2659 = load i64, i64* %RDX
  %2660 = load i32, i32* %ESI
  %2661 = zext i32 %2660 to i64
  %2662 = load i64, i64* %PC
  %2663 = add i64 %2662, 3
  store i64 %2663, i64* %PC
  %2664 = shl i64 %2659, 32
  %2665 = ashr exact i64 %2664, 32
  %2666 = shl i64 %2661, 32
  %2667 = ashr exact i64 %2666, 32
  %2668 = mul nsw i64 %2667, %2665
  %2669 = trunc i64 %2668 to i32
  %2670 = and i64 %2668, 4294967295
  store i64 %2670, i64* %RDX, align 8, !tbaa !2428
  %2671 = shl i64 %2668, 32
  %2672 = ashr exact i64 %2671, 32
  %2673 = icmp ne i64 %2672, %2668
  %2674 = zext i1 %2673 to i8
  %2675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2674, i8* %2675, align 1, !tbaa !2432
  %2676 = and i32 %2669, 255
  %2677 = call i32 @llvm.ctpop.i32(i32 %2676) #16
  %2678 = trunc i32 %2677 to i8
  %2679 = and i8 %2678, 1
  %2680 = xor i8 %2679, 1
  %2681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2680, i8* %2681, align 1, !tbaa !2446
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2682, align 1, !tbaa !2447
  %2683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2683, align 1, !tbaa !2448
  %2684 = lshr i32 %2669, 31
  %2685 = trunc i32 %2684 to i8
  %2686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2685, i8* %2686, align 1, !tbaa !2449
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2674, i8* %2687, align 1, !tbaa !2450
  %2688 = load i64, i64* %RDX
  %2689 = load i64, i64* %RBP
  %2690 = sub i64 %2689, 48
  %2691 = load i64, i64* %PC
  %2692 = add i64 %2691, 3
  store i64 %2692, i64* %PC
  %2693 = trunc i64 %2688 to i32
  %2694 = inttoptr i64 %2690 to i32*
  %2695 = load i32, i32* %2694
  %2696 = add i32 %2695, %2693
  %2697 = zext i32 %2696 to i64
  store i64 %2697, i64* %RDX, align 8, !tbaa !2428
  %2698 = icmp ult i32 %2696, %2693
  %2699 = icmp ult i32 %2696, %2695
  %2700 = or i1 %2698, %2699
  %2701 = zext i1 %2700 to i8
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2701, i8* %2702, align 1, !tbaa !2432
  %2703 = and i32 %2696, 255
  %2704 = call i32 @llvm.ctpop.i32(i32 %2703) #16
  %2705 = trunc i32 %2704 to i8
  %2706 = and i8 %2705, 1
  %2707 = xor i8 %2706, 1
  %2708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2707, i8* %2708, align 1, !tbaa !2446
  %2709 = xor i32 %2695, %2693
  %2710 = xor i32 %2709, %2696
  %2711 = lshr i32 %2710, 4
  %2712 = trunc i32 %2711 to i8
  %2713 = and i8 %2712, 1
  %2714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2713, i8* %2714, align 1, !tbaa !2447
  %2715 = icmp eq i32 %2696, 0
  %2716 = zext i1 %2715 to i8
  %2717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2716, i8* %2717, align 1, !tbaa !2448
  %2718 = lshr i32 %2696, 31
  %2719 = trunc i32 %2718 to i8
  %2720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2719, i8* %2720, align 1, !tbaa !2449
  %2721 = lshr i32 %2693, 31
  %2722 = lshr i32 %2695, 31
  %2723 = xor i32 %2718, %2721
  %2724 = xor i32 %2718, %2722
  %2725 = add nuw nsw i32 %2723, %2724
  %2726 = icmp eq i32 %2725, 2
  %2727 = zext i1 %2726 to i8
  %2728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2727, i8* %2728, align 1, !tbaa !2450
  %2729 = load i32, i32* %EDX
  %2730 = zext i32 %2729 to i64
  %2731 = load i64, i64* %PC
  %2732 = add i64 %2731, 3
  store i64 %2732, i64* %PC
  %2733 = shl i64 %2730, 32
  %2734 = ashr exact i64 %2733, 32
  store i64 %2734, i64* %RCX, align 8, !tbaa !2428
  %2735 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2736 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2737 = load i64, i64* %RAX
  %2738 = load i64, i64* %RCX
  %2739 = mul i64 %2738, 4
  %2740 = add i64 %2739, %2737
  %2741 = load i64, i64* %PC
  %2742 = add i64 %2741, 5
  store i64 %2742, i64* %PC
  %2743 = bitcast i8* %2736 to <2 x float>*
  %2744 = load <2 x float>, <2 x float>* %2743, align 1
  %2745 = getelementptr inbounds i8, i8* %2736, i64 8
  %2746 = bitcast i8* %2745 to <2 x i32>*
  %2747 = load <2 x i32>, <2 x i32>* %2746, align 1
  %2748 = inttoptr i64 %2740 to float*
  %2749 = load float, float* %2748
  %2750 = extractelement <2 x float> %2744, i32 0
  %2751 = fmul float %2750, %2749
  %2752 = bitcast i8* %2735 to float*
  store float %2751, float* %2752, align 1, !tbaa !2452
  %2753 = bitcast <2 x float> %2744 to <2 x i32>
  %2754 = extractelement <2 x i32> %2753, i32 1
  %2755 = getelementptr inbounds i8, i8* %2735, i64 4
  %2756 = bitcast i8* %2755 to i32*
  store i32 %2754, i32* %2756, align 1, !tbaa !2452
  %2757 = extractelement <2 x i32> %2747, i32 0
  %2758 = getelementptr inbounds i8, i8* %2735, i64 8
  %2759 = bitcast i8* %2758 to i32*
  store i32 %2757, i32* %2759, align 1, !tbaa !2452
  %2760 = extractelement <2 x i32> %2747, i32 1
  %2761 = getelementptr inbounds i8, i8* %2735, i64 12
  %2762 = bitcast i8* %2761 to i32*
  store i32 %2760, i32* %2762, align 1, !tbaa !2452
  %2763 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2764 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2765 = bitcast %union.vec128_t* %XMM1 to i8*
  %2766 = load i64, i64* %PC
  %2767 = add i64 %2766, 4
  store i64 %2767, i64* %PC
  %2768 = bitcast i8* %2764 to <2 x float>*
  %2769 = load <2 x float>, <2 x float>* %2768, align 1
  %2770 = getelementptr inbounds i8, i8* %2764, i64 8
  %2771 = bitcast i8* %2770 to <2 x i32>*
  %2772 = load <2 x i32>, <2 x i32>* %2771, align 1
  %2773 = bitcast i8* %2765 to <2 x float>*
  %2774 = load <2 x float>, <2 x float>* %2773, align 1
  %2775 = extractelement <2 x float> %2769, i32 0
  %2776 = extractelement <2 x float> %2774, i32 0
  %2777 = fadd float %2775, %2776
  %2778 = bitcast i8* %2763 to float*
  store float %2777, float* %2778, align 1, !tbaa !2452
  %2779 = bitcast <2 x float> %2769 to <2 x i32>
  %2780 = extractelement <2 x i32> %2779, i32 1
  %2781 = getelementptr inbounds i8, i8* %2763, i64 4
  %2782 = bitcast i8* %2781 to i32*
  store i32 %2780, i32* %2782, align 1, !tbaa !2452
  %2783 = extractelement <2 x i32> %2772, i32 0
  %2784 = getelementptr inbounds i8, i8* %2763, i64 8
  %2785 = bitcast i8* %2784 to i32*
  store i32 %2783, i32* %2785, align 1, !tbaa !2452
  %2786 = extractelement <2 x i32> %2772, i32 1
  %2787 = getelementptr inbounds i8, i8* %2763, i64 12
  %2788 = bitcast i8* %2787 to i32*
  store i32 %2786, i32* %2788, align 1, !tbaa !2452
  %2789 = load i64, i64* %RBP
  %2790 = sub i64 %2789, 32
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 4
  store i64 %2792, i64* %PC
  %2793 = inttoptr i64 %2790 to i64*
  %2794 = load i64, i64* %2793
  store i64 %2794, i64* %RAX, align 8, !tbaa !2428
  %2795 = load i64, i64* %RBP
  %2796 = sub i64 %2795, 44
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 3
  store i64 %2798, i64* %PC
  %2799 = inttoptr i64 %2796 to i32*
  %2800 = load i32, i32* %2799
  %2801 = zext i32 %2800 to i64
  store i64 %2801, i64* %RDX, align 8, !tbaa !2428
  %2802 = load i64, i64* %RDX
  %2803 = load i64, i64* %PC
  %2804 = add i64 %2803, 3
  store i64 %2804, i64* %PC
  %2805 = trunc i64 %2802 to i32
  %2806 = sub i32 %2805, 6
  %2807 = zext i32 %2806 to i64
  store i64 %2807, i64* %RDX, align 8, !tbaa !2428
  %2808 = icmp ult i32 %2805, 6
  %2809 = zext i1 %2808 to i8
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2809, i8* %2810, align 1, !tbaa !2432
  %2811 = and i32 %2806, 255
  %2812 = call i32 @llvm.ctpop.i32(i32 %2811) #16
  %2813 = trunc i32 %2812 to i8
  %2814 = and i8 %2813, 1
  %2815 = xor i8 %2814, 1
  %2816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2815, i8* %2816, align 1, !tbaa !2446
  %2817 = xor i64 6, %2802
  %2818 = trunc i64 %2817 to i32
  %2819 = xor i32 %2818, %2806
  %2820 = lshr i32 %2819, 4
  %2821 = trunc i32 %2820 to i8
  %2822 = and i8 %2821, 1
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2822, i8* %2823, align 1, !tbaa !2447
  %2824 = icmp eq i32 %2806, 0
  %2825 = zext i1 %2824 to i8
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2825, i8* %2826, align 1, !tbaa !2448
  %2827 = lshr i32 %2806, 31
  %2828 = trunc i32 %2827 to i8
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2828, i8* %2829, align 1, !tbaa !2449
  %2830 = lshr i32 %2805, 31
  %2831 = xor i32 %2827, %2830
  %2832 = add nuw nsw i32 %2831, %2830
  %2833 = icmp eq i32 %2832, 2
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2834, i8* %2835, align 1, !tbaa !2450
  %2836 = load i32, i32* %EDX
  %2837 = zext i32 %2836 to i64
  %2838 = load i64, i64* %PC
  %2839 = add i64 %2838, 3
  store i64 %2839, i64* %PC
  %2840 = shl i64 %2837, 32
  %2841 = ashr exact i64 %2840, 32
  store i64 %2841, i64* %RCX, align 8, !tbaa !2428
  %2842 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2843 = load i64, i64* %RAX
  %2844 = load i64, i64* %RCX
  %2845 = mul i64 %2844, 4
  %2846 = add i64 %2845, %2843
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 5
  store i64 %2848, i64* %PC
  %2849 = inttoptr i64 %2846 to float*
  %2850 = load float, float* %2849
  %2851 = bitcast i8* %2842 to float*
  store float %2850, float* %2851, align 1, !tbaa !2452
  %2852 = getelementptr inbounds i8, i8* %2842, i64 4
  %2853 = bitcast i8* %2852 to float*
  store float 0.000000e+00, float* %2853, align 1, !tbaa !2452
  %2854 = getelementptr inbounds i8, i8* %2842, i64 8
  %2855 = bitcast i8* %2854 to float*
  store float 0.000000e+00, float* %2855, align 1, !tbaa !2452
  %2856 = getelementptr inbounds i8, i8* %2842, i64 12
  %2857 = bitcast i8* %2856 to float*
  store float 0.000000e+00, float* %2857, align 1, !tbaa !2452
  %2858 = load i64, i64* %RBP
  %2859 = sub i64 %2858, 40
  %2860 = load i64, i64* %PC
  %2861 = add i64 %2860, 4
  store i64 %2861, i64* %PC
  %2862 = inttoptr i64 %2859 to i64*
  %2863 = load i64, i64* %2862
  store i64 %2863, i64* %RAX, align 8, !tbaa !2428
  %2864 = load i64, i64* %RBP
  %2865 = sub i64 %2864, 24
  %2866 = load i64, i64* %PC
  %2867 = add i64 %2866, 3
  store i64 %2867, i64* %PC
  %2868 = inttoptr i64 %2865 to i32*
  %2869 = load i32, i32* %2868
  %2870 = zext i32 %2869 to i64
  store i64 %2870, i64* %RDX, align 8, !tbaa !2428
  %2871 = load i64, i64* %RBP
  %2872 = sub i64 %2871, 44
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 3
  store i64 %2874, i64* %PC
  %2875 = inttoptr i64 %2872 to i32*
  %2876 = load i32, i32* %2875
  %2877 = zext i32 %2876 to i64
  store i64 %2877, i64* %RSI, align 8, !tbaa !2428
  %2878 = load i64, i64* %RSI
  %2879 = load i64, i64* %PC
  %2880 = add i64 %2879, 3
  store i64 %2880, i64* %PC
  %2881 = trunc i64 %2878 to i32
  %2882 = sub i32 %2881, 6
  %2883 = zext i32 %2882 to i64
  store i64 %2883, i64* %RSI, align 8, !tbaa !2428
  %2884 = icmp ult i32 %2881, 6
  %2885 = zext i1 %2884 to i8
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2885, i8* %2886, align 1, !tbaa !2432
  %2887 = and i32 %2882, 255
  %2888 = call i32 @llvm.ctpop.i32(i32 %2887) #16
  %2889 = trunc i32 %2888 to i8
  %2890 = and i8 %2889, 1
  %2891 = xor i8 %2890, 1
  %2892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2891, i8* %2892, align 1, !tbaa !2446
  %2893 = xor i64 6, %2878
  %2894 = trunc i64 %2893 to i32
  %2895 = xor i32 %2894, %2882
  %2896 = lshr i32 %2895, 4
  %2897 = trunc i32 %2896 to i8
  %2898 = and i8 %2897, 1
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2898, i8* %2899, align 1, !tbaa !2447
  %2900 = icmp eq i32 %2882, 0
  %2901 = zext i1 %2900 to i8
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2901, i8* %2902, align 1, !tbaa !2448
  %2903 = lshr i32 %2882, 31
  %2904 = trunc i32 %2903 to i8
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2904, i8* %2905, align 1, !tbaa !2449
  %2906 = lshr i32 %2881, 31
  %2907 = xor i32 %2903, %2906
  %2908 = add nuw nsw i32 %2907, %2906
  %2909 = icmp eq i32 %2908, 2
  %2910 = zext i1 %2909 to i8
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2910, i8* %2911, align 1, !tbaa !2450
  %2912 = load i64, i64* %RDX
  %2913 = load i32, i32* %ESI
  %2914 = zext i32 %2913 to i64
  %2915 = load i64, i64* %PC
  %2916 = add i64 %2915, 3
  store i64 %2916, i64* %PC
  %2917 = shl i64 %2912, 32
  %2918 = ashr exact i64 %2917, 32
  %2919 = shl i64 %2914, 32
  %2920 = ashr exact i64 %2919, 32
  %2921 = mul nsw i64 %2920, %2918
  %2922 = trunc i64 %2921 to i32
  %2923 = and i64 %2921, 4294967295
  store i64 %2923, i64* %RDX, align 8, !tbaa !2428
  %2924 = shl i64 %2921, 32
  %2925 = ashr exact i64 %2924, 32
  %2926 = icmp ne i64 %2925, %2921
  %2927 = zext i1 %2926 to i8
  %2928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2927, i8* %2928, align 1, !tbaa !2432
  %2929 = and i32 %2922, 255
  %2930 = call i32 @llvm.ctpop.i32(i32 %2929) #16
  %2931 = trunc i32 %2930 to i8
  %2932 = and i8 %2931, 1
  %2933 = xor i8 %2932, 1
  %2934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2933, i8* %2934, align 1, !tbaa !2446
  %2935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2935, align 1, !tbaa !2447
  %2936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2936, align 1, !tbaa !2448
  %2937 = lshr i32 %2922, 31
  %2938 = trunc i32 %2937 to i8
  %2939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2938, i8* %2939, align 1, !tbaa !2449
  %2940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2927, i8* %2940, align 1, !tbaa !2450
  %2941 = load i64, i64* %RDX
  %2942 = load i64, i64* %RBP
  %2943 = sub i64 %2942, 48
  %2944 = load i64, i64* %PC
  %2945 = add i64 %2944, 3
  store i64 %2945, i64* %PC
  %2946 = trunc i64 %2941 to i32
  %2947 = inttoptr i64 %2943 to i32*
  %2948 = load i32, i32* %2947
  %2949 = add i32 %2948, %2946
  %2950 = zext i32 %2949 to i64
  store i64 %2950, i64* %RDX, align 8, !tbaa !2428
  %2951 = icmp ult i32 %2949, %2946
  %2952 = icmp ult i32 %2949, %2948
  %2953 = or i1 %2951, %2952
  %2954 = zext i1 %2953 to i8
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2954, i8* %2955, align 1, !tbaa !2432
  %2956 = and i32 %2949, 255
  %2957 = call i32 @llvm.ctpop.i32(i32 %2956) #16
  %2958 = trunc i32 %2957 to i8
  %2959 = and i8 %2958, 1
  %2960 = xor i8 %2959, 1
  %2961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2960, i8* %2961, align 1, !tbaa !2446
  %2962 = xor i32 %2948, %2946
  %2963 = xor i32 %2962, %2949
  %2964 = lshr i32 %2963, 4
  %2965 = trunc i32 %2964 to i8
  %2966 = and i8 %2965, 1
  %2967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2966, i8* %2967, align 1, !tbaa !2447
  %2968 = icmp eq i32 %2949, 0
  %2969 = zext i1 %2968 to i8
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2969, i8* %2970, align 1, !tbaa !2448
  %2971 = lshr i32 %2949, 31
  %2972 = trunc i32 %2971 to i8
  %2973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2972, i8* %2973, align 1, !tbaa !2449
  %2974 = lshr i32 %2946, 31
  %2975 = lshr i32 %2948, 31
  %2976 = xor i32 %2971, %2974
  %2977 = xor i32 %2971, %2975
  %2978 = add nuw nsw i32 %2976, %2977
  %2979 = icmp eq i32 %2978, 2
  %2980 = zext i1 %2979 to i8
  %2981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2980, i8* %2981, align 1, !tbaa !2450
  %2982 = load i32, i32* %EDX
  %2983 = zext i32 %2982 to i64
  %2984 = load i64, i64* %PC
  %2985 = add i64 %2984, 3
  store i64 %2985, i64* %PC
  %2986 = shl i64 %2983, 32
  %2987 = ashr exact i64 %2986, 32
  store i64 %2987, i64* %RCX, align 8, !tbaa !2428
  %2988 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2989 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2990 = load i64, i64* %RAX
  %2991 = load i64, i64* %RCX
  %2992 = mul i64 %2991, 4
  %2993 = add i64 %2992, %2990
  %2994 = load i64, i64* %PC
  %2995 = add i64 %2994, 5
  store i64 %2995, i64* %PC
  %2996 = bitcast i8* %2989 to <2 x float>*
  %2997 = load <2 x float>, <2 x float>* %2996, align 1
  %2998 = getelementptr inbounds i8, i8* %2989, i64 8
  %2999 = bitcast i8* %2998 to <2 x i32>*
  %3000 = load <2 x i32>, <2 x i32>* %2999, align 1
  %3001 = inttoptr i64 %2993 to float*
  %3002 = load float, float* %3001
  %3003 = extractelement <2 x float> %2997, i32 0
  %3004 = fmul float %3003, %3002
  %3005 = bitcast i8* %2988 to float*
  store float %3004, float* %3005, align 1, !tbaa !2452
  %3006 = bitcast <2 x float> %2997 to <2 x i32>
  %3007 = extractelement <2 x i32> %3006, i32 1
  %3008 = getelementptr inbounds i8, i8* %2988, i64 4
  %3009 = bitcast i8* %3008 to i32*
  store i32 %3007, i32* %3009, align 1, !tbaa !2452
  %3010 = extractelement <2 x i32> %3000, i32 0
  %3011 = getelementptr inbounds i8, i8* %2988, i64 8
  %3012 = bitcast i8* %3011 to i32*
  store i32 %3010, i32* %3012, align 1, !tbaa !2452
  %3013 = extractelement <2 x i32> %3000, i32 1
  %3014 = getelementptr inbounds i8, i8* %2988, i64 12
  %3015 = bitcast i8* %3014 to i32*
  store i32 %3013, i32* %3015, align 1, !tbaa !2452
  %3016 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3017 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3018 = bitcast %union.vec128_t* %XMM1 to i8*
  %3019 = load i64, i64* %PC
  %3020 = add i64 %3019, 4
  store i64 %3020, i64* %PC
  %3021 = bitcast i8* %3017 to <2 x float>*
  %3022 = load <2 x float>, <2 x float>* %3021, align 1
  %3023 = getelementptr inbounds i8, i8* %3017, i64 8
  %3024 = bitcast i8* %3023 to <2 x i32>*
  %3025 = load <2 x i32>, <2 x i32>* %3024, align 1
  %3026 = bitcast i8* %3018 to <2 x float>*
  %3027 = load <2 x float>, <2 x float>* %3026, align 1
  %3028 = extractelement <2 x float> %3022, i32 0
  %3029 = extractelement <2 x float> %3027, i32 0
  %3030 = fadd float %3028, %3029
  %3031 = bitcast i8* %3016 to float*
  store float %3030, float* %3031, align 1, !tbaa !2452
  %3032 = bitcast <2 x float> %3022 to <2 x i32>
  %3033 = extractelement <2 x i32> %3032, i32 1
  %3034 = getelementptr inbounds i8, i8* %3016, i64 4
  %3035 = bitcast i8* %3034 to i32*
  store i32 %3033, i32* %3035, align 1, !tbaa !2452
  %3036 = extractelement <2 x i32> %3025, i32 0
  %3037 = getelementptr inbounds i8, i8* %3016, i64 8
  %3038 = bitcast i8* %3037 to i32*
  store i32 %3036, i32* %3038, align 1, !tbaa !2452
  %3039 = extractelement <2 x i32> %3025, i32 1
  %3040 = getelementptr inbounds i8, i8* %3016, i64 12
  %3041 = bitcast i8* %3040 to i32*
  store i32 %3039, i32* %3041, align 1, !tbaa !2452
  %3042 = load i64, i64* %RBP
  %3043 = sub i64 %3042, 32
  %3044 = load i64, i64* %PC
  %3045 = add i64 %3044, 4
  store i64 %3045, i64* %PC
  %3046 = inttoptr i64 %3043 to i64*
  %3047 = load i64, i64* %3046
  store i64 %3047, i64* %RAX, align 8, !tbaa !2428
  %3048 = load i64, i64* %RBP
  %3049 = sub i64 %3048, 44
  %3050 = load i64, i64* %PC
  %3051 = add i64 %3050, 3
  store i64 %3051, i64* %PC
  %3052 = inttoptr i64 %3049 to i32*
  %3053 = load i32, i32* %3052
  %3054 = zext i32 %3053 to i64
  store i64 %3054, i64* %RDX, align 8, !tbaa !2428
  %3055 = load i64, i64* %RDX
  %3056 = load i64, i64* %PC
  %3057 = add i64 %3056, 3
  store i64 %3057, i64* %PC
  %3058 = trunc i64 %3055 to i32
  %3059 = sub i32 %3058, 5
  %3060 = zext i32 %3059 to i64
  store i64 %3060, i64* %RDX, align 8, !tbaa !2428
  %3061 = icmp ult i32 %3058, 5
  %3062 = zext i1 %3061 to i8
  %3063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3062, i8* %3063, align 1, !tbaa !2432
  %3064 = and i32 %3059, 255
  %3065 = call i32 @llvm.ctpop.i32(i32 %3064) #16
  %3066 = trunc i32 %3065 to i8
  %3067 = and i8 %3066, 1
  %3068 = xor i8 %3067, 1
  %3069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3068, i8* %3069, align 1, !tbaa !2446
  %3070 = xor i64 5, %3055
  %3071 = trunc i64 %3070 to i32
  %3072 = xor i32 %3071, %3059
  %3073 = lshr i32 %3072, 4
  %3074 = trunc i32 %3073 to i8
  %3075 = and i8 %3074, 1
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3075, i8* %3076, align 1, !tbaa !2447
  %3077 = icmp eq i32 %3059, 0
  %3078 = zext i1 %3077 to i8
  %3079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3078, i8* %3079, align 1, !tbaa !2448
  %3080 = lshr i32 %3059, 31
  %3081 = trunc i32 %3080 to i8
  %3082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3081, i8* %3082, align 1, !tbaa !2449
  %3083 = lshr i32 %3058, 31
  %3084 = xor i32 %3080, %3083
  %3085 = add nuw nsw i32 %3084, %3083
  %3086 = icmp eq i32 %3085, 2
  %3087 = zext i1 %3086 to i8
  %3088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3087, i8* %3088, align 1, !tbaa !2450
  %3089 = load i32, i32* %EDX
  %3090 = zext i32 %3089 to i64
  %3091 = load i64, i64* %PC
  %3092 = add i64 %3091, 3
  store i64 %3092, i64* %PC
  %3093 = shl i64 %3090, 32
  %3094 = ashr exact i64 %3093, 32
  store i64 %3094, i64* %RCX, align 8, !tbaa !2428
  %3095 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3096 = load i64, i64* %RAX
  %3097 = load i64, i64* %RCX
  %3098 = mul i64 %3097, 4
  %3099 = add i64 %3098, %3096
  %3100 = load i64, i64* %PC
  %3101 = add i64 %3100, 5
  store i64 %3101, i64* %PC
  %3102 = inttoptr i64 %3099 to float*
  %3103 = load float, float* %3102
  %3104 = bitcast i8* %3095 to float*
  store float %3103, float* %3104, align 1, !tbaa !2452
  %3105 = getelementptr inbounds i8, i8* %3095, i64 4
  %3106 = bitcast i8* %3105 to float*
  store float 0.000000e+00, float* %3106, align 1, !tbaa !2452
  %3107 = getelementptr inbounds i8, i8* %3095, i64 8
  %3108 = bitcast i8* %3107 to float*
  store float 0.000000e+00, float* %3108, align 1, !tbaa !2452
  %3109 = getelementptr inbounds i8, i8* %3095, i64 12
  %3110 = bitcast i8* %3109 to float*
  store float 0.000000e+00, float* %3110, align 1, !tbaa !2452
  %3111 = load i64, i64* %RBP
  %3112 = sub i64 %3111, 40
  %3113 = load i64, i64* %PC
  %3114 = add i64 %3113, 4
  store i64 %3114, i64* %PC
  %3115 = inttoptr i64 %3112 to i64*
  %3116 = load i64, i64* %3115
  store i64 %3116, i64* %RAX, align 8, !tbaa !2428
  %3117 = load i64, i64* %RBP
  %3118 = sub i64 %3117, 24
  %3119 = load i64, i64* %PC
  %3120 = add i64 %3119, 3
  store i64 %3120, i64* %PC
  %3121 = inttoptr i64 %3118 to i32*
  %3122 = load i32, i32* %3121
  %3123 = zext i32 %3122 to i64
  store i64 %3123, i64* %RDX, align 8, !tbaa !2428
  %3124 = load i64, i64* %RBP
  %3125 = sub i64 %3124, 44
  %3126 = load i64, i64* %PC
  %3127 = add i64 %3126, 3
  store i64 %3127, i64* %PC
  %3128 = inttoptr i64 %3125 to i32*
  %3129 = load i32, i32* %3128
  %3130 = zext i32 %3129 to i64
  store i64 %3130, i64* %RSI, align 8, !tbaa !2428
  %3131 = load i64, i64* %RSI
  %3132 = load i64, i64* %PC
  %3133 = add i64 %3132, 3
  store i64 %3133, i64* %PC
  %3134 = trunc i64 %3131 to i32
  %3135 = sub i32 %3134, 5
  %3136 = zext i32 %3135 to i64
  store i64 %3136, i64* %RSI, align 8, !tbaa !2428
  %3137 = icmp ult i32 %3134, 5
  %3138 = zext i1 %3137 to i8
  %3139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3138, i8* %3139, align 1, !tbaa !2432
  %3140 = and i32 %3135, 255
  %3141 = call i32 @llvm.ctpop.i32(i32 %3140) #16
  %3142 = trunc i32 %3141 to i8
  %3143 = and i8 %3142, 1
  %3144 = xor i8 %3143, 1
  %3145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3144, i8* %3145, align 1, !tbaa !2446
  %3146 = xor i64 5, %3131
  %3147 = trunc i64 %3146 to i32
  %3148 = xor i32 %3147, %3135
  %3149 = lshr i32 %3148, 4
  %3150 = trunc i32 %3149 to i8
  %3151 = and i8 %3150, 1
  %3152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3151, i8* %3152, align 1, !tbaa !2447
  %3153 = icmp eq i32 %3135, 0
  %3154 = zext i1 %3153 to i8
  %3155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3154, i8* %3155, align 1, !tbaa !2448
  %3156 = lshr i32 %3135, 31
  %3157 = trunc i32 %3156 to i8
  %3158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3157, i8* %3158, align 1, !tbaa !2449
  %3159 = lshr i32 %3134, 31
  %3160 = xor i32 %3156, %3159
  %3161 = add nuw nsw i32 %3160, %3159
  %3162 = icmp eq i32 %3161, 2
  %3163 = zext i1 %3162 to i8
  %3164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3163, i8* %3164, align 1, !tbaa !2450
  %3165 = load i64, i64* %RDX
  %3166 = load i32, i32* %ESI
  %3167 = zext i32 %3166 to i64
  %3168 = load i64, i64* %PC
  %3169 = add i64 %3168, 3
  store i64 %3169, i64* %PC
  %3170 = shl i64 %3165, 32
  %3171 = ashr exact i64 %3170, 32
  %3172 = shl i64 %3167, 32
  %3173 = ashr exact i64 %3172, 32
  %3174 = mul nsw i64 %3173, %3171
  %3175 = trunc i64 %3174 to i32
  %3176 = and i64 %3174, 4294967295
  store i64 %3176, i64* %RDX, align 8, !tbaa !2428
  %3177 = shl i64 %3174, 32
  %3178 = ashr exact i64 %3177, 32
  %3179 = icmp ne i64 %3178, %3174
  %3180 = zext i1 %3179 to i8
  %3181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3180, i8* %3181, align 1, !tbaa !2432
  %3182 = and i32 %3175, 255
  %3183 = call i32 @llvm.ctpop.i32(i32 %3182) #16
  %3184 = trunc i32 %3183 to i8
  %3185 = and i8 %3184, 1
  %3186 = xor i8 %3185, 1
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3186, i8* %3187, align 1, !tbaa !2446
  %3188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3188, align 1, !tbaa !2447
  %3189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3189, align 1, !tbaa !2448
  %3190 = lshr i32 %3175, 31
  %3191 = trunc i32 %3190 to i8
  %3192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3191, i8* %3192, align 1, !tbaa !2449
  %3193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3180, i8* %3193, align 1, !tbaa !2450
  %3194 = load i64, i64* %RDX
  %3195 = load i64, i64* %RBP
  %3196 = sub i64 %3195, 48
  %3197 = load i64, i64* %PC
  %3198 = add i64 %3197, 3
  store i64 %3198, i64* %PC
  %3199 = trunc i64 %3194 to i32
  %3200 = inttoptr i64 %3196 to i32*
  %3201 = load i32, i32* %3200
  %3202 = add i32 %3201, %3199
  %3203 = zext i32 %3202 to i64
  store i64 %3203, i64* %RDX, align 8, !tbaa !2428
  %3204 = icmp ult i32 %3202, %3199
  %3205 = icmp ult i32 %3202, %3201
  %3206 = or i1 %3204, %3205
  %3207 = zext i1 %3206 to i8
  %3208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3207, i8* %3208, align 1, !tbaa !2432
  %3209 = and i32 %3202, 255
  %3210 = call i32 @llvm.ctpop.i32(i32 %3209) #16
  %3211 = trunc i32 %3210 to i8
  %3212 = and i8 %3211, 1
  %3213 = xor i8 %3212, 1
  %3214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3213, i8* %3214, align 1, !tbaa !2446
  %3215 = xor i32 %3201, %3199
  %3216 = xor i32 %3215, %3202
  %3217 = lshr i32 %3216, 4
  %3218 = trunc i32 %3217 to i8
  %3219 = and i8 %3218, 1
  %3220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3219, i8* %3220, align 1, !tbaa !2447
  %3221 = icmp eq i32 %3202, 0
  %3222 = zext i1 %3221 to i8
  %3223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3222, i8* %3223, align 1, !tbaa !2448
  %3224 = lshr i32 %3202, 31
  %3225 = trunc i32 %3224 to i8
  %3226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3225, i8* %3226, align 1, !tbaa !2449
  %3227 = lshr i32 %3199, 31
  %3228 = lshr i32 %3201, 31
  %3229 = xor i32 %3224, %3227
  %3230 = xor i32 %3224, %3228
  %3231 = add nuw nsw i32 %3229, %3230
  %3232 = icmp eq i32 %3231, 2
  %3233 = zext i1 %3232 to i8
  %3234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3233, i8* %3234, align 1, !tbaa !2450
  %3235 = load i32, i32* %EDX
  %3236 = zext i32 %3235 to i64
  %3237 = load i64, i64* %PC
  %3238 = add i64 %3237, 3
  store i64 %3238, i64* %PC
  %3239 = shl i64 %3236, 32
  %3240 = ashr exact i64 %3239, 32
  store i64 %3240, i64* %RCX, align 8, !tbaa !2428
  %3241 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3242 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3243 = load i64, i64* %RAX
  %3244 = load i64, i64* %RCX
  %3245 = mul i64 %3244, 4
  %3246 = add i64 %3245, %3243
  %3247 = load i64, i64* %PC
  %3248 = add i64 %3247, 5
  store i64 %3248, i64* %PC
  %3249 = bitcast i8* %3242 to <2 x float>*
  %3250 = load <2 x float>, <2 x float>* %3249, align 1
  %3251 = getelementptr inbounds i8, i8* %3242, i64 8
  %3252 = bitcast i8* %3251 to <2 x i32>*
  %3253 = load <2 x i32>, <2 x i32>* %3252, align 1
  %3254 = inttoptr i64 %3246 to float*
  %3255 = load float, float* %3254
  %3256 = extractelement <2 x float> %3250, i32 0
  %3257 = fmul float %3256, %3255
  %3258 = bitcast i8* %3241 to float*
  store float %3257, float* %3258, align 1, !tbaa !2452
  %3259 = bitcast <2 x float> %3250 to <2 x i32>
  %3260 = extractelement <2 x i32> %3259, i32 1
  %3261 = getelementptr inbounds i8, i8* %3241, i64 4
  %3262 = bitcast i8* %3261 to i32*
  store i32 %3260, i32* %3262, align 1, !tbaa !2452
  %3263 = extractelement <2 x i32> %3253, i32 0
  %3264 = getelementptr inbounds i8, i8* %3241, i64 8
  %3265 = bitcast i8* %3264 to i32*
  store i32 %3263, i32* %3265, align 1, !tbaa !2452
  %3266 = extractelement <2 x i32> %3253, i32 1
  %3267 = getelementptr inbounds i8, i8* %3241, i64 12
  %3268 = bitcast i8* %3267 to i32*
  store i32 %3266, i32* %3268, align 1, !tbaa !2452
  %3269 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3270 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3271 = bitcast %union.vec128_t* %XMM1 to i8*
  %3272 = load i64, i64* %PC
  %3273 = add i64 %3272, 4
  store i64 %3273, i64* %PC
  %3274 = bitcast i8* %3270 to <2 x float>*
  %3275 = load <2 x float>, <2 x float>* %3274, align 1
  %3276 = getelementptr inbounds i8, i8* %3270, i64 8
  %3277 = bitcast i8* %3276 to <2 x i32>*
  %3278 = load <2 x i32>, <2 x i32>* %3277, align 1
  %3279 = bitcast i8* %3271 to <2 x float>*
  %3280 = load <2 x float>, <2 x float>* %3279, align 1
  %3281 = extractelement <2 x float> %3275, i32 0
  %3282 = extractelement <2 x float> %3280, i32 0
  %3283 = fadd float %3281, %3282
  %3284 = bitcast i8* %3269 to float*
  store float %3283, float* %3284, align 1, !tbaa !2452
  %3285 = bitcast <2 x float> %3275 to <2 x i32>
  %3286 = extractelement <2 x i32> %3285, i32 1
  %3287 = getelementptr inbounds i8, i8* %3269, i64 4
  %3288 = bitcast i8* %3287 to i32*
  store i32 %3286, i32* %3288, align 1, !tbaa !2452
  %3289 = extractelement <2 x i32> %3278, i32 0
  %3290 = getelementptr inbounds i8, i8* %3269, i64 8
  %3291 = bitcast i8* %3290 to i32*
  store i32 %3289, i32* %3291, align 1, !tbaa !2452
  %3292 = extractelement <2 x i32> %3278, i32 1
  %3293 = getelementptr inbounds i8, i8* %3269, i64 12
  %3294 = bitcast i8* %3293 to i32*
  store i32 %3292, i32* %3294, align 1, !tbaa !2452
  %3295 = load i64, i64* %RBP
  %3296 = sub i64 %3295, 32
  %3297 = load i64, i64* %PC
  %3298 = add i64 %3297, 4
  store i64 %3298, i64* %PC
  %3299 = inttoptr i64 %3296 to i64*
  %3300 = load i64, i64* %3299
  store i64 %3300, i64* %RAX, align 8, !tbaa !2428
  %3301 = load i64, i64* %RBP
  %3302 = sub i64 %3301, 44
  %3303 = load i64, i64* %PC
  %3304 = add i64 %3303, 3
  store i64 %3304, i64* %PC
  %3305 = inttoptr i64 %3302 to i32*
  %3306 = load i32, i32* %3305
  %3307 = zext i32 %3306 to i64
  store i64 %3307, i64* %RDX, align 8, !tbaa !2428
  %3308 = load i64, i64* %RDX
  %3309 = load i64, i64* %PC
  %3310 = add i64 %3309, 3
  store i64 %3310, i64* %PC
  %3311 = trunc i64 %3308 to i32
  %3312 = sub i32 %3311, 4
  %3313 = zext i32 %3312 to i64
  store i64 %3313, i64* %RDX, align 8, !tbaa !2428
  %3314 = icmp ult i32 %3311, 4
  %3315 = zext i1 %3314 to i8
  %3316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3315, i8* %3316, align 1, !tbaa !2432
  %3317 = and i32 %3312, 255
  %3318 = call i32 @llvm.ctpop.i32(i32 %3317) #16
  %3319 = trunc i32 %3318 to i8
  %3320 = and i8 %3319, 1
  %3321 = xor i8 %3320, 1
  %3322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3321, i8* %3322, align 1, !tbaa !2446
  %3323 = xor i64 4, %3308
  %3324 = trunc i64 %3323 to i32
  %3325 = xor i32 %3324, %3312
  %3326 = lshr i32 %3325, 4
  %3327 = trunc i32 %3326 to i8
  %3328 = and i8 %3327, 1
  %3329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3328, i8* %3329, align 1, !tbaa !2447
  %3330 = icmp eq i32 %3312, 0
  %3331 = zext i1 %3330 to i8
  %3332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3331, i8* %3332, align 1, !tbaa !2448
  %3333 = lshr i32 %3312, 31
  %3334 = trunc i32 %3333 to i8
  %3335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3334, i8* %3335, align 1, !tbaa !2449
  %3336 = lshr i32 %3311, 31
  %3337 = xor i32 %3333, %3336
  %3338 = add nuw nsw i32 %3337, %3336
  %3339 = icmp eq i32 %3338, 2
  %3340 = zext i1 %3339 to i8
  %3341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3340, i8* %3341, align 1, !tbaa !2450
  %3342 = load i32, i32* %EDX
  %3343 = zext i32 %3342 to i64
  %3344 = load i64, i64* %PC
  %3345 = add i64 %3344, 3
  store i64 %3345, i64* %PC
  %3346 = shl i64 %3343, 32
  %3347 = ashr exact i64 %3346, 32
  store i64 %3347, i64* %RCX, align 8, !tbaa !2428
  %3348 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3349 = load i64, i64* %RAX
  %3350 = load i64, i64* %RCX
  %3351 = mul i64 %3350, 4
  %3352 = add i64 %3351, %3349
  %3353 = load i64, i64* %PC
  %3354 = add i64 %3353, 5
  store i64 %3354, i64* %PC
  %3355 = inttoptr i64 %3352 to float*
  %3356 = load float, float* %3355
  %3357 = bitcast i8* %3348 to float*
  store float %3356, float* %3357, align 1, !tbaa !2452
  %3358 = getelementptr inbounds i8, i8* %3348, i64 4
  %3359 = bitcast i8* %3358 to float*
  store float 0.000000e+00, float* %3359, align 1, !tbaa !2452
  %3360 = getelementptr inbounds i8, i8* %3348, i64 8
  %3361 = bitcast i8* %3360 to float*
  store float 0.000000e+00, float* %3361, align 1, !tbaa !2452
  %3362 = getelementptr inbounds i8, i8* %3348, i64 12
  %3363 = bitcast i8* %3362 to float*
  store float 0.000000e+00, float* %3363, align 1, !tbaa !2452
  %3364 = load i64, i64* %RBP
  %3365 = sub i64 %3364, 40
  %3366 = load i64, i64* %PC
  %3367 = add i64 %3366, 4
  store i64 %3367, i64* %PC
  %3368 = inttoptr i64 %3365 to i64*
  %3369 = load i64, i64* %3368
  store i64 %3369, i64* %RAX, align 8, !tbaa !2428
  %3370 = load i64, i64* %RBP
  %3371 = sub i64 %3370, 24
  %3372 = load i64, i64* %PC
  %3373 = add i64 %3372, 3
  store i64 %3373, i64* %PC
  %3374 = inttoptr i64 %3371 to i32*
  %3375 = load i32, i32* %3374
  %3376 = zext i32 %3375 to i64
  store i64 %3376, i64* %RDX, align 8, !tbaa !2428
  %3377 = load i64, i64* %RBP
  %3378 = sub i64 %3377, 44
  %3379 = load i64, i64* %PC
  %3380 = add i64 %3379, 3
  store i64 %3380, i64* %PC
  %3381 = inttoptr i64 %3378 to i32*
  %3382 = load i32, i32* %3381
  %3383 = zext i32 %3382 to i64
  store i64 %3383, i64* %RSI, align 8, !tbaa !2428
  %3384 = load i64, i64* %RSI
  %3385 = load i64, i64* %PC
  %3386 = add i64 %3385, 3
  store i64 %3386, i64* %PC
  %3387 = trunc i64 %3384 to i32
  %3388 = sub i32 %3387, 4
  %3389 = zext i32 %3388 to i64
  store i64 %3389, i64* %RSI, align 8, !tbaa !2428
  %3390 = icmp ult i32 %3387, 4
  %3391 = zext i1 %3390 to i8
  %3392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3391, i8* %3392, align 1, !tbaa !2432
  %3393 = and i32 %3388, 255
  %3394 = call i32 @llvm.ctpop.i32(i32 %3393) #16
  %3395 = trunc i32 %3394 to i8
  %3396 = and i8 %3395, 1
  %3397 = xor i8 %3396, 1
  %3398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3397, i8* %3398, align 1, !tbaa !2446
  %3399 = xor i64 4, %3384
  %3400 = trunc i64 %3399 to i32
  %3401 = xor i32 %3400, %3388
  %3402 = lshr i32 %3401, 4
  %3403 = trunc i32 %3402 to i8
  %3404 = and i8 %3403, 1
  %3405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3404, i8* %3405, align 1, !tbaa !2447
  %3406 = icmp eq i32 %3388, 0
  %3407 = zext i1 %3406 to i8
  %3408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3407, i8* %3408, align 1, !tbaa !2448
  %3409 = lshr i32 %3388, 31
  %3410 = trunc i32 %3409 to i8
  %3411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3410, i8* %3411, align 1, !tbaa !2449
  %3412 = lshr i32 %3387, 31
  %3413 = xor i32 %3409, %3412
  %3414 = add nuw nsw i32 %3413, %3412
  %3415 = icmp eq i32 %3414, 2
  %3416 = zext i1 %3415 to i8
  %3417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3416, i8* %3417, align 1, !tbaa !2450
  %3418 = load i64, i64* %RDX
  %3419 = load i32, i32* %ESI
  %3420 = zext i32 %3419 to i64
  %3421 = load i64, i64* %PC
  %3422 = add i64 %3421, 3
  store i64 %3422, i64* %PC
  %3423 = shl i64 %3418, 32
  %3424 = ashr exact i64 %3423, 32
  %3425 = shl i64 %3420, 32
  %3426 = ashr exact i64 %3425, 32
  %3427 = mul nsw i64 %3426, %3424
  %3428 = trunc i64 %3427 to i32
  %3429 = and i64 %3427, 4294967295
  store i64 %3429, i64* %RDX, align 8, !tbaa !2428
  %3430 = shl i64 %3427, 32
  %3431 = ashr exact i64 %3430, 32
  %3432 = icmp ne i64 %3431, %3427
  %3433 = zext i1 %3432 to i8
  %3434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3433, i8* %3434, align 1, !tbaa !2432
  %3435 = and i32 %3428, 255
  %3436 = call i32 @llvm.ctpop.i32(i32 %3435) #16
  %3437 = trunc i32 %3436 to i8
  %3438 = and i8 %3437, 1
  %3439 = xor i8 %3438, 1
  %3440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3439, i8* %3440, align 1, !tbaa !2446
  %3441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3441, align 1, !tbaa !2447
  %3442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3442, align 1, !tbaa !2448
  %3443 = lshr i32 %3428, 31
  %3444 = trunc i32 %3443 to i8
  %3445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3444, i8* %3445, align 1, !tbaa !2449
  %3446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3433, i8* %3446, align 1, !tbaa !2450
  %3447 = load i64, i64* %RDX
  %3448 = load i64, i64* %RBP
  %3449 = sub i64 %3448, 48
  %3450 = load i64, i64* %PC
  %3451 = add i64 %3450, 3
  store i64 %3451, i64* %PC
  %3452 = trunc i64 %3447 to i32
  %3453 = inttoptr i64 %3449 to i32*
  %3454 = load i32, i32* %3453
  %3455 = add i32 %3454, %3452
  %3456 = zext i32 %3455 to i64
  store i64 %3456, i64* %RDX, align 8, !tbaa !2428
  %3457 = icmp ult i32 %3455, %3452
  %3458 = icmp ult i32 %3455, %3454
  %3459 = or i1 %3457, %3458
  %3460 = zext i1 %3459 to i8
  %3461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3460, i8* %3461, align 1, !tbaa !2432
  %3462 = and i32 %3455, 255
  %3463 = call i32 @llvm.ctpop.i32(i32 %3462) #16
  %3464 = trunc i32 %3463 to i8
  %3465 = and i8 %3464, 1
  %3466 = xor i8 %3465, 1
  %3467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3466, i8* %3467, align 1, !tbaa !2446
  %3468 = xor i32 %3454, %3452
  %3469 = xor i32 %3468, %3455
  %3470 = lshr i32 %3469, 4
  %3471 = trunc i32 %3470 to i8
  %3472 = and i8 %3471, 1
  %3473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3472, i8* %3473, align 1, !tbaa !2447
  %3474 = icmp eq i32 %3455, 0
  %3475 = zext i1 %3474 to i8
  %3476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3475, i8* %3476, align 1, !tbaa !2448
  %3477 = lshr i32 %3455, 31
  %3478 = trunc i32 %3477 to i8
  %3479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3478, i8* %3479, align 1, !tbaa !2449
  %3480 = lshr i32 %3452, 31
  %3481 = lshr i32 %3454, 31
  %3482 = xor i32 %3477, %3480
  %3483 = xor i32 %3477, %3481
  %3484 = add nuw nsw i32 %3482, %3483
  %3485 = icmp eq i32 %3484, 2
  %3486 = zext i1 %3485 to i8
  %3487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3486, i8* %3487, align 1, !tbaa !2450
  %3488 = load i32, i32* %EDX
  %3489 = zext i32 %3488 to i64
  %3490 = load i64, i64* %PC
  %3491 = add i64 %3490, 3
  store i64 %3491, i64* %PC
  %3492 = shl i64 %3489, 32
  %3493 = ashr exact i64 %3492, 32
  store i64 %3493, i64* %RCX, align 8, !tbaa !2428
  %3494 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3495 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3496 = load i64, i64* %RAX
  %3497 = load i64, i64* %RCX
  %3498 = mul i64 %3497, 4
  %3499 = add i64 %3498, %3496
  %3500 = load i64, i64* %PC
  %3501 = add i64 %3500, 5
  store i64 %3501, i64* %PC
  %3502 = bitcast i8* %3495 to <2 x float>*
  %3503 = load <2 x float>, <2 x float>* %3502, align 1
  %3504 = getelementptr inbounds i8, i8* %3495, i64 8
  %3505 = bitcast i8* %3504 to <2 x i32>*
  %3506 = load <2 x i32>, <2 x i32>* %3505, align 1
  %3507 = inttoptr i64 %3499 to float*
  %3508 = load float, float* %3507
  %3509 = extractelement <2 x float> %3503, i32 0
  %3510 = fmul float %3509, %3508
  %3511 = bitcast i8* %3494 to float*
  store float %3510, float* %3511, align 1, !tbaa !2452
  %3512 = bitcast <2 x float> %3503 to <2 x i32>
  %3513 = extractelement <2 x i32> %3512, i32 1
  %3514 = getelementptr inbounds i8, i8* %3494, i64 4
  %3515 = bitcast i8* %3514 to i32*
  store i32 %3513, i32* %3515, align 1, !tbaa !2452
  %3516 = extractelement <2 x i32> %3506, i32 0
  %3517 = getelementptr inbounds i8, i8* %3494, i64 8
  %3518 = bitcast i8* %3517 to i32*
  store i32 %3516, i32* %3518, align 1, !tbaa !2452
  %3519 = extractelement <2 x i32> %3506, i32 1
  %3520 = getelementptr inbounds i8, i8* %3494, i64 12
  %3521 = bitcast i8* %3520 to i32*
  store i32 %3519, i32* %3521, align 1, !tbaa !2452
  %3522 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3523 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3524 = bitcast %union.vec128_t* %XMM1 to i8*
  %3525 = load i64, i64* %PC
  %3526 = add i64 %3525, 4
  store i64 %3526, i64* %PC
  %3527 = bitcast i8* %3523 to <2 x float>*
  %3528 = load <2 x float>, <2 x float>* %3527, align 1
  %3529 = getelementptr inbounds i8, i8* %3523, i64 8
  %3530 = bitcast i8* %3529 to <2 x i32>*
  %3531 = load <2 x i32>, <2 x i32>* %3530, align 1
  %3532 = bitcast i8* %3524 to <2 x float>*
  %3533 = load <2 x float>, <2 x float>* %3532, align 1
  %3534 = extractelement <2 x float> %3528, i32 0
  %3535 = extractelement <2 x float> %3533, i32 0
  %3536 = fadd float %3534, %3535
  %3537 = bitcast i8* %3522 to float*
  store float %3536, float* %3537, align 1, !tbaa !2452
  %3538 = bitcast <2 x float> %3528 to <2 x i32>
  %3539 = extractelement <2 x i32> %3538, i32 1
  %3540 = getelementptr inbounds i8, i8* %3522, i64 4
  %3541 = bitcast i8* %3540 to i32*
  store i32 %3539, i32* %3541, align 1, !tbaa !2452
  %3542 = extractelement <2 x i32> %3531, i32 0
  %3543 = getelementptr inbounds i8, i8* %3522, i64 8
  %3544 = bitcast i8* %3543 to i32*
  store i32 %3542, i32* %3544, align 1, !tbaa !2452
  %3545 = extractelement <2 x i32> %3531, i32 1
  %3546 = getelementptr inbounds i8, i8* %3522, i64 12
  %3547 = bitcast i8* %3546 to i32*
  store i32 %3545, i32* %3547, align 1, !tbaa !2452
  %3548 = load i64, i64* %RBP
  %3549 = sub i64 %3548, 32
  %3550 = load i64, i64* %PC
  %3551 = add i64 %3550, 4
  store i64 %3551, i64* %PC
  %3552 = inttoptr i64 %3549 to i64*
  %3553 = load i64, i64* %3552
  store i64 %3553, i64* %RAX, align 8, !tbaa !2428
  %3554 = load i64, i64* %RBP
  %3555 = sub i64 %3554, 44
  %3556 = load i64, i64* %PC
  %3557 = add i64 %3556, 3
  store i64 %3557, i64* %PC
  %3558 = inttoptr i64 %3555 to i32*
  %3559 = load i32, i32* %3558
  %3560 = zext i32 %3559 to i64
  store i64 %3560, i64* %RDX, align 8, !tbaa !2428
  %3561 = load i64, i64* %RDX
  %3562 = load i64, i64* %PC
  %3563 = add i64 %3562, 3
  store i64 %3563, i64* %PC
  %3564 = trunc i64 %3561 to i32
  %3565 = sub i32 %3564, 3
  %3566 = zext i32 %3565 to i64
  store i64 %3566, i64* %RDX, align 8, !tbaa !2428
  %3567 = icmp ult i32 %3564, 3
  %3568 = zext i1 %3567 to i8
  %3569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3568, i8* %3569, align 1, !tbaa !2432
  %3570 = and i32 %3565, 255
  %3571 = call i32 @llvm.ctpop.i32(i32 %3570) #16
  %3572 = trunc i32 %3571 to i8
  %3573 = and i8 %3572, 1
  %3574 = xor i8 %3573, 1
  %3575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3574, i8* %3575, align 1, !tbaa !2446
  %3576 = xor i64 3, %3561
  %3577 = trunc i64 %3576 to i32
  %3578 = xor i32 %3577, %3565
  %3579 = lshr i32 %3578, 4
  %3580 = trunc i32 %3579 to i8
  %3581 = and i8 %3580, 1
  %3582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3581, i8* %3582, align 1, !tbaa !2447
  %3583 = icmp eq i32 %3565, 0
  %3584 = zext i1 %3583 to i8
  %3585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3584, i8* %3585, align 1, !tbaa !2448
  %3586 = lshr i32 %3565, 31
  %3587 = trunc i32 %3586 to i8
  %3588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3587, i8* %3588, align 1, !tbaa !2449
  %3589 = lshr i32 %3564, 31
  %3590 = xor i32 %3586, %3589
  %3591 = add nuw nsw i32 %3590, %3589
  %3592 = icmp eq i32 %3591, 2
  %3593 = zext i1 %3592 to i8
  %3594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3593, i8* %3594, align 1, !tbaa !2450
  %3595 = load i32, i32* %EDX
  %3596 = zext i32 %3595 to i64
  %3597 = load i64, i64* %PC
  %3598 = add i64 %3597, 3
  store i64 %3598, i64* %PC
  %3599 = shl i64 %3596, 32
  %3600 = ashr exact i64 %3599, 32
  store i64 %3600, i64* %RCX, align 8, !tbaa !2428
  %3601 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3602 = load i64, i64* %RAX
  %3603 = load i64, i64* %RCX
  %3604 = mul i64 %3603, 4
  %3605 = add i64 %3604, %3602
  %3606 = load i64, i64* %PC
  %3607 = add i64 %3606, 5
  store i64 %3607, i64* %PC
  %3608 = inttoptr i64 %3605 to float*
  %3609 = load float, float* %3608
  %3610 = bitcast i8* %3601 to float*
  store float %3609, float* %3610, align 1, !tbaa !2452
  %3611 = getelementptr inbounds i8, i8* %3601, i64 4
  %3612 = bitcast i8* %3611 to float*
  store float 0.000000e+00, float* %3612, align 1, !tbaa !2452
  %3613 = getelementptr inbounds i8, i8* %3601, i64 8
  %3614 = bitcast i8* %3613 to float*
  store float 0.000000e+00, float* %3614, align 1, !tbaa !2452
  %3615 = getelementptr inbounds i8, i8* %3601, i64 12
  %3616 = bitcast i8* %3615 to float*
  store float 0.000000e+00, float* %3616, align 1, !tbaa !2452
  %3617 = load i64, i64* %RBP
  %3618 = sub i64 %3617, 40
  %3619 = load i64, i64* %PC
  %3620 = add i64 %3619, 4
  store i64 %3620, i64* %PC
  %3621 = inttoptr i64 %3618 to i64*
  %3622 = load i64, i64* %3621
  store i64 %3622, i64* %RAX, align 8, !tbaa !2428
  %3623 = load i64, i64* %RBP
  %3624 = sub i64 %3623, 24
  %3625 = load i64, i64* %PC
  %3626 = add i64 %3625, 3
  store i64 %3626, i64* %PC
  %3627 = inttoptr i64 %3624 to i32*
  %3628 = load i32, i32* %3627
  %3629 = zext i32 %3628 to i64
  store i64 %3629, i64* %RDX, align 8, !tbaa !2428
  %3630 = load i64, i64* %RBP
  %3631 = sub i64 %3630, 44
  %3632 = load i64, i64* %PC
  %3633 = add i64 %3632, 3
  store i64 %3633, i64* %PC
  %3634 = inttoptr i64 %3631 to i32*
  %3635 = load i32, i32* %3634
  %3636 = zext i32 %3635 to i64
  store i64 %3636, i64* %RSI, align 8, !tbaa !2428
  %3637 = load i64, i64* %RSI
  %3638 = load i64, i64* %PC
  %3639 = add i64 %3638, 3
  store i64 %3639, i64* %PC
  %3640 = trunc i64 %3637 to i32
  %3641 = sub i32 %3640, 3
  %3642 = zext i32 %3641 to i64
  store i64 %3642, i64* %RSI, align 8, !tbaa !2428
  %3643 = icmp ult i32 %3640, 3
  %3644 = zext i1 %3643 to i8
  %3645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3644, i8* %3645, align 1, !tbaa !2432
  %3646 = and i32 %3641, 255
  %3647 = call i32 @llvm.ctpop.i32(i32 %3646) #16
  %3648 = trunc i32 %3647 to i8
  %3649 = and i8 %3648, 1
  %3650 = xor i8 %3649, 1
  %3651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3650, i8* %3651, align 1, !tbaa !2446
  %3652 = xor i64 3, %3637
  %3653 = trunc i64 %3652 to i32
  %3654 = xor i32 %3653, %3641
  %3655 = lshr i32 %3654, 4
  %3656 = trunc i32 %3655 to i8
  %3657 = and i8 %3656, 1
  %3658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3657, i8* %3658, align 1, !tbaa !2447
  %3659 = icmp eq i32 %3641, 0
  %3660 = zext i1 %3659 to i8
  %3661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3660, i8* %3661, align 1, !tbaa !2448
  %3662 = lshr i32 %3641, 31
  %3663 = trunc i32 %3662 to i8
  %3664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3663, i8* %3664, align 1, !tbaa !2449
  %3665 = lshr i32 %3640, 31
  %3666 = xor i32 %3662, %3665
  %3667 = add nuw nsw i32 %3666, %3665
  %3668 = icmp eq i32 %3667, 2
  %3669 = zext i1 %3668 to i8
  %3670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3669, i8* %3670, align 1, !tbaa !2450
  %3671 = load i64, i64* %RDX
  %3672 = load i32, i32* %ESI
  %3673 = zext i32 %3672 to i64
  %3674 = load i64, i64* %PC
  %3675 = add i64 %3674, 3
  store i64 %3675, i64* %PC
  %3676 = shl i64 %3671, 32
  %3677 = ashr exact i64 %3676, 32
  %3678 = shl i64 %3673, 32
  %3679 = ashr exact i64 %3678, 32
  %3680 = mul nsw i64 %3679, %3677
  %3681 = trunc i64 %3680 to i32
  %3682 = and i64 %3680, 4294967295
  store i64 %3682, i64* %RDX, align 8, !tbaa !2428
  %3683 = shl i64 %3680, 32
  %3684 = ashr exact i64 %3683, 32
  %3685 = icmp ne i64 %3684, %3680
  %3686 = zext i1 %3685 to i8
  %3687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3686, i8* %3687, align 1, !tbaa !2432
  %3688 = and i32 %3681, 255
  %3689 = call i32 @llvm.ctpop.i32(i32 %3688) #16
  %3690 = trunc i32 %3689 to i8
  %3691 = and i8 %3690, 1
  %3692 = xor i8 %3691, 1
  %3693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3692, i8* %3693, align 1, !tbaa !2446
  %3694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3694, align 1, !tbaa !2447
  %3695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3695, align 1, !tbaa !2448
  %3696 = lshr i32 %3681, 31
  %3697 = trunc i32 %3696 to i8
  %3698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3697, i8* %3698, align 1, !tbaa !2449
  %3699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3686, i8* %3699, align 1, !tbaa !2450
  %3700 = load i64, i64* %RDX
  %3701 = load i64, i64* %RBP
  %3702 = sub i64 %3701, 48
  %3703 = load i64, i64* %PC
  %3704 = add i64 %3703, 3
  store i64 %3704, i64* %PC
  %3705 = trunc i64 %3700 to i32
  %3706 = inttoptr i64 %3702 to i32*
  %3707 = load i32, i32* %3706
  %3708 = add i32 %3707, %3705
  %3709 = zext i32 %3708 to i64
  store i64 %3709, i64* %RDX, align 8, !tbaa !2428
  %3710 = icmp ult i32 %3708, %3705
  %3711 = icmp ult i32 %3708, %3707
  %3712 = or i1 %3710, %3711
  %3713 = zext i1 %3712 to i8
  %3714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3713, i8* %3714, align 1, !tbaa !2432
  %3715 = and i32 %3708, 255
  %3716 = call i32 @llvm.ctpop.i32(i32 %3715) #16
  %3717 = trunc i32 %3716 to i8
  %3718 = and i8 %3717, 1
  %3719 = xor i8 %3718, 1
  %3720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3719, i8* %3720, align 1, !tbaa !2446
  %3721 = xor i32 %3707, %3705
  %3722 = xor i32 %3721, %3708
  %3723 = lshr i32 %3722, 4
  %3724 = trunc i32 %3723 to i8
  %3725 = and i8 %3724, 1
  %3726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3725, i8* %3726, align 1, !tbaa !2447
  %3727 = icmp eq i32 %3708, 0
  %3728 = zext i1 %3727 to i8
  %3729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3728, i8* %3729, align 1, !tbaa !2448
  %3730 = lshr i32 %3708, 31
  %3731 = trunc i32 %3730 to i8
  %3732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3731, i8* %3732, align 1, !tbaa !2449
  %3733 = lshr i32 %3705, 31
  %3734 = lshr i32 %3707, 31
  %3735 = xor i32 %3730, %3733
  %3736 = xor i32 %3730, %3734
  %3737 = add nuw nsw i32 %3735, %3736
  %3738 = icmp eq i32 %3737, 2
  %3739 = zext i1 %3738 to i8
  %3740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3739, i8* %3740, align 1, !tbaa !2450
  %3741 = load i32, i32* %EDX
  %3742 = zext i32 %3741 to i64
  %3743 = load i64, i64* %PC
  %3744 = add i64 %3743, 3
  store i64 %3744, i64* %PC
  %3745 = shl i64 %3742, 32
  %3746 = ashr exact i64 %3745, 32
  store i64 %3746, i64* %RCX, align 8, !tbaa !2428
  %3747 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3748 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3749 = load i64, i64* %RAX
  %3750 = load i64, i64* %RCX
  %3751 = mul i64 %3750, 4
  %3752 = add i64 %3751, %3749
  %3753 = load i64, i64* %PC
  %3754 = add i64 %3753, 5
  store i64 %3754, i64* %PC
  %3755 = bitcast i8* %3748 to <2 x float>*
  %3756 = load <2 x float>, <2 x float>* %3755, align 1
  %3757 = getelementptr inbounds i8, i8* %3748, i64 8
  %3758 = bitcast i8* %3757 to <2 x i32>*
  %3759 = load <2 x i32>, <2 x i32>* %3758, align 1
  %3760 = inttoptr i64 %3752 to float*
  %3761 = load float, float* %3760
  %3762 = extractelement <2 x float> %3756, i32 0
  %3763 = fmul float %3762, %3761
  %3764 = bitcast i8* %3747 to float*
  store float %3763, float* %3764, align 1, !tbaa !2452
  %3765 = bitcast <2 x float> %3756 to <2 x i32>
  %3766 = extractelement <2 x i32> %3765, i32 1
  %3767 = getelementptr inbounds i8, i8* %3747, i64 4
  %3768 = bitcast i8* %3767 to i32*
  store i32 %3766, i32* %3768, align 1, !tbaa !2452
  %3769 = extractelement <2 x i32> %3759, i32 0
  %3770 = getelementptr inbounds i8, i8* %3747, i64 8
  %3771 = bitcast i8* %3770 to i32*
  store i32 %3769, i32* %3771, align 1, !tbaa !2452
  %3772 = extractelement <2 x i32> %3759, i32 1
  %3773 = getelementptr inbounds i8, i8* %3747, i64 12
  %3774 = bitcast i8* %3773 to i32*
  store i32 %3772, i32* %3774, align 1, !tbaa !2452
  %3775 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3776 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3777 = bitcast %union.vec128_t* %XMM1 to i8*
  %3778 = load i64, i64* %PC
  %3779 = add i64 %3778, 4
  store i64 %3779, i64* %PC
  %3780 = bitcast i8* %3776 to <2 x float>*
  %3781 = load <2 x float>, <2 x float>* %3780, align 1
  %3782 = getelementptr inbounds i8, i8* %3776, i64 8
  %3783 = bitcast i8* %3782 to <2 x i32>*
  %3784 = load <2 x i32>, <2 x i32>* %3783, align 1
  %3785 = bitcast i8* %3777 to <2 x float>*
  %3786 = load <2 x float>, <2 x float>* %3785, align 1
  %3787 = extractelement <2 x float> %3781, i32 0
  %3788 = extractelement <2 x float> %3786, i32 0
  %3789 = fadd float %3787, %3788
  %3790 = bitcast i8* %3775 to float*
  store float %3789, float* %3790, align 1, !tbaa !2452
  %3791 = bitcast <2 x float> %3781 to <2 x i32>
  %3792 = extractelement <2 x i32> %3791, i32 1
  %3793 = getelementptr inbounds i8, i8* %3775, i64 4
  %3794 = bitcast i8* %3793 to i32*
  store i32 %3792, i32* %3794, align 1, !tbaa !2452
  %3795 = extractelement <2 x i32> %3784, i32 0
  %3796 = getelementptr inbounds i8, i8* %3775, i64 8
  %3797 = bitcast i8* %3796 to i32*
  store i32 %3795, i32* %3797, align 1, !tbaa !2452
  %3798 = extractelement <2 x i32> %3784, i32 1
  %3799 = getelementptr inbounds i8, i8* %3775, i64 12
  %3800 = bitcast i8* %3799 to i32*
  store i32 %3798, i32* %3800, align 1, !tbaa !2452
  %3801 = load i64, i64* %RBP
  %3802 = sub i64 %3801, 32
  %3803 = load i64, i64* %PC
  %3804 = add i64 %3803, 4
  store i64 %3804, i64* %PC
  %3805 = inttoptr i64 %3802 to i64*
  %3806 = load i64, i64* %3805
  store i64 %3806, i64* %RAX, align 8, !tbaa !2428
  %3807 = load i64, i64* %RBP
  %3808 = sub i64 %3807, 44
  %3809 = load i64, i64* %PC
  %3810 = add i64 %3809, 3
  store i64 %3810, i64* %PC
  %3811 = inttoptr i64 %3808 to i32*
  %3812 = load i32, i32* %3811
  %3813 = zext i32 %3812 to i64
  store i64 %3813, i64* %RDX, align 8, !tbaa !2428
  %3814 = load i64, i64* %RDX
  %3815 = load i64, i64* %PC
  %3816 = add i64 %3815, 3
  store i64 %3816, i64* %PC
  %3817 = trunc i64 %3814 to i32
  %3818 = sub i32 %3817, 2
  %3819 = zext i32 %3818 to i64
  store i64 %3819, i64* %RDX, align 8, !tbaa !2428
  %3820 = icmp ult i32 %3817, 2
  %3821 = zext i1 %3820 to i8
  %3822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3821, i8* %3822, align 1, !tbaa !2432
  %3823 = and i32 %3818, 255
  %3824 = call i32 @llvm.ctpop.i32(i32 %3823) #16
  %3825 = trunc i32 %3824 to i8
  %3826 = and i8 %3825, 1
  %3827 = xor i8 %3826, 1
  %3828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3827, i8* %3828, align 1, !tbaa !2446
  %3829 = xor i64 2, %3814
  %3830 = trunc i64 %3829 to i32
  %3831 = xor i32 %3830, %3818
  %3832 = lshr i32 %3831, 4
  %3833 = trunc i32 %3832 to i8
  %3834 = and i8 %3833, 1
  %3835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3834, i8* %3835, align 1, !tbaa !2447
  %3836 = icmp eq i32 %3818, 0
  %3837 = zext i1 %3836 to i8
  %3838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3837, i8* %3838, align 1, !tbaa !2448
  %3839 = lshr i32 %3818, 31
  %3840 = trunc i32 %3839 to i8
  %3841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3840, i8* %3841, align 1, !tbaa !2449
  %3842 = lshr i32 %3817, 31
  %3843 = xor i32 %3839, %3842
  %3844 = add nuw nsw i32 %3843, %3842
  %3845 = icmp eq i32 %3844, 2
  %3846 = zext i1 %3845 to i8
  %3847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3846, i8* %3847, align 1, !tbaa !2450
  %3848 = load i32, i32* %EDX
  %3849 = zext i32 %3848 to i64
  %3850 = load i64, i64* %PC
  %3851 = add i64 %3850, 3
  store i64 %3851, i64* %PC
  %3852 = shl i64 %3849, 32
  %3853 = ashr exact i64 %3852, 32
  store i64 %3853, i64* %RCX, align 8, !tbaa !2428
  %3854 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3855 = load i64, i64* %RAX
  %3856 = load i64, i64* %RCX
  %3857 = mul i64 %3856, 4
  %3858 = add i64 %3857, %3855
  %3859 = load i64, i64* %PC
  %3860 = add i64 %3859, 5
  store i64 %3860, i64* %PC
  %3861 = inttoptr i64 %3858 to float*
  %3862 = load float, float* %3861
  %3863 = bitcast i8* %3854 to float*
  store float %3862, float* %3863, align 1, !tbaa !2452
  %3864 = getelementptr inbounds i8, i8* %3854, i64 4
  %3865 = bitcast i8* %3864 to float*
  store float 0.000000e+00, float* %3865, align 1, !tbaa !2452
  %3866 = getelementptr inbounds i8, i8* %3854, i64 8
  %3867 = bitcast i8* %3866 to float*
  store float 0.000000e+00, float* %3867, align 1, !tbaa !2452
  %3868 = getelementptr inbounds i8, i8* %3854, i64 12
  %3869 = bitcast i8* %3868 to float*
  store float 0.000000e+00, float* %3869, align 1, !tbaa !2452
  %3870 = load i64, i64* %RBP
  %3871 = sub i64 %3870, 40
  %3872 = load i64, i64* %PC
  %3873 = add i64 %3872, 4
  store i64 %3873, i64* %PC
  %3874 = inttoptr i64 %3871 to i64*
  %3875 = load i64, i64* %3874
  store i64 %3875, i64* %RAX, align 8, !tbaa !2428
  %3876 = load i64, i64* %RBP
  %3877 = sub i64 %3876, 24
  %3878 = load i64, i64* %PC
  %3879 = add i64 %3878, 3
  store i64 %3879, i64* %PC
  %3880 = inttoptr i64 %3877 to i32*
  %3881 = load i32, i32* %3880
  %3882 = zext i32 %3881 to i64
  store i64 %3882, i64* %RDX, align 8, !tbaa !2428
  %3883 = load i64, i64* %RBP
  %3884 = sub i64 %3883, 44
  %3885 = load i64, i64* %PC
  %3886 = add i64 %3885, 3
  store i64 %3886, i64* %PC
  %3887 = inttoptr i64 %3884 to i32*
  %3888 = load i32, i32* %3887
  %3889 = zext i32 %3888 to i64
  store i64 %3889, i64* %RSI, align 8, !tbaa !2428
  %3890 = load i64, i64* %RSI
  %3891 = load i64, i64* %PC
  %3892 = add i64 %3891, 3
  store i64 %3892, i64* %PC
  %3893 = trunc i64 %3890 to i32
  %3894 = sub i32 %3893, 2
  %3895 = zext i32 %3894 to i64
  store i64 %3895, i64* %RSI, align 8, !tbaa !2428
  %3896 = icmp ult i32 %3893, 2
  %3897 = zext i1 %3896 to i8
  %3898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3897, i8* %3898, align 1, !tbaa !2432
  %3899 = and i32 %3894, 255
  %3900 = call i32 @llvm.ctpop.i32(i32 %3899) #16
  %3901 = trunc i32 %3900 to i8
  %3902 = and i8 %3901, 1
  %3903 = xor i8 %3902, 1
  %3904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3903, i8* %3904, align 1, !tbaa !2446
  %3905 = xor i64 2, %3890
  %3906 = trunc i64 %3905 to i32
  %3907 = xor i32 %3906, %3894
  %3908 = lshr i32 %3907, 4
  %3909 = trunc i32 %3908 to i8
  %3910 = and i8 %3909, 1
  %3911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3910, i8* %3911, align 1, !tbaa !2447
  %3912 = icmp eq i32 %3894, 0
  %3913 = zext i1 %3912 to i8
  %3914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3913, i8* %3914, align 1, !tbaa !2448
  %3915 = lshr i32 %3894, 31
  %3916 = trunc i32 %3915 to i8
  %3917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3916, i8* %3917, align 1, !tbaa !2449
  %3918 = lshr i32 %3893, 31
  %3919 = xor i32 %3915, %3918
  %3920 = add nuw nsw i32 %3919, %3918
  %3921 = icmp eq i32 %3920, 2
  %3922 = zext i1 %3921 to i8
  %3923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3922, i8* %3923, align 1, !tbaa !2450
  %3924 = load i64, i64* %RDX
  %3925 = load i32, i32* %ESI
  %3926 = zext i32 %3925 to i64
  %3927 = load i64, i64* %PC
  %3928 = add i64 %3927, 3
  store i64 %3928, i64* %PC
  %3929 = shl i64 %3924, 32
  %3930 = ashr exact i64 %3929, 32
  %3931 = shl i64 %3926, 32
  %3932 = ashr exact i64 %3931, 32
  %3933 = mul nsw i64 %3932, %3930
  %3934 = trunc i64 %3933 to i32
  %3935 = and i64 %3933, 4294967295
  store i64 %3935, i64* %RDX, align 8, !tbaa !2428
  %3936 = shl i64 %3933, 32
  %3937 = ashr exact i64 %3936, 32
  %3938 = icmp ne i64 %3937, %3933
  %3939 = zext i1 %3938 to i8
  %3940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3939, i8* %3940, align 1, !tbaa !2432
  %3941 = and i32 %3934, 255
  %3942 = call i32 @llvm.ctpop.i32(i32 %3941) #16
  %3943 = trunc i32 %3942 to i8
  %3944 = and i8 %3943, 1
  %3945 = xor i8 %3944, 1
  %3946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3945, i8* %3946, align 1, !tbaa !2446
  %3947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3947, align 1, !tbaa !2447
  %3948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3948, align 1, !tbaa !2448
  %3949 = lshr i32 %3934, 31
  %3950 = trunc i32 %3949 to i8
  %3951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3950, i8* %3951, align 1, !tbaa !2449
  %3952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3939, i8* %3952, align 1, !tbaa !2450
  %3953 = load i64, i64* %RDX
  %3954 = load i64, i64* %RBP
  %3955 = sub i64 %3954, 48
  %3956 = load i64, i64* %PC
  %3957 = add i64 %3956, 3
  store i64 %3957, i64* %PC
  %3958 = trunc i64 %3953 to i32
  %3959 = inttoptr i64 %3955 to i32*
  %3960 = load i32, i32* %3959
  %3961 = add i32 %3960, %3958
  %3962 = zext i32 %3961 to i64
  store i64 %3962, i64* %RDX, align 8, !tbaa !2428
  %3963 = icmp ult i32 %3961, %3958
  %3964 = icmp ult i32 %3961, %3960
  %3965 = or i1 %3963, %3964
  %3966 = zext i1 %3965 to i8
  %3967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3966, i8* %3967, align 1, !tbaa !2432
  %3968 = and i32 %3961, 255
  %3969 = call i32 @llvm.ctpop.i32(i32 %3968) #16
  %3970 = trunc i32 %3969 to i8
  %3971 = and i8 %3970, 1
  %3972 = xor i8 %3971, 1
  %3973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3972, i8* %3973, align 1, !tbaa !2446
  %3974 = xor i32 %3960, %3958
  %3975 = xor i32 %3974, %3961
  %3976 = lshr i32 %3975, 4
  %3977 = trunc i32 %3976 to i8
  %3978 = and i8 %3977, 1
  %3979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3978, i8* %3979, align 1, !tbaa !2447
  %3980 = icmp eq i32 %3961, 0
  %3981 = zext i1 %3980 to i8
  %3982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3981, i8* %3982, align 1, !tbaa !2448
  %3983 = lshr i32 %3961, 31
  %3984 = trunc i32 %3983 to i8
  %3985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3984, i8* %3985, align 1, !tbaa !2449
  %3986 = lshr i32 %3958, 31
  %3987 = lshr i32 %3960, 31
  %3988 = xor i32 %3983, %3986
  %3989 = xor i32 %3983, %3987
  %3990 = add nuw nsw i32 %3988, %3989
  %3991 = icmp eq i32 %3990, 2
  %3992 = zext i1 %3991 to i8
  %3993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3992, i8* %3993, align 1, !tbaa !2450
  %3994 = load i32, i32* %EDX
  %3995 = zext i32 %3994 to i64
  %3996 = load i64, i64* %PC
  %3997 = add i64 %3996, 3
  store i64 %3997, i64* %PC
  %3998 = shl i64 %3995, 32
  %3999 = ashr exact i64 %3998, 32
  store i64 %3999, i64* %RCX, align 8, !tbaa !2428
  %4000 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4001 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4002 = load i64, i64* %RAX
  %4003 = load i64, i64* %RCX
  %4004 = mul i64 %4003, 4
  %4005 = add i64 %4004, %4002
  %4006 = load i64, i64* %PC
  %4007 = add i64 %4006, 5
  store i64 %4007, i64* %PC
  %4008 = bitcast i8* %4001 to <2 x float>*
  %4009 = load <2 x float>, <2 x float>* %4008, align 1
  %4010 = getelementptr inbounds i8, i8* %4001, i64 8
  %4011 = bitcast i8* %4010 to <2 x i32>*
  %4012 = load <2 x i32>, <2 x i32>* %4011, align 1
  %4013 = inttoptr i64 %4005 to float*
  %4014 = load float, float* %4013
  %4015 = extractelement <2 x float> %4009, i32 0
  %4016 = fmul float %4015, %4014
  %4017 = bitcast i8* %4000 to float*
  store float %4016, float* %4017, align 1, !tbaa !2452
  %4018 = bitcast <2 x float> %4009 to <2 x i32>
  %4019 = extractelement <2 x i32> %4018, i32 1
  %4020 = getelementptr inbounds i8, i8* %4000, i64 4
  %4021 = bitcast i8* %4020 to i32*
  store i32 %4019, i32* %4021, align 1, !tbaa !2452
  %4022 = extractelement <2 x i32> %4012, i32 0
  %4023 = getelementptr inbounds i8, i8* %4000, i64 8
  %4024 = bitcast i8* %4023 to i32*
  store i32 %4022, i32* %4024, align 1, !tbaa !2452
  %4025 = extractelement <2 x i32> %4012, i32 1
  %4026 = getelementptr inbounds i8, i8* %4000, i64 12
  %4027 = bitcast i8* %4026 to i32*
  store i32 %4025, i32* %4027, align 1, !tbaa !2452
  %4028 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4029 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4030 = bitcast %union.vec128_t* %XMM1 to i8*
  %4031 = load i64, i64* %PC
  %4032 = add i64 %4031, 4
  store i64 %4032, i64* %PC
  %4033 = bitcast i8* %4029 to <2 x float>*
  %4034 = load <2 x float>, <2 x float>* %4033, align 1
  %4035 = getelementptr inbounds i8, i8* %4029, i64 8
  %4036 = bitcast i8* %4035 to <2 x i32>*
  %4037 = load <2 x i32>, <2 x i32>* %4036, align 1
  %4038 = bitcast i8* %4030 to <2 x float>*
  %4039 = load <2 x float>, <2 x float>* %4038, align 1
  %4040 = extractelement <2 x float> %4034, i32 0
  %4041 = extractelement <2 x float> %4039, i32 0
  %4042 = fadd float %4040, %4041
  %4043 = bitcast i8* %4028 to float*
  store float %4042, float* %4043, align 1, !tbaa !2452
  %4044 = bitcast <2 x float> %4034 to <2 x i32>
  %4045 = extractelement <2 x i32> %4044, i32 1
  %4046 = getelementptr inbounds i8, i8* %4028, i64 4
  %4047 = bitcast i8* %4046 to i32*
  store i32 %4045, i32* %4047, align 1, !tbaa !2452
  %4048 = extractelement <2 x i32> %4037, i32 0
  %4049 = getelementptr inbounds i8, i8* %4028, i64 8
  %4050 = bitcast i8* %4049 to i32*
  store i32 %4048, i32* %4050, align 1, !tbaa !2452
  %4051 = extractelement <2 x i32> %4037, i32 1
  %4052 = getelementptr inbounds i8, i8* %4028, i64 12
  %4053 = bitcast i8* %4052 to i32*
  store i32 %4051, i32* %4053, align 1, !tbaa !2452
  %4054 = load i64, i64* %RBP
  %4055 = sub i64 %4054, 32
  %4056 = load i64, i64* %PC
  %4057 = add i64 %4056, 4
  store i64 %4057, i64* %PC
  %4058 = inttoptr i64 %4055 to i64*
  %4059 = load i64, i64* %4058
  store i64 %4059, i64* %RAX, align 8, !tbaa !2428
  %4060 = load i64, i64* %RBP
  %4061 = sub i64 %4060, 44
  %4062 = load i64, i64* %PC
  %4063 = add i64 %4062, 3
  store i64 %4063, i64* %PC
  %4064 = inttoptr i64 %4061 to i32*
  %4065 = load i32, i32* %4064
  %4066 = zext i32 %4065 to i64
  store i64 %4066, i64* %RDX, align 8, !tbaa !2428
  %4067 = load i64, i64* %RDX
  %4068 = load i64, i64* %PC
  %4069 = add i64 %4068, 3
  store i64 %4069, i64* %PC
  %4070 = trunc i64 %4067 to i32
  %4071 = sub i32 %4070, 1
  %4072 = zext i32 %4071 to i64
  store i64 %4072, i64* %RDX, align 8, !tbaa !2428
  %4073 = icmp ult i32 %4070, 1
  %4074 = zext i1 %4073 to i8
  %4075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4074, i8* %4075, align 1, !tbaa !2432
  %4076 = and i32 %4071, 255
  %4077 = call i32 @llvm.ctpop.i32(i32 %4076) #16
  %4078 = trunc i32 %4077 to i8
  %4079 = and i8 %4078, 1
  %4080 = xor i8 %4079, 1
  %4081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4080, i8* %4081, align 1, !tbaa !2446
  %4082 = xor i64 1, %4067
  %4083 = trunc i64 %4082 to i32
  %4084 = xor i32 %4083, %4071
  %4085 = lshr i32 %4084, 4
  %4086 = trunc i32 %4085 to i8
  %4087 = and i8 %4086, 1
  %4088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4087, i8* %4088, align 1, !tbaa !2447
  %4089 = icmp eq i32 %4071, 0
  %4090 = zext i1 %4089 to i8
  %4091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4090, i8* %4091, align 1, !tbaa !2448
  %4092 = lshr i32 %4071, 31
  %4093 = trunc i32 %4092 to i8
  %4094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4093, i8* %4094, align 1, !tbaa !2449
  %4095 = lshr i32 %4070, 31
  %4096 = xor i32 %4092, %4095
  %4097 = add nuw nsw i32 %4096, %4095
  %4098 = icmp eq i32 %4097, 2
  %4099 = zext i1 %4098 to i8
  %4100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4099, i8* %4100, align 1, !tbaa !2450
  %4101 = load i32, i32* %EDX
  %4102 = zext i32 %4101 to i64
  %4103 = load i64, i64* %PC
  %4104 = add i64 %4103, 3
  store i64 %4104, i64* %PC
  %4105 = shl i64 %4102, 32
  %4106 = ashr exact i64 %4105, 32
  store i64 %4106, i64* %RCX, align 8, !tbaa !2428
  %4107 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4108 = load i64, i64* %RAX
  %4109 = load i64, i64* %RCX
  %4110 = mul i64 %4109, 4
  %4111 = add i64 %4110, %4108
  %4112 = load i64, i64* %PC
  %4113 = add i64 %4112, 5
  store i64 %4113, i64* %PC
  %4114 = inttoptr i64 %4111 to float*
  %4115 = load float, float* %4114
  %4116 = bitcast i8* %4107 to float*
  store float %4115, float* %4116, align 1, !tbaa !2452
  %4117 = getelementptr inbounds i8, i8* %4107, i64 4
  %4118 = bitcast i8* %4117 to float*
  store float 0.000000e+00, float* %4118, align 1, !tbaa !2452
  %4119 = getelementptr inbounds i8, i8* %4107, i64 8
  %4120 = bitcast i8* %4119 to float*
  store float 0.000000e+00, float* %4120, align 1, !tbaa !2452
  %4121 = getelementptr inbounds i8, i8* %4107, i64 12
  %4122 = bitcast i8* %4121 to float*
  store float 0.000000e+00, float* %4122, align 1, !tbaa !2452
  %4123 = load i64, i64* %RBP
  %4124 = sub i64 %4123, 40
  %4125 = load i64, i64* %PC
  %4126 = add i64 %4125, 4
  store i64 %4126, i64* %PC
  %4127 = inttoptr i64 %4124 to i64*
  %4128 = load i64, i64* %4127
  store i64 %4128, i64* %RAX, align 8, !tbaa !2428
  %4129 = load i64, i64* %RBP
  %4130 = sub i64 %4129, 24
  %4131 = load i64, i64* %PC
  %4132 = add i64 %4131, 3
  store i64 %4132, i64* %PC
  %4133 = inttoptr i64 %4130 to i32*
  %4134 = load i32, i32* %4133
  %4135 = zext i32 %4134 to i64
  store i64 %4135, i64* %RDX, align 8, !tbaa !2428
  %4136 = load i64, i64* %RBP
  %4137 = sub i64 %4136, 44
  %4138 = load i64, i64* %PC
  %4139 = add i64 %4138, 3
  store i64 %4139, i64* %PC
  %4140 = inttoptr i64 %4137 to i32*
  %4141 = load i32, i32* %4140
  %4142 = zext i32 %4141 to i64
  store i64 %4142, i64* %RSI, align 8, !tbaa !2428
  %4143 = load i64, i64* %RSI
  %4144 = load i64, i64* %PC
  %4145 = add i64 %4144, 3
  store i64 %4145, i64* %PC
  %4146 = trunc i64 %4143 to i32
  %4147 = sub i32 %4146, 1
  %4148 = zext i32 %4147 to i64
  store i64 %4148, i64* %RSI, align 8, !tbaa !2428
  %4149 = icmp ult i32 %4146, 1
  %4150 = zext i1 %4149 to i8
  %4151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4150, i8* %4151, align 1, !tbaa !2432
  %4152 = and i32 %4147, 255
  %4153 = call i32 @llvm.ctpop.i32(i32 %4152) #16
  %4154 = trunc i32 %4153 to i8
  %4155 = and i8 %4154, 1
  %4156 = xor i8 %4155, 1
  %4157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4156, i8* %4157, align 1, !tbaa !2446
  %4158 = xor i64 1, %4143
  %4159 = trunc i64 %4158 to i32
  %4160 = xor i32 %4159, %4147
  %4161 = lshr i32 %4160, 4
  %4162 = trunc i32 %4161 to i8
  %4163 = and i8 %4162, 1
  %4164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4163, i8* %4164, align 1, !tbaa !2447
  %4165 = icmp eq i32 %4147, 0
  %4166 = zext i1 %4165 to i8
  %4167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4166, i8* %4167, align 1, !tbaa !2448
  %4168 = lshr i32 %4147, 31
  %4169 = trunc i32 %4168 to i8
  %4170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4169, i8* %4170, align 1, !tbaa !2449
  %4171 = lshr i32 %4146, 31
  %4172 = xor i32 %4168, %4171
  %4173 = add nuw nsw i32 %4172, %4171
  %4174 = icmp eq i32 %4173, 2
  %4175 = zext i1 %4174 to i8
  %4176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4175, i8* %4176, align 1, !tbaa !2450
  %4177 = load i64, i64* %RDX
  %4178 = load i32, i32* %ESI
  %4179 = zext i32 %4178 to i64
  %4180 = load i64, i64* %PC
  %4181 = add i64 %4180, 3
  store i64 %4181, i64* %PC
  %4182 = shl i64 %4177, 32
  %4183 = ashr exact i64 %4182, 32
  %4184 = shl i64 %4179, 32
  %4185 = ashr exact i64 %4184, 32
  %4186 = mul nsw i64 %4185, %4183
  %4187 = trunc i64 %4186 to i32
  %4188 = and i64 %4186, 4294967295
  store i64 %4188, i64* %RDX, align 8, !tbaa !2428
  %4189 = shl i64 %4186, 32
  %4190 = ashr exact i64 %4189, 32
  %4191 = icmp ne i64 %4190, %4186
  %4192 = zext i1 %4191 to i8
  %4193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4192, i8* %4193, align 1, !tbaa !2432
  %4194 = and i32 %4187, 255
  %4195 = call i32 @llvm.ctpop.i32(i32 %4194) #16
  %4196 = trunc i32 %4195 to i8
  %4197 = and i8 %4196, 1
  %4198 = xor i8 %4197, 1
  %4199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4198, i8* %4199, align 1, !tbaa !2446
  %4200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4200, align 1, !tbaa !2447
  %4201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4201, align 1, !tbaa !2448
  %4202 = lshr i32 %4187, 31
  %4203 = trunc i32 %4202 to i8
  %4204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4203, i8* %4204, align 1, !tbaa !2449
  %4205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4192, i8* %4205, align 1, !tbaa !2450
  %4206 = load i64, i64* %RDX
  %4207 = load i64, i64* %RBP
  %4208 = sub i64 %4207, 48
  %4209 = load i64, i64* %PC
  %4210 = add i64 %4209, 3
  store i64 %4210, i64* %PC
  %4211 = trunc i64 %4206 to i32
  %4212 = inttoptr i64 %4208 to i32*
  %4213 = load i32, i32* %4212
  %4214 = add i32 %4213, %4211
  %4215 = zext i32 %4214 to i64
  store i64 %4215, i64* %RDX, align 8, !tbaa !2428
  %4216 = icmp ult i32 %4214, %4211
  %4217 = icmp ult i32 %4214, %4213
  %4218 = or i1 %4216, %4217
  %4219 = zext i1 %4218 to i8
  %4220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4219, i8* %4220, align 1, !tbaa !2432
  %4221 = and i32 %4214, 255
  %4222 = call i32 @llvm.ctpop.i32(i32 %4221) #16
  %4223 = trunc i32 %4222 to i8
  %4224 = and i8 %4223, 1
  %4225 = xor i8 %4224, 1
  %4226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4225, i8* %4226, align 1, !tbaa !2446
  %4227 = xor i32 %4213, %4211
  %4228 = xor i32 %4227, %4214
  %4229 = lshr i32 %4228, 4
  %4230 = trunc i32 %4229 to i8
  %4231 = and i8 %4230, 1
  %4232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4231, i8* %4232, align 1, !tbaa !2447
  %4233 = icmp eq i32 %4214, 0
  %4234 = zext i1 %4233 to i8
  %4235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4234, i8* %4235, align 1, !tbaa !2448
  %4236 = lshr i32 %4214, 31
  %4237 = trunc i32 %4236 to i8
  %4238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4237, i8* %4238, align 1, !tbaa !2449
  %4239 = lshr i32 %4211, 31
  %4240 = lshr i32 %4213, 31
  %4241 = xor i32 %4236, %4239
  %4242 = xor i32 %4236, %4240
  %4243 = add nuw nsw i32 %4241, %4242
  %4244 = icmp eq i32 %4243, 2
  %4245 = zext i1 %4244 to i8
  %4246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4245, i8* %4246, align 1, !tbaa !2450
  %4247 = load i32, i32* %EDX
  %4248 = zext i32 %4247 to i64
  %4249 = load i64, i64* %PC
  %4250 = add i64 %4249, 3
  store i64 %4250, i64* %PC
  %4251 = shl i64 %4248, 32
  %4252 = ashr exact i64 %4251, 32
  store i64 %4252, i64* %RCX, align 8, !tbaa !2428
  %4253 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4254 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4255 = load i64, i64* %RAX
  %4256 = load i64, i64* %RCX
  %4257 = mul i64 %4256, 4
  %4258 = add i64 %4257, %4255
  %4259 = load i64, i64* %PC
  %4260 = add i64 %4259, 5
  store i64 %4260, i64* %PC
  %4261 = bitcast i8* %4254 to <2 x float>*
  %4262 = load <2 x float>, <2 x float>* %4261, align 1
  %4263 = getelementptr inbounds i8, i8* %4254, i64 8
  %4264 = bitcast i8* %4263 to <2 x i32>*
  %4265 = load <2 x i32>, <2 x i32>* %4264, align 1
  %4266 = inttoptr i64 %4258 to float*
  %4267 = load float, float* %4266
  %4268 = extractelement <2 x float> %4262, i32 0
  %4269 = fmul float %4268, %4267
  %4270 = bitcast i8* %4253 to float*
  store float %4269, float* %4270, align 1, !tbaa !2452
  %4271 = bitcast <2 x float> %4262 to <2 x i32>
  %4272 = extractelement <2 x i32> %4271, i32 1
  %4273 = getelementptr inbounds i8, i8* %4253, i64 4
  %4274 = bitcast i8* %4273 to i32*
  store i32 %4272, i32* %4274, align 1, !tbaa !2452
  %4275 = extractelement <2 x i32> %4265, i32 0
  %4276 = getelementptr inbounds i8, i8* %4253, i64 8
  %4277 = bitcast i8* %4276 to i32*
  store i32 %4275, i32* %4277, align 1, !tbaa !2452
  %4278 = extractelement <2 x i32> %4265, i32 1
  %4279 = getelementptr inbounds i8, i8* %4253, i64 12
  %4280 = bitcast i8* %4279 to i32*
  store i32 %4278, i32* %4280, align 1, !tbaa !2452
  %4281 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4282 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4283 = bitcast %union.vec128_t* %XMM1 to i8*
  %4284 = load i64, i64* %PC
  %4285 = add i64 %4284, 4
  store i64 %4285, i64* %PC
  %4286 = bitcast i8* %4282 to <2 x float>*
  %4287 = load <2 x float>, <2 x float>* %4286, align 1
  %4288 = getelementptr inbounds i8, i8* %4282, i64 8
  %4289 = bitcast i8* %4288 to <2 x i32>*
  %4290 = load <2 x i32>, <2 x i32>* %4289, align 1
  %4291 = bitcast i8* %4283 to <2 x float>*
  %4292 = load <2 x float>, <2 x float>* %4291, align 1
  %4293 = extractelement <2 x float> %4287, i32 0
  %4294 = extractelement <2 x float> %4292, i32 0
  %4295 = fadd float %4293, %4294
  %4296 = bitcast i8* %4281 to float*
  store float %4295, float* %4296, align 1, !tbaa !2452
  %4297 = bitcast <2 x float> %4287 to <2 x i32>
  %4298 = extractelement <2 x i32> %4297, i32 1
  %4299 = getelementptr inbounds i8, i8* %4281, i64 4
  %4300 = bitcast i8* %4299 to i32*
  store i32 %4298, i32* %4300, align 1, !tbaa !2452
  %4301 = extractelement <2 x i32> %4290, i32 0
  %4302 = getelementptr inbounds i8, i8* %4281, i64 8
  %4303 = bitcast i8* %4302 to i32*
  store i32 %4301, i32* %4303, align 1, !tbaa !2452
  %4304 = extractelement <2 x i32> %4290, i32 1
  %4305 = getelementptr inbounds i8, i8* %4281, i64 12
  %4306 = bitcast i8* %4305 to i32*
  store i32 %4304, i32* %4306, align 1, !tbaa !2452
  %4307 = load i64, i64* %RBP
  %4308 = sub i64 %4307, 32
  %4309 = load i64, i64* %PC
  %4310 = add i64 %4309, 4
  store i64 %4310, i64* %PC
  %4311 = inttoptr i64 %4308 to i64*
  %4312 = load i64, i64* %4311
  store i64 %4312, i64* %RAX, align 8, !tbaa !2428
  %4313 = load i64, i64* %RBP
  %4314 = sub i64 %4313, 44
  %4315 = load i64, i64* %PC
  %4316 = add i64 %4315, 4
  store i64 %4316, i64* %PC
  %4317 = inttoptr i64 %4314 to i32*
  %4318 = load i32, i32* %4317
  %4319 = sext i32 %4318 to i64
  store i64 %4319, i64* %RCX, align 8, !tbaa !2428
  %4320 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4321 = load i64, i64* %RAX
  %4322 = load i64, i64* %RCX
  %4323 = mul i64 %4322, 4
  %4324 = add i64 %4323, %4321
  %4325 = load i64, i64* %PC
  %4326 = add i64 %4325, 5
  store i64 %4326, i64* %PC
  %4327 = inttoptr i64 %4324 to float*
  %4328 = load float, float* %4327
  %4329 = bitcast i8* %4320 to float*
  store float %4328, float* %4329, align 1, !tbaa !2452
  %4330 = getelementptr inbounds i8, i8* %4320, i64 4
  %4331 = bitcast i8* %4330 to float*
  store float 0.000000e+00, float* %4331, align 1, !tbaa !2452
  %4332 = getelementptr inbounds i8, i8* %4320, i64 8
  %4333 = bitcast i8* %4332 to float*
  store float 0.000000e+00, float* %4333, align 1, !tbaa !2452
  %4334 = getelementptr inbounds i8, i8* %4320, i64 12
  %4335 = bitcast i8* %4334 to float*
  store float 0.000000e+00, float* %4335, align 1, !tbaa !2452
  %4336 = load i64, i64* %RBP
  %4337 = sub i64 %4336, 40
  %4338 = load i64, i64* %PC
  %4339 = add i64 %4338, 4
  store i64 %4339, i64* %PC
  %4340 = inttoptr i64 %4337 to i64*
  %4341 = load i64, i64* %4340
  store i64 %4341, i64* %RAX, align 8, !tbaa !2428
  %4342 = load i64, i64* %RBP
  %4343 = sub i64 %4342, 24
  %4344 = load i64, i64* %PC
  %4345 = add i64 %4344, 3
  store i64 %4345, i64* %PC
  %4346 = inttoptr i64 %4343 to i32*
  %4347 = load i32, i32* %4346
  %4348 = zext i32 %4347 to i64
  store i64 %4348, i64* %RDX, align 8, !tbaa !2428
  %4349 = load i64, i64* %RDX
  %4350 = load i64, i64* %RBP
  %4351 = sub i64 %4350, 44
  %4352 = load i64, i64* %PC
  %4353 = add i64 %4352, 4
  store i64 %4353, i64* %PC
  %4354 = inttoptr i64 %4351 to i32*
  %4355 = load i32, i32* %4354
  %4356 = shl i64 %4349, 32
  %4357 = ashr exact i64 %4356, 32
  %4358 = sext i32 %4355 to i64
  %4359 = mul nsw i64 %4358, %4357
  %4360 = trunc i64 %4359 to i32
  %4361 = and i64 %4359, 4294967295
  store i64 %4361, i64* %RDX, align 8, !tbaa !2428
  %4362 = shl i64 %4359, 32
  %4363 = ashr exact i64 %4362, 32
  %4364 = icmp ne i64 %4363, %4359
  %4365 = zext i1 %4364 to i8
  %4366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4365, i8* %4366, align 1, !tbaa !2432
  %4367 = and i32 %4360, 255
  %4368 = call i32 @llvm.ctpop.i32(i32 %4367) #16
  %4369 = trunc i32 %4368 to i8
  %4370 = and i8 %4369, 1
  %4371 = xor i8 %4370, 1
  %4372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4371, i8* %4372, align 1, !tbaa !2446
  %4373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4373, align 1, !tbaa !2447
  %4374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4374, align 1, !tbaa !2448
  %4375 = lshr i32 %4360, 31
  %4376 = trunc i32 %4375 to i8
  %4377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4376, i8* %4377, align 1, !tbaa !2449
  %4378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4365, i8* %4378, align 1, !tbaa !2450
  %4379 = load i64, i64* %RDX
  %4380 = load i64, i64* %RBP
  %4381 = sub i64 %4380, 48
  %4382 = load i64, i64* %PC
  %4383 = add i64 %4382, 3
  store i64 %4383, i64* %PC
  %4384 = trunc i64 %4379 to i32
  %4385 = inttoptr i64 %4381 to i32*
  %4386 = load i32, i32* %4385
  %4387 = add i32 %4386, %4384
  %4388 = zext i32 %4387 to i64
  store i64 %4388, i64* %RDX, align 8, !tbaa !2428
  %4389 = icmp ult i32 %4387, %4384
  %4390 = icmp ult i32 %4387, %4386
  %4391 = or i1 %4389, %4390
  %4392 = zext i1 %4391 to i8
  %4393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4392, i8* %4393, align 1, !tbaa !2432
  %4394 = and i32 %4387, 255
  %4395 = call i32 @llvm.ctpop.i32(i32 %4394) #16
  %4396 = trunc i32 %4395 to i8
  %4397 = and i8 %4396, 1
  %4398 = xor i8 %4397, 1
  %4399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4398, i8* %4399, align 1, !tbaa !2446
  %4400 = xor i32 %4386, %4384
  %4401 = xor i32 %4400, %4387
  %4402 = lshr i32 %4401, 4
  %4403 = trunc i32 %4402 to i8
  %4404 = and i8 %4403, 1
  %4405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4404, i8* %4405, align 1, !tbaa !2447
  %4406 = icmp eq i32 %4387, 0
  %4407 = zext i1 %4406 to i8
  %4408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4407, i8* %4408, align 1, !tbaa !2448
  %4409 = lshr i32 %4387, 31
  %4410 = trunc i32 %4409 to i8
  %4411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4410, i8* %4411, align 1, !tbaa !2449
  %4412 = lshr i32 %4384, 31
  %4413 = lshr i32 %4386, 31
  %4414 = xor i32 %4409, %4412
  %4415 = xor i32 %4409, %4413
  %4416 = add nuw nsw i32 %4414, %4415
  %4417 = icmp eq i32 %4416, 2
  %4418 = zext i1 %4417 to i8
  %4419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4418, i8* %4419, align 1, !tbaa !2450
  %4420 = load i32, i32* %EDX
  %4421 = zext i32 %4420 to i64
  %4422 = load i64, i64* %PC
  %4423 = add i64 %4422, 3
  store i64 %4423, i64* %PC
  %4424 = shl i64 %4421, 32
  %4425 = ashr exact i64 %4424, 32
  store i64 %4425, i64* %RCX, align 8, !tbaa !2428
  %4426 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4427 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4428 = load i64, i64* %RAX
  %4429 = load i64, i64* %RCX
  %4430 = mul i64 %4429, 4
  %4431 = add i64 %4430, %4428
  %4432 = load i64, i64* %PC
  %4433 = add i64 %4432, 5
  store i64 %4433, i64* %PC
  %4434 = bitcast i8* %4427 to <2 x float>*
  %4435 = load <2 x float>, <2 x float>* %4434, align 1
  %4436 = getelementptr inbounds i8, i8* %4427, i64 8
  %4437 = bitcast i8* %4436 to <2 x i32>*
  %4438 = load <2 x i32>, <2 x i32>* %4437, align 1
  %4439 = inttoptr i64 %4431 to float*
  %4440 = load float, float* %4439
  %4441 = extractelement <2 x float> %4435, i32 0
  %4442 = fmul float %4441, %4440
  %4443 = bitcast i8* %4426 to float*
  store float %4442, float* %4443, align 1, !tbaa !2452
  %4444 = bitcast <2 x float> %4435 to <2 x i32>
  %4445 = extractelement <2 x i32> %4444, i32 1
  %4446 = getelementptr inbounds i8, i8* %4426, i64 4
  %4447 = bitcast i8* %4446 to i32*
  store i32 %4445, i32* %4447, align 1, !tbaa !2452
  %4448 = extractelement <2 x i32> %4438, i32 0
  %4449 = getelementptr inbounds i8, i8* %4426, i64 8
  %4450 = bitcast i8* %4449 to i32*
  store i32 %4448, i32* %4450, align 1, !tbaa !2452
  %4451 = extractelement <2 x i32> %4438, i32 1
  %4452 = getelementptr inbounds i8, i8* %4426, i64 12
  %4453 = bitcast i8* %4452 to i32*
  store i32 %4451, i32* %4453, align 1, !tbaa !2452
  %4454 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4456 = bitcast %union.vec128_t* %XMM1 to i8*
  %4457 = load i64, i64* %PC
  %4458 = add i64 %4457, 4
  store i64 %4458, i64* %PC
  %4459 = bitcast i8* %4455 to <2 x float>*
  %4460 = load <2 x float>, <2 x float>* %4459, align 1
  %4461 = getelementptr inbounds i8, i8* %4455, i64 8
  %4462 = bitcast i8* %4461 to <2 x i32>*
  %4463 = load <2 x i32>, <2 x i32>* %4462, align 1
  %4464 = bitcast i8* %4456 to <2 x float>*
  %4465 = load <2 x float>, <2 x float>* %4464, align 1
  %4466 = extractelement <2 x float> %4460, i32 0
  %4467 = extractelement <2 x float> %4465, i32 0
  %4468 = fadd float %4466, %4467
  %4469 = bitcast i8* %4454 to float*
  store float %4468, float* %4469, align 1, !tbaa !2452
  %4470 = bitcast <2 x float> %4460 to <2 x i32>
  %4471 = extractelement <2 x i32> %4470, i32 1
  %4472 = getelementptr inbounds i8, i8* %4454, i64 4
  %4473 = bitcast i8* %4472 to i32*
  store i32 %4471, i32* %4473, align 1, !tbaa !2452
  %4474 = extractelement <2 x i32> %4463, i32 0
  %4475 = getelementptr inbounds i8, i8* %4454, i64 8
  %4476 = bitcast i8* %4475 to i32*
  store i32 %4474, i32* %4476, align 1, !tbaa !2452
  %4477 = extractelement <2 x i32> %4463, i32 1
  %4478 = getelementptr inbounds i8, i8* %4454, i64 12
  %4479 = bitcast i8* %4478 to i32*
  store i32 %4477, i32* %4479, align 1, !tbaa !2452
  %4480 = load i64, i64* %RBP
  %4481 = sub i64 %4480, 16
  %4482 = load i64, i64* %PC
  %4483 = add i64 %4482, 4
  store i64 %4483, i64* %PC
  %4484 = inttoptr i64 %4481 to i64*
  %4485 = load i64, i64* %4484
  store i64 %4485, i64* %RAX, align 8, !tbaa !2428
  %4486 = load i64, i64* %RBP
  %4487 = sub i64 %4486, 48
  %4488 = load i64, i64* %PC
  %4489 = add i64 %4488, 4
  store i64 %4489, i64* %PC
  %4490 = inttoptr i64 %4487 to i32*
  %4491 = load i32, i32* %4490
  %4492 = sext i32 %4491 to i64
  store i64 %4492, i64* %RCX, align 8, !tbaa !2428
  %4493 = load i64, i64* %RAX
  %4494 = load i64, i64* %RCX
  %4495 = mul i64 %4494, 4
  %4496 = add i64 %4495, %4493
  %4497 = bitcast %union.vec128_t* %XMM0 to i8*
  %4498 = load i64, i64* %PC
  %4499 = add i64 %4498, 5
  store i64 %4499, i64* %PC
  %4500 = bitcast i8* %4497 to <2 x float>*
  %4501 = load <2 x float>, <2 x float>* %4500, align 1
  %4502 = extractelement <2 x float> %4501, i32 0
  %4503 = inttoptr i64 %4496 to float*
  store float %4502, float* %4503
  %4504 = load i64, i64* %RBP
  %4505 = sub i64 %4504, 48
  %4506 = load i64, i64* %PC
  %4507 = add i64 %4506, 3
  store i64 %4507, i64* %PC
  %4508 = inttoptr i64 %4505 to i32*
  %4509 = load i32, i32* %4508
  %4510 = zext i32 %4509 to i64
  store i64 %4510, i64* %RAX, align 8, !tbaa !2428
  %4511 = load i64, i64* %RAX
  %4512 = load i64, i64* %PC
  %4513 = add i64 %4512, 3
  store i64 %4513, i64* %PC
  %4514 = trunc i64 %4511 to i32
  %4515 = add i32 1, %4514
  %4516 = zext i32 %4515 to i64
  store i64 %4516, i64* %RAX, align 8, !tbaa !2428
  %4517 = icmp ult i32 %4515, %4514
  %4518 = icmp ult i32 %4515, 1
  %4519 = or i1 %4517, %4518
  %4520 = zext i1 %4519 to i8
  %4521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4520, i8* %4521, align 1, !tbaa !2432
  %4522 = and i32 %4515, 255
  %4523 = call i32 @llvm.ctpop.i32(i32 %4522) #16
  %4524 = trunc i32 %4523 to i8
  %4525 = and i8 %4524, 1
  %4526 = xor i8 %4525, 1
  %4527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4526, i8* %4527, align 1, !tbaa !2446
  %4528 = xor i64 1, %4511
  %4529 = trunc i64 %4528 to i32
  %4530 = xor i32 %4529, %4515
  %4531 = lshr i32 %4530, 4
  %4532 = trunc i32 %4531 to i8
  %4533 = and i8 %4532, 1
  %4534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4533, i8* %4534, align 1, !tbaa !2447
  %4535 = icmp eq i32 %4515, 0
  %4536 = zext i1 %4535 to i8
  %4537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4536, i8* %4537, align 1, !tbaa !2448
  %4538 = lshr i32 %4515, 31
  %4539 = trunc i32 %4538 to i8
  %4540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4539, i8* %4540, align 1, !tbaa !2449
  %4541 = lshr i32 %4514, 31
  %4542 = xor i32 %4538, %4541
  %4543 = add nuw nsw i32 %4542, %4538
  %4544 = icmp eq i32 %4543, 2
  %4545 = zext i1 %4544 to i8
  %4546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4545, i8* %4546, align 1, !tbaa !2450
  %4547 = load i64, i64* %RBP
  %4548 = sub i64 %4547, 48
  %4549 = load i32, i32* %EAX
  %4550 = zext i32 %4549 to i64
  %4551 = load i64, i64* %PC
  %4552 = add i64 %4551, 3
  store i64 %4552, i64* %PC
  %4553 = inttoptr i64 %4548 to i32*
  store i32 %4549, i32* %4553
  %4554 = load i64, i64* %PC
  %4555 = sub i64 %4554, 821
  %4556 = load i64, i64* %PC
  %4557 = add i64 %4556, 5
  store i64 %4557, i64* %PC
  %4558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4555, i64* %4558, align 8, !tbaa !2428
  br label %block_402469

block_402166:                                     ; preds = %block_40215a
  %4559 = load i64, i64* %RBP
  %4560 = sub i64 %4559, 16
  %4561 = load i64, i64* %PC
  %4562 = add i64 %4561, 4
  store i64 %4562, i64* %PC
  %4563 = inttoptr i64 %4560 to i64*
  %4564 = load i64, i64* %4563
  store i64 %4564, i64* %RAX, align 8, !tbaa !2428
  %4565 = load i64, i64* %RBP
  %4566 = sub i64 %4565, 48
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 4
  store i64 %4568, i64* %PC
  %4569 = inttoptr i64 %4566 to i32*
  %4570 = load i32, i32* %4569
  %4571 = sext i32 %4570 to i64
  store i64 %4571, i64* %RCX, align 8, !tbaa !2428
  %4572 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4573 = load i64, i64* %RAX
  %4574 = load i64, i64* %RCX
  %4575 = mul i64 %4574, 4
  %4576 = add i64 %4575, %4573
  %4577 = load i64, i64* %PC
  %4578 = add i64 %4577, 5
  store i64 %4578, i64* %PC
  %4579 = inttoptr i64 %4576 to float*
  %4580 = load float, float* %4579
  %4581 = bitcast i8* %4572 to float*
  store float %4580, float* %4581, align 1, !tbaa !2452
  %4582 = getelementptr inbounds i8, i8* %4572, i64 4
  %4583 = bitcast i8* %4582 to float*
  store float 0.000000e+00, float* %4583, align 1, !tbaa !2452
  %4584 = getelementptr inbounds i8, i8* %4572, i64 8
  %4585 = bitcast i8* %4584 to float*
  store float 0.000000e+00, float* %4585, align 1, !tbaa !2452
  %4586 = getelementptr inbounds i8, i8* %4572, i64 12
  %4587 = bitcast i8* %4586 to float*
  store float 0.000000e+00, float* %4587, align 1, !tbaa !2452
  %4588 = load i64, i64* %RBP
  %4589 = sub i64 %4588, 32
  %4590 = load i64, i64* %PC
  %4591 = add i64 %4590, 4
  store i64 %4591, i64* %PC
  %4592 = inttoptr i64 %4589 to i64*
  %4593 = load i64, i64* %4592
  store i64 %4593, i64* %RAX, align 8, !tbaa !2428
  %4594 = load i64, i64* %RBP
  %4595 = sub i64 %4594, 44
  %4596 = load i64, i64* %PC
  %4597 = add i64 %4596, 3
  store i64 %4597, i64* %PC
  %4598 = inttoptr i64 %4595 to i32*
  %4599 = load i32, i32* %4598
  %4600 = zext i32 %4599 to i64
  store i64 %4600, i64* %RDX, align 8, !tbaa !2428
  %4601 = load i64, i64* %RDX
  %4602 = load i64, i64* %PC
  %4603 = add i64 %4602, 3
  store i64 %4603, i64* %PC
  %4604 = trunc i64 %4601 to i32
  %4605 = sub i32 %4604, 3
  %4606 = zext i32 %4605 to i64
  store i64 %4606, i64* %RDX, align 8, !tbaa !2428
  %4607 = icmp ult i32 %4604, 3
  %4608 = zext i1 %4607 to i8
  %4609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4608, i8* %4609, align 1, !tbaa !2432
  %4610 = and i32 %4605, 255
  %4611 = call i32 @llvm.ctpop.i32(i32 %4610) #16
  %4612 = trunc i32 %4611 to i8
  %4613 = and i8 %4612, 1
  %4614 = xor i8 %4613, 1
  %4615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4614, i8* %4615, align 1, !tbaa !2446
  %4616 = xor i64 3, %4601
  %4617 = trunc i64 %4616 to i32
  %4618 = xor i32 %4617, %4605
  %4619 = lshr i32 %4618, 4
  %4620 = trunc i32 %4619 to i8
  %4621 = and i8 %4620, 1
  %4622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4621, i8* %4622, align 1, !tbaa !2447
  %4623 = icmp eq i32 %4605, 0
  %4624 = zext i1 %4623 to i8
  %4625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4624, i8* %4625, align 1, !tbaa !2448
  %4626 = lshr i32 %4605, 31
  %4627 = trunc i32 %4626 to i8
  %4628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4627, i8* %4628, align 1, !tbaa !2449
  %4629 = lshr i32 %4604, 31
  %4630 = xor i32 %4626, %4629
  %4631 = add nuw nsw i32 %4630, %4629
  %4632 = icmp eq i32 %4631, 2
  %4633 = zext i1 %4632 to i8
  %4634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4633, i8* %4634, align 1, !tbaa !2450
  %4635 = load i32, i32* %EDX
  %4636 = zext i32 %4635 to i64
  %4637 = load i64, i64* %PC
  %4638 = add i64 %4637, 3
  store i64 %4638, i64* %PC
  %4639 = shl i64 %4636, 32
  %4640 = ashr exact i64 %4639, 32
  store i64 %4640, i64* %RCX, align 8, !tbaa !2428
  %4641 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4642 = load i64, i64* %RAX
  %4643 = load i64, i64* %RCX
  %4644 = mul i64 %4643, 4
  %4645 = add i64 %4644, %4642
  %4646 = load i64, i64* %PC
  %4647 = add i64 %4646, 5
  store i64 %4647, i64* %PC
  %4648 = inttoptr i64 %4645 to float*
  %4649 = load float, float* %4648
  %4650 = bitcast i8* %4641 to float*
  store float %4649, float* %4650, align 1, !tbaa !2452
  %4651 = getelementptr inbounds i8, i8* %4641, i64 4
  %4652 = bitcast i8* %4651 to float*
  store float 0.000000e+00, float* %4652, align 1, !tbaa !2452
  %4653 = getelementptr inbounds i8, i8* %4641, i64 8
  %4654 = bitcast i8* %4653 to float*
  store float 0.000000e+00, float* %4654, align 1, !tbaa !2452
  %4655 = getelementptr inbounds i8, i8* %4641, i64 12
  %4656 = bitcast i8* %4655 to float*
  store float 0.000000e+00, float* %4656, align 1, !tbaa !2452
  %4657 = load i64, i64* %RBP
  %4658 = sub i64 %4657, 40
  %4659 = load i64, i64* %PC
  %4660 = add i64 %4659, 4
  store i64 %4660, i64* %PC
  %4661 = inttoptr i64 %4658 to i64*
  %4662 = load i64, i64* %4661
  store i64 %4662, i64* %RAX, align 8, !tbaa !2428
  %4663 = load i64, i64* %RBP
  %4664 = sub i64 %4663, 24
  %4665 = load i64, i64* %PC
  %4666 = add i64 %4665, 3
  store i64 %4666, i64* %PC
  %4667 = inttoptr i64 %4664 to i32*
  %4668 = load i32, i32* %4667
  %4669 = zext i32 %4668 to i64
  store i64 %4669, i64* %RDX, align 8, !tbaa !2428
  %4670 = load i64, i64* %RBP
  %4671 = sub i64 %4670, 44
  %4672 = load i64, i64* %PC
  %4673 = add i64 %4672, 3
  store i64 %4673, i64* %PC
  %4674 = inttoptr i64 %4671 to i32*
  %4675 = load i32, i32* %4674
  %4676 = zext i32 %4675 to i64
  store i64 %4676, i64* %RSI, align 8, !tbaa !2428
  %4677 = load i64, i64* %RSI
  %4678 = load i64, i64* %PC
  %4679 = add i64 %4678, 3
  store i64 %4679, i64* %PC
  %4680 = trunc i64 %4677 to i32
  %4681 = sub i32 %4680, 3
  %4682 = zext i32 %4681 to i64
  store i64 %4682, i64* %RSI, align 8, !tbaa !2428
  %4683 = icmp ult i32 %4680, 3
  %4684 = zext i1 %4683 to i8
  %4685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4684, i8* %4685, align 1, !tbaa !2432
  %4686 = and i32 %4681, 255
  %4687 = call i32 @llvm.ctpop.i32(i32 %4686) #16
  %4688 = trunc i32 %4687 to i8
  %4689 = and i8 %4688, 1
  %4690 = xor i8 %4689, 1
  %4691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4690, i8* %4691, align 1, !tbaa !2446
  %4692 = xor i64 3, %4677
  %4693 = trunc i64 %4692 to i32
  %4694 = xor i32 %4693, %4681
  %4695 = lshr i32 %4694, 4
  %4696 = trunc i32 %4695 to i8
  %4697 = and i8 %4696, 1
  %4698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4697, i8* %4698, align 1, !tbaa !2447
  %4699 = icmp eq i32 %4681, 0
  %4700 = zext i1 %4699 to i8
  %4701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4700, i8* %4701, align 1, !tbaa !2448
  %4702 = lshr i32 %4681, 31
  %4703 = trunc i32 %4702 to i8
  %4704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4703, i8* %4704, align 1, !tbaa !2449
  %4705 = lshr i32 %4680, 31
  %4706 = xor i32 %4702, %4705
  %4707 = add nuw nsw i32 %4706, %4705
  %4708 = icmp eq i32 %4707, 2
  %4709 = zext i1 %4708 to i8
  %4710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4709, i8* %4710, align 1, !tbaa !2450
  %4711 = load i64, i64* %RDX
  %4712 = load i32, i32* %ESI
  %4713 = zext i32 %4712 to i64
  %4714 = load i64, i64* %PC
  %4715 = add i64 %4714, 3
  store i64 %4715, i64* %PC
  %4716 = shl i64 %4711, 32
  %4717 = ashr exact i64 %4716, 32
  %4718 = shl i64 %4713, 32
  %4719 = ashr exact i64 %4718, 32
  %4720 = mul nsw i64 %4719, %4717
  %4721 = trunc i64 %4720 to i32
  %4722 = and i64 %4720, 4294967295
  store i64 %4722, i64* %RDX, align 8, !tbaa !2428
  %4723 = shl i64 %4720, 32
  %4724 = ashr exact i64 %4723, 32
  %4725 = icmp ne i64 %4724, %4720
  %4726 = zext i1 %4725 to i8
  %4727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4726, i8* %4727, align 1, !tbaa !2432
  %4728 = and i32 %4721, 255
  %4729 = call i32 @llvm.ctpop.i32(i32 %4728) #16
  %4730 = trunc i32 %4729 to i8
  %4731 = and i8 %4730, 1
  %4732 = xor i8 %4731, 1
  %4733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4732, i8* %4733, align 1, !tbaa !2446
  %4734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4734, align 1, !tbaa !2447
  %4735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4735, align 1, !tbaa !2448
  %4736 = lshr i32 %4721, 31
  %4737 = trunc i32 %4736 to i8
  %4738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4737, i8* %4738, align 1, !tbaa !2449
  %4739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4726, i8* %4739, align 1, !tbaa !2450
  %4740 = load i64, i64* %RDX
  %4741 = load i64, i64* %RBP
  %4742 = sub i64 %4741, 48
  %4743 = load i64, i64* %PC
  %4744 = add i64 %4743, 3
  store i64 %4744, i64* %PC
  %4745 = trunc i64 %4740 to i32
  %4746 = inttoptr i64 %4742 to i32*
  %4747 = load i32, i32* %4746
  %4748 = add i32 %4747, %4745
  %4749 = zext i32 %4748 to i64
  store i64 %4749, i64* %RDX, align 8, !tbaa !2428
  %4750 = icmp ult i32 %4748, %4745
  %4751 = icmp ult i32 %4748, %4747
  %4752 = or i1 %4750, %4751
  %4753 = zext i1 %4752 to i8
  %4754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4753, i8* %4754, align 1, !tbaa !2432
  %4755 = and i32 %4748, 255
  %4756 = call i32 @llvm.ctpop.i32(i32 %4755) #16
  %4757 = trunc i32 %4756 to i8
  %4758 = and i8 %4757, 1
  %4759 = xor i8 %4758, 1
  %4760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4759, i8* %4760, align 1, !tbaa !2446
  %4761 = xor i32 %4747, %4745
  %4762 = xor i32 %4761, %4748
  %4763 = lshr i32 %4762, 4
  %4764 = trunc i32 %4763 to i8
  %4765 = and i8 %4764, 1
  %4766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4765, i8* %4766, align 1, !tbaa !2447
  %4767 = icmp eq i32 %4748, 0
  %4768 = zext i1 %4767 to i8
  %4769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4768, i8* %4769, align 1, !tbaa !2448
  %4770 = lshr i32 %4748, 31
  %4771 = trunc i32 %4770 to i8
  %4772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4771, i8* %4772, align 1, !tbaa !2449
  %4773 = lshr i32 %4745, 31
  %4774 = lshr i32 %4747, 31
  %4775 = xor i32 %4770, %4773
  %4776 = xor i32 %4770, %4774
  %4777 = add nuw nsw i32 %4775, %4776
  %4778 = icmp eq i32 %4777, 2
  %4779 = zext i1 %4778 to i8
  %4780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4779, i8* %4780, align 1, !tbaa !2450
  %4781 = load i32, i32* %EDX
  %4782 = zext i32 %4781 to i64
  %4783 = load i64, i64* %PC
  %4784 = add i64 %4783, 3
  store i64 %4784, i64* %PC
  %4785 = shl i64 %4782, 32
  %4786 = ashr exact i64 %4785, 32
  store i64 %4786, i64* %RCX, align 8, !tbaa !2428
  %4787 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4788 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4789 = load i64, i64* %RAX
  %4790 = load i64, i64* %RCX
  %4791 = mul i64 %4790, 4
  %4792 = add i64 %4791, %4789
  %4793 = load i64, i64* %PC
  %4794 = add i64 %4793, 5
  store i64 %4794, i64* %PC
  %4795 = bitcast i8* %4788 to <2 x float>*
  %4796 = load <2 x float>, <2 x float>* %4795, align 1
  %4797 = getelementptr inbounds i8, i8* %4788, i64 8
  %4798 = bitcast i8* %4797 to <2 x i32>*
  %4799 = load <2 x i32>, <2 x i32>* %4798, align 1
  %4800 = inttoptr i64 %4792 to float*
  %4801 = load float, float* %4800
  %4802 = extractelement <2 x float> %4796, i32 0
  %4803 = fmul float %4802, %4801
  %4804 = bitcast i8* %4787 to float*
  store float %4803, float* %4804, align 1, !tbaa !2452
  %4805 = bitcast <2 x float> %4796 to <2 x i32>
  %4806 = extractelement <2 x i32> %4805, i32 1
  %4807 = getelementptr inbounds i8, i8* %4787, i64 4
  %4808 = bitcast i8* %4807 to i32*
  store i32 %4806, i32* %4808, align 1, !tbaa !2452
  %4809 = extractelement <2 x i32> %4799, i32 0
  %4810 = getelementptr inbounds i8, i8* %4787, i64 8
  %4811 = bitcast i8* %4810 to i32*
  store i32 %4809, i32* %4811, align 1, !tbaa !2452
  %4812 = extractelement <2 x i32> %4799, i32 1
  %4813 = getelementptr inbounds i8, i8* %4787, i64 12
  %4814 = bitcast i8* %4813 to i32*
  store i32 %4812, i32* %4814, align 1, !tbaa !2452
  %4815 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4816 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4817 = bitcast %union.vec128_t* %XMM1 to i8*
  %4818 = load i64, i64* %PC
  %4819 = add i64 %4818, 4
  store i64 %4819, i64* %PC
  %4820 = bitcast i8* %4816 to <2 x float>*
  %4821 = load <2 x float>, <2 x float>* %4820, align 1
  %4822 = getelementptr inbounds i8, i8* %4816, i64 8
  %4823 = bitcast i8* %4822 to <2 x i32>*
  %4824 = load <2 x i32>, <2 x i32>* %4823, align 1
  %4825 = bitcast i8* %4817 to <2 x float>*
  %4826 = load <2 x float>, <2 x float>* %4825, align 1
  %4827 = extractelement <2 x float> %4821, i32 0
  %4828 = extractelement <2 x float> %4826, i32 0
  %4829 = fadd float %4827, %4828
  %4830 = bitcast i8* %4815 to float*
  store float %4829, float* %4830, align 1, !tbaa !2452
  %4831 = bitcast <2 x float> %4821 to <2 x i32>
  %4832 = extractelement <2 x i32> %4831, i32 1
  %4833 = getelementptr inbounds i8, i8* %4815, i64 4
  %4834 = bitcast i8* %4833 to i32*
  store i32 %4832, i32* %4834, align 1, !tbaa !2452
  %4835 = extractelement <2 x i32> %4824, i32 0
  %4836 = getelementptr inbounds i8, i8* %4815, i64 8
  %4837 = bitcast i8* %4836 to i32*
  store i32 %4835, i32* %4837, align 1, !tbaa !2452
  %4838 = extractelement <2 x i32> %4824, i32 1
  %4839 = getelementptr inbounds i8, i8* %4815, i64 12
  %4840 = bitcast i8* %4839 to i32*
  store i32 %4838, i32* %4840, align 1, !tbaa !2452
  %4841 = load i64, i64* %RBP
  %4842 = sub i64 %4841, 32
  %4843 = load i64, i64* %PC
  %4844 = add i64 %4843, 4
  store i64 %4844, i64* %PC
  %4845 = inttoptr i64 %4842 to i64*
  %4846 = load i64, i64* %4845
  store i64 %4846, i64* %RAX, align 8, !tbaa !2428
  %4847 = load i64, i64* %RBP
  %4848 = sub i64 %4847, 44
  %4849 = load i64, i64* %PC
  %4850 = add i64 %4849, 3
  store i64 %4850, i64* %PC
  %4851 = inttoptr i64 %4848 to i32*
  %4852 = load i32, i32* %4851
  %4853 = zext i32 %4852 to i64
  store i64 %4853, i64* %RDX, align 8, !tbaa !2428
  %4854 = load i64, i64* %RDX
  %4855 = load i64, i64* %PC
  %4856 = add i64 %4855, 3
  store i64 %4856, i64* %PC
  %4857 = trunc i64 %4854 to i32
  %4858 = sub i32 %4857, 2
  %4859 = zext i32 %4858 to i64
  store i64 %4859, i64* %RDX, align 8, !tbaa !2428
  %4860 = icmp ult i32 %4857, 2
  %4861 = zext i1 %4860 to i8
  %4862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4861, i8* %4862, align 1, !tbaa !2432
  %4863 = and i32 %4858, 255
  %4864 = call i32 @llvm.ctpop.i32(i32 %4863) #16
  %4865 = trunc i32 %4864 to i8
  %4866 = and i8 %4865, 1
  %4867 = xor i8 %4866, 1
  %4868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4867, i8* %4868, align 1, !tbaa !2446
  %4869 = xor i64 2, %4854
  %4870 = trunc i64 %4869 to i32
  %4871 = xor i32 %4870, %4858
  %4872 = lshr i32 %4871, 4
  %4873 = trunc i32 %4872 to i8
  %4874 = and i8 %4873, 1
  %4875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4874, i8* %4875, align 1, !tbaa !2447
  %4876 = icmp eq i32 %4858, 0
  %4877 = zext i1 %4876 to i8
  %4878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4877, i8* %4878, align 1, !tbaa !2448
  %4879 = lshr i32 %4858, 31
  %4880 = trunc i32 %4879 to i8
  %4881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4880, i8* %4881, align 1, !tbaa !2449
  %4882 = lshr i32 %4857, 31
  %4883 = xor i32 %4879, %4882
  %4884 = add nuw nsw i32 %4883, %4882
  %4885 = icmp eq i32 %4884, 2
  %4886 = zext i1 %4885 to i8
  %4887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4886, i8* %4887, align 1, !tbaa !2450
  %4888 = load i32, i32* %EDX
  %4889 = zext i32 %4888 to i64
  %4890 = load i64, i64* %PC
  %4891 = add i64 %4890, 3
  store i64 %4891, i64* %PC
  %4892 = shl i64 %4889, 32
  %4893 = ashr exact i64 %4892, 32
  store i64 %4893, i64* %RCX, align 8, !tbaa !2428
  %4894 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4895 = load i64, i64* %RAX
  %4896 = load i64, i64* %RCX
  %4897 = mul i64 %4896, 4
  %4898 = add i64 %4897, %4895
  %4899 = load i64, i64* %PC
  %4900 = add i64 %4899, 5
  store i64 %4900, i64* %PC
  %4901 = inttoptr i64 %4898 to float*
  %4902 = load float, float* %4901
  %4903 = bitcast i8* %4894 to float*
  store float %4902, float* %4903, align 1, !tbaa !2452
  %4904 = getelementptr inbounds i8, i8* %4894, i64 4
  %4905 = bitcast i8* %4904 to float*
  store float 0.000000e+00, float* %4905, align 1, !tbaa !2452
  %4906 = getelementptr inbounds i8, i8* %4894, i64 8
  %4907 = bitcast i8* %4906 to float*
  store float 0.000000e+00, float* %4907, align 1, !tbaa !2452
  %4908 = getelementptr inbounds i8, i8* %4894, i64 12
  %4909 = bitcast i8* %4908 to float*
  store float 0.000000e+00, float* %4909, align 1, !tbaa !2452
  %4910 = load i64, i64* %RBP
  %4911 = sub i64 %4910, 40
  %4912 = load i64, i64* %PC
  %4913 = add i64 %4912, 4
  store i64 %4913, i64* %PC
  %4914 = inttoptr i64 %4911 to i64*
  %4915 = load i64, i64* %4914
  store i64 %4915, i64* %RAX, align 8, !tbaa !2428
  %4916 = load i64, i64* %RBP
  %4917 = sub i64 %4916, 24
  %4918 = load i64, i64* %PC
  %4919 = add i64 %4918, 3
  store i64 %4919, i64* %PC
  %4920 = inttoptr i64 %4917 to i32*
  %4921 = load i32, i32* %4920
  %4922 = zext i32 %4921 to i64
  store i64 %4922, i64* %RDX, align 8, !tbaa !2428
  %4923 = load i64, i64* %RBP
  %4924 = sub i64 %4923, 44
  %4925 = load i64, i64* %PC
  %4926 = add i64 %4925, 3
  store i64 %4926, i64* %PC
  %4927 = inttoptr i64 %4924 to i32*
  %4928 = load i32, i32* %4927
  %4929 = zext i32 %4928 to i64
  store i64 %4929, i64* %RSI, align 8, !tbaa !2428
  %4930 = load i64, i64* %RSI
  %4931 = load i64, i64* %PC
  %4932 = add i64 %4931, 3
  store i64 %4932, i64* %PC
  %4933 = trunc i64 %4930 to i32
  %4934 = sub i32 %4933, 2
  %4935 = zext i32 %4934 to i64
  store i64 %4935, i64* %RSI, align 8, !tbaa !2428
  %4936 = icmp ult i32 %4933, 2
  %4937 = zext i1 %4936 to i8
  %4938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4937, i8* %4938, align 1, !tbaa !2432
  %4939 = and i32 %4934, 255
  %4940 = call i32 @llvm.ctpop.i32(i32 %4939) #16
  %4941 = trunc i32 %4940 to i8
  %4942 = and i8 %4941, 1
  %4943 = xor i8 %4942, 1
  %4944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4943, i8* %4944, align 1, !tbaa !2446
  %4945 = xor i64 2, %4930
  %4946 = trunc i64 %4945 to i32
  %4947 = xor i32 %4946, %4934
  %4948 = lshr i32 %4947, 4
  %4949 = trunc i32 %4948 to i8
  %4950 = and i8 %4949, 1
  %4951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4950, i8* %4951, align 1, !tbaa !2447
  %4952 = icmp eq i32 %4934, 0
  %4953 = zext i1 %4952 to i8
  %4954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4953, i8* %4954, align 1, !tbaa !2448
  %4955 = lshr i32 %4934, 31
  %4956 = trunc i32 %4955 to i8
  %4957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4956, i8* %4957, align 1, !tbaa !2449
  %4958 = lshr i32 %4933, 31
  %4959 = xor i32 %4955, %4958
  %4960 = add nuw nsw i32 %4959, %4958
  %4961 = icmp eq i32 %4960, 2
  %4962 = zext i1 %4961 to i8
  %4963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4962, i8* %4963, align 1, !tbaa !2450
  %4964 = load i64, i64* %RDX
  %4965 = load i32, i32* %ESI
  %4966 = zext i32 %4965 to i64
  %4967 = load i64, i64* %PC
  %4968 = add i64 %4967, 3
  store i64 %4968, i64* %PC
  %4969 = shl i64 %4964, 32
  %4970 = ashr exact i64 %4969, 32
  %4971 = shl i64 %4966, 32
  %4972 = ashr exact i64 %4971, 32
  %4973 = mul nsw i64 %4972, %4970
  %4974 = trunc i64 %4973 to i32
  %4975 = and i64 %4973, 4294967295
  store i64 %4975, i64* %RDX, align 8, !tbaa !2428
  %4976 = shl i64 %4973, 32
  %4977 = ashr exact i64 %4976, 32
  %4978 = icmp ne i64 %4977, %4973
  %4979 = zext i1 %4978 to i8
  %4980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4979, i8* %4980, align 1, !tbaa !2432
  %4981 = and i32 %4974, 255
  %4982 = call i32 @llvm.ctpop.i32(i32 %4981) #16
  %4983 = trunc i32 %4982 to i8
  %4984 = and i8 %4983, 1
  %4985 = xor i8 %4984, 1
  %4986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4985, i8* %4986, align 1, !tbaa !2446
  %4987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4987, align 1, !tbaa !2447
  %4988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4988, align 1, !tbaa !2448
  %4989 = lshr i32 %4974, 31
  %4990 = trunc i32 %4989 to i8
  %4991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4990, i8* %4991, align 1, !tbaa !2449
  %4992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4979, i8* %4992, align 1, !tbaa !2450
  %4993 = load i64, i64* %RDX
  %4994 = load i64, i64* %RBP
  %4995 = sub i64 %4994, 48
  %4996 = load i64, i64* %PC
  %4997 = add i64 %4996, 3
  store i64 %4997, i64* %PC
  %4998 = trunc i64 %4993 to i32
  %4999 = inttoptr i64 %4995 to i32*
  %5000 = load i32, i32* %4999
  %5001 = add i32 %5000, %4998
  %5002 = zext i32 %5001 to i64
  store i64 %5002, i64* %RDX, align 8, !tbaa !2428
  %5003 = icmp ult i32 %5001, %4998
  %5004 = icmp ult i32 %5001, %5000
  %5005 = or i1 %5003, %5004
  %5006 = zext i1 %5005 to i8
  %5007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5006, i8* %5007, align 1, !tbaa !2432
  %5008 = and i32 %5001, 255
  %5009 = call i32 @llvm.ctpop.i32(i32 %5008) #16
  %5010 = trunc i32 %5009 to i8
  %5011 = and i8 %5010, 1
  %5012 = xor i8 %5011, 1
  %5013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5012, i8* %5013, align 1, !tbaa !2446
  %5014 = xor i32 %5000, %4998
  %5015 = xor i32 %5014, %5001
  %5016 = lshr i32 %5015, 4
  %5017 = trunc i32 %5016 to i8
  %5018 = and i8 %5017, 1
  %5019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5018, i8* %5019, align 1, !tbaa !2447
  %5020 = icmp eq i32 %5001, 0
  %5021 = zext i1 %5020 to i8
  %5022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5021, i8* %5022, align 1, !tbaa !2448
  %5023 = lshr i32 %5001, 31
  %5024 = trunc i32 %5023 to i8
  %5025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5024, i8* %5025, align 1, !tbaa !2449
  %5026 = lshr i32 %4998, 31
  %5027 = lshr i32 %5000, 31
  %5028 = xor i32 %5023, %5026
  %5029 = xor i32 %5023, %5027
  %5030 = add nuw nsw i32 %5028, %5029
  %5031 = icmp eq i32 %5030, 2
  %5032 = zext i1 %5031 to i8
  %5033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5032, i8* %5033, align 1, !tbaa !2450
  %5034 = load i32, i32* %EDX
  %5035 = zext i32 %5034 to i64
  %5036 = load i64, i64* %PC
  %5037 = add i64 %5036, 3
  store i64 %5037, i64* %PC
  %5038 = shl i64 %5035, 32
  %5039 = ashr exact i64 %5038, 32
  store i64 %5039, i64* %RCX, align 8, !tbaa !2428
  %5040 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5041 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5042 = load i64, i64* %RAX
  %5043 = load i64, i64* %RCX
  %5044 = mul i64 %5043, 4
  %5045 = add i64 %5044, %5042
  %5046 = load i64, i64* %PC
  %5047 = add i64 %5046, 5
  store i64 %5047, i64* %PC
  %5048 = bitcast i8* %5041 to <2 x float>*
  %5049 = load <2 x float>, <2 x float>* %5048, align 1
  %5050 = getelementptr inbounds i8, i8* %5041, i64 8
  %5051 = bitcast i8* %5050 to <2 x i32>*
  %5052 = load <2 x i32>, <2 x i32>* %5051, align 1
  %5053 = inttoptr i64 %5045 to float*
  %5054 = load float, float* %5053
  %5055 = extractelement <2 x float> %5049, i32 0
  %5056 = fmul float %5055, %5054
  %5057 = bitcast i8* %5040 to float*
  store float %5056, float* %5057, align 1, !tbaa !2452
  %5058 = bitcast <2 x float> %5049 to <2 x i32>
  %5059 = extractelement <2 x i32> %5058, i32 1
  %5060 = getelementptr inbounds i8, i8* %5040, i64 4
  %5061 = bitcast i8* %5060 to i32*
  store i32 %5059, i32* %5061, align 1, !tbaa !2452
  %5062 = extractelement <2 x i32> %5052, i32 0
  %5063 = getelementptr inbounds i8, i8* %5040, i64 8
  %5064 = bitcast i8* %5063 to i32*
  store i32 %5062, i32* %5064, align 1, !tbaa !2452
  %5065 = extractelement <2 x i32> %5052, i32 1
  %5066 = getelementptr inbounds i8, i8* %5040, i64 12
  %5067 = bitcast i8* %5066 to i32*
  store i32 %5065, i32* %5067, align 1, !tbaa !2452
  %5068 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5069 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5070 = bitcast %union.vec128_t* %XMM1 to i8*
  %5071 = load i64, i64* %PC
  %5072 = add i64 %5071, 4
  store i64 %5072, i64* %PC
  %5073 = bitcast i8* %5069 to <2 x float>*
  %5074 = load <2 x float>, <2 x float>* %5073, align 1
  %5075 = getelementptr inbounds i8, i8* %5069, i64 8
  %5076 = bitcast i8* %5075 to <2 x i32>*
  %5077 = load <2 x i32>, <2 x i32>* %5076, align 1
  %5078 = bitcast i8* %5070 to <2 x float>*
  %5079 = load <2 x float>, <2 x float>* %5078, align 1
  %5080 = extractelement <2 x float> %5074, i32 0
  %5081 = extractelement <2 x float> %5079, i32 0
  %5082 = fadd float %5080, %5081
  %5083 = bitcast i8* %5068 to float*
  store float %5082, float* %5083, align 1, !tbaa !2452
  %5084 = bitcast <2 x float> %5074 to <2 x i32>
  %5085 = extractelement <2 x i32> %5084, i32 1
  %5086 = getelementptr inbounds i8, i8* %5068, i64 4
  %5087 = bitcast i8* %5086 to i32*
  store i32 %5085, i32* %5087, align 1, !tbaa !2452
  %5088 = extractelement <2 x i32> %5077, i32 0
  %5089 = getelementptr inbounds i8, i8* %5068, i64 8
  %5090 = bitcast i8* %5089 to i32*
  store i32 %5088, i32* %5090, align 1, !tbaa !2452
  %5091 = extractelement <2 x i32> %5077, i32 1
  %5092 = getelementptr inbounds i8, i8* %5068, i64 12
  %5093 = bitcast i8* %5092 to i32*
  store i32 %5091, i32* %5093, align 1, !tbaa !2452
  %5094 = load i64, i64* %RBP
  %5095 = sub i64 %5094, 32
  %5096 = load i64, i64* %PC
  %5097 = add i64 %5096, 4
  store i64 %5097, i64* %PC
  %5098 = inttoptr i64 %5095 to i64*
  %5099 = load i64, i64* %5098
  store i64 %5099, i64* %RAX, align 8, !tbaa !2428
  %5100 = load i64, i64* %RBP
  %5101 = sub i64 %5100, 44
  %5102 = load i64, i64* %PC
  %5103 = add i64 %5102, 3
  store i64 %5103, i64* %PC
  %5104 = inttoptr i64 %5101 to i32*
  %5105 = load i32, i32* %5104
  %5106 = zext i32 %5105 to i64
  store i64 %5106, i64* %RDX, align 8, !tbaa !2428
  %5107 = load i64, i64* %RDX
  %5108 = load i64, i64* %PC
  %5109 = add i64 %5108, 3
  store i64 %5109, i64* %PC
  %5110 = trunc i64 %5107 to i32
  %5111 = sub i32 %5110, 1
  %5112 = zext i32 %5111 to i64
  store i64 %5112, i64* %RDX, align 8, !tbaa !2428
  %5113 = icmp ult i32 %5110, 1
  %5114 = zext i1 %5113 to i8
  %5115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5114, i8* %5115, align 1, !tbaa !2432
  %5116 = and i32 %5111, 255
  %5117 = call i32 @llvm.ctpop.i32(i32 %5116) #16
  %5118 = trunc i32 %5117 to i8
  %5119 = and i8 %5118, 1
  %5120 = xor i8 %5119, 1
  %5121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5120, i8* %5121, align 1, !tbaa !2446
  %5122 = xor i64 1, %5107
  %5123 = trunc i64 %5122 to i32
  %5124 = xor i32 %5123, %5111
  %5125 = lshr i32 %5124, 4
  %5126 = trunc i32 %5125 to i8
  %5127 = and i8 %5126, 1
  %5128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5127, i8* %5128, align 1, !tbaa !2447
  %5129 = icmp eq i32 %5111, 0
  %5130 = zext i1 %5129 to i8
  %5131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5130, i8* %5131, align 1, !tbaa !2448
  %5132 = lshr i32 %5111, 31
  %5133 = trunc i32 %5132 to i8
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5133, i8* %5134, align 1, !tbaa !2449
  %5135 = lshr i32 %5110, 31
  %5136 = xor i32 %5132, %5135
  %5137 = add nuw nsw i32 %5136, %5135
  %5138 = icmp eq i32 %5137, 2
  %5139 = zext i1 %5138 to i8
  %5140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5139, i8* %5140, align 1, !tbaa !2450
  %5141 = load i32, i32* %EDX
  %5142 = zext i32 %5141 to i64
  %5143 = load i64, i64* %PC
  %5144 = add i64 %5143, 3
  store i64 %5144, i64* %PC
  %5145 = shl i64 %5142, 32
  %5146 = ashr exact i64 %5145, 32
  store i64 %5146, i64* %RCX, align 8, !tbaa !2428
  %5147 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5148 = load i64, i64* %RAX
  %5149 = load i64, i64* %RCX
  %5150 = mul i64 %5149, 4
  %5151 = add i64 %5150, %5148
  %5152 = load i64, i64* %PC
  %5153 = add i64 %5152, 5
  store i64 %5153, i64* %PC
  %5154 = inttoptr i64 %5151 to float*
  %5155 = load float, float* %5154
  %5156 = bitcast i8* %5147 to float*
  store float %5155, float* %5156, align 1, !tbaa !2452
  %5157 = getelementptr inbounds i8, i8* %5147, i64 4
  %5158 = bitcast i8* %5157 to float*
  store float 0.000000e+00, float* %5158, align 1, !tbaa !2452
  %5159 = getelementptr inbounds i8, i8* %5147, i64 8
  %5160 = bitcast i8* %5159 to float*
  store float 0.000000e+00, float* %5160, align 1, !tbaa !2452
  %5161 = getelementptr inbounds i8, i8* %5147, i64 12
  %5162 = bitcast i8* %5161 to float*
  store float 0.000000e+00, float* %5162, align 1, !tbaa !2452
  %5163 = load i64, i64* %RBP
  %5164 = sub i64 %5163, 40
  %5165 = load i64, i64* %PC
  %5166 = add i64 %5165, 4
  store i64 %5166, i64* %PC
  %5167 = inttoptr i64 %5164 to i64*
  %5168 = load i64, i64* %5167
  store i64 %5168, i64* %RAX, align 8, !tbaa !2428
  %5169 = load i64, i64* %RBP
  %5170 = sub i64 %5169, 24
  %5171 = load i64, i64* %PC
  %5172 = add i64 %5171, 3
  store i64 %5172, i64* %PC
  %5173 = inttoptr i64 %5170 to i32*
  %5174 = load i32, i32* %5173
  %5175 = zext i32 %5174 to i64
  store i64 %5175, i64* %RDX, align 8, !tbaa !2428
  %5176 = load i64, i64* %RBP
  %5177 = sub i64 %5176, 44
  %5178 = load i64, i64* %PC
  %5179 = add i64 %5178, 3
  store i64 %5179, i64* %PC
  %5180 = inttoptr i64 %5177 to i32*
  %5181 = load i32, i32* %5180
  %5182 = zext i32 %5181 to i64
  store i64 %5182, i64* %RSI, align 8, !tbaa !2428
  %5183 = load i64, i64* %RSI
  %5184 = load i64, i64* %PC
  %5185 = add i64 %5184, 3
  store i64 %5185, i64* %PC
  %5186 = trunc i64 %5183 to i32
  %5187 = sub i32 %5186, 1
  %5188 = zext i32 %5187 to i64
  store i64 %5188, i64* %RSI, align 8, !tbaa !2428
  %5189 = icmp ult i32 %5186, 1
  %5190 = zext i1 %5189 to i8
  %5191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5190, i8* %5191, align 1, !tbaa !2432
  %5192 = and i32 %5187, 255
  %5193 = call i32 @llvm.ctpop.i32(i32 %5192) #16
  %5194 = trunc i32 %5193 to i8
  %5195 = and i8 %5194, 1
  %5196 = xor i8 %5195, 1
  %5197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5196, i8* %5197, align 1, !tbaa !2446
  %5198 = xor i64 1, %5183
  %5199 = trunc i64 %5198 to i32
  %5200 = xor i32 %5199, %5187
  %5201 = lshr i32 %5200, 4
  %5202 = trunc i32 %5201 to i8
  %5203 = and i8 %5202, 1
  %5204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5203, i8* %5204, align 1, !tbaa !2447
  %5205 = icmp eq i32 %5187, 0
  %5206 = zext i1 %5205 to i8
  %5207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5206, i8* %5207, align 1, !tbaa !2448
  %5208 = lshr i32 %5187, 31
  %5209 = trunc i32 %5208 to i8
  %5210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5209, i8* %5210, align 1, !tbaa !2449
  %5211 = lshr i32 %5186, 31
  %5212 = xor i32 %5208, %5211
  %5213 = add nuw nsw i32 %5212, %5211
  %5214 = icmp eq i32 %5213, 2
  %5215 = zext i1 %5214 to i8
  %5216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5215, i8* %5216, align 1, !tbaa !2450
  %5217 = load i64, i64* %RDX
  %5218 = load i32, i32* %ESI
  %5219 = zext i32 %5218 to i64
  %5220 = load i64, i64* %PC
  %5221 = add i64 %5220, 3
  store i64 %5221, i64* %PC
  %5222 = shl i64 %5217, 32
  %5223 = ashr exact i64 %5222, 32
  %5224 = shl i64 %5219, 32
  %5225 = ashr exact i64 %5224, 32
  %5226 = mul nsw i64 %5225, %5223
  %5227 = trunc i64 %5226 to i32
  %5228 = and i64 %5226, 4294967295
  store i64 %5228, i64* %RDX, align 8, !tbaa !2428
  %5229 = shl i64 %5226, 32
  %5230 = ashr exact i64 %5229, 32
  %5231 = icmp ne i64 %5230, %5226
  %5232 = zext i1 %5231 to i8
  %5233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5232, i8* %5233, align 1, !tbaa !2432
  %5234 = and i32 %5227, 255
  %5235 = call i32 @llvm.ctpop.i32(i32 %5234) #16
  %5236 = trunc i32 %5235 to i8
  %5237 = and i8 %5236, 1
  %5238 = xor i8 %5237, 1
  %5239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5238, i8* %5239, align 1, !tbaa !2446
  %5240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5240, align 1, !tbaa !2447
  %5241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5241, align 1, !tbaa !2448
  %5242 = lshr i32 %5227, 31
  %5243 = trunc i32 %5242 to i8
  %5244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5243, i8* %5244, align 1, !tbaa !2449
  %5245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5232, i8* %5245, align 1, !tbaa !2450
  %5246 = load i64, i64* %RDX
  %5247 = load i64, i64* %RBP
  %5248 = sub i64 %5247, 48
  %5249 = load i64, i64* %PC
  %5250 = add i64 %5249, 3
  store i64 %5250, i64* %PC
  %5251 = trunc i64 %5246 to i32
  %5252 = inttoptr i64 %5248 to i32*
  %5253 = load i32, i32* %5252
  %5254 = add i32 %5253, %5251
  %5255 = zext i32 %5254 to i64
  store i64 %5255, i64* %RDX, align 8, !tbaa !2428
  %5256 = icmp ult i32 %5254, %5251
  %5257 = icmp ult i32 %5254, %5253
  %5258 = or i1 %5256, %5257
  %5259 = zext i1 %5258 to i8
  %5260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5259, i8* %5260, align 1, !tbaa !2432
  %5261 = and i32 %5254, 255
  %5262 = call i32 @llvm.ctpop.i32(i32 %5261) #16
  %5263 = trunc i32 %5262 to i8
  %5264 = and i8 %5263, 1
  %5265 = xor i8 %5264, 1
  %5266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5265, i8* %5266, align 1, !tbaa !2446
  %5267 = xor i32 %5253, %5251
  %5268 = xor i32 %5267, %5254
  %5269 = lshr i32 %5268, 4
  %5270 = trunc i32 %5269 to i8
  %5271 = and i8 %5270, 1
  %5272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5271, i8* %5272, align 1, !tbaa !2447
  %5273 = icmp eq i32 %5254, 0
  %5274 = zext i1 %5273 to i8
  %5275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5274, i8* %5275, align 1, !tbaa !2448
  %5276 = lshr i32 %5254, 31
  %5277 = trunc i32 %5276 to i8
  %5278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5277, i8* %5278, align 1, !tbaa !2449
  %5279 = lshr i32 %5251, 31
  %5280 = lshr i32 %5253, 31
  %5281 = xor i32 %5276, %5279
  %5282 = xor i32 %5276, %5280
  %5283 = add nuw nsw i32 %5281, %5282
  %5284 = icmp eq i32 %5283, 2
  %5285 = zext i1 %5284 to i8
  %5286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5285, i8* %5286, align 1, !tbaa !2450
  %5287 = load i32, i32* %EDX
  %5288 = zext i32 %5287 to i64
  %5289 = load i64, i64* %PC
  %5290 = add i64 %5289, 3
  store i64 %5290, i64* %PC
  %5291 = shl i64 %5288, 32
  %5292 = ashr exact i64 %5291, 32
  store i64 %5292, i64* %RCX, align 8, !tbaa !2428
  %5293 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5294 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5295 = load i64, i64* %RAX
  %5296 = load i64, i64* %RCX
  %5297 = mul i64 %5296, 4
  %5298 = add i64 %5297, %5295
  %5299 = load i64, i64* %PC
  %5300 = add i64 %5299, 5
  store i64 %5300, i64* %PC
  %5301 = bitcast i8* %5294 to <2 x float>*
  %5302 = load <2 x float>, <2 x float>* %5301, align 1
  %5303 = getelementptr inbounds i8, i8* %5294, i64 8
  %5304 = bitcast i8* %5303 to <2 x i32>*
  %5305 = load <2 x i32>, <2 x i32>* %5304, align 1
  %5306 = inttoptr i64 %5298 to float*
  %5307 = load float, float* %5306
  %5308 = extractelement <2 x float> %5302, i32 0
  %5309 = fmul float %5308, %5307
  %5310 = bitcast i8* %5293 to float*
  store float %5309, float* %5310, align 1, !tbaa !2452
  %5311 = bitcast <2 x float> %5302 to <2 x i32>
  %5312 = extractelement <2 x i32> %5311, i32 1
  %5313 = getelementptr inbounds i8, i8* %5293, i64 4
  %5314 = bitcast i8* %5313 to i32*
  store i32 %5312, i32* %5314, align 1, !tbaa !2452
  %5315 = extractelement <2 x i32> %5305, i32 0
  %5316 = getelementptr inbounds i8, i8* %5293, i64 8
  %5317 = bitcast i8* %5316 to i32*
  store i32 %5315, i32* %5317, align 1, !tbaa !2452
  %5318 = extractelement <2 x i32> %5305, i32 1
  %5319 = getelementptr inbounds i8, i8* %5293, i64 12
  %5320 = bitcast i8* %5319 to i32*
  store i32 %5318, i32* %5320, align 1, !tbaa !2452
  %5321 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5322 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5323 = bitcast %union.vec128_t* %XMM1 to i8*
  %5324 = load i64, i64* %PC
  %5325 = add i64 %5324, 4
  store i64 %5325, i64* %PC
  %5326 = bitcast i8* %5322 to <2 x float>*
  %5327 = load <2 x float>, <2 x float>* %5326, align 1
  %5328 = getelementptr inbounds i8, i8* %5322, i64 8
  %5329 = bitcast i8* %5328 to <2 x i32>*
  %5330 = load <2 x i32>, <2 x i32>* %5329, align 1
  %5331 = bitcast i8* %5323 to <2 x float>*
  %5332 = load <2 x float>, <2 x float>* %5331, align 1
  %5333 = extractelement <2 x float> %5327, i32 0
  %5334 = extractelement <2 x float> %5332, i32 0
  %5335 = fadd float %5333, %5334
  %5336 = bitcast i8* %5321 to float*
  store float %5335, float* %5336, align 1, !tbaa !2452
  %5337 = bitcast <2 x float> %5327 to <2 x i32>
  %5338 = extractelement <2 x i32> %5337, i32 1
  %5339 = getelementptr inbounds i8, i8* %5321, i64 4
  %5340 = bitcast i8* %5339 to i32*
  store i32 %5338, i32* %5340, align 1, !tbaa !2452
  %5341 = extractelement <2 x i32> %5330, i32 0
  %5342 = getelementptr inbounds i8, i8* %5321, i64 8
  %5343 = bitcast i8* %5342 to i32*
  store i32 %5341, i32* %5343, align 1, !tbaa !2452
  %5344 = extractelement <2 x i32> %5330, i32 1
  %5345 = getelementptr inbounds i8, i8* %5321, i64 12
  %5346 = bitcast i8* %5345 to i32*
  store i32 %5344, i32* %5346, align 1, !tbaa !2452
  %5347 = load i64, i64* %RBP
  %5348 = sub i64 %5347, 32
  %5349 = load i64, i64* %PC
  %5350 = add i64 %5349, 4
  store i64 %5350, i64* %PC
  %5351 = inttoptr i64 %5348 to i64*
  %5352 = load i64, i64* %5351
  store i64 %5352, i64* %RAX, align 8, !tbaa !2428
  %5353 = load i64, i64* %RBP
  %5354 = sub i64 %5353, 44
  %5355 = load i64, i64* %PC
  %5356 = add i64 %5355, 4
  store i64 %5356, i64* %PC
  %5357 = inttoptr i64 %5354 to i32*
  %5358 = load i32, i32* %5357
  %5359 = sext i32 %5358 to i64
  store i64 %5359, i64* %RCX, align 8, !tbaa !2428
  %5360 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5361 = load i64, i64* %RAX
  %5362 = load i64, i64* %RCX
  %5363 = mul i64 %5362, 4
  %5364 = add i64 %5363, %5361
  %5365 = load i64, i64* %PC
  %5366 = add i64 %5365, 5
  store i64 %5366, i64* %PC
  %5367 = inttoptr i64 %5364 to float*
  %5368 = load float, float* %5367
  %5369 = bitcast i8* %5360 to float*
  store float %5368, float* %5369, align 1, !tbaa !2452
  %5370 = getelementptr inbounds i8, i8* %5360, i64 4
  %5371 = bitcast i8* %5370 to float*
  store float 0.000000e+00, float* %5371, align 1, !tbaa !2452
  %5372 = getelementptr inbounds i8, i8* %5360, i64 8
  %5373 = bitcast i8* %5372 to float*
  store float 0.000000e+00, float* %5373, align 1, !tbaa !2452
  %5374 = getelementptr inbounds i8, i8* %5360, i64 12
  %5375 = bitcast i8* %5374 to float*
  store float 0.000000e+00, float* %5375, align 1, !tbaa !2452
  %5376 = load i64, i64* %RBP
  %5377 = sub i64 %5376, 40
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 4
  store i64 %5379, i64* %PC
  %5380 = inttoptr i64 %5377 to i64*
  %5381 = load i64, i64* %5380
  store i64 %5381, i64* %RAX, align 8, !tbaa !2428
  %5382 = load i64, i64* %RBP
  %5383 = sub i64 %5382, 24
  %5384 = load i64, i64* %PC
  %5385 = add i64 %5384, 3
  store i64 %5385, i64* %PC
  %5386 = inttoptr i64 %5383 to i32*
  %5387 = load i32, i32* %5386
  %5388 = zext i32 %5387 to i64
  store i64 %5388, i64* %RDX, align 8, !tbaa !2428
  %5389 = load i64, i64* %RDX
  %5390 = load i64, i64* %RBP
  %5391 = sub i64 %5390, 44
  %5392 = load i64, i64* %PC
  %5393 = add i64 %5392, 4
  store i64 %5393, i64* %PC
  %5394 = inttoptr i64 %5391 to i32*
  %5395 = load i32, i32* %5394
  %5396 = shl i64 %5389, 32
  %5397 = ashr exact i64 %5396, 32
  %5398 = sext i32 %5395 to i64
  %5399 = mul nsw i64 %5398, %5397
  %5400 = trunc i64 %5399 to i32
  %5401 = and i64 %5399, 4294967295
  store i64 %5401, i64* %RDX, align 8, !tbaa !2428
  %5402 = shl i64 %5399, 32
  %5403 = ashr exact i64 %5402, 32
  %5404 = icmp ne i64 %5403, %5399
  %5405 = zext i1 %5404 to i8
  %5406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5405, i8* %5406, align 1, !tbaa !2432
  %5407 = and i32 %5400, 255
  %5408 = call i32 @llvm.ctpop.i32(i32 %5407) #16
  %5409 = trunc i32 %5408 to i8
  %5410 = and i8 %5409, 1
  %5411 = xor i8 %5410, 1
  %5412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5411, i8* %5412, align 1, !tbaa !2446
  %5413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5413, align 1, !tbaa !2447
  %5414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5414, align 1, !tbaa !2448
  %5415 = lshr i32 %5400, 31
  %5416 = trunc i32 %5415 to i8
  %5417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5416, i8* %5417, align 1, !tbaa !2449
  %5418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5405, i8* %5418, align 1, !tbaa !2450
  %5419 = load i64, i64* %RDX
  %5420 = load i64, i64* %RBP
  %5421 = sub i64 %5420, 48
  %5422 = load i64, i64* %PC
  %5423 = add i64 %5422, 3
  store i64 %5423, i64* %PC
  %5424 = trunc i64 %5419 to i32
  %5425 = inttoptr i64 %5421 to i32*
  %5426 = load i32, i32* %5425
  %5427 = add i32 %5426, %5424
  %5428 = zext i32 %5427 to i64
  store i64 %5428, i64* %RDX, align 8, !tbaa !2428
  %5429 = icmp ult i32 %5427, %5424
  %5430 = icmp ult i32 %5427, %5426
  %5431 = or i1 %5429, %5430
  %5432 = zext i1 %5431 to i8
  %5433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5432, i8* %5433, align 1, !tbaa !2432
  %5434 = and i32 %5427, 255
  %5435 = call i32 @llvm.ctpop.i32(i32 %5434) #16
  %5436 = trunc i32 %5435 to i8
  %5437 = and i8 %5436, 1
  %5438 = xor i8 %5437, 1
  %5439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5438, i8* %5439, align 1, !tbaa !2446
  %5440 = xor i32 %5426, %5424
  %5441 = xor i32 %5440, %5427
  %5442 = lshr i32 %5441, 4
  %5443 = trunc i32 %5442 to i8
  %5444 = and i8 %5443, 1
  %5445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5444, i8* %5445, align 1, !tbaa !2447
  %5446 = icmp eq i32 %5427, 0
  %5447 = zext i1 %5446 to i8
  %5448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5447, i8* %5448, align 1, !tbaa !2448
  %5449 = lshr i32 %5427, 31
  %5450 = trunc i32 %5449 to i8
  %5451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5450, i8* %5451, align 1, !tbaa !2449
  %5452 = lshr i32 %5424, 31
  %5453 = lshr i32 %5426, 31
  %5454 = xor i32 %5449, %5452
  %5455 = xor i32 %5449, %5453
  %5456 = add nuw nsw i32 %5454, %5455
  %5457 = icmp eq i32 %5456, 2
  %5458 = zext i1 %5457 to i8
  %5459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5458, i8* %5459, align 1, !tbaa !2450
  %5460 = load i32, i32* %EDX
  %5461 = zext i32 %5460 to i64
  %5462 = load i64, i64* %PC
  %5463 = add i64 %5462, 3
  store i64 %5463, i64* %PC
  %5464 = shl i64 %5461, 32
  %5465 = ashr exact i64 %5464, 32
  store i64 %5465, i64* %RCX, align 8, !tbaa !2428
  %5466 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5467 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5468 = load i64, i64* %RAX
  %5469 = load i64, i64* %RCX
  %5470 = mul i64 %5469, 4
  %5471 = add i64 %5470, %5468
  %5472 = load i64, i64* %PC
  %5473 = add i64 %5472, 5
  store i64 %5473, i64* %PC
  %5474 = bitcast i8* %5467 to <2 x float>*
  %5475 = load <2 x float>, <2 x float>* %5474, align 1
  %5476 = getelementptr inbounds i8, i8* %5467, i64 8
  %5477 = bitcast i8* %5476 to <2 x i32>*
  %5478 = load <2 x i32>, <2 x i32>* %5477, align 1
  %5479 = inttoptr i64 %5471 to float*
  %5480 = load float, float* %5479
  %5481 = extractelement <2 x float> %5475, i32 0
  %5482 = fmul float %5481, %5480
  %5483 = bitcast i8* %5466 to float*
  store float %5482, float* %5483, align 1, !tbaa !2452
  %5484 = bitcast <2 x float> %5475 to <2 x i32>
  %5485 = extractelement <2 x i32> %5484, i32 1
  %5486 = getelementptr inbounds i8, i8* %5466, i64 4
  %5487 = bitcast i8* %5486 to i32*
  store i32 %5485, i32* %5487, align 1, !tbaa !2452
  %5488 = extractelement <2 x i32> %5478, i32 0
  %5489 = getelementptr inbounds i8, i8* %5466, i64 8
  %5490 = bitcast i8* %5489 to i32*
  store i32 %5488, i32* %5490, align 1, !tbaa !2452
  %5491 = extractelement <2 x i32> %5478, i32 1
  %5492 = getelementptr inbounds i8, i8* %5466, i64 12
  %5493 = bitcast i8* %5492 to i32*
  store i32 %5491, i32* %5493, align 1, !tbaa !2452
  %5494 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5495 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5496 = bitcast %union.vec128_t* %XMM1 to i8*
  %5497 = load i64, i64* %PC
  %5498 = add i64 %5497, 4
  store i64 %5498, i64* %PC
  %5499 = bitcast i8* %5495 to <2 x float>*
  %5500 = load <2 x float>, <2 x float>* %5499, align 1
  %5501 = getelementptr inbounds i8, i8* %5495, i64 8
  %5502 = bitcast i8* %5501 to <2 x i32>*
  %5503 = load <2 x i32>, <2 x i32>* %5502, align 1
  %5504 = bitcast i8* %5496 to <2 x float>*
  %5505 = load <2 x float>, <2 x float>* %5504, align 1
  %5506 = extractelement <2 x float> %5500, i32 0
  %5507 = extractelement <2 x float> %5505, i32 0
  %5508 = fadd float %5506, %5507
  %5509 = bitcast i8* %5494 to float*
  store float %5508, float* %5509, align 1, !tbaa !2452
  %5510 = bitcast <2 x float> %5500 to <2 x i32>
  %5511 = extractelement <2 x i32> %5510, i32 1
  %5512 = getelementptr inbounds i8, i8* %5494, i64 4
  %5513 = bitcast i8* %5512 to i32*
  store i32 %5511, i32* %5513, align 1, !tbaa !2452
  %5514 = extractelement <2 x i32> %5503, i32 0
  %5515 = getelementptr inbounds i8, i8* %5494, i64 8
  %5516 = bitcast i8* %5515 to i32*
  store i32 %5514, i32* %5516, align 1, !tbaa !2452
  %5517 = extractelement <2 x i32> %5503, i32 1
  %5518 = getelementptr inbounds i8, i8* %5494, i64 12
  %5519 = bitcast i8* %5518 to i32*
  store i32 %5517, i32* %5519, align 1, !tbaa !2452
  %5520 = load i64, i64* %RBP
  %5521 = sub i64 %5520, 16
  %5522 = load i64, i64* %PC
  %5523 = add i64 %5522, 4
  store i64 %5523, i64* %PC
  %5524 = inttoptr i64 %5521 to i64*
  %5525 = load i64, i64* %5524
  store i64 %5525, i64* %RAX, align 8, !tbaa !2428
  %5526 = load i64, i64* %RBP
  %5527 = sub i64 %5526, 48
  %5528 = load i64, i64* %PC
  %5529 = add i64 %5528, 4
  store i64 %5529, i64* %PC
  %5530 = inttoptr i64 %5527 to i32*
  %5531 = load i32, i32* %5530
  %5532 = sext i32 %5531 to i64
  store i64 %5532, i64* %RCX, align 8, !tbaa !2428
  %5533 = load i64, i64* %RAX
  %5534 = load i64, i64* %RCX
  %5535 = mul i64 %5534, 4
  %5536 = add i64 %5535, %5533
  %5537 = bitcast %union.vec128_t* %XMM0 to i8*
  %5538 = load i64, i64* %PC
  %5539 = add i64 %5538, 5
  store i64 %5539, i64* %PC
  %5540 = bitcast i8* %5537 to <2 x float>*
  %5541 = load <2 x float>, <2 x float>* %5540, align 1
  %5542 = extractelement <2 x float> %5541, i32 0
  %5543 = inttoptr i64 %5536 to float*
  store float %5542, float* %5543
  %5544 = load i64, i64* %RBP
  %5545 = sub i64 %5544, 48
  %5546 = load i64, i64* %PC
  %5547 = add i64 %5546, 3
  store i64 %5547, i64* %PC
  %5548 = inttoptr i64 %5545 to i32*
  %5549 = load i32, i32* %5548
  %5550 = zext i32 %5549 to i64
  store i64 %5550, i64* %RAX, align 8, !tbaa !2428
  %5551 = load i64, i64* %RAX
  %5552 = load i64, i64* %PC
  %5553 = add i64 %5552, 3
  store i64 %5553, i64* %PC
  %5554 = trunc i64 %5551 to i32
  %5555 = add i32 1, %5554
  %5556 = zext i32 %5555 to i64
  store i64 %5556, i64* %RAX, align 8, !tbaa !2428
  %5557 = icmp ult i32 %5555, %5554
  %5558 = icmp ult i32 %5555, 1
  %5559 = or i1 %5557, %5558
  %5560 = zext i1 %5559 to i8
  %5561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5560, i8* %5561, align 1, !tbaa !2432
  %5562 = and i32 %5555, 255
  %5563 = call i32 @llvm.ctpop.i32(i32 %5562) #16
  %5564 = trunc i32 %5563 to i8
  %5565 = and i8 %5564, 1
  %5566 = xor i8 %5565, 1
  %5567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5566, i8* %5567, align 1, !tbaa !2446
  %5568 = xor i64 1, %5551
  %5569 = trunc i64 %5568 to i32
  %5570 = xor i32 %5569, %5555
  %5571 = lshr i32 %5570, 4
  %5572 = trunc i32 %5571 to i8
  %5573 = and i8 %5572, 1
  %5574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5573, i8* %5574, align 1, !tbaa !2447
  %5575 = icmp eq i32 %5555, 0
  %5576 = zext i1 %5575 to i8
  %5577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5576, i8* %5577, align 1, !tbaa !2448
  %5578 = lshr i32 %5555, 31
  %5579 = trunc i32 %5578 to i8
  %5580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5579, i8* %5580, align 1, !tbaa !2449
  %5581 = lshr i32 %5554, 31
  %5582 = xor i32 %5578, %5581
  %5583 = add nuw nsw i32 %5582, %5578
  %5584 = icmp eq i32 %5583, 2
  %5585 = zext i1 %5584 to i8
  %5586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5585, i8* %5586, align 1, !tbaa !2450
  %5587 = load i64, i64* %RBP
  %5588 = sub i64 %5587, 48
  %5589 = load i32, i32* %EAX
  %5590 = zext i32 %5589 to i64
  %5591 = load i64, i64* %PC
  %5592 = add i64 %5591, 3
  store i64 %5592, i64* %PC
  %5593 = inttoptr i64 %5588 to i32*
  store i32 %5589, i32* %5593
  %5594 = load i64, i64* %PC
  %5595 = sub i64 %5594, 233
  %5596 = load i64, i64* %PC
  %5597 = add i64 %5596, 5
  store i64 %5597, i64* %PC
  %5598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5595, i64* %5598, align 8, !tbaa !2428
  br label %block_40215a

block_402064:                                     ; preds = %block_402009
  %5599 = load i64, i64* %PC
  %5600 = add i64 %5599, 5
  %5601 = load i64, i64* %PC
  %5602 = add i64 %5601, 5
  store i64 %5602, i64* %PC
  %5603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5600, i64* %5603, align 8, !tbaa !2428
  br label %block_402069

block_402248:                                     ; preds = %block_40215a
  %5604 = load i64, i64* %PC
  %5605 = add i64 %5604, 5
  %5606 = load i64, i64* %PC
  %5607 = add i64 %5606, 5
  store i64 %5607, i64* %PC
  %5608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5605, i64* %5608, align 8, !tbaa !2428
  br label %block_40224d

block_40224d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_402248
  %MEMORY.2 = phi %struct.Memory* [ %6910, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %MEMORY.6, %block_402248 ]
  %5609 = load i64, i64* %PC
  %5610 = add i64 %5609, 5
  store i64 %5610, i64* %PC
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %5611 = load i64, i64* %RBP
  %5612 = sub i64 %5611, 20
  %5613 = load i64, i64* %PC
  %5614 = add i64 %5613, 3
  store i64 %5614, i64* %PC
  %5615 = inttoptr i64 %5612 to i32*
  %5616 = load i32, i32* %5615
  %5617 = zext i32 %5616 to i64
  store i64 %5617, i64* %RCX, align 8, !tbaa !2428
  %5618 = load i64, i64* %RBP
  %5619 = sub i64 %5618, 68
  %5620 = load i32, i32* %EAX
  %5621 = zext i32 %5620 to i64
  %5622 = load i64, i64* %PC
  %5623 = add i64 %5622, 3
  store i64 %5623, i64* %PC
  %5624 = inttoptr i64 %5619 to i32*
  store i32 %5620, i32* %5624
  %5625 = load i32, i32* %ECX
  %5626 = zext i32 %5625 to i64
  %5627 = load i64, i64* %PC
  %5628 = add i64 %5627, 2
  store i64 %5628, i64* %PC
  %5629 = and i64 %5626, 4294967295
  store i64 %5629, i64* %RAX, align 8, !tbaa !2428
  %5630 = load i64, i64* %PC
  %5631 = add i64 %5630, 1
  store i64 %5631, i64* %PC
  %5632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5634 = bitcast %union.anon* %5633 to i32*
  %5635 = load i32, i32* %5634, align 8, !tbaa !2454
  %5636 = sext i32 %5635 to i64
  %5637 = lshr i64 %5636, 32
  store i64 %5637, i64* %5632, align 8, !tbaa !2428
  %5638 = load i64, i64* %RBP
  %5639 = sub i64 %5638, 68
  %5640 = load i64, i64* %PC
  %5641 = add i64 %5640, 3
  store i64 %5641, i64* %PC
  %5642 = inttoptr i64 %5639 to i32*
  %5643 = load i32, i32* %5642
  %5644 = zext i32 %5643 to i64
  store i64 %5644, i64* %RCX, align 8, !tbaa !2428
  %5645 = load i32, i32* %ECX
  %5646 = zext i32 %5645 to i64
  %5647 = load i64, i64* %PC
  %5648 = add i64 %5647, 2
  store i64 %5648, i64* %PC
  %5649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5650 = bitcast %union.anon* %5649 to i32*
  %5651 = load i32, i32* %5650, align 8, !tbaa !2454
  %5652 = zext i32 %5651 to i64
  %5653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5654 = bitcast %union.anon* %5653 to i32*
  %5655 = load i32, i32* %5654, align 8, !tbaa !2454
  %5656 = zext i32 %5655 to i64
  %5657 = shl i64 %5646, 32
  %5658 = ashr exact i64 %5657, 32
  %5659 = shl nuw i64 %5656, 32
  %5660 = or i64 %5659, %5652
  %5661 = sdiv i64 %5660, %5658
  %5662 = shl i64 %5661, 32
  %5663 = ashr exact i64 %5662, 32
  %5664 = icmp eq i64 %5661, %5663
  br i1 %5664, label %5669, label %5665

; <label>:5665:                                   ; preds = %block_40224d
  %5666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5667 = load i64, i64* %5666, align 8, !tbaa !2428
  %5668 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5667, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:5669:                                   ; preds = %block_40224d
  %5670 = srem i64 %5660, %5658
  %5671 = getelementptr inbounds %union.anon, %union.anon* %5649, i64 0, i32 0
  %5672 = and i64 %5661, 4294967295
  store i64 %5672, i64* %5671, align 8, !tbaa !2428
  %5673 = getelementptr inbounds %union.anon, %union.anon* %5653, i64 0, i32 0
  %5674 = and i64 %5670, 4294967295
  store i64 %5674, i64* %5673, align 8, !tbaa !2428
  %5675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5675, align 1, !tbaa !2432
  %5676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %5676, align 1, !tbaa !2446
  %5677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5677, align 1, !tbaa !2447
  %5678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5678, align 1, !tbaa !2448
  %5679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5679, align 1, !tbaa !2449
  %5680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5680, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %5665, %5669
  %5681 = phi %struct.Memory* [ %5668, %5665 ], [ %MEMORY.2, %5669 ]
  %5682 = load i64, i64* %RBP
  %5683 = sub i64 %5682, 44
  %5684 = load i32, i32* %EDX
  %5685 = zext i32 %5684 to i64
  %5686 = load i64, i64* %PC
  %5687 = add i64 %5686, 3
  store i64 %5687, i64* %PC
  %5688 = inttoptr i64 %5683 to i32*
  store i32 %5684, i32* %5688
  %5689 = load i64, i64* %RBP
  %5690 = sub i64 %5689, 44
  %5691 = load i64, i64* %PC
  %5692 = add i64 %5691, 4
  store i64 %5692, i64* %PC
  %5693 = inttoptr i64 %5690 to i32*
  %5694 = load i32, i32* %5693
  %5695 = sub i32 %5694, 8
  %5696 = icmp ult i32 %5694, 8
  %5697 = zext i1 %5696 to i8
  %5698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5697, i8* %5698, align 1, !tbaa !2432
  %5699 = and i32 %5695, 255
  %5700 = call i32 @llvm.ctpop.i32(i32 %5699) #16
  %5701 = trunc i32 %5700 to i8
  %5702 = and i8 %5701, 1
  %5703 = xor i8 %5702, 1
  %5704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5703, i8* %5704, align 1, !tbaa !2446
  %5705 = xor i32 %5694, 8
  %5706 = xor i32 %5705, %5695
  %5707 = lshr i32 %5706, 4
  %5708 = trunc i32 %5707 to i8
  %5709 = and i8 %5708, 1
  %5710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5709, i8* %5710, align 1, !tbaa !2447
  %5711 = icmp eq i32 %5695, 0
  %5712 = zext i1 %5711 to i8
  %5713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5712, i8* %5713, align 1, !tbaa !2448
  %5714 = lshr i32 %5695, 31
  %5715 = trunc i32 %5714 to i8
  %5716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5715, i8* %5716, align 1, !tbaa !2449
  %5717 = lshr i32 %5694, 31
  %5718 = xor i32 %5714, %5717
  %5719 = add nuw nsw i32 %5718, %5717
  %5720 = icmp eq i32 %5719, 2
  %5721 = zext i1 %5720 to i8
  %5722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5721, i8* %5722, align 1, !tbaa !2450
  %5723 = load i64, i64* %PC
  %5724 = add i64 %5723, 461
  %5725 = load i64, i64* %PC
  %5726 = add i64 %5725, 6
  %5727 = load i64, i64* %PC
  %5728 = add i64 %5727, 6
  store i64 %5728, i64* %PC
  %5729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5730 = load i8, i8* %5729, align 1, !tbaa !2449
  %5731 = icmp ne i8 %5730, 0
  %5732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5733 = load i8, i8* %5732, align 1, !tbaa !2450
  %5734 = icmp ne i8 %5733, 0
  %5735 = xor i1 %5731, %5734
  %5736 = zext i1 %5735 to i8
  store i8 %5736, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5738 = select i1 %5735, i64 %5724, i64 %5726
  store i64 %5738, i64* %5737, align 8, !tbaa !2428
  %5739 = load i8, i8* %BRANCH_TAKEN
  %5740 = icmp eq i8 %5739, 1
  br i1 %5740, label %block_402434, label %block_40226d

block_402009:                                     ; preds = %block_402015, %block_401ff9
  %MEMORY.3 = phi %struct.Memory* [ %174, %block_401ff9 ], [ %MEMORY.3, %block_402015 ]
  %5741 = load i64, i64* %RBP
  %5742 = sub i64 %5741, 48
  %5743 = load i64, i64* %PC
  %5744 = add i64 %5743, 3
  store i64 %5744, i64* %PC
  %5745 = inttoptr i64 %5742 to i32*
  %5746 = load i32, i32* %5745
  %5747 = zext i32 %5746 to i64
  store i64 %5747, i64* %RAX, align 8, !tbaa !2428
  %5748 = load i32, i32* %EAX
  %5749 = zext i32 %5748 to i64
  %5750 = load i64, i64* %RBP
  %5751 = sub i64 %5750, 4
  %5752 = load i64, i64* %PC
  %5753 = add i64 %5752, 3
  store i64 %5753, i64* %PC
  %5754 = inttoptr i64 %5751 to i32*
  %5755 = load i32, i32* %5754
  %5756 = sub i32 %5748, %5755
  %5757 = icmp ult i32 %5748, %5755
  %5758 = zext i1 %5757 to i8
  %5759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5758, i8* %5759, align 1, !tbaa !2432
  %5760 = and i32 %5756, 255
  %5761 = call i32 @llvm.ctpop.i32(i32 %5760) #16
  %5762 = trunc i32 %5761 to i8
  %5763 = and i8 %5762, 1
  %5764 = xor i8 %5763, 1
  %5765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5764, i8* %5765, align 1, !tbaa !2446
  %5766 = xor i32 %5755, %5748
  %5767 = xor i32 %5766, %5756
  %5768 = lshr i32 %5767, 4
  %5769 = trunc i32 %5768 to i8
  %5770 = and i8 %5769, 1
  %5771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5770, i8* %5771, align 1, !tbaa !2447
  %5772 = icmp eq i32 %5756, 0
  %5773 = zext i1 %5772 to i8
  %5774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5773, i8* %5774, align 1, !tbaa !2448
  %5775 = lshr i32 %5756, 31
  %5776 = trunc i32 %5775 to i8
  %5777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5776, i8* %5777, align 1, !tbaa !2449
  %5778 = lshr i32 %5748, 31
  %5779 = lshr i32 %5755, 31
  %5780 = xor i32 %5779, %5778
  %5781 = xor i32 %5775, %5778
  %5782 = add nuw nsw i32 %5781, %5780
  %5783 = icmp eq i32 %5782, 2
  %5784 = zext i1 %5783 to i8
  %5785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5784, i8* %5785, align 1, !tbaa !2450
  %5786 = load i64, i64* %PC
  %5787 = add i64 %5786, 85
  %5788 = load i64, i64* %PC
  %5789 = add i64 %5788, 6
  %5790 = load i64, i64* %PC
  %5791 = add i64 %5790, 6
  store i64 %5791, i64* %PC
  %5792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5793 = load i8, i8* %5792, align 1, !tbaa !2449
  %5794 = icmp ne i8 %5793, 0
  %5795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5796 = load i8, i8* %5795, align 1, !tbaa !2450
  %5797 = icmp ne i8 %5796, 0
  %5798 = xor i1 %5794, %5797
  %5799 = xor i1 %5798, true
  %5800 = zext i1 %5799 to i8
  store i8 %5800, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5802 = select i1 %5798, i64 %5789, i64 %5787
  store i64 %5802, i64* %5801, align 8, !tbaa !2428
  %5803 = load i8, i8* %BRANCH_TAKEN
  %5804 = icmp eq i8 %5803, 1
  br i1 %5804, label %block_402064, label %block_402015

block_4027b6:                                     ; preds = %block_402456
  %5805 = load i64, i64* %PC
  %5806 = add i64 %5805, 1
  store i64 %5806, i64* %PC
  %5807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5808 = load i64, i64* %5807, align 8, !tbaa !2428
  %5809 = add i64 %5808, 8
  %5810 = inttoptr i64 %5808 to i64*
  %5811 = load i64, i64* %5810
  store i64 %5811, i64* %RBP, align 8, !tbaa !2428
  store i64 %5809, i64* %5807, align 8, !tbaa !2428
  %5812 = load i64, i64* %PC
  %5813 = add i64 %5812, 1
  store i64 %5813, i64* %PC
  %5814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5816 = load i64, i64* %5815, align 8, !tbaa !2428
  %5817 = inttoptr i64 %5816 to i64*
  %5818 = load i64, i64* %5817
  store i64 %5818, i64* %5814, align 8, !tbaa !2428
  %5819 = add i64 %5816, 8
  store i64 %5819, i64* %5815, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.7

block_402125:                                     ; preds = %block_402099
  %5820 = load i64, i64* %PC
  %5821 = add i64 %5820, 5
  %5822 = load i64, i64* %PC
  %5823 = add i64 %5822, 5
  store i64 %5823, i64* %PC
  %5824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5821, i64* %5824, align 8, !tbaa !2428
  br label %block_40212a

block_402434:                                     ; preds = %block_40242f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %MEMORY.4 = phi %struct.Memory* [ %5681, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ], [ %MEMORY.0, %block_40242f ]
  %5825 = load i64, i64* %PC
  %5826 = add i64 %5825, 5
  store i64 %5826, i64* %PC
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %5827 = load i64, i64* %RBP
  %5828 = sub i64 %5827, 20
  %5829 = load i64, i64* %PC
  %5830 = add i64 %5829, 3
  store i64 %5830, i64* %PC
  %5831 = inttoptr i64 %5828 to i32*
  %5832 = load i32, i32* %5831
  %5833 = zext i32 %5832 to i64
  store i64 %5833, i64* %RCX, align 8, !tbaa !2428
  %5834 = load i64, i64* %RBP
  %5835 = sub i64 %5834, 72
  %5836 = load i32, i32* %EAX
  %5837 = zext i32 %5836 to i64
  %5838 = load i64, i64* %PC
  %5839 = add i64 %5838, 3
  store i64 %5839, i64* %PC
  %5840 = inttoptr i64 %5835 to i32*
  store i32 %5836, i32* %5840
  %5841 = load i32, i32* %ECX
  %5842 = zext i32 %5841 to i64
  %5843 = load i64, i64* %PC
  %5844 = add i64 %5843, 2
  store i64 %5844, i64* %PC
  %5845 = and i64 %5842, 4294967295
  store i64 %5845, i64* %RAX, align 8, !tbaa !2428
  %5846 = load i64, i64* %PC
  %5847 = add i64 %5846, 1
  store i64 %5847, i64* %PC
  %5848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5850 = bitcast %union.anon* %5849 to i32*
  %5851 = load i32, i32* %5850, align 8, !tbaa !2454
  %5852 = sext i32 %5851 to i64
  %5853 = lshr i64 %5852, 32
  store i64 %5853, i64* %5848, align 8, !tbaa !2428
  %5854 = load i64, i64* %RBP
  %5855 = sub i64 %5854, 72
  %5856 = load i64, i64* %PC
  %5857 = add i64 %5856, 3
  store i64 %5857, i64* %PC
  %5858 = inttoptr i64 %5855 to i32*
  %5859 = load i32, i32* %5858
  %5860 = zext i32 %5859 to i64
  store i64 %5860, i64* %RCX, align 8, !tbaa !2428
  %5861 = load i32, i32* %ECX
  %5862 = zext i32 %5861 to i64
  %5863 = load i64, i64* %PC
  %5864 = add i64 %5863, 2
  store i64 %5864, i64* %PC
  %5865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5866 = bitcast %union.anon* %5865 to i32*
  %5867 = load i32, i32* %5866, align 8, !tbaa !2454
  %5868 = zext i32 %5867 to i64
  %5869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5870 = bitcast %union.anon* %5869 to i32*
  %5871 = load i32, i32* %5870, align 8, !tbaa !2454
  %5872 = zext i32 %5871 to i64
  %5873 = shl i64 %5862, 32
  %5874 = ashr exact i64 %5873, 32
  %5875 = shl nuw i64 %5872, 32
  %5876 = or i64 %5875, %5868
  %5877 = sdiv i64 %5876, %5874
  %5878 = shl i64 %5877, 32
  %5879 = ashr exact i64 %5878, 32
  %5880 = icmp eq i64 %5877, %5879
  br i1 %5880, label %5885, label %5881

; <label>:5881:                                   ; preds = %block_402434
  %5882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5883 = load i64, i64* %5882, align 8, !tbaa !2428
  %5884 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5883, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:5885:                                   ; preds = %block_402434
  %5886 = srem i64 %5876, %5874
  %5887 = getelementptr inbounds %union.anon, %union.anon* %5865, i64 0, i32 0
  %5888 = and i64 %5877, 4294967295
  store i64 %5888, i64* %5887, align 8, !tbaa !2428
  %5889 = getelementptr inbounds %union.anon, %union.anon* %5869, i64 0, i32 0
  %5890 = and i64 %5886, 4294967295
  store i64 %5890, i64* %5889, align 8, !tbaa !2428
  %5891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5891, align 1, !tbaa !2432
  %5892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %5892, align 1, !tbaa !2446
  %5893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5893, align 1, !tbaa !2447
  %5894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5894, align 1, !tbaa !2448
  %5895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5895, align 1, !tbaa !2449
  %5896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5896, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %5881, %5885
  %5897 = phi %struct.Memory* [ %5884, %5881 ], [ %MEMORY.4, %5885 ]
  %5898 = load i64, i64* %RDX
  %5899 = load i64, i64* %PC
  %5900 = add i64 %5899, 3
  store i64 %5900, i64* %PC
  %5901 = trunc i64 %5898 to i32
  %5902 = add i32 16, %5901
  %5903 = zext i32 %5902 to i64
  store i64 %5903, i64* %RDX, align 8, !tbaa !2428
  %5904 = icmp ult i32 %5902, %5901
  %5905 = icmp ult i32 %5902, 16
  %5906 = or i1 %5904, %5905
  %5907 = zext i1 %5906 to i8
  %5908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5907, i8* %5908, align 1, !tbaa !2432
  %5909 = and i32 %5902, 255
  %5910 = call i32 @llvm.ctpop.i32(i32 %5909) #16
  %5911 = trunc i32 %5910 to i8
  %5912 = and i8 %5911, 1
  %5913 = xor i8 %5912, 1
  %5914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5913, i8* %5914, align 1, !tbaa !2446
  %5915 = xor i64 16, %5898
  %5916 = trunc i64 %5915 to i32
  %5917 = xor i32 %5916, %5902
  %5918 = lshr i32 %5917, 4
  %5919 = trunc i32 %5918 to i8
  %5920 = and i8 %5919, 1
  %5921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5920, i8* %5921, align 1, !tbaa !2447
  %5922 = icmp eq i32 %5902, 0
  %5923 = zext i1 %5922 to i8
  %5924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5923, i8* %5924, align 1, !tbaa !2448
  %5925 = lshr i32 %5902, 31
  %5926 = trunc i32 %5925 to i8
  %5927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5926, i8* %5927, align 1, !tbaa !2449
  %5928 = lshr i32 %5901, 31
  %5929 = xor i32 %5925, %5928
  %5930 = add nuw nsw i32 %5929, %5925
  %5931 = icmp eq i32 %5930, 2
  %5932 = zext i1 %5931 to i8
  %5933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5932, i8* %5933, align 1, !tbaa !2450
  %5934 = load i64, i64* %RBP
  %5935 = sub i64 %5934, 52
  %5936 = load i32, i32* %EDX
  %5937 = zext i32 %5936 to i64
  %5938 = load i64, i64* %PC
  %5939 = add i64 %5938, 3
  store i64 %5939, i64* %PC
  %5940 = inttoptr i64 %5935 to i32*
  store i32 %5936, i32* %5940
  %5941 = load i64, i64* %RBP
  %5942 = sub i64 %5941, 52
  %5943 = load i64, i64* %PC
  %5944 = add i64 %5943, 3
  store i64 %5944, i64* %PC
  %5945 = inttoptr i64 %5942 to i32*
  %5946 = load i32, i32* %5945
  %5947 = zext i32 %5946 to i64
  store i64 %5947, i64* %RDX, align 8, !tbaa !2428
  %5948 = load i64, i64* %RDX
  %5949 = load i64, i64* %PC
  %5950 = add i64 %5949, 3
  store i64 %5950, i64* %PC
  %5951 = trunc i64 %5948 to i32
  %5952 = sub i32 %5951, 1
  %5953 = zext i32 %5952 to i64
  store i64 %5953, i64* %RDX, align 8, !tbaa !2428
  %5954 = icmp ult i32 %5951, 1
  %5955 = zext i1 %5954 to i8
  %5956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5955, i8* %5956, align 1, !tbaa !2432
  %5957 = and i32 %5952, 255
  %5958 = call i32 @llvm.ctpop.i32(i32 %5957) #16
  %5959 = trunc i32 %5958 to i8
  %5960 = and i8 %5959, 1
  %5961 = xor i8 %5960, 1
  %5962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5961, i8* %5962, align 1, !tbaa !2446
  %5963 = xor i64 1, %5948
  %5964 = trunc i64 %5963 to i32
  %5965 = xor i32 %5964, %5952
  %5966 = lshr i32 %5965, 4
  %5967 = trunc i32 %5966 to i8
  %5968 = and i8 %5967, 1
  %5969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5968, i8* %5969, align 1, !tbaa !2447
  %5970 = icmp eq i32 %5952, 0
  %5971 = zext i1 %5970 to i8
  %5972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5971, i8* %5972, align 1, !tbaa !2448
  %5973 = lshr i32 %5952, 31
  %5974 = trunc i32 %5973 to i8
  %5975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5974, i8* %5975, align 1, !tbaa !2449
  %5976 = lshr i32 %5951, 31
  %5977 = xor i32 %5973, %5976
  %5978 = add nuw nsw i32 %5977, %5976
  %5979 = icmp eq i32 %5978, 2
  %5980 = zext i1 %5979 to i8
  %5981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5980, i8* %5981, align 1, !tbaa !2450
  %5982 = load i64, i64* %RBP
  %5983 = sub i64 %5982, 44
  %5984 = load i32, i32* %EDX
  %5985 = zext i32 %5984 to i64
  %5986 = load i64, i64* %PC
  %5987 = add i64 %5986, 3
  store i64 %5987, i64* %PC
  %5988 = inttoptr i64 %5983 to i32*
  store i32 %5984, i32* %5988
  br label %block_402456

block_402469:                                     ; preds = %block_402462, %block_402475
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.7, %block_402462 ], [ %MEMORY.5, %block_402475 ]
  %5989 = load i64, i64* %RBP
  %5990 = sub i64 %5989, 48
  %5991 = load i64, i64* %PC
  %5992 = add i64 %5991, 3
  store i64 %5992, i64* %PC
  %5993 = inttoptr i64 %5990 to i32*
  %5994 = load i32, i32* %5993
  %5995 = zext i32 %5994 to i64
  store i64 %5995, i64* %RAX, align 8, !tbaa !2428
  %5996 = load i32, i32* %EAX
  %5997 = zext i32 %5996 to i64
  %5998 = load i64, i64* %RBP
  %5999 = sub i64 %5998, 4
  %6000 = load i64, i64* %PC
  %6001 = add i64 %6000, 3
  store i64 %6001, i64* %PC
  %6002 = inttoptr i64 %5999 to i32*
  %6003 = load i32, i32* %6002
  %6004 = sub i32 %5996, %6003
  %6005 = icmp ult i32 %5996, %6003
  %6006 = zext i1 %6005 to i8
  %6007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6006, i8* %6007, align 1, !tbaa !2432
  %6008 = and i32 %6004, 255
  %6009 = call i32 @llvm.ctpop.i32(i32 %6008) #16
  %6010 = trunc i32 %6009 to i8
  %6011 = and i8 %6010, 1
  %6012 = xor i8 %6011, 1
  %6013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6012, i8* %6013, align 1, !tbaa !2446
  %6014 = xor i32 %6003, %5996
  %6015 = xor i32 %6014, %6004
  %6016 = lshr i32 %6015, 4
  %6017 = trunc i32 %6016 to i8
  %6018 = and i8 %6017, 1
  %6019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6018, i8* %6019, align 1, !tbaa !2447
  %6020 = icmp eq i32 %6004, 0
  %6021 = zext i1 %6020 to i8
  %6022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6021, i8* %6022, align 1, !tbaa !2448
  %6023 = lshr i32 %6004, 31
  %6024 = trunc i32 %6023 to i8
  %6025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6024, i8* %6025, align 1, !tbaa !2449
  %6026 = lshr i32 %5996, 31
  %6027 = lshr i32 %6003, 31
  %6028 = xor i32 %6027, %6026
  %6029 = xor i32 %6023, %6026
  %6030 = add nuw nsw i32 %6029, %6028
  %6031 = icmp eq i32 %6030, 2
  %6032 = zext i1 %6031 to i8
  %6033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6032, i8* %6033, align 1, !tbaa !2450
  %6034 = load i64, i64* %PC
  %6035 = add i64 %6034, 820
  %6036 = load i64, i64* %PC
  %6037 = add i64 %6036, 6
  %6038 = load i64, i64* %PC
  %6039 = add i64 %6038, 6
  store i64 %6039, i64* %PC
  %6040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6041 = load i8, i8* %6040, align 1, !tbaa !2449
  %6042 = icmp ne i8 %6041, 0
  %6043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6044 = load i8, i8* %6043, align 1, !tbaa !2450
  %6045 = icmp ne i8 %6044, 0
  %6046 = xor i1 %6042, %6045
  %6047 = xor i1 %6046, true
  %6048 = zext i1 %6047 to i8
  store i8 %6048, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6050 = select i1 %6046, i64 %6037, i64 %6035
  store i64 %6050, i64* %6049, align 8, !tbaa !2428
  %6051 = load i8, i8* %BRANCH_TAKEN
  %6052 = icmp eq i8 %6051, 1
  br i1 %6052, label %block_4027a3, label %block_402475

block_40215a:                                     ; preds = %block_40214a, %block_402166
  %MEMORY.6 = phi %struct.Memory* [ %6910, %block_40214a ], [ %MEMORY.6, %block_402166 ]
  %6053 = load i64, i64* %RBP
  %6054 = sub i64 %6053, 48
  %6055 = load i64, i64* %PC
  %6056 = add i64 %6055, 3
  store i64 %6056, i64* %PC
  %6057 = inttoptr i64 %6054 to i32*
  %6058 = load i32, i32* %6057
  %6059 = zext i32 %6058 to i64
  store i64 %6059, i64* %RAX, align 8, !tbaa !2428
  %6060 = load i32, i32* %EAX
  %6061 = zext i32 %6060 to i64
  %6062 = load i64, i64* %RBP
  %6063 = sub i64 %6062, 4
  %6064 = load i64, i64* %PC
  %6065 = add i64 %6064, 3
  store i64 %6065, i64* %PC
  %6066 = inttoptr i64 %6063 to i32*
  %6067 = load i32, i32* %6066
  %6068 = sub i32 %6060, %6067
  %6069 = icmp ult i32 %6060, %6067
  %6070 = zext i1 %6069 to i8
  %6071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6070, i8* %6071, align 1, !tbaa !2432
  %6072 = and i32 %6068, 255
  %6073 = call i32 @llvm.ctpop.i32(i32 %6072) #16
  %6074 = trunc i32 %6073 to i8
  %6075 = and i8 %6074, 1
  %6076 = xor i8 %6075, 1
  %6077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6076, i8* %6077, align 1, !tbaa !2446
  %6078 = xor i32 %6067, %6060
  %6079 = xor i32 %6078, %6068
  %6080 = lshr i32 %6079, 4
  %6081 = trunc i32 %6080 to i8
  %6082 = and i8 %6081, 1
  %6083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6082, i8* %6083, align 1, !tbaa !2447
  %6084 = icmp eq i32 %6068, 0
  %6085 = zext i1 %6084 to i8
  %6086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6085, i8* %6086, align 1, !tbaa !2448
  %6087 = lshr i32 %6068, 31
  %6088 = trunc i32 %6087 to i8
  %6089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6088, i8* %6089, align 1, !tbaa !2449
  %6090 = lshr i32 %6060, 31
  %6091 = lshr i32 %6067, 31
  %6092 = xor i32 %6091, %6090
  %6093 = xor i32 %6087, %6090
  %6094 = add nuw nsw i32 %6093, %6092
  %6095 = icmp eq i32 %6094, 2
  %6096 = zext i1 %6095 to i8
  %6097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6096, i8* %6097, align 1, !tbaa !2450
  %6098 = load i64, i64* %PC
  %6099 = add i64 %6098, 232
  %6100 = load i64, i64* %PC
  %6101 = add i64 %6100, 6
  %6102 = load i64, i64* %PC
  %6103 = add i64 %6102, 6
  store i64 %6103, i64* %PC
  %6104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6105 = load i8, i8* %6104, align 1, !tbaa !2449
  %6106 = icmp ne i8 %6105, 0
  %6107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6108 = load i8, i8* %6107, align 1, !tbaa !2450
  %6109 = icmp ne i8 %6108, 0
  %6110 = xor i1 %6106, %6109
  %6111 = xor i1 %6110, true
  %6112 = zext i1 %6111 to i8
  store i8 %6112, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6114 = select i1 %6110, i64 %6101, i64 %6099
  store i64 %6114, i64* %6113, align 8, !tbaa !2428
  %6115 = load i8, i8* %BRANCH_TAKEN
  %6116 = icmp eq i8 %6115, 1
  br i1 %6116, label %block_402248, label %block_402166

block_40242f:                                     ; preds = %block_40227d
  %6117 = load i64, i64* %PC
  %6118 = add i64 %6117, 5
  %6119 = load i64, i64* %PC
  %6120 = add i64 %6119, 5
  store i64 %6120, i64* %PC
  %6121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6118, i64* %6121, align 8, !tbaa !2428
  br label %block_402434

block_402462:                                     ; preds = %block_402456
  %6122 = load i64, i64* %RBP
  %6123 = sub i64 %6122, 48
  %6124 = load i64, i64* %PC
  %6125 = add i64 %6124, 7
  store i64 %6125, i64* %PC
  %6126 = inttoptr i64 %6123 to i32*
  store i32 0, i32* %6126
  br label %block_402469

block_4020a5:                                     ; preds = %block_402099
  %6127 = load i64, i64* %RBP
  %6128 = sub i64 %6127, 16
  %6129 = load i64, i64* %PC
  %6130 = add i64 %6129, 4
  store i64 %6130, i64* %PC
  %6131 = inttoptr i64 %6128 to i64*
  %6132 = load i64, i64* %6131
  store i64 %6132, i64* %RAX, align 8, !tbaa !2428
  %6133 = load i64, i64* %RBP
  %6134 = sub i64 %6133, 48
  %6135 = load i64, i64* %PC
  %6136 = add i64 %6135, 4
  store i64 %6136, i64* %PC
  %6137 = inttoptr i64 %6134 to i32*
  %6138 = load i32, i32* %6137
  %6139 = sext i32 %6138 to i64
  store i64 %6139, i64* %RCX, align 8, !tbaa !2428
  %6140 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6141 = load i64, i64* %RAX
  %6142 = load i64, i64* %RCX
  %6143 = mul i64 %6142, 4
  %6144 = add i64 %6143, %6141
  %6145 = load i64, i64* %PC
  %6146 = add i64 %6145, 5
  store i64 %6146, i64* %PC
  %6147 = inttoptr i64 %6144 to float*
  %6148 = load float, float* %6147
  %6149 = bitcast i8* %6140 to float*
  store float %6148, float* %6149, align 1, !tbaa !2452
  %6150 = getelementptr inbounds i8, i8* %6140, i64 4
  %6151 = bitcast i8* %6150 to float*
  store float 0.000000e+00, float* %6151, align 1, !tbaa !2452
  %6152 = getelementptr inbounds i8, i8* %6140, i64 8
  %6153 = bitcast i8* %6152 to float*
  store float 0.000000e+00, float* %6153, align 1, !tbaa !2452
  %6154 = getelementptr inbounds i8, i8* %6140, i64 12
  %6155 = bitcast i8* %6154 to float*
  store float 0.000000e+00, float* %6155, align 1, !tbaa !2452
  %6156 = load i64, i64* %RBP
  %6157 = sub i64 %6156, 32
  %6158 = load i64, i64* %PC
  %6159 = add i64 %6158, 4
  store i64 %6159, i64* %PC
  %6160 = inttoptr i64 %6157 to i64*
  %6161 = load i64, i64* %6160
  store i64 %6161, i64* %RAX, align 8, !tbaa !2428
  %6162 = load i64, i64* %RBP
  %6163 = sub i64 %6162, 44
  %6164 = load i64, i64* %PC
  %6165 = add i64 %6164, 3
  store i64 %6165, i64* %PC
  %6166 = inttoptr i64 %6163 to i32*
  %6167 = load i32, i32* %6166
  %6168 = zext i32 %6167 to i64
  store i64 %6168, i64* %RDX, align 8, !tbaa !2428
  %6169 = load i64, i64* %RDX
  %6170 = load i64, i64* %PC
  %6171 = add i64 %6170, 3
  store i64 %6171, i64* %PC
  %6172 = trunc i64 %6169 to i32
  %6173 = sub i32 %6172, 1
  %6174 = zext i32 %6173 to i64
  store i64 %6174, i64* %RDX, align 8, !tbaa !2428
  %6175 = icmp ult i32 %6172, 1
  %6176 = zext i1 %6175 to i8
  %6177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6176, i8* %6177, align 1, !tbaa !2432
  %6178 = and i32 %6173, 255
  %6179 = call i32 @llvm.ctpop.i32(i32 %6178) #16
  %6180 = trunc i32 %6179 to i8
  %6181 = and i8 %6180, 1
  %6182 = xor i8 %6181, 1
  %6183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6182, i8* %6183, align 1, !tbaa !2446
  %6184 = xor i64 1, %6169
  %6185 = trunc i64 %6184 to i32
  %6186 = xor i32 %6185, %6173
  %6187 = lshr i32 %6186, 4
  %6188 = trunc i32 %6187 to i8
  %6189 = and i8 %6188, 1
  %6190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6189, i8* %6190, align 1, !tbaa !2447
  %6191 = icmp eq i32 %6173, 0
  %6192 = zext i1 %6191 to i8
  %6193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6192, i8* %6193, align 1, !tbaa !2448
  %6194 = lshr i32 %6173, 31
  %6195 = trunc i32 %6194 to i8
  %6196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6195, i8* %6196, align 1, !tbaa !2449
  %6197 = lshr i32 %6172, 31
  %6198 = xor i32 %6194, %6197
  %6199 = add nuw nsw i32 %6198, %6197
  %6200 = icmp eq i32 %6199, 2
  %6201 = zext i1 %6200 to i8
  %6202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6201, i8* %6202, align 1, !tbaa !2450
  %6203 = load i32, i32* %EDX
  %6204 = zext i32 %6203 to i64
  %6205 = load i64, i64* %PC
  %6206 = add i64 %6205, 3
  store i64 %6206, i64* %PC
  %6207 = shl i64 %6204, 32
  %6208 = ashr exact i64 %6207, 32
  store i64 %6208, i64* %RCX, align 8, !tbaa !2428
  %6209 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6210 = load i64, i64* %RAX
  %6211 = load i64, i64* %RCX
  %6212 = mul i64 %6211, 4
  %6213 = add i64 %6212, %6210
  %6214 = load i64, i64* %PC
  %6215 = add i64 %6214, 5
  store i64 %6215, i64* %PC
  %6216 = inttoptr i64 %6213 to float*
  %6217 = load float, float* %6216
  %6218 = bitcast i8* %6209 to float*
  store float %6217, float* %6218, align 1, !tbaa !2452
  %6219 = getelementptr inbounds i8, i8* %6209, i64 4
  %6220 = bitcast i8* %6219 to float*
  store float 0.000000e+00, float* %6220, align 1, !tbaa !2452
  %6221 = getelementptr inbounds i8, i8* %6209, i64 8
  %6222 = bitcast i8* %6221 to float*
  store float 0.000000e+00, float* %6222, align 1, !tbaa !2452
  %6223 = getelementptr inbounds i8, i8* %6209, i64 12
  %6224 = bitcast i8* %6223 to float*
  store float 0.000000e+00, float* %6224, align 1, !tbaa !2452
  %6225 = load i64, i64* %RBP
  %6226 = sub i64 %6225, 40
  %6227 = load i64, i64* %PC
  %6228 = add i64 %6227, 4
  store i64 %6228, i64* %PC
  %6229 = inttoptr i64 %6226 to i64*
  %6230 = load i64, i64* %6229
  store i64 %6230, i64* %RAX, align 8, !tbaa !2428
  %6231 = load i64, i64* %RBP
  %6232 = sub i64 %6231, 24
  %6233 = load i64, i64* %PC
  %6234 = add i64 %6233, 3
  store i64 %6234, i64* %PC
  %6235 = inttoptr i64 %6232 to i32*
  %6236 = load i32, i32* %6235
  %6237 = zext i32 %6236 to i64
  store i64 %6237, i64* %RDX, align 8, !tbaa !2428
  %6238 = load i64, i64* %RBP
  %6239 = sub i64 %6238, 44
  %6240 = load i64, i64* %PC
  %6241 = add i64 %6240, 3
  store i64 %6241, i64* %PC
  %6242 = inttoptr i64 %6239 to i32*
  %6243 = load i32, i32* %6242
  %6244 = zext i32 %6243 to i64
  store i64 %6244, i64* %RSI, align 8, !tbaa !2428
  %6245 = load i64, i64* %RSI
  %6246 = load i64, i64* %PC
  %6247 = add i64 %6246, 3
  store i64 %6247, i64* %PC
  %6248 = trunc i64 %6245 to i32
  %6249 = sub i32 %6248, 1
  %6250 = zext i32 %6249 to i64
  store i64 %6250, i64* %RSI, align 8, !tbaa !2428
  %6251 = icmp ult i32 %6248, 1
  %6252 = zext i1 %6251 to i8
  %6253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6252, i8* %6253, align 1, !tbaa !2432
  %6254 = and i32 %6249, 255
  %6255 = call i32 @llvm.ctpop.i32(i32 %6254) #16
  %6256 = trunc i32 %6255 to i8
  %6257 = and i8 %6256, 1
  %6258 = xor i8 %6257, 1
  %6259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6258, i8* %6259, align 1, !tbaa !2446
  %6260 = xor i64 1, %6245
  %6261 = trunc i64 %6260 to i32
  %6262 = xor i32 %6261, %6249
  %6263 = lshr i32 %6262, 4
  %6264 = trunc i32 %6263 to i8
  %6265 = and i8 %6264, 1
  %6266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6265, i8* %6266, align 1, !tbaa !2447
  %6267 = icmp eq i32 %6249, 0
  %6268 = zext i1 %6267 to i8
  %6269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6268, i8* %6269, align 1, !tbaa !2448
  %6270 = lshr i32 %6249, 31
  %6271 = trunc i32 %6270 to i8
  %6272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6271, i8* %6272, align 1, !tbaa !2449
  %6273 = lshr i32 %6248, 31
  %6274 = xor i32 %6270, %6273
  %6275 = add nuw nsw i32 %6274, %6273
  %6276 = icmp eq i32 %6275, 2
  %6277 = zext i1 %6276 to i8
  %6278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6277, i8* %6278, align 1, !tbaa !2450
  %6279 = load i64, i64* %RDX
  %6280 = load i32, i32* %ESI
  %6281 = zext i32 %6280 to i64
  %6282 = load i64, i64* %PC
  %6283 = add i64 %6282, 3
  store i64 %6283, i64* %PC
  %6284 = shl i64 %6279, 32
  %6285 = ashr exact i64 %6284, 32
  %6286 = shl i64 %6281, 32
  %6287 = ashr exact i64 %6286, 32
  %6288 = mul nsw i64 %6287, %6285
  %6289 = trunc i64 %6288 to i32
  %6290 = and i64 %6288, 4294967295
  store i64 %6290, i64* %RDX, align 8, !tbaa !2428
  %6291 = shl i64 %6288, 32
  %6292 = ashr exact i64 %6291, 32
  %6293 = icmp ne i64 %6292, %6288
  %6294 = zext i1 %6293 to i8
  %6295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6294, i8* %6295, align 1, !tbaa !2432
  %6296 = and i32 %6289, 255
  %6297 = call i32 @llvm.ctpop.i32(i32 %6296) #16
  %6298 = trunc i32 %6297 to i8
  %6299 = and i8 %6298, 1
  %6300 = xor i8 %6299, 1
  %6301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6300, i8* %6301, align 1, !tbaa !2446
  %6302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6302, align 1, !tbaa !2447
  %6303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6303, align 1, !tbaa !2448
  %6304 = lshr i32 %6289, 31
  %6305 = trunc i32 %6304 to i8
  %6306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6305, i8* %6306, align 1, !tbaa !2449
  %6307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6294, i8* %6307, align 1, !tbaa !2450
  %6308 = load i64, i64* %RDX
  %6309 = load i64, i64* %RBP
  %6310 = sub i64 %6309, 48
  %6311 = load i64, i64* %PC
  %6312 = add i64 %6311, 3
  store i64 %6312, i64* %PC
  %6313 = trunc i64 %6308 to i32
  %6314 = inttoptr i64 %6310 to i32*
  %6315 = load i32, i32* %6314
  %6316 = add i32 %6315, %6313
  %6317 = zext i32 %6316 to i64
  store i64 %6317, i64* %RDX, align 8, !tbaa !2428
  %6318 = icmp ult i32 %6316, %6313
  %6319 = icmp ult i32 %6316, %6315
  %6320 = or i1 %6318, %6319
  %6321 = zext i1 %6320 to i8
  %6322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6321, i8* %6322, align 1, !tbaa !2432
  %6323 = and i32 %6316, 255
  %6324 = call i32 @llvm.ctpop.i32(i32 %6323) #16
  %6325 = trunc i32 %6324 to i8
  %6326 = and i8 %6325, 1
  %6327 = xor i8 %6326, 1
  %6328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6327, i8* %6328, align 1, !tbaa !2446
  %6329 = xor i32 %6315, %6313
  %6330 = xor i32 %6329, %6316
  %6331 = lshr i32 %6330, 4
  %6332 = trunc i32 %6331 to i8
  %6333 = and i8 %6332, 1
  %6334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6333, i8* %6334, align 1, !tbaa !2447
  %6335 = icmp eq i32 %6316, 0
  %6336 = zext i1 %6335 to i8
  %6337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6336, i8* %6337, align 1, !tbaa !2448
  %6338 = lshr i32 %6316, 31
  %6339 = trunc i32 %6338 to i8
  %6340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6339, i8* %6340, align 1, !tbaa !2449
  %6341 = lshr i32 %6313, 31
  %6342 = lshr i32 %6315, 31
  %6343 = xor i32 %6338, %6341
  %6344 = xor i32 %6338, %6342
  %6345 = add nuw nsw i32 %6343, %6344
  %6346 = icmp eq i32 %6345, 2
  %6347 = zext i1 %6346 to i8
  %6348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6347, i8* %6348, align 1, !tbaa !2450
  %6349 = load i32, i32* %EDX
  %6350 = zext i32 %6349 to i64
  %6351 = load i64, i64* %PC
  %6352 = add i64 %6351, 3
  store i64 %6352, i64* %PC
  %6353 = shl i64 %6350, 32
  %6354 = ashr exact i64 %6353, 32
  store i64 %6354, i64* %RCX, align 8, !tbaa !2428
  %6355 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6356 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6357 = load i64, i64* %RAX
  %6358 = load i64, i64* %RCX
  %6359 = mul i64 %6358, 4
  %6360 = add i64 %6359, %6357
  %6361 = load i64, i64* %PC
  %6362 = add i64 %6361, 5
  store i64 %6362, i64* %PC
  %6363 = bitcast i8* %6356 to <2 x float>*
  %6364 = load <2 x float>, <2 x float>* %6363, align 1
  %6365 = getelementptr inbounds i8, i8* %6356, i64 8
  %6366 = bitcast i8* %6365 to <2 x i32>*
  %6367 = load <2 x i32>, <2 x i32>* %6366, align 1
  %6368 = inttoptr i64 %6360 to float*
  %6369 = load float, float* %6368
  %6370 = extractelement <2 x float> %6364, i32 0
  %6371 = fmul float %6370, %6369
  %6372 = bitcast i8* %6355 to float*
  store float %6371, float* %6372, align 1, !tbaa !2452
  %6373 = bitcast <2 x float> %6364 to <2 x i32>
  %6374 = extractelement <2 x i32> %6373, i32 1
  %6375 = getelementptr inbounds i8, i8* %6355, i64 4
  %6376 = bitcast i8* %6375 to i32*
  store i32 %6374, i32* %6376, align 1, !tbaa !2452
  %6377 = extractelement <2 x i32> %6367, i32 0
  %6378 = getelementptr inbounds i8, i8* %6355, i64 8
  %6379 = bitcast i8* %6378 to i32*
  store i32 %6377, i32* %6379, align 1, !tbaa !2452
  %6380 = extractelement <2 x i32> %6367, i32 1
  %6381 = getelementptr inbounds i8, i8* %6355, i64 12
  %6382 = bitcast i8* %6381 to i32*
  store i32 %6380, i32* %6382, align 1, !tbaa !2452
  %6383 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6384 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6385 = bitcast %union.vec128_t* %XMM1 to i8*
  %6386 = load i64, i64* %PC
  %6387 = add i64 %6386, 4
  store i64 %6387, i64* %PC
  %6388 = bitcast i8* %6384 to <2 x float>*
  %6389 = load <2 x float>, <2 x float>* %6388, align 1
  %6390 = getelementptr inbounds i8, i8* %6384, i64 8
  %6391 = bitcast i8* %6390 to <2 x i32>*
  %6392 = load <2 x i32>, <2 x i32>* %6391, align 1
  %6393 = bitcast i8* %6385 to <2 x float>*
  %6394 = load <2 x float>, <2 x float>* %6393, align 1
  %6395 = extractelement <2 x float> %6389, i32 0
  %6396 = extractelement <2 x float> %6394, i32 0
  %6397 = fadd float %6395, %6396
  %6398 = bitcast i8* %6383 to float*
  store float %6397, float* %6398, align 1, !tbaa !2452
  %6399 = bitcast <2 x float> %6389 to <2 x i32>
  %6400 = extractelement <2 x i32> %6399, i32 1
  %6401 = getelementptr inbounds i8, i8* %6383, i64 4
  %6402 = bitcast i8* %6401 to i32*
  store i32 %6400, i32* %6402, align 1, !tbaa !2452
  %6403 = extractelement <2 x i32> %6392, i32 0
  %6404 = getelementptr inbounds i8, i8* %6383, i64 8
  %6405 = bitcast i8* %6404 to i32*
  store i32 %6403, i32* %6405, align 1, !tbaa !2452
  %6406 = extractelement <2 x i32> %6392, i32 1
  %6407 = getelementptr inbounds i8, i8* %6383, i64 12
  %6408 = bitcast i8* %6407 to i32*
  store i32 %6406, i32* %6408, align 1, !tbaa !2452
  %6409 = load i64, i64* %RBP
  %6410 = sub i64 %6409, 32
  %6411 = load i64, i64* %PC
  %6412 = add i64 %6411, 4
  store i64 %6412, i64* %PC
  %6413 = inttoptr i64 %6410 to i64*
  %6414 = load i64, i64* %6413
  store i64 %6414, i64* %RAX, align 8, !tbaa !2428
  %6415 = load i64, i64* %RBP
  %6416 = sub i64 %6415, 44
  %6417 = load i64, i64* %PC
  %6418 = add i64 %6417, 4
  store i64 %6418, i64* %PC
  %6419 = inttoptr i64 %6416 to i32*
  %6420 = load i32, i32* %6419
  %6421 = sext i32 %6420 to i64
  store i64 %6421, i64* %RCX, align 8, !tbaa !2428
  %6422 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6423 = load i64, i64* %RAX
  %6424 = load i64, i64* %RCX
  %6425 = mul i64 %6424, 4
  %6426 = add i64 %6425, %6423
  %6427 = load i64, i64* %PC
  %6428 = add i64 %6427, 5
  store i64 %6428, i64* %PC
  %6429 = inttoptr i64 %6426 to float*
  %6430 = load float, float* %6429
  %6431 = bitcast i8* %6422 to float*
  store float %6430, float* %6431, align 1, !tbaa !2452
  %6432 = getelementptr inbounds i8, i8* %6422, i64 4
  %6433 = bitcast i8* %6432 to float*
  store float 0.000000e+00, float* %6433, align 1, !tbaa !2452
  %6434 = getelementptr inbounds i8, i8* %6422, i64 8
  %6435 = bitcast i8* %6434 to float*
  store float 0.000000e+00, float* %6435, align 1, !tbaa !2452
  %6436 = getelementptr inbounds i8, i8* %6422, i64 12
  %6437 = bitcast i8* %6436 to float*
  store float 0.000000e+00, float* %6437, align 1, !tbaa !2452
  %6438 = load i64, i64* %RBP
  %6439 = sub i64 %6438, 40
  %6440 = load i64, i64* %PC
  %6441 = add i64 %6440, 4
  store i64 %6441, i64* %PC
  %6442 = inttoptr i64 %6439 to i64*
  %6443 = load i64, i64* %6442
  store i64 %6443, i64* %RAX, align 8, !tbaa !2428
  %6444 = load i64, i64* %RBP
  %6445 = sub i64 %6444, 24
  %6446 = load i64, i64* %PC
  %6447 = add i64 %6446, 3
  store i64 %6447, i64* %PC
  %6448 = inttoptr i64 %6445 to i32*
  %6449 = load i32, i32* %6448
  %6450 = zext i32 %6449 to i64
  store i64 %6450, i64* %RDX, align 8, !tbaa !2428
  %6451 = load i64, i64* %RDX
  %6452 = load i64, i64* %RBP
  %6453 = sub i64 %6452, 44
  %6454 = load i64, i64* %PC
  %6455 = add i64 %6454, 4
  store i64 %6455, i64* %PC
  %6456 = inttoptr i64 %6453 to i32*
  %6457 = load i32, i32* %6456
  %6458 = shl i64 %6451, 32
  %6459 = ashr exact i64 %6458, 32
  %6460 = sext i32 %6457 to i64
  %6461 = mul nsw i64 %6460, %6459
  %6462 = trunc i64 %6461 to i32
  %6463 = and i64 %6461, 4294967295
  store i64 %6463, i64* %RDX, align 8, !tbaa !2428
  %6464 = shl i64 %6461, 32
  %6465 = ashr exact i64 %6464, 32
  %6466 = icmp ne i64 %6465, %6461
  %6467 = zext i1 %6466 to i8
  %6468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6467, i8* %6468, align 1, !tbaa !2432
  %6469 = and i32 %6462, 255
  %6470 = call i32 @llvm.ctpop.i32(i32 %6469) #16
  %6471 = trunc i32 %6470 to i8
  %6472 = and i8 %6471, 1
  %6473 = xor i8 %6472, 1
  %6474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6473, i8* %6474, align 1, !tbaa !2446
  %6475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6475, align 1, !tbaa !2447
  %6476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6476, align 1, !tbaa !2448
  %6477 = lshr i32 %6462, 31
  %6478 = trunc i32 %6477 to i8
  %6479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6478, i8* %6479, align 1, !tbaa !2449
  %6480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6467, i8* %6480, align 1, !tbaa !2450
  %6481 = load i64, i64* %RDX
  %6482 = load i64, i64* %RBP
  %6483 = sub i64 %6482, 48
  %6484 = load i64, i64* %PC
  %6485 = add i64 %6484, 3
  store i64 %6485, i64* %PC
  %6486 = trunc i64 %6481 to i32
  %6487 = inttoptr i64 %6483 to i32*
  %6488 = load i32, i32* %6487
  %6489 = add i32 %6488, %6486
  %6490 = zext i32 %6489 to i64
  store i64 %6490, i64* %RDX, align 8, !tbaa !2428
  %6491 = icmp ult i32 %6489, %6486
  %6492 = icmp ult i32 %6489, %6488
  %6493 = or i1 %6491, %6492
  %6494 = zext i1 %6493 to i8
  %6495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6494, i8* %6495, align 1, !tbaa !2432
  %6496 = and i32 %6489, 255
  %6497 = call i32 @llvm.ctpop.i32(i32 %6496) #16
  %6498 = trunc i32 %6497 to i8
  %6499 = and i8 %6498, 1
  %6500 = xor i8 %6499, 1
  %6501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6500, i8* %6501, align 1, !tbaa !2446
  %6502 = xor i32 %6488, %6486
  %6503 = xor i32 %6502, %6489
  %6504 = lshr i32 %6503, 4
  %6505 = trunc i32 %6504 to i8
  %6506 = and i8 %6505, 1
  %6507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6506, i8* %6507, align 1, !tbaa !2447
  %6508 = icmp eq i32 %6489, 0
  %6509 = zext i1 %6508 to i8
  %6510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6509, i8* %6510, align 1, !tbaa !2448
  %6511 = lshr i32 %6489, 31
  %6512 = trunc i32 %6511 to i8
  %6513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6512, i8* %6513, align 1, !tbaa !2449
  %6514 = lshr i32 %6486, 31
  %6515 = lshr i32 %6488, 31
  %6516 = xor i32 %6511, %6514
  %6517 = xor i32 %6511, %6515
  %6518 = add nuw nsw i32 %6516, %6517
  %6519 = icmp eq i32 %6518, 2
  %6520 = zext i1 %6519 to i8
  %6521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6520, i8* %6521, align 1, !tbaa !2450
  %6522 = load i32, i32* %EDX
  %6523 = zext i32 %6522 to i64
  %6524 = load i64, i64* %PC
  %6525 = add i64 %6524, 3
  store i64 %6525, i64* %PC
  %6526 = shl i64 %6523, 32
  %6527 = ashr exact i64 %6526, 32
  store i64 %6527, i64* %RCX, align 8, !tbaa !2428
  %6528 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6529 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6530 = load i64, i64* %RAX
  %6531 = load i64, i64* %RCX
  %6532 = mul i64 %6531, 4
  %6533 = add i64 %6532, %6530
  %6534 = load i64, i64* %PC
  %6535 = add i64 %6534, 5
  store i64 %6535, i64* %PC
  %6536 = bitcast i8* %6529 to <2 x float>*
  %6537 = load <2 x float>, <2 x float>* %6536, align 1
  %6538 = getelementptr inbounds i8, i8* %6529, i64 8
  %6539 = bitcast i8* %6538 to <2 x i32>*
  %6540 = load <2 x i32>, <2 x i32>* %6539, align 1
  %6541 = inttoptr i64 %6533 to float*
  %6542 = load float, float* %6541
  %6543 = extractelement <2 x float> %6537, i32 0
  %6544 = fmul float %6543, %6542
  %6545 = bitcast i8* %6528 to float*
  store float %6544, float* %6545, align 1, !tbaa !2452
  %6546 = bitcast <2 x float> %6537 to <2 x i32>
  %6547 = extractelement <2 x i32> %6546, i32 1
  %6548 = getelementptr inbounds i8, i8* %6528, i64 4
  %6549 = bitcast i8* %6548 to i32*
  store i32 %6547, i32* %6549, align 1, !tbaa !2452
  %6550 = extractelement <2 x i32> %6540, i32 0
  %6551 = getelementptr inbounds i8, i8* %6528, i64 8
  %6552 = bitcast i8* %6551 to i32*
  store i32 %6550, i32* %6552, align 1, !tbaa !2452
  %6553 = extractelement <2 x i32> %6540, i32 1
  %6554 = getelementptr inbounds i8, i8* %6528, i64 12
  %6555 = bitcast i8* %6554 to i32*
  store i32 %6553, i32* %6555, align 1, !tbaa !2452
  %6556 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6557 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6558 = bitcast %union.vec128_t* %XMM1 to i8*
  %6559 = load i64, i64* %PC
  %6560 = add i64 %6559, 4
  store i64 %6560, i64* %PC
  %6561 = bitcast i8* %6557 to <2 x float>*
  %6562 = load <2 x float>, <2 x float>* %6561, align 1
  %6563 = getelementptr inbounds i8, i8* %6557, i64 8
  %6564 = bitcast i8* %6563 to <2 x i32>*
  %6565 = load <2 x i32>, <2 x i32>* %6564, align 1
  %6566 = bitcast i8* %6558 to <2 x float>*
  %6567 = load <2 x float>, <2 x float>* %6566, align 1
  %6568 = extractelement <2 x float> %6562, i32 0
  %6569 = extractelement <2 x float> %6567, i32 0
  %6570 = fadd float %6568, %6569
  %6571 = bitcast i8* %6556 to float*
  store float %6570, float* %6571, align 1, !tbaa !2452
  %6572 = bitcast <2 x float> %6562 to <2 x i32>
  %6573 = extractelement <2 x i32> %6572, i32 1
  %6574 = getelementptr inbounds i8, i8* %6556, i64 4
  %6575 = bitcast i8* %6574 to i32*
  store i32 %6573, i32* %6575, align 1, !tbaa !2452
  %6576 = extractelement <2 x i32> %6565, i32 0
  %6577 = getelementptr inbounds i8, i8* %6556, i64 8
  %6578 = bitcast i8* %6577 to i32*
  store i32 %6576, i32* %6578, align 1, !tbaa !2452
  %6579 = extractelement <2 x i32> %6565, i32 1
  %6580 = getelementptr inbounds i8, i8* %6556, i64 12
  %6581 = bitcast i8* %6580 to i32*
  store i32 %6579, i32* %6581, align 1, !tbaa !2452
  %6582 = load i64, i64* %RBP
  %6583 = sub i64 %6582, 16
  %6584 = load i64, i64* %PC
  %6585 = add i64 %6584, 4
  store i64 %6585, i64* %PC
  %6586 = inttoptr i64 %6583 to i64*
  %6587 = load i64, i64* %6586
  store i64 %6587, i64* %RAX, align 8, !tbaa !2428
  %6588 = load i64, i64* %RBP
  %6589 = sub i64 %6588, 48
  %6590 = load i64, i64* %PC
  %6591 = add i64 %6590, 4
  store i64 %6591, i64* %PC
  %6592 = inttoptr i64 %6589 to i32*
  %6593 = load i32, i32* %6592
  %6594 = sext i32 %6593 to i64
  store i64 %6594, i64* %RCX, align 8, !tbaa !2428
  %6595 = load i64, i64* %RAX
  %6596 = load i64, i64* %RCX
  %6597 = mul i64 %6596, 4
  %6598 = add i64 %6597, %6595
  %6599 = bitcast %union.vec128_t* %XMM0 to i8*
  %6600 = load i64, i64* %PC
  %6601 = add i64 %6600, 5
  store i64 %6601, i64* %PC
  %6602 = bitcast i8* %6599 to <2 x float>*
  %6603 = load <2 x float>, <2 x float>* %6602, align 1
  %6604 = extractelement <2 x float> %6603, i32 0
  %6605 = inttoptr i64 %6598 to float*
  store float %6604, float* %6605
  %6606 = load i64, i64* %RBP
  %6607 = sub i64 %6606, 48
  %6608 = load i64, i64* %PC
  %6609 = add i64 %6608, 3
  store i64 %6609, i64* %PC
  %6610 = inttoptr i64 %6607 to i32*
  %6611 = load i32, i32* %6610
  %6612 = zext i32 %6611 to i64
  store i64 %6612, i64* %RAX, align 8, !tbaa !2428
  %6613 = load i64, i64* %RAX
  %6614 = load i64, i64* %PC
  %6615 = add i64 %6614, 3
  store i64 %6615, i64* %PC
  %6616 = trunc i64 %6613 to i32
  %6617 = add i32 1, %6616
  %6618 = zext i32 %6617 to i64
  store i64 %6618, i64* %RAX, align 8, !tbaa !2428
  %6619 = icmp ult i32 %6617, %6616
  %6620 = icmp ult i32 %6617, 1
  %6621 = or i1 %6619, %6620
  %6622 = zext i1 %6621 to i8
  %6623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6622, i8* %6623, align 1, !tbaa !2432
  %6624 = and i32 %6617, 255
  %6625 = call i32 @llvm.ctpop.i32(i32 %6624) #16
  %6626 = trunc i32 %6625 to i8
  %6627 = and i8 %6626, 1
  %6628 = xor i8 %6627, 1
  %6629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6628, i8* %6629, align 1, !tbaa !2446
  %6630 = xor i64 1, %6613
  %6631 = trunc i64 %6630 to i32
  %6632 = xor i32 %6631, %6617
  %6633 = lshr i32 %6632, 4
  %6634 = trunc i32 %6633 to i8
  %6635 = and i8 %6634, 1
  %6636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6635, i8* %6636, align 1, !tbaa !2447
  %6637 = icmp eq i32 %6617, 0
  %6638 = zext i1 %6637 to i8
  %6639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6638, i8* %6639, align 1, !tbaa !2448
  %6640 = lshr i32 %6617, 31
  %6641 = trunc i32 %6640 to i8
  %6642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6641, i8* %6642, align 1, !tbaa !2449
  %6643 = lshr i32 %6616, 31
  %6644 = xor i32 %6640, %6643
  %6645 = add nuw nsw i32 %6644, %6640
  %6646 = icmp eq i32 %6645, 2
  %6647 = zext i1 %6646 to i8
  %6648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6647, i8* %6648, align 1, !tbaa !2450
  %6649 = load i64, i64* %RBP
  %6650 = sub i64 %6649, 48
  %6651 = load i32, i32* %EAX
  %6652 = zext i32 %6651 to i64
  %6653 = load i64, i64* %PC
  %6654 = add i64 %6653, 3
  store i64 %6654, i64* %PC
  %6655 = inttoptr i64 %6650 to i32*
  store i32 %6651, i32* %6655
  %6656 = load i64, i64* %PC
  %6657 = sub i64 %6656, 135
  %6658 = load i64, i64* %PC
  %6659 = add i64 %6658, 5
  store i64 %6659, i64* %PC
  %6660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6657, i64* %6660, align 8, !tbaa !2428
  br label %block_402099

block_40226d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %6661 = load i64, i64* %RBP
  %6662 = sub i64 %6661, 44
  %6663 = load i64, i64* %PC
  %6664 = add i64 %6663, 3
  store i64 %6664, i64* %PC
  %6665 = inttoptr i64 %6662 to i32*
  %6666 = load i32, i32* %6665
  %6667 = zext i32 %6666 to i64
  store i64 %6667, i64* %RAX, align 8, !tbaa !2428
  %6668 = load i64, i64* %RAX
  %6669 = load i64, i64* %PC
  %6670 = add i64 %6669, 3
  store i64 %6670, i64* %PC
  %6671 = trunc i64 %6668 to i32
  %6672 = sub i32 %6671, 1
  %6673 = zext i32 %6672 to i64
  store i64 %6673, i64* %RAX, align 8, !tbaa !2428
  %6674 = icmp ult i32 %6671, 1
  %6675 = zext i1 %6674 to i8
  %6676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6675, i8* %6676, align 1, !tbaa !2432
  %6677 = and i32 %6672, 255
  %6678 = call i32 @llvm.ctpop.i32(i32 %6677) #16
  %6679 = trunc i32 %6678 to i8
  %6680 = and i8 %6679, 1
  %6681 = xor i8 %6680, 1
  %6682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6681, i8* %6682, align 1, !tbaa !2446
  %6683 = xor i64 1, %6668
  %6684 = trunc i64 %6683 to i32
  %6685 = xor i32 %6684, %6672
  %6686 = lshr i32 %6685, 4
  %6687 = trunc i32 %6686 to i8
  %6688 = and i8 %6687, 1
  %6689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6688, i8* %6689, align 1, !tbaa !2447
  %6690 = icmp eq i32 %6672, 0
  %6691 = zext i1 %6690 to i8
  %6692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6691, i8* %6692, align 1, !tbaa !2448
  %6693 = lshr i32 %6672, 31
  %6694 = trunc i32 %6693 to i8
  %6695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6694, i8* %6695, align 1, !tbaa !2449
  %6696 = lshr i32 %6671, 31
  %6697 = xor i32 %6693, %6696
  %6698 = add nuw nsw i32 %6697, %6696
  %6699 = icmp eq i32 %6698, 2
  %6700 = zext i1 %6699 to i8
  %6701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6700, i8* %6701, align 1, !tbaa !2450
  %6702 = load i64, i64* %RBP
  %6703 = sub i64 %6702, 44
  %6704 = load i32, i32* %EAX
  %6705 = zext i32 %6704 to i64
  %6706 = load i64, i64* %PC
  %6707 = add i64 %6706, 3
  store i64 %6707, i64* %PC
  %6708 = inttoptr i64 %6703 to i32*
  store i32 %6704, i32* %6708
  %6709 = load i64, i64* %RBP
  %6710 = sub i64 %6709, 48
  %6711 = load i64, i64* %PC
  %6712 = add i64 %6711, 7
  store i64 %6712, i64* %PC
  %6713 = inttoptr i64 %6710 to i32*
  store i32 0, i32* %6713
  br label %block_40227d

block_4027a3:                                     ; preds = %block_402469
  %6714 = load i64, i64* %PC
  %6715 = add i64 %6714, 5
  %6716 = load i64, i64* %PC
  %6717 = add i64 %6716, 5
  store i64 %6717, i64* %PC
  %6718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6715, i64* %6718, align 8, !tbaa !2428
  %6719 = load i64, i64* %RBP
  %6720 = sub i64 %6719, 44
  %6721 = load i64, i64* %PC
  %6722 = add i64 %6721, 3
  store i64 %6722, i64* %PC
  %6723 = inttoptr i64 %6720 to i32*
  %6724 = load i32, i32* %6723
  %6725 = zext i32 %6724 to i64
  store i64 %6725, i64* %RAX, align 8, !tbaa !2428
  %6726 = load i64, i64* %RAX
  %6727 = load i64, i64* %PC
  %6728 = add i64 %6727, 3
  store i64 %6728, i64* %PC
  %6729 = trunc i64 %6726 to i32
  %6730 = add i32 16, %6729
  %6731 = zext i32 %6730 to i64
  store i64 %6731, i64* %RAX, align 8, !tbaa !2428
  %6732 = icmp ult i32 %6730, %6729
  %6733 = icmp ult i32 %6730, 16
  %6734 = or i1 %6732, %6733
  %6735 = zext i1 %6734 to i8
  %6736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6735, i8* %6736, align 1, !tbaa !2432
  %6737 = and i32 %6730, 255
  %6738 = call i32 @llvm.ctpop.i32(i32 %6737) #16
  %6739 = trunc i32 %6738 to i8
  %6740 = and i8 %6739, 1
  %6741 = xor i8 %6740, 1
  %6742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6741, i8* %6742, align 1, !tbaa !2446
  %6743 = xor i64 16, %6726
  %6744 = trunc i64 %6743 to i32
  %6745 = xor i32 %6744, %6730
  %6746 = lshr i32 %6745, 4
  %6747 = trunc i32 %6746 to i8
  %6748 = and i8 %6747, 1
  %6749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6748, i8* %6749, align 1, !tbaa !2447
  %6750 = icmp eq i32 %6730, 0
  %6751 = zext i1 %6750 to i8
  %6752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6751, i8* %6752, align 1, !tbaa !2448
  %6753 = lshr i32 %6730, 31
  %6754 = trunc i32 %6753 to i8
  %6755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6754, i8* %6755, align 1, !tbaa !2449
  %6756 = lshr i32 %6729, 31
  %6757 = xor i32 %6753, %6756
  %6758 = add nuw nsw i32 %6757, %6753
  %6759 = icmp eq i32 %6758, 2
  %6760 = zext i1 %6759 to i8
  %6761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6760, i8* %6761, align 1, !tbaa !2450
  %6762 = load i64, i64* %RBP
  %6763 = sub i64 %6762, 44
  %6764 = load i32, i32* %EAX
  %6765 = zext i32 %6764 to i64
  %6766 = load i64, i64* %PC
  %6767 = add i64 %6766, 3
  store i64 %6767, i64* %PC
  %6768 = inttoptr i64 %6763 to i32*
  store i32 %6764, i32* %6768
  %6769 = load i64, i64* %PC
  %6770 = sub i64 %6769, 859
  %6771 = load i64, i64* %PC
  %6772 = add i64 %6771, 5
  store i64 %6772, i64* %PC
  %6773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6770, i64* %6773, align 8, !tbaa !2428
  br label %block_402456

block_402456:                                     ; preds = %block_4027a3, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %MEMORY.7 = phi %struct.Memory* [ %5897, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %MEMORY.5, %block_4027a3 ]
  %6774 = load i64, i64* %RBP
  %6775 = sub i64 %6774, 44
  %6776 = load i64, i64* %PC
  %6777 = add i64 %6776, 3
  store i64 %6777, i64* %PC
  %6778 = inttoptr i64 %6775 to i32*
  %6779 = load i32, i32* %6778
  %6780 = zext i32 %6779 to i64
  store i64 %6780, i64* %RAX, align 8, !tbaa !2428
  %6781 = load i32, i32* %EAX
  %6782 = zext i32 %6781 to i64
  %6783 = load i64, i64* %RBP
  %6784 = sub i64 %6783, 20
  %6785 = load i64, i64* %PC
  %6786 = add i64 %6785, 3
  store i64 %6786, i64* %PC
  %6787 = inttoptr i64 %6784 to i32*
  %6788 = load i32, i32* %6787
  %6789 = sub i32 %6781, %6788
  %6790 = icmp ult i32 %6781, %6788
  %6791 = zext i1 %6790 to i8
  %6792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6791, i8* %6792, align 1, !tbaa !2432
  %6793 = and i32 %6789, 255
  %6794 = call i32 @llvm.ctpop.i32(i32 %6793) #16
  %6795 = trunc i32 %6794 to i8
  %6796 = and i8 %6795, 1
  %6797 = xor i8 %6796, 1
  %6798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6797, i8* %6798, align 1, !tbaa !2446
  %6799 = xor i32 %6788, %6781
  %6800 = xor i32 %6799, %6789
  %6801 = lshr i32 %6800, 4
  %6802 = trunc i32 %6801 to i8
  %6803 = and i8 %6802, 1
  %6804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6803, i8* %6804, align 1, !tbaa !2447
  %6805 = icmp eq i32 %6789, 0
  %6806 = zext i1 %6805 to i8
  %6807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6806, i8* %6807, align 1, !tbaa !2448
  %6808 = lshr i32 %6789, 31
  %6809 = trunc i32 %6808 to i8
  %6810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6809, i8* %6810, align 1, !tbaa !2449
  %6811 = lshr i32 %6781, 31
  %6812 = lshr i32 %6788, 31
  %6813 = xor i32 %6812, %6811
  %6814 = xor i32 %6808, %6811
  %6815 = add nuw nsw i32 %6814, %6813
  %6816 = icmp eq i32 %6815, 2
  %6817 = zext i1 %6816 to i8
  %6818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6817, i8* %6818, align 1, !tbaa !2450
  %6819 = load i64, i64* %PC
  %6820 = add i64 %6819, 858
  %6821 = load i64, i64* %PC
  %6822 = add i64 %6821, 6
  %6823 = load i64, i64* %PC
  %6824 = add i64 %6823, 6
  store i64 %6824, i64* %PC
  %6825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6826 = load i8, i8* %6825, align 1, !tbaa !2449
  %6827 = icmp ne i8 %6826, 0
  %6828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6829 = load i8, i8* %6828, align 1, !tbaa !2450
  %6830 = icmp ne i8 %6829, 0
  %6831 = xor i1 %6827, %6830
  %6832 = xor i1 %6831, true
  %6833 = zext i1 %6832 to i8
  store i8 %6833, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6835 = select i1 %6831, i64 %6822, i64 %6820
  store i64 %6835, i64* %6834, align 8, !tbaa !2428
  %6836 = load i8, i8* %BRANCH_TAKEN
  %6837 = icmp eq i8 %6836, 1
  br i1 %6837, label %block_4027b6, label %block_402462

block_40212a:                                     ; preds = %block_402125, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %MEMORY.8 = phi %struct.Memory* [ %423, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ], [ %MEMORY.9, %block_402125 ]
  %6838 = load i64, i64* %PC
  %6839 = add i64 %6838, 5
  store i64 %6839, i64* %PC
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %6840 = load i64, i64* %RBP
  %6841 = sub i64 %6840, 20
  %6842 = load i64, i64* %PC
  %6843 = add i64 %6842, 3
  store i64 %6843, i64* %PC
  %6844 = inttoptr i64 %6841 to i32*
  %6845 = load i32, i32* %6844
  %6846 = zext i32 %6845 to i64
  store i64 %6846, i64* %RCX, align 8, !tbaa !2428
  %6847 = load i64, i64* %RBP
  %6848 = sub i64 %6847, 64
  %6849 = load i32, i32* %EAX
  %6850 = zext i32 %6849 to i64
  %6851 = load i64, i64* %PC
  %6852 = add i64 %6851, 3
  store i64 %6852, i64* %PC
  %6853 = inttoptr i64 %6848 to i32*
  store i32 %6849, i32* %6853
  %6854 = load i32, i32* %ECX
  %6855 = zext i32 %6854 to i64
  %6856 = load i64, i64* %PC
  %6857 = add i64 %6856, 2
  store i64 %6857, i64* %PC
  %6858 = and i64 %6855, 4294967295
  store i64 %6858, i64* %RAX, align 8, !tbaa !2428
  %6859 = load i64, i64* %PC
  %6860 = add i64 %6859, 1
  store i64 %6860, i64* %PC
  %6861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6863 = bitcast %union.anon* %6862 to i32*
  %6864 = load i32, i32* %6863, align 8, !tbaa !2454
  %6865 = sext i32 %6864 to i64
  %6866 = lshr i64 %6865, 32
  store i64 %6866, i64* %6861, align 8, !tbaa !2428
  %6867 = load i64, i64* %RBP
  %6868 = sub i64 %6867, 64
  %6869 = load i64, i64* %PC
  %6870 = add i64 %6869, 3
  store i64 %6870, i64* %PC
  %6871 = inttoptr i64 %6868 to i32*
  %6872 = load i32, i32* %6871
  %6873 = zext i32 %6872 to i64
  store i64 %6873, i64* %RCX, align 8, !tbaa !2428
  %6874 = load i32, i32* %ECX
  %6875 = zext i32 %6874 to i64
  %6876 = load i64, i64* %PC
  %6877 = add i64 %6876, 2
  store i64 %6877, i64* %PC
  %6878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6879 = bitcast %union.anon* %6878 to i32*
  %6880 = load i32, i32* %6879, align 8, !tbaa !2454
  %6881 = zext i32 %6880 to i64
  %6882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6883 = bitcast %union.anon* %6882 to i32*
  %6884 = load i32, i32* %6883, align 8, !tbaa !2454
  %6885 = zext i32 %6884 to i64
  %6886 = shl i64 %6875, 32
  %6887 = ashr exact i64 %6886, 32
  %6888 = shl nuw i64 %6885, 32
  %6889 = or i64 %6888, %6881
  %6890 = sdiv i64 %6889, %6887
  %6891 = shl i64 %6890, 32
  %6892 = ashr exact i64 %6891, 32
  %6893 = icmp eq i64 %6890, %6892
  br i1 %6893, label %6898, label %6894

; <label>:6894:                                   ; preds = %block_40212a
  %6895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6896 = load i64, i64* %6895, align 8, !tbaa !2428
  %6897 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6896, %struct.Memory* %MEMORY.8) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:6898:                                   ; preds = %block_40212a
  %6899 = srem i64 %6889, %6887
  %6900 = getelementptr inbounds %union.anon, %union.anon* %6878, i64 0, i32 0
  %6901 = and i64 %6890, 4294967295
  store i64 %6901, i64* %6900, align 8, !tbaa !2428
  %6902 = getelementptr inbounds %union.anon, %union.anon* %6882, i64 0, i32 0
  %6903 = and i64 %6899, 4294967295
  store i64 %6903, i64* %6902, align 8, !tbaa !2428
  %6904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6904, align 1, !tbaa !2432
  %6905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %6905, align 1, !tbaa !2446
  %6906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6906, align 1, !tbaa !2447
  %6907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6907, align 1, !tbaa !2448
  %6908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6908, align 1, !tbaa !2449
  %6909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6909, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %6894, %6898
  %6910 = phi %struct.Memory* [ %6897, %6894 ], [ %MEMORY.8, %6898 ]
  %6911 = load i64, i64* %RBP
  %6912 = sub i64 %6911, 44
  %6913 = load i32, i32* %EDX
  %6914 = zext i32 %6913 to i64
  %6915 = load i64, i64* %PC
  %6916 = add i64 %6915, 3
  store i64 %6916, i64* %PC
  %6917 = inttoptr i64 %6912 to i32*
  store i32 %6913, i32* %6917
  %6918 = load i64, i64* %RBP
  %6919 = sub i64 %6918, 44
  %6920 = load i64, i64* %PC
  %6921 = add i64 %6920, 4
  store i64 %6921, i64* %PC
  %6922 = inttoptr i64 %6919 to i32*
  %6923 = load i32, i32* %6922
  %6924 = sub i32 %6923, 4
  %6925 = icmp ult i32 %6923, 4
  %6926 = zext i1 %6925 to i8
  %6927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6926, i8* %6927, align 1, !tbaa !2432
  %6928 = and i32 %6924, 255
  %6929 = call i32 @llvm.ctpop.i32(i32 %6928) #16
  %6930 = trunc i32 %6929 to i8
  %6931 = and i8 %6930, 1
  %6932 = xor i8 %6931, 1
  %6933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6932, i8* %6933, align 1, !tbaa !2446
  %6934 = xor i32 %6923, 4
  %6935 = xor i32 %6934, %6924
  %6936 = lshr i32 %6935, 4
  %6937 = trunc i32 %6936 to i8
  %6938 = and i8 %6937, 1
  %6939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6938, i8* %6939, align 1, !tbaa !2447
  %6940 = icmp eq i32 %6924, 0
  %6941 = zext i1 %6940 to i8
  %6942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6941, i8* %6942, align 1, !tbaa !2448
  %6943 = lshr i32 %6924, 31
  %6944 = trunc i32 %6943 to i8
  %6945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6944, i8* %6945, align 1, !tbaa !2449
  %6946 = lshr i32 %6923, 31
  %6947 = xor i32 %6943, %6946
  %6948 = add nuw nsw i32 %6947, %6946
  %6949 = icmp eq i32 %6948, 2
  %6950 = zext i1 %6949 to i8
  %6951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6950, i8* %6951, align 1, !tbaa !2450
  %6952 = load i64, i64* %PC
  %6953 = add i64 %6952, 265
  %6954 = load i64, i64* %PC
  %6955 = add i64 %6954, 6
  %6956 = load i64, i64* %PC
  %6957 = add i64 %6956, 6
  store i64 %6957, i64* %PC
  %6958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6959 = load i8, i8* %6958, align 1, !tbaa !2449
  %6960 = icmp ne i8 %6959, 0
  %6961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6962 = load i8, i8* %6961, align 1, !tbaa !2450
  %6963 = icmp ne i8 %6962, 0
  %6964 = xor i1 %6960, %6963
  %6965 = zext i1 %6964 to i8
  store i8 %6965, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6967 = select i1 %6964, i64 %6953, i64 %6955
  store i64 %6967, i64* %6966, align 8, !tbaa !2428
  %6968 = load i8, i8* %BRANCH_TAKEN
  %6969 = icmp eq i8 %6968, 1
  br i1 %6969, label %block_40224d, label %block_40214a

block_402099:                                     ; preds = %block_402089, %block_4020a5
  %MEMORY.9 = phi %struct.Memory* [ %423, %block_402089 ], [ %MEMORY.9, %block_4020a5 ]
  %6970 = load i64, i64* %RBP
  %6971 = sub i64 %6970, 48
  %6972 = load i64, i64* %PC
  %6973 = add i64 %6972, 3
  store i64 %6973, i64* %PC
  %6974 = inttoptr i64 %6971 to i32*
  %6975 = load i32, i32* %6974
  %6976 = zext i32 %6975 to i64
  store i64 %6976, i64* %RAX, align 8, !tbaa !2428
  %6977 = load i32, i32* %EAX
  %6978 = zext i32 %6977 to i64
  %6979 = load i64, i64* %RBP
  %6980 = sub i64 %6979, 4
  %6981 = load i64, i64* %PC
  %6982 = add i64 %6981, 3
  store i64 %6982, i64* %PC
  %6983 = inttoptr i64 %6980 to i32*
  %6984 = load i32, i32* %6983
  %6985 = sub i32 %6977, %6984
  %6986 = icmp ult i32 %6977, %6984
  %6987 = zext i1 %6986 to i8
  %6988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6987, i8* %6988, align 1, !tbaa !2432
  %6989 = and i32 %6985, 255
  %6990 = call i32 @llvm.ctpop.i32(i32 %6989) #16
  %6991 = trunc i32 %6990 to i8
  %6992 = and i8 %6991, 1
  %6993 = xor i8 %6992, 1
  %6994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6993, i8* %6994, align 1, !tbaa !2446
  %6995 = xor i32 %6984, %6977
  %6996 = xor i32 %6995, %6985
  %6997 = lshr i32 %6996, 4
  %6998 = trunc i32 %6997 to i8
  %6999 = and i8 %6998, 1
  %7000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6999, i8* %7000, align 1, !tbaa !2447
  %7001 = icmp eq i32 %6985, 0
  %7002 = zext i1 %7001 to i8
  %7003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7002, i8* %7003, align 1, !tbaa !2448
  %7004 = lshr i32 %6985, 31
  %7005 = trunc i32 %7004 to i8
  %7006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7005, i8* %7006, align 1, !tbaa !2449
  %7007 = lshr i32 %6977, 31
  %7008 = lshr i32 %6984, 31
  %7009 = xor i32 %7008, %7007
  %7010 = xor i32 %7004, %7007
  %7011 = add nuw nsw i32 %7010, %7009
  %7012 = icmp eq i32 %7011, 2
  %7013 = zext i1 %7012 to i8
  %7014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7013, i8* %7014, align 1, !tbaa !2450
  %7015 = load i64, i64* %PC
  %7016 = add i64 %7015, 134
  %7017 = load i64, i64* %PC
  %7018 = add i64 %7017, 6
  %7019 = load i64, i64* %PC
  %7020 = add i64 %7019, 6
  store i64 %7020, i64* %PC
  %7021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7022 = load i8, i8* %7021, align 1, !tbaa !2449
  %7023 = icmp ne i8 %7022, 0
  %7024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7025 = load i8, i8* %7024, align 1, !tbaa !2450
  %7026 = icmp ne i8 %7025, 0
  %7027 = xor i1 %7023, %7026
  %7028 = xor i1 %7027, true
  %7029 = zext i1 %7028 to i8
  store i8 %7029, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7031 = select i1 %7027, i64 %7018, i64 %7016
  store i64 %7031, i64* %7030, align 8, !tbaa !2428
  %7032 = load i8, i8* %BRANCH_TAKEN
  %7033 = icmp eq i8 %7032, 1
  br i1 %7033, label %block_402125, label %block_4020a5

block_402089:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %7034 = load i64, i64* %RBP
  %7035 = sub i64 %7034, 44
  %7036 = load i64, i64* %PC
  %7037 = add i64 %7036, 3
  store i64 %7037, i64* %PC
  %7038 = inttoptr i64 %7035 to i32*
  %7039 = load i32, i32* %7038
  %7040 = zext i32 %7039 to i64
  store i64 %7040, i64* %RAX, align 8, !tbaa !2428
  %7041 = load i64, i64* %RAX
  %7042 = load i64, i64* %PC
  %7043 = add i64 %7042, 3
  store i64 %7043, i64* %PC
  %7044 = trunc i64 %7041 to i32
  %7045 = sub i32 %7044, 1
  %7046 = zext i32 %7045 to i64
  store i64 %7046, i64* %RAX, align 8, !tbaa !2428
  %7047 = icmp ult i32 %7044, 1
  %7048 = zext i1 %7047 to i8
  %7049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7048, i8* %7049, align 1, !tbaa !2432
  %7050 = and i32 %7045, 255
  %7051 = call i32 @llvm.ctpop.i32(i32 %7050) #16
  %7052 = trunc i32 %7051 to i8
  %7053 = and i8 %7052, 1
  %7054 = xor i8 %7053, 1
  %7055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7054, i8* %7055, align 1, !tbaa !2446
  %7056 = xor i64 1, %7041
  %7057 = trunc i64 %7056 to i32
  %7058 = xor i32 %7057, %7045
  %7059 = lshr i32 %7058, 4
  %7060 = trunc i32 %7059 to i8
  %7061 = and i8 %7060, 1
  %7062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7061, i8* %7062, align 1, !tbaa !2447
  %7063 = icmp eq i32 %7045, 0
  %7064 = zext i1 %7063 to i8
  %7065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7064, i8* %7065, align 1, !tbaa !2448
  %7066 = lshr i32 %7045, 31
  %7067 = trunc i32 %7066 to i8
  %7068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7067, i8* %7068, align 1, !tbaa !2449
  %7069 = lshr i32 %7044, 31
  %7070 = xor i32 %7066, %7069
  %7071 = add nuw nsw i32 %7070, %7069
  %7072 = icmp eq i32 %7071, 2
  %7073 = zext i1 %7072 to i8
  %7074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7073, i8* %7074, align 1, !tbaa !2450
  %7075 = load i64, i64* %RBP
  %7076 = sub i64 %7075, 44
  %7077 = load i32, i32* %EAX
  %7078 = zext i32 %7077 to i64
  %7079 = load i64, i64* %PC
  %7080 = add i64 %7079, 3
  store i64 %7080, i64* %PC
  %7081 = inttoptr i64 %7076 to i32*
  store i32 %7077, i32* %7081
  %7082 = load i64, i64* %RBP
  %7083 = sub i64 %7082, 48
  %7084 = load i64, i64* %PC
  %7085 = add i64 %7084, 7
  store i64 %7085, i64* %PC
  %7086 = inttoptr i64 %7083 to i32*
  store i32 0, i32* %7086
  br label %block_402099

block_402015:                                     ; preds = %block_402009
  %7087 = load i64, i64* %RBP
  %7088 = sub i64 %7087, 16
  %7089 = load i64, i64* %PC
  %7090 = add i64 %7089, 4
  store i64 %7090, i64* %PC
  %7091 = inttoptr i64 %7088 to i64*
  %7092 = load i64, i64* %7091
  store i64 %7092, i64* %RAX, align 8, !tbaa !2428
  %7093 = load i64, i64* %RBP
  %7094 = sub i64 %7093, 48
  %7095 = load i64, i64* %PC
  %7096 = add i64 %7095, 4
  store i64 %7096, i64* %PC
  %7097 = inttoptr i64 %7094 to i32*
  %7098 = load i32, i32* %7097
  %7099 = sext i32 %7098 to i64
  store i64 %7099, i64* %RCX, align 8, !tbaa !2428
  %7100 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7101 = load i64, i64* %RAX
  %7102 = load i64, i64* %RCX
  %7103 = mul i64 %7102, 4
  %7104 = add i64 %7103, %7101
  %7105 = load i64, i64* %PC
  %7106 = add i64 %7105, 5
  store i64 %7106, i64* %PC
  %7107 = inttoptr i64 %7104 to float*
  %7108 = load float, float* %7107
  %7109 = bitcast i8* %7100 to float*
  store float %7108, float* %7109, align 1, !tbaa !2452
  %7110 = getelementptr inbounds i8, i8* %7100, i64 4
  %7111 = bitcast i8* %7110 to float*
  store float 0.000000e+00, float* %7111, align 1, !tbaa !2452
  %7112 = getelementptr inbounds i8, i8* %7100, i64 8
  %7113 = bitcast i8* %7112 to float*
  store float 0.000000e+00, float* %7113, align 1, !tbaa !2452
  %7114 = getelementptr inbounds i8, i8* %7100, i64 12
  %7115 = bitcast i8* %7114 to float*
  store float 0.000000e+00, float* %7115, align 1, !tbaa !2452
  %7116 = load i64, i64* %RBP
  %7117 = sub i64 %7116, 32
  %7118 = load i64, i64* %PC
  %7119 = add i64 %7118, 4
  store i64 %7119, i64* %PC
  %7120 = inttoptr i64 %7117 to i64*
  %7121 = load i64, i64* %7120
  store i64 %7121, i64* %RAX, align 8, !tbaa !2428
  %7122 = load i64, i64* %RBP
  %7123 = sub i64 %7122, 44
  %7124 = load i64, i64* %PC
  %7125 = add i64 %7124, 4
  store i64 %7125, i64* %PC
  %7126 = inttoptr i64 %7123 to i32*
  %7127 = load i32, i32* %7126
  %7128 = sext i32 %7127 to i64
  store i64 %7128, i64* %RCX, align 8, !tbaa !2428
  %7129 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7130 = load i64, i64* %RAX
  %7131 = load i64, i64* %RCX
  %7132 = mul i64 %7131, 4
  %7133 = add i64 %7132, %7130
  %7134 = load i64, i64* %PC
  %7135 = add i64 %7134, 5
  store i64 %7135, i64* %PC
  %7136 = inttoptr i64 %7133 to float*
  %7137 = load float, float* %7136
  %7138 = bitcast i8* %7129 to float*
  store float %7137, float* %7138, align 1, !tbaa !2452
  %7139 = getelementptr inbounds i8, i8* %7129, i64 4
  %7140 = bitcast i8* %7139 to float*
  store float 0.000000e+00, float* %7140, align 1, !tbaa !2452
  %7141 = getelementptr inbounds i8, i8* %7129, i64 8
  %7142 = bitcast i8* %7141 to float*
  store float 0.000000e+00, float* %7142, align 1, !tbaa !2452
  %7143 = getelementptr inbounds i8, i8* %7129, i64 12
  %7144 = bitcast i8* %7143 to float*
  store float 0.000000e+00, float* %7144, align 1, !tbaa !2452
  %7145 = load i64, i64* %RBP
  %7146 = sub i64 %7145, 40
  %7147 = load i64, i64* %PC
  %7148 = add i64 %7147, 4
  store i64 %7148, i64* %PC
  %7149 = inttoptr i64 %7146 to i64*
  %7150 = load i64, i64* %7149
  store i64 %7150, i64* %RAX, align 8, !tbaa !2428
  %7151 = load i64, i64* %RBP
  %7152 = sub i64 %7151, 24
  %7153 = load i64, i64* %PC
  %7154 = add i64 %7153, 3
  store i64 %7154, i64* %PC
  %7155 = inttoptr i64 %7152 to i32*
  %7156 = load i32, i32* %7155
  %7157 = zext i32 %7156 to i64
  store i64 %7157, i64* %RDX, align 8, !tbaa !2428
  %7158 = load i64, i64* %RDX
  %7159 = load i64, i64* %RBP
  %7160 = sub i64 %7159, 44
  %7161 = load i64, i64* %PC
  %7162 = add i64 %7161, 4
  store i64 %7162, i64* %PC
  %7163 = inttoptr i64 %7160 to i32*
  %7164 = load i32, i32* %7163
  %7165 = shl i64 %7158, 32
  %7166 = ashr exact i64 %7165, 32
  %7167 = sext i32 %7164 to i64
  %7168 = mul nsw i64 %7167, %7166
  %7169 = trunc i64 %7168 to i32
  %7170 = and i64 %7168, 4294967295
  store i64 %7170, i64* %RDX, align 8, !tbaa !2428
  %7171 = shl i64 %7168, 32
  %7172 = ashr exact i64 %7171, 32
  %7173 = icmp ne i64 %7172, %7168
  %7174 = zext i1 %7173 to i8
  %7175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7174, i8* %7175, align 1, !tbaa !2432
  %7176 = and i32 %7169, 255
  %7177 = call i32 @llvm.ctpop.i32(i32 %7176) #16
  %7178 = trunc i32 %7177 to i8
  %7179 = and i8 %7178, 1
  %7180 = xor i8 %7179, 1
  %7181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7180, i8* %7181, align 1, !tbaa !2446
  %7182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7182, align 1, !tbaa !2447
  %7183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7183, align 1, !tbaa !2448
  %7184 = lshr i32 %7169, 31
  %7185 = trunc i32 %7184 to i8
  %7186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7185, i8* %7186, align 1, !tbaa !2449
  %7187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7174, i8* %7187, align 1, !tbaa !2450
  %7188 = load i64, i64* %RDX
  %7189 = load i64, i64* %RBP
  %7190 = sub i64 %7189, 48
  %7191 = load i64, i64* %PC
  %7192 = add i64 %7191, 3
  store i64 %7192, i64* %PC
  %7193 = trunc i64 %7188 to i32
  %7194 = inttoptr i64 %7190 to i32*
  %7195 = load i32, i32* %7194
  %7196 = add i32 %7195, %7193
  %7197 = zext i32 %7196 to i64
  store i64 %7197, i64* %RDX, align 8, !tbaa !2428
  %7198 = icmp ult i32 %7196, %7193
  %7199 = icmp ult i32 %7196, %7195
  %7200 = or i1 %7198, %7199
  %7201 = zext i1 %7200 to i8
  %7202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7201, i8* %7202, align 1, !tbaa !2432
  %7203 = and i32 %7196, 255
  %7204 = call i32 @llvm.ctpop.i32(i32 %7203) #16
  %7205 = trunc i32 %7204 to i8
  %7206 = and i8 %7205, 1
  %7207 = xor i8 %7206, 1
  %7208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7207, i8* %7208, align 1, !tbaa !2446
  %7209 = xor i32 %7195, %7193
  %7210 = xor i32 %7209, %7196
  %7211 = lshr i32 %7210, 4
  %7212 = trunc i32 %7211 to i8
  %7213 = and i8 %7212, 1
  %7214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7213, i8* %7214, align 1, !tbaa !2447
  %7215 = icmp eq i32 %7196, 0
  %7216 = zext i1 %7215 to i8
  %7217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7216, i8* %7217, align 1, !tbaa !2448
  %7218 = lshr i32 %7196, 31
  %7219 = trunc i32 %7218 to i8
  %7220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7219, i8* %7220, align 1, !tbaa !2449
  %7221 = lshr i32 %7193, 31
  %7222 = lshr i32 %7195, 31
  %7223 = xor i32 %7218, %7221
  %7224 = xor i32 %7218, %7222
  %7225 = add nuw nsw i32 %7223, %7224
  %7226 = icmp eq i32 %7225, 2
  %7227 = zext i1 %7226 to i8
  %7228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7227, i8* %7228, align 1, !tbaa !2450
  %7229 = load i32, i32* %EDX
  %7230 = zext i32 %7229 to i64
  %7231 = load i64, i64* %PC
  %7232 = add i64 %7231, 3
  store i64 %7232, i64* %PC
  %7233 = shl i64 %7230, 32
  %7234 = ashr exact i64 %7233, 32
  store i64 %7234, i64* %RCX, align 8, !tbaa !2428
  %7235 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7236 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7237 = load i64, i64* %RAX
  %7238 = load i64, i64* %RCX
  %7239 = mul i64 %7238, 4
  %7240 = add i64 %7239, %7237
  %7241 = load i64, i64* %PC
  %7242 = add i64 %7241, 5
  store i64 %7242, i64* %PC
  %7243 = bitcast i8* %7236 to <2 x float>*
  %7244 = load <2 x float>, <2 x float>* %7243, align 1
  %7245 = getelementptr inbounds i8, i8* %7236, i64 8
  %7246 = bitcast i8* %7245 to <2 x i32>*
  %7247 = load <2 x i32>, <2 x i32>* %7246, align 1
  %7248 = inttoptr i64 %7240 to float*
  %7249 = load float, float* %7248
  %7250 = extractelement <2 x float> %7244, i32 0
  %7251 = fmul float %7250, %7249
  %7252 = bitcast i8* %7235 to float*
  store float %7251, float* %7252, align 1, !tbaa !2452
  %7253 = bitcast <2 x float> %7244 to <2 x i32>
  %7254 = extractelement <2 x i32> %7253, i32 1
  %7255 = getelementptr inbounds i8, i8* %7235, i64 4
  %7256 = bitcast i8* %7255 to i32*
  store i32 %7254, i32* %7256, align 1, !tbaa !2452
  %7257 = extractelement <2 x i32> %7247, i32 0
  %7258 = getelementptr inbounds i8, i8* %7235, i64 8
  %7259 = bitcast i8* %7258 to i32*
  store i32 %7257, i32* %7259, align 1, !tbaa !2452
  %7260 = extractelement <2 x i32> %7247, i32 1
  %7261 = getelementptr inbounds i8, i8* %7235, i64 12
  %7262 = bitcast i8* %7261 to i32*
  store i32 %7260, i32* %7262, align 1, !tbaa !2452
  %7263 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7264 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7265 = bitcast %union.vec128_t* %XMM1 to i8*
  %7266 = load i64, i64* %PC
  %7267 = add i64 %7266, 4
  store i64 %7267, i64* %PC
  %7268 = bitcast i8* %7264 to <2 x float>*
  %7269 = load <2 x float>, <2 x float>* %7268, align 1
  %7270 = getelementptr inbounds i8, i8* %7264, i64 8
  %7271 = bitcast i8* %7270 to <2 x i32>*
  %7272 = load <2 x i32>, <2 x i32>* %7271, align 1
  %7273 = bitcast i8* %7265 to <2 x float>*
  %7274 = load <2 x float>, <2 x float>* %7273, align 1
  %7275 = extractelement <2 x float> %7269, i32 0
  %7276 = extractelement <2 x float> %7274, i32 0
  %7277 = fadd float %7275, %7276
  %7278 = bitcast i8* %7263 to float*
  store float %7277, float* %7278, align 1, !tbaa !2452
  %7279 = bitcast <2 x float> %7269 to <2 x i32>
  %7280 = extractelement <2 x i32> %7279, i32 1
  %7281 = getelementptr inbounds i8, i8* %7263, i64 4
  %7282 = bitcast i8* %7281 to i32*
  store i32 %7280, i32* %7282, align 1, !tbaa !2452
  %7283 = extractelement <2 x i32> %7272, i32 0
  %7284 = getelementptr inbounds i8, i8* %7263, i64 8
  %7285 = bitcast i8* %7284 to i32*
  store i32 %7283, i32* %7285, align 1, !tbaa !2452
  %7286 = extractelement <2 x i32> %7272, i32 1
  %7287 = getelementptr inbounds i8, i8* %7263, i64 12
  %7288 = bitcast i8* %7287 to i32*
  store i32 %7286, i32* %7288, align 1, !tbaa !2452
  %7289 = load i64, i64* %RBP
  %7290 = sub i64 %7289, 16
  %7291 = load i64, i64* %PC
  %7292 = add i64 %7291, 4
  store i64 %7292, i64* %PC
  %7293 = inttoptr i64 %7290 to i64*
  %7294 = load i64, i64* %7293
  store i64 %7294, i64* %RAX, align 8, !tbaa !2428
  %7295 = load i64, i64* %RBP
  %7296 = sub i64 %7295, 48
  %7297 = load i64, i64* %PC
  %7298 = add i64 %7297, 4
  store i64 %7298, i64* %PC
  %7299 = inttoptr i64 %7296 to i32*
  %7300 = load i32, i32* %7299
  %7301 = sext i32 %7300 to i64
  store i64 %7301, i64* %RCX, align 8, !tbaa !2428
  %7302 = load i64, i64* %RAX
  %7303 = load i64, i64* %RCX
  %7304 = mul i64 %7303, 4
  %7305 = add i64 %7304, %7302
  %7306 = bitcast %union.vec128_t* %XMM0 to i8*
  %7307 = load i64, i64* %PC
  %7308 = add i64 %7307, 5
  store i64 %7308, i64* %PC
  %7309 = bitcast i8* %7306 to <2 x float>*
  %7310 = load <2 x float>, <2 x float>* %7309, align 1
  %7311 = extractelement <2 x float> %7310, i32 0
  %7312 = inttoptr i64 %7305 to float*
  store float %7311, float* %7312
  %7313 = load i64, i64* %RBP
  %7314 = sub i64 %7313, 48
  %7315 = load i64, i64* %PC
  %7316 = add i64 %7315, 3
  store i64 %7316, i64* %PC
  %7317 = inttoptr i64 %7314 to i32*
  %7318 = load i32, i32* %7317
  %7319 = zext i32 %7318 to i64
  store i64 %7319, i64* %RAX, align 8, !tbaa !2428
  %7320 = load i64, i64* %RAX
  %7321 = load i64, i64* %PC
  %7322 = add i64 %7321, 3
  store i64 %7322, i64* %PC
  %7323 = trunc i64 %7320 to i32
  %7324 = add i32 1, %7323
  %7325 = zext i32 %7324 to i64
  store i64 %7325, i64* %RAX, align 8, !tbaa !2428
  %7326 = icmp ult i32 %7324, %7323
  %7327 = icmp ult i32 %7324, 1
  %7328 = or i1 %7326, %7327
  %7329 = zext i1 %7328 to i8
  %7330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7329, i8* %7330, align 1, !tbaa !2432
  %7331 = and i32 %7324, 255
  %7332 = call i32 @llvm.ctpop.i32(i32 %7331) #16
  %7333 = trunc i32 %7332 to i8
  %7334 = and i8 %7333, 1
  %7335 = xor i8 %7334, 1
  %7336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7335, i8* %7336, align 1, !tbaa !2446
  %7337 = xor i64 1, %7320
  %7338 = trunc i64 %7337 to i32
  %7339 = xor i32 %7338, %7324
  %7340 = lshr i32 %7339, 4
  %7341 = trunc i32 %7340 to i8
  %7342 = and i8 %7341, 1
  %7343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7342, i8* %7343, align 1, !tbaa !2447
  %7344 = icmp eq i32 %7324, 0
  %7345 = zext i1 %7344 to i8
  %7346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7345, i8* %7346, align 1, !tbaa !2448
  %7347 = lshr i32 %7324, 31
  %7348 = trunc i32 %7347 to i8
  %7349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7348, i8* %7349, align 1, !tbaa !2449
  %7350 = lshr i32 %7323, 31
  %7351 = xor i32 %7347, %7350
  %7352 = add nuw nsw i32 %7351, %7347
  %7353 = icmp eq i32 %7352, 2
  %7354 = zext i1 %7353 to i8
  %7355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7354, i8* %7355, align 1, !tbaa !2450
  %7356 = load i64, i64* %RBP
  %7357 = sub i64 %7356, 48
  %7358 = load i32, i32* %EAX
  %7359 = zext i32 %7358 to i64
  %7360 = load i64, i64* %PC
  %7361 = add i64 %7360, 3
  store i64 %7361, i64* %PC
  %7362 = inttoptr i64 %7357 to i32*
  store i32 %7358, i32* %7362
  %7363 = load i64, i64* %PC
  %7364 = sub i64 %7363, 86
  %7365 = load i64, i64* %PC
  %7366 = add i64 %7365, 5
  store i64 %7366, i64* %PC
  %7367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7364, i64* %7367, align 8, !tbaa !2428
  br label %block_402009

block_40214a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %7368 = load i64, i64* %RBP
  %7369 = sub i64 %7368, 44
  %7370 = load i64, i64* %PC
  %7371 = add i64 %7370, 3
  store i64 %7371, i64* %PC
  %7372 = inttoptr i64 %7369 to i32*
  %7373 = load i32, i32* %7372
  %7374 = zext i32 %7373 to i64
  store i64 %7374, i64* %RAX, align 8, !tbaa !2428
  %7375 = load i64, i64* %RAX
  %7376 = load i64, i64* %PC
  %7377 = add i64 %7376, 3
  store i64 %7377, i64* %PC
  %7378 = trunc i64 %7375 to i32
  %7379 = sub i32 %7378, 1
  %7380 = zext i32 %7379 to i64
  store i64 %7380, i64* %RAX, align 8, !tbaa !2428
  %7381 = icmp ult i32 %7378, 1
  %7382 = zext i1 %7381 to i8
  %7383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7382, i8* %7383, align 1, !tbaa !2432
  %7384 = and i32 %7379, 255
  %7385 = call i32 @llvm.ctpop.i32(i32 %7384) #16
  %7386 = trunc i32 %7385 to i8
  %7387 = and i8 %7386, 1
  %7388 = xor i8 %7387, 1
  %7389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7388, i8* %7389, align 1, !tbaa !2446
  %7390 = xor i64 1, %7375
  %7391 = trunc i64 %7390 to i32
  %7392 = xor i32 %7391, %7379
  %7393 = lshr i32 %7392, 4
  %7394 = trunc i32 %7393 to i8
  %7395 = and i8 %7394, 1
  %7396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7395, i8* %7396, align 1, !tbaa !2447
  %7397 = icmp eq i32 %7379, 0
  %7398 = zext i1 %7397 to i8
  %7399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7398, i8* %7399, align 1, !tbaa !2448
  %7400 = lshr i32 %7379, 31
  %7401 = trunc i32 %7400 to i8
  %7402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7401, i8* %7402, align 1, !tbaa !2449
  %7403 = lshr i32 %7378, 31
  %7404 = xor i32 %7400, %7403
  %7405 = add nuw nsw i32 %7404, %7403
  %7406 = icmp eq i32 %7405, 2
  %7407 = zext i1 %7406 to i8
  %7408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7407, i8* %7408, align 1, !tbaa !2450
  %7409 = load i64, i64* %RBP
  %7410 = sub i64 %7409, 44
  %7411 = load i32, i32* %EAX
  %7412 = zext i32 %7411 to i64
  %7413 = load i64, i64* %PC
  %7414 = add i64 %7413, 3
  store i64 %7414, i64* %PC
  %7415 = inttoptr i64 %7410 to i32*
  store i32 %7411, i32* %7415
  %7416 = load i64, i64* %RBP
  %7417 = sub i64 %7416, 48
  %7418 = load i64, i64* %PC
  %7419 = add i64 %7418, 7
  store i64 %7419, i64* %PC
  %7420 = inttoptr i64 %7417 to i32*
  store i32 0, i32* %7420
  br label %block_40215a

block_402289:                                     ; preds = %block_40227d
  %7421 = load i64, i64* %RBP
  %7422 = sub i64 %7421, 16
  %7423 = load i64, i64* %PC
  %7424 = add i64 %7423, 4
  store i64 %7424, i64* %PC
  %7425 = inttoptr i64 %7422 to i64*
  %7426 = load i64, i64* %7425
  store i64 %7426, i64* %RAX, align 8, !tbaa !2428
  %7427 = load i64, i64* %RBP
  %7428 = sub i64 %7427, 48
  %7429 = load i64, i64* %PC
  %7430 = add i64 %7429, 4
  store i64 %7430, i64* %PC
  %7431 = inttoptr i64 %7428 to i32*
  %7432 = load i32, i32* %7431
  %7433 = sext i32 %7432 to i64
  store i64 %7433, i64* %RCX, align 8, !tbaa !2428
  %7434 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7435 = load i64, i64* %RAX
  %7436 = load i64, i64* %RCX
  %7437 = mul i64 %7436, 4
  %7438 = add i64 %7437, %7435
  %7439 = load i64, i64* %PC
  %7440 = add i64 %7439, 5
  store i64 %7440, i64* %PC
  %7441 = inttoptr i64 %7438 to float*
  %7442 = load float, float* %7441
  %7443 = bitcast i8* %7434 to float*
  store float %7442, float* %7443, align 1, !tbaa !2452
  %7444 = getelementptr inbounds i8, i8* %7434, i64 4
  %7445 = bitcast i8* %7444 to float*
  store float 0.000000e+00, float* %7445, align 1, !tbaa !2452
  %7446 = getelementptr inbounds i8, i8* %7434, i64 8
  %7447 = bitcast i8* %7446 to float*
  store float 0.000000e+00, float* %7447, align 1, !tbaa !2452
  %7448 = getelementptr inbounds i8, i8* %7434, i64 12
  %7449 = bitcast i8* %7448 to float*
  store float 0.000000e+00, float* %7449, align 1, !tbaa !2452
  %7450 = load i64, i64* %RBP
  %7451 = sub i64 %7450, 32
  %7452 = load i64, i64* %PC
  %7453 = add i64 %7452, 4
  store i64 %7453, i64* %PC
  %7454 = inttoptr i64 %7451 to i64*
  %7455 = load i64, i64* %7454
  store i64 %7455, i64* %RAX, align 8, !tbaa !2428
  %7456 = load i64, i64* %RBP
  %7457 = sub i64 %7456, 44
  %7458 = load i64, i64* %PC
  %7459 = add i64 %7458, 3
  store i64 %7459, i64* %PC
  %7460 = inttoptr i64 %7457 to i32*
  %7461 = load i32, i32* %7460
  %7462 = zext i32 %7461 to i64
  store i64 %7462, i64* %RDX, align 8, !tbaa !2428
  %7463 = load i64, i64* %RDX
  %7464 = load i64, i64* %PC
  %7465 = add i64 %7464, 3
  store i64 %7465, i64* %PC
  %7466 = trunc i64 %7463 to i32
  %7467 = sub i32 %7466, 7
  %7468 = zext i32 %7467 to i64
  store i64 %7468, i64* %RDX, align 8, !tbaa !2428
  %7469 = icmp ult i32 %7466, 7
  %7470 = zext i1 %7469 to i8
  %7471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7470, i8* %7471, align 1, !tbaa !2432
  %7472 = and i32 %7467, 255
  %7473 = call i32 @llvm.ctpop.i32(i32 %7472) #16
  %7474 = trunc i32 %7473 to i8
  %7475 = and i8 %7474, 1
  %7476 = xor i8 %7475, 1
  %7477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7476, i8* %7477, align 1, !tbaa !2446
  %7478 = xor i64 7, %7463
  %7479 = trunc i64 %7478 to i32
  %7480 = xor i32 %7479, %7467
  %7481 = lshr i32 %7480, 4
  %7482 = trunc i32 %7481 to i8
  %7483 = and i8 %7482, 1
  %7484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7483, i8* %7484, align 1, !tbaa !2447
  %7485 = icmp eq i32 %7467, 0
  %7486 = zext i1 %7485 to i8
  %7487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7486, i8* %7487, align 1, !tbaa !2448
  %7488 = lshr i32 %7467, 31
  %7489 = trunc i32 %7488 to i8
  %7490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7489, i8* %7490, align 1, !tbaa !2449
  %7491 = lshr i32 %7466, 31
  %7492 = xor i32 %7488, %7491
  %7493 = add nuw nsw i32 %7492, %7491
  %7494 = icmp eq i32 %7493, 2
  %7495 = zext i1 %7494 to i8
  %7496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7495, i8* %7496, align 1, !tbaa !2450
  %7497 = load i32, i32* %EDX
  %7498 = zext i32 %7497 to i64
  %7499 = load i64, i64* %PC
  %7500 = add i64 %7499, 3
  store i64 %7500, i64* %PC
  %7501 = shl i64 %7498, 32
  %7502 = ashr exact i64 %7501, 32
  store i64 %7502, i64* %RCX, align 8, !tbaa !2428
  %7503 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7504 = load i64, i64* %RAX
  %7505 = load i64, i64* %RCX
  %7506 = mul i64 %7505, 4
  %7507 = add i64 %7506, %7504
  %7508 = load i64, i64* %PC
  %7509 = add i64 %7508, 5
  store i64 %7509, i64* %PC
  %7510 = inttoptr i64 %7507 to float*
  %7511 = load float, float* %7510
  %7512 = bitcast i8* %7503 to float*
  store float %7511, float* %7512, align 1, !tbaa !2452
  %7513 = getelementptr inbounds i8, i8* %7503, i64 4
  %7514 = bitcast i8* %7513 to float*
  store float 0.000000e+00, float* %7514, align 1, !tbaa !2452
  %7515 = getelementptr inbounds i8, i8* %7503, i64 8
  %7516 = bitcast i8* %7515 to float*
  store float 0.000000e+00, float* %7516, align 1, !tbaa !2452
  %7517 = getelementptr inbounds i8, i8* %7503, i64 12
  %7518 = bitcast i8* %7517 to float*
  store float 0.000000e+00, float* %7518, align 1, !tbaa !2452
  %7519 = load i64, i64* %RBP
  %7520 = sub i64 %7519, 40
  %7521 = load i64, i64* %PC
  %7522 = add i64 %7521, 4
  store i64 %7522, i64* %PC
  %7523 = inttoptr i64 %7520 to i64*
  %7524 = load i64, i64* %7523
  store i64 %7524, i64* %RAX, align 8, !tbaa !2428
  %7525 = load i64, i64* %RBP
  %7526 = sub i64 %7525, 24
  %7527 = load i64, i64* %PC
  %7528 = add i64 %7527, 3
  store i64 %7528, i64* %PC
  %7529 = inttoptr i64 %7526 to i32*
  %7530 = load i32, i32* %7529
  %7531 = zext i32 %7530 to i64
  store i64 %7531, i64* %RDX, align 8, !tbaa !2428
  %7532 = load i64, i64* %RBP
  %7533 = sub i64 %7532, 44
  %7534 = load i64, i64* %PC
  %7535 = add i64 %7534, 3
  store i64 %7535, i64* %PC
  %7536 = inttoptr i64 %7533 to i32*
  %7537 = load i32, i32* %7536
  %7538 = zext i32 %7537 to i64
  store i64 %7538, i64* %RSI, align 8, !tbaa !2428
  %7539 = load i64, i64* %RSI
  %7540 = load i64, i64* %PC
  %7541 = add i64 %7540, 3
  store i64 %7541, i64* %PC
  %7542 = trunc i64 %7539 to i32
  %7543 = sub i32 %7542, 7
  %7544 = zext i32 %7543 to i64
  store i64 %7544, i64* %RSI, align 8, !tbaa !2428
  %7545 = icmp ult i32 %7542, 7
  %7546 = zext i1 %7545 to i8
  %7547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7546, i8* %7547, align 1, !tbaa !2432
  %7548 = and i32 %7543, 255
  %7549 = call i32 @llvm.ctpop.i32(i32 %7548) #16
  %7550 = trunc i32 %7549 to i8
  %7551 = and i8 %7550, 1
  %7552 = xor i8 %7551, 1
  %7553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7552, i8* %7553, align 1, !tbaa !2446
  %7554 = xor i64 7, %7539
  %7555 = trunc i64 %7554 to i32
  %7556 = xor i32 %7555, %7543
  %7557 = lshr i32 %7556, 4
  %7558 = trunc i32 %7557 to i8
  %7559 = and i8 %7558, 1
  %7560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7559, i8* %7560, align 1, !tbaa !2447
  %7561 = icmp eq i32 %7543, 0
  %7562 = zext i1 %7561 to i8
  %7563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7562, i8* %7563, align 1, !tbaa !2448
  %7564 = lshr i32 %7543, 31
  %7565 = trunc i32 %7564 to i8
  %7566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7565, i8* %7566, align 1, !tbaa !2449
  %7567 = lshr i32 %7542, 31
  %7568 = xor i32 %7564, %7567
  %7569 = add nuw nsw i32 %7568, %7567
  %7570 = icmp eq i32 %7569, 2
  %7571 = zext i1 %7570 to i8
  %7572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7571, i8* %7572, align 1, !tbaa !2450
  %7573 = load i64, i64* %RDX
  %7574 = load i32, i32* %ESI
  %7575 = zext i32 %7574 to i64
  %7576 = load i64, i64* %PC
  %7577 = add i64 %7576, 3
  store i64 %7577, i64* %PC
  %7578 = shl i64 %7573, 32
  %7579 = ashr exact i64 %7578, 32
  %7580 = shl i64 %7575, 32
  %7581 = ashr exact i64 %7580, 32
  %7582 = mul nsw i64 %7581, %7579
  %7583 = trunc i64 %7582 to i32
  %7584 = and i64 %7582, 4294967295
  store i64 %7584, i64* %RDX, align 8, !tbaa !2428
  %7585 = shl i64 %7582, 32
  %7586 = ashr exact i64 %7585, 32
  %7587 = icmp ne i64 %7586, %7582
  %7588 = zext i1 %7587 to i8
  %7589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7588, i8* %7589, align 1, !tbaa !2432
  %7590 = and i32 %7583, 255
  %7591 = call i32 @llvm.ctpop.i32(i32 %7590) #16
  %7592 = trunc i32 %7591 to i8
  %7593 = and i8 %7592, 1
  %7594 = xor i8 %7593, 1
  %7595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7594, i8* %7595, align 1, !tbaa !2446
  %7596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7596, align 1, !tbaa !2447
  %7597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7597, align 1, !tbaa !2448
  %7598 = lshr i32 %7583, 31
  %7599 = trunc i32 %7598 to i8
  %7600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7599, i8* %7600, align 1, !tbaa !2449
  %7601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7588, i8* %7601, align 1, !tbaa !2450
  %7602 = load i64, i64* %RDX
  %7603 = load i64, i64* %RBP
  %7604 = sub i64 %7603, 48
  %7605 = load i64, i64* %PC
  %7606 = add i64 %7605, 3
  store i64 %7606, i64* %PC
  %7607 = trunc i64 %7602 to i32
  %7608 = inttoptr i64 %7604 to i32*
  %7609 = load i32, i32* %7608
  %7610 = add i32 %7609, %7607
  %7611 = zext i32 %7610 to i64
  store i64 %7611, i64* %RDX, align 8, !tbaa !2428
  %7612 = icmp ult i32 %7610, %7607
  %7613 = icmp ult i32 %7610, %7609
  %7614 = or i1 %7612, %7613
  %7615 = zext i1 %7614 to i8
  %7616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7615, i8* %7616, align 1, !tbaa !2432
  %7617 = and i32 %7610, 255
  %7618 = call i32 @llvm.ctpop.i32(i32 %7617) #16
  %7619 = trunc i32 %7618 to i8
  %7620 = and i8 %7619, 1
  %7621 = xor i8 %7620, 1
  %7622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7621, i8* %7622, align 1, !tbaa !2446
  %7623 = xor i32 %7609, %7607
  %7624 = xor i32 %7623, %7610
  %7625 = lshr i32 %7624, 4
  %7626 = trunc i32 %7625 to i8
  %7627 = and i8 %7626, 1
  %7628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7627, i8* %7628, align 1, !tbaa !2447
  %7629 = icmp eq i32 %7610, 0
  %7630 = zext i1 %7629 to i8
  %7631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7630, i8* %7631, align 1, !tbaa !2448
  %7632 = lshr i32 %7610, 31
  %7633 = trunc i32 %7632 to i8
  %7634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7633, i8* %7634, align 1, !tbaa !2449
  %7635 = lshr i32 %7607, 31
  %7636 = lshr i32 %7609, 31
  %7637 = xor i32 %7632, %7635
  %7638 = xor i32 %7632, %7636
  %7639 = add nuw nsw i32 %7637, %7638
  %7640 = icmp eq i32 %7639, 2
  %7641 = zext i1 %7640 to i8
  %7642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7641, i8* %7642, align 1, !tbaa !2450
  %7643 = load i32, i32* %EDX
  %7644 = zext i32 %7643 to i64
  %7645 = load i64, i64* %PC
  %7646 = add i64 %7645, 3
  store i64 %7646, i64* %PC
  %7647 = shl i64 %7644, 32
  %7648 = ashr exact i64 %7647, 32
  store i64 %7648, i64* %RCX, align 8, !tbaa !2428
  %7649 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7650 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7651 = load i64, i64* %RAX
  %7652 = load i64, i64* %RCX
  %7653 = mul i64 %7652, 4
  %7654 = add i64 %7653, %7651
  %7655 = load i64, i64* %PC
  %7656 = add i64 %7655, 5
  store i64 %7656, i64* %PC
  %7657 = bitcast i8* %7650 to <2 x float>*
  %7658 = load <2 x float>, <2 x float>* %7657, align 1
  %7659 = getelementptr inbounds i8, i8* %7650, i64 8
  %7660 = bitcast i8* %7659 to <2 x i32>*
  %7661 = load <2 x i32>, <2 x i32>* %7660, align 1
  %7662 = inttoptr i64 %7654 to float*
  %7663 = load float, float* %7662
  %7664 = extractelement <2 x float> %7658, i32 0
  %7665 = fmul float %7664, %7663
  %7666 = bitcast i8* %7649 to float*
  store float %7665, float* %7666, align 1, !tbaa !2452
  %7667 = bitcast <2 x float> %7658 to <2 x i32>
  %7668 = extractelement <2 x i32> %7667, i32 1
  %7669 = getelementptr inbounds i8, i8* %7649, i64 4
  %7670 = bitcast i8* %7669 to i32*
  store i32 %7668, i32* %7670, align 1, !tbaa !2452
  %7671 = extractelement <2 x i32> %7661, i32 0
  %7672 = getelementptr inbounds i8, i8* %7649, i64 8
  %7673 = bitcast i8* %7672 to i32*
  store i32 %7671, i32* %7673, align 1, !tbaa !2452
  %7674 = extractelement <2 x i32> %7661, i32 1
  %7675 = getelementptr inbounds i8, i8* %7649, i64 12
  %7676 = bitcast i8* %7675 to i32*
  store i32 %7674, i32* %7676, align 1, !tbaa !2452
  %7677 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7678 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7679 = bitcast %union.vec128_t* %XMM1 to i8*
  %7680 = load i64, i64* %PC
  %7681 = add i64 %7680, 4
  store i64 %7681, i64* %PC
  %7682 = bitcast i8* %7678 to <2 x float>*
  %7683 = load <2 x float>, <2 x float>* %7682, align 1
  %7684 = getelementptr inbounds i8, i8* %7678, i64 8
  %7685 = bitcast i8* %7684 to <2 x i32>*
  %7686 = load <2 x i32>, <2 x i32>* %7685, align 1
  %7687 = bitcast i8* %7679 to <2 x float>*
  %7688 = load <2 x float>, <2 x float>* %7687, align 1
  %7689 = extractelement <2 x float> %7683, i32 0
  %7690 = extractelement <2 x float> %7688, i32 0
  %7691 = fadd float %7689, %7690
  %7692 = bitcast i8* %7677 to float*
  store float %7691, float* %7692, align 1, !tbaa !2452
  %7693 = bitcast <2 x float> %7683 to <2 x i32>
  %7694 = extractelement <2 x i32> %7693, i32 1
  %7695 = getelementptr inbounds i8, i8* %7677, i64 4
  %7696 = bitcast i8* %7695 to i32*
  store i32 %7694, i32* %7696, align 1, !tbaa !2452
  %7697 = extractelement <2 x i32> %7686, i32 0
  %7698 = getelementptr inbounds i8, i8* %7677, i64 8
  %7699 = bitcast i8* %7698 to i32*
  store i32 %7697, i32* %7699, align 1, !tbaa !2452
  %7700 = extractelement <2 x i32> %7686, i32 1
  %7701 = getelementptr inbounds i8, i8* %7677, i64 12
  %7702 = bitcast i8* %7701 to i32*
  store i32 %7700, i32* %7702, align 1, !tbaa !2452
  %7703 = load i64, i64* %RBP
  %7704 = sub i64 %7703, 32
  %7705 = load i64, i64* %PC
  %7706 = add i64 %7705, 4
  store i64 %7706, i64* %PC
  %7707 = inttoptr i64 %7704 to i64*
  %7708 = load i64, i64* %7707
  store i64 %7708, i64* %RAX, align 8, !tbaa !2428
  %7709 = load i64, i64* %RBP
  %7710 = sub i64 %7709, 44
  %7711 = load i64, i64* %PC
  %7712 = add i64 %7711, 3
  store i64 %7712, i64* %PC
  %7713 = inttoptr i64 %7710 to i32*
  %7714 = load i32, i32* %7713
  %7715 = zext i32 %7714 to i64
  store i64 %7715, i64* %RDX, align 8, !tbaa !2428
  %7716 = load i64, i64* %RDX
  %7717 = load i64, i64* %PC
  %7718 = add i64 %7717, 3
  store i64 %7718, i64* %PC
  %7719 = trunc i64 %7716 to i32
  %7720 = sub i32 %7719, 6
  %7721 = zext i32 %7720 to i64
  store i64 %7721, i64* %RDX, align 8, !tbaa !2428
  %7722 = icmp ult i32 %7719, 6
  %7723 = zext i1 %7722 to i8
  %7724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7723, i8* %7724, align 1, !tbaa !2432
  %7725 = and i32 %7720, 255
  %7726 = call i32 @llvm.ctpop.i32(i32 %7725) #16
  %7727 = trunc i32 %7726 to i8
  %7728 = and i8 %7727, 1
  %7729 = xor i8 %7728, 1
  %7730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7729, i8* %7730, align 1, !tbaa !2446
  %7731 = xor i64 6, %7716
  %7732 = trunc i64 %7731 to i32
  %7733 = xor i32 %7732, %7720
  %7734 = lshr i32 %7733, 4
  %7735 = trunc i32 %7734 to i8
  %7736 = and i8 %7735, 1
  %7737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7736, i8* %7737, align 1, !tbaa !2447
  %7738 = icmp eq i32 %7720, 0
  %7739 = zext i1 %7738 to i8
  %7740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7739, i8* %7740, align 1, !tbaa !2448
  %7741 = lshr i32 %7720, 31
  %7742 = trunc i32 %7741 to i8
  %7743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7742, i8* %7743, align 1, !tbaa !2449
  %7744 = lshr i32 %7719, 31
  %7745 = xor i32 %7741, %7744
  %7746 = add nuw nsw i32 %7745, %7744
  %7747 = icmp eq i32 %7746, 2
  %7748 = zext i1 %7747 to i8
  %7749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7748, i8* %7749, align 1, !tbaa !2450
  %7750 = load i32, i32* %EDX
  %7751 = zext i32 %7750 to i64
  %7752 = load i64, i64* %PC
  %7753 = add i64 %7752, 3
  store i64 %7753, i64* %PC
  %7754 = shl i64 %7751, 32
  %7755 = ashr exact i64 %7754, 32
  store i64 %7755, i64* %RCX, align 8, !tbaa !2428
  %7756 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7757 = load i64, i64* %RAX
  %7758 = load i64, i64* %RCX
  %7759 = mul i64 %7758, 4
  %7760 = add i64 %7759, %7757
  %7761 = load i64, i64* %PC
  %7762 = add i64 %7761, 5
  store i64 %7762, i64* %PC
  %7763 = inttoptr i64 %7760 to float*
  %7764 = load float, float* %7763
  %7765 = bitcast i8* %7756 to float*
  store float %7764, float* %7765, align 1, !tbaa !2452
  %7766 = getelementptr inbounds i8, i8* %7756, i64 4
  %7767 = bitcast i8* %7766 to float*
  store float 0.000000e+00, float* %7767, align 1, !tbaa !2452
  %7768 = getelementptr inbounds i8, i8* %7756, i64 8
  %7769 = bitcast i8* %7768 to float*
  store float 0.000000e+00, float* %7769, align 1, !tbaa !2452
  %7770 = getelementptr inbounds i8, i8* %7756, i64 12
  %7771 = bitcast i8* %7770 to float*
  store float 0.000000e+00, float* %7771, align 1, !tbaa !2452
  %7772 = load i64, i64* %RBP
  %7773 = sub i64 %7772, 40
  %7774 = load i64, i64* %PC
  %7775 = add i64 %7774, 4
  store i64 %7775, i64* %PC
  %7776 = inttoptr i64 %7773 to i64*
  %7777 = load i64, i64* %7776
  store i64 %7777, i64* %RAX, align 8, !tbaa !2428
  %7778 = load i64, i64* %RBP
  %7779 = sub i64 %7778, 24
  %7780 = load i64, i64* %PC
  %7781 = add i64 %7780, 3
  store i64 %7781, i64* %PC
  %7782 = inttoptr i64 %7779 to i32*
  %7783 = load i32, i32* %7782
  %7784 = zext i32 %7783 to i64
  store i64 %7784, i64* %RDX, align 8, !tbaa !2428
  %7785 = load i64, i64* %RBP
  %7786 = sub i64 %7785, 44
  %7787 = load i64, i64* %PC
  %7788 = add i64 %7787, 3
  store i64 %7788, i64* %PC
  %7789 = inttoptr i64 %7786 to i32*
  %7790 = load i32, i32* %7789
  %7791 = zext i32 %7790 to i64
  store i64 %7791, i64* %RSI, align 8, !tbaa !2428
  %7792 = load i64, i64* %RSI
  %7793 = load i64, i64* %PC
  %7794 = add i64 %7793, 3
  store i64 %7794, i64* %PC
  %7795 = trunc i64 %7792 to i32
  %7796 = sub i32 %7795, 6
  %7797 = zext i32 %7796 to i64
  store i64 %7797, i64* %RSI, align 8, !tbaa !2428
  %7798 = icmp ult i32 %7795, 6
  %7799 = zext i1 %7798 to i8
  %7800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7799, i8* %7800, align 1, !tbaa !2432
  %7801 = and i32 %7796, 255
  %7802 = call i32 @llvm.ctpop.i32(i32 %7801) #16
  %7803 = trunc i32 %7802 to i8
  %7804 = and i8 %7803, 1
  %7805 = xor i8 %7804, 1
  %7806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7805, i8* %7806, align 1, !tbaa !2446
  %7807 = xor i64 6, %7792
  %7808 = trunc i64 %7807 to i32
  %7809 = xor i32 %7808, %7796
  %7810 = lshr i32 %7809, 4
  %7811 = trunc i32 %7810 to i8
  %7812 = and i8 %7811, 1
  %7813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7812, i8* %7813, align 1, !tbaa !2447
  %7814 = icmp eq i32 %7796, 0
  %7815 = zext i1 %7814 to i8
  %7816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7815, i8* %7816, align 1, !tbaa !2448
  %7817 = lshr i32 %7796, 31
  %7818 = trunc i32 %7817 to i8
  %7819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7818, i8* %7819, align 1, !tbaa !2449
  %7820 = lshr i32 %7795, 31
  %7821 = xor i32 %7817, %7820
  %7822 = add nuw nsw i32 %7821, %7820
  %7823 = icmp eq i32 %7822, 2
  %7824 = zext i1 %7823 to i8
  %7825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7824, i8* %7825, align 1, !tbaa !2450
  %7826 = load i64, i64* %RDX
  %7827 = load i32, i32* %ESI
  %7828 = zext i32 %7827 to i64
  %7829 = load i64, i64* %PC
  %7830 = add i64 %7829, 3
  store i64 %7830, i64* %PC
  %7831 = shl i64 %7826, 32
  %7832 = ashr exact i64 %7831, 32
  %7833 = shl i64 %7828, 32
  %7834 = ashr exact i64 %7833, 32
  %7835 = mul nsw i64 %7834, %7832
  %7836 = trunc i64 %7835 to i32
  %7837 = and i64 %7835, 4294967295
  store i64 %7837, i64* %RDX, align 8, !tbaa !2428
  %7838 = shl i64 %7835, 32
  %7839 = ashr exact i64 %7838, 32
  %7840 = icmp ne i64 %7839, %7835
  %7841 = zext i1 %7840 to i8
  %7842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7841, i8* %7842, align 1, !tbaa !2432
  %7843 = and i32 %7836, 255
  %7844 = call i32 @llvm.ctpop.i32(i32 %7843) #16
  %7845 = trunc i32 %7844 to i8
  %7846 = and i8 %7845, 1
  %7847 = xor i8 %7846, 1
  %7848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7847, i8* %7848, align 1, !tbaa !2446
  %7849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7849, align 1, !tbaa !2447
  %7850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7850, align 1, !tbaa !2448
  %7851 = lshr i32 %7836, 31
  %7852 = trunc i32 %7851 to i8
  %7853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7852, i8* %7853, align 1, !tbaa !2449
  %7854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7841, i8* %7854, align 1, !tbaa !2450
  %7855 = load i64, i64* %RDX
  %7856 = load i64, i64* %RBP
  %7857 = sub i64 %7856, 48
  %7858 = load i64, i64* %PC
  %7859 = add i64 %7858, 3
  store i64 %7859, i64* %PC
  %7860 = trunc i64 %7855 to i32
  %7861 = inttoptr i64 %7857 to i32*
  %7862 = load i32, i32* %7861
  %7863 = add i32 %7862, %7860
  %7864 = zext i32 %7863 to i64
  store i64 %7864, i64* %RDX, align 8, !tbaa !2428
  %7865 = icmp ult i32 %7863, %7860
  %7866 = icmp ult i32 %7863, %7862
  %7867 = or i1 %7865, %7866
  %7868 = zext i1 %7867 to i8
  %7869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7868, i8* %7869, align 1, !tbaa !2432
  %7870 = and i32 %7863, 255
  %7871 = call i32 @llvm.ctpop.i32(i32 %7870) #16
  %7872 = trunc i32 %7871 to i8
  %7873 = and i8 %7872, 1
  %7874 = xor i8 %7873, 1
  %7875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7874, i8* %7875, align 1, !tbaa !2446
  %7876 = xor i32 %7862, %7860
  %7877 = xor i32 %7876, %7863
  %7878 = lshr i32 %7877, 4
  %7879 = trunc i32 %7878 to i8
  %7880 = and i8 %7879, 1
  %7881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7880, i8* %7881, align 1, !tbaa !2447
  %7882 = icmp eq i32 %7863, 0
  %7883 = zext i1 %7882 to i8
  %7884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7883, i8* %7884, align 1, !tbaa !2448
  %7885 = lshr i32 %7863, 31
  %7886 = trunc i32 %7885 to i8
  %7887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7886, i8* %7887, align 1, !tbaa !2449
  %7888 = lshr i32 %7860, 31
  %7889 = lshr i32 %7862, 31
  %7890 = xor i32 %7885, %7888
  %7891 = xor i32 %7885, %7889
  %7892 = add nuw nsw i32 %7890, %7891
  %7893 = icmp eq i32 %7892, 2
  %7894 = zext i1 %7893 to i8
  %7895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7894, i8* %7895, align 1, !tbaa !2450
  %7896 = load i32, i32* %EDX
  %7897 = zext i32 %7896 to i64
  %7898 = load i64, i64* %PC
  %7899 = add i64 %7898, 3
  store i64 %7899, i64* %PC
  %7900 = shl i64 %7897, 32
  %7901 = ashr exact i64 %7900, 32
  store i64 %7901, i64* %RCX, align 8, !tbaa !2428
  %7902 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7903 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7904 = load i64, i64* %RAX
  %7905 = load i64, i64* %RCX
  %7906 = mul i64 %7905, 4
  %7907 = add i64 %7906, %7904
  %7908 = load i64, i64* %PC
  %7909 = add i64 %7908, 5
  store i64 %7909, i64* %PC
  %7910 = bitcast i8* %7903 to <2 x float>*
  %7911 = load <2 x float>, <2 x float>* %7910, align 1
  %7912 = getelementptr inbounds i8, i8* %7903, i64 8
  %7913 = bitcast i8* %7912 to <2 x i32>*
  %7914 = load <2 x i32>, <2 x i32>* %7913, align 1
  %7915 = inttoptr i64 %7907 to float*
  %7916 = load float, float* %7915
  %7917 = extractelement <2 x float> %7911, i32 0
  %7918 = fmul float %7917, %7916
  %7919 = bitcast i8* %7902 to float*
  store float %7918, float* %7919, align 1, !tbaa !2452
  %7920 = bitcast <2 x float> %7911 to <2 x i32>
  %7921 = extractelement <2 x i32> %7920, i32 1
  %7922 = getelementptr inbounds i8, i8* %7902, i64 4
  %7923 = bitcast i8* %7922 to i32*
  store i32 %7921, i32* %7923, align 1, !tbaa !2452
  %7924 = extractelement <2 x i32> %7914, i32 0
  %7925 = getelementptr inbounds i8, i8* %7902, i64 8
  %7926 = bitcast i8* %7925 to i32*
  store i32 %7924, i32* %7926, align 1, !tbaa !2452
  %7927 = extractelement <2 x i32> %7914, i32 1
  %7928 = getelementptr inbounds i8, i8* %7902, i64 12
  %7929 = bitcast i8* %7928 to i32*
  store i32 %7927, i32* %7929, align 1, !tbaa !2452
  %7930 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7931 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7932 = bitcast %union.vec128_t* %XMM1 to i8*
  %7933 = load i64, i64* %PC
  %7934 = add i64 %7933, 4
  store i64 %7934, i64* %PC
  %7935 = bitcast i8* %7931 to <2 x float>*
  %7936 = load <2 x float>, <2 x float>* %7935, align 1
  %7937 = getelementptr inbounds i8, i8* %7931, i64 8
  %7938 = bitcast i8* %7937 to <2 x i32>*
  %7939 = load <2 x i32>, <2 x i32>* %7938, align 1
  %7940 = bitcast i8* %7932 to <2 x float>*
  %7941 = load <2 x float>, <2 x float>* %7940, align 1
  %7942 = extractelement <2 x float> %7936, i32 0
  %7943 = extractelement <2 x float> %7941, i32 0
  %7944 = fadd float %7942, %7943
  %7945 = bitcast i8* %7930 to float*
  store float %7944, float* %7945, align 1, !tbaa !2452
  %7946 = bitcast <2 x float> %7936 to <2 x i32>
  %7947 = extractelement <2 x i32> %7946, i32 1
  %7948 = getelementptr inbounds i8, i8* %7930, i64 4
  %7949 = bitcast i8* %7948 to i32*
  store i32 %7947, i32* %7949, align 1, !tbaa !2452
  %7950 = extractelement <2 x i32> %7939, i32 0
  %7951 = getelementptr inbounds i8, i8* %7930, i64 8
  %7952 = bitcast i8* %7951 to i32*
  store i32 %7950, i32* %7952, align 1, !tbaa !2452
  %7953 = extractelement <2 x i32> %7939, i32 1
  %7954 = getelementptr inbounds i8, i8* %7930, i64 12
  %7955 = bitcast i8* %7954 to i32*
  store i32 %7953, i32* %7955, align 1, !tbaa !2452
  %7956 = load i64, i64* %RBP
  %7957 = sub i64 %7956, 32
  %7958 = load i64, i64* %PC
  %7959 = add i64 %7958, 4
  store i64 %7959, i64* %PC
  %7960 = inttoptr i64 %7957 to i64*
  %7961 = load i64, i64* %7960
  store i64 %7961, i64* %RAX, align 8, !tbaa !2428
  %7962 = load i64, i64* %RBP
  %7963 = sub i64 %7962, 44
  %7964 = load i64, i64* %PC
  %7965 = add i64 %7964, 3
  store i64 %7965, i64* %PC
  %7966 = inttoptr i64 %7963 to i32*
  %7967 = load i32, i32* %7966
  %7968 = zext i32 %7967 to i64
  store i64 %7968, i64* %RDX, align 8, !tbaa !2428
  %7969 = load i64, i64* %RDX
  %7970 = load i64, i64* %PC
  %7971 = add i64 %7970, 3
  store i64 %7971, i64* %PC
  %7972 = trunc i64 %7969 to i32
  %7973 = sub i32 %7972, 5
  %7974 = zext i32 %7973 to i64
  store i64 %7974, i64* %RDX, align 8, !tbaa !2428
  %7975 = icmp ult i32 %7972, 5
  %7976 = zext i1 %7975 to i8
  %7977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7976, i8* %7977, align 1, !tbaa !2432
  %7978 = and i32 %7973, 255
  %7979 = call i32 @llvm.ctpop.i32(i32 %7978) #16
  %7980 = trunc i32 %7979 to i8
  %7981 = and i8 %7980, 1
  %7982 = xor i8 %7981, 1
  %7983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7982, i8* %7983, align 1, !tbaa !2446
  %7984 = xor i64 5, %7969
  %7985 = trunc i64 %7984 to i32
  %7986 = xor i32 %7985, %7973
  %7987 = lshr i32 %7986, 4
  %7988 = trunc i32 %7987 to i8
  %7989 = and i8 %7988, 1
  %7990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7989, i8* %7990, align 1, !tbaa !2447
  %7991 = icmp eq i32 %7973, 0
  %7992 = zext i1 %7991 to i8
  %7993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7992, i8* %7993, align 1, !tbaa !2448
  %7994 = lshr i32 %7973, 31
  %7995 = trunc i32 %7994 to i8
  %7996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7995, i8* %7996, align 1, !tbaa !2449
  %7997 = lshr i32 %7972, 31
  %7998 = xor i32 %7994, %7997
  %7999 = add nuw nsw i32 %7998, %7997
  %8000 = icmp eq i32 %7999, 2
  %8001 = zext i1 %8000 to i8
  %8002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8001, i8* %8002, align 1, !tbaa !2450
  %8003 = load i32, i32* %EDX
  %8004 = zext i32 %8003 to i64
  %8005 = load i64, i64* %PC
  %8006 = add i64 %8005, 3
  store i64 %8006, i64* %PC
  %8007 = shl i64 %8004, 32
  %8008 = ashr exact i64 %8007, 32
  store i64 %8008, i64* %RCX, align 8, !tbaa !2428
  %8009 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8010 = load i64, i64* %RAX
  %8011 = load i64, i64* %RCX
  %8012 = mul i64 %8011, 4
  %8013 = add i64 %8012, %8010
  %8014 = load i64, i64* %PC
  %8015 = add i64 %8014, 5
  store i64 %8015, i64* %PC
  %8016 = inttoptr i64 %8013 to float*
  %8017 = load float, float* %8016
  %8018 = bitcast i8* %8009 to float*
  store float %8017, float* %8018, align 1, !tbaa !2452
  %8019 = getelementptr inbounds i8, i8* %8009, i64 4
  %8020 = bitcast i8* %8019 to float*
  store float 0.000000e+00, float* %8020, align 1, !tbaa !2452
  %8021 = getelementptr inbounds i8, i8* %8009, i64 8
  %8022 = bitcast i8* %8021 to float*
  store float 0.000000e+00, float* %8022, align 1, !tbaa !2452
  %8023 = getelementptr inbounds i8, i8* %8009, i64 12
  %8024 = bitcast i8* %8023 to float*
  store float 0.000000e+00, float* %8024, align 1, !tbaa !2452
  %8025 = load i64, i64* %RBP
  %8026 = sub i64 %8025, 40
  %8027 = load i64, i64* %PC
  %8028 = add i64 %8027, 4
  store i64 %8028, i64* %PC
  %8029 = inttoptr i64 %8026 to i64*
  %8030 = load i64, i64* %8029
  store i64 %8030, i64* %RAX, align 8, !tbaa !2428
  %8031 = load i64, i64* %RBP
  %8032 = sub i64 %8031, 24
  %8033 = load i64, i64* %PC
  %8034 = add i64 %8033, 3
  store i64 %8034, i64* %PC
  %8035 = inttoptr i64 %8032 to i32*
  %8036 = load i32, i32* %8035
  %8037 = zext i32 %8036 to i64
  store i64 %8037, i64* %RDX, align 8, !tbaa !2428
  %8038 = load i64, i64* %RBP
  %8039 = sub i64 %8038, 44
  %8040 = load i64, i64* %PC
  %8041 = add i64 %8040, 3
  store i64 %8041, i64* %PC
  %8042 = inttoptr i64 %8039 to i32*
  %8043 = load i32, i32* %8042
  %8044 = zext i32 %8043 to i64
  store i64 %8044, i64* %RSI, align 8, !tbaa !2428
  %8045 = load i64, i64* %RSI
  %8046 = load i64, i64* %PC
  %8047 = add i64 %8046, 3
  store i64 %8047, i64* %PC
  %8048 = trunc i64 %8045 to i32
  %8049 = sub i32 %8048, 5
  %8050 = zext i32 %8049 to i64
  store i64 %8050, i64* %RSI, align 8, !tbaa !2428
  %8051 = icmp ult i32 %8048, 5
  %8052 = zext i1 %8051 to i8
  %8053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8052, i8* %8053, align 1, !tbaa !2432
  %8054 = and i32 %8049, 255
  %8055 = call i32 @llvm.ctpop.i32(i32 %8054) #16
  %8056 = trunc i32 %8055 to i8
  %8057 = and i8 %8056, 1
  %8058 = xor i8 %8057, 1
  %8059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8058, i8* %8059, align 1, !tbaa !2446
  %8060 = xor i64 5, %8045
  %8061 = trunc i64 %8060 to i32
  %8062 = xor i32 %8061, %8049
  %8063 = lshr i32 %8062, 4
  %8064 = trunc i32 %8063 to i8
  %8065 = and i8 %8064, 1
  %8066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8065, i8* %8066, align 1, !tbaa !2447
  %8067 = icmp eq i32 %8049, 0
  %8068 = zext i1 %8067 to i8
  %8069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8068, i8* %8069, align 1, !tbaa !2448
  %8070 = lshr i32 %8049, 31
  %8071 = trunc i32 %8070 to i8
  %8072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8071, i8* %8072, align 1, !tbaa !2449
  %8073 = lshr i32 %8048, 31
  %8074 = xor i32 %8070, %8073
  %8075 = add nuw nsw i32 %8074, %8073
  %8076 = icmp eq i32 %8075, 2
  %8077 = zext i1 %8076 to i8
  %8078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8077, i8* %8078, align 1, !tbaa !2450
  %8079 = load i64, i64* %RDX
  %8080 = load i32, i32* %ESI
  %8081 = zext i32 %8080 to i64
  %8082 = load i64, i64* %PC
  %8083 = add i64 %8082, 3
  store i64 %8083, i64* %PC
  %8084 = shl i64 %8079, 32
  %8085 = ashr exact i64 %8084, 32
  %8086 = shl i64 %8081, 32
  %8087 = ashr exact i64 %8086, 32
  %8088 = mul nsw i64 %8087, %8085
  %8089 = trunc i64 %8088 to i32
  %8090 = and i64 %8088, 4294967295
  store i64 %8090, i64* %RDX, align 8, !tbaa !2428
  %8091 = shl i64 %8088, 32
  %8092 = ashr exact i64 %8091, 32
  %8093 = icmp ne i64 %8092, %8088
  %8094 = zext i1 %8093 to i8
  %8095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8094, i8* %8095, align 1, !tbaa !2432
  %8096 = and i32 %8089, 255
  %8097 = call i32 @llvm.ctpop.i32(i32 %8096) #16
  %8098 = trunc i32 %8097 to i8
  %8099 = and i8 %8098, 1
  %8100 = xor i8 %8099, 1
  %8101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8100, i8* %8101, align 1, !tbaa !2446
  %8102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8102, align 1, !tbaa !2447
  %8103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8103, align 1, !tbaa !2448
  %8104 = lshr i32 %8089, 31
  %8105 = trunc i32 %8104 to i8
  %8106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8105, i8* %8106, align 1, !tbaa !2449
  %8107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8094, i8* %8107, align 1, !tbaa !2450
  %8108 = load i64, i64* %RDX
  %8109 = load i64, i64* %RBP
  %8110 = sub i64 %8109, 48
  %8111 = load i64, i64* %PC
  %8112 = add i64 %8111, 3
  store i64 %8112, i64* %PC
  %8113 = trunc i64 %8108 to i32
  %8114 = inttoptr i64 %8110 to i32*
  %8115 = load i32, i32* %8114
  %8116 = add i32 %8115, %8113
  %8117 = zext i32 %8116 to i64
  store i64 %8117, i64* %RDX, align 8, !tbaa !2428
  %8118 = icmp ult i32 %8116, %8113
  %8119 = icmp ult i32 %8116, %8115
  %8120 = or i1 %8118, %8119
  %8121 = zext i1 %8120 to i8
  %8122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8121, i8* %8122, align 1, !tbaa !2432
  %8123 = and i32 %8116, 255
  %8124 = call i32 @llvm.ctpop.i32(i32 %8123) #16
  %8125 = trunc i32 %8124 to i8
  %8126 = and i8 %8125, 1
  %8127 = xor i8 %8126, 1
  %8128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8127, i8* %8128, align 1, !tbaa !2446
  %8129 = xor i32 %8115, %8113
  %8130 = xor i32 %8129, %8116
  %8131 = lshr i32 %8130, 4
  %8132 = trunc i32 %8131 to i8
  %8133 = and i8 %8132, 1
  %8134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8133, i8* %8134, align 1, !tbaa !2447
  %8135 = icmp eq i32 %8116, 0
  %8136 = zext i1 %8135 to i8
  %8137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8136, i8* %8137, align 1, !tbaa !2448
  %8138 = lshr i32 %8116, 31
  %8139 = trunc i32 %8138 to i8
  %8140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8139, i8* %8140, align 1, !tbaa !2449
  %8141 = lshr i32 %8113, 31
  %8142 = lshr i32 %8115, 31
  %8143 = xor i32 %8138, %8141
  %8144 = xor i32 %8138, %8142
  %8145 = add nuw nsw i32 %8143, %8144
  %8146 = icmp eq i32 %8145, 2
  %8147 = zext i1 %8146 to i8
  %8148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8147, i8* %8148, align 1, !tbaa !2450
  %8149 = load i32, i32* %EDX
  %8150 = zext i32 %8149 to i64
  %8151 = load i64, i64* %PC
  %8152 = add i64 %8151, 3
  store i64 %8152, i64* %PC
  %8153 = shl i64 %8150, 32
  %8154 = ashr exact i64 %8153, 32
  store i64 %8154, i64* %RCX, align 8, !tbaa !2428
  %8155 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8156 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8157 = load i64, i64* %RAX
  %8158 = load i64, i64* %RCX
  %8159 = mul i64 %8158, 4
  %8160 = add i64 %8159, %8157
  %8161 = load i64, i64* %PC
  %8162 = add i64 %8161, 5
  store i64 %8162, i64* %PC
  %8163 = bitcast i8* %8156 to <2 x float>*
  %8164 = load <2 x float>, <2 x float>* %8163, align 1
  %8165 = getelementptr inbounds i8, i8* %8156, i64 8
  %8166 = bitcast i8* %8165 to <2 x i32>*
  %8167 = load <2 x i32>, <2 x i32>* %8166, align 1
  %8168 = inttoptr i64 %8160 to float*
  %8169 = load float, float* %8168
  %8170 = extractelement <2 x float> %8164, i32 0
  %8171 = fmul float %8170, %8169
  %8172 = bitcast i8* %8155 to float*
  store float %8171, float* %8172, align 1, !tbaa !2452
  %8173 = bitcast <2 x float> %8164 to <2 x i32>
  %8174 = extractelement <2 x i32> %8173, i32 1
  %8175 = getelementptr inbounds i8, i8* %8155, i64 4
  %8176 = bitcast i8* %8175 to i32*
  store i32 %8174, i32* %8176, align 1, !tbaa !2452
  %8177 = extractelement <2 x i32> %8167, i32 0
  %8178 = getelementptr inbounds i8, i8* %8155, i64 8
  %8179 = bitcast i8* %8178 to i32*
  store i32 %8177, i32* %8179, align 1, !tbaa !2452
  %8180 = extractelement <2 x i32> %8167, i32 1
  %8181 = getelementptr inbounds i8, i8* %8155, i64 12
  %8182 = bitcast i8* %8181 to i32*
  store i32 %8180, i32* %8182, align 1, !tbaa !2452
  %8183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8184 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8185 = bitcast %union.vec128_t* %XMM1 to i8*
  %8186 = load i64, i64* %PC
  %8187 = add i64 %8186, 4
  store i64 %8187, i64* %PC
  %8188 = bitcast i8* %8184 to <2 x float>*
  %8189 = load <2 x float>, <2 x float>* %8188, align 1
  %8190 = getelementptr inbounds i8, i8* %8184, i64 8
  %8191 = bitcast i8* %8190 to <2 x i32>*
  %8192 = load <2 x i32>, <2 x i32>* %8191, align 1
  %8193 = bitcast i8* %8185 to <2 x float>*
  %8194 = load <2 x float>, <2 x float>* %8193, align 1
  %8195 = extractelement <2 x float> %8189, i32 0
  %8196 = extractelement <2 x float> %8194, i32 0
  %8197 = fadd float %8195, %8196
  %8198 = bitcast i8* %8183 to float*
  store float %8197, float* %8198, align 1, !tbaa !2452
  %8199 = bitcast <2 x float> %8189 to <2 x i32>
  %8200 = extractelement <2 x i32> %8199, i32 1
  %8201 = getelementptr inbounds i8, i8* %8183, i64 4
  %8202 = bitcast i8* %8201 to i32*
  store i32 %8200, i32* %8202, align 1, !tbaa !2452
  %8203 = extractelement <2 x i32> %8192, i32 0
  %8204 = getelementptr inbounds i8, i8* %8183, i64 8
  %8205 = bitcast i8* %8204 to i32*
  store i32 %8203, i32* %8205, align 1, !tbaa !2452
  %8206 = extractelement <2 x i32> %8192, i32 1
  %8207 = getelementptr inbounds i8, i8* %8183, i64 12
  %8208 = bitcast i8* %8207 to i32*
  store i32 %8206, i32* %8208, align 1, !tbaa !2452
  %8209 = load i64, i64* %RBP
  %8210 = sub i64 %8209, 32
  %8211 = load i64, i64* %PC
  %8212 = add i64 %8211, 4
  store i64 %8212, i64* %PC
  %8213 = inttoptr i64 %8210 to i64*
  %8214 = load i64, i64* %8213
  store i64 %8214, i64* %RAX, align 8, !tbaa !2428
  %8215 = load i64, i64* %RBP
  %8216 = sub i64 %8215, 44
  %8217 = load i64, i64* %PC
  %8218 = add i64 %8217, 3
  store i64 %8218, i64* %PC
  %8219 = inttoptr i64 %8216 to i32*
  %8220 = load i32, i32* %8219
  %8221 = zext i32 %8220 to i64
  store i64 %8221, i64* %RDX, align 8, !tbaa !2428
  %8222 = load i64, i64* %RDX
  %8223 = load i64, i64* %PC
  %8224 = add i64 %8223, 3
  store i64 %8224, i64* %PC
  %8225 = trunc i64 %8222 to i32
  %8226 = sub i32 %8225, 4
  %8227 = zext i32 %8226 to i64
  store i64 %8227, i64* %RDX, align 8, !tbaa !2428
  %8228 = icmp ult i32 %8225, 4
  %8229 = zext i1 %8228 to i8
  %8230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8229, i8* %8230, align 1, !tbaa !2432
  %8231 = and i32 %8226, 255
  %8232 = call i32 @llvm.ctpop.i32(i32 %8231) #16
  %8233 = trunc i32 %8232 to i8
  %8234 = and i8 %8233, 1
  %8235 = xor i8 %8234, 1
  %8236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8235, i8* %8236, align 1, !tbaa !2446
  %8237 = xor i64 4, %8222
  %8238 = trunc i64 %8237 to i32
  %8239 = xor i32 %8238, %8226
  %8240 = lshr i32 %8239, 4
  %8241 = trunc i32 %8240 to i8
  %8242 = and i8 %8241, 1
  %8243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8242, i8* %8243, align 1, !tbaa !2447
  %8244 = icmp eq i32 %8226, 0
  %8245 = zext i1 %8244 to i8
  %8246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8245, i8* %8246, align 1, !tbaa !2448
  %8247 = lshr i32 %8226, 31
  %8248 = trunc i32 %8247 to i8
  %8249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8248, i8* %8249, align 1, !tbaa !2449
  %8250 = lshr i32 %8225, 31
  %8251 = xor i32 %8247, %8250
  %8252 = add nuw nsw i32 %8251, %8250
  %8253 = icmp eq i32 %8252, 2
  %8254 = zext i1 %8253 to i8
  %8255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8254, i8* %8255, align 1, !tbaa !2450
  %8256 = load i32, i32* %EDX
  %8257 = zext i32 %8256 to i64
  %8258 = load i64, i64* %PC
  %8259 = add i64 %8258, 3
  store i64 %8259, i64* %PC
  %8260 = shl i64 %8257, 32
  %8261 = ashr exact i64 %8260, 32
  store i64 %8261, i64* %RCX, align 8, !tbaa !2428
  %8262 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8263 = load i64, i64* %RAX
  %8264 = load i64, i64* %RCX
  %8265 = mul i64 %8264, 4
  %8266 = add i64 %8265, %8263
  %8267 = load i64, i64* %PC
  %8268 = add i64 %8267, 5
  store i64 %8268, i64* %PC
  %8269 = inttoptr i64 %8266 to float*
  %8270 = load float, float* %8269
  %8271 = bitcast i8* %8262 to float*
  store float %8270, float* %8271, align 1, !tbaa !2452
  %8272 = getelementptr inbounds i8, i8* %8262, i64 4
  %8273 = bitcast i8* %8272 to float*
  store float 0.000000e+00, float* %8273, align 1, !tbaa !2452
  %8274 = getelementptr inbounds i8, i8* %8262, i64 8
  %8275 = bitcast i8* %8274 to float*
  store float 0.000000e+00, float* %8275, align 1, !tbaa !2452
  %8276 = getelementptr inbounds i8, i8* %8262, i64 12
  %8277 = bitcast i8* %8276 to float*
  store float 0.000000e+00, float* %8277, align 1, !tbaa !2452
  %8278 = load i64, i64* %RBP
  %8279 = sub i64 %8278, 40
  %8280 = load i64, i64* %PC
  %8281 = add i64 %8280, 4
  store i64 %8281, i64* %PC
  %8282 = inttoptr i64 %8279 to i64*
  %8283 = load i64, i64* %8282
  store i64 %8283, i64* %RAX, align 8, !tbaa !2428
  %8284 = load i64, i64* %RBP
  %8285 = sub i64 %8284, 24
  %8286 = load i64, i64* %PC
  %8287 = add i64 %8286, 3
  store i64 %8287, i64* %PC
  %8288 = inttoptr i64 %8285 to i32*
  %8289 = load i32, i32* %8288
  %8290 = zext i32 %8289 to i64
  store i64 %8290, i64* %RDX, align 8, !tbaa !2428
  %8291 = load i64, i64* %RBP
  %8292 = sub i64 %8291, 44
  %8293 = load i64, i64* %PC
  %8294 = add i64 %8293, 3
  store i64 %8294, i64* %PC
  %8295 = inttoptr i64 %8292 to i32*
  %8296 = load i32, i32* %8295
  %8297 = zext i32 %8296 to i64
  store i64 %8297, i64* %RSI, align 8, !tbaa !2428
  %8298 = load i64, i64* %RSI
  %8299 = load i64, i64* %PC
  %8300 = add i64 %8299, 3
  store i64 %8300, i64* %PC
  %8301 = trunc i64 %8298 to i32
  %8302 = sub i32 %8301, 4
  %8303 = zext i32 %8302 to i64
  store i64 %8303, i64* %RSI, align 8, !tbaa !2428
  %8304 = icmp ult i32 %8301, 4
  %8305 = zext i1 %8304 to i8
  %8306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8305, i8* %8306, align 1, !tbaa !2432
  %8307 = and i32 %8302, 255
  %8308 = call i32 @llvm.ctpop.i32(i32 %8307) #16
  %8309 = trunc i32 %8308 to i8
  %8310 = and i8 %8309, 1
  %8311 = xor i8 %8310, 1
  %8312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8311, i8* %8312, align 1, !tbaa !2446
  %8313 = xor i64 4, %8298
  %8314 = trunc i64 %8313 to i32
  %8315 = xor i32 %8314, %8302
  %8316 = lshr i32 %8315, 4
  %8317 = trunc i32 %8316 to i8
  %8318 = and i8 %8317, 1
  %8319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8318, i8* %8319, align 1, !tbaa !2447
  %8320 = icmp eq i32 %8302, 0
  %8321 = zext i1 %8320 to i8
  %8322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8321, i8* %8322, align 1, !tbaa !2448
  %8323 = lshr i32 %8302, 31
  %8324 = trunc i32 %8323 to i8
  %8325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8324, i8* %8325, align 1, !tbaa !2449
  %8326 = lshr i32 %8301, 31
  %8327 = xor i32 %8323, %8326
  %8328 = add nuw nsw i32 %8327, %8326
  %8329 = icmp eq i32 %8328, 2
  %8330 = zext i1 %8329 to i8
  %8331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8330, i8* %8331, align 1, !tbaa !2450
  %8332 = load i64, i64* %RDX
  %8333 = load i32, i32* %ESI
  %8334 = zext i32 %8333 to i64
  %8335 = load i64, i64* %PC
  %8336 = add i64 %8335, 3
  store i64 %8336, i64* %PC
  %8337 = shl i64 %8332, 32
  %8338 = ashr exact i64 %8337, 32
  %8339 = shl i64 %8334, 32
  %8340 = ashr exact i64 %8339, 32
  %8341 = mul nsw i64 %8340, %8338
  %8342 = trunc i64 %8341 to i32
  %8343 = and i64 %8341, 4294967295
  store i64 %8343, i64* %RDX, align 8, !tbaa !2428
  %8344 = shl i64 %8341, 32
  %8345 = ashr exact i64 %8344, 32
  %8346 = icmp ne i64 %8345, %8341
  %8347 = zext i1 %8346 to i8
  %8348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8347, i8* %8348, align 1, !tbaa !2432
  %8349 = and i32 %8342, 255
  %8350 = call i32 @llvm.ctpop.i32(i32 %8349) #16
  %8351 = trunc i32 %8350 to i8
  %8352 = and i8 %8351, 1
  %8353 = xor i8 %8352, 1
  %8354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8353, i8* %8354, align 1, !tbaa !2446
  %8355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8355, align 1, !tbaa !2447
  %8356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8356, align 1, !tbaa !2448
  %8357 = lshr i32 %8342, 31
  %8358 = trunc i32 %8357 to i8
  %8359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8358, i8* %8359, align 1, !tbaa !2449
  %8360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8347, i8* %8360, align 1, !tbaa !2450
  %8361 = load i64, i64* %RDX
  %8362 = load i64, i64* %RBP
  %8363 = sub i64 %8362, 48
  %8364 = load i64, i64* %PC
  %8365 = add i64 %8364, 3
  store i64 %8365, i64* %PC
  %8366 = trunc i64 %8361 to i32
  %8367 = inttoptr i64 %8363 to i32*
  %8368 = load i32, i32* %8367
  %8369 = add i32 %8368, %8366
  %8370 = zext i32 %8369 to i64
  store i64 %8370, i64* %RDX, align 8, !tbaa !2428
  %8371 = icmp ult i32 %8369, %8366
  %8372 = icmp ult i32 %8369, %8368
  %8373 = or i1 %8371, %8372
  %8374 = zext i1 %8373 to i8
  %8375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8374, i8* %8375, align 1, !tbaa !2432
  %8376 = and i32 %8369, 255
  %8377 = call i32 @llvm.ctpop.i32(i32 %8376) #16
  %8378 = trunc i32 %8377 to i8
  %8379 = and i8 %8378, 1
  %8380 = xor i8 %8379, 1
  %8381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8380, i8* %8381, align 1, !tbaa !2446
  %8382 = xor i32 %8368, %8366
  %8383 = xor i32 %8382, %8369
  %8384 = lshr i32 %8383, 4
  %8385 = trunc i32 %8384 to i8
  %8386 = and i8 %8385, 1
  %8387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8386, i8* %8387, align 1, !tbaa !2447
  %8388 = icmp eq i32 %8369, 0
  %8389 = zext i1 %8388 to i8
  %8390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8389, i8* %8390, align 1, !tbaa !2448
  %8391 = lshr i32 %8369, 31
  %8392 = trunc i32 %8391 to i8
  %8393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8392, i8* %8393, align 1, !tbaa !2449
  %8394 = lshr i32 %8366, 31
  %8395 = lshr i32 %8368, 31
  %8396 = xor i32 %8391, %8394
  %8397 = xor i32 %8391, %8395
  %8398 = add nuw nsw i32 %8396, %8397
  %8399 = icmp eq i32 %8398, 2
  %8400 = zext i1 %8399 to i8
  %8401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8400, i8* %8401, align 1, !tbaa !2450
  %8402 = load i32, i32* %EDX
  %8403 = zext i32 %8402 to i64
  %8404 = load i64, i64* %PC
  %8405 = add i64 %8404, 3
  store i64 %8405, i64* %PC
  %8406 = shl i64 %8403, 32
  %8407 = ashr exact i64 %8406, 32
  store i64 %8407, i64* %RCX, align 8, !tbaa !2428
  %8408 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8409 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8410 = load i64, i64* %RAX
  %8411 = load i64, i64* %RCX
  %8412 = mul i64 %8411, 4
  %8413 = add i64 %8412, %8410
  %8414 = load i64, i64* %PC
  %8415 = add i64 %8414, 5
  store i64 %8415, i64* %PC
  %8416 = bitcast i8* %8409 to <2 x float>*
  %8417 = load <2 x float>, <2 x float>* %8416, align 1
  %8418 = getelementptr inbounds i8, i8* %8409, i64 8
  %8419 = bitcast i8* %8418 to <2 x i32>*
  %8420 = load <2 x i32>, <2 x i32>* %8419, align 1
  %8421 = inttoptr i64 %8413 to float*
  %8422 = load float, float* %8421
  %8423 = extractelement <2 x float> %8417, i32 0
  %8424 = fmul float %8423, %8422
  %8425 = bitcast i8* %8408 to float*
  store float %8424, float* %8425, align 1, !tbaa !2452
  %8426 = bitcast <2 x float> %8417 to <2 x i32>
  %8427 = extractelement <2 x i32> %8426, i32 1
  %8428 = getelementptr inbounds i8, i8* %8408, i64 4
  %8429 = bitcast i8* %8428 to i32*
  store i32 %8427, i32* %8429, align 1, !tbaa !2452
  %8430 = extractelement <2 x i32> %8420, i32 0
  %8431 = getelementptr inbounds i8, i8* %8408, i64 8
  %8432 = bitcast i8* %8431 to i32*
  store i32 %8430, i32* %8432, align 1, !tbaa !2452
  %8433 = extractelement <2 x i32> %8420, i32 1
  %8434 = getelementptr inbounds i8, i8* %8408, i64 12
  %8435 = bitcast i8* %8434 to i32*
  store i32 %8433, i32* %8435, align 1, !tbaa !2452
  %8436 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8438 = bitcast %union.vec128_t* %XMM1 to i8*
  %8439 = load i64, i64* %PC
  %8440 = add i64 %8439, 4
  store i64 %8440, i64* %PC
  %8441 = bitcast i8* %8437 to <2 x float>*
  %8442 = load <2 x float>, <2 x float>* %8441, align 1
  %8443 = getelementptr inbounds i8, i8* %8437, i64 8
  %8444 = bitcast i8* %8443 to <2 x i32>*
  %8445 = load <2 x i32>, <2 x i32>* %8444, align 1
  %8446 = bitcast i8* %8438 to <2 x float>*
  %8447 = load <2 x float>, <2 x float>* %8446, align 1
  %8448 = extractelement <2 x float> %8442, i32 0
  %8449 = extractelement <2 x float> %8447, i32 0
  %8450 = fadd float %8448, %8449
  %8451 = bitcast i8* %8436 to float*
  store float %8450, float* %8451, align 1, !tbaa !2452
  %8452 = bitcast <2 x float> %8442 to <2 x i32>
  %8453 = extractelement <2 x i32> %8452, i32 1
  %8454 = getelementptr inbounds i8, i8* %8436, i64 4
  %8455 = bitcast i8* %8454 to i32*
  store i32 %8453, i32* %8455, align 1, !tbaa !2452
  %8456 = extractelement <2 x i32> %8445, i32 0
  %8457 = getelementptr inbounds i8, i8* %8436, i64 8
  %8458 = bitcast i8* %8457 to i32*
  store i32 %8456, i32* %8458, align 1, !tbaa !2452
  %8459 = extractelement <2 x i32> %8445, i32 1
  %8460 = getelementptr inbounds i8, i8* %8436, i64 12
  %8461 = bitcast i8* %8460 to i32*
  store i32 %8459, i32* %8461, align 1, !tbaa !2452
  %8462 = load i64, i64* %RBP
  %8463 = sub i64 %8462, 32
  %8464 = load i64, i64* %PC
  %8465 = add i64 %8464, 4
  store i64 %8465, i64* %PC
  %8466 = inttoptr i64 %8463 to i64*
  %8467 = load i64, i64* %8466
  store i64 %8467, i64* %RAX, align 8, !tbaa !2428
  %8468 = load i64, i64* %RBP
  %8469 = sub i64 %8468, 44
  %8470 = load i64, i64* %PC
  %8471 = add i64 %8470, 3
  store i64 %8471, i64* %PC
  %8472 = inttoptr i64 %8469 to i32*
  %8473 = load i32, i32* %8472
  %8474 = zext i32 %8473 to i64
  store i64 %8474, i64* %RDX, align 8, !tbaa !2428
  %8475 = load i64, i64* %RDX
  %8476 = load i64, i64* %PC
  %8477 = add i64 %8476, 3
  store i64 %8477, i64* %PC
  %8478 = trunc i64 %8475 to i32
  %8479 = sub i32 %8478, 3
  %8480 = zext i32 %8479 to i64
  store i64 %8480, i64* %RDX, align 8, !tbaa !2428
  %8481 = icmp ult i32 %8478, 3
  %8482 = zext i1 %8481 to i8
  %8483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8482, i8* %8483, align 1, !tbaa !2432
  %8484 = and i32 %8479, 255
  %8485 = call i32 @llvm.ctpop.i32(i32 %8484) #16
  %8486 = trunc i32 %8485 to i8
  %8487 = and i8 %8486, 1
  %8488 = xor i8 %8487, 1
  %8489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8488, i8* %8489, align 1, !tbaa !2446
  %8490 = xor i64 3, %8475
  %8491 = trunc i64 %8490 to i32
  %8492 = xor i32 %8491, %8479
  %8493 = lshr i32 %8492, 4
  %8494 = trunc i32 %8493 to i8
  %8495 = and i8 %8494, 1
  %8496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8495, i8* %8496, align 1, !tbaa !2447
  %8497 = icmp eq i32 %8479, 0
  %8498 = zext i1 %8497 to i8
  %8499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8498, i8* %8499, align 1, !tbaa !2448
  %8500 = lshr i32 %8479, 31
  %8501 = trunc i32 %8500 to i8
  %8502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8501, i8* %8502, align 1, !tbaa !2449
  %8503 = lshr i32 %8478, 31
  %8504 = xor i32 %8500, %8503
  %8505 = add nuw nsw i32 %8504, %8503
  %8506 = icmp eq i32 %8505, 2
  %8507 = zext i1 %8506 to i8
  %8508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8507, i8* %8508, align 1, !tbaa !2450
  %8509 = load i32, i32* %EDX
  %8510 = zext i32 %8509 to i64
  %8511 = load i64, i64* %PC
  %8512 = add i64 %8511, 3
  store i64 %8512, i64* %PC
  %8513 = shl i64 %8510, 32
  %8514 = ashr exact i64 %8513, 32
  store i64 %8514, i64* %RCX, align 8, !tbaa !2428
  %8515 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8516 = load i64, i64* %RAX
  %8517 = load i64, i64* %RCX
  %8518 = mul i64 %8517, 4
  %8519 = add i64 %8518, %8516
  %8520 = load i64, i64* %PC
  %8521 = add i64 %8520, 5
  store i64 %8521, i64* %PC
  %8522 = inttoptr i64 %8519 to float*
  %8523 = load float, float* %8522
  %8524 = bitcast i8* %8515 to float*
  store float %8523, float* %8524, align 1, !tbaa !2452
  %8525 = getelementptr inbounds i8, i8* %8515, i64 4
  %8526 = bitcast i8* %8525 to float*
  store float 0.000000e+00, float* %8526, align 1, !tbaa !2452
  %8527 = getelementptr inbounds i8, i8* %8515, i64 8
  %8528 = bitcast i8* %8527 to float*
  store float 0.000000e+00, float* %8528, align 1, !tbaa !2452
  %8529 = getelementptr inbounds i8, i8* %8515, i64 12
  %8530 = bitcast i8* %8529 to float*
  store float 0.000000e+00, float* %8530, align 1, !tbaa !2452
  %8531 = load i64, i64* %RBP
  %8532 = sub i64 %8531, 40
  %8533 = load i64, i64* %PC
  %8534 = add i64 %8533, 4
  store i64 %8534, i64* %PC
  %8535 = inttoptr i64 %8532 to i64*
  %8536 = load i64, i64* %8535
  store i64 %8536, i64* %RAX, align 8, !tbaa !2428
  %8537 = load i64, i64* %RBP
  %8538 = sub i64 %8537, 24
  %8539 = load i64, i64* %PC
  %8540 = add i64 %8539, 3
  store i64 %8540, i64* %PC
  %8541 = inttoptr i64 %8538 to i32*
  %8542 = load i32, i32* %8541
  %8543 = zext i32 %8542 to i64
  store i64 %8543, i64* %RDX, align 8, !tbaa !2428
  %8544 = load i64, i64* %RBP
  %8545 = sub i64 %8544, 44
  %8546 = load i64, i64* %PC
  %8547 = add i64 %8546, 3
  store i64 %8547, i64* %PC
  %8548 = inttoptr i64 %8545 to i32*
  %8549 = load i32, i32* %8548
  %8550 = zext i32 %8549 to i64
  store i64 %8550, i64* %RSI, align 8, !tbaa !2428
  %8551 = load i64, i64* %RSI
  %8552 = load i64, i64* %PC
  %8553 = add i64 %8552, 3
  store i64 %8553, i64* %PC
  %8554 = trunc i64 %8551 to i32
  %8555 = sub i32 %8554, 3
  %8556 = zext i32 %8555 to i64
  store i64 %8556, i64* %RSI, align 8, !tbaa !2428
  %8557 = icmp ult i32 %8554, 3
  %8558 = zext i1 %8557 to i8
  %8559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8558, i8* %8559, align 1, !tbaa !2432
  %8560 = and i32 %8555, 255
  %8561 = call i32 @llvm.ctpop.i32(i32 %8560) #16
  %8562 = trunc i32 %8561 to i8
  %8563 = and i8 %8562, 1
  %8564 = xor i8 %8563, 1
  %8565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8564, i8* %8565, align 1, !tbaa !2446
  %8566 = xor i64 3, %8551
  %8567 = trunc i64 %8566 to i32
  %8568 = xor i32 %8567, %8555
  %8569 = lshr i32 %8568, 4
  %8570 = trunc i32 %8569 to i8
  %8571 = and i8 %8570, 1
  %8572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8571, i8* %8572, align 1, !tbaa !2447
  %8573 = icmp eq i32 %8555, 0
  %8574 = zext i1 %8573 to i8
  %8575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8574, i8* %8575, align 1, !tbaa !2448
  %8576 = lshr i32 %8555, 31
  %8577 = trunc i32 %8576 to i8
  %8578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8577, i8* %8578, align 1, !tbaa !2449
  %8579 = lshr i32 %8554, 31
  %8580 = xor i32 %8576, %8579
  %8581 = add nuw nsw i32 %8580, %8579
  %8582 = icmp eq i32 %8581, 2
  %8583 = zext i1 %8582 to i8
  %8584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8583, i8* %8584, align 1, !tbaa !2450
  %8585 = load i64, i64* %RDX
  %8586 = load i32, i32* %ESI
  %8587 = zext i32 %8586 to i64
  %8588 = load i64, i64* %PC
  %8589 = add i64 %8588, 3
  store i64 %8589, i64* %PC
  %8590 = shl i64 %8585, 32
  %8591 = ashr exact i64 %8590, 32
  %8592 = shl i64 %8587, 32
  %8593 = ashr exact i64 %8592, 32
  %8594 = mul nsw i64 %8593, %8591
  %8595 = trunc i64 %8594 to i32
  %8596 = and i64 %8594, 4294967295
  store i64 %8596, i64* %RDX, align 8, !tbaa !2428
  %8597 = shl i64 %8594, 32
  %8598 = ashr exact i64 %8597, 32
  %8599 = icmp ne i64 %8598, %8594
  %8600 = zext i1 %8599 to i8
  %8601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8600, i8* %8601, align 1, !tbaa !2432
  %8602 = and i32 %8595, 255
  %8603 = call i32 @llvm.ctpop.i32(i32 %8602) #16
  %8604 = trunc i32 %8603 to i8
  %8605 = and i8 %8604, 1
  %8606 = xor i8 %8605, 1
  %8607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8606, i8* %8607, align 1, !tbaa !2446
  %8608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8608, align 1, !tbaa !2447
  %8609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8609, align 1, !tbaa !2448
  %8610 = lshr i32 %8595, 31
  %8611 = trunc i32 %8610 to i8
  %8612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8611, i8* %8612, align 1, !tbaa !2449
  %8613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8600, i8* %8613, align 1, !tbaa !2450
  %8614 = load i64, i64* %RDX
  %8615 = load i64, i64* %RBP
  %8616 = sub i64 %8615, 48
  %8617 = load i64, i64* %PC
  %8618 = add i64 %8617, 3
  store i64 %8618, i64* %PC
  %8619 = trunc i64 %8614 to i32
  %8620 = inttoptr i64 %8616 to i32*
  %8621 = load i32, i32* %8620
  %8622 = add i32 %8621, %8619
  %8623 = zext i32 %8622 to i64
  store i64 %8623, i64* %RDX, align 8, !tbaa !2428
  %8624 = icmp ult i32 %8622, %8619
  %8625 = icmp ult i32 %8622, %8621
  %8626 = or i1 %8624, %8625
  %8627 = zext i1 %8626 to i8
  %8628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8627, i8* %8628, align 1, !tbaa !2432
  %8629 = and i32 %8622, 255
  %8630 = call i32 @llvm.ctpop.i32(i32 %8629) #16
  %8631 = trunc i32 %8630 to i8
  %8632 = and i8 %8631, 1
  %8633 = xor i8 %8632, 1
  %8634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8633, i8* %8634, align 1, !tbaa !2446
  %8635 = xor i32 %8621, %8619
  %8636 = xor i32 %8635, %8622
  %8637 = lshr i32 %8636, 4
  %8638 = trunc i32 %8637 to i8
  %8639 = and i8 %8638, 1
  %8640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8639, i8* %8640, align 1, !tbaa !2447
  %8641 = icmp eq i32 %8622, 0
  %8642 = zext i1 %8641 to i8
  %8643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8642, i8* %8643, align 1, !tbaa !2448
  %8644 = lshr i32 %8622, 31
  %8645 = trunc i32 %8644 to i8
  %8646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8645, i8* %8646, align 1, !tbaa !2449
  %8647 = lshr i32 %8619, 31
  %8648 = lshr i32 %8621, 31
  %8649 = xor i32 %8644, %8647
  %8650 = xor i32 %8644, %8648
  %8651 = add nuw nsw i32 %8649, %8650
  %8652 = icmp eq i32 %8651, 2
  %8653 = zext i1 %8652 to i8
  %8654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8653, i8* %8654, align 1, !tbaa !2450
  %8655 = load i32, i32* %EDX
  %8656 = zext i32 %8655 to i64
  %8657 = load i64, i64* %PC
  %8658 = add i64 %8657, 3
  store i64 %8658, i64* %PC
  %8659 = shl i64 %8656, 32
  %8660 = ashr exact i64 %8659, 32
  store i64 %8660, i64* %RCX, align 8, !tbaa !2428
  %8661 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8662 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8663 = load i64, i64* %RAX
  %8664 = load i64, i64* %RCX
  %8665 = mul i64 %8664, 4
  %8666 = add i64 %8665, %8663
  %8667 = load i64, i64* %PC
  %8668 = add i64 %8667, 5
  store i64 %8668, i64* %PC
  %8669 = bitcast i8* %8662 to <2 x float>*
  %8670 = load <2 x float>, <2 x float>* %8669, align 1
  %8671 = getelementptr inbounds i8, i8* %8662, i64 8
  %8672 = bitcast i8* %8671 to <2 x i32>*
  %8673 = load <2 x i32>, <2 x i32>* %8672, align 1
  %8674 = inttoptr i64 %8666 to float*
  %8675 = load float, float* %8674
  %8676 = extractelement <2 x float> %8670, i32 0
  %8677 = fmul float %8676, %8675
  %8678 = bitcast i8* %8661 to float*
  store float %8677, float* %8678, align 1, !tbaa !2452
  %8679 = bitcast <2 x float> %8670 to <2 x i32>
  %8680 = extractelement <2 x i32> %8679, i32 1
  %8681 = getelementptr inbounds i8, i8* %8661, i64 4
  %8682 = bitcast i8* %8681 to i32*
  store i32 %8680, i32* %8682, align 1, !tbaa !2452
  %8683 = extractelement <2 x i32> %8673, i32 0
  %8684 = getelementptr inbounds i8, i8* %8661, i64 8
  %8685 = bitcast i8* %8684 to i32*
  store i32 %8683, i32* %8685, align 1, !tbaa !2452
  %8686 = extractelement <2 x i32> %8673, i32 1
  %8687 = getelementptr inbounds i8, i8* %8661, i64 12
  %8688 = bitcast i8* %8687 to i32*
  store i32 %8686, i32* %8688, align 1, !tbaa !2452
  %8689 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8690 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8691 = bitcast %union.vec128_t* %XMM1 to i8*
  %8692 = load i64, i64* %PC
  %8693 = add i64 %8692, 4
  store i64 %8693, i64* %PC
  %8694 = bitcast i8* %8690 to <2 x float>*
  %8695 = load <2 x float>, <2 x float>* %8694, align 1
  %8696 = getelementptr inbounds i8, i8* %8690, i64 8
  %8697 = bitcast i8* %8696 to <2 x i32>*
  %8698 = load <2 x i32>, <2 x i32>* %8697, align 1
  %8699 = bitcast i8* %8691 to <2 x float>*
  %8700 = load <2 x float>, <2 x float>* %8699, align 1
  %8701 = extractelement <2 x float> %8695, i32 0
  %8702 = extractelement <2 x float> %8700, i32 0
  %8703 = fadd float %8701, %8702
  %8704 = bitcast i8* %8689 to float*
  store float %8703, float* %8704, align 1, !tbaa !2452
  %8705 = bitcast <2 x float> %8695 to <2 x i32>
  %8706 = extractelement <2 x i32> %8705, i32 1
  %8707 = getelementptr inbounds i8, i8* %8689, i64 4
  %8708 = bitcast i8* %8707 to i32*
  store i32 %8706, i32* %8708, align 1, !tbaa !2452
  %8709 = extractelement <2 x i32> %8698, i32 0
  %8710 = getelementptr inbounds i8, i8* %8689, i64 8
  %8711 = bitcast i8* %8710 to i32*
  store i32 %8709, i32* %8711, align 1, !tbaa !2452
  %8712 = extractelement <2 x i32> %8698, i32 1
  %8713 = getelementptr inbounds i8, i8* %8689, i64 12
  %8714 = bitcast i8* %8713 to i32*
  store i32 %8712, i32* %8714, align 1, !tbaa !2452
  %8715 = load i64, i64* %RBP
  %8716 = sub i64 %8715, 32
  %8717 = load i64, i64* %PC
  %8718 = add i64 %8717, 4
  store i64 %8718, i64* %PC
  %8719 = inttoptr i64 %8716 to i64*
  %8720 = load i64, i64* %8719
  store i64 %8720, i64* %RAX, align 8, !tbaa !2428
  %8721 = load i64, i64* %RBP
  %8722 = sub i64 %8721, 44
  %8723 = load i64, i64* %PC
  %8724 = add i64 %8723, 3
  store i64 %8724, i64* %PC
  %8725 = inttoptr i64 %8722 to i32*
  %8726 = load i32, i32* %8725
  %8727 = zext i32 %8726 to i64
  store i64 %8727, i64* %RDX, align 8, !tbaa !2428
  %8728 = load i64, i64* %RDX
  %8729 = load i64, i64* %PC
  %8730 = add i64 %8729, 3
  store i64 %8730, i64* %PC
  %8731 = trunc i64 %8728 to i32
  %8732 = sub i32 %8731, 2
  %8733 = zext i32 %8732 to i64
  store i64 %8733, i64* %RDX, align 8, !tbaa !2428
  %8734 = icmp ult i32 %8731, 2
  %8735 = zext i1 %8734 to i8
  %8736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8735, i8* %8736, align 1, !tbaa !2432
  %8737 = and i32 %8732, 255
  %8738 = call i32 @llvm.ctpop.i32(i32 %8737) #16
  %8739 = trunc i32 %8738 to i8
  %8740 = and i8 %8739, 1
  %8741 = xor i8 %8740, 1
  %8742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8741, i8* %8742, align 1, !tbaa !2446
  %8743 = xor i64 2, %8728
  %8744 = trunc i64 %8743 to i32
  %8745 = xor i32 %8744, %8732
  %8746 = lshr i32 %8745, 4
  %8747 = trunc i32 %8746 to i8
  %8748 = and i8 %8747, 1
  %8749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8748, i8* %8749, align 1, !tbaa !2447
  %8750 = icmp eq i32 %8732, 0
  %8751 = zext i1 %8750 to i8
  %8752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8751, i8* %8752, align 1, !tbaa !2448
  %8753 = lshr i32 %8732, 31
  %8754 = trunc i32 %8753 to i8
  %8755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8754, i8* %8755, align 1, !tbaa !2449
  %8756 = lshr i32 %8731, 31
  %8757 = xor i32 %8753, %8756
  %8758 = add nuw nsw i32 %8757, %8756
  %8759 = icmp eq i32 %8758, 2
  %8760 = zext i1 %8759 to i8
  %8761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8760, i8* %8761, align 1, !tbaa !2450
  %8762 = load i32, i32* %EDX
  %8763 = zext i32 %8762 to i64
  %8764 = load i64, i64* %PC
  %8765 = add i64 %8764, 3
  store i64 %8765, i64* %PC
  %8766 = shl i64 %8763, 32
  %8767 = ashr exact i64 %8766, 32
  store i64 %8767, i64* %RCX, align 8, !tbaa !2428
  %8768 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8769 = load i64, i64* %RAX
  %8770 = load i64, i64* %RCX
  %8771 = mul i64 %8770, 4
  %8772 = add i64 %8771, %8769
  %8773 = load i64, i64* %PC
  %8774 = add i64 %8773, 5
  store i64 %8774, i64* %PC
  %8775 = inttoptr i64 %8772 to float*
  %8776 = load float, float* %8775
  %8777 = bitcast i8* %8768 to float*
  store float %8776, float* %8777, align 1, !tbaa !2452
  %8778 = getelementptr inbounds i8, i8* %8768, i64 4
  %8779 = bitcast i8* %8778 to float*
  store float 0.000000e+00, float* %8779, align 1, !tbaa !2452
  %8780 = getelementptr inbounds i8, i8* %8768, i64 8
  %8781 = bitcast i8* %8780 to float*
  store float 0.000000e+00, float* %8781, align 1, !tbaa !2452
  %8782 = getelementptr inbounds i8, i8* %8768, i64 12
  %8783 = bitcast i8* %8782 to float*
  store float 0.000000e+00, float* %8783, align 1, !tbaa !2452
  %8784 = load i64, i64* %RBP
  %8785 = sub i64 %8784, 40
  %8786 = load i64, i64* %PC
  %8787 = add i64 %8786, 4
  store i64 %8787, i64* %PC
  %8788 = inttoptr i64 %8785 to i64*
  %8789 = load i64, i64* %8788
  store i64 %8789, i64* %RAX, align 8, !tbaa !2428
  %8790 = load i64, i64* %RBP
  %8791 = sub i64 %8790, 24
  %8792 = load i64, i64* %PC
  %8793 = add i64 %8792, 3
  store i64 %8793, i64* %PC
  %8794 = inttoptr i64 %8791 to i32*
  %8795 = load i32, i32* %8794
  %8796 = zext i32 %8795 to i64
  store i64 %8796, i64* %RDX, align 8, !tbaa !2428
  %8797 = load i64, i64* %RBP
  %8798 = sub i64 %8797, 44
  %8799 = load i64, i64* %PC
  %8800 = add i64 %8799, 3
  store i64 %8800, i64* %PC
  %8801 = inttoptr i64 %8798 to i32*
  %8802 = load i32, i32* %8801
  %8803 = zext i32 %8802 to i64
  store i64 %8803, i64* %RSI, align 8, !tbaa !2428
  %8804 = load i64, i64* %RSI
  %8805 = load i64, i64* %PC
  %8806 = add i64 %8805, 3
  store i64 %8806, i64* %PC
  %8807 = trunc i64 %8804 to i32
  %8808 = sub i32 %8807, 2
  %8809 = zext i32 %8808 to i64
  store i64 %8809, i64* %RSI, align 8, !tbaa !2428
  %8810 = icmp ult i32 %8807, 2
  %8811 = zext i1 %8810 to i8
  %8812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8811, i8* %8812, align 1, !tbaa !2432
  %8813 = and i32 %8808, 255
  %8814 = call i32 @llvm.ctpop.i32(i32 %8813) #16
  %8815 = trunc i32 %8814 to i8
  %8816 = and i8 %8815, 1
  %8817 = xor i8 %8816, 1
  %8818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8817, i8* %8818, align 1, !tbaa !2446
  %8819 = xor i64 2, %8804
  %8820 = trunc i64 %8819 to i32
  %8821 = xor i32 %8820, %8808
  %8822 = lshr i32 %8821, 4
  %8823 = trunc i32 %8822 to i8
  %8824 = and i8 %8823, 1
  %8825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8824, i8* %8825, align 1, !tbaa !2447
  %8826 = icmp eq i32 %8808, 0
  %8827 = zext i1 %8826 to i8
  %8828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8827, i8* %8828, align 1, !tbaa !2448
  %8829 = lshr i32 %8808, 31
  %8830 = trunc i32 %8829 to i8
  %8831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8830, i8* %8831, align 1, !tbaa !2449
  %8832 = lshr i32 %8807, 31
  %8833 = xor i32 %8829, %8832
  %8834 = add nuw nsw i32 %8833, %8832
  %8835 = icmp eq i32 %8834, 2
  %8836 = zext i1 %8835 to i8
  %8837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8836, i8* %8837, align 1, !tbaa !2450
  %8838 = load i64, i64* %RDX
  %8839 = load i32, i32* %ESI
  %8840 = zext i32 %8839 to i64
  %8841 = load i64, i64* %PC
  %8842 = add i64 %8841, 3
  store i64 %8842, i64* %PC
  %8843 = shl i64 %8838, 32
  %8844 = ashr exact i64 %8843, 32
  %8845 = shl i64 %8840, 32
  %8846 = ashr exact i64 %8845, 32
  %8847 = mul nsw i64 %8846, %8844
  %8848 = trunc i64 %8847 to i32
  %8849 = and i64 %8847, 4294967295
  store i64 %8849, i64* %RDX, align 8, !tbaa !2428
  %8850 = shl i64 %8847, 32
  %8851 = ashr exact i64 %8850, 32
  %8852 = icmp ne i64 %8851, %8847
  %8853 = zext i1 %8852 to i8
  %8854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8853, i8* %8854, align 1, !tbaa !2432
  %8855 = and i32 %8848, 255
  %8856 = call i32 @llvm.ctpop.i32(i32 %8855) #16
  %8857 = trunc i32 %8856 to i8
  %8858 = and i8 %8857, 1
  %8859 = xor i8 %8858, 1
  %8860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8859, i8* %8860, align 1, !tbaa !2446
  %8861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8861, align 1, !tbaa !2447
  %8862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8862, align 1, !tbaa !2448
  %8863 = lshr i32 %8848, 31
  %8864 = trunc i32 %8863 to i8
  %8865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8864, i8* %8865, align 1, !tbaa !2449
  %8866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8853, i8* %8866, align 1, !tbaa !2450
  %8867 = load i64, i64* %RDX
  %8868 = load i64, i64* %RBP
  %8869 = sub i64 %8868, 48
  %8870 = load i64, i64* %PC
  %8871 = add i64 %8870, 3
  store i64 %8871, i64* %PC
  %8872 = trunc i64 %8867 to i32
  %8873 = inttoptr i64 %8869 to i32*
  %8874 = load i32, i32* %8873
  %8875 = add i32 %8874, %8872
  %8876 = zext i32 %8875 to i64
  store i64 %8876, i64* %RDX, align 8, !tbaa !2428
  %8877 = icmp ult i32 %8875, %8872
  %8878 = icmp ult i32 %8875, %8874
  %8879 = or i1 %8877, %8878
  %8880 = zext i1 %8879 to i8
  %8881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8880, i8* %8881, align 1, !tbaa !2432
  %8882 = and i32 %8875, 255
  %8883 = call i32 @llvm.ctpop.i32(i32 %8882) #16
  %8884 = trunc i32 %8883 to i8
  %8885 = and i8 %8884, 1
  %8886 = xor i8 %8885, 1
  %8887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8886, i8* %8887, align 1, !tbaa !2446
  %8888 = xor i32 %8874, %8872
  %8889 = xor i32 %8888, %8875
  %8890 = lshr i32 %8889, 4
  %8891 = trunc i32 %8890 to i8
  %8892 = and i8 %8891, 1
  %8893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8892, i8* %8893, align 1, !tbaa !2447
  %8894 = icmp eq i32 %8875, 0
  %8895 = zext i1 %8894 to i8
  %8896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8895, i8* %8896, align 1, !tbaa !2448
  %8897 = lshr i32 %8875, 31
  %8898 = trunc i32 %8897 to i8
  %8899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8898, i8* %8899, align 1, !tbaa !2449
  %8900 = lshr i32 %8872, 31
  %8901 = lshr i32 %8874, 31
  %8902 = xor i32 %8897, %8900
  %8903 = xor i32 %8897, %8901
  %8904 = add nuw nsw i32 %8902, %8903
  %8905 = icmp eq i32 %8904, 2
  %8906 = zext i1 %8905 to i8
  %8907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8906, i8* %8907, align 1, !tbaa !2450
  %8908 = load i32, i32* %EDX
  %8909 = zext i32 %8908 to i64
  %8910 = load i64, i64* %PC
  %8911 = add i64 %8910, 3
  store i64 %8911, i64* %PC
  %8912 = shl i64 %8909, 32
  %8913 = ashr exact i64 %8912, 32
  store i64 %8913, i64* %RCX, align 8, !tbaa !2428
  %8914 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8915 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8916 = load i64, i64* %RAX
  %8917 = load i64, i64* %RCX
  %8918 = mul i64 %8917, 4
  %8919 = add i64 %8918, %8916
  %8920 = load i64, i64* %PC
  %8921 = add i64 %8920, 5
  store i64 %8921, i64* %PC
  %8922 = bitcast i8* %8915 to <2 x float>*
  %8923 = load <2 x float>, <2 x float>* %8922, align 1
  %8924 = getelementptr inbounds i8, i8* %8915, i64 8
  %8925 = bitcast i8* %8924 to <2 x i32>*
  %8926 = load <2 x i32>, <2 x i32>* %8925, align 1
  %8927 = inttoptr i64 %8919 to float*
  %8928 = load float, float* %8927
  %8929 = extractelement <2 x float> %8923, i32 0
  %8930 = fmul float %8929, %8928
  %8931 = bitcast i8* %8914 to float*
  store float %8930, float* %8931, align 1, !tbaa !2452
  %8932 = bitcast <2 x float> %8923 to <2 x i32>
  %8933 = extractelement <2 x i32> %8932, i32 1
  %8934 = getelementptr inbounds i8, i8* %8914, i64 4
  %8935 = bitcast i8* %8934 to i32*
  store i32 %8933, i32* %8935, align 1, !tbaa !2452
  %8936 = extractelement <2 x i32> %8926, i32 0
  %8937 = getelementptr inbounds i8, i8* %8914, i64 8
  %8938 = bitcast i8* %8937 to i32*
  store i32 %8936, i32* %8938, align 1, !tbaa !2452
  %8939 = extractelement <2 x i32> %8926, i32 1
  %8940 = getelementptr inbounds i8, i8* %8914, i64 12
  %8941 = bitcast i8* %8940 to i32*
  store i32 %8939, i32* %8941, align 1, !tbaa !2452
  %8942 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8943 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8944 = bitcast %union.vec128_t* %XMM1 to i8*
  %8945 = load i64, i64* %PC
  %8946 = add i64 %8945, 4
  store i64 %8946, i64* %PC
  %8947 = bitcast i8* %8943 to <2 x float>*
  %8948 = load <2 x float>, <2 x float>* %8947, align 1
  %8949 = getelementptr inbounds i8, i8* %8943, i64 8
  %8950 = bitcast i8* %8949 to <2 x i32>*
  %8951 = load <2 x i32>, <2 x i32>* %8950, align 1
  %8952 = bitcast i8* %8944 to <2 x float>*
  %8953 = load <2 x float>, <2 x float>* %8952, align 1
  %8954 = extractelement <2 x float> %8948, i32 0
  %8955 = extractelement <2 x float> %8953, i32 0
  %8956 = fadd float %8954, %8955
  %8957 = bitcast i8* %8942 to float*
  store float %8956, float* %8957, align 1, !tbaa !2452
  %8958 = bitcast <2 x float> %8948 to <2 x i32>
  %8959 = extractelement <2 x i32> %8958, i32 1
  %8960 = getelementptr inbounds i8, i8* %8942, i64 4
  %8961 = bitcast i8* %8960 to i32*
  store i32 %8959, i32* %8961, align 1, !tbaa !2452
  %8962 = extractelement <2 x i32> %8951, i32 0
  %8963 = getelementptr inbounds i8, i8* %8942, i64 8
  %8964 = bitcast i8* %8963 to i32*
  store i32 %8962, i32* %8964, align 1, !tbaa !2452
  %8965 = extractelement <2 x i32> %8951, i32 1
  %8966 = getelementptr inbounds i8, i8* %8942, i64 12
  %8967 = bitcast i8* %8966 to i32*
  store i32 %8965, i32* %8967, align 1, !tbaa !2452
  %8968 = load i64, i64* %RBP
  %8969 = sub i64 %8968, 32
  %8970 = load i64, i64* %PC
  %8971 = add i64 %8970, 4
  store i64 %8971, i64* %PC
  %8972 = inttoptr i64 %8969 to i64*
  %8973 = load i64, i64* %8972
  store i64 %8973, i64* %RAX, align 8, !tbaa !2428
  %8974 = load i64, i64* %RBP
  %8975 = sub i64 %8974, 44
  %8976 = load i64, i64* %PC
  %8977 = add i64 %8976, 3
  store i64 %8977, i64* %PC
  %8978 = inttoptr i64 %8975 to i32*
  %8979 = load i32, i32* %8978
  %8980 = zext i32 %8979 to i64
  store i64 %8980, i64* %RDX, align 8, !tbaa !2428
  %8981 = load i64, i64* %RDX
  %8982 = load i64, i64* %PC
  %8983 = add i64 %8982, 3
  store i64 %8983, i64* %PC
  %8984 = trunc i64 %8981 to i32
  %8985 = sub i32 %8984, 1
  %8986 = zext i32 %8985 to i64
  store i64 %8986, i64* %RDX, align 8, !tbaa !2428
  %8987 = icmp ult i32 %8984, 1
  %8988 = zext i1 %8987 to i8
  %8989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8988, i8* %8989, align 1, !tbaa !2432
  %8990 = and i32 %8985, 255
  %8991 = call i32 @llvm.ctpop.i32(i32 %8990) #16
  %8992 = trunc i32 %8991 to i8
  %8993 = and i8 %8992, 1
  %8994 = xor i8 %8993, 1
  %8995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8994, i8* %8995, align 1, !tbaa !2446
  %8996 = xor i64 1, %8981
  %8997 = trunc i64 %8996 to i32
  %8998 = xor i32 %8997, %8985
  %8999 = lshr i32 %8998, 4
  %9000 = trunc i32 %8999 to i8
  %9001 = and i8 %9000, 1
  %9002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9001, i8* %9002, align 1, !tbaa !2447
  %9003 = icmp eq i32 %8985, 0
  %9004 = zext i1 %9003 to i8
  %9005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9004, i8* %9005, align 1, !tbaa !2448
  %9006 = lshr i32 %8985, 31
  %9007 = trunc i32 %9006 to i8
  %9008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9007, i8* %9008, align 1, !tbaa !2449
  %9009 = lshr i32 %8984, 31
  %9010 = xor i32 %9006, %9009
  %9011 = add nuw nsw i32 %9010, %9009
  %9012 = icmp eq i32 %9011, 2
  %9013 = zext i1 %9012 to i8
  %9014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9013, i8* %9014, align 1, !tbaa !2450
  %9015 = load i32, i32* %EDX
  %9016 = zext i32 %9015 to i64
  %9017 = load i64, i64* %PC
  %9018 = add i64 %9017, 3
  store i64 %9018, i64* %PC
  %9019 = shl i64 %9016, 32
  %9020 = ashr exact i64 %9019, 32
  store i64 %9020, i64* %RCX, align 8, !tbaa !2428
  %9021 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9022 = load i64, i64* %RAX
  %9023 = load i64, i64* %RCX
  %9024 = mul i64 %9023, 4
  %9025 = add i64 %9024, %9022
  %9026 = load i64, i64* %PC
  %9027 = add i64 %9026, 5
  store i64 %9027, i64* %PC
  %9028 = inttoptr i64 %9025 to float*
  %9029 = load float, float* %9028
  %9030 = bitcast i8* %9021 to float*
  store float %9029, float* %9030, align 1, !tbaa !2452
  %9031 = getelementptr inbounds i8, i8* %9021, i64 4
  %9032 = bitcast i8* %9031 to float*
  store float 0.000000e+00, float* %9032, align 1, !tbaa !2452
  %9033 = getelementptr inbounds i8, i8* %9021, i64 8
  %9034 = bitcast i8* %9033 to float*
  store float 0.000000e+00, float* %9034, align 1, !tbaa !2452
  %9035 = getelementptr inbounds i8, i8* %9021, i64 12
  %9036 = bitcast i8* %9035 to float*
  store float 0.000000e+00, float* %9036, align 1, !tbaa !2452
  %9037 = load i64, i64* %RBP
  %9038 = sub i64 %9037, 40
  %9039 = load i64, i64* %PC
  %9040 = add i64 %9039, 4
  store i64 %9040, i64* %PC
  %9041 = inttoptr i64 %9038 to i64*
  %9042 = load i64, i64* %9041
  store i64 %9042, i64* %RAX, align 8, !tbaa !2428
  %9043 = load i64, i64* %RBP
  %9044 = sub i64 %9043, 24
  %9045 = load i64, i64* %PC
  %9046 = add i64 %9045, 3
  store i64 %9046, i64* %PC
  %9047 = inttoptr i64 %9044 to i32*
  %9048 = load i32, i32* %9047
  %9049 = zext i32 %9048 to i64
  store i64 %9049, i64* %RDX, align 8, !tbaa !2428
  %9050 = load i64, i64* %RBP
  %9051 = sub i64 %9050, 44
  %9052 = load i64, i64* %PC
  %9053 = add i64 %9052, 3
  store i64 %9053, i64* %PC
  %9054 = inttoptr i64 %9051 to i32*
  %9055 = load i32, i32* %9054
  %9056 = zext i32 %9055 to i64
  store i64 %9056, i64* %RSI, align 8, !tbaa !2428
  %9057 = load i64, i64* %RSI
  %9058 = load i64, i64* %PC
  %9059 = add i64 %9058, 3
  store i64 %9059, i64* %PC
  %9060 = trunc i64 %9057 to i32
  %9061 = sub i32 %9060, 1
  %9062 = zext i32 %9061 to i64
  store i64 %9062, i64* %RSI, align 8, !tbaa !2428
  %9063 = icmp ult i32 %9060, 1
  %9064 = zext i1 %9063 to i8
  %9065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9064, i8* %9065, align 1, !tbaa !2432
  %9066 = and i32 %9061, 255
  %9067 = call i32 @llvm.ctpop.i32(i32 %9066) #16
  %9068 = trunc i32 %9067 to i8
  %9069 = and i8 %9068, 1
  %9070 = xor i8 %9069, 1
  %9071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9070, i8* %9071, align 1, !tbaa !2446
  %9072 = xor i64 1, %9057
  %9073 = trunc i64 %9072 to i32
  %9074 = xor i32 %9073, %9061
  %9075 = lshr i32 %9074, 4
  %9076 = trunc i32 %9075 to i8
  %9077 = and i8 %9076, 1
  %9078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9077, i8* %9078, align 1, !tbaa !2447
  %9079 = icmp eq i32 %9061, 0
  %9080 = zext i1 %9079 to i8
  %9081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9080, i8* %9081, align 1, !tbaa !2448
  %9082 = lshr i32 %9061, 31
  %9083 = trunc i32 %9082 to i8
  %9084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9083, i8* %9084, align 1, !tbaa !2449
  %9085 = lshr i32 %9060, 31
  %9086 = xor i32 %9082, %9085
  %9087 = add nuw nsw i32 %9086, %9085
  %9088 = icmp eq i32 %9087, 2
  %9089 = zext i1 %9088 to i8
  %9090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9089, i8* %9090, align 1, !tbaa !2450
  %9091 = load i64, i64* %RDX
  %9092 = load i32, i32* %ESI
  %9093 = zext i32 %9092 to i64
  %9094 = load i64, i64* %PC
  %9095 = add i64 %9094, 3
  store i64 %9095, i64* %PC
  %9096 = shl i64 %9091, 32
  %9097 = ashr exact i64 %9096, 32
  %9098 = shl i64 %9093, 32
  %9099 = ashr exact i64 %9098, 32
  %9100 = mul nsw i64 %9099, %9097
  %9101 = trunc i64 %9100 to i32
  %9102 = and i64 %9100, 4294967295
  store i64 %9102, i64* %RDX, align 8, !tbaa !2428
  %9103 = shl i64 %9100, 32
  %9104 = ashr exact i64 %9103, 32
  %9105 = icmp ne i64 %9104, %9100
  %9106 = zext i1 %9105 to i8
  %9107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9106, i8* %9107, align 1, !tbaa !2432
  %9108 = and i32 %9101, 255
  %9109 = call i32 @llvm.ctpop.i32(i32 %9108) #16
  %9110 = trunc i32 %9109 to i8
  %9111 = and i8 %9110, 1
  %9112 = xor i8 %9111, 1
  %9113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9112, i8* %9113, align 1, !tbaa !2446
  %9114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9114, align 1, !tbaa !2447
  %9115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9115, align 1, !tbaa !2448
  %9116 = lshr i32 %9101, 31
  %9117 = trunc i32 %9116 to i8
  %9118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9117, i8* %9118, align 1, !tbaa !2449
  %9119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9106, i8* %9119, align 1, !tbaa !2450
  %9120 = load i64, i64* %RDX
  %9121 = load i64, i64* %RBP
  %9122 = sub i64 %9121, 48
  %9123 = load i64, i64* %PC
  %9124 = add i64 %9123, 3
  store i64 %9124, i64* %PC
  %9125 = trunc i64 %9120 to i32
  %9126 = inttoptr i64 %9122 to i32*
  %9127 = load i32, i32* %9126
  %9128 = add i32 %9127, %9125
  %9129 = zext i32 %9128 to i64
  store i64 %9129, i64* %RDX, align 8, !tbaa !2428
  %9130 = icmp ult i32 %9128, %9125
  %9131 = icmp ult i32 %9128, %9127
  %9132 = or i1 %9130, %9131
  %9133 = zext i1 %9132 to i8
  %9134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9133, i8* %9134, align 1, !tbaa !2432
  %9135 = and i32 %9128, 255
  %9136 = call i32 @llvm.ctpop.i32(i32 %9135) #16
  %9137 = trunc i32 %9136 to i8
  %9138 = and i8 %9137, 1
  %9139 = xor i8 %9138, 1
  %9140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9139, i8* %9140, align 1, !tbaa !2446
  %9141 = xor i32 %9127, %9125
  %9142 = xor i32 %9141, %9128
  %9143 = lshr i32 %9142, 4
  %9144 = trunc i32 %9143 to i8
  %9145 = and i8 %9144, 1
  %9146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9145, i8* %9146, align 1, !tbaa !2447
  %9147 = icmp eq i32 %9128, 0
  %9148 = zext i1 %9147 to i8
  %9149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9148, i8* %9149, align 1, !tbaa !2448
  %9150 = lshr i32 %9128, 31
  %9151 = trunc i32 %9150 to i8
  %9152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9151, i8* %9152, align 1, !tbaa !2449
  %9153 = lshr i32 %9125, 31
  %9154 = lshr i32 %9127, 31
  %9155 = xor i32 %9150, %9153
  %9156 = xor i32 %9150, %9154
  %9157 = add nuw nsw i32 %9155, %9156
  %9158 = icmp eq i32 %9157, 2
  %9159 = zext i1 %9158 to i8
  %9160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9159, i8* %9160, align 1, !tbaa !2450
  %9161 = load i32, i32* %EDX
  %9162 = zext i32 %9161 to i64
  %9163 = load i64, i64* %PC
  %9164 = add i64 %9163, 3
  store i64 %9164, i64* %PC
  %9165 = shl i64 %9162, 32
  %9166 = ashr exact i64 %9165, 32
  store i64 %9166, i64* %RCX, align 8, !tbaa !2428
  %9167 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9168 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9169 = load i64, i64* %RAX
  %9170 = load i64, i64* %RCX
  %9171 = mul i64 %9170, 4
  %9172 = add i64 %9171, %9169
  %9173 = load i64, i64* %PC
  %9174 = add i64 %9173, 5
  store i64 %9174, i64* %PC
  %9175 = bitcast i8* %9168 to <2 x float>*
  %9176 = load <2 x float>, <2 x float>* %9175, align 1
  %9177 = getelementptr inbounds i8, i8* %9168, i64 8
  %9178 = bitcast i8* %9177 to <2 x i32>*
  %9179 = load <2 x i32>, <2 x i32>* %9178, align 1
  %9180 = inttoptr i64 %9172 to float*
  %9181 = load float, float* %9180
  %9182 = extractelement <2 x float> %9176, i32 0
  %9183 = fmul float %9182, %9181
  %9184 = bitcast i8* %9167 to float*
  store float %9183, float* %9184, align 1, !tbaa !2452
  %9185 = bitcast <2 x float> %9176 to <2 x i32>
  %9186 = extractelement <2 x i32> %9185, i32 1
  %9187 = getelementptr inbounds i8, i8* %9167, i64 4
  %9188 = bitcast i8* %9187 to i32*
  store i32 %9186, i32* %9188, align 1, !tbaa !2452
  %9189 = extractelement <2 x i32> %9179, i32 0
  %9190 = getelementptr inbounds i8, i8* %9167, i64 8
  %9191 = bitcast i8* %9190 to i32*
  store i32 %9189, i32* %9191, align 1, !tbaa !2452
  %9192 = extractelement <2 x i32> %9179, i32 1
  %9193 = getelementptr inbounds i8, i8* %9167, i64 12
  %9194 = bitcast i8* %9193 to i32*
  store i32 %9192, i32* %9194, align 1, !tbaa !2452
  %9195 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9196 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9197 = bitcast %union.vec128_t* %XMM1 to i8*
  %9198 = load i64, i64* %PC
  %9199 = add i64 %9198, 4
  store i64 %9199, i64* %PC
  %9200 = bitcast i8* %9196 to <2 x float>*
  %9201 = load <2 x float>, <2 x float>* %9200, align 1
  %9202 = getelementptr inbounds i8, i8* %9196, i64 8
  %9203 = bitcast i8* %9202 to <2 x i32>*
  %9204 = load <2 x i32>, <2 x i32>* %9203, align 1
  %9205 = bitcast i8* %9197 to <2 x float>*
  %9206 = load <2 x float>, <2 x float>* %9205, align 1
  %9207 = extractelement <2 x float> %9201, i32 0
  %9208 = extractelement <2 x float> %9206, i32 0
  %9209 = fadd float %9207, %9208
  %9210 = bitcast i8* %9195 to float*
  store float %9209, float* %9210, align 1, !tbaa !2452
  %9211 = bitcast <2 x float> %9201 to <2 x i32>
  %9212 = extractelement <2 x i32> %9211, i32 1
  %9213 = getelementptr inbounds i8, i8* %9195, i64 4
  %9214 = bitcast i8* %9213 to i32*
  store i32 %9212, i32* %9214, align 1, !tbaa !2452
  %9215 = extractelement <2 x i32> %9204, i32 0
  %9216 = getelementptr inbounds i8, i8* %9195, i64 8
  %9217 = bitcast i8* %9216 to i32*
  store i32 %9215, i32* %9217, align 1, !tbaa !2452
  %9218 = extractelement <2 x i32> %9204, i32 1
  %9219 = getelementptr inbounds i8, i8* %9195, i64 12
  %9220 = bitcast i8* %9219 to i32*
  store i32 %9218, i32* %9220, align 1, !tbaa !2452
  %9221 = load i64, i64* %RBP
  %9222 = sub i64 %9221, 32
  %9223 = load i64, i64* %PC
  %9224 = add i64 %9223, 4
  store i64 %9224, i64* %PC
  %9225 = inttoptr i64 %9222 to i64*
  %9226 = load i64, i64* %9225
  store i64 %9226, i64* %RAX, align 8, !tbaa !2428
  %9227 = load i64, i64* %RBP
  %9228 = sub i64 %9227, 44
  %9229 = load i64, i64* %PC
  %9230 = add i64 %9229, 4
  store i64 %9230, i64* %PC
  %9231 = inttoptr i64 %9228 to i32*
  %9232 = load i32, i32* %9231
  %9233 = sext i32 %9232 to i64
  store i64 %9233, i64* %RCX, align 8, !tbaa !2428
  %9234 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9235 = load i64, i64* %RAX
  %9236 = load i64, i64* %RCX
  %9237 = mul i64 %9236, 4
  %9238 = add i64 %9237, %9235
  %9239 = load i64, i64* %PC
  %9240 = add i64 %9239, 5
  store i64 %9240, i64* %PC
  %9241 = inttoptr i64 %9238 to float*
  %9242 = load float, float* %9241
  %9243 = bitcast i8* %9234 to float*
  store float %9242, float* %9243, align 1, !tbaa !2452
  %9244 = getelementptr inbounds i8, i8* %9234, i64 4
  %9245 = bitcast i8* %9244 to float*
  store float 0.000000e+00, float* %9245, align 1, !tbaa !2452
  %9246 = getelementptr inbounds i8, i8* %9234, i64 8
  %9247 = bitcast i8* %9246 to float*
  store float 0.000000e+00, float* %9247, align 1, !tbaa !2452
  %9248 = getelementptr inbounds i8, i8* %9234, i64 12
  %9249 = bitcast i8* %9248 to float*
  store float 0.000000e+00, float* %9249, align 1, !tbaa !2452
  %9250 = load i64, i64* %RBP
  %9251 = sub i64 %9250, 40
  %9252 = load i64, i64* %PC
  %9253 = add i64 %9252, 4
  store i64 %9253, i64* %PC
  %9254 = inttoptr i64 %9251 to i64*
  %9255 = load i64, i64* %9254
  store i64 %9255, i64* %RAX, align 8, !tbaa !2428
  %9256 = load i64, i64* %RBP
  %9257 = sub i64 %9256, 24
  %9258 = load i64, i64* %PC
  %9259 = add i64 %9258, 3
  store i64 %9259, i64* %PC
  %9260 = inttoptr i64 %9257 to i32*
  %9261 = load i32, i32* %9260
  %9262 = zext i32 %9261 to i64
  store i64 %9262, i64* %RDX, align 8, !tbaa !2428
  %9263 = load i64, i64* %RDX
  %9264 = load i64, i64* %RBP
  %9265 = sub i64 %9264, 44
  %9266 = load i64, i64* %PC
  %9267 = add i64 %9266, 4
  store i64 %9267, i64* %PC
  %9268 = inttoptr i64 %9265 to i32*
  %9269 = load i32, i32* %9268
  %9270 = shl i64 %9263, 32
  %9271 = ashr exact i64 %9270, 32
  %9272 = sext i32 %9269 to i64
  %9273 = mul nsw i64 %9272, %9271
  %9274 = trunc i64 %9273 to i32
  %9275 = and i64 %9273, 4294967295
  store i64 %9275, i64* %RDX, align 8, !tbaa !2428
  %9276 = shl i64 %9273, 32
  %9277 = ashr exact i64 %9276, 32
  %9278 = icmp ne i64 %9277, %9273
  %9279 = zext i1 %9278 to i8
  %9280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9279, i8* %9280, align 1, !tbaa !2432
  %9281 = and i32 %9274, 255
  %9282 = call i32 @llvm.ctpop.i32(i32 %9281) #16
  %9283 = trunc i32 %9282 to i8
  %9284 = and i8 %9283, 1
  %9285 = xor i8 %9284, 1
  %9286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9285, i8* %9286, align 1, !tbaa !2446
  %9287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9287, align 1, !tbaa !2447
  %9288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9288, align 1, !tbaa !2448
  %9289 = lshr i32 %9274, 31
  %9290 = trunc i32 %9289 to i8
  %9291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9290, i8* %9291, align 1, !tbaa !2449
  %9292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9279, i8* %9292, align 1, !tbaa !2450
  %9293 = load i64, i64* %RDX
  %9294 = load i64, i64* %RBP
  %9295 = sub i64 %9294, 48
  %9296 = load i64, i64* %PC
  %9297 = add i64 %9296, 3
  store i64 %9297, i64* %PC
  %9298 = trunc i64 %9293 to i32
  %9299 = inttoptr i64 %9295 to i32*
  %9300 = load i32, i32* %9299
  %9301 = add i32 %9300, %9298
  %9302 = zext i32 %9301 to i64
  store i64 %9302, i64* %RDX, align 8, !tbaa !2428
  %9303 = icmp ult i32 %9301, %9298
  %9304 = icmp ult i32 %9301, %9300
  %9305 = or i1 %9303, %9304
  %9306 = zext i1 %9305 to i8
  %9307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9306, i8* %9307, align 1, !tbaa !2432
  %9308 = and i32 %9301, 255
  %9309 = call i32 @llvm.ctpop.i32(i32 %9308) #16
  %9310 = trunc i32 %9309 to i8
  %9311 = and i8 %9310, 1
  %9312 = xor i8 %9311, 1
  %9313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9312, i8* %9313, align 1, !tbaa !2446
  %9314 = xor i32 %9300, %9298
  %9315 = xor i32 %9314, %9301
  %9316 = lshr i32 %9315, 4
  %9317 = trunc i32 %9316 to i8
  %9318 = and i8 %9317, 1
  %9319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9318, i8* %9319, align 1, !tbaa !2447
  %9320 = icmp eq i32 %9301, 0
  %9321 = zext i1 %9320 to i8
  %9322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9321, i8* %9322, align 1, !tbaa !2448
  %9323 = lshr i32 %9301, 31
  %9324 = trunc i32 %9323 to i8
  %9325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9324, i8* %9325, align 1, !tbaa !2449
  %9326 = lshr i32 %9298, 31
  %9327 = lshr i32 %9300, 31
  %9328 = xor i32 %9323, %9326
  %9329 = xor i32 %9323, %9327
  %9330 = add nuw nsw i32 %9328, %9329
  %9331 = icmp eq i32 %9330, 2
  %9332 = zext i1 %9331 to i8
  %9333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9332, i8* %9333, align 1, !tbaa !2450
  %9334 = load i32, i32* %EDX
  %9335 = zext i32 %9334 to i64
  %9336 = load i64, i64* %PC
  %9337 = add i64 %9336, 3
  store i64 %9337, i64* %PC
  %9338 = shl i64 %9335, 32
  %9339 = ashr exact i64 %9338, 32
  store i64 %9339, i64* %RCX, align 8, !tbaa !2428
  %9340 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9341 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9342 = load i64, i64* %RAX
  %9343 = load i64, i64* %RCX
  %9344 = mul i64 %9343, 4
  %9345 = add i64 %9344, %9342
  %9346 = load i64, i64* %PC
  %9347 = add i64 %9346, 5
  store i64 %9347, i64* %PC
  %9348 = bitcast i8* %9341 to <2 x float>*
  %9349 = load <2 x float>, <2 x float>* %9348, align 1
  %9350 = getelementptr inbounds i8, i8* %9341, i64 8
  %9351 = bitcast i8* %9350 to <2 x i32>*
  %9352 = load <2 x i32>, <2 x i32>* %9351, align 1
  %9353 = inttoptr i64 %9345 to float*
  %9354 = load float, float* %9353
  %9355 = extractelement <2 x float> %9349, i32 0
  %9356 = fmul float %9355, %9354
  %9357 = bitcast i8* %9340 to float*
  store float %9356, float* %9357, align 1, !tbaa !2452
  %9358 = bitcast <2 x float> %9349 to <2 x i32>
  %9359 = extractelement <2 x i32> %9358, i32 1
  %9360 = getelementptr inbounds i8, i8* %9340, i64 4
  %9361 = bitcast i8* %9360 to i32*
  store i32 %9359, i32* %9361, align 1, !tbaa !2452
  %9362 = extractelement <2 x i32> %9352, i32 0
  %9363 = getelementptr inbounds i8, i8* %9340, i64 8
  %9364 = bitcast i8* %9363 to i32*
  store i32 %9362, i32* %9364, align 1, !tbaa !2452
  %9365 = extractelement <2 x i32> %9352, i32 1
  %9366 = getelementptr inbounds i8, i8* %9340, i64 12
  %9367 = bitcast i8* %9366 to i32*
  store i32 %9365, i32* %9367, align 1, !tbaa !2452
  %9368 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9369 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9370 = bitcast %union.vec128_t* %XMM1 to i8*
  %9371 = load i64, i64* %PC
  %9372 = add i64 %9371, 4
  store i64 %9372, i64* %PC
  %9373 = bitcast i8* %9369 to <2 x float>*
  %9374 = load <2 x float>, <2 x float>* %9373, align 1
  %9375 = getelementptr inbounds i8, i8* %9369, i64 8
  %9376 = bitcast i8* %9375 to <2 x i32>*
  %9377 = load <2 x i32>, <2 x i32>* %9376, align 1
  %9378 = bitcast i8* %9370 to <2 x float>*
  %9379 = load <2 x float>, <2 x float>* %9378, align 1
  %9380 = extractelement <2 x float> %9374, i32 0
  %9381 = extractelement <2 x float> %9379, i32 0
  %9382 = fadd float %9380, %9381
  %9383 = bitcast i8* %9368 to float*
  store float %9382, float* %9383, align 1, !tbaa !2452
  %9384 = bitcast <2 x float> %9374 to <2 x i32>
  %9385 = extractelement <2 x i32> %9384, i32 1
  %9386 = getelementptr inbounds i8, i8* %9368, i64 4
  %9387 = bitcast i8* %9386 to i32*
  store i32 %9385, i32* %9387, align 1, !tbaa !2452
  %9388 = extractelement <2 x i32> %9377, i32 0
  %9389 = getelementptr inbounds i8, i8* %9368, i64 8
  %9390 = bitcast i8* %9389 to i32*
  store i32 %9388, i32* %9390, align 1, !tbaa !2452
  %9391 = extractelement <2 x i32> %9377, i32 1
  %9392 = getelementptr inbounds i8, i8* %9368, i64 12
  %9393 = bitcast i8* %9392 to i32*
  store i32 %9391, i32* %9393, align 1, !tbaa !2452
  %9394 = load i64, i64* %RBP
  %9395 = sub i64 %9394, 16
  %9396 = load i64, i64* %PC
  %9397 = add i64 %9396, 4
  store i64 %9397, i64* %PC
  %9398 = inttoptr i64 %9395 to i64*
  %9399 = load i64, i64* %9398
  store i64 %9399, i64* %RAX, align 8, !tbaa !2428
  %9400 = load i64, i64* %RBP
  %9401 = sub i64 %9400, 48
  %9402 = load i64, i64* %PC
  %9403 = add i64 %9402, 4
  store i64 %9403, i64* %PC
  %9404 = inttoptr i64 %9401 to i32*
  %9405 = load i32, i32* %9404
  %9406 = sext i32 %9405 to i64
  store i64 %9406, i64* %RCX, align 8, !tbaa !2428
  %9407 = load i64, i64* %RAX
  %9408 = load i64, i64* %RCX
  %9409 = mul i64 %9408, 4
  %9410 = add i64 %9409, %9407
  %9411 = bitcast %union.vec128_t* %XMM0 to i8*
  %9412 = load i64, i64* %PC
  %9413 = add i64 %9412, 5
  store i64 %9413, i64* %PC
  %9414 = bitcast i8* %9411 to <2 x float>*
  %9415 = load <2 x float>, <2 x float>* %9414, align 1
  %9416 = extractelement <2 x float> %9415, i32 0
  %9417 = inttoptr i64 %9410 to float*
  store float %9416, float* %9417
  %9418 = load i64, i64* %RBP
  %9419 = sub i64 %9418, 48
  %9420 = load i64, i64* %PC
  %9421 = add i64 %9420, 3
  store i64 %9421, i64* %PC
  %9422 = inttoptr i64 %9419 to i32*
  %9423 = load i32, i32* %9422
  %9424 = zext i32 %9423 to i64
  store i64 %9424, i64* %RAX, align 8, !tbaa !2428
  %9425 = load i64, i64* %RAX
  %9426 = load i64, i64* %PC
  %9427 = add i64 %9426, 3
  store i64 %9427, i64* %PC
  %9428 = trunc i64 %9425 to i32
  %9429 = add i32 1, %9428
  %9430 = zext i32 %9429 to i64
  store i64 %9430, i64* %RAX, align 8, !tbaa !2428
  %9431 = icmp ult i32 %9429, %9428
  %9432 = icmp ult i32 %9429, 1
  %9433 = or i1 %9431, %9432
  %9434 = zext i1 %9433 to i8
  %9435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9434, i8* %9435, align 1, !tbaa !2432
  %9436 = and i32 %9429, 255
  %9437 = call i32 @llvm.ctpop.i32(i32 %9436) #16
  %9438 = trunc i32 %9437 to i8
  %9439 = and i8 %9438, 1
  %9440 = xor i8 %9439, 1
  %9441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9440, i8* %9441, align 1, !tbaa !2446
  %9442 = xor i64 1, %9425
  %9443 = trunc i64 %9442 to i32
  %9444 = xor i32 %9443, %9429
  %9445 = lshr i32 %9444, 4
  %9446 = trunc i32 %9445 to i8
  %9447 = and i8 %9446, 1
  %9448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9447, i8* %9448, align 1, !tbaa !2447
  %9449 = icmp eq i32 %9429, 0
  %9450 = zext i1 %9449 to i8
  %9451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9450, i8* %9451, align 1, !tbaa !2448
  %9452 = lshr i32 %9429, 31
  %9453 = trunc i32 %9452 to i8
  %9454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9453, i8* %9454, align 1, !tbaa !2449
  %9455 = lshr i32 %9428, 31
  %9456 = xor i32 %9452, %9455
  %9457 = add nuw nsw i32 %9456, %9452
  %9458 = icmp eq i32 %9457, 2
  %9459 = zext i1 %9458 to i8
  %9460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9459, i8* %9460, align 1, !tbaa !2450
  %9461 = load i64, i64* %RBP
  %9462 = sub i64 %9461, 48
  %9463 = load i32, i32* %EAX
  %9464 = zext i32 %9463 to i64
  %9465 = load i64, i64* %PC
  %9466 = add i64 %9465, 3
  store i64 %9466, i64* %PC
  %9467 = inttoptr i64 %9462 to i32*
  store i32 %9463, i32* %9467
  %9468 = load i64, i64* %PC
  %9469 = sub i64 %9468, 429
  %9470 = load i64, i64* %PC
  %9471 = add i64 %9470, 5
  store i64 %9471, i64* %PC
  %9472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9469, i64* %9472, align 8, !tbaa !2428
  br label %block_40227d
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e34__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402e34:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b50_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402b50:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i32, i32* %EDI
  %57 = zext i32 %56 to i64
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %60
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 16
  %63 = load i64, i64* %RSI
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 20
  %69 = load i32, i32* %EDX
  %70 = zext i32 %69 to i64
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %73
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 8
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %75 to i32*
  %79 = load i32, i32* %78
  %80 = sub i32 %79, 1
  %81 = icmp ult i32 %79, 1
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %82, i8* %83, align 1, !tbaa !2432
  %84 = and i32 %80, 255
  %85 = call i32 @llvm.ctpop.i32(i32 %84) #16
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = xor i8 %87, 1
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %88, i8* %89, align 1, !tbaa !2446
  %90 = xor i32 %79, 1
  %91 = xor i32 %90, %80
  %92 = lshr i32 %91, 4
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %94, i8* %95, align 1, !tbaa !2447
  %96 = icmp eq i32 %80, 0
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %97, i8* %98, align 1, !tbaa !2448
  %99 = lshr i32 %80, 31
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %100, i8* %101, align 1, !tbaa !2449
  %102 = lshr i32 %79, 31
  %103 = xor i32 %99, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %106, i8* %107, align 1, !tbaa !2450
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 18
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 6
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %115 = load i8, i8* %114, align 1, !tbaa !2449
  %116 = icmp ne i8 %115, 0
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %118 = load i8, i8* %117, align 1, !tbaa !2450
  %119 = icmp ne i8 %118, 0
  %120 = xor i1 %116, %119
  %121 = xor i1 %120, true
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %124 = select i1 %120, i64 %111, i64 %109
  store i64 %124, i64* %123, align 8, !tbaa !2428
  %125 = load i8, i8* %BRANCH_TAKEN
  %126 = icmp eq i8 %125, 1
  %127 = load i64, i64* %RBP
  br i1 %126, label %block_402b74, label %block_402b68

block_402bd3:                                     ; preds = %block_402bc7
  %128 = load i64, i64* %RBP
  %129 = sub i64 %128, 16
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = inttoptr i64 %129 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 32
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %135 to i32*
  %139 = load i32, i32* %138
  %140 = sext i32 %139 to i64
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %142 = load i64, i64* %RAX
  %143 = load i64, i64* %RCX
  %144 = mul i64 %143, 4
  %145 = add i64 %144, %142
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to float*
  %149 = load float, float* %148
  %150 = fpext float %149 to double
  %151 = bitcast i8* %141 to double*
  store double %150, double* %151, align 1, !tbaa !2455
  %152 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 7
  store i64 %154, i64* %PC
  %155 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %156 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %157 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %158 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %159 = bitcast i8* %152 to float*
  store float %155, float* %159, align 1, !tbaa !2452
  %160 = getelementptr inbounds i8, i8* %152, i64 4
  %161 = bitcast i8* %160 to float*
  store float %156, float* %161, align 1, !tbaa !2452
  %162 = getelementptr inbounds i8, i8* %152, i64 8
  %163 = bitcast i8* %162 to float*
  store float %157, float* %163, align 1, !tbaa !2452
  %164 = getelementptr inbounds i8, i8* %152, i64 12
  %165 = bitcast i8* %164 to float*
  store float %158, float* %165, align 1, !tbaa !2452
  %166 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %167 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %168 = bitcast %union.vec128_t* %XMM1 to i8*
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 4
  store i64 %170, i64* %PC
  %171 = bitcast i8* %167 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = getelementptr inbounds i8, i8* %167, i64 8
  %174 = bitcast i8* %173 to i64*
  %175 = load i64, i64* %174, align 1
  %176 = bitcast i8* %168 to i64*
  %177 = load i64, i64* %176, align 1
  %178 = getelementptr inbounds i8, i8* %168, i64 8
  %179 = bitcast i8* %178 to i64*
  %180 = load i64, i64* %179, align 1
  %181 = and i64 %177, %172
  %182 = and i64 %180, %175
  %183 = trunc i64 %181 to i32
  %184 = lshr i64 %181, 32
  %185 = trunc i64 %184 to i32
  %186 = bitcast i8* %166 to i32*
  store i32 %183, i32* %186, align 1, !tbaa !2454
  %187 = getelementptr inbounds i8, i8* %166, i64 4
  %188 = bitcast i8* %187 to i32*
  store i32 %185, i32* %188, align 1, !tbaa !2454
  %189 = trunc i64 %182 to i32
  %190 = getelementptr inbounds i8, i8* %166, i64 8
  %191 = bitcast i8* %190 to i32*
  store i32 %189, i32* %191, align 1, !tbaa !2454
  %192 = lshr i64 %182, 32
  %193 = trunc i64 %192 to i32
  %194 = getelementptr inbounds i8, i8* %166, i64 12
  %195 = bitcast i8* %194 to i32*
  store i32 %193, i32* %195, align 1, !tbaa !2454
  %196 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %197 = load i64, i64* %RBP
  %198 = sub i64 %197, 24
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %198 to float*
  %202 = load float, float* %201
  %203 = fpext float %202 to double
  %204 = bitcast i8* %196 to double*
  store double %203, double* %204, align 1, !tbaa !2455
  %205 = bitcast %union.vec128_t* %XMM0 to i8*
  %206 = bitcast %union.vec128_t* %XMM1 to i8*
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = bitcast i8* %205 to double*
  %210 = load double, double* %209, align 1
  %211 = bitcast i8* %206 to double*
  %212 = load double, double* %211, align 1
  %213 = fcmp uno double %210, %212
  br i1 %213, label %214, label %226

; <label>:214:                                    ; preds = %block_402bd3
  %215 = fadd double %210, %212
  %216 = bitcast double %215 to i64
  %217 = and i64 %216, 9221120237041090560
  %218 = icmp eq i64 %217, 9218868437227405312
  %219 = and i64 %216, 2251799813685247
  %220 = icmp ne i64 %219, 0
  %221 = and i1 %218, %220
  br i1 %221, label %222, label %232

; <label>:222:                                    ; preds = %214
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %224 = load i64, i64* %223, align 8, !tbaa !2428
  %225 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %224, %struct.Memory* %MEMORY.3) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:226:                                    ; preds = %block_402bd3
  %227 = fcmp ogt double %210, %212
  br i1 %227, label %232, label %228

; <label>:228:                                    ; preds = %226
  %229 = fcmp olt double %210, %212
  br i1 %229, label %232, label %230

; <label>:230:                                    ; preds = %228
  %231 = fcmp oeq double %210, %212
  br i1 %231, label %232, label %239

; <label>:232:                                    ; preds = %230, %228, %226, %214
  %233 = phi i8 [ 0, %226 ], [ 0, %228 ], [ 1, %230 ], [ 1, %214 ]
  %234 = phi i8 [ 0, %226 ], [ 0, %228 ], [ 0, %230 ], [ 1, %214 ]
  %235 = phi i8 [ 0, %226 ], [ 1, %228 ], [ 0, %230 ], [ 1, %214 ]
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %233, i8* %236, align 1, !tbaa !2451
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %234, i8* %237, align 1, !tbaa !2451
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %235, i8* %238, align 1, !tbaa !2451
  br label %239

; <label>:239:                                    ; preds = %232, %230
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %240, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %241, align 1, !tbaa !2451
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %242, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %222, %239
  %243 = phi %struct.Memory* [ %225, %222 ], [ %MEMORY.3, %239 ]
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 45
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 6
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 6
  store i64 %249, i64* %PC
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %251 = load i8, i8* %250, align 1, !tbaa !2432
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %253 = load i8, i8* %252, align 1, !tbaa !2448
  %254 = or i8 %253, %251
  %255 = icmp ne i8 %254, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %258 = select i1 %255, i64 %245, i64 %247
  store i64 %258, i64* %257, align 8, !tbaa !2428
  %259 = load i8, i8* %BRANCH_TAKEN
  %260 = icmp eq i8 %259, 1
  br i1 %260, label %block_402c21, label %block_402bfa

block_402bfa:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %261 = load i64, i64* %RBP
  %262 = sub i64 %261, 28
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 3
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %262 to i32*
  %266 = load i32, i32* %265
  %267 = zext i32 %266 to i64
  store i64 %267, i64* %RAX, align 8, !tbaa !2428
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 36
  %270 = load i32, i32* %EAX
  %271 = zext i32 %270 to i64
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 3
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %269 to i32*
  store i32 %270, i32* %274
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 16
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %RCX, align 8, !tbaa !2428
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 32
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 4
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %282 to i32*
  %286 = load i32, i32* %285
  %287 = sext i32 %286 to i64
  store i64 %287, i64* %RDX, align 8, !tbaa !2428
  %288 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %289 = load i64, i64* %RCX
  %290 = load i64, i64* %RDX
  %291 = mul i64 %290, 4
  %292 = add i64 %291, %289
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 5
  store i64 %294, i64* %PC
  %295 = inttoptr i64 %292 to float*
  %296 = load float, float* %295
  %297 = fpext float %296 to double
  %298 = bitcast i8* %288 to double*
  store double %297, double* %298, align 1, !tbaa !2455
  %299 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 7
  store i64 %301, i64* %PC
  %302 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %303 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %304 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %305 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %306 = bitcast i8* %299 to float*
  store float %302, float* %306, align 1, !tbaa !2452
  %307 = getelementptr inbounds i8, i8* %299, i64 4
  %308 = bitcast i8* %307 to float*
  store float %303, float* %308, align 1, !tbaa !2452
  %309 = getelementptr inbounds i8, i8* %299, i64 8
  %310 = bitcast i8* %309 to float*
  store float %304, float* %310, align 1, !tbaa !2452
  %311 = getelementptr inbounds i8, i8* %299, i64 12
  %312 = bitcast i8* %311 to float*
  store float %305, float* %312, align 1, !tbaa !2452
  %313 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %314 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %315 = bitcast %union.vec128_t* %XMM1 to i8*
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 4
  store i64 %317, i64* %PC
  %318 = bitcast i8* %314 to i64*
  %319 = load i64, i64* %318, align 1
  %320 = getelementptr inbounds i8, i8* %314, i64 8
  %321 = bitcast i8* %320 to i64*
  %322 = load i64, i64* %321, align 1
  %323 = bitcast i8* %315 to i64*
  %324 = load i64, i64* %323, align 1
  %325 = getelementptr inbounds i8, i8* %315, i64 8
  %326 = bitcast i8* %325 to i64*
  %327 = load i64, i64* %326, align 1
  %328 = and i64 %324, %319
  %329 = and i64 %327, %322
  %330 = trunc i64 %328 to i32
  %331 = lshr i64 %328, 32
  %332 = trunc i64 %331 to i32
  %333 = bitcast i8* %313 to i32*
  store i32 %330, i32* %333, align 1, !tbaa !2454
  %334 = getelementptr inbounds i8, i8* %313, i64 4
  %335 = bitcast i8* %334 to i32*
  store i32 %332, i32* %335, align 1, !tbaa !2454
  %336 = trunc i64 %329 to i32
  %337 = getelementptr inbounds i8, i8* %313, i64 8
  %338 = bitcast i8* %337 to i32*
  store i32 %336, i32* %338, align 1, !tbaa !2454
  %339 = lshr i64 %329, 32
  %340 = trunc i64 %339 to i32
  %341 = getelementptr inbounds i8, i8* %313, i64 12
  %342 = bitcast i8* %341 to i32*
  store i32 %340, i32* %342, align 1, !tbaa !2454
  %343 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %344 = bitcast %union.vec128_t* %XMM0 to i8*
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 4
  store i64 %346, i64* %PC
  %347 = bitcast i8* %343 to <2 x i32>*
  %348 = load <2 x i32>, <2 x i32>* %347, align 1
  %349 = getelementptr inbounds i8, i8* %343, i64 8
  %350 = bitcast i8* %349 to <2 x i32>*
  %351 = load <2 x i32>, <2 x i32>* %350, align 1
  %352 = bitcast i8* %344 to double*
  %353 = load double, double* %352, align 1
  %354 = fptrunc double %353 to float
  %355 = bitcast i8* %343 to float*
  store float %354, float* %355, align 1, !tbaa !2452
  %356 = extractelement <2 x i32> %348, i32 1
  %357 = getelementptr inbounds i8, i8* %343, i64 4
  %358 = bitcast i8* %357 to i32*
  store i32 %356, i32* %358, align 1, !tbaa !2452
  %359 = extractelement <2 x i32> %351, i32 0
  %360 = bitcast i8* %349 to i32*
  store i32 %359, i32* %360, align 1, !tbaa !2452
  %361 = extractelement <2 x i32> %351, i32 1
  %362 = getelementptr inbounds i8, i8* %343, i64 12
  %363 = bitcast i8* %362 to i32*
  store i32 %361, i32* %363, align 1, !tbaa !2452
  %364 = load i64, i64* %RBP
  %365 = sub i64 %364, 24
  %366 = bitcast %union.vec128_t* %XMM0 to i8*
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 5
  store i64 %368, i64* %PC
  %369 = bitcast i8* %366 to <2 x float>*
  %370 = load <2 x float>, <2 x float>* %369, align 1
  %371 = extractelement <2 x float> %370, i32 0
  %372 = inttoptr i64 %365 to float*
  store float %371, float* %372
  br label %block_402c21

block_402cdf:                                     ; preds = %block_402cd9, %block_402b68, %block_402b7e
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_402cd9 ], [ %2, %block_402b7e ], [ %2, %block_402b68 ]
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 4
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 3
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i32*
  %378 = load i32, i32* %377
  %379 = zext i32 %378 to i64
  store i64 %379, i64* %RAX, align 8, !tbaa !2428
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 1
  store i64 %381, i64* %PC
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %383 = load i64, i64* %382, align 8, !tbaa !2428
  %384 = add i64 %383, 8
  %385 = inttoptr i64 %383 to i64*
  %386 = load i64, i64* %385
  store i64 %386, i64* %RBP, align 8, !tbaa !2428
  store i64 %384, i64* %382, align 8, !tbaa !2428
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 1
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %391 = load i64, i64* %390, align 8, !tbaa !2428
  %392 = inttoptr i64 %391 to i64*
  %393 = load i64, i64* %392
  store i64 %393, i64* %389, align 8, !tbaa !2428
  %394 = add i64 %391, 8
  store i64 %394, i64* %390, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402c9a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 28
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 3
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i32*
  %400 = load i32, i32* %399
  %401 = zext i32 %400 to i64
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 36
  %404 = load i32, i32* %EAX
  %405 = zext i32 %404 to i64
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 3
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %403 to i32*
  store i32 %404, i32* %408
  %409 = load i64, i64* %RBP
  %410 = sub i64 %409, 16
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 4
  store i64 %412, i64* %PC
  %413 = inttoptr i64 %410 to i64*
  %414 = load i64, i64* %413
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 28
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 4
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i32*
  %420 = load i32, i32* %419
  %421 = sext i32 %420 to i64
  store i64 %421, i64* %RDX, align 8, !tbaa !2428
  %422 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %423 = load i64, i64* %RCX
  %424 = load i64, i64* %RDX
  %425 = mul i64 %424, 4
  %426 = add i64 %425, %423
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 5
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to float*
  %430 = load float, float* %429
  %431 = fpext float %430 to double
  %432 = bitcast i8* %422 to double*
  store double %431, double* %432, align 1, !tbaa !2455
  %433 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC
  %436 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %437 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %438 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %439 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %440 = bitcast i8* %433 to float*
  store float %436, float* %440, align 1, !tbaa !2452
  %441 = getelementptr inbounds i8, i8* %433, i64 4
  %442 = bitcast i8* %441 to float*
  store float %437, float* %442, align 1, !tbaa !2452
  %443 = getelementptr inbounds i8, i8* %433, i64 8
  %444 = bitcast i8* %443 to float*
  store float %438, float* %444, align 1, !tbaa !2452
  %445 = getelementptr inbounds i8, i8* %433, i64 12
  %446 = bitcast i8* %445 to float*
  store float %439, float* %446, align 1, !tbaa !2452
  %447 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %448 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %449 = bitcast %union.vec128_t* %XMM1 to i8*
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 4
  store i64 %451, i64* %PC
  %452 = bitcast i8* %448 to i64*
  %453 = load i64, i64* %452, align 1
  %454 = getelementptr inbounds i8, i8* %448, i64 8
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 1
  %457 = bitcast i8* %449 to i64*
  %458 = load i64, i64* %457, align 1
  %459 = getelementptr inbounds i8, i8* %449, i64 8
  %460 = bitcast i8* %459 to i64*
  %461 = load i64, i64* %460, align 1
  %462 = and i64 %458, %453
  %463 = and i64 %461, %456
  %464 = trunc i64 %462 to i32
  %465 = lshr i64 %462, 32
  %466 = trunc i64 %465 to i32
  %467 = bitcast i8* %447 to i32*
  store i32 %464, i32* %467, align 1, !tbaa !2454
  %468 = getelementptr inbounds i8, i8* %447, i64 4
  %469 = bitcast i8* %468 to i32*
  store i32 %466, i32* %469, align 1, !tbaa !2454
  %470 = trunc i64 %463 to i32
  %471 = getelementptr inbounds i8, i8* %447, i64 8
  %472 = bitcast i8* %471 to i32*
  store i32 %470, i32* %472, align 1, !tbaa !2454
  %473 = lshr i64 %463, 32
  %474 = trunc i64 %473 to i32
  %475 = getelementptr inbounds i8, i8* %447, i64 12
  %476 = bitcast i8* %475 to i32*
  store i32 %474, i32* %476, align 1, !tbaa !2454
  %477 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %478 = bitcast %union.vec128_t* %XMM0 to i8*
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 4
  store i64 %480, i64* %PC
  %481 = bitcast i8* %477 to <2 x i32>*
  %482 = load <2 x i32>, <2 x i32>* %481, align 1
  %483 = getelementptr inbounds i8, i8* %477, i64 8
  %484 = bitcast i8* %483 to <2 x i32>*
  %485 = load <2 x i32>, <2 x i32>* %484, align 1
  %486 = bitcast i8* %478 to double*
  %487 = load double, double* %486, align 1
  %488 = fptrunc double %487 to float
  %489 = bitcast i8* %477 to float*
  store float %488, float* %489, align 1, !tbaa !2452
  %490 = extractelement <2 x i32> %482, i32 1
  %491 = getelementptr inbounds i8, i8* %477, i64 4
  %492 = bitcast i8* %491 to i32*
  store i32 %490, i32* %492, align 1, !tbaa !2452
  %493 = extractelement <2 x i32> %485, i32 0
  %494 = bitcast i8* %483 to i32*
  store i32 %493, i32* %494, align 1, !tbaa !2452
  %495 = extractelement <2 x i32> %485, i32 1
  %496 = getelementptr inbounds i8, i8* %477, i64 12
  %497 = bitcast i8* %496 to i32*
  store i32 %495, i32* %497, align 1, !tbaa !2452
  %498 = load i64, i64* %RBP
  %499 = sub i64 %498, 24
  %500 = bitcast %union.vec128_t* %XMM0 to i8*
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 5
  store i64 %502, i64* %PC
  %503 = bitcast i8* %500 to <2 x float>*
  %504 = load <2 x float>, <2 x float>* %503, align 1
  %505 = extractelement <2 x float> %504, i32 0
  %506 = inttoptr i64 %499 to float*
  store float %505, float* %506
  br label %block_402cc1

block_402cd4:                                     ; preds = %block_402c67
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 5
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 5
  store i64 %510, i64* %PC
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %508, i64* %511, align 8, !tbaa !2428
  br label %block_402cd9

block_402c73:                                     ; preds = %block_402c67
  %512 = load i64, i64* %RBP
  %513 = sub i64 %512, 16
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 4
  store i64 %515, i64* %PC
  %516 = inttoptr i64 %513 to i64*
  %517 = load i64, i64* %516
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = load i64, i64* %RBP
  %519 = sub i64 %518, 28
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 4
  store i64 %521, i64* %PC
  %522 = inttoptr i64 %519 to i32*
  %523 = load i32, i32* %522
  %524 = sext i32 %523 to i64
  store i64 %524, i64* %RCX, align 8, !tbaa !2428
  %525 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %RCX
  %528 = mul i64 %527, 4
  %529 = add i64 %528, %526
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 5
  store i64 %531, i64* %PC
  %532 = inttoptr i64 %529 to float*
  %533 = load float, float* %532
  %534 = fpext float %533 to double
  %535 = bitcast i8* %525 to double*
  store double %534, double* %535, align 1, !tbaa !2455
  %536 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 7
  store i64 %538, i64* %PC
  %539 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %540 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %541 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %542 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %543 = bitcast i8* %536 to float*
  store float %539, float* %543, align 1, !tbaa !2452
  %544 = getelementptr inbounds i8, i8* %536, i64 4
  %545 = bitcast i8* %544 to float*
  store float %540, float* %545, align 1, !tbaa !2452
  %546 = getelementptr inbounds i8, i8* %536, i64 8
  %547 = bitcast i8* %546 to float*
  store float %541, float* %547, align 1, !tbaa !2452
  %548 = getelementptr inbounds i8, i8* %536, i64 12
  %549 = bitcast i8* %548 to float*
  store float %542, float* %549, align 1, !tbaa !2452
  %550 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %551 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %552 = bitcast %union.vec128_t* %XMM1 to i8*
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 4
  store i64 %554, i64* %PC
  %555 = bitcast i8* %551 to i64*
  %556 = load i64, i64* %555, align 1
  %557 = getelementptr inbounds i8, i8* %551, i64 8
  %558 = bitcast i8* %557 to i64*
  %559 = load i64, i64* %558, align 1
  %560 = bitcast i8* %552 to i64*
  %561 = load i64, i64* %560, align 1
  %562 = getelementptr inbounds i8, i8* %552, i64 8
  %563 = bitcast i8* %562 to i64*
  %564 = load i64, i64* %563, align 1
  %565 = and i64 %561, %556
  %566 = and i64 %564, %559
  %567 = trunc i64 %565 to i32
  %568 = lshr i64 %565, 32
  %569 = trunc i64 %568 to i32
  %570 = bitcast i8* %550 to i32*
  store i32 %567, i32* %570, align 1, !tbaa !2454
  %571 = getelementptr inbounds i8, i8* %550, i64 4
  %572 = bitcast i8* %571 to i32*
  store i32 %569, i32* %572, align 1, !tbaa !2454
  %573 = trunc i64 %566 to i32
  %574 = getelementptr inbounds i8, i8* %550, i64 8
  %575 = bitcast i8* %574 to i32*
  store i32 %573, i32* %575, align 1, !tbaa !2454
  %576 = lshr i64 %566, 32
  %577 = trunc i64 %576 to i32
  %578 = getelementptr inbounds i8, i8* %550, i64 12
  %579 = bitcast i8* %578 to i32*
  store i32 %577, i32* %579, align 1, !tbaa !2454
  %580 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %581 = load i64, i64* %RBP
  %582 = sub i64 %581, 24
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 5
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %582 to float*
  %586 = load float, float* %585
  %587 = fpext float %586 to double
  %588 = bitcast i8* %580 to double*
  store double %587, double* %588, align 1, !tbaa !2455
  %589 = bitcast %union.vec128_t* %XMM0 to i8*
  %590 = bitcast %union.vec128_t* %XMM1 to i8*
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 4
  store i64 %592, i64* %PC
  %593 = bitcast i8* %589 to double*
  %594 = load double, double* %593, align 1
  %595 = bitcast i8* %590 to double*
  %596 = load double, double* %595, align 1
  %597 = fcmp uno double %594, %596
  br i1 %597, label %598, label %610

; <label>:598:                                    ; preds = %block_402c73
  %599 = fadd double %594, %596
  %600 = bitcast double %599 to i64
  %601 = and i64 %600, 9221120237041090560
  %602 = icmp eq i64 %601, 9218868437227405312
  %603 = and i64 %600, 2251799813685247
  %604 = icmp ne i64 %603, 0
  %605 = and i1 %602, %604
  br i1 %605, label %606, label %616

; <label>:606:                                    ; preds = %598
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %608 = load i64, i64* %607, align 8, !tbaa !2428
  %609 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %608, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:610:                                    ; preds = %block_402c73
  %611 = fcmp ogt double %594, %596
  br i1 %611, label %616, label %612

; <label>:612:                                    ; preds = %610
  %613 = fcmp olt double %594, %596
  br i1 %613, label %616, label %614

; <label>:614:                                    ; preds = %612
  %615 = fcmp oeq double %594, %596
  br i1 %615, label %616, label %623

; <label>:616:                                    ; preds = %614, %612, %610, %598
  %617 = phi i8 [ 0, %610 ], [ 0, %612 ], [ 1, %614 ], [ 1, %598 ]
  %618 = phi i8 [ 0, %610 ], [ 0, %612 ], [ 0, %614 ], [ 1, %598 ]
  %619 = phi i8 [ 0, %610 ], [ 1, %612 ], [ 0, %614 ], [ 1, %598 ]
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %617, i8* %620, align 1, !tbaa !2451
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %618, i8* %621, align 1, !tbaa !2451
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %619, i8* %622, align 1, !tbaa !2451
  br label %623

; <label>:623:                                    ; preds = %616, %614
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %624, align 1, !tbaa !2451
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %625, align 1, !tbaa !2451
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %626, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %606, %623
  %627 = phi %struct.Memory* [ %609, %606 ], [ %MEMORY.1, %623 ]
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 45
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 6
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 6
  store i64 %633, i64* %PC
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %635 = load i8, i8* %634, align 1, !tbaa !2432
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %637 = load i8, i8* %636, align 1, !tbaa !2448
  %638 = or i8 %637, %635
  %639 = icmp ne i8 %638, 0
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %642 = select i1 %639, i64 %629, i64 %631
  store i64 %642, i64* %641, align 8, !tbaa !2428
  %643 = load i8, i8* %BRANCH_TAKEN
  %644 = icmp eq i8 %643, 1
  br i1 %644, label %block_402cc1, label %block_402c9a

block_402b7e:                                     ; preds = %block_402b74
  %645 = sub i64 %1194, 4
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 7
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %645 to i32*
  store i32 0, i32* %648
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 346
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 5
  store i64 %652, i64* %PC
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %650, i64* %653, align 8, !tbaa !2428
  br label %block_402cdf

block_402c3d:                                     ; preds = %block_402b8a
  %654 = sub i64 %1013, 36
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 7
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i32*
  store i32 0, i32* %657
  %658 = load i64, i64* %RBP
  %659 = sub i64 %658, 16
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 4
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %659 to i64*
  %663 = load i64, i64* %662
  store i64 %663, i64* %RAX, align 8, !tbaa !2428
  %664 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %665 = load i64, i64* %RAX
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 4
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %665 to float*
  %669 = load float, float* %668
  %670 = fpext float %669 to double
  %671 = bitcast i8* %664 to double*
  store double %670, double* %671, align 1, !tbaa !2455
  %672 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 7
  store i64 %674, i64* %PC
  %675 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %676 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %677 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %678 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %679 = bitcast i8* %672 to float*
  store float %675, float* %679, align 1, !tbaa !2452
  %680 = getelementptr inbounds i8, i8* %672, i64 4
  %681 = bitcast i8* %680 to float*
  store float %676, float* %681, align 1, !tbaa !2452
  %682 = getelementptr inbounds i8, i8* %672, i64 8
  %683 = bitcast i8* %682 to float*
  store float %677, float* %683, align 1, !tbaa !2452
  %684 = getelementptr inbounds i8, i8* %672, i64 12
  %685 = bitcast i8* %684 to float*
  store float %678, float* %685, align 1, !tbaa !2452
  %686 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %687 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %688 = bitcast %union.vec128_t* %XMM1 to i8*
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 4
  store i64 %690, i64* %PC
  %691 = bitcast i8* %687 to i64*
  %692 = load i64, i64* %691, align 1
  %693 = getelementptr inbounds i8, i8* %687, i64 8
  %694 = bitcast i8* %693 to i64*
  %695 = load i64, i64* %694, align 1
  %696 = bitcast i8* %688 to i64*
  %697 = load i64, i64* %696, align 1
  %698 = getelementptr inbounds i8, i8* %688, i64 8
  %699 = bitcast i8* %698 to i64*
  %700 = load i64, i64* %699, align 1
  %701 = and i64 %697, %692
  %702 = and i64 %700, %695
  %703 = trunc i64 %701 to i32
  %704 = lshr i64 %701, 32
  %705 = trunc i64 %704 to i32
  %706 = bitcast i8* %686 to i32*
  store i32 %703, i32* %706, align 1, !tbaa !2454
  %707 = getelementptr inbounds i8, i8* %686, i64 4
  %708 = bitcast i8* %707 to i32*
  store i32 %705, i32* %708, align 1, !tbaa !2454
  %709 = trunc i64 %702 to i32
  %710 = getelementptr inbounds i8, i8* %686, i64 8
  %711 = bitcast i8* %710 to i32*
  store i32 %709, i32* %711, align 1, !tbaa !2454
  %712 = lshr i64 %702, 32
  %713 = trunc i64 %712 to i32
  %714 = getelementptr inbounds i8, i8* %686, i64 12
  %715 = bitcast i8* %714 to i32*
  store i32 %713, i32* %715, align 1, !tbaa !2454
  %716 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %717 = bitcast %union.vec128_t* %XMM0 to i8*
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = bitcast i8* %716 to <2 x i32>*
  %721 = load <2 x i32>, <2 x i32>* %720, align 1
  %722 = getelementptr inbounds i8, i8* %716, i64 8
  %723 = bitcast i8* %722 to <2 x i32>*
  %724 = load <2 x i32>, <2 x i32>* %723, align 1
  %725 = bitcast i8* %717 to double*
  %726 = load double, double* %725, align 1
  %727 = fptrunc double %726 to float
  %728 = bitcast i8* %716 to float*
  store float %727, float* %728, align 1, !tbaa !2452
  %729 = extractelement <2 x i32> %721, i32 1
  %730 = getelementptr inbounds i8, i8* %716, i64 4
  %731 = bitcast i8* %730 to i32*
  store i32 %729, i32* %731, align 1, !tbaa !2452
  %732 = extractelement <2 x i32> %724, i32 0
  %733 = bitcast i8* %722 to i32*
  store i32 %732, i32* %733, align 1, !tbaa !2452
  %734 = extractelement <2 x i32> %724, i32 1
  %735 = getelementptr inbounds i8, i8* %716, i64 12
  %736 = bitcast i8* %735 to i32*
  store i32 %734, i32* %736, align 1, !tbaa !2452
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 24
  %739 = bitcast %union.vec128_t* %XMM0 to i8*
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 5
  store i64 %741, i64* %PC
  %742 = bitcast i8* %739 to <2 x float>*
  %743 = load <2 x float>, <2 x float>* %742, align 1
  %744 = extractelement <2 x float> %743, i32 0
  %745 = inttoptr i64 %738 to float*
  store float %744, float* %745
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 28
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 7
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i32*
  store i32 1, i32* %750
  br label %block_402c67

block_402b94:                                     ; preds = %block_402b8a
  %751 = sub i64 %1013, 32
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 7
  store i64 %753, i64* %PC
  %754 = inttoptr i64 %751 to i32*
  store i32 1, i32* %754
  %755 = load i64, i64* %RBP
  %756 = sub i64 %755, 16
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 4
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %756 to i64*
  %760 = load i64, i64* %759
  store i64 %760, i64* %RAX, align 8, !tbaa !2428
  %761 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %762 = load i64, i64* %RAX
  %763 = load i64, i64* %PC
  %764 = add i64 %763, 4
  store i64 %764, i64* %PC
  %765 = inttoptr i64 %762 to float*
  %766 = load float, float* %765
  %767 = fpext float %766 to double
  %768 = bitcast i8* %761 to double*
  store double %767, double* %768, align 1, !tbaa !2455
  %769 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 7
  store i64 %771, i64* %PC
  %772 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to float*)
  %773 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to float*)
  %774 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to float*)
  %775 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to float*)
  %776 = bitcast i8* %769 to float*
  store float %772, float* %776, align 1, !tbaa !2452
  %777 = getelementptr inbounds i8, i8* %769, i64 4
  %778 = bitcast i8* %777 to float*
  store float %773, float* %778, align 1, !tbaa !2452
  %779 = getelementptr inbounds i8, i8* %769, i64 8
  %780 = bitcast i8* %779 to float*
  store float %774, float* %780, align 1, !tbaa !2452
  %781 = getelementptr inbounds i8, i8* %769, i64 12
  %782 = bitcast i8* %781 to float*
  store float %775, float* %782, align 1, !tbaa !2452
  %783 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %784 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %785 = bitcast %union.vec128_t* %XMM1 to i8*
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 4
  store i64 %787, i64* %PC
  %788 = bitcast i8* %784 to i64*
  %789 = load i64, i64* %788, align 1
  %790 = getelementptr inbounds i8, i8* %784, i64 8
  %791 = bitcast i8* %790 to i64*
  %792 = load i64, i64* %791, align 1
  %793 = bitcast i8* %785 to i64*
  %794 = load i64, i64* %793, align 1
  %795 = getelementptr inbounds i8, i8* %785, i64 8
  %796 = bitcast i8* %795 to i64*
  %797 = load i64, i64* %796, align 1
  %798 = and i64 %794, %789
  %799 = and i64 %797, %792
  %800 = trunc i64 %798 to i32
  %801 = lshr i64 %798, 32
  %802 = trunc i64 %801 to i32
  %803 = bitcast i8* %783 to i32*
  store i32 %800, i32* %803, align 1, !tbaa !2454
  %804 = getelementptr inbounds i8, i8* %783, i64 4
  %805 = bitcast i8* %804 to i32*
  store i32 %802, i32* %805, align 1, !tbaa !2454
  %806 = trunc i64 %799 to i32
  %807 = getelementptr inbounds i8, i8* %783, i64 8
  %808 = bitcast i8* %807 to i32*
  store i32 %806, i32* %808, align 1, !tbaa !2454
  %809 = lshr i64 %799, 32
  %810 = trunc i64 %809 to i32
  %811 = getelementptr inbounds i8, i8* %783, i64 12
  %812 = bitcast i8* %811 to i32*
  store i32 %810, i32* %812, align 1, !tbaa !2454
  %813 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %814 = bitcast %union.vec128_t* %XMM0 to i8*
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC
  %817 = bitcast i8* %813 to <2 x i32>*
  %818 = load <2 x i32>, <2 x i32>* %817, align 1
  %819 = getelementptr inbounds i8, i8* %813, i64 8
  %820 = bitcast i8* %819 to <2 x i32>*
  %821 = load <2 x i32>, <2 x i32>* %820, align 1
  %822 = bitcast i8* %814 to double*
  %823 = load double, double* %822, align 1
  %824 = fptrunc double %823 to float
  %825 = bitcast i8* %813 to float*
  store float %824, float* %825, align 1, !tbaa !2452
  %826 = extractelement <2 x i32> %818, i32 1
  %827 = getelementptr inbounds i8, i8* %813, i64 4
  %828 = bitcast i8* %827 to i32*
  store i32 %826, i32* %828, align 1, !tbaa !2452
  %829 = extractelement <2 x i32> %821, i32 0
  %830 = bitcast i8* %819 to i32*
  store i32 %829, i32* %830, align 1, !tbaa !2452
  %831 = extractelement <2 x i32> %821, i32 1
  %832 = getelementptr inbounds i8, i8* %813, i64 12
  %833 = bitcast i8* %832 to i32*
  store i32 %831, i32* %833, align 1, !tbaa !2452
  %834 = load i64, i64* %RBP
  %835 = sub i64 %834, 24
  %836 = bitcast %union.vec128_t* %XMM0 to i8*
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 5
  store i64 %838, i64* %PC
  %839 = bitcast i8* %836 to <2 x float>*
  %840 = load <2 x float>, <2 x float>* %839, align 1
  %841 = extractelement <2 x float> %840, i32 0
  %842 = inttoptr i64 %835 to float*
  store float %841, float* %842
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 32
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  %847 = inttoptr i64 %844 to i32*
  %848 = load i32, i32* %847
  %849 = zext i32 %848 to i64
  store i64 %849, i64* %RCX, align 8, !tbaa !2428
  %850 = load i64, i64* %RCX
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 20
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 3
  store i64 %854, i64* %PC
  %855 = trunc i64 %850 to i32
  %856 = inttoptr i64 %852 to i32*
  %857 = load i32, i32* %856
  %858 = add i32 %857, %855
  %859 = zext i32 %858 to i64
  store i64 %859, i64* %RCX, align 8, !tbaa !2428
  %860 = icmp ult i32 %858, %855
  %861 = icmp ult i32 %858, %857
  %862 = or i1 %860, %861
  %863 = zext i1 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %863, i8* %864, align 1, !tbaa !2432
  %865 = and i32 %858, 255
  %866 = call i32 @llvm.ctpop.i32(i32 %865) #16
  %867 = trunc i32 %866 to i8
  %868 = and i8 %867, 1
  %869 = xor i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %869, i8* %870, align 1, !tbaa !2446
  %871 = xor i32 %857, %855
  %872 = xor i32 %871, %858
  %873 = lshr i32 %872, 4
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %875, i8* %876, align 1, !tbaa !2447
  %877 = icmp eq i32 %858, 0
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %878, i8* %879, align 1, !tbaa !2448
  %880 = lshr i32 %858, 31
  %881 = trunc i32 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %881, i8* %882, align 1, !tbaa !2449
  %883 = lshr i32 %855, 31
  %884 = lshr i32 %857, 31
  %885 = xor i32 %880, %883
  %886 = xor i32 %880, %884
  %887 = add nuw nsw i32 %885, %886
  %888 = icmp eq i32 %887, 2
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %889, i8* %890, align 1, !tbaa !2450
  %891 = load i64, i64* %RBP
  %892 = sub i64 %891, 32
  %893 = load i32, i32* %ECX
  %894 = zext i32 %893 to i64
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 3
  store i64 %896, i64* %PC
  %897 = inttoptr i64 %892 to i32*
  store i32 %893, i32* %897
  %898 = load i64, i64* %RBP
  %899 = sub i64 %898, 28
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 7
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i32*
  store i32 1, i32* %902
  br label %block_402bc7

block_402c67:                                     ; preds = %block_402cc1, %block_402c3d
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_402c3d ], [ %MEMORY.2, %block_402cc1 ]
  %903 = load i64, i64* %RBP
  %904 = sub i64 %903, 28
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 3
  store i64 %906, i64* %PC
  %907 = inttoptr i64 %904 to i32*
  %908 = load i32, i32* %907
  %909 = zext i32 %908 to i64
  store i64 %909, i64* %RAX, align 8, !tbaa !2428
  %910 = load i32, i32* %EAX
  %911 = zext i32 %910 to i64
  %912 = load i64, i64* %RBP
  %913 = sub i64 %912, 8
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 3
  store i64 %915, i64* %PC
  %916 = inttoptr i64 %913 to i32*
  %917 = load i32, i32* %916
  %918 = sub i32 %910, %917
  %919 = icmp ult i32 %910, %917
  %920 = zext i1 %919 to i8
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %920, i8* %921, align 1, !tbaa !2432
  %922 = and i32 %918, 255
  %923 = call i32 @llvm.ctpop.i32(i32 %922) #16
  %924 = trunc i32 %923 to i8
  %925 = and i8 %924, 1
  %926 = xor i8 %925, 1
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %926, i8* %927, align 1, !tbaa !2446
  %928 = xor i32 %917, %910
  %929 = xor i32 %928, %918
  %930 = lshr i32 %929, 4
  %931 = trunc i32 %930 to i8
  %932 = and i8 %931, 1
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %932, i8* %933, align 1, !tbaa !2447
  %934 = icmp eq i32 %918, 0
  %935 = zext i1 %934 to i8
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %935, i8* %936, align 1, !tbaa !2448
  %937 = lshr i32 %918, 31
  %938 = trunc i32 %937 to i8
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %938, i8* %939, align 1, !tbaa !2449
  %940 = lshr i32 %910, 31
  %941 = lshr i32 %917, 31
  %942 = xor i32 %941, %940
  %943 = xor i32 %937, %940
  %944 = add nuw nsw i32 %943, %942
  %945 = icmp eq i32 %944, 2
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %946, i8* %947, align 1, !tbaa !2450
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 103
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 6
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 6
  store i64 %953, i64* %PC
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %955 = load i8, i8* %954, align 1, !tbaa !2449
  %956 = icmp ne i8 %955, 0
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %958 = load i8, i8* %957, align 1, !tbaa !2450
  %959 = icmp ne i8 %958, 0
  %960 = xor i1 %956, %959
  %961 = xor i1 %960, true
  %962 = zext i1 %961 to i8
  store i8 %962, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %964 = select i1 %960, i64 %951, i64 %949
  store i64 %964, i64* %963, align 8, !tbaa !2428
  %965 = load i8, i8* %BRANCH_TAKEN
  %966 = icmp eq i8 %965, 1
  br i1 %966, label %block_402cd4, label %block_402c73

block_402b8a:                                     ; preds = %block_402b74
  %967 = sub i64 %1194, 20
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 4
  store i64 %969, i64* %PC
  %970 = inttoptr i64 %967 to i32*
  %971 = load i32, i32* %970
  %972 = sub i32 %971, 1
  %973 = icmp ult i32 %971, 1
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %974, i8* %975, align 1, !tbaa !2432
  %976 = and i32 %972, 255
  %977 = call i32 @llvm.ctpop.i32(i32 %976) #16
  %978 = trunc i32 %977 to i8
  %979 = and i8 %978, 1
  %980 = xor i8 %979, 1
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %980, i8* %981, align 1, !tbaa !2446
  %982 = xor i32 %971, 1
  %983 = xor i32 %982, %972
  %984 = lshr i32 %983, 4
  %985 = trunc i32 %984 to i8
  %986 = and i8 %985, 1
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %986, i8* %987, align 1, !tbaa !2447
  %988 = icmp eq i32 %972, 0
  %989 = zext i1 %988 to i8
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %989, i8* %990, align 1, !tbaa !2448
  %991 = lshr i32 %972, 31
  %992 = trunc i32 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %992, i8* %993, align 1, !tbaa !2449
  %994 = lshr i32 %971, 31
  %995 = xor i32 %991, %994
  %996 = add nuw nsw i32 %995, %994
  %997 = icmp eq i32 %996, 2
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %998, i8* %999, align 1, !tbaa !2450
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 175
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 6
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 6
  store i64 %1005, i64* %PC
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1007 = load i8, i8* %1006, align 1, !tbaa !2448
  store i8 %1007, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1009 = icmp ne i8 %1007, 0
  %1010 = select i1 %1009, i64 %1001, i64 %1003
  store i64 %1010, i64* %1008, align 8, !tbaa !2428
  %1011 = load i8, i8* %BRANCH_TAKEN
  %1012 = icmp eq i8 %1011, 1
  %1013 = load i64, i64* %RBP
  br i1 %1012, label %block_402c3d, label %block_402b94

block_402cc1:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402c9a
  %MEMORY.2 = phi %struct.Memory* [ %627, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %627, %block_402c9a ]
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 5
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 5
  store i64 %1017, i64* %PC
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1015, i64* %1018, align 8, !tbaa !2428
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 28
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 3
  store i64 %1022, i64* %PC
  %1023 = inttoptr i64 %1020 to i32*
  %1024 = load i32, i32* %1023
  %1025 = zext i32 %1024 to i64
  store i64 %1025, i64* %RAX, align 8, !tbaa !2428
  %1026 = load i64, i64* %RAX
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 3
  store i64 %1028, i64* %PC
  %1029 = trunc i64 %1026 to i32
  %1030 = add i32 1, %1029
  %1031 = zext i32 %1030 to i64
  store i64 %1031, i64* %RAX, align 8, !tbaa !2428
  %1032 = icmp ult i32 %1030, %1029
  %1033 = icmp ult i32 %1030, 1
  %1034 = or i1 %1032, %1033
  %1035 = zext i1 %1034 to i8
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1035, i8* %1036, align 1, !tbaa !2432
  %1037 = and i32 %1030, 255
  %1038 = call i32 @llvm.ctpop.i32(i32 %1037) #16
  %1039 = trunc i32 %1038 to i8
  %1040 = and i8 %1039, 1
  %1041 = xor i8 %1040, 1
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1041, i8* %1042, align 1, !tbaa !2446
  %1043 = xor i64 1, %1026
  %1044 = trunc i64 %1043 to i32
  %1045 = xor i32 %1044, %1030
  %1046 = lshr i32 %1045, 4
  %1047 = trunc i32 %1046 to i8
  %1048 = and i8 %1047, 1
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1048, i8* %1049, align 1, !tbaa !2447
  %1050 = icmp eq i32 %1030, 0
  %1051 = zext i1 %1050 to i8
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1051, i8* %1052, align 1, !tbaa !2448
  %1053 = lshr i32 %1030, 31
  %1054 = trunc i32 %1053 to i8
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1054, i8* %1055, align 1, !tbaa !2449
  %1056 = lshr i32 %1029, 31
  %1057 = xor i32 %1053, %1056
  %1058 = add nuw nsw i32 %1057, %1053
  %1059 = icmp eq i32 %1058, 2
  %1060 = zext i1 %1059 to i8
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1060, i8* %1061, align 1, !tbaa !2450
  %1062 = load i64, i64* %RBP
  %1063 = sub i64 %1062, 28
  %1064 = load i32, i32* %EAX
  %1065 = zext i32 %1064 to i64
  %1066 = load i64, i64* %PC
  %1067 = add i64 %1066, 3
  store i64 %1067, i64* %PC
  %1068 = inttoptr i64 %1063 to i32*
  store i32 %1064, i32* %1068
  %1069 = load i64, i64* %PC
  %1070 = sub i64 %1069, 104
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 5
  store i64 %1072, i64* %PC
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1070, i64* %1073, align 8, !tbaa !2428
  br label %block_402c67

block_402b68:                                     ; preds = %block_402b50
  %1074 = sub i64 %127, 4
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 7
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to i32*
  store i32 -1, i32* %1077
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 368
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 5
  store i64 %1081, i64* %PC
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1079, i64* %1082, align 8, !tbaa !2428
  br label %block_402cdf

block_402bc7:                                     ; preds = %block_402c21, %block_402b94
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402b94 ], [ %MEMORY.5, %block_402c21 ]
  %1083 = load i64, i64* %RBP
  %1084 = sub i64 %1083, 28
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 3
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1084 to i32*
  %1088 = load i32, i32* %1087
  %1089 = zext i32 %1088 to i64
  store i64 %1089, i64* %RAX, align 8, !tbaa !2428
  %1090 = load i32, i32* %EAX
  %1091 = zext i32 %1090 to i64
  %1092 = load i64, i64* %RBP
  %1093 = sub i64 %1092, 8
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 3
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1093 to i32*
  %1097 = load i32, i32* %1096
  %1098 = sub i32 %1090, %1097
  %1099 = icmp ult i32 %1090, %1097
  %1100 = zext i1 %1099 to i8
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1100, i8* %1101, align 1, !tbaa !2432
  %1102 = and i32 %1098, 255
  %1103 = call i32 @llvm.ctpop.i32(i32 %1102) #16
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  %1106 = xor i8 %1105, 1
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1106, i8* %1107, align 1, !tbaa !2446
  %1108 = xor i32 %1097, %1090
  %1109 = xor i32 %1108, %1098
  %1110 = lshr i32 %1109, 4
  %1111 = trunc i32 %1110 to i8
  %1112 = and i8 %1111, 1
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1112, i8* %1113, align 1, !tbaa !2447
  %1114 = icmp eq i32 %1098, 0
  %1115 = zext i1 %1114 to i8
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1115, i8* %1116, align 1, !tbaa !2448
  %1117 = lshr i32 %1098, 31
  %1118 = trunc i32 %1117 to i8
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1118, i8* %1119, align 1, !tbaa !2449
  %1120 = lshr i32 %1090, 31
  %1121 = lshr i32 %1097, 31
  %1122 = xor i32 %1121, %1120
  %1123 = xor i32 %1117, %1120
  %1124 = add nuw nsw i32 %1123, %1122
  %1125 = icmp eq i32 %1124, 2
  %1126 = zext i1 %1125 to i8
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1126, i8* %1127, align 1, !tbaa !2450
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 107
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 6
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 6
  store i64 %1133, i64* %PC
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1135 = load i8, i8* %1134, align 1, !tbaa !2449
  %1136 = icmp ne i8 %1135, 0
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1138 = load i8, i8* %1137, align 1, !tbaa !2450
  %1139 = icmp ne i8 %1138, 0
  %1140 = xor i1 %1136, %1139
  %1141 = xor i1 %1140, true
  %1142 = zext i1 %1141 to i8
  store i8 %1142, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1144 = select i1 %1140, i64 %1131, i64 %1129
  store i64 %1144, i64* %1143, align 8, !tbaa !2428
  %1145 = load i8, i8* %BRANCH_TAKEN
  %1146 = icmp eq i8 %1145, 1
  br i1 %1146, label %block_402c38, label %block_402bd3

block_402b74:                                     ; preds = %block_402b50
  %1147 = sub i64 %127, 8
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 4
  store i64 %1149, i64* %PC
  %1150 = inttoptr i64 %1147 to i32*
  %1151 = load i32, i32* %1150
  %1152 = sub i32 %1151, 1
  %1153 = icmp ult i32 %1151, 1
  %1154 = zext i1 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1154, i8* %1155, align 1, !tbaa !2432
  %1156 = and i32 %1152, 255
  %1157 = call i32 @llvm.ctpop.i32(i32 %1156) #16
  %1158 = trunc i32 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = xor i8 %1159, 1
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1160, i8* %1161, align 1, !tbaa !2446
  %1162 = xor i32 %1151, 1
  %1163 = xor i32 %1162, %1152
  %1164 = lshr i32 %1163, 4
  %1165 = trunc i32 %1164 to i8
  %1166 = and i8 %1165, 1
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1166, i8* %1167, align 1, !tbaa !2447
  %1168 = icmp eq i32 %1152, 0
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1169, i8* %1170, align 1, !tbaa !2448
  %1171 = lshr i32 %1152, 31
  %1172 = trunc i32 %1171 to i8
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1172, i8* %1173, align 1, !tbaa !2449
  %1174 = lshr i32 %1151, 31
  %1175 = xor i32 %1171, %1174
  %1176 = add nuw nsw i32 %1175, %1174
  %1177 = icmp eq i32 %1176, 2
  %1178 = zext i1 %1177 to i8
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1178, i8* %1179, align 1, !tbaa !2450
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 18
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 6
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 6
  store i64 %1185, i64* %PC
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1187 = load i8, i8* %1186, align 1, !tbaa !2448
  %1188 = icmp eq i8 %1187, 0
  %1189 = zext i1 %1188 to i8
  store i8 %1189, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1191 = select i1 %1188, i64 %1181, i64 %1183
  store i64 %1191, i64* %1190, align 8, !tbaa !2428
  %1192 = load i8, i8* %BRANCH_TAKEN
  %1193 = icmp eq i8 %1192, 1
  %1194 = load i64, i64* %RBP
  br i1 %1193, label %block_402b8a, label %block_402b7e

block_402cd9:                                     ; preds = %block_402c38, %block_402cd4
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.1, %block_402cd4 ], [ %MEMORY.3, %block_402c38 ]
  %1195 = load i64, i64* %RBP
  %1196 = sub i64 %1195, 36
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 3
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1196 to i32*
  %1200 = load i32, i32* %1199
  %1201 = zext i32 %1200 to i64
  store i64 %1201, i64* %RAX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RBP
  %1203 = sub i64 %1202, 4
  %1204 = load i32, i32* %EAX
  %1205 = zext i32 %1204 to i64
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 3
  store i64 %1207, i64* %PC
  %1208 = inttoptr i64 %1203 to i32*
  store i32 %1204, i32* %1208
  br label %block_402cdf

block_402c38:                                     ; preds = %block_402bc7
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 161
  %1211 = load i64, i64* %PC
  %1212 = add i64 %1211, 5
  store i64 %1212, i64* %PC
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1210, i64* %1213, align 8, !tbaa !2428
  br label %block_402cd9

block_402c21:                                     ; preds = %block_402bfa, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %MEMORY.5 = phi %struct.Memory* [ %243, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %243, %block_402bfa ]
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 32
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 3
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1215 to i32*
  %1219 = load i32, i32* %1218
  %1220 = zext i32 %1219 to i64
  store i64 %1220, i64* %RAX, align 8, !tbaa !2428
  %1221 = load i64, i64* %RAX
  %1222 = load i64, i64* %RBP
  %1223 = sub i64 %1222, 20
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 3
  store i64 %1225, i64* %PC
  %1226 = trunc i64 %1221 to i32
  %1227 = inttoptr i64 %1223 to i32*
  %1228 = load i32, i32* %1227
  %1229 = add i32 %1228, %1226
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %RAX, align 8, !tbaa !2428
  %1231 = icmp ult i32 %1229, %1226
  %1232 = icmp ult i32 %1229, %1228
  %1233 = or i1 %1231, %1232
  %1234 = zext i1 %1233 to i8
  %1235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1234, i8* %1235, align 1, !tbaa !2432
  %1236 = and i32 %1229, 255
  %1237 = call i32 @llvm.ctpop.i32(i32 %1236) #16
  %1238 = trunc i32 %1237 to i8
  %1239 = and i8 %1238, 1
  %1240 = xor i8 %1239, 1
  %1241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1240, i8* %1241, align 1, !tbaa !2446
  %1242 = xor i32 %1228, %1226
  %1243 = xor i32 %1242, %1229
  %1244 = lshr i32 %1243, 4
  %1245 = trunc i32 %1244 to i8
  %1246 = and i8 %1245, 1
  %1247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1246, i8* %1247, align 1, !tbaa !2447
  %1248 = icmp eq i32 %1229, 0
  %1249 = zext i1 %1248 to i8
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1249, i8* %1250, align 1, !tbaa !2448
  %1251 = lshr i32 %1229, 31
  %1252 = trunc i32 %1251 to i8
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1252, i8* %1253, align 1, !tbaa !2449
  %1254 = lshr i32 %1226, 31
  %1255 = lshr i32 %1228, 31
  %1256 = xor i32 %1251, %1254
  %1257 = xor i32 %1251, %1255
  %1258 = add nuw nsw i32 %1256, %1257
  %1259 = icmp eq i32 %1258, 2
  %1260 = zext i1 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1260, i8* %1261, align 1, !tbaa !2450
  %1262 = load i64, i64* %RBP
  %1263 = sub i64 %1262, 32
  %1264 = load i32, i32* %EAX
  %1265 = zext i32 %1264 to i64
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 3
  store i64 %1267, i64* %PC
  %1268 = inttoptr i64 %1263 to i32*
  store i32 %1264, i32* %1268
  %1269 = load i64, i64* %RBP
  %1270 = sub i64 %1269, 28
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 3
  store i64 %1272, i64* %PC
  %1273 = inttoptr i64 %1270 to i32*
  %1274 = load i32, i32* %1273
  %1275 = zext i32 %1274 to i64
  store i64 %1275, i64* %RAX, align 8, !tbaa !2428
  %1276 = load i64, i64* %RAX
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 3
  store i64 %1278, i64* %PC
  %1279 = trunc i64 %1276 to i32
  %1280 = add i32 1, %1279
  %1281 = zext i32 %1280 to i64
  store i64 %1281, i64* %RAX, align 8, !tbaa !2428
  %1282 = icmp ult i32 %1280, %1279
  %1283 = icmp ult i32 %1280, 1
  %1284 = or i1 %1282, %1283
  %1285 = zext i1 %1284 to i8
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1285, i8* %1286, align 1, !tbaa !2432
  %1287 = and i32 %1280, 255
  %1288 = call i32 @llvm.ctpop.i32(i32 %1287) #16
  %1289 = trunc i32 %1288 to i8
  %1290 = and i8 %1289, 1
  %1291 = xor i8 %1290, 1
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1291, i8* %1292, align 1, !tbaa !2446
  %1293 = xor i64 1, %1276
  %1294 = trunc i64 %1293 to i32
  %1295 = xor i32 %1294, %1280
  %1296 = lshr i32 %1295, 4
  %1297 = trunc i32 %1296 to i8
  %1298 = and i8 %1297, 1
  %1299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1298, i8* %1299, align 1, !tbaa !2447
  %1300 = icmp eq i32 %1280, 0
  %1301 = zext i1 %1300 to i8
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1301, i8* %1302, align 1, !tbaa !2448
  %1303 = lshr i32 %1280, 31
  %1304 = trunc i32 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1304, i8* %1305, align 1, !tbaa !2449
  %1306 = lshr i32 %1279, 31
  %1307 = xor i32 %1303, %1306
  %1308 = add nuw nsw i32 %1307, %1303
  %1309 = icmp eq i32 %1308, 2
  %1310 = zext i1 %1309 to i8
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1310, i8* %1311, align 1, !tbaa !2450
  %1312 = load i64, i64* %RBP
  %1313 = sub i64 %1312, 28
  %1314 = load i32, i32* %EAX
  %1315 = zext i32 %1314 to i64
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 3
  store i64 %1317, i64* %PC
  %1318 = inttoptr i64 %1313 to i32*
  store i32 %1314, i32* %1318
  %1319 = load i64, i64* %PC
  %1320 = sub i64 %1319, 108
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 5
  store i64 %1322, i64* %PC
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1320, i64* %1323, align 8, !tbaa !2428
  br label %block_402bc7
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e30___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402e30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402cf0_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402cf0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 4
  %46 = load i32, i32* %EDI
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %45 to i32*
  store i32 %46, i32* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = bitcast %union.vec128_t* %XMM0 to i8*
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 5
  store i64 %55, i64* %PC
  %56 = bitcast i8* %53 to <2 x float>*
  %57 = load <2 x float>, <2 x float>* %56, align 1
  %58 = extractelement <2 x float> %57, i32 0
  %59 = inttoptr i64 %52 to float*
  store float %58, float* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 16
  %62 = load i64, i64* %RSI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 20
  %68 = load i32, i32* %EDX
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 32
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 28
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 7
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i32*
  store i32 0, i32* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 4
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i32*
  %88 = load i32, i32* %87
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %89, align 1, !tbaa !2432
  %90 = and i32 %88, 255
  %91 = call i32 @llvm.ctpop.i32(i32 %90) #16
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %94, i8* %95, align 1, !tbaa !2446
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %96, align 1, !tbaa !2447
  %97 = icmp eq i32 %88, 0
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %98, i8* %99, align 1, !tbaa !2448
  %100 = lshr i32 %88, 31
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %101, i8* %102, align 1, !tbaa !2449
  %103 = lshr i32 %88, 31
  %104 = xor i32 %100, %103
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %107, i8* %108, align 1, !tbaa !2450
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 11
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 6
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 6
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %116 = load i8, i8* %115, align 1, !tbaa !2448
  %117 = icmp eq i8 %116, 0
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %119 = load i8, i8* %118, align 1, !tbaa !2449
  %120 = icmp ne i8 %119, 0
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %122 = load i8, i8* %121, align 1, !tbaa !2450
  %123 = icmp ne i8 %122, 0
  %124 = xor i1 %120, %123
  %125 = xor i1 %124, true
  %126 = and i1 %117, %125
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %129 = select i1 %126, i64 %110, i64 %112
  store i64 %129, i64* %128, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_402d20, label %block_402d1b

block_402d3b:                                     ; preds = %block_402d47, %block_402d2a
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402d2a ], [ %MEMORY.0, %block_402d47 ]
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 24
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = load i32, i32* %EAX
  %140 = zext i32 %139 to i64
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 36
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 3
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %142 to i32*
  %146 = load i32, i32* %145
  %147 = sub i32 %139, %146
  %148 = icmp ult i32 %139, %146
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = and i32 %147, 255
  %152 = call i32 @llvm.ctpop.i32(i32 %151) #16
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %155, i8* %156, align 1, !tbaa !2446
  %157 = xor i32 %146, %139
  %158 = xor i32 %157, %147
  %159 = lshr i32 %158, 4
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %161, i8* %162, align 1, !tbaa !2447
  %163 = icmp eq i32 %147, 0
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %164, i8* %165, align 1, !tbaa !2448
  %166 = lshr i32 %147, 31
  %167 = trunc i32 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %167, i8* %168, align 1, !tbaa !2449
  %169 = lshr i32 %139, 31
  %170 = lshr i32 %146, 31
  %171 = xor i32 %170, %169
  %172 = xor i32 %166, %169
  %173 = add nuw nsw i32 %172, %171
  %174 = icmp eq i32 %173, 2
  %175 = zext i1 %174 to i8
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %175, i8* %176, align 1, !tbaa !2450
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 51
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 6
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 6
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %184 = load i8, i8* %183, align 1, !tbaa !2449
  %185 = icmp ne i8 %184, 0
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %187 = load i8, i8* %186, align 1, !tbaa !2450
  %188 = icmp ne i8 %187, 0
  %189 = xor i1 %185, %188
  %190 = xor i1 %189, true
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %193 = select i1 %189, i64 %180, i64 %178
  store i64 %193, i64* %192, align 8, !tbaa !2428
  %194 = load i8, i8* %BRANCH_TAKEN
  %195 = icmp eq i8 %194, 1
  br i1 %195, label %block_402d74, label %block_402d47

block_402d1b:                                     ; preds = %block_402cf0
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 158
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %197, i64* %200, align 8, !tbaa !2428
  br label %block_402db9

block_402d79:                                     ; preds = %block_402d20
  %201 = sub i64 %657, 24
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 7
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  store i32 0, i32* %204
  br label %block_402d80

block_402d74:                                     ; preds = %block_402d3b
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 69
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %206, i64* %209, align 8, !tbaa !2428
  br label %block_402db9

block_402d8c:                                     ; preds = %block_402d80
  %210 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 8
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 5
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to float*
  %216 = load float, float* %215
  %217 = bitcast i8* %210 to float*
  store float %216, float* %217, align 1, !tbaa !2452
  %218 = getelementptr inbounds i8, i8* %210, i64 4
  %219 = bitcast i8* %218 to float*
  store float 0.000000e+00, float* %219, align 1, !tbaa !2452
  %220 = getelementptr inbounds i8, i8* %210, i64 8
  %221 = bitcast i8* %220 to float*
  store float 0.000000e+00, float* %221, align 1, !tbaa !2452
  %222 = getelementptr inbounds i8, i8* %210, i64 12
  %223 = bitcast i8* %222 to float*
  store float 0.000000e+00, float* %223, align 1, !tbaa !2452
  %224 = load i64, i64* %RBP
  %225 = sub i64 %224, 16
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 24
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = sext i32 %235 to i64
  store i64 %236, i64* %RCX, align 8, !tbaa !2428
  %237 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %RCX
  %241 = mul i64 %240, 4
  %242 = add i64 %241, %239
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 5
  store i64 %244, i64* %PC
  %245 = bitcast i8* %238 to <2 x float>*
  %246 = load <2 x float>, <2 x float>* %245, align 1
  %247 = getelementptr inbounds i8, i8* %238, i64 8
  %248 = bitcast i8* %247 to <2 x i32>*
  %249 = load <2 x i32>, <2 x i32>* %248, align 1
  %250 = inttoptr i64 %242 to float*
  %251 = load float, float* %250
  %252 = extractelement <2 x float> %246, i32 0
  %253 = fmul float %252, %251
  %254 = bitcast i8* %237 to float*
  store float %253, float* %254, align 1, !tbaa !2452
  %255 = bitcast <2 x float> %246 to <2 x i32>
  %256 = extractelement <2 x i32> %255, i32 1
  %257 = getelementptr inbounds i8, i8* %237, i64 4
  %258 = bitcast i8* %257 to i32*
  store i32 %256, i32* %258, align 1, !tbaa !2452
  %259 = extractelement <2 x i32> %249, i32 0
  %260 = getelementptr inbounds i8, i8* %237, i64 8
  %261 = bitcast i8* %260 to i32*
  store i32 %259, i32* %261, align 1, !tbaa !2452
  %262 = extractelement <2 x i32> %249, i32 1
  %263 = getelementptr inbounds i8, i8* %237, i64 12
  %264 = bitcast i8* %263 to i32*
  store i32 %262, i32* %264, align 1, !tbaa !2452
  %265 = load i64, i64* %RBP
  %266 = sub i64 %265, 16
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC
  %269 = inttoptr i64 %266 to i64*
  %270 = load i64, i64* %269
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 24
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  %276 = load i32, i32* %275
  %277 = sext i32 %276 to i64
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = load i64, i64* %RAX
  %279 = load i64, i64* %RCX
  %280 = mul i64 %279, 4
  %281 = add i64 %280, %278
  %282 = bitcast %union.vec128_t* %XMM0 to i8*
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 5
  store i64 %284, i64* %PC
  %285 = bitcast i8* %282 to <2 x float>*
  %286 = load <2 x float>, <2 x float>* %285, align 1
  %287 = extractelement <2 x float> %286, i32 0
  %288 = inttoptr i64 %281 to float*
  store float %287, float* %288
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 24
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 3
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i32*
  %294 = load i32, i32* %293
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = load i64, i64* %RAX
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = trunc i64 %296 to i32
  %300 = add i32 1, %299
  %301 = zext i32 %300 to i64
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = icmp ult i32 %300, %299
  %303 = icmp ult i32 %300, 1
  %304 = or i1 %302, %303
  %305 = zext i1 %304 to i8
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %305, i8* %306, align 1, !tbaa !2432
  %307 = and i32 %300, 255
  %308 = call i32 @llvm.ctpop.i32(i32 %307) #16
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %311, i8* %312, align 1, !tbaa !2446
  %313 = xor i64 1, %296
  %314 = trunc i64 %313 to i32
  %315 = xor i32 %314, %300
  %316 = lshr i32 %315, 4
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %318, i8* %319, align 1, !tbaa !2447
  %320 = icmp eq i32 %300, 0
  %321 = zext i1 %320 to i8
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %321, i8* %322, align 1, !tbaa !2448
  %323 = lshr i32 %300, 31
  %324 = trunc i32 %323 to i8
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %324, i8* %325, align 1, !tbaa !2449
  %326 = lshr i32 %299, 31
  %327 = xor i32 %323, %326
  %328 = add nuw nsw i32 %327, %323
  %329 = icmp eq i32 %328, 2
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %330, i8* %331, align 1, !tbaa !2450
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 24
  %334 = load i32, i32* %EAX
  %335 = zext i32 %334 to i64
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %333 to i32*
  store i32 %334, i32* %338
  %339 = load i64, i64* %PC
  %340 = sub i64 %339, 52
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 5
  store i64 %342, i64* %PC
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %340, i64* %343, align 8, !tbaa !2428
  br label %block_402d80

block_402db9:                                     ; preds = %block_402d80, %block_402d74, %block_402d1b
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_402d80 ], [ %MEMORY.0, %block_402d74 ], [ %2, %block_402d1b ]
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 1
  store i64 %345, i64* %PC
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %347 = load i64, i64* %346, align 8, !tbaa !2428
  %348 = add i64 %347, 8
  %349 = inttoptr i64 %347 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RBP, align 8, !tbaa !2428
  store i64 %348, i64* %346, align 8, !tbaa !2428
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 1
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %355 = load i64, i64* %354, align 8, !tbaa !2428
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %353, align 8, !tbaa !2428
  %358 = add i64 %355, 8
  store i64 %358, i64* %354, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_402d2a:                                     ; preds = %block_402d20
  %359 = sub i64 %657, 4
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 3
  store i64 %361, i64* %PC
  %362 = inttoptr i64 %359 to i32*
  %363 = load i32, i32* %362
  %364 = zext i32 %363 to i64
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = load i64, i64* %RAX
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 20
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i32*
  %371 = load i32, i32* %370
  %372 = shl i64 %365, 32
  %373 = ashr exact i64 %372, 32
  %374 = sext i32 %371 to i64
  %375 = mul nsw i64 %374, %373
  %376 = trunc i64 %375 to i32
  %377 = and i64 %375, 4294967295
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = shl i64 %375, 32
  %379 = ashr exact i64 %378, 32
  %380 = icmp ne i64 %379, %375
  %381 = zext i1 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %381, i8* %382, align 1, !tbaa !2432
  %383 = and i32 %376, 255
  %384 = call i32 @llvm.ctpop.i32(i32 %383) #16
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  %387 = xor i8 %386, 1
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %387, i8* %388, align 1, !tbaa !2446
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %389, align 1, !tbaa !2447
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %390, align 1, !tbaa !2448
  %391 = lshr i32 %376, 31
  %392 = trunc i32 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %392, i8* %393, align 1, !tbaa !2449
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %381, i8* %394, align 1, !tbaa !2450
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 36
  %397 = load i32, i32* %EAX
  %398 = zext i32 %397 to i64
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 3
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %396 to i32*
  store i32 %397, i32* %401
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 24
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 7
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i32*
  store i32 0, i32* %406
  br label %block_402d3b

block_402d80:                                     ; preds = %block_402d8c, %block_402d79
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_402d79 ], [ %MEMORY.2, %block_402d8c ]
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 24
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = load i32, i32* %EAX
  %415 = zext i32 %414 to i64
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 4
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 3
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i32*
  %421 = load i32, i32* %420
  %422 = sub i32 %414, %421
  %423 = icmp ult i32 %414, %421
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %424, i8* %425, align 1, !tbaa !2432
  %426 = and i32 %422, 255
  %427 = call i32 @llvm.ctpop.i32(i32 %426) #16
  %428 = trunc i32 %427 to i8
  %429 = and i8 %428, 1
  %430 = xor i8 %429, 1
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %430, i8* %431, align 1, !tbaa !2446
  %432 = xor i32 %421, %414
  %433 = xor i32 %432, %422
  %434 = lshr i32 %433, 4
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %436, i8* %437, align 1, !tbaa !2447
  %438 = icmp eq i32 %422, 0
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %439, i8* %440, align 1, !tbaa !2448
  %441 = lshr i32 %422, 31
  %442 = trunc i32 %441 to i8
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %442, i8* %443, align 1, !tbaa !2449
  %444 = lshr i32 %414, 31
  %445 = lshr i32 %421, 31
  %446 = xor i32 %445, %444
  %447 = xor i32 %441, %444
  %448 = add nuw nsw i32 %447, %446
  %449 = icmp eq i32 %448, 2
  %450 = zext i1 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %450, i8* %451, align 1, !tbaa !2450
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 51
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 6
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 6
  store i64 %457, i64* %PC
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %459 = load i8, i8* %458, align 1, !tbaa !2449
  %460 = icmp ne i8 %459, 0
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %462 = load i8, i8* %461, align 1, !tbaa !2450
  %463 = icmp ne i8 %462, 0
  %464 = xor i1 %460, %463
  %465 = xor i1 %464, true
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %464, i64 %455, i64 %453
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_402db9, label %block_402d8c

block_402d47:                                     ; preds = %block_402d3b
  %471 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 8
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 5
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to float*
  %477 = load float, float* %476
  %478 = bitcast i8* %471 to float*
  store float %477, float* %478, align 1, !tbaa !2452
  %479 = getelementptr inbounds i8, i8* %471, i64 4
  %480 = bitcast i8* %479 to float*
  store float 0.000000e+00, float* %480, align 1, !tbaa !2452
  %481 = getelementptr inbounds i8, i8* %471, i64 8
  %482 = bitcast i8* %481 to float*
  store float 0.000000e+00, float* %482, align 1, !tbaa !2452
  %483 = getelementptr inbounds i8, i8* %471, i64 12
  %484 = bitcast i8* %483 to float*
  store float 0.000000e+00, float* %484, align 1, !tbaa !2452
  %485 = load i64, i64* %RBP
  %486 = sub i64 %485, 16
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %486 to i64*
  %490 = load i64, i64* %489
  store i64 %490, i64* %RAX, align 8, !tbaa !2428
  %491 = load i64, i64* %RBP
  %492 = sub i64 %491, 24
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 4
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = sext i32 %496 to i64
  store i64 %497, i64* %RCX, align 8, !tbaa !2428
  %498 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %499 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %500 = load i64, i64* %RAX
  %501 = load i64, i64* %RCX
  %502 = mul i64 %501, 4
  %503 = add i64 %502, %500
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  store i64 %505, i64* %PC
  %506 = bitcast i8* %499 to <2 x float>*
  %507 = load <2 x float>, <2 x float>* %506, align 1
  %508 = getelementptr inbounds i8, i8* %499, i64 8
  %509 = bitcast i8* %508 to <2 x i32>*
  %510 = load <2 x i32>, <2 x i32>* %509, align 1
  %511 = inttoptr i64 %503 to float*
  %512 = load float, float* %511
  %513 = extractelement <2 x float> %507, i32 0
  %514 = fmul float %513, %512
  %515 = bitcast i8* %498 to float*
  store float %514, float* %515, align 1, !tbaa !2452
  %516 = bitcast <2 x float> %507 to <2 x i32>
  %517 = extractelement <2 x i32> %516, i32 1
  %518 = getelementptr inbounds i8, i8* %498, i64 4
  %519 = bitcast i8* %518 to i32*
  store i32 %517, i32* %519, align 1, !tbaa !2452
  %520 = extractelement <2 x i32> %510, i32 0
  %521 = getelementptr inbounds i8, i8* %498, i64 8
  %522 = bitcast i8* %521 to i32*
  store i32 %520, i32* %522, align 1, !tbaa !2452
  %523 = extractelement <2 x i32> %510, i32 1
  %524 = getelementptr inbounds i8, i8* %498, i64 12
  %525 = bitcast i8* %524 to i32*
  store i32 %523, i32* %525, align 1, !tbaa !2452
  %526 = load i64, i64* %RBP
  %527 = sub i64 %526, 16
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 4
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i64*
  %531 = load i64, i64* %530
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 24
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 4
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %533 to i32*
  %537 = load i32, i32* %536
  %538 = sext i32 %537 to i64
  store i64 %538, i64* %RCX, align 8, !tbaa !2428
  %539 = load i64, i64* %RAX
  %540 = load i64, i64* %RCX
  %541 = mul i64 %540, 4
  %542 = add i64 %541, %539
  %543 = bitcast %union.vec128_t* %XMM0 to i8*
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  store i64 %545, i64* %PC
  %546 = bitcast i8* %543 to <2 x float>*
  %547 = load <2 x float>, <2 x float>* %546, align 1
  %548 = extractelement <2 x float> %547, i32 0
  %549 = inttoptr i64 %542 to float*
  store float %548, float* %549
  %550 = load i64, i64* %RBP
  %551 = sub i64 %550, 24
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 3
  store i64 %553, i64* %PC
  %554 = inttoptr i64 %551 to i32*
  %555 = load i32, i32* %554
  %556 = zext i32 %555 to i64
  store i64 %556, i64* %RAX, align 8, !tbaa !2428
  %557 = load i64, i64* %RAX
  %558 = load i64, i64* %RBP
  %559 = sub i64 %558, 20
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 3
  store i64 %561, i64* %PC
  %562 = trunc i64 %557 to i32
  %563 = inttoptr i64 %559 to i32*
  %564 = load i32, i32* %563
  %565 = add i32 %564, %562
  %566 = zext i32 %565 to i64
  store i64 %566, i64* %RAX, align 8, !tbaa !2428
  %567 = icmp ult i32 %565, %562
  %568 = icmp ult i32 %565, %564
  %569 = or i1 %567, %568
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %570, i8* %571, align 1, !tbaa !2432
  %572 = and i32 %565, 255
  %573 = call i32 @llvm.ctpop.i32(i32 %572) #16
  %574 = trunc i32 %573 to i8
  %575 = and i8 %574, 1
  %576 = xor i8 %575, 1
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %576, i8* %577, align 1, !tbaa !2446
  %578 = xor i32 %564, %562
  %579 = xor i32 %578, %565
  %580 = lshr i32 %579, 4
  %581 = trunc i32 %580 to i8
  %582 = and i8 %581, 1
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %582, i8* %583, align 1, !tbaa !2447
  %584 = icmp eq i32 %565, 0
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %585, i8* %586, align 1, !tbaa !2448
  %587 = lshr i32 %565, 31
  %588 = trunc i32 %587 to i8
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %588, i8* %589, align 1, !tbaa !2449
  %590 = lshr i32 %562, 31
  %591 = lshr i32 %564, 31
  %592 = xor i32 %587, %590
  %593 = xor i32 %587, %591
  %594 = add nuw nsw i32 %592, %593
  %595 = icmp eq i32 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 24
  %600 = load i32, i32* %EAX
  %601 = zext i32 %600 to i64
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %599 to i32*
  store i32 %600, i32* %604
  %605 = load i64, i64* %PC
  %606 = sub i64 %605, 52
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 5
  store i64 %608, i64* %PC
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %606, i64* %609, align 8, !tbaa !2428
  br label %block_402d3b

block_402d20:                                     ; preds = %block_402cf0
  %610 = load i64, i64* %RBP
  %611 = sub i64 %610, 20
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 4
  store i64 %613, i64* %PC
  %614 = inttoptr i64 %611 to i32*
  %615 = load i32, i32* %614
  %616 = sub i32 %615, 1
  %617 = icmp ult i32 %615, 1
  %618 = zext i1 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %618, i8* %619, align 1, !tbaa !2432
  %620 = and i32 %616, 255
  %621 = call i32 @llvm.ctpop.i32(i32 %620) #16
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %624, i8* %625, align 1, !tbaa !2446
  %626 = xor i32 %615, 1
  %627 = xor i32 %626, %616
  %628 = lshr i32 %627, 4
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %630, i8* %631, align 1, !tbaa !2447
  %632 = icmp eq i32 %616, 0
  %633 = zext i1 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %633, i8* %634, align 1, !tbaa !2448
  %635 = lshr i32 %616, 31
  %636 = trunc i32 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %636, i8* %637, align 1, !tbaa !2449
  %638 = lshr i32 %615, 31
  %639 = xor i32 %635, %638
  %640 = add nuw nsw i32 %639, %638
  %641 = icmp eq i32 %640, 2
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %642, i8* %643, align 1, !tbaa !2450
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 85
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 6
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 6
  store i64 %649, i64* %PC
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %651 = load i8, i8* %650, align 1, !tbaa !2448
  store i8 %651, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %653 = icmp ne i8 %651, 0
  %654 = select i1 %653, i64 %645, i64 %647
  store i64 %654, i64* %652, align 8, !tbaa !2428
  %655 = load i8, i8* %BRANCH_TAKEN
  %656 = icmp eq i8 %655, 1
  %657 = load i64, i64* %RBP
  br i1 %656, label %block_402d79, label %block_402d2a
}

; Function Attrs: noinline
define %struct.Memory* @sub_400500__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400500:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402e30___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402dc0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_653150___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_401760_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401760:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %47 to %"class.std::bitset"*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %51 to %union.vec128_t*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = load i64, i64* %RBP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %54, i64* %60
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %61 = load i64, i64* %RSP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  %64 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %65 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %66 = bitcast %union.vec128_t* %XMM0 to i8*
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = bitcast i8* %65 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = getelementptr inbounds i8, i8* %65, i64 8
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = bitcast i8* %66 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = getelementptr inbounds i8, i8* %66, i64 8
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = xor i64 %75, %70
  %80 = xor i64 %78, %73
  %81 = trunc i64 %79 to i32
  %82 = lshr i64 %79, 32
  %83 = trunc i64 %82 to i32
  %84 = bitcast i8* %64 to i32*
  store i32 %81, i32* %84, align 1, !tbaa !2454
  %85 = getelementptr inbounds i8, i8* %64, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 %83, i32* %86, align 1, !tbaa !2454
  %87 = trunc i64 %80 to i32
  %88 = getelementptr inbounds i8, i8* %64, i64 8
  %89 = bitcast i8* %88 to i32*
  store i32 %87, i32* %89, align 1, !tbaa !2454
  %90 = lshr i64 %80, 32
  %91 = trunc i64 %90 to i32
  %92 = getelementptr inbounds i8, i8* %64, i64 12
  %93 = bitcast i8* %92 to i32*
  store i32 %91, i32* %93, align 1, !tbaa !2454
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %RDI
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 12
  %102 = load i32, i32* %ESI
  %103 = zext i32 %102 to i64
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 16
  %109 = load i32, i32* %EDX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %113
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 24
  %116 = load i64, i64* %RCX
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 32
  %122 = load i64, i64* %R8
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %121 to i64*
  store i64 %122, i64* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 36
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 7
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  store i32 1325, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 32
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = load i64, i64* %RCX
  %138 = bitcast %union.vec128_t* %XMM0 to i8*
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = bitcast i8* %138 to <2 x float>*
  %142 = load <2 x float>, <2 x float>* %141, align 1
  %143 = extractelement <2 x float> %142, i32 0
  %144 = inttoptr i64 %137 to float*
  store float %143, float* %144
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 44
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i32*
  store i32 0, i32* %149
  br label %block_40178f

block_4018d4:                                     ; preds = %block_4018c8
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 24
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 40
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i32*
  %161 = load i32, i32* %160
  %162 = sext i32 %161 to i64
  store i64 %162, i64* %RCX, align 8, !tbaa !2428
  %163 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %164 = load i64, i64* %RAX
  %165 = load i64, i64* %RCX
  %166 = mul i64 %165, 4
  %167 = add i64 %166, %164
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to float*
  %171 = load float, float* %170
  %172 = bitcast i8* %163 to float*
  store float %171, float* %172, align 1, !tbaa !2452
  %173 = getelementptr inbounds i8, i8* %163, i64 4
  %174 = bitcast i8* %173 to float*
  store float 0.000000e+00, float* %174, align 1, !tbaa !2452
  %175 = getelementptr inbounds i8, i8* %163, i64 8
  %176 = bitcast i8* %175 to float*
  store float 0.000000e+00, float* %176, align 1, !tbaa !2452
  %177 = getelementptr inbounds i8, i8* %163, i64 12
  %178 = bitcast i8* %177 to float*
  store float 0.000000e+00, float* %178, align 1, !tbaa !2452
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 8
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RAX, align 8, !tbaa !2428
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 12
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i32*
  %190 = load i32, i32* %189
  %191 = zext i32 %190 to i64
  store i64 %191, i64* %RDX, align 8, !tbaa !2428
  %192 = load i64, i64* %RDX
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 44
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197
  %199 = shl i64 %192, 32
  %200 = ashr exact i64 %199, 32
  %201 = sext i32 %198 to i64
  %202 = mul nsw i64 %201, %200
  %203 = trunc i64 %202 to i32
  %204 = and i64 %202, 4294967295
  store i64 %204, i64* %RDX, align 8, !tbaa !2428
  %205 = shl i64 %202, 32
  %206 = ashr exact i64 %205, 32
  %207 = icmp ne i64 %206, %202
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %208, i8* %209, align 1, !tbaa !2432
  %210 = and i32 %203, 255
  %211 = call i32 @llvm.ctpop.i32(i32 %210) #16
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = xor i8 %213, 1
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %214, i8* %215, align 1, !tbaa !2446
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %216, align 1, !tbaa !2447
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %217, align 1, !tbaa !2448
  %218 = lshr i32 %203, 31
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %219, i8* %220, align 1, !tbaa !2449
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %208, i8* %221, align 1, !tbaa !2450
  %222 = load i64, i64* %RDX
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 40
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC
  %227 = trunc i64 %222 to i32
  %228 = inttoptr i64 %224 to i32*
  %229 = load i32, i32* %228
  %230 = add i32 %229, %227
  %231 = zext i32 %230 to i64
  store i64 %231, i64* %RDX, align 8, !tbaa !2428
  %232 = icmp ult i32 %230, %227
  %233 = icmp ult i32 %230, %229
  %234 = or i1 %232, %233
  %235 = zext i1 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %235, i8* %236, align 1, !tbaa !2432
  %237 = and i32 %230, 255
  %238 = call i32 @llvm.ctpop.i32(i32 %237) #16
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %241, i8* %242, align 1, !tbaa !2446
  %243 = xor i32 %229, %227
  %244 = xor i32 %243, %230
  %245 = lshr i32 %244, 4
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %247, i8* %248, align 1, !tbaa !2447
  %249 = icmp eq i32 %230, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2448
  %252 = lshr i32 %230, 31
  %253 = trunc i32 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2449
  %255 = lshr i32 %227, 31
  %256 = lshr i32 %229, 31
  %257 = xor i32 %252, %255
  %258 = xor i32 %252, %256
  %259 = add nuw nsw i32 %257, %258
  %260 = icmp eq i32 %259, 2
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %261, i8* %262, align 1, !tbaa !2450
  %263 = load i32, i32* %EDX
  %264 = zext i32 %263 to i64
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 3
  store i64 %266, i64* %PC
  %267 = shl i64 %264, 32
  %268 = ashr exact i64 %267, 32
  store i64 %268, i64* %RCX, align 8, !tbaa !2428
  %269 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %270 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %271 = load i64, i64* %RAX
  %272 = load i64, i64* %RCX
  %273 = mul i64 %272, 4
  %274 = add i64 %273, %271
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 5
  store i64 %276, i64* %PC
  %277 = bitcast i8* %270 to <2 x float>*
  %278 = load <2 x float>, <2 x float>* %277, align 1
  %279 = getelementptr inbounds i8, i8* %270, i64 8
  %280 = bitcast i8* %279 to <2 x i32>*
  %281 = load <2 x i32>, <2 x i32>* %280, align 1
  %282 = inttoptr i64 %274 to float*
  %283 = load float, float* %282
  %284 = extractelement <2 x float> %278, i32 0
  %285 = fadd float %284, %283
  %286 = bitcast i8* %269 to float*
  store float %285, float* %286, align 1, !tbaa !2452
  %287 = bitcast <2 x float> %278 to <2 x i32>
  %288 = extractelement <2 x i32> %287, i32 1
  %289 = getelementptr inbounds i8, i8* %269, i64 4
  %290 = bitcast i8* %289 to i32*
  store i32 %288, i32* %290, align 1, !tbaa !2452
  %291 = extractelement <2 x i32> %281, i32 0
  %292 = getelementptr inbounds i8, i8* %269, i64 8
  %293 = bitcast i8* %292 to i32*
  store i32 %291, i32* %293, align 1, !tbaa !2452
  %294 = extractelement <2 x i32> %281, i32 1
  %295 = getelementptr inbounds i8, i8* %269, i64 12
  %296 = bitcast i8* %295 to i32*
  store i32 %294, i32* %296, align 1, !tbaa !2452
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 24
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 40
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  %308 = load i32, i32* %307
  %309 = sext i32 %308 to i64
  store i64 %309, i64* %RCX, align 8, !tbaa !2428
  %310 = load i64, i64* %RAX
  %311 = load i64, i64* %RCX
  %312 = mul i64 %311, 4
  %313 = add i64 %312, %310
  %314 = bitcast %union.vec128_t* %XMM0 to i8*
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 5
  store i64 %316, i64* %PC
  %317 = bitcast i8* %314 to <2 x float>*
  %318 = load <2 x float>, <2 x float>* %317, align 1
  %319 = extractelement <2 x float> %318, i32 0
  %320 = inttoptr i64 %313 to float*
  store float %319, float* %320
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 40
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 3
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i32*
  %326 = load i32, i32* %325
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RAX, align 8, !tbaa !2428
  %328 = load i64, i64* %RAX
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC
  %331 = trunc i64 %328 to i32
  %332 = add i32 1, %331
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = icmp ult i32 %332, %331
  %335 = icmp ult i32 %332, 1
  %336 = or i1 %334, %335
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %337, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %332, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = xor i64 1, %328
  %346 = trunc i64 %345 to i32
  %347 = xor i32 %346, %332
  %348 = lshr i32 %347, 4
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %350, i8* %351, align 1, !tbaa !2447
  %352 = icmp eq i32 %332, 0
  %353 = zext i1 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %353, i8* %354, align 1, !tbaa !2448
  %355 = lshr i32 %332, 31
  %356 = trunc i32 %355 to i8
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %356, i8* %357, align 1, !tbaa !2449
  %358 = lshr i32 %331, 31
  %359 = xor i32 %355, %358
  %360 = add nuw nsw i32 %359, %355
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %362, i8* %363, align 1, !tbaa !2450
  %364 = load i64, i64* %RBP
  %365 = sub i64 %364, 40
  %366 = load i32, i32* %EAX
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %365 to i32*
  store i32 %366, i32* %370
  %371 = load i64, i64* %PC
  %372 = sub i64 %371, 69
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 5
  store i64 %374, i64* %PC
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %372, i64* %375, align 8, !tbaa !2428
  br label %block_4018c8

block_401822:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %376 = sub i64 %1249, 8
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to i64*
  %380 = load i64, i64* %379
  store i64 %380, i64* %RAX, align 8, !tbaa !2428
  %381 = load i64, i64* %RBP
  %382 = sub i64 %381, 12
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 3
  store i64 %384, i64* %PC
  %385 = inttoptr i64 %382 to i32*
  %386 = load i32, i32* %385
  %387 = zext i32 %386 to i64
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = load i64, i64* %RCX
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 44
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = shl i64 %388, 32
  %396 = ashr exact i64 %395, 32
  %397 = sext i32 %394 to i64
  %398 = mul nsw i64 %397, %396
  %399 = trunc i64 %398 to i32
  %400 = and i64 %398, 4294967295
  store i64 %400, i64* %RCX, align 8, !tbaa !2428
  %401 = shl i64 %398, 32
  %402 = ashr exact i64 %401, 32
  %403 = icmp ne i64 %402, %398
  %404 = zext i1 %403 to i8
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %404, i8* %405, align 1, !tbaa !2432
  %406 = and i32 %399, 255
  %407 = call i32 @llvm.ctpop.i32(i32 %406) #16
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  %410 = xor i8 %409, 1
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %410, i8* %411, align 1, !tbaa !2446
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %412, align 1, !tbaa !2447
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %413, align 1, !tbaa !2448
  %414 = lshr i32 %399, 31
  %415 = trunc i32 %414 to i8
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %415, i8* %416, align 1, !tbaa !2449
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %404, i8* %417, align 1, !tbaa !2450
  %418 = load i64, i64* %RCX
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 40
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 3
  store i64 %422, i64* %PC
  %423 = trunc i64 %418 to i32
  %424 = inttoptr i64 %420 to i32*
  %425 = load i32, i32* %424
  %426 = add i32 %425, %423
  %427 = zext i32 %426 to i64
  store i64 %427, i64* %RCX, align 8, !tbaa !2428
  %428 = icmp ult i32 %426, %423
  %429 = icmp ult i32 %426, %425
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2432
  %433 = and i32 %426, 255
  %434 = call i32 @llvm.ctpop.i32(i32 %433) #16
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = xor i8 %436, 1
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %437, i8* %438, align 1, !tbaa !2446
  %439 = xor i32 %425, %423
  %440 = xor i32 %439, %426
  %441 = lshr i32 %440, 4
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %443, i8* %444, align 1, !tbaa !2447
  %445 = icmp eq i32 %426, 0
  %446 = zext i1 %445 to i8
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %446, i8* %447, align 1, !tbaa !2448
  %448 = lshr i32 %426, 31
  %449 = trunc i32 %448 to i8
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %449, i8* %450, align 1, !tbaa !2449
  %451 = lshr i32 %423, 31
  %452 = lshr i32 %425, 31
  %453 = xor i32 %448, %451
  %454 = xor i32 %448, %452
  %455 = add nuw nsw i32 %453, %454
  %456 = icmp eq i32 %455, 2
  %457 = zext i1 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %457, i8* %458, align 1, !tbaa !2450
  %459 = load i32, i32* %ECX
  %460 = zext i32 %459 to i64
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 3
  store i64 %462, i64* %PC
  %463 = shl i64 %460, 32
  %464 = ashr exact i64 %463, 32
  store i64 %464, i64* %RDX, align 8, !tbaa !2428
  %465 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %466 = load i64, i64* %RAX
  %467 = load i64, i64* %RDX
  %468 = mul i64 %467, 4
  %469 = add i64 %468, %466
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 5
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %469 to float*
  %473 = load float, float* %472
  %474 = bitcast i8* %465 to float*
  store float %473, float* %474, align 1, !tbaa !2452
  %475 = getelementptr inbounds i8, i8* %465, i64 4
  %476 = bitcast i8* %475 to float*
  store float 0.000000e+00, float* %476, align 1, !tbaa !2452
  %477 = getelementptr inbounds i8, i8* %465, i64 8
  %478 = bitcast i8* %477 to float*
  store float 0.000000e+00, float* %478, align 1, !tbaa !2452
  %479 = getelementptr inbounds i8, i8* %465, i64 12
  %480 = bitcast i8* %479 to float*
  store float 0.000000e+00, float* %480, align 1, !tbaa !2452
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 52
  %483 = bitcast %union.vec128_t* %XMM0 to i8*
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 5
  store i64 %485, i64* %PC
  %486 = bitcast i8* %483 to <2 x float>*
  %487 = load <2 x float>, <2 x float>* %486, align 1
  %488 = extractelement <2 x float> %487, i32 0
  %489 = inttoptr i64 %482 to float*
  store float %488, float* %489
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 18
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 5
  store i64 %493, i64* %PC
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %491, i64* %494, align 8, !tbaa !2428
  br label %block_40184f

block_4018c8:                                     ; preds = %block_4018c1, %block_4018d4
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4018c1 ], [ %MEMORY.0, %block_4018d4 ]
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 40
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 3
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i32*
  %500 = load i32, i32* %499
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %RAX, align 8, !tbaa !2428
  %502 = load i32, i32* %EAX
  %503 = zext i32 %502 to i64
  %504 = load i64, i64* %RBP
  %505 = sub i64 %504, 16
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 3
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %505 to i32*
  %509 = load i32, i32* %508
  %510 = sub i32 %502, %509
  %511 = icmp ult i32 %502, %509
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %512, i8* %513, align 1, !tbaa !2432
  %514 = and i32 %510, 255
  %515 = call i32 @llvm.ctpop.i32(i32 %514) #16
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %518, i8* %519, align 1, !tbaa !2446
  %520 = xor i32 %509, %502
  %521 = xor i32 %520, %510
  %522 = lshr i32 %521, 4
  %523 = trunc i32 %522 to i8
  %524 = and i8 %523, 1
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %524, i8* %525, align 1, !tbaa !2447
  %526 = icmp eq i32 %510, 0
  %527 = zext i1 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %527, i8* %528, align 1, !tbaa !2448
  %529 = lshr i32 %510, 31
  %530 = trunc i32 %529 to i8
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %530, i8* %531, align 1, !tbaa !2449
  %532 = lshr i32 %502, 31
  %533 = lshr i32 %509, 31
  %534 = xor i32 %533, %532
  %535 = xor i32 %529, %532
  %536 = add nuw nsw i32 %535, %534
  %537 = icmp eq i32 %536, 2
  %538 = zext i1 %537 to i8
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %538, i8* %539, align 1, !tbaa !2450
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 68
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 6
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 6
  store i64 %545, i64* %PC
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %547 = load i8, i8* %546, align 1, !tbaa !2449
  %548 = icmp ne i8 %547, 0
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %550 = load i8, i8* %549, align 1, !tbaa !2450
  %551 = icmp ne i8 %550, 0
  %552 = xor i1 %548, %551
  %553 = xor i1 %552, true
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %556 = select i1 %552, i64 %543, i64 %541
  store i64 %556, i64* %555, align 8, !tbaa !2428
  %557 = load i8, i8* %BRANCH_TAKEN
  %558 = icmp eq i8 %557, 1
  br i1 %558, label %block_401912, label %block_4018d4

block_4018c1:                                     ; preds = %block_4018b5
  %559 = load i64, i64* %RBP
  %560 = sub i64 %559, 40
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 7
  store i64 %562, i64* %PC
  %563 = inttoptr i64 %560 to i32*
  store i32 0, i32* %563
  br label %block_4018c8

block_401842:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %564 = sub i64 %1249, 32
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i64*
  %568 = load i64, i64* %567
  store i64 %568, i64* %RAX, align 8, !tbaa !2428
  %569 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %570 = load i64, i64* %RAX
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 4
  store i64 %572, i64* %PC
  %573 = inttoptr i64 %570 to float*
  %574 = load float, float* %573
  %575 = bitcast i8* %569 to float*
  store float %574, float* %575, align 1, !tbaa !2452
  %576 = getelementptr inbounds i8, i8* %569, i64 4
  %577 = bitcast i8* %576 to float*
  store float 0.000000e+00, float* %577, align 1, !tbaa !2452
  %578 = getelementptr inbounds i8, i8* %569, i64 8
  %579 = bitcast i8* %578 to float*
  store float 0.000000e+00, float* %579, align 1, !tbaa !2452
  %580 = getelementptr inbounds i8, i8* %569, i64 12
  %581 = bitcast i8* %580 to float*
  store float 0.000000e+00, float* %581, align 1, !tbaa !2452
  %582 = load i64, i64* %RBP
  %583 = sub i64 %582, 52
  %584 = bitcast %union.vec128_t* %XMM0 to i8*
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 5
  store i64 %586, i64* %PC
  %587 = bitcast i8* %584 to <2 x float>*
  %588 = load <2 x float>, <2 x float>* %587, align 1
  %589 = extractelement <2 x float> %588, i32 0
  %590 = inttoptr i64 %583 to float*
  store float %589, float* %590
  br label %block_40184f

block_4018b5:                                     ; preds = %block_401912, %block_4018ae
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.5, %block_4018ae ], [ %MEMORY.0, %block_401912 ]
  %591 = load i64, i64* %RBP
  %592 = sub i64 %591, 44
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 3
  store i64 %594, i64* %PC
  %595 = inttoptr i64 %592 to i32*
  %596 = load i32, i32* %595
  %597 = zext i32 %596 to i64
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = load i32, i32* %EAX
  %599 = zext i32 %598 to i64
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 16
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i32*
  %605 = load i32, i32* %604
  %606 = sub i32 %598, %605
  %607 = icmp ult i32 %598, %605
  %608 = zext i1 %607 to i8
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %608, i8* %609, align 1, !tbaa !2432
  %610 = and i32 %606, 255
  %611 = call i32 @llvm.ctpop.i32(i32 %610) #16
  %612 = trunc i32 %611 to i8
  %613 = and i8 %612, 1
  %614 = xor i8 %613, 1
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %614, i8* %615, align 1, !tbaa !2446
  %616 = xor i32 %605, %598
  %617 = xor i32 %616, %606
  %618 = lshr i32 %617, 4
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %620, i8* %621, align 1, !tbaa !2447
  %622 = icmp eq i32 %606, 0
  %623 = zext i1 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %623, i8* %624, align 1, !tbaa !2448
  %625 = lshr i32 %606, 31
  %626 = trunc i32 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %626, i8* %627, align 1, !tbaa !2449
  %628 = lshr i32 %598, 31
  %629 = lshr i32 %605, 31
  %630 = xor i32 %629, %628
  %631 = xor i32 %625, %628
  %632 = add nuw nsw i32 %631, %630
  %633 = icmp eq i32 %632, 2
  %634 = zext i1 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %634, i8* %635, align 1, !tbaa !2450
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 106
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 6
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 6
  store i64 %641, i64* %PC
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %643 = load i8, i8* %642, align 1, !tbaa !2449
  %644 = icmp ne i8 %643, 0
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %646 = load i8, i8* %645, align 1, !tbaa !2450
  %647 = icmp ne i8 %646, 0
  %648 = xor i1 %644, %647
  %649 = xor i1 %648, true
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %652 = select i1 %648, i64 %639, i64 %637
  store i64 %652, i64* %651, align 8, !tbaa !2428
  %653 = load i8, i8* %BRANCH_TAKEN
  %654 = icmp eq i8 %653, 1
  br i1 %654, label %block_401925, label %block_4018c1

block_4018ae:                                     ; preds = %block_401884
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 44
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 7
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %656 to i32*
  store i32 0, i32* %659
  br label %block_4018b5

block_40186a:                                     ; preds = %block_4017a2
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 5
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %661, i64* %664, align 8, !tbaa !2428
  %665 = load i64, i64* %RBP
  %666 = sub i64 %665, 44
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 3
  store i64 %668, i64* %PC
  %669 = inttoptr i64 %666 to i32*
  %670 = load i32, i32* %669
  %671 = zext i32 %670 to i64
  store i64 %671, i64* %RAX, align 8, !tbaa !2428
  %672 = load i64, i64* %RAX
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 3
  store i64 %674, i64* %PC
  %675 = trunc i64 %672 to i32
  %676 = add i32 1, %675
  %677 = zext i32 %676 to i64
  store i64 %677, i64* %RAX, align 8, !tbaa !2428
  %678 = icmp ult i32 %676, %675
  %679 = icmp ult i32 %676, 1
  %680 = or i1 %678, %679
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %681, i8* %682, align 1, !tbaa !2432
  %683 = and i32 %676, 255
  %684 = call i32 @llvm.ctpop.i32(i32 %683) #16
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  %687 = xor i8 %686, 1
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %687, i8* %688, align 1, !tbaa !2446
  %689 = xor i64 1, %672
  %690 = trunc i64 %689 to i32
  %691 = xor i32 %690, %676
  %692 = lshr i32 %691, 4
  %693 = trunc i32 %692 to i8
  %694 = and i8 %693, 1
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %694, i8* %695, align 1, !tbaa !2447
  %696 = icmp eq i32 %676, 0
  %697 = zext i1 %696 to i8
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %697, i8* %698, align 1, !tbaa !2448
  %699 = lshr i32 %676, 31
  %700 = trunc i32 %699 to i8
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %700, i8* %701, align 1, !tbaa !2449
  %702 = lshr i32 %675, 31
  %703 = xor i32 %699, %702
  %704 = add nuw nsw i32 %703, %699
  %705 = icmp eq i32 %704, 2
  %706 = zext i1 %705 to i8
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %706, i8* %707, align 1, !tbaa !2450
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 44
  %710 = load i32, i32* %EAX
  %711 = zext i32 %710 to i64
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 3
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %709 to i32*
  store i32 %710, i32* %714
  %715 = load i64, i64* %PC
  %716 = sub i64 %715, 233
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  store i64 %718, i64* %PC
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %719, align 8, !tbaa !2428
  br label %block_40178f

block_40184f:                                     ; preds = %block_401842, %block_401822
  %MEMORY.2 = phi %struct.Memory* [ %1231, %block_401842 ], [ %1231, %block_401822 ]
  %720 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %721 = load i64, i64* %RBP
  %722 = sub i64 %721, 52
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = inttoptr i64 %722 to float*
  %726 = load float, float* %725
  %727 = bitcast i8* %720 to float*
  store float %726, float* %727, align 1, !tbaa !2452
  %728 = getelementptr inbounds i8, i8* %720, i64 4
  %729 = bitcast i8* %728 to float*
  store float 0.000000e+00, float* %729, align 1, !tbaa !2452
  %730 = getelementptr inbounds i8, i8* %720, i64 8
  %731 = bitcast i8* %730 to float*
  store float 0.000000e+00, float* %731, align 1, !tbaa !2452
  %732 = getelementptr inbounds i8, i8* %720, i64 12
  %733 = bitcast i8* %732 to float*
  store float 0.000000e+00, float* %733, align 1, !tbaa !2452
  %734 = load i64, i64* %RBP
  %735 = sub i64 %734, 32
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 4
  store i64 %737, i64* %PC
  %738 = inttoptr i64 %735 to i64*
  %739 = load i64, i64* %738
  store i64 %739, i64* %RAX, align 8, !tbaa !2428
  %740 = load i64, i64* %RAX
  %741 = bitcast %union.vec128_t* %XMM0 to i8*
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = bitcast i8* %741 to <2 x float>*
  %745 = load <2 x float>, <2 x float>* %744, align 1
  %746 = extractelement <2 x float> %745, i32 0
  %747 = inttoptr i64 %740 to float*
  store float %746, float* %747
  %748 = load i64, i64* %RBP
  %749 = sub i64 %748, 40
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 3
  store i64 %751, i64* %PC
  %752 = inttoptr i64 %749 to i32*
  %753 = load i32, i32* %752
  %754 = zext i32 %753 to i64
  store i64 %754, i64* %RAX, align 8, !tbaa !2428
  %755 = load i64, i64* %RAX
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 3
  store i64 %757, i64* %PC
  %758 = trunc i64 %755 to i32
  %759 = add i32 1, %758
  %760 = zext i32 %759 to i64
  store i64 %760, i64* %RAX, align 8, !tbaa !2428
  %761 = icmp ult i32 %759, %758
  %762 = icmp ult i32 %759, 1
  %763 = or i1 %761, %762
  %764 = zext i1 %763 to i8
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %764, i8* %765, align 1, !tbaa !2432
  %766 = and i32 %759, 255
  %767 = call i32 @llvm.ctpop.i32(i32 %766) #16
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  %770 = xor i8 %769, 1
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %770, i8* %771, align 1, !tbaa !2446
  %772 = xor i64 1, %755
  %773 = trunc i64 %772 to i32
  %774 = xor i32 %773, %759
  %775 = lshr i32 %774, 4
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %777, i8* %778, align 1, !tbaa !2447
  %779 = icmp eq i32 %759, 0
  %780 = zext i1 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %780, i8* %781, align 1, !tbaa !2448
  %782 = lshr i32 %759, 31
  %783 = trunc i32 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %783, i8* %784, align 1, !tbaa !2449
  %785 = lshr i32 %758, 31
  %786 = xor i32 %782, %785
  %787 = add nuw nsw i32 %786, %782
  %788 = icmp eq i32 %787, 2
  %789 = zext i1 %788 to i8
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %789, i8* %790, align 1, !tbaa !2450
  %791 = load i64, i64* %RBP
  %792 = sub i64 %791, 40
  %793 = load i32, i32* %EAX
  %794 = zext i32 %793 to i64
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %792 to i32*
  store i32 %793, i32* %797
  %798 = load i64, i64* %PC
  %799 = sub i64 %798, 195
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 5
  store i64 %801, i64* %PC
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %799, i64* %802, align 8, !tbaa !2428
  br label %block_4017a2

block_4017ae:                                     ; preds = %block_4017a2
  %803 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 8
  store i64 %805, i64* %PC
  %806 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 56) to double*)
  %807 = bitcast i8* %803 to double*
  store double %806, double* %807, align 1, !tbaa !2455
  %808 = getelementptr inbounds i8, i8* %803, i64 8
  %809 = bitcast i8* %808 to double*
  store double 0.000000e+00, double* %809, align 1, !tbaa !2455
  %810 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 8
  store i64 %812, i64* %PC
  %813 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 64) to double*)
  %814 = bitcast i8* %810 to double*
  store double %813, double* %814, align 1, !tbaa !2455
  %815 = getelementptr inbounds i8, i8* %810, i64 8
  %816 = bitcast i8* %815 to double*
  store double 0.000000e+00, double* %816, align 1, !tbaa !2455
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 5
  store i64 %818, i64* %PC
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %819 = load i64, i64* %RBP
  %820 = sub i64 %819, 36
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 7
  store i64 %822, i64* %PC
  %823 = inttoptr i64 %820 to i32*
  %824 = load i32, i32* %823
  %825 = sext i32 %824 to i64
  %826 = mul nsw i64 %825, 3125
  %827 = trunc i64 %826 to i32
  %828 = and i64 %826, 4294967295
  store i64 %828, i64* %RCX, align 8, !tbaa !2428
  %829 = shl i64 %826, 32
  %830 = ashr exact i64 %829, 32
  %831 = icmp ne i64 %830, %826
  %832 = zext i1 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %832, i8* %833, align 1, !tbaa !2432
  %834 = and i32 %827, 255
  %835 = call i32 @llvm.ctpop.i32(i32 %834) #16
  %836 = trunc i32 %835 to i8
  %837 = and i8 %836, 1
  %838 = xor i8 %837, 1
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %838, i8* %839, align 1, !tbaa !2446
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %840, align 1, !tbaa !2447
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %841, align 1, !tbaa !2448
  %842 = lshr i32 %827, 31
  %843 = trunc i32 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %843, i8* %844, align 1, !tbaa !2449
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %832, i8* %845, align 1, !tbaa !2450
  %846 = load i64, i64* %RBP
  %847 = sub i64 %846, 48
  %848 = load i32, i32* %EAX
  %849 = zext i32 %848 to i64
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 3
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %847 to i32*
  store i32 %848, i32* %852
  %853 = load i32, i32* %ECX
  %854 = zext i32 %853 to i64
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 2
  store i64 %856, i64* %PC
  %857 = and i64 %854, 4294967295
  store i64 %857, i64* %RAX, align 8, !tbaa !2428
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 1
  store i64 %859, i64* %PC
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %862 = bitcast %union.anon* %861 to i32*
  %863 = load i32, i32* %862, align 8, !tbaa !2454
  %864 = sext i32 %863 to i64
  %865 = lshr i64 %864, 32
  store i64 %865, i64* %860, align 8, !tbaa !2428
  %866 = load i64, i64* %RBP
  %867 = sub i64 %866, 48
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 3
  store i64 %869, i64* %PC
  %870 = inttoptr i64 %867 to i32*
  %871 = load i32, i32* %870
  %872 = zext i32 %871 to i64
  store i64 %872, i64* %RCX, align 8, !tbaa !2428
  %873 = load i32, i32* %ECX
  %874 = zext i32 %873 to i64
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 2
  store i64 %876, i64* %PC
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %878 = bitcast %union.anon* %877 to i32*
  %879 = load i32, i32* %878, align 8, !tbaa !2454
  %880 = zext i32 %879 to i64
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %882 = bitcast %union.anon* %881 to i32*
  %883 = load i32, i32* %882, align 8, !tbaa !2454
  %884 = zext i32 %883 to i64
  %885 = shl i64 %874, 32
  %886 = ashr exact i64 %885, 32
  %887 = shl nuw i64 %884, 32
  %888 = or i64 %887, %880
  %889 = sdiv i64 %888, %886
  %890 = shl i64 %889, 32
  %891 = ashr exact i64 %890, 32
  %892 = icmp eq i64 %889, %891
  br i1 %892, label %897, label %893

; <label>:893:                                    ; preds = %block_4017ae
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %895 = load i64, i64* %894, align 8, !tbaa !2428
  %896 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %895, %struct.Memory* %MEMORY.3) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:897:                                    ; preds = %block_4017ae
  %898 = srem i64 %888, %886
  %899 = getelementptr inbounds %union.anon, %union.anon* %877, i64 0, i32 0
  %900 = and i64 %889, 4294967295
  store i64 %900, i64* %899, align 8, !tbaa !2428
  %901 = getelementptr inbounds %union.anon, %union.anon* %881, i64 0, i32 0
  %902 = and i64 %898, 4294967295
  store i64 %902, i64* %901, align 8, !tbaa !2428
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %903, align 1, !tbaa !2432
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %904, align 1, !tbaa !2446
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %905, align 1, !tbaa !2447
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %906, align 1, !tbaa !2448
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %907, align 1, !tbaa !2449
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %908, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %893, %897
  %909 = phi %struct.Memory* [ %896, %893 ], [ %MEMORY.3, %897 ]
  %910 = load i64, i64* %RBP
  %911 = sub i64 %910, 36
  %912 = load i32, i32* %EDX
  %913 = zext i32 %912 to i64
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 3
  store i64 %915, i64* %PC
  %916 = inttoptr i64 %911 to i32*
  store i32 %912, i32* %916
  %917 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %918 = load i64, i64* %RBP
  %919 = sub i64 %918, 36
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  store i64 %921, i64* %PC
  %922 = inttoptr i64 %919 to i32*
  %923 = load i32, i32* %922
  %924 = sitofp i32 %923 to double
  %925 = bitcast i8* %917 to double*
  store double %924, double* %925, align 1, !tbaa !2455
  %926 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %927 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %928 = bitcast %union.vec128_t* %XMM1 to i8*
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 4
  store i64 %930, i64* %PC
  %931 = bitcast i8* %927 to double*
  %932 = load double, double* %931, align 1
  %933 = getelementptr inbounds i8, i8* %927, i64 8
  %934 = bitcast i8* %933 to i64*
  %935 = load i64, i64* %934, align 1
  %936 = bitcast i8* %928 to double*
  %937 = load double, double* %936, align 1
  %938 = fsub double %932, %937
  %939 = bitcast i8* %926 to double*
  store double %938, double* %939, align 1, !tbaa !2455
  %940 = getelementptr inbounds i8, i8* %926, i64 8
  %941 = bitcast i8* %940 to i64*
  store i64 %935, i64* %941, align 1, !tbaa !2455
  %942 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %943 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %944 = bitcast %union.vec128_t* %XMM0 to i8*
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 4
  store i64 %946, i64* %PC
  %947 = bitcast i8* %943 to double*
  %948 = load double, double* %947, align 1
  %949 = getelementptr inbounds i8, i8* %943, i64 8
  %950 = bitcast i8* %949 to i64*
  %951 = load i64, i64* %950, align 1
  %952 = bitcast i8* %944 to double*
  %953 = load double, double* %952, align 1
  %954 = fdiv double %948, %953
  %955 = bitcast i8* %942 to double*
  store double %954, double* %955, align 1, !tbaa !2455
  %956 = getelementptr inbounds i8, i8* %942, i64 8
  %957 = bitcast i8* %956 to i64*
  store i64 %951, i64* %957, align 1, !tbaa !2455
  %958 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %959 = bitcast %union.vec128_t* %XMM2 to i8*
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 4
  store i64 %961, i64* %PC
  %962 = bitcast i8* %958 to <2 x i32>*
  %963 = load <2 x i32>, <2 x i32>* %962, align 1
  %964 = getelementptr inbounds i8, i8* %958, i64 8
  %965 = bitcast i8* %964 to <2 x i32>*
  %966 = load <2 x i32>, <2 x i32>* %965, align 1
  %967 = bitcast i8* %959 to double*
  %968 = load double, double* %967, align 1
  %969 = fptrunc double %968 to float
  %970 = bitcast i8* %958 to float*
  store float %969, float* %970, align 1, !tbaa !2452
  %971 = extractelement <2 x i32> %963, i32 1
  %972 = getelementptr inbounds i8, i8* %958, i64 4
  %973 = bitcast i8* %972 to i32*
  store i32 %971, i32* %973, align 1, !tbaa !2452
  %974 = extractelement <2 x i32> %966, i32 0
  %975 = bitcast i8* %964 to i32*
  store i32 %974, i32* %975, align 1, !tbaa !2452
  %976 = extractelement <2 x i32> %966, i32 1
  %977 = getelementptr inbounds i8, i8* %958, i64 12
  %978 = bitcast i8* %977 to i32*
  store i32 %976, i32* %978, align 1, !tbaa !2452
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 8
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 4
  store i64 %982, i64* %PC
  %983 = inttoptr i64 %980 to i64*
  %984 = load i64, i64* %983
  store i64 %984, i64* %RSI, align 8, !tbaa !2428
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 12
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 3
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %986 to i32*
  %990 = load i32, i32* %989
  %991 = zext i32 %990 to i64
  store i64 %991, i64* %RDX, align 8, !tbaa !2428
  %992 = load i64, i64* %RDX
  %993 = load i64, i64* %RBP
  %994 = sub i64 %993, 44
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 4
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %994 to i32*
  %998 = load i32, i32* %997
  %999 = shl i64 %992, 32
  %1000 = ashr exact i64 %999, 32
  %1001 = sext i32 %998 to i64
  %1002 = mul nsw i64 %1001, %1000
  %1003 = trunc i64 %1002 to i32
  %1004 = and i64 %1002, 4294967295
  store i64 %1004, i64* %RDX, align 8, !tbaa !2428
  %1005 = shl i64 %1002, 32
  %1006 = ashr exact i64 %1005, 32
  %1007 = icmp ne i64 %1006, %1002
  %1008 = zext i1 %1007 to i8
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1008, i8* %1009, align 1, !tbaa !2432
  %1010 = and i32 %1003, 255
  %1011 = call i32 @llvm.ctpop.i32(i32 %1010) #16
  %1012 = trunc i32 %1011 to i8
  %1013 = and i8 %1012, 1
  %1014 = xor i8 %1013, 1
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1014, i8* %1015, align 1, !tbaa !2446
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1016, align 1, !tbaa !2447
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1017, align 1, !tbaa !2448
  %1018 = lshr i32 %1003, 31
  %1019 = trunc i32 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1019, i8* %1020, align 1, !tbaa !2449
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1008, i8* %1021, align 1, !tbaa !2450
  %1022 = load i64, i64* %RDX
  %1023 = load i64, i64* %RBP
  %1024 = sub i64 %1023, 40
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 3
  store i64 %1026, i64* %PC
  %1027 = trunc i64 %1022 to i32
  %1028 = inttoptr i64 %1024 to i32*
  %1029 = load i32, i32* %1028
  %1030 = add i32 %1029, %1027
  %1031 = zext i32 %1030 to i64
  store i64 %1031, i64* %RDX, align 8, !tbaa !2428
  %1032 = icmp ult i32 %1030, %1027
  %1033 = icmp ult i32 %1030, %1029
  %1034 = or i1 %1032, %1033
  %1035 = zext i1 %1034 to i8
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1035, i8* %1036, align 1, !tbaa !2432
  %1037 = and i32 %1030, 255
  %1038 = call i32 @llvm.ctpop.i32(i32 %1037) #16
  %1039 = trunc i32 %1038 to i8
  %1040 = and i8 %1039, 1
  %1041 = xor i8 %1040, 1
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1041, i8* %1042, align 1, !tbaa !2446
  %1043 = xor i32 %1029, %1027
  %1044 = xor i32 %1043, %1030
  %1045 = lshr i32 %1044, 4
  %1046 = trunc i32 %1045 to i8
  %1047 = and i8 %1046, 1
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1047, i8* %1048, align 1, !tbaa !2447
  %1049 = icmp eq i32 %1030, 0
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1050, i8* %1051, align 1, !tbaa !2448
  %1052 = lshr i32 %1030, 31
  %1053 = trunc i32 %1052 to i8
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1053, i8* %1054, align 1, !tbaa !2449
  %1055 = lshr i32 %1027, 31
  %1056 = lshr i32 %1029, 31
  %1057 = xor i32 %1052, %1055
  %1058 = xor i32 %1052, %1056
  %1059 = add nuw nsw i32 %1057, %1058
  %1060 = icmp eq i32 %1059, 2
  %1061 = zext i1 %1060 to i8
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1061, i8* %1062, align 1, !tbaa !2450
  %1063 = load i32, i32* %EDX
  %1064 = zext i32 %1063 to i64
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 3
  store i64 %1066, i64* %PC
  %1067 = shl i64 %1064, 32
  %1068 = ashr exact i64 %1067, 32
  store i64 %1068, i64* %RDI, align 8, !tbaa !2428
  %1069 = load i64, i64* %RSI
  %1070 = load i64, i64* %RDI
  %1071 = mul i64 %1070, 4
  %1072 = add i64 %1071, %1069
  %1073 = bitcast %union.vec128_t* %XMM0 to i8*
  %1074 = load i64, i64* %PC
  %1075 = add i64 %1074, 5
  store i64 %1075, i64* %PC
  %1076 = bitcast i8* %1073 to <2 x float>*
  %1077 = load <2 x float>, <2 x float>* %1076, align 1
  %1078 = extractelement <2 x float> %1077, i32 0
  %1079 = inttoptr i64 %1072 to float*
  store float %1078, float* %1079
  %1080 = load i64, i64* %RBP
  %1081 = sub i64 %1080, 8
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 4
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1081 to i64*
  %1085 = load i64, i64* %1084
  store i64 %1085, i64* %RSI, align 8, !tbaa !2428
  %1086 = load i64, i64* %RBP
  %1087 = sub i64 %1086, 12
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 3
  store i64 %1089, i64* %PC
  %1090 = inttoptr i64 %1087 to i32*
  %1091 = load i32, i32* %1090
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %RDX, align 8, !tbaa !2428
  %1093 = load i64, i64* %RDX
  %1094 = load i64, i64* %RBP
  %1095 = sub i64 %1094, 44
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 4
  store i64 %1097, i64* %PC
  %1098 = inttoptr i64 %1095 to i32*
  %1099 = load i32, i32* %1098
  %1100 = shl i64 %1093, 32
  %1101 = ashr exact i64 %1100, 32
  %1102 = sext i32 %1099 to i64
  %1103 = mul nsw i64 %1102, %1101
  %1104 = trunc i64 %1103 to i32
  %1105 = and i64 %1103, 4294967295
  store i64 %1105, i64* %RDX, align 8, !tbaa !2428
  %1106 = shl i64 %1103, 32
  %1107 = ashr exact i64 %1106, 32
  %1108 = icmp ne i64 %1107, %1103
  %1109 = zext i1 %1108 to i8
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1109, i8* %1110, align 1, !tbaa !2432
  %1111 = and i32 %1104, 255
  %1112 = call i32 @llvm.ctpop.i32(i32 %1111) #16
  %1113 = trunc i32 %1112 to i8
  %1114 = and i8 %1113, 1
  %1115 = xor i8 %1114, 1
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1115, i8* %1116, align 1, !tbaa !2446
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1117, align 1, !tbaa !2447
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1118, align 1, !tbaa !2448
  %1119 = lshr i32 %1104, 31
  %1120 = trunc i32 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1120, i8* %1121, align 1, !tbaa !2449
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1109, i8* %1122, align 1, !tbaa !2450
  %1123 = load i64, i64* %RDX
  %1124 = load i64, i64* %RBP
  %1125 = sub i64 %1124, 40
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 3
  store i64 %1127, i64* %PC
  %1128 = trunc i64 %1123 to i32
  %1129 = inttoptr i64 %1125 to i32*
  %1130 = load i32, i32* %1129
  %1131 = add i32 %1130, %1128
  %1132 = zext i32 %1131 to i64
  store i64 %1132, i64* %RDX, align 8, !tbaa !2428
  %1133 = icmp ult i32 %1131, %1128
  %1134 = icmp ult i32 %1131, %1130
  %1135 = or i1 %1133, %1134
  %1136 = zext i1 %1135 to i8
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1136, i8* %1137, align 1, !tbaa !2432
  %1138 = and i32 %1131, 255
  %1139 = call i32 @llvm.ctpop.i32(i32 %1138) #16
  %1140 = trunc i32 %1139 to i8
  %1141 = and i8 %1140, 1
  %1142 = xor i8 %1141, 1
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1142, i8* %1143, align 1, !tbaa !2446
  %1144 = xor i32 %1130, %1128
  %1145 = xor i32 %1144, %1131
  %1146 = lshr i32 %1145, 4
  %1147 = trunc i32 %1146 to i8
  %1148 = and i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1148, i8* %1149, align 1, !tbaa !2447
  %1150 = icmp eq i32 %1131, 0
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1151, i8* %1152, align 1, !tbaa !2448
  %1153 = lshr i32 %1131, 31
  %1154 = trunc i32 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1154, i8* %1155, align 1, !tbaa !2449
  %1156 = lshr i32 %1128, 31
  %1157 = lshr i32 %1130, 31
  %1158 = xor i32 %1153, %1156
  %1159 = xor i32 %1153, %1157
  %1160 = add nuw nsw i32 %1158, %1159
  %1161 = icmp eq i32 %1160, 2
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1162, i8* %1163, align 1, !tbaa !2450
  %1164 = load i32, i32* %EDX
  %1165 = zext i32 %1164 to i64
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 3
  store i64 %1167, i64* %PC
  %1168 = shl i64 %1165, 32
  %1169 = ashr exact i64 %1168, 32
  store i64 %1169, i64* %RDI, align 8, !tbaa !2428
  %1170 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1171 = load i64, i64* %RSI
  %1172 = load i64, i64* %RDI
  %1173 = mul i64 %1172, 4
  %1174 = add i64 %1173, %1171
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  store i64 %1176, i64* %PC
  %1177 = inttoptr i64 %1174 to float*
  %1178 = load float, float* %1177
  %1179 = bitcast i8* %1170 to float*
  store float %1178, float* %1179, align 1, !tbaa !2452
  %1180 = getelementptr inbounds i8, i8* %1170, i64 4
  %1181 = bitcast i8* %1180 to float*
  store float 0.000000e+00, float* %1181, align 1, !tbaa !2452
  %1182 = getelementptr inbounds i8, i8* %1170, i64 8
  %1183 = bitcast i8* %1182 to float*
  store float 0.000000e+00, float* %1183, align 1, !tbaa !2452
  %1184 = getelementptr inbounds i8, i8* %1170, i64 12
  %1185 = bitcast i8* %1184 to float*
  store float 0.000000e+00, float* %1185, align 1, !tbaa !2452
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 32
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RSI, align 8, !tbaa !2428
  %1192 = bitcast %union.vec128_t* %XMM0 to i8*
  %1193 = load i64, i64* %RSI
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 3
  store i64 %1195, i64* %PC
  %1196 = bitcast i8* %1192 to <2 x float>*
  %1197 = load <2 x float>, <2 x float>* %1196, align 1
  %1198 = extractelement <2 x float> %1197, i32 0
  %1199 = inttoptr i64 %1193 to float*
  %1200 = load float, float* %1199
  %1201 = fcmp uno float %1198, %1200
  br i1 %1201, label %1202, label %1214

; <label>:1202:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %1203 = fadd float %1198, %1200
  %1204 = bitcast float %1203 to i32
  %1205 = and i32 %1204, 2143289344
  %1206 = icmp eq i32 %1205, 2139095040
  %1207 = and i32 %1204, 4194303
  %1208 = icmp ne i32 %1207, 0
  %1209 = and i1 %1206, %1208
  br i1 %1209, label %1210, label %1220

; <label>:1210:                                   ; preds = %1202
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1212 = load i64, i64* %1211, align 8, !tbaa !2428
  %1213 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1212, %struct.Memory* %909) #17
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:1214:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %1215 = fcmp ogt float %1198, %1200
  br i1 %1215, label %1220, label %1216

; <label>:1216:                                   ; preds = %1214
  %1217 = fcmp olt float %1198, %1200
  br i1 %1217, label %1220, label %1218

; <label>:1218:                                   ; preds = %1216
  %1219 = fcmp oeq float %1198, %1200
  br i1 %1219, label %1220, label %1227

; <label>:1220:                                   ; preds = %1218, %1216, %1214, %1202
  %1221 = phi i8 [ 0, %1214 ], [ 0, %1216 ], [ 1, %1218 ], [ 1, %1202 ]
  %1222 = phi i8 [ 0, %1214 ], [ 0, %1216 ], [ 0, %1218 ], [ 1, %1202 ]
  %1223 = phi i8 [ 0, %1214 ], [ 1, %1216 ], [ 0, %1218 ], [ 1, %1202 ]
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1221, i8* %1224, align 1, !tbaa !2451
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1222, i8* %1225, align 1, !tbaa !2451
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1223, i8* %1226, align 1, !tbaa !2451
  br label %1227

; <label>:1227:                                   ; preds = %1220, %1218
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1228, align 1, !tbaa !2451
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1229, align 1, !tbaa !2451
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1230, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %1210, %1227
  %1231 = phi %struct.Memory* [ %1213, %1210 ], [ %909, %1227 ]
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 38
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 6
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 6
  store i64 %1237, i64* %PC
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1239 = load i8, i8* %1238, align 1, !tbaa !2432
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1241 = load i8, i8* %1240, align 1, !tbaa !2448
  %1242 = or i8 %1241, %1239
  %1243 = icmp ne i8 %1242, 0
  %1244 = zext i1 %1243 to i8
  store i8 %1244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1246 = select i1 %1243, i64 %1233, i64 %1235
  store i64 %1246, i64* %1245, align 8, !tbaa !2428
  %1247 = load i8, i8* %BRANCH_TAKEN
  %1248 = icmp eq i8 %1247, 1
  %1249 = load i64, i64* %RBP
  br i1 %1248, label %block_401842, label %block_401822

block_4017a2:                                     ; preds = %block_40178f, %block_40184f
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_40178f ], [ %MEMORY.2, %block_40184f ]
  %1250 = load i64, i64* %RBP
  %1251 = sub i64 %1250, 40
  %1252 = load i64, i64* %PC
  %1253 = add i64 %1252, 3
  store i64 %1253, i64* %PC
  %1254 = inttoptr i64 %1251 to i32*
  %1255 = load i32, i32* %1254
  %1256 = zext i32 %1255 to i64
  store i64 %1256, i64* %RAX, align 8, !tbaa !2428
  %1257 = load i32, i32* %EAX
  %1258 = zext i32 %1257 to i64
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 16
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 3
  store i64 %1262, i64* %PC
  %1263 = inttoptr i64 %1260 to i32*
  %1264 = load i32, i32* %1263
  %1265 = sub i32 %1257, %1264
  %1266 = icmp ult i32 %1257, %1264
  %1267 = zext i1 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1267, i8* %1268, align 1, !tbaa !2432
  %1269 = and i32 %1265, 255
  %1270 = call i32 @llvm.ctpop.i32(i32 %1269) #16
  %1271 = trunc i32 %1270 to i8
  %1272 = and i8 %1271, 1
  %1273 = xor i8 %1272, 1
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1273, i8* %1274, align 1, !tbaa !2446
  %1275 = xor i32 %1264, %1257
  %1276 = xor i32 %1275, %1265
  %1277 = lshr i32 %1276, 4
  %1278 = trunc i32 %1277 to i8
  %1279 = and i8 %1278, 1
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1279, i8* %1280, align 1, !tbaa !2447
  %1281 = icmp eq i32 %1265, 0
  %1282 = zext i1 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1282, i8* %1283, align 1, !tbaa !2448
  %1284 = lshr i32 %1265, 31
  %1285 = trunc i32 %1284 to i8
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1285, i8* %1286, align 1, !tbaa !2449
  %1287 = lshr i32 %1257, 31
  %1288 = lshr i32 %1264, 31
  %1289 = xor i32 %1288, %1287
  %1290 = xor i32 %1284, %1287
  %1291 = add nuw nsw i32 %1290, %1289
  %1292 = icmp eq i32 %1291, 2
  %1293 = zext i1 %1292 to i8
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1293, i8* %1294, align 1, !tbaa !2450
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 194
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 6
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 6
  store i64 %1300, i64* %PC
  %1301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1302 = load i8, i8* %1301, align 1, !tbaa !2449
  %1303 = icmp ne i8 %1302, 0
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1305 = load i8, i8* %1304, align 1, !tbaa !2450
  %1306 = icmp ne i8 %1305, 0
  %1307 = xor i1 %1303, %1306
  %1308 = xor i1 %1307, true
  %1309 = zext i1 %1308 to i8
  store i8 %1309, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1311 = select i1 %1307, i64 %1298, i64 %1296
  store i64 %1311, i64* %1310, align 8, !tbaa !2428
  %1312 = load i8, i8* %BRANCH_TAKEN
  %1313 = icmp eq i8 %1312, 1
  br i1 %1313, label %block_40186a, label %block_4017ae

block_401912:                                     ; preds = %block_4018c8
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 5
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 5
  store i64 %1317, i64* %PC
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1315, i64* %1318, align 8, !tbaa !2428
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 44
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 3
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i32*
  %1324 = load i32, i32* %1323
  %1325 = zext i32 %1324 to i64
  store i64 %1325, i64* %RAX, align 8, !tbaa !2428
  %1326 = load i64, i64* %RAX
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 3
  store i64 %1328, i64* %PC
  %1329 = trunc i64 %1326 to i32
  %1330 = add i32 1, %1329
  %1331 = zext i32 %1330 to i64
  store i64 %1331, i64* %RAX, align 8, !tbaa !2428
  %1332 = icmp ult i32 %1330, %1329
  %1333 = icmp ult i32 %1330, 1
  %1334 = or i1 %1332, %1333
  %1335 = zext i1 %1334 to i8
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1335, i8* %1336, align 1, !tbaa !2432
  %1337 = and i32 %1330, 255
  %1338 = call i32 @llvm.ctpop.i32(i32 %1337) #16
  %1339 = trunc i32 %1338 to i8
  %1340 = and i8 %1339, 1
  %1341 = xor i8 %1340, 1
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1341, i8* %1342, align 1, !tbaa !2446
  %1343 = xor i64 1, %1326
  %1344 = trunc i64 %1343 to i32
  %1345 = xor i32 %1344, %1330
  %1346 = lshr i32 %1345, 4
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1348, i8* %1349, align 1, !tbaa !2447
  %1350 = icmp eq i32 %1330, 0
  %1351 = zext i1 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1351, i8* %1352, align 1, !tbaa !2448
  %1353 = lshr i32 %1330, 31
  %1354 = trunc i32 %1353 to i8
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1354, i8* %1355, align 1, !tbaa !2449
  %1356 = lshr i32 %1329, 31
  %1357 = xor i32 %1353, %1356
  %1358 = add nuw nsw i32 %1357, %1353
  %1359 = icmp eq i32 %1358, 2
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1360, i8* %1361, align 1, !tbaa !2450
  %1362 = load i64, i64* %RBP
  %1363 = sub i64 %1362, 44
  %1364 = load i32, i32* %EAX
  %1365 = zext i32 %1364 to i64
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 3
  store i64 %1367, i64* %PC
  %1368 = inttoptr i64 %1363 to i32*
  store i32 %1364, i32* %1368
  %1369 = load i64, i64* %PC
  %1370 = sub i64 %1369, 107
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 5
  store i64 %1372, i64* %PC
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1370, i64* %1373, align 8, !tbaa !2428
  br label %block_4018b5

block_401890:                                     ; preds = %block_401884
  %1374 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1375 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1376 = bitcast %union.vec128_t* %XMM0 to i8*
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 3
  store i64 %1378, i64* %PC
  %1379 = bitcast i8* %1375 to i64*
  %1380 = load i64, i64* %1379, align 1
  %1381 = getelementptr inbounds i8, i8* %1375, i64 8
  %1382 = bitcast i8* %1381 to i64*
  %1383 = load i64, i64* %1382, align 1
  %1384 = bitcast i8* %1376 to i64*
  %1385 = load i64, i64* %1384, align 1
  %1386 = getelementptr inbounds i8, i8* %1376, i64 8
  %1387 = bitcast i8* %1386 to i64*
  %1388 = load i64, i64* %1387, align 1
  %1389 = xor i64 %1385, %1380
  %1390 = xor i64 %1388, %1383
  %1391 = trunc i64 %1389 to i32
  %1392 = lshr i64 %1389, 32
  %1393 = trunc i64 %1392 to i32
  %1394 = bitcast i8* %1374 to i32*
  store i32 %1391, i32* %1394, align 1, !tbaa !2454
  %1395 = getelementptr inbounds i8, i8* %1374, i64 4
  %1396 = bitcast i8* %1395 to i32*
  store i32 %1393, i32* %1396, align 1, !tbaa !2454
  %1397 = trunc i64 %1390 to i32
  %1398 = getelementptr inbounds i8, i8* %1374, i64 8
  %1399 = bitcast i8* %1398 to i32*
  store i32 %1397, i32* %1399, align 1, !tbaa !2454
  %1400 = lshr i64 %1390, 32
  %1401 = trunc i64 %1400 to i32
  %1402 = getelementptr inbounds i8, i8* %1374, i64 12
  %1403 = bitcast i8* %1402 to i32*
  store i32 %1401, i32* %1403, align 1, !tbaa !2454
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 24
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 4
  store i64 %1407, i64* %PC
  %1408 = inttoptr i64 %1405 to i64*
  %1409 = load i64, i64* %1408
  store i64 %1409, i64* %RAX, align 8, !tbaa !2428
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 40
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 4
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i32*
  %1415 = load i32, i32* %1414
  %1416 = sext i32 %1415 to i64
  store i64 %1416, i64* %RCX, align 8, !tbaa !2428
  %1417 = load i64, i64* %RAX
  %1418 = load i64, i64* %RCX
  %1419 = mul i64 %1418, 4
  %1420 = add i64 %1419, %1417
  %1421 = bitcast %union.vec128_t* %XMM0 to i8*
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 5
  store i64 %1423, i64* %PC
  %1424 = bitcast i8* %1421 to <2 x float>*
  %1425 = load <2 x float>, <2 x float>* %1424, align 1
  %1426 = extractelement <2 x float> %1425, i32 0
  %1427 = inttoptr i64 %1420 to float*
  store float %1426, float* %1427
  %1428 = load i64, i64* %RBP
  %1429 = sub i64 %1428, 40
  %1430 = load i64, i64* %PC
  %1431 = add i64 %1430, 3
  store i64 %1431, i64* %PC
  %1432 = inttoptr i64 %1429 to i32*
  %1433 = load i32, i32* %1432
  %1434 = zext i32 %1433 to i64
  store i64 %1434, i64* %RAX, align 8, !tbaa !2428
  %1435 = load i64, i64* %RAX
  %1436 = load i64, i64* %PC
  %1437 = add i64 %1436, 3
  store i64 %1437, i64* %PC
  %1438 = trunc i64 %1435 to i32
  %1439 = add i32 1, %1438
  %1440 = zext i32 %1439 to i64
  store i64 %1440, i64* %RAX, align 8, !tbaa !2428
  %1441 = icmp ult i32 %1439, %1438
  %1442 = icmp ult i32 %1439, 1
  %1443 = or i1 %1441, %1442
  %1444 = zext i1 %1443 to i8
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1444, i8* %1445, align 1, !tbaa !2432
  %1446 = and i32 %1439, 255
  %1447 = call i32 @llvm.ctpop.i32(i32 %1446) #16
  %1448 = trunc i32 %1447 to i8
  %1449 = and i8 %1448, 1
  %1450 = xor i8 %1449, 1
  %1451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1450, i8* %1451, align 1, !tbaa !2446
  %1452 = xor i64 1, %1435
  %1453 = trunc i64 %1452 to i32
  %1454 = xor i32 %1453, %1439
  %1455 = lshr i32 %1454, 4
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1457, i8* %1458, align 1, !tbaa !2447
  %1459 = icmp eq i32 %1439, 0
  %1460 = zext i1 %1459 to i8
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1460, i8* %1461, align 1, !tbaa !2448
  %1462 = lshr i32 %1439, 31
  %1463 = trunc i32 %1462 to i8
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1463, i8* %1464, align 1, !tbaa !2449
  %1465 = lshr i32 %1438, 31
  %1466 = xor i32 %1462, %1465
  %1467 = add nuw nsw i32 %1466, %1462
  %1468 = icmp eq i32 %1467, 2
  %1469 = zext i1 %1468 to i8
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1469, i8* %1470, align 1, !tbaa !2450
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 40
  %1473 = load i32, i32* %EAX
  %1474 = zext i32 %1473 to i64
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 3
  store i64 %1476, i64* %PC
  %1477 = inttoptr i64 %1472 to i32*
  store i32 %1473, i32* %1477
  %1478 = load i64, i64* %PC
  %1479 = sub i64 %1478, 37
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 5
  store i64 %1481, i64* %PC
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1479, i64* %1482, align 8, !tbaa !2428
  br label %block_401884

block_40178f:                                     ; preds = %block_40186a, %block_401760
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401760 ], [ %MEMORY.3, %block_40186a ]
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 44
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 3
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i32*
  %1488 = load i32, i32* %1487
  %1489 = zext i32 %1488 to i64
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = load i32, i32* %EAX
  %1491 = zext i32 %1490 to i64
  %1492 = load i64, i64* %RBP
  %1493 = sub i64 %1492, 16
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 3
  store i64 %1495, i64* %PC
  %1496 = inttoptr i64 %1493 to i32*
  %1497 = load i32, i32* %1496
  %1498 = sub i32 %1490, %1497
  %1499 = icmp ult i32 %1490, %1497
  %1500 = zext i1 %1499 to i8
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1500, i8* %1501, align 1, !tbaa !2432
  %1502 = and i32 %1498, 255
  %1503 = call i32 @llvm.ctpop.i32(i32 %1502) #16
  %1504 = trunc i32 %1503 to i8
  %1505 = and i8 %1504, 1
  %1506 = xor i8 %1505, 1
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1506, i8* %1507, align 1, !tbaa !2446
  %1508 = xor i32 %1497, %1490
  %1509 = xor i32 %1508, %1498
  %1510 = lshr i32 %1509, 4
  %1511 = trunc i32 %1510 to i8
  %1512 = and i8 %1511, 1
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1512, i8* %1513, align 1, !tbaa !2447
  %1514 = icmp eq i32 %1498, 0
  %1515 = zext i1 %1514 to i8
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1515, i8* %1516, align 1, !tbaa !2448
  %1517 = lshr i32 %1498, 31
  %1518 = trunc i32 %1517 to i8
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1518, i8* %1519, align 1, !tbaa !2449
  %1520 = lshr i32 %1490, 31
  %1521 = lshr i32 %1497, 31
  %1522 = xor i32 %1521, %1520
  %1523 = xor i32 %1517, %1520
  %1524 = add nuw nsw i32 %1523, %1522
  %1525 = icmp eq i32 %1524, 2
  %1526 = zext i1 %1525 to i8
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1526, i8* %1527, align 1, !tbaa !2450
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 232
  %1530 = load i64, i64* %PC
  %1531 = add i64 %1530, 6
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 6
  store i64 %1533, i64* %PC
  %1534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1535 = load i8, i8* %1534, align 1, !tbaa !2449
  %1536 = icmp ne i8 %1535, 0
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1538 = load i8, i8* %1537, align 1, !tbaa !2450
  %1539 = icmp ne i8 %1538, 0
  %1540 = xor i1 %1536, %1539
  %1541 = xor i1 %1540, true
  %1542 = zext i1 %1541 to i8
  store i8 %1542, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1544 = select i1 %1540, i64 %1531, i64 %1529
  store i64 %1544, i64* %1543, align 8, !tbaa !2428
  %1545 = load i8, i8* %BRANCH_TAKEN
  %1546 = icmp eq i8 %1545, 1
  %1547 = load i64, i64* %RBP
  %1548 = sub i64 %1547, 40
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 7
  store i64 %1550, i64* %PC
  %1551 = inttoptr i64 %1548 to i32*
  store i32 0, i32* %1551
  br i1 %1546, label %block_401884, label %block_4017a2

block_401925:                                     ; preds = %block_4018b5
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 1
  store i64 %1553, i64* %PC
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1555 = load i64, i64* %1554, align 8, !tbaa !2428
  %1556 = add i64 %1555, 8
  %1557 = inttoptr i64 %1555 to i64*
  %1558 = load i64, i64* %1557
  store i64 %1558, i64* %RBP, align 8, !tbaa !2428
  store i64 %1556, i64* %1554, align 8, !tbaa !2428
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 1
  store i64 %1560, i64* %PC
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1563 = load i64, i64* %1562, align 8, !tbaa !2428
  %1564 = inttoptr i64 %1563 to i64*
  %1565 = load i64, i64* %1564
  store i64 %1565, i64* %1561, align 8, !tbaa !2428
  %1566 = add i64 %1563, 8
  store i64 %1566, i64* %1562, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_401884:                                     ; preds = %block_40178f, %block_401890
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.4, %block_40178f ], [ %MEMORY.5, %block_401890 ]
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 40
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 3
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  %1572 = load i32, i32* %1571
  %1573 = zext i32 %1572 to i64
  store i64 %1573, i64* %RAX, align 8, !tbaa !2428
  %1574 = load i32, i32* %EAX
  %1575 = zext i32 %1574 to i64
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 16
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 3
  store i64 %1579, i64* %PC
  %1580 = inttoptr i64 %1577 to i32*
  %1581 = load i32, i32* %1580
  %1582 = sub i32 %1574, %1581
  %1583 = icmp ult i32 %1574, %1581
  %1584 = zext i1 %1583 to i8
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1584, i8* %1585, align 1, !tbaa !2432
  %1586 = and i32 %1582, 255
  %1587 = call i32 @llvm.ctpop.i32(i32 %1586) #16
  %1588 = trunc i32 %1587 to i8
  %1589 = and i8 %1588, 1
  %1590 = xor i8 %1589, 1
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1590, i8* %1591, align 1, !tbaa !2446
  %1592 = xor i32 %1581, %1574
  %1593 = xor i32 %1592, %1582
  %1594 = lshr i32 %1593, 4
  %1595 = trunc i32 %1594 to i8
  %1596 = and i8 %1595, 1
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1596, i8* %1597, align 1, !tbaa !2447
  %1598 = icmp eq i32 %1582, 0
  %1599 = zext i1 %1598 to i8
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1599, i8* %1600, align 1, !tbaa !2448
  %1601 = lshr i32 %1582, 31
  %1602 = trunc i32 %1601 to i8
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1602, i8* %1603, align 1, !tbaa !2449
  %1604 = lshr i32 %1574, 31
  %1605 = lshr i32 %1581, 31
  %1606 = xor i32 %1605, %1604
  %1607 = xor i32 %1601, %1604
  %1608 = add nuw nsw i32 %1607, %1606
  %1609 = icmp eq i32 %1608, 2
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1610, i8* %1611, align 1, !tbaa !2450
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 36
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 6
  %1616 = load i64, i64* %PC
  %1617 = add i64 %1616, 6
  store i64 %1617, i64* %PC
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1619 = load i8, i8* %1618, align 1, !tbaa !2449
  %1620 = icmp ne i8 %1619, 0
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1622 = load i8, i8* %1621, align 1, !tbaa !2450
  %1623 = icmp ne i8 %1622, 0
  %1624 = xor i1 %1620, %1623
  %1625 = xor i1 %1624, true
  %1626 = zext i1 %1625 to i8
  store i8 %1626, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1628 = select i1 %1624, i64 %1615, i64 %1613
  store i64 %1628, i64* %1627, align 8, !tbaa !2428
  %1629 = load i8, i8* %BRANCH_TAKEN
  %1630 = icmp eq i8 %1629, 1
  br i1 %1630, label %block_4018ae, label %block_401890
}

; Function Attrs: noinline
define %struct.Memory* @sub_4029f0_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4029f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %55 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %56 = bitcast %union.vec128_t* %XMM0 to i8*
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = bitcast i8* %55 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = getelementptr inbounds i8, i8* %55, i64 8
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = bitcast i8* %56 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = getelementptr inbounds i8, i8* %56, i64 8
  %67 = bitcast i8* %66 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = xor i64 %65, %60
  %70 = xor i64 %68, %63
  %71 = trunc i64 %69 to i32
  %72 = lshr i64 %69, 32
  %73 = trunc i64 %72 to i32
  %74 = bitcast i8* %54 to i32*
  store i32 %71, i32* %74, align 1, !tbaa !2454
  %75 = getelementptr inbounds i8, i8* %54, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %73, i32* %76, align 1, !tbaa !2454
  %77 = trunc i64 %70 to i32
  %78 = getelementptr inbounds i8, i8* %54, i64 8
  %79 = bitcast i8* %78 to i32*
  store i32 %77, i32* %79, align 1, !tbaa !2454
  %80 = lshr i64 %70, 32
  %81 = trunc i64 %80 to i32
  %82 = getelementptr inbounds i8, i8* %54, i64 12
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 1, !tbaa !2454
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = load i32, i32* %EDI
  %87 = zext i32 %86 to i64
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 20
  %99 = load i32, i32* %EDX
  %100 = zext i32 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 32
  %106 = load i64, i64* %RCX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %105 to i64*
  store i64 %106, i64* %109
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 36
  %112 = load i32, i32* %R8D
  %113 = zext i32 %112 to i64
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %116
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 60
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 0, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 56
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 7
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  store i32 0, i32* %126
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 40
  %129 = bitcast %union.vec128_t* %XMM0 to i8*
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 5
  store i64 %131, i64* %PC
  %132 = bitcast i8* %129 to <2 x float>*
  %133 = load <2 x float>, <2 x float>* %132, align 1
  %134 = extractelement <2 x float> %133, i32 0
  %135 = inttoptr i64 %128 to float*
  store float %134, float* %135
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 8
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i32*
  %141 = load i32, i32* %140
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %142, align 1, !tbaa !2432
  %143 = and i32 %141, 255
  %144 = call i32 @llvm.ctpop.i32(i32 %143) #16
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %147, i8* %148, align 1, !tbaa !2446
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2447
  %150 = icmp eq i32 %141, 0
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %151, i8* %152, align 1, !tbaa !2448
  %153 = lshr i32 %141, 31
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %154, i8* %155, align 1, !tbaa !2449
  %156 = lshr i32 %141, 31
  %157 = xor i32 %153, %156
  %158 = add nuw nsw i32 %157, %156
  %159 = icmp eq i32 %158, 2
  %160 = zext i1 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %160, i8* %161, align 1, !tbaa !2450
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 19
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 6
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 6
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %169 = load i8, i8* %168, align 1, !tbaa !2448
  %170 = icmp eq i8 %169, 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %172 = load i8, i8* %171, align 1, !tbaa !2449
  %173 = icmp ne i8 %172, 0
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %175 = load i8, i8* %174, align 1, !tbaa !2450
  %176 = icmp ne i8 %175, 0
  %177 = xor i1 %173, %176
  %178 = xor i1 %177, true
  %179 = and i1 %170, %178
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %182 = select i1 %179, i64 %163, i64 %165
  store i64 %182, i64* %181, align 8, !tbaa !2428
  %183 = load i8, i8* %BRANCH_TAKEN
  %184 = icmp eq i8 %183, 1
  br i1 %184, label %block_402a33, label %block_402a26

block_402b3a:                                     ; preds = %block_402af8
  %185 = sub i64 %300, 4
  %186 = bitcast %union.vec128_t* %XMM0 to i8*
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC
  %189 = bitcast i8* %186 to <2 x float>*
  %190 = load <2 x float>, <2 x float>* %189, align 1
  %191 = extractelement <2 x float> %190, i32 0
  %192 = inttoptr i64 %185 to float*
  store float %191, float* %192
  br label %block_402b44

block_402b44:                                     ; preds = %block_402ae2, %block_402a26, %block_402b3a
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_402ae2 ], [ %MEMORY.1, %block_402b3a ], [ %2, %block_402a26 ]
  %193 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 4
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 5
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to float*
  %199 = load float, float* %198
  %200 = bitcast i8* %193 to float*
  store float %199, float* %200, align 1, !tbaa !2452
  %201 = getelementptr inbounds i8, i8* %193, i64 4
  %202 = bitcast i8* %201 to float*
  store float 0.000000e+00, float* %202, align 1, !tbaa !2452
  %203 = getelementptr inbounds i8, i8* %193, i64 8
  %204 = bitcast i8* %203 to float*
  store float 0.000000e+00, float* %204, align 1, !tbaa !2452
  %205 = getelementptr inbounds i8, i8* %193, i64 12
  %206 = bitcast i8* %205 to float*
  store float 0.000000e+00, float* %206, align 1, !tbaa !2452
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %210 = load i64, i64* %209, align 8, !tbaa !2428
  %211 = add i64 %210, 8
  %212 = inttoptr i64 %210 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RBP, align 8, !tbaa !2428
  store i64 %211, i64* %209, align 8, !tbaa !2428
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 1
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %218 = load i64, i64* %217, align 8, !tbaa !2428
  %219 = inttoptr i64 %218 to i64*
  %220 = load i64, i64* %219
  store i64 %220, i64* %216, align 8, !tbaa !2428
  %221 = add i64 %218, 8
  store i64 %221, i64* %217, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402af8:                                     ; preds = %block_402b04, %block_402af1
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_402af1 ], [ %MEMORY.1, %block_402b04 ]
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 44
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 3
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i32*
  %227 = load i32, i32* %226
  %228 = zext i32 %227 to i64
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = load i32, i32* %EAX
  %230 = zext i32 %229 to i64
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 8
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i32*
  %236 = load i32, i32* %235
  %237 = sub i32 %229, %236
  %238 = icmp ult i32 %229, %236
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %239, i8* %240, align 1, !tbaa !2432
  %241 = and i32 %237, 255
  %242 = call i32 @llvm.ctpop.i32(i32 %241) #16
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %245, i8* %246, align 1, !tbaa !2446
  %247 = xor i32 %236, %229
  %248 = xor i32 %247, %237
  %249 = lshr i32 %248, 4
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %251, i8* %252, align 1, !tbaa !2447
  %253 = icmp eq i32 %237, 0
  %254 = zext i1 %253 to i8
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %254, i8* %255, align 1, !tbaa !2448
  %256 = lshr i32 %237, 31
  %257 = trunc i32 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %257, i8* %258, align 1, !tbaa !2449
  %259 = lshr i32 %229, 31
  %260 = lshr i32 %236, 31
  %261 = xor i32 %260, %259
  %262 = xor i32 %256, %259
  %263 = add nuw nsw i32 %262, %261
  %264 = icmp eq i32 %263, 2
  %265 = zext i1 %264 to i8
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %265, i8* %266, align 1, !tbaa !2450
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 60
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 6
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 6
  store i64 %272, i64* %PC
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %274 = load i8, i8* %273, align 1, !tbaa !2449
  %275 = icmp ne i8 %274, 0
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %277 = load i8, i8* %276, align 1, !tbaa !2450
  %278 = icmp ne i8 %277, 0
  %279 = xor i1 %275, %278
  %280 = xor i1 %279, true
  %281 = zext i1 %280 to i8
  store i8 %281, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %283 = select i1 %279, i64 %270, i64 %268
  store i64 %283, i64* %282, align 8, !tbaa !2428
  %284 = load i8, i8* %BRANCH_TAKEN
  %285 = icmp eq i8 %284, 1
  %286 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %287 = load i64, i64* %RBP
  %288 = sub i64 %287, 40
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 5
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to float*
  %292 = load float, float* %291
  %293 = bitcast i8* %286 to float*
  store float %292, float* %293, align 1, !tbaa !2452
  %294 = getelementptr inbounds i8, i8* %286, i64 4
  %295 = bitcast i8* %294 to float*
  store float 0.000000e+00, float* %295, align 1, !tbaa !2452
  %296 = getelementptr inbounds i8, i8* %286, i64 8
  %297 = bitcast i8* %296 to float*
  store float 0.000000e+00, float* %297, align 1, !tbaa !2452
  %298 = getelementptr inbounds i8, i8* %286, i64 12
  %299 = bitcast i8* %298 to float*
  store float 0.000000e+00, float* %299, align 1, !tbaa !2452
  %300 = load i64, i64* %RBP
  br i1 %285, label %block_402b3a, label %block_402b04

block_402a8e:                                     ; preds = %block_402a87, %block_402a9a
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.5, %block_402a87 ], [ %MEMORY.2, %block_402a9a ]
  %301 = load i64, i64* %RBP
  %302 = sub i64 %301, 44
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 3
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %302 to i32*
  %306 = load i32, i32* %305
  %307 = zext i32 %306 to i64
  store i64 %307, i64* %RAX, align 8, !tbaa !2428
  %308 = load i32, i32* %EAX
  %309 = zext i32 %308 to i64
  %310 = load i64, i64* %RBP
  %311 = sub i64 %310, 8
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 3
  store i64 %313, i64* %PC
  %314 = inttoptr i64 %311 to i32*
  %315 = load i32, i32* %314
  %316 = sub i32 %308, %315
  %317 = icmp ult i32 %308, %315
  %318 = zext i1 %317 to i8
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %318, i8* %319, align 1, !tbaa !2432
  %320 = and i32 %316, 255
  %321 = call i32 @llvm.ctpop.i32(i32 %320) #16
  %322 = trunc i32 %321 to i8
  %323 = and i8 %322, 1
  %324 = xor i8 %323, 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %324, i8* %325, align 1, !tbaa !2446
  %326 = xor i32 %315, %308
  %327 = xor i32 %326, %316
  %328 = lshr i32 %327, 4
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %330, i8* %331, align 1, !tbaa !2447
  %332 = icmp eq i32 %316, 0
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %333, i8* %334, align 1, !tbaa !2448
  %335 = lshr i32 %316, 31
  %336 = trunc i32 %335 to i8
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %336, i8* %337, align 1, !tbaa !2449
  %338 = lshr i32 %308, 31
  %339 = lshr i32 %315, 31
  %340 = xor i32 %339, %338
  %341 = xor i32 %335, %338
  %342 = add nuw nsw i32 %341, %340
  %343 = icmp eq i32 %342, 2
  %344 = zext i1 %343 to i8
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %344, i8* %345, align 1, !tbaa !2450
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 78
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 6
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 6
  store i64 %351, i64* %PC
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %353 = load i8, i8* %352, align 1, !tbaa !2449
  %354 = icmp ne i8 %353, 0
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %356 = load i8, i8* %355, align 1, !tbaa !2450
  %357 = icmp ne i8 %356, 0
  %358 = xor i1 %354, %357
  %359 = xor i1 %358, true
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %362 = select i1 %358, i64 %349, i64 %347
  store i64 %362, i64* %361, align 8, !tbaa !2428
  %363 = load i8, i8* %BRANCH_TAKEN
  %364 = icmp eq i8 %363, 1
  %365 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 40
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 5
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to float*
  %371 = load float, float* %370
  %372 = bitcast i8* %365 to float*
  store float %371, float* %372, align 1, !tbaa !2452
  %373 = getelementptr inbounds i8, i8* %365, i64 4
  %374 = bitcast i8* %373 to float*
  store float 0.000000e+00, float* %374, align 1, !tbaa !2452
  %375 = getelementptr inbounds i8, i8* %365, i64 8
  %376 = bitcast i8* %375 to float*
  store float 0.000000e+00, float* %376, align 1, !tbaa !2452
  %377 = getelementptr inbounds i8, i8* %365, i64 12
  %378 = bitcast i8* %377 to float*
  store float 0.000000e+00, float* %378, align 1, !tbaa !2452
  %379 = load i64, i64* %RBP
  br i1 %364, label %block_402ae2, label %block_402a9a

block_402a3d:                                     ; preds = %block_402a33
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 36
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i32*
  %385 = load i32, i32* %384
  %386 = sub i32 %385, 1
  %387 = icmp ult i32 %385, 1
  %388 = zext i1 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %388, i8* %389, align 1, !tbaa !2432
  %390 = and i32 %386, 255
  %391 = call i32 @llvm.ctpop.i32(i32 %390) #16
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %394, i8* %395, align 1, !tbaa !2446
  %396 = xor i32 %385, 1
  %397 = xor i32 %396, %386
  %398 = lshr i32 %397, 4
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %400, i8* %401, align 1, !tbaa !2447
  %402 = icmp eq i32 %386, 0
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %403, i8* %404, align 1, !tbaa !2448
  %405 = lshr i32 %386, 31
  %406 = trunc i32 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %406, i8* %407, align 1, !tbaa !2449
  %408 = lshr i32 %385, 31
  %409 = xor i32 %405, %408
  %410 = add nuw nsw i32 %409, %408
  %411 = icmp eq i32 %410, 2
  %412 = zext i1 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %412, i8* %413, align 1, !tbaa !2450
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 176
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 6
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 6
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %421 = load i8, i8* %420, align 1, !tbaa !2448
  store i8 %421, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %423 = icmp ne i8 %421, 0
  %424 = select i1 %423, i64 %415, i64 %417
  store i64 %424, i64* %422, align 8, !tbaa !2428
  %425 = load i8, i8* %BRANCH_TAKEN
  %426 = icmp eq i8 %425, 1
  br i1 %426, label %block_402af1, label %block_402a47

block_402a6e:                                     ; preds = %block_402a5f, %block_402a47
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_402a47 ], [ %MEMORY.4, %block_402a5f ]
  %427 = load i64, i64* %RBP
  %428 = sub i64 %427, 36
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 4
  store i64 %430, i64* %PC
  %431 = inttoptr i64 %428 to i32*
  %432 = load i32, i32* %431
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %433, align 1, !tbaa !2432
  %434 = and i32 %432, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %440, align 1, !tbaa !2447
  %441 = icmp eq i32 %432, 0
  %442 = zext i1 %441 to i8
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %442, i8* %443, align 1, !tbaa !2448
  %444 = lshr i32 %432, 31
  %445 = trunc i32 %444 to i8
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %445, i8* %446, align 1, !tbaa !2449
  %447 = lshr i32 %432, 31
  %448 = xor i32 %444, %447
  %449 = add nuw nsw i32 %448, %447
  %450 = icmp eq i32 %449, 2
  %451 = zext i1 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %451, i8* %452, align 1, !tbaa !2450
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 21
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 6
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 6
  store i64 %458, i64* %PC
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %460 = load i8, i8* %459, align 1, !tbaa !2449
  %461 = icmp ne i8 %460, 0
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %463 = load i8, i8* %462, align 1, !tbaa !2450
  %464 = icmp ne i8 %463, 0
  %465 = xor i1 %461, %464
  %466 = xor i1 %465, true
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %469 = select i1 %465, i64 %456, i64 %454
  store i64 %469, i64* %468, align 8, !tbaa !2428
  %470 = load i8, i8* %BRANCH_TAKEN
  %471 = icmp eq i8 %470, 1
  br i1 %471, label %block_402a87, label %block_402a78

block_402a47:                                     ; preds = %block_402a33, %block_402a3d
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402a33 ], [ %2, %block_402a3d ]
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 48
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 7
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i32*
  store i32 0, i32* %476
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 52
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 7
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %478 to i32*
  store i32 0, i32* %481
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 20
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i32*
  %487 = load i32, i32* %486
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %488, align 1, !tbaa !2432
  %489 = and i32 %487, 255
  %490 = call i32 @llvm.ctpop.i32(i32 %489) #16
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = xor i8 %492, 1
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %493, i8* %494, align 1, !tbaa !2446
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %495, align 1, !tbaa !2447
  %496 = icmp eq i32 %487, 0
  %497 = zext i1 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %497, i8* %498, align 1, !tbaa !2448
  %499 = lshr i32 %487, 31
  %500 = trunc i32 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %500, i8* %501, align 1, !tbaa !2449
  %502 = lshr i32 %487, 31
  %503 = xor i32 %499, %502
  %504 = add nuw nsw i32 %503, %502
  %505 = icmp eq i32 %504, 2
  %506 = zext i1 %505 to i8
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %506, i8* %507, align 1, !tbaa !2450
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 21
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 6
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 6
  store i64 %513, i64* %PC
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %515 = load i8, i8* %514, align 1, !tbaa !2449
  %516 = icmp ne i8 %515, 0
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %518 = load i8, i8* %517, align 1, !tbaa !2450
  %519 = icmp ne i8 %518, 0
  %520 = xor i1 %516, %519
  %521 = xor i1 %520, true
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %524 = select i1 %520, i64 %511, i64 %509
  store i64 %524, i64* %523, align 8, !tbaa !2428
  %525 = load i8, i8* %BRANCH_TAKEN
  %526 = icmp eq i8 %525, 1
  br i1 %526, label %block_402a6e, label %block_402a5f

block_402a78:                                     ; preds = %block_402a6e
  %527 = load i64, i64* %RAX
  %528 = load i32, i32* %EAX
  %529 = zext i32 %528 to i64
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 2
  store i64 %531, i64* %PC
  %532 = xor i64 %529, %527
  %533 = trunc i64 %532 to i32
  %534 = and i64 %532, 4294967295
  store i64 %534, i64* %RAX, align 8, !tbaa !2428
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %535, align 1, !tbaa !2432
  %536 = and i32 %533, 255
  %537 = call i32 @llvm.ctpop.i32(i32 %536) #16
  %538 = trunc i32 %537 to i8
  %539 = and i8 %538, 1
  %540 = xor i8 %539, 1
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %540, i8* %541, align 1, !tbaa !2446
  %542 = icmp eq i32 %533, 0
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %543, i8* %544, align 1, !tbaa !2448
  %545 = lshr i32 %533, 31
  %546 = trunc i32 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %546, i8* %547, align 1, !tbaa !2449
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %548, align 1, !tbaa !2450
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %549, align 1, !tbaa !2447
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 8
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 3
  store i64 %554, i64* %PC
  %555 = trunc i64 %550 to i32
  %556 = inttoptr i64 %552 to i32*
  %557 = load i32, i32* %556
  %558 = sub i32 %555, %557
  %559 = zext i32 %558 to i64
  store i64 %559, i64* %RAX, align 8, !tbaa !2428
  %560 = icmp ult i32 %555, %557
  %561 = zext i1 %560 to i8
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %561, i8* %562, align 1, !tbaa !2432
  %563 = and i32 %558, 255
  %564 = call i32 @llvm.ctpop.i32(i32 %563) #16
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %567, i8* %568, align 1, !tbaa !2446
  %569 = xor i32 %557, %555
  %570 = xor i32 %569, %558
  %571 = lshr i32 %570, 4
  %572 = trunc i32 %571 to i8
  %573 = and i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %573, i8* %574, align 1, !tbaa !2447
  %575 = icmp eq i32 %558, 0
  %576 = zext i1 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %576, i8* %577, align 1, !tbaa !2448
  %578 = lshr i32 %558, 31
  %579 = trunc i32 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %579, i8* %580, align 1, !tbaa !2449
  %581 = lshr i32 %555, 31
  %582 = lshr i32 %557, 31
  %583 = xor i32 %582, %581
  %584 = xor i32 %578, %581
  %585 = add nuw nsw i32 %584, %583
  %586 = icmp eq i32 %585, 2
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %587, i8* %588, align 1, !tbaa !2450
  %589 = load i64, i64* %RAX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC
  %592 = trunc i64 %589 to i32
  %593 = add i32 1, %592
  %594 = zext i32 %593 to i64
  store i64 %594, i64* %RAX, align 8, !tbaa !2428
  %595 = icmp ult i32 %593, %592
  %596 = icmp ult i32 %593, 1
  %597 = or i1 %595, %596
  %598 = zext i1 %597 to i8
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %598, i8* %599, align 1, !tbaa !2432
  %600 = and i32 %593, 255
  %601 = call i32 @llvm.ctpop.i32(i32 %600) #16
  %602 = trunc i32 %601 to i8
  %603 = and i8 %602, 1
  %604 = xor i8 %603, 1
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %604, i8* %605, align 1, !tbaa !2446
  %606 = xor i64 1, %589
  %607 = trunc i64 %606 to i32
  %608 = xor i32 %607, %593
  %609 = lshr i32 %608, 4
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %611, i8* %612, align 1, !tbaa !2447
  %613 = icmp eq i32 %593, 0
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %614, i8* %615, align 1, !tbaa !2448
  %616 = lshr i32 %593, 31
  %617 = trunc i32 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %617, i8* %618, align 1, !tbaa !2449
  %619 = lshr i32 %592, 31
  %620 = xor i32 %616, %619
  %621 = add nuw nsw i32 %620, %616
  %622 = icmp eq i32 %621, 2
  %623 = zext i1 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %623, i8* %624, align 1, !tbaa !2450
  %625 = load i64, i64* %RAX
  %626 = load i64, i64* %RBP
  %627 = sub i64 %626, 36
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 4
  store i64 %629, i64* %PC
  %630 = inttoptr i64 %627 to i32*
  %631 = load i32, i32* %630
  %632 = shl i64 %625, 32
  %633 = ashr exact i64 %632, 32
  %634 = sext i32 %631 to i64
  %635 = mul nsw i64 %634, %633
  %636 = trunc i64 %635 to i32
  %637 = and i64 %635, 4294967295
  store i64 %637, i64* %RAX, align 8, !tbaa !2428
  %638 = shl i64 %635, 32
  %639 = ashr exact i64 %638, 32
  %640 = icmp ne i64 %639, %635
  %641 = zext i1 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %641, i8* %642, align 1, !tbaa !2432
  %643 = and i32 %636, 255
  %644 = call i32 @llvm.ctpop.i32(i32 %643) #16
  %645 = trunc i32 %644 to i8
  %646 = and i8 %645, 1
  %647 = xor i8 %646, 1
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %647, i8* %648, align 1, !tbaa !2446
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %649, align 1, !tbaa !2447
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %650, align 1, !tbaa !2448
  %651 = lshr i32 %636, 31
  %652 = trunc i32 %651 to i8
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %652, i8* %653, align 1, !tbaa !2449
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %641, i8* %654, align 1, !tbaa !2450
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 52
  %657 = load i32, i32* %EAX
  %658 = zext i32 %657 to i64
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 3
  store i64 %660, i64* %PC
  %661 = inttoptr i64 %656 to i32*
  store i32 %657, i32* %661
  br label %block_402a87

block_402a9a:                                     ; preds = %block_402a8e
  %662 = sub i64 %379, 16
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = inttoptr i64 %662 to i64*
  %666 = load i64, i64* %665
  store i64 %666, i64* %RAX, align 8, !tbaa !2428
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 48
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 4
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %668 to i32*
  %672 = load i32, i32* %671
  %673 = sext i32 %672 to i64
  store i64 %673, i64* %RCX, align 8, !tbaa !2428
  %674 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %675 = load i64, i64* %RAX
  %676 = load i64, i64* %RCX
  %677 = mul i64 %676, 4
  %678 = add i64 %677, %675
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 5
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %678 to float*
  %682 = load float, float* %681
  %683 = bitcast i8* %674 to float*
  store float %682, float* %683, align 1, !tbaa !2452
  %684 = getelementptr inbounds i8, i8* %674, i64 4
  %685 = bitcast i8* %684 to float*
  store float 0.000000e+00, float* %685, align 1, !tbaa !2452
  %686 = getelementptr inbounds i8, i8* %674, i64 8
  %687 = bitcast i8* %686 to float*
  store float 0.000000e+00, float* %687, align 1, !tbaa !2452
  %688 = getelementptr inbounds i8, i8* %674, i64 12
  %689 = bitcast i8* %688 to float*
  store float 0.000000e+00, float* %689, align 1, !tbaa !2452
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 32
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 4
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %RAX, align 8, !tbaa !2428
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 52
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 4
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i32*
  %701 = load i32, i32* %700
  %702 = sext i32 %701 to i64
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %703 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %704 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %705 = load i64, i64* %RAX
  %706 = load i64, i64* %RCX
  %707 = mul i64 %706, 4
  %708 = add i64 %707, %705
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  store i64 %710, i64* %PC
  %711 = bitcast i8* %704 to <2 x float>*
  %712 = load <2 x float>, <2 x float>* %711, align 1
  %713 = getelementptr inbounds i8, i8* %704, i64 8
  %714 = bitcast i8* %713 to <2 x i32>*
  %715 = load <2 x i32>, <2 x i32>* %714, align 1
  %716 = inttoptr i64 %708 to float*
  %717 = load float, float* %716
  %718 = extractelement <2 x float> %712, i32 0
  %719 = fmul float %718, %717
  %720 = bitcast i8* %703 to float*
  store float %719, float* %720, align 1, !tbaa !2452
  %721 = bitcast <2 x float> %712 to <2 x i32>
  %722 = extractelement <2 x i32> %721, i32 1
  %723 = getelementptr inbounds i8, i8* %703, i64 4
  %724 = bitcast i8* %723 to i32*
  store i32 %722, i32* %724, align 1, !tbaa !2452
  %725 = extractelement <2 x i32> %715, i32 0
  %726 = getelementptr inbounds i8, i8* %703, i64 8
  %727 = bitcast i8* %726 to i32*
  store i32 %725, i32* %727, align 1, !tbaa !2452
  %728 = extractelement <2 x i32> %715, i32 1
  %729 = getelementptr inbounds i8, i8* %703, i64 12
  %730 = bitcast i8* %729 to i32*
  store i32 %728, i32* %730, align 1, !tbaa !2452
  %731 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %732 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %733 = bitcast %union.vec128_t* %XMM1 to i8*
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 4
  store i64 %735, i64* %PC
  %736 = bitcast i8* %732 to <2 x float>*
  %737 = load <2 x float>, <2 x float>* %736, align 1
  %738 = getelementptr inbounds i8, i8* %732, i64 8
  %739 = bitcast i8* %738 to <2 x i32>*
  %740 = load <2 x i32>, <2 x i32>* %739, align 1
  %741 = bitcast i8* %733 to <2 x float>*
  %742 = load <2 x float>, <2 x float>* %741, align 1
  %743 = extractelement <2 x float> %737, i32 0
  %744 = extractelement <2 x float> %742, i32 0
  %745 = fadd float %743, %744
  %746 = bitcast i8* %731 to float*
  store float %745, float* %746, align 1, !tbaa !2452
  %747 = bitcast <2 x float> %737 to <2 x i32>
  %748 = extractelement <2 x i32> %747, i32 1
  %749 = getelementptr inbounds i8, i8* %731, i64 4
  %750 = bitcast i8* %749 to i32*
  store i32 %748, i32* %750, align 1, !tbaa !2452
  %751 = extractelement <2 x i32> %740, i32 0
  %752 = getelementptr inbounds i8, i8* %731, i64 8
  %753 = bitcast i8* %752 to i32*
  store i32 %751, i32* %753, align 1, !tbaa !2452
  %754 = extractelement <2 x i32> %740, i32 1
  %755 = getelementptr inbounds i8, i8* %731, i64 12
  %756 = bitcast i8* %755 to i32*
  store i32 %754, i32* %756, align 1, !tbaa !2452
  %757 = load i64, i64* %RBP
  %758 = sub i64 %757, 40
  %759 = bitcast %union.vec128_t* %XMM0 to i8*
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  store i64 %761, i64* %PC
  %762 = bitcast i8* %759 to <2 x float>*
  %763 = load <2 x float>, <2 x float>* %762, align 1
  %764 = extractelement <2 x float> %763, i32 0
  %765 = inttoptr i64 %758 to float*
  store float %764, float* %765
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 48
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 3
  store i64 %769, i64* %PC
  %770 = inttoptr i64 %767 to i32*
  %771 = load i32, i32* %770
  %772 = zext i32 %771 to i64
  store i64 %772, i64* %RDX, align 8, !tbaa !2428
  %773 = load i64, i64* %RDX
  %774 = load i64, i64* %RBP
  %775 = sub i64 %774, 20
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 3
  store i64 %777, i64* %PC
  %778 = trunc i64 %773 to i32
  %779 = inttoptr i64 %775 to i32*
  %780 = load i32, i32* %779
  %781 = add i32 %780, %778
  %782 = zext i32 %781 to i64
  store i64 %782, i64* %RDX, align 8, !tbaa !2428
  %783 = icmp ult i32 %781, %778
  %784 = icmp ult i32 %781, %780
  %785 = or i1 %783, %784
  %786 = zext i1 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %786, i8* %787, align 1, !tbaa !2432
  %788 = and i32 %781, 255
  %789 = call i32 @llvm.ctpop.i32(i32 %788) #16
  %790 = trunc i32 %789 to i8
  %791 = and i8 %790, 1
  %792 = xor i8 %791, 1
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %792, i8* %793, align 1, !tbaa !2446
  %794 = xor i32 %780, %778
  %795 = xor i32 %794, %781
  %796 = lshr i32 %795, 4
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %798, i8* %799, align 1, !tbaa !2447
  %800 = icmp eq i32 %781, 0
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %801, i8* %802, align 1, !tbaa !2448
  %803 = lshr i32 %781, 31
  %804 = trunc i32 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %804, i8* %805, align 1, !tbaa !2449
  %806 = lshr i32 %778, 31
  %807 = lshr i32 %780, 31
  %808 = xor i32 %803, %806
  %809 = xor i32 %803, %807
  %810 = add nuw nsw i32 %808, %809
  %811 = icmp eq i32 %810, 2
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %812, i8* %813, align 1, !tbaa !2450
  %814 = load i64, i64* %RBP
  %815 = sub i64 %814, 48
  %816 = load i32, i32* %EDX
  %817 = zext i32 %816 to i64
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 3
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %815 to i32*
  store i32 %816, i32* %820
  %821 = load i64, i64* %RBP
  %822 = sub i64 %821, 52
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 3
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %822 to i32*
  %826 = load i32, i32* %825
  %827 = zext i32 %826 to i64
  store i64 %827, i64* %RDX, align 8, !tbaa !2428
  %828 = load i64, i64* %RDX
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 36
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 3
  store i64 %832, i64* %PC
  %833 = trunc i64 %828 to i32
  %834 = inttoptr i64 %830 to i32*
  %835 = load i32, i32* %834
  %836 = add i32 %835, %833
  %837 = zext i32 %836 to i64
  store i64 %837, i64* %RDX, align 8, !tbaa !2428
  %838 = icmp ult i32 %836, %833
  %839 = icmp ult i32 %836, %835
  %840 = or i1 %838, %839
  %841 = zext i1 %840 to i8
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %841, i8* %842, align 1, !tbaa !2432
  %843 = and i32 %836, 255
  %844 = call i32 @llvm.ctpop.i32(i32 %843) #16
  %845 = trunc i32 %844 to i8
  %846 = and i8 %845, 1
  %847 = xor i8 %846, 1
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %847, i8* %848, align 1, !tbaa !2446
  %849 = xor i32 %835, %833
  %850 = xor i32 %849, %836
  %851 = lshr i32 %850, 4
  %852 = trunc i32 %851 to i8
  %853 = and i8 %852, 1
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %853, i8* %854, align 1, !tbaa !2447
  %855 = icmp eq i32 %836, 0
  %856 = zext i1 %855 to i8
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %856, i8* %857, align 1, !tbaa !2448
  %858 = lshr i32 %836, 31
  %859 = trunc i32 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %859, i8* %860, align 1, !tbaa !2449
  %861 = lshr i32 %833, 31
  %862 = lshr i32 %835, 31
  %863 = xor i32 %858, %861
  %864 = xor i32 %858, %862
  %865 = add nuw nsw i32 %863, %864
  %866 = icmp eq i32 %865, 2
  %867 = zext i1 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %867, i8* %868, align 1, !tbaa !2450
  %869 = load i64, i64* %RBP
  %870 = sub i64 %869, 52
  %871 = load i32, i32* %EDX
  %872 = zext i32 %871 to i64
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 3
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %870 to i32*
  store i32 %871, i32* %875
  %876 = load i64, i64* %RBP
  %877 = sub i64 %876, 44
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 3
  store i64 %879, i64* %PC
  %880 = inttoptr i64 %877 to i32*
  %881 = load i32, i32* %880
  %882 = zext i32 %881 to i64
  store i64 %882, i64* %RAX, align 8, !tbaa !2428
  %883 = load i64, i64* %RAX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 3
  store i64 %885, i64* %PC
  %886 = trunc i64 %883 to i32
  %887 = add i32 1, %886
  %888 = zext i32 %887 to i64
  store i64 %888, i64* %RAX, align 8, !tbaa !2428
  %889 = icmp ult i32 %887, %886
  %890 = icmp ult i32 %887, 1
  %891 = or i1 %889, %890
  %892 = zext i1 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %892, i8* %893, align 1, !tbaa !2432
  %894 = and i32 %887, 255
  %895 = call i32 @llvm.ctpop.i32(i32 %894) #16
  %896 = trunc i32 %895 to i8
  %897 = and i8 %896, 1
  %898 = xor i8 %897, 1
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %898, i8* %899, align 1, !tbaa !2446
  %900 = xor i64 1, %883
  %901 = trunc i64 %900 to i32
  %902 = xor i32 %901, %887
  %903 = lshr i32 %902, 4
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %905, i8* %906, align 1, !tbaa !2447
  %907 = icmp eq i32 %887, 0
  %908 = zext i1 %907 to i8
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %908, i8* %909, align 1, !tbaa !2448
  %910 = lshr i32 %887, 31
  %911 = trunc i32 %910 to i8
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %911, i8* %912, align 1, !tbaa !2449
  %913 = lshr i32 %886, 31
  %914 = xor i32 %910, %913
  %915 = add nuw nsw i32 %914, %910
  %916 = icmp eq i32 %915, 2
  %917 = zext i1 %916 to i8
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %917, i8* %918, align 1, !tbaa !2450
  %919 = load i64, i64* %RBP
  %920 = sub i64 %919, 44
  %921 = load i32, i32* %EAX
  %922 = zext i32 %921 to i64
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 3
  store i64 %924, i64* %PC
  %925 = inttoptr i64 %920 to i32*
  store i32 %921, i32* %925
  %926 = load i64, i64* %PC
  %927 = sub i64 %926, 79
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 5
  store i64 %929, i64* %PC
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %927, i64* %930, align 8, !tbaa !2428
  br label %block_402a8e

block_402a87:                                     ; preds = %block_402a78, %block_402a6e
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.3, %block_402a6e ], [ %MEMORY.3, %block_402a78 ]
  %931 = load i64, i64* %RBP
  %932 = sub i64 %931, 44
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 7
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %932 to i32*
  store i32 0, i32* %935
  br label %block_402a8e

block_402a5f:                                     ; preds = %block_402a47
  %936 = load i64, i64* %RAX
  %937 = load i32, i32* %EAX
  %938 = zext i32 %937 to i64
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 2
  store i64 %940, i64* %PC
  %941 = xor i64 %938, %936
  %942 = trunc i64 %941 to i32
  %943 = and i64 %941, 4294967295
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %944, align 1, !tbaa !2432
  %945 = and i32 %942, 255
  %946 = call i32 @llvm.ctpop.i32(i32 %945) #16
  %947 = trunc i32 %946 to i8
  %948 = and i8 %947, 1
  %949 = xor i8 %948, 1
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %949, i8* %950, align 1, !tbaa !2446
  %951 = icmp eq i32 %942, 0
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %952, i8* %953, align 1, !tbaa !2448
  %954 = lshr i32 %942, 31
  %955 = trunc i32 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %955, i8* %956, align 1, !tbaa !2449
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %957, align 1, !tbaa !2450
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %958, align 1, !tbaa !2447
  %959 = load i64, i64* %RAX
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 8
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 3
  store i64 %963, i64* %PC
  %964 = trunc i64 %959 to i32
  %965 = inttoptr i64 %961 to i32*
  %966 = load i32, i32* %965
  %967 = sub i32 %964, %966
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RAX, align 8, !tbaa !2428
  %969 = icmp ult i32 %964, %966
  %970 = zext i1 %969 to i8
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %970, i8* %971, align 1, !tbaa !2432
  %972 = and i32 %967, 255
  %973 = call i32 @llvm.ctpop.i32(i32 %972) #16
  %974 = trunc i32 %973 to i8
  %975 = and i8 %974, 1
  %976 = xor i8 %975, 1
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %976, i8* %977, align 1, !tbaa !2446
  %978 = xor i32 %966, %964
  %979 = xor i32 %978, %967
  %980 = lshr i32 %979, 4
  %981 = trunc i32 %980 to i8
  %982 = and i8 %981, 1
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %982, i8* %983, align 1, !tbaa !2447
  %984 = icmp eq i32 %967, 0
  %985 = zext i1 %984 to i8
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %985, i8* %986, align 1, !tbaa !2448
  %987 = lshr i32 %967, 31
  %988 = trunc i32 %987 to i8
  %989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %988, i8* %989, align 1, !tbaa !2449
  %990 = lshr i32 %964, 31
  %991 = lshr i32 %966, 31
  %992 = xor i32 %991, %990
  %993 = xor i32 %987, %990
  %994 = add nuw nsw i32 %993, %992
  %995 = icmp eq i32 %994, 2
  %996 = zext i1 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %996, i8* %997, align 1, !tbaa !2450
  %998 = load i64, i64* %RAX
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 3
  store i64 %1000, i64* %PC
  %1001 = trunc i64 %998 to i32
  %1002 = add i32 1, %1001
  %1003 = zext i32 %1002 to i64
  store i64 %1003, i64* %RAX, align 8, !tbaa !2428
  %1004 = icmp ult i32 %1002, %1001
  %1005 = icmp ult i32 %1002, 1
  %1006 = or i1 %1004, %1005
  %1007 = zext i1 %1006 to i8
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1007, i8* %1008, align 1, !tbaa !2432
  %1009 = and i32 %1002, 255
  %1010 = call i32 @llvm.ctpop.i32(i32 %1009) #16
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1013, i8* %1014, align 1, !tbaa !2446
  %1015 = xor i64 1, %998
  %1016 = trunc i64 %1015 to i32
  %1017 = xor i32 %1016, %1002
  %1018 = lshr i32 %1017, 4
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1020, i8* %1021, align 1, !tbaa !2447
  %1022 = icmp eq i32 %1002, 0
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1023, i8* %1024, align 1, !tbaa !2448
  %1025 = lshr i32 %1002, 31
  %1026 = trunc i32 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1026, i8* %1027, align 1, !tbaa !2449
  %1028 = lshr i32 %1001, 31
  %1029 = xor i32 %1025, %1028
  %1030 = add nuw nsw i32 %1029, %1025
  %1031 = icmp eq i32 %1030, 2
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1032, i8* %1033, align 1, !tbaa !2450
  %1034 = load i64, i64* %RAX
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 20
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039
  %1041 = shl i64 %1034, 32
  %1042 = ashr exact i64 %1041, 32
  %1043 = sext i32 %1040 to i64
  %1044 = mul nsw i64 %1043, %1042
  %1045 = trunc i64 %1044 to i32
  %1046 = and i64 %1044, 4294967295
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = shl i64 %1044, 32
  %1048 = ashr exact i64 %1047, 32
  %1049 = icmp ne i64 %1048, %1044
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1050, i8* %1051, align 1, !tbaa !2432
  %1052 = and i32 %1045, 255
  %1053 = call i32 @llvm.ctpop.i32(i32 %1052) #16
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  %1056 = xor i8 %1055, 1
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1056, i8* %1057, align 1, !tbaa !2446
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1058, align 1, !tbaa !2447
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1059, align 1, !tbaa !2448
  %1060 = lshr i32 %1045, 31
  %1061 = trunc i32 %1060 to i8
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1061, i8* %1062, align 1, !tbaa !2449
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1050, i8* %1063, align 1, !tbaa !2450
  %1064 = load i64, i64* %RBP
  %1065 = sub i64 %1064, 48
  %1066 = load i32, i32* %EAX
  %1067 = zext i32 %1066 to i64
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 3
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1065 to i32*
  store i32 %1066, i32* %1070
  br label %block_402a6e

block_402a26:                                     ; preds = %block_4029f0
  %1071 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1073 = bitcast %union.vec128_t* %XMM0 to i8*
  %1074 = load i64, i64* %PC
  %1075 = add i64 %1074, 3
  store i64 %1075, i64* %PC
  %1076 = bitcast i8* %1072 to i64*
  %1077 = load i64, i64* %1076, align 1
  %1078 = getelementptr inbounds i8, i8* %1072, i64 8
  %1079 = bitcast i8* %1078 to i64*
  %1080 = load i64, i64* %1079, align 1
  %1081 = bitcast i8* %1073 to i64*
  %1082 = load i64, i64* %1081, align 1
  %1083 = getelementptr inbounds i8, i8* %1073, i64 8
  %1084 = bitcast i8* %1083 to i64*
  %1085 = load i64, i64* %1084, align 1
  %1086 = xor i64 %1082, %1077
  %1087 = xor i64 %1085, %1080
  %1088 = trunc i64 %1086 to i32
  %1089 = lshr i64 %1086, 32
  %1090 = trunc i64 %1089 to i32
  %1091 = bitcast i8* %1071 to i32*
  store i32 %1088, i32* %1091, align 1, !tbaa !2454
  %1092 = getelementptr inbounds i8, i8* %1071, i64 4
  %1093 = bitcast i8* %1092 to i32*
  store i32 %1090, i32* %1093, align 1, !tbaa !2454
  %1094 = trunc i64 %1087 to i32
  %1095 = getelementptr inbounds i8, i8* %1071, i64 8
  %1096 = bitcast i8* %1095 to i32*
  store i32 %1094, i32* %1096, align 1, !tbaa !2454
  %1097 = lshr i64 %1087, 32
  %1098 = trunc i64 %1097 to i32
  %1099 = getelementptr inbounds i8, i8* %1071, i64 12
  %1100 = bitcast i8* %1099 to i32*
  store i32 %1098, i32* %1100, align 1, !tbaa !2454
  %1101 = load i64, i64* %RBP
  %1102 = sub i64 %1101, 4
  %1103 = bitcast %union.vec128_t* %XMM0 to i8*
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = bitcast i8* %1103 to <2 x float>*
  %1107 = load <2 x float>, <2 x float>* %1106, align 1
  %1108 = extractelement <2 x float> %1107, i32 0
  %1109 = inttoptr i64 %1102 to float*
  store float %1108, float* %1109
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 278
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 5
  store i64 %1113, i64* %PC
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1111, i64* %1114, align 8, !tbaa !2428
  br label %block_402b44

block_402a33:                                     ; preds = %block_4029f0
  %1115 = load i64, i64* %RBP
  %1116 = sub i64 %1115, 20
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 4
  store i64 %1118, i64* %PC
  %1119 = inttoptr i64 %1116 to i32*
  %1120 = load i32, i32* %1119
  %1121 = sub i32 %1120, 1
  %1122 = icmp ult i32 %1120, 1
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1123, i8* %1124, align 1, !tbaa !2432
  %1125 = and i32 %1121, 255
  %1126 = call i32 @llvm.ctpop.i32(i32 %1125) #16
  %1127 = trunc i32 %1126 to i8
  %1128 = and i8 %1127, 1
  %1129 = xor i8 %1128, 1
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1129, i8* %1130, align 1, !tbaa !2446
  %1131 = xor i32 %1120, 1
  %1132 = xor i32 %1131, %1121
  %1133 = lshr i32 %1132, 4
  %1134 = trunc i32 %1133 to i8
  %1135 = and i8 %1134, 1
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1135, i8* %1136, align 1, !tbaa !2447
  %1137 = icmp eq i32 %1121, 0
  %1138 = zext i1 %1137 to i8
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1138, i8* %1139, align 1, !tbaa !2448
  %1140 = lshr i32 %1121, 31
  %1141 = trunc i32 %1140 to i8
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1141, i8* %1142, align 1, !tbaa !2449
  %1143 = lshr i32 %1120, 31
  %1144 = xor i32 %1140, %1143
  %1145 = add nuw nsw i32 %1144, %1143
  %1146 = icmp eq i32 %1145, 2
  %1147 = zext i1 %1146 to i8
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1147, i8* %1148, align 1, !tbaa !2450
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 16
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 6
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 6
  store i64 %1154, i64* %PC
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1156 = load i8, i8* %1155, align 1, !tbaa !2448
  %1157 = icmp eq i8 %1156, 0
  %1158 = zext i1 %1157 to i8
  store i8 %1158, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1160 = select i1 %1157, i64 %1150, i64 %1152
  store i64 %1160, i64* %1159, align 8, !tbaa !2428
  %1161 = load i8, i8* %BRANCH_TAKEN
  %1162 = icmp eq i8 %1161, 1
  br i1 %1162, label %block_402a47, label %block_402a3d

block_402af1:                                     ; preds = %block_402a3d
  %1163 = load i64, i64* %RBP
  %1164 = sub i64 %1163, 44
  %1165 = load i64, i64* %PC
  %1166 = add i64 %1165, 7
  store i64 %1166, i64* %PC
  %1167 = inttoptr i64 %1164 to i32*
  store i32 0, i32* %1167
  br label %block_402af8

block_402b04:                                     ; preds = %block_402af8
  %1168 = sub i64 %300, 16
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 4
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1168 to i64*
  %1172 = load i64, i64* %1171
  store i64 %1172, i64* %RAX, align 8, !tbaa !2428
  %1173 = load i64, i64* %RBP
  %1174 = sub i64 %1173, 44
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 4
  store i64 %1176, i64* %PC
  %1177 = inttoptr i64 %1174 to i32*
  %1178 = load i32, i32* %1177
  %1179 = sext i32 %1178 to i64
  store i64 %1179, i64* %RCX, align 8, !tbaa !2428
  %1180 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1181 = load i64, i64* %RAX
  %1182 = load i64, i64* %RCX
  %1183 = mul i64 %1182, 4
  %1184 = add i64 %1183, %1181
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 5
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to float*
  %1188 = load float, float* %1187
  %1189 = bitcast i8* %1180 to float*
  store float %1188, float* %1189, align 1, !tbaa !2452
  %1190 = getelementptr inbounds i8, i8* %1180, i64 4
  %1191 = bitcast i8* %1190 to float*
  store float 0.000000e+00, float* %1191, align 1, !tbaa !2452
  %1192 = getelementptr inbounds i8, i8* %1180, i64 8
  %1193 = bitcast i8* %1192 to float*
  store float 0.000000e+00, float* %1193, align 1, !tbaa !2452
  %1194 = getelementptr inbounds i8, i8* %1180, i64 12
  %1195 = bitcast i8* %1194 to float*
  store float 0.000000e+00, float* %1195, align 1, !tbaa !2452
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 32
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 4
  store i64 %1199, i64* %PC
  %1200 = inttoptr i64 %1197 to i64*
  %1201 = load i64, i64* %1200
  store i64 %1201, i64* %RAX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RBP
  %1203 = sub i64 %1202, 44
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 4
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1203 to i32*
  %1207 = load i32, i32* %1206
  %1208 = sext i32 %1207 to i64
  store i64 %1208, i64* %RCX, align 8, !tbaa !2428
  %1209 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1210 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1211 = load i64, i64* %RAX
  %1212 = load i64, i64* %RCX
  %1213 = mul i64 %1212, 4
  %1214 = add i64 %1213, %1211
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 5
  store i64 %1216, i64* %PC
  %1217 = bitcast i8* %1210 to <2 x float>*
  %1218 = load <2 x float>, <2 x float>* %1217, align 1
  %1219 = getelementptr inbounds i8, i8* %1210, i64 8
  %1220 = bitcast i8* %1219 to <2 x i32>*
  %1221 = load <2 x i32>, <2 x i32>* %1220, align 1
  %1222 = inttoptr i64 %1214 to float*
  %1223 = load float, float* %1222
  %1224 = extractelement <2 x float> %1218, i32 0
  %1225 = fmul float %1224, %1223
  %1226 = bitcast i8* %1209 to float*
  store float %1225, float* %1226, align 1, !tbaa !2452
  %1227 = bitcast <2 x float> %1218 to <2 x i32>
  %1228 = extractelement <2 x i32> %1227, i32 1
  %1229 = getelementptr inbounds i8, i8* %1209, i64 4
  %1230 = bitcast i8* %1229 to i32*
  store i32 %1228, i32* %1230, align 1, !tbaa !2452
  %1231 = extractelement <2 x i32> %1221, i32 0
  %1232 = getelementptr inbounds i8, i8* %1209, i64 8
  %1233 = bitcast i8* %1232 to i32*
  store i32 %1231, i32* %1233, align 1, !tbaa !2452
  %1234 = extractelement <2 x i32> %1221, i32 1
  %1235 = getelementptr inbounds i8, i8* %1209, i64 12
  %1236 = bitcast i8* %1235 to i32*
  store i32 %1234, i32* %1236, align 1, !tbaa !2452
  %1237 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1239 = bitcast %union.vec128_t* %XMM1 to i8*
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 4
  store i64 %1241, i64* %PC
  %1242 = bitcast i8* %1238 to <2 x float>*
  %1243 = load <2 x float>, <2 x float>* %1242, align 1
  %1244 = getelementptr inbounds i8, i8* %1238, i64 8
  %1245 = bitcast i8* %1244 to <2 x i32>*
  %1246 = load <2 x i32>, <2 x i32>* %1245, align 1
  %1247 = bitcast i8* %1239 to <2 x float>*
  %1248 = load <2 x float>, <2 x float>* %1247, align 1
  %1249 = extractelement <2 x float> %1243, i32 0
  %1250 = extractelement <2 x float> %1248, i32 0
  %1251 = fadd float %1249, %1250
  %1252 = bitcast i8* %1237 to float*
  store float %1251, float* %1252, align 1, !tbaa !2452
  %1253 = bitcast <2 x float> %1243 to <2 x i32>
  %1254 = extractelement <2 x i32> %1253, i32 1
  %1255 = getelementptr inbounds i8, i8* %1237, i64 4
  %1256 = bitcast i8* %1255 to i32*
  store i32 %1254, i32* %1256, align 1, !tbaa !2452
  %1257 = extractelement <2 x i32> %1246, i32 0
  %1258 = getelementptr inbounds i8, i8* %1237, i64 8
  %1259 = bitcast i8* %1258 to i32*
  store i32 %1257, i32* %1259, align 1, !tbaa !2452
  %1260 = extractelement <2 x i32> %1246, i32 1
  %1261 = getelementptr inbounds i8, i8* %1237, i64 12
  %1262 = bitcast i8* %1261 to i32*
  store i32 %1260, i32* %1262, align 1, !tbaa !2452
  %1263 = load i64, i64* %RBP
  %1264 = sub i64 %1263, 40
  %1265 = bitcast %union.vec128_t* %XMM0 to i8*
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 5
  store i64 %1267, i64* %PC
  %1268 = bitcast i8* %1265 to <2 x float>*
  %1269 = load <2 x float>, <2 x float>* %1268, align 1
  %1270 = extractelement <2 x float> %1269, i32 0
  %1271 = inttoptr i64 %1264 to float*
  store float %1270, float* %1271
  %1272 = load i64, i64* %RBP
  %1273 = sub i64 %1272, 44
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 3
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1273 to i32*
  %1277 = load i32, i32* %1276
  %1278 = zext i32 %1277 to i64
  store i64 %1278, i64* %RAX, align 8, !tbaa !2428
  %1279 = load i64, i64* %RAX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = trunc i64 %1279 to i32
  %1283 = add i32 1, %1282
  %1284 = zext i32 %1283 to i64
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = icmp ult i32 %1283, %1282
  %1286 = icmp ult i32 %1283, 1
  %1287 = or i1 %1285, %1286
  %1288 = zext i1 %1287 to i8
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1288, i8* %1289, align 1, !tbaa !2432
  %1290 = and i32 %1283, 255
  %1291 = call i32 @llvm.ctpop.i32(i32 %1290) #16
  %1292 = trunc i32 %1291 to i8
  %1293 = and i8 %1292, 1
  %1294 = xor i8 %1293, 1
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1294, i8* %1295, align 1, !tbaa !2446
  %1296 = xor i64 1, %1279
  %1297 = trunc i64 %1296 to i32
  %1298 = xor i32 %1297, %1283
  %1299 = lshr i32 %1298, 4
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1301, i8* %1302, align 1, !tbaa !2447
  %1303 = icmp eq i32 %1283, 0
  %1304 = zext i1 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1304, i8* %1305, align 1, !tbaa !2448
  %1306 = lshr i32 %1283, 31
  %1307 = trunc i32 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1307, i8* %1308, align 1, !tbaa !2449
  %1309 = lshr i32 %1282, 31
  %1310 = xor i32 %1306, %1309
  %1311 = add nuw nsw i32 %1310, %1306
  %1312 = icmp eq i32 %1311, 2
  %1313 = zext i1 %1312 to i8
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1313, i8* %1314, align 1, !tbaa !2450
  %1315 = load i64, i64* %RBP
  %1316 = sub i64 %1315, 44
  %1317 = load i32, i32* %EAX
  %1318 = zext i32 %1317 to i64
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 3
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1316 to i32*
  store i32 %1317, i32* %1321
  %1322 = load i64, i64* %PC
  %1323 = sub i64 %1322, 61
  %1324 = load i64, i64* %PC
  %1325 = add i64 %1324, 5
  store i64 %1325, i64* %PC
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1323, i64* %1326, align 8, !tbaa !2428
  br label %block_402af8

block_402ae2:                                     ; preds = %block_402a8e
  %1327 = sub i64 %379, 4
  %1328 = bitcast %union.vec128_t* %XMM0 to i8*
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 5
  store i64 %1330, i64* %PC
  %1331 = bitcast i8* %1328 to <2 x float>*
  %1332 = load <2 x float>, <2 x float>* %1331, align 1
  %1333 = extractelement <2 x float> %1332, i32 0
  %1334 = inttoptr i64 %1327 to float*
  store float %1333, float* %1334
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 88
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 5
  store i64 %1338, i64* %PC
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1336, i64* %1339, align 8, !tbaa !2428
  br label %block_402b44
}

; Function Attrs: noinline
define %struct.Memory* @sub_400570_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400570:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (i64* @stderr to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (i64* @stderr to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (i64* @stderr to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_4005a8, label %block_400593

block_40059d:                                     ; preds = %block_400593
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RBP, align 8, !tbaa !2428
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 2
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  switch i64 %204, label %270 [
    i64 4195754, label %block_4005aa
    i64 4195749, label %block_4005a5
  ]

block_4005aa:                                     ; preds = %block_40059d
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %RAX
  %207 = add i64 %206, %205
  %208 = load i16, i16* %AX
  %209 = zext i16 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  store i64 %211, i64* %PC
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @sub_4005b0___do_global_dtors_aux(%struct.State* %0, i64 %212, %struct.Memory* %2)
  ret %struct.Memory* %213

block_400593:                                     ; preds = %block_400570
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = and i64 %217, %216
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2432
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2446
  %229 = icmp eq i64 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %220, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %235, align 1, !tbaa !2450
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2447
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 13
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2448
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = icmp ne i8 %244, 0
  %247 = select i1 %246, i64 %238, i64 %240
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %248 = load i8, i8* %BRANCH_TAKEN
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %block_4005a8, label %block_40059d

block_4005a8:                                     ; preds = %block_4005a5, %block_400593, %block_400570
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400570 ], [ %2, %block_400593 ], [ %2, %block_4005a5 ]
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 1
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %253 = load i64, i64* %252, align 8, !tbaa !2428
  %254 = add i64 %253, 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RBP, align 8, !tbaa !2428
  store i64 %254, i64* %252, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 1
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %259, align 8, !tbaa !2428
  %264 = add i64 %261, 8
  store i64 %264, i64* %260, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4005a5:                                     ; preds = %block_40059d
  %265 = load i64, i64* %RAX
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  br label %block_4005a8

; <label>:270:                                    ; preds = %block_40059d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400540:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (i64* @stderr to i64)
  %37 = icmp ult i64 %33, ptrtoint (i64* @stderr to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (i64* @stderr to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400568, label %block_400551

block_40055b:                                     ; preds = %block_400551
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %163 [
    i64 4195690, label %block_40056a
    i64 4195683, label %block_400563
  ]

block_400551:                                     ; preds = %block_400540
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = and i64 %99, %98
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2432
  %104 = trunc i64 %102 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = icmp eq i64 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2448
  %114 = lshr i64 %102, 63
  %115 = trunc i64 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2450
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2447
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 15
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 2
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %126 = load i8, i8* %125, align 1, !tbaa !2448
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = icmp ne i8 %126, 0
  %129 = select i1 %128, i64 %120, i64 %122
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_400568, label %block_40055b

block_400568:                                     ; preds = %block_400563, %block_400551, %block_400540
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400540 ], [ %2, %block_400551 ], [ %2, %block_400563 ]
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40056a:                                     ; preds = %block_40055b
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %RAX
  %149 = add i64 %148, %147
  %150 = load i16, i16* %AX
  %151 = zext i16 %150 to i64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_400570_register_tm_clones(%struct.State* %0, i64 %154, %struct.Memory* %2)
  ret %struct.Memory* %155

block_400563:                                     ; preds = %block_40055b
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, %156
  %159 = load i32, i32* %EAX
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  br label %block_400568

; <label>:163:                                    ; preds = %block_40055b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_400530__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400530:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005e0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4005e0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005b0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4005b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653138_fprintf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653148_memset(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653140_clock(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e30___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402e30___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402e30___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402dc0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402dc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402dc0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402dc0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400640;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400640_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653150___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgefa() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401930;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401930_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @what_date() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @what_date_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400630_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004a8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004a8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgesl() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c40_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @epslon() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4027c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4027c0_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @ddot() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4029f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4029f0_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @daxpy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402880;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402880_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dscal() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402cf0_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @matgen() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401760_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402e34;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402e34__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dmxpy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401fc0_dmxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @print_time() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @18, void ()** @2)
  ret void
}

define internal %struct.Memory* @print_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402870_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @idamax() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402b50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @19, void ()** @2)
  ret void
}

define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402b50_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @20, void ()** @2)
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005f0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_402dc0___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_402e30___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"float", !2430, i64 0}
!2454 = !{!2445, !2445, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"double", !2430, i64 0}
