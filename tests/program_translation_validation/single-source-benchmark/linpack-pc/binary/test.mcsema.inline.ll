; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400478__init_type = type <{ [23 x i8] }>
%seg_400490__plt_type = type <{ [64 x i8] }>
%seg_4004d0__text_type = type <{ [10722 x i8] }>
%seg_402eb4__fini_type = type <{ [9 x i8] }>
%seg_402ec0__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_403208__eh_frame_hdr_type = type <{ [156 x i8] }>
%seg_4032a8__eh_frame_type = type <{ [592 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604000__got_plt_type = type <{ [24 x i8], i64, i64, i64 }>
%seg_604030__data_type = type <{ [16 x i8] }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_400478__init = internal constant %seg_400478__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05u; \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400490__plt = internal constant %seg_400490__plt_type <{ [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%r; \00\00\00\00\00\00\00\00\00\00\00\FF%j; \00\00\00\00\00\00\00\00\00\00\00\FF%b; \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_4004d0__text = internal constant %seg_4004d0__text_type <{ [10722 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\B0.@\00H\C7\C1@.@\00H\C7\C7\10\06@\00\FF\15\F6: \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8@@`\00H=@@`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF@@`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE@@`\00UH\81\EE@@`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF@@`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\C1: \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\AF: \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10\E8\D3\FE\FF\FF\F3\0F\10\05\EF(\00\00H\89E\F0H\8BE\F0\F3H\0F*\C8\F3\0F^\C8\F3\0F\11M\FC\F3\0F\10E\FCH\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\F0\03\00\00H\BEk/@\00\00\00\00\00\F3\0F\10\05\9B(\00\00H\B8J/@\00\00\00\00\00H\B90/@\00\00\00\00\001\D2\BF\D0\02\00\00A\89\F8L\8D\8D\C0\FC\FF\FF\C7E\FC\00\00\00\00L\89\CFH\89\B5\B8\FC\FF\FF\89\D6L\89\C2H\89\8D\B0\FC\FF\FF\F3\0F\11\85\AC\FC\FF\FFH\89\85\A0\FC\FF\FF\E8-\FE\FF\FF\C6\85\C0\FC\FF\FF H\8B\85\B0\FC\FF\FFH\89E\A0H\8B\8D\A0\FC\FF\FFH\89M\98\C7\04%P@`\00\C9\00\00\00\C7\04%T@`\00\C8\00\00\00\F3\0F\10\85\AC\FC\FF\FF\F3\0F\11E\F8\C7\04%X@`\00d\00\00\00H\8B<%@@`\00H\8B\B5\B8\FC\FF\FF\B0\00\E8\DC\FD\FF\FFH\BEs/@\00\00\00\00\00H\8B<%@@`\00\89\85\9C\FC\FF\FF\B0\00\E8\BD\FD\FF\FFH\BE{/@\00\00\00\00\00H\8B<%@@`\00\89\85\98\FC\FF\FF\B0\00\E8\9E\FD\FF\FFH\BE\B1/@\00\00\00\00\00H\8B<%@@`\00H\8BU\A0\89\85\94\FC\FF\FF\B0\00\E8{\FD\FF\FFH\BE\C2/@\00\00\00\00\00H\8B<%@@`\00H\8BU\98\89\85\90\FC\FF\FF\B0\00\E8X\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\F2\0F\10\05P'\00\00\F2\0F\10\0DP'\00\00D\8B\14%X@`\00D\0F\AF\14%X@`\00D\0F\AF\14%X@`\00\F2A\0F*\D2\0F(\D8\F2\0FY\DA\F2\0F^\D9D\8B\14%X@`\00D\0F\AF\14%X@`\00\F2A\0F*\CA\F2\0FY\C1\F2\0FX\D8\F2\0FZ\C3\F3\0F\11E\F4\8B4%P@`\00\8B\14%X@`\00\89\85\8C\FC\FF\FF\E8\B6\0F\00\00\E8\C1\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\F3\0F\11E\D8\8B4%P@`\00\8B\14%X@`\00\E8K\11\00\00\E8\86\FD\FF\FF\F3\0F\5CE\D8\F3\0F\11\04%\D0\BAb\00\E8s\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\F3\0F\11E\D8\8B4%P@`\00\8B\14%X@`\00\E8\0A\14\00\00\E85\FD\FF\FF\F3\0F\5CE\D8\F3\0F\11\04%\0C\BBb\00\F3\0F\10\04%\D0\BAb\00\F3\0FX\04%\0C\BBb\00\F3\0F\11E\F0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8D8\00\00\00Hc\04%\EC\BCb\00\F3\0F\10\04\85\80\B4b\00Hc\04%\EC\BCb\00\F3\0F\11\04\85\F0\BCb\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\B4\FF\FF\FFH\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8~\0E\00\00\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8DF\00\00\00Hc\04%\EC\BCb\00\F3\0F\10\04\85\80\B4b\00f\0F~\C1\81\F1\00\00\00\80f\0Fn\C1Hc\04%\EC\BCb\00\F3\0F\11\04\85\80\B4b\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A6\FF\FF\FFH\BE\80\B4b\00\00\00\00\00I\B8\F0\BCb\00\00\00\00\00I\B9`@`\00\00\00\00\00\8B<%X@`\00\8B\14%X@`\00\8B\0C%P@`\00\E8A\16\00\00\0FW\C0\F3\0F\11E\E4\F3\0F\11E\E8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8D\1A\01\00\00\F3\0F\10E\E4\F3\0FZ\C0Hc\04%\EC\BCb\00\F3\0F\10\0C\85\80\B4b\00\F3\0FZ\C9\0F(\15\00%\00\00f\0F\DB\CAf\0F.\C1\0F\86\16\00\00\00\F3\0F\10E\E4\F3\0FZ\C0\F2\0F\11\85\80\FC\FF\FF\E9(\00\00\00Hc\04%\EC\BCb\00\F3\0F\10\04\85\80\B4b\00\F3\0FZ\C0\0F(\0D\C0$\00\00f\0F\DB\C1\F2\0F\11\85\80\FC\FF\FF\F2\0F\10\85\80\FC\FF\FF\F2\0FZ\C0\F3\0F\11E\E4\F3\0F\10E\E8\F3\0FZ\C0Hc\04%\EC\BCb\00\F3\0F\10\0C\85\F0\BCb\00\F3\0FZ\C9\0F(\15~$\00\00f\0F\DB\CAf\0F.\C1\0F\86\16\00\00\00\F3\0F\10E\E8\F3\0FZ\C0\F2\0F\11\85x\FC\FF\FF\E9(\00\00\00Hc\04%\EC\BCb\00\F3\0F\10\04\85\F0\BCb\00\F3\0FZ\C0\0F(\0D>$\00\00f\0F\DB\C1\F2\0F\11\85x\FC\FF\FF\F2\0F\10\85x\FC\FF\FF\F2\0FZ\C0\F3\0F\11E\E8\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\D2\FE\FF\FF\F3\0F\10\05\AF#\00\00\E8\EE\1C\00\00H\BE\D4/@\00\00\00\00\00\F3\0F\10\0D\98#\00\00\F3\0F\11E\DC\F3\0F\10E\E4\8B\04%X@`\00\F3\0F*\D0\F3\0FYU\EC\F3\0FYU\E8\F3\0FYU\DC\F3\0F^\C2\F3\0F\11E\E0\F3\0F\10E\DC\F3\0F\11E\D0\F3\0F\10\04%\F0\BCb\00\F3\0F\5C\C1\F3\0F\11E\CC\8B\04%X@`\00\83\E8\01Hc\C8\F3\0F\10\04\8D\F0\BCb\00\F3\0F\5C\C1\F3\0F\11E\C8H\8B<%@@`\00\B0\00\E8\15\F9\FF\FFH\BE\FB/@\00\00\00\00\00H\8B<%@@`\00\89\85t\FC\FF\FF\B0\00\E8\F6\F8\FF\FFH\BE\1E0@\00\00\00\00\00H\8B<%@@`\00\F3\0F\10E\E0\F3\0FZ\C0\F3\0F\10M\E4\F3\0FZ\C9\F3\0F\10U\D0\F3\0FZ\D2\F3\0F\10]\CC\F3\0FZ\DB\F3\0F\10e\C8\F3\0FZ\E4\89\85p\FC\FF\FF\B0\05\E8\AA\F8\FF\FFH\BE?0@\00\00\00\00\00H\8B<%@@`\00\8B\14%X@`\00\89\85l\FC\FF\FF\B0\00\E8\84\F8\FF\FFH\BEt0@\00\00\00\00\00H\8B<%@@`\00\8B\14%P@`\00\89\85h\FC\FF\FF\B0\00\E8^\F8\FF\FFH\BE\AA0@\00\00\00\00\00H\8B<%@@`\00\89\85d\FC\FF\FF\B0\00\E8?\F8\FF\FFH\BE\E20@\00\00\00\00\00H\8B<%@@`\00\89\85`\FC\FF\FF\B0\00\E8 \F8\FF\FF\0FW\C0\F3\0F\10M\F0\F3\0F\11\0C%H\BBb\00\F3\0F\10M\F0\F3\0FZ\C9f\0F.\C8\89\85\5C\FC\FF\FF\0F\86Z\00\00\00\F2\0F\10\05\06\22\00\00\F2\0F\10\0D\0E\22\00\00\F3\0F\10U\F4\F3\0FZ\D2\F3\0F\10]\F0\F3\0FZ\DB\F2\0FY\CB\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\84\BBb\00\F3\0F\10\0C%\84\BBb\00\F3\0FZ\C9\F2\0F^\C1\F2\0FZ\C0\F3\0F\11\04%\C0\BBb\00\E9\15\00\00\00\0FW\C0\F3\0F\11\04%\84\BBb\00\F3\0F\11\04%\C0\BBb\001\FF\F3\0F\10E\F0\F3\0F^E\F8\F3\0F\11\04%\FC\BBb\00\E8}\1B\00\00H\BE\EF0@\00\00\00\00\00H\8B<%@@`\00\B0\00\E8T\F7\FF\FF\C7E\C0\FD\FF\FF\FF\C7E\BCd\00\00\00\89\85X\FC\FF\FF\E8;\F8\FF\FF\F3\0F\11E\B0\8BE\C0\83\C0\01\89E\C0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;E\BC\0F\8DA\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8\D7\09\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\AF\FF\FF\FF\E8\CC\F7\FF\FFH\BE\0D1@\00\00\00\00\00\0FW\C9\F3\0F\11E\AC\F3\0F\10E\AC\F3\0F\5CE\B0\F3\0F\11E\B8H\8B<%@@`\00\8BU\BC\0F(\C1\B0\01\E8\96\F6\FF\FF\83}\C0\00\89\85T\FC\FF\FF\0F\8D\09\00\00\00\8BE\BC\C1\E0\01\89E\BC\E9\00\00\00\00\83}\C0\00\0F\8C.\FF\FF\FFH\BE'1@\00\00\00\00\00\0FW\C0\F3\0F\10M\B8\F3\0FZ\C9\8BE\BC\F2\0F*\D0\F2\0F^\CA\F2\0FZ\C9\F3\0F\11M\B8H\8B<%@@`\00\B0\01\E85\F6\FF\FFH\BEN1@\00\00\00\00\00H\8B<%@@`\00\89\85P\FC\FF\FF\B0\00\E8\16\F6\FF\FF\C7E\C0\FD\FF\FF\FF\C7\04%\10\C0b\00d\00\00\00\89\85L\FC\FF\FF\E8\F9\F6\FF\FF\F3\0F\11E\B0\8BE\C0\83\C0\01\89E\C0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8\91\08\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%P@`\00\8B\14%X@`\00\E80\0A\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8U\F6\FF\FFH\BE\0D1@\00\00\00\00\00\0FW\C9\F3\0F\5CE\B0\F3\0F\11E\ACH\8B<%@@`\00\8B\14%\10\C0b\00\0F(\C1\B0\01\E8%\F5\FF\FF\83}\C0\00\89\85H\FC\FF\FF\0F\8D\11\00\00\00\8B\04%\10\C0b\00\C1\E0\01\89\04%\10\C0b\00\E9\00\00\00\00\83}\C0\00\0F\8C\F7\FE\FF\FF\C7\04%\10\C0b\00\E8\03\00\00\83<%\10\C0b\00\00\0F\85\0B\00\00\00\C7\04%\10\C0b\00\01\00\00\00H\BE}1@\00\00\00\00\001\D2H\8B<%@@`\00\B0\00\E8\B6\F4\FF\FFH\BE\911@\00\00\00\00\00H\8B<%@@`\00\8B\14%P@`\00\89\85D\FC\FF\FF\B0\00\E8\90\F4\FF\FFH\BE\AA0@\00\00\00\00\00H\8B<%@@`\00\89\85@\FC\FF\FF\B0\00\E8q\F4\FF\FFH\BE\E20@\00\00\00\00\00H\8B<%@@`\00\89\85<\FC\FF\FF\B0\00\E8R\F4\FF\FF\0FW\C0\8B\14%\10\C0b\00\F3\0F*\CA\F3\0FYM\B8\F3\0F\11M\D4\F3\0F\11\04%\9C\BBb\00\C7\04%\14\C0b\00\01\00\00\00\89\858\FC\FF\FF\83<%\14\C0b\00\06\0F\8Dq\02\00\00\E8\0D\F5\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8\AE\06\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%P@`\00\8B\14%X@`\00\E8M\08\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8r\F4\FF\FF\F3\0F\5CE\D8\F3\0F\5CE\D4\8B\04%\10\C0b\00\F3\0F*\C8\F3\0F^\C1Hc\0C%\14\C0b\00\F3\0F\11\04\8D\D0\BAb\00\E8C\F4\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8DJ\00\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\8B4%P@`\00\8B\14%X@`\00\E8\BB\0A\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A2\FF\FF\FF\E8\D0\F3\FF\FF\F2\0F\10\0D\E0\1C\00\00\F2\0F\10\15\E8\1C\00\00\F3\0F\5CE\D8\8B\04%\10\C0b\00\F3\0F*\D8\F3\0F^\C3Hc\0C%\14\C0b\00\F3\0F\11\04\8D\0C\BBb\00Hc\0C%\14\C0b\00\F3\0F\10\04\8D\D0\BAb\00Hc\0C%\14\C0b\00\F3\0FX\04\8D\0C\BBb\00\F3\0F\11E\F0\F3\0F\10E\F0Hc\0C%\14\C0b\00\F3\0F\11\04\8DH\BBb\00\F3\0F\10E\F4\F3\0FZ\C0\F3\0F\10]\F0\F3\0FZ\DB\F2\0FY\D3\F2\0F^\C2\F2\0FZ\C0Hc\0C%\14\C0b\00\F3\0F\11\04\8D\84\BBb\00Hc\0C%\14\C0b\00\F3\0F\10\04\8D\84\BBb\00\F3\0FZ\C0\F2\0F^\C8\F2\0FZ\C1Hc\0C%\14\C0b\00\F3\0F\11\04\8D\C0\BBb\00\F3\0F\10E\F0\F3\0F^E\F8Hc\0C%\14\C0b\00\F3\0F\11\04\8D\FC\BBb\00\F3\0F\10\04%\9C\BBb\00Hc\0C%\14\C0b\00\F3\0FX\04\8D\84\BBb\00\F3\0F\11\04%\9C\BBb\00\8B<%\14\C0b\00\E8\C7\15\00\00\8B\04%\14\C0b\00\83\C0\01\89\04%\14\C0b\00\E9\81\FD\FF\FFH\BE\C01@\00\00\00\00\00\0FW\C0\F2\0F\10\0D\BC\1B\00\00\F3\0F\10\14%\9C\BBb\00\F3\0FZ\D2\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\9C\BBb\00H\8B<%@@`\00\B0\01\E8_\F1\FF\FFH\BE\E91@\00\00\00\00\00H\8B<%@@`\00\89\854\FC\FF\FF\B0\00\E8@\F1\FF\FF\89\850\FC\FF\FF\E85\F2\FF\FF\F3\0F\11E\B0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;E\BC\0F\8DA\00\00\00H\BF \C0b\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%T@`\00\8B\14%X@`\00\E8\DA\03\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\AF\FF\FF\FF\E8\CF\F1\FF\FFH\BE'1@\00\00\00\00\00\0FW\C9\F3\0F\11E\AC\F3\0F\10E\AC\F3\0F\5CE\B0\F3\0F\11E\B4\F3\0F\10E\B4\F3\0FZ\C0\8BE\BC\F2\0F*\D0\F2\0F^\C2\F2\0FZ\C0\F3\0F\11E\B4H\8B<%@@`\00\0F(\C1\B0\01\E8\7F\F0\FF\FFH\BE\911@\00\00\00\00\00H\8B<%@@`\00\8B\14%T@`\00\89\85,\FC\FF\FF\B0\00\E8Y\F0\FF\FFH\BE\AA0@\00\00\00\00\00H\8B<%@@`\00\89\85(\FC\FF\FF\B0\00\E8:\F0\FF\FFH\BE\E20@\00\00\00\00\00H\8B<%@@`\00\89\85$\FC\FF\FF\B0\00\E8\1B\F0\FF\FF\0FW\C0\8B\14%\10\C0b\00\F3\0F*\CA\F3\0FYM\B4\F3\0F\11M\D4\F3\0F\11\04%\B4\BBb\00\C7\04%\14\C0b\00\07\00\00\00\89\85 \FC\FF\FF\83<%\14\C0b\00\0C\0F\8Dq\02\00\00\E8\D6\F0\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF \C0b\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%T@`\00\8B\14%X@`\00\E8w\02\00\00H\BF \C0b\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%T@`\00\8B\14%X@`\00\E8\16\04\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8;\F0\FF\FF\F3\0F\5CE\D8\F3\0F\5CE\D4\8B\04%\10\C0b\00\F3\0F*\C8\F3\0F^\C1Hc\0C%\14\C0b\00\F3\0F\11\04\8D\D0\BAb\00\E8\0C\F0\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8DJ\00\00\00H\BF \C0b\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\8B4%T@`\00\8B\14%X@`\00\E8\84\06\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A2\FF\FF\FF\E8\99\EF\FF\FF\F2\0F\10\0D\A9\18\00\00\F2\0F\10\15\B1\18\00\00\F3\0F\5CE\D8\8B\04%\10\C0b\00\F3\0F*\D8\F3\0F^\C3Hc\0C%\14\C0b\00\F3\0F\11\04\8D\0C\BBb\00Hc\0C%\14\C0b\00\F3\0F\10\04\8D\D0\BAb\00Hc\0C%\14\C0b\00\F3\0FX\04\8D\0C\BBb\00\F3\0F\11E\F0\F3\0F\10E\F0Hc\0C%\14\C0b\00\F3\0F\11\04\8DH\BBb\00\F3\0F\10E\F4\F3\0FZ\C0\F3\0F\10]\F0\F3\0FZ\DB\F2\0FY\D3\F2\0F^\C2\F2\0FZ\C0Hc\0C%\14\C0b\00\F3\0F\11\04\8D\84\BBb\00Hc\0C%\14\C0b\00\F3\0F\10\04\8D\84\BBb\00\F3\0FZ\C0\F2\0F^\C8\F2\0FZ\C1Hc\0C%\14\C0b\00\F3\0F\11\04\8D\C0\BBb\00\F3\0F\10E\F0\F3\0F^E\F8Hc\0C%\14\C0b\00\F3\0F\11\04\8D\FC\BBb\00\F3\0F\10\04%\B4\BBb\00Hc\0C%\14\C0b\00\F3\0FX\04\8D\84\BBb\00\F3\0F\11\04%\B4\BBb\00\8B<%\14\C0b\00\E8\90\11\00\00\8B\04%\14\C0b\00\83\C0\01\89\04%\14\C0b\00\E9\81\FD\FF\FFH\BE\C01@\00\00\00\00\00\0FW\C0\F2\0F\10\0D\85\17\00\00\F3\0F\10\14%\B4\BBb\00\F3\0FZ\D2\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\B4\BBb\00H\8B<%@@`\00\B0\01\E8(\ED\FF\FF1\C9\89\85\1C\FC\FF\FF\89\C8H\81\C4\F0\03\00\00]\C3\0F\1FD\00\00UH\89\E5\0FW\C0H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0\C7E\DC-\05\00\00H\8BM\E0\F3\0F\11\01\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8D\E4\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D\BE\00\00\00\F2\0F\10\05\F2\16\00\00\F2\0F\10\0D\F2\16\00\00\B8\00\00\01\00iM\DC5\0C\00\00\89E\D0\89\C8\99\8BM\D0\F7\F9\89U\DC\8BU\DC\F2\0F*\D2\F2\0F\5C\D1\F2\0F^\D0\F2\0FZ\C2H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\FA\F3\0F\11\04\BEH\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\FA\F3\0F\10\04\BEH\8Bu\E0\0F.\06\0F\86 \00\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\D8Hc\D1\F3\0F\10\04\90\F3\0F\11E\CC\E9\0D\00\00\00H\8BE\E0\F3\0F\10\00\F3\0F\11E\CC\F3\0F\10E\CCH\8BE\E0\F3\0F\11\00\8BE\D8\83\C0\01\89E\D8\E96\FF\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\10\FF\FF\FF\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D\1E\00\00\00\0FW\C0H\8BE\E8HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\D6\FF\FF\FF\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8Dd\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D>\00\00\00H\8BE\E8HcM\D8\F3\0F\10\04\88H\8BE\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\CA\F3\0FX\04\88H\8BE\E8HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\B6\FF\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\90\FF\FF\FF]\C3\0F\1F\80\00\00\00\00UH\89\E5H\83\EC@H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0H\8BM\E0\C7\01\00\00\00\00\8BU\F0\83\EA\01\89U\C8\83}\C8\00\0F\8Cy\02\00\00\C7E\D4\00\00\00\00\8BE\D4;E\C8\0F\8Da\02\00\00\BA\01\00\00\00\8BE\D4\83\C0\01\89E\D0\8BE\F0+E\D4H\8BM\F8\8Bu\F4\0F\AFu\D4\03u\D4Hc\FEH\C1\E7\02H\01\F9\89\C7H\89\CE\E8\B0\11\00\00\0FW\C0\03E\D4\89E\CC\8BE\CCH\8BM\E8Hcu\D4\89\04\B1H\8BM\F8\8BE\F4\0F\AFE\D4\03E\CCHc\F0\F3\0F\10\0C\B1\F3\0FZ\C9f\0F.\C8\0F\85\0B\00\00\00\0F\8A\05\00\00\00\E9\C9\01\00\00\8BE\CC;E\D4\0F\84b\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\CCHc\D1\F3\0F\10\04\90\F3\0F\11E\DCH\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\D1\F3\0F\10\04\90H\8BE\F8\8BM\F4\0F\AFM\D4\03M\CCHc\D1\F3\0F\11\04\90\F3\0F\10E\DCH\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\D1\F3\0F\11\04\90\BA\01\00\00\00\F2\0F\10\05G\14\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\F1\F3\0F\10\0C\B0\F3\0FZ\C9\F2\0F^\C1\F2\0FZ\C0\F3\0F\11E\DC\8BM\F0\8B}\D4\83\C7\01)\F9\F3\0F\10E\DCH\8BE\F8\8B}\F4\0F\AF}\D4\03}\D4\83\C7\01Hc\F7H\C1\E6\02H\01\F0\89\CFH\89\C6\E8S\12\00\00\8BM\D0\89M\D8\8BE\D8;E\F0\0F\8D\DB\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D8\03M\CCHc\D1\F3\0F\10\04\90\F3\0F\11E\DC\8BM\CC;M\D4\0F\84G\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D8\03M\D4Hc\D1\F3\0F\10\04\90H\8BE\F8\8BM\F4\0F\AFM\D8\03M\CCHc\D1\F3\0F\11\04\90\F3\0F\10E\DCH\8BE\F8\8BM\F4\0F\AFM\D8\03M\D4Hc\D1\F3\0F\11\04\90\B8\01\00\00\00\8BM\F0\8BU\D4\83\C2\01)\D1\F3\0F\10E\DCH\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\F8\8BU\F4\0F\AFU\D8\03U\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\C0\89\CF\89\C2H\8BM\C0A\89\C0\E8\E4\0C\00\00\8BE\D8\83\C0\01\89E\D8\E9\19\FF\FF\FF\E9\09\00\00\00\8BE\D4H\8BM\E0\89\01\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\93\FD\FF\FF\E9\00\00\00\00\0FW\C0\8BE\F0\83\E8\01H\8BM\E8\8BU\F0\83\EA\01Hc\F2\89\04\B1H\8BM\F8\8BE\F4\8BU\F0\83\EA\01\0F\AF\C2\8BU\F0\83\EA\01\01\D0Hc\F0\F3\0F\10\0C\B1\F3\0FZ\C9f\0F.\C8\0F\85\12\00\00\00\0F\8A\0C\00\00\00\8BE\F0\83\E8\01H\8BM\E0\89\01H\83\C4@]\C3\90UH\89\E5H\83\EC`H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0D\89M\DC\8BU\F0\83\EA\01\89U\C8\83}\DC\00\0F\85\97\01\00\00\83}\C8\01\0F\8C\D6\00\00\00\C7E\D4\00\00\00\00\8BE\D4;E\C8\0F\8D\BE\00\00\00H\8BE\E8HcM\D4\8B\14\88\89U\CCH\8BE\E0HcM\CC\F3\0F\10\04\88\F3\0F\11E\D8\8BU\CC;U\D4\0F\84,\00\00\00H\8BE\E0HcM\D4\F3\0F\10\04\88H\8BE\E0HcM\CC\F3\0F\11\04\88\F3\0F\10E\D8H\8BE\E0HcM\D4\F3\0F\11\04\88\B8\01\00\00\00\8BM\F0\8BU\D4\83\C2\01)\D1\F3\0F\10E\D8H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\E0\8BU\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\C0\89\CF\89\C2H\8BM\C0A\89\C0\E8R\0B\00\00\8BE\D4\83\C0\01\89E\D4\E96\FF\FF\FF\E9\00\00\00\00\C7E\D0\00\00\00\00\8BE\D0;E\F0\0F\8D\9F\00\00\00\B8\01\00\00\00\8BM\F0\8BU\D0\83\C2\01)\D1\89M\D4H\8Bu\E0Hc}\D4\F3\0F\10\04\BEH\8Bu\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\F9\F3\0F^\04\BEH\8Bu\E0Hc}\D4\F3\0F\11\04\BEH\8Bu\E0Hc}\D4\F3\0F\10\04\BEf\0F~\C1\81\F1\00\00\00\80f\0Fn\C1\F3\0F\11E\D8\8B}\D4\F3\0F\10E\D8H\8Bu\F8\8BM\F4\0F\AFM\D4\83\C1\00Lc\C1I\C1\E0\02L\01\C6H\8BM\E0\89\C2A\89\C0\E8\9B\0A\00\00\8BE\D0\83\C0\01\89E\D0\E9U\FF\FF\FF\E9\AF\01\00\00\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8D\81\00\00\00\B8\01\00\00\00\8B}\D4H\8BM\F8\8BU\F4\0F\AFU\D4\83\C2\00Hc\F2H\C1\E6\02H\01\F1H\8Bu\E0H\89u\B8H\89\CE\89\C2H\8BM\B8A\89\C0\E8\AC\0B\00\00\F3\0F\11E\D8H\8BM\E0Hcu\D4\F3\0F\10\04\B1\F3\0F\5CE\D8H\8BM\F8\8BE\F4\0F\AFE\D4\03E\D4Hc\F0\F3\0F^\04\B1H\8BM\E0Hcu\D4\F3\0F\11\04\B1\8BE\D4\83\C0\01\89E\D4\E9s\FF\FF\FF\83}\C8\01\0F\8C\0C\01\00\00\C7E\D0\01\00\00\00\8BE\D0;E\C8\0F\8D\F4\00\00\00\B8\01\00\00\00\8BM\F0\8BU\D0\83\C2\01)\D1\89M\D4H\8Bu\E0Hc}\D4\F3\0F\10\04\BE\8BM\F0\8BU\D4\83\C2\01)\D1H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\E0\8BU\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\B0\89\CF\89\C2H\8BM\B0A\89\C0\F3\0F\11E\AC\E8\D4\0A\00\00\F3\0F\10M\AC\F3\0FX\C8H\8BM\E0Hcu\D4\F3\0F\11\0C\B1H\8BM\E8Hcu\D4\8B\04\B1\89E\CC\8BE\CC;E\D4\0F\84>\00\00\00H\8BE\E0HcM\CC\F3\0F\10\04\88\F3\0F\11E\D8H\8BE\E0HcM\D4\F3\0F\10\04\88H\8BE\E0HcM\CC\F3\0F\11\04\88\F3\0F\10E\D8H\8BE\E0HcM\D4\F3\0F\11\04\88\E9\00\00\00\00\8BE\D0\83\C0\01\89E\D0\E9\00\FF\FF\FF\E9\00\00\00\00\E9\00\00\00\00H\83\C4`]\C3\0F\1F\00UH\89\E5\B8\02\00\00\00\89}\FCH\89u\F0\89U\EC\89M\E8L\89E\E0L\89M\D8\8BM\EC\89E\C8\89\C8\99\8BM\C8\F7\F9\89U\D4\83}\D4\01\0F\8Cp\00\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8DO\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\A5\FF\FF\FF\E9\00\00\00\00\B8\04\00\00\00\8BM\EC\89E\C4\89\C8\99\8BM\C4\F7\F9\89U\D4\83}\D4\02\0F\8C\A1\00\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\80\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9t\FF\FF\FF\E9\00\00\00\00\B8\08\00\00\00\8BM\EC\89E\C0\89\C8\99\8BM\C0\F7\F9\89U\D4\83}\D4\04\0F\8C\03\01\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\E2\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\12\FF\FF\FF\E9\00\00\00\00\B8\10\00\00\00\8BM\EC\89E\BC\89\C8\99\8BM\BC\F7\F9\89U\D4\83}\D4\08\0F\8C\C7\01\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\A6\01\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\07Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\07\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\06Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\06\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\05Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\05\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\04Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\04\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9N\FE\FF\FF\E9\00\00\00\00\B8\10\00\00\00\8BM\EC\89E\B8\89\C8\99\8BM\B8\F7\F9\83\C2\10\89U\CC\8BU\CC\83\EA\01\89U\D4\8BE\D4;E\EC\0F\8DT\03\00\00\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D.\03\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\0FHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0F\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0EHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0E\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0DHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0D\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0CHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0C\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0BHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0B\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0AHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0A\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\09Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\09\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\08Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\08\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\07Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\07\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\06Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\06\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\05Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\05\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\04Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\04\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\C6\FC\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\10\89E\D4\E9\A0\FC\FF\FF]\C3\0F\1F\84\00\00\00\00\00UH\89\E5\0FW\C9\F3\0F\10\15\B1\06\00\00\F3\0F\11E\FC\F3\0F\11U\F8\F3\0F\11M\EC\0FW\C0\F3\0F\10M\EC\F3\0FZ\C9f\0F.\C8\0F\85^\00\00\00\0F\8AX\00\00\00\F2\0F\10\05\BE\06\00\00\F3\0F\10M\F8\F3\0FZ\C9\F2\0F\5C\C8\F2\0FZ\C9\F3\0F\11M\F4\F3\0F\10M\F4\F3\0FXM\F4\F3\0FXM\F4\F3\0F\11M\F0\F3\0F\10M\F0\F3\0FZ\C9\F2\0F\5C\C8\0F(\05\90\06\00\00f\0F\DB\C8\F2\0FZ\C1\F3\0F\11E\EC\E9\8C\FF\FF\FF\F3\0F\10E\EC\F3\0FZ\C0\F3\0F\10M\FC\F3\0FZ\C9\0F(\15e\06\00\00f\0F\DB\CA\F2\0FY\C1\F2\0FZ\C0]\C3\0F\1F\80\00\00\00\00UH\89\E5\89}\FC]\C3\0F\1F\80\00\00\00\00UH\89\E5\89}\FC\F3\0F\11E\F8H\89u\F0\89U\ECH\89M\E0D\89E\DC\C7E\C8\00\00\00\00\C7E\CC\00\00\00\00\83}\FC\00\0F\8F\05\00\00\00\E93\01\00\00\0FW\C0\F3\0F\10M\F8\F3\0FZ\C9f\0F.\C8\0F\85\0B\00\00\00\0F\8A\05\00\00\00\E9\12\01\00\00\83}\EC\01\0F\85\0A\00\00\00\83}\DC\01\0F\84\A8\00\00\00\C7E\D4\00\00\00\00\C7E\D0\00\00\00\00\83}\EC\00\0F\8D\0F\00\00\001\C0+E\FC\83\C0\01\0F\AFE\EC\89E\D4\83}\DC\00\0F\8D\0F\00\00\001\C0+E\FC\83\C0\01\0F\AFE\DC\89E\D0\C7E\D8\00\00\00\00\8BE\D8;E\FC\0F\8DP\00\00\00H\8BE\E0HcM\D0\F3\0F\10\04\88\F3\0F\10M\F8H\8BE\F0HcM\D4\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D0\F3\0F\11\04\88\8BU\D4\03U\EC\89U\D4\8BU\D0\03U\DC\89U\D0\8BE\D8\83\C0\01\89E\D8\E9\A4\FF\FF\FF\E9V\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\FC\0F\8D>\00\00\00H\8BE\E0HcM\D8\F3\0F\10\04\88\F3\0F\10M\F8H\8BE\F0HcM\D8\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\B6\FF\FF\FF\E9\00\00\00\00]\C3\0F\1F\00UH\89\E5\0FW\C0\89}\F8H\89u\F0\89U\ECH\89M\E0D\89E\DC\C7E\C4\00\00\00\00\C7E\C8\00\00\00\00\F3\0F\11E\D8\83}\F8\00\0F\8F\0D\00\00\00\0FW\C0\F3\0F\11E\FC\E9\11\01\00\00\83}\EC\01\0F\85\0A\00\00\00\83}\DC\01\0F\84\AA\00\00\00\C7E\D0\00\00\00\00\C7E\CC\00\00\00\00\83}\EC\00\0F\8D\0F\00\00\001\C0+E\F8\83\C0\01\0F\AFE\EC\89E\D0\83}\DC\00\0F\8D\0F\00\00\001\C0+E\F8\83\C0\01\0F\AFE\DC\89E\CC\C7E\D4\00\00\00\00\8BE\D4;E\F8\0F\8DH\00\00\00\F3\0F\10E\D8H\8BE\F0HcM\D0\F3\0F\10\0C\88H\8BE\E0HcM\CC\F3\0FY\0C\88\F3\0FX\C1\F3\0F\11E\D8\8BU\D0\03U\EC\89U\D0\8BU\CC\03U\DC\89U\CC\8BE\D4\83\C0\01\89E\D4\E9\AC\FF\FF\FF\F3\0F\10E\D8\F3\0F\11E\FC\E9S\00\00\00\C7E\D4\00\00\00\00\8BE\D4;E\F8\0F\8D6\00\00\00\F3\0F\10E\D8H\8BE\F0HcM\D4\F3\0F\10\0C\88H\8BE\E0HcM\D4\F3\0FY\0C\88\F3\0FX\C1\F3\0F\11E\D8\8BE\D4\83\C0\01\89E\D4\E9\BE\FF\FF\FF\F3\0F\10E\D8\F3\0F\11E\FC\F3\0F\10E\FC]\C3\0F\1FD\00\00UH\89\E5\89}\F8H\89u\F0\89U\EC\83}\F8\01\0F\8D\0C\00\00\00\C7E\FC\FF\FF\FF\FF\E9\8B\01\00\00\83}\F8\01\0F\85\0C\00\00\00\C7E\FC\00\00\00\00\E9u\01\00\00\83}\EC\01\0F\84\B9\00\00\00\C7E\E0\01\00\00\00H\8BE\F0\F3\0F\10\00\F3\0FZ\C0\0F(\0D\12\03\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\8BM\E0\03M\EC\89M\E0\C7E\E4\01\00\00\00\8BE\E4;E\F8\0F\8Dq\00\00\00H\8BE\F0HcM\E0\F3\0F\10\04\88\F3\0FZ\C0\0F(\0D\D1\02\00\00f\0F\DB\C1\F3\0F\10M\E8\F3\0FZ\C9f\0F.\C1\0F\86+\00\00\00\8BE\E4\89E\DCH\8BM\F0HcU\E0\F3\0F\10\04\91\F3\0FZ\C0\0F(\0D\9C\02\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\8BE\E0\03E\EC\89E\E0\8BE\E4\83\C0\01\89E\E4\E9\83\FF\FF\FF\E9\AC\00\00\00\C7E\DC\00\00\00\00H\8BE\F0\F3\0F\10\00\F3\0FZ\C0\0F(\0DY\02\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\C7E\E4\01\00\00\00\8BE\E4;E\F8\0F\8Dm\00\00\00H\8BE\F0HcM\E4\F3\0F\10\04\88\F3\0FZ\C0\0F(\0D!\02\00\00f\0F\DB\C1\F3\0F\10M\E8\F3\0FZ\C9f\0F.\C1\0F\86+\00\00\00\8BE\E4\89E\DCH\8BM\F0HcU\E4\F3\0F\10\04\91\F3\0FZ\C0\0F(\0D\EC\01\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\E9\00\00\00\00\8BE\E4\83\C0\01\89E\E4\E9\87\FF\FF\FF\E9\00\00\00\00\8BE\DC\89E\FC\8BE\FC]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\F3\0F\11E\F8H\89u\F0\89U\EC\C7E\E0\00\00\00\00\C7E\E4\00\00\00\00\83}\FC\00\0F\8F\05\00\00\00\E9\99\00\00\00\83}\EC\01\0F\84O\00\00\00\8BE\FC\0F\AFE\EC\89E\DC\C7E\E8\00\00\00\00\8BE\E8;E\DC\0F\8D-\00\00\00\F3\0F\10E\F8H\8BE\F0HcM\E8\F3\0FY\04\88H\8BE\F0HcM\E8\F3\0F\11\04\88\8BE\E8\03E\EC\89E\E8\E9\C7\FF\FF\FF\E9@\00\00\00\C7E\E8\00\00\00\00\8BE\E8;E\FC\0F\8D-\00\00\00\F3\0F\10E\F8H\8BE\F0HcM\E8\F3\0FY\04\88H\8BE\F0HcM\E8\F3\0F\11\04\88\8BE\E8\83\C0\01\89E\E8\E9\C7\FF\FF\FF]\C3\0F\1FD\00\00AWAVI\89\D7AUATL\8D%\9E\0F \00UH\8D-\9E\0F \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\07\D6\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_402eb4__fini = internal constant %seg_402eb4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_402ec0__rodata = internal constant %seg_402ec0__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_403208__eh_frame_hdr = internal constant %seg_403208__eh_frame_hdr_type <{ [156 x i8] c"\01\1B\03;\9C\00\00\00\12\00\00\00\88\D2\FF\FF\F8\00\00\00\C8\D2\FF\FF\B8\00\00\00\F8\D2\FF\FF\E4\00\00\00\B8\D3\FF\FF \01\00\00\F8\D3\FF\FF<\01\00\00\08\D4\FF\FFX\01\00\00\A8\E5\FF\FFt\01\00\00x\E7\FF\FF\90\01\00\00\88\EA\FF\FF\AC\01\00\00\08\EE\FF\FF\C8\01\00\00\08\F6\FF\FF\E4\01\00\00\C8\F6\FF\FF\00\02\00\00\D8\F6\FF\FF\1C\02\00\00H\F8\FF\FF8\02\00\00\A8\F9\FF\FFT\02\00\00h\FB\FF\FFp\02\00\008\FC\FF\FF\90\02\00\00\A8\FC\FF\FF\D8\02\00\00" }>
@seg_4032a8__eh_frame = internal constant %seg_4032a8__eh_frame_type <{ [592 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\08\D2\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\0C\D2\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\88\D1\FF\FF@\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\90\D2\FF\FF6\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\B4\D2\FF\FF\06\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\A8\D2\FF\FF\9B\11\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00,\E4\FF\FF\C9\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\E0\E5\FF\FF\0F\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\D4\E8\FF\FF}\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\008\EC\FF\FF\F8\07\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00\1C\F4\FF\FF\B9\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\00\C0\F4\FF\FF\09\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00\B4\F4\FF\FFm\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00p\01\00\00\08\F6\FF\FF[\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\01\00\00L\F7\FF\FF\B4\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\A8\01\00\00\F0\F8\FF\FF\CB\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00\C8\01\00\00\A0\F9\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\10\02\00\00\C8\F9\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005b0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400580___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604000__got_plt = internal global %seg_604000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 ()* @clock to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64) }>
@seg_604030__data = internal global %seg_604030__data_type zeroinitializer
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005b0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400580___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402eb0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e40___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402bb0_idamax_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402010_dmxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402d70_dscal_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400478__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400510_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402810_epslon_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400478__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400478:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_40048a, label %block_400488

block_400488:                                     ; preds = %block_400478
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_40048a

block_40048a:                                     ; preds = %block_400488, %block_400478
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400478 ], [ %92, %block_400488 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400540_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004d0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402eb0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402e40___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_653150___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028e0_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4028e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 4
  %56 = load i32, i32* %EDI
  %57 = zext i32 %56 to i64
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %60
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 8
  %63 = bitcast %union.vec128_t* %XMM0 to i8*
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 5
  store i64 %65, i64* %PC
  %66 = bitcast i8* %63 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 1
  %68 = extractelement <2 x float> %67, i32 0
  %69 = inttoptr i64 %62 to float*
  store float %68, float* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 16
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 20
  %78 = load i32, i32* %EDX
  %79 = zext i32 %78 to i64
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %77 to i32*
  store i32 %78, i32* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 32
  %85 = load i64, i64* %RCX
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 36
  %91 = load i32, i32* %R8D
  %92 = zext i32 %91 to i64
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %90 to i32*
  store i32 %91, i32* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 56
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 7
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i32*
  store i32 0, i32* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 52
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 7
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i32*
  store i32 0, i32* %105
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 4
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i32*
  %111 = load i32, i32* %110
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %112, align 1, !tbaa !2432
  %113 = and i32 %111, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2446
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %119, align 1, !tbaa !2447
  %120 = icmp eq i32 %111, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2448
  %123 = lshr i32 %111, 31
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2449
  %126 = lshr i32 %111, 31
  %127 = xor i32 %123, %126
  %128 = add nuw nsw i32 %127, %126
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 11
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 6
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 6
  store i64 %137, i64* %PC
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %139 = load i8, i8* %138, align 1, !tbaa !2448
  %140 = icmp eq i8 %139, 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %142 = load i8, i8* %141, align 1, !tbaa !2449
  %143 = icmp ne i8 %142, 0
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %145 = load i8, i8* %144, align 1, !tbaa !2450
  %146 = icmp ne i8 %145, 0
  %147 = xor i1 %143, %146
  %148 = xor i1 %147, true
  %149 = and i1 %140, %148
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %152 = select i1 %149, i64 %133, i64 %135
  store i64 %152, i64* %151, align 8, !tbaa !2428
  %153 = load i8, i8* %BRANCH_TAKEN
  %154 = icmp eq i8 %153, 1
  br i1 %154, label %block_402918, label %block_402913

block_4029f5:                                     ; preds = %block_402943
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 40
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 7
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  store i32 0, i32* %159
  br label %block_4029fc

block_402918:                                     ; preds = %block_4028e0
  %160 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %161 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %162 = bitcast %union.vec128_t* %XMM0 to i8*
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  %165 = bitcast i8* %161 to i64*
  %166 = load i64, i64* %165, align 1
  %167 = getelementptr inbounds i8, i8* %161, i64 8
  %168 = bitcast i8* %167 to i64*
  %169 = load i64, i64* %168, align 1
  %170 = bitcast i8* %162 to i64*
  %171 = load i64, i64* %170, align 1
  %172 = getelementptr inbounds i8, i8* %162, i64 8
  %173 = bitcast i8* %172 to i64*
  %174 = load i64, i64* %173, align 1
  %175 = xor i64 %171, %166
  %176 = xor i64 %174, %169
  %177 = trunc i64 %175 to i32
  %178 = lshr i64 %175, 32
  %179 = trunc i64 %178 to i32
  %180 = bitcast i8* %160 to i32*
  store i32 %177, i32* %180, align 1, !tbaa !2452
  %181 = getelementptr inbounds i8, i8* %160, i64 4
  %182 = bitcast i8* %181 to i32*
  store i32 %179, i32* %182, align 1, !tbaa !2452
  %183 = trunc i64 %176 to i32
  %184 = getelementptr inbounds i8, i8* %160, i64 8
  %185 = bitcast i8* %184 to i32*
  store i32 %183, i32* %185, align 1, !tbaa !2452
  %186 = lshr i64 %176, 32
  %187 = trunc i64 %186 to i32
  %188 = getelementptr inbounds i8, i8* %160, i64 12
  %189 = bitcast i8* %188 to i32*
  store i32 %187, i32* %189, align 1, !tbaa !2452
  %190 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 8
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 5
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to float*
  %196 = load float, float* %195
  %197 = bitcast i8* %190 to float*
  store float %196, float* %197, align 1, !tbaa !2453
  %198 = getelementptr inbounds i8, i8* %190, i64 4
  %199 = bitcast i8* %198 to float*
  store float 0.000000e+00, float* %199, align 1, !tbaa !2453
  %200 = getelementptr inbounds i8, i8* %190, i64 8
  %201 = bitcast i8* %200 to float*
  store float 0.000000e+00, float* %201, align 1, !tbaa !2453
  %202 = getelementptr inbounds i8, i8* %190, i64 12
  %203 = bitcast i8* %202 to float*
  store float 0.000000e+00, float* %203, align 1, !tbaa !2453
  %204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %205 = bitcast %union.vec128_t* %XMM1 to i8*
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 4
  store i64 %207, i64* %PC
  %208 = bitcast i8* %205 to <2 x float>*
  %209 = load <2 x float>, <2 x float>* %208, align 1
  %210 = extractelement <2 x float> %209, i32 0
  %211 = fpext float %210 to double
  %212 = bitcast i8* %204 to double*
  store double %211, double* %212, align 1, !tbaa !2455
  %213 = bitcast %union.vec128_t* %XMM1 to i8*
  %214 = bitcast %union.vec128_t* %XMM0 to i8*
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC
  %217 = bitcast i8* %213 to double*
  %218 = load double, double* %217, align 1
  %219 = bitcast i8* %214 to double*
  %220 = load double, double* %219, align 1
  %221 = fcmp uno double %218, %220
  br i1 %221, label %222, label %234

; <label>:222:                                    ; preds = %block_402918
  %223 = fadd double %218, %220
  %224 = bitcast double %223 to i64
  %225 = and i64 %224, 9221120237041090560
  %226 = icmp eq i64 %225, 9218868437227405312
  %227 = and i64 %224, 2251799813685247
  %228 = icmp ne i64 %227, 0
  %229 = and i1 %226, %228
  br i1 %229, label %230, label %240

; <label>:230:                                    ; preds = %222
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %232 = load i64, i64* %231, align 8, !tbaa !2428
  %233 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %232, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:234:                                    ; preds = %block_402918
  %235 = fcmp ogt double %218, %220
  br i1 %235, label %240, label %236

; <label>:236:                                    ; preds = %234
  %237 = fcmp olt double %218, %220
  br i1 %237, label %240, label %238

; <label>:238:                                    ; preds = %236
  %239 = fcmp oeq double %218, %220
  br i1 %239, label %240, label %247

; <label>:240:                                    ; preds = %238, %236, %234, %222
  %241 = phi i8 [ 0, %234 ], [ 0, %236 ], [ 1, %238 ], [ 1, %222 ]
  %242 = phi i8 [ 0, %234 ], [ 0, %236 ], [ 0, %238 ], [ 1, %222 ]
  %243 = phi i8 [ 0, %234 ], [ 1, %236 ], [ 0, %238 ], [ 1, %222 ]
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %241, i8* %244, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %242, i8* %245, align 1, !tbaa !2451
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %243, i8* %246, align 1, !tbaa !2451
  br label %247

; <label>:247:                                    ; preds = %240, %238
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %248, align 1, !tbaa !2451
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %249, align 1, !tbaa !2451
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %250, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %230, %247
  %251 = phi %struct.Memory* [ %233, %230 ], [ %2, %247 ]
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 17
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 6
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 6
  store i64 %257, i64* %PC
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %259 = load i8, i8* %258, align 1, !tbaa !2448
  %260 = icmp eq i8 %259, 0
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %263 = select i1 %260, i64 %253, i64 %255
  store i64 %263, i64* %262, align 8, !tbaa !2428
  %264 = load i8, i8* %BRANCH_TAKEN
  %265 = icmp eq i8 %264, 1
  br i1 %265, label %block_402939, label %block_40292e

block_402974:                                     ; preds = %block_402965, %block_40294d
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_40294d ], [ %MEMORY.3, %block_402965 ]
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 36
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i32*
  %271 = load i32, i32* %270
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %272, align 1, !tbaa !2432
  %273 = and i32 %271, 255
  %274 = call i32 @llvm.ctpop.i32(i32 %273) #16
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  %277 = xor i8 %276, 1
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %277, i8* %278, align 1, !tbaa !2446
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %279, align 1, !tbaa !2447
  %280 = icmp eq i32 %271, 0
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %281, i8* %282, align 1, !tbaa !2448
  %283 = lshr i32 %271, 31
  %284 = trunc i32 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %284, i8* %285, align 1, !tbaa !2449
  %286 = lshr i32 %271, 31
  %287 = xor i32 %283, %286
  %288 = add nuw nsw i32 %287, %286
  %289 = icmp eq i32 %288, 2
  %290 = zext i1 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %290, i8* %291, align 1, !tbaa !2450
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 21
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 6
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 6
  store i64 %297, i64* %PC
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %299 = load i8, i8* %298, align 1, !tbaa !2449
  %300 = icmp ne i8 %299, 0
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %302 = load i8, i8* %301, align 1, !tbaa !2450
  %303 = icmp ne i8 %302, 0
  %304 = xor i1 %300, %303
  %305 = xor i1 %304, true
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %308 = select i1 %304, i64 %295, i64 %293
  store i64 %308, i64* %307, align 8, !tbaa !2428
  %309 = load i8, i8* %BRANCH_TAKEN
  %310 = icmp eq i8 %309, 1
  br i1 %310, label %block_40298d, label %block_40297e

block_402913:                                     ; preds = %block_4028e0
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 312
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 5
  store i64 %314, i64* %PC
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %312, i64* %315, align 8, !tbaa !2428
  br label %block_402a4b

block_402994:                                     ; preds = %block_4029a0, %block_40298d
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_40298d ], [ %MEMORY.1, %block_4029a0 ]
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 40
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 3
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i32*
  %321 = load i32, i32* %320
  %322 = zext i32 %321 to i64
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = load i32, i32* %EAX
  %324 = zext i32 %323 to i64
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 4
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = sub i32 %323, %330
  %332 = icmp ult i32 %323, %330
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %333, i8* %334, align 1, !tbaa !2432
  %335 = and i32 %331, 255
  %336 = call i32 @llvm.ctpop.i32(i32 %335) #16
  %337 = trunc i32 %336 to i8
  %338 = and i8 %337, 1
  %339 = xor i8 %338, 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %339, i8* %340, align 1, !tbaa !2446
  %341 = xor i32 %330, %323
  %342 = xor i32 %341, %331
  %343 = lshr i32 %342, 4
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %345, i8* %346, align 1, !tbaa !2447
  %347 = icmp eq i32 %331, 0
  %348 = zext i1 %347 to i8
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %348, i8* %349, align 1, !tbaa !2448
  %350 = lshr i32 %331, 31
  %351 = trunc i32 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %351, i8* %352, align 1, !tbaa !2449
  %353 = lshr i32 %323, 31
  %354 = lshr i32 %330, 31
  %355 = xor i32 %354, %353
  %356 = xor i32 %350, %353
  %357 = add nuw nsw i32 %356, %355
  %358 = icmp eq i32 %357, 2
  %359 = zext i1 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %359, i8* %360, align 1, !tbaa !2450
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 86
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 6
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 6
  store i64 %366, i64* %PC
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %368 = load i8, i8* %367, align 1, !tbaa !2449
  %369 = icmp ne i8 %368, 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %371 = load i8, i8* %370, align 1, !tbaa !2450
  %372 = icmp ne i8 %371, 0
  %373 = xor i1 %369, %372
  %374 = xor i1 %373, true
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %377 = select i1 %373, i64 %364, i64 %362
  store i64 %377, i64* %376, align 8, !tbaa !2428
  %378 = load i8, i8* %BRANCH_TAKEN
  %379 = icmp eq i8 %378, 1
  br i1 %379, label %block_4029f0, label %block_4029a0

block_4029f0:                                     ; preds = %block_402994
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 91
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %381, i64* %384, align 8, !tbaa !2428
  br label %block_402a4b

block_40298d:                                     ; preds = %block_40297e, %block_402974
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_402974 ], [ %MEMORY.0, %block_40297e ]
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 40
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 7
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i32*
  store i32 0, i32* %389
  br label %block_402994

block_40292e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 11
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 6
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 6
  store i64 %395, i64* %PC
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %397 = load i8, i8* %396, align 1, !tbaa !2446
  store i8 %397, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %399 = icmp ne i8 %397, 0
  %400 = select i1 %399, i64 %391, i64 %393
  store i64 %400, i64* %398, align 8, !tbaa !2428
  %401 = load i8, i8* %BRANCH_TAKEN
  %402 = icmp eq i8 %401, 1
  br i1 %402, label %block_402939, label %block_402934

block_40294d:                                     ; preds = %block_402943, %block_402939
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_402939 ], [ %MEMORY.4, %block_402943 ]
  %403 = load i64, i64* %RBP
  %404 = sub i64 %403, 44
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 7
  store i64 %406, i64* %PC
  %407 = inttoptr i64 %404 to i32*
  store i32 0, i32* %407
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 48
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to i32*
  store i32 0, i32* %412
  %413 = load i64, i64* %RBP
  %414 = sub i64 %413, 20
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 4
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %414 to i32*
  %418 = load i32, i32* %417
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %419, align 1, !tbaa !2432
  %420 = and i32 %418, 255
  %421 = call i32 @llvm.ctpop.i32(i32 %420) #16
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = xor i8 %423, 1
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %424, i8* %425, align 1, !tbaa !2446
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %426, align 1, !tbaa !2447
  %427 = icmp eq i32 %418, 0
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %428, i8* %429, align 1, !tbaa !2448
  %430 = lshr i32 %418, 31
  %431 = trunc i32 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %431, i8* %432, align 1, !tbaa !2449
  %433 = lshr i32 %418, 31
  %434 = xor i32 %430, %433
  %435 = add nuw nsw i32 %434, %433
  %436 = icmp eq i32 %435, 2
  %437 = zext i1 %436 to i8
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %437, i8* %438, align 1, !tbaa !2450
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 21
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 6
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 6
  store i64 %444, i64* %PC
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %446 = load i8, i8* %445, align 1, !tbaa !2449
  %447 = icmp ne i8 %446, 0
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %449 = load i8, i8* %448, align 1, !tbaa !2450
  %450 = icmp ne i8 %449, 0
  %451 = xor i1 %447, %450
  %452 = xor i1 %451, true
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %455 = select i1 %451, i64 %442, i64 %440
  store i64 %455, i64* %454, align 8, !tbaa !2428
  %456 = load i8, i8* %BRANCH_TAKEN
  %457 = icmp eq i8 %456, 1
  br i1 %457, label %block_402974, label %block_402965

block_40297e:                                     ; preds = %block_402974
  %458 = load i64, i64* %RAX
  %459 = load i32, i32* %EAX
  %460 = zext i32 %459 to i64
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = xor i64 %460, %458
  %464 = trunc i64 %463 to i32
  %465 = and i64 %463, 4294967295
  store i64 %465, i64* %RAX, align 8, !tbaa !2428
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %466, align 1, !tbaa !2432
  %467 = and i32 %464, 255
  %468 = call i32 @llvm.ctpop.i32(i32 %467) #16
  %469 = trunc i32 %468 to i8
  %470 = and i8 %469, 1
  %471 = xor i8 %470, 1
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %471, i8* %472, align 1, !tbaa !2446
  %473 = icmp eq i32 %464, 0
  %474 = zext i1 %473 to i8
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %474, i8* %475, align 1, !tbaa !2448
  %476 = lshr i32 %464, 31
  %477 = trunc i32 %476 to i8
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %477, i8* %478, align 1, !tbaa !2449
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %479, align 1, !tbaa !2450
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %480, align 1, !tbaa !2447
  %481 = load i64, i64* %RAX
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 4
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 3
  store i64 %485, i64* %PC
  %486 = trunc i64 %481 to i32
  %487 = inttoptr i64 %483 to i32*
  %488 = load i32, i32* %487
  %489 = sub i32 %486, %488
  %490 = zext i32 %489 to i64
  store i64 %490, i64* %RAX, align 8, !tbaa !2428
  %491 = icmp ult i32 %486, %488
  %492 = zext i1 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %492, i8* %493, align 1, !tbaa !2432
  %494 = and i32 %489, 255
  %495 = call i32 @llvm.ctpop.i32(i32 %494) #16
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  %498 = xor i8 %497, 1
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %498, i8* %499, align 1, !tbaa !2446
  %500 = xor i32 %488, %486
  %501 = xor i32 %500, %489
  %502 = lshr i32 %501, 4
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %504, i8* %505, align 1, !tbaa !2447
  %506 = icmp eq i32 %489, 0
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %507, i8* %508, align 1, !tbaa !2448
  %509 = lshr i32 %489, 31
  %510 = trunc i32 %509 to i8
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %510, i8* %511, align 1, !tbaa !2449
  %512 = lshr i32 %486, 31
  %513 = lshr i32 %488, 31
  %514 = xor i32 %513, %512
  %515 = xor i32 %509, %512
  %516 = add nuw nsw i32 %515, %514
  %517 = icmp eq i32 %516, 2
  %518 = zext i1 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %518, i8* %519, align 1, !tbaa !2450
  %520 = load i64, i64* %RAX
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 3
  store i64 %522, i64* %PC
  %523 = trunc i64 %520 to i32
  %524 = add i32 1, %523
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = icmp ult i32 %524, %523
  %527 = icmp ult i32 %524, 1
  %528 = or i1 %526, %527
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %529, i8* %530, align 1, !tbaa !2432
  %531 = and i32 %524, 255
  %532 = call i32 @llvm.ctpop.i32(i32 %531) #16
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = xor i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %535, i8* %536, align 1, !tbaa !2446
  %537 = xor i64 1, %520
  %538 = trunc i64 %537 to i32
  %539 = xor i32 %538, %524
  %540 = lshr i32 %539, 4
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %542, i8* %543, align 1, !tbaa !2447
  %544 = icmp eq i32 %524, 0
  %545 = zext i1 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %545, i8* %546, align 1, !tbaa !2448
  %547 = lshr i32 %524, 31
  %548 = trunc i32 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %548, i8* %549, align 1, !tbaa !2449
  %550 = lshr i32 %523, 31
  %551 = xor i32 %547, %550
  %552 = add nuw nsw i32 %551, %547
  %553 = icmp eq i32 %552, 2
  %554 = zext i1 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %554, i8* %555, align 1, !tbaa !2450
  %556 = load i64, i64* %RAX
  %557 = load i64, i64* %RBP
  %558 = sub i64 %557, 36
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = inttoptr i64 %558 to i32*
  %562 = load i32, i32* %561
  %563 = shl i64 %556, 32
  %564 = ashr exact i64 %563, 32
  %565 = sext i32 %562 to i64
  %566 = mul nsw i64 %565, %564
  %567 = trunc i64 %566 to i32
  %568 = and i64 %566, 4294967295
  store i64 %568, i64* %RAX, align 8, !tbaa !2428
  %569 = shl i64 %566, 32
  %570 = ashr exact i64 %569, 32
  %571 = icmp ne i64 %570, %566
  %572 = zext i1 %571 to i8
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %572, i8* %573, align 1, !tbaa !2432
  %574 = and i32 %567, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %580, align 1, !tbaa !2447
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %581, align 1, !tbaa !2448
  %582 = lshr i32 %567, 31
  %583 = trunc i32 %582 to i8
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %583, i8* %584, align 1, !tbaa !2449
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %572, i8* %585, align 1, !tbaa !2450
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 48
  %588 = load i32, i32* %EAX
  %589 = zext i32 %588 to i64
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %587 to i32*
  store i32 %588, i32* %592
  br label %block_40298d

block_402939:                                     ; preds = %block_40292e, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.4 = phi %struct.Memory* [ %251, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %251, %block_40292e ]
  %593 = load i64, i64* %RBP
  %594 = sub i64 %593, 20
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 4
  store i64 %596, i64* %PC
  %597 = inttoptr i64 %594 to i32*
  %598 = load i32, i32* %597
  %599 = sub i32 %598, 1
  %600 = icmp ult i32 %598, 1
  %601 = zext i1 %600 to i8
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %601, i8* %602, align 1, !tbaa !2432
  %603 = and i32 %599, 255
  %604 = call i32 @llvm.ctpop.i32(i32 %603) #16
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %607, i8* %608, align 1, !tbaa !2446
  %609 = xor i32 %598, 1
  %610 = xor i32 %609, %599
  %611 = lshr i32 %610, 4
  %612 = trunc i32 %611 to i8
  %613 = and i8 %612, 1
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %613, i8* %614, align 1, !tbaa !2447
  %615 = icmp eq i32 %599, 0
  %616 = zext i1 %615 to i8
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %616, i8* %617, align 1, !tbaa !2448
  %618 = lshr i32 %599, 31
  %619 = trunc i32 %618 to i8
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %619, i8* %620, align 1, !tbaa !2449
  %621 = lshr i32 %598, 31
  %622 = xor i32 %618, %621
  %623 = add nuw nsw i32 %622, %621
  %624 = icmp eq i32 %623, 2
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %625, i8* %626, align 1, !tbaa !2450
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 16
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 6
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 6
  store i64 %632, i64* %PC
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %634 = load i8, i8* %633, align 1, !tbaa !2448
  %635 = icmp eq i8 %634, 0
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %638 = select i1 %635, i64 %628, i64 %630
  store i64 %638, i64* %637, align 8, !tbaa !2428
  %639 = load i8, i8* %BRANCH_TAKEN
  %640 = icmp eq i8 %639, 1
  br i1 %640, label %block_40294d, label %block_402943

block_402a08:                                     ; preds = %block_4029fc
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 32
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 4
  store i64 %644, i64* %PC
  %645 = inttoptr i64 %642 to i64*
  %646 = load i64, i64* %645
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 40
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i32*
  %652 = load i32, i32* %651
  %653 = sext i32 %652 to i64
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %654 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %655 = load i64, i64* %RAX
  %656 = load i64, i64* %RCX
  %657 = mul i64 %656, 4
  %658 = add i64 %657, %655
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 5
  store i64 %660, i64* %PC
  %661 = inttoptr i64 %658 to float*
  %662 = load float, float* %661
  %663 = bitcast i8* %654 to float*
  store float %662, float* %663, align 1, !tbaa !2453
  %664 = getelementptr inbounds i8, i8* %654, i64 4
  %665 = bitcast i8* %664 to float*
  store float 0.000000e+00, float* %665, align 1, !tbaa !2453
  %666 = getelementptr inbounds i8, i8* %654, i64 8
  %667 = bitcast i8* %666 to float*
  store float 0.000000e+00, float* %667, align 1, !tbaa !2453
  %668 = getelementptr inbounds i8, i8* %654, i64 12
  %669 = bitcast i8* %668 to float*
  store float 0.000000e+00, float* %669, align 1, !tbaa !2453
  %670 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %671 = load i64, i64* %RBP
  %672 = sub i64 %671, 8
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 5
  store i64 %674, i64* %PC
  %675 = inttoptr i64 %672 to float*
  %676 = load float, float* %675
  %677 = bitcast i8* %670 to float*
  store float %676, float* %677, align 1, !tbaa !2453
  %678 = getelementptr inbounds i8, i8* %670, i64 4
  %679 = bitcast i8* %678 to float*
  store float 0.000000e+00, float* %679, align 1, !tbaa !2453
  %680 = getelementptr inbounds i8, i8* %670, i64 8
  %681 = bitcast i8* %680 to float*
  store float 0.000000e+00, float* %681, align 1, !tbaa !2453
  %682 = getelementptr inbounds i8, i8* %670, i64 12
  %683 = bitcast i8* %682 to float*
  store float 0.000000e+00, float* %683, align 1, !tbaa !2453
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 16
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 4
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to i64*
  %689 = load i64, i64* %688
  store i64 %689, i64* %RAX, align 8, !tbaa !2428
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 40
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 4
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  %695 = load i32, i32* %694
  %696 = sext i32 %695 to i64
  store i64 %696, i64* %RCX, align 8, !tbaa !2428
  %697 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %698 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %699 = load i64, i64* %RAX
  %700 = load i64, i64* %RCX
  %701 = mul i64 %700, 4
  %702 = add i64 %701, %699
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 5
  store i64 %704, i64* %PC
  %705 = bitcast i8* %698 to <2 x float>*
  %706 = load <2 x float>, <2 x float>* %705, align 1
  %707 = getelementptr inbounds i8, i8* %698, i64 8
  %708 = bitcast i8* %707 to <2 x i32>*
  %709 = load <2 x i32>, <2 x i32>* %708, align 1
  %710 = inttoptr i64 %702 to float*
  %711 = load float, float* %710
  %712 = extractelement <2 x float> %706, i32 0
  %713 = fmul float %712, %711
  %714 = bitcast i8* %697 to float*
  store float %713, float* %714, align 1, !tbaa !2453
  %715 = bitcast <2 x float> %706 to <2 x i32>
  %716 = extractelement <2 x i32> %715, i32 1
  %717 = getelementptr inbounds i8, i8* %697, i64 4
  %718 = bitcast i8* %717 to i32*
  store i32 %716, i32* %718, align 1, !tbaa !2453
  %719 = extractelement <2 x i32> %709, i32 0
  %720 = getelementptr inbounds i8, i8* %697, i64 8
  %721 = bitcast i8* %720 to i32*
  store i32 %719, i32* %721, align 1, !tbaa !2453
  %722 = extractelement <2 x i32> %709, i32 1
  %723 = getelementptr inbounds i8, i8* %697, i64 12
  %724 = bitcast i8* %723 to i32*
  store i32 %722, i32* %724, align 1, !tbaa !2453
  %725 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %726 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %727 = bitcast %union.vec128_t* %XMM1 to i8*
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 4
  store i64 %729, i64* %PC
  %730 = bitcast i8* %726 to <2 x float>*
  %731 = load <2 x float>, <2 x float>* %730, align 1
  %732 = getelementptr inbounds i8, i8* %726, i64 8
  %733 = bitcast i8* %732 to <2 x i32>*
  %734 = load <2 x i32>, <2 x i32>* %733, align 1
  %735 = bitcast i8* %727 to <2 x float>*
  %736 = load <2 x float>, <2 x float>* %735, align 1
  %737 = extractelement <2 x float> %731, i32 0
  %738 = extractelement <2 x float> %736, i32 0
  %739 = fadd float %737, %738
  %740 = bitcast i8* %725 to float*
  store float %739, float* %740, align 1, !tbaa !2453
  %741 = bitcast <2 x float> %731 to <2 x i32>
  %742 = extractelement <2 x i32> %741, i32 1
  %743 = getelementptr inbounds i8, i8* %725, i64 4
  %744 = bitcast i8* %743 to i32*
  store i32 %742, i32* %744, align 1, !tbaa !2453
  %745 = extractelement <2 x i32> %734, i32 0
  %746 = getelementptr inbounds i8, i8* %725, i64 8
  %747 = bitcast i8* %746 to i32*
  store i32 %745, i32* %747, align 1, !tbaa !2453
  %748 = extractelement <2 x i32> %734, i32 1
  %749 = getelementptr inbounds i8, i8* %725, i64 12
  %750 = bitcast i8* %749 to i32*
  store i32 %748, i32* %750, align 1, !tbaa !2453
  %751 = load i64, i64* %RBP
  %752 = sub i64 %751, 32
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 4
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = load i64, i64* %RBP
  %758 = sub i64 %757, 40
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 4
  store i64 %760, i64* %PC
  %761 = inttoptr i64 %758 to i32*
  %762 = load i32, i32* %761
  %763 = sext i32 %762 to i64
  store i64 %763, i64* %RCX, align 8, !tbaa !2428
  %764 = load i64, i64* %RAX
  %765 = load i64, i64* %RCX
  %766 = mul i64 %765, 4
  %767 = add i64 %766, %764
  %768 = bitcast %union.vec128_t* %XMM0 to i8*
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 5
  store i64 %770, i64* %PC
  %771 = bitcast i8* %768 to <2 x float>*
  %772 = load <2 x float>, <2 x float>* %771, align 1
  %773 = extractelement <2 x float> %772, i32 0
  %774 = inttoptr i64 %767 to float*
  store float %773, float* %774
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 40
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 3
  store i64 %778, i64* %PC
  %779 = inttoptr i64 %776 to i32*
  %780 = load i32, i32* %779
  %781 = zext i32 %780 to i64
  store i64 %781, i64* %RAX, align 8, !tbaa !2428
  %782 = load i64, i64* %RAX
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 3
  store i64 %784, i64* %PC
  %785 = trunc i64 %782 to i32
  %786 = add i32 1, %785
  %787 = zext i32 %786 to i64
  store i64 %787, i64* %RAX, align 8, !tbaa !2428
  %788 = icmp ult i32 %786, %785
  %789 = icmp ult i32 %786, 1
  %790 = or i1 %788, %789
  %791 = zext i1 %790 to i8
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %791, i8* %792, align 1, !tbaa !2432
  %793 = and i32 %786, 255
  %794 = call i32 @llvm.ctpop.i32(i32 %793) #16
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = xor i8 %796, 1
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %797, i8* %798, align 1, !tbaa !2446
  %799 = xor i64 1, %782
  %800 = trunc i64 %799 to i32
  %801 = xor i32 %800, %786
  %802 = lshr i32 %801, 4
  %803 = trunc i32 %802 to i8
  %804 = and i8 %803, 1
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %804, i8* %805, align 1, !tbaa !2447
  %806 = icmp eq i32 %786, 0
  %807 = zext i1 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %807, i8* %808, align 1, !tbaa !2448
  %809 = lshr i32 %786, 31
  %810 = trunc i32 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %810, i8* %811, align 1, !tbaa !2449
  %812 = lshr i32 %785, 31
  %813 = xor i32 %809, %812
  %814 = add nuw nsw i32 %813, %809
  %815 = icmp eq i32 %814, 2
  %816 = zext i1 %815 to i8
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %816, i8* %817, align 1, !tbaa !2450
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 40
  %820 = load i32, i32* %EAX
  %821 = zext i32 %820 to i64
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 3
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %819 to i32*
  store i32 %820, i32* %824
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 69
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  store i64 %828, i64* %PC
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %829, align 8, !tbaa !2428
  br label %block_4029fc

block_402934:                                     ; preds = %block_40292e
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 279
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  store i64 %833, i64* %PC
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %831, i64* %834, align 8, !tbaa !2428
  br label %block_402a4b

block_402a46:                                     ; preds = %block_4029fc
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 5
  store i64 %838, i64* %PC
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %836, i64* %839, align 8, !tbaa !2428
  br label %block_402a4b

block_402a4b:                                     ; preds = %block_402a46, %block_402934, %block_4029f0, %block_402913
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.1, %block_4029f0 ], [ %MEMORY.6, %block_402a46 ], [ %251, %block_402934 ], [ %2, %block_402913 ]
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 1
  store i64 %841, i64* %PC
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %843 = load i64, i64* %842, align 8, !tbaa !2428
  %844 = add i64 %843, 8
  %845 = inttoptr i64 %843 to i64*
  %846 = load i64, i64* %845
  store i64 %846, i64* %RBP, align 8, !tbaa !2428
  store i64 %844, i64* %842, align 8, !tbaa !2428
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 1
  store i64 %848, i64* %PC
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %851 = load i64, i64* %850, align 8, !tbaa !2428
  %852 = inttoptr i64 %851 to i64*
  %853 = load i64, i64* %852
  store i64 %853, i64* %849, align 8, !tbaa !2428
  %854 = add i64 %851, 8
  store i64 %854, i64* %850, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_402965:                                     ; preds = %block_40294d
  %855 = load i64, i64* %RAX
  %856 = load i32, i32* %EAX
  %857 = zext i32 %856 to i64
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 2
  store i64 %859, i64* %PC
  %860 = xor i64 %857, %855
  %861 = trunc i64 %860 to i32
  %862 = and i64 %860, 4294967295
  store i64 %862, i64* %RAX, align 8, !tbaa !2428
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %863, align 1, !tbaa !2432
  %864 = and i32 %861, 255
  %865 = call i32 @llvm.ctpop.i32(i32 %864) #16
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  %868 = xor i8 %867, 1
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %868, i8* %869, align 1, !tbaa !2446
  %870 = icmp eq i32 %861, 0
  %871 = zext i1 %870 to i8
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %871, i8* %872, align 1, !tbaa !2448
  %873 = lshr i32 %861, 31
  %874 = trunc i32 %873 to i8
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %874, i8* %875, align 1, !tbaa !2449
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %876, align 1, !tbaa !2450
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %877, align 1, !tbaa !2447
  %878 = load i64, i64* %RAX
  %879 = load i64, i64* %RBP
  %880 = sub i64 %879, 4
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 3
  store i64 %882, i64* %PC
  %883 = trunc i64 %878 to i32
  %884 = inttoptr i64 %880 to i32*
  %885 = load i32, i32* %884
  %886 = sub i32 %883, %885
  %887 = zext i32 %886 to i64
  store i64 %887, i64* %RAX, align 8, !tbaa !2428
  %888 = icmp ult i32 %883, %885
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %889, i8* %890, align 1, !tbaa !2432
  %891 = and i32 %886, 255
  %892 = call i32 @llvm.ctpop.i32(i32 %891) #16
  %893 = trunc i32 %892 to i8
  %894 = and i8 %893, 1
  %895 = xor i8 %894, 1
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %895, i8* %896, align 1, !tbaa !2446
  %897 = xor i32 %885, %883
  %898 = xor i32 %897, %886
  %899 = lshr i32 %898, 4
  %900 = trunc i32 %899 to i8
  %901 = and i8 %900, 1
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %901, i8* %902, align 1, !tbaa !2447
  %903 = icmp eq i32 %886, 0
  %904 = zext i1 %903 to i8
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %904, i8* %905, align 1, !tbaa !2448
  %906 = lshr i32 %886, 31
  %907 = trunc i32 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %907, i8* %908, align 1, !tbaa !2449
  %909 = lshr i32 %883, 31
  %910 = lshr i32 %885, 31
  %911 = xor i32 %910, %909
  %912 = xor i32 %906, %909
  %913 = add nuw nsw i32 %912, %911
  %914 = icmp eq i32 %913, 2
  %915 = zext i1 %914 to i8
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %915, i8* %916, align 1, !tbaa !2450
  %917 = load i64, i64* %RAX
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 3
  store i64 %919, i64* %PC
  %920 = trunc i64 %917 to i32
  %921 = add i32 1, %920
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RAX, align 8, !tbaa !2428
  %923 = icmp ult i32 %921, %920
  %924 = icmp ult i32 %921, 1
  %925 = or i1 %923, %924
  %926 = zext i1 %925 to i8
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %926, i8* %927, align 1, !tbaa !2432
  %928 = and i32 %921, 255
  %929 = call i32 @llvm.ctpop.i32(i32 %928) #16
  %930 = trunc i32 %929 to i8
  %931 = and i8 %930, 1
  %932 = xor i8 %931, 1
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %932, i8* %933, align 1, !tbaa !2446
  %934 = xor i64 1, %917
  %935 = trunc i64 %934 to i32
  %936 = xor i32 %935, %921
  %937 = lshr i32 %936, 4
  %938 = trunc i32 %937 to i8
  %939 = and i8 %938, 1
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %939, i8* %940, align 1, !tbaa !2447
  %941 = icmp eq i32 %921, 0
  %942 = zext i1 %941 to i8
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %942, i8* %943, align 1, !tbaa !2448
  %944 = lshr i32 %921, 31
  %945 = trunc i32 %944 to i8
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %945, i8* %946, align 1, !tbaa !2449
  %947 = lshr i32 %920, 31
  %948 = xor i32 %944, %947
  %949 = add nuw nsw i32 %948, %944
  %950 = icmp eq i32 %949, 2
  %951 = zext i1 %950 to i8
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %951, i8* %952, align 1, !tbaa !2450
  %953 = load i64, i64* %RAX
  %954 = load i64, i64* %RBP
  %955 = sub i64 %954, 20
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 4
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i32*
  %959 = load i32, i32* %958
  %960 = shl i64 %953, 32
  %961 = ashr exact i64 %960, 32
  %962 = sext i32 %959 to i64
  %963 = mul nsw i64 %962, %961
  %964 = trunc i64 %963 to i32
  %965 = and i64 %963, 4294967295
  store i64 %965, i64* %RAX, align 8, !tbaa !2428
  %966 = shl i64 %963, 32
  %967 = ashr exact i64 %966, 32
  %968 = icmp ne i64 %967, %963
  %969 = zext i1 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %969, i8* %970, align 1, !tbaa !2432
  %971 = and i32 %964, 255
  %972 = call i32 @llvm.ctpop.i32(i32 %971) #16
  %973 = trunc i32 %972 to i8
  %974 = and i8 %973, 1
  %975 = xor i8 %974, 1
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %975, i8* %976, align 1, !tbaa !2446
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %977, align 1, !tbaa !2447
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %978, align 1, !tbaa !2448
  %979 = lshr i32 %964, 31
  %980 = trunc i32 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %980, i8* %981, align 1, !tbaa !2449
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %969, i8* %982, align 1, !tbaa !2450
  %983 = load i64, i64* %RBP
  %984 = sub i64 %983, 44
  %985 = load i32, i32* %EAX
  %986 = zext i32 %985 to i64
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 3
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %984 to i32*
  store i32 %985, i32* %989
  br label %block_402974

block_402943:                                     ; preds = %block_402939
  %990 = load i64, i64* %RBP
  %991 = sub i64 %990, 36
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 4
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i32*
  %995 = load i32, i32* %994
  %996 = sub i32 %995, 1
  %997 = icmp ult i32 %995, 1
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %998, i8* %999, align 1, !tbaa !2432
  %1000 = and i32 %996, 255
  %1001 = call i32 @llvm.ctpop.i32(i32 %1000) #16
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1004, i8* %1005, align 1, !tbaa !2446
  %1006 = xor i32 %995, 1
  %1007 = xor i32 %1006, %996
  %1008 = lshr i32 %1007, 4
  %1009 = trunc i32 %1008 to i8
  %1010 = and i8 %1009, 1
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1010, i8* %1011, align 1, !tbaa !2447
  %1012 = icmp eq i32 %996, 0
  %1013 = zext i1 %1012 to i8
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1013, i8* %1014, align 1, !tbaa !2448
  %1015 = lshr i32 %996, 31
  %1016 = trunc i32 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1016, i8* %1017, align 1, !tbaa !2449
  %1018 = lshr i32 %995, 31
  %1019 = xor i32 %1015, %1018
  %1020 = add nuw nsw i32 %1019, %1018
  %1021 = icmp eq i32 %1020, 2
  %1022 = zext i1 %1021 to i8
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1022, i8* %1023, align 1, !tbaa !2450
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 174
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 6
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 6
  store i64 %1029, i64* %PC
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1031 = load i8, i8* %1030, align 1, !tbaa !2448
  store i8 %1031, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1033 = icmp ne i8 %1031, 0
  %1034 = select i1 %1033, i64 %1025, i64 %1027
  store i64 %1034, i64* %1032, align 8, !tbaa !2428
  %1035 = load i8, i8* %BRANCH_TAKEN
  %1036 = icmp eq i8 %1035, 1
  br i1 %1036, label %block_4029f5, label %block_40294d

block_4029fc:                                     ; preds = %block_402a08, %block_4029f5
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.4, %block_4029f5 ], [ %MEMORY.6, %block_402a08 ]
  %1037 = load i64, i64* %RBP
  %1038 = sub i64 %1037, 40
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 3
  store i64 %1040, i64* %PC
  %1041 = inttoptr i64 %1038 to i32*
  %1042 = load i32, i32* %1041
  %1043 = zext i32 %1042 to i64
  store i64 %1043, i64* %RAX, align 8, !tbaa !2428
  %1044 = load i32, i32* %EAX
  %1045 = zext i32 %1044 to i64
  %1046 = load i64, i64* %RBP
  %1047 = sub i64 %1046, 4
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 3
  store i64 %1049, i64* %PC
  %1050 = inttoptr i64 %1047 to i32*
  %1051 = load i32, i32* %1050
  %1052 = sub i32 %1044, %1051
  %1053 = icmp ult i32 %1044, %1051
  %1054 = zext i1 %1053 to i8
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1054, i8* %1055, align 1, !tbaa !2432
  %1056 = and i32 %1052, 255
  %1057 = call i32 @llvm.ctpop.i32(i32 %1056) #16
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  %1060 = xor i8 %1059, 1
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1060, i8* %1061, align 1, !tbaa !2446
  %1062 = xor i32 %1051, %1044
  %1063 = xor i32 %1062, %1052
  %1064 = lshr i32 %1063, 4
  %1065 = trunc i32 %1064 to i8
  %1066 = and i8 %1065, 1
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1066, i8* %1067, align 1, !tbaa !2447
  %1068 = icmp eq i32 %1052, 0
  %1069 = zext i1 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1069, i8* %1070, align 1, !tbaa !2448
  %1071 = lshr i32 %1052, 31
  %1072 = trunc i32 %1071 to i8
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1072, i8* %1073, align 1, !tbaa !2449
  %1074 = lshr i32 %1044, 31
  %1075 = lshr i32 %1051, 31
  %1076 = xor i32 %1075, %1074
  %1077 = xor i32 %1071, %1074
  %1078 = add nuw nsw i32 %1077, %1076
  %1079 = icmp eq i32 %1078, 2
  %1080 = zext i1 %1079 to i8
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1080, i8* %1081, align 1, !tbaa !2450
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 68
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 6
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 6
  store i64 %1087, i64* %PC
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1089 = load i8, i8* %1088, align 1, !tbaa !2449
  %1090 = icmp ne i8 %1089, 0
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1092 = load i8, i8* %1091, align 1, !tbaa !2450
  %1093 = icmp ne i8 %1092, 0
  %1094 = xor i1 %1090, %1093
  %1095 = xor i1 %1094, true
  %1096 = zext i1 %1095 to i8
  store i8 %1096, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1098 = select i1 %1094, i64 %1085, i64 %1083
  store i64 %1098, i64* %1097, align 8, !tbaa !2428
  %1099 = load i8, i8* %BRANCH_TAKEN
  %1100 = icmp eq i8 %1099, 1
  br i1 %1100, label %block_402a46, label %block_402a08

block_4029a0:                                     ; preds = %block_402994
  %1101 = load i64, i64* %RBP
  %1102 = sub i64 %1101, 32
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 4
  store i64 %1104, i64* %PC
  %1105 = inttoptr i64 %1102 to i64*
  %1106 = load i64, i64* %1105
  store i64 %1106, i64* %RAX, align 8, !tbaa !2428
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 48
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 4
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  %1112 = load i32, i32* %1111
  %1113 = sext i32 %1112 to i64
  store i64 %1113, i64* %RCX, align 8, !tbaa !2428
  %1114 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1115 = load i64, i64* %RAX
  %1116 = load i64, i64* %RCX
  %1117 = mul i64 %1116, 4
  %1118 = add i64 %1117, %1115
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 5
  store i64 %1120, i64* %PC
  %1121 = inttoptr i64 %1118 to float*
  %1122 = load float, float* %1121
  %1123 = bitcast i8* %1114 to float*
  store float %1122, float* %1123, align 1, !tbaa !2453
  %1124 = getelementptr inbounds i8, i8* %1114, i64 4
  %1125 = bitcast i8* %1124 to float*
  store float 0.000000e+00, float* %1125, align 1, !tbaa !2453
  %1126 = getelementptr inbounds i8, i8* %1114, i64 8
  %1127 = bitcast i8* %1126 to float*
  store float 0.000000e+00, float* %1127, align 1, !tbaa !2453
  %1128 = getelementptr inbounds i8, i8* %1114, i64 12
  %1129 = bitcast i8* %1128 to float*
  store float 0.000000e+00, float* %1129, align 1, !tbaa !2453
  %1130 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 8
  %1133 = load i64, i64* %PC
  %1134 = add i64 %1133, 5
  store i64 %1134, i64* %PC
  %1135 = inttoptr i64 %1132 to float*
  %1136 = load float, float* %1135
  %1137 = bitcast i8* %1130 to float*
  store float %1136, float* %1137, align 1, !tbaa !2453
  %1138 = getelementptr inbounds i8, i8* %1130, i64 4
  %1139 = bitcast i8* %1138 to float*
  store float 0.000000e+00, float* %1139, align 1, !tbaa !2453
  %1140 = getelementptr inbounds i8, i8* %1130, i64 8
  %1141 = bitcast i8* %1140 to float*
  store float 0.000000e+00, float* %1141, align 1, !tbaa !2453
  %1142 = getelementptr inbounds i8, i8* %1130, i64 12
  %1143 = bitcast i8* %1142 to float*
  store float 0.000000e+00, float* %1143, align 1, !tbaa !2453
  %1144 = load i64, i64* %RBP
  %1145 = sub i64 %1144, 16
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 4
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 44
  %1152 = load i64, i64* %PC
  %1153 = add i64 %1152, 4
  store i64 %1153, i64* %PC
  %1154 = inttoptr i64 %1151 to i32*
  %1155 = load i32, i32* %1154
  %1156 = sext i32 %1155 to i64
  store i64 %1156, i64* %RCX, align 8, !tbaa !2428
  %1157 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1158 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1159 = load i64, i64* %RAX
  %1160 = load i64, i64* %RCX
  %1161 = mul i64 %1160, 4
  %1162 = add i64 %1161, %1159
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 5
  store i64 %1164, i64* %PC
  %1165 = bitcast i8* %1158 to <2 x float>*
  %1166 = load <2 x float>, <2 x float>* %1165, align 1
  %1167 = getelementptr inbounds i8, i8* %1158, i64 8
  %1168 = bitcast i8* %1167 to <2 x i32>*
  %1169 = load <2 x i32>, <2 x i32>* %1168, align 1
  %1170 = inttoptr i64 %1162 to float*
  %1171 = load float, float* %1170
  %1172 = extractelement <2 x float> %1166, i32 0
  %1173 = fmul float %1172, %1171
  %1174 = bitcast i8* %1157 to float*
  store float %1173, float* %1174, align 1, !tbaa !2453
  %1175 = bitcast <2 x float> %1166 to <2 x i32>
  %1176 = extractelement <2 x i32> %1175, i32 1
  %1177 = getelementptr inbounds i8, i8* %1157, i64 4
  %1178 = bitcast i8* %1177 to i32*
  store i32 %1176, i32* %1178, align 1, !tbaa !2453
  %1179 = extractelement <2 x i32> %1169, i32 0
  %1180 = getelementptr inbounds i8, i8* %1157, i64 8
  %1181 = bitcast i8* %1180 to i32*
  store i32 %1179, i32* %1181, align 1, !tbaa !2453
  %1182 = extractelement <2 x i32> %1169, i32 1
  %1183 = getelementptr inbounds i8, i8* %1157, i64 12
  %1184 = bitcast i8* %1183 to i32*
  store i32 %1182, i32* %1184, align 1, !tbaa !2453
  %1185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1186 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1187 = bitcast %union.vec128_t* %XMM1 to i8*
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC
  %1190 = bitcast i8* %1186 to <2 x float>*
  %1191 = load <2 x float>, <2 x float>* %1190, align 1
  %1192 = getelementptr inbounds i8, i8* %1186, i64 8
  %1193 = bitcast i8* %1192 to <2 x i32>*
  %1194 = load <2 x i32>, <2 x i32>* %1193, align 1
  %1195 = bitcast i8* %1187 to <2 x float>*
  %1196 = load <2 x float>, <2 x float>* %1195, align 1
  %1197 = extractelement <2 x float> %1191, i32 0
  %1198 = extractelement <2 x float> %1196, i32 0
  %1199 = fadd float %1197, %1198
  %1200 = bitcast i8* %1185 to float*
  store float %1199, float* %1200, align 1, !tbaa !2453
  %1201 = bitcast <2 x float> %1191 to <2 x i32>
  %1202 = extractelement <2 x i32> %1201, i32 1
  %1203 = getelementptr inbounds i8, i8* %1185, i64 4
  %1204 = bitcast i8* %1203 to i32*
  store i32 %1202, i32* %1204, align 1, !tbaa !2453
  %1205 = extractelement <2 x i32> %1194, i32 0
  %1206 = getelementptr inbounds i8, i8* %1185, i64 8
  %1207 = bitcast i8* %1206 to i32*
  store i32 %1205, i32* %1207, align 1, !tbaa !2453
  %1208 = extractelement <2 x i32> %1194, i32 1
  %1209 = getelementptr inbounds i8, i8* %1185, i64 12
  %1210 = bitcast i8* %1209 to i32*
  store i32 %1208, i32* %1210, align 1, !tbaa !2453
  %1211 = load i64, i64* %RBP
  %1212 = sub i64 %1211, 32
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 4
  store i64 %1214, i64* %PC
  %1215 = inttoptr i64 %1212 to i64*
  %1216 = load i64, i64* %1215
  store i64 %1216, i64* %RAX, align 8, !tbaa !2428
  %1217 = load i64, i64* %RBP
  %1218 = sub i64 %1217, 48
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 4
  store i64 %1220, i64* %PC
  %1221 = inttoptr i64 %1218 to i32*
  %1222 = load i32, i32* %1221
  %1223 = sext i32 %1222 to i64
  store i64 %1223, i64* %RCX, align 8, !tbaa !2428
  %1224 = load i64, i64* %RAX
  %1225 = load i64, i64* %RCX
  %1226 = mul i64 %1225, 4
  %1227 = add i64 %1226, %1224
  %1228 = bitcast %union.vec128_t* %XMM0 to i8*
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 5
  store i64 %1230, i64* %PC
  %1231 = bitcast i8* %1228 to <2 x float>*
  %1232 = load <2 x float>, <2 x float>* %1231, align 1
  %1233 = extractelement <2 x float> %1232, i32 0
  %1234 = inttoptr i64 %1227 to float*
  store float %1233, float* %1234
  %1235 = load i64, i64* %RBP
  %1236 = sub i64 %1235, 44
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 3
  store i64 %1238, i64* %PC
  %1239 = inttoptr i64 %1236 to i32*
  %1240 = load i32, i32* %1239
  %1241 = zext i32 %1240 to i64
  store i64 %1241, i64* %RDX, align 8, !tbaa !2428
  %1242 = load i64, i64* %RDX
  %1243 = load i64, i64* %RBP
  %1244 = sub i64 %1243, 20
  %1245 = load i64, i64* %PC
  %1246 = add i64 %1245, 3
  store i64 %1246, i64* %PC
  %1247 = trunc i64 %1242 to i32
  %1248 = inttoptr i64 %1244 to i32*
  %1249 = load i32, i32* %1248
  %1250 = add i32 %1249, %1247
  %1251 = zext i32 %1250 to i64
  store i64 %1251, i64* %RDX, align 8, !tbaa !2428
  %1252 = icmp ult i32 %1250, %1247
  %1253 = icmp ult i32 %1250, %1249
  %1254 = or i1 %1252, %1253
  %1255 = zext i1 %1254 to i8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1255, i8* %1256, align 1, !tbaa !2432
  %1257 = and i32 %1250, 255
  %1258 = call i32 @llvm.ctpop.i32(i32 %1257) #16
  %1259 = trunc i32 %1258 to i8
  %1260 = and i8 %1259, 1
  %1261 = xor i8 %1260, 1
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1261, i8* %1262, align 1, !tbaa !2446
  %1263 = xor i32 %1249, %1247
  %1264 = xor i32 %1263, %1250
  %1265 = lshr i32 %1264, 4
  %1266 = trunc i32 %1265 to i8
  %1267 = and i8 %1266, 1
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1267, i8* %1268, align 1, !tbaa !2447
  %1269 = icmp eq i32 %1250, 0
  %1270 = zext i1 %1269 to i8
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1270, i8* %1271, align 1, !tbaa !2448
  %1272 = lshr i32 %1250, 31
  %1273 = trunc i32 %1272 to i8
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1273, i8* %1274, align 1, !tbaa !2449
  %1275 = lshr i32 %1247, 31
  %1276 = lshr i32 %1249, 31
  %1277 = xor i32 %1272, %1275
  %1278 = xor i32 %1272, %1276
  %1279 = add nuw nsw i32 %1277, %1278
  %1280 = icmp eq i32 %1279, 2
  %1281 = zext i1 %1280 to i8
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1281, i8* %1282, align 1, !tbaa !2450
  %1283 = load i64, i64* %RBP
  %1284 = sub i64 %1283, 44
  %1285 = load i32, i32* %EDX
  %1286 = zext i32 %1285 to i64
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 3
  store i64 %1288, i64* %PC
  %1289 = inttoptr i64 %1284 to i32*
  store i32 %1285, i32* %1289
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 48
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 3
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1291 to i32*
  %1295 = load i32, i32* %1294
  %1296 = zext i32 %1295 to i64
  store i64 %1296, i64* %RDX, align 8, !tbaa !2428
  %1297 = load i64, i64* %RDX
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 36
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 3
  store i64 %1301, i64* %PC
  %1302 = trunc i64 %1297 to i32
  %1303 = inttoptr i64 %1299 to i32*
  %1304 = load i32, i32* %1303
  %1305 = add i32 %1304, %1302
  %1306 = zext i32 %1305 to i64
  store i64 %1306, i64* %RDX, align 8, !tbaa !2428
  %1307 = icmp ult i32 %1305, %1302
  %1308 = icmp ult i32 %1305, %1304
  %1309 = or i1 %1307, %1308
  %1310 = zext i1 %1309 to i8
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1310, i8* %1311, align 1, !tbaa !2432
  %1312 = and i32 %1305, 255
  %1313 = call i32 @llvm.ctpop.i32(i32 %1312) #16
  %1314 = trunc i32 %1313 to i8
  %1315 = and i8 %1314, 1
  %1316 = xor i8 %1315, 1
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1316, i8* %1317, align 1, !tbaa !2446
  %1318 = xor i32 %1304, %1302
  %1319 = xor i32 %1318, %1305
  %1320 = lshr i32 %1319, 4
  %1321 = trunc i32 %1320 to i8
  %1322 = and i8 %1321, 1
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1322, i8* %1323, align 1, !tbaa !2447
  %1324 = icmp eq i32 %1305, 0
  %1325 = zext i1 %1324 to i8
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1325, i8* %1326, align 1, !tbaa !2448
  %1327 = lshr i32 %1305, 31
  %1328 = trunc i32 %1327 to i8
  %1329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1328, i8* %1329, align 1, !tbaa !2449
  %1330 = lshr i32 %1302, 31
  %1331 = lshr i32 %1304, 31
  %1332 = xor i32 %1327, %1330
  %1333 = xor i32 %1327, %1331
  %1334 = add nuw nsw i32 %1332, %1333
  %1335 = icmp eq i32 %1334, 2
  %1336 = zext i1 %1335 to i8
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1336, i8* %1337, align 1, !tbaa !2450
  %1338 = load i64, i64* %RBP
  %1339 = sub i64 %1338, 48
  %1340 = load i32, i32* %EDX
  %1341 = zext i32 %1340 to i64
  %1342 = load i64, i64* %PC
  %1343 = add i64 %1342, 3
  store i64 %1343, i64* %PC
  %1344 = inttoptr i64 %1339 to i32*
  store i32 %1340, i32* %1344
  %1345 = load i64, i64* %RBP
  %1346 = sub i64 %1345, 40
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 3
  store i64 %1348, i64* %PC
  %1349 = inttoptr i64 %1346 to i32*
  %1350 = load i32, i32* %1349
  %1351 = zext i32 %1350 to i64
  store i64 %1351, i64* %RAX, align 8, !tbaa !2428
  %1352 = load i64, i64* %RAX
  %1353 = load i64, i64* %PC
  %1354 = add i64 %1353, 3
  store i64 %1354, i64* %PC
  %1355 = trunc i64 %1352 to i32
  %1356 = add i32 1, %1355
  %1357 = zext i32 %1356 to i64
  store i64 %1357, i64* %RAX, align 8, !tbaa !2428
  %1358 = icmp ult i32 %1356, %1355
  %1359 = icmp ult i32 %1356, 1
  %1360 = or i1 %1358, %1359
  %1361 = zext i1 %1360 to i8
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1361, i8* %1362, align 1, !tbaa !2432
  %1363 = and i32 %1356, 255
  %1364 = call i32 @llvm.ctpop.i32(i32 %1363) #16
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1367, i8* %1368, align 1, !tbaa !2446
  %1369 = xor i64 1, %1352
  %1370 = trunc i64 %1369 to i32
  %1371 = xor i32 %1370, %1356
  %1372 = lshr i32 %1371, 4
  %1373 = trunc i32 %1372 to i8
  %1374 = and i8 %1373, 1
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1374, i8* %1375, align 1, !tbaa !2447
  %1376 = icmp eq i32 %1356, 0
  %1377 = zext i1 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1377, i8* %1378, align 1, !tbaa !2448
  %1379 = lshr i32 %1356, 31
  %1380 = trunc i32 %1379 to i8
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1380, i8* %1381, align 1, !tbaa !2449
  %1382 = lshr i32 %1355, 31
  %1383 = xor i32 %1379, %1382
  %1384 = add nuw nsw i32 %1383, %1379
  %1385 = icmp eq i32 %1384, 2
  %1386 = zext i1 %1385 to i8
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1386, i8* %1387, align 1, !tbaa !2450
  %1388 = load i64, i64* %RBP
  %1389 = sub i64 %1388, 40
  %1390 = load i32, i32* %EAX
  %1391 = zext i32 %1390 to i64
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 3
  store i64 %1393, i64* %PC
  %1394 = inttoptr i64 %1389 to i32*
  store i32 %1390, i32* %1394
  %1395 = load i64, i64* %PC
  %1396 = sub i64 %1395, 87
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 5
  store i64 %1398, i64* %PC
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1396, i64* %1399, align 8, !tbaa !2428
  br label %block_402994
}

; Function Attrs: noinline
define %struct.Memory* @sub_402010_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402010:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 19
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R9 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %46 to %"class.std::bitset"*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %48 to %"class.std::bitset"*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %50 to %union.vec128_t*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %52 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %51, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %52 to %union.vec128_t*
  %53 = load i64, i64* %RBP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 1
  store i64 %55, i64* %PC
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = add i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  store i64 %53, i64* %59
  store i64 %58, i64* %56, align 8, !tbaa !2428
  %60 = load i64, i64* %RSP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 5
  store i64 %64, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %65 = load i64, i64* %RBP
  %66 = sub i64 %65, 4
  %67 = load i32, i32* %EDI
  %68 = zext i32 %67 to i64
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %66 to i32*
  store i32 %67, i32* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 16
  %74 = load i64, i64* %RSI
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %73 to i64*
  store i64 %74, i64* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 20
  %80 = load i32, i32* %EDX
  %81 = zext i32 %80 to i64
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %79 to i32*
  store i32 %80, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = load i32, i32* %ECX
  %88 = zext i32 %87 to i64
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 3
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 32
  %94 = load i64, i64* %R8
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %93 to i64*
  store i64 %94, i64* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 40
  %100 = load i64, i64* %R9
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 20
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 56
  %113 = load i32, i32* %EAX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i32, i32* %ECX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  store i64 %121, i64* %PC
  %122 = and i64 %119, 4294967295
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %127 = bitcast %union.anon* %126 to i32*
  %128 = load i32, i32* %127, align 8, !tbaa !2452
  %129 = sext i32 %128 to i64
  %130 = lshr i64 %129, 32
  store i64 %130, i64* %125, align 8, !tbaa !2428
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 56
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  %136 = load i32, i32* %135
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RCX, align 8, !tbaa !2428
  %138 = load i32, i32* %ECX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 2
  store i64 %141, i64* %PC
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %143 = bitcast %union.anon* %142 to i32*
  %144 = load i32, i32* %143, align 8, !tbaa !2452
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %147 = bitcast %union.anon* %146 to i32*
  %148 = load i32, i32* %147, align 8, !tbaa !2452
  %149 = zext i32 %148 to i64
  %150 = shl i64 %139, 32
  %151 = ashr exact i64 %150, 32
  %152 = shl nuw i64 %149, 32
  %153 = or i64 %152, %145
  %154 = sdiv i64 %153, %151
  %155 = shl i64 %154, 32
  %156 = ashr exact i64 %155, 32
  %157 = icmp eq i64 %154, %156
  br i1 %157, label %162, label %158

; <label>:158:                                    ; preds = %block_402010
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %160 = load i64, i64* %159, align 8, !tbaa !2428
  %161 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %160, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:162:                                    ; preds = %block_402010
  %163 = srem i64 %153, %151
  %164 = getelementptr inbounds %union.anon, %union.anon* %142, i64 0, i32 0
  %165 = and i64 %154, 4294967295
  store i64 %165, i64* %164, align 8, !tbaa !2428
  %166 = getelementptr inbounds %union.anon, %union.anon* %146, i64 0, i32 0
  %167 = and i64 %163, 4294967295
  store i64 %167, i64* %166, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %168, align 1, !tbaa !2432
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %169, align 1, !tbaa !2446
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2447
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %171, align 1, !tbaa !2448
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %172, align 1, !tbaa !2449
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %173, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %158, %162
  %174 = phi %struct.Memory* [ %161, %158 ], [ %2, %162 ]
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 44
  %177 = load i32, i32* %EDX
  %178 = zext i32 %177 to i64
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 3
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %176 to i32*
  store i32 %177, i32* %181
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 44
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = sub i32 %187, 1
  %189 = icmp ult i32 %187, 1
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %190, i8* %191, align 1, !tbaa !2432
  %192 = and i32 %188, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = xor i32 %187, 1
  %199 = xor i32 %198, %188
  %200 = lshr i32 %199, 4
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %202, i8* %203, align 1, !tbaa !2447
  %204 = icmp eq i32 %188, 0
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %205, i8* %206, align 1, !tbaa !2448
  %207 = lshr i32 %188, 31
  %208 = trunc i32 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %208, i8* %209, align 1, !tbaa !2449
  %210 = lshr i32 %187, 31
  %211 = xor i32 %207, %210
  %212 = add nuw nsw i32 %211, %210
  %213 = icmp eq i32 %212, 2
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %214, i8* %215, align 1, !tbaa !2450
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 118
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 6
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  store i64 %221, i64* %PC
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %223 = load i8, i8* %222, align 1, !tbaa !2449
  %224 = icmp ne i8 %223, 0
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %226 = load i8, i8* %225, align 1, !tbaa !2450
  %227 = icmp ne i8 %226, 0
  %228 = xor i1 %224, %227
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %231 = select i1 %228, i64 %217, i64 %219
  store i64 %231, i64* %230, align 8, !tbaa !2428
  %232 = load i8, i8* %BRANCH_TAKEN
  %233 = icmp eq i8 %232, 1
  br i1 %233, label %block_4020b9, label %block_402049

block_4020d9:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 44
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i32*
  %239 = load i32, i32* %238
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 3
  store i64 %243, i64* %PC
  %244 = trunc i64 %241 to i32
  %245 = sub i32 %244, 1
  %246 = zext i32 %245 to i64
  store i64 %246, i64* %RAX, align 8, !tbaa !2428
  %247 = icmp ult i32 %244, 1
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %248, i8* %249, align 1, !tbaa !2432
  %250 = and i32 %245, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i64 1, %241
  %257 = trunc i64 %256 to i32
  %258 = xor i32 %257, %245
  %259 = lshr i32 %258, 4
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %261, i8* %262, align 1, !tbaa !2447
  %263 = icmp eq i32 %245, 0
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %264, i8* %265, align 1, !tbaa !2448
  %266 = lshr i32 %245, 31
  %267 = trunc i32 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %267, i8* %268, align 1, !tbaa !2449
  %269 = lshr i32 %244, 31
  %270 = xor i32 %266, %269
  %271 = add nuw nsw i32 %270, %269
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %273, i8* %274, align 1, !tbaa !2450
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 44
  %277 = load i32, i32* %EAX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 3
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %276 to i32*
  store i32 %277, i32* %281
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 48
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 7
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %283 to i32*
  store i32 0, i32* %286
  br label %block_4020e9

block_402065:                                     ; preds = %block_402059
  %287 = load i64, i64* %RBP
  %288 = sub i64 %287, 16
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 48
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i32*
  %298 = load i32, i32* %297
  %299 = sext i32 %298 to i64
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %301 = load i64, i64* %RAX
  %302 = load i64, i64* %RCX
  %303 = mul i64 %302, 4
  %304 = add i64 %303, %301
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 5
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to float*
  %308 = load float, float* %307
  %309 = bitcast i8* %300 to float*
  store float %308, float* %309, align 1, !tbaa !2453
  %310 = getelementptr inbounds i8, i8* %300, i64 4
  %311 = bitcast i8* %310 to float*
  store float 0.000000e+00, float* %311, align 1, !tbaa !2453
  %312 = getelementptr inbounds i8, i8* %300, i64 8
  %313 = bitcast i8* %312 to float*
  store float 0.000000e+00, float* %313, align 1, !tbaa !2453
  %314 = getelementptr inbounds i8, i8* %300, i64 12
  %315 = bitcast i8* %314 to float*
  store float 0.000000e+00, float* %315, align 1, !tbaa !2453
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 32
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 4
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 44
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 4
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i32*
  %327 = load i32, i32* %326
  %328 = sext i32 %327 to i64
  store i64 %328, i64* %RCX, align 8, !tbaa !2428
  %329 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %330 = load i64, i64* %RAX
  %331 = load i64, i64* %RCX
  %332 = mul i64 %331, 4
  %333 = add i64 %332, %330
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = inttoptr i64 %333 to float*
  %337 = load float, float* %336
  %338 = bitcast i8* %329 to float*
  store float %337, float* %338, align 1, !tbaa !2453
  %339 = getelementptr inbounds i8, i8* %329, i64 4
  %340 = bitcast i8* %339 to float*
  store float 0.000000e+00, float* %340, align 1, !tbaa !2453
  %341 = getelementptr inbounds i8, i8* %329, i64 8
  %342 = bitcast i8* %341 to float*
  store float 0.000000e+00, float* %342, align 1, !tbaa !2453
  %343 = getelementptr inbounds i8, i8* %329, i64 12
  %344 = bitcast i8* %343 to float*
  store float 0.000000e+00, float* %344, align 1, !tbaa !2453
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 40
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 24
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 3
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %352 to i32*
  %356 = load i32, i32* %355
  %357 = zext i32 %356 to i64
  store i64 %357, i64* %RDX, align 8, !tbaa !2428
  %358 = load i64, i64* %RDX
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 44
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i32*
  %364 = load i32, i32* %363
  %365 = shl i64 %358, 32
  %366 = ashr exact i64 %365, 32
  %367 = sext i32 %364 to i64
  %368 = mul nsw i64 %367, %366
  %369 = trunc i64 %368 to i32
  %370 = and i64 %368, 4294967295
  store i64 %370, i64* %RDX, align 8, !tbaa !2428
  %371 = shl i64 %368, 32
  %372 = ashr exact i64 %371, 32
  %373 = icmp ne i64 %372, %368
  %374 = zext i1 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %374, i8* %375, align 1, !tbaa !2432
  %376 = and i32 %369, 255
  %377 = call i32 @llvm.ctpop.i32(i32 %376) #16
  %378 = trunc i32 %377 to i8
  %379 = and i8 %378, 1
  %380 = xor i8 %379, 1
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %380, i8* %381, align 1, !tbaa !2446
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %382, align 1, !tbaa !2447
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %383, align 1, !tbaa !2448
  %384 = lshr i32 %369, 31
  %385 = trunc i32 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %385, i8* %386, align 1, !tbaa !2449
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %374, i8* %387, align 1, !tbaa !2450
  %388 = load i64, i64* %RDX
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 48
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = trunc i64 %388 to i32
  %394 = inttoptr i64 %390 to i32*
  %395 = load i32, i32* %394
  %396 = add i32 %395, %393
  %397 = zext i32 %396 to i64
  store i64 %397, i64* %RDX, align 8, !tbaa !2428
  %398 = icmp ult i32 %396, %393
  %399 = icmp ult i32 %396, %395
  %400 = or i1 %398, %399
  %401 = zext i1 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %401, i8* %402, align 1, !tbaa !2432
  %403 = and i32 %396, 255
  %404 = call i32 @llvm.ctpop.i32(i32 %403) #16
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %407, i8* %408, align 1, !tbaa !2446
  %409 = xor i32 %395, %393
  %410 = xor i32 %409, %396
  %411 = lshr i32 %410, 4
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %413, i8* %414, align 1, !tbaa !2447
  %415 = icmp eq i32 %396, 0
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %416, i8* %417, align 1, !tbaa !2448
  %418 = lshr i32 %396, 31
  %419 = trunc i32 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %419, i8* %420, align 1, !tbaa !2449
  %421 = lshr i32 %393, 31
  %422 = lshr i32 %395, 31
  %423 = xor i32 %418, %421
  %424 = xor i32 %418, %422
  %425 = add nuw nsw i32 %423, %424
  %426 = icmp eq i32 %425, 2
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %427, i8* %428, align 1, !tbaa !2450
  %429 = load i32, i32* %EDX
  %430 = zext i32 %429 to i64
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC
  %433 = shl i64 %430, 32
  %434 = ashr exact i64 %433, 32
  store i64 %434, i64* %RCX, align 8, !tbaa !2428
  %435 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %436 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %437 = load i64, i64* %RAX
  %438 = load i64, i64* %RCX
  %439 = mul i64 %438, 4
  %440 = add i64 %439, %437
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 5
  store i64 %442, i64* %PC
  %443 = bitcast i8* %436 to <2 x float>*
  %444 = load <2 x float>, <2 x float>* %443, align 1
  %445 = getelementptr inbounds i8, i8* %436, i64 8
  %446 = bitcast i8* %445 to <2 x i32>*
  %447 = load <2 x i32>, <2 x i32>* %446, align 1
  %448 = inttoptr i64 %440 to float*
  %449 = load float, float* %448
  %450 = extractelement <2 x float> %444, i32 0
  %451 = fmul float %450, %449
  %452 = bitcast i8* %435 to float*
  store float %451, float* %452, align 1, !tbaa !2453
  %453 = bitcast <2 x float> %444 to <2 x i32>
  %454 = extractelement <2 x i32> %453, i32 1
  %455 = getelementptr inbounds i8, i8* %435, i64 4
  %456 = bitcast i8* %455 to i32*
  store i32 %454, i32* %456, align 1, !tbaa !2453
  %457 = extractelement <2 x i32> %447, i32 0
  %458 = getelementptr inbounds i8, i8* %435, i64 8
  %459 = bitcast i8* %458 to i32*
  store i32 %457, i32* %459, align 1, !tbaa !2453
  %460 = extractelement <2 x i32> %447, i32 1
  %461 = getelementptr inbounds i8, i8* %435, i64 12
  %462 = bitcast i8* %461 to i32*
  store i32 %460, i32* %462, align 1, !tbaa !2453
  %463 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %464 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %465 = bitcast %union.vec128_t* %XMM1 to i8*
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = bitcast i8* %464 to <2 x float>*
  %469 = load <2 x float>, <2 x float>* %468, align 1
  %470 = getelementptr inbounds i8, i8* %464, i64 8
  %471 = bitcast i8* %470 to <2 x i32>*
  %472 = load <2 x i32>, <2 x i32>* %471, align 1
  %473 = bitcast i8* %465 to <2 x float>*
  %474 = load <2 x float>, <2 x float>* %473, align 1
  %475 = extractelement <2 x float> %469, i32 0
  %476 = extractelement <2 x float> %474, i32 0
  %477 = fadd float %475, %476
  %478 = bitcast i8* %463 to float*
  store float %477, float* %478, align 1, !tbaa !2453
  %479 = bitcast <2 x float> %469 to <2 x i32>
  %480 = extractelement <2 x i32> %479, i32 1
  %481 = getelementptr inbounds i8, i8* %463, i64 4
  %482 = bitcast i8* %481 to i32*
  store i32 %480, i32* %482, align 1, !tbaa !2453
  %483 = extractelement <2 x i32> %472, i32 0
  %484 = getelementptr inbounds i8, i8* %463, i64 8
  %485 = bitcast i8* %484 to i32*
  store i32 %483, i32* %485, align 1, !tbaa !2453
  %486 = extractelement <2 x i32> %472, i32 1
  %487 = getelementptr inbounds i8, i8* %463, i64 12
  %488 = bitcast i8* %487 to i32*
  store i32 %486, i32* %488, align 1, !tbaa !2453
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 16
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 4
  store i64 %492, i64* %PC
  %493 = inttoptr i64 %490 to i64*
  %494 = load i64, i64* %493
  store i64 %494, i64* %RAX, align 8, !tbaa !2428
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 48
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 4
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i32*
  %500 = load i32, i32* %499
  %501 = sext i32 %500 to i64
  store i64 %501, i64* %RCX, align 8, !tbaa !2428
  %502 = load i64, i64* %RAX
  %503 = load i64, i64* %RCX
  %504 = mul i64 %503, 4
  %505 = add i64 %504, %502
  %506 = bitcast %union.vec128_t* %XMM0 to i8*
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 5
  store i64 %508, i64* %PC
  %509 = bitcast i8* %506 to <2 x float>*
  %510 = load <2 x float>, <2 x float>* %509, align 1
  %511 = extractelement <2 x float> %510, i32 0
  %512 = inttoptr i64 %505 to float*
  store float %511, float* %512
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 48
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 3
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i32*
  %518 = load i32, i32* %517
  %519 = zext i32 %518 to i64
  store i64 %519, i64* %RAX, align 8, !tbaa !2428
  %520 = load i64, i64* %RAX
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 3
  store i64 %522, i64* %PC
  %523 = trunc i64 %520 to i32
  %524 = add i32 1, %523
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = icmp ult i32 %524, %523
  %527 = icmp ult i32 %524, 1
  %528 = or i1 %526, %527
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %529, i8* %530, align 1, !tbaa !2432
  %531 = and i32 %524, 255
  %532 = call i32 @llvm.ctpop.i32(i32 %531) #16
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = xor i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %535, i8* %536, align 1, !tbaa !2446
  %537 = xor i64 1, %520
  %538 = trunc i64 %537 to i32
  %539 = xor i32 %538, %524
  %540 = lshr i32 %539, 4
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %542, i8* %543, align 1, !tbaa !2447
  %544 = icmp eq i32 %524, 0
  %545 = zext i1 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %545, i8* %546, align 1, !tbaa !2448
  %547 = lshr i32 %524, 31
  %548 = trunc i32 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %548, i8* %549, align 1, !tbaa !2449
  %550 = lshr i32 %523, 31
  %551 = xor i32 %547, %550
  %552 = add nuw nsw i32 %551, %547
  %553 = icmp eq i32 %552, 2
  %554 = zext i1 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %554, i8* %555, align 1, !tbaa !2450
  %556 = load i64, i64* %RBP
  %557 = sub i64 %556, 48
  %558 = load i32, i32* %EAX
  %559 = zext i32 %558 to i64
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 3
  store i64 %561, i64* %PC
  %562 = inttoptr i64 %557 to i32*
  store i32 %558, i32* %562
  %563 = load i64, i64* %PC
  %564 = sub i64 %563, 86
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 5
  store i64 %566, i64* %PC
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %564, i64* %567, align 8, !tbaa !2428
  br label %block_402059

block_4020b9:                                     ; preds = %block_4020b4, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %MEMORY.0 = phi %struct.Memory* [ %174, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ], [ %MEMORY.7, %block_4020b4 ]
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 5
  store i64 %569, i64* %PC
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 20
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 3
  store i64 %573, i64* %PC
  %574 = inttoptr i64 %571 to i32*
  %575 = load i32, i32* %574
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %RCX, align 8, !tbaa !2428
  %577 = load i64, i64* %RBP
  %578 = sub i64 %577, 60
  %579 = load i32, i32* %EAX
  %580 = zext i32 %579 to i64
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 3
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %578 to i32*
  store i32 %579, i32* %583
  %584 = load i32, i32* %ECX
  %585 = zext i32 %584 to i64
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 2
  store i64 %587, i64* %PC
  %588 = and i64 %585, 4294967295
  store i64 %588, i64* %RAX, align 8, !tbaa !2428
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 1
  store i64 %590, i64* %PC
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %593 = bitcast %union.anon* %592 to i32*
  %594 = load i32, i32* %593, align 8, !tbaa !2452
  %595 = sext i32 %594 to i64
  %596 = lshr i64 %595, 32
  store i64 %596, i64* %591, align 8, !tbaa !2428
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 60
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 3
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i32*
  %602 = load i32, i32* %601
  %603 = zext i32 %602 to i64
  store i64 %603, i64* %RCX, align 8, !tbaa !2428
  %604 = load i32, i32* %ECX
  %605 = zext i32 %604 to i64
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 2
  store i64 %607, i64* %PC
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %609 = bitcast %union.anon* %608 to i32*
  %610 = load i32, i32* %609, align 8, !tbaa !2452
  %611 = zext i32 %610 to i64
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %613 = bitcast %union.anon* %612 to i32*
  %614 = load i32, i32* %613, align 8, !tbaa !2452
  %615 = zext i32 %614 to i64
  %616 = shl i64 %605, 32
  %617 = ashr exact i64 %616, 32
  %618 = shl nuw i64 %615, 32
  %619 = or i64 %618, %611
  %620 = sdiv i64 %619, %617
  %621 = shl i64 %620, 32
  %622 = ashr exact i64 %621, 32
  %623 = icmp eq i64 %620, %622
  br i1 %623, label %628, label %624

; <label>:624:                                    ; preds = %block_4020b9
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %626 = load i64, i64* %625, align 8, !tbaa !2428
  %627 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %626, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:628:                                    ; preds = %block_4020b9
  %629 = srem i64 %619, %617
  %630 = getelementptr inbounds %union.anon, %union.anon* %608, i64 0, i32 0
  %631 = and i64 %620, 4294967295
  store i64 %631, i64* %630, align 8, !tbaa !2428
  %632 = getelementptr inbounds %union.anon, %union.anon* %612, i64 0, i32 0
  %633 = and i64 %629, 4294967295
  store i64 %633, i64* %632, align 8, !tbaa !2428
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %634, align 1, !tbaa !2432
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %635, align 1, !tbaa !2446
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %636, align 1, !tbaa !2447
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %637, align 1, !tbaa !2448
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %638, align 1, !tbaa !2449
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %639, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %624, %628
  %640 = phi %struct.Memory* [ %627, %624 ], [ %MEMORY.0, %628 ]
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 44
  %643 = load i32, i32* %EDX
  %644 = zext i32 %643 to i64
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 3
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %642 to i32*
  store i32 %643, i32* %647
  %648 = load i64, i64* %RBP
  %649 = sub i64 %648, 44
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %649 to i32*
  %653 = load i32, i32* %652
  %654 = sub i32 %653, 2
  %655 = icmp ult i32 %653, 2
  %656 = zext i1 %655 to i8
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %656, i8* %657, align 1, !tbaa !2432
  %658 = and i32 %654, 255
  %659 = call i32 @llvm.ctpop.i32(i32 %658) #16
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %662, i8* %663, align 1, !tbaa !2446
  %664 = xor i32 %653, 2
  %665 = xor i32 %664, %654
  %666 = lshr i32 %665, 4
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %668, i8* %669, align 1, !tbaa !2447
  %670 = icmp eq i32 %654, 0
  %671 = zext i1 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %671, i8* %672, align 1, !tbaa !2448
  %673 = lshr i32 %654, 31
  %674 = trunc i32 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %674, i8* %675, align 1, !tbaa !2449
  %676 = lshr i32 %653, 31
  %677 = xor i32 %673, %676
  %678 = add nuw nsw i32 %677, %676
  %679 = icmp eq i32 %678, 2
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %680, i8* %681, align 1, !tbaa !2450
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 167
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 6
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 6
  store i64 %687, i64* %PC
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %689 = load i8, i8* %688, align 1, !tbaa !2449
  %690 = icmp ne i8 %689, 0
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %692 = load i8, i8* %691, align 1, !tbaa !2450
  %693 = icmp ne i8 %692, 0
  %694 = xor i1 %690, %693
  %695 = zext i1 %694 to i8
  store i8 %695, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %697 = select i1 %694, i64 %683, i64 %685
  store i64 %697, i64* %696, align 8, !tbaa !2428
  %698 = load i8, i8* %BRANCH_TAKEN
  %699 = icmp eq i8 %698, 1
  br i1 %699, label %block_40217a, label %block_4020d9

block_4022cd:                                     ; preds = %block_4022d9, %block_4022bd
  %MEMORY.1 = phi %struct.Memory* [ %7119, %block_4022bd ], [ %MEMORY.1, %block_4022d9 ]
  %700 = load i64, i64* %RBP
  %701 = sub i64 %700, 48
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 3
  store i64 %703, i64* %PC
  %704 = inttoptr i64 %701 to i32*
  %705 = load i32, i32* %704
  %706 = zext i32 %705 to i64
  store i64 %706, i64* %RAX, align 8, !tbaa !2428
  %707 = load i32, i32* %EAX
  %708 = zext i32 %707 to i64
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 4
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 3
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i32*
  %714 = load i32, i32* %713
  %715 = sub i32 %707, %714
  %716 = icmp ult i32 %707, %714
  %717 = zext i1 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %717, i8* %718, align 1, !tbaa !2432
  %719 = and i32 %715, 255
  %720 = call i32 @llvm.ctpop.i32(i32 %719) #16
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %723, i8* %724, align 1, !tbaa !2446
  %725 = xor i32 %714, %707
  %726 = xor i32 %725, %715
  %727 = lshr i32 %726, 4
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %729, i8* %730, align 1, !tbaa !2447
  %731 = icmp eq i32 %715, 0
  %732 = zext i1 %731 to i8
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %732, i8* %733, align 1, !tbaa !2448
  %734 = lshr i32 %715, 31
  %735 = trunc i32 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %735, i8* %736, align 1, !tbaa !2449
  %737 = lshr i32 %707, 31
  %738 = lshr i32 %714, 31
  %739 = xor i32 %738, %737
  %740 = xor i32 %734, %737
  %741 = add nuw nsw i32 %740, %739
  %742 = icmp eq i32 %741, 2
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %743, i8* %744, align 1, !tbaa !2450
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 428
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 6
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 6
  store i64 %750, i64* %PC
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %752 = load i8, i8* %751, align 1, !tbaa !2449
  %753 = icmp ne i8 %752, 0
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %755 = load i8, i8* %754, align 1, !tbaa !2450
  %756 = icmp ne i8 %755, 0
  %757 = xor i1 %753, %756
  %758 = xor i1 %757, true
  %759 = zext i1 %758 to i8
  store i8 %759, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %761 = select i1 %757, i64 %748, i64 %746
  store i64 %761, i64* %760, align 8, !tbaa !2428
  %762 = load i8, i8* %BRANCH_TAKEN
  %763 = icmp eq i8 %762, 1
  br i1 %763, label %block_40247f, label %block_4022d9

block_402049:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %764 = load i64, i64* %RBP
  %765 = sub i64 %764, 44
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 3
  store i64 %767, i64* %PC
  %768 = inttoptr i64 %765 to i32*
  %769 = load i32, i32* %768
  %770 = zext i32 %769 to i64
  store i64 %770, i64* %RAX, align 8, !tbaa !2428
  %771 = load i64, i64* %RAX
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 3
  store i64 %773, i64* %PC
  %774 = trunc i64 %771 to i32
  %775 = sub i32 %774, 1
  %776 = zext i32 %775 to i64
  store i64 %776, i64* %RAX, align 8, !tbaa !2428
  %777 = icmp ult i32 %774, 1
  %778 = zext i1 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %778, i8* %779, align 1, !tbaa !2432
  %780 = and i32 %775, 255
  %781 = call i32 @llvm.ctpop.i32(i32 %780) #16
  %782 = trunc i32 %781 to i8
  %783 = and i8 %782, 1
  %784 = xor i8 %783, 1
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %784, i8* %785, align 1, !tbaa !2446
  %786 = xor i64 1, %771
  %787 = trunc i64 %786 to i32
  %788 = xor i32 %787, %775
  %789 = lshr i32 %788, 4
  %790 = trunc i32 %789 to i8
  %791 = and i8 %790, 1
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %791, i8* %792, align 1, !tbaa !2447
  %793 = icmp eq i32 %775, 0
  %794 = zext i1 %793 to i8
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %794, i8* %795, align 1, !tbaa !2448
  %796 = lshr i32 %775, 31
  %797 = trunc i32 %796 to i8
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %797, i8* %798, align 1, !tbaa !2449
  %799 = lshr i32 %774, 31
  %800 = xor i32 %796, %799
  %801 = add nuw nsw i32 %800, %799
  %802 = icmp eq i32 %801, 2
  %803 = zext i1 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %803, i8* %804, align 1, !tbaa !2450
  %805 = load i64, i64* %RBP
  %806 = sub i64 %805, 44
  %807 = load i32, i32* %EAX
  %808 = zext i32 %807 to i64
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 3
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %806 to i32*
  store i32 %807, i32* %811
  %812 = load i64, i64* %RBP
  %813 = sub i64 %812, 48
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 7
  store i64 %815, i64* %PC
  %816 = inttoptr i64 %813 to i32*
  store i32 0, i32* %816
  br label %block_402059

block_4027f3:                                     ; preds = %block_4024b9
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 5
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 5
  store i64 %820, i64* %PC
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %818, i64* %821, align 8, !tbaa !2428
  %822 = load i64, i64* %RBP
  %823 = sub i64 %822, 44
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 3
  store i64 %825, i64* %PC
  %826 = inttoptr i64 %823 to i32*
  %827 = load i32, i32* %826
  %828 = zext i32 %827 to i64
  store i64 %828, i64* %RAX, align 8, !tbaa !2428
  %829 = load i64, i64* %RAX
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 3
  store i64 %831, i64* %PC
  %832 = trunc i64 %829 to i32
  %833 = add i32 16, %832
  %834 = zext i32 %833 to i64
  store i64 %834, i64* %RAX, align 8, !tbaa !2428
  %835 = icmp ult i32 %833, %832
  %836 = icmp ult i32 %833, 16
  %837 = or i1 %835, %836
  %838 = zext i1 %837 to i8
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %838, i8* %839, align 1, !tbaa !2432
  %840 = and i32 %833, 255
  %841 = call i32 @llvm.ctpop.i32(i32 %840) #16
  %842 = trunc i32 %841 to i8
  %843 = and i8 %842, 1
  %844 = xor i8 %843, 1
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %844, i8* %845, align 1, !tbaa !2446
  %846 = xor i64 16, %829
  %847 = trunc i64 %846 to i32
  %848 = xor i32 %847, %833
  %849 = lshr i32 %848, 4
  %850 = trunc i32 %849 to i8
  %851 = and i8 %850, 1
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %851, i8* %852, align 1, !tbaa !2447
  %853 = icmp eq i32 %833, 0
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %854, i8* %855, align 1, !tbaa !2448
  %856 = lshr i32 %833, 31
  %857 = trunc i32 %856 to i8
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %857, i8* %858, align 1, !tbaa !2449
  %859 = lshr i32 %832, 31
  %860 = xor i32 %856, %859
  %861 = add nuw nsw i32 %860, %856
  %862 = icmp eq i32 %861, 2
  %863 = zext i1 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %863, i8* %864, align 1, !tbaa !2450
  %865 = load i64, i64* %RBP
  %866 = sub i64 %865, 44
  %867 = load i32, i32* %EAX
  %868 = zext i32 %867 to i64
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 3
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %866 to i32*
  store i32 %867, i32* %871
  %872 = load i64, i64* %PC
  %873 = sub i64 %872, 859
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 5
  store i64 %875, i64* %PC
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %873, i64* %876, align 8, !tbaa !2428
  br label %block_4024a6

block_4022bd:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %877 = load i64, i64* %RBP
  %878 = sub i64 %877, 44
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 3
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %878 to i32*
  %882 = load i32, i32* %881
  %883 = zext i32 %882 to i64
  store i64 %883, i64* %RAX, align 8, !tbaa !2428
  %884 = load i64, i64* %RAX
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 3
  store i64 %886, i64* %PC
  %887 = trunc i64 %884 to i32
  %888 = sub i32 %887, 1
  %889 = zext i32 %888 to i64
  store i64 %889, i64* %RAX, align 8, !tbaa !2428
  %890 = icmp ult i32 %887, 1
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %891, i8* %892, align 1, !tbaa !2432
  %893 = and i32 %888, 255
  %894 = call i32 @llvm.ctpop.i32(i32 %893) #16
  %895 = trunc i32 %894 to i8
  %896 = and i8 %895, 1
  %897 = xor i8 %896, 1
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %897, i8* %898, align 1, !tbaa !2446
  %899 = xor i64 1, %884
  %900 = trunc i64 %899 to i32
  %901 = xor i32 %900, %888
  %902 = lshr i32 %901, 4
  %903 = trunc i32 %902 to i8
  %904 = and i8 %903, 1
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %904, i8* %905, align 1, !tbaa !2447
  %906 = icmp eq i32 %888, 0
  %907 = zext i1 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %907, i8* %908, align 1, !tbaa !2448
  %909 = lshr i32 %888, 31
  %910 = trunc i32 %909 to i8
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %910, i8* %911, align 1, !tbaa !2449
  %912 = lshr i32 %887, 31
  %913 = xor i32 %909, %912
  %914 = add nuw nsw i32 %913, %912
  %915 = icmp eq i32 %914, 2
  %916 = zext i1 %915 to i8
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %916, i8* %917, align 1, !tbaa !2450
  %918 = load i64, i64* %RBP
  %919 = sub i64 %918, 44
  %920 = load i32, i32* %EAX
  %921 = zext i32 %920 to i64
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 3
  store i64 %923, i64* %PC
  %924 = inttoptr i64 %919 to i32*
  store i32 %920, i32* %924
  %925 = load i64, i64* %RBP
  %926 = sub i64 %925, 48
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 7
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i32*
  store i32 0, i32* %929
  br label %block_4022cd

block_4024c5:                                     ; preds = %block_4024b9
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 16
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 4
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %931 to i64*
  %935 = load i64, i64* %934
  store i64 %935, i64* %RAX, align 8, !tbaa !2428
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 48
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i32*
  %941 = load i32, i32* %940
  %942 = sext i32 %941 to i64
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %943 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %944 = load i64, i64* %RAX
  %945 = load i64, i64* %RCX
  %946 = mul i64 %945, 4
  %947 = add i64 %946, %944
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 5
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %947 to float*
  %951 = load float, float* %950
  %952 = bitcast i8* %943 to float*
  store float %951, float* %952, align 1, !tbaa !2453
  %953 = getelementptr inbounds i8, i8* %943, i64 4
  %954 = bitcast i8* %953 to float*
  store float 0.000000e+00, float* %954, align 1, !tbaa !2453
  %955 = getelementptr inbounds i8, i8* %943, i64 8
  %956 = bitcast i8* %955 to float*
  store float 0.000000e+00, float* %956, align 1, !tbaa !2453
  %957 = getelementptr inbounds i8, i8* %943, i64 12
  %958 = bitcast i8* %957 to float*
  store float 0.000000e+00, float* %958, align 1, !tbaa !2453
  %959 = load i64, i64* %RBP
  %960 = sub i64 %959, 32
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 4
  store i64 %962, i64* %PC
  %963 = inttoptr i64 %960 to i64*
  %964 = load i64, i64* %963
  store i64 %964, i64* %RAX, align 8, !tbaa !2428
  %965 = load i64, i64* %RBP
  %966 = sub i64 %965, 44
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 3
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %966 to i32*
  %970 = load i32, i32* %969
  %971 = zext i32 %970 to i64
  store i64 %971, i64* %RDX, align 8, !tbaa !2428
  %972 = load i64, i64* %RDX
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 3
  store i64 %974, i64* %PC
  %975 = trunc i64 %972 to i32
  %976 = sub i32 %975, 15
  %977 = zext i32 %976 to i64
  store i64 %977, i64* %RDX, align 8, !tbaa !2428
  %978 = icmp ult i32 %975, 15
  %979 = zext i1 %978 to i8
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %979, i8* %980, align 1, !tbaa !2432
  %981 = and i32 %976, 255
  %982 = call i32 @llvm.ctpop.i32(i32 %981) #16
  %983 = trunc i32 %982 to i8
  %984 = and i8 %983, 1
  %985 = xor i8 %984, 1
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %985, i8* %986, align 1, !tbaa !2446
  %987 = xor i64 15, %972
  %988 = trunc i64 %987 to i32
  %989 = xor i32 %988, %976
  %990 = lshr i32 %989, 4
  %991 = trunc i32 %990 to i8
  %992 = and i8 %991, 1
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %992, i8* %993, align 1, !tbaa !2447
  %994 = icmp eq i32 %976, 0
  %995 = zext i1 %994 to i8
  %996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %995, i8* %996, align 1, !tbaa !2448
  %997 = lshr i32 %976, 31
  %998 = trunc i32 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %998, i8* %999, align 1, !tbaa !2449
  %1000 = lshr i32 %975, 31
  %1001 = xor i32 %997, %1000
  %1002 = add nuw nsw i32 %1001, %1000
  %1003 = icmp eq i32 %1002, 2
  %1004 = zext i1 %1003 to i8
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1004, i8* %1005, align 1, !tbaa !2450
  %1006 = load i32, i32* %EDX
  %1007 = zext i32 %1006 to i64
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 3
  store i64 %1009, i64* %PC
  %1010 = shl i64 %1007, 32
  %1011 = ashr exact i64 %1010, 32
  store i64 %1011, i64* %RCX, align 8, !tbaa !2428
  %1012 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1013 = load i64, i64* %RAX
  %1014 = load i64, i64* %RCX
  %1015 = mul i64 %1014, 4
  %1016 = add i64 %1015, %1013
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 5
  store i64 %1018, i64* %PC
  %1019 = inttoptr i64 %1016 to float*
  %1020 = load float, float* %1019
  %1021 = bitcast i8* %1012 to float*
  store float %1020, float* %1021, align 1, !tbaa !2453
  %1022 = getelementptr inbounds i8, i8* %1012, i64 4
  %1023 = bitcast i8* %1022 to float*
  store float 0.000000e+00, float* %1023, align 1, !tbaa !2453
  %1024 = getelementptr inbounds i8, i8* %1012, i64 8
  %1025 = bitcast i8* %1024 to float*
  store float 0.000000e+00, float* %1025, align 1, !tbaa !2453
  %1026 = getelementptr inbounds i8, i8* %1012, i64 12
  %1027 = bitcast i8* %1026 to float*
  store float 0.000000e+00, float* %1027, align 1, !tbaa !2453
  %1028 = load i64, i64* %RBP
  %1029 = sub i64 %1028, 40
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 4
  store i64 %1031, i64* %PC
  %1032 = inttoptr i64 %1029 to i64*
  %1033 = load i64, i64* %1032
  store i64 %1033, i64* %RAX, align 8, !tbaa !2428
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 24
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 3
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1035 to i32*
  %1039 = load i32, i32* %1038
  %1040 = zext i32 %1039 to i64
  store i64 %1040, i64* %RDX, align 8, !tbaa !2428
  %1041 = load i64, i64* %RBP
  %1042 = sub i64 %1041, 44
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 3
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i32*
  %1046 = load i32, i32* %1045
  %1047 = zext i32 %1046 to i64
  store i64 %1047, i64* %RSI, align 8, !tbaa !2428
  %1048 = load i64, i64* %RSI
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 3
  store i64 %1050, i64* %PC
  %1051 = trunc i64 %1048 to i32
  %1052 = sub i32 %1051, 15
  %1053 = zext i32 %1052 to i64
  store i64 %1053, i64* %RSI, align 8, !tbaa !2428
  %1054 = icmp ult i32 %1051, 15
  %1055 = zext i1 %1054 to i8
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1055, i8* %1056, align 1, !tbaa !2432
  %1057 = and i32 %1052, 255
  %1058 = call i32 @llvm.ctpop.i32(i32 %1057) #16
  %1059 = trunc i32 %1058 to i8
  %1060 = and i8 %1059, 1
  %1061 = xor i8 %1060, 1
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1061, i8* %1062, align 1, !tbaa !2446
  %1063 = xor i64 15, %1048
  %1064 = trunc i64 %1063 to i32
  %1065 = xor i32 %1064, %1052
  %1066 = lshr i32 %1065, 4
  %1067 = trunc i32 %1066 to i8
  %1068 = and i8 %1067, 1
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1068, i8* %1069, align 1, !tbaa !2447
  %1070 = icmp eq i32 %1052, 0
  %1071 = zext i1 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1071, i8* %1072, align 1, !tbaa !2448
  %1073 = lshr i32 %1052, 31
  %1074 = trunc i32 %1073 to i8
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1074, i8* %1075, align 1, !tbaa !2449
  %1076 = lshr i32 %1051, 31
  %1077 = xor i32 %1073, %1076
  %1078 = add nuw nsw i32 %1077, %1076
  %1079 = icmp eq i32 %1078, 2
  %1080 = zext i1 %1079 to i8
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1080, i8* %1081, align 1, !tbaa !2450
  %1082 = load i64, i64* %RDX
  %1083 = load i32, i32* %ESI
  %1084 = zext i32 %1083 to i64
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 3
  store i64 %1086, i64* %PC
  %1087 = shl i64 %1082, 32
  %1088 = ashr exact i64 %1087, 32
  %1089 = shl i64 %1084, 32
  %1090 = ashr exact i64 %1089, 32
  %1091 = mul nsw i64 %1090, %1088
  %1092 = trunc i64 %1091 to i32
  %1093 = and i64 %1091, 4294967295
  store i64 %1093, i64* %RDX, align 8, !tbaa !2428
  %1094 = shl i64 %1091, 32
  %1095 = ashr exact i64 %1094, 32
  %1096 = icmp ne i64 %1095, %1091
  %1097 = zext i1 %1096 to i8
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1097, i8* %1098, align 1, !tbaa !2432
  %1099 = and i32 %1092, 255
  %1100 = call i32 @llvm.ctpop.i32(i32 %1099) #16
  %1101 = trunc i32 %1100 to i8
  %1102 = and i8 %1101, 1
  %1103 = xor i8 %1102, 1
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1103, i8* %1104, align 1, !tbaa !2446
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1105, align 1, !tbaa !2447
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1106, align 1, !tbaa !2448
  %1107 = lshr i32 %1092, 31
  %1108 = trunc i32 %1107 to i8
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1108, i8* %1109, align 1, !tbaa !2449
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1097, i8* %1110, align 1, !tbaa !2450
  %1111 = load i64, i64* %RDX
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 48
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3
  store i64 %1115, i64* %PC
  %1116 = trunc i64 %1111 to i32
  %1117 = inttoptr i64 %1113 to i32*
  %1118 = load i32, i32* %1117
  %1119 = add i32 %1118, %1116
  %1120 = zext i32 %1119 to i64
  store i64 %1120, i64* %RDX, align 8, !tbaa !2428
  %1121 = icmp ult i32 %1119, %1116
  %1122 = icmp ult i32 %1119, %1118
  %1123 = or i1 %1121, %1122
  %1124 = zext i1 %1123 to i8
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1124, i8* %1125, align 1, !tbaa !2432
  %1126 = and i32 %1119, 255
  %1127 = call i32 @llvm.ctpop.i32(i32 %1126) #16
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = xor i8 %1129, 1
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1130, i8* %1131, align 1, !tbaa !2446
  %1132 = xor i32 %1118, %1116
  %1133 = xor i32 %1132, %1119
  %1134 = lshr i32 %1133, 4
  %1135 = trunc i32 %1134 to i8
  %1136 = and i8 %1135, 1
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1136, i8* %1137, align 1, !tbaa !2447
  %1138 = icmp eq i32 %1119, 0
  %1139 = zext i1 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1139, i8* %1140, align 1, !tbaa !2448
  %1141 = lshr i32 %1119, 31
  %1142 = trunc i32 %1141 to i8
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1142, i8* %1143, align 1, !tbaa !2449
  %1144 = lshr i32 %1116, 31
  %1145 = lshr i32 %1118, 31
  %1146 = xor i32 %1141, %1144
  %1147 = xor i32 %1141, %1145
  %1148 = add nuw nsw i32 %1146, %1147
  %1149 = icmp eq i32 %1148, 2
  %1150 = zext i1 %1149 to i8
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1150, i8* %1151, align 1, !tbaa !2450
  %1152 = load i32, i32* %EDX
  %1153 = zext i32 %1152 to i64
  %1154 = load i64, i64* %PC
  %1155 = add i64 %1154, 3
  store i64 %1155, i64* %PC
  %1156 = shl i64 %1153, 32
  %1157 = ashr exact i64 %1156, 32
  store i64 %1157, i64* %RCX, align 8, !tbaa !2428
  %1158 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1159 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1160 = load i64, i64* %RAX
  %1161 = load i64, i64* %RCX
  %1162 = mul i64 %1161, 4
  %1163 = add i64 %1162, %1160
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 5
  store i64 %1165, i64* %PC
  %1166 = bitcast i8* %1159 to <2 x float>*
  %1167 = load <2 x float>, <2 x float>* %1166, align 1
  %1168 = getelementptr inbounds i8, i8* %1159, i64 8
  %1169 = bitcast i8* %1168 to <2 x i32>*
  %1170 = load <2 x i32>, <2 x i32>* %1169, align 1
  %1171 = inttoptr i64 %1163 to float*
  %1172 = load float, float* %1171
  %1173 = extractelement <2 x float> %1167, i32 0
  %1174 = fmul float %1173, %1172
  %1175 = bitcast i8* %1158 to float*
  store float %1174, float* %1175, align 1, !tbaa !2453
  %1176 = bitcast <2 x float> %1167 to <2 x i32>
  %1177 = extractelement <2 x i32> %1176, i32 1
  %1178 = getelementptr inbounds i8, i8* %1158, i64 4
  %1179 = bitcast i8* %1178 to i32*
  store i32 %1177, i32* %1179, align 1, !tbaa !2453
  %1180 = extractelement <2 x i32> %1170, i32 0
  %1181 = getelementptr inbounds i8, i8* %1158, i64 8
  %1182 = bitcast i8* %1181 to i32*
  store i32 %1180, i32* %1182, align 1, !tbaa !2453
  %1183 = extractelement <2 x i32> %1170, i32 1
  %1184 = getelementptr inbounds i8, i8* %1158, i64 12
  %1185 = bitcast i8* %1184 to i32*
  store i32 %1183, i32* %1185, align 1, !tbaa !2453
  %1186 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1187 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1188 = bitcast %union.vec128_t* %XMM1 to i8*
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 4
  store i64 %1190, i64* %PC
  %1191 = bitcast i8* %1187 to <2 x float>*
  %1192 = load <2 x float>, <2 x float>* %1191, align 1
  %1193 = getelementptr inbounds i8, i8* %1187, i64 8
  %1194 = bitcast i8* %1193 to <2 x i32>*
  %1195 = load <2 x i32>, <2 x i32>* %1194, align 1
  %1196 = bitcast i8* %1188 to <2 x float>*
  %1197 = load <2 x float>, <2 x float>* %1196, align 1
  %1198 = extractelement <2 x float> %1192, i32 0
  %1199 = extractelement <2 x float> %1197, i32 0
  %1200 = fadd float %1198, %1199
  %1201 = bitcast i8* %1186 to float*
  store float %1200, float* %1201, align 1, !tbaa !2453
  %1202 = bitcast <2 x float> %1192 to <2 x i32>
  %1203 = extractelement <2 x i32> %1202, i32 1
  %1204 = getelementptr inbounds i8, i8* %1186, i64 4
  %1205 = bitcast i8* %1204 to i32*
  store i32 %1203, i32* %1205, align 1, !tbaa !2453
  %1206 = extractelement <2 x i32> %1195, i32 0
  %1207 = getelementptr inbounds i8, i8* %1186, i64 8
  %1208 = bitcast i8* %1207 to i32*
  store i32 %1206, i32* %1208, align 1, !tbaa !2453
  %1209 = extractelement <2 x i32> %1195, i32 1
  %1210 = getelementptr inbounds i8, i8* %1186, i64 12
  %1211 = bitcast i8* %1210 to i32*
  store i32 %1209, i32* %1211, align 1, !tbaa !2453
  %1212 = load i64, i64* %RBP
  %1213 = sub i64 %1212, 32
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 4
  store i64 %1215, i64* %PC
  %1216 = inttoptr i64 %1213 to i64*
  %1217 = load i64, i64* %1216
  store i64 %1217, i64* %RAX, align 8, !tbaa !2428
  %1218 = load i64, i64* %RBP
  %1219 = sub i64 %1218, 44
  %1220 = load i64, i64* %PC
  %1221 = add i64 %1220, 3
  store i64 %1221, i64* %PC
  %1222 = inttoptr i64 %1219 to i32*
  %1223 = load i32, i32* %1222
  %1224 = zext i32 %1223 to i64
  store i64 %1224, i64* %RDX, align 8, !tbaa !2428
  %1225 = load i64, i64* %RDX
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 3
  store i64 %1227, i64* %PC
  %1228 = trunc i64 %1225 to i32
  %1229 = sub i32 %1228, 14
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %RDX, align 8, !tbaa !2428
  %1231 = icmp ult i32 %1228, 14
  %1232 = zext i1 %1231 to i8
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1232, i8* %1233, align 1, !tbaa !2432
  %1234 = and i32 %1229, 255
  %1235 = call i32 @llvm.ctpop.i32(i32 %1234) #16
  %1236 = trunc i32 %1235 to i8
  %1237 = and i8 %1236, 1
  %1238 = xor i8 %1237, 1
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1238, i8* %1239, align 1, !tbaa !2446
  %1240 = xor i64 14, %1225
  %1241 = trunc i64 %1240 to i32
  %1242 = xor i32 %1241, %1229
  %1243 = lshr i32 %1242, 4
  %1244 = trunc i32 %1243 to i8
  %1245 = and i8 %1244, 1
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1245, i8* %1246, align 1, !tbaa !2447
  %1247 = icmp eq i32 %1229, 0
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1248, i8* %1249, align 1, !tbaa !2448
  %1250 = lshr i32 %1229, 31
  %1251 = trunc i32 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1251, i8* %1252, align 1, !tbaa !2449
  %1253 = lshr i32 %1228, 31
  %1254 = xor i32 %1250, %1253
  %1255 = add nuw nsw i32 %1254, %1253
  %1256 = icmp eq i32 %1255, 2
  %1257 = zext i1 %1256 to i8
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1257, i8* %1258, align 1, !tbaa !2450
  %1259 = load i32, i32* %EDX
  %1260 = zext i32 %1259 to i64
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 3
  store i64 %1262, i64* %PC
  %1263 = shl i64 %1260, 32
  %1264 = ashr exact i64 %1263, 32
  store i64 %1264, i64* %RCX, align 8, !tbaa !2428
  %1265 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1266 = load i64, i64* %RAX
  %1267 = load i64, i64* %RCX
  %1268 = mul i64 %1267, 4
  %1269 = add i64 %1268, %1266
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = inttoptr i64 %1269 to float*
  %1273 = load float, float* %1272
  %1274 = bitcast i8* %1265 to float*
  store float %1273, float* %1274, align 1, !tbaa !2453
  %1275 = getelementptr inbounds i8, i8* %1265, i64 4
  %1276 = bitcast i8* %1275 to float*
  store float 0.000000e+00, float* %1276, align 1, !tbaa !2453
  %1277 = getelementptr inbounds i8, i8* %1265, i64 8
  %1278 = bitcast i8* %1277 to float*
  store float 0.000000e+00, float* %1278, align 1, !tbaa !2453
  %1279 = getelementptr inbounds i8, i8* %1265, i64 12
  %1280 = bitcast i8* %1279 to float*
  store float 0.000000e+00, float* %1280, align 1, !tbaa !2453
  %1281 = load i64, i64* %RBP
  %1282 = sub i64 %1281, 40
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 4
  store i64 %1284, i64* %PC
  %1285 = inttoptr i64 %1282 to i64*
  %1286 = load i64, i64* %1285
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = load i64, i64* %RBP
  %1288 = sub i64 %1287, 24
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 3
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1288 to i32*
  %1292 = load i32, i32* %1291
  %1293 = zext i32 %1292 to i64
  store i64 %1293, i64* %RDX, align 8, !tbaa !2428
  %1294 = load i64, i64* %RBP
  %1295 = sub i64 %1294, 44
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 3
  store i64 %1297, i64* %PC
  %1298 = inttoptr i64 %1295 to i32*
  %1299 = load i32, i32* %1298
  %1300 = zext i32 %1299 to i64
  store i64 %1300, i64* %RSI, align 8, !tbaa !2428
  %1301 = load i64, i64* %RSI
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 3
  store i64 %1303, i64* %PC
  %1304 = trunc i64 %1301 to i32
  %1305 = sub i32 %1304, 14
  %1306 = zext i32 %1305 to i64
  store i64 %1306, i64* %RSI, align 8, !tbaa !2428
  %1307 = icmp ult i32 %1304, 14
  %1308 = zext i1 %1307 to i8
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1308, i8* %1309, align 1, !tbaa !2432
  %1310 = and i32 %1305, 255
  %1311 = call i32 @llvm.ctpop.i32(i32 %1310) #16
  %1312 = trunc i32 %1311 to i8
  %1313 = and i8 %1312, 1
  %1314 = xor i8 %1313, 1
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1314, i8* %1315, align 1, !tbaa !2446
  %1316 = xor i64 14, %1301
  %1317 = trunc i64 %1316 to i32
  %1318 = xor i32 %1317, %1305
  %1319 = lshr i32 %1318, 4
  %1320 = trunc i32 %1319 to i8
  %1321 = and i8 %1320, 1
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1321, i8* %1322, align 1, !tbaa !2447
  %1323 = icmp eq i32 %1305, 0
  %1324 = zext i1 %1323 to i8
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1324, i8* %1325, align 1, !tbaa !2448
  %1326 = lshr i32 %1305, 31
  %1327 = trunc i32 %1326 to i8
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1327, i8* %1328, align 1, !tbaa !2449
  %1329 = lshr i32 %1304, 31
  %1330 = xor i32 %1326, %1329
  %1331 = add nuw nsw i32 %1330, %1329
  %1332 = icmp eq i32 %1331, 2
  %1333 = zext i1 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1333, i8* %1334, align 1, !tbaa !2450
  %1335 = load i64, i64* %RDX
  %1336 = load i32, i32* %ESI
  %1337 = zext i32 %1336 to i64
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 3
  store i64 %1339, i64* %PC
  %1340 = shl i64 %1335, 32
  %1341 = ashr exact i64 %1340, 32
  %1342 = shl i64 %1337, 32
  %1343 = ashr exact i64 %1342, 32
  %1344 = mul nsw i64 %1343, %1341
  %1345 = trunc i64 %1344 to i32
  %1346 = and i64 %1344, 4294967295
  store i64 %1346, i64* %RDX, align 8, !tbaa !2428
  %1347 = shl i64 %1344, 32
  %1348 = ashr exact i64 %1347, 32
  %1349 = icmp ne i64 %1348, %1344
  %1350 = zext i1 %1349 to i8
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1350, i8* %1351, align 1, !tbaa !2432
  %1352 = and i32 %1345, 255
  %1353 = call i32 @llvm.ctpop.i32(i32 %1352) #16
  %1354 = trunc i32 %1353 to i8
  %1355 = and i8 %1354, 1
  %1356 = xor i8 %1355, 1
  %1357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1356, i8* %1357, align 1, !tbaa !2446
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1358, align 1, !tbaa !2447
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1359, align 1, !tbaa !2448
  %1360 = lshr i32 %1345, 31
  %1361 = trunc i32 %1360 to i8
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1361, i8* %1362, align 1, !tbaa !2449
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1350, i8* %1363, align 1, !tbaa !2450
  %1364 = load i64, i64* %RDX
  %1365 = load i64, i64* %RBP
  %1366 = sub i64 %1365, 48
  %1367 = load i64, i64* %PC
  %1368 = add i64 %1367, 3
  store i64 %1368, i64* %PC
  %1369 = trunc i64 %1364 to i32
  %1370 = inttoptr i64 %1366 to i32*
  %1371 = load i32, i32* %1370
  %1372 = add i32 %1371, %1369
  %1373 = zext i32 %1372 to i64
  store i64 %1373, i64* %RDX, align 8, !tbaa !2428
  %1374 = icmp ult i32 %1372, %1369
  %1375 = icmp ult i32 %1372, %1371
  %1376 = or i1 %1374, %1375
  %1377 = zext i1 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1377, i8* %1378, align 1, !tbaa !2432
  %1379 = and i32 %1372, 255
  %1380 = call i32 @llvm.ctpop.i32(i32 %1379) #16
  %1381 = trunc i32 %1380 to i8
  %1382 = and i8 %1381, 1
  %1383 = xor i8 %1382, 1
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1383, i8* %1384, align 1, !tbaa !2446
  %1385 = xor i32 %1371, %1369
  %1386 = xor i32 %1385, %1372
  %1387 = lshr i32 %1386, 4
  %1388 = trunc i32 %1387 to i8
  %1389 = and i8 %1388, 1
  %1390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1389, i8* %1390, align 1, !tbaa !2447
  %1391 = icmp eq i32 %1372, 0
  %1392 = zext i1 %1391 to i8
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1392, i8* %1393, align 1, !tbaa !2448
  %1394 = lshr i32 %1372, 31
  %1395 = trunc i32 %1394 to i8
  %1396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1395, i8* %1396, align 1, !tbaa !2449
  %1397 = lshr i32 %1369, 31
  %1398 = lshr i32 %1371, 31
  %1399 = xor i32 %1394, %1397
  %1400 = xor i32 %1394, %1398
  %1401 = add nuw nsw i32 %1399, %1400
  %1402 = icmp eq i32 %1401, 2
  %1403 = zext i1 %1402 to i8
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1403, i8* %1404, align 1, !tbaa !2450
  %1405 = load i32, i32* %EDX
  %1406 = zext i32 %1405 to i64
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 3
  store i64 %1408, i64* %PC
  %1409 = shl i64 %1406, 32
  %1410 = ashr exact i64 %1409, 32
  store i64 %1410, i64* %RCX, align 8, !tbaa !2428
  %1411 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1412 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1413 = load i64, i64* %RAX
  %1414 = load i64, i64* %RCX
  %1415 = mul i64 %1414, 4
  %1416 = add i64 %1415, %1413
  %1417 = load i64, i64* %PC
  %1418 = add i64 %1417, 5
  store i64 %1418, i64* %PC
  %1419 = bitcast i8* %1412 to <2 x float>*
  %1420 = load <2 x float>, <2 x float>* %1419, align 1
  %1421 = getelementptr inbounds i8, i8* %1412, i64 8
  %1422 = bitcast i8* %1421 to <2 x i32>*
  %1423 = load <2 x i32>, <2 x i32>* %1422, align 1
  %1424 = inttoptr i64 %1416 to float*
  %1425 = load float, float* %1424
  %1426 = extractelement <2 x float> %1420, i32 0
  %1427 = fmul float %1426, %1425
  %1428 = bitcast i8* %1411 to float*
  store float %1427, float* %1428, align 1, !tbaa !2453
  %1429 = bitcast <2 x float> %1420 to <2 x i32>
  %1430 = extractelement <2 x i32> %1429, i32 1
  %1431 = getelementptr inbounds i8, i8* %1411, i64 4
  %1432 = bitcast i8* %1431 to i32*
  store i32 %1430, i32* %1432, align 1, !tbaa !2453
  %1433 = extractelement <2 x i32> %1423, i32 0
  %1434 = getelementptr inbounds i8, i8* %1411, i64 8
  %1435 = bitcast i8* %1434 to i32*
  store i32 %1433, i32* %1435, align 1, !tbaa !2453
  %1436 = extractelement <2 x i32> %1423, i32 1
  %1437 = getelementptr inbounds i8, i8* %1411, i64 12
  %1438 = bitcast i8* %1437 to i32*
  store i32 %1436, i32* %1438, align 1, !tbaa !2453
  %1439 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1440 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1441 = bitcast %union.vec128_t* %XMM1 to i8*
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = bitcast i8* %1440 to <2 x float>*
  %1445 = load <2 x float>, <2 x float>* %1444, align 1
  %1446 = getelementptr inbounds i8, i8* %1440, i64 8
  %1447 = bitcast i8* %1446 to <2 x i32>*
  %1448 = load <2 x i32>, <2 x i32>* %1447, align 1
  %1449 = bitcast i8* %1441 to <2 x float>*
  %1450 = load <2 x float>, <2 x float>* %1449, align 1
  %1451 = extractelement <2 x float> %1445, i32 0
  %1452 = extractelement <2 x float> %1450, i32 0
  %1453 = fadd float %1451, %1452
  %1454 = bitcast i8* %1439 to float*
  store float %1453, float* %1454, align 1, !tbaa !2453
  %1455 = bitcast <2 x float> %1445 to <2 x i32>
  %1456 = extractelement <2 x i32> %1455, i32 1
  %1457 = getelementptr inbounds i8, i8* %1439, i64 4
  %1458 = bitcast i8* %1457 to i32*
  store i32 %1456, i32* %1458, align 1, !tbaa !2453
  %1459 = extractelement <2 x i32> %1448, i32 0
  %1460 = getelementptr inbounds i8, i8* %1439, i64 8
  %1461 = bitcast i8* %1460 to i32*
  store i32 %1459, i32* %1461, align 1, !tbaa !2453
  %1462 = extractelement <2 x i32> %1448, i32 1
  %1463 = getelementptr inbounds i8, i8* %1439, i64 12
  %1464 = bitcast i8* %1463 to i32*
  store i32 %1462, i32* %1464, align 1, !tbaa !2453
  %1465 = load i64, i64* %RBP
  %1466 = sub i64 %1465, 32
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 4
  store i64 %1468, i64* %PC
  %1469 = inttoptr i64 %1466 to i64*
  %1470 = load i64, i64* %1469
  store i64 %1470, i64* %RAX, align 8, !tbaa !2428
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 44
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 3
  store i64 %1474, i64* %PC
  %1475 = inttoptr i64 %1472 to i32*
  %1476 = load i32, i32* %1475
  %1477 = zext i32 %1476 to i64
  store i64 %1477, i64* %RDX, align 8, !tbaa !2428
  %1478 = load i64, i64* %RDX
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 3
  store i64 %1480, i64* %PC
  %1481 = trunc i64 %1478 to i32
  %1482 = sub i32 %1481, 13
  %1483 = zext i32 %1482 to i64
  store i64 %1483, i64* %RDX, align 8, !tbaa !2428
  %1484 = icmp ult i32 %1481, 13
  %1485 = zext i1 %1484 to i8
  %1486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1485, i8* %1486, align 1, !tbaa !2432
  %1487 = and i32 %1482, 255
  %1488 = call i32 @llvm.ctpop.i32(i32 %1487) #16
  %1489 = trunc i32 %1488 to i8
  %1490 = and i8 %1489, 1
  %1491 = xor i8 %1490, 1
  %1492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1491, i8* %1492, align 1, !tbaa !2446
  %1493 = xor i64 13, %1478
  %1494 = trunc i64 %1493 to i32
  %1495 = xor i32 %1494, %1482
  %1496 = lshr i32 %1495, 4
  %1497 = trunc i32 %1496 to i8
  %1498 = and i8 %1497, 1
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1498, i8* %1499, align 1, !tbaa !2447
  %1500 = icmp eq i32 %1482, 0
  %1501 = zext i1 %1500 to i8
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1501, i8* %1502, align 1, !tbaa !2448
  %1503 = lshr i32 %1482, 31
  %1504 = trunc i32 %1503 to i8
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1504, i8* %1505, align 1, !tbaa !2449
  %1506 = lshr i32 %1481, 31
  %1507 = xor i32 %1503, %1506
  %1508 = add nuw nsw i32 %1507, %1506
  %1509 = icmp eq i32 %1508, 2
  %1510 = zext i1 %1509 to i8
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1510, i8* %1511, align 1, !tbaa !2450
  %1512 = load i32, i32* %EDX
  %1513 = zext i32 %1512 to i64
  %1514 = load i64, i64* %PC
  %1515 = add i64 %1514, 3
  store i64 %1515, i64* %PC
  %1516 = shl i64 %1513, 32
  %1517 = ashr exact i64 %1516, 32
  store i64 %1517, i64* %RCX, align 8, !tbaa !2428
  %1518 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1519 = load i64, i64* %RAX
  %1520 = load i64, i64* %RCX
  %1521 = mul i64 %1520, 4
  %1522 = add i64 %1521, %1519
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 5
  store i64 %1524, i64* %PC
  %1525 = inttoptr i64 %1522 to float*
  %1526 = load float, float* %1525
  %1527 = bitcast i8* %1518 to float*
  store float %1526, float* %1527, align 1, !tbaa !2453
  %1528 = getelementptr inbounds i8, i8* %1518, i64 4
  %1529 = bitcast i8* %1528 to float*
  store float 0.000000e+00, float* %1529, align 1, !tbaa !2453
  %1530 = getelementptr inbounds i8, i8* %1518, i64 8
  %1531 = bitcast i8* %1530 to float*
  store float 0.000000e+00, float* %1531, align 1, !tbaa !2453
  %1532 = getelementptr inbounds i8, i8* %1518, i64 12
  %1533 = bitcast i8* %1532 to float*
  store float 0.000000e+00, float* %1533, align 1, !tbaa !2453
  %1534 = load i64, i64* %RBP
  %1535 = sub i64 %1534, 40
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 4
  store i64 %1537, i64* %PC
  %1538 = inttoptr i64 %1535 to i64*
  %1539 = load i64, i64* %1538
  store i64 %1539, i64* %RAX, align 8, !tbaa !2428
  %1540 = load i64, i64* %RBP
  %1541 = sub i64 %1540, 24
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 3
  store i64 %1543, i64* %PC
  %1544 = inttoptr i64 %1541 to i32*
  %1545 = load i32, i32* %1544
  %1546 = zext i32 %1545 to i64
  store i64 %1546, i64* %RDX, align 8, !tbaa !2428
  %1547 = load i64, i64* %RBP
  %1548 = sub i64 %1547, 44
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 3
  store i64 %1550, i64* %PC
  %1551 = inttoptr i64 %1548 to i32*
  %1552 = load i32, i32* %1551
  %1553 = zext i32 %1552 to i64
  store i64 %1553, i64* %RSI, align 8, !tbaa !2428
  %1554 = load i64, i64* %RSI
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 3
  store i64 %1556, i64* %PC
  %1557 = trunc i64 %1554 to i32
  %1558 = sub i32 %1557, 13
  %1559 = zext i32 %1558 to i64
  store i64 %1559, i64* %RSI, align 8, !tbaa !2428
  %1560 = icmp ult i32 %1557, 13
  %1561 = zext i1 %1560 to i8
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1561, i8* %1562, align 1, !tbaa !2432
  %1563 = and i32 %1558, 255
  %1564 = call i32 @llvm.ctpop.i32(i32 %1563) #16
  %1565 = trunc i32 %1564 to i8
  %1566 = and i8 %1565, 1
  %1567 = xor i8 %1566, 1
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1567, i8* %1568, align 1, !tbaa !2446
  %1569 = xor i64 13, %1554
  %1570 = trunc i64 %1569 to i32
  %1571 = xor i32 %1570, %1558
  %1572 = lshr i32 %1571, 4
  %1573 = trunc i32 %1572 to i8
  %1574 = and i8 %1573, 1
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1574, i8* %1575, align 1, !tbaa !2447
  %1576 = icmp eq i32 %1558, 0
  %1577 = zext i1 %1576 to i8
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1577, i8* %1578, align 1, !tbaa !2448
  %1579 = lshr i32 %1558, 31
  %1580 = trunc i32 %1579 to i8
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1580, i8* %1581, align 1, !tbaa !2449
  %1582 = lshr i32 %1557, 31
  %1583 = xor i32 %1579, %1582
  %1584 = add nuw nsw i32 %1583, %1582
  %1585 = icmp eq i32 %1584, 2
  %1586 = zext i1 %1585 to i8
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1586, i8* %1587, align 1, !tbaa !2450
  %1588 = load i64, i64* %RDX
  %1589 = load i32, i32* %ESI
  %1590 = zext i32 %1589 to i64
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 3
  store i64 %1592, i64* %PC
  %1593 = shl i64 %1588, 32
  %1594 = ashr exact i64 %1593, 32
  %1595 = shl i64 %1590, 32
  %1596 = ashr exact i64 %1595, 32
  %1597 = mul nsw i64 %1596, %1594
  %1598 = trunc i64 %1597 to i32
  %1599 = and i64 %1597, 4294967295
  store i64 %1599, i64* %RDX, align 8, !tbaa !2428
  %1600 = shl i64 %1597, 32
  %1601 = ashr exact i64 %1600, 32
  %1602 = icmp ne i64 %1601, %1597
  %1603 = zext i1 %1602 to i8
  %1604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1603, i8* %1604, align 1, !tbaa !2432
  %1605 = and i32 %1598, 255
  %1606 = call i32 @llvm.ctpop.i32(i32 %1605) #16
  %1607 = trunc i32 %1606 to i8
  %1608 = and i8 %1607, 1
  %1609 = xor i8 %1608, 1
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1609, i8* %1610, align 1, !tbaa !2446
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1611, align 1, !tbaa !2447
  %1612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1612, align 1, !tbaa !2448
  %1613 = lshr i32 %1598, 31
  %1614 = trunc i32 %1613 to i8
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1614, i8* %1615, align 1, !tbaa !2449
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1603, i8* %1616, align 1, !tbaa !2450
  %1617 = load i64, i64* %RDX
  %1618 = load i64, i64* %RBP
  %1619 = sub i64 %1618, 48
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 3
  store i64 %1621, i64* %PC
  %1622 = trunc i64 %1617 to i32
  %1623 = inttoptr i64 %1619 to i32*
  %1624 = load i32, i32* %1623
  %1625 = add i32 %1624, %1622
  %1626 = zext i32 %1625 to i64
  store i64 %1626, i64* %RDX, align 8, !tbaa !2428
  %1627 = icmp ult i32 %1625, %1622
  %1628 = icmp ult i32 %1625, %1624
  %1629 = or i1 %1627, %1628
  %1630 = zext i1 %1629 to i8
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1630, i8* %1631, align 1, !tbaa !2432
  %1632 = and i32 %1625, 255
  %1633 = call i32 @llvm.ctpop.i32(i32 %1632) #16
  %1634 = trunc i32 %1633 to i8
  %1635 = and i8 %1634, 1
  %1636 = xor i8 %1635, 1
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1636, i8* %1637, align 1, !tbaa !2446
  %1638 = xor i32 %1624, %1622
  %1639 = xor i32 %1638, %1625
  %1640 = lshr i32 %1639, 4
  %1641 = trunc i32 %1640 to i8
  %1642 = and i8 %1641, 1
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1642, i8* %1643, align 1, !tbaa !2447
  %1644 = icmp eq i32 %1625, 0
  %1645 = zext i1 %1644 to i8
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1645, i8* %1646, align 1, !tbaa !2448
  %1647 = lshr i32 %1625, 31
  %1648 = trunc i32 %1647 to i8
  %1649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1648, i8* %1649, align 1, !tbaa !2449
  %1650 = lshr i32 %1622, 31
  %1651 = lshr i32 %1624, 31
  %1652 = xor i32 %1647, %1650
  %1653 = xor i32 %1647, %1651
  %1654 = add nuw nsw i32 %1652, %1653
  %1655 = icmp eq i32 %1654, 2
  %1656 = zext i1 %1655 to i8
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1656, i8* %1657, align 1, !tbaa !2450
  %1658 = load i32, i32* %EDX
  %1659 = zext i32 %1658 to i64
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 3
  store i64 %1661, i64* %PC
  %1662 = shl i64 %1659, 32
  %1663 = ashr exact i64 %1662, 32
  store i64 %1663, i64* %RCX, align 8, !tbaa !2428
  %1664 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1665 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1666 = load i64, i64* %RAX
  %1667 = load i64, i64* %RCX
  %1668 = mul i64 %1667, 4
  %1669 = add i64 %1668, %1666
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 5
  store i64 %1671, i64* %PC
  %1672 = bitcast i8* %1665 to <2 x float>*
  %1673 = load <2 x float>, <2 x float>* %1672, align 1
  %1674 = getelementptr inbounds i8, i8* %1665, i64 8
  %1675 = bitcast i8* %1674 to <2 x i32>*
  %1676 = load <2 x i32>, <2 x i32>* %1675, align 1
  %1677 = inttoptr i64 %1669 to float*
  %1678 = load float, float* %1677
  %1679 = extractelement <2 x float> %1673, i32 0
  %1680 = fmul float %1679, %1678
  %1681 = bitcast i8* %1664 to float*
  store float %1680, float* %1681, align 1, !tbaa !2453
  %1682 = bitcast <2 x float> %1673 to <2 x i32>
  %1683 = extractelement <2 x i32> %1682, i32 1
  %1684 = getelementptr inbounds i8, i8* %1664, i64 4
  %1685 = bitcast i8* %1684 to i32*
  store i32 %1683, i32* %1685, align 1, !tbaa !2453
  %1686 = extractelement <2 x i32> %1676, i32 0
  %1687 = getelementptr inbounds i8, i8* %1664, i64 8
  %1688 = bitcast i8* %1687 to i32*
  store i32 %1686, i32* %1688, align 1, !tbaa !2453
  %1689 = extractelement <2 x i32> %1676, i32 1
  %1690 = getelementptr inbounds i8, i8* %1664, i64 12
  %1691 = bitcast i8* %1690 to i32*
  store i32 %1689, i32* %1691, align 1, !tbaa !2453
  %1692 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1693 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1694 = bitcast %union.vec128_t* %XMM1 to i8*
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 4
  store i64 %1696, i64* %PC
  %1697 = bitcast i8* %1693 to <2 x float>*
  %1698 = load <2 x float>, <2 x float>* %1697, align 1
  %1699 = getelementptr inbounds i8, i8* %1693, i64 8
  %1700 = bitcast i8* %1699 to <2 x i32>*
  %1701 = load <2 x i32>, <2 x i32>* %1700, align 1
  %1702 = bitcast i8* %1694 to <2 x float>*
  %1703 = load <2 x float>, <2 x float>* %1702, align 1
  %1704 = extractelement <2 x float> %1698, i32 0
  %1705 = extractelement <2 x float> %1703, i32 0
  %1706 = fadd float %1704, %1705
  %1707 = bitcast i8* %1692 to float*
  store float %1706, float* %1707, align 1, !tbaa !2453
  %1708 = bitcast <2 x float> %1698 to <2 x i32>
  %1709 = extractelement <2 x i32> %1708, i32 1
  %1710 = getelementptr inbounds i8, i8* %1692, i64 4
  %1711 = bitcast i8* %1710 to i32*
  store i32 %1709, i32* %1711, align 1, !tbaa !2453
  %1712 = extractelement <2 x i32> %1701, i32 0
  %1713 = getelementptr inbounds i8, i8* %1692, i64 8
  %1714 = bitcast i8* %1713 to i32*
  store i32 %1712, i32* %1714, align 1, !tbaa !2453
  %1715 = extractelement <2 x i32> %1701, i32 1
  %1716 = getelementptr inbounds i8, i8* %1692, i64 12
  %1717 = bitcast i8* %1716 to i32*
  store i32 %1715, i32* %1717, align 1, !tbaa !2453
  %1718 = load i64, i64* %RBP
  %1719 = sub i64 %1718, 32
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 4
  store i64 %1721, i64* %PC
  %1722 = inttoptr i64 %1719 to i64*
  %1723 = load i64, i64* %1722
  store i64 %1723, i64* %RAX, align 8, !tbaa !2428
  %1724 = load i64, i64* %RBP
  %1725 = sub i64 %1724, 44
  %1726 = load i64, i64* %PC
  %1727 = add i64 %1726, 3
  store i64 %1727, i64* %PC
  %1728 = inttoptr i64 %1725 to i32*
  %1729 = load i32, i32* %1728
  %1730 = zext i32 %1729 to i64
  store i64 %1730, i64* %RDX, align 8, !tbaa !2428
  %1731 = load i64, i64* %RDX
  %1732 = load i64, i64* %PC
  %1733 = add i64 %1732, 3
  store i64 %1733, i64* %PC
  %1734 = trunc i64 %1731 to i32
  %1735 = sub i32 %1734, 12
  %1736 = zext i32 %1735 to i64
  store i64 %1736, i64* %RDX, align 8, !tbaa !2428
  %1737 = icmp ult i32 %1734, 12
  %1738 = zext i1 %1737 to i8
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1738, i8* %1739, align 1, !tbaa !2432
  %1740 = and i32 %1735, 255
  %1741 = call i32 @llvm.ctpop.i32(i32 %1740) #16
  %1742 = trunc i32 %1741 to i8
  %1743 = and i8 %1742, 1
  %1744 = xor i8 %1743, 1
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1744, i8* %1745, align 1, !tbaa !2446
  %1746 = xor i64 12, %1731
  %1747 = trunc i64 %1746 to i32
  %1748 = xor i32 %1747, %1735
  %1749 = lshr i32 %1748, 4
  %1750 = trunc i32 %1749 to i8
  %1751 = and i8 %1750, 1
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1751, i8* %1752, align 1, !tbaa !2447
  %1753 = icmp eq i32 %1735, 0
  %1754 = zext i1 %1753 to i8
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1754, i8* %1755, align 1, !tbaa !2448
  %1756 = lshr i32 %1735, 31
  %1757 = trunc i32 %1756 to i8
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1757, i8* %1758, align 1, !tbaa !2449
  %1759 = lshr i32 %1734, 31
  %1760 = xor i32 %1756, %1759
  %1761 = add nuw nsw i32 %1760, %1759
  %1762 = icmp eq i32 %1761, 2
  %1763 = zext i1 %1762 to i8
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1763, i8* %1764, align 1, !tbaa !2450
  %1765 = load i32, i32* %EDX
  %1766 = zext i32 %1765 to i64
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 3
  store i64 %1768, i64* %PC
  %1769 = shl i64 %1766, 32
  %1770 = ashr exact i64 %1769, 32
  store i64 %1770, i64* %RCX, align 8, !tbaa !2428
  %1771 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1772 = load i64, i64* %RAX
  %1773 = load i64, i64* %RCX
  %1774 = mul i64 %1773, 4
  %1775 = add i64 %1774, %1772
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 5
  store i64 %1777, i64* %PC
  %1778 = inttoptr i64 %1775 to float*
  %1779 = load float, float* %1778
  %1780 = bitcast i8* %1771 to float*
  store float %1779, float* %1780, align 1, !tbaa !2453
  %1781 = getelementptr inbounds i8, i8* %1771, i64 4
  %1782 = bitcast i8* %1781 to float*
  store float 0.000000e+00, float* %1782, align 1, !tbaa !2453
  %1783 = getelementptr inbounds i8, i8* %1771, i64 8
  %1784 = bitcast i8* %1783 to float*
  store float 0.000000e+00, float* %1784, align 1, !tbaa !2453
  %1785 = getelementptr inbounds i8, i8* %1771, i64 12
  %1786 = bitcast i8* %1785 to float*
  store float 0.000000e+00, float* %1786, align 1, !tbaa !2453
  %1787 = load i64, i64* %RBP
  %1788 = sub i64 %1787, 40
  %1789 = load i64, i64* %PC
  %1790 = add i64 %1789, 4
  store i64 %1790, i64* %PC
  %1791 = inttoptr i64 %1788 to i64*
  %1792 = load i64, i64* %1791
  store i64 %1792, i64* %RAX, align 8, !tbaa !2428
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 24
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 3
  store i64 %1796, i64* %PC
  %1797 = inttoptr i64 %1794 to i32*
  %1798 = load i32, i32* %1797
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RDX, align 8, !tbaa !2428
  %1800 = load i64, i64* %RBP
  %1801 = sub i64 %1800, 44
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 3
  store i64 %1803, i64* %PC
  %1804 = inttoptr i64 %1801 to i32*
  %1805 = load i32, i32* %1804
  %1806 = zext i32 %1805 to i64
  store i64 %1806, i64* %RSI, align 8, !tbaa !2428
  %1807 = load i64, i64* %RSI
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 3
  store i64 %1809, i64* %PC
  %1810 = trunc i64 %1807 to i32
  %1811 = sub i32 %1810, 12
  %1812 = zext i32 %1811 to i64
  store i64 %1812, i64* %RSI, align 8, !tbaa !2428
  %1813 = icmp ult i32 %1810, 12
  %1814 = zext i1 %1813 to i8
  %1815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1814, i8* %1815, align 1, !tbaa !2432
  %1816 = and i32 %1811, 255
  %1817 = call i32 @llvm.ctpop.i32(i32 %1816) #16
  %1818 = trunc i32 %1817 to i8
  %1819 = and i8 %1818, 1
  %1820 = xor i8 %1819, 1
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1820, i8* %1821, align 1, !tbaa !2446
  %1822 = xor i64 12, %1807
  %1823 = trunc i64 %1822 to i32
  %1824 = xor i32 %1823, %1811
  %1825 = lshr i32 %1824, 4
  %1826 = trunc i32 %1825 to i8
  %1827 = and i8 %1826, 1
  %1828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1827, i8* %1828, align 1, !tbaa !2447
  %1829 = icmp eq i32 %1811, 0
  %1830 = zext i1 %1829 to i8
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1830, i8* %1831, align 1, !tbaa !2448
  %1832 = lshr i32 %1811, 31
  %1833 = trunc i32 %1832 to i8
  %1834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1833, i8* %1834, align 1, !tbaa !2449
  %1835 = lshr i32 %1810, 31
  %1836 = xor i32 %1832, %1835
  %1837 = add nuw nsw i32 %1836, %1835
  %1838 = icmp eq i32 %1837, 2
  %1839 = zext i1 %1838 to i8
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1839, i8* %1840, align 1, !tbaa !2450
  %1841 = load i64, i64* %RDX
  %1842 = load i32, i32* %ESI
  %1843 = zext i32 %1842 to i64
  %1844 = load i64, i64* %PC
  %1845 = add i64 %1844, 3
  store i64 %1845, i64* %PC
  %1846 = shl i64 %1841, 32
  %1847 = ashr exact i64 %1846, 32
  %1848 = shl i64 %1843, 32
  %1849 = ashr exact i64 %1848, 32
  %1850 = mul nsw i64 %1849, %1847
  %1851 = trunc i64 %1850 to i32
  %1852 = and i64 %1850, 4294967295
  store i64 %1852, i64* %RDX, align 8, !tbaa !2428
  %1853 = shl i64 %1850, 32
  %1854 = ashr exact i64 %1853, 32
  %1855 = icmp ne i64 %1854, %1850
  %1856 = zext i1 %1855 to i8
  %1857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1856, i8* %1857, align 1, !tbaa !2432
  %1858 = and i32 %1851, 255
  %1859 = call i32 @llvm.ctpop.i32(i32 %1858) #16
  %1860 = trunc i32 %1859 to i8
  %1861 = and i8 %1860, 1
  %1862 = xor i8 %1861, 1
  %1863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1862, i8* %1863, align 1, !tbaa !2446
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1864, align 1, !tbaa !2447
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1865, align 1, !tbaa !2448
  %1866 = lshr i32 %1851, 31
  %1867 = trunc i32 %1866 to i8
  %1868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1867, i8* %1868, align 1, !tbaa !2449
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1856, i8* %1869, align 1, !tbaa !2450
  %1870 = load i64, i64* %RDX
  %1871 = load i64, i64* %RBP
  %1872 = sub i64 %1871, 48
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 3
  store i64 %1874, i64* %PC
  %1875 = trunc i64 %1870 to i32
  %1876 = inttoptr i64 %1872 to i32*
  %1877 = load i32, i32* %1876
  %1878 = add i32 %1877, %1875
  %1879 = zext i32 %1878 to i64
  store i64 %1879, i64* %RDX, align 8, !tbaa !2428
  %1880 = icmp ult i32 %1878, %1875
  %1881 = icmp ult i32 %1878, %1877
  %1882 = or i1 %1880, %1881
  %1883 = zext i1 %1882 to i8
  %1884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1883, i8* %1884, align 1, !tbaa !2432
  %1885 = and i32 %1878, 255
  %1886 = call i32 @llvm.ctpop.i32(i32 %1885) #16
  %1887 = trunc i32 %1886 to i8
  %1888 = and i8 %1887, 1
  %1889 = xor i8 %1888, 1
  %1890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1889, i8* %1890, align 1, !tbaa !2446
  %1891 = xor i32 %1877, %1875
  %1892 = xor i32 %1891, %1878
  %1893 = lshr i32 %1892, 4
  %1894 = trunc i32 %1893 to i8
  %1895 = and i8 %1894, 1
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1895, i8* %1896, align 1, !tbaa !2447
  %1897 = icmp eq i32 %1878, 0
  %1898 = zext i1 %1897 to i8
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1898, i8* %1899, align 1, !tbaa !2448
  %1900 = lshr i32 %1878, 31
  %1901 = trunc i32 %1900 to i8
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1901, i8* %1902, align 1, !tbaa !2449
  %1903 = lshr i32 %1875, 31
  %1904 = lshr i32 %1877, 31
  %1905 = xor i32 %1900, %1903
  %1906 = xor i32 %1900, %1904
  %1907 = add nuw nsw i32 %1905, %1906
  %1908 = icmp eq i32 %1907, 2
  %1909 = zext i1 %1908 to i8
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1909, i8* %1910, align 1, !tbaa !2450
  %1911 = load i32, i32* %EDX
  %1912 = zext i32 %1911 to i64
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 3
  store i64 %1914, i64* %PC
  %1915 = shl i64 %1912, 32
  %1916 = ashr exact i64 %1915, 32
  store i64 %1916, i64* %RCX, align 8, !tbaa !2428
  %1917 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1918 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1919 = load i64, i64* %RAX
  %1920 = load i64, i64* %RCX
  %1921 = mul i64 %1920, 4
  %1922 = add i64 %1921, %1919
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 5
  store i64 %1924, i64* %PC
  %1925 = bitcast i8* %1918 to <2 x float>*
  %1926 = load <2 x float>, <2 x float>* %1925, align 1
  %1927 = getelementptr inbounds i8, i8* %1918, i64 8
  %1928 = bitcast i8* %1927 to <2 x i32>*
  %1929 = load <2 x i32>, <2 x i32>* %1928, align 1
  %1930 = inttoptr i64 %1922 to float*
  %1931 = load float, float* %1930
  %1932 = extractelement <2 x float> %1926, i32 0
  %1933 = fmul float %1932, %1931
  %1934 = bitcast i8* %1917 to float*
  store float %1933, float* %1934, align 1, !tbaa !2453
  %1935 = bitcast <2 x float> %1926 to <2 x i32>
  %1936 = extractelement <2 x i32> %1935, i32 1
  %1937 = getelementptr inbounds i8, i8* %1917, i64 4
  %1938 = bitcast i8* %1937 to i32*
  store i32 %1936, i32* %1938, align 1, !tbaa !2453
  %1939 = extractelement <2 x i32> %1929, i32 0
  %1940 = getelementptr inbounds i8, i8* %1917, i64 8
  %1941 = bitcast i8* %1940 to i32*
  store i32 %1939, i32* %1941, align 1, !tbaa !2453
  %1942 = extractelement <2 x i32> %1929, i32 1
  %1943 = getelementptr inbounds i8, i8* %1917, i64 12
  %1944 = bitcast i8* %1943 to i32*
  store i32 %1942, i32* %1944, align 1, !tbaa !2453
  %1945 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1946 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1947 = bitcast %union.vec128_t* %XMM1 to i8*
  %1948 = load i64, i64* %PC
  %1949 = add i64 %1948, 4
  store i64 %1949, i64* %PC
  %1950 = bitcast i8* %1946 to <2 x float>*
  %1951 = load <2 x float>, <2 x float>* %1950, align 1
  %1952 = getelementptr inbounds i8, i8* %1946, i64 8
  %1953 = bitcast i8* %1952 to <2 x i32>*
  %1954 = load <2 x i32>, <2 x i32>* %1953, align 1
  %1955 = bitcast i8* %1947 to <2 x float>*
  %1956 = load <2 x float>, <2 x float>* %1955, align 1
  %1957 = extractelement <2 x float> %1951, i32 0
  %1958 = extractelement <2 x float> %1956, i32 0
  %1959 = fadd float %1957, %1958
  %1960 = bitcast i8* %1945 to float*
  store float %1959, float* %1960, align 1, !tbaa !2453
  %1961 = bitcast <2 x float> %1951 to <2 x i32>
  %1962 = extractelement <2 x i32> %1961, i32 1
  %1963 = getelementptr inbounds i8, i8* %1945, i64 4
  %1964 = bitcast i8* %1963 to i32*
  store i32 %1962, i32* %1964, align 1, !tbaa !2453
  %1965 = extractelement <2 x i32> %1954, i32 0
  %1966 = getelementptr inbounds i8, i8* %1945, i64 8
  %1967 = bitcast i8* %1966 to i32*
  store i32 %1965, i32* %1967, align 1, !tbaa !2453
  %1968 = extractelement <2 x i32> %1954, i32 1
  %1969 = getelementptr inbounds i8, i8* %1945, i64 12
  %1970 = bitcast i8* %1969 to i32*
  store i32 %1968, i32* %1970, align 1, !tbaa !2453
  %1971 = load i64, i64* %RBP
  %1972 = sub i64 %1971, 32
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 4
  store i64 %1974, i64* %PC
  %1975 = inttoptr i64 %1972 to i64*
  %1976 = load i64, i64* %1975
  store i64 %1976, i64* %RAX, align 8, !tbaa !2428
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 44
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 3
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to i32*
  %1982 = load i32, i32* %1981
  %1983 = zext i32 %1982 to i64
  store i64 %1983, i64* %RDX, align 8, !tbaa !2428
  %1984 = load i64, i64* %RDX
  %1985 = load i64, i64* %PC
  %1986 = add i64 %1985, 3
  store i64 %1986, i64* %PC
  %1987 = trunc i64 %1984 to i32
  %1988 = sub i32 %1987, 11
  %1989 = zext i32 %1988 to i64
  store i64 %1989, i64* %RDX, align 8, !tbaa !2428
  %1990 = icmp ult i32 %1987, 11
  %1991 = zext i1 %1990 to i8
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1991, i8* %1992, align 1, !tbaa !2432
  %1993 = and i32 %1988, 255
  %1994 = call i32 @llvm.ctpop.i32(i32 %1993) #16
  %1995 = trunc i32 %1994 to i8
  %1996 = and i8 %1995, 1
  %1997 = xor i8 %1996, 1
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1997, i8* %1998, align 1, !tbaa !2446
  %1999 = xor i64 11, %1984
  %2000 = trunc i64 %1999 to i32
  %2001 = xor i32 %2000, %1988
  %2002 = lshr i32 %2001, 4
  %2003 = trunc i32 %2002 to i8
  %2004 = and i8 %2003, 1
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2004, i8* %2005, align 1, !tbaa !2447
  %2006 = icmp eq i32 %1988, 0
  %2007 = zext i1 %2006 to i8
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2007, i8* %2008, align 1, !tbaa !2448
  %2009 = lshr i32 %1988, 31
  %2010 = trunc i32 %2009 to i8
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2010, i8* %2011, align 1, !tbaa !2449
  %2012 = lshr i32 %1987, 31
  %2013 = xor i32 %2009, %2012
  %2014 = add nuw nsw i32 %2013, %2012
  %2015 = icmp eq i32 %2014, 2
  %2016 = zext i1 %2015 to i8
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2016, i8* %2017, align 1, !tbaa !2450
  %2018 = load i32, i32* %EDX
  %2019 = zext i32 %2018 to i64
  %2020 = load i64, i64* %PC
  %2021 = add i64 %2020, 3
  store i64 %2021, i64* %PC
  %2022 = shl i64 %2019, 32
  %2023 = ashr exact i64 %2022, 32
  store i64 %2023, i64* %RCX, align 8, !tbaa !2428
  %2024 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2025 = load i64, i64* %RAX
  %2026 = load i64, i64* %RCX
  %2027 = mul i64 %2026, 4
  %2028 = add i64 %2027, %2025
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 5
  store i64 %2030, i64* %PC
  %2031 = inttoptr i64 %2028 to float*
  %2032 = load float, float* %2031
  %2033 = bitcast i8* %2024 to float*
  store float %2032, float* %2033, align 1, !tbaa !2453
  %2034 = getelementptr inbounds i8, i8* %2024, i64 4
  %2035 = bitcast i8* %2034 to float*
  store float 0.000000e+00, float* %2035, align 1, !tbaa !2453
  %2036 = getelementptr inbounds i8, i8* %2024, i64 8
  %2037 = bitcast i8* %2036 to float*
  store float 0.000000e+00, float* %2037, align 1, !tbaa !2453
  %2038 = getelementptr inbounds i8, i8* %2024, i64 12
  %2039 = bitcast i8* %2038 to float*
  store float 0.000000e+00, float* %2039, align 1, !tbaa !2453
  %2040 = load i64, i64* %RBP
  %2041 = sub i64 %2040, 40
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 4
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2041 to i64*
  %2045 = load i64, i64* %2044
  store i64 %2045, i64* %RAX, align 8, !tbaa !2428
  %2046 = load i64, i64* %RBP
  %2047 = sub i64 %2046, 24
  %2048 = load i64, i64* %PC
  %2049 = add i64 %2048, 3
  store i64 %2049, i64* %PC
  %2050 = inttoptr i64 %2047 to i32*
  %2051 = load i32, i32* %2050
  %2052 = zext i32 %2051 to i64
  store i64 %2052, i64* %RDX, align 8, !tbaa !2428
  %2053 = load i64, i64* %RBP
  %2054 = sub i64 %2053, 44
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 3
  store i64 %2056, i64* %PC
  %2057 = inttoptr i64 %2054 to i32*
  %2058 = load i32, i32* %2057
  %2059 = zext i32 %2058 to i64
  store i64 %2059, i64* %RSI, align 8, !tbaa !2428
  %2060 = load i64, i64* %RSI
  %2061 = load i64, i64* %PC
  %2062 = add i64 %2061, 3
  store i64 %2062, i64* %PC
  %2063 = trunc i64 %2060 to i32
  %2064 = sub i32 %2063, 11
  %2065 = zext i32 %2064 to i64
  store i64 %2065, i64* %RSI, align 8, !tbaa !2428
  %2066 = icmp ult i32 %2063, 11
  %2067 = zext i1 %2066 to i8
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2067, i8* %2068, align 1, !tbaa !2432
  %2069 = and i32 %2064, 255
  %2070 = call i32 @llvm.ctpop.i32(i32 %2069) #16
  %2071 = trunc i32 %2070 to i8
  %2072 = and i8 %2071, 1
  %2073 = xor i8 %2072, 1
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2073, i8* %2074, align 1, !tbaa !2446
  %2075 = xor i64 11, %2060
  %2076 = trunc i64 %2075 to i32
  %2077 = xor i32 %2076, %2064
  %2078 = lshr i32 %2077, 4
  %2079 = trunc i32 %2078 to i8
  %2080 = and i8 %2079, 1
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2080, i8* %2081, align 1, !tbaa !2447
  %2082 = icmp eq i32 %2064, 0
  %2083 = zext i1 %2082 to i8
  %2084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2083, i8* %2084, align 1, !tbaa !2448
  %2085 = lshr i32 %2064, 31
  %2086 = trunc i32 %2085 to i8
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2086, i8* %2087, align 1, !tbaa !2449
  %2088 = lshr i32 %2063, 31
  %2089 = xor i32 %2085, %2088
  %2090 = add nuw nsw i32 %2089, %2088
  %2091 = icmp eq i32 %2090, 2
  %2092 = zext i1 %2091 to i8
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2092, i8* %2093, align 1, !tbaa !2450
  %2094 = load i64, i64* %RDX
  %2095 = load i32, i32* %ESI
  %2096 = zext i32 %2095 to i64
  %2097 = load i64, i64* %PC
  %2098 = add i64 %2097, 3
  store i64 %2098, i64* %PC
  %2099 = shl i64 %2094, 32
  %2100 = ashr exact i64 %2099, 32
  %2101 = shl i64 %2096, 32
  %2102 = ashr exact i64 %2101, 32
  %2103 = mul nsw i64 %2102, %2100
  %2104 = trunc i64 %2103 to i32
  %2105 = and i64 %2103, 4294967295
  store i64 %2105, i64* %RDX, align 8, !tbaa !2428
  %2106 = shl i64 %2103, 32
  %2107 = ashr exact i64 %2106, 32
  %2108 = icmp ne i64 %2107, %2103
  %2109 = zext i1 %2108 to i8
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2109, i8* %2110, align 1, !tbaa !2432
  %2111 = and i32 %2104, 255
  %2112 = call i32 @llvm.ctpop.i32(i32 %2111) #16
  %2113 = trunc i32 %2112 to i8
  %2114 = and i8 %2113, 1
  %2115 = xor i8 %2114, 1
  %2116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2115, i8* %2116, align 1, !tbaa !2446
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2117, align 1, !tbaa !2447
  %2118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2118, align 1, !tbaa !2448
  %2119 = lshr i32 %2104, 31
  %2120 = trunc i32 %2119 to i8
  %2121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2120, i8* %2121, align 1, !tbaa !2449
  %2122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2109, i8* %2122, align 1, !tbaa !2450
  %2123 = load i64, i64* %RDX
  %2124 = load i64, i64* %RBP
  %2125 = sub i64 %2124, 48
  %2126 = load i64, i64* %PC
  %2127 = add i64 %2126, 3
  store i64 %2127, i64* %PC
  %2128 = trunc i64 %2123 to i32
  %2129 = inttoptr i64 %2125 to i32*
  %2130 = load i32, i32* %2129
  %2131 = add i32 %2130, %2128
  %2132 = zext i32 %2131 to i64
  store i64 %2132, i64* %RDX, align 8, !tbaa !2428
  %2133 = icmp ult i32 %2131, %2128
  %2134 = icmp ult i32 %2131, %2130
  %2135 = or i1 %2133, %2134
  %2136 = zext i1 %2135 to i8
  %2137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2136, i8* %2137, align 1, !tbaa !2432
  %2138 = and i32 %2131, 255
  %2139 = call i32 @llvm.ctpop.i32(i32 %2138) #16
  %2140 = trunc i32 %2139 to i8
  %2141 = and i8 %2140, 1
  %2142 = xor i8 %2141, 1
  %2143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2142, i8* %2143, align 1, !tbaa !2446
  %2144 = xor i32 %2130, %2128
  %2145 = xor i32 %2144, %2131
  %2146 = lshr i32 %2145, 4
  %2147 = trunc i32 %2146 to i8
  %2148 = and i8 %2147, 1
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2148, i8* %2149, align 1, !tbaa !2447
  %2150 = icmp eq i32 %2131, 0
  %2151 = zext i1 %2150 to i8
  %2152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2151, i8* %2152, align 1, !tbaa !2448
  %2153 = lshr i32 %2131, 31
  %2154 = trunc i32 %2153 to i8
  %2155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2154, i8* %2155, align 1, !tbaa !2449
  %2156 = lshr i32 %2128, 31
  %2157 = lshr i32 %2130, 31
  %2158 = xor i32 %2153, %2156
  %2159 = xor i32 %2153, %2157
  %2160 = add nuw nsw i32 %2158, %2159
  %2161 = icmp eq i32 %2160, 2
  %2162 = zext i1 %2161 to i8
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2162, i8* %2163, align 1, !tbaa !2450
  %2164 = load i32, i32* %EDX
  %2165 = zext i32 %2164 to i64
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 3
  store i64 %2167, i64* %PC
  %2168 = shl i64 %2165, 32
  %2169 = ashr exact i64 %2168, 32
  store i64 %2169, i64* %RCX, align 8, !tbaa !2428
  %2170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2171 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2172 = load i64, i64* %RAX
  %2173 = load i64, i64* %RCX
  %2174 = mul i64 %2173, 4
  %2175 = add i64 %2174, %2172
  %2176 = load i64, i64* %PC
  %2177 = add i64 %2176, 5
  store i64 %2177, i64* %PC
  %2178 = bitcast i8* %2171 to <2 x float>*
  %2179 = load <2 x float>, <2 x float>* %2178, align 1
  %2180 = getelementptr inbounds i8, i8* %2171, i64 8
  %2181 = bitcast i8* %2180 to <2 x i32>*
  %2182 = load <2 x i32>, <2 x i32>* %2181, align 1
  %2183 = inttoptr i64 %2175 to float*
  %2184 = load float, float* %2183
  %2185 = extractelement <2 x float> %2179, i32 0
  %2186 = fmul float %2185, %2184
  %2187 = bitcast i8* %2170 to float*
  store float %2186, float* %2187, align 1, !tbaa !2453
  %2188 = bitcast <2 x float> %2179 to <2 x i32>
  %2189 = extractelement <2 x i32> %2188, i32 1
  %2190 = getelementptr inbounds i8, i8* %2170, i64 4
  %2191 = bitcast i8* %2190 to i32*
  store i32 %2189, i32* %2191, align 1, !tbaa !2453
  %2192 = extractelement <2 x i32> %2182, i32 0
  %2193 = getelementptr inbounds i8, i8* %2170, i64 8
  %2194 = bitcast i8* %2193 to i32*
  store i32 %2192, i32* %2194, align 1, !tbaa !2453
  %2195 = extractelement <2 x i32> %2182, i32 1
  %2196 = getelementptr inbounds i8, i8* %2170, i64 12
  %2197 = bitcast i8* %2196 to i32*
  store i32 %2195, i32* %2197, align 1, !tbaa !2453
  %2198 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2199 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2200 = bitcast %union.vec128_t* %XMM1 to i8*
  %2201 = load i64, i64* %PC
  %2202 = add i64 %2201, 4
  store i64 %2202, i64* %PC
  %2203 = bitcast i8* %2199 to <2 x float>*
  %2204 = load <2 x float>, <2 x float>* %2203, align 1
  %2205 = getelementptr inbounds i8, i8* %2199, i64 8
  %2206 = bitcast i8* %2205 to <2 x i32>*
  %2207 = load <2 x i32>, <2 x i32>* %2206, align 1
  %2208 = bitcast i8* %2200 to <2 x float>*
  %2209 = load <2 x float>, <2 x float>* %2208, align 1
  %2210 = extractelement <2 x float> %2204, i32 0
  %2211 = extractelement <2 x float> %2209, i32 0
  %2212 = fadd float %2210, %2211
  %2213 = bitcast i8* %2198 to float*
  store float %2212, float* %2213, align 1, !tbaa !2453
  %2214 = bitcast <2 x float> %2204 to <2 x i32>
  %2215 = extractelement <2 x i32> %2214, i32 1
  %2216 = getelementptr inbounds i8, i8* %2198, i64 4
  %2217 = bitcast i8* %2216 to i32*
  store i32 %2215, i32* %2217, align 1, !tbaa !2453
  %2218 = extractelement <2 x i32> %2207, i32 0
  %2219 = getelementptr inbounds i8, i8* %2198, i64 8
  %2220 = bitcast i8* %2219 to i32*
  store i32 %2218, i32* %2220, align 1, !tbaa !2453
  %2221 = extractelement <2 x i32> %2207, i32 1
  %2222 = getelementptr inbounds i8, i8* %2198, i64 12
  %2223 = bitcast i8* %2222 to i32*
  store i32 %2221, i32* %2223, align 1, !tbaa !2453
  %2224 = load i64, i64* %RBP
  %2225 = sub i64 %2224, 32
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 4
  store i64 %2227, i64* %PC
  %2228 = inttoptr i64 %2225 to i64*
  %2229 = load i64, i64* %2228
  store i64 %2229, i64* %RAX, align 8, !tbaa !2428
  %2230 = load i64, i64* %RBP
  %2231 = sub i64 %2230, 44
  %2232 = load i64, i64* %PC
  %2233 = add i64 %2232, 3
  store i64 %2233, i64* %PC
  %2234 = inttoptr i64 %2231 to i32*
  %2235 = load i32, i32* %2234
  %2236 = zext i32 %2235 to i64
  store i64 %2236, i64* %RDX, align 8, !tbaa !2428
  %2237 = load i64, i64* %RDX
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 3
  store i64 %2239, i64* %PC
  %2240 = trunc i64 %2237 to i32
  %2241 = sub i32 %2240, 10
  %2242 = zext i32 %2241 to i64
  store i64 %2242, i64* %RDX, align 8, !tbaa !2428
  %2243 = icmp ult i32 %2240, 10
  %2244 = zext i1 %2243 to i8
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2244, i8* %2245, align 1, !tbaa !2432
  %2246 = and i32 %2241, 255
  %2247 = call i32 @llvm.ctpop.i32(i32 %2246) #16
  %2248 = trunc i32 %2247 to i8
  %2249 = and i8 %2248, 1
  %2250 = xor i8 %2249, 1
  %2251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2250, i8* %2251, align 1, !tbaa !2446
  %2252 = xor i64 10, %2237
  %2253 = trunc i64 %2252 to i32
  %2254 = xor i32 %2253, %2241
  %2255 = lshr i32 %2254, 4
  %2256 = trunc i32 %2255 to i8
  %2257 = and i8 %2256, 1
  %2258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2257, i8* %2258, align 1, !tbaa !2447
  %2259 = icmp eq i32 %2241, 0
  %2260 = zext i1 %2259 to i8
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2260, i8* %2261, align 1, !tbaa !2448
  %2262 = lshr i32 %2241, 31
  %2263 = trunc i32 %2262 to i8
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2263, i8* %2264, align 1, !tbaa !2449
  %2265 = lshr i32 %2240, 31
  %2266 = xor i32 %2262, %2265
  %2267 = add nuw nsw i32 %2266, %2265
  %2268 = icmp eq i32 %2267, 2
  %2269 = zext i1 %2268 to i8
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2269, i8* %2270, align 1, !tbaa !2450
  %2271 = load i32, i32* %EDX
  %2272 = zext i32 %2271 to i64
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 3
  store i64 %2274, i64* %PC
  %2275 = shl i64 %2272, 32
  %2276 = ashr exact i64 %2275, 32
  store i64 %2276, i64* %RCX, align 8, !tbaa !2428
  %2277 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2278 = load i64, i64* %RAX
  %2279 = load i64, i64* %RCX
  %2280 = mul i64 %2279, 4
  %2281 = add i64 %2280, %2278
  %2282 = load i64, i64* %PC
  %2283 = add i64 %2282, 5
  store i64 %2283, i64* %PC
  %2284 = inttoptr i64 %2281 to float*
  %2285 = load float, float* %2284
  %2286 = bitcast i8* %2277 to float*
  store float %2285, float* %2286, align 1, !tbaa !2453
  %2287 = getelementptr inbounds i8, i8* %2277, i64 4
  %2288 = bitcast i8* %2287 to float*
  store float 0.000000e+00, float* %2288, align 1, !tbaa !2453
  %2289 = getelementptr inbounds i8, i8* %2277, i64 8
  %2290 = bitcast i8* %2289 to float*
  store float 0.000000e+00, float* %2290, align 1, !tbaa !2453
  %2291 = getelementptr inbounds i8, i8* %2277, i64 12
  %2292 = bitcast i8* %2291 to float*
  store float 0.000000e+00, float* %2292, align 1, !tbaa !2453
  %2293 = load i64, i64* %RBP
  %2294 = sub i64 %2293, 40
  %2295 = load i64, i64* %PC
  %2296 = add i64 %2295, 4
  store i64 %2296, i64* %PC
  %2297 = inttoptr i64 %2294 to i64*
  %2298 = load i64, i64* %2297
  store i64 %2298, i64* %RAX, align 8, !tbaa !2428
  %2299 = load i64, i64* %RBP
  %2300 = sub i64 %2299, 24
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 3
  store i64 %2302, i64* %PC
  %2303 = inttoptr i64 %2300 to i32*
  %2304 = load i32, i32* %2303
  %2305 = zext i32 %2304 to i64
  store i64 %2305, i64* %RDX, align 8, !tbaa !2428
  %2306 = load i64, i64* %RBP
  %2307 = sub i64 %2306, 44
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 3
  store i64 %2309, i64* %PC
  %2310 = inttoptr i64 %2307 to i32*
  %2311 = load i32, i32* %2310
  %2312 = zext i32 %2311 to i64
  store i64 %2312, i64* %RSI, align 8, !tbaa !2428
  %2313 = load i64, i64* %RSI
  %2314 = load i64, i64* %PC
  %2315 = add i64 %2314, 3
  store i64 %2315, i64* %PC
  %2316 = trunc i64 %2313 to i32
  %2317 = sub i32 %2316, 10
  %2318 = zext i32 %2317 to i64
  store i64 %2318, i64* %RSI, align 8, !tbaa !2428
  %2319 = icmp ult i32 %2316, 10
  %2320 = zext i1 %2319 to i8
  %2321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2320, i8* %2321, align 1, !tbaa !2432
  %2322 = and i32 %2317, 255
  %2323 = call i32 @llvm.ctpop.i32(i32 %2322) #16
  %2324 = trunc i32 %2323 to i8
  %2325 = and i8 %2324, 1
  %2326 = xor i8 %2325, 1
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2326, i8* %2327, align 1, !tbaa !2446
  %2328 = xor i64 10, %2313
  %2329 = trunc i64 %2328 to i32
  %2330 = xor i32 %2329, %2317
  %2331 = lshr i32 %2330, 4
  %2332 = trunc i32 %2331 to i8
  %2333 = and i8 %2332, 1
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2333, i8* %2334, align 1, !tbaa !2447
  %2335 = icmp eq i32 %2317, 0
  %2336 = zext i1 %2335 to i8
  %2337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2336, i8* %2337, align 1, !tbaa !2448
  %2338 = lshr i32 %2317, 31
  %2339 = trunc i32 %2338 to i8
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2339, i8* %2340, align 1, !tbaa !2449
  %2341 = lshr i32 %2316, 31
  %2342 = xor i32 %2338, %2341
  %2343 = add nuw nsw i32 %2342, %2341
  %2344 = icmp eq i32 %2343, 2
  %2345 = zext i1 %2344 to i8
  %2346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2345, i8* %2346, align 1, !tbaa !2450
  %2347 = load i64, i64* %RDX
  %2348 = load i32, i32* %ESI
  %2349 = zext i32 %2348 to i64
  %2350 = load i64, i64* %PC
  %2351 = add i64 %2350, 3
  store i64 %2351, i64* %PC
  %2352 = shl i64 %2347, 32
  %2353 = ashr exact i64 %2352, 32
  %2354 = shl i64 %2349, 32
  %2355 = ashr exact i64 %2354, 32
  %2356 = mul nsw i64 %2355, %2353
  %2357 = trunc i64 %2356 to i32
  %2358 = and i64 %2356, 4294967295
  store i64 %2358, i64* %RDX, align 8, !tbaa !2428
  %2359 = shl i64 %2356, 32
  %2360 = ashr exact i64 %2359, 32
  %2361 = icmp ne i64 %2360, %2356
  %2362 = zext i1 %2361 to i8
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2362, i8* %2363, align 1, !tbaa !2432
  %2364 = and i32 %2357, 255
  %2365 = call i32 @llvm.ctpop.i32(i32 %2364) #16
  %2366 = trunc i32 %2365 to i8
  %2367 = and i8 %2366, 1
  %2368 = xor i8 %2367, 1
  %2369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2368, i8* %2369, align 1, !tbaa !2446
  %2370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2370, align 1, !tbaa !2447
  %2371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2371, align 1, !tbaa !2448
  %2372 = lshr i32 %2357, 31
  %2373 = trunc i32 %2372 to i8
  %2374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2373, i8* %2374, align 1, !tbaa !2449
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2362, i8* %2375, align 1, !tbaa !2450
  %2376 = load i64, i64* %RDX
  %2377 = load i64, i64* %RBP
  %2378 = sub i64 %2377, 48
  %2379 = load i64, i64* %PC
  %2380 = add i64 %2379, 3
  store i64 %2380, i64* %PC
  %2381 = trunc i64 %2376 to i32
  %2382 = inttoptr i64 %2378 to i32*
  %2383 = load i32, i32* %2382
  %2384 = add i32 %2383, %2381
  %2385 = zext i32 %2384 to i64
  store i64 %2385, i64* %RDX, align 8, !tbaa !2428
  %2386 = icmp ult i32 %2384, %2381
  %2387 = icmp ult i32 %2384, %2383
  %2388 = or i1 %2386, %2387
  %2389 = zext i1 %2388 to i8
  %2390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2389, i8* %2390, align 1, !tbaa !2432
  %2391 = and i32 %2384, 255
  %2392 = call i32 @llvm.ctpop.i32(i32 %2391) #16
  %2393 = trunc i32 %2392 to i8
  %2394 = and i8 %2393, 1
  %2395 = xor i8 %2394, 1
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2395, i8* %2396, align 1, !tbaa !2446
  %2397 = xor i32 %2383, %2381
  %2398 = xor i32 %2397, %2384
  %2399 = lshr i32 %2398, 4
  %2400 = trunc i32 %2399 to i8
  %2401 = and i8 %2400, 1
  %2402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2401, i8* %2402, align 1, !tbaa !2447
  %2403 = icmp eq i32 %2384, 0
  %2404 = zext i1 %2403 to i8
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2404, i8* %2405, align 1, !tbaa !2448
  %2406 = lshr i32 %2384, 31
  %2407 = trunc i32 %2406 to i8
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2407, i8* %2408, align 1, !tbaa !2449
  %2409 = lshr i32 %2381, 31
  %2410 = lshr i32 %2383, 31
  %2411 = xor i32 %2406, %2409
  %2412 = xor i32 %2406, %2410
  %2413 = add nuw nsw i32 %2411, %2412
  %2414 = icmp eq i32 %2413, 2
  %2415 = zext i1 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2415, i8* %2416, align 1, !tbaa !2450
  %2417 = load i32, i32* %EDX
  %2418 = zext i32 %2417 to i64
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 3
  store i64 %2420, i64* %PC
  %2421 = shl i64 %2418, 32
  %2422 = ashr exact i64 %2421, 32
  store i64 %2422, i64* %RCX, align 8, !tbaa !2428
  %2423 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2424 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2425 = load i64, i64* %RAX
  %2426 = load i64, i64* %RCX
  %2427 = mul i64 %2426, 4
  %2428 = add i64 %2427, %2425
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 5
  store i64 %2430, i64* %PC
  %2431 = bitcast i8* %2424 to <2 x float>*
  %2432 = load <2 x float>, <2 x float>* %2431, align 1
  %2433 = getelementptr inbounds i8, i8* %2424, i64 8
  %2434 = bitcast i8* %2433 to <2 x i32>*
  %2435 = load <2 x i32>, <2 x i32>* %2434, align 1
  %2436 = inttoptr i64 %2428 to float*
  %2437 = load float, float* %2436
  %2438 = extractelement <2 x float> %2432, i32 0
  %2439 = fmul float %2438, %2437
  %2440 = bitcast i8* %2423 to float*
  store float %2439, float* %2440, align 1, !tbaa !2453
  %2441 = bitcast <2 x float> %2432 to <2 x i32>
  %2442 = extractelement <2 x i32> %2441, i32 1
  %2443 = getelementptr inbounds i8, i8* %2423, i64 4
  %2444 = bitcast i8* %2443 to i32*
  store i32 %2442, i32* %2444, align 1, !tbaa !2453
  %2445 = extractelement <2 x i32> %2435, i32 0
  %2446 = getelementptr inbounds i8, i8* %2423, i64 8
  %2447 = bitcast i8* %2446 to i32*
  store i32 %2445, i32* %2447, align 1, !tbaa !2453
  %2448 = extractelement <2 x i32> %2435, i32 1
  %2449 = getelementptr inbounds i8, i8* %2423, i64 12
  %2450 = bitcast i8* %2449 to i32*
  store i32 %2448, i32* %2450, align 1, !tbaa !2453
  %2451 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2452 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2453 = bitcast %union.vec128_t* %XMM1 to i8*
  %2454 = load i64, i64* %PC
  %2455 = add i64 %2454, 4
  store i64 %2455, i64* %PC
  %2456 = bitcast i8* %2452 to <2 x float>*
  %2457 = load <2 x float>, <2 x float>* %2456, align 1
  %2458 = getelementptr inbounds i8, i8* %2452, i64 8
  %2459 = bitcast i8* %2458 to <2 x i32>*
  %2460 = load <2 x i32>, <2 x i32>* %2459, align 1
  %2461 = bitcast i8* %2453 to <2 x float>*
  %2462 = load <2 x float>, <2 x float>* %2461, align 1
  %2463 = extractelement <2 x float> %2457, i32 0
  %2464 = extractelement <2 x float> %2462, i32 0
  %2465 = fadd float %2463, %2464
  %2466 = bitcast i8* %2451 to float*
  store float %2465, float* %2466, align 1, !tbaa !2453
  %2467 = bitcast <2 x float> %2457 to <2 x i32>
  %2468 = extractelement <2 x i32> %2467, i32 1
  %2469 = getelementptr inbounds i8, i8* %2451, i64 4
  %2470 = bitcast i8* %2469 to i32*
  store i32 %2468, i32* %2470, align 1, !tbaa !2453
  %2471 = extractelement <2 x i32> %2460, i32 0
  %2472 = getelementptr inbounds i8, i8* %2451, i64 8
  %2473 = bitcast i8* %2472 to i32*
  store i32 %2471, i32* %2473, align 1, !tbaa !2453
  %2474 = extractelement <2 x i32> %2460, i32 1
  %2475 = getelementptr inbounds i8, i8* %2451, i64 12
  %2476 = bitcast i8* %2475 to i32*
  store i32 %2474, i32* %2476, align 1, !tbaa !2453
  %2477 = load i64, i64* %RBP
  %2478 = sub i64 %2477, 32
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 4
  store i64 %2480, i64* %PC
  %2481 = inttoptr i64 %2478 to i64*
  %2482 = load i64, i64* %2481
  store i64 %2482, i64* %RAX, align 8, !tbaa !2428
  %2483 = load i64, i64* %RBP
  %2484 = sub i64 %2483, 44
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 3
  store i64 %2486, i64* %PC
  %2487 = inttoptr i64 %2484 to i32*
  %2488 = load i32, i32* %2487
  %2489 = zext i32 %2488 to i64
  store i64 %2489, i64* %RDX, align 8, !tbaa !2428
  %2490 = load i64, i64* %RDX
  %2491 = load i64, i64* %PC
  %2492 = add i64 %2491, 3
  store i64 %2492, i64* %PC
  %2493 = trunc i64 %2490 to i32
  %2494 = sub i32 %2493, 9
  %2495 = zext i32 %2494 to i64
  store i64 %2495, i64* %RDX, align 8, !tbaa !2428
  %2496 = icmp ult i32 %2493, 9
  %2497 = zext i1 %2496 to i8
  %2498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2497, i8* %2498, align 1, !tbaa !2432
  %2499 = and i32 %2494, 255
  %2500 = call i32 @llvm.ctpop.i32(i32 %2499) #16
  %2501 = trunc i32 %2500 to i8
  %2502 = and i8 %2501, 1
  %2503 = xor i8 %2502, 1
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2503, i8* %2504, align 1, !tbaa !2446
  %2505 = xor i64 9, %2490
  %2506 = trunc i64 %2505 to i32
  %2507 = xor i32 %2506, %2494
  %2508 = lshr i32 %2507, 4
  %2509 = trunc i32 %2508 to i8
  %2510 = and i8 %2509, 1
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2510, i8* %2511, align 1, !tbaa !2447
  %2512 = icmp eq i32 %2494, 0
  %2513 = zext i1 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2513, i8* %2514, align 1, !tbaa !2448
  %2515 = lshr i32 %2494, 31
  %2516 = trunc i32 %2515 to i8
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2516, i8* %2517, align 1, !tbaa !2449
  %2518 = lshr i32 %2493, 31
  %2519 = xor i32 %2515, %2518
  %2520 = add nuw nsw i32 %2519, %2518
  %2521 = icmp eq i32 %2520, 2
  %2522 = zext i1 %2521 to i8
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2522, i8* %2523, align 1, !tbaa !2450
  %2524 = load i32, i32* %EDX
  %2525 = zext i32 %2524 to i64
  %2526 = load i64, i64* %PC
  %2527 = add i64 %2526, 3
  store i64 %2527, i64* %PC
  %2528 = shl i64 %2525, 32
  %2529 = ashr exact i64 %2528, 32
  store i64 %2529, i64* %RCX, align 8, !tbaa !2428
  %2530 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2531 = load i64, i64* %RAX
  %2532 = load i64, i64* %RCX
  %2533 = mul i64 %2532, 4
  %2534 = add i64 %2533, %2531
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 5
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2534 to float*
  %2538 = load float, float* %2537
  %2539 = bitcast i8* %2530 to float*
  store float %2538, float* %2539, align 1, !tbaa !2453
  %2540 = getelementptr inbounds i8, i8* %2530, i64 4
  %2541 = bitcast i8* %2540 to float*
  store float 0.000000e+00, float* %2541, align 1, !tbaa !2453
  %2542 = getelementptr inbounds i8, i8* %2530, i64 8
  %2543 = bitcast i8* %2542 to float*
  store float 0.000000e+00, float* %2543, align 1, !tbaa !2453
  %2544 = getelementptr inbounds i8, i8* %2530, i64 12
  %2545 = bitcast i8* %2544 to float*
  store float 0.000000e+00, float* %2545, align 1, !tbaa !2453
  %2546 = load i64, i64* %RBP
  %2547 = sub i64 %2546, 40
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 4
  store i64 %2549, i64* %PC
  %2550 = inttoptr i64 %2547 to i64*
  %2551 = load i64, i64* %2550
  store i64 %2551, i64* %RAX, align 8, !tbaa !2428
  %2552 = load i64, i64* %RBP
  %2553 = sub i64 %2552, 24
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 3
  store i64 %2555, i64* %PC
  %2556 = inttoptr i64 %2553 to i32*
  %2557 = load i32, i32* %2556
  %2558 = zext i32 %2557 to i64
  store i64 %2558, i64* %RDX, align 8, !tbaa !2428
  %2559 = load i64, i64* %RBP
  %2560 = sub i64 %2559, 44
  %2561 = load i64, i64* %PC
  %2562 = add i64 %2561, 3
  store i64 %2562, i64* %PC
  %2563 = inttoptr i64 %2560 to i32*
  %2564 = load i32, i32* %2563
  %2565 = zext i32 %2564 to i64
  store i64 %2565, i64* %RSI, align 8, !tbaa !2428
  %2566 = load i64, i64* %RSI
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 3
  store i64 %2568, i64* %PC
  %2569 = trunc i64 %2566 to i32
  %2570 = sub i32 %2569, 9
  %2571 = zext i32 %2570 to i64
  store i64 %2571, i64* %RSI, align 8, !tbaa !2428
  %2572 = icmp ult i32 %2569, 9
  %2573 = zext i1 %2572 to i8
  %2574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2573, i8* %2574, align 1, !tbaa !2432
  %2575 = and i32 %2570, 255
  %2576 = call i32 @llvm.ctpop.i32(i32 %2575) #16
  %2577 = trunc i32 %2576 to i8
  %2578 = and i8 %2577, 1
  %2579 = xor i8 %2578, 1
  %2580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2579, i8* %2580, align 1, !tbaa !2446
  %2581 = xor i64 9, %2566
  %2582 = trunc i64 %2581 to i32
  %2583 = xor i32 %2582, %2570
  %2584 = lshr i32 %2583, 4
  %2585 = trunc i32 %2584 to i8
  %2586 = and i8 %2585, 1
  %2587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2586, i8* %2587, align 1, !tbaa !2447
  %2588 = icmp eq i32 %2570, 0
  %2589 = zext i1 %2588 to i8
  %2590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2589, i8* %2590, align 1, !tbaa !2448
  %2591 = lshr i32 %2570, 31
  %2592 = trunc i32 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2592, i8* %2593, align 1, !tbaa !2449
  %2594 = lshr i32 %2569, 31
  %2595 = xor i32 %2591, %2594
  %2596 = add nuw nsw i32 %2595, %2594
  %2597 = icmp eq i32 %2596, 2
  %2598 = zext i1 %2597 to i8
  %2599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2598, i8* %2599, align 1, !tbaa !2450
  %2600 = load i64, i64* %RDX
  %2601 = load i32, i32* %ESI
  %2602 = zext i32 %2601 to i64
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 3
  store i64 %2604, i64* %PC
  %2605 = shl i64 %2600, 32
  %2606 = ashr exact i64 %2605, 32
  %2607 = shl i64 %2602, 32
  %2608 = ashr exact i64 %2607, 32
  %2609 = mul nsw i64 %2608, %2606
  %2610 = trunc i64 %2609 to i32
  %2611 = and i64 %2609, 4294967295
  store i64 %2611, i64* %RDX, align 8, !tbaa !2428
  %2612 = shl i64 %2609, 32
  %2613 = ashr exact i64 %2612, 32
  %2614 = icmp ne i64 %2613, %2609
  %2615 = zext i1 %2614 to i8
  %2616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2615, i8* %2616, align 1, !tbaa !2432
  %2617 = and i32 %2610, 255
  %2618 = call i32 @llvm.ctpop.i32(i32 %2617) #16
  %2619 = trunc i32 %2618 to i8
  %2620 = and i8 %2619, 1
  %2621 = xor i8 %2620, 1
  %2622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2621, i8* %2622, align 1, !tbaa !2446
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2623, align 1, !tbaa !2447
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2624, align 1, !tbaa !2448
  %2625 = lshr i32 %2610, 31
  %2626 = trunc i32 %2625 to i8
  %2627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2626, i8* %2627, align 1, !tbaa !2449
  %2628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2615, i8* %2628, align 1, !tbaa !2450
  %2629 = load i64, i64* %RDX
  %2630 = load i64, i64* %RBP
  %2631 = sub i64 %2630, 48
  %2632 = load i64, i64* %PC
  %2633 = add i64 %2632, 3
  store i64 %2633, i64* %PC
  %2634 = trunc i64 %2629 to i32
  %2635 = inttoptr i64 %2631 to i32*
  %2636 = load i32, i32* %2635
  %2637 = add i32 %2636, %2634
  %2638 = zext i32 %2637 to i64
  store i64 %2638, i64* %RDX, align 8, !tbaa !2428
  %2639 = icmp ult i32 %2637, %2634
  %2640 = icmp ult i32 %2637, %2636
  %2641 = or i1 %2639, %2640
  %2642 = zext i1 %2641 to i8
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2642, i8* %2643, align 1, !tbaa !2432
  %2644 = and i32 %2637, 255
  %2645 = call i32 @llvm.ctpop.i32(i32 %2644) #16
  %2646 = trunc i32 %2645 to i8
  %2647 = and i8 %2646, 1
  %2648 = xor i8 %2647, 1
  %2649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2648, i8* %2649, align 1, !tbaa !2446
  %2650 = xor i32 %2636, %2634
  %2651 = xor i32 %2650, %2637
  %2652 = lshr i32 %2651, 4
  %2653 = trunc i32 %2652 to i8
  %2654 = and i8 %2653, 1
  %2655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2654, i8* %2655, align 1, !tbaa !2447
  %2656 = icmp eq i32 %2637, 0
  %2657 = zext i1 %2656 to i8
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2657, i8* %2658, align 1, !tbaa !2448
  %2659 = lshr i32 %2637, 31
  %2660 = trunc i32 %2659 to i8
  %2661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2660, i8* %2661, align 1, !tbaa !2449
  %2662 = lshr i32 %2634, 31
  %2663 = lshr i32 %2636, 31
  %2664 = xor i32 %2659, %2662
  %2665 = xor i32 %2659, %2663
  %2666 = add nuw nsw i32 %2664, %2665
  %2667 = icmp eq i32 %2666, 2
  %2668 = zext i1 %2667 to i8
  %2669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2668, i8* %2669, align 1, !tbaa !2450
  %2670 = load i32, i32* %EDX
  %2671 = zext i32 %2670 to i64
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 3
  store i64 %2673, i64* %PC
  %2674 = shl i64 %2671, 32
  %2675 = ashr exact i64 %2674, 32
  store i64 %2675, i64* %RCX, align 8, !tbaa !2428
  %2676 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2677 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2678 = load i64, i64* %RAX
  %2679 = load i64, i64* %RCX
  %2680 = mul i64 %2679, 4
  %2681 = add i64 %2680, %2678
  %2682 = load i64, i64* %PC
  %2683 = add i64 %2682, 5
  store i64 %2683, i64* %PC
  %2684 = bitcast i8* %2677 to <2 x float>*
  %2685 = load <2 x float>, <2 x float>* %2684, align 1
  %2686 = getelementptr inbounds i8, i8* %2677, i64 8
  %2687 = bitcast i8* %2686 to <2 x i32>*
  %2688 = load <2 x i32>, <2 x i32>* %2687, align 1
  %2689 = inttoptr i64 %2681 to float*
  %2690 = load float, float* %2689
  %2691 = extractelement <2 x float> %2685, i32 0
  %2692 = fmul float %2691, %2690
  %2693 = bitcast i8* %2676 to float*
  store float %2692, float* %2693, align 1, !tbaa !2453
  %2694 = bitcast <2 x float> %2685 to <2 x i32>
  %2695 = extractelement <2 x i32> %2694, i32 1
  %2696 = getelementptr inbounds i8, i8* %2676, i64 4
  %2697 = bitcast i8* %2696 to i32*
  store i32 %2695, i32* %2697, align 1, !tbaa !2453
  %2698 = extractelement <2 x i32> %2688, i32 0
  %2699 = getelementptr inbounds i8, i8* %2676, i64 8
  %2700 = bitcast i8* %2699 to i32*
  store i32 %2698, i32* %2700, align 1, !tbaa !2453
  %2701 = extractelement <2 x i32> %2688, i32 1
  %2702 = getelementptr inbounds i8, i8* %2676, i64 12
  %2703 = bitcast i8* %2702 to i32*
  store i32 %2701, i32* %2703, align 1, !tbaa !2453
  %2704 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2705 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2706 = bitcast %union.vec128_t* %XMM1 to i8*
  %2707 = load i64, i64* %PC
  %2708 = add i64 %2707, 4
  store i64 %2708, i64* %PC
  %2709 = bitcast i8* %2705 to <2 x float>*
  %2710 = load <2 x float>, <2 x float>* %2709, align 1
  %2711 = getelementptr inbounds i8, i8* %2705, i64 8
  %2712 = bitcast i8* %2711 to <2 x i32>*
  %2713 = load <2 x i32>, <2 x i32>* %2712, align 1
  %2714 = bitcast i8* %2706 to <2 x float>*
  %2715 = load <2 x float>, <2 x float>* %2714, align 1
  %2716 = extractelement <2 x float> %2710, i32 0
  %2717 = extractelement <2 x float> %2715, i32 0
  %2718 = fadd float %2716, %2717
  %2719 = bitcast i8* %2704 to float*
  store float %2718, float* %2719, align 1, !tbaa !2453
  %2720 = bitcast <2 x float> %2710 to <2 x i32>
  %2721 = extractelement <2 x i32> %2720, i32 1
  %2722 = getelementptr inbounds i8, i8* %2704, i64 4
  %2723 = bitcast i8* %2722 to i32*
  store i32 %2721, i32* %2723, align 1, !tbaa !2453
  %2724 = extractelement <2 x i32> %2713, i32 0
  %2725 = getelementptr inbounds i8, i8* %2704, i64 8
  %2726 = bitcast i8* %2725 to i32*
  store i32 %2724, i32* %2726, align 1, !tbaa !2453
  %2727 = extractelement <2 x i32> %2713, i32 1
  %2728 = getelementptr inbounds i8, i8* %2704, i64 12
  %2729 = bitcast i8* %2728 to i32*
  store i32 %2727, i32* %2729, align 1, !tbaa !2453
  %2730 = load i64, i64* %RBP
  %2731 = sub i64 %2730, 32
  %2732 = load i64, i64* %PC
  %2733 = add i64 %2732, 4
  store i64 %2733, i64* %PC
  %2734 = inttoptr i64 %2731 to i64*
  %2735 = load i64, i64* %2734
  store i64 %2735, i64* %RAX, align 8, !tbaa !2428
  %2736 = load i64, i64* %RBP
  %2737 = sub i64 %2736, 44
  %2738 = load i64, i64* %PC
  %2739 = add i64 %2738, 3
  store i64 %2739, i64* %PC
  %2740 = inttoptr i64 %2737 to i32*
  %2741 = load i32, i32* %2740
  %2742 = zext i32 %2741 to i64
  store i64 %2742, i64* %RDX, align 8, !tbaa !2428
  %2743 = load i64, i64* %RDX
  %2744 = load i64, i64* %PC
  %2745 = add i64 %2744, 3
  store i64 %2745, i64* %PC
  %2746 = trunc i64 %2743 to i32
  %2747 = sub i32 %2746, 8
  %2748 = zext i32 %2747 to i64
  store i64 %2748, i64* %RDX, align 8, !tbaa !2428
  %2749 = icmp ult i32 %2746, 8
  %2750 = zext i1 %2749 to i8
  %2751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2750, i8* %2751, align 1, !tbaa !2432
  %2752 = and i32 %2747, 255
  %2753 = call i32 @llvm.ctpop.i32(i32 %2752) #16
  %2754 = trunc i32 %2753 to i8
  %2755 = and i8 %2754, 1
  %2756 = xor i8 %2755, 1
  %2757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2756, i8* %2757, align 1, !tbaa !2446
  %2758 = xor i64 8, %2743
  %2759 = trunc i64 %2758 to i32
  %2760 = xor i32 %2759, %2747
  %2761 = lshr i32 %2760, 4
  %2762 = trunc i32 %2761 to i8
  %2763 = and i8 %2762, 1
  %2764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2763, i8* %2764, align 1, !tbaa !2447
  %2765 = icmp eq i32 %2747, 0
  %2766 = zext i1 %2765 to i8
  %2767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2766, i8* %2767, align 1, !tbaa !2448
  %2768 = lshr i32 %2747, 31
  %2769 = trunc i32 %2768 to i8
  %2770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2769, i8* %2770, align 1, !tbaa !2449
  %2771 = lshr i32 %2746, 31
  %2772 = xor i32 %2768, %2771
  %2773 = add nuw nsw i32 %2772, %2771
  %2774 = icmp eq i32 %2773, 2
  %2775 = zext i1 %2774 to i8
  %2776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2775, i8* %2776, align 1, !tbaa !2450
  %2777 = load i32, i32* %EDX
  %2778 = zext i32 %2777 to i64
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 3
  store i64 %2780, i64* %PC
  %2781 = shl i64 %2778, 32
  %2782 = ashr exact i64 %2781, 32
  store i64 %2782, i64* %RCX, align 8, !tbaa !2428
  %2783 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2784 = load i64, i64* %RAX
  %2785 = load i64, i64* %RCX
  %2786 = mul i64 %2785, 4
  %2787 = add i64 %2786, %2784
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 5
  store i64 %2789, i64* %PC
  %2790 = inttoptr i64 %2787 to float*
  %2791 = load float, float* %2790
  %2792 = bitcast i8* %2783 to float*
  store float %2791, float* %2792, align 1, !tbaa !2453
  %2793 = getelementptr inbounds i8, i8* %2783, i64 4
  %2794 = bitcast i8* %2793 to float*
  store float 0.000000e+00, float* %2794, align 1, !tbaa !2453
  %2795 = getelementptr inbounds i8, i8* %2783, i64 8
  %2796 = bitcast i8* %2795 to float*
  store float 0.000000e+00, float* %2796, align 1, !tbaa !2453
  %2797 = getelementptr inbounds i8, i8* %2783, i64 12
  %2798 = bitcast i8* %2797 to float*
  store float 0.000000e+00, float* %2798, align 1, !tbaa !2453
  %2799 = load i64, i64* %RBP
  %2800 = sub i64 %2799, 40
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 4
  store i64 %2802, i64* %PC
  %2803 = inttoptr i64 %2800 to i64*
  %2804 = load i64, i64* %2803
  store i64 %2804, i64* %RAX, align 8, !tbaa !2428
  %2805 = load i64, i64* %RBP
  %2806 = sub i64 %2805, 24
  %2807 = load i64, i64* %PC
  %2808 = add i64 %2807, 3
  store i64 %2808, i64* %PC
  %2809 = inttoptr i64 %2806 to i32*
  %2810 = load i32, i32* %2809
  %2811 = zext i32 %2810 to i64
  store i64 %2811, i64* %RDX, align 8, !tbaa !2428
  %2812 = load i64, i64* %RBP
  %2813 = sub i64 %2812, 44
  %2814 = load i64, i64* %PC
  %2815 = add i64 %2814, 3
  store i64 %2815, i64* %PC
  %2816 = inttoptr i64 %2813 to i32*
  %2817 = load i32, i32* %2816
  %2818 = zext i32 %2817 to i64
  store i64 %2818, i64* %RSI, align 8, !tbaa !2428
  %2819 = load i64, i64* %RSI
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 3
  store i64 %2821, i64* %PC
  %2822 = trunc i64 %2819 to i32
  %2823 = sub i32 %2822, 8
  %2824 = zext i32 %2823 to i64
  store i64 %2824, i64* %RSI, align 8, !tbaa !2428
  %2825 = icmp ult i32 %2822, 8
  %2826 = zext i1 %2825 to i8
  %2827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2826, i8* %2827, align 1, !tbaa !2432
  %2828 = and i32 %2823, 255
  %2829 = call i32 @llvm.ctpop.i32(i32 %2828) #16
  %2830 = trunc i32 %2829 to i8
  %2831 = and i8 %2830, 1
  %2832 = xor i8 %2831, 1
  %2833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2832, i8* %2833, align 1, !tbaa !2446
  %2834 = xor i64 8, %2819
  %2835 = trunc i64 %2834 to i32
  %2836 = xor i32 %2835, %2823
  %2837 = lshr i32 %2836, 4
  %2838 = trunc i32 %2837 to i8
  %2839 = and i8 %2838, 1
  %2840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2839, i8* %2840, align 1, !tbaa !2447
  %2841 = icmp eq i32 %2823, 0
  %2842 = zext i1 %2841 to i8
  %2843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2842, i8* %2843, align 1, !tbaa !2448
  %2844 = lshr i32 %2823, 31
  %2845 = trunc i32 %2844 to i8
  %2846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2845, i8* %2846, align 1, !tbaa !2449
  %2847 = lshr i32 %2822, 31
  %2848 = xor i32 %2844, %2847
  %2849 = add nuw nsw i32 %2848, %2847
  %2850 = icmp eq i32 %2849, 2
  %2851 = zext i1 %2850 to i8
  %2852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2851, i8* %2852, align 1, !tbaa !2450
  %2853 = load i64, i64* %RDX
  %2854 = load i32, i32* %ESI
  %2855 = zext i32 %2854 to i64
  %2856 = load i64, i64* %PC
  %2857 = add i64 %2856, 3
  store i64 %2857, i64* %PC
  %2858 = shl i64 %2853, 32
  %2859 = ashr exact i64 %2858, 32
  %2860 = shl i64 %2855, 32
  %2861 = ashr exact i64 %2860, 32
  %2862 = mul nsw i64 %2861, %2859
  %2863 = trunc i64 %2862 to i32
  %2864 = and i64 %2862, 4294967295
  store i64 %2864, i64* %RDX, align 8, !tbaa !2428
  %2865 = shl i64 %2862, 32
  %2866 = ashr exact i64 %2865, 32
  %2867 = icmp ne i64 %2866, %2862
  %2868 = zext i1 %2867 to i8
  %2869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2868, i8* %2869, align 1, !tbaa !2432
  %2870 = and i32 %2863, 255
  %2871 = call i32 @llvm.ctpop.i32(i32 %2870) #16
  %2872 = trunc i32 %2871 to i8
  %2873 = and i8 %2872, 1
  %2874 = xor i8 %2873, 1
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2874, i8* %2875, align 1, !tbaa !2446
  %2876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2876, align 1, !tbaa !2447
  %2877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2877, align 1, !tbaa !2448
  %2878 = lshr i32 %2863, 31
  %2879 = trunc i32 %2878 to i8
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2879, i8* %2880, align 1, !tbaa !2449
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2868, i8* %2881, align 1, !tbaa !2450
  %2882 = load i64, i64* %RDX
  %2883 = load i64, i64* %RBP
  %2884 = sub i64 %2883, 48
  %2885 = load i64, i64* %PC
  %2886 = add i64 %2885, 3
  store i64 %2886, i64* %PC
  %2887 = trunc i64 %2882 to i32
  %2888 = inttoptr i64 %2884 to i32*
  %2889 = load i32, i32* %2888
  %2890 = add i32 %2889, %2887
  %2891 = zext i32 %2890 to i64
  store i64 %2891, i64* %RDX, align 8, !tbaa !2428
  %2892 = icmp ult i32 %2890, %2887
  %2893 = icmp ult i32 %2890, %2889
  %2894 = or i1 %2892, %2893
  %2895 = zext i1 %2894 to i8
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2895, i8* %2896, align 1, !tbaa !2432
  %2897 = and i32 %2890, 255
  %2898 = call i32 @llvm.ctpop.i32(i32 %2897) #16
  %2899 = trunc i32 %2898 to i8
  %2900 = and i8 %2899, 1
  %2901 = xor i8 %2900, 1
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2901, i8* %2902, align 1, !tbaa !2446
  %2903 = xor i32 %2889, %2887
  %2904 = xor i32 %2903, %2890
  %2905 = lshr i32 %2904, 4
  %2906 = trunc i32 %2905 to i8
  %2907 = and i8 %2906, 1
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2907, i8* %2908, align 1, !tbaa !2447
  %2909 = icmp eq i32 %2890, 0
  %2910 = zext i1 %2909 to i8
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2910, i8* %2911, align 1, !tbaa !2448
  %2912 = lshr i32 %2890, 31
  %2913 = trunc i32 %2912 to i8
  %2914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2913, i8* %2914, align 1, !tbaa !2449
  %2915 = lshr i32 %2887, 31
  %2916 = lshr i32 %2889, 31
  %2917 = xor i32 %2912, %2915
  %2918 = xor i32 %2912, %2916
  %2919 = add nuw nsw i32 %2917, %2918
  %2920 = icmp eq i32 %2919, 2
  %2921 = zext i1 %2920 to i8
  %2922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2921, i8* %2922, align 1, !tbaa !2450
  %2923 = load i32, i32* %EDX
  %2924 = zext i32 %2923 to i64
  %2925 = load i64, i64* %PC
  %2926 = add i64 %2925, 3
  store i64 %2926, i64* %PC
  %2927 = shl i64 %2924, 32
  %2928 = ashr exact i64 %2927, 32
  store i64 %2928, i64* %RCX, align 8, !tbaa !2428
  %2929 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2930 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2931 = load i64, i64* %RAX
  %2932 = load i64, i64* %RCX
  %2933 = mul i64 %2932, 4
  %2934 = add i64 %2933, %2931
  %2935 = load i64, i64* %PC
  %2936 = add i64 %2935, 5
  store i64 %2936, i64* %PC
  %2937 = bitcast i8* %2930 to <2 x float>*
  %2938 = load <2 x float>, <2 x float>* %2937, align 1
  %2939 = getelementptr inbounds i8, i8* %2930, i64 8
  %2940 = bitcast i8* %2939 to <2 x i32>*
  %2941 = load <2 x i32>, <2 x i32>* %2940, align 1
  %2942 = inttoptr i64 %2934 to float*
  %2943 = load float, float* %2942
  %2944 = extractelement <2 x float> %2938, i32 0
  %2945 = fmul float %2944, %2943
  %2946 = bitcast i8* %2929 to float*
  store float %2945, float* %2946, align 1, !tbaa !2453
  %2947 = bitcast <2 x float> %2938 to <2 x i32>
  %2948 = extractelement <2 x i32> %2947, i32 1
  %2949 = getelementptr inbounds i8, i8* %2929, i64 4
  %2950 = bitcast i8* %2949 to i32*
  store i32 %2948, i32* %2950, align 1, !tbaa !2453
  %2951 = extractelement <2 x i32> %2941, i32 0
  %2952 = getelementptr inbounds i8, i8* %2929, i64 8
  %2953 = bitcast i8* %2952 to i32*
  store i32 %2951, i32* %2953, align 1, !tbaa !2453
  %2954 = extractelement <2 x i32> %2941, i32 1
  %2955 = getelementptr inbounds i8, i8* %2929, i64 12
  %2956 = bitcast i8* %2955 to i32*
  store i32 %2954, i32* %2956, align 1, !tbaa !2453
  %2957 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2958 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2959 = bitcast %union.vec128_t* %XMM1 to i8*
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 4
  store i64 %2961, i64* %PC
  %2962 = bitcast i8* %2958 to <2 x float>*
  %2963 = load <2 x float>, <2 x float>* %2962, align 1
  %2964 = getelementptr inbounds i8, i8* %2958, i64 8
  %2965 = bitcast i8* %2964 to <2 x i32>*
  %2966 = load <2 x i32>, <2 x i32>* %2965, align 1
  %2967 = bitcast i8* %2959 to <2 x float>*
  %2968 = load <2 x float>, <2 x float>* %2967, align 1
  %2969 = extractelement <2 x float> %2963, i32 0
  %2970 = extractelement <2 x float> %2968, i32 0
  %2971 = fadd float %2969, %2970
  %2972 = bitcast i8* %2957 to float*
  store float %2971, float* %2972, align 1, !tbaa !2453
  %2973 = bitcast <2 x float> %2963 to <2 x i32>
  %2974 = extractelement <2 x i32> %2973, i32 1
  %2975 = getelementptr inbounds i8, i8* %2957, i64 4
  %2976 = bitcast i8* %2975 to i32*
  store i32 %2974, i32* %2976, align 1, !tbaa !2453
  %2977 = extractelement <2 x i32> %2966, i32 0
  %2978 = getelementptr inbounds i8, i8* %2957, i64 8
  %2979 = bitcast i8* %2978 to i32*
  store i32 %2977, i32* %2979, align 1, !tbaa !2453
  %2980 = extractelement <2 x i32> %2966, i32 1
  %2981 = getelementptr inbounds i8, i8* %2957, i64 12
  %2982 = bitcast i8* %2981 to i32*
  store i32 %2980, i32* %2982, align 1, !tbaa !2453
  %2983 = load i64, i64* %RBP
  %2984 = sub i64 %2983, 32
  %2985 = load i64, i64* %PC
  %2986 = add i64 %2985, 4
  store i64 %2986, i64* %PC
  %2987 = inttoptr i64 %2984 to i64*
  %2988 = load i64, i64* %2987
  store i64 %2988, i64* %RAX, align 8, !tbaa !2428
  %2989 = load i64, i64* %RBP
  %2990 = sub i64 %2989, 44
  %2991 = load i64, i64* %PC
  %2992 = add i64 %2991, 3
  store i64 %2992, i64* %PC
  %2993 = inttoptr i64 %2990 to i32*
  %2994 = load i32, i32* %2993
  %2995 = zext i32 %2994 to i64
  store i64 %2995, i64* %RDX, align 8, !tbaa !2428
  %2996 = load i64, i64* %RDX
  %2997 = load i64, i64* %PC
  %2998 = add i64 %2997, 3
  store i64 %2998, i64* %PC
  %2999 = trunc i64 %2996 to i32
  %3000 = sub i32 %2999, 7
  %3001 = zext i32 %3000 to i64
  store i64 %3001, i64* %RDX, align 8, !tbaa !2428
  %3002 = icmp ult i32 %2999, 7
  %3003 = zext i1 %3002 to i8
  %3004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3003, i8* %3004, align 1, !tbaa !2432
  %3005 = and i32 %3000, 255
  %3006 = call i32 @llvm.ctpop.i32(i32 %3005) #16
  %3007 = trunc i32 %3006 to i8
  %3008 = and i8 %3007, 1
  %3009 = xor i8 %3008, 1
  %3010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3009, i8* %3010, align 1, !tbaa !2446
  %3011 = xor i64 7, %2996
  %3012 = trunc i64 %3011 to i32
  %3013 = xor i32 %3012, %3000
  %3014 = lshr i32 %3013, 4
  %3015 = trunc i32 %3014 to i8
  %3016 = and i8 %3015, 1
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3016, i8* %3017, align 1, !tbaa !2447
  %3018 = icmp eq i32 %3000, 0
  %3019 = zext i1 %3018 to i8
  %3020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3019, i8* %3020, align 1, !tbaa !2448
  %3021 = lshr i32 %3000, 31
  %3022 = trunc i32 %3021 to i8
  %3023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3022, i8* %3023, align 1, !tbaa !2449
  %3024 = lshr i32 %2999, 31
  %3025 = xor i32 %3021, %3024
  %3026 = add nuw nsw i32 %3025, %3024
  %3027 = icmp eq i32 %3026, 2
  %3028 = zext i1 %3027 to i8
  %3029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3028, i8* %3029, align 1, !tbaa !2450
  %3030 = load i32, i32* %EDX
  %3031 = zext i32 %3030 to i64
  %3032 = load i64, i64* %PC
  %3033 = add i64 %3032, 3
  store i64 %3033, i64* %PC
  %3034 = shl i64 %3031, 32
  %3035 = ashr exact i64 %3034, 32
  store i64 %3035, i64* %RCX, align 8, !tbaa !2428
  %3036 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3037 = load i64, i64* %RAX
  %3038 = load i64, i64* %RCX
  %3039 = mul i64 %3038, 4
  %3040 = add i64 %3039, %3037
  %3041 = load i64, i64* %PC
  %3042 = add i64 %3041, 5
  store i64 %3042, i64* %PC
  %3043 = inttoptr i64 %3040 to float*
  %3044 = load float, float* %3043
  %3045 = bitcast i8* %3036 to float*
  store float %3044, float* %3045, align 1, !tbaa !2453
  %3046 = getelementptr inbounds i8, i8* %3036, i64 4
  %3047 = bitcast i8* %3046 to float*
  store float 0.000000e+00, float* %3047, align 1, !tbaa !2453
  %3048 = getelementptr inbounds i8, i8* %3036, i64 8
  %3049 = bitcast i8* %3048 to float*
  store float 0.000000e+00, float* %3049, align 1, !tbaa !2453
  %3050 = getelementptr inbounds i8, i8* %3036, i64 12
  %3051 = bitcast i8* %3050 to float*
  store float 0.000000e+00, float* %3051, align 1, !tbaa !2453
  %3052 = load i64, i64* %RBP
  %3053 = sub i64 %3052, 40
  %3054 = load i64, i64* %PC
  %3055 = add i64 %3054, 4
  store i64 %3055, i64* %PC
  %3056 = inttoptr i64 %3053 to i64*
  %3057 = load i64, i64* %3056
  store i64 %3057, i64* %RAX, align 8, !tbaa !2428
  %3058 = load i64, i64* %RBP
  %3059 = sub i64 %3058, 24
  %3060 = load i64, i64* %PC
  %3061 = add i64 %3060, 3
  store i64 %3061, i64* %PC
  %3062 = inttoptr i64 %3059 to i32*
  %3063 = load i32, i32* %3062
  %3064 = zext i32 %3063 to i64
  store i64 %3064, i64* %RDX, align 8, !tbaa !2428
  %3065 = load i64, i64* %RBP
  %3066 = sub i64 %3065, 44
  %3067 = load i64, i64* %PC
  %3068 = add i64 %3067, 3
  store i64 %3068, i64* %PC
  %3069 = inttoptr i64 %3066 to i32*
  %3070 = load i32, i32* %3069
  %3071 = zext i32 %3070 to i64
  store i64 %3071, i64* %RSI, align 8, !tbaa !2428
  %3072 = load i64, i64* %RSI
  %3073 = load i64, i64* %PC
  %3074 = add i64 %3073, 3
  store i64 %3074, i64* %PC
  %3075 = trunc i64 %3072 to i32
  %3076 = sub i32 %3075, 7
  %3077 = zext i32 %3076 to i64
  store i64 %3077, i64* %RSI, align 8, !tbaa !2428
  %3078 = icmp ult i32 %3075, 7
  %3079 = zext i1 %3078 to i8
  %3080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3079, i8* %3080, align 1, !tbaa !2432
  %3081 = and i32 %3076, 255
  %3082 = call i32 @llvm.ctpop.i32(i32 %3081) #16
  %3083 = trunc i32 %3082 to i8
  %3084 = and i8 %3083, 1
  %3085 = xor i8 %3084, 1
  %3086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3085, i8* %3086, align 1, !tbaa !2446
  %3087 = xor i64 7, %3072
  %3088 = trunc i64 %3087 to i32
  %3089 = xor i32 %3088, %3076
  %3090 = lshr i32 %3089, 4
  %3091 = trunc i32 %3090 to i8
  %3092 = and i8 %3091, 1
  %3093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3092, i8* %3093, align 1, !tbaa !2447
  %3094 = icmp eq i32 %3076, 0
  %3095 = zext i1 %3094 to i8
  %3096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3095, i8* %3096, align 1, !tbaa !2448
  %3097 = lshr i32 %3076, 31
  %3098 = trunc i32 %3097 to i8
  %3099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3098, i8* %3099, align 1, !tbaa !2449
  %3100 = lshr i32 %3075, 31
  %3101 = xor i32 %3097, %3100
  %3102 = add nuw nsw i32 %3101, %3100
  %3103 = icmp eq i32 %3102, 2
  %3104 = zext i1 %3103 to i8
  %3105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3104, i8* %3105, align 1, !tbaa !2450
  %3106 = load i64, i64* %RDX
  %3107 = load i32, i32* %ESI
  %3108 = zext i32 %3107 to i64
  %3109 = load i64, i64* %PC
  %3110 = add i64 %3109, 3
  store i64 %3110, i64* %PC
  %3111 = shl i64 %3106, 32
  %3112 = ashr exact i64 %3111, 32
  %3113 = shl i64 %3108, 32
  %3114 = ashr exact i64 %3113, 32
  %3115 = mul nsw i64 %3114, %3112
  %3116 = trunc i64 %3115 to i32
  %3117 = and i64 %3115, 4294967295
  store i64 %3117, i64* %RDX, align 8, !tbaa !2428
  %3118 = shl i64 %3115, 32
  %3119 = ashr exact i64 %3118, 32
  %3120 = icmp ne i64 %3119, %3115
  %3121 = zext i1 %3120 to i8
  %3122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3121, i8* %3122, align 1, !tbaa !2432
  %3123 = and i32 %3116, 255
  %3124 = call i32 @llvm.ctpop.i32(i32 %3123) #16
  %3125 = trunc i32 %3124 to i8
  %3126 = and i8 %3125, 1
  %3127 = xor i8 %3126, 1
  %3128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3127, i8* %3128, align 1, !tbaa !2446
  %3129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3129, align 1, !tbaa !2447
  %3130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3130, align 1, !tbaa !2448
  %3131 = lshr i32 %3116, 31
  %3132 = trunc i32 %3131 to i8
  %3133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3132, i8* %3133, align 1, !tbaa !2449
  %3134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3121, i8* %3134, align 1, !tbaa !2450
  %3135 = load i64, i64* %RDX
  %3136 = load i64, i64* %RBP
  %3137 = sub i64 %3136, 48
  %3138 = load i64, i64* %PC
  %3139 = add i64 %3138, 3
  store i64 %3139, i64* %PC
  %3140 = trunc i64 %3135 to i32
  %3141 = inttoptr i64 %3137 to i32*
  %3142 = load i32, i32* %3141
  %3143 = add i32 %3142, %3140
  %3144 = zext i32 %3143 to i64
  store i64 %3144, i64* %RDX, align 8, !tbaa !2428
  %3145 = icmp ult i32 %3143, %3140
  %3146 = icmp ult i32 %3143, %3142
  %3147 = or i1 %3145, %3146
  %3148 = zext i1 %3147 to i8
  %3149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3148, i8* %3149, align 1, !tbaa !2432
  %3150 = and i32 %3143, 255
  %3151 = call i32 @llvm.ctpop.i32(i32 %3150) #16
  %3152 = trunc i32 %3151 to i8
  %3153 = and i8 %3152, 1
  %3154 = xor i8 %3153, 1
  %3155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3154, i8* %3155, align 1, !tbaa !2446
  %3156 = xor i32 %3142, %3140
  %3157 = xor i32 %3156, %3143
  %3158 = lshr i32 %3157, 4
  %3159 = trunc i32 %3158 to i8
  %3160 = and i8 %3159, 1
  %3161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3160, i8* %3161, align 1, !tbaa !2447
  %3162 = icmp eq i32 %3143, 0
  %3163 = zext i1 %3162 to i8
  %3164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3163, i8* %3164, align 1, !tbaa !2448
  %3165 = lshr i32 %3143, 31
  %3166 = trunc i32 %3165 to i8
  %3167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3166, i8* %3167, align 1, !tbaa !2449
  %3168 = lshr i32 %3140, 31
  %3169 = lshr i32 %3142, 31
  %3170 = xor i32 %3165, %3168
  %3171 = xor i32 %3165, %3169
  %3172 = add nuw nsw i32 %3170, %3171
  %3173 = icmp eq i32 %3172, 2
  %3174 = zext i1 %3173 to i8
  %3175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3174, i8* %3175, align 1, !tbaa !2450
  %3176 = load i32, i32* %EDX
  %3177 = zext i32 %3176 to i64
  %3178 = load i64, i64* %PC
  %3179 = add i64 %3178, 3
  store i64 %3179, i64* %PC
  %3180 = shl i64 %3177, 32
  %3181 = ashr exact i64 %3180, 32
  store i64 %3181, i64* %RCX, align 8, !tbaa !2428
  %3182 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3183 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3184 = load i64, i64* %RAX
  %3185 = load i64, i64* %RCX
  %3186 = mul i64 %3185, 4
  %3187 = add i64 %3186, %3184
  %3188 = load i64, i64* %PC
  %3189 = add i64 %3188, 5
  store i64 %3189, i64* %PC
  %3190 = bitcast i8* %3183 to <2 x float>*
  %3191 = load <2 x float>, <2 x float>* %3190, align 1
  %3192 = getelementptr inbounds i8, i8* %3183, i64 8
  %3193 = bitcast i8* %3192 to <2 x i32>*
  %3194 = load <2 x i32>, <2 x i32>* %3193, align 1
  %3195 = inttoptr i64 %3187 to float*
  %3196 = load float, float* %3195
  %3197 = extractelement <2 x float> %3191, i32 0
  %3198 = fmul float %3197, %3196
  %3199 = bitcast i8* %3182 to float*
  store float %3198, float* %3199, align 1, !tbaa !2453
  %3200 = bitcast <2 x float> %3191 to <2 x i32>
  %3201 = extractelement <2 x i32> %3200, i32 1
  %3202 = getelementptr inbounds i8, i8* %3182, i64 4
  %3203 = bitcast i8* %3202 to i32*
  store i32 %3201, i32* %3203, align 1, !tbaa !2453
  %3204 = extractelement <2 x i32> %3194, i32 0
  %3205 = getelementptr inbounds i8, i8* %3182, i64 8
  %3206 = bitcast i8* %3205 to i32*
  store i32 %3204, i32* %3206, align 1, !tbaa !2453
  %3207 = extractelement <2 x i32> %3194, i32 1
  %3208 = getelementptr inbounds i8, i8* %3182, i64 12
  %3209 = bitcast i8* %3208 to i32*
  store i32 %3207, i32* %3209, align 1, !tbaa !2453
  %3210 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3211 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3212 = bitcast %union.vec128_t* %XMM1 to i8*
  %3213 = load i64, i64* %PC
  %3214 = add i64 %3213, 4
  store i64 %3214, i64* %PC
  %3215 = bitcast i8* %3211 to <2 x float>*
  %3216 = load <2 x float>, <2 x float>* %3215, align 1
  %3217 = getelementptr inbounds i8, i8* %3211, i64 8
  %3218 = bitcast i8* %3217 to <2 x i32>*
  %3219 = load <2 x i32>, <2 x i32>* %3218, align 1
  %3220 = bitcast i8* %3212 to <2 x float>*
  %3221 = load <2 x float>, <2 x float>* %3220, align 1
  %3222 = extractelement <2 x float> %3216, i32 0
  %3223 = extractelement <2 x float> %3221, i32 0
  %3224 = fadd float %3222, %3223
  %3225 = bitcast i8* %3210 to float*
  store float %3224, float* %3225, align 1, !tbaa !2453
  %3226 = bitcast <2 x float> %3216 to <2 x i32>
  %3227 = extractelement <2 x i32> %3226, i32 1
  %3228 = getelementptr inbounds i8, i8* %3210, i64 4
  %3229 = bitcast i8* %3228 to i32*
  store i32 %3227, i32* %3229, align 1, !tbaa !2453
  %3230 = extractelement <2 x i32> %3219, i32 0
  %3231 = getelementptr inbounds i8, i8* %3210, i64 8
  %3232 = bitcast i8* %3231 to i32*
  store i32 %3230, i32* %3232, align 1, !tbaa !2453
  %3233 = extractelement <2 x i32> %3219, i32 1
  %3234 = getelementptr inbounds i8, i8* %3210, i64 12
  %3235 = bitcast i8* %3234 to i32*
  store i32 %3233, i32* %3235, align 1, !tbaa !2453
  %3236 = load i64, i64* %RBP
  %3237 = sub i64 %3236, 32
  %3238 = load i64, i64* %PC
  %3239 = add i64 %3238, 4
  store i64 %3239, i64* %PC
  %3240 = inttoptr i64 %3237 to i64*
  %3241 = load i64, i64* %3240
  store i64 %3241, i64* %RAX, align 8, !tbaa !2428
  %3242 = load i64, i64* %RBP
  %3243 = sub i64 %3242, 44
  %3244 = load i64, i64* %PC
  %3245 = add i64 %3244, 3
  store i64 %3245, i64* %PC
  %3246 = inttoptr i64 %3243 to i32*
  %3247 = load i32, i32* %3246
  %3248 = zext i32 %3247 to i64
  store i64 %3248, i64* %RDX, align 8, !tbaa !2428
  %3249 = load i64, i64* %RDX
  %3250 = load i64, i64* %PC
  %3251 = add i64 %3250, 3
  store i64 %3251, i64* %PC
  %3252 = trunc i64 %3249 to i32
  %3253 = sub i32 %3252, 6
  %3254 = zext i32 %3253 to i64
  store i64 %3254, i64* %RDX, align 8, !tbaa !2428
  %3255 = icmp ult i32 %3252, 6
  %3256 = zext i1 %3255 to i8
  %3257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3256, i8* %3257, align 1, !tbaa !2432
  %3258 = and i32 %3253, 255
  %3259 = call i32 @llvm.ctpop.i32(i32 %3258) #16
  %3260 = trunc i32 %3259 to i8
  %3261 = and i8 %3260, 1
  %3262 = xor i8 %3261, 1
  %3263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3262, i8* %3263, align 1, !tbaa !2446
  %3264 = xor i64 6, %3249
  %3265 = trunc i64 %3264 to i32
  %3266 = xor i32 %3265, %3253
  %3267 = lshr i32 %3266, 4
  %3268 = trunc i32 %3267 to i8
  %3269 = and i8 %3268, 1
  %3270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3269, i8* %3270, align 1, !tbaa !2447
  %3271 = icmp eq i32 %3253, 0
  %3272 = zext i1 %3271 to i8
  %3273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3272, i8* %3273, align 1, !tbaa !2448
  %3274 = lshr i32 %3253, 31
  %3275 = trunc i32 %3274 to i8
  %3276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3275, i8* %3276, align 1, !tbaa !2449
  %3277 = lshr i32 %3252, 31
  %3278 = xor i32 %3274, %3277
  %3279 = add nuw nsw i32 %3278, %3277
  %3280 = icmp eq i32 %3279, 2
  %3281 = zext i1 %3280 to i8
  %3282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3281, i8* %3282, align 1, !tbaa !2450
  %3283 = load i32, i32* %EDX
  %3284 = zext i32 %3283 to i64
  %3285 = load i64, i64* %PC
  %3286 = add i64 %3285, 3
  store i64 %3286, i64* %PC
  %3287 = shl i64 %3284, 32
  %3288 = ashr exact i64 %3287, 32
  store i64 %3288, i64* %RCX, align 8, !tbaa !2428
  %3289 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3290 = load i64, i64* %RAX
  %3291 = load i64, i64* %RCX
  %3292 = mul i64 %3291, 4
  %3293 = add i64 %3292, %3290
  %3294 = load i64, i64* %PC
  %3295 = add i64 %3294, 5
  store i64 %3295, i64* %PC
  %3296 = inttoptr i64 %3293 to float*
  %3297 = load float, float* %3296
  %3298 = bitcast i8* %3289 to float*
  store float %3297, float* %3298, align 1, !tbaa !2453
  %3299 = getelementptr inbounds i8, i8* %3289, i64 4
  %3300 = bitcast i8* %3299 to float*
  store float 0.000000e+00, float* %3300, align 1, !tbaa !2453
  %3301 = getelementptr inbounds i8, i8* %3289, i64 8
  %3302 = bitcast i8* %3301 to float*
  store float 0.000000e+00, float* %3302, align 1, !tbaa !2453
  %3303 = getelementptr inbounds i8, i8* %3289, i64 12
  %3304 = bitcast i8* %3303 to float*
  store float 0.000000e+00, float* %3304, align 1, !tbaa !2453
  %3305 = load i64, i64* %RBP
  %3306 = sub i64 %3305, 40
  %3307 = load i64, i64* %PC
  %3308 = add i64 %3307, 4
  store i64 %3308, i64* %PC
  %3309 = inttoptr i64 %3306 to i64*
  %3310 = load i64, i64* %3309
  store i64 %3310, i64* %RAX, align 8, !tbaa !2428
  %3311 = load i64, i64* %RBP
  %3312 = sub i64 %3311, 24
  %3313 = load i64, i64* %PC
  %3314 = add i64 %3313, 3
  store i64 %3314, i64* %PC
  %3315 = inttoptr i64 %3312 to i32*
  %3316 = load i32, i32* %3315
  %3317 = zext i32 %3316 to i64
  store i64 %3317, i64* %RDX, align 8, !tbaa !2428
  %3318 = load i64, i64* %RBP
  %3319 = sub i64 %3318, 44
  %3320 = load i64, i64* %PC
  %3321 = add i64 %3320, 3
  store i64 %3321, i64* %PC
  %3322 = inttoptr i64 %3319 to i32*
  %3323 = load i32, i32* %3322
  %3324 = zext i32 %3323 to i64
  store i64 %3324, i64* %RSI, align 8, !tbaa !2428
  %3325 = load i64, i64* %RSI
  %3326 = load i64, i64* %PC
  %3327 = add i64 %3326, 3
  store i64 %3327, i64* %PC
  %3328 = trunc i64 %3325 to i32
  %3329 = sub i32 %3328, 6
  %3330 = zext i32 %3329 to i64
  store i64 %3330, i64* %RSI, align 8, !tbaa !2428
  %3331 = icmp ult i32 %3328, 6
  %3332 = zext i1 %3331 to i8
  %3333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3332, i8* %3333, align 1, !tbaa !2432
  %3334 = and i32 %3329, 255
  %3335 = call i32 @llvm.ctpop.i32(i32 %3334) #16
  %3336 = trunc i32 %3335 to i8
  %3337 = and i8 %3336, 1
  %3338 = xor i8 %3337, 1
  %3339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3338, i8* %3339, align 1, !tbaa !2446
  %3340 = xor i64 6, %3325
  %3341 = trunc i64 %3340 to i32
  %3342 = xor i32 %3341, %3329
  %3343 = lshr i32 %3342, 4
  %3344 = trunc i32 %3343 to i8
  %3345 = and i8 %3344, 1
  %3346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3345, i8* %3346, align 1, !tbaa !2447
  %3347 = icmp eq i32 %3329, 0
  %3348 = zext i1 %3347 to i8
  %3349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3348, i8* %3349, align 1, !tbaa !2448
  %3350 = lshr i32 %3329, 31
  %3351 = trunc i32 %3350 to i8
  %3352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3351, i8* %3352, align 1, !tbaa !2449
  %3353 = lshr i32 %3328, 31
  %3354 = xor i32 %3350, %3353
  %3355 = add nuw nsw i32 %3354, %3353
  %3356 = icmp eq i32 %3355, 2
  %3357 = zext i1 %3356 to i8
  %3358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3357, i8* %3358, align 1, !tbaa !2450
  %3359 = load i64, i64* %RDX
  %3360 = load i32, i32* %ESI
  %3361 = zext i32 %3360 to i64
  %3362 = load i64, i64* %PC
  %3363 = add i64 %3362, 3
  store i64 %3363, i64* %PC
  %3364 = shl i64 %3359, 32
  %3365 = ashr exact i64 %3364, 32
  %3366 = shl i64 %3361, 32
  %3367 = ashr exact i64 %3366, 32
  %3368 = mul nsw i64 %3367, %3365
  %3369 = trunc i64 %3368 to i32
  %3370 = and i64 %3368, 4294967295
  store i64 %3370, i64* %RDX, align 8, !tbaa !2428
  %3371 = shl i64 %3368, 32
  %3372 = ashr exact i64 %3371, 32
  %3373 = icmp ne i64 %3372, %3368
  %3374 = zext i1 %3373 to i8
  %3375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3374, i8* %3375, align 1, !tbaa !2432
  %3376 = and i32 %3369, 255
  %3377 = call i32 @llvm.ctpop.i32(i32 %3376) #16
  %3378 = trunc i32 %3377 to i8
  %3379 = and i8 %3378, 1
  %3380 = xor i8 %3379, 1
  %3381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3380, i8* %3381, align 1, !tbaa !2446
  %3382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3382, align 1, !tbaa !2447
  %3383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3383, align 1, !tbaa !2448
  %3384 = lshr i32 %3369, 31
  %3385 = trunc i32 %3384 to i8
  %3386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3385, i8* %3386, align 1, !tbaa !2449
  %3387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3374, i8* %3387, align 1, !tbaa !2450
  %3388 = load i64, i64* %RDX
  %3389 = load i64, i64* %RBP
  %3390 = sub i64 %3389, 48
  %3391 = load i64, i64* %PC
  %3392 = add i64 %3391, 3
  store i64 %3392, i64* %PC
  %3393 = trunc i64 %3388 to i32
  %3394 = inttoptr i64 %3390 to i32*
  %3395 = load i32, i32* %3394
  %3396 = add i32 %3395, %3393
  %3397 = zext i32 %3396 to i64
  store i64 %3397, i64* %RDX, align 8, !tbaa !2428
  %3398 = icmp ult i32 %3396, %3393
  %3399 = icmp ult i32 %3396, %3395
  %3400 = or i1 %3398, %3399
  %3401 = zext i1 %3400 to i8
  %3402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3401, i8* %3402, align 1, !tbaa !2432
  %3403 = and i32 %3396, 255
  %3404 = call i32 @llvm.ctpop.i32(i32 %3403) #16
  %3405 = trunc i32 %3404 to i8
  %3406 = and i8 %3405, 1
  %3407 = xor i8 %3406, 1
  %3408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3407, i8* %3408, align 1, !tbaa !2446
  %3409 = xor i32 %3395, %3393
  %3410 = xor i32 %3409, %3396
  %3411 = lshr i32 %3410, 4
  %3412 = trunc i32 %3411 to i8
  %3413 = and i8 %3412, 1
  %3414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3413, i8* %3414, align 1, !tbaa !2447
  %3415 = icmp eq i32 %3396, 0
  %3416 = zext i1 %3415 to i8
  %3417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3416, i8* %3417, align 1, !tbaa !2448
  %3418 = lshr i32 %3396, 31
  %3419 = trunc i32 %3418 to i8
  %3420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3419, i8* %3420, align 1, !tbaa !2449
  %3421 = lshr i32 %3393, 31
  %3422 = lshr i32 %3395, 31
  %3423 = xor i32 %3418, %3421
  %3424 = xor i32 %3418, %3422
  %3425 = add nuw nsw i32 %3423, %3424
  %3426 = icmp eq i32 %3425, 2
  %3427 = zext i1 %3426 to i8
  %3428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3427, i8* %3428, align 1, !tbaa !2450
  %3429 = load i32, i32* %EDX
  %3430 = zext i32 %3429 to i64
  %3431 = load i64, i64* %PC
  %3432 = add i64 %3431, 3
  store i64 %3432, i64* %PC
  %3433 = shl i64 %3430, 32
  %3434 = ashr exact i64 %3433, 32
  store i64 %3434, i64* %RCX, align 8, !tbaa !2428
  %3435 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3436 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3437 = load i64, i64* %RAX
  %3438 = load i64, i64* %RCX
  %3439 = mul i64 %3438, 4
  %3440 = add i64 %3439, %3437
  %3441 = load i64, i64* %PC
  %3442 = add i64 %3441, 5
  store i64 %3442, i64* %PC
  %3443 = bitcast i8* %3436 to <2 x float>*
  %3444 = load <2 x float>, <2 x float>* %3443, align 1
  %3445 = getelementptr inbounds i8, i8* %3436, i64 8
  %3446 = bitcast i8* %3445 to <2 x i32>*
  %3447 = load <2 x i32>, <2 x i32>* %3446, align 1
  %3448 = inttoptr i64 %3440 to float*
  %3449 = load float, float* %3448
  %3450 = extractelement <2 x float> %3444, i32 0
  %3451 = fmul float %3450, %3449
  %3452 = bitcast i8* %3435 to float*
  store float %3451, float* %3452, align 1, !tbaa !2453
  %3453 = bitcast <2 x float> %3444 to <2 x i32>
  %3454 = extractelement <2 x i32> %3453, i32 1
  %3455 = getelementptr inbounds i8, i8* %3435, i64 4
  %3456 = bitcast i8* %3455 to i32*
  store i32 %3454, i32* %3456, align 1, !tbaa !2453
  %3457 = extractelement <2 x i32> %3447, i32 0
  %3458 = getelementptr inbounds i8, i8* %3435, i64 8
  %3459 = bitcast i8* %3458 to i32*
  store i32 %3457, i32* %3459, align 1, !tbaa !2453
  %3460 = extractelement <2 x i32> %3447, i32 1
  %3461 = getelementptr inbounds i8, i8* %3435, i64 12
  %3462 = bitcast i8* %3461 to i32*
  store i32 %3460, i32* %3462, align 1, !tbaa !2453
  %3463 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3464 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3465 = bitcast %union.vec128_t* %XMM1 to i8*
  %3466 = load i64, i64* %PC
  %3467 = add i64 %3466, 4
  store i64 %3467, i64* %PC
  %3468 = bitcast i8* %3464 to <2 x float>*
  %3469 = load <2 x float>, <2 x float>* %3468, align 1
  %3470 = getelementptr inbounds i8, i8* %3464, i64 8
  %3471 = bitcast i8* %3470 to <2 x i32>*
  %3472 = load <2 x i32>, <2 x i32>* %3471, align 1
  %3473 = bitcast i8* %3465 to <2 x float>*
  %3474 = load <2 x float>, <2 x float>* %3473, align 1
  %3475 = extractelement <2 x float> %3469, i32 0
  %3476 = extractelement <2 x float> %3474, i32 0
  %3477 = fadd float %3475, %3476
  %3478 = bitcast i8* %3463 to float*
  store float %3477, float* %3478, align 1, !tbaa !2453
  %3479 = bitcast <2 x float> %3469 to <2 x i32>
  %3480 = extractelement <2 x i32> %3479, i32 1
  %3481 = getelementptr inbounds i8, i8* %3463, i64 4
  %3482 = bitcast i8* %3481 to i32*
  store i32 %3480, i32* %3482, align 1, !tbaa !2453
  %3483 = extractelement <2 x i32> %3472, i32 0
  %3484 = getelementptr inbounds i8, i8* %3463, i64 8
  %3485 = bitcast i8* %3484 to i32*
  store i32 %3483, i32* %3485, align 1, !tbaa !2453
  %3486 = extractelement <2 x i32> %3472, i32 1
  %3487 = getelementptr inbounds i8, i8* %3463, i64 12
  %3488 = bitcast i8* %3487 to i32*
  store i32 %3486, i32* %3488, align 1, !tbaa !2453
  %3489 = load i64, i64* %RBP
  %3490 = sub i64 %3489, 32
  %3491 = load i64, i64* %PC
  %3492 = add i64 %3491, 4
  store i64 %3492, i64* %PC
  %3493 = inttoptr i64 %3490 to i64*
  %3494 = load i64, i64* %3493
  store i64 %3494, i64* %RAX, align 8, !tbaa !2428
  %3495 = load i64, i64* %RBP
  %3496 = sub i64 %3495, 44
  %3497 = load i64, i64* %PC
  %3498 = add i64 %3497, 3
  store i64 %3498, i64* %PC
  %3499 = inttoptr i64 %3496 to i32*
  %3500 = load i32, i32* %3499
  %3501 = zext i32 %3500 to i64
  store i64 %3501, i64* %RDX, align 8, !tbaa !2428
  %3502 = load i64, i64* %RDX
  %3503 = load i64, i64* %PC
  %3504 = add i64 %3503, 3
  store i64 %3504, i64* %PC
  %3505 = trunc i64 %3502 to i32
  %3506 = sub i32 %3505, 5
  %3507 = zext i32 %3506 to i64
  store i64 %3507, i64* %RDX, align 8, !tbaa !2428
  %3508 = icmp ult i32 %3505, 5
  %3509 = zext i1 %3508 to i8
  %3510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3509, i8* %3510, align 1, !tbaa !2432
  %3511 = and i32 %3506, 255
  %3512 = call i32 @llvm.ctpop.i32(i32 %3511) #16
  %3513 = trunc i32 %3512 to i8
  %3514 = and i8 %3513, 1
  %3515 = xor i8 %3514, 1
  %3516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3515, i8* %3516, align 1, !tbaa !2446
  %3517 = xor i64 5, %3502
  %3518 = trunc i64 %3517 to i32
  %3519 = xor i32 %3518, %3506
  %3520 = lshr i32 %3519, 4
  %3521 = trunc i32 %3520 to i8
  %3522 = and i8 %3521, 1
  %3523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3522, i8* %3523, align 1, !tbaa !2447
  %3524 = icmp eq i32 %3506, 0
  %3525 = zext i1 %3524 to i8
  %3526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3525, i8* %3526, align 1, !tbaa !2448
  %3527 = lshr i32 %3506, 31
  %3528 = trunc i32 %3527 to i8
  %3529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3528, i8* %3529, align 1, !tbaa !2449
  %3530 = lshr i32 %3505, 31
  %3531 = xor i32 %3527, %3530
  %3532 = add nuw nsw i32 %3531, %3530
  %3533 = icmp eq i32 %3532, 2
  %3534 = zext i1 %3533 to i8
  %3535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3534, i8* %3535, align 1, !tbaa !2450
  %3536 = load i32, i32* %EDX
  %3537 = zext i32 %3536 to i64
  %3538 = load i64, i64* %PC
  %3539 = add i64 %3538, 3
  store i64 %3539, i64* %PC
  %3540 = shl i64 %3537, 32
  %3541 = ashr exact i64 %3540, 32
  store i64 %3541, i64* %RCX, align 8, !tbaa !2428
  %3542 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3543 = load i64, i64* %RAX
  %3544 = load i64, i64* %RCX
  %3545 = mul i64 %3544, 4
  %3546 = add i64 %3545, %3543
  %3547 = load i64, i64* %PC
  %3548 = add i64 %3547, 5
  store i64 %3548, i64* %PC
  %3549 = inttoptr i64 %3546 to float*
  %3550 = load float, float* %3549
  %3551 = bitcast i8* %3542 to float*
  store float %3550, float* %3551, align 1, !tbaa !2453
  %3552 = getelementptr inbounds i8, i8* %3542, i64 4
  %3553 = bitcast i8* %3552 to float*
  store float 0.000000e+00, float* %3553, align 1, !tbaa !2453
  %3554 = getelementptr inbounds i8, i8* %3542, i64 8
  %3555 = bitcast i8* %3554 to float*
  store float 0.000000e+00, float* %3555, align 1, !tbaa !2453
  %3556 = getelementptr inbounds i8, i8* %3542, i64 12
  %3557 = bitcast i8* %3556 to float*
  store float 0.000000e+00, float* %3557, align 1, !tbaa !2453
  %3558 = load i64, i64* %RBP
  %3559 = sub i64 %3558, 40
  %3560 = load i64, i64* %PC
  %3561 = add i64 %3560, 4
  store i64 %3561, i64* %PC
  %3562 = inttoptr i64 %3559 to i64*
  %3563 = load i64, i64* %3562
  store i64 %3563, i64* %RAX, align 8, !tbaa !2428
  %3564 = load i64, i64* %RBP
  %3565 = sub i64 %3564, 24
  %3566 = load i64, i64* %PC
  %3567 = add i64 %3566, 3
  store i64 %3567, i64* %PC
  %3568 = inttoptr i64 %3565 to i32*
  %3569 = load i32, i32* %3568
  %3570 = zext i32 %3569 to i64
  store i64 %3570, i64* %RDX, align 8, !tbaa !2428
  %3571 = load i64, i64* %RBP
  %3572 = sub i64 %3571, 44
  %3573 = load i64, i64* %PC
  %3574 = add i64 %3573, 3
  store i64 %3574, i64* %PC
  %3575 = inttoptr i64 %3572 to i32*
  %3576 = load i32, i32* %3575
  %3577 = zext i32 %3576 to i64
  store i64 %3577, i64* %RSI, align 8, !tbaa !2428
  %3578 = load i64, i64* %RSI
  %3579 = load i64, i64* %PC
  %3580 = add i64 %3579, 3
  store i64 %3580, i64* %PC
  %3581 = trunc i64 %3578 to i32
  %3582 = sub i32 %3581, 5
  %3583 = zext i32 %3582 to i64
  store i64 %3583, i64* %RSI, align 8, !tbaa !2428
  %3584 = icmp ult i32 %3581, 5
  %3585 = zext i1 %3584 to i8
  %3586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3585, i8* %3586, align 1, !tbaa !2432
  %3587 = and i32 %3582, 255
  %3588 = call i32 @llvm.ctpop.i32(i32 %3587) #16
  %3589 = trunc i32 %3588 to i8
  %3590 = and i8 %3589, 1
  %3591 = xor i8 %3590, 1
  %3592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3591, i8* %3592, align 1, !tbaa !2446
  %3593 = xor i64 5, %3578
  %3594 = trunc i64 %3593 to i32
  %3595 = xor i32 %3594, %3582
  %3596 = lshr i32 %3595, 4
  %3597 = trunc i32 %3596 to i8
  %3598 = and i8 %3597, 1
  %3599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3598, i8* %3599, align 1, !tbaa !2447
  %3600 = icmp eq i32 %3582, 0
  %3601 = zext i1 %3600 to i8
  %3602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3601, i8* %3602, align 1, !tbaa !2448
  %3603 = lshr i32 %3582, 31
  %3604 = trunc i32 %3603 to i8
  %3605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3604, i8* %3605, align 1, !tbaa !2449
  %3606 = lshr i32 %3581, 31
  %3607 = xor i32 %3603, %3606
  %3608 = add nuw nsw i32 %3607, %3606
  %3609 = icmp eq i32 %3608, 2
  %3610 = zext i1 %3609 to i8
  %3611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3610, i8* %3611, align 1, !tbaa !2450
  %3612 = load i64, i64* %RDX
  %3613 = load i32, i32* %ESI
  %3614 = zext i32 %3613 to i64
  %3615 = load i64, i64* %PC
  %3616 = add i64 %3615, 3
  store i64 %3616, i64* %PC
  %3617 = shl i64 %3612, 32
  %3618 = ashr exact i64 %3617, 32
  %3619 = shl i64 %3614, 32
  %3620 = ashr exact i64 %3619, 32
  %3621 = mul nsw i64 %3620, %3618
  %3622 = trunc i64 %3621 to i32
  %3623 = and i64 %3621, 4294967295
  store i64 %3623, i64* %RDX, align 8, !tbaa !2428
  %3624 = shl i64 %3621, 32
  %3625 = ashr exact i64 %3624, 32
  %3626 = icmp ne i64 %3625, %3621
  %3627 = zext i1 %3626 to i8
  %3628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3627, i8* %3628, align 1, !tbaa !2432
  %3629 = and i32 %3622, 255
  %3630 = call i32 @llvm.ctpop.i32(i32 %3629) #16
  %3631 = trunc i32 %3630 to i8
  %3632 = and i8 %3631, 1
  %3633 = xor i8 %3632, 1
  %3634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3633, i8* %3634, align 1, !tbaa !2446
  %3635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3635, align 1, !tbaa !2447
  %3636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3636, align 1, !tbaa !2448
  %3637 = lshr i32 %3622, 31
  %3638 = trunc i32 %3637 to i8
  %3639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3638, i8* %3639, align 1, !tbaa !2449
  %3640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3627, i8* %3640, align 1, !tbaa !2450
  %3641 = load i64, i64* %RDX
  %3642 = load i64, i64* %RBP
  %3643 = sub i64 %3642, 48
  %3644 = load i64, i64* %PC
  %3645 = add i64 %3644, 3
  store i64 %3645, i64* %PC
  %3646 = trunc i64 %3641 to i32
  %3647 = inttoptr i64 %3643 to i32*
  %3648 = load i32, i32* %3647
  %3649 = add i32 %3648, %3646
  %3650 = zext i32 %3649 to i64
  store i64 %3650, i64* %RDX, align 8, !tbaa !2428
  %3651 = icmp ult i32 %3649, %3646
  %3652 = icmp ult i32 %3649, %3648
  %3653 = or i1 %3651, %3652
  %3654 = zext i1 %3653 to i8
  %3655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3654, i8* %3655, align 1, !tbaa !2432
  %3656 = and i32 %3649, 255
  %3657 = call i32 @llvm.ctpop.i32(i32 %3656) #16
  %3658 = trunc i32 %3657 to i8
  %3659 = and i8 %3658, 1
  %3660 = xor i8 %3659, 1
  %3661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3660, i8* %3661, align 1, !tbaa !2446
  %3662 = xor i32 %3648, %3646
  %3663 = xor i32 %3662, %3649
  %3664 = lshr i32 %3663, 4
  %3665 = trunc i32 %3664 to i8
  %3666 = and i8 %3665, 1
  %3667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3666, i8* %3667, align 1, !tbaa !2447
  %3668 = icmp eq i32 %3649, 0
  %3669 = zext i1 %3668 to i8
  %3670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3669, i8* %3670, align 1, !tbaa !2448
  %3671 = lshr i32 %3649, 31
  %3672 = trunc i32 %3671 to i8
  %3673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3672, i8* %3673, align 1, !tbaa !2449
  %3674 = lshr i32 %3646, 31
  %3675 = lshr i32 %3648, 31
  %3676 = xor i32 %3671, %3674
  %3677 = xor i32 %3671, %3675
  %3678 = add nuw nsw i32 %3676, %3677
  %3679 = icmp eq i32 %3678, 2
  %3680 = zext i1 %3679 to i8
  %3681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3680, i8* %3681, align 1, !tbaa !2450
  %3682 = load i32, i32* %EDX
  %3683 = zext i32 %3682 to i64
  %3684 = load i64, i64* %PC
  %3685 = add i64 %3684, 3
  store i64 %3685, i64* %PC
  %3686 = shl i64 %3683, 32
  %3687 = ashr exact i64 %3686, 32
  store i64 %3687, i64* %RCX, align 8, !tbaa !2428
  %3688 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3689 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3690 = load i64, i64* %RAX
  %3691 = load i64, i64* %RCX
  %3692 = mul i64 %3691, 4
  %3693 = add i64 %3692, %3690
  %3694 = load i64, i64* %PC
  %3695 = add i64 %3694, 5
  store i64 %3695, i64* %PC
  %3696 = bitcast i8* %3689 to <2 x float>*
  %3697 = load <2 x float>, <2 x float>* %3696, align 1
  %3698 = getelementptr inbounds i8, i8* %3689, i64 8
  %3699 = bitcast i8* %3698 to <2 x i32>*
  %3700 = load <2 x i32>, <2 x i32>* %3699, align 1
  %3701 = inttoptr i64 %3693 to float*
  %3702 = load float, float* %3701
  %3703 = extractelement <2 x float> %3697, i32 0
  %3704 = fmul float %3703, %3702
  %3705 = bitcast i8* %3688 to float*
  store float %3704, float* %3705, align 1, !tbaa !2453
  %3706 = bitcast <2 x float> %3697 to <2 x i32>
  %3707 = extractelement <2 x i32> %3706, i32 1
  %3708 = getelementptr inbounds i8, i8* %3688, i64 4
  %3709 = bitcast i8* %3708 to i32*
  store i32 %3707, i32* %3709, align 1, !tbaa !2453
  %3710 = extractelement <2 x i32> %3700, i32 0
  %3711 = getelementptr inbounds i8, i8* %3688, i64 8
  %3712 = bitcast i8* %3711 to i32*
  store i32 %3710, i32* %3712, align 1, !tbaa !2453
  %3713 = extractelement <2 x i32> %3700, i32 1
  %3714 = getelementptr inbounds i8, i8* %3688, i64 12
  %3715 = bitcast i8* %3714 to i32*
  store i32 %3713, i32* %3715, align 1, !tbaa !2453
  %3716 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3717 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3718 = bitcast %union.vec128_t* %XMM1 to i8*
  %3719 = load i64, i64* %PC
  %3720 = add i64 %3719, 4
  store i64 %3720, i64* %PC
  %3721 = bitcast i8* %3717 to <2 x float>*
  %3722 = load <2 x float>, <2 x float>* %3721, align 1
  %3723 = getelementptr inbounds i8, i8* %3717, i64 8
  %3724 = bitcast i8* %3723 to <2 x i32>*
  %3725 = load <2 x i32>, <2 x i32>* %3724, align 1
  %3726 = bitcast i8* %3718 to <2 x float>*
  %3727 = load <2 x float>, <2 x float>* %3726, align 1
  %3728 = extractelement <2 x float> %3722, i32 0
  %3729 = extractelement <2 x float> %3727, i32 0
  %3730 = fadd float %3728, %3729
  %3731 = bitcast i8* %3716 to float*
  store float %3730, float* %3731, align 1, !tbaa !2453
  %3732 = bitcast <2 x float> %3722 to <2 x i32>
  %3733 = extractelement <2 x i32> %3732, i32 1
  %3734 = getelementptr inbounds i8, i8* %3716, i64 4
  %3735 = bitcast i8* %3734 to i32*
  store i32 %3733, i32* %3735, align 1, !tbaa !2453
  %3736 = extractelement <2 x i32> %3725, i32 0
  %3737 = getelementptr inbounds i8, i8* %3716, i64 8
  %3738 = bitcast i8* %3737 to i32*
  store i32 %3736, i32* %3738, align 1, !tbaa !2453
  %3739 = extractelement <2 x i32> %3725, i32 1
  %3740 = getelementptr inbounds i8, i8* %3716, i64 12
  %3741 = bitcast i8* %3740 to i32*
  store i32 %3739, i32* %3741, align 1, !tbaa !2453
  %3742 = load i64, i64* %RBP
  %3743 = sub i64 %3742, 32
  %3744 = load i64, i64* %PC
  %3745 = add i64 %3744, 4
  store i64 %3745, i64* %PC
  %3746 = inttoptr i64 %3743 to i64*
  %3747 = load i64, i64* %3746
  store i64 %3747, i64* %RAX, align 8, !tbaa !2428
  %3748 = load i64, i64* %RBP
  %3749 = sub i64 %3748, 44
  %3750 = load i64, i64* %PC
  %3751 = add i64 %3750, 3
  store i64 %3751, i64* %PC
  %3752 = inttoptr i64 %3749 to i32*
  %3753 = load i32, i32* %3752
  %3754 = zext i32 %3753 to i64
  store i64 %3754, i64* %RDX, align 8, !tbaa !2428
  %3755 = load i64, i64* %RDX
  %3756 = load i64, i64* %PC
  %3757 = add i64 %3756, 3
  store i64 %3757, i64* %PC
  %3758 = trunc i64 %3755 to i32
  %3759 = sub i32 %3758, 4
  %3760 = zext i32 %3759 to i64
  store i64 %3760, i64* %RDX, align 8, !tbaa !2428
  %3761 = icmp ult i32 %3758, 4
  %3762 = zext i1 %3761 to i8
  %3763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3762, i8* %3763, align 1, !tbaa !2432
  %3764 = and i32 %3759, 255
  %3765 = call i32 @llvm.ctpop.i32(i32 %3764) #16
  %3766 = trunc i32 %3765 to i8
  %3767 = and i8 %3766, 1
  %3768 = xor i8 %3767, 1
  %3769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3768, i8* %3769, align 1, !tbaa !2446
  %3770 = xor i64 4, %3755
  %3771 = trunc i64 %3770 to i32
  %3772 = xor i32 %3771, %3759
  %3773 = lshr i32 %3772, 4
  %3774 = trunc i32 %3773 to i8
  %3775 = and i8 %3774, 1
  %3776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3775, i8* %3776, align 1, !tbaa !2447
  %3777 = icmp eq i32 %3759, 0
  %3778 = zext i1 %3777 to i8
  %3779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3778, i8* %3779, align 1, !tbaa !2448
  %3780 = lshr i32 %3759, 31
  %3781 = trunc i32 %3780 to i8
  %3782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3781, i8* %3782, align 1, !tbaa !2449
  %3783 = lshr i32 %3758, 31
  %3784 = xor i32 %3780, %3783
  %3785 = add nuw nsw i32 %3784, %3783
  %3786 = icmp eq i32 %3785, 2
  %3787 = zext i1 %3786 to i8
  %3788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3787, i8* %3788, align 1, !tbaa !2450
  %3789 = load i32, i32* %EDX
  %3790 = zext i32 %3789 to i64
  %3791 = load i64, i64* %PC
  %3792 = add i64 %3791, 3
  store i64 %3792, i64* %PC
  %3793 = shl i64 %3790, 32
  %3794 = ashr exact i64 %3793, 32
  store i64 %3794, i64* %RCX, align 8, !tbaa !2428
  %3795 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3796 = load i64, i64* %RAX
  %3797 = load i64, i64* %RCX
  %3798 = mul i64 %3797, 4
  %3799 = add i64 %3798, %3796
  %3800 = load i64, i64* %PC
  %3801 = add i64 %3800, 5
  store i64 %3801, i64* %PC
  %3802 = inttoptr i64 %3799 to float*
  %3803 = load float, float* %3802
  %3804 = bitcast i8* %3795 to float*
  store float %3803, float* %3804, align 1, !tbaa !2453
  %3805 = getelementptr inbounds i8, i8* %3795, i64 4
  %3806 = bitcast i8* %3805 to float*
  store float 0.000000e+00, float* %3806, align 1, !tbaa !2453
  %3807 = getelementptr inbounds i8, i8* %3795, i64 8
  %3808 = bitcast i8* %3807 to float*
  store float 0.000000e+00, float* %3808, align 1, !tbaa !2453
  %3809 = getelementptr inbounds i8, i8* %3795, i64 12
  %3810 = bitcast i8* %3809 to float*
  store float 0.000000e+00, float* %3810, align 1, !tbaa !2453
  %3811 = load i64, i64* %RBP
  %3812 = sub i64 %3811, 40
  %3813 = load i64, i64* %PC
  %3814 = add i64 %3813, 4
  store i64 %3814, i64* %PC
  %3815 = inttoptr i64 %3812 to i64*
  %3816 = load i64, i64* %3815
  store i64 %3816, i64* %RAX, align 8, !tbaa !2428
  %3817 = load i64, i64* %RBP
  %3818 = sub i64 %3817, 24
  %3819 = load i64, i64* %PC
  %3820 = add i64 %3819, 3
  store i64 %3820, i64* %PC
  %3821 = inttoptr i64 %3818 to i32*
  %3822 = load i32, i32* %3821
  %3823 = zext i32 %3822 to i64
  store i64 %3823, i64* %RDX, align 8, !tbaa !2428
  %3824 = load i64, i64* %RBP
  %3825 = sub i64 %3824, 44
  %3826 = load i64, i64* %PC
  %3827 = add i64 %3826, 3
  store i64 %3827, i64* %PC
  %3828 = inttoptr i64 %3825 to i32*
  %3829 = load i32, i32* %3828
  %3830 = zext i32 %3829 to i64
  store i64 %3830, i64* %RSI, align 8, !tbaa !2428
  %3831 = load i64, i64* %RSI
  %3832 = load i64, i64* %PC
  %3833 = add i64 %3832, 3
  store i64 %3833, i64* %PC
  %3834 = trunc i64 %3831 to i32
  %3835 = sub i32 %3834, 4
  %3836 = zext i32 %3835 to i64
  store i64 %3836, i64* %RSI, align 8, !tbaa !2428
  %3837 = icmp ult i32 %3834, 4
  %3838 = zext i1 %3837 to i8
  %3839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3838, i8* %3839, align 1, !tbaa !2432
  %3840 = and i32 %3835, 255
  %3841 = call i32 @llvm.ctpop.i32(i32 %3840) #16
  %3842 = trunc i32 %3841 to i8
  %3843 = and i8 %3842, 1
  %3844 = xor i8 %3843, 1
  %3845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3844, i8* %3845, align 1, !tbaa !2446
  %3846 = xor i64 4, %3831
  %3847 = trunc i64 %3846 to i32
  %3848 = xor i32 %3847, %3835
  %3849 = lshr i32 %3848, 4
  %3850 = trunc i32 %3849 to i8
  %3851 = and i8 %3850, 1
  %3852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3851, i8* %3852, align 1, !tbaa !2447
  %3853 = icmp eq i32 %3835, 0
  %3854 = zext i1 %3853 to i8
  %3855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3854, i8* %3855, align 1, !tbaa !2448
  %3856 = lshr i32 %3835, 31
  %3857 = trunc i32 %3856 to i8
  %3858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3857, i8* %3858, align 1, !tbaa !2449
  %3859 = lshr i32 %3834, 31
  %3860 = xor i32 %3856, %3859
  %3861 = add nuw nsw i32 %3860, %3859
  %3862 = icmp eq i32 %3861, 2
  %3863 = zext i1 %3862 to i8
  %3864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3863, i8* %3864, align 1, !tbaa !2450
  %3865 = load i64, i64* %RDX
  %3866 = load i32, i32* %ESI
  %3867 = zext i32 %3866 to i64
  %3868 = load i64, i64* %PC
  %3869 = add i64 %3868, 3
  store i64 %3869, i64* %PC
  %3870 = shl i64 %3865, 32
  %3871 = ashr exact i64 %3870, 32
  %3872 = shl i64 %3867, 32
  %3873 = ashr exact i64 %3872, 32
  %3874 = mul nsw i64 %3873, %3871
  %3875 = trunc i64 %3874 to i32
  %3876 = and i64 %3874, 4294967295
  store i64 %3876, i64* %RDX, align 8, !tbaa !2428
  %3877 = shl i64 %3874, 32
  %3878 = ashr exact i64 %3877, 32
  %3879 = icmp ne i64 %3878, %3874
  %3880 = zext i1 %3879 to i8
  %3881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3880, i8* %3881, align 1, !tbaa !2432
  %3882 = and i32 %3875, 255
  %3883 = call i32 @llvm.ctpop.i32(i32 %3882) #16
  %3884 = trunc i32 %3883 to i8
  %3885 = and i8 %3884, 1
  %3886 = xor i8 %3885, 1
  %3887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3886, i8* %3887, align 1, !tbaa !2446
  %3888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3888, align 1, !tbaa !2447
  %3889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3889, align 1, !tbaa !2448
  %3890 = lshr i32 %3875, 31
  %3891 = trunc i32 %3890 to i8
  %3892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3891, i8* %3892, align 1, !tbaa !2449
  %3893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3880, i8* %3893, align 1, !tbaa !2450
  %3894 = load i64, i64* %RDX
  %3895 = load i64, i64* %RBP
  %3896 = sub i64 %3895, 48
  %3897 = load i64, i64* %PC
  %3898 = add i64 %3897, 3
  store i64 %3898, i64* %PC
  %3899 = trunc i64 %3894 to i32
  %3900 = inttoptr i64 %3896 to i32*
  %3901 = load i32, i32* %3900
  %3902 = add i32 %3901, %3899
  %3903 = zext i32 %3902 to i64
  store i64 %3903, i64* %RDX, align 8, !tbaa !2428
  %3904 = icmp ult i32 %3902, %3899
  %3905 = icmp ult i32 %3902, %3901
  %3906 = or i1 %3904, %3905
  %3907 = zext i1 %3906 to i8
  %3908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3907, i8* %3908, align 1, !tbaa !2432
  %3909 = and i32 %3902, 255
  %3910 = call i32 @llvm.ctpop.i32(i32 %3909) #16
  %3911 = trunc i32 %3910 to i8
  %3912 = and i8 %3911, 1
  %3913 = xor i8 %3912, 1
  %3914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3913, i8* %3914, align 1, !tbaa !2446
  %3915 = xor i32 %3901, %3899
  %3916 = xor i32 %3915, %3902
  %3917 = lshr i32 %3916, 4
  %3918 = trunc i32 %3917 to i8
  %3919 = and i8 %3918, 1
  %3920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3919, i8* %3920, align 1, !tbaa !2447
  %3921 = icmp eq i32 %3902, 0
  %3922 = zext i1 %3921 to i8
  %3923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3922, i8* %3923, align 1, !tbaa !2448
  %3924 = lshr i32 %3902, 31
  %3925 = trunc i32 %3924 to i8
  %3926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3925, i8* %3926, align 1, !tbaa !2449
  %3927 = lshr i32 %3899, 31
  %3928 = lshr i32 %3901, 31
  %3929 = xor i32 %3924, %3927
  %3930 = xor i32 %3924, %3928
  %3931 = add nuw nsw i32 %3929, %3930
  %3932 = icmp eq i32 %3931, 2
  %3933 = zext i1 %3932 to i8
  %3934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3933, i8* %3934, align 1, !tbaa !2450
  %3935 = load i32, i32* %EDX
  %3936 = zext i32 %3935 to i64
  %3937 = load i64, i64* %PC
  %3938 = add i64 %3937, 3
  store i64 %3938, i64* %PC
  %3939 = shl i64 %3936, 32
  %3940 = ashr exact i64 %3939, 32
  store i64 %3940, i64* %RCX, align 8, !tbaa !2428
  %3941 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3942 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3943 = load i64, i64* %RAX
  %3944 = load i64, i64* %RCX
  %3945 = mul i64 %3944, 4
  %3946 = add i64 %3945, %3943
  %3947 = load i64, i64* %PC
  %3948 = add i64 %3947, 5
  store i64 %3948, i64* %PC
  %3949 = bitcast i8* %3942 to <2 x float>*
  %3950 = load <2 x float>, <2 x float>* %3949, align 1
  %3951 = getelementptr inbounds i8, i8* %3942, i64 8
  %3952 = bitcast i8* %3951 to <2 x i32>*
  %3953 = load <2 x i32>, <2 x i32>* %3952, align 1
  %3954 = inttoptr i64 %3946 to float*
  %3955 = load float, float* %3954
  %3956 = extractelement <2 x float> %3950, i32 0
  %3957 = fmul float %3956, %3955
  %3958 = bitcast i8* %3941 to float*
  store float %3957, float* %3958, align 1, !tbaa !2453
  %3959 = bitcast <2 x float> %3950 to <2 x i32>
  %3960 = extractelement <2 x i32> %3959, i32 1
  %3961 = getelementptr inbounds i8, i8* %3941, i64 4
  %3962 = bitcast i8* %3961 to i32*
  store i32 %3960, i32* %3962, align 1, !tbaa !2453
  %3963 = extractelement <2 x i32> %3953, i32 0
  %3964 = getelementptr inbounds i8, i8* %3941, i64 8
  %3965 = bitcast i8* %3964 to i32*
  store i32 %3963, i32* %3965, align 1, !tbaa !2453
  %3966 = extractelement <2 x i32> %3953, i32 1
  %3967 = getelementptr inbounds i8, i8* %3941, i64 12
  %3968 = bitcast i8* %3967 to i32*
  store i32 %3966, i32* %3968, align 1, !tbaa !2453
  %3969 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3970 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3971 = bitcast %union.vec128_t* %XMM1 to i8*
  %3972 = load i64, i64* %PC
  %3973 = add i64 %3972, 4
  store i64 %3973, i64* %PC
  %3974 = bitcast i8* %3970 to <2 x float>*
  %3975 = load <2 x float>, <2 x float>* %3974, align 1
  %3976 = getelementptr inbounds i8, i8* %3970, i64 8
  %3977 = bitcast i8* %3976 to <2 x i32>*
  %3978 = load <2 x i32>, <2 x i32>* %3977, align 1
  %3979 = bitcast i8* %3971 to <2 x float>*
  %3980 = load <2 x float>, <2 x float>* %3979, align 1
  %3981 = extractelement <2 x float> %3975, i32 0
  %3982 = extractelement <2 x float> %3980, i32 0
  %3983 = fadd float %3981, %3982
  %3984 = bitcast i8* %3969 to float*
  store float %3983, float* %3984, align 1, !tbaa !2453
  %3985 = bitcast <2 x float> %3975 to <2 x i32>
  %3986 = extractelement <2 x i32> %3985, i32 1
  %3987 = getelementptr inbounds i8, i8* %3969, i64 4
  %3988 = bitcast i8* %3987 to i32*
  store i32 %3986, i32* %3988, align 1, !tbaa !2453
  %3989 = extractelement <2 x i32> %3978, i32 0
  %3990 = getelementptr inbounds i8, i8* %3969, i64 8
  %3991 = bitcast i8* %3990 to i32*
  store i32 %3989, i32* %3991, align 1, !tbaa !2453
  %3992 = extractelement <2 x i32> %3978, i32 1
  %3993 = getelementptr inbounds i8, i8* %3969, i64 12
  %3994 = bitcast i8* %3993 to i32*
  store i32 %3992, i32* %3994, align 1, !tbaa !2453
  %3995 = load i64, i64* %RBP
  %3996 = sub i64 %3995, 32
  %3997 = load i64, i64* %PC
  %3998 = add i64 %3997, 4
  store i64 %3998, i64* %PC
  %3999 = inttoptr i64 %3996 to i64*
  %4000 = load i64, i64* %3999
  store i64 %4000, i64* %RAX, align 8, !tbaa !2428
  %4001 = load i64, i64* %RBP
  %4002 = sub i64 %4001, 44
  %4003 = load i64, i64* %PC
  %4004 = add i64 %4003, 3
  store i64 %4004, i64* %PC
  %4005 = inttoptr i64 %4002 to i32*
  %4006 = load i32, i32* %4005
  %4007 = zext i32 %4006 to i64
  store i64 %4007, i64* %RDX, align 8, !tbaa !2428
  %4008 = load i64, i64* %RDX
  %4009 = load i64, i64* %PC
  %4010 = add i64 %4009, 3
  store i64 %4010, i64* %PC
  %4011 = trunc i64 %4008 to i32
  %4012 = sub i32 %4011, 3
  %4013 = zext i32 %4012 to i64
  store i64 %4013, i64* %RDX, align 8, !tbaa !2428
  %4014 = icmp ult i32 %4011, 3
  %4015 = zext i1 %4014 to i8
  %4016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4015, i8* %4016, align 1, !tbaa !2432
  %4017 = and i32 %4012, 255
  %4018 = call i32 @llvm.ctpop.i32(i32 %4017) #16
  %4019 = trunc i32 %4018 to i8
  %4020 = and i8 %4019, 1
  %4021 = xor i8 %4020, 1
  %4022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4021, i8* %4022, align 1, !tbaa !2446
  %4023 = xor i64 3, %4008
  %4024 = trunc i64 %4023 to i32
  %4025 = xor i32 %4024, %4012
  %4026 = lshr i32 %4025, 4
  %4027 = trunc i32 %4026 to i8
  %4028 = and i8 %4027, 1
  %4029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4028, i8* %4029, align 1, !tbaa !2447
  %4030 = icmp eq i32 %4012, 0
  %4031 = zext i1 %4030 to i8
  %4032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4031, i8* %4032, align 1, !tbaa !2448
  %4033 = lshr i32 %4012, 31
  %4034 = trunc i32 %4033 to i8
  %4035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4034, i8* %4035, align 1, !tbaa !2449
  %4036 = lshr i32 %4011, 31
  %4037 = xor i32 %4033, %4036
  %4038 = add nuw nsw i32 %4037, %4036
  %4039 = icmp eq i32 %4038, 2
  %4040 = zext i1 %4039 to i8
  %4041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4040, i8* %4041, align 1, !tbaa !2450
  %4042 = load i32, i32* %EDX
  %4043 = zext i32 %4042 to i64
  %4044 = load i64, i64* %PC
  %4045 = add i64 %4044, 3
  store i64 %4045, i64* %PC
  %4046 = shl i64 %4043, 32
  %4047 = ashr exact i64 %4046, 32
  store i64 %4047, i64* %RCX, align 8, !tbaa !2428
  %4048 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4049 = load i64, i64* %RAX
  %4050 = load i64, i64* %RCX
  %4051 = mul i64 %4050, 4
  %4052 = add i64 %4051, %4049
  %4053 = load i64, i64* %PC
  %4054 = add i64 %4053, 5
  store i64 %4054, i64* %PC
  %4055 = inttoptr i64 %4052 to float*
  %4056 = load float, float* %4055
  %4057 = bitcast i8* %4048 to float*
  store float %4056, float* %4057, align 1, !tbaa !2453
  %4058 = getelementptr inbounds i8, i8* %4048, i64 4
  %4059 = bitcast i8* %4058 to float*
  store float 0.000000e+00, float* %4059, align 1, !tbaa !2453
  %4060 = getelementptr inbounds i8, i8* %4048, i64 8
  %4061 = bitcast i8* %4060 to float*
  store float 0.000000e+00, float* %4061, align 1, !tbaa !2453
  %4062 = getelementptr inbounds i8, i8* %4048, i64 12
  %4063 = bitcast i8* %4062 to float*
  store float 0.000000e+00, float* %4063, align 1, !tbaa !2453
  %4064 = load i64, i64* %RBP
  %4065 = sub i64 %4064, 40
  %4066 = load i64, i64* %PC
  %4067 = add i64 %4066, 4
  store i64 %4067, i64* %PC
  %4068 = inttoptr i64 %4065 to i64*
  %4069 = load i64, i64* %4068
  store i64 %4069, i64* %RAX, align 8, !tbaa !2428
  %4070 = load i64, i64* %RBP
  %4071 = sub i64 %4070, 24
  %4072 = load i64, i64* %PC
  %4073 = add i64 %4072, 3
  store i64 %4073, i64* %PC
  %4074 = inttoptr i64 %4071 to i32*
  %4075 = load i32, i32* %4074
  %4076 = zext i32 %4075 to i64
  store i64 %4076, i64* %RDX, align 8, !tbaa !2428
  %4077 = load i64, i64* %RBP
  %4078 = sub i64 %4077, 44
  %4079 = load i64, i64* %PC
  %4080 = add i64 %4079, 3
  store i64 %4080, i64* %PC
  %4081 = inttoptr i64 %4078 to i32*
  %4082 = load i32, i32* %4081
  %4083 = zext i32 %4082 to i64
  store i64 %4083, i64* %RSI, align 8, !tbaa !2428
  %4084 = load i64, i64* %RSI
  %4085 = load i64, i64* %PC
  %4086 = add i64 %4085, 3
  store i64 %4086, i64* %PC
  %4087 = trunc i64 %4084 to i32
  %4088 = sub i32 %4087, 3
  %4089 = zext i32 %4088 to i64
  store i64 %4089, i64* %RSI, align 8, !tbaa !2428
  %4090 = icmp ult i32 %4087, 3
  %4091 = zext i1 %4090 to i8
  %4092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4091, i8* %4092, align 1, !tbaa !2432
  %4093 = and i32 %4088, 255
  %4094 = call i32 @llvm.ctpop.i32(i32 %4093) #16
  %4095 = trunc i32 %4094 to i8
  %4096 = and i8 %4095, 1
  %4097 = xor i8 %4096, 1
  %4098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4097, i8* %4098, align 1, !tbaa !2446
  %4099 = xor i64 3, %4084
  %4100 = trunc i64 %4099 to i32
  %4101 = xor i32 %4100, %4088
  %4102 = lshr i32 %4101, 4
  %4103 = trunc i32 %4102 to i8
  %4104 = and i8 %4103, 1
  %4105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4104, i8* %4105, align 1, !tbaa !2447
  %4106 = icmp eq i32 %4088, 0
  %4107 = zext i1 %4106 to i8
  %4108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4107, i8* %4108, align 1, !tbaa !2448
  %4109 = lshr i32 %4088, 31
  %4110 = trunc i32 %4109 to i8
  %4111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4110, i8* %4111, align 1, !tbaa !2449
  %4112 = lshr i32 %4087, 31
  %4113 = xor i32 %4109, %4112
  %4114 = add nuw nsw i32 %4113, %4112
  %4115 = icmp eq i32 %4114, 2
  %4116 = zext i1 %4115 to i8
  %4117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4116, i8* %4117, align 1, !tbaa !2450
  %4118 = load i64, i64* %RDX
  %4119 = load i32, i32* %ESI
  %4120 = zext i32 %4119 to i64
  %4121 = load i64, i64* %PC
  %4122 = add i64 %4121, 3
  store i64 %4122, i64* %PC
  %4123 = shl i64 %4118, 32
  %4124 = ashr exact i64 %4123, 32
  %4125 = shl i64 %4120, 32
  %4126 = ashr exact i64 %4125, 32
  %4127 = mul nsw i64 %4126, %4124
  %4128 = trunc i64 %4127 to i32
  %4129 = and i64 %4127, 4294967295
  store i64 %4129, i64* %RDX, align 8, !tbaa !2428
  %4130 = shl i64 %4127, 32
  %4131 = ashr exact i64 %4130, 32
  %4132 = icmp ne i64 %4131, %4127
  %4133 = zext i1 %4132 to i8
  %4134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4133, i8* %4134, align 1, !tbaa !2432
  %4135 = and i32 %4128, 255
  %4136 = call i32 @llvm.ctpop.i32(i32 %4135) #16
  %4137 = trunc i32 %4136 to i8
  %4138 = and i8 %4137, 1
  %4139 = xor i8 %4138, 1
  %4140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4139, i8* %4140, align 1, !tbaa !2446
  %4141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4141, align 1, !tbaa !2447
  %4142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4142, align 1, !tbaa !2448
  %4143 = lshr i32 %4128, 31
  %4144 = trunc i32 %4143 to i8
  %4145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4144, i8* %4145, align 1, !tbaa !2449
  %4146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4133, i8* %4146, align 1, !tbaa !2450
  %4147 = load i64, i64* %RDX
  %4148 = load i64, i64* %RBP
  %4149 = sub i64 %4148, 48
  %4150 = load i64, i64* %PC
  %4151 = add i64 %4150, 3
  store i64 %4151, i64* %PC
  %4152 = trunc i64 %4147 to i32
  %4153 = inttoptr i64 %4149 to i32*
  %4154 = load i32, i32* %4153
  %4155 = add i32 %4154, %4152
  %4156 = zext i32 %4155 to i64
  store i64 %4156, i64* %RDX, align 8, !tbaa !2428
  %4157 = icmp ult i32 %4155, %4152
  %4158 = icmp ult i32 %4155, %4154
  %4159 = or i1 %4157, %4158
  %4160 = zext i1 %4159 to i8
  %4161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4160, i8* %4161, align 1, !tbaa !2432
  %4162 = and i32 %4155, 255
  %4163 = call i32 @llvm.ctpop.i32(i32 %4162) #16
  %4164 = trunc i32 %4163 to i8
  %4165 = and i8 %4164, 1
  %4166 = xor i8 %4165, 1
  %4167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4166, i8* %4167, align 1, !tbaa !2446
  %4168 = xor i32 %4154, %4152
  %4169 = xor i32 %4168, %4155
  %4170 = lshr i32 %4169, 4
  %4171 = trunc i32 %4170 to i8
  %4172 = and i8 %4171, 1
  %4173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4172, i8* %4173, align 1, !tbaa !2447
  %4174 = icmp eq i32 %4155, 0
  %4175 = zext i1 %4174 to i8
  %4176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4175, i8* %4176, align 1, !tbaa !2448
  %4177 = lshr i32 %4155, 31
  %4178 = trunc i32 %4177 to i8
  %4179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4178, i8* %4179, align 1, !tbaa !2449
  %4180 = lshr i32 %4152, 31
  %4181 = lshr i32 %4154, 31
  %4182 = xor i32 %4177, %4180
  %4183 = xor i32 %4177, %4181
  %4184 = add nuw nsw i32 %4182, %4183
  %4185 = icmp eq i32 %4184, 2
  %4186 = zext i1 %4185 to i8
  %4187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4186, i8* %4187, align 1, !tbaa !2450
  %4188 = load i32, i32* %EDX
  %4189 = zext i32 %4188 to i64
  %4190 = load i64, i64* %PC
  %4191 = add i64 %4190, 3
  store i64 %4191, i64* %PC
  %4192 = shl i64 %4189, 32
  %4193 = ashr exact i64 %4192, 32
  store i64 %4193, i64* %RCX, align 8, !tbaa !2428
  %4194 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4195 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4196 = load i64, i64* %RAX
  %4197 = load i64, i64* %RCX
  %4198 = mul i64 %4197, 4
  %4199 = add i64 %4198, %4196
  %4200 = load i64, i64* %PC
  %4201 = add i64 %4200, 5
  store i64 %4201, i64* %PC
  %4202 = bitcast i8* %4195 to <2 x float>*
  %4203 = load <2 x float>, <2 x float>* %4202, align 1
  %4204 = getelementptr inbounds i8, i8* %4195, i64 8
  %4205 = bitcast i8* %4204 to <2 x i32>*
  %4206 = load <2 x i32>, <2 x i32>* %4205, align 1
  %4207 = inttoptr i64 %4199 to float*
  %4208 = load float, float* %4207
  %4209 = extractelement <2 x float> %4203, i32 0
  %4210 = fmul float %4209, %4208
  %4211 = bitcast i8* %4194 to float*
  store float %4210, float* %4211, align 1, !tbaa !2453
  %4212 = bitcast <2 x float> %4203 to <2 x i32>
  %4213 = extractelement <2 x i32> %4212, i32 1
  %4214 = getelementptr inbounds i8, i8* %4194, i64 4
  %4215 = bitcast i8* %4214 to i32*
  store i32 %4213, i32* %4215, align 1, !tbaa !2453
  %4216 = extractelement <2 x i32> %4206, i32 0
  %4217 = getelementptr inbounds i8, i8* %4194, i64 8
  %4218 = bitcast i8* %4217 to i32*
  store i32 %4216, i32* %4218, align 1, !tbaa !2453
  %4219 = extractelement <2 x i32> %4206, i32 1
  %4220 = getelementptr inbounds i8, i8* %4194, i64 12
  %4221 = bitcast i8* %4220 to i32*
  store i32 %4219, i32* %4221, align 1, !tbaa !2453
  %4222 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4223 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4224 = bitcast %union.vec128_t* %XMM1 to i8*
  %4225 = load i64, i64* %PC
  %4226 = add i64 %4225, 4
  store i64 %4226, i64* %PC
  %4227 = bitcast i8* %4223 to <2 x float>*
  %4228 = load <2 x float>, <2 x float>* %4227, align 1
  %4229 = getelementptr inbounds i8, i8* %4223, i64 8
  %4230 = bitcast i8* %4229 to <2 x i32>*
  %4231 = load <2 x i32>, <2 x i32>* %4230, align 1
  %4232 = bitcast i8* %4224 to <2 x float>*
  %4233 = load <2 x float>, <2 x float>* %4232, align 1
  %4234 = extractelement <2 x float> %4228, i32 0
  %4235 = extractelement <2 x float> %4233, i32 0
  %4236 = fadd float %4234, %4235
  %4237 = bitcast i8* %4222 to float*
  store float %4236, float* %4237, align 1, !tbaa !2453
  %4238 = bitcast <2 x float> %4228 to <2 x i32>
  %4239 = extractelement <2 x i32> %4238, i32 1
  %4240 = getelementptr inbounds i8, i8* %4222, i64 4
  %4241 = bitcast i8* %4240 to i32*
  store i32 %4239, i32* %4241, align 1, !tbaa !2453
  %4242 = extractelement <2 x i32> %4231, i32 0
  %4243 = getelementptr inbounds i8, i8* %4222, i64 8
  %4244 = bitcast i8* %4243 to i32*
  store i32 %4242, i32* %4244, align 1, !tbaa !2453
  %4245 = extractelement <2 x i32> %4231, i32 1
  %4246 = getelementptr inbounds i8, i8* %4222, i64 12
  %4247 = bitcast i8* %4246 to i32*
  store i32 %4245, i32* %4247, align 1, !tbaa !2453
  %4248 = load i64, i64* %RBP
  %4249 = sub i64 %4248, 32
  %4250 = load i64, i64* %PC
  %4251 = add i64 %4250, 4
  store i64 %4251, i64* %PC
  %4252 = inttoptr i64 %4249 to i64*
  %4253 = load i64, i64* %4252
  store i64 %4253, i64* %RAX, align 8, !tbaa !2428
  %4254 = load i64, i64* %RBP
  %4255 = sub i64 %4254, 44
  %4256 = load i64, i64* %PC
  %4257 = add i64 %4256, 3
  store i64 %4257, i64* %PC
  %4258 = inttoptr i64 %4255 to i32*
  %4259 = load i32, i32* %4258
  %4260 = zext i32 %4259 to i64
  store i64 %4260, i64* %RDX, align 8, !tbaa !2428
  %4261 = load i64, i64* %RDX
  %4262 = load i64, i64* %PC
  %4263 = add i64 %4262, 3
  store i64 %4263, i64* %PC
  %4264 = trunc i64 %4261 to i32
  %4265 = sub i32 %4264, 2
  %4266 = zext i32 %4265 to i64
  store i64 %4266, i64* %RDX, align 8, !tbaa !2428
  %4267 = icmp ult i32 %4264, 2
  %4268 = zext i1 %4267 to i8
  %4269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4268, i8* %4269, align 1, !tbaa !2432
  %4270 = and i32 %4265, 255
  %4271 = call i32 @llvm.ctpop.i32(i32 %4270) #16
  %4272 = trunc i32 %4271 to i8
  %4273 = and i8 %4272, 1
  %4274 = xor i8 %4273, 1
  %4275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4274, i8* %4275, align 1, !tbaa !2446
  %4276 = xor i64 2, %4261
  %4277 = trunc i64 %4276 to i32
  %4278 = xor i32 %4277, %4265
  %4279 = lshr i32 %4278, 4
  %4280 = trunc i32 %4279 to i8
  %4281 = and i8 %4280, 1
  %4282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4281, i8* %4282, align 1, !tbaa !2447
  %4283 = icmp eq i32 %4265, 0
  %4284 = zext i1 %4283 to i8
  %4285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4284, i8* %4285, align 1, !tbaa !2448
  %4286 = lshr i32 %4265, 31
  %4287 = trunc i32 %4286 to i8
  %4288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4287, i8* %4288, align 1, !tbaa !2449
  %4289 = lshr i32 %4264, 31
  %4290 = xor i32 %4286, %4289
  %4291 = add nuw nsw i32 %4290, %4289
  %4292 = icmp eq i32 %4291, 2
  %4293 = zext i1 %4292 to i8
  %4294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4293, i8* %4294, align 1, !tbaa !2450
  %4295 = load i32, i32* %EDX
  %4296 = zext i32 %4295 to i64
  %4297 = load i64, i64* %PC
  %4298 = add i64 %4297, 3
  store i64 %4298, i64* %PC
  %4299 = shl i64 %4296, 32
  %4300 = ashr exact i64 %4299, 32
  store i64 %4300, i64* %RCX, align 8, !tbaa !2428
  %4301 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4302 = load i64, i64* %RAX
  %4303 = load i64, i64* %RCX
  %4304 = mul i64 %4303, 4
  %4305 = add i64 %4304, %4302
  %4306 = load i64, i64* %PC
  %4307 = add i64 %4306, 5
  store i64 %4307, i64* %PC
  %4308 = inttoptr i64 %4305 to float*
  %4309 = load float, float* %4308
  %4310 = bitcast i8* %4301 to float*
  store float %4309, float* %4310, align 1, !tbaa !2453
  %4311 = getelementptr inbounds i8, i8* %4301, i64 4
  %4312 = bitcast i8* %4311 to float*
  store float 0.000000e+00, float* %4312, align 1, !tbaa !2453
  %4313 = getelementptr inbounds i8, i8* %4301, i64 8
  %4314 = bitcast i8* %4313 to float*
  store float 0.000000e+00, float* %4314, align 1, !tbaa !2453
  %4315 = getelementptr inbounds i8, i8* %4301, i64 12
  %4316 = bitcast i8* %4315 to float*
  store float 0.000000e+00, float* %4316, align 1, !tbaa !2453
  %4317 = load i64, i64* %RBP
  %4318 = sub i64 %4317, 40
  %4319 = load i64, i64* %PC
  %4320 = add i64 %4319, 4
  store i64 %4320, i64* %PC
  %4321 = inttoptr i64 %4318 to i64*
  %4322 = load i64, i64* %4321
  store i64 %4322, i64* %RAX, align 8, !tbaa !2428
  %4323 = load i64, i64* %RBP
  %4324 = sub i64 %4323, 24
  %4325 = load i64, i64* %PC
  %4326 = add i64 %4325, 3
  store i64 %4326, i64* %PC
  %4327 = inttoptr i64 %4324 to i32*
  %4328 = load i32, i32* %4327
  %4329 = zext i32 %4328 to i64
  store i64 %4329, i64* %RDX, align 8, !tbaa !2428
  %4330 = load i64, i64* %RBP
  %4331 = sub i64 %4330, 44
  %4332 = load i64, i64* %PC
  %4333 = add i64 %4332, 3
  store i64 %4333, i64* %PC
  %4334 = inttoptr i64 %4331 to i32*
  %4335 = load i32, i32* %4334
  %4336 = zext i32 %4335 to i64
  store i64 %4336, i64* %RSI, align 8, !tbaa !2428
  %4337 = load i64, i64* %RSI
  %4338 = load i64, i64* %PC
  %4339 = add i64 %4338, 3
  store i64 %4339, i64* %PC
  %4340 = trunc i64 %4337 to i32
  %4341 = sub i32 %4340, 2
  %4342 = zext i32 %4341 to i64
  store i64 %4342, i64* %RSI, align 8, !tbaa !2428
  %4343 = icmp ult i32 %4340, 2
  %4344 = zext i1 %4343 to i8
  %4345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4344, i8* %4345, align 1, !tbaa !2432
  %4346 = and i32 %4341, 255
  %4347 = call i32 @llvm.ctpop.i32(i32 %4346) #16
  %4348 = trunc i32 %4347 to i8
  %4349 = and i8 %4348, 1
  %4350 = xor i8 %4349, 1
  %4351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4350, i8* %4351, align 1, !tbaa !2446
  %4352 = xor i64 2, %4337
  %4353 = trunc i64 %4352 to i32
  %4354 = xor i32 %4353, %4341
  %4355 = lshr i32 %4354, 4
  %4356 = trunc i32 %4355 to i8
  %4357 = and i8 %4356, 1
  %4358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4357, i8* %4358, align 1, !tbaa !2447
  %4359 = icmp eq i32 %4341, 0
  %4360 = zext i1 %4359 to i8
  %4361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4360, i8* %4361, align 1, !tbaa !2448
  %4362 = lshr i32 %4341, 31
  %4363 = trunc i32 %4362 to i8
  %4364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4363, i8* %4364, align 1, !tbaa !2449
  %4365 = lshr i32 %4340, 31
  %4366 = xor i32 %4362, %4365
  %4367 = add nuw nsw i32 %4366, %4365
  %4368 = icmp eq i32 %4367, 2
  %4369 = zext i1 %4368 to i8
  %4370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4369, i8* %4370, align 1, !tbaa !2450
  %4371 = load i64, i64* %RDX
  %4372 = load i32, i32* %ESI
  %4373 = zext i32 %4372 to i64
  %4374 = load i64, i64* %PC
  %4375 = add i64 %4374, 3
  store i64 %4375, i64* %PC
  %4376 = shl i64 %4371, 32
  %4377 = ashr exact i64 %4376, 32
  %4378 = shl i64 %4373, 32
  %4379 = ashr exact i64 %4378, 32
  %4380 = mul nsw i64 %4379, %4377
  %4381 = trunc i64 %4380 to i32
  %4382 = and i64 %4380, 4294967295
  store i64 %4382, i64* %RDX, align 8, !tbaa !2428
  %4383 = shl i64 %4380, 32
  %4384 = ashr exact i64 %4383, 32
  %4385 = icmp ne i64 %4384, %4380
  %4386 = zext i1 %4385 to i8
  %4387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4386, i8* %4387, align 1, !tbaa !2432
  %4388 = and i32 %4381, 255
  %4389 = call i32 @llvm.ctpop.i32(i32 %4388) #16
  %4390 = trunc i32 %4389 to i8
  %4391 = and i8 %4390, 1
  %4392 = xor i8 %4391, 1
  %4393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4392, i8* %4393, align 1, !tbaa !2446
  %4394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4394, align 1, !tbaa !2447
  %4395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4395, align 1, !tbaa !2448
  %4396 = lshr i32 %4381, 31
  %4397 = trunc i32 %4396 to i8
  %4398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4397, i8* %4398, align 1, !tbaa !2449
  %4399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4386, i8* %4399, align 1, !tbaa !2450
  %4400 = load i64, i64* %RDX
  %4401 = load i64, i64* %RBP
  %4402 = sub i64 %4401, 48
  %4403 = load i64, i64* %PC
  %4404 = add i64 %4403, 3
  store i64 %4404, i64* %PC
  %4405 = trunc i64 %4400 to i32
  %4406 = inttoptr i64 %4402 to i32*
  %4407 = load i32, i32* %4406
  %4408 = add i32 %4407, %4405
  %4409 = zext i32 %4408 to i64
  store i64 %4409, i64* %RDX, align 8, !tbaa !2428
  %4410 = icmp ult i32 %4408, %4405
  %4411 = icmp ult i32 %4408, %4407
  %4412 = or i1 %4410, %4411
  %4413 = zext i1 %4412 to i8
  %4414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4413, i8* %4414, align 1, !tbaa !2432
  %4415 = and i32 %4408, 255
  %4416 = call i32 @llvm.ctpop.i32(i32 %4415) #16
  %4417 = trunc i32 %4416 to i8
  %4418 = and i8 %4417, 1
  %4419 = xor i8 %4418, 1
  %4420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4419, i8* %4420, align 1, !tbaa !2446
  %4421 = xor i32 %4407, %4405
  %4422 = xor i32 %4421, %4408
  %4423 = lshr i32 %4422, 4
  %4424 = trunc i32 %4423 to i8
  %4425 = and i8 %4424, 1
  %4426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4425, i8* %4426, align 1, !tbaa !2447
  %4427 = icmp eq i32 %4408, 0
  %4428 = zext i1 %4427 to i8
  %4429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4428, i8* %4429, align 1, !tbaa !2448
  %4430 = lshr i32 %4408, 31
  %4431 = trunc i32 %4430 to i8
  %4432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4431, i8* %4432, align 1, !tbaa !2449
  %4433 = lshr i32 %4405, 31
  %4434 = lshr i32 %4407, 31
  %4435 = xor i32 %4430, %4433
  %4436 = xor i32 %4430, %4434
  %4437 = add nuw nsw i32 %4435, %4436
  %4438 = icmp eq i32 %4437, 2
  %4439 = zext i1 %4438 to i8
  %4440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4439, i8* %4440, align 1, !tbaa !2450
  %4441 = load i32, i32* %EDX
  %4442 = zext i32 %4441 to i64
  %4443 = load i64, i64* %PC
  %4444 = add i64 %4443, 3
  store i64 %4444, i64* %PC
  %4445 = shl i64 %4442, 32
  %4446 = ashr exact i64 %4445, 32
  store i64 %4446, i64* %RCX, align 8, !tbaa !2428
  %4447 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4448 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4449 = load i64, i64* %RAX
  %4450 = load i64, i64* %RCX
  %4451 = mul i64 %4450, 4
  %4452 = add i64 %4451, %4449
  %4453 = load i64, i64* %PC
  %4454 = add i64 %4453, 5
  store i64 %4454, i64* %PC
  %4455 = bitcast i8* %4448 to <2 x float>*
  %4456 = load <2 x float>, <2 x float>* %4455, align 1
  %4457 = getelementptr inbounds i8, i8* %4448, i64 8
  %4458 = bitcast i8* %4457 to <2 x i32>*
  %4459 = load <2 x i32>, <2 x i32>* %4458, align 1
  %4460 = inttoptr i64 %4452 to float*
  %4461 = load float, float* %4460
  %4462 = extractelement <2 x float> %4456, i32 0
  %4463 = fmul float %4462, %4461
  %4464 = bitcast i8* %4447 to float*
  store float %4463, float* %4464, align 1, !tbaa !2453
  %4465 = bitcast <2 x float> %4456 to <2 x i32>
  %4466 = extractelement <2 x i32> %4465, i32 1
  %4467 = getelementptr inbounds i8, i8* %4447, i64 4
  %4468 = bitcast i8* %4467 to i32*
  store i32 %4466, i32* %4468, align 1, !tbaa !2453
  %4469 = extractelement <2 x i32> %4459, i32 0
  %4470 = getelementptr inbounds i8, i8* %4447, i64 8
  %4471 = bitcast i8* %4470 to i32*
  store i32 %4469, i32* %4471, align 1, !tbaa !2453
  %4472 = extractelement <2 x i32> %4459, i32 1
  %4473 = getelementptr inbounds i8, i8* %4447, i64 12
  %4474 = bitcast i8* %4473 to i32*
  store i32 %4472, i32* %4474, align 1, !tbaa !2453
  %4475 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4476 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4477 = bitcast %union.vec128_t* %XMM1 to i8*
  %4478 = load i64, i64* %PC
  %4479 = add i64 %4478, 4
  store i64 %4479, i64* %PC
  %4480 = bitcast i8* %4476 to <2 x float>*
  %4481 = load <2 x float>, <2 x float>* %4480, align 1
  %4482 = getelementptr inbounds i8, i8* %4476, i64 8
  %4483 = bitcast i8* %4482 to <2 x i32>*
  %4484 = load <2 x i32>, <2 x i32>* %4483, align 1
  %4485 = bitcast i8* %4477 to <2 x float>*
  %4486 = load <2 x float>, <2 x float>* %4485, align 1
  %4487 = extractelement <2 x float> %4481, i32 0
  %4488 = extractelement <2 x float> %4486, i32 0
  %4489 = fadd float %4487, %4488
  %4490 = bitcast i8* %4475 to float*
  store float %4489, float* %4490, align 1, !tbaa !2453
  %4491 = bitcast <2 x float> %4481 to <2 x i32>
  %4492 = extractelement <2 x i32> %4491, i32 1
  %4493 = getelementptr inbounds i8, i8* %4475, i64 4
  %4494 = bitcast i8* %4493 to i32*
  store i32 %4492, i32* %4494, align 1, !tbaa !2453
  %4495 = extractelement <2 x i32> %4484, i32 0
  %4496 = getelementptr inbounds i8, i8* %4475, i64 8
  %4497 = bitcast i8* %4496 to i32*
  store i32 %4495, i32* %4497, align 1, !tbaa !2453
  %4498 = extractelement <2 x i32> %4484, i32 1
  %4499 = getelementptr inbounds i8, i8* %4475, i64 12
  %4500 = bitcast i8* %4499 to i32*
  store i32 %4498, i32* %4500, align 1, !tbaa !2453
  %4501 = load i64, i64* %RBP
  %4502 = sub i64 %4501, 32
  %4503 = load i64, i64* %PC
  %4504 = add i64 %4503, 4
  store i64 %4504, i64* %PC
  %4505 = inttoptr i64 %4502 to i64*
  %4506 = load i64, i64* %4505
  store i64 %4506, i64* %RAX, align 8, !tbaa !2428
  %4507 = load i64, i64* %RBP
  %4508 = sub i64 %4507, 44
  %4509 = load i64, i64* %PC
  %4510 = add i64 %4509, 3
  store i64 %4510, i64* %PC
  %4511 = inttoptr i64 %4508 to i32*
  %4512 = load i32, i32* %4511
  %4513 = zext i32 %4512 to i64
  store i64 %4513, i64* %RDX, align 8, !tbaa !2428
  %4514 = load i64, i64* %RDX
  %4515 = load i64, i64* %PC
  %4516 = add i64 %4515, 3
  store i64 %4516, i64* %PC
  %4517 = trunc i64 %4514 to i32
  %4518 = sub i32 %4517, 1
  %4519 = zext i32 %4518 to i64
  store i64 %4519, i64* %RDX, align 8, !tbaa !2428
  %4520 = icmp ult i32 %4517, 1
  %4521 = zext i1 %4520 to i8
  %4522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4521, i8* %4522, align 1, !tbaa !2432
  %4523 = and i32 %4518, 255
  %4524 = call i32 @llvm.ctpop.i32(i32 %4523) #16
  %4525 = trunc i32 %4524 to i8
  %4526 = and i8 %4525, 1
  %4527 = xor i8 %4526, 1
  %4528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4527, i8* %4528, align 1, !tbaa !2446
  %4529 = xor i64 1, %4514
  %4530 = trunc i64 %4529 to i32
  %4531 = xor i32 %4530, %4518
  %4532 = lshr i32 %4531, 4
  %4533 = trunc i32 %4532 to i8
  %4534 = and i8 %4533, 1
  %4535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4534, i8* %4535, align 1, !tbaa !2447
  %4536 = icmp eq i32 %4518, 0
  %4537 = zext i1 %4536 to i8
  %4538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4537, i8* %4538, align 1, !tbaa !2448
  %4539 = lshr i32 %4518, 31
  %4540 = trunc i32 %4539 to i8
  %4541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4540, i8* %4541, align 1, !tbaa !2449
  %4542 = lshr i32 %4517, 31
  %4543 = xor i32 %4539, %4542
  %4544 = add nuw nsw i32 %4543, %4542
  %4545 = icmp eq i32 %4544, 2
  %4546 = zext i1 %4545 to i8
  %4547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4546, i8* %4547, align 1, !tbaa !2450
  %4548 = load i32, i32* %EDX
  %4549 = zext i32 %4548 to i64
  %4550 = load i64, i64* %PC
  %4551 = add i64 %4550, 3
  store i64 %4551, i64* %PC
  %4552 = shl i64 %4549, 32
  %4553 = ashr exact i64 %4552, 32
  store i64 %4553, i64* %RCX, align 8, !tbaa !2428
  %4554 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4555 = load i64, i64* %RAX
  %4556 = load i64, i64* %RCX
  %4557 = mul i64 %4556, 4
  %4558 = add i64 %4557, %4555
  %4559 = load i64, i64* %PC
  %4560 = add i64 %4559, 5
  store i64 %4560, i64* %PC
  %4561 = inttoptr i64 %4558 to float*
  %4562 = load float, float* %4561
  %4563 = bitcast i8* %4554 to float*
  store float %4562, float* %4563, align 1, !tbaa !2453
  %4564 = getelementptr inbounds i8, i8* %4554, i64 4
  %4565 = bitcast i8* %4564 to float*
  store float 0.000000e+00, float* %4565, align 1, !tbaa !2453
  %4566 = getelementptr inbounds i8, i8* %4554, i64 8
  %4567 = bitcast i8* %4566 to float*
  store float 0.000000e+00, float* %4567, align 1, !tbaa !2453
  %4568 = getelementptr inbounds i8, i8* %4554, i64 12
  %4569 = bitcast i8* %4568 to float*
  store float 0.000000e+00, float* %4569, align 1, !tbaa !2453
  %4570 = load i64, i64* %RBP
  %4571 = sub i64 %4570, 40
  %4572 = load i64, i64* %PC
  %4573 = add i64 %4572, 4
  store i64 %4573, i64* %PC
  %4574 = inttoptr i64 %4571 to i64*
  %4575 = load i64, i64* %4574
  store i64 %4575, i64* %RAX, align 8, !tbaa !2428
  %4576 = load i64, i64* %RBP
  %4577 = sub i64 %4576, 24
  %4578 = load i64, i64* %PC
  %4579 = add i64 %4578, 3
  store i64 %4579, i64* %PC
  %4580 = inttoptr i64 %4577 to i32*
  %4581 = load i32, i32* %4580
  %4582 = zext i32 %4581 to i64
  store i64 %4582, i64* %RDX, align 8, !tbaa !2428
  %4583 = load i64, i64* %RBP
  %4584 = sub i64 %4583, 44
  %4585 = load i64, i64* %PC
  %4586 = add i64 %4585, 3
  store i64 %4586, i64* %PC
  %4587 = inttoptr i64 %4584 to i32*
  %4588 = load i32, i32* %4587
  %4589 = zext i32 %4588 to i64
  store i64 %4589, i64* %RSI, align 8, !tbaa !2428
  %4590 = load i64, i64* %RSI
  %4591 = load i64, i64* %PC
  %4592 = add i64 %4591, 3
  store i64 %4592, i64* %PC
  %4593 = trunc i64 %4590 to i32
  %4594 = sub i32 %4593, 1
  %4595 = zext i32 %4594 to i64
  store i64 %4595, i64* %RSI, align 8, !tbaa !2428
  %4596 = icmp ult i32 %4593, 1
  %4597 = zext i1 %4596 to i8
  %4598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4597, i8* %4598, align 1, !tbaa !2432
  %4599 = and i32 %4594, 255
  %4600 = call i32 @llvm.ctpop.i32(i32 %4599) #16
  %4601 = trunc i32 %4600 to i8
  %4602 = and i8 %4601, 1
  %4603 = xor i8 %4602, 1
  %4604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4603, i8* %4604, align 1, !tbaa !2446
  %4605 = xor i64 1, %4590
  %4606 = trunc i64 %4605 to i32
  %4607 = xor i32 %4606, %4594
  %4608 = lshr i32 %4607, 4
  %4609 = trunc i32 %4608 to i8
  %4610 = and i8 %4609, 1
  %4611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4610, i8* %4611, align 1, !tbaa !2447
  %4612 = icmp eq i32 %4594, 0
  %4613 = zext i1 %4612 to i8
  %4614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4613, i8* %4614, align 1, !tbaa !2448
  %4615 = lshr i32 %4594, 31
  %4616 = trunc i32 %4615 to i8
  %4617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4616, i8* %4617, align 1, !tbaa !2449
  %4618 = lshr i32 %4593, 31
  %4619 = xor i32 %4615, %4618
  %4620 = add nuw nsw i32 %4619, %4618
  %4621 = icmp eq i32 %4620, 2
  %4622 = zext i1 %4621 to i8
  %4623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4622, i8* %4623, align 1, !tbaa !2450
  %4624 = load i64, i64* %RDX
  %4625 = load i32, i32* %ESI
  %4626 = zext i32 %4625 to i64
  %4627 = load i64, i64* %PC
  %4628 = add i64 %4627, 3
  store i64 %4628, i64* %PC
  %4629 = shl i64 %4624, 32
  %4630 = ashr exact i64 %4629, 32
  %4631 = shl i64 %4626, 32
  %4632 = ashr exact i64 %4631, 32
  %4633 = mul nsw i64 %4632, %4630
  %4634 = trunc i64 %4633 to i32
  %4635 = and i64 %4633, 4294967295
  store i64 %4635, i64* %RDX, align 8, !tbaa !2428
  %4636 = shl i64 %4633, 32
  %4637 = ashr exact i64 %4636, 32
  %4638 = icmp ne i64 %4637, %4633
  %4639 = zext i1 %4638 to i8
  %4640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4639, i8* %4640, align 1, !tbaa !2432
  %4641 = and i32 %4634, 255
  %4642 = call i32 @llvm.ctpop.i32(i32 %4641) #16
  %4643 = trunc i32 %4642 to i8
  %4644 = and i8 %4643, 1
  %4645 = xor i8 %4644, 1
  %4646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4645, i8* %4646, align 1, !tbaa !2446
  %4647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4647, align 1, !tbaa !2447
  %4648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4648, align 1, !tbaa !2448
  %4649 = lshr i32 %4634, 31
  %4650 = trunc i32 %4649 to i8
  %4651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4650, i8* %4651, align 1, !tbaa !2449
  %4652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4639, i8* %4652, align 1, !tbaa !2450
  %4653 = load i64, i64* %RDX
  %4654 = load i64, i64* %RBP
  %4655 = sub i64 %4654, 48
  %4656 = load i64, i64* %PC
  %4657 = add i64 %4656, 3
  store i64 %4657, i64* %PC
  %4658 = trunc i64 %4653 to i32
  %4659 = inttoptr i64 %4655 to i32*
  %4660 = load i32, i32* %4659
  %4661 = add i32 %4660, %4658
  %4662 = zext i32 %4661 to i64
  store i64 %4662, i64* %RDX, align 8, !tbaa !2428
  %4663 = icmp ult i32 %4661, %4658
  %4664 = icmp ult i32 %4661, %4660
  %4665 = or i1 %4663, %4664
  %4666 = zext i1 %4665 to i8
  %4667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4666, i8* %4667, align 1, !tbaa !2432
  %4668 = and i32 %4661, 255
  %4669 = call i32 @llvm.ctpop.i32(i32 %4668) #16
  %4670 = trunc i32 %4669 to i8
  %4671 = and i8 %4670, 1
  %4672 = xor i8 %4671, 1
  %4673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4672, i8* %4673, align 1, !tbaa !2446
  %4674 = xor i32 %4660, %4658
  %4675 = xor i32 %4674, %4661
  %4676 = lshr i32 %4675, 4
  %4677 = trunc i32 %4676 to i8
  %4678 = and i8 %4677, 1
  %4679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4678, i8* %4679, align 1, !tbaa !2447
  %4680 = icmp eq i32 %4661, 0
  %4681 = zext i1 %4680 to i8
  %4682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4681, i8* %4682, align 1, !tbaa !2448
  %4683 = lshr i32 %4661, 31
  %4684 = trunc i32 %4683 to i8
  %4685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4684, i8* %4685, align 1, !tbaa !2449
  %4686 = lshr i32 %4658, 31
  %4687 = lshr i32 %4660, 31
  %4688 = xor i32 %4683, %4686
  %4689 = xor i32 %4683, %4687
  %4690 = add nuw nsw i32 %4688, %4689
  %4691 = icmp eq i32 %4690, 2
  %4692 = zext i1 %4691 to i8
  %4693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4692, i8* %4693, align 1, !tbaa !2450
  %4694 = load i32, i32* %EDX
  %4695 = zext i32 %4694 to i64
  %4696 = load i64, i64* %PC
  %4697 = add i64 %4696, 3
  store i64 %4697, i64* %PC
  %4698 = shl i64 %4695, 32
  %4699 = ashr exact i64 %4698, 32
  store i64 %4699, i64* %RCX, align 8, !tbaa !2428
  %4700 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4701 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4702 = load i64, i64* %RAX
  %4703 = load i64, i64* %RCX
  %4704 = mul i64 %4703, 4
  %4705 = add i64 %4704, %4702
  %4706 = load i64, i64* %PC
  %4707 = add i64 %4706, 5
  store i64 %4707, i64* %PC
  %4708 = bitcast i8* %4701 to <2 x float>*
  %4709 = load <2 x float>, <2 x float>* %4708, align 1
  %4710 = getelementptr inbounds i8, i8* %4701, i64 8
  %4711 = bitcast i8* %4710 to <2 x i32>*
  %4712 = load <2 x i32>, <2 x i32>* %4711, align 1
  %4713 = inttoptr i64 %4705 to float*
  %4714 = load float, float* %4713
  %4715 = extractelement <2 x float> %4709, i32 0
  %4716 = fmul float %4715, %4714
  %4717 = bitcast i8* %4700 to float*
  store float %4716, float* %4717, align 1, !tbaa !2453
  %4718 = bitcast <2 x float> %4709 to <2 x i32>
  %4719 = extractelement <2 x i32> %4718, i32 1
  %4720 = getelementptr inbounds i8, i8* %4700, i64 4
  %4721 = bitcast i8* %4720 to i32*
  store i32 %4719, i32* %4721, align 1, !tbaa !2453
  %4722 = extractelement <2 x i32> %4712, i32 0
  %4723 = getelementptr inbounds i8, i8* %4700, i64 8
  %4724 = bitcast i8* %4723 to i32*
  store i32 %4722, i32* %4724, align 1, !tbaa !2453
  %4725 = extractelement <2 x i32> %4712, i32 1
  %4726 = getelementptr inbounds i8, i8* %4700, i64 12
  %4727 = bitcast i8* %4726 to i32*
  store i32 %4725, i32* %4727, align 1, !tbaa !2453
  %4728 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4729 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4730 = bitcast %union.vec128_t* %XMM1 to i8*
  %4731 = load i64, i64* %PC
  %4732 = add i64 %4731, 4
  store i64 %4732, i64* %PC
  %4733 = bitcast i8* %4729 to <2 x float>*
  %4734 = load <2 x float>, <2 x float>* %4733, align 1
  %4735 = getelementptr inbounds i8, i8* %4729, i64 8
  %4736 = bitcast i8* %4735 to <2 x i32>*
  %4737 = load <2 x i32>, <2 x i32>* %4736, align 1
  %4738 = bitcast i8* %4730 to <2 x float>*
  %4739 = load <2 x float>, <2 x float>* %4738, align 1
  %4740 = extractelement <2 x float> %4734, i32 0
  %4741 = extractelement <2 x float> %4739, i32 0
  %4742 = fadd float %4740, %4741
  %4743 = bitcast i8* %4728 to float*
  store float %4742, float* %4743, align 1, !tbaa !2453
  %4744 = bitcast <2 x float> %4734 to <2 x i32>
  %4745 = extractelement <2 x i32> %4744, i32 1
  %4746 = getelementptr inbounds i8, i8* %4728, i64 4
  %4747 = bitcast i8* %4746 to i32*
  store i32 %4745, i32* %4747, align 1, !tbaa !2453
  %4748 = extractelement <2 x i32> %4737, i32 0
  %4749 = getelementptr inbounds i8, i8* %4728, i64 8
  %4750 = bitcast i8* %4749 to i32*
  store i32 %4748, i32* %4750, align 1, !tbaa !2453
  %4751 = extractelement <2 x i32> %4737, i32 1
  %4752 = getelementptr inbounds i8, i8* %4728, i64 12
  %4753 = bitcast i8* %4752 to i32*
  store i32 %4751, i32* %4753, align 1, !tbaa !2453
  %4754 = load i64, i64* %RBP
  %4755 = sub i64 %4754, 32
  %4756 = load i64, i64* %PC
  %4757 = add i64 %4756, 4
  store i64 %4757, i64* %PC
  %4758 = inttoptr i64 %4755 to i64*
  %4759 = load i64, i64* %4758
  store i64 %4759, i64* %RAX, align 8, !tbaa !2428
  %4760 = load i64, i64* %RBP
  %4761 = sub i64 %4760, 44
  %4762 = load i64, i64* %PC
  %4763 = add i64 %4762, 4
  store i64 %4763, i64* %PC
  %4764 = inttoptr i64 %4761 to i32*
  %4765 = load i32, i32* %4764
  %4766 = sext i32 %4765 to i64
  store i64 %4766, i64* %RCX, align 8, !tbaa !2428
  %4767 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4768 = load i64, i64* %RAX
  %4769 = load i64, i64* %RCX
  %4770 = mul i64 %4769, 4
  %4771 = add i64 %4770, %4768
  %4772 = load i64, i64* %PC
  %4773 = add i64 %4772, 5
  store i64 %4773, i64* %PC
  %4774 = inttoptr i64 %4771 to float*
  %4775 = load float, float* %4774
  %4776 = bitcast i8* %4767 to float*
  store float %4775, float* %4776, align 1, !tbaa !2453
  %4777 = getelementptr inbounds i8, i8* %4767, i64 4
  %4778 = bitcast i8* %4777 to float*
  store float 0.000000e+00, float* %4778, align 1, !tbaa !2453
  %4779 = getelementptr inbounds i8, i8* %4767, i64 8
  %4780 = bitcast i8* %4779 to float*
  store float 0.000000e+00, float* %4780, align 1, !tbaa !2453
  %4781 = getelementptr inbounds i8, i8* %4767, i64 12
  %4782 = bitcast i8* %4781 to float*
  store float 0.000000e+00, float* %4782, align 1, !tbaa !2453
  %4783 = load i64, i64* %RBP
  %4784 = sub i64 %4783, 40
  %4785 = load i64, i64* %PC
  %4786 = add i64 %4785, 4
  store i64 %4786, i64* %PC
  %4787 = inttoptr i64 %4784 to i64*
  %4788 = load i64, i64* %4787
  store i64 %4788, i64* %RAX, align 8, !tbaa !2428
  %4789 = load i64, i64* %RBP
  %4790 = sub i64 %4789, 24
  %4791 = load i64, i64* %PC
  %4792 = add i64 %4791, 3
  store i64 %4792, i64* %PC
  %4793 = inttoptr i64 %4790 to i32*
  %4794 = load i32, i32* %4793
  %4795 = zext i32 %4794 to i64
  store i64 %4795, i64* %RDX, align 8, !tbaa !2428
  %4796 = load i64, i64* %RDX
  %4797 = load i64, i64* %RBP
  %4798 = sub i64 %4797, 44
  %4799 = load i64, i64* %PC
  %4800 = add i64 %4799, 4
  store i64 %4800, i64* %PC
  %4801 = inttoptr i64 %4798 to i32*
  %4802 = load i32, i32* %4801
  %4803 = shl i64 %4796, 32
  %4804 = ashr exact i64 %4803, 32
  %4805 = sext i32 %4802 to i64
  %4806 = mul nsw i64 %4805, %4804
  %4807 = trunc i64 %4806 to i32
  %4808 = and i64 %4806, 4294967295
  store i64 %4808, i64* %RDX, align 8, !tbaa !2428
  %4809 = shl i64 %4806, 32
  %4810 = ashr exact i64 %4809, 32
  %4811 = icmp ne i64 %4810, %4806
  %4812 = zext i1 %4811 to i8
  %4813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4812, i8* %4813, align 1, !tbaa !2432
  %4814 = and i32 %4807, 255
  %4815 = call i32 @llvm.ctpop.i32(i32 %4814) #16
  %4816 = trunc i32 %4815 to i8
  %4817 = and i8 %4816, 1
  %4818 = xor i8 %4817, 1
  %4819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4818, i8* %4819, align 1, !tbaa !2446
  %4820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4820, align 1, !tbaa !2447
  %4821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4821, align 1, !tbaa !2448
  %4822 = lshr i32 %4807, 31
  %4823 = trunc i32 %4822 to i8
  %4824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4823, i8* %4824, align 1, !tbaa !2449
  %4825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4812, i8* %4825, align 1, !tbaa !2450
  %4826 = load i64, i64* %RDX
  %4827 = load i64, i64* %RBP
  %4828 = sub i64 %4827, 48
  %4829 = load i64, i64* %PC
  %4830 = add i64 %4829, 3
  store i64 %4830, i64* %PC
  %4831 = trunc i64 %4826 to i32
  %4832 = inttoptr i64 %4828 to i32*
  %4833 = load i32, i32* %4832
  %4834 = add i32 %4833, %4831
  %4835 = zext i32 %4834 to i64
  store i64 %4835, i64* %RDX, align 8, !tbaa !2428
  %4836 = icmp ult i32 %4834, %4831
  %4837 = icmp ult i32 %4834, %4833
  %4838 = or i1 %4836, %4837
  %4839 = zext i1 %4838 to i8
  %4840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4839, i8* %4840, align 1, !tbaa !2432
  %4841 = and i32 %4834, 255
  %4842 = call i32 @llvm.ctpop.i32(i32 %4841) #16
  %4843 = trunc i32 %4842 to i8
  %4844 = and i8 %4843, 1
  %4845 = xor i8 %4844, 1
  %4846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4845, i8* %4846, align 1, !tbaa !2446
  %4847 = xor i32 %4833, %4831
  %4848 = xor i32 %4847, %4834
  %4849 = lshr i32 %4848, 4
  %4850 = trunc i32 %4849 to i8
  %4851 = and i8 %4850, 1
  %4852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4851, i8* %4852, align 1, !tbaa !2447
  %4853 = icmp eq i32 %4834, 0
  %4854 = zext i1 %4853 to i8
  %4855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4854, i8* %4855, align 1, !tbaa !2448
  %4856 = lshr i32 %4834, 31
  %4857 = trunc i32 %4856 to i8
  %4858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4857, i8* %4858, align 1, !tbaa !2449
  %4859 = lshr i32 %4831, 31
  %4860 = lshr i32 %4833, 31
  %4861 = xor i32 %4856, %4859
  %4862 = xor i32 %4856, %4860
  %4863 = add nuw nsw i32 %4861, %4862
  %4864 = icmp eq i32 %4863, 2
  %4865 = zext i1 %4864 to i8
  %4866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4865, i8* %4866, align 1, !tbaa !2450
  %4867 = load i32, i32* %EDX
  %4868 = zext i32 %4867 to i64
  %4869 = load i64, i64* %PC
  %4870 = add i64 %4869, 3
  store i64 %4870, i64* %PC
  %4871 = shl i64 %4868, 32
  %4872 = ashr exact i64 %4871, 32
  store i64 %4872, i64* %RCX, align 8, !tbaa !2428
  %4873 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4874 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4875 = load i64, i64* %RAX
  %4876 = load i64, i64* %RCX
  %4877 = mul i64 %4876, 4
  %4878 = add i64 %4877, %4875
  %4879 = load i64, i64* %PC
  %4880 = add i64 %4879, 5
  store i64 %4880, i64* %PC
  %4881 = bitcast i8* %4874 to <2 x float>*
  %4882 = load <2 x float>, <2 x float>* %4881, align 1
  %4883 = getelementptr inbounds i8, i8* %4874, i64 8
  %4884 = bitcast i8* %4883 to <2 x i32>*
  %4885 = load <2 x i32>, <2 x i32>* %4884, align 1
  %4886 = inttoptr i64 %4878 to float*
  %4887 = load float, float* %4886
  %4888 = extractelement <2 x float> %4882, i32 0
  %4889 = fmul float %4888, %4887
  %4890 = bitcast i8* %4873 to float*
  store float %4889, float* %4890, align 1, !tbaa !2453
  %4891 = bitcast <2 x float> %4882 to <2 x i32>
  %4892 = extractelement <2 x i32> %4891, i32 1
  %4893 = getelementptr inbounds i8, i8* %4873, i64 4
  %4894 = bitcast i8* %4893 to i32*
  store i32 %4892, i32* %4894, align 1, !tbaa !2453
  %4895 = extractelement <2 x i32> %4885, i32 0
  %4896 = getelementptr inbounds i8, i8* %4873, i64 8
  %4897 = bitcast i8* %4896 to i32*
  store i32 %4895, i32* %4897, align 1, !tbaa !2453
  %4898 = extractelement <2 x i32> %4885, i32 1
  %4899 = getelementptr inbounds i8, i8* %4873, i64 12
  %4900 = bitcast i8* %4899 to i32*
  store i32 %4898, i32* %4900, align 1, !tbaa !2453
  %4901 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4902 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4903 = bitcast %union.vec128_t* %XMM1 to i8*
  %4904 = load i64, i64* %PC
  %4905 = add i64 %4904, 4
  store i64 %4905, i64* %PC
  %4906 = bitcast i8* %4902 to <2 x float>*
  %4907 = load <2 x float>, <2 x float>* %4906, align 1
  %4908 = getelementptr inbounds i8, i8* %4902, i64 8
  %4909 = bitcast i8* %4908 to <2 x i32>*
  %4910 = load <2 x i32>, <2 x i32>* %4909, align 1
  %4911 = bitcast i8* %4903 to <2 x float>*
  %4912 = load <2 x float>, <2 x float>* %4911, align 1
  %4913 = extractelement <2 x float> %4907, i32 0
  %4914 = extractelement <2 x float> %4912, i32 0
  %4915 = fadd float %4913, %4914
  %4916 = bitcast i8* %4901 to float*
  store float %4915, float* %4916, align 1, !tbaa !2453
  %4917 = bitcast <2 x float> %4907 to <2 x i32>
  %4918 = extractelement <2 x i32> %4917, i32 1
  %4919 = getelementptr inbounds i8, i8* %4901, i64 4
  %4920 = bitcast i8* %4919 to i32*
  store i32 %4918, i32* %4920, align 1, !tbaa !2453
  %4921 = extractelement <2 x i32> %4910, i32 0
  %4922 = getelementptr inbounds i8, i8* %4901, i64 8
  %4923 = bitcast i8* %4922 to i32*
  store i32 %4921, i32* %4923, align 1, !tbaa !2453
  %4924 = extractelement <2 x i32> %4910, i32 1
  %4925 = getelementptr inbounds i8, i8* %4901, i64 12
  %4926 = bitcast i8* %4925 to i32*
  store i32 %4924, i32* %4926, align 1, !tbaa !2453
  %4927 = load i64, i64* %RBP
  %4928 = sub i64 %4927, 16
  %4929 = load i64, i64* %PC
  %4930 = add i64 %4929, 4
  store i64 %4930, i64* %PC
  %4931 = inttoptr i64 %4928 to i64*
  %4932 = load i64, i64* %4931
  store i64 %4932, i64* %RAX, align 8, !tbaa !2428
  %4933 = load i64, i64* %RBP
  %4934 = sub i64 %4933, 48
  %4935 = load i64, i64* %PC
  %4936 = add i64 %4935, 4
  store i64 %4936, i64* %PC
  %4937 = inttoptr i64 %4934 to i32*
  %4938 = load i32, i32* %4937
  %4939 = sext i32 %4938 to i64
  store i64 %4939, i64* %RCX, align 8, !tbaa !2428
  %4940 = load i64, i64* %RAX
  %4941 = load i64, i64* %RCX
  %4942 = mul i64 %4941, 4
  %4943 = add i64 %4942, %4940
  %4944 = bitcast %union.vec128_t* %XMM0 to i8*
  %4945 = load i64, i64* %PC
  %4946 = add i64 %4945, 5
  store i64 %4946, i64* %PC
  %4947 = bitcast i8* %4944 to <2 x float>*
  %4948 = load <2 x float>, <2 x float>* %4947, align 1
  %4949 = extractelement <2 x float> %4948, i32 0
  %4950 = inttoptr i64 %4943 to float*
  store float %4949, float* %4950
  %4951 = load i64, i64* %RBP
  %4952 = sub i64 %4951, 48
  %4953 = load i64, i64* %PC
  %4954 = add i64 %4953, 3
  store i64 %4954, i64* %PC
  %4955 = inttoptr i64 %4952 to i32*
  %4956 = load i32, i32* %4955
  %4957 = zext i32 %4956 to i64
  store i64 %4957, i64* %RAX, align 8, !tbaa !2428
  %4958 = load i64, i64* %RAX
  %4959 = load i64, i64* %PC
  %4960 = add i64 %4959, 3
  store i64 %4960, i64* %PC
  %4961 = trunc i64 %4958 to i32
  %4962 = add i32 1, %4961
  %4963 = zext i32 %4962 to i64
  store i64 %4963, i64* %RAX, align 8, !tbaa !2428
  %4964 = icmp ult i32 %4962, %4961
  %4965 = icmp ult i32 %4962, 1
  %4966 = or i1 %4964, %4965
  %4967 = zext i1 %4966 to i8
  %4968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4967, i8* %4968, align 1, !tbaa !2432
  %4969 = and i32 %4962, 255
  %4970 = call i32 @llvm.ctpop.i32(i32 %4969) #16
  %4971 = trunc i32 %4970 to i8
  %4972 = and i8 %4971, 1
  %4973 = xor i8 %4972, 1
  %4974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4973, i8* %4974, align 1, !tbaa !2446
  %4975 = xor i64 1, %4958
  %4976 = trunc i64 %4975 to i32
  %4977 = xor i32 %4976, %4962
  %4978 = lshr i32 %4977, 4
  %4979 = trunc i32 %4978 to i8
  %4980 = and i8 %4979, 1
  %4981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4980, i8* %4981, align 1, !tbaa !2447
  %4982 = icmp eq i32 %4962, 0
  %4983 = zext i1 %4982 to i8
  %4984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4983, i8* %4984, align 1, !tbaa !2448
  %4985 = lshr i32 %4962, 31
  %4986 = trunc i32 %4985 to i8
  %4987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4986, i8* %4987, align 1, !tbaa !2449
  %4988 = lshr i32 %4961, 31
  %4989 = xor i32 %4985, %4988
  %4990 = add nuw nsw i32 %4989, %4985
  %4991 = icmp eq i32 %4990, 2
  %4992 = zext i1 %4991 to i8
  %4993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4992, i8* %4993, align 1, !tbaa !2450
  %4994 = load i64, i64* %RBP
  %4995 = sub i64 %4994, 48
  %4996 = load i32, i32* %EAX
  %4997 = zext i32 %4996 to i64
  %4998 = load i64, i64* %PC
  %4999 = add i64 %4998, 3
  store i64 %4999, i64* %PC
  %5000 = inttoptr i64 %4995 to i32*
  store i32 %4996, i32* %5000
  %5001 = load i64, i64* %PC
  %5002 = sub i64 %5001, 821
  %5003 = load i64, i64* %PC
  %5004 = add i64 %5003, 5
  store i64 %5004, i64* %PC
  %5005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5002, i64* %5005, align 8, !tbaa !2428
  br label %block_4024b9

block_4021b6:                                     ; preds = %block_4021aa
  %5006 = load i64, i64* %RBP
  %5007 = sub i64 %5006, 16
  %5008 = load i64, i64* %PC
  %5009 = add i64 %5008, 4
  store i64 %5009, i64* %PC
  %5010 = inttoptr i64 %5007 to i64*
  %5011 = load i64, i64* %5010
  store i64 %5011, i64* %RAX, align 8, !tbaa !2428
  %5012 = load i64, i64* %RBP
  %5013 = sub i64 %5012, 48
  %5014 = load i64, i64* %PC
  %5015 = add i64 %5014, 4
  store i64 %5015, i64* %PC
  %5016 = inttoptr i64 %5013 to i32*
  %5017 = load i32, i32* %5016
  %5018 = sext i32 %5017 to i64
  store i64 %5018, i64* %RCX, align 8, !tbaa !2428
  %5019 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5020 = load i64, i64* %RAX
  %5021 = load i64, i64* %RCX
  %5022 = mul i64 %5021, 4
  %5023 = add i64 %5022, %5020
  %5024 = load i64, i64* %PC
  %5025 = add i64 %5024, 5
  store i64 %5025, i64* %PC
  %5026 = inttoptr i64 %5023 to float*
  %5027 = load float, float* %5026
  %5028 = bitcast i8* %5019 to float*
  store float %5027, float* %5028, align 1, !tbaa !2453
  %5029 = getelementptr inbounds i8, i8* %5019, i64 4
  %5030 = bitcast i8* %5029 to float*
  store float 0.000000e+00, float* %5030, align 1, !tbaa !2453
  %5031 = getelementptr inbounds i8, i8* %5019, i64 8
  %5032 = bitcast i8* %5031 to float*
  store float 0.000000e+00, float* %5032, align 1, !tbaa !2453
  %5033 = getelementptr inbounds i8, i8* %5019, i64 12
  %5034 = bitcast i8* %5033 to float*
  store float 0.000000e+00, float* %5034, align 1, !tbaa !2453
  %5035 = load i64, i64* %RBP
  %5036 = sub i64 %5035, 32
  %5037 = load i64, i64* %PC
  %5038 = add i64 %5037, 4
  store i64 %5038, i64* %PC
  %5039 = inttoptr i64 %5036 to i64*
  %5040 = load i64, i64* %5039
  store i64 %5040, i64* %RAX, align 8, !tbaa !2428
  %5041 = load i64, i64* %RBP
  %5042 = sub i64 %5041, 44
  %5043 = load i64, i64* %PC
  %5044 = add i64 %5043, 3
  store i64 %5044, i64* %PC
  %5045 = inttoptr i64 %5042 to i32*
  %5046 = load i32, i32* %5045
  %5047 = zext i32 %5046 to i64
  store i64 %5047, i64* %RDX, align 8, !tbaa !2428
  %5048 = load i64, i64* %RDX
  %5049 = load i64, i64* %PC
  %5050 = add i64 %5049, 3
  store i64 %5050, i64* %PC
  %5051 = trunc i64 %5048 to i32
  %5052 = sub i32 %5051, 3
  %5053 = zext i32 %5052 to i64
  store i64 %5053, i64* %RDX, align 8, !tbaa !2428
  %5054 = icmp ult i32 %5051, 3
  %5055 = zext i1 %5054 to i8
  %5056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5055, i8* %5056, align 1, !tbaa !2432
  %5057 = and i32 %5052, 255
  %5058 = call i32 @llvm.ctpop.i32(i32 %5057) #16
  %5059 = trunc i32 %5058 to i8
  %5060 = and i8 %5059, 1
  %5061 = xor i8 %5060, 1
  %5062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5061, i8* %5062, align 1, !tbaa !2446
  %5063 = xor i64 3, %5048
  %5064 = trunc i64 %5063 to i32
  %5065 = xor i32 %5064, %5052
  %5066 = lshr i32 %5065, 4
  %5067 = trunc i32 %5066 to i8
  %5068 = and i8 %5067, 1
  %5069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5068, i8* %5069, align 1, !tbaa !2447
  %5070 = icmp eq i32 %5052, 0
  %5071 = zext i1 %5070 to i8
  %5072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5071, i8* %5072, align 1, !tbaa !2448
  %5073 = lshr i32 %5052, 31
  %5074 = trunc i32 %5073 to i8
  %5075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5074, i8* %5075, align 1, !tbaa !2449
  %5076 = lshr i32 %5051, 31
  %5077 = xor i32 %5073, %5076
  %5078 = add nuw nsw i32 %5077, %5076
  %5079 = icmp eq i32 %5078, 2
  %5080 = zext i1 %5079 to i8
  %5081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5080, i8* %5081, align 1, !tbaa !2450
  %5082 = load i32, i32* %EDX
  %5083 = zext i32 %5082 to i64
  %5084 = load i64, i64* %PC
  %5085 = add i64 %5084, 3
  store i64 %5085, i64* %PC
  %5086 = shl i64 %5083, 32
  %5087 = ashr exact i64 %5086, 32
  store i64 %5087, i64* %RCX, align 8, !tbaa !2428
  %5088 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5089 = load i64, i64* %RAX
  %5090 = load i64, i64* %RCX
  %5091 = mul i64 %5090, 4
  %5092 = add i64 %5091, %5089
  %5093 = load i64, i64* %PC
  %5094 = add i64 %5093, 5
  store i64 %5094, i64* %PC
  %5095 = inttoptr i64 %5092 to float*
  %5096 = load float, float* %5095
  %5097 = bitcast i8* %5088 to float*
  store float %5096, float* %5097, align 1, !tbaa !2453
  %5098 = getelementptr inbounds i8, i8* %5088, i64 4
  %5099 = bitcast i8* %5098 to float*
  store float 0.000000e+00, float* %5099, align 1, !tbaa !2453
  %5100 = getelementptr inbounds i8, i8* %5088, i64 8
  %5101 = bitcast i8* %5100 to float*
  store float 0.000000e+00, float* %5101, align 1, !tbaa !2453
  %5102 = getelementptr inbounds i8, i8* %5088, i64 12
  %5103 = bitcast i8* %5102 to float*
  store float 0.000000e+00, float* %5103, align 1, !tbaa !2453
  %5104 = load i64, i64* %RBP
  %5105 = sub i64 %5104, 40
  %5106 = load i64, i64* %PC
  %5107 = add i64 %5106, 4
  store i64 %5107, i64* %PC
  %5108 = inttoptr i64 %5105 to i64*
  %5109 = load i64, i64* %5108
  store i64 %5109, i64* %RAX, align 8, !tbaa !2428
  %5110 = load i64, i64* %RBP
  %5111 = sub i64 %5110, 24
  %5112 = load i64, i64* %PC
  %5113 = add i64 %5112, 3
  store i64 %5113, i64* %PC
  %5114 = inttoptr i64 %5111 to i32*
  %5115 = load i32, i32* %5114
  %5116 = zext i32 %5115 to i64
  store i64 %5116, i64* %RDX, align 8, !tbaa !2428
  %5117 = load i64, i64* %RBP
  %5118 = sub i64 %5117, 44
  %5119 = load i64, i64* %PC
  %5120 = add i64 %5119, 3
  store i64 %5120, i64* %PC
  %5121 = inttoptr i64 %5118 to i32*
  %5122 = load i32, i32* %5121
  %5123 = zext i32 %5122 to i64
  store i64 %5123, i64* %RSI, align 8, !tbaa !2428
  %5124 = load i64, i64* %RSI
  %5125 = load i64, i64* %PC
  %5126 = add i64 %5125, 3
  store i64 %5126, i64* %PC
  %5127 = trunc i64 %5124 to i32
  %5128 = sub i32 %5127, 3
  %5129 = zext i32 %5128 to i64
  store i64 %5129, i64* %RSI, align 8, !tbaa !2428
  %5130 = icmp ult i32 %5127, 3
  %5131 = zext i1 %5130 to i8
  %5132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5131, i8* %5132, align 1, !tbaa !2432
  %5133 = and i32 %5128, 255
  %5134 = call i32 @llvm.ctpop.i32(i32 %5133) #16
  %5135 = trunc i32 %5134 to i8
  %5136 = and i8 %5135, 1
  %5137 = xor i8 %5136, 1
  %5138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5137, i8* %5138, align 1, !tbaa !2446
  %5139 = xor i64 3, %5124
  %5140 = trunc i64 %5139 to i32
  %5141 = xor i32 %5140, %5128
  %5142 = lshr i32 %5141, 4
  %5143 = trunc i32 %5142 to i8
  %5144 = and i8 %5143, 1
  %5145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5144, i8* %5145, align 1, !tbaa !2447
  %5146 = icmp eq i32 %5128, 0
  %5147 = zext i1 %5146 to i8
  %5148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5147, i8* %5148, align 1, !tbaa !2448
  %5149 = lshr i32 %5128, 31
  %5150 = trunc i32 %5149 to i8
  %5151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5150, i8* %5151, align 1, !tbaa !2449
  %5152 = lshr i32 %5127, 31
  %5153 = xor i32 %5149, %5152
  %5154 = add nuw nsw i32 %5153, %5152
  %5155 = icmp eq i32 %5154, 2
  %5156 = zext i1 %5155 to i8
  %5157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5156, i8* %5157, align 1, !tbaa !2450
  %5158 = load i64, i64* %RDX
  %5159 = load i32, i32* %ESI
  %5160 = zext i32 %5159 to i64
  %5161 = load i64, i64* %PC
  %5162 = add i64 %5161, 3
  store i64 %5162, i64* %PC
  %5163 = shl i64 %5158, 32
  %5164 = ashr exact i64 %5163, 32
  %5165 = shl i64 %5160, 32
  %5166 = ashr exact i64 %5165, 32
  %5167 = mul nsw i64 %5166, %5164
  %5168 = trunc i64 %5167 to i32
  %5169 = and i64 %5167, 4294967295
  store i64 %5169, i64* %RDX, align 8, !tbaa !2428
  %5170 = shl i64 %5167, 32
  %5171 = ashr exact i64 %5170, 32
  %5172 = icmp ne i64 %5171, %5167
  %5173 = zext i1 %5172 to i8
  %5174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5173, i8* %5174, align 1, !tbaa !2432
  %5175 = and i32 %5168, 255
  %5176 = call i32 @llvm.ctpop.i32(i32 %5175) #16
  %5177 = trunc i32 %5176 to i8
  %5178 = and i8 %5177, 1
  %5179 = xor i8 %5178, 1
  %5180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5179, i8* %5180, align 1, !tbaa !2446
  %5181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5181, align 1, !tbaa !2447
  %5182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5182, align 1, !tbaa !2448
  %5183 = lshr i32 %5168, 31
  %5184 = trunc i32 %5183 to i8
  %5185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5184, i8* %5185, align 1, !tbaa !2449
  %5186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5173, i8* %5186, align 1, !tbaa !2450
  %5187 = load i64, i64* %RDX
  %5188 = load i64, i64* %RBP
  %5189 = sub i64 %5188, 48
  %5190 = load i64, i64* %PC
  %5191 = add i64 %5190, 3
  store i64 %5191, i64* %PC
  %5192 = trunc i64 %5187 to i32
  %5193 = inttoptr i64 %5189 to i32*
  %5194 = load i32, i32* %5193
  %5195 = add i32 %5194, %5192
  %5196 = zext i32 %5195 to i64
  store i64 %5196, i64* %RDX, align 8, !tbaa !2428
  %5197 = icmp ult i32 %5195, %5192
  %5198 = icmp ult i32 %5195, %5194
  %5199 = or i1 %5197, %5198
  %5200 = zext i1 %5199 to i8
  %5201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5200, i8* %5201, align 1, !tbaa !2432
  %5202 = and i32 %5195, 255
  %5203 = call i32 @llvm.ctpop.i32(i32 %5202) #16
  %5204 = trunc i32 %5203 to i8
  %5205 = and i8 %5204, 1
  %5206 = xor i8 %5205, 1
  %5207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5206, i8* %5207, align 1, !tbaa !2446
  %5208 = xor i32 %5194, %5192
  %5209 = xor i32 %5208, %5195
  %5210 = lshr i32 %5209, 4
  %5211 = trunc i32 %5210 to i8
  %5212 = and i8 %5211, 1
  %5213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5212, i8* %5213, align 1, !tbaa !2447
  %5214 = icmp eq i32 %5195, 0
  %5215 = zext i1 %5214 to i8
  %5216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5215, i8* %5216, align 1, !tbaa !2448
  %5217 = lshr i32 %5195, 31
  %5218 = trunc i32 %5217 to i8
  %5219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5218, i8* %5219, align 1, !tbaa !2449
  %5220 = lshr i32 %5192, 31
  %5221 = lshr i32 %5194, 31
  %5222 = xor i32 %5217, %5220
  %5223 = xor i32 %5217, %5221
  %5224 = add nuw nsw i32 %5222, %5223
  %5225 = icmp eq i32 %5224, 2
  %5226 = zext i1 %5225 to i8
  %5227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5226, i8* %5227, align 1, !tbaa !2450
  %5228 = load i32, i32* %EDX
  %5229 = zext i32 %5228 to i64
  %5230 = load i64, i64* %PC
  %5231 = add i64 %5230, 3
  store i64 %5231, i64* %PC
  %5232 = shl i64 %5229, 32
  %5233 = ashr exact i64 %5232, 32
  store i64 %5233, i64* %RCX, align 8, !tbaa !2428
  %5234 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5235 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5236 = load i64, i64* %RAX
  %5237 = load i64, i64* %RCX
  %5238 = mul i64 %5237, 4
  %5239 = add i64 %5238, %5236
  %5240 = load i64, i64* %PC
  %5241 = add i64 %5240, 5
  store i64 %5241, i64* %PC
  %5242 = bitcast i8* %5235 to <2 x float>*
  %5243 = load <2 x float>, <2 x float>* %5242, align 1
  %5244 = getelementptr inbounds i8, i8* %5235, i64 8
  %5245 = bitcast i8* %5244 to <2 x i32>*
  %5246 = load <2 x i32>, <2 x i32>* %5245, align 1
  %5247 = inttoptr i64 %5239 to float*
  %5248 = load float, float* %5247
  %5249 = extractelement <2 x float> %5243, i32 0
  %5250 = fmul float %5249, %5248
  %5251 = bitcast i8* %5234 to float*
  store float %5250, float* %5251, align 1, !tbaa !2453
  %5252 = bitcast <2 x float> %5243 to <2 x i32>
  %5253 = extractelement <2 x i32> %5252, i32 1
  %5254 = getelementptr inbounds i8, i8* %5234, i64 4
  %5255 = bitcast i8* %5254 to i32*
  store i32 %5253, i32* %5255, align 1, !tbaa !2453
  %5256 = extractelement <2 x i32> %5246, i32 0
  %5257 = getelementptr inbounds i8, i8* %5234, i64 8
  %5258 = bitcast i8* %5257 to i32*
  store i32 %5256, i32* %5258, align 1, !tbaa !2453
  %5259 = extractelement <2 x i32> %5246, i32 1
  %5260 = getelementptr inbounds i8, i8* %5234, i64 12
  %5261 = bitcast i8* %5260 to i32*
  store i32 %5259, i32* %5261, align 1, !tbaa !2453
  %5262 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5263 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5264 = bitcast %union.vec128_t* %XMM1 to i8*
  %5265 = load i64, i64* %PC
  %5266 = add i64 %5265, 4
  store i64 %5266, i64* %PC
  %5267 = bitcast i8* %5263 to <2 x float>*
  %5268 = load <2 x float>, <2 x float>* %5267, align 1
  %5269 = getelementptr inbounds i8, i8* %5263, i64 8
  %5270 = bitcast i8* %5269 to <2 x i32>*
  %5271 = load <2 x i32>, <2 x i32>* %5270, align 1
  %5272 = bitcast i8* %5264 to <2 x float>*
  %5273 = load <2 x float>, <2 x float>* %5272, align 1
  %5274 = extractelement <2 x float> %5268, i32 0
  %5275 = extractelement <2 x float> %5273, i32 0
  %5276 = fadd float %5274, %5275
  %5277 = bitcast i8* %5262 to float*
  store float %5276, float* %5277, align 1, !tbaa !2453
  %5278 = bitcast <2 x float> %5268 to <2 x i32>
  %5279 = extractelement <2 x i32> %5278, i32 1
  %5280 = getelementptr inbounds i8, i8* %5262, i64 4
  %5281 = bitcast i8* %5280 to i32*
  store i32 %5279, i32* %5281, align 1, !tbaa !2453
  %5282 = extractelement <2 x i32> %5271, i32 0
  %5283 = getelementptr inbounds i8, i8* %5262, i64 8
  %5284 = bitcast i8* %5283 to i32*
  store i32 %5282, i32* %5284, align 1, !tbaa !2453
  %5285 = extractelement <2 x i32> %5271, i32 1
  %5286 = getelementptr inbounds i8, i8* %5262, i64 12
  %5287 = bitcast i8* %5286 to i32*
  store i32 %5285, i32* %5287, align 1, !tbaa !2453
  %5288 = load i64, i64* %RBP
  %5289 = sub i64 %5288, 32
  %5290 = load i64, i64* %PC
  %5291 = add i64 %5290, 4
  store i64 %5291, i64* %PC
  %5292 = inttoptr i64 %5289 to i64*
  %5293 = load i64, i64* %5292
  store i64 %5293, i64* %RAX, align 8, !tbaa !2428
  %5294 = load i64, i64* %RBP
  %5295 = sub i64 %5294, 44
  %5296 = load i64, i64* %PC
  %5297 = add i64 %5296, 3
  store i64 %5297, i64* %PC
  %5298 = inttoptr i64 %5295 to i32*
  %5299 = load i32, i32* %5298
  %5300 = zext i32 %5299 to i64
  store i64 %5300, i64* %RDX, align 8, !tbaa !2428
  %5301 = load i64, i64* %RDX
  %5302 = load i64, i64* %PC
  %5303 = add i64 %5302, 3
  store i64 %5303, i64* %PC
  %5304 = trunc i64 %5301 to i32
  %5305 = sub i32 %5304, 2
  %5306 = zext i32 %5305 to i64
  store i64 %5306, i64* %RDX, align 8, !tbaa !2428
  %5307 = icmp ult i32 %5304, 2
  %5308 = zext i1 %5307 to i8
  %5309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5308, i8* %5309, align 1, !tbaa !2432
  %5310 = and i32 %5305, 255
  %5311 = call i32 @llvm.ctpop.i32(i32 %5310) #16
  %5312 = trunc i32 %5311 to i8
  %5313 = and i8 %5312, 1
  %5314 = xor i8 %5313, 1
  %5315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5314, i8* %5315, align 1, !tbaa !2446
  %5316 = xor i64 2, %5301
  %5317 = trunc i64 %5316 to i32
  %5318 = xor i32 %5317, %5305
  %5319 = lshr i32 %5318, 4
  %5320 = trunc i32 %5319 to i8
  %5321 = and i8 %5320, 1
  %5322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5321, i8* %5322, align 1, !tbaa !2447
  %5323 = icmp eq i32 %5305, 0
  %5324 = zext i1 %5323 to i8
  %5325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5324, i8* %5325, align 1, !tbaa !2448
  %5326 = lshr i32 %5305, 31
  %5327 = trunc i32 %5326 to i8
  %5328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5327, i8* %5328, align 1, !tbaa !2449
  %5329 = lshr i32 %5304, 31
  %5330 = xor i32 %5326, %5329
  %5331 = add nuw nsw i32 %5330, %5329
  %5332 = icmp eq i32 %5331, 2
  %5333 = zext i1 %5332 to i8
  %5334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5333, i8* %5334, align 1, !tbaa !2450
  %5335 = load i32, i32* %EDX
  %5336 = zext i32 %5335 to i64
  %5337 = load i64, i64* %PC
  %5338 = add i64 %5337, 3
  store i64 %5338, i64* %PC
  %5339 = shl i64 %5336, 32
  %5340 = ashr exact i64 %5339, 32
  store i64 %5340, i64* %RCX, align 8, !tbaa !2428
  %5341 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5342 = load i64, i64* %RAX
  %5343 = load i64, i64* %RCX
  %5344 = mul i64 %5343, 4
  %5345 = add i64 %5344, %5342
  %5346 = load i64, i64* %PC
  %5347 = add i64 %5346, 5
  store i64 %5347, i64* %PC
  %5348 = inttoptr i64 %5345 to float*
  %5349 = load float, float* %5348
  %5350 = bitcast i8* %5341 to float*
  store float %5349, float* %5350, align 1, !tbaa !2453
  %5351 = getelementptr inbounds i8, i8* %5341, i64 4
  %5352 = bitcast i8* %5351 to float*
  store float 0.000000e+00, float* %5352, align 1, !tbaa !2453
  %5353 = getelementptr inbounds i8, i8* %5341, i64 8
  %5354 = bitcast i8* %5353 to float*
  store float 0.000000e+00, float* %5354, align 1, !tbaa !2453
  %5355 = getelementptr inbounds i8, i8* %5341, i64 12
  %5356 = bitcast i8* %5355 to float*
  store float 0.000000e+00, float* %5356, align 1, !tbaa !2453
  %5357 = load i64, i64* %RBP
  %5358 = sub i64 %5357, 40
  %5359 = load i64, i64* %PC
  %5360 = add i64 %5359, 4
  store i64 %5360, i64* %PC
  %5361 = inttoptr i64 %5358 to i64*
  %5362 = load i64, i64* %5361
  store i64 %5362, i64* %RAX, align 8, !tbaa !2428
  %5363 = load i64, i64* %RBP
  %5364 = sub i64 %5363, 24
  %5365 = load i64, i64* %PC
  %5366 = add i64 %5365, 3
  store i64 %5366, i64* %PC
  %5367 = inttoptr i64 %5364 to i32*
  %5368 = load i32, i32* %5367
  %5369 = zext i32 %5368 to i64
  store i64 %5369, i64* %RDX, align 8, !tbaa !2428
  %5370 = load i64, i64* %RBP
  %5371 = sub i64 %5370, 44
  %5372 = load i64, i64* %PC
  %5373 = add i64 %5372, 3
  store i64 %5373, i64* %PC
  %5374 = inttoptr i64 %5371 to i32*
  %5375 = load i32, i32* %5374
  %5376 = zext i32 %5375 to i64
  store i64 %5376, i64* %RSI, align 8, !tbaa !2428
  %5377 = load i64, i64* %RSI
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 3
  store i64 %5379, i64* %PC
  %5380 = trunc i64 %5377 to i32
  %5381 = sub i32 %5380, 2
  %5382 = zext i32 %5381 to i64
  store i64 %5382, i64* %RSI, align 8, !tbaa !2428
  %5383 = icmp ult i32 %5380, 2
  %5384 = zext i1 %5383 to i8
  %5385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5384, i8* %5385, align 1, !tbaa !2432
  %5386 = and i32 %5381, 255
  %5387 = call i32 @llvm.ctpop.i32(i32 %5386) #16
  %5388 = trunc i32 %5387 to i8
  %5389 = and i8 %5388, 1
  %5390 = xor i8 %5389, 1
  %5391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5390, i8* %5391, align 1, !tbaa !2446
  %5392 = xor i64 2, %5377
  %5393 = trunc i64 %5392 to i32
  %5394 = xor i32 %5393, %5381
  %5395 = lshr i32 %5394, 4
  %5396 = trunc i32 %5395 to i8
  %5397 = and i8 %5396, 1
  %5398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5397, i8* %5398, align 1, !tbaa !2447
  %5399 = icmp eq i32 %5381, 0
  %5400 = zext i1 %5399 to i8
  %5401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5400, i8* %5401, align 1, !tbaa !2448
  %5402 = lshr i32 %5381, 31
  %5403 = trunc i32 %5402 to i8
  %5404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5403, i8* %5404, align 1, !tbaa !2449
  %5405 = lshr i32 %5380, 31
  %5406 = xor i32 %5402, %5405
  %5407 = add nuw nsw i32 %5406, %5405
  %5408 = icmp eq i32 %5407, 2
  %5409 = zext i1 %5408 to i8
  %5410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5409, i8* %5410, align 1, !tbaa !2450
  %5411 = load i64, i64* %RDX
  %5412 = load i32, i32* %ESI
  %5413 = zext i32 %5412 to i64
  %5414 = load i64, i64* %PC
  %5415 = add i64 %5414, 3
  store i64 %5415, i64* %PC
  %5416 = shl i64 %5411, 32
  %5417 = ashr exact i64 %5416, 32
  %5418 = shl i64 %5413, 32
  %5419 = ashr exact i64 %5418, 32
  %5420 = mul nsw i64 %5419, %5417
  %5421 = trunc i64 %5420 to i32
  %5422 = and i64 %5420, 4294967295
  store i64 %5422, i64* %RDX, align 8, !tbaa !2428
  %5423 = shl i64 %5420, 32
  %5424 = ashr exact i64 %5423, 32
  %5425 = icmp ne i64 %5424, %5420
  %5426 = zext i1 %5425 to i8
  %5427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5426, i8* %5427, align 1, !tbaa !2432
  %5428 = and i32 %5421, 255
  %5429 = call i32 @llvm.ctpop.i32(i32 %5428) #16
  %5430 = trunc i32 %5429 to i8
  %5431 = and i8 %5430, 1
  %5432 = xor i8 %5431, 1
  %5433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5432, i8* %5433, align 1, !tbaa !2446
  %5434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5434, align 1, !tbaa !2447
  %5435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5435, align 1, !tbaa !2448
  %5436 = lshr i32 %5421, 31
  %5437 = trunc i32 %5436 to i8
  %5438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5437, i8* %5438, align 1, !tbaa !2449
  %5439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5426, i8* %5439, align 1, !tbaa !2450
  %5440 = load i64, i64* %RDX
  %5441 = load i64, i64* %RBP
  %5442 = sub i64 %5441, 48
  %5443 = load i64, i64* %PC
  %5444 = add i64 %5443, 3
  store i64 %5444, i64* %PC
  %5445 = trunc i64 %5440 to i32
  %5446 = inttoptr i64 %5442 to i32*
  %5447 = load i32, i32* %5446
  %5448 = add i32 %5447, %5445
  %5449 = zext i32 %5448 to i64
  store i64 %5449, i64* %RDX, align 8, !tbaa !2428
  %5450 = icmp ult i32 %5448, %5445
  %5451 = icmp ult i32 %5448, %5447
  %5452 = or i1 %5450, %5451
  %5453 = zext i1 %5452 to i8
  %5454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5453, i8* %5454, align 1, !tbaa !2432
  %5455 = and i32 %5448, 255
  %5456 = call i32 @llvm.ctpop.i32(i32 %5455) #16
  %5457 = trunc i32 %5456 to i8
  %5458 = and i8 %5457, 1
  %5459 = xor i8 %5458, 1
  %5460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5459, i8* %5460, align 1, !tbaa !2446
  %5461 = xor i32 %5447, %5445
  %5462 = xor i32 %5461, %5448
  %5463 = lshr i32 %5462, 4
  %5464 = trunc i32 %5463 to i8
  %5465 = and i8 %5464, 1
  %5466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5465, i8* %5466, align 1, !tbaa !2447
  %5467 = icmp eq i32 %5448, 0
  %5468 = zext i1 %5467 to i8
  %5469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5468, i8* %5469, align 1, !tbaa !2448
  %5470 = lshr i32 %5448, 31
  %5471 = trunc i32 %5470 to i8
  %5472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5471, i8* %5472, align 1, !tbaa !2449
  %5473 = lshr i32 %5445, 31
  %5474 = lshr i32 %5447, 31
  %5475 = xor i32 %5470, %5473
  %5476 = xor i32 %5470, %5474
  %5477 = add nuw nsw i32 %5475, %5476
  %5478 = icmp eq i32 %5477, 2
  %5479 = zext i1 %5478 to i8
  %5480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5479, i8* %5480, align 1, !tbaa !2450
  %5481 = load i32, i32* %EDX
  %5482 = zext i32 %5481 to i64
  %5483 = load i64, i64* %PC
  %5484 = add i64 %5483, 3
  store i64 %5484, i64* %PC
  %5485 = shl i64 %5482, 32
  %5486 = ashr exact i64 %5485, 32
  store i64 %5486, i64* %RCX, align 8, !tbaa !2428
  %5487 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5488 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5489 = load i64, i64* %RAX
  %5490 = load i64, i64* %RCX
  %5491 = mul i64 %5490, 4
  %5492 = add i64 %5491, %5489
  %5493 = load i64, i64* %PC
  %5494 = add i64 %5493, 5
  store i64 %5494, i64* %PC
  %5495 = bitcast i8* %5488 to <2 x float>*
  %5496 = load <2 x float>, <2 x float>* %5495, align 1
  %5497 = getelementptr inbounds i8, i8* %5488, i64 8
  %5498 = bitcast i8* %5497 to <2 x i32>*
  %5499 = load <2 x i32>, <2 x i32>* %5498, align 1
  %5500 = inttoptr i64 %5492 to float*
  %5501 = load float, float* %5500
  %5502 = extractelement <2 x float> %5496, i32 0
  %5503 = fmul float %5502, %5501
  %5504 = bitcast i8* %5487 to float*
  store float %5503, float* %5504, align 1, !tbaa !2453
  %5505 = bitcast <2 x float> %5496 to <2 x i32>
  %5506 = extractelement <2 x i32> %5505, i32 1
  %5507 = getelementptr inbounds i8, i8* %5487, i64 4
  %5508 = bitcast i8* %5507 to i32*
  store i32 %5506, i32* %5508, align 1, !tbaa !2453
  %5509 = extractelement <2 x i32> %5499, i32 0
  %5510 = getelementptr inbounds i8, i8* %5487, i64 8
  %5511 = bitcast i8* %5510 to i32*
  store i32 %5509, i32* %5511, align 1, !tbaa !2453
  %5512 = extractelement <2 x i32> %5499, i32 1
  %5513 = getelementptr inbounds i8, i8* %5487, i64 12
  %5514 = bitcast i8* %5513 to i32*
  store i32 %5512, i32* %5514, align 1, !tbaa !2453
  %5515 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5516 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5517 = bitcast %union.vec128_t* %XMM1 to i8*
  %5518 = load i64, i64* %PC
  %5519 = add i64 %5518, 4
  store i64 %5519, i64* %PC
  %5520 = bitcast i8* %5516 to <2 x float>*
  %5521 = load <2 x float>, <2 x float>* %5520, align 1
  %5522 = getelementptr inbounds i8, i8* %5516, i64 8
  %5523 = bitcast i8* %5522 to <2 x i32>*
  %5524 = load <2 x i32>, <2 x i32>* %5523, align 1
  %5525 = bitcast i8* %5517 to <2 x float>*
  %5526 = load <2 x float>, <2 x float>* %5525, align 1
  %5527 = extractelement <2 x float> %5521, i32 0
  %5528 = extractelement <2 x float> %5526, i32 0
  %5529 = fadd float %5527, %5528
  %5530 = bitcast i8* %5515 to float*
  store float %5529, float* %5530, align 1, !tbaa !2453
  %5531 = bitcast <2 x float> %5521 to <2 x i32>
  %5532 = extractelement <2 x i32> %5531, i32 1
  %5533 = getelementptr inbounds i8, i8* %5515, i64 4
  %5534 = bitcast i8* %5533 to i32*
  store i32 %5532, i32* %5534, align 1, !tbaa !2453
  %5535 = extractelement <2 x i32> %5524, i32 0
  %5536 = getelementptr inbounds i8, i8* %5515, i64 8
  %5537 = bitcast i8* %5536 to i32*
  store i32 %5535, i32* %5537, align 1, !tbaa !2453
  %5538 = extractelement <2 x i32> %5524, i32 1
  %5539 = getelementptr inbounds i8, i8* %5515, i64 12
  %5540 = bitcast i8* %5539 to i32*
  store i32 %5538, i32* %5540, align 1, !tbaa !2453
  %5541 = load i64, i64* %RBP
  %5542 = sub i64 %5541, 32
  %5543 = load i64, i64* %PC
  %5544 = add i64 %5543, 4
  store i64 %5544, i64* %PC
  %5545 = inttoptr i64 %5542 to i64*
  %5546 = load i64, i64* %5545
  store i64 %5546, i64* %RAX, align 8, !tbaa !2428
  %5547 = load i64, i64* %RBP
  %5548 = sub i64 %5547, 44
  %5549 = load i64, i64* %PC
  %5550 = add i64 %5549, 3
  store i64 %5550, i64* %PC
  %5551 = inttoptr i64 %5548 to i32*
  %5552 = load i32, i32* %5551
  %5553 = zext i32 %5552 to i64
  store i64 %5553, i64* %RDX, align 8, !tbaa !2428
  %5554 = load i64, i64* %RDX
  %5555 = load i64, i64* %PC
  %5556 = add i64 %5555, 3
  store i64 %5556, i64* %PC
  %5557 = trunc i64 %5554 to i32
  %5558 = sub i32 %5557, 1
  %5559 = zext i32 %5558 to i64
  store i64 %5559, i64* %RDX, align 8, !tbaa !2428
  %5560 = icmp ult i32 %5557, 1
  %5561 = zext i1 %5560 to i8
  %5562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5561, i8* %5562, align 1, !tbaa !2432
  %5563 = and i32 %5558, 255
  %5564 = call i32 @llvm.ctpop.i32(i32 %5563) #16
  %5565 = trunc i32 %5564 to i8
  %5566 = and i8 %5565, 1
  %5567 = xor i8 %5566, 1
  %5568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5567, i8* %5568, align 1, !tbaa !2446
  %5569 = xor i64 1, %5554
  %5570 = trunc i64 %5569 to i32
  %5571 = xor i32 %5570, %5558
  %5572 = lshr i32 %5571, 4
  %5573 = trunc i32 %5572 to i8
  %5574 = and i8 %5573, 1
  %5575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5574, i8* %5575, align 1, !tbaa !2447
  %5576 = icmp eq i32 %5558, 0
  %5577 = zext i1 %5576 to i8
  %5578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5577, i8* %5578, align 1, !tbaa !2448
  %5579 = lshr i32 %5558, 31
  %5580 = trunc i32 %5579 to i8
  %5581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5580, i8* %5581, align 1, !tbaa !2449
  %5582 = lshr i32 %5557, 31
  %5583 = xor i32 %5579, %5582
  %5584 = add nuw nsw i32 %5583, %5582
  %5585 = icmp eq i32 %5584, 2
  %5586 = zext i1 %5585 to i8
  %5587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5586, i8* %5587, align 1, !tbaa !2450
  %5588 = load i32, i32* %EDX
  %5589 = zext i32 %5588 to i64
  %5590 = load i64, i64* %PC
  %5591 = add i64 %5590, 3
  store i64 %5591, i64* %PC
  %5592 = shl i64 %5589, 32
  %5593 = ashr exact i64 %5592, 32
  store i64 %5593, i64* %RCX, align 8, !tbaa !2428
  %5594 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5595 = load i64, i64* %RAX
  %5596 = load i64, i64* %RCX
  %5597 = mul i64 %5596, 4
  %5598 = add i64 %5597, %5595
  %5599 = load i64, i64* %PC
  %5600 = add i64 %5599, 5
  store i64 %5600, i64* %PC
  %5601 = inttoptr i64 %5598 to float*
  %5602 = load float, float* %5601
  %5603 = bitcast i8* %5594 to float*
  store float %5602, float* %5603, align 1, !tbaa !2453
  %5604 = getelementptr inbounds i8, i8* %5594, i64 4
  %5605 = bitcast i8* %5604 to float*
  store float 0.000000e+00, float* %5605, align 1, !tbaa !2453
  %5606 = getelementptr inbounds i8, i8* %5594, i64 8
  %5607 = bitcast i8* %5606 to float*
  store float 0.000000e+00, float* %5607, align 1, !tbaa !2453
  %5608 = getelementptr inbounds i8, i8* %5594, i64 12
  %5609 = bitcast i8* %5608 to float*
  store float 0.000000e+00, float* %5609, align 1, !tbaa !2453
  %5610 = load i64, i64* %RBP
  %5611 = sub i64 %5610, 40
  %5612 = load i64, i64* %PC
  %5613 = add i64 %5612, 4
  store i64 %5613, i64* %PC
  %5614 = inttoptr i64 %5611 to i64*
  %5615 = load i64, i64* %5614
  store i64 %5615, i64* %RAX, align 8, !tbaa !2428
  %5616 = load i64, i64* %RBP
  %5617 = sub i64 %5616, 24
  %5618 = load i64, i64* %PC
  %5619 = add i64 %5618, 3
  store i64 %5619, i64* %PC
  %5620 = inttoptr i64 %5617 to i32*
  %5621 = load i32, i32* %5620
  %5622 = zext i32 %5621 to i64
  store i64 %5622, i64* %RDX, align 8, !tbaa !2428
  %5623 = load i64, i64* %RBP
  %5624 = sub i64 %5623, 44
  %5625 = load i64, i64* %PC
  %5626 = add i64 %5625, 3
  store i64 %5626, i64* %PC
  %5627 = inttoptr i64 %5624 to i32*
  %5628 = load i32, i32* %5627
  %5629 = zext i32 %5628 to i64
  store i64 %5629, i64* %RSI, align 8, !tbaa !2428
  %5630 = load i64, i64* %RSI
  %5631 = load i64, i64* %PC
  %5632 = add i64 %5631, 3
  store i64 %5632, i64* %PC
  %5633 = trunc i64 %5630 to i32
  %5634 = sub i32 %5633, 1
  %5635 = zext i32 %5634 to i64
  store i64 %5635, i64* %RSI, align 8, !tbaa !2428
  %5636 = icmp ult i32 %5633, 1
  %5637 = zext i1 %5636 to i8
  %5638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5637, i8* %5638, align 1, !tbaa !2432
  %5639 = and i32 %5634, 255
  %5640 = call i32 @llvm.ctpop.i32(i32 %5639) #16
  %5641 = trunc i32 %5640 to i8
  %5642 = and i8 %5641, 1
  %5643 = xor i8 %5642, 1
  %5644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5643, i8* %5644, align 1, !tbaa !2446
  %5645 = xor i64 1, %5630
  %5646 = trunc i64 %5645 to i32
  %5647 = xor i32 %5646, %5634
  %5648 = lshr i32 %5647, 4
  %5649 = trunc i32 %5648 to i8
  %5650 = and i8 %5649, 1
  %5651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5650, i8* %5651, align 1, !tbaa !2447
  %5652 = icmp eq i32 %5634, 0
  %5653 = zext i1 %5652 to i8
  %5654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5653, i8* %5654, align 1, !tbaa !2448
  %5655 = lshr i32 %5634, 31
  %5656 = trunc i32 %5655 to i8
  %5657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5656, i8* %5657, align 1, !tbaa !2449
  %5658 = lshr i32 %5633, 31
  %5659 = xor i32 %5655, %5658
  %5660 = add nuw nsw i32 %5659, %5658
  %5661 = icmp eq i32 %5660, 2
  %5662 = zext i1 %5661 to i8
  %5663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5662, i8* %5663, align 1, !tbaa !2450
  %5664 = load i64, i64* %RDX
  %5665 = load i32, i32* %ESI
  %5666 = zext i32 %5665 to i64
  %5667 = load i64, i64* %PC
  %5668 = add i64 %5667, 3
  store i64 %5668, i64* %PC
  %5669 = shl i64 %5664, 32
  %5670 = ashr exact i64 %5669, 32
  %5671 = shl i64 %5666, 32
  %5672 = ashr exact i64 %5671, 32
  %5673 = mul nsw i64 %5672, %5670
  %5674 = trunc i64 %5673 to i32
  %5675 = and i64 %5673, 4294967295
  store i64 %5675, i64* %RDX, align 8, !tbaa !2428
  %5676 = shl i64 %5673, 32
  %5677 = ashr exact i64 %5676, 32
  %5678 = icmp ne i64 %5677, %5673
  %5679 = zext i1 %5678 to i8
  %5680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5679, i8* %5680, align 1, !tbaa !2432
  %5681 = and i32 %5674, 255
  %5682 = call i32 @llvm.ctpop.i32(i32 %5681) #16
  %5683 = trunc i32 %5682 to i8
  %5684 = and i8 %5683, 1
  %5685 = xor i8 %5684, 1
  %5686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5685, i8* %5686, align 1, !tbaa !2446
  %5687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5687, align 1, !tbaa !2447
  %5688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5688, align 1, !tbaa !2448
  %5689 = lshr i32 %5674, 31
  %5690 = trunc i32 %5689 to i8
  %5691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5690, i8* %5691, align 1, !tbaa !2449
  %5692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5679, i8* %5692, align 1, !tbaa !2450
  %5693 = load i64, i64* %RDX
  %5694 = load i64, i64* %RBP
  %5695 = sub i64 %5694, 48
  %5696 = load i64, i64* %PC
  %5697 = add i64 %5696, 3
  store i64 %5697, i64* %PC
  %5698 = trunc i64 %5693 to i32
  %5699 = inttoptr i64 %5695 to i32*
  %5700 = load i32, i32* %5699
  %5701 = add i32 %5700, %5698
  %5702 = zext i32 %5701 to i64
  store i64 %5702, i64* %RDX, align 8, !tbaa !2428
  %5703 = icmp ult i32 %5701, %5698
  %5704 = icmp ult i32 %5701, %5700
  %5705 = or i1 %5703, %5704
  %5706 = zext i1 %5705 to i8
  %5707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5706, i8* %5707, align 1, !tbaa !2432
  %5708 = and i32 %5701, 255
  %5709 = call i32 @llvm.ctpop.i32(i32 %5708) #16
  %5710 = trunc i32 %5709 to i8
  %5711 = and i8 %5710, 1
  %5712 = xor i8 %5711, 1
  %5713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5712, i8* %5713, align 1, !tbaa !2446
  %5714 = xor i32 %5700, %5698
  %5715 = xor i32 %5714, %5701
  %5716 = lshr i32 %5715, 4
  %5717 = trunc i32 %5716 to i8
  %5718 = and i8 %5717, 1
  %5719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5718, i8* %5719, align 1, !tbaa !2447
  %5720 = icmp eq i32 %5701, 0
  %5721 = zext i1 %5720 to i8
  %5722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5721, i8* %5722, align 1, !tbaa !2448
  %5723 = lshr i32 %5701, 31
  %5724 = trunc i32 %5723 to i8
  %5725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5724, i8* %5725, align 1, !tbaa !2449
  %5726 = lshr i32 %5698, 31
  %5727 = lshr i32 %5700, 31
  %5728 = xor i32 %5723, %5726
  %5729 = xor i32 %5723, %5727
  %5730 = add nuw nsw i32 %5728, %5729
  %5731 = icmp eq i32 %5730, 2
  %5732 = zext i1 %5731 to i8
  %5733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5732, i8* %5733, align 1, !tbaa !2450
  %5734 = load i32, i32* %EDX
  %5735 = zext i32 %5734 to i64
  %5736 = load i64, i64* %PC
  %5737 = add i64 %5736, 3
  store i64 %5737, i64* %PC
  %5738 = shl i64 %5735, 32
  %5739 = ashr exact i64 %5738, 32
  store i64 %5739, i64* %RCX, align 8, !tbaa !2428
  %5740 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5741 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5742 = load i64, i64* %RAX
  %5743 = load i64, i64* %RCX
  %5744 = mul i64 %5743, 4
  %5745 = add i64 %5744, %5742
  %5746 = load i64, i64* %PC
  %5747 = add i64 %5746, 5
  store i64 %5747, i64* %PC
  %5748 = bitcast i8* %5741 to <2 x float>*
  %5749 = load <2 x float>, <2 x float>* %5748, align 1
  %5750 = getelementptr inbounds i8, i8* %5741, i64 8
  %5751 = bitcast i8* %5750 to <2 x i32>*
  %5752 = load <2 x i32>, <2 x i32>* %5751, align 1
  %5753 = inttoptr i64 %5745 to float*
  %5754 = load float, float* %5753
  %5755 = extractelement <2 x float> %5749, i32 0
  %5756 = fmul float %5755, %5754
  %5757 = bitcast i8* %5740 to float*
  store float %5756, float* %5757, align 1, !tbaa !2453
  %5758 = bitcast <2 x float> %5749 to <2 x i32>
  %5759 = extractelement <2 x i32> %5758, i32 1
  %5760 = getelementptr inbounds i8, i8* %5740, i64 4
  %5761 = bitcast i8* %5760 to i32*
  store i32 %5759, i32* %5761, align 1, !tbaa !2453
  %5762 = extractelement <2 x i32> %5752, i32 0
  %5763 = getelementptr inbounds i8, i8* %5740, i64 8
  %5764 = bitcast i8* %5763 to i32*
  store i32 %5762, i32* %5764, align 1, !tbaa !2453
  %5765 = extractelement <2 x i32> %5752, i32 1
  %5766 = getelementptr inbounds i8, i8* %5740, i64 12
  %5767 = bitcast i8* %5766 to i32*
  store i32 %5765, i32* %5767, align 1, !tbaa !2453
  %5768 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5769 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5770 = bitcast %union.vec128_t* %XMM1 to i8*
  %5771 = load i64, i64* %PC
  %5772 = add i64 %5771, 4
  store i64 %5772, i64* %PC
  %5773 = bitcast i8* %5769 to <2 x float>*
  %5774 = load <2 x float>, <2 x float>* %5773, align 1
  %5775 = getelementptr inbounds i8, i8* %5769, i64 8
  %5776 = bitcast i8* %5775 to <2 x i32>*
  %5777 = load <2 x i32>, <2 x i32>* %5776, align 1
  %5778 = bitcast i8* %5770 to <2 x float>*
  %5779 = load <2 x float>, <2 x float>* %5778, align 1
  %5780 = extractelement <2 x float> %5774, i32 0
  %5781 = extractelement <2 x float> %5779, i32 0
  %5782 = fadd float %5780, %5781
  %5783 = bitcast i8* %5768 to float*
  store float %5782, float* %5783, align 1, !tbaa !2453
  %5784 = bitcast <2 x float> %5774 to <2 x i32>
  %5785 = extractelement <2 x i32> %5784, i32 1
  %5786 = getelementptr inbounds i8, i8* %5768, i64 4
  %5787 = bitcast i8* %5786 to i32*
  store i32 %5785, i32* %5787, align 1, !tbaa !2453
  %5788 = extractelement <2 x i32> %5777, i32 0
  %5789 = getelementptr inbounds i8, i8* %5768, i64 8
  %5790 = bitcast i8* %5789 to i32*
  store i32 %5788, i32* %5790, align 1, !tbaa !2453
  %5791 = extractelement <2 x i32> %5777, i32 1
  %5792 = getelementptr inbounds i8, i8* %5768, i64 12
  %5793 = bitcast i8* %5792 to i32*
  store i32 %5791, i32* %5793, align 1, !tbaa !2453
  %5794 = load i64, i64* %RBP
  %5795 = sub i64 %5794, 32
  %5796 = load i64, i64* %PC
  %5797 = add i64 %5796, 4
  store i64 %5797, i64* %PC
  %5798 = inttoptr i64 %5795 to i64*
  %5799 = load i64, i64* %5798
  store i64 %5799, i64* %RAX, align 8, !tbaa !2428
  %5800 = load i64, i64* %RBP
  %5801 = sub i64 %5800, 44
  %5802 = load i64, i64* %PC
  %5803 = add i64 %5802, 4
  store i64 %5803, i64* %PC
  %5804 = inttoptr i64 %5801 to i32*
  %5805 = load i32, i32* %5804
  %5806 = sext i32 %5805 to i64
  store i64 %5806, i64* %RCX, align 8, !tbaa !2428
  %5807 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5808 = load i64, i64* %RAX
  %5809 = load i64, i64* %RCX
  %5810 = mul i64 %5809, 4
  %5811 = add i64 %5810, %5808
  %5812 = load i64, i64* %PC
  %5813 = add i64 %5812, 5
  store i64 %5813, i64* %PC
  %5814 = inttoptr i64 %5811 to float*
  %5815 = load float, float* %5814
  %5816 = bitcast i8* %5807 to float*
  store float %5815, float* %5816, align 1, !tbaa !2453
  %5817 = getelementptr inbounds i8, i8* %5807, i64 4
  %5818 = bitcast i8* %5817 to float*
  store float 0.000000e+00, float* %5818, align 1, !tbaa !2453
  %5819 = getelementptr inbounds i8, i8* %5807, i64 8
  %5820 = bitcast i8* %5819 to float*
  store float 0.000000e+00, float* %5820, align 1, !tbaa !2453
  %5821 = getelementptr inbounds i8, i8* %5807, i64 12
  %5822 = bitcast i8* %5821 to float*
  store float 0.000000e+00, float* %5822, align 1, !tbaa !2453
  %5823 = load i64, i64* %RBP
  %5824 = sub i64 %5823, 40
  %5825 = load i64, i64* %PC
  %5826 = add i64 %5825, 4
  store i64 %5826, i64* %PC
  %5827 = inttoptr i64 %5824 to i64*
  %5828 = load i64, i64* %5827
  store i64 %5828, i64* %RAX, align 8, !tbaa !2428
  %5829 = load i64, i64* %RBP
  %5830 = sub i64 %5829, 24
  %5831 = load i64, i64* %PC
  %5832 = add i64 %5831, 3
  store i64 %5832, i64* %PC
  %5833 = inttoptr i64 %5830 to i32*
  %5834 = load i32, i32* %5833
  %5835 = zext i32 %5834 to i64
  store i64 %5835, i64* %RDX, align 8, !tbaa !2428
  %5836 = load i64, i64* %RDX
  %5837 = load i64, i64* %RBP
  %5838 = sub i64 %5837, 44
  %5839 = load i64, i64* %PC
  %5840 = add i64 %5839, 4
  store i64 %5840, i64* %PC
  %5841 = inttoptr i64 %5838 to i32*
  %5842 = load i32, i32* %5841
  %5843 = shl i64 %5836, 32
  %5844 = ashr exact i64 %5843, 32
  %5845 = sext i32 %5842 to i64
  %5846 = mul nsw i64 %5845, %5844
  %5847 = trunc i64 %5846 to i32
  %5848 = and i64 %5846, 4294967295
  store i64 %5848, i64* %RDX, align 8, !tbaa !2428
  %5849 = shl i64 %5846, 32
  %5850 = ashr exact i64 %5849, 32
  %5851 = icmp ne i64 %5850, %5846
  %5852 = zext i1 %5851 to i8
  %5853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5852, i8* %5853, align 1, !tbaa !2432
  %5854 = and i32 %5847, 255
  %5855 = call i32 @llvm.ctpop.i32(i32 %5854) #16
  %5856 = trunc i32 %5855 to i8
  %5857 = and i8 %5856, 1
  %5858 = xor i8 %5857, 1
  %5859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5858, i8* %5859, align 1, !tbaa !2446
  %5860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5860, align 1, !tbaa !2447
  %5861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5861, align 1, !tbaa !2448
  %5862 = lshr i32 %5847, 31
  %5863 = trunc i32 %5862 to i8
  %5864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5863, i8* %5864, align 1, !tbaa !2449
  %5865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5852, i8* %5865, align 1, !tbaa !2450
  %5866 = load i64, i64* %RDX
  %5867 = load i64, i64* %RBP
  %5868 = sub i64 %5867, 48
  %5869 = load i64, i64* %PC
  %5870 = add i64 %5869, 3
  store i64 %5870, i64* %PC
  %5871 = trunc i64 %5866 to i32
  %5872 = inttoptr i64 %5868 to i32*
  %5873 = load i32, i32* %5872
  %5874 = add i32 %5873, %5871
  %5875 = zext i32 %5874 to i64
  store i64 %5875, i64* %RDX, align 8, !tbaa !2428
  %5876 = icmp ult i32 %5874, %5871
  %5877 = icmp ult i32 %5874, %5873
  %5878 = or i1 %5876, %5877
  %5879 = zext i1 %5878 to i8
  %5880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5879, i8* %5880, align 1, !tbaa !2432
  %5881 = and i32 %5874, 255
  %5882 = call i32 @llvm.ctpop.i32(i32 %5881) #16
  %5883 = trunc i32 %5882 to i8
  %5884 = and i8 %5883, 1
  %5885 = xor i8 %5884, 1
  %5886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5885, i8* %5886, align 1, !tbaa !2446
  %5887 = xor i32 %5873, %5871
  %5888 = xor i32 %5887, %5874
  %5889 = lshr i32 %5888, 4
  %5890 = trunc i32 %5889 to i8
  %5891 = and i8 %5890, 1
  %5892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5891, i8* %5892, align 1, !tbaa !2447
  %5893 = icmp eq i32 %5874, 0
  %5894 = zext i1 %5893 to i8
  %5895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5894, i8* %5895, align 1, !tbaa !2448
  %5896 = lshr i32 %5874, 31
  %5897 = trunc i32 %5896 to i8
  %5898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5897, i8* %5898, align 1, !tbaa !2449
  %5899 = lshr i32 %5871, 31
  %5900 = lshr i32 %5873, 31
  %5901 = xor i32 %5896, %5899
  %5902 = xor i32 %5896, %5900
  %5903 = add nuw nsw i32 %5901, %5902
  %5904 = icmp eq i32 %5903, 2
  %5905 = zext i1 %5904 to i8
  %5906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5905, i8* %5906, align 1, !tbaa !2450
  %5907 = load i32, i32* %EDX
  %5908 = zext i32 %5907 to i64
  %5909 = load i64, i64* %PC
  %5910 = add i64 %5909, 3
  store i64 %5910, i64* %PC
  %5911 = shl i64 %5908, 32
  %5912 = ashr exact i64 %5911, 32
  store i64 %5912, i64* %RCX, align 8, !tbaa !2428
  %5913 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5914 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5915 = load i64, i64* %RAX
  %5916 = load i64, i64* %RCX
  %5917 = mul i64 %5916, 4
  %5918 = add i64 %5917, %5915
  %5919 = load i64, i64* %PC
  %5920 = add i64 %5919, 5
  store i64 %5920, i64* %PC
  %5921 = bitcast i8* %5914 to <2 x float>*
  %5922 = load <2 x float>, <2 x float>* %5921, align 1
  %5923 = getelementptr inbounds i8, i8* %5914, i64 8
  %5924 = bitcast i8* %5923 to <2 x i32>*
  %5925 = load <2 x i32>, <2 x i32>* %5924, align 1
  %5926 = inttoptr i64 %5918 to float*
  %5927 = load float, float* %5926
  %5928 = extractelement <2 x float> %5922, i32 0
  %5929 = fmul float %5928, %5927
  %5930 = bitcast i8* %5913 to float*
  store float %5929, float* %5930, align 1, !tbaa !2453
  %5931 = bitcast <2 x float> %5922 to <2 x i32>
  %5932 = extractelement <2 x i32> %5931, i32 1
  %5933 = getelementptr inbounds i8, i8* %5913, i64 4
  %5934 = bitcast i8* %5933 to i32*
  store i32 %5932, i32* %5934, align 1, !tbaa !2453
  %5935 = extractelement <2 x i32> %5925, i32 0
  %5936 = getelementptr inbounds i8, i8* %5913, i64 8
  %5937 = bitcast i8* %5936 to i32*
  store i32 %5935, i32* %5937, align 1, !tbaa !2453
  %5938 = extractelement <2 x i32> %5925, i32 1
  %5939 = getelementptr inbounds i8, i8* %5913, i64 12
  %5940 = bitcast i8* %5939 to i32*
  store i32 %5938, i32* %5940, align 1, !tbaa !2453
  %5941 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5942 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5943 = bitcast %union.vec128_t* %XMM1 to i8*
  %5944 = load i64, i64* %PC
  %5945 = add i64 %5944, 4
  store i64 %5945, i64* %PC
  %5946 = bitcast i8* %5942 to <2 x float>*
  %5947 = load <2 x float>, <2 x float>* %5946, align 1
  %5948 = getelementptr inbounds i8, i8* %5942, i64 8
  %5949 = bitcast i8* %5948 to <2 x i32>*
  %5950 = load <2 x i32>, <2 x i32>* %5949, align 1
  %5951 = bitcast i8* %5943 to <2 x float>*
  %5952 = load <2 x float>, <2 x float>* %5951, align 1
  %5953 = extractelement <2 x float> %5947, i32 0
  %5954 = extractelement <2 x float> %5952, i32 0
  %5955 = fadd float %5953, %5954
  %5956 = bitcast i8* %5941 to float*
  store float %5955, float* %5956, align 1, !tbaa !2453
  %5957 = bitcast <2 x float> %5947 to <2 x i32>
  %5958 = extractelement <2 x i32> %5957, i32 1
  %5959 = getelementptr inbounds i8, i8* %5941, i64 4
  %5960 = bitcast i8* %5959 to i32*
  store i32 %5958, i32* %5960, align 1, !tbaa !2453
  %5961 = extractelement <2 x i32> %5950, i32 0
  %5962 = getelementptr inbounds i8, i8* %5941, i64 8
  %5963 = bitcast i8* %5962 to i32*
  store i32 %5961, i32* %5963, align 1, !tbaa !2453
  %5964 = extractelement <2 x i32> %5950, i32 1
  %5965 = getelementptr inbounds i8, i8* %5941, i64 12
  %5966 = bitcast i8* %5965 to i32*
  store i32 %5964, i32* %5966, align 1, !tbaa !2453
  %5967 = load i64, i64* %RBP
  %5968 = sub i64 %5967, 16
  %5969 = load i64, i64* %PC
  %5970 = add i64 %5969, 4
  store i64 %5970, i64* %PC
  %5971 = inttoptr i64 %5968 to i64*
  %5972 = load i64, i64* %5971
  store i64 %5972, i64* %RAX, align 8, !tbaa !2428
  %5973 = load i64, i64* %RBP
  %5974 = sub i64 %5973, 48
  %5975 = load i64, i64* %PC
  %5976 = add i64 %5975, 4
  store i64 %5976, i64* %PC
  %5977 = inttoptr i64 %5974 to i32*
  %5978 = load i32, i32* %5977
  %5979 = sext i32 %5978 to i64
  store i64 %5979, i64* %RCX, align 8, !tbaa !2428
  %5980 = load i64, i64* %RAX
  %5981 = load i64, i64* %RCX
  %5982 = mul i64 %5981, 4
  %5983 = add i64 %5982, %5980
  %5984 = bitcast %union.vec128_t* %XMM0 to i8*
  %5985 = load i64, i64* %PC
  %5986 = add i64 %5985, 5
  store i64 %5986, i64* %PC
  %5987 = bitcast i8* %5984 to <2 x float>*
  %5988 = load <2 x float>, <2 x float>* %5987, align 1
  %5989 = extractelement <2 x float> %5988, i32 0
  %5990 = inttoptr i64 %5983 to float*
  store float %5989, float* %5990
  %5991 = load i64, i64* %RBP
  %5992 = sub i64 %5991, 48
  %5993 = load i64, i64* %PC
  %5994 = add i64 %5993, 3
  store i64 %5994, i64* %PC
  %5995 = inttoptr i64 %5992 to i32*
  %5996 = load i32, i32* %5995
  %5997 = zext i32 %5996 to i64
  store i64 %5997, i64* %RAX, align 8, !tbaa !2428
  %5998 = load i64, i64* %RAX
  %5999 = load i64, i64* %PC
  %6000 = add i64 %5999, 3
  store i64 %6000, i64* %PC
  %6001 = trunc i64 %5998 to i32
  %6002 = add i32 1, %6001
  %6003 = zext i32 %6002 to i64
  store i64 %6003, i64* %RAX, align 8, !tbaa !2428
  %6004 = icmp ult i32 %6002, %6001
  %6005 = icmp ult i32 %6002, 1
  %6006 = or i1 %6004, %6005
  %6007 = zext i1 %6006 to i8
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6007, i8* %6008, align 1, !tbaa !2432
  %6009 = and i32 %6002, 255
  %6010 = call i32 @llvm.ctpop.i32(i32 %6009) #16
  %6011 = trunc i32 %6010 to i8
  %6012 = and i8 %6011, 1
  %6013 = xor i8 %6012, 1
  %6014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6013, i8* %6014, align 1, !tbaa !2446
  %6015 = xor i64 1, %5998
  %6016 = trunc i64 %6015 to i32
  %6017 = xor i32 %6016, %6002
  %6018 = lshr i32 %6017, 4
  %6019 = trunc i32 %6018 to i8
  %6020 = and i8 %6019, 1
  %6021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6020, i8* %6021, align 1, !tbaa !2447
  %6022 = icmp eq i32 %6002, 0
  %6023 = zext i1 %6022 to i8
  %6024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6023, i8* %6024, align 1, !tbaa !2448
  %6025 = lshr i32 %6002, 31
  %6026 = trunc i32 %6025 to i8
  %6027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6026, i8* %6027, align 1, !tbaa !2449
  %6028 = lshr i32 %6001, 31
  %6029 = xor i32 %6025, %6028
  %6030 = add nuw nsw i32 %6029, %6025
  %6031 = icmp eq i32 %6030, 2
  %6032 = zext i1 %6031 to i8
  %6033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6032, i8* %6033, align 1, !tbaa !2450
  %6034 = load i64, i64* %RBP
  %6035 = sub i64 %6034, 48
  %6036 = load i32, i32* %EAX
  %6037 = zext i32 %6036 to i64
  %6038 = load i64, i64* %PC
  %6039 = add i64 %6038, 3
  store i64 %6039, i64* %PC
  %6040 = inttoptr i64 %6035 to i32*
  store i32 %6036, i32* %6040
  %6041 = load i64, i64* %PC
  %6042 = sub i64 %6041, 233
  %6043 = load i64, i64* %PC
  %6044 = add i64 %6043, 5
  store i64 %6044, i64* %PC
  %6045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6042, i64* %6045, align 8, !tbaa !2428
  br label %block_4021aa

block_4020b4:                                     ; preds = %block_402059
  %6046 = load i64, i64* %PC
  %6047 = add i64 %6046, 5
  %6048 = load i64, i64* %PC
  %6049 = add i64 %6048, 5
  store i64 %6049, i64* %PC
  %6050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6047, i64* %6050, align 8, !tbaa !2428
  br label %block_4020b9

block_4020f5:                                     ; preds = %block_4020e9
  %6051 = load i64, i64* %RBP
  %6052 = sub i64 %6051, 16
  %6053 = load i64, i64* %PC
  %6054 = add i64 %6053, 4
  store i64 %6054, i64* %PC
  %6055 = inttoptr i64 %6052 to i64*
  %6056 = load i64, i64* %6055
  store i64 %6056, i64* %RAX, align 8, !tbaa !2428
  %6057 = load i64, i64* %RBP
  %6058 = sub i64 %6057, 48
  %6059 = load i64, i64* %PC
  %6060 = add i64 %6059, 4
  store i64 %6060, i64* %PC
  %6061 = inttoptr i64 %6058 to i32*
  %6062 = load i32, i32* %6061
  %6063 = sext i32 %6062 to i64
  store i64 %6063, i64* %RCX, align 8, !tbaa !2428
  %6064 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6065 = load i64, i64* %RAX
  %6066 = load i64, i64* %RCX
  %6067 = mul i64 %6066, 4
  %6068 = add i64 %6067, %6065
  %6069 = load i64, i64* %PC
  %6070 = add i64 %6069, 5
  store i64 %6070, i64* %PC
  %6071 = inttoptr i64 %6068 to float*
  %6072 = load float, float* %6071
  %6073 = bitcast i8* %6064 to float*
  store float %6072, float* %6073, align 1, !tbaa !2453
  %6074 = getelementptr inbounds i8, i8* %6064, i64 4
  %6075 = bitcast i8* %6074 to float*
  store float 0.000000e+00, float* %6075, align 1, !tbaa !2453
  %6076 = getelementptr inbounds i8, i8* %6064, i64 8
  %6077 = bitcast i8* %6076 to float*
  store float 0.000000e+00, float* %6077, align 1, !tbaa !2453
  %6078 = getelementptr inbounds i8, i8* %6064, i64 12
  %6079 = bitcast i8* %6078 to float*
  store float 0.000000e+00, float* %6079, align 1, !tbaa !2453
  %6080 = load i64, i64* %RBP
  %6081 = sub i64 %6080, 32
  %6082 = load i64, i64* %PC
  %6083 = add i64 %6082, 4
  store i64 %6083, i64* %PC
  %6084 = inttoptr i64 %6081 to i64*
  %6085 = load i64, i64* %6084
  store i64 %6085, i64* %RAX, align 8, !tbaa !2428
  %6086 = load i64, i64* %RBP
  %6087 = sub i64 %6086, 44
  %6088 = load i64, i64* %PC
  %6089 = add i64 %6088, 3
  store i64 %6089, i64* %PC
  %6090 = inttoptr i64 %6087 to i32*
  %6091 = load i32, i32* %6090
  %6092 = zext i32 %6091 to i64
  store i64 %6092, i64* %RDX, align 8, !tbaa !2428
  %6093 = load i64, i64* %RDX
  %6094 = load i64, i64* %PC
  %6095 = add i64 %6094, 3
  store i64 %6095, i64* %PC
  %6096 = trunc i64 %6093 to i32
  %6097 = sub i32 %6096, 1
  %6098 = zext i32 %6097 to i64
  store i64 %6098, i64* %RDX, align 8, !tbaa !2428
  %6099 = icmp ult i32 %6096, 1
  %6100 = zext i1 %6099 to i8
  %6101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6100, i8* %6101, align 1, !tbaa !2432
  %6102 = and i32 %6097, 255
  %6103 = call i32 @llvm.ctpop.i32(i32 %6102) #16
  %6104 = trunc i32 %6103 to i8
  %6105 = and i8 %6104, 1
  %6106 = xor i8 %6105, 1
  %6107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6106, i8* %6107, align 1, !tbaa !2446
  %6108 = xor i64 1, %6093
  %6109 = trunc i64 %6108 to i32
  %6110 = xor i32 %6109, %6097
  %6111 = lshr i32 %6110, 4
  %6112 = trunc i32 %6111 to i8
  %6113 = and i8 %6112, 1
  %6114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6113, i8* %6114, align 1, !tbaa !2447
  %6115 = icmp eq i32 %6097, 0
  %6116 = zext i1 %6115 to i8
  %6117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6116, i8* %6117, align 1, !tbaa !2448
  %6118 = lshr i32 %6097, 31
  %6119 = trunc i32 %6118 to i8
  %6120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6119, i8* %6120, align 1, !tbaa !2449
  %6121 = lshr i32 %6096, 31
  %6122 = xor i32 %6118, %6121
  %6123 = add nuw nsw i32 %6122, %6121
  %6124 = icmp eq i32 %6123, 2
  %6125 = zext i1 %6124 to i8
  %6126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6125, i8* %6126, align 1, !tbaa !2450
  %6127 = load i32, i32* %EDX
  %6128 = zext i32 %6127 to i64
  %6129 = load i64, i64* %PC
  %6130 = add i64 %6129, 3
  store i64 %6130, i64* %PC
  %6131 = shl i64 %6128, 32
  %6132 = ashr exact i64 %6131, 32
  store i64 %6132, i64* %RCX, align 8, !tbaa !2428
  %6133 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6134 = load i64, i64* %RAX
  %6135 = load i64, i64* %RCX
  %6136 = mul i64 %6135, 4
  %6137 = add i64 %6136, %6134
  %6138 = load i64, i64* %PC
  %6139 = add i64 %6138, 5
  store i64 %6139, i64* %PC
  %6140 = inttoptr i64 %6137 to float*
  %6141 = load float, float* %6140
  %6142 = bitcast i8* %6133 to float*
  store float %6141, float* %6142, align 1, !tbaa !2453
  %6143 = getelementptr inbounds i8, i8* %6133, i64 4
  %6144 = bitcast i8* %6143 to float*
  store float 0.000000e+00, float* %6144, align 1, !tbaa !2453
  %6145 = getelementptr inbounds i8, i8* %6133, i64 8
  %6146 = bitcast i8* %6145 to float*
  store float 0.000000e+00, float* %6146, align 1, !tbaa !2453
  %6147 = getelementptr inbounds i8, i8* %6133, i64 12
  %6148 = bitcast i8* %6147 to float*
  store float 0.000000e+00, float* %6148, align 1, !tbaa !2453
  %6149 = load i64, i64* %RBP
  %6150 = sub i64 %6149, 40
  %6151 = load i64, i64* %PC
  %6152 = add i64 %6151, 4
  store i64 %6152, i64* %PC
  %6153 = inttoptr i64 %6150 to i64*
  %6154 = load i64, i64* %6153
  store i64 %6154, i64* %RAX, align 8, !tbaa !2428
  %6155 = load i64, i64* %RBP
  %6156 = sub i64 %6155, 24
  %6157 = load i64, i64* %PC
  %6158 = add i64 %6157, 3
  store i64 %6158, i64* %PC
  %6159 = inttoptr i64 %6156 to i32*
  %6160 = load i32, i32* %6159
  %6161 = zext i32 %6160 to i64
  store i64 %6161, i64* %RDX, align 8, !tbaa !2428
  %6162 = load i64, i64* %RBP
  %6163 = sub i64 %6162, 44
  %6164 = load i64, i64* %PC
  %6165 = add i64 %6164, 3
  store i64 %6165, i64* %PC
  %6166 = inttoptr i64 %6163 to i32*
  %6167 = load i32, i32* %6166
  %6168 = zext i32 %6167 to i64
  store i64 %6168, i64* %RSI, align 8, !tbaa !2428
  %6169 = load i64, i64* %RSI
  %6170 = load i64, i64* %PC
  %6171 = add i64 %6170, 3
  store i64 %6171, i64* %PC
  %6172 = trunc i64 %6169 to i32
  %6173 = sub i32 %6172, 1
  %6174 = zext i32 %6173 to i64
  store i64 %6174, i64* %RSI, align 8, !tbaa !2428
  %6175 = icmp ult i32 %6172, 1
  %6176 = zext i1 %6175 to i8
  %6177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6176, i8* %6177, align 1, !tbaa !2432
  %6178 = and i32 %6173, 255
  %6179 = call i32 @llvm.ctpop.i32(i32 %6178) #16
  %6180 = trunc i32 %6179 to i8
  %6181 = and i8 %6180, 1
  %6182 = xor i8 %6181, 1
  %6183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6182, i8* %6183, align 1, !tbaa !2446
  %6184 = xor i64 1, %6169
  %6185 = trunc i64 %6184 to i32
  %6186 = xor i32 %6185, %6173
  %6187 = lshr i32 %6186, 4
  %6188 = trunc i32 %6187 to i8
  %6189 = and i8 %6188, 1
  %6190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6189, i8* %6190, align 1, !tbaa !2447
  %6191 = icmp eq i32 %6173, 0
  %6192 = zext i1 %6191 to i8
  %6193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6192, i8* %6193, align 1, !tbaa !2448
  %6194 = lshr i32 %6173, 31
  %6195 = trunc i32 %6194 to i8
  %6196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6195, i8* %6196, align 1, !tbaa !2449
  %6197 = lshr i32 %6172, 31
  %6198 = xor i32 %6194, %6197
  %6199 = add nuw nsw i32 %6198, %6197
  %6200 = icmp eq i32 %6199, 2
  %6201 = zext i1 %6200 to i8
  %6202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6201, i8* %6202, align 1, !tbaa !2450
  %6203 = load i64, i64* %RDX
  %6204 = load i32, i32* %ESI
  %6205 = zext i32 %6204 to i64
  %6206 = load i64, i64* %PC
  %6207 = add i64 %6206, 3
  store i64 %6207, i64* %PC
  %6208 = shl i64 %6203, 32
  %6209 = ashr exact i64 %6208, 32
  %6210 = shl i64 %6205, 32
  %6211 = ashr exact i64 %6210, 32
  %6212 = mul nsw i64 %6211, %6209
  %6213 = trunc i64 %6212 to i32
  %6214 = and i64 %6212, 4294967295
  store i64 %6214, i64* %RDX, align 8, !tbaa !2428
  %6215 = shl i64 %6212, 32
  %6216 = ashr exact i64 %6215, 32
  %6217 = icmp ne i64 %6216, %6212
  %6218 = zext i1 %6217 to i8
  %6219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6218, i8* %6219, align 1, !tbaa !2432
  %6220 = and i32 %6213, 255
  %6221 = call i32 @llvm.ctpop.i32(i32 %6220) #16
  %6222 = trunc i32 %6221 to i8
  %6223 = and i8 %6222, 1
  %6224 = xor i8 %6223, 1
  %6225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6224, i8* %6225, align 1, !tbaa !2446
  %6226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6226, align 1, !tbaa !2447
  %6227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6227, align 1, !tbaa !2448
  %6228 = lshr i32 %6213, 31
  %6229 = trunc i32 %6228 to i8
  %6230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6229, i8* %6230, align 1, !tbaa !2449
  %6231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6218, i8* %6231, align 1, !tbaa !2450
  %6232 = load i64, i64* %RDX
  %6233 = load i64, i64* %RBP
  %6234 = sub i64 %6233, 48
  %6235 = load i64, i64* %PC
  %6236 = add i64 %6235, 3
  store i64 %6236, i64* %PC
  %6237 = trunc i64 %6232 to i32
  %6238 = inttoptr i64 %6234 to i32*
  %6239 = load i32, i32* %6238
  %6240 = add i32 %6239, %6237
  %6241 = zext i32 %6240 to i64
  store i64 %6241, i64* %RDX, align 8, !tbaa !2428
  %6242 = icmp ult i32 %6240, %6237
  %6243 = icmp ult i32 %6240, %6239
  %6244 = or i1 %6242, %6243
  %6245 = zext i1 %6244 to i8
  %6246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6245, i8* %6246, align 1, !tbaa !2432
  %6247 = and i32 %6240, 255
  %6248 = call i32 @llvm.ctpop.i32(i32 %6247) #16
  %6249 = trunc i32 %6248 to i8
  %6250 = and i8 %6249, 1
  %6251 = xor i8 %6250, 1
  %6252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6251, i8* %6252, align 1, !tbaa !2446
  %6253 = xor i32 %6239, %6237
  %6254 = xor i32 %6253, %6240
  %6255 = lshr i32 %6254, 4
  %6256 = trunc i32 %6255 to i8
  %6257 = and i8 %6256, 1
  %6258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6257, i8* %6258, align 1, !tbaa !2447
  %6259 = icmp eq i32 %6240, 0
  %6260 = zext i1 %6259 to i8
  %6261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6260, i8* %6261, align 1, !tbaa !2448
  %6262 = lshr i32 %6240, 31
  %6263 = trunc i32 %6262 to i8
  %6264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6263, i8* %6264, align 1, !tbaa !2449
  %6265 = lshr i32 %6237, 31
  %6266 = lshr i32 %6239, 31
  %6267 = xor i32 %6262, %6265
  %6268 = xor i32 %6262, %6266
  %6269 = add nuw nsw i32 %6267, %6268
  %6270 = icmp eq i32 %6269, 2
  %6271 = zext i1 %6270 to i8
  %6272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6271, i8* %6272, align 1, !tbaa !2450
  %6273 = load i32, i32* %EDX
  %6274 = zext i32 %6273 to i64
  %6275 = load i64, i64* %PC
  %6276 = add i64 %6275, 3
  store i64 %6276, i64* %PC
  %6277 = shl i64 %6274, 32
  %6278 = ashr exact i64 %6277, 32
  store i64 %6278, i64* %RCX, align 8, !tbaa !2428
  %6279 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6280 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6281 = load i64, i64* %RAX
  %6282 = load i64, i64* %RCX
  %6283 = mul i64 %6282, 4
  %6284 = add i64 %6283, %6281
  %6285 = load i64, i64* %PC
  %6286 = add i64 %6285, 5
  store i64 %6286, i64* %PC
  %6287 = bitcast i8* %6280 to <2 x float>*
  %6288 = load <2 x float>, <2 x float>* %6287, align 1
  %6289 = getelementptr inbounds i8, i8* %6280, i64 8
  %6290 = bitcast i8* %6289 to <2 x i32>*
  %6291 = load <2 x i32>, <2 x i32>* %6290, align 1
  %6292 = inttoptr i64 %6284 to float*
  %6293 = load float, float* %6292
  %6294 = extractelement <2 x float> %6288, i32 0
  %6295 = fmul float %6294, %6293
  %6296 = bitcast i8* %6279 to float*
  store float %6295, float* %6296, align 1, !tbaa !2453
  %6297 = bitcast <2 x float> %6288 to <2 x i32>
  %6298 = extractelement <2 x i32> %6297, i32 1
  %6299 = getelementptr inbounds i8, i8* %6279, i64 4
  %6300 = bitcast i8* %6299 to i32*
  store i32 %6298, i32* %6300, align 1, !tbaa !2453
  %6301 = extractelement <2 x i32> %6291, i32 0
  %6302 = getelementptr inbounds i8, i8* %6279, i64 8
  %6303 = bitcast i8* %6302 to i32*
  store i32 %6301, i32* %6303, align 1, !tbaa !2453
  %6304 = extractelement <2 x i32> %6291, i32 1
  %6305 = getelementptr inbounds i8, i8* %6279, i64 12
  %6306 = bitcast i8* %6305 to i32*
  store i32 %6304, i32* %6306, align 1, !tbaa !2453
  %6307 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6308 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6309 = bitcast %union.vec128_t* %XMM1 to i8*
  %6310 = load i64, i64* %PC
  %6311 = add i64 %6310, 4
  store i64 %6311, i64* %PC
  %6312 = bitcast i8* %6308 to <2 x float>*
  %6313 = load <2 x float>, <2 x float>* %6312, align 1
  %6314 = getelementptr inbounds i8, i8* %6308, i64 8
  %6315 = bitcast i8* %6314 to <2 x i32>*
  %6316 = load <2 x i32>, <2 x i32>* %6315, align 1
  %6317 = bitcast i8* %6309 to <2 x float>*
  %6318 = load <2 x float>, <2 x float>* %6317, align 1
  %6319 = extractelement <2 x float> %6313, i32 0
  %6320 = extractelement <2 x float> %6318, i32 0
  %6321 = fadd float %6319, %6320
  %6322 = bitcast i8* %6307 to float*
  store float %6321, float* %6322, align 1, !tbaa !2453
  %6323 = bitcast <2 x float> %6313 to <2 x i32>
  %6324 = extractelement <2 x i32> %6323, i32 1
  %6325 = getelementptr inbounds i8, i8* %6307, i64 4
  %6326 = bitcast i8* %6325 to i32*
  store i32 %6324, i32* %6326, align 1, !tbaa !2453
  %6327 = extractelement <2 x i32> %6316, i32 0
  %6328 = getelementptr inbounds i8, i8* %6307, i64 8
  %6329 = bitcast i8* %6328 to i32*
  store i32 %6327, i32* %6329, align 1, !tbaa !2453
  %6330 = extractelement <2 x i32> %6316, i32 1
  %6331 = getelementptr inbounds i8, i8* %6307, i64 12
  %6332 = bitcast i8* %6331 to i32*
  store i32 %6330, i32* %6332, align 1, !tbaa !2453
  %6333 = load i64, i64* %RBP
  %6334 = sub i64 %6333, 32
  %6335 = load i64, i64* %PC
  %6336 = add i64 %6335, 4
  store i64 %6336, i64* %PC
  %6337 = inttoptr i64 %6334 to i64*
  %6338 = load i64, i64* %6337
  store i64 %6338, i64* %RAX, align 8, !tbaa !2428
  %6339 = load i64, i64* %RBP
  %6340 = sub i64 %6339, 44
  %6341 = load i64, i64* %PC
  %6342 = add i64 %6341, 4
  store i64 %6342, i64* %PC
  %6343 = inttoptr i64 %6340 to i32*
  %6344 = load i32, i32* %6343
  %6345 = sext i32 %6344 to i64
  store i64 %6345, i64* %RCX, align 8, !tbaa !2428
  %6346 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6347 = load i64, i64* %RAX
  %6348 = load i64, i64* %RCX
  %6349 = mul i64 %6348, 4
  %6350 = add i64 %6349, %6347
  %6351 = load i64, i64* %PC
  %6352 = add i64 %6351, 5
  store i64 %6352, i64* %PC
  %6353 = inttoptr i64 %6350 to float*
  %6354 = load float, float* %6353
  %6355 = bitcast i8* %6346 to float*
  store float %6354, float* %6355, align 1, !tbaa !2453
  %6356 = getelementptr inbounds i8, i8* %6346, i64 4
  %6357 = bitcast i8* %6356 to float*
  store float 0.000000e+00, float* %6357, align 1, !tbaa !2453
  %6358 = getelementptr inbounds i8, i8* %6346, i64 8
  %6359 = bitcast i8* %6358 to float*
  store float 0.000000e+00, float* %6359, align 1, !tbaa !2453
  %6360 = getelementptr inbounds i8, i8* %6346, i64 12
  %6361 = bitcast i8* %6360 to float*
  store float 0.000000e+00, float* %6361, align 1, !tbaa !2453
  %6362 = load i64, i64* %RBP
  %6363 = sub i64 %6362, 40
  %6364 = load i64, i64* %PC
  %6365 = add i64 %6364, 4
  store i64 %6365, i64* %PC
  %6366 = inttoptr i64 %6363 to i64*
  %6367 = load i64, i64* %6366
  store i64 %6367, i64* %RAX, align 8, !tbaa !2428
  %6368 = load i64, i64* %RBP
  %6369 = sub i64 %6368, 24
  %6370 = load i64, i64* %PC
  %6371 = add i64 %6370, 3
  store i64 %6371, i64* %PC
  %6372 = inttoptr i64 %6369 to i32*
  %6373 = load i32, i32* %6372
  %6374 = zext i32 %6373 to i64
  store i64 %6374, i64* %RDX, align 8, !tbaa !2428
  %6375 = load i64, i64* %RDX
  %6376 = load i64, i64* %RBP
  %6377 = sub i64 %6376, 44
  %6378 = load i64, i64* %PC
  %6379 = add i64 %6378, 4
  store i64 %6379, i64* %PC
  %6380 = inttoptr i64 %6377 to i32*
  %6381 = load i32, i32* %6380
  %6382 = shl i64 %6375, 32
  %6383 = ashr exact i64 %6382, 32
  %6384 = sext i32 %6381 to i64
  %6385 = mul nsw i64 %6384, %6383
  %6386 = trunc i64 %6385 to i32
  %6387 = and i64 %6385, 4294967295
  store i64 %6387, i64* %RDX, align 8, !tbaa !2428
  %6388 = shl i64 %6385, 32
  %6389 = ashr exact i64 %6388, 32
  %6390 = icmp ne i64 %6389, %6385
  %6391 = zext i1 %6390 to i8
  %6392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6391, i8* %6392, align 1, !tbaa !2432
  %6393 = and i32 %6386, 255
  %6394 = call i32 @llvm.ctpop.i32(i32 %6393) #16
  %6395 = trunc i32 %6394 to i8
  %6396 = and i8 %6395, 1
  %6397 = xor i8 %6396, 1
  %6398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6397, i8* %6398, align 1, !tbaa !2446
  %6399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6399, align 1, !tbaa !2447
  %6400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6400, align 1, !tbaa !2448
  %6401 = lshr i32 %6386, 31
  %6402 = trunc i32 %6401 to i8
  %6403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6402, i8* %6403, align 1, !tbaa !2449
  %6404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6391, i8* %6404, align 1, !tbaa !2450
  %6405 = load i64, i64* %RDX
  %6406 = load i64, i64* %RBP
  %6407 = sub i64 %6406, 48
  %6408 = load i64, i64* %PC
  %6409 = add i64 %6408, 3
  store i64 %6409, i64* %PC
  %6410 = trunc i64 %6405 to i32
  %6411 = inttoptr i64 %6407 to i32*
  %6412 = load i32, i32* %6411
  %6413 = add i32 %6412, %6410
  %6414 = zext i32 %6413 to i64
  store i64 %6414, i64* %RDX, align 8, !tbaa !2428
  %6415 = icmp ult i32 %6413, %6410
  %6416 = icmp ult i32 %6413, %6412
  %6417 = or i1 %6415, %6416
  %6418 = zext i1 %6417 to i8
  %6419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6418, i8* %6419, align 1, !tbaa !2432
  %6420 = and i32 %6413, 255
  %6421 = call i32 @llvm.ctpop.i32(i32 %6420) #16
  %6422 = trunc i32 %6421 to i8
  %6423 = and i8 %6422, 1
  %6424 = xor i8 %6423, 1
  %6425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6424, i8* %6425, align 1, !tbaa !2446
  %6426 = xor i32 %6412, %6410
  %6427 = xor i32 %6426, %6413
  %6428 = lshr i32 %6427, 4
  %6429 = trunc i32 %6428 to i8
  %6430 = and i8 %6429, 1
  %6431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6430, i8* %6431, align 1, !tbaa !2447
  %6432 = icmp eq i32 %6413, 0
  %6433 = zext i1 %6432 to i8
  %6434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6433, i8* %6434, align 1, !tbaa !2448
  %6435 = lshr i32 %6413, 31
  %6436 = trunc i32 %6435 to i8
  %6437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6436, i8* %6437, align 1, !tbaa !2449
  %6438 = lshr i32 %6410, 31
  %6439 = lshr i32 %6412, 31
  %6440 = xor i32 %6435, %6438
  %6441 = xor i32 %6435, %6439
  %6442 = add nuw nsw i32 %6440, %6441
  %6443 = icmp eq i32 %6442, 2
  %6444 = zext i1 %6443 to i8
  %6445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6444, i8* %6445, align 1, !tbaa !2450
  %6446 = load i32, i32* %EDX
  %6447 = zext i32 %6446 to i64
  %6448 = load i64, i64* %PC
  %6449 = add i64 %6448, 3
  store i64 %6449, i64* %PC
  %6450 = shl i64 %6447, 32
  %6451 = ashr exact i64 %6450, 32
  store i64 %6451, i64* %RCX, align 8, !tbaa !2428
  %6452 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6453 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6454 = load i64, i64* %RAX
  %6455 = load i64, i64* %RCX
  %6456 = mul i64 %6455, 4
  %6457 = add i64 %6456, %6454
  %6458 = load i64, i64* %PC
  %6459 = add i64 %6458, 5
  store i64 %6459, i64* %PC
  %6460 = bitcast i8* %6453 to <2 x float>*
  %6461 = load <2 x float>, <2 x float>* %6460, align 1
  %6462 = getelementptr inbounds i8, i8* %6453, i64 8
  %6463 = bitcast i8* %6462 to <2 x i32>*
  %6464 = load <2 x i32>, <2 x i32>* %6463, align 1
  %6465 = inttoptr i64 %6457 to float*
  %6466 = load float, float* %6465
  %6467 = extractelement <2 x float> %6461, i32 0
  %6468 = fmul float %6467, %6466
  %6469 = bitcast i8* %6452 to float*
  store float %6468, float* %6469, align 1, !tbaa !2453
  %6470 = bitcast <2 x float> %6461 to <2 x i32>
  %6471 = extractelement <2 x i32> %6470, i32 1
  %6472 = getelementptr inbounds i8, i8* %6452, i64 4
  %6473 = bitcast i8* %6472 to i32*
  store i32 %6471, i32* %6473, align 1, !tbaa !2453
  %6474 = extractelement <2 x i32> %6464, i32 0
  %6475 = getelementptr inbounds i8, i8* %6452, i64 8
  %6476 = bitcast i8* %6475 to i32*
  store i32 %6474, i32* %6476, align 1, !tbaa !2453
  %6477 = extractelement <2 x i32> %6464, i32 1
  %6478 = getelementptr inbounds i8, i8* %6452, i64 12
  %6479 = bitcast i8* %6478 to i32*
  store i32 %6477, i32* %6479, align 1, !tbaa !2453
  %6480 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6481 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6482 = bitcast %union.vec128_t* %XMM1 to i8*
  %6483 = load i64, i64* %PC
  %6484 = add i64 %6483, 4
  store i64 %6484, i64* %PC
  %6485 = bitcast i8* %6481 to <2 x float>*
  %6486 = load <2 x float>, <2 x float>* %6485, align 1
  %6487 = getelementptr inbounds i8, i8* %6481, i64 8
  %6488 = bitcast i8* %6487 to <2 x i32>*
  %6489 = load <2 x i32>, <2 x i32>* %6488, align 1
  %6490 = bitcast i8* %6482 to <2 x float>*
  %6491 = load <2 x float>, <2 x float>* %6490, align 1
  %6492 = extractelement <2 x float> %6486, i32 0
  %6493 = extractelement <2 x float> %6491, i32 0
  %6494 = fadd float %6492, %6493
  %6495 = bitcast i8* %6480 to float*
  store float %6494, float* %6495, align 1, !tbaa !2453
  %6496 = bitcast <2 x float> %6486 to <2 x i32>
  %6497 = extractelement <2 x i32> %6496, i32 1
  %6498 = getelementptr inbounds i8, i8* %6480, i64 4
  %6499 = bitcast i8* %6498 to i32*
  store i32 %6497, i32* %6499, align 1, !tbaa !2453
  %6500 = extractelement <2 x i32> %6489, i32 0
  %6501 = getelementptr inbounds i8, i8* %6480, i64 8
  %6502 = bitcast i8* %6501 to i32*
  store i32 %6500, i32* %6502, align 1, !tbaa !2453
  %6503 = extractelement <2 x i32> %6489, i32 1
  %6504 = getelementptr inbounds i8, i8* %6480, i64 12
  %6505 = bitcast i8* %6504 to i32*
  store i32 %6503, i32* %6505, align 1, !tbaa !2453
  %6506 = load i64, i64* %RBP
  %6507 = sub i64 %6506, 16
  %6508 = load i64, i64* %PC
  %6509 = add i64 %6508, 4
  store i64 %6509, i64* %PC
  %6510 = inttoptr i64 %6507 to i64*
  %6511 = load i64, i64* %6510
  store i64 %6511, i64* %RAX, align 8, !tbaa !2428
  %6512 = load i64, i64* %RBP
  %6513 = sub i64 %6512, 48
  %6514 = load i64, i64* %PC
  %6515 = add i64 %6514, 4
  store i64 %6515, i64* %PC
  %6516 = inttoptr i64 %6513 to i32*
  %6517 = load i32, i32* %6516
  %6518 = sext i32 %6517 to i64
  store i64 %6518, i64* %RCX, align 8, !tbaa !2428
  %6519 = load i64, i64* %RAX
  %6520 = load i64, i64* %RCX
  %6521 = mul i64 %6520, 4
  %6522 = add i64 %6521, %6519
  %6523 = bitcast %union.vec128_t* %XMM0 to i8*
  %6524 = load i64, i64* %PC
  %6525 = add i64 %6524, 5
  store i64 %6525, i64* %PC
  %6526 = bitcast i8* %6523 to <2 x float>*
  %6527 = load <2 x float>, <2 x float>* %6526, align 1
  %6528 = extractelement <2 x float> %6527, i32 0
  %6529 = inttoptr i64 %6522 to float*
  store float %6528, float* %6529
  %6530 = load i64, i64* %RBP
  %6531 = sub i64 %6530, 48
  %6532 = load i64, i64* %PC
  %6533 = add i64 %6532, 3
  store i64 %6533, i64* %PC
  %6534 = inttoptr i64 %6531 to i32*
  %6535 = load i32, i32* %6534
  %6536 = zext i32 %6535 to i64
  store i64 %6536, i64* %RAX, align 8, !tbaa !2428
  %6537 = load i64, i64* %RAX
  %6538 = load i64, i64* %PC
  %6539 = add i64 %6538, 3
  store i64 %6539, i64* %PC
  %6540 = trunc i64 %6537 to i32
  %6541 = add i32 1, %6540
  %6542 = zext i32 %6541 to i64
  store i64 %6542, i64* %RAX, align 8, !tbaa !2428
  %6543 = icmp ult i32 %6541, %6540
  %6544 = icmp ult i32 %6541, 1
  %6545 = or i1 %6543, %6544
  %6546 = zext i1 %6545 to i8
  %6547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6546, i8* %6547, align 1, !tbaa !2432
  %6548 = and i32 %6541, 255
  %6549 = call i32 @llvm.ctpop.i32(i32 %6548) #16
  %6550 = trunc i32 %6549 to i8
  %6551 = and i8 %6550, 1
  %6552 = xor i8 %6551, 1
  %6553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6552, i8* %6553, align 1, !tbaa !2446
  %6554 = xor i64 1, %6537
  %6555 = trunc i64 %6554 to i32
  %6556 = xor i32 %6555, %6541
  %6557 = lshr i32 %6556, 4
  %6558 = trunc i32 %6557 to i8
  %6559 = and i8 %6558, 1
  %6560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6559, i8* %6560, align 1, !tbaa !2447
  %6561 = icmp eq i32 %6541, 0
  %6562 = zext i1 %6561 to i8
  %6563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6562, i8* %6563, align 1, !tbaa !2448
  %6564 = lshr i32 %6541, 31
  %6565 = trunc i32 %6564 to i8
  %6566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6565, i8* %6566, align 1, !tbaa !2449
  %6567 = lshr i32 %6540, 31
  %6568 = xor i32 %6564, %6567
  %6569 = add nuw nsw i32 %6568, %6564
  %6570 = icmp eq i32 %6569, 2
  %6571 = zext i1 %6570 to i8
  %6572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6571, i8* %6572, align 1, !tbaa !2450
  %6573 = load i64, i64* %RBP
  %6574 = sub i64 %6573, 48
  %6575 = load i32, i32* %EAX
  %6576 = zext i32 %6575 to i64
  %6577 = load i64, i64* %PC
  %6578 = add i64 %6577, 3
  store i64 %6578, i64* %PC
  %6579 = inttoptr i64 %6574 to i32*
  store i32 %6575, i32* %6579
  %6580 = load i64, i64* %PC
  %6581 = sub i64 %6580, 135
  %6582 = load i64, i64* %PC
  %6583 = add i64 %6582, 5
  store i64 %6583, i64* %PC
  %6584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6581, i64* %6584, align 8, !tbaa !2428
  br label %block_4020e9

block_4024b2:                                     ; preds = %block_4024a6
  %6585 = load i64, i64* %RBP
  %6586 = sub i64 %6585, 48
  %6587 = load i64, i64* %PC
  %6588 = add i64 %6587, 7
  store i64 %6588, i64* %PC
  %6589 = inttoptr i64 %6586 to i32*
  store i32 0, i32* %6589
  br label %block_4024b9

block_40247f:                                     ; preds = %block_4022cd
  %6590 = load i64, i64* %PC
  %6591 = add i64 %6590, 5
  %6592 = load i64, i64* %PC
  %6593 = add i64 %6592, 5
  store i64 %6593, i64* %PC
  %6594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6591, i64* %6594, align 8, !tbaa !2428
  br label %block_402484

block_4024b9:                                     ; preds = %block_4024b2, %block_4024c5
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.6, %block_4024b2 ], [ %MEMORY.2, %block_4024c5 ]
  %6595 = load i64, i64* %RBP
  %6596 = sub i64 %6595, 48
  %6597 = load i64, i64* %PC
  %6598 = add i64 %6597, 3
  store i64 %6598, i64* %PC
  %6599 = inttoptr i64 %6596 to i32*
  %6600 = load i32, i32* %6599
  %6601 = zext i32 %6600 to i64
  store i64 %6601, i64* %RAX, align 8, !tbaa !2428
  %6602 = load i32, i32* %EAX
  %6603 = zext i32 %6602 to i64
  %6604 = load i64, i64* %RBP
  %6605 = sub i64 %6604, 4
  %6606 = load i64, i64* %PC
  %6607 = add i64 %6606, 3
  store i64 %6607, i64* %PC
  %6608 = inttoptr i64 %6605 to i32*
  %6609 = load i32, i32* %6608
  %6610 = sub i32 %6602, %6609
  %6611 = icmp ult i32 %6602, %6609
  %6612 = zext i1 %6611 to i8
  %6613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6612, i8* %6613, align 1, !tbaa !2432
  %6614 = and i32 %6610, 255
  %6615 = call i32 @llvm.ctpop.i32(i32 %6614) #16
  %6616 = trunc i32 %6615 to i8
  %6617 = and i8 %6616, 1
  %6618 = xor i8 %6617, 1
  %6619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6618, i8* %6619, align 1, !tbaa !2446
  %6620 = xor i32 %6609, %6602
  %6621 = xor i32 %6620, %6610
  %6622 = lshr i32 %6621, 4
  %6623 = trunc i32 %6622 to i8
  %6624 = and i8 %6623, 1
  %6625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6624, i8* %6625, align 1, !tbaa !2447
  %6626 = icmp eq i32 %6610, 0
  %6627 = zext i1 %6626 to i8
  %6628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6627, i8* %6628, align 1, !tbaa !2448
  %6629 = lshr i32 %6610, 31
  %6630 = trunc i32 %6629 to i8
  %6631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6630, i8* %6631, align 1, !tbaa !2449
  %6632 = lshr i32 %6602, 31
  %6633 = lshr i32 %6609, 31
  %6634 = xor i32 %6633, %6632
  %6635 = xor i32 %6629, %6632
  %6636 = add nuw nsw i32 %6635, %6634
  %6637 = icmp eq i32 %6636, 2
  %6638 = zext i1 %6637 to i8
  %6639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6638, i8* %6639, align 1, !tbaa !2450
  %6640 = load i64, i64* %PC
  %6641 = add i64 %6640, 820
  %6642 = load i64, i64* %PC
  %6643 = add i64 %6642, 6
  %6644 = load i64, i64* %PC
  %6645 = add i64 %6644, 6
  store i64 %6645, i64* %PC
  %6646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6647 = load i8, i8* %6646, align 1, !tbaa !2449
  %6648 = icmp ne i8 %6647, 0
  %6649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6650 = load i8, i8* %6649, align 1, !tbaa !2450
  %6651 = icmp ne i8 %6650, 0
  %6652 = xor i1 %6648, %6651
  %6653 = xor i1 %6652, true
  %6654 = zext i1 %6653 to i8
  store i8 %6654, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6656 = select i1 %6652, i64 %6643, i64 %6641
  store i64 %6656, i64* %6655, align 8, !tbaa !2428
  %6657 = load i8, i8* %BRANCH_TAKEN
  %6658 = icmp eq i8 %6657, 1
  br i1 %6658, label %block_4027f3, label %block_4024c5

block_4021aa:                                     ; preds = %block_40219a, %block_4021b6
  %MEMORY.3 = phi %struct.Memory* [ %6795, %block_40219a ], [ %MEMORY.3, %block_4021b6 ]
  %6659 = load i64, i64* %RBP
  %6660 = sub i64 %6659, 48
  %6661 = load i64, i64* %PC
  %6662 = add i64 %6661, 3
  store i64 %6662, i64* %PC
  %6663 = inttoptr i64 %6660 to i32*
  %6664 = load i32, i32* %6663
  %6665 = zext i32 %6664 to i64
  store i64 %6665, i64* %RAX, align 8, !tbaa !2428
  %6666 = load i32, i32* %EAX
  %6667 = zext i32 %6666 to i64
  %6668 = load i64, i64* %RBP
  %6669 = sub i64 %6668, 4
  %6670 = load i64, i64* %PC
  %6671 = add i64 %6670, 3
  store i64 %6671, i64* %PC
  %6672 = inttoptr i64 %6669 to i32*
  %6673 = load i32, i32* %6672
  %6674 = sub i32 %6666, %6673
  %6675 = icmp ult i32 %6666, %6673
  %6676 = zext i1 %6675 to i8
  %6677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6676, i8* %6677, align 1, !tbaa !2432
  %6678 = and i32 %6674, 255
  %6679 = call i32 @llvm.ctpop.i32(i32 %6678) #16
  %6680 = trunc i32 %6679 to i8
  %6681 = and i8 %6680, 1
  %6682 = xor i8 %6681, 1
  %6683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6682, i8* %6683, align 1, !tbaa !2446
  %6684 = xor i32 %6673, %6666
  %6685 = xor i32 %6684, %6674
  %6686 = lshr i32 %6685, 4
  %6687 = trunc i32 %6686 to i8
  %6688 = and i8 %6687, 1
  %6689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6688, i8* %6689, align 1, !tbaa !2447
  %6690 = icmp eq i32 %6674, 0
  %6691 = zext i1 %6690 to i8
  %6692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6691, i8* %6692, align 1, !tbaa !2448
  %6693 = lshr i32 %6674, 31
  %6694 = trunc i32 %6693 to i8
  %6695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6694, i8* %6695, align 1, !tbaa !2449
  %6696 = lshr i32 %6666, 31
  %6697 = lshr i32 %6673, 31
  %6698 = xor i32 %6697, %6696
  %6699 = xor i32 %6693, %6696
  %6700 = add nuw nsw i32 %6699, %6698
  %6701 = icmp eq i32 %6700, 2
  %6702 = zext i1 %6701 to i8
  %6703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6702, i8* %6703, align 1, !tbaa !2450
  %6704 = load i64, i64* %PC
  %6705 = add i64 %6704, 232
  %6706 = load i64, i64* %PC
  %6707 = add i64 %6706, 6
  %6708 = load i64, i64* %PC
  %6709 = add i64 %6708, 6
  store i64 %6709, i64* %PC
  %6710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6711 = load i8, i8* %6710, align 1, !tbaa !2449
  %6712 = icmp ne i8 %6711, 0
  %6713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6714 = load i8, i8* %6713, align 1, !tbaa !2450
  %6715 = icmp ne i8 %6714, 0
  %6716 = xor i1 %6712, %6715
  %6717 = xor i1 %6716, true
  %6718 = zext i1 %6717 to i8
  store i8 %6718, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6720 = select i1 %6716, i64 %6707, i64 %6705
  store i64 %6720, i64* %6719, align 8, !tbaa !2428
  %6721 = load i8, i8* %BRANCH_TAKEN
  %6722 = icmp eq i8 %6721, 1
  br i1 %6722, label %block_402298, label %block_4021b6

block_40217a:                                     ; preds = %block_402175, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %MEMORY.4 = phi %struct.Memory* [ %640, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ], [ %MEMORY.5, %block_402175 ]
  %6723 = load i64, i64* %PC
  %6724 = add i64 %6723, 5
  store i64 %6724, i64* %PC
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %6725 = load i64, i64* %RBP
  %6726 = sub i64 %6725, 20
  %6727 = load i64, i64* %PC
  %6728 = add i64 %6727, 3
  store i64 %6728, i64* %PC
  %6729 = inttoptr i64 %6726 to i32*
  %6730 = load i32, i32* %6729
  %6731 = zext i32 %6730 to i64
  store i64 %6731, i64* %RCX, align 8, !tbaa !2428
  %6732 = load i64, i64* %RBP
  %6733 = sub i64 %6732, 64
  %6734 = load i32, i32* %EAX
  %6735 = zext i32 %6734 to i64
  %6736 = load i64, i64* %PC
  %6737 = add i64 %6736, 3
  store i64 %6737, i64* %PC
  %6738 = inttoptr i64 %6733 to i32*
  store i32 %6734, i32* %6738
  %6739 = load i32, i32* %ECX
  %6740 = zext i32 %6739 to i64
  %6741 = load i64, i64* %PC
  %6742 = add i64 %6741, 2
  store i64 %6742, i64* %PC
  %6743 = and i64 %6740, 4294967295
  store i64 %6743, i64* %RAX, align 8, !tbaa !2428
  %6744 = load i64, i64* %PC
  %6745 = add i64 %6744, 1
  store i64 %6745, i64* %PC
  %6746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6748 = bitcast %union.anon* %6747 to i32*
  %6749 = load i32, i32* %6748, align 8, !tbaa !2452
  %6750 = sext i32 %6749 to i64
  %6751 = lshr i64 %6750, 32
  store i64 %6751, i64* %6746, align 8, !tbaa !2428
  %6752 = load i64, i64* %RBP
  %6753 = sub i64 %6752, 64
  %6754 = load i64, i64* %PC
  %6755 = add i64 %6754, 3
  store i64 %6755, i64* %PC
  %6756 = inttoptr i64 %6753 to i32*
  %6757 = load i32, i32* %6756
  %6758 = zext i32 %6757 to i64
  store i64 %6758, i64* %RCX, align 8, !tbaa !2428
  %6759 = load i32, i32* %ECX
  %6760 = zext i32 %6759 to i64
  %6761 = load i64, i64* %PC
  %6762 = add i64 %6761, 2
  store i64 %6762, i64* %PC
  %6763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %6764 = bitcast %union.anon* %6763 to i32*
  %6765 = load i32, i32* %6764, align 8, !tbaa !2452
  %6766 = zext i32 %6765 to i64
  %6767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %6768 = bitcast %union.anon* %6767 to i32*
  %6769 = load i32, i32* %6768, align 8, !tbaa !2452
  %6770 = zext i32 %6769 to i64
  %6771 = shl i64 %6760, 32
  %6772 = ashr exact i64 %6771, 32
  %6773 = shl nuw i64 %6770, 32
  %6774 = or i64 %6773, %6766
  %6775 = sdiv i64 %6774, %6772
  %6776 = shl i64 %6775, 32
  %6777 = ashr exact i64 %6776, 32
  %6778 = icmp eq i64 %6775, %6777
  br i1 %6778, label %6783, label %6779

; <label>:6779:                                   ; preds = %block_40217a
  %6780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6781 = load i64, i64* %6780, align 8, !tbaa !2428
  %6782 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6781, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:6783:                                   ; preds = %block_40217a
  %6784 = srem i64 %6774, %6772
  %6785 = getelementptr inbounds %union.anon, %union.anon* %6763, i64 0, i32 0
  %6786 = and i64 %6775, 4294967295
  store i64 %6786, i64* %6785, align 8, !tbaa !2428
  %6787 = getelementptr inbounds %union.anon, %union.anon* %6767, i64 0, i32 0
  %6788 = and i64 %6784, 4294967295
  store i64 %6788, i64* %6787, align 8, !tbaa !2428
  %6789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6789, align 1, !tbaa !2432
  %6790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %6790, align 1, !tbaa !2446
  %6791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6791, align 1, !tbaa !2447
  %6792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6792, align 1, !tbaa !2448
  %6793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6793, align 1, !tbaa !2449
  %6794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6794, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %6779, %6783
  %6795 = phi %struct.Memory* [ %6782, %6779 ], [ %MEMORY.4, %6783 ]
  %6796 = load i64, i64* %RBP
  %6797 = sub i64 %6796, 44
  %6798 = load i32, i32* %EDX
  %6799 = zext i32 %6798 to i64
  %6800 = load i64, i64* %PC
  %6801 = add i64 %6800, 3
  store i64 %6801, i64* %PC
  %6802 = inttoptr i64 %6797 to i32*
  store i32 %6798, i32* %6802
  %6803 = load i64, i64* %RBP
  %6804 = sub i64 %6803, 44
  %6805 = load i64, i64* %PC
  %6806 = add i64 %6805, 4
  store i64 %6806, i64* %PC
  %6807 = inttoptr i64 %6804 to i32*
  %6808 = load i32, i32* %6807
  %6809 = sub i32 %6808, 4
  %6810 = icmp ult i32 %6808, 4
  %6811 = zext i1 %6810 to i8
  %6812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6811, i8* %6812, align 1, !tbaa !2432
  %6813 = and i32 %6809, 255
  %6814 = call i32 @llvm.ctpop.i32(i32 %6813) #16
  %6815 = trunc i32 %6814 to i8
  %6816 = and i8 %6815, 1
  %6817 = xor i8 %6816, 1
  %6818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6817, i8* %6818, align 1, !tbaa !2446
  %6819 = xor i32 %6808, 4
  %6820 = xor i32 %6819, %6809
  %6821 = lshr i32 %6820, 4
  %6822 = trunc i32 %6821 to i8
  %6823 = and i8 %6822, 1
  %6824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6823, i8* %6824, align 1, !tbaa !2447
  %6825 = icmp eq i32 %6809, 0
  %6826 = zext i1 %6825 to i8
  %6827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6826, i8* %6827, align 1, !tbaa !2448
  %6828 = lshr i32 %6809, 31
  %6829 = trunc i32 %6828 to i8
  %6830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6829, i8* %6830, align 1, !tbaa !2449
  %6831 = lshr i32 %6808, 31
  %6832 = xor i32 %6828, %6831
  %6833 = add nuw nsw i32 %6832, %6831
  %6834 = icmp eq i32 %6833, 2
  %6835 = zext i1 %6834 to i8
  %6836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6835, i8* %6836, align 1, !tbaa !2450
  %6837 = load i64, i64* %PC
  %6838 = add i64 %6837, 265
  %6839 = load i64, i64* %PC
  %6840 = add i64 %6839, 6
  %6841 = load i64, i64* %PC
  %6842 = add i64 %6841, 6
  store i64 %6842, i64* %PC
  %6843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6844 = load i8, i8* %6843, align 1, !tbaa !2449
  %6845 = icmp ne i8 %6844, 0
  %6846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6847 = load i8, i8* %6846, align 1, !tbaa !2450
  %6848 = icmp ne i8 %6847, 0
  %6849 = xor i1 %6845, %6848
  %6850 = zext i1 %6849 to i8
  store i8 %6850, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6852 = select i1 %6849, i64 %6838, i64 %6840
  store i64 %6852, i64* %6851, align 8, !tbaa !2428
  %6853 = load i8, i8* %BRANCH_TAKEN
  %6854 = icmp eq i8 %6853, 1
  br i1 %6854, label %block_40229d, label %block_40219a

block_4020e9:                                     ; preds = %block_4020f5, %block_4020d9
  %MEMORY.5 = phi %struct.Memory* [ %640, %block_4020d9 ], [ %MEMORY.5, %block_4020f5 ]
  %6855 = load i64, i64* %RBP
  %6856 = sub i64 %6855, 48
  %6857 = load i64, i64* %PC
  %6858 = add i64 %6857, 3
  store i64 %6858, i64* %PC
  %6859 = inttoptr i64 %6856 to i32*
  %6860 = load i32, i32* %6859
  %6861 = zext i32 %6860 to i64
  store i64 %6861, i64* %RAX, align 8, !tbaa !2428
  %6862 = load i32, i32* %EAX
  %6863 = zext i32 %6862 to i64
  %6864 = load i64, i64* %RBP
  %6865 = sub i64 %6864, 4
  %6866 = load i64, i64* %PC
  %6867 = add i64 %6866, 3
  store i64 %6867, i64* %PC
  %6868 = inttoptr i64 %6865 to i32*
  %6869 = load i32, i32* %6868
  %6870 = sub i32 %6862, %6869
  %6871 = icmp ult i32 %6862, %6869
  %6872 = zext i1 %6871 to i8
  %6873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6872, i8* %6873, align 1, !tbaa !2432
  %6874 = and i32 %6870, 255
  %6875 = call i32 @llvm.ctpop.i32(i32 %6874) #16
  %6876 = trunc i32 %6875 to i8
  %6877 = and i8 %6876, 1
  %6878 = xor i8 %6877, 1
  %6879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6878, i8* %6879, align 1, !tbaa !2446
  %6880 = xor i32 %6869, %6862
  %6881 = xor i32 %6880, %6870
  %6882 = lshr i32 %6881, 4
  %6883 = trunc i32 %6882 to i8
  %6884 = and i8 %6883, 1
  %6885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6884, i8* %6885, align 1, !tbaa !2447
  %6886 = icmp eq i32 %6870, 0
  %6887 = zext i1 %6886 to i8
  %6888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6887, i8* %6888, align 1, !tbaa !2448
  %6889 = lshr i32 %6870, 31
  %6890 = trunc i32 %6889 to i8
  %6891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6890, i8* %6891, align 1, !tbaa !2449
  %6892 = lshr i32 %6862, 31
  %6893 = lshr i32 %6869, 31
  %6894 = xor i32 %6893, %6892
  %6895 = xor i32 %6889, %6892
  %6896 = add nuw nsw i32 %6895, %6894
  %6897 = icmp eq i32 %6896, 2
  %6898 = zext i1 %6897 to i8
  %6899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6898, i8* %6899, align 1, !tbaa !2450
  %6900 = load i64, i64* %PC
  %6901 = add i64 %6900, 134
  %6902 = load i64, i64* %PC
  %6903 = add i64 %6902, 6
  %6904 = load i64, i64* %PC
  %6905 = add i64 %6904, 6
  store i64 %6905, i64* %PC
  %6906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6907 = load i8, i8* %6906, align 1, !tbaa !2449
  %6908 = icmp ne i8 %6907, 0
  %6909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6910 = load i8, i8* %6909, align 1, !tbaa !2450
  %6911 = icmp ne i8 %6910, 0
  %6912 = xor i1 %6908, %6911
  %6913 = xor i1 %6912, true
  %6914 = zext i1 %6913 to i8
  store i8 %6914, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6916 = select i1 %6912, i64 %6903, i64 %6901
  store i64 %6916, i64* %6915, align 8, !tbaa !2428
  %6917 = load i8, i8* %BRANCH_TAKEN
  %6918 = icmp eq i8 %6917, 1
  br i1 %6918, label %block_402175, label %block_4020f5

block_4024a6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4027f3
  %MEMORY.6 = phi %struct.Memory* [ %9381, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %MEMORY.2, %block_4027f3 ]
  %6919 = load i64, i64* %RBP
  %6920 = sub i64 %6919, 44
  %6921 = load i64, i64* %PC
  %6922 = add i64 %6921, 3
  store i64 %6922, i64* %PC
  %6923 = inttoptr i64 %6920 to i32*
  %6924 = load i32, i32* %6923
  %6925 = zext i32 %6924 to i64
  store i64 %6925, i64* %RAX, align 8, !tbaa !2428
  %6926 = load i32, i32* %EAX
  %6927 = zext i32 %6926 to i64
  %6928 = load i64, i64* %RBP
  %6929 = sub i64 %6928, 20
  %6930 = load i64, i64* %PC
  %6931 = add i64 %6930, 3
  store i64 %6931, i64* %PC
  %6932 = inttoptr i64 %6929 to i32*
  %6933 = load i32, i32* %6932
  %6934 = sub i32 %6926, %6933
  %6935 = icmp ult i32 %6926, %6933
  %6936 = zext i1 %6935 to i8
  %6937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6936, i8* %6937, align 1, !tbaa !2432
  %6938 = and i32 %6934, 255
  %6939 = call i32 @llvm.ctpop.i32(i32 %6938) #16
  %6940 = trunc i32 %6939 to i8
  %6941 = and i8 %6940, 1
  %6942 = xor i8 %6941, 1
  %6943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6942, i8* %6943, align 1, !tbaa !2446
  %6944 = xor i32 %6933, %6926
  %6945 = xor i32 %6944, %6934
  %6946 = lshr i32 %6945, 4
  %6947 = trunc i32 %6946 to i8
  %6948 = and i8 %6947, 1
  %6949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6948, i8* %6949, align 1, !tbaa !2447
  %6950 = icmp eq i32 %6934, 0
  %6951 = zext i1 %6950 to i8
  %6952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6951, i8* %6952, align 1, !tbaa !2448
  %6953 = lshr i32 %6934, 31
  %6954 = trunc i32 %6953 to i8
  %6955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6954, i8* %6955, align 1, !tbaa !2449
  %6956 = lshr i32 %6926, 31
  %6957 = lshr i32 %6933, 31
  %6958 = xor i32 %6957, %6956
  %6959 = xor i32 %6953, %6956
  %6960 = add nuw nsw i32 %6959, %6958
  %6961 = icmp eq i32 %6960, 2
  %6962 = zext i1 %6961 to i8
  %6963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6962, i8* %6963, align 1, !tbaa !2450
  %6964 = load i64, i64* %PC
  %6965 = add i64 %6964, 858
  %6966 = load i64, i64* %PC
  %6967 = add i64 %6966, 6
  %6968 = load i64, i64* %PC
  %6969 = add i64 %6968, 6
  store i64 %6969, i64* %PC
  %6970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6971 = load i8, i8* %6970, align 1, !tbaa !2449
  %6972 = icmp ne i8 %6971, 0
  %6973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6974 = load i8, i8* %6973, align 1, !tbaa !2450
  %6975 = icmp ne i8 %6974, 0
  %6976 = xor i1 %6972, %6975
  %6977 = xor i1 %6976, true
  %6978 = zext i1 %6977 to i8
  store i8 %6978, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6980 = select i1 %6976, i64 %6967, i64 %6965
  store i64 %6980, i64* %6979, align 8, !tbaa !2428
  %6981 = load i8, i8* %BRANCH_TAKEN
  %6982 = icmp eq i8 %6981, 1
  br i1 %6982, label %block_402806, label %block_4024b2

block_402059:                                     ; preds = %block_402049, %block_402065
  %MEMORY.7 = phi %struct.Memory* [ %174, %block_402049 ], [ %MEMORY.7, %block_402065 ]
  %6983 = load i64, i64* %RBP
  %6984 = sub i64 %6983, 48
  %6985 = load i64, i64* %PC
  %6986 = add i64 %6985, 3
  store i64 %6986, i64* %PC
  %6987 = inttoptr i64 %6984 to i32*
  %6988 = load i32, i32* %6987
  %6989 = zext i32 %6988 to i64
  store i64 %6989, i64* %RAX, align 8, !tbaa !2428
  %6990 = load i32, i32* %EAX
  %6991 = zext i32 %6990 to i64
  %6992 = load i64, i64* %RBP
  %6993 = sub i64 %6992, 4
  %6994 = load i64, i64* %PC
  %6995 = add i64 %6994, 3
  store i64 %6995, i64* %PC
  %6996 = inttoptr i64 %6993 to i32*
  %6997 = load i32, i32* %6996
  %6998 = sub i32 %6990, %6997
  %6999 = icmp ult i32 %6990, %6997
  %7000 = zext i1 %6999 to i8
  %7001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7000, i8* %7001, align 1, !tbaa !2432
  %7002 = and i32 %6998, 255
  %7003 = call i32 @llvm.ctpop.i32(i32 %7002) #16
  %7004 = trunc i32 %7003 to i8
  %7005 = and i8 %7004, 1
  %7006 = xor i8 %7005, 1
  %7007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7006, i8* %7007, align 1, !tbaa !2446
  %7008 = xor i32 %6997, %6990
  %7009 = xor i32 %7008, %6998
  %7010 = lshr i32 %7009, 4
  %7011 = trunc i32 %7010 to i8
  %7012 = and i8 %7011, 1
  %7013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7012, i8* %7013, align 1, !tbaa !2447
  %7014 = icmp eq i32 %6998, 0
  %7015 = zext i1 %7014 to i8
  %7016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7015, i8* %7016, align 1, !tbaa !2448
  %7017 = lshr i32 %6998, 31
  %7018 = trunc i32 %7017 to i8
  %7019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7018, i8* %7019, align 1, !tbaa !2449
  %7020 = lshr i32 %6990, 31
  %7021 = lshr i32 %6997, 31
  %7022 = xor i32 %7021, %7020
  %7023 = xor i32 %7017, %7020
  %7024 = add nuw nsw i32 %7023, %7022
  %7025 = icmp eq i32 %7024, 2
  %7026 = zext i1 %7025 to i8
  %7027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7026, i8* %7027, align 1, !tbaa !2450
  %7028 = load i64, i64* %PC
  %7029 = add i64 %7028, 85
  %7030 = load i64, i64* %PC
  %7031 = add i64 %7030, 6
  %7032 = load i64, i64* %PC
  %7033 = add i64 %7032, 6
  store i64 %7033, i64* %PC
  %7034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7035 = load i8, i8* %7034, align 1, !tbaa !2449
  %7036 = icmp ne i8 %7035, 0
  %7037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7038 = load i8, i8* %7037, align 1, !tbaa !2450
  %7039 = icmp ne i8 %7038, 0
  %7040 = xor i1 %7036, %7039
  %7041 = xor i1 %7040, true
  %7042 = zext i1 %7041 to i8
  store i8 %7042, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7044 = select i1 %7040, i64 %7031, i64 %7029
  store i64 %7044, i64* %7043, align 8, !tbaa !2428
  %7045 = load i8, i8* %BRANCH_TAKEN
  %7046 = icmp eq i8 %7045, 1
  br i1 %7046, label %block_4020b4, label %block_402065

block_40229d:                                     ; preds = %block_402298, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %MEMORY.8 = phi %struct.Memory* [ %6795, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ], [ %MEMORY.3, %block_402298 ]
  %7047 = load i64, i64* %PC
  %7048 = add i64 %7047, 5
  store i64 %7048, i64* %PC
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %7049 = load i64, i64* %RBP
  %7050 = sub i64 %7049, 20
  %7051 = load i64, i64* %PC
  %7052 = add i64 %7051, 3
  store i64 %7052, i64* %PC
  %7053 = inttoptr i64 %7050 to i32*
  %7054 = load i32, i32* %7053
  %7055 = zext i32 %7054 to i64
  store i64 %7055, i64* %RCX, align 8, !tbaa !2428
  %7056 = load i64, i64* %RBP
  %7057 = sub i64 %7056, 68
  %7058 = load i32, i32* %EAX
  %7059 = zext i32 %7058 to i64
  %7060 = load i64, i64* %PC
  %7061 = add i64 %7060, 3
  store i64 %7061, i64* %PC
  %7062 = inttoptr i64 %7057 to i32*
  store i32 %7058, i32* %7062
  %7063 = load i32, i32* %ECX
  %7064 = zext i32 %7063 to i64
  %7065 = load i64, i64* %PC
  %7066 = add i64 %7065, 2
  store i64 %7066, i64* %PC
  %7067 = and i64 %7064, 4294967295
  store i64 %7067, i64* %RAX, align 8, !tbaa !2428
  %7068 = load i64, i64* %PC
  %7069 = add i64 %7068, 1
  store i64 %7069, i64* %PC
  %7070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7072 = bitcast %union.anon* %7071 to i32*
  %7073 = load i32, i32* %7072, align 8, !tbaa !2452
  %7074 = sext i32 %7073 to i64
  %7075 = lshr i64 %7074, 32
  store i64 %7075, i64* %7070, align 8, !tbaa !2428
  %7076 = load i64, i64* %RBP
  %7077 = sub i64 %7076, 68
  %7078 = load i64, i64* %PC
  %7079 = add i64 %7078, 3
  store i64 %7079, i64* %PC
  %7080 = inttoptr i64 %7077 to i32*
  %7081 = load i32, i32* %7080
  %7082 = zext i32 %7081 to i64
  store i64 %7082, i64* %RCX, align 8, !tbaa !2428
  %7083 = load i32, i32* %ECX
  %7084 = zext i32 %7083 to i64
  %7085 = load i64, i64* %PC
  %7086 = add i64 %7085, 2
  store i64 %7086, i64* %PC
  %7087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7088 = bitcast %union.anon* %7087 to i32*
  %7089 = load i32, i32* %7088, align 8, !tbaa !2452
  %7090 = zext i32 %7089 to i64
  %7091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7092 = bitcast %union.anon* %7091 to i32*
  %7093 = load i32, i32* %7092, align 8, !tbaa !2452
  %7094 = zext i32 %7093 to i64
  %7095 = shl i64 %7084, 32
  %7096 = ashr exact i64 %7095, 32
  %7097 = shl nuw i64 %7094, 32
  %7098 = or i64 %7097, %7090
  %7099 = sdiv i64 %7098, %7096
  %7100 = shl i64 %7099, 32
  %7101 = ashr exact i64 %7100, 32
  %7102 = icmp eq i64 %7099, %7101
  br i1 %7102, label %7107, label %7103

; <label>:7103:                                   ; preds = %block_40229d
  %7104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7105 = load i64, i64* %7104, align 8, !tbaa !2428
  %7106 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7105, %struct.Memory* %MEMORY.8) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:7107:                                   ; preds = %block_40229d
  %7108 = srem i64 %7098, %7096
  %7109 = getelementptr inbounds %union.anon, %union.anon* %7087, i64 0, i32 0
  %7110 = and i64 %7099, 4294967295
  store i64 %7110, i64* %7109, align 8, !tbaa !2428
  %7111 = getelementptr inbounds %union.anon, %union.anon* %7091, i64 0, i32 0
  %7112 = and i64 %7108, 4294967295
  store i64 %7112, i64* %7111, align 8, !tbaa !2428
  %7113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7113, align 1, !tbaa !2432
  %7114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %7114, align 1, !tbaa !2446
  %7115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7115, align 1, !tbaa !2447
  %7116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7116, align 1, !tbaa !2448
  %7117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7117, align 1, !tbaa !2449
  %7118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7118, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %7103, %7107
  %7119 = phi %struct.Memory* [ %7106, %7103 ], [ %MEMORY.8, %7107 ]
  %7120 = load i64, i64* %RBP
  %7121 = sub i64 %7120, 44
  %7122 = load i32, i32* %EDX
  %7123 = zext i32 %7122 to i64
  %7124 = load i64, i64* %PC
  %7125 = add i64 %7124, 3
  store i64 %7125, i64* %PC
  %7126 = inttoptr i64 %7121 to i32*
  store i32 %7122, i32* %7126
  %7127 = load i64, i64* %RBP
  %7128 = sub i64 %7127, 44
  %7129 = load i64, i64* %PC
  %7130 = add i64 %7129, 4
  store i64 %7130, i64* %PC
  %7131 = inttoptr i64 %7128 to i32*
  %7132 = load i32, i32* %7131
  %7133 = sub i32 %7132, 8
  %7134 = icmp ult i32 %7132, 8
  %7135 = zext i1 %7134 to i8
  %7136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7135, i8* %7136, align 1, !tbaa !2432
  %7137 = and i32 %7133, 255
  %7138 = call i32 @llvm.ctpop.i32(i32 %7137) #16
  %7139 = trunc i32 %7138 to i8
  %7140 = and i8 %7139, 1
  %7141 = xor i8 %7140, 1
  %7142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7141, i8* %7142, align 1, !tbaa !2446
  %7143 = xor i32 %7132, 8
  %7144 = xor i32 %7143, %7133
  %7145 = lshr i32 %7144, 4
  %7146 = trunc i32 %7145 to i8
  %7147 = and i8 %7146, 1
  %7148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7147, i8* %7148, align 1, !tbaa !2447
  %7149 = icmp eq i32 %7133, 0
  %7150 = zext i1 %7149 to i8
  %7151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7150, i8* %7151, align 1, !tbaa !2448
  %7152 = lshr i32 %7133, 31
  %7153 = trunc i32 %7152 to i8
  %7154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7153, i8* %7154, align 1, !tbaa !2449
  %7155 = lshr i32 %7132, 31
  %7156 = xor i32 %7152, %7155
  %7157 = add nuw nsw i32 %7156, %7155
  %7158 = icmp eq i32 %7157, 2
  %7159 = zext i1 %7158 to i8
  %7160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7159, i8* %7160, align 1, !tbaa !2450
  %7161 = load i64, i64* %PC
  %7162 = add i64 %7161, 461
  %7163 = load i64, i64* %PC
  %7164 = add i64 %7163, 6
  %7165 = load i64, i64* %PC
  %7166 = add i64 %7165, 6
  store i64 %7166, i64* %PC
  %7167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7168 = load i8, i8* %7167, align 1, !tbaa !2449
  %7169 = icmp ne i8 %7168, 0
  %7170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7171 = load i8, i8* %7170, align 1, !tbaa !2450
  %7172 = icmp ne i8 %7171, 0
  %7173 = xor i1 %7169, %7172
  %7174 = zext i1 %7173 to i8
  store i8 %7174, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7176 = select i1 %7173, i64 %7162, i64 %7164
  store i64 %7176, i64* %7175, align 8, !tbaa !2428
  %7177 = load i8, i8* %BRANCH_TAKEN
  %7178 = icmp eq i8 %7177, 1
  br i1 %7178, label %block_402484, label %block_4022bd

block_40219a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %7179 = load i64, i64* %RBP
  %7180 = sub i64 %7179, 44
  %7181 = load i64, i64* %PC
  %7182 = add i64 %7181, 3
  store i64 %7182, i64* %PC
  %7183 = inttoptr i64 %7180 to i32*
  %7184 = load i32, i32* %7183
  %7185 = zext i32 %7184 to i64
  store i64 %7185, i64* %RAX, align 8, !tbaa !2428
  %7186 = load i64, i64* %RAX
  %7187 = load i64, i64* %PC
  %7188 = add i64 %7187, 3
  store i64 %7188, i64* %PC
  %7189 = trunc i64 %7186 to i32
  %7190 = sub i32 %7189, 1
  %7191 = zext i32 %7190 to i64
  store i64 %7191, i64* %RAX, align 8, !tbaa !2428
  %7192 = icmp ult i32 %7189, 1
  %7193 = zext i1 %7192 to i8
  %7194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7193, i8* %7194, align 1, !tbaa !2432
  %7195 = and i32 %7190, 255
  %7196 = call i32 @llvm.ctpop.i32(i32 %7195) #16
  %7197 = trunc i32 %7196 to i8
  %7198 = and i8 %7197, 1
  %7199 = xor i8 %7198, 1
  %7200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7199, i8* %7200, align 1, !tbaa !2446
  %7201 = xor i64 1, %7186
  %7202 = trunc i64 %7201 to i32
  %7203 = xor i32 %7202, %7190
  %7204 = lshr i32 %7203, 4
  %7205 = trunc i32 %7204 to i8
  %7206 = and i8 %7205, 1
  %7207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7206, i8* %7207, align 1, !tbaa !2447
  %7208 = icmp eq i32 %7190, 0
  %7209 = zext i1 %7208 to i8
  %7210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7209, i8* %7210, align 1, !tbaa !2448
  %7211 = lshr i32 %7190, 31
  %7212 = trunc i32 %7211 to i8
  %7213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7212, i8* %7213, align 1, !tbaa !2449
  %7214 = lshr i32 %7189, 31
  %7215 = xor i32 %7211, %7214
  %7216 = add nuw nsw i32 %7215, %7214
  %7217 = icmp eq i32 %7216, 2
  %7218 = zext i1 %7217 to i8
  %7219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7218, i8* %7219, align 1, !tbaa !2450
  %7220 = load i64, i64* %RBP
  %7221 = sub i64 %7220, 44
  %7222 = load i32, i32* %EAX
  %7223 = zext i32 %7222 to i64
  %7224 = load i64, i64* %PC
  %7225 = add i64 %7224, 3
  store i64 %7225, i64* %PC
  %7226 = inttoptr i64 %7221 to i32*
  store i32 %7222, i32* %7226
  %7227 = load i64, i64* %RBP
  %7228 = sub i64 %7227, 48
  %7229 = load i64, i64* %PC
  %7230 = add i64 %7229, 7
  store i64 %7230, i64* %PC
  %7231 = inttoptr i64 %7228 to i32*
  store i32 0, i32* %7231
  br label %block_4021aa

block_4022d9:                                     ; preds = %block_4022cd
  %7232 = load i64, i64* %RBP
  %7233 = sub i64 %7232, 16
  %7234 = load i64, i64* %PC
  %7235 = add i64 %7234, 4
  store i64 %7235, i64* %PC
  %7236 = inttoptr i64 %7233 to i64*
  %7237 = load i64, i64* %7236
  store i64 %7237, i64* %RAX, align 8, !tbaa !2428
  %7238 = load i64, i64* %RBP
  %7239 = sub i64 %7238, 48
  %7240 = load i64, i64* %PC
  %7241 = add i64 %7240, 4
  store i64 %7241, i64* %PC
  %7242 = inttoptr i64 %7239 to i32*
  %7243 = load i32, i32* %7242
  %7244 = sext i32 %7243 to i64
  store i64 %7244, i64* %RCX, align 8, !tbaa !2428
  %7245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7246 = load i64, i64* %RAX
  %7247 = load i64, i64* %RCX
  %7248 = mul i64 %7247, 4
  %7249 = add i64 %7248, %7246
  %7250 = load i64, i64* %PC
  %7251 = add i64 %7250, 5
  store i64 %7251, i64* %PC
  %7252 = inttoptr i64 %7249 to float*
  %7253 = load float, float* %7252
  %7254 = bitcast i8* %7245 to float*
  store float %7253, float* %7254, align 1, !tbaa !2453
  %7255 = getelementptr inbounds i8, i8* %7245, i64 4
  %7256 = bitcast i8* %7255 to float*
  store float 0.000000e+00, float* %7256, align 1, !tbaa !2453
  %7257 = getelementptr inbounds i8, i8* %7245, i64 8
  %7258 = bitcast i8* %7257 to float*
  store float 0.000000e+00, float* %7258, align 1, !tbaa !2453
  %7259 = getelementptr inbounds i8, i8* %7245, i64 12
  %7260 = bitcast i8* %7259 to float*
  store float 0.000000e+00, float* %7260, align 1, !tbaa !2453
  %7261 = load i64, i64* %RBP
  %7262 = sub i64 %7261, 32
  %7263 = load i64, i64* %PC
  %7264 = add i64 %7263, 4
  store i64 %7264, i64* %PC
  %7265 = inttoptr i64 %7262 to i64*
  %7266 = load i64, i64* %7265
  store i64 %7266, i64* %RAX, align 8, !tbaa !2428
  %7267 = load i64, i64* %RBP
  %7268 = sub i64 %7267, 44
  %7269 = load i64, i64* %PC
  %7270 = add i64 %7269, 3
  store i64 %7270, i64* %PC
  %7271 = inttoptr i64 %7268 to i32*
  %7272 = load i32, i32* %7271
  %7273 = zext i32 %7272 to i64
  store i64 %7273, i64* %RDX, align 8, !tbaa !2428
  %7274 = load i64, i64* %RDX
  %7275 = load i64, i64* %PC
  %7276 = add i64 %7275, 3
  store i64 %7276, i64* %PC
  %7277 = trunc i64 %7274 to i32
  %7278 = sub i32 %7277, 7
  %7279 = zext i32 %7278 to i64
  store i64 %7279, i64* %RDX, align 8, !tbaa !2428
  %7280 = icmp ult i32 %7277, 7
  %7281 = zext i1 %7280 to i8
  %7282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7281, i8* %7282, align 1, !tbaa !2432
  %7283 = and i32 %7278, 255
  %7284 = call i32 @llvm.ctpop.i32(i32 %7283) #16
  %7285 = trunc i32 %7284 to i8
  %7286 = and i8 %7285, 1
  %7287 = xor i8 %7286, 1
  %7288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7287, i8* %7288, align 1, !tbaa !2446
  %7289 = xor i64 7, %7274
  %7290 = trunc i64 %7289 to i32
  %7291 = xor i32 %7290, %7278
  %7292 = lshr i32 %7291, 4
  %7293 = trunc i32 %7292 to i8
  %7294 = and i8 %7293, 1
  %7295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7294, i8* %7295, align 1, !tbaa !2447
  %7296 = icmp eq i32 %7278, 0
  %7297 = zext i1 %7296 to i8
  %7298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7297, i8* %7298, align 1, !tbaa !2448
  %7299 = lshr i32 %7278, 31
  %7300 = trunc i32 %7299 to i8
  %7301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7300, i8* %7301, align 1, !tbaa !2449
  %7302 = lshr i32 %7277, 31
  %7303 = xor i32 %7299, %7302
  %7304 = add nuw nsw i32 %7303, %7302
  %7305 = icmp eq i32 %7304, 2
  %7306 = zext i1 %7305 to i8
  %7307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7306, i8* %7307, align 1, !tbaa !2450
  %7308 = load i32, i32* %EDX
  %7309 = zext i32 %7308 to i64
  %7310 = load i64, i64* %PC
  %7311 = add i64 %7310, 3
  store i64 %7311, i64* %PC
  %7312 = shl i64 %7309, 32
  %7313 = ashr exact i64 %7312, 32
  store i64 %7313, i64* %RCX, align 8, !tbaa !2428
  %7314 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7315 = load i64, i64* %RAX
  %7316 = load i64, i64* %RCX
  %7317 = mul i64 %7316, 4
  %7318 = add i64 %7317, %7315
  %7319 = load i64, i64* %PC
  %7320 = add i64 %7319, 5
  store i64 %7320, i64* %PC
  %7321 = inttoptr i64 %7318 to float*
  %7322 = load float, float* %7321
  %7323 = bitcast i8* %7314 to float*
  store float %7322, float* %7323, align 1, !tbaa !2453
  %7324 = getelementptr inbounds i8, i8* %7314, i64 4
  %7325 = bitcast i8* %7324 to float*
  store float 0.000000e+00, float* %7325, align 1, !tbaa !2453
  %7326 = getelementptr inbounds i8, i8* %7314, i64 8
  %7327 = bitcast i8* %7326 to float*
  store float 0.000000e+00, float* %7327, align 1, !tbaa !2453
  %7328 = getelementptr inbounds i8, i8* %7314, i64 12
  %7329 = bitcast i8* %7328 to float*
  store float 0.000000e+00, float* %7329, align 1, !tbaa !2453
  %7330 = load i64, i64* %RBP
  %7331 = sub i64 %7330, 40
  %7332 = load i64, i64* %PC
  %7333 = add i64 %7332, 4
  store i64 %7333, i64* %PC
  %7334 = inttoptr i64 %7331 to i64*
  %7335 = load i64, i64* %7334
  store i64 %7335, i64* %RAX, align 8, !tbaa !2428
  %7336 = load i64, i64* %RBP
  %7337 = sub i64 %7336, 24
  %7338 = load i64, i64* %PC
  %7339 = add i64 %7338, 3
  store i64 %7339, i64* %PC
  %7340 = inttoptr i64 %7337 to i32*
  %7341 = load i32, i32* %7340
  %7342 = zext i32 %7341 to i64
  store i64 %7342, i64* %RDX, align 8, !tbaa !2428
  %7343 = load i64, i64* %RBP
  %7344 = sub i64 %7343, 44
  %7345 = load i64, i64* %PC
  %7346 = add i64 %7345, 3
  store i64 %7346, i64* %PC
  %7347 = inttoptr i64 %7344 to i32*
  %7348 = load i32, i32* %7347
  %7349 = zext i32 %7348 to i64
  store i64 %7349, i64* %RSI, align 8, !tbaa !2428
  %7350 = load i64, i64* %RSI
  %7351 = load i64, i64* %PC
  %7352 = add i64 %7351, 3
  store i64 %7352, i64* %PC
  %7353 = trunc i64 %7350 to i32
  %7354 = sub i32 %7353, 7
  %7355 = zext i32 %7354 to i64
  store i64 %7355, i64* %RSI, align 8, !tbaa !2428
  %7356 = icmp ult i32 %7353, 7
  %7357 = zext i1 %7356 to i8
  %7358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7357, i8* %7358, align 1, !tbaa !2432
  %7359 = and i32 %7354, 255
  %7360 = call i32 @llvm.ctpop.i32(i32 %7359) #16
  %7361 = trunc i32 %7360 to i8
  %7362 = and i8 %7361, 1
  %7363 = xor i8 %7362, 1
  %7364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7363, i8* %7364, align 1, !tbaa !2446
  %7365 = xor i64 7, %7350
  %7366 = trunc i64 %7365 to i32
  %7367 = xor i32 %7366, %7354
  %7368 = lshr i32 %7367, 4
  %7369 = trunc i32 %7368 to i8
  %7370 = and i8 %7369, 1
  %7371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7370, i8* %7371, align 1, !tbaa !2447
  %7372 = icmp eq i32 %7354, 0
  %7373 = zext i1 %7372 to i8
  %7374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7373, i8* %7374, align 1, !tbaa !2448
  %7375 = lshr i32 %7354, 31
  %7376 = trunc i32 %7375 to i8
  %7377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7376, i8* %7377, align 1, !tbaa !2449
  %7378 = lshr i32 %7353, 31
  %7379 = xor i32 %7375, %7378
  %7380 = add nuw nsw i32 %7379, %7378
  %7381 = icmp eq i32 %7380, 2
  %7382 = zext i1 %7381 to i8
  %7383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7382, i8* %7383, align 1, !tbaa !2450
  %7384 = load i64, i64* %RDX
  %7385 = load i32, i32* %ESI
  %7386 = zext i32 %7385 to i64
  %7387 = load i64, i64* %PC
  %7388 = add i64 %7387, 3
  store i64 %7388, i64* %PC
  %7389 = shl i64 %7384, 32
  %7390 = ashr exact i64 %7389, 32
  %7391 = shl i64 %7386, 32
  %7392 = ashr exact i64 %7391, 32
  %7393 = mul nsw i64 %7392, %7390
  %7394 = trunc i64 %7393 to i32
  %7395 = and i64 %7393, 4294967295
  store i64 %7395, i64* %RDX, align 8, !tbaa !2428
  %7396 = shl i64 %7393, 32
  %7397 = ashr exact i64 %7396, 32
  %7398 = icmp ne i64 %7397, %7393
  %7399 = zext i1 %7398 to i8
  %7400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7399, i8* %7400, align 1, !tbaa !2432
  %7401 = and i32 %7394, 255
  %7402 = call i32 @llvm.ctpop.i32(i32 %7401) #16
  %7403 = trunc i32 %7402 to i8
  %7404 = and i8 %7403, 1
  %7405 = xor i8 %7404, 1
  %7406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7405, i8* %7406, align 1, !tbaa !2446
  %7407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7407, align 1, !tbaa !2447
  %7408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7408, align 1, !tbaa !2448
  %7409 = lshr i32 %7394, 31
  %7410 = trunc i32 %7409 to i8
  %7411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7410, i8* %7411, align 1, !tbaa !2449
  %7412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7399, i8* %7412, align 1, !tbaa !2450
  %7413 = load i64, i64* %RDX
  %7414 = load i64, i64* %RBP
  %7415 = sub i64 %7414, 48
  %7416 = load i64, i64* %PC
  %7417 = add i64 %7416, 3
  store i64 %7417, i64* %PC
  %7418 = trunc i64 %7413 to i32
  %7419 = inttoptr i64 %7415 to i32*
  %7420 = load i32, i32* %7419
  %7421 = add i32 %7420, %7418
  %7422 = zext i32 %7421 to i64
  store i64 %7422, i64* %RDX, align 8, !tbaa !2428
  %7423 = icmp ult i32 %7421, %7418
  %7424 = icmp ult i32 %7421, %7420
  %7425 = or i1 %7423, %7424
  %7426 = zext i1 %7425 to i8
  %7427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7426, i8* %7427, align 1, !tbaa !2432
  %7428 = and i32 %7421, 255
  %7429 = call i32 @llvm.ctpop.i32(i32 %7428) #16
  %7430 = trunc i32 %7429 to i8
  %7431 = and i8 %7430, 1
  %7432 = xor i8 %7431, 1
  %7433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7432, i8* %7433, align 1, !tbaa !2446
  %7434 = xor i32 %7420, %7418
  %7435 = xor i32 %7434, %7421
  %7436 = lshr i32 %7435, 4
  %7437 = trunc i32 %7436 to i8
  %7438 = and i8 %7437, 1
  %7439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7438, i8* %7439, align 1, !tbaa !2447
  %7440 = icmp eq i32 %7421, 0
  %7441 = zext i1 %7440 to i8
  %7442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7441, i8* %7442, align 1, !tbaa !2448
  %7443 = lshr i32 %7421, 31
  %7444 = trunc i32 %7443 to i8
  %7445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7444, i8* %7445, align 1, !tbaa !2449
  %7446 = lshr i32 %7418, 31
  %7447 = lshr i32 %7420, 31
  %7448 = xor i32 %7443, %7446
  %7449 = xor i32 %7443, %7447
  %7450 = add nuw nsw i32 %7448, %7449
  %7451 = icmp eq i32 %7450, 2
  %7452 = zext i1 %7451 to i8
  %7453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7452, i8* %7453, align 1, !tbaa !2450
  %7454 = load i32, i32* %EDX
  %7455 = zext i32 %7454 to i64
  %7456 = load i64, i64* %PC
  %7457 = add i64 %7456, 3
  store i64 %7457, i64* %PC
  %7458 = shl i64 %7455, 32
  %7459 = ashr exact i64 %7458, 32
  store i64 %7459, i64* %RCX, align 8, !tbaa !2428
  %7460 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7461 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7462 = load i64, i64* %RAX
  %7463 = load i64, i64* %RCX
  %7464 = mul i64 %7463, 4
  %7465 = add i64 %7464, %7462
  %7466 = load i64, i64* %PC
  %7467 = add i64 %7466, 5
  store i64 %7467, i64* %PC
  %7468 = bitcast i8* %7461 to <2 x float>*
  %7469 = load <2 x float>, <2 x float>* %7468, align 1
  %7470 = getelementptr inbounds i8, i8* %7461, i64 8
  %7471 = bitcast i8* %7470 to <2 x i32>*
  %7472 = load <2 x i32>, <2 x i32>* %7471, align 1
  %7473 = inttoptr i64 %7465 to float*
  %7474 = load float, float* %7473
  %7475 = extractelement <2 x float> %7469, i32 0
  %7476 = fmul float %7475, %7474
  %7477 = bitcast i8* %7460 to float*
  store float %7476, float* %7477, align 1, !tbaa !2453
  %7478 = bitcast <2 x float> %7469 to <2 x i32>
  %7479 = extractelement <2 x i32> %7478, i32 1
  %7480 = getelementptr inbounds i8, i8* %7460, i64 4
  %7481 = bitcast i8* %7480 to i32*
  store i32 %7479, i32* %7481, align 1, !tbaa !2453
  %7482 = extractelement <2 x i32> %7472, i32 0
  %7483 = getelementptr inbounds i8, i8* %7460, i64 8
  %7484 = bitcast i8* %7483 to i32*
  store i32 %7482, i32* %7484, align 1, !tbaa !2453
  %7485 = extractelement <2 x i32> %7472, i32 1
  %7486 = getelementptr inbounds i8, i8* %7460, i64 12
  %7487 = bitcast i8* %7486 to i32*
  store i32 %7485, i32* %7487, align 1, !tbaa !2453
  %7488 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7489 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7490 = bitcast %union.vec128_t* %XMM1 to i8*
  %7491 = load i64, i64* %PC
  %7492 = add i64 %7491, 4
  store i64 %7492, i64* %PC
  %7493 = bitcast i8* %7489 to <2 x float>*
  %7494 = load <2 x float>, <2 x float>* %7493, align 1
  %7495 = getelementptr inbounds i8, i8* %7489, i64 8
  %7496 = bitcast i8* %7495 to <2 x i32>*
  %7497 = load <2 x i32>, <2 x i32>* %7496, align 1
  %7498 = bitcast i8* %7490 to <2 x float>*
  %7499 = load <2 x float>, <2 x float>* %7498, align 1
  %7500 = extractelement <2 x float> %7494, i32 0
  %7501 = extractelement <2 x float> %7499, i32 0
  %7502 = fadd float %7500, %7501
  %7503 = bitcast i8* %7488 to float*
  store float %7502, float* %7503, align 1, !tbaa !2453
  %7504 = bitcast <2 x float> %7494 to <2 x i32>
  %7505 = extractelement <2 x i32> %7504, i32 1
  %7506 = getelementptr inbounds i8, i8* %7488, i64 4
  %7507 = bitcast i8* %7506 to i32*
  store i32 %7505, i32* %7507, align 1, !tbaa !2453
  %7508 = extractelement <2 x i32> %7497, i32 0
  %7509 = getelementptr inbounds i8, i8* %7488, i64 8
  %7510 = bitcast i8* %7509 to i32*
  store i32 %7508, i32* %7510, align 1, !tbaa !2453
  %7511 = extractelement <2 x i32> %7497, i32 1
  %7512 = getelementptr inbounds i8, i8* %7488, i64 12
  %7513 = bitcast i8* %7512 to i32*
  store i32 %7511, i32* %7513, align 1, !tbaa !2453
  %7514 = load i64, i64* %RBP
  %7515 = sub i64 %7514, 32
  %7516 = load i64, i64* %PC
  %7517 = add i64 %7516, 4
  store i64 %7517, i64* %PC
  %7518 = inttoptr i64 %7515 to i64*
  %7519 = load i64, i64* %7518
  store i64 %7519, i64* %RAX, align 8, !tbaa !2428
  %7520 = load i64, i64* %RBP
  %7521 = sub i64 %7520, 44
  %7522 = load i64, i64* %PC
  %7523 = add i64 %7522, 3
  store i64 %7523, i64* %PC
  %7524 = inttoptr i64 %7521 to i32*
  %7525 = load i32, i32* %7524
  %7526 = zext i32 %7525 to i64
  store i64 %7526, i64* %RDX, align 8, !tbaa !2428
  %7527 = load i64, i64* %RDX
  %7528 = load i64, i64* %PC
  %7529 = add i64 %7528, 3
  store i64 %7529, i64* %PC
  %7530 = trunc i64 %7527 to i32
  %7531 = sub i32 %7530, 6
  %7532 = zext i32 %7531 to i64
  store i64 %7532, i64* %RDX, align 8, !tbaa !2428
  %7533 = icmp ult i32 %7530, 6
  %7534 = zext i1 %7533 to i8
  %7535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7534, i8* %7535, align 1, !tbaa !2432
  %7536 = and i32 %7531, 255
  %7537 = call i32 @llvm.ctpop.i32(i32 %7536) #16
  %7538 = trunc i32 %7537 to i8
  %7539 = and i8 %7538, 1
  %7540 = xor i8 %7539, 1
  %7541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7540, i8* %7541, align 1, !tbaa !2446
  %7542 = xor i64 6, %7527
  %7543 = trunc i64 %7542 to i32
  %7544 = xor i32 %7543, %7531
  %7545 = lshr i32 %7544, 4
  %7546 = trunc i32 %7545 to i8
  %7547 = and i8 %7546, 1
  %7548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7547, i8* %7548, align 1, !tbaa !2447
  %7549 = icmp eq i32 %7531, 0
  %7550 = zext i1 %7549 to i8
  %7551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7550, i8* %7551, align 1, !tbaa !2448
  %7552 = lshr i32 %7531, 31
  %7553 = trunc i32 %7552 to i8
  %7554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7553, i8* %7554, align 1, !tbaa !2449
  %7555 = lshr i32 %7530, 31
  %7556 = xor i32 %7552, %7555
  %7557 = add nuw nsw i32 %7556, %7555
  %7558 = icmp eq i32 %7557, 2
  %7559 = zext i1 %7558 to i8
  %7560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7559, i8* %7560, align 1, !tbaa !2450
  %7561 = load i32, i32* %EDX
  %7562 = zext i32 %7561 to i64
  %7563 = load i64, i64* %PC
  %7564 = add i64 %7563, 3
  store i64 %7564, i64* %PC
  %7565 = shl i64 %7562, 32
  %7566 = ashr exact i64 %7565, 32
  store i64 %7566, i64* %RCX, align 8, !tbaa !2428
  %7567 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7568 = load i64, i64* %RAX
  %7569 = load i64, i64* %RCX
  %7570 = mul i64 %7569, 4
  %7571 = add i64 %7570, %7568
  %7572 = load i64, i64* %PC
  %7573 = add i64 %7572, 5
  store i64 %7573, i64* %PC
  %7574 = inttoptr i64 %7571 to float*
  %7575 = load float, float* %7574
  %7576 = bitcast i8* %7567 to float*
  store float %7575, float* %7576, align 1, !tbaa !2453
  %7577 = getelementptr inbounds i8, i8* %7567, i64 4
  %7578 = bitcast i8* %7577 to float*
  store float 0.000000e+00, float* %7578, align 1, !tbaa !2453
  %7579 = getelementptr inbounds i8, i8* %7567, i64 8
  %7580 = bitcast i8* %7579 to float*
  store float 0.000000e+00, float* %7580, align 1, !tbaa !2453
  %7581 = getelementptr inbounds i8, i8* %7567, i64 12
  %7582 = bitcast i8* %7581 to float*
  store float 0.000000e+00, float* %7582, align 1, !tbaa !2453
  %7583 = load i64, i64* %RBP
  %7584 = sub i64 %7583, 40
  %7585 = load i64, i64* %PC
  %7586 = add i64 %7585, 4
  store i64 %7586, i64* %PC
  %7587 = inttoptr i64 %7584 to i64*
  %7588 = load i64, i64* %7587
  store i64 %7588, i64* %RAX, align 8, !tbaa !2428
  %7589 = load i64, i64* %RBP
  %7590 = sub i64 %7589, 24
  %7591 = load i64, i64* %PC
  %7592 = add i64 %7591, 3
  store i64 %7592, i64* %PC
  %7593 = inttoptr i64 %7590 to i32*
  %7594 = load i32, i32* %7593
  %7595 = zext i32 %7594 to i64
  store i64 %7595, i64* %RDX, align 8, !tbaa !2428
  %7596 = load i64, i64* %RBP
  %7597 = sub i64 %7596, 44
  %7598 = load i64, i64* %PC
  %7599 = add i64 %7598, 3
  store i64 %7599, i64* %PC
  %7600 = inttoptr i64 %7597 to i32*
  %7601 = load i32, i32* %7600
  %7602 = zext i32 %7601 to i64
  store i64 %7602, i64* %RSI, align 8, !tbaa !2428
  %7603 = load i64, i64* %RSI
  %7604 = load i64, i64* %PC
  %7605 = add i64 %7604, 3
  store i64 %7605, i64* %PC
  %7606 = trunc i64 %7603 to i32
  %7607 = sub i32 %7606, 6
  %7608 = zext i32 %7607 to i64
  store i64 %7608, i64* %RSI, align 8, !tbaa !2428
  %7609 = icmp ult i32 %7606, 6
  %7610 = zext i1 %7609 to i8
  %7611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7610, i8* %7611, align 1, !tbaa !2432
  %7612 = and i32 %7607, 255
  %7613 = call i32 @llvm.ctpop.i32(i32 %7612) #16
  %7614 = trunc i32 %7613 to i8
  %7615 = and i8 %7614, 1
  %7616 = xor i8 %7615, 1
  %7617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7616, i8* %7617, align 1, !tbaa !2446
  %7618 = xor i64 6, %7603
  %7619 = trunc i64 %7618 to i32
  %7620 = xor i32 %7619, %7607
  %7621 = lshr i32 %7620, 4
  %7622 = trunc i32 %7621 to i8
  %7623 = and i8 %7622, 1
  %7624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7623, i8* %7624, align 1, !tbaa !2447
  %7625 = icmp eq i32 %7607, 0
  %7626 = zext i1 %7625 to i8
  %7627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7626, i8* %7627, align 1, !tbaa !2448
  %7628 = lshr i32 %7607, 31
  %7629 = trunc i32 %7628 to i8
  %7630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7629, i8* %7630, align 1, !tbaa !2449
  %7631 = lshr i32 %7606, 31
  %7632 = xor i32 %7628, %7631
  %7633 = add nuw nsw i32 %7632, %7631
  %7634 = icmp eq i32 %7633, 2
  %7635 = zext i1 %7634 to i8
  %7636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7635, i8* %7636, align 1, !tbaa !2450
  %7637 = load i64, i64* %RDX
  %7638 = load i32, i32* %ESI
  %7639 = zext i32 %7638 to i64
  %7640 = load i64, i64* %PC
  %7641 = add i64 %7640, 3
  store i64 %7641, i64* %PC
  %7642 = shl i64 %7637, 32
  %7643 = ashr exact i64 %7642, 32
  %7644 = shl i64 %7639, 32
  %7645 = ashr exact i64 %7644, 32
  %7646 = mul nsw i64 %7645, %7643
  %7647 = trunc i64 %7646 to i32
  %7648 = and i64 %7646, 4294967295
  store i64 %7648, i64* %RDX, align 8, !tbaa !2428
  %7649 = shl i64 %7646, 32
  %7650 = ashr exact i64 %7649, 32
  %7651 = icmp ne i64 %7650, %7646
  %7652 = zext i1 %7651 to i8
  %7653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7652, i8* %7653, align 1, !tbaa !2432
  %7654 = and i32 %7647, 255
  %7655 = call i32 @llvm.ctpop.i32(i32 %7654) #16
  %7656 = trunc i32 %7655 to i8
  %7657 = and i8 %7656, 1
  %7658 = xor i8 %7657, 1
  %7659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7658, i8* %7659, align 1, !tbaa !2446
  %7660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7660, align 1, !tbaa !2447
  %7661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7661, align 1, !tbaa !2448
  %7662 = lshr i32 %7647, 31
  %7663 = trunc i32 %7662 to i8
  %7664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7663, i8* %7664, align 1, !tbaa !2449
  %7665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7652, i8* %7665, align 1, !tbaa !2450
  %7666 = load i64, i64* %RDX
  %7667 = load i64, i64* %RBP
  %7668 = sub i64 %7667, 48
  %7669 = load i64, i64* %PC
  %7670 = add i64 %7669, 3
  store i64 %7670, i64* %PC
  %7671 = trunc i64 %7666 to i32
  %7672 = inttoptr i64 %7668 to i32*
  %7673 = load i32, i32* %7672
  %7674 = add i32 %7673, %7671
  %7675 = zext i32 %7674 to i64
  store i64 %7675, i64* %RDX, align 8, !tbaa !2428
  %7676 = icmp ult i32 %7674, %7671
  %7677 = icmp ult i32 %7674, %7673
  %7678 = or i1 %7676, %7677
  %7679 = zext i1 %7678 to i8
  %7680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7679, i8* %7680, align 1, !tbaa !2432
  %7681 = and i32 %7674, 255
  %7682 = call i32 @llvm.ctpop.i32(i32 %7681) #16
  %7683 = trunc i32 %7682 to i8
  %7684 = and i8 %7683, 1
  %7685 = xor i8 %7684, 1
  %7686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7685, i8* %7686, align 1, !tbaa !2446
  %7687 = xor i32 %7673, %7671
  %7688 = xor i32 %7687, %7674
  %7689 = lshr i32 %7688, 4
  %7690 = trunc i32 %7689 to i8
  %7691 = and i8 %7690, 1
  %7692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7691, i8* %7692, align 1, !tbaa !2447
  %7693 = icmp eq i32 %7674, 0
  %7694 = zext i1 %7693 to i8
  %7695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7694, i8* %7695, align 1, !tbaa !2448
  %7696 = lshr i32 %7674, 31
  %7697 = trunc i32 %7696 to i8
  %7698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7697, i8* %7698, align 1, !tbaa !2449
  %7699 = lshr i32 %7671, 31
  %7700 = lshr i32 %7673, 31
  %7701 = xor i32 %7696, %7699
  %7702 = xor i32 %7696, %7700
  %7703 = add nuw nsw i32 %7701, %7702
  %7704 = icmp eq i32 %7703, 2
  %7705 = zext i1 %7704 to i8
  %7706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7705, i8* %7706, align 1, !tbaa !2450
  %7707 = load i32, i32* %EDX
  %7708 = zext i32 %7707 to i64
  %7709 = load i64, i64* %PC
  %7710 = add i64 %7709, 3
  store i64 %7710, i64* %PC
  %7711 = shl i64 %7708, 32
  %7712 = ashr exact i64 %7711, 32
  store i64 %7712, i64* %RCX, align 8, !tbaa !2428
  %7713 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7714 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7715 = load i64, i64* %RAX
  %7716 = load i64, i64* %RCX
  %7717 = mul i64 %7716, 4
  %7718 = add i64 %7717, %7715
  %7719 = load i64, i64* %PC
  %7720 = add i64 %7719, 5
  store i64 %7720, i64* %PC
  %7721 = bitcast i8* %7714 to <2 x float>*
  %7722 = load <2 x float>, <2 x float>* %7721, align 1
  %7723 = getelementptr inbounds i8, i8* %7714, i64 8
  %7724 = bitcast i8* %7723 to <2 x i32>*
  %7725 = load <2 x i32>, <2 x i32>* %7724, align 1
  %7726 = inttoptr i64 %7718 to float*
  %7727 = load float, float* %7726
  %7728 = extractelement <2 x float> %7722, i32 0
  %7729 = fmul float %7728, %7727
  %7730 = bitcast i8* %7713 to float*
  store float %7729, float* %7730, align 1, !tbaa !2453
  %7731 = bitcast <2 x float> %7722 to <2 x i32>
  %7732 = extractelement <2 x i32> %7731, i32 1
  %7733 = getelementptr inbounds i8, i8* %7713, i64 4
  %7734 = bitcast i8* %7733 to i32*
  store i32 %7732, i32* %7734, align 1, !tbaa !2453
  %7735 = extractelement <2 x i32> %7725, i32 0
  %7736 = getelementptr inbounds i8, i8* %7713, i64 8
  %7737 = bitcast i8* %7736 to i32*
  store i32 %7735, i32* %7737, align 1, !tbaa !2453
  %7738 = extractelement <2 x i32> %7725, i32 1
  %7739 = getelementptr inbounds i8, i8* %7713, i64 12
  %7740 = bitcast i8* %7739 to i32*
  store i32 %7738, i32* %7740, align 1, !tbaa !2453
  %7741 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7742 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7743 = bitcast %union.vec128_t* %XMM1 to i8*
  %7744 = load i64, i64* %PC
  %7745 = add i64 %7744, 4
  store i64 %7745, i64* %PC
  %7746 = bitcast i8* %7742 to <2 x float>*
  %7747 = load <2 x float>, <2 x float>* %7746, align 1
  %7748 = getelementptr inbounds i8, i8* %7742, i64 8
  %7749 = bitcast i8* %7748 to <2 x i32>*
  %7750 = load <2 x i32>, <2 x i32>* %7749, align 1
  %7751 = bitcast i8* %7743 to <2 x float>*
  %7752 = load <2 x float>, <2 x float>* %7751, align 1
  %7753 = extractelement <2 x float> %7747, i32 0
  %7754 = extractelement <2 x float> %7752, i32 0
  %7755 = fadd float %7753, %7754
  %7756 = bitcast i8* %7741 to float*
  store float %7755, float* %7756, align 1, !tbaa !2453
  %7757 = bitcast <2 x float> %7747 to <2 x i32>
  %7758 = extractelement <2 x i32> %7757, i32 1
  %7759 = getelementptr inbounds i8, i8* %7741, i64 4
  %7760 = bitcast i8* %7759 to i32*
  store i32 %7758, i32* %7760, align 1, !tbaa !2453
  %7761 = extractelement <2 x i32> %7750, i32 0
  %7762 = getelementptr inbounds i8, i8* %7741, i64 8
  %7763 = bitcast i8* %7762 to i32*
  store i32 %7761, i32* %7763, align 1, !tbaa !2453
  %7764 = extractelement <2 x i32> %7750, i32 1
  %7765 = getelementptr inbounds i8, i8* %7741, i64 12
  %7766 = bitcast i8* %7765 to i32*
  store i32 %7764, i32* %7766, align 1, !tbaa !2453
  %7767 = load i64, i64* %RBP
  %7768 = sub i64 %7767, 32
  %7769 = load i64, i64* %PC
  %7770 = add i64 %7769, 4
  store i64 %7770, i64* %PC
  %7771 = inttoptr i64 %7768 to i64*
  %7772 = load i64, i64* %7771
  store i64 %7772, i64* %RAX, align 8, !tbaa !2428
  %7773 = load i64, i64* %RBP
  %7774 = sub i64 %7773, 44
  %7775 = load i64, i64* %PC
  %7776 = add i64 %7775, 3
  store i64 %7776, i64* %PC
  %7777 = inttoptr i64 %7774 to i32*
  %7778 = load i32, i32* %7777
  %7779 = zext i32 %7778 to i64
  store i64 %7779, i64* %RDX, align 8, !tbaa !2428
  %7780 = load i64, i64* %RDX
  %7781 = load i64, i64* %PC
  %7782 = add i64 %7781, 3
  store i64 %7782, i64* %PC
  %7783 = trunc i64 %7780 to i32
  %7784 = sub i32 %7783, 5
  %7785 = zext i32 %7784 to i64
  store i64 %7785, i64* %RDX, align 8, !tbaa !2428
  %7786 = icmp ult i32 %7783, 5
  %7787 = zext i1 %7786 to i8
  %7788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7787, i8* %7788, align 1, !tbaa !2432
  %7789 = and i32 %7784, 255
  %7790 = call i32 @llvm.ctpop.i32(i32 %7789) #16
  %7791 = trunc i32 %7790 to i8
  %7792 = and i8 %7791, 1
  %7793 = xor i8 %7792, 1
  %7794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7793, i8* %7794, align 1, !tbaa !2446
  %7795 = xor i64 5, %7780
  %7796 = trunc i64 %7795 to i32
  %7797 = xor i32 %7796, %7784
  %7798 = lshr i32 %7797, 4
  %7799 = trunc i32 %7798 to i8
  %7800 = and i8 %7799, 1
  %7801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7800, i8* %7801, align 1, !tbaa !2447
  %7802 = icmp eq i32 %7784, 0
  %7803 = zext i1 %7802 to i8
  %7804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7803, i8* %7804, align 1, !tbaa !2448
  %7805 = lshr i32 %7784, 31
  %7806 = trunc i32 %7805 to i8
  %7807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7806, i8* %7807, align 1, !tbaa !2449
  %7808 = lshr i32 %7783, 31
  %7809 = xor i32 %7805, %7808
  %7810 = add nuw nsw i32 %7809, %7808
  %7811 = icmp eq i32 %7810, 2
  %7812 = zext i1 %7811 to i8
  %7813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7812, i8* %7813, align 1, !tbaa !2450
  %7814 = load i32, i32* %EDX
  %7815 = zext i32 %7814 to i64
  %7816 = load i64, i64* %PC
  %7817 = add i64 %7816, 3
  store i64 %7817, i64* %PC
  %7818 = shl i64 %7815, 32
  %7819 = ashr exact i64 %7818, 32
  store i64 %7819, i64* %RCX, align 8, !tbaa !2428
  %7820 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7821 = load i64, i64* %RAX
  %7822 = load i64, i64* %RCX
  %7823 = mul i64 %7822, 4
  %7824 = add i64 %7823, %7821
  %7825 = load i64, i64* %PC
  %7826 = add i64 %7825, 5
  store i64 %7826, i64* %PC
  %7827 = inttoptr i64 %7824 to float*
  %7828 = load float, float* %7827
  %7829 = bitcast i8* %7820 to float*
  store float %7828, float* %7829, align 1, !tbaa !2453
  %7830 = getelementptr inbounds i8, i8* %7820, i64 4
  %7831 = bitcast i8* %7830 to float*
  store float 0.000000e+00, float* %7831, align 1, !tbaa !2453
  %7832 = getelementptr inbounds i8, i8* %7820, i64 8
  %7833 = bitcast i8* %7832 to float*
  store float 0.000000e+00, float* %7833, align 1, !tbaa !2453
  %7834 = getelementptr inbounds i8, i8* %7820, i64 12
  %7835 = bitcast i8* %7834 to float*
  store float 0.000000e+00, float* %7835, align 1, !tbaa !2453
  %7836 = load i64, i64* %RBP
  %7837 = sub i64 %7836, 40
  %7838 = load i64, i64* %PC
  %7839 = add i64 %7838, 4
  store i64 %7839, i64* %PC
  %7840 = inttoptr i64 %7837 to i64*
  %7841 = load i64, i64* %7840
  store i64 %7841, i64* %RAX, align 8, !tbaa !2428
  %7842 = load i64, i64* %RBP
  %7843 = sub i64 %7842, 24
  %7844 = load i64, i64* %PC
  %7845 = add i64 %7844, 3
  store i64 %7845, i64* %PC
  %7846 = inttoptr i64 %7843 to i32*
  %7847 = load i32, i32* %7846
  %7848 = zext i32 %7847 to i64
  store i64 %7848, i64* %RDX, align 8, !tbaa !2428
  %7849 = load i64, i64* %RBP
  %7850 = sub i64 %7849, 44
  %7851 = load i64, i64* %PC
  %7852 = add i64 %7851, 3
  store i64 %7852, i64* %PC
  %7853 = inttoptr i64 %7850 to i32*
  %7854 = load i32, i32* %7853
  %7855 = zext i32 %7854 to i64
  store i64 %7855, i64* %RSI, align 8, !tbaa !2428
  %7856 = load i64, i64* %RSI
  %7857 = load i64, i64* %PC
  %7858 = add i64 %7857, 3
  store i64 %7858, i64* %PC
  %7859 = trunc i64 %7856 to i32
  %7860 = sub i32 %7859, 5
  %7861 = zext i32 %7860 to i64
  store i64 %7861, i64* %RSI, align 8, !tbaa !2428
  %7862 = icmp ult i32 %7859, 5
  %7863 = zext i1 %7862 to i8
  %7864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7863, i8* %7864, align 1, !tbaa !2432
  %7865 = and i32 %7860, 255
  %7866 = call i32 @llvm.ctpop.i32(i32 %7865) #16
  %7867 = trunc i32 %7866 to i8
  %7868 = and i8 %7867, 1
  %7869 = xor i8 %7868, 1
  %7870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7869, i8* %7870, align 1, !tbaa !2446
  %7871 = xor i64 5, %7856
  %7872 = trunc i64 %7871 to i32
  %7873 = xor i32 %7872, %7860
  %7874 = lshr i32 %7873, 4
  %7875 = trunc i32 %7874 to i8
  %7876 = and i8 %7875, 1
  %7877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7876, i8* %7877, align 1, !tbaa !2447
  %7878 = icmp eq i32 %7860, 0
  %7879 = zext i1 %7878 to i8
  %7880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7879, i8* %7880, align 1, !tbaa !2448
  %7881 = lshr i32 %7860, 31
  %7882 = trunc i32 %7881 to i8
  %7883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7882, i8* %7883, align 1, !tbaa !2449
  %7884 = lshr i32 %7859, 31
  %7885 = xor i32 %7881, %7884
  %7886 = add nuw nsw i32 %7885, %7884
  %7887 = icmp eq i32 %7886, 2
  %7888 = zext i1 %7887 to i8
  %7889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7888, i8* %7889, align 1, !tbaa !2450
  %7890 = load i64, i64* %RDX
  %7891 = load i32, i32* %ESI
  %7892 = zext i32 %7891 to i64
  %7893 = load i64, i64* %PC
  %7894 = add i64 %7893, 3
  store i64 %7894, i64* %PC
  %7895 = shl i64 %7890, 32
  %7896 = ashr exact i64 %7895, 32
  %7897 = shl i64 %7892, 32
  %7898 = ashr exact i64 %7897, 32
  %7899 = mul nsw i64 %7898, %7896
  %7900 = trunc i64 %7899 to i32
  %7901 = and i64 %7899, 4294967295
  store i64 %7901, i64* %RDX, align 8, !tbaa !2428
  %7902 = shl i64 %7899, 32
  %7903 = ashr exact i64 %7902, 32
  %7904 = icmp ne i64 %7903, %7899
  %7905 = zext i1 %7904 to i8
  %7906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7905, i8* %7906, align 1, !tbaa !2432
  %7907 = and i32 %7900, 255
  %7908 = call i32 @llvm.ctpop.i32(i32 %7907) #16
  %7909 = trunc i32 %7908 to i8
  %7910 = and i8 %7909, 1
  %7911 = xor i8 %7910, 1
  %7912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7911, i8* %7912, align 1, !tbaa !2446
  %7913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7913, align 1, !tbaa !2447
  %7914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7914, align 1, !tbaa !2448
  %7915 = lshr i32 %7900, 31
  %7916 = trunc i32 %7915 to i8
  %7917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7916, i8* %7917, align 1, !tbaa !2449
  %7918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7905, i8* %7918, align 1, !tbaa !2450
  %7919 = load i64, i64* %RDX
  %7920 = load i64, i64* %RBP
  %7921 = sub i64 %7920, 48
  %7922 = load i64, i64* %PC
  %7923 = add i64 %7922, 3
  store i64 %7923, i64* %PC
  %7924 = trunc i64 %7919 to i32
  %7925 = inttoptr i64 %7921 to i32*
  %7926 = load i32, i32* %7925
  %7927 = add i32 %7926, %7924
  %7928 = zext i32 %7927 to i64
  store i64 %7928, i64* %RDX, align 8, !tbaa !2428
  %7929 = icmp ult i32 %7927, %7924
  %7930 = icmp ult i32 %7927, %7926
  %7931 = or i1 %7929, %7930
  %7932 = zext i1 %7931 to i8
  %7933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7932, i8* %7933, align 1, !tbaa !2432
  %7934 = and i32 %7927, 255
  %7935 = call i32 @llvm.ctpop.i32(i32 %7934) #16
  %7936 = trunc i32 %7935 to i8
  %7937 = and i8 %7936, 1
  %7938 = xor i8 %7937, 1
  %7939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7938, i8* %7939, align 1, !tbaa !2446
  %7940 = xor i32 %7926, %7924
  %7941 = xor i32 %7940, %7927
  %7942 = lshr i32 %7941, 4
  %7943 = trunc i32 %7942 to i8
  %7944 = and i8 %7943, 1
  %7945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7944, i8* %7945, align 1, !tbaa !2447
  %7946 = icmp eq i32 %7927, 0
  %7947 = zext i1 %7946 to i8
  %7948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7947, i8* %7948, align 1, !tbaa !2448
  %7949 = lshr i32 %7927, 31
  %7950 = trunc i32 %7949 to i8
  %7951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7950, i8* %7951, align 1, !tbaa !2449
  %7952 = lshr i32 %7924, 31
  %7953 = lshr i32 %7926, 31
  %7954 = xor i32 %7949, %7952
  %7955 = xor i32 %7949, %7953
  %7956 = add nuw nsw i32 %7954, %7955
  %7957 = icmp eq i32 %7956, 2
  %7958 = zext i1 %7957 to i8
  %7959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7958, i8* %7959, align 1, !tbaa !2450
  %7960 = load i32, i32* %EDX
  %7961 = zext i32 %7960 to i64
  %7962 = load i64, i64* %PC
  %7963 = add i64 %7962, 3
  store i64 %7963, i64* %PC
  %7964 = shl i64 %7961, 32
  %7965 = ashr exact i64 %7964, 32
  store i64 %7965, i64* %RCX, align 8, !tbaa !2428
  %7966 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7967 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7968 = load i64, i64* %RAX
  %7969 = load i64, i64* %RCX
  %7970 = mul i64 %7969, 4
  %7971 = add i64 %7970, %7968
  %7972 = load i64, i64* %PC
  %7973 = add i64 %7972, 5
  store i64 %7973, i64* %PC
  %7974 = bitcast i8* %7967 to <2 x float>*
  %7975 = load <2 x float>, <2 x float>* %7974, align 1
  %7976 = getelementptr inbounds i8, i8* %7967, i64 8
  %7977 = bitcast i8* %7976 to <2 x i32>*
  %7978 = load <2 x i32>, <2 x i32>* %7977, align 1
  %7979 = inttoptr i64 %7971 to float*
  %7980 = load float, float* %7979
  %7981 = extractelement <2 x float> %7975, i32 0
  %7982 = fmul float %7981, %7980
  %7983 = bitcast i8* %7966 to float*
  store float %7982, float* %7983, align 1, !tbaa !2453
  %7984 = bitcast <2 x float> %7975 to <2 x i32>
  %7985 = extractelement <2 x i32> %7984, i32 1
  %7986 = getelementptr inbounds i8, i8* %7966, i64 4
  %7987 = bitcast i8* %7986 to i32*
  store i32 %7985, i32* %7987, align 1, !tbaa !2453
  %7988 = extractelement <2 x i32> %7978, i32 0
  %7989 = getelementptr inbounds i8, i8* %7966, i64 8
  %7990 = bitcast i8* %7989 to i32*
  store i32 %7988, i32* %7990, align 1, !tbaa !2453
  %7991 = extractelement <2 x i32> %7978, i32 1
  %7992 = getelementptr inbounds i8, i8* %7966, i64 12
  %7993 = bitcast i8* %7992 to i32*
  store i32 %7991, i32* %7993, align 1, !tbaa !2453
  %7994 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7995 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7996 = bitcast %union.vec128_t* %XMM1 to i8*
  %7997 = load i64, i64* %PC
  %7998 = add i64 %7997, 4
  store i64 %7998, i64* %PC
  %7999 = bitcast i8* %7995 to <2 x float>*
  %8000 = load <2 x float>, <2 x float>* %7999, align 1
  %8001 = getelementptr inbounds i8, i8* %7995, i64 8
  %8002 = bitcast i8* %8001 to <2 x i32>*
  %8003 = load <2 x i32>, <2 x i32>* %8002, align 1
  %8004 = bitcast i8* %7996 to <2 x float>*
  %8005 = load <2 x float>, <2 x float>* %8004, align 1
  %8006 = extractelement <2 x float> %8000, i32 0
  %8007 = extractelement <2 x float> %8005, i32 0
  %8008 = fadd float %8006, %8007
  %8009 = bitcast i8* %7994 to float*
  store float %8008, float* %8009, align 1, !tbaa !2453
  %8010 = bitcast <2 x float> %8000 to <2 x i32>
  %8011 = extractelement <2 x i32> %8010, i32 1
  %8012 = getelementptr inbounds i8, i8* %7994, i64 4
  %8013 = bitcast i8* %8012 to i32*
  store i32 %8011, i32* %8013, align 1, !tbaa !2453
  %8014 = extractelement <2 x i32> %8003, i32 0
  %8015 = getelementptr inbounds i8, i8* %7994, i64 8
  %8016 = bitcast i8* %8015 to i32*
  store i32 %8014, i32* %8016, align 1, !tbaa !2453
  %8017 = extractelement <2 x i32> %8003, i32 1
  %8018 = getelementptr inbounds i8, i8* %7994, i64 12
  %8019 = bitcast i8* %8018 to i32*
  store i32 %8017, i32* %8019, align 1, !tbaa !2453
  %8020 = load i64, i64* %RBP
  %8021 = sub i64 %8020, 32
  %8022 = load i64, i64* %PC
  %8023 = add i64 %8022, 4
  store i64 %8023, i64* %PC
  %8024 = inttoptr i64 %8021 to i64*
  %8025 = load i64, i64* %8024
  store i64 %8025, i64* %RAX, align 8, !tbaa !2428
  %8026 = load i64, i64* %RBP
  %8027 = sub i64 %8026, 44
  %8028 = load i64, i64* %PC
  %8029 = add i64 %8028, 3
  store i64 %8029, i64* %PC
  %8030 = inttoptr i64 %8027 to i32*
  %8031 = load i32, i32* %8030
  %8032 = zext i32 %8031 to i64
  store i64 %8032, i64* %RDX, align 8, !tbaa !2428
  %8033 = load i64, i64* %RDX
  %8034 = load i64, i64* %PC
  %8035 = add i64 %8034, 3
  store i64 %8035, i64* %PC
  %8036 = trunc i64 %8033 to i32
  %8037 = sub i32 %8036, 4
  %8038 = zext i32 %8037 to i64
  store i64 %8038, i64* %RDX, align 8, !tbaa !2428
  %8039 = icmp ult i32 %8036, 4
  %8040 = zext i1 %8039 to i8
  %8041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8040, i8* %8041, align 1, !tbaa !2432
  %8042 = and i32 %8037, 255
  %8043 = call i32 @llvm.ctpop.i32(i32 %8042) #16
  %8044 = trunc i32 %8043 to i8
  %8045 = and i8 %8044, 1
  %8046 = xor i8 %8045, 1
  %8047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8046, i8* %8047, align 1, !tbaa !2446
  %8048 = xor i64 4, %8033
  %8049 = trunc i64 %8048 to i32
  %8050 = xor i32 %8049, %8037
  %8051 = lshr i32 %8050, 4
  %8052 = trunc i32 %8051 to i8
  %8053 = and i8 %8052, 1
  %8054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8053, i8* %8054, align 1, !tbaa !2447
  %8055 = icmp eq i32 %8037, 0
  %8056 = zext i1 %8055 to i8
  %8057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8056, i8* %8057, align 1, !tbaa !2448
  %8058 = lshr i32 %8037, 31
  %8059 = trunc i32 %8058 to i8
  %8060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8059, i8* %8060, align 1, !tbaa !2449
  %8061 = lshr i32 %8036, 31
  %8062 = xor i32 %8058, %8061
  %8063 = add nuw nsw i32 %8062, %8061
  %8064 = icmp eq i32 %8063, 2
  %8065 = zext i1 %8064 to i8
  %8066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8065, i8* %8066, align 1, !tbaa !2450
  %8067 = load i32, i32* %EDX
  %8068 = zext i32 %8067 to i64
  %8069 = load i64, i64* %PC
  %8070 = add i64 %8069, 3
  store i64 %8070, i64* %PC
  %8071 = shl i64 %8068, 32
  %8072 = ashr exact i64 %8071, 32
  store i64 %8072, i64* %RCX, align 8, !tbaa !2428
  %8073 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8074 = load i64, i64* %RAX
  %8075 = load i64, i64* %RCX
  %8076 = mul i64 %8075, 4
  %8077 = add i64 %8076, %8074
  %8078 = load i64, i64* %PC
  %8079 = add i64 %8078, 5
  store i64 %8079, i64* %PC
  %8080 = inttoptr i64 %8077 to float*
  %8081 = load float, float* %8080
  %8082 = bitcast i8* %8073 to float*
  store float %8081, float* %8082, align 1, !tbaa !2453
  %8083 = getelementptr inbounds i8, i8* %8073, i64 4
  %8084 = bitcast i8* %8083 to float*
  store float 0.000000e+00, float* %8084, align 1, !tbaa !2453
  %8085 = getelementptr inbounds i8, i8* %8073, i64 8
  %8086 = bitcast i8* %8085 to float*
  store float 0.000000e+00, float* %8086, align 1, !tbaa !2453
  %8087 = getelementptr inbounds i8, i8* %8073, i64 12
  %8088 = bitcast i8* %8087 to float*
  store float 0.000000e+00, float* %8088, align 1, !tbaa !2453
  %8089 = load i64, i64* %RBP
  %8090 = sub i64 %8089, 40
  %8091 = load i64, i64* %PC
  %8092 = add i64 %8091, 4
  store i64 %8092, i64* %PC
  %8093 = inttoptr i64 %8090 to i64*
  %8094 = load i64, i64* %8093
  store i64 %8094, i64* %RAX, align 8, !tbaa !2428
  %8095 = load i64, i64* %RBP
  %8096 = sub i64 %8095, 24
  %8097 = load i64, i64* %PC
  %8098 = add i64 %8097, 3
  store i64 %8098, i64* %PC
  %8099 = inttoptr i64 %8096 to i32*
  %8100 = load i32, i32* %8099
  %8101 = zext i32 %8100 to i64
  store i64 %8101, i64* %RDX, align 8, !tbaa !2428
  %8102 = load i64, i64* %RBP
  %8103 = sub i64 %8102, 44
  %8104 = load i64, i64* %PC
  %8105 = add i64 %8104, 3
  store i64 %8105, i64* %PC
  %8106 = inttoptr i64 %8103 to i32*
  %8107 = load i32, i32* %8106
  %8108 = zext i32 %8107 to i64
  store i64 %8108, i64* %RSI, align 8, !tbaa !2428
  %8109 = load i64, i64* %RSI
  %8110 = load i64, i64* %PC
  %8111 = add i64 %8110, 3
  store i64 %8111, i64* %PC
  %8112 = trunc i64 %8109 to i32
  %8113 = sub i32 %8112, 4
  %8114 = zext i32 %8113 to i64
  store i64 %8114, i64* %RSI, align 8, !tbaa !2428
  %8115 = icmp ult i32 %8112, 4
  %8116 = zext i1 %8115 to i8
  %8117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8116, i8* %8117, align 1, !tbaa !2432
  %8118 = and i32 %8113, 255
  %8119 = call i32 @llvm.ctpop.i32(i32 %8118) #16
  %8120 = trunc i32 %8119 to i8
  %8121 = and i8 %8120, 1
  %8122 = xor i8 %8121, 1
  %8123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8122, i8* %8123, align 1, !tbaa !2446
  %8124 = xor i64 4, %8109
  %8125 = trunc i64 %8124 to i32
  %8126 = xor i32 %8125, %8113
  %8127 = lshr i32 %8126, 4
  %8128 = trunc i32 %8127 to i8
  %8129 = and i8 %8128, 1
  %8130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8129, i8* %8130, align 1, !tbaa !2447
  %8131 = icmp eq i32 %8113, 0
  %8132 = zext i1 %8131 to i8
  %8133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8132, i8* %8133, align 1, !tbaa !2448
  %8134 = lshr i32 %8113, 31
  %8135 = trunc i32 %8134 to i8
  %8136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8135, i8* %8136, align 1, !tbaa !2449
  %8137 = lshr i32 %8112, 31
  %8138 = xor i32 %8134, %8137
  %8139 = add nuw nsw i32 %8138, %8137
  %8140 = icmp eq i32 %8139, 2
  %8141 = zext i1 %8140 to i8
  %8142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8141, i8* %8142, align 1, !tbaa !2450
  %8143 = load i64, i64* %RDX
  %8144 = load i32, i32* %ESI
  %8145 = zext i32 %8144 to i64
  %8146 = load i64, i64* %PC
  %8147 = add i64 %8146, 3
  store i64 %8147, i64* %PC
  %8148 = shl i64 %8143, 32
  %8149 = ashr exact i64 %8148, 32
  %8150 = shl i64 %8145, 32
  %8151 = ashr exact i64 %8150, 32
  %8152 = mul nsw i64 %8151, %8149
  %8153 = trunc i64 %8152 to i32
  %8154 = and i64 %8152, 4294967295
  store i64 %8154, i64* %RDX, align 8, !tbaa !2428
  %8155 = shl i64 %8152, 32
  %8156 = ashr exact i64 %8155, 32
  %8157 = icmp ne i64 %8156, %8152
  %8158 = zext i1 %8157 to i8
  %8159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8158, i8* %8159, align 1, !tbaa !2432
  %8160 = and i32 %8153, 255
  %8161 = call i32 @llvm.ctpop.i32(i32 %8160) #16
  %8162 = trunc i32 %8161 to i8
  %8163 = and i8 %8162, 1
  %8164 = xor i8 %8163, 1
  %8165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8164, i8* %8165, align 1, !tbaa !2446
  %8166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8166, align 1, !tbaa !2447
  %8167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8167, align 1, !tbaa !2448
  %8168 = lshr i32 %8153, 31
  %8169 = trunc i32 %8168 to i8
  %8170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8169, i8* %8170, align 1, !tbaa !2449
  %8171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8158, i8* %8171, align 1, !tbaa !2450
  %8172 = load i64, i64* %RDX
  %8173 = load i64, i64* %RBP
  %8174 = sub i64 %8173, 48
  %8175 = load i64, i64* %PC
  %8176 = add i64 %8175, 3
  store i64 %8176, i64* %PC
  %8177 = trunc i64 %8172 to i32
  %8178 = inttoptr i64 %8174 to i32*
  %8179 = load i32, i32* %8178
  %8180 = add i32 %8179, %8177
  %8181 = zext i32 %8180 to i64
  store i64 %8181, i64* %RDX, align 8, !tbaa !2428
  %8182 = icmp ult i32 %8180, %8177
  %8183 = icmp ult i32 %8180, %8179
  %8184 = or i1 %8182, %8183
  %8185 = zext i1 %8184 to i8
  %8186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8185, i8* %8186, align 1, !tbaa !2432
  %8187 = and i32 %8180, 255
  %8188 = call i32 @llvm.ctpop.i32(i32 %8187) #16
  %8189 = trunc i32 %8188 to i8
  %8190 = and i8 %8189, 1
  %8191 = xor i8 %8190, 1
  %8192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8191, i8* %8192, align 1, !tbaa !2446
  %8193 = xor i32 %8179, %8177
  %8194 = xor i32 %8193, %8180
  %8195 = lshr i32 %8194, 4
  %8196 = trunc i32 %8195 to i8
  %8197 = and i8 %8196, 1
  %8198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8197, i8* %8198, align 1, !tbaa !2447
  %8199 = icmp eq i32 %8180, 0
  %8200 = zext i1 %8199 to i8
  %8201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8200, i8* %8201, align 1, !tbaa !2448
  %8202 = lshr i32 %8180, 31
  %8203 = trunc i32 %8202 to i8
  %8204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8203, i8* %8204, align 1, !tbaa !2449
  %8205 = lshr i32 %8177, 31
  %8206 = lshr i32 %8179, 31
  %8207 = xor i32 %8202, %8205
  %8208 = xor i32 %8202, %8206
  %8209 = add nuw nsw i32 %8207, %8208
  %8210 = icmp eq i32 %8209, 2
  %8211 = zext i1 %8210 to i8
  %8212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8211, i8* %8212, align 1, !tbaa !2450
  %8213 = load i32, i32* %EDX
  %8214 = zext i32 %8213 to i64
  %8215 = load i64, i64* %PC
  %8216 = add i64 %8215, 3
  store i64 %8216, i64* %PC
  %8217 = shl i64 %8214, 32
  %8218 = ashr exact i64 %8217, 32
  store i64 %8218, i64* %RCX, align 8, !tbaa !2428
  %8219 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8220 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8221 = load i64, i64* %RAX
  %8222 = load i64, i64* %RCX
  %8223 = mul i64 %8222, 4
  %8224 = add i64 %8223, %8221
  %8225 = load i64, i64* %PC
  %8226 = add i64 %8225, 5
  store i64 %8226, i64* %PC
  %8227 = bitcast i8* %8220 to <2 x float>*
  %8228 = load <2 x float>, <2 x float>* %8227, align 1
  %8229 = getelementptr inbounds i8, i8* %8220, i64 8
  %8230 = bitcast i8* %8229 to <2 x i32>*
  %8231 = load <2 x i32>, <2 x i32>* %8230, align 1
  %8232 = inttoptr i64 %8224 to float*
  %8233 = load float, float* %8232
  %8234 = extractelement <2 x float> %8228, i32 0
  %8235 = fmul float %8234, %8233
  %8236 = bitcast i8* %8219 to float*
  store float %8235, float* %8236, align 1, !tbaa !2453
  %8237 = bitcast <2 x float> %8228 to <2 x i32>
  %8238 = extractelement <2 x i32> %8237, i32 1
  %8239 = getelementptr inbounds i8, i8* %8219, i64 4
  %8240 = bitcast i8* %8239 to i32*
  store i32 %8238, i32* %8240, align 1, !tbaa !2453
  %8241 = extractelement <2 x i32> %8231, i32 0
  %8242 = getelementptr inbounds i8, i8* %8219, i64 8
  %8243 = bitcast i8* %8242 to i32*
  store i32 %8241, i32* %8243, align 1, !tbaa !2453
  %8244 = extractelement <2 x i32> %8231, i32 1
  %8245 = getelementptr inbounds i8, i8* %8219, i64 12
  %8246 = bitcast i8* %8245 to i32*
  store i32 %8244, i32* %8246, align 1, !tbaa !2453
  %8247 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8248 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8249 = bitcast %union.vec128_t* %XMM1 to i8*
  %8250 = load i64, i64* %PC
  %8251 = add i64 %8250, 4
  store i64 %8251, i64* %PC
  %8252 = bitcast i8* %8248 to <2 x float>*
  %8253 = load <2 x float>, <2 x float>* %8252, align 1
  %8254 = getelementptr inbounds i8, i8* %8248, i64 8
  %8255 = bitcast i8* %8254 to <2 x i32>*
  %8256 = load <2 x i32>, <2 x i32>* %8255, align 1
  %8257 = bitcast i8* %8249 to <2 x float>*
  %8258 = load <2 x float>, <2 x float>* %8257, align 1
  %8259 = extractelement <2 x float> %8253, i32 0
  %8260 = extractelement <2 x float> %8258, i32 0
  %8261 = fadd float %8259, %8260
  %8262 = bitcast i8* %8247 to float*
  store float %8261, float* %8262, align 1, !tbaa !2453
  %8263 = bitcast <2 x float> %8253 to <2 x i32>
  %8264 = extractelement <2 x i32> %8263, i32 1
  %8265 = getelementptr inbounds i8, i8* %8247, i64 4
  %8266 = bitcast i8* %8265 to i32*
  store i32 %8264, i32* %8266, align 1, !tbaa !2453
  %8267 = extractelement <2 x i32> %8256, i32 0
  %8268 = getelementptr inbounds i8, i8* %8247, i64 8
  %8269 = bitcast i8* %8268 to i32*
  store i32 %8267, i32* %8269, align 1, !tbaa !2453
  %8270 = extractelement <2 x i32> %8256, i32 1
  %8271 = getelementptr inbounds i8, i8* %8247, i64 12
  %8272 = bitcast i8* %8271 to i32*
  store i32 %8270, i32* %8272, align 1, !tbaa !2453
  %8273 = load i64, i64* %RBP
  %8274 = sub i64 %8273, 32
  %8275 = load i64, i64* %PC
  %8276 = add i64 %8275, 4
  store i64 %8276, i64* %PC
  %8277 = inttoptr i64 %8274 to i64*
  %8278 = load i64, i64* %8277
  store i64 %8278, i64* %RAX, align 8, !tbaa !2428
  %8279 = load i64, i64* %RBP
  %8280 = sub i64 %8279, 44
  %8281 = load i64, i64* %PC
  %8282 = add i64 %8281, 3
  store i64 %8282, i64* %PC
  %8283 = inttoptr i64 %8280 to i32*
  %8284 = load i32, i32* %8283
  %8285 = zext i32 %8284 to i64
  store i64 %8285, i64* %RDX, align 8, !tbaa !2428
  %8286 = load i64, i64* %RDX
  %8287 = load i64, i64* %PC
  %8288 = add i64 %8287, 3
  store i64 %8288, i64* %PC
  %8289 = trunc i64 %8286 to i32
  %8290 = sub i32 %8289, 3
  %8291 = zext i32 %8290 to i64
  store i64 %8291, i64* %RDX, align 8, !tbaa !2428
  %8292 = icmp ult i32 %8289, 3
  %8293 = zext i1 %8292 to i8
  %8294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8293, i8* %8294, align 1, !tbaa !2432
  %8295 = and i32 %8290, 255
  %8296 = call i32 @llvm.ctpop.i32(i32 %8295) #16
  %8297 = trunc i32 %8296 to i8
  %8298 = and i8 %8297, 1
  %8299 = xor i8 %8298, 1
  %8300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8299, i8* %8300, align 1, !tbaa !2446
  %8301 = xor i64 3, %8286
  %8302 = trunc i64 %8301 to i32
  %8303 = xor i32 %8302, %8290
  %8304 = lshr i32 %8303, 4
  %8305 = trunc i32 %8304 to i8
  %8306 = and i8 %8305, 1
  %8307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8306, i8* %8307, align 1, !tbaa !2447
  %8308 = icmp eq i32 %8290, 0
  %8309 = zext i1 %8308 to i8
  %8310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8309, i8* %8310, align 1, !tbaa !2448
  %8311 = lshr i32 %8290, 31
  %8312 = trunc i32 %8311 to i8
  %8313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8312, i8* %8313, align 1, !tbaa !2449
  %8314 = lshr i32 %8289, 31
  %8315 = xor i32 %8311, %8314
  %8316 = add nuw nsw i32 %8315, %8314
  %8317 = icmp eq i32 %8316, 2
  %8318 = zext i1 %8317 to i8
  %8319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8318, i8* %8319, align 1, !tbaa !2450
  %8320 = load i32, i32* %EDX
  %8321 = zext i32 %8320 to i64
  %8322 = load i64, i64* %PC
  %8323 = add i64 %8322, 3
  store i64 %8323, i64* %PC
  %8324 = shl i64 %8321, 32
  %8325 = ashr exact i64 %8324, 32
  store i64 %8325, i64* %RCX, align 8, !tbaa !2428
  %8326 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8327 = load i64, i64* %RAX
  %8328 = load i64, i64* %RCX
  %8329 = mul i64 %8328, 4
  %8330 = add i64 %8329, %8327
  %8331 = load i64, i64* %PC
  %8332 = add i64 %8331, 5
  store i64 %8332, i64* %PC
  %8333 = inttoptr i64 %8330 to float*
  %8334 = load float, float* %8333
  %8335 = bitcast i8* %8326 to float*
  store float %8334, float* %8335, align 1, !tbaa !2453
  %8336 = getelementptr inbounds i8, i8* %8326, i64 4
  %8337 = bitcast i8* %8336 to float*
  store float 0.000000e+00, float* %8337, align 1, !tbaa !2453
  %8338 = getelementptr inbounds i8, i8* %8326, i64 8
  %8339 = bitcast i8* %8338 to float*
  store float 0.000000e+00, float* %8339, align 1, !tbaa !2453
  %8340 = getelementptr inbounds i8, i8* %8326, i64 12
  %8341 = bitcast i8* %8340 to float*
  store float 0.000000e+00, float* %8341, align 1, !tbaa !2453
  %8342 = load i64, i64* %RBP
  %8343 = sub i64 %8342, 40
  %8344 = load i64, i64* %PC
  %8345 = add i64 %8344, 4
  store i64 %8345, i64* %PC
  %8346 = inttoptr i64 %8343 to i64*
  %8347 = load i64, i64* %8346
  store i64 %8347, i64* %RAX, align 8, !tbaa !2428
  %8348 = load i64, i64* %RBP
  %8349 = sub i64 %8348, 24
  %8350 = load i64, i64* %PC
  %8351 = add i64 %8350, 3
  store i64 %8351, i64* %PC
  %8352 = inttoptr i64 %8349 to i32*
  %8353 = load i32, i32* %8352
  %8354 = zext i32 %8353 to i64
  store i64 %8354, i64* %RDX, align 8, !tbaa !2428
  %8355 = load i64, i64* %RBP
  %8356 = sub i64 %8355, 44
  %8357 = load i64, i64* %PC
  %8358 = add i64 %8357, 3
  store i64 %8358, i64* %PC
  %8359 = inttoptr i64 %8356 to i32*
  %8360 = load i32, i32* %8359
  %8361 = zext i32 %8360 to i64
  store i64 %8361, i64* %RSI, align 8, !tbaa !2428
  %8362 = load i64, i64* %RSI
  %8363 = load i64, i64* %PC
  %8364 = add i64 %8363, 3
  store i64 %8364, i64* %PC
  %8365 = trunc i64 %8362 to i32
  %8366 = sub i32 %8365, 3
  %8367 = zext i32 %8366 to i64
  store i64 %8367, i64* %RSI, align 8, !tbaa !2428
  %8368 = icmp ult i32 %8365, 3
  %8369 = zext i1 %8368 to i8
  %8370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8369, i8* %8370, align 1, !tbaa !2432
  %8371 = and i32 %8366, 255
  %8372 = call i32 @llvm.ctpop.i32(i32 %8371) #16
  %8373 = trunc i32 %8372 to i8
  %8374 = and i8 %8373, 1
  %8375 = xor i8 %8374, 1
  %8376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8375, i8* %8376, align 1, !tbaa !2446
  %8377 = xor i64 3, %8362
  %8378 = trunc i64 %8377 to i32
  %8379 = xor i32 %8378, %8366
  %8380 = lshr i32 %8379, 4
  %8381 = trunc i32 %8380 to i8
  %8382 = and i8 %8381, 1
  %8383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8382, i8* %8383, align 1, !tbaa !2447
  %8384 = icmp eq i32 %8366, 0
  %8385 = zext i1 %8384 to i8
  %8386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8385, i8* %8386, align 1, !tbaa !2448
  %8387 = lshr i32 %8366, 31
  %8388 = trunc i32 %8387 to i8
  %8389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8388, i8* %8389, align 1, !tbaa !2449
  %8390 = lshr i32 %8365, 31
  %8391 = xor i32 %8387, %8390
  %8392 = add nuw nsw i32 %8391, %8390
  %8393 = icmp eq i32 %8392, 2
  %8394 = zext i1 %8393 to i8
  %8395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8394, i8* %8395, align 1, !tbaa !2450
  %8396 = load i64, i64* %RDX
  %8397 = load i32, i32* %ESI
  %8398 = zext i32 %8397 to i64
  %8399 = load i64, i64* %PC
  %8400 = add i64 %8399, 3
  store i64 %8400, i64* %PC
  %8401 = shl i64 %8396, 32
  %8402 = ashr exact i64 %8401, 32
  %8403 = shl i64 %8398, 32
  %8404 = ashr exact i64 %8403, 32
  %8405 = mul nsw i64 %8404, %8402
  %8406 = trunc i64 %8405 to i32
  %8407 = and i64 %8405, 4294967295
  store i64 %8407, i64* %RDX, align 8, !tbaa !2428
  %8408 = shl i64 %8405, 32
  %8409 = ashr exact i64 %8408, 32
  %8410 = icmp ne i64 %8409, %8405
  %8411 = zext i1 %8410 to i8
  %8412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8411, i8* %8412, align 1, !tbaa !2432
  %8413 = and i32 %8406, 255
  %8414 = call i32 @llvm.ctpop.i32(i32 %8413) #16
  %8415 = trunc i32 %8414 to i8
  %8416 = and i8 %8415, 1
  %8417 = xor i8 %8416, 1
  %8418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8417, i8* %8418, align 1, !tbaa !2446
  %8419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8419, align 1, !tbaa !2447
  %8420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8420, align 1, !tbaa !2448
  %8421 = lshr i32 %8406, 31
  %8422 = trunc i32 %8421 to i8
  %8423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8422, i8* %8423, align 1, !tbaa !2449
  %8424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8411, i8* %8424, align 1, !tbaa !2450
  %8425 = load i64, i64* %RDX
  %8426 = load i64, i64* %RBP
  %8427 = sub i64 %8426, 48
  %8428 = load i64, i64* %PC
  %8429 = add i64 %8428, 3
  store i64 %8429, i64* %PC
  %8430 = trunc i64 %8425 to i32
  %8431 = inttoptr i64 %8427 to i32*
  %8432 = load i32, i32* %8431
  %8433 = add i32 %8432, %8430
  %8434 = zext i32 %8433 to i64
  store i64 %8434, i64* %RDX, align 8, !tbaa !2428
  %8435 = icmp ult i32 %8433, %8430
  %8436 = icmp ult i32 %8433, %8432
  %8437 = or i1 %8435, %8436
  %8438 = zext i1 %8437 to i8
  %8439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8438, i8* %8439, align 1, !tbaa !2432
  %8440 = and i32 %8433, 255
  %8441 = call i32 @llvm.ctpop.i32(i32 %8440) #16
  %8442 = trunc i32 %8441 to i8
  %8443 = and i8 %8442, 1
  %8444 = xor i8 %8443, 1
  %8445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8444, i8* %8445, align 1, !tbaa !2446
  %8446 = xor i32 %8432, %8430
  %8447 = xor i32 %8446, %8433
  %8448 = lshr i32 %8447, 4
  %8449 = trunc i32 %8448 to i8
  %8450 = and i8 %8449, 1
  %8451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8450, i8* %8451, align 1, !tbaa !2447
  %8452 = icmp eq i32 %8433, 0
  %8453 = zext i1 %8452 to i8
  %8454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8453, i8* %8454, align 1, !tbaa !2448
  %8455 = lshr i32 %8433, 31
  %8456 = trunc i32 %8455 to i8
  %8457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8456, i8* %8457, align 1, !tbaa !2449
  %8458 = lshr i32 %8430, 31
  %8459 = lshr i32 %8432, 31
  %8460 = xor i32 %8455, %8458
  %8461 = xor i32 %8455, %8459
  %8462 = add nuw nsw i32 %8460, %8461
  %8463 = icmp eq i32 %8462, 2
  %8464 = zext i1 %8463 to i8
  %8465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8464, i8* %8465, align 1, !tbaa !2450
  %8466 = load i32, i32* %EDX
  %8467 = zext i32 %8466 to i64
  %8468 = load i64, i64* %PC
  %8469 = add i64 %8468, 3
  store i64 %8469, i64* %PC
  %8470 = shl i64 %8467, 32
  %8471 = ashr exact i64 %8470, 32
  store i64 %8471, i64* %RCX, align 8, !tbaa !2428
  %8472 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8473 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8474 = load i64, i64* %RAX
  %8475 = load i64, i64* %RCX
  %8476 = mul i64 %8475, 4
  %8477 = add i64 %8476, %8474
  %8478 = load i64, i64* %PC
  %8479 = add i64 %8478, 5
  store i64 %8479, i64* %PC
  %8480 = bitcast i8* %8473 to <2 x float>*
  %8481 = load <2 x float>, <2 x float>* %8480, align 1
  %8482 = getelementptr inbounds i8, i8* %8473, i64 8
  %8483 = bitcast i8* %8482 to <2 x i32>*
  %8484 = load <2 x i32>, <2 x i32>* %8483, align 1
  %8485 = inttoptr i64 %8477 to float*
  %8486 = load float, float* %8485
  %8487 = extractelement <2 x float> %8481, i32 0
  %8488 = fmul float %8487, %8486
  %8489 = bitcast i8* %8472 to float*
  store float %8488, float* %8489, align 1, !tbaa !2453
  %8490 = bitcast <2 x float> %8481 to <2 x i32>
  %8491 = extractelement <2 x i32> %8490, i32 1
  %8492 = getelementptr inbounds i8, i8* %8472, i64 4
  %8493 = bitcast i8* %8492 to i32*
  store i32 %8491, i32* %8493, align 1, !tbaa !2453
  %8494 = extractelement <2 x i32> %8484, i32 0
  %8495 = getelementptr inbounds i8, i8* %8472, i64 8
  %8496 = bitcast i8* %8495 to i32*
  store i32 %8494, i32* %8496, align 1, !tbaa !2453
  %8497 = extractelement <2 x i32> %8484, i32 1
  %8498 = getelementptr inbounds i8, i8* %8472, i64 12
  %8499 = bitcast i8* %8498 to i32*
  store i32 %8497, i32* %8499, align 1, !tbaa !2453
  %8500 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8501 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8502 = bitcast %union.vec128_t* %XMM1 to i8*
  %8503 = load i64, i64* %PC
  %8504 = add i64 %8503, 4
  store i64 %8504, i64* %PC
  %8505 = bitcast i8* %8501 to <2 x float>*
  %8506 = load <2 x float>, <2 x float>* %8505, align 1
  %8507 = getelementptr inbounds i8, i8* %8501, i64 8
  %8508 = bitcast i8* %8507 to <2 x i32>*
  %8509 = load <2 x i32>, <2 x i32>* %8508, align 1
  %8510 = bitcast i8* %8502 to <2 x float>*
  %8511 = load <2 x float>, <2 x float>* %8510, align 1
  %8512 = extractelement <2 x float> %8506, i32 0
  %8513 = extractelement <2 x float> %8511, i32 0
  %8514 = fadd float %8512, %8513
  %8515 = bitcast i8* %8500 to float*
  store float %8514, float* %8515, align 1, !tbaa !2453
  %8516 = bitcast <2 x float> %8506 to <2 x i32>
  %8517 = extractelement <2 x i32> %8516, i32 1
  %8518 = getelementptr inbounds i8, i8* %8500, i64 4
  %8519 = bitcast i8* %8518 to i32*
  store i32 %8517, i32* %8519, align 1, !tbaa !2453
  %8520 = extractelement <2 x i32> %8509, i32 0
  %8521 = getelementptr inbounds i8, i8* %8500, i64 8
  %8522 = bitcast i8* %8521 to i32*
  store i32 %8520, i32* %8522, align 1, !tbaa !2453
  %8523 = extractelement <2 x i32> %8509, i32 1
  %8524 = getelementptr inbounds i8, i8* %8500, i64 12
  %8525 = bitcast i8* %8524 to i32*
  store i32 %8523, i32* %8525, align 1, !tbaa !2453
  %8526 = load i64, i64* %RBP
  %8527 = sub i64 %8526, 32
  %8528 = load i64, i64* %PC
  %8529 = add i64 %8528, 4
  store i64 %8529, i64* %PC
  %8530 = inttoptr i64 %8527 to i64*
  %8531 = load i64, i64* %8530
  store i64 %8531, i64* %RAX, align 8, !tbaa !2428
  %8532 = load i64, i64* %RBP
  %8533 = sub i64 %8532, 44
  %8534 = load i64, i64* %PC
  %8535 = add i64 %8534, 3
  store i64 %8535, i64* %PC
  %8536 = inttoptr i64 %8533 to i32*
  %8537 = load i32, i32* %8536
  %8538 = zext i32 %8537 to i64
  store i64 %8538, i64* %RDX, align 8, !tbaa !2428
  %8539 = load i64, i64* %RDX
  %8540 = load i64, i64* %PC
  %8541 = add i64 %8540, 3
  store i64 %8541, i64* %PC
  %8542 = trunc i64 %8539 to i32
  %8543 = sub i32 %8542, 2
  %8544 = zext i32 %8543 to i64
  store i64 %8544, i64* %RDX, align 8, !tbaa !2428
  %8545 = icmp ult i32 %8542, 2
  %8546 = zext i1 %8545 to i8
  %8547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8546, i8* %8547, align 1, !tbaa !2432
  %8548 = and i32 %8543, 255
  %8549 = call i32 @llvm.ctpop.i32(i32 %8548) #16
  %8550 = trunc i32 %8549 to i8
  %8551 = and i8 %8550, 1
  %8552 = xor i8 %8551, 1
  %8553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8552, i8* %8553, align 1, !tbaa !2446
  %8554 = xor i64 2, %8539
  %8555 = trunc i64 %8554 to i32
  %8556 = xor i32 %8555, %8543
  %8557 = lshr i32 %8556, 4
  %8558 = trunc i32 %8557 to i8
  %8559 = and i8 %8558, 1
  %8560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8559, i8* %8560, align 1, !tbaa !2447
  %8561 = icmp eq i32 %8543, 0
  %8562 = zext i1 %8561 to i8
  %8563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8562, i8* %8563, align 1, !tbaa !2448
  %8564 = lshr i32 %8543, 31
  %8565 = trunc i32 %8564 to i8
  %8566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8565, i8* %8566, align 1, !tbaa !2449
  %8567 = lshr i32 %8542, 31
  %8568 = xor i32 %8564, %8567
  %8569 = add nuw nsw i32 %8568, %8567
  %8570 = icmp eq i32 %8569, 2
  %8571 = zext i1 %8570 to i8
  %8572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8571, i8* %8572, align 1, !tbaa !2450
  %8573 = load i32, i32* %EDX
  %8574 = zext i32 %8573 to i64
  %8575 = load i64, i64* %PC
  %8576 = add i64 %8575, 3
  store i64 %8576, i64* %PC
  %8577 = shl i64 %8574, 32
  %8578 = ashr exact i64 %8577, 32
  store i64 %8578, i64* %RCX, align 8, !tbaa !2428
  %8579 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8580 = load i64, i64* %RAX
  %8581 = load i64, i64* %RCX
  %8582 = mul i64 %8581, 4
  %8583 = add i64 %8582, %8580
  %8584 = load i64, i64* %PC
  %8585 = add i64 %8584, 5
  store i64 %8585, i64* %PC
  %8586 = inttoptr i64 %8583 to float*
  %8587 = load float, float* %8586
  %8588 = bitcast i8* %8579 to float*
  store float %8587, float* %8588, align 1, !tbaa !2453
  %8589 = getelementptr inbounds i8, i8* %8579, i64 4
  %8590 = bitcast i8* %8589 to float*
  store float 0.000000e+00, float* %8590, align 1, !tbaa !2453
  %8591 = getelementptr inbounds i8, i8* %8579, i64 8
  %8592 = bitcast i8* %8591 to float*
  store float 0.000000e+00, float* %8592, align 1, !tbaa !2453
  %8593 = getelementptr inbounds i8, i8* %8579, i64 12
  %8594 = bitcast i8* %8593 to float*
  store float 0.000000e+00, float* %8594, align 1, !tbaa !2453
  %8595 = load i64, i64* %RBP
  %8596 = sub i64 %8595, 40
  %8597 = load i64, i64* %PC
  %8598 = add i64 %8597, 4
  store i64 %8598, i64* %PC
  %8599 = inttoptr i64 %8596 to i64*
  %8600 = load i64, i64* %8599
  store i64 %8600, i64* %RAX, align 8, !tbaa !2428
  %8601 = load i64, i64* %RBP
  %8602 = sub i64 %8601, 24
  %8603 = load i64, i64* %PC
  %8604 = add i64 %8603, 3
  store i64 %8604, i64* %PC
  %8605 = inttoptr i64 %8602 to i32*
  %8606 = load i32, i32* %8605
  %8607 = zext i32 %8606 to i64
  store i64 %8607, i64* %RDX, align 8, !tbaa !2428
  %8608 = load i64, i64* %RBP
  %8609 = sub i64 %8608, 44
  %8610 = load i64, i64* %PC
  %8611 = add i64 %8610, 3
  store i64 %8611, i64* %PC
  %8612 = inttoptr i64 %8609 to i32*
  %8613 = load i32, i32* %8612
  %8614 = zext i32 %8613 to i64
  store i64 %8614, i64* %RSI, align 8, !tbaa !2428
  %8615 = load i64, i64* %RSI
  %8616 = load i64, i64* %PC
  %8617 = add i64 %8616, 3
  store i64 %8617, i64* %PC
  %8618 = trunc i64 %8615 to i32
  %8619 = sub i32 %8618, 2
  %8620 = zext i32 %8619 to i64
  store i64 %8620, i64* %RSI, align 8, !tbaa !2428
  %8621 = icmp ult i32 %8618, 2
  %8622 = zext i1 %8621 to i8
  %8623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8622, i8* %8623, align 1, !tbaa !2432
  %8624 = and i32 %8619, 255
  %8625 = call i32 @llvm.ctpop.i32(i32 %8624) #16
  %8626 = trunc i32 %8625 to i8
  %8627 = and i8 %8626, 1
  %8628 = xor i8 %8627, 1
  %8629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8628, i8* %8629, align 1, !tbaa !2446
  %8630 = xor i64 2, %8615
  %8631 = trunc i64 %8630 to i32
  %8632 = xor i32 %8631, %8619
  %8633 = lshr i32 %8632, 4
  %8634 = trunc i32 %8633 to i8
  %8635 = and i8 %8634, 1
  %8636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8635, i8* %8636, align 1, !tbaa !2447
  %8637 = icmp eq i32 %8619, 0
  %8638 = zext i1 %8637 to i8
  %8639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8638, i8* %8639, align 1, !tbaa !2448
  %8640 = lshr i32 %8619, 31
  %8641 = trunc i32 %8640 to i8
  %8642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8641, i8* %8642, align 1, !tbaa !2449
  %8643 = lshr i32 %8618, 31
  %8644 = xor i32 %8640, %8643
  %8645 = add nuw nsw i32 %8644, %8643
  %8646 = icmp eq i32 %8645, 2
  %8647 = zext i1 %8646 to i8
  %8648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8647, i8* %8648, align 1, !tbaa !2450
  %8649 = load i64, i64* %RDX
  %8650 = load i32, i32* %ESI
  %8651 = zext i32 %8650 to i64
  %8652 = load i64, i64* %PC
  %8653 = add i64 %8652, 3
  store i64 %8653, i64* %PC
  %8654 = shl i64 %8649, 32
  %8655 = ashr exact i64 %8654, 32
  %8656 = shl i64 %8651, 32
  %8657 = ashr exact i64 %8656, 32
  %8658 = mul nsw i64 %8657, %8655
  %8659 = trunc i64 %8658 to i32
  %8660 = and i64 %8658, 4294967295
  store i64 %8660, i64* %RDX, align 8, !tbaa !2428
  %8661 = shl i64 %8658, 32
  %8662 = ashr exact i64 %8661, 32
  %8663 = icmp ne i64 %8662, %8658
  %8664 = zext i1 %8663 to i8
  %8665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8664, i8* %8665, align 1, !tbaa !2432
  %8666 = and i32 %8659, 255
  %8667 = call i32 @llvm.ctpop.i32(i32 %8666) #16
  %8668 = trunc i32 %8667 to i8
  %8669 = and i8 %8668, 1
  %8670 = xor i8 %8669, 1
  %8671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8670, i8* %8671, align 1, !tbaa !2446
  %8672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8672, align 1, !tbaa !2447
  %8673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8673, align 1, !tbaa !2448
  %8674 = lshr i32 %8659, 31
  %8675 = trunc i32 %8674 to i8
  %8676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8675, i8* %8676, align 1, !tbaa !2449
  %8677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8664, i8* %8677, align 1, !tbaa !2450
  %8678 = load i64, i64* %RDX
  %8679 = load i64, i64* %RBP
  %8680 = sub i64 %8679, 48
  %8681 = load i64, i64* %PC
  %8682 = add i64 %8681, 3
  store i64 %8682, i64* %PC
  %8683 = trunc i64 %8678 to i32
  %8684 = inttoptr i64 %8680 to i32*
  %8685 = load i32, i32* %8684
  %8686 = add i32 %8685, %8683
  %8687 = zext i32 %8686 to i64
  store i64 %8687, i64* %RDX, align 8, !tbaa !2428
  %8688 = icmp ult i32 %8686, %8683
  %8689 = icmp ult i32 %8686, %8685
  %8690 = or i1 %8688, %8689
  %8691 = zext i1 %8690 to i8
  %8692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8691, i8* %8692, align 1, !tbaa !2432
  %8693 = and i32 %8686, 255
  %8694 = call i32 @llvm.ctpop.i32(i32 %8693) #16
  %8695 = trunc i32 %8694 to i8
  %8696 = and i8 %8695, 1
  %8697 = xor i8 %8696, 1
  %8698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8697, i8* %8698, align 1, !tbaa !2446
  %8699 = xor i32 %8685, %8683
  %8700 = xor i32 %8699, %8686
  %8701 = lshr i32 %8700, 4
  %8702 = trunc i32 %8701 to i8
  %8703 = and i8 %8702, 1
  %8704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8703, i8* %8704, align 1, !tbaa !2447
  %8705 = icmp eq i32 %8686, 0
  %8706 = zext i1 %8705 to i8
  %8707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8706, i8* %8707, align 1, !tbaa !2448
  %8708 = lshr i32 %8686, 31
  %8709 = trunc i32 %8708 to i8
  %8710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8709, i8* %8710, align 1, !tbaa !2449
  %8711 = lshr i32 %8683, 31
  %8712 = lshr i32 %8685, 31
  %8713 = xor i32 %8708, %8711
  %8714 = xor i32 %8708, %8712
  %8715 = add nuw nsw i32 %8713, %8714
  %8716 = icmp eq i32 %8715, 2
  %8717 = zext i1 %8716 to i8
  %8718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8717, i8* %8718, align 1, !tbaa !2450
  %8719 = load i32, i32* %EDX
  %8720 = zext i32 %8719 to i64
  %8721 = load i64, i64* %PC
  %8722 = add i64 %8721, 3
  store i64 %8722, i64* %PC
  %8723 = shl i64 %8720, 32
  %8724 = ashr exact i64 %8723, 32
  store i64 %8724, i64* %RCX, align 8, !tbaa !2428
  %8725 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8726 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8727 = load i64, i64* %RAX
  %8728 = load i64, i64* %RCX
  %8729 = mul i64 %8728, 4
  %8730 = add i64 %8729, %8727
  %8731 = load i64, i64* %PC
  %8732 = add i64 %8731, 5
  store i64 %8732, i64* %PC
  %8733 = bitcast i8* %8726 to <2 x float>*
  %8734 = load <2 x float>, <2 x float>* %8733, align 1
  %8735 = getelementptr inbounds i8, i8* %8726, i64 8
  %8736 = bitcast i8* %8735 to <2 x i32>*
  %8737 = load <2 x i32>, <2 x i32>* %8736, align 1
  %8738 = inttoptr i64 %8730 to float*
  %8739 = load float, float* %8738
  %8740 = extractelement <2 x float> %8734, i32 0
  %8741 = fmul float %8740, %8739
  %8742 = bitcast i8* %8725 to float*
  store float %8741, float* %8742, align 1, !tbaa !2453
  %8743 = bitcast <2 x float> %8734 to <2 x i32>
  %8744 = extractelement <2 x i32> %8743, i32 1
  %8745 = getelementptr inbounds i8, i8* %8725, i64 4
  %8746 = bitcast i8* %8745 to i32*
  store i32 %8744, i32* %8746, align 1, !tbaa !2453
  %8747 = extractelement <2 x i32> %8737, i32 0
  %8748 = getelementptr inbounds i8, i8* %8725, i64 8
  %8749 = bitcast i8* %8748 to i32*
  store i32 %8747, i32* %8749, align 1, !tbaa !2453
  %8750 = extractelement <2 x i32> %8737, i32 1
  %8751 = getelementptr inbounds i8, i8* %8725, i64 12
  %8752 = bitcast i8* %8751 to i32*
  store i32 %8750, i32* %8752, align 1, !tbaa !2453
  %8753 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8754 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8755 = bitcast %union.vec128_t* %XMM1 to i8*
  %8756 = load i64, i64* %PC
  %8757 = add i64 %8756, 4
  store i64 %8757, i64* %PC
  %8758 = bitcast i8* %8754 to <2 x float>*
  %8759 = load <2 x float>, <2 x float>* %8758, align 1
  %8760 = getelementptr inbounds i8, i8* %8754, i64 8
  %8761 = bitcast i8* %8760 to <2 x i32>*
  %8762 = load <2 x i32>, <2 x i32>* %8761, align 1
  %8763 = bitcast i8* %8755 to <2 x float>*
  %8764 = load <2 x float>, <2 x float>* %8763, align 1
  %8765 = extractelement <2 x float> %8759, i32 0
  %8766 = extractelement <2 x float> %8764, i32 0
  %8767 = fadd float %8765, %8766
  %8768 = bitcast i8* %8753 to float*
  store float %8767, float* %8768, align 1, !tbaa !2453
  %8769 = bitcast <2 x float> %8759 to <2 x i32>
  %8770 = extractelement <2 x i32> %8769, i32 1
  %8771 = getelementptr inbounds i8, i8* %8753, i64 4
  %8772 = bitcast i8* %8771 to i32*
  store i32 %8770, i32* %8772, align 1, !tbaa !2453
  %8773 = extractelement <2 x i32> %8762, i32 0
  %8774 = getelementptr inbounds i8, i8* %8753, i64 8
  %8775 = bitcast i8* %8774 to i32*
  store i32 %8773, i32* %8775, align 1, !tbaa !2453
  %8776 = extractelement <2 x i32> %8762, i32 1
  %8777 = getelementptr inbounds i8, i8* %8753, i64 12
  %8778 = bitcast i8* %8777 to i32*
  store i32 %8776, i32* %8778, align 1, !tbaa !2453
  %8779 = load i64, i64* %RBP
  %8780 = sub i64 %8779, 32
  %8781 = load i64, i64* %PC
  %8782 = add i64 %8781, 4
  store i64 %8782, i64* %PC
  %8783 = inttoptr i64 %8780 to i64*
  %8784 = load i64, i64* %8783
  store i64 %8784, i64* %RAX, align 8, !tbaa !2428
  %8785 = load i64, i64* %RBP
  %8786 = sub i64 %8785, 44
  %8787 = load i64, i64* %PC
  %8788 = add i64 %8787, 3
  store i64 %8788, i64* %PC
  %8789 = inttoptr i64 %8786 to i32*
  %8790 = load i32, i32* %8789
  %8791 = zext i32 %8790 to i64
  store i64 %8791, i64* %RDX, align 8, !tbaa !2428
  %8792 = load i64, i64* %RDX
  %8793 = load i64, i64* %PC
  %8794 = add i64 %8793, 3
  store i64 %8794, i64* %PC
  %8795 = trunc i64 %8792 to i32
  %8796 = sub i32 %8795, 1
  %8797 = zext i32 %8796 to i64
  store i64 %8797, i64* %RDX, align 8, !tbaa !2428
  %8798 = icmp ult i32 %8795, 1
  %8799 = zext i1 %8798 to i8
  %8800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8799, i8* %8800, align 1, !tbaa !2432
  %8801 = and i32 %8796, 255
  %8802 = call i32 @llvm.ctpop.i32(i32 %8801) #16
  %8803 = trunc i32 %8802 to i8
  %8804 = and i8 %8803, 1
  %8805 = xor i8 %8804, 1
  %8806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8805, i8* %8806, align 1, !tbaa !2446
  %8807 = xor i64 1, %8792
  %8808 = trunc i64 %8807 to i32
  %8809 = xor i32 %8808, %8796
  %8810 = lshr i32 %8809, 4
  %8811 = trunc i32 %8810 to i8
  %8812 = and i8 %8811, 1
  %8813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8812, i8* %8813, align 1, !tbaa !2447
  %8814 = icmp eq i32 %8796, 0
  %8815 = zext i1 %8814 to i8
  %8816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8815, i8* %8816, align 1, !tbaa !2448
  %8817 = lshr i32 %8796, 31
  %8818 = trunc i32 %8817 to i8
  %8819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8818, i8* %8819, align 1, !tbaa !2449
  %8820 = lshr i32 %8795, 31
  %8821 = xor i32 %8817, %8820
  %8822 = add nuw nsw i32 %8821, %8820
  %8823 = icmp eq i32 %8822, 2
  %8824 = zext i1 %8823 to i8
  %8825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8824, i8* %8825, align 1, !tbaa !2450
  %8826 = load i32, i32* %EDX
  %8827 = zext i32 %8826 to i64
  %8828 = load i64, i64* %PC
  %8829 = add i64 %8828, 3
  store i64 %8829, i64* %PC
  %8830 = shl i64 %8827, 32
  %8831 = ashr exact i64 %8830, 32
  store i64 %8831, i64* %RCX, align 8, !tbaa !2428
  %8832 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8833 = load i64, i64* %RAX
  %8834 = load i64, i64* %RCX
  %8835 = mul i64 %8834, 4
  %8836 = add i64 %8835, %8833
  %8837 = load i64, i64* %PC
  %8838 = add i64 %8837, 5
  store i64 %8838, i64* %PC
  %8839 = inttoptr i64 %8836 to float*
  %8840 = load float, float* %8839
  %8841 = bitcast i8* %8832 to float*
  store float %8840, float* %8841, align 1, !tbaa !2453
  %8842 = getelementptr inbounds i8, i8* %8832, i64 4
  %8843 = bitcast i8* %8842 to float*
  store float 0.000000e+00, float* %8843, align 1, !tbaa !2453
  %8844 = getelementptr inbounds i8, i8* %8832, i64 8
  %8845 = bitcast i8* %8844 to float*
  store float 0.000000e+00, float* %8845, align 1, !tbaa !2453
  %8846 = getelementptr inbounds i8, i8* %8832, i64 12
  %8847 = bitcast i8* %8846 to float*
  store float 0.000000e+00, float* %8847, align 1, !tbaa !2453
  %8848 = load i64, i64* %RBP
  %8849 = sub i64 %8848, 40
  %8850 = load i64, i64* %PC
  %8851 = add i64 %8850, 4
  store i64 %8851, i64* %PC
  %8852 = inttoptr i64 %8849 to i64*
  %8853 = load i64, i64* %8852
  store i64 %8853, i64* %RAX, align 8, !tbaa !2428
  %8854 = load i64, i64* %RBP
  %8855 = sub i64 %8854, 24
  %8856 = load i64, i64* %PC
  %8857 = add i64 %8856, 3
  store i64 %8857, i64* %PC
  %8858 = inttoptr i64 %8855 to i32*
  %8859 = load i32, i32* %8858
  %8860 = zext i32 %8859 to i64
  store i64 %8860, i64* %RDX, align 8, !tbaa !2428
  %8861 = load i64, i64* %RBP
  %8862 = sub i64 %8861, 44
  %8863 = load i64, i64* %PC
  %8864 = add i64 %8863, 3
  store i64 %8864, i64* %PC
  %8865 = inttoptr i64 %8862 to i32*
  %8866 = load i32, i32* %8865
  %8867 = zext i32 %8866 to i64
  store i64 %8867, i64* %RSI, align 8, !tbaa !2428
  %8868 = load i64, i64* %RSI
  %8869 = load i64, i64* %PC
  %8870 = add i64 %8869, 3
  store i64 %8870, i64* %PC
  %8871 = trunc i64 %8868 to i32
  %8872 = sub i32 %8871, 1
  %8873 = zext i32 %8872 to i64
  store i64 %8873, i64* %RSI, align 8, !tbaa !2428
  %8874 = icmp ult i32 %8871, 1
  %8875 = zext i1 %8874 to i8
  %8876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8875, i8* %8876, align 1, !tbaa !2432
  %8877 = and i32 %8872, 255
  %8878 = call i32 @llvm.ctpop.i32(i32 %8877) #16
  %8879 = trunc i32 %8878 to i8
  %8880 = and i8 %8879, 1
  %8881 = xor i8 %8880, 1
  %8882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8881, i8* %8882, align 1, !tbaa !2446
  %8883 = xor i64 1, %8868
  %8884 = trunc i64 %8883 to i32
  %8885 = xor i32 %8884, %8872
  %8886 = lshr i32 %8885, 4
  %8887 = trunc i32 %8886 to i8
  %8888 = and i8 %8887, 1
  %8889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8888, i8* %8889, align 1, !tbaa !2447
  %8890 = icmp eq i32 %8872, 0
  %8891 = zext i1 %8890 to i8
  %8892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8891, i8* %8892, align 1, !tbaa !2448
  %8893 = lshr i32 %8872, 31
  %8894 = trunc i32 %8893 to i8
  %8895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8894, i8* %8895, align 1, !tbaa !2449
  %8896 = lshr i32 %8871, 31
  %8897 = xor i32 %8893, %8896
  %8898 = add nuw nsw i32 %8897, %8896
  %8899 = icmp eq i32 %8898, 2
  %8900 = zext i1 %8899 to i8
  %8901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8900, i8* %8901, align 1, !tbaa !2450
  %8902 = load i64, i64* %RDX
  %8903 = load i32, i32* %ESI
  %8904 = zext i32 %8903 to i64
  %8905 = load i64, i64* %PC
  %8906 = add i64 %8905, 3
  store i64 %8906, i64* %PC
  %8907 = shl i64 %8902, 32
  %8908 = ashr exact i64 %8907, 32
  %8909 = shl i64 %8904, 32
  %8910 = ashr exact i64 %8909, 32
  %8911 = mul nsw i64 %8910, %8908
  %8912 = trunc i64 %8911 to i32
  %8913 = and i64 %8911, 4294967295
  store i64 %8913, i64* %RDX, align 8, !tbaa !2428
  %8914 = shl i64 %8911, 32
  %8915 = ashr exact i64 %8914, 32
  %8916 = icmp ne i64 %8915, %8911
  %8917 = zext i1 %8916 to i8
  %8918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8917, i8* %8918, align 1, !tbaa !2432
  %8919 = and i32 %8912, 255
  %8920 = call i32 @llvm.ctpop.i32(i32 %8919) #16
  %8921 = trunc i32 %8920 to i8
  %8922 = and i8 %8921, 1
  %8923 = xor i8 %8922, 1
  %8924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8923, i8* %8924, align 1, !tbaa !2446
  %8925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8925, align 1, !tbaa !2447
  %8926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8926, align 1, !tbaa !2448
  %8927 = lshr i32 %8912, 31
  %8928 = trunc i32 %8927 to i8
  %8929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8928, i8* %8929, align 1, !tbaa !2449
  %8930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8917, i8* %8930, align 1, !tbaa !2450
  %8931 = load i64, i64* %RDX
  %8932 = load i64, i64* %RBP
  %8933 = sub i64 %8932, 48
  %8934 = load i64, i64* %PC
  %8935 = add i64 %8934, 3
  store i64 %8935, i64* %PC
  %8936 = trunc i64 %8931 to i32
  %8937 = inttoptr i64 %8933 to i32*
  %8938 = load i32, i32* %8937
  %8939 = add i32 %8938, %8936
  %8940 = zext i32 %8939 to i64
  store i64 %8940, i64* %RDX, align 8, !tbaa !2428
  %8941 = icmp ult i32 %8939, %8936
  %8942 = icmp ult i32 %8939, %8938
  %8943 = or i1 %8941, %8942
  %8944 = zext i1 %8943 to i8
  %8945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8944, i8* %8945, align 1, !tbaa !2432
  %8946 = and i32 %8939, 255
  %8947 = call i32 @llvm.ctpop.i32(i32 %8946) #16
  %8948 = trunc i32 %8947 to i8
  %8949 = and i8 %8948, 1
  %8950 = xor i8 %8949, 1
  %8951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8950, i8* %8951, align 1, !tbaa !2446
  %8952 = xor i32 %8938, %8936
  %8953 = xor i32 %8952, %8939
  %8954 = lshr i32 %8953, 4
  %8955 = trunc i32 %8954 to i8
  %8956 = and i8 %8955, 1
  %8957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8956, i8* %8957, align 1, !tbaa !2447
  %8958 = icmp eq i32 %8939, 0
  %8959 = zext i1 %8958 to i8
  %8960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8959, i8* %8960, align 1, !tbaa !2448
  %8961 = lshr i32 %8939, 31
  %8962 = trunc i32 %8961 to i8
  %8963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8962, i8* %8963, align 1, !tbaa !2449
  %8964 = lshr i32 %8936, 31
  %8965 = lshr i32 %8938, 31
  %8966 = xor i32 %8961, %8964
  %8967 = xor i32 %8961, %8965
  %8968 = add nuw nsw i32 %8966, %8967
  %8969 = icmp eq i32 %8968, 2
  %8970 = zext i1 %8969 to i8
  %8971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8970, i8* %8971, align 1, !tbaa !2450
  %8972 = load i32, i32* %EDX
  %8973 = zext i32 %8972 to i64
  %8974 = load i64, i64* %PC
  %8975 = add i64 %8974, 3
  store i64 %8975, i64* %PC
  %8976 = shl i64 %8973, 32
  %8977 = ashr exact i64 %8976, 32
  store i64 %8977, i64* %RCX, align 8, !tbaa !2428
  %8978 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8979 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8980 = load i64, i64* %RAX
  %8981 = load i64, i64* %RCX
  %8982 = mul i64 %8981, 4
  %8983 = add i64 %8982, %8980
  %8984 = load i64, i64* %PC
  %8985 = add i64 %8984, 5
  store i64 %8985, i64* %PC
  %8986 = bitcast i8* %8979 to <2 x float>*
  %8987 = load <2 x float>, <2 x float>* %8986, align 1
  %8988 = getelementptr inbounds i8, i8* %8979, i64 8
  %8989 = bitcast i8* %8988 to <2 x i32>*
  %8990 = load <2 x i32>, <2 x i32>* %8989, align 1
  %8991 = inttoptr i64 %8983 to float*
  %8992 = load float, float* %8991
  %8993 = extractelement <2 x float> %8987, i32 0
  %8994 = fmul float %8993, %8992
  %8995 = bitcast i8* %8978 to float*
  store float %8994, float* %8995, align 1, !tbaa !2453
  %8996 = bitcast <2 x float> %8987 to <2 x i32>
  %8997 = extractelement <2 x i32> %8996, i32 1
  %8998 = getelementptr inbounds i8, i8* %8978, i64 4
  %8999 = bitcast i8* %8998 to i32*
  store i32 %8997, i32* %8999, align 1, !tbaa !2453
  %9000 = extractelement <2 x i32> %8990, i32 0
  %9001 = getelementptr inbounds i8, i8* %8978, i64 8
  %9002 = bitcast i8* %9001 to i32*
  store i32 %9000, i32* %9002, align 1, !tbaa !2453
  %9003 = extractelement <2 x i32> %8990, i32 1
  %9004 = getelementptr inbounds i8, i8* %8978, i64 12
  %9005 = bitcast i8* %9004 to i32*
  store i32 %9003, i32* %9005, align 1, !tbaa !2453
  %9006 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9007 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9008 = bitcast %union.vec128_t* %XMM1 to i8*
  %9009 = load i64, i64* %PC
  %9010 = add i64 %9009, 4
  store i64 %9010, i64* %PC
  %9011 = bitcast i8* %9007 to <2 x float>*
  %9012 = load <2 x float>, <2 x float>* %9011, align 1
  %9013 = getelementptr inbounds i8, i8* %9007, i64 8
  %9014 = bitcast i8* %9013 to <2 x i32>*
  %9015 = load <2 x i32>, <2 x i32>* %9014, align 1
  %9016 = bitcast i8* %9008 to <2 x float>*
  %9017 = load <2 x float>, <2 x float>* %9016, align 1
  %9018 = extractelement <2 x float> %9012, i32 0
  %9019 = extractelement <2 x float> %9017, i32 0
  %9020 = fadd float %9018, %9019
  %9021 = bitcast i8* %9006 to float*
  store float %9020, float* %9021, align 1, !tbaa !2453
  %9022 = bitcast <2 x float> %9012 to <2 x i32>
  %9023 = extractelement <2 x i32> %9022, i32 1
  %9024 = getelementptr inbounds i8, i8* %9006, i64 4
  %9025 = bitcast i8* %9024 to i32*
  store i32 %9023, i32* %9025, align 1, !tbaa !2453
  %9026 = extractelement <2 x i32> %9015, i32 0
  %9027 = getelementptr inbounds i8, i8* %9006, i64 8
  %9028 = bitcast i8* %9027 to i32*
  store i32 %9026, i32* %9028, align 1, !tbaa !2453
  %9029 = extractelement <2 x i32> %9015, i32 1
  %9030 = getelementptr inbounds i8, i8* %9006, i64 12
  %9031 = bitcast i8* %9030 to i32*
  store i32 %9029, i32* %9031, align 1, !tbaa !2453
  %9032 = load i64, i64* %RBP
  %9033 = sub i64 %9032, 32
  %9034 = load i64, i64* %PC
  %9035 = add i64 %9034, 4
  store i64 %9035, i64* %PC
  %9036 = inttoptr i64 %9033 to i64*
  %9037 = load i64, i64* %9036
  store i64 %9037, i64* %RAX, align 8, !tbaa !2428
  %9038 = load i64, i64* %RBP
  %9039 = sub i64 %9038, 44
  %9040 = load i64, i64* %PC
  %9041 = add i64 %9040, 4
  store i64 %9041, i64* %PC
  %9042 = inttoptr i64 %9039 to i32*
  %9043 = load i32, i32* %9042
  %9044 = sext i32 %9043 to i64
  store i64 %9044, i64* %RCX, align 8, !tbaa !2428
  %9045 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9046 = load i64, i64* %RAX
  %9047 = load i64, i64* %RCX
  %9048 = mul i64 %9047, 4
  %9049 = add i64 %9048, %9046
  %9050 = load i64, i64* %PC
  %9051 = add i64 %9050, 5
  store i64 %9051, i64* %PC
  %9052 = inttoptr i64 %9049 to float*
  %9053 = load float, float* %9052
  %9054 = bitcast i8* %9045 to float*
  store float %9053, float* %9054, align 1, !tbaa !2453
  %9055 = getelementptr inbounds i8, i8* %9045, i64 4
  %9056 = bitcast i8* %9055 to float*
  store float 0.000000e+00, float* %9056, align 1, !tbaa !2453
  %9057 = getelementptr inbounds i8, i8* %9045, i64 8
  %9058 = bitcast i8* %9057 to float*
  store float 0.000000e+00, float* %9058, align 1, !tbaa !2453
  %9059 = getelementptr inbounds i8, i8* %9045, i64 12
  %9060 = bitcast i8* %9059 to float*
  store float 0.000000e+00, float* %9060, align 1, !tbaa !2453
  %9061 = load i64, i64* %RBP
  %9062 = sub i64 %9061, 40
  %9063 = load i64, i64* %PC
  %9064 = add i64 %9063, 4
  store i64 %9064, i64* %PC
  %9065 = inttoptr i64 %9062 to i64*
  %9066 = load i64, i64* %9065
  store i64 %9066, i64* %RAX, align 8, !tbaa !2428
  %9067 = load i64, i64* %RBP
  %9068 = sub i64 %9067, 24
  %9069 = load i64, i64* %PC
  %9070 = add i64 %9069, 3
  store i64 %9070, i64* %PC
  %9071 = inttoptr i64 %9068 to i32*
  %9072 = load i32, i32* %9071
  %9073 = zext i32 %9072 to i64
  store i64 %9073, i64* %RDX, align 8, !tbaa !2428
  %9074 = load i64, i64* %RDX
  %9075 = load i64, i64* %RBP
  %9076 = sub i64 %9075, 44
  %9077 = load i64, i64* %PC
  %9078 = add i64 %9077, 4
  store i64 %9078, i64* %PC
  %9079 = inttoptr i64 %9076 to i32*
  %9080 = load i32, i32* %9079
  %9081 = shl i64 %9074, 32
  %9082 = ashr exact i64 %9081, 32
  %9083 = sext i32 %9080 to i64
  %9084 = mul nsw i64 %9083, %9082
  %9085 = trunc i64 %9084 to i32
  %9086 = and i64 %9084, 4294967295
  store i64 %9086, i64* %RDX, align 8, !tbaa !2428
  %9087 = shl i64 %9084, 32
  %9088 = ashr exact i64 %9087, 32
  %9089 = icmp ne i64 %9088, %9084
  %9090 = zext i1 %9089 to i8
  %9091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9090, i8* %9091, align 1, !tbaa !2432
  %9092 = and i32 %9085, 255
  %9093 = call i32 @llvm.ctpop.i32(i32 %9092) #16
  %9094 = trunc i32 %9093 to i8
  %9095 = and i8 %9094, 1
  %9096 = xor i8 %9095, 1
  %9097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9096, i8* %9097, align 1, !tbaa !2446
  %9098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9098, align 1, !tbaa !2447
  %9099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9099, align 1, !tbaa !2448
  %9100 = lshr i32 %9085, 31
  %9101 = trunc i32 %9100 to i8
  %9102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9101, i8* %9102, align 1, !tbaa !2449
  %9103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9090, i8* %9103, align 1, !tbaa !2450
  %9104 = load i64, i64* %RDX
  %9105 = load i64, i64* %RBP
  %9106 = sub i64 %9105, 48
  %9107 = load i64, i64* %PC
  %9108 = add i64 %9107, 3
  store i64 %9108, i64* %PC
  %9109 = trunc i64 %9104 to i32
  %9110 = inttoptr i64 %9106 to i32*
  %9111 = load i32, i32* %9110
  %9112 = add i32 %9111, %9109
  %9113 = zext i32 %9112 to i64
  store i64 %9113, i64* %RDX, align 8, !tbaa !2428
  %9114 = icmp ult i32 %9112, %9109
  %9115 = icmp ult i32 %9112, %9111
  %9116 = or i1 %9114, %9115
  %9117 = zext i1 %9116 to i8
  %9118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9117, i8* %9118, align 1, !tbaa !2432
  %9119 = and i32 %9112, 255
  %9120 = call i32 @llvm.ctpop.i32(i32 %9119) #16
  %9121 = trunc i32 %9120 to i8
  %9122 = and i8 %9121, 1
  %9123 = xor i8 %9122, 1
  %9124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9123, i8* %9124, align 1, !tbaa !2446
  %9125 = xor i32 %9111, %9109
  %9126 = xor i32 %9125, %9112
  %9127 = lshr i32 %9126, 4
  %9128 = trunc i32 %9127 to i8
  %9129 = and i8 %9128, 1
  %9130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9129, i8* %9130, align 1, !tbaa !2447
  %9131 = icmp eq i32 %9112, 0
  %9132 = zext i1 %9131 to i8
  %9133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9132, i8* %9133, align 1, !tbaa !2448
  %9134 = lshr i32 %9112, 31
  %9135 = trunc i32 %9134 to i8
  %9136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9135, i8* %9136, align 1, !tbaa !2449
  %9137 = lshr i32 %9109, 31
  %9138 = lshr i32 %9111, 31
  %9139 = xor i32 %9134, %9137
  %9140 = xor i32 %9134, %9138
  %9141 = add nuw nsw i32 %9139, %9140
  %9142 = icmp eq i32 %9141, 2
  %9143 = zext i1 %9142 to i8
  %9144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9143, i8* %9144, align 1, !tbaa !2450
  %9145 = load i32, i32* %EDX
  %9146 = zext i32 %9145 to i64
  %9147 = load i64, i64* %PC
  %9148 = add i64 %9147, 3
  store i64 %9148, i64* %PC
  %9149 = shl i64 %9146, 32
  %9150 = ashr exact i64 %9149, 32
  store i64 %9150, i64* %RCX, align 8, !tbaa !2428
  %9151 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9152 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9153 = load i64, i64* %RAX
  %9154 = load i64, i64* %RCX
  %9155 = mul i64 %9154, 4
  %9156 = add i64 %9155, %9153
  %9157 = load i64, i64* %PC
  %9158 = add i64 %9157, 5
  store i64 %9158, i64* %PC
  %9159 = bitcast i8* %9152 to <2 x float>*
  %9160 = load <2 x float>, <2 x float>* %9159, align 1
  %9161 = getelementptr inbounds i8, i8* %9152, i64 8
  %9162 = bitcast i8* %9161 to <2 x i32>*
  %9163 = load <2 x i32>, <2 x i32>* %9162, align 1
  %9164 = inttoptr i64 %9156 to float*
  %9165 = load float, float* %9164
  %9166 = extractelement <2 x float> %9160, i32 0
  %9167 = fmul float %9166, %9165
  %9168 = bitcast i8* %9151 to float*
  store float %9167, float* %9168, align 1, !tbaa !2453
  %9169 = bitcast <2 x float> %9160 to <2 x i32>
  %9170 = extractelement <2 x i32> %9169, i32 1
  %9171 = getelementptr inbounds i8, i8* %9151, i64 4
  %9172 = bitcast i8* %9171 to i32*
  store i32 %9170, i32* %9172, align 1, !tbaa !2453
  %9173 = extractelement <2 x i32> %9163, i32 0
  %9174 = getelementptr inbounds i8, i8* %9151, i64 8
  %9175 = bitcast i8* %9174 to i32*
  store i32 %9173, i32* %9175, align 1, !tbaa !2453
  %9176 = extractelement <2 x i32> %9163, i32 1
  %9177 = getelementptr inbounds i8, i8* %9151, i64 12
  %9178 = bitcast i8* %9177 to i32*
  store i32 %9176, i32* %9178, align 1, !tbaa !2453
  %9179 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9181 = bitcast %union.vec128_t* %XMM1 to i8*
  %9182 = load i64, i64* %PC
  %9183 = add i64 %9182, 4
  store i64 %9183, i64* %PC
  %9184 = bitcast i8* %9180 to <2 x float>*
  %9185 = load <2 x float>, <2 x float>* %9184, align 1
  %9186 = getelementptr inbounds i8, i8* %9180, i64 8
  %9187 = bitcast i8* %9186 to <2 x i32>*
  %9188 = load <2 x i32>, <2 x i32>* %9187, align 1
  %9189 = bitcast i8* %9181 to <2 x float>*
  %9190 = load <2 x float>, <2 x float>* %9189, align 1
  %9191 = extractelement <2 x float> %9185, i32 0
  %9192 = extractelement <2 x float> %9190, i32 0
  %9193 = fadd float %9191, %9192
  %9194 = bitcast i8* %9179 to float*
  store float %9193, float* %9194, align 1, !tbaa !2453
  %9195 = bitcast <2 x float> %9185 to <2 x i32>
  %9196 = extractelement <2 x i32> %9195, i32 1
  %9197 = getelementptr inbounds i8, i8* %9179, i64 4
  %9198 = bitcast i8* %9197 to i32*
  store i32 %9196, i32* %9198, align 1, !tbaa !2453
  %9199 = extractelement <2 x i32> %9188, i32 0
  %9200 = getelementptr inbounds i8, i8* %9179, i64 8
  %9201 = bitcast i8* %9200 to i32*
  store i32 %9199, i32* %9201, align 1, !tbaa !2453
  %9202 = extractelement <2 x i32> %9188, i32 1
  %9203 = getelementptr inbounds i8, i8* %9179, i64 12
  %9204 = bitcast i8* %9203 to i32*
  store i32 %9202, i32* %9204, align 1, !tbaa !2453
  %9205 = load i64, i64* %RBP
  %9206 = sub i64 %9205, 16
  %9207 = load i64, i64* %PC
  %9208 = add i64 %9207, 4
  store i64 %9208, i64* %PC
  %9209 = inttoptr i64 %9206 to i64*
  %9210 = load i64, i64* %9209
  store i64 %9210, i64* %RAX, align 8, !tbaa !2428
  %9211 = load i64, i64* %RBP
  %9212 = sub i64 %9211, 48
  %9213 = load i64, i64* %PC
  %9214 = add i64 %9213, 4
  store i64 %9214, i64* %PC
  %9215 = inttoptr i64 %9212 to i32*
  %9216 = load i32, i32* %9215
  %9217 = sext i32 %9216 to i64
  store i64 %9217, i64* %RCX, align 8, !tbaa !2428
  %9218 = load i64, i64* %RAX
  %9219 = load i64, i64* %RCX
  %9220 = mul i64 %9219, 4
  %9221 = add i64 %9220, %9218
  %9222 = bitcast %union.vec128_t* %XMM0 to i8*
  %9223 = load i64, i64* %PC
  %9224 = add i64 %9223, 5
  store i64 %9224, i64* %PC
  %9225 = bitcast i8* %9222 to <2 x float>*
  %9226 = load <2 x float>, <2 x float>* %9225, align 1
  %9227 = extractelement <2 x float> %9226, i32 0
  %9228 = inttoptr i64 %9221 to float*
  store float %9227, float* %9228
  %9229 = load i64, i64* %RBP
  %9230 = sub i64 %9229, 48
  %9231 = load i64, i64* %PC
  %9232 = add i64 %9231, 3
  store i64 %9232, i64* %PC
  %9233 = inttoptr i64 %9230 to i32*
  %9234 = load i32, i32* %9233
  %9235 = zext i32 %9234 to i64
  store i64 %9235, i64* %RAX, align 8, !tbaa !2428
  %9236 = load i64, i64* %RAX
  %9237 = load i64, i64* %PC
  %9238 = add i64 %9237, 3
  store i64 %9238, i64* %PC
  %9239 = trunc i64 %9236 to i32
  %9240 = add i32 1, %9239
  %9241 = zext i32 %9240 to i64
  store i64 %9241, i64* %RAX, align 8, !tbaa !2428
  %9242 = icmp ult i32 %9240, %9239
  %9243 = icmp ult i32 %9240, 1
  %9244 = or i1 %9242, %9243
  %9245 = zext i1 %9244 to i8
  %9246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9245, i8* %9246, align 1, !tbaa !2432
  %9247 = and i32 %9240, 255
  %9248 = call i32 @llvm.ctpop.i32(i32 %9247) #16
  %9249 = trunc i32 %9248 to i8
  %9250 = and i8 %9249, 1
  %9251 = xor i8 %9250, 1
  %9252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9251, i8* %9252, align 1, !tbaa !2446
  %9253 = xor i64 1, %9236
  %9254 = trunc i64 %9253 to i32
  %9255 = xor i32 %9254, %9240
  %9256 = lshr i32 %9255, 4
  %9257 = trunc i32 %9256 to i8
  %9258 = and i8 %9257, 1
  %9259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9258, i8* %9259, align 1, !tbaa !2447
  %9260 = icmp eq i32 %9240, 0
  %9261 = zext i1 %9260 to i8
  %9262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9261, i8* %9262, align 1, !tbaa !2448
  %9263 = lshr i32 %9240, 31
  %9264 = trunc i32 %9263 to i8
  %9265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9264, i8* %9265, align 1, !tbaa !2449
  %9266 = lshr i32 %9239, 31
  %9267 = xor i32 %9263, %9266
  %9268 = add nuw nsw i32 %9267, %9263
  %9269 = icmp eq i32 %9268, 2
  %9270 = zext i1 %9269 to i8
  %9271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9270, i8* %9271, align 1, !tbaa !2450
  %9272 = load i64, i64* %RBP
  %9273 = sub i64 %9272, 48
  %9274 = load i32, i32* %EAX
  %9275 = zext i32 %9274 to i64
  %9276 = load i64, i64* %PC
  %9277 = add i64 %9276, 3
  store i64 %9277, i64* %PC
  %9278 = inttoptr i64 %9273 to i32*
  store i32 %9274, i32* %9278
  %9279 = load i64, i64* %PC
  %9280 = sub i64 %9279, 429
  %9281 = load i64, i64* %PC
  %9282 = add i64 %9281, 5
  store i64 %9282, i64* %PC
  %9283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9280, i64* %9283, align 8, !tbaa !2428
  br label %block_4022cd

block_402298:                                     ; preds = %block_4021aa
  %9284 = load i64, i64* %PC
  %9285 = add i64 %9284, 5
  %9286 = load i64, i64* %PC
  %9287 = add i64 %9286, 5
  store i64 %9287, i64* %PC
  %9288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9285, i64* %9288, align 8, !tbaa !2428
  br label %block_40229d

block_402806:                                     ; preds = %block_4024a6
  %9289 = load i64, i64* %PC
  %9290 = add i64 %9289, 1
  store i64 %9290, i64* %PC
  %9291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9292 = load i64, i64* %9291, align 8, !tbaa !2428
  %9293 = add i64 %9292, 8
  %9294 = inttoptr i64 %9292 to i64*
  %9295 = load i64, i64* %9294
  store i64 %9295, i64* %RBP, align 8, !tbaa !2428
  store i64 %9293, i64* %9291, align 8, !tbaa !2428
  %9296 = load i64, i64* %PC
  %9297 = add i64 %9296, 1
  store i64 %9297, i64* %PC
  %9298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9300 = load i64, i64* %9299, align 8, !tbaa !2428
  %9301 = inttoptr i64 %9300 to i64*
  %9302 = load i64, i64* %9301
  store i64 %9302, i64* %9298, align 8, !tbaa !2428
  %9303 = add i64 %9300, 8
  store i64 %9303, i64* %9299, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_402175:                                     ; preds = %block_4020e9
  %9304 = load i64, i64* %PC
  %9305 = add i64 %9304, 5
  %9306 = load i64, i64* %PC
  %9307 = add i64 %9306, 5
  store i64 %9307, i64* %PC
  %9308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9305, i64* %9308, align 8, !tbaa !2428
  br label %block_40217a

block_402484:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_40247f
  %MEMORY.9 = phi %struct.Memory* [ %7119, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %MEMORY.1, %block_40247f ]
  %9309 = load i64, i64* %PC
  %9310 = add i64 %9309, 5
  store i64 %9310, i64* %PC
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %9311 = load i64, i64* %RBP
  %9312 = sub i64 %9311, 20
  %9313 = load i64, i64* %PC
  %9314 = add i64 %9313, 3
  store i64 %9314, i64* %PC
  %9315 = inttoptr i64 %9312 to i32*
  %9316 = load i32, i32* %9315
  %9317 = zext i32 %9316 to i64
  store i64 %9317, i64* %RCX, align 8, !tbaa !2428
  %9318 = load i64, i64* %RBP
  %9319 = sub i64 %9318, 72
  %9320 = load i32, i32* %EAX
  %9321 = zext i32 %9320 to i64
  %9322 = load i64, i64* %PC
  %9323 = add i64 %9322, 3
  store i64 %9323, i64* %PC
  %9324 = inttoptr i64 %9319 to i32*
  store i32 %9320, i32* %9324
  %9325 = load i32, i32* %ECX
  %9326 = zext i32 %9325 to i64
  %9327 = load i64, i64* %PC
  %9328 = add i64 %9327, 2
  store i64 %9328, i64* %PC
  %9329 = and i64 %9326, 4294967295
  store i64 %9329, i64* %RAX, align 8, !tbaa !2428
  %9330 = load i64, i64* %PC
  %9331 = add i64 %9330, 1
  store i64 %9331, i64* %PC
  %9332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %9333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %9334 = bitcast %union.anon* %9333 to i32*
  %9335 = load i32, i32* %9334, align 8, !tbaa !2452
  %9336 = sext i32 %9335 to i64
  %9337 = lshr i64 %9336, 32
  store i64 %9337, i64* %9332, align 8, !tbaa !2428
  %9338 = load i64, i64* %RBP
  %9339 = sub i64 %9338, 72
  %9340 = load i64, i64* %PC
  %9341 = add i64 %9340, 3
  store i64 %9341, i64* %PC
  %9342 = inttoptr i64 %9339 to i32*
  %9343 = load i32, i32* %9342
  %9344 = zext i32 %9343 to i64
  store i64 %9344, i64* %RCX, align 8, !tbaa !2428
  %9345 = load i32, i32* %ECX
  %9346 = zext i32 %9345 to i64
  %9347 = load i64, i64* %PC
  %9348 = add i64 %9347, 2
  store i64 %9348, i64* %PC
  %9349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %9350 = bitcast %union.anon* %9349 to i32*
  %9351 = load i32, i32* %9350, align 8, !tbaa !2452
  %9352 = zext i32 %9351 to i64
  %9353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %9354 = bitcast %union.anon* %9353 to i32*
  %9355 = load i32, i32* %9354, align 8, !tbaa !2452
  %9356 = zext i32 %9355 to i64
  %9357 = shl i64 %9346, 32
  %9358 = ashr exact i64 %9357, 32
  %9359 = shl nuw i64 %9356, 32
  %9360 = or i64 %9359, %9352
  %9361 = sdiv i64 %9360, %9358
  %9362 = shl i64 %9361, 32
  %9363 = ashr exact i64 %9362, 32
  %9364 = icmp eq i64 %9361, %9363
  br i1 %9364, label %9369, label %9365

; <label>:9365:                                   ; preds = %block_402484
  %9366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9367 = load i64, i64* %9366, align 8, !tbaa !2428
  %9368 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9367, %struct.Memory* %MEMORY.9) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:9369:                                   ; preds = %block_402484
  %9370 = srem i64 %9360, %9358
  %9371 = getelementptr inbounds %union.anon, %union.anon* %9349, i64 0, i32 0
  %9372 = and i64 %9361, 4294967295
  store i64 %9372, i64* %9371, align 8, !tbaa !2428
  %9373 = getelementptr inbounds %union.anon, %union.anon* %9353, i64 0, i32 0
  %9374 = and i64 %9370, 4294967295
  store i64 %9374, i64* %9373, align 8, !tbaa !2428
  %9375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9375, align 1, !tbaa !2432
  %9376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %9376, align 1, !tbaa !2446
  %9377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9377, align 1, !tbaa !2447
  %9378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9378, align 1, !tbaa !2448
  %9379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9379, align 1, !tbaa !2449
  %9380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9380, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %9365, %9369
  %9381 = phi %struct.Memory* [ %9368, %9365 ], [ %MEMORY.9, %9369 ]
  %9382 = load i64, i64* %RDX
  %9383 = load i64, i64* %PC
  %9384 = add i64 %9383, 3
  store i64 %9384, i64* %PC
  %9385 = trunc i64 %9382 to i32
  %9386 = add i32 16, %9385
  %9387 = zext i32 %9386 to i64
  store i64 %9387, i64* %RDX, align 8, !tbaa !2428
  %9388 = icmp ult i32 %9386, %9385
  %9389 = icmp ult i32 %9386, 16
  %9390 = or i1 %9388, %9389
  %9391 = zext i1 %9390 to i8
  %9392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9391, i8* %9392, align 1, !tbaa !2432
  %9393 = and i32 %9386, 255
  %9394 = call i32 @llvm.ctpop.i32(i32 %9393) #16
  %9395 = trunc i32 %9394 to i8
  %9396 = and i8 %9395, 1
  %9397 = xor i8 %9396, 1
  %9398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9397, i8* %9398, align 1, !tbaa !2446
  %9399 = xor i64 16, %9382
  %9400 = trunc i64 %9399 to i32
  %9401 = xor i32 %9400, %9386
  %9402 = lshr i32 %9401, 4
  %9403 = trunc i32 %9402 to i8
  %9404 = and i8 %9403, 1
  %9405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9404, i8* %9405, align 1, !tbaa !2447
  %9406 = icmp eq i32 %9386, 0
  %9407 = zext i1 %9406 to i8
  %9408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9407, i8* %9408, align 1, !tbaa !2448
  %9409 = lshr i32 %9386, 31
  %9410 = trunc i32 %9409 to i8
  %9411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9410, i8* %9411, align 1, !tbaa !2449
  %9412 = lshr i32 %9385, 31
  %9413 = xor i32 %9409, %9412
  %9414 = add nuw nsw i32 %9413, %9409
  %9415 = icmp eq i32 %9414, 2
  %9416 = zext i1 %9415 to i8
  %9417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9416, i8* %9417, align 1, !tbaa !2450
  %9418 = load i64, i64* %RBP
  %9419 = sub i64 %9418, 52
  %9420 = load i32, i32* %EDX
  %9421 = zext i32 %9420 to i64
  %9422 = load i64, i64* %PC
  %9423 = add i64 %9422, 3
  store i64 %9423, i64* %PC
  %9424 = inttoptr i64 %9419 to i32*
  store i32 %9420, i32* %9424
  %9425 = load i64, i64* %RBP
  %9426 = sub i64 %9425, 52
  %9427 = load i64, i64* %PC
  %9428 = add i64 %9427, 3
  store i64 %9428, i64* %PC
  %9429 = inttoptr i64 %9426 to i32*
  %9430 = load i32, i32* %9429
  %9431 = zext i32 %9430 to i64
  store i64 %9431, i64* %RDX, align 8, !tbaa !2428
  %9432 = load i64, i64* %RDX
  %9433 = load i64, i64* %PC
  %9434 = add i64 %9433, 3
  store i64 %9434, i64* %PC
  %9435 = trunc i64 %9432 to i32
  %9436 = sub i32 %9435, 1
  %9437 = zext i32 %9436 to i64
  store i64 %9437, i64* %RDX, align 8, !tbaa !2428
  %9438 = icmp ult i32 %9435, 1
  %9439 = zext i1 %9438 to i8
  %9440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9439, i8* %9440, align 1, !tbaa !2432
  %9441 = and i32 %9436, 255
  %9442 = call i32 @llvm.ctpop.i32(i32 %9441) #16
  %9443 = trunc i32 %9442 to i8
  %9444 = and i8 %9443, 1
  %9445 = xor i8 %9444, 1
  %9446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9445, i8* %9446, align 1, !tbaa !2446
  %9447 = xor i64 1, %9432
  %9448 = trunc i64 %9447 to i32
  %9449 = xor i32 %9448, %9436
  %9450 = lshr i32 %9449, 4
  %9451 = trunc i32 %9450 to i8
  %9452 = and i8 %9451, 1
  %9453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9452, i8* %9453, align 1, !tbaa !2447
  %9454 = icmp eq i32 %9436, 0
  %9455 = zext i1 %9454 to i8
  %9456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9455, i8* %9456, align 1, !tbaa !2448
  %9457 = lshr i32 %9436, 31
  %9458 = trunc i32 %9457 to i8
  %9459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9458, i8* %9459, align 1, !tbaa !2449
  %9460 = lshr i32 %9435, 31
  %9461 = xor i32 %9457, %9460
  %9462 = add nuw nsw i32 %9461, %9460
  %9463 = icmp eq i32 %9462, 2
  %9464 = zext i1 %9463 to i8
  %9465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9464, i8* %9465, align 1, !tbaa !2450
  %9466 = load i64, i64* %RBP
  %9467 = sub i64 %9466, 44
  %9468 = load i32, i32* %EDX
  %9469 = zext i32 %9468 to i64
  %9470 = load i64, i64* %PC
  %9471 = add i64 %9470, 3
  store i64 %9471, i64* %PC
  %9472 = inttoptr i64 %9467 to i32*
  store i32 %9468, i32* %9472
  br label %block_4024a6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400600_what_date(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400600:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %31, align 8, !tbaa !2428
  %36 = add i64 %33, 8
  store i64 %36, i64* %32, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005c0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %16 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %15, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %16 to %"class.std::bitset"*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %18 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %17, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %18 to %"class.std::bitset"*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %20 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %19, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %20 to %union.vec128_t*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %22 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %21, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %22 to %union.vec128_t*
  %23 = load i64, i64* %RBP
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 1
  store i64 %25, i64* %PC
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %27 = load i64, i64* %26, align 8, !tbaa !2428
  %28 = add i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %23, i64* %29
  store i64 %28, i64* %26, align 8, !tbaa !2428
  %30 = load i64, i64* %RSP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 3
  store i64 %32, i64* %PC
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  %33 = load i64, i64* %RSP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 16
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %37 = icmp ult i64 %33, 16
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 16, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = load i64, i64* %PC
  %66 = sub i64 %65, 296
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 5
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %66, i64* %75, align 8, !tbaa !2428
  %76 = load i64, i64* %PC
  %77 = call %struct.Memory* @ext_653140_clock(%struct.State* %0, i64 %76, %struct.Memory* %2)
  %78 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 8
  store i64 %80, i64* %PC
  %81 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 4) to float*)
  %82 = bitcast i8* %78 to float*
  store float %81, float* %82, align 1, !tbaa !2453
  %83 = getelementptr inbounds i8, i8* %78, i64 4
  %84 = bitcast i8* %83 to float*
  store float 0.000000e+00, float* %84, align 1, !tbaa !2453
  %85 = getelementptr inbounds i8, i8* %78, i64 8
  %86 = bitcast i8* %85 to float*
  store float 0.000000e+00, float* %86, align 1, !tbaa !2453
  %87 = getelementptr inbounds i8, i8* %78, i64 12
  %88 = bitcast i8* %87 to float*
  store float 0.000000e+00, float* %88, align 1, !tbaa !2453
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 16
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %102 = load i64, i64* %RAX
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 5
  store i64 %104, i64* %PC
  %105 = bitcast i8* %101 to <2 x i32>*
  %106 = load <2 x i32>, <2 x i32>* %105, align 1
  %107 = getelementptr inbounds i8, i8* %101, i64 8
  %108 = bitcast i8* %107 to <2 x i32>*
  %109 = load <2 x i32>, <2 x i32>* %108, align 1
  %110 = sitofp i64 %102 to float
  %111 = bitcast i8* %101 to float*
  store float %110, float* %111, align 1, !tbaa !2453
  %112 = extractelement <2 x i32> %106, i32 1
  %113 = getelementptr inbounds i8, i8* %101, i64 4
  %114 = bitcast i8* %113 to i32*
  store i32 %112, i32* %114, align 1, !tbaa !2453
  %115 = extractelement <2 x i32> %109, i32 0
  %116 = bitcast i8* %107 to i32*
  store i32 %115, i32* %116, align 1, !tbaa !2453
  %117 = extractelement <2 x i32> %109, i32 1
  %118 = getelementptr inbounds i8, i8* %101, i64 12
  %119 = bitcast i8* %118 to i32*
  store i32 %117, i32* %119, align 1, !tbaa !2453
  %120 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %121 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %122 = bitcast %union.vec128_t* %XMM0 to i8*
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = bitcast i8* %121 to <2 x float>*
  %126 = load <2 x float>, <2 x float>* %125, align 1
  %127 = getelementptr inbounds i8, i8* %121, i64 8
  %128 = bitcast i8* %127 to <2 x i32>*
  %129 = load <2 x i32>, <2 x i32>* %128, align 1
  %130 = bitcast i8* %122 to <2 x float>*
  %131 = load <2 x float>, <2 x float>* %130, align 1
  %132 = extractelement <2 x float> %126, i32 0
  %133 = extractelement <2 x float> %131, i32 0
  %134 = fdiv float %132, %133
  %135 = bitcast i8* %120 to float*
  store float %134, float* %135, align 1, !tbaa !2453
  %136 = bitcast <2 x float> %126 to <2 x i32>
  %137 = extractelement <2 x i32> %136, i32 1
  %138 = getelementptr inbounds i8, i8* %120, i64 4
  %139 = bitcast i8* %138 to i32*
  store i32 %137, i32* %139, align 1, !tbaa !2453
  %140 = extractelement <2 x i32> %129, i32 0
  %141 = getelementptr inbounds i8, i8* %120, i64 8
  %142 = bitcast i8* %141 to i32*
  store i32 %140, i32* %142, align 1, !tbaa !2453
  %143 = extractelement <2 x i32> %129, i32 1
  %144 = getelementptr inbounds i8, i8* %120, i64 12
  %145 = bitcast i8* %144 to i32*
  store i32 %143, i32* %145, align 1, !tbaa !2453
  %146 = load i64, i64* %RBP
  %147 = sub i64 %146, 4
  %148 = bitcast %union.vec128_t* %XMM1 to i8*
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  store i64 %150, i64* %PC
  %151 = bitcast i8* %148 to <2 x float>*
  %152 = load <2 x float>, <2 x float>* %151, align 1
  %153 = extractelement <2 x float> %152, i32 0
  %154 = inttoptr i64 %147 to float*
  store float %153, float* %154
  %155 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 4
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to float*
  %161 = load float, float* %160
  %162 = bitcast i8* %155 to float*
  store float %161, float* %162, align 1, !tbaa !2453
  %163 = getelementptr inbounds i8, i8* %155, i64 4
  %164 = bitcast i8* %163 to float*
  store float 0.000000e+00, float* %164, align 1, !tbaa !2453
  %165 = getelementptr inbounds i8, i8* %155, i64 8
  %166 = bitcast i8* %165 to float*
  store float 0.000000e+00, float* %166, align 1, !tbaa !2453
  %167 = getelementptr inbounds i8, i8* %155, i64 12
  %168 = bitcast i8* %167 to float*
  store float 0.000000e+00, float* %168, align 1, !tbaa !2453
  %169 = load i64, i64* %RSP
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 4
  store i64 %171, i64* %PC
  %172 = add i64 16, %169
  store i64 %172, i64* %RSP, align 8, !tbaa !2428
  %173 = icmp ult i64 %172, %169
  %174 = icmp ult i64 %172, 16
  %175 = or i1 %173, %174
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %176, i8* %177, align 1, !tbaa !2432
  %178 = trunc i64 %172 to i32
  %179 = and i32 %178, 255
  %180 = call i32 @llvm.ctpop.i32(i32 %179) #16
  %181 = trunc i32 %180 to i8
  %182 = and i8 %181, 1
  %183 = xor i8 %182, 1
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %183, i8* %184, align 1, !tbaa !2446
  %185 = xor i64 16, %169
  %186 = xor i64 %185, %172
  %187 = lshr i64 %186, 4
  %188 = trunc i64 %187 to i8
  %189 = and i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %189, i8* %190, align 1, !tbaa !2447
  %191 = icmp eq i64 %172, 0
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %192, i8* %193, align 1, !tbaa !2448
  %194 = lshr i64 %172, 63
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %195, i8* %196, align 1, !tbaa !2449
  %197 = lshr i64 %169, 63
  %198 = xor i64 %194, %197
  %199 = add nuw nsw i64 %198, %194
  %200 = icmp eq i64 %199, 2
  %201 = zext i1 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %201, i8* %202, align 1, !tbaa !2450
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 1
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %RBP, align 8, !tbaa !2428
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 1
  store i64 %211, i64* %PC
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %214 = load i64, i64* %213, align 8, !tbaa !2428
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %212, align 8, !tbaa !2428
  %217 = add i64 %214, 8
  store i64 %217, i64* %213, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline
define %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400580:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4005a0, label %block_400589

block_4005a0:                                     ; preds = %block_400580
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400589:                                     ; preds = %block_400580
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400510_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bb0_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402bb0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i32, i32* %EDI
  %57 = zext i32 %56 to i64
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %60
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 16
  %63 = load i64, i64* %RSI
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 20
  %69 = load i32, i32* %EDX
  %70 = zext i32 %69 to i64
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %73
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 8
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %75 to i32*
  %79 = load i32, i32* %78
  %80 = sub i32 %79, 1
  %81 = icmp ult i32 %79, 1
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %82, i8* %83, align 1, !tbaa !2432
  %84 = and i32 %80, 255
  %85 = call i32 @llvm.ctpop.i32(i32 %84) #16
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = xor i8 %87, 1
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %88, i8* %89, align 1, !tbaa !2446
  %90 = xor i32 %79, 1
  %91 = xor i32 %90, %80
  %92 = lshr i32 %91, 4
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %94, i8* %95, align 1, !tbaa !2447
  %96 = icmp eq i32 %80, 0
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %97, i8* %98, align 1, !tbaa !2448
  %99 = lshr i32 %80, 31
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %100, i8* %101, align 1, !tbaa !2449
  %102 = lshr i32 %79, 31
  %103 = xor i32 %99, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %106, i8* %107, align 1, !tbaa !2450
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 18
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 6
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %115 = load i8, i8* %114, align 1, !tbaa !2449
  %116 = icmp ne i8 %115, 0
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %118 = load i8, i8* %117, align 1, !tbaa !2450
  %119 = icmp ne i8 %118, 0
  %120 = xor i1 %116, %119
  %121 = xor i1 %120, true
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %124 = select i1 %120, i64 %111, i64 %109
  store i64 %124, i64* %123, align 8, !tbaa !2428
  %125 = load i8, i8* %BRANCH_TAKEN
  %126 = icmp eq i8 %125, 1
  %127 = load i64, i64* %RBP
  br i1 %126, label %block_402bd4, label %block_402bc8

block_402d5f:                                     ; preds = %block_402bc8, %block_402bde, %block_402d59
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_402d59 ], [ %2, %block_402bde ], [ %2, %block_402bc8 ]
  %128 = load i64, i64* %RBP
  %129 = sub i64 %128, 4
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = inttoptr i64 %129 to i32*
  %133 = load i32, i32* %132
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 1
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = add i64 %138, 8
  %140 = inttoptr i64 %138 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %RBP, align 8, !tbaa !2428
  store i64 %139, i64* %137, align 8, !tbaa !2428
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 1
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147
  store i64 %148, i64* %144, align 8, !tbaa !2428
  %149 = add i64 %146, 8
  store i64 %149, i64* %145, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402d54:                                     ; preds = %block_402cdb
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 5
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %151, i64* %154, align 8, !tbaa !2428
  br label %block_402d59

block_402d59:                                     ; preds = %block_402ca8, %block_402d54
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402d54 ], [ %MEMORY.4, %block_402ca8 ]
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 36
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  %160 = load i32, i32* %159
  %161 = zext i32 %160 to i64
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP
  %163 = sub i64 %162, 4
  %164 = load i32, i32* %EAX
  %165 = zext i32 %164 to i64
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 3
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %163 to i32*
  store i32 %164, i32* %168
  br label %block_402d5f

block_402c37:                                     ; preds = %block_402c2b
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 32
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i32*
  %180 = load i32, i32* %179
  %181 = sext i32 %180 to i64
  store i64 %181, i64* %RCX, align 8, !tbaa !2428
  %182 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %183 = load i64, i64* %RAX
  %184 = load i64, i64* %RCX
  %185 = mul i64 %184, 4
  %186 = add i64 %185, %183
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to float*
  %190 = load float, float* %189
  %191 = bitcast i8* %182 to float*
  store float %190, float* %191, align 1, !tbaa !2453
  %192 = getelementptr inbounds i8, i8* %182, i64 4
  %193 = bitcast i8* %192 to float*
  store float 0.000000e+00, float* %193, align 1, !tbaa !2453
  %194 = getelementptr inbounds i8, i8* %182, i64 8
  %195 = bitcast i8* %194 to float*
  store float 0.000000e+00, float* %195, align 1, !tbaa !2453
  %196 = getelementptr inbounds i8, i8* %182, i64 12
  %197 = bitcast i8* %196 to float*
  store float 0.000000e+00, float* %197, align 1, !tbaa !2453
  %198 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %199 = bitcast %union.vec128_t* %XMM0 to i8*
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC
  %202 = bitcast i8* %199 to <2 x float>*
  %203 = load <2 x float>, <2 x float>* %202, align 1
  %204 = extractelement <2 x float> %203, i32 0
  %205 = fpext float %204 to double
  %206 = bitcast i8* %198 to double*
  store double %205, double* %206, align 1, !tbaa !2455
  %207 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 7
  store i64 %209, i64* %PC
  %210 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %211 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %212 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %213 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %214 = bitcast i8* %207 to float*
  store float %210, float* %214, align 1, !tbaa !2453
  %215 = getelementptr inbounds i8, i8* %207, i64 4
  %216 = bitcast i8* %215 to float*
  store float %211, float* %216, align 1, !tbaa !2453
  %217 = getelementptr inbounds i8, i8* %207, i64 8
  %218 = bitcast i8* %217 to float*
  store float %212, float* %218, align 1, !tbaa !2453
  %219 = getelementptr inbounds i8, i8* %207, i64 12
  %220 = bitcast i8* %219 to float*
  store float %213, float* %220, align 1, !tbaa !2453
  %221 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %222 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %223 = bitcast %union.vec128_t* %XMM1 to i8*
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 4
  store i64 %225, i64* %PC
  %226 = bitcast i8* %222 to i64*
  %227 = load i64, i64* %226, align 1
  %228 = getelementptr inbounds i8, i8* %222, i64 8
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 1
  %231 = bitcast i8* %223 to i64*
  %232 = load i64, i64* %231, align 1
  %233 = getelementptr inbounds i8, i8* %223, i64 8
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = and i64 %232, %227
  %237 = and i64 %235, %230
  %238 = trunc i64 %236 to i32
  %239 = lshr i64 %236, 32
  %240 = trunc i64 %239 to i32
  %241 = bitcast i8* %221 to i32*
  store i32 %238, i32* %241, align 1, !tbaa !2452
  %242 = getelementptr inbounds i8, i8* %221, i64 4
  %243 = bitcast i8* %242 to i32*
  store i32 %240, i32* %243, align 1, !tbaa !2452
  %244 = trunc i64 %237 to i32
  %245 = getelementptr inbounds i8, i8* %221, i64 8
  %246 = bitcast i8* %245 to i32*
  store i32 %244, i32* %246, align 1, !tbaa !2452
  %247 = lshr i64 %237, 32
  %248 = trunc i64 %247 to i32
  %249 = getelementptr inbounds i8, i8* %221, i64 12
  %250 = bitcast i8* %249 to i32*
  store i32 %248, i32* %250, align 1, !tbaa !2452
  %251 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %252 = load i64, i64* %RBP
  %253 = sub i64 %252, 24
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 5
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %253 to float*
  %257 = load float, float* %256
  %258 = bitcast i8* %251 to float*
  store float %257, float* %258, align 1, !tbaa !2453
  %259 = getelementptr inbounds i8, i8* %251, i64 4
  %260 = bitcast i8* %259 to float*
  store float 0.000000e+00, float* %260, align 1, !tbaa !2453
  %261 = getelementptr inbounds i8, i8* %251, i64 8
  %262 = bitcast i8* %261 to float*
  store float 0.000000e+00, float* %262, align 1, !tbaa !2453
  %263 = getelementptr inbounds i8, i8* %251, i64 12
  %264 = bitcast i8* %263 to float*
  store float 0.000000e+00, float* %264, align 1, !tbaa !2453
  %265 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %266 = bitcast %union.vec128_t* %XMM1 to i8*
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC
  %269 = bitcast i8* %266 to <2 x float>*
  %270 = load <2 x float>, <2 x float>* %269, align 1
  %271 = extractelement <2 x float> %270, i32 0
  %272 = fpext float %271 to double
  %273 = bitcast i8* %265 to double*
  store double %272, double* %273, align 1, !tbaa !2455
  %274 = bitcast %union.vec128_t* %XMM0 to i8*
  %275 = bitcast %union.vec128_t* %XMM1 to i8*
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 4
  store i64 %277, i64* %PC
  %278 = bitcast i8* %274 to double*
  %279 = load double, double* %278, align 1
  %280 = bitcast i8* %275 to double*
  %281 = load double, double* %280, align 1
  %282 = fcmp uno double %279, %281
  br i1 %282, label %283, label %295

; <label>:283:                                    ; preds = %block_402c37
  %284 = fadd double %279, %281
  %285 = bitcast double %284 to i64
  %286 = and i64 %285, 9221120237041090560
  %287 = icmp eq i64 %286, 9218868437227405312
  %288 = and i64 %285, 2251799813685247
  %289 = icmp ne i64 %288, 0
  %290 = and i1 %287, %289
  br i1 %290, label %291, label %301

; <label>:291:                                    ; preds = %283
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %293 = load i64, i64* %292, align 8, !tbaa !2428
  %294 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %293, %struct.Memory* %MEMORY.4) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:295:                                    ; preds = %block_402c37
  %296 = fcmp ogt double %279, %281
  br i1 %296, label %301, label %297

; <label>:297:                                    ; preds = %295
  %298 = fcmp olt double %279, %281
  br i1 %298, label %301, label %299

; <label>:299:                                    ; preds = %297
  %300 = fcmp oeq double %279, %281
  br i1 %300, label %301, label %308

; <label>:301:                                    ; preds = %299, %297, %295, %283
  %302 = phi i8 [ 0, %295 ], [ 0, %297 ], [ 1, %299 ], [ 1, %283 ]
  %303 = phi i8 [ 0, %295 ], [ 0, %297 ], [ 0, %299 ], [ 1, %283 ]
  %304 = phi i8 [ 0, %295 ], [ 1, %297 ], [ 0, %299 ], [ 1, %283 ]
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %302, i8* %305, align 1, !tbaa !2451
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %303, i8* %306, align 1, !tbaa !2451
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %304, i8* %307, align 1, !tbaa !2451
  br label %308

; <label>:308:                                    ; preds = %301, %299
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %309, align 1, !tbaa !2451
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %310, align 1, !tbaa !2451
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %311, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %291, %308
  %312 = phi %struct.Memory* [ %294, %291 ], [ %MEMORY.4, %308 ]
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 49
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 6
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 6
  store i64 %318, i64* %PC
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %320 = load i8, i8* %319, align 1, !tbaa !2432
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %322 = load i8, i8* %321, align 1, !tbaa !2448
  %323 = or i8 %322, %320
  %324 = icmp ne i8 %323, 0
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %327 = select i1 %324, i64 %314, i64 %316
  store i64 %327, i64* %326, align 8, !tbaa !2428
  %328 = load i8, i8* %BRANCH_TAKEN
  %329 = icmp eq i8 %328, 1
  br i1 %329, label %block_402c91, label %block_402c66

block_402d16:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 28
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 3
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i32*
  %335 = load i32, i32* %334
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 36
  %339 = load i32, i32* %EAX
  %340 = zext i32 %339 to i64
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 3
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %338 to i32*
  store i32 %339, i32* %343
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 16
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 4
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i64*
  %349 = load i64, i64* %348
  store i64 %349, i64* %RCX, align 8, !tbaa !2428
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 28
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 4
  store i64 %353, i64* %PC
  %354 = inttoptr i64 %351 to i32*
  %355 = load i32, i32* %354
  %356 = sext i32 %355 to i64
  store i64 %356, i64* %RDX, align 8, !tbaa !2428
  %357 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %358 = load i64, i64* %RCX
  %359 = load i64, i64* %RDX
  %360 = mul i64 %359, 4
  %361 = add i64 %360, %358
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 5
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to float*
  %365 = load float, float* %364
  %366 = bitcast i8* %357 to float*
  store float %365, float* %366, align 1, !tbaa !2453
  %367 = getelementptr inbounds i8, i8* %357, i64 4
  %368 = bitcast i8* %367 to float*
  store float 0.000000e+00, float* %368, align 1, !tbaa !2453
  %369 = getelementptr inbounds i8, i8* %357, i64 8
  %370 = bitcast i8* %369 to float*
  store float 0.000000e+00, float* %370, align 1, !tbaa !2453
  %371 = getelementptr inbounds i8, i8* %357, i64 12
  %372 = bitcast i8* %371 to float*
  store float 0.000000e+00, float* %372, align 1, !tbaa !2453
  %373 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %374 = bitcast %union.vec128_t* %XMM0 to i8*
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = bitcast i8* %374 to <2 x float>*
  %378 = load <2 x float>, <2 x float>* %377, align 1
  %379 = extractelement <2 x float> %378, i32 0
  %380 = fpext float %379 to double
  %381 = bitcast i8* %373 to double*
  store double %380, double* %381, align 1, !tbaa !2455
  %382 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 7
  store i64 %384, i64* %PC
  %385 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %386 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %387 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %388 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %389 = bitcast i8* %382 to float*
  store float %385, float* %389, align 1, !tbaa !2453
  %390 = getelementptr inbounds i8, i8* %382, i64 4
  %391 = bitcast i8* %390 to float*
  store float %386, float* %391, align 1, !tbaa !2453
  %392 = getelementptr inbounds i8, i8* %382, i64 8
  %393 = bitcast i8* %392 to float*
  store float %387, float* %393, align 1, !tbaa !2453
  %394 = getelementptr inbounds i8, i8* %382, i64 12
  %395 = bitcast i8* %394 to float*
  store float %388, float* %395, align 1, !tbaa !2453
  %396 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %397 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %398 = bitcast %union.vec128_t* %XMM1 to i8*
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = bitcast i8* %397 to i64*
  %402 = load i64, i64* %401, align 1
  %403 = getelementptr inbounds i8, i8* %397, i64 8
  %404 = bitcast i8* %403 to i64*
  %405 = load i64, i64* %404, align 1
  %406 = bitcast i8* %398 to i64*
  %407 = load i64, i64* %406, align 1
  %408 = getelementptr inbounds i8, i8* %398, i64 8
  %409 = bitcast i8* %408 to i64*
  %410 = load i64, i64* %409, align 1
  %411 = and i64 %407, %402
  %412 = and i64 %410, %405
  %413 = trunc i64 %411 to i32
  %414 = lshr i64 %411, 32
  %415 = trunc i64 %414 to i32
  %416 = bitcast i8* %396 to i32*
  store i32 %413, i32* %416, align 1, !tbaa !2452
  %417 = getelementptr inbounds i8, i8* %396, i64 4
  %418 = bitcast i8* %417 to i32*
  store i32 %415, i32* %418, align 1, !tbaa !2452
  %419 = trunc i64 %412 to i32
  %420 = getelementptr inbounds i8, i8* %396, i64 8
  %421 = bitcast i8* %420 to i32*
  store i32 %419, i32* %421, align 1, !tbaa !2452
  %422 = lshr i64 %412, 32
  %423 = trunc i64 %422 to i32
  %424 = getelementptr inbounds i8, i8* %396, i64 12
  %425 = bitcast i8* %424 to i32*
  store i32 %423, i32* %425, align 1, !tbaa !2452
  %426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %427 = bitcast %union.vec128_t* %XMM0 to i8*
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC
  %430 = bitcast i8* %426 to <2 x i32>*
  %431 = load <2 x i32>, <2 x i32>* %430, align 1
  %432 = getelementptr inbounds i8, i8* %426, i64 8
  %433 = bitcast i8* %432 to <2 x i32>*
  %434 = load <2 x i32>, <2 x i32>* %433, align 1
  %435 = bitcast i8* %427 to double*
  %436 = load double, double* %435, align 1
  %437 = fptrunc double %436 to float
  %438 = bitcast i8* %426 to float*
  store float %437, float* %438, align 1, !tbaa !2453
  %439 = extractelement <2 x i32> %431, i32 1
  %440 = getelementptr inbounds i8, i8* %426, i64 4
  %441 = bitcast i8* %440 to i32*
  store i32 %439, i32* %441, align 1, !tbaa !2453
  %442 = extractelement <2 x i32> %434, i32 0
  %443 = bitcast i8* %432 to i32*
  store i32 %442, i32* %443, align 1, !tbaa !2453
  %444 = extractelement <2 x i32> %434, i32 1
  %445 = getelementptr inbounds i8, i8* %426, i64 12
  %446 = bitcast i8* %445 to i32*
  store i32 %444, i32* %446, align 1, !tbaa !2453
  %447 = load i64, i64* %RBP
  %448 = sub i64 %447, 24
  %449 = bitcast %union.vec128_t* %XMM0 to i8*
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 5
  store i64 %451, i64* %PC
  %452 = bitcast i8* %449 to <2 x float>*
  %453 = load <2 x float>, <2 x float>* %452, align 1
  %454 = extractelement <2 x float> %453, i32 0
  %455 = inttoptr i64 %448 to float*
  store float %454, float* %455
  br label %block_402d41

block_402bd4:                                     ; preds = %block_402bb0
  %456 = sub i64 %127, 8
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 4
  store i64 %458, i64* %PC
  %459 = inttoptr i64 %456 to i32*
  %460 = load i32, i32* %459
  %461 = sub i32 %460, 1
  %462 = icmp ult i32 %460, 1
  %463 = zext i1 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %463, i8* %464, align 1, !tbaa !2432
  %465 = and i32 %461, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #16
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i32 %460, 1
  %472 = xor i32 %471, %461
  %473 = lshr i32 %472, 4
  %474 = trunc i32 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i32 %461, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i32 %461, 31
  %481 = trunc i32 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i32 %460, 31
  %484 = xor i32 %480, %483
  %485 = add nuw nsw i32 %484, %483
  %486 = icmp eq i32 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 18
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 6
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 6
  store i64 %494, i64* %PC
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %496 = load i8, i8* %495, align 1, !tbaa !2448
  %497 = icmp eq i8 %496, 0
  %498 = zext i1 %497 to i8
  store i8 %498, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %500 = select i1 %497, i64 %490, i64 %492
  store i64 %500, i64* %499, align 8, !tbaa !2428
  %501 = load i8, i8* %BRANCH_TAKEN
  %502 = icmp eq i8 %501, 1
  %503 = load i64, i64* %RBP
  br i1 %502, label %block_402bea, label %block_402bde

block_402ca8:                                     ; preds = %block_402c2b
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 177
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 5
  store i64 %507, i64* %PC
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %505, i64* %508, align 8, !tbaa !2428
  br label %block_402d59

block_402c91:                                     ; preds = %block_402c66, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %MEMORY.2 = phi %struct.Memory* [ %312, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %312, %block_402c66 ]
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 32
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RAX, align 8, !tbaa !2428
  %516 = load i64, i64* %RAX
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 20
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 3
  store i64 %520, i64* %PC
  %521 = trunc i64 %516 to i32
  %522 = inttoptr i64 %518 to i32*
  %523 = load i32, i32* %522
  %524 = add i32 %523, %521
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = icmp ult i32 %524, %521
  %527 = icmp ult i32 %524, %523
  %528 = or i1 %526, %527
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %529, i8* %530, align 1, !tbaa !2432
  %531 = and i32 %524, 255
  %532 = call i32 @llvm.ctpop.i32(i32 %531) #16
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = xor i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %535, i8* %536, align 1, !tbaa !2446
  %537 = xor i32 %523, %521
  %538 = xor i32 %537, %524
  %539 = lshr i32 %538, 4
  %540 = trunc i32 %539 to i8
  %541 = and i8 %540, 1
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %541, i8* %542, align 1, !tbaa !2447
  %543 = icmp eq i32 %524, 0
  %544 = zext i1 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %544, i8* %545, align 1, !tbaa !2448
  %546 = lshr i32 %524, 31
  %547 = trunc i32 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %547, i8* %548, align 1, !tbaa !2449
  %549 = lshr i32 %521, 31
  %550 = lshr i32 %523, 31
  %551 = xor i32 %546, %549
  %552 = xor i32 %546, %550
  %553 = add nuw nsw i32 %551, %552
  %554 = icmp eq i32 %553, 2
  %555 = zext i1 %554 to i8
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %555, i8* %556, align 1, !tbaa !2450
  %557 = load i64, i64* %RBP
  %558 = sub i64 %557, 32
  %559 = load i32, i32* %EAX
  %560 = zext i32 %559 to i64
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 3
  store i64 %562, i64* %PC
  %563 = inttoptr i64 %558 to i32*
  store i32 %559, i32* %563
  %564 = load i64, i64* %RBP
  %565 = sub i64 %564, 28
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 3
  store i64 %567, i64* %PC
  %568 = inttoptr i64 %565 to i32*
  %569 = load i32, i32* %568
  %570 = zext i32 %569 to i64
  store i64 %570, i64* %RAX, align 8, !tbaa !2428
  %571 = load i64, i64* %RAX
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 3
  store i64 %573, i64* %PC
  %574 = trunc i64 %571 to i32
  %575 = add i32 1, %574
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %RAX, align 8, !tbaa !2428
  %577 = icmp ult i32 %575, %574
  %578 = icmp ult i32 %575, 1
  %579 = or i1 %577, %578
  %580 = zext i1 %579 to i8
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %580, i8* %581, align 1, !tbaa !2432
  %582 = and i32 %575, 255
  %583 = call i32 @llvm.ctpop.i32(i32 %582) #16
  %584 = trunc i32 %583 to i8
  %585 = and i8 %584, 1
  %586 = xor i8 %585, 1
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %586, i8* %587, align 1, !tbaa !2446
  %588 = xor i64 1, %571
  %589 = trunc i64 %588 to i32
  %590 = xor i32 %589, %575
  %591 = lshr i32 %590, 4
  %592 = trunc i32 %591 to i8
  %593 = and i8 %592, 1
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %593, i8* %594, align 1, !tbaa !2447
  %595 = icmp eq i32 %575, 0
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %596, i8* %597, align 1, !tbaa !2448
  %598 = lshr i32 %575, 31
  %599 = trunc i32 %598 to i8
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %599, i8* %600, align 1, !tbaa !2449
  %601 = lshr i32 %574, 31
  %602 = xor i32 %598, %601
  %603 = add nuw nsw i32 %602, %598
  %604 = icmp eq i32 %603, 2
  %605 = zext i1 %604 to i8
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %605, i8* %606, align 1, !tbaa !2450
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 28
  %609 = load i32, i32* %EAX
  %610 = zext i32 %609 to i64
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 3
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %608 to i32*
  store i32 %609, i32* %613
  %614 = load i64, i64* %PC
  %615 = sub i64 %614, 120
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  store i64 %617, i64* %PC
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %615, i64* %618, align 8, !tbaa !2428
  br label %block_402c2b

block_402cdb:                                     ; preds = %block_402d41, %block_402cad
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402cad ], [ %MEMORY.5, %block_402d41 ]
  %619 = load i64, i64* %RBP
  %620 = sub i64 %619, 28
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 3
  store i64 %622, i64* %PC
  %623 = inttoptr i64 %620 to i32*
  %624 = load i32, i32* %623
  %625 = zext i32 %624 to i64
  store i64 %625, i64* %RAX, align 8, !tbaa !2428
  %626 = load i32, i32* %EAX
  %627 = zext i32 %626 to i64
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 8
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 3
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  %633 = load i32, i32* %632
  %634 = sub i32 %626, %633
  %635 = icmp ult i32 %626, %633
  %636 = zext i1 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %636, i8* %637, align 1, !tbaa !2432
  %638 = and i32 %634, 255
  %639 = call i32 @llvm.ctpop.i32(i32 %638) #16
  %640 = trunc i32 %639 to i8
  %641 = and i8 %640, 1
  %642 = xor i8 %641, 1
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %642, i8* %643, align 1, !tbaa !2446
  %644 = xor i32 %633, %626
  %645 = xor i32 %644, %634
  %646 = lshr i32 %645, 4
  %647 = trunc i32 %646 to i8
  %648 = and i8 %647, 1
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %648, i8* %649, align 1, !tbaa !2447
  %650 = icmp eq i32 %634, 0
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %651, i8* %652, align 1, !tbaa !2448
  %653 = lshr i32 %634, 31
  %654 = trunc i32 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %654, i8* %655, align 1, !tbaa !2449
  %656 = lshr i32 %626, 31
  %657 = lshr i32 %633, 31
  %658 = xor i32 %657, %656
  %659 = xor i32 %653, %656
  %660 = add nuw nsw i32 %659, %658
  %661 = icmp eq i32 %660, 2
  %662 = zext i1 %661 to i8
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %662, i8* %663, align 1, !tbaa !2450
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 115
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 6
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 6
  store i64 %669, i64* %PC
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %671 = load i8, i8* %670, align 1, !tbaa !2449
  %672 = icmp ne i8 %671, 0
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %674 = load i8, i8* %673, align 1, !tbaa !2450
  %675 = icmp ne i8 %674, 0
  %676 = xor i1 %672, %675
  %677 = xor i1 %676, true
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %680 = select i1 %676, i64 %667, i64 %665
  store i64 %680, i64* %679, align 8, !tbaa !2428
  %681 = load i8, i8* %BRANCH_TAKEN
  %682 = icmp eq i8 %681, 1
  br i1 %682, label %block_402d54, label %block_402ce7

block_402bde:                                     ; preds = %block_402bd4
  %683 = sub i64 %503, 4
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 7
  store i64 %685, i64* %PC
  %686 = inttoptr i64 %683 to i32*
  store i32 0, i32* %686
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 378
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 5
  store i64 %690, i64* %PC
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %688, i64* %691, align 8, !tbaa !2428
  br label %block_402d5f

block_402cad:                                     ; preds = %block_402bea
  %692 = sub i64 %922, 36
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 7
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i32*
  store i32 0, i32* %695
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 16
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 4
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i64*
  %701 = load i64, i64* %700
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %703 = load i64, i64* %RAX
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 4
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %703 to float*
  %707 = load float, float* %706
  %708 = bitcast i8* %702 to float*
  store float %707, float* %708, align 1, !tbaa !2453
  %709 = getelementptr inbounds i8, i8* %702, i64 4
  %710 = bitcast i8* %709 to float*
  store float 0.000000e+00, float* %710, align 1, !tbaa !2453
  %711 = getelementptr inbounds i8, i8* %702, i64 8
  %712 = bitcast i8* %711 to float*
  store float 0.000000e+00, float* %712, align 1, !tbaa !2453
  %713 = getelementptr inbounds i8, i8* %702, i64 12
  %714 = bitcast i8* %713 to float*
  store float 0.000000e+00, float* %714, align 1, !tbaa !2453
  %715 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %716 = bitcast %union.vec128_t* %XMM0 to i8*
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  %719 = bitcast i8* %716 to <2 x float>*
  %720 = load <2 x float>, <2 x float>* %719, align 1
  %721 = extractelement <2 x float> %720, i32 0
  %722 = fpext float %721 to double
  %723 = bitcast i8* %715 to double*
  store double %722, double* %723, align 1, !tbaa !2455
  %724 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 7
  store i64 %726, i64* %PC
  %727 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %728 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %729 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %730 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %731 = bitcast i8* %724 to float*
  store float %727, float* %731, align 1, !tbaa !2453
  %732 = getelementptr inbounds i8, i8* %724, i64 4
  %733 = bitcast i8* %732 to float*
  store float %728, float* %733, align 1, !tbaa !2453
  %734 = getelementptr inbounds i8, i8* %724, i64 8
  %735 = bitcast i8* %734 to float*
  store float %729, float* %735, align 1, !tbaa !2453
  %736 = getelementptr inbounds i8, i8* %724, i64 12
  %737 = bitcast i8* %736 to float*
  store float %730, float* %737, align 1, !tbaa !2453
  %738 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %739 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %740 = bitcast %union.vec128_t* %XMM1 to i8*
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 4
  store i64 %742, i64* %PC
  %743 = bitcast i8* %739 to i64*
  %744 = load i64, i64* %743, align 1
  %745 = getelementptr inbounds i8, i8* %739, i64 8
  %746 = bitcast i8* %745 to i64*
  %747 = load i64, i64* %746, align 1
  %748 = bitcast i8* %740 to i64*
  %749 = load i64, i64* %748, align 1
  %750 = getelementptr inbounds i8, i8* %740, i64 8
  %751 = bitcast i8* %750 to i64*
  %752 = load i64, i64* %751, align 1
  %753 = and i64 %749, %744
  %754 = and i64 %752, %747
  %755 = trunc i64 %753 to i32
  %756 = lshr i64 %753, 32
  %757 = trunc i64 %756 to i32
  %758 = bitcast i8* %738 to i32*
  store i32 %755, i32* %758, align 1, !tbaa !2452
  %759 = getelementptr inbounds i8, i8* %738, i64 4
  %760 = bitcast i8* %759 to i32*
  store i32 %757, i32* %760, align 1, !tbaa !2452
  %761 = trunc i64 %754 to i32
  %762 = getelementptr inbounds i8, i8* %738, i64 8
  %763 = bitcast i8* %762 to i32*
  store i32 %761, i32* %763, align 1, !tbaa !2452
  %764 = lshr i64 %754, 32
  %765 = trunc i64 %764 to i32
  %766 = getelementptr inbounds i8, i8* %738, i64 12
  %767 = bitcast i8* %766 to i32*
  store i32 %765, i32* %767, align 1, !tbaa !2452
  %768 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %769 = bitcast %union.vec128_t* %XMM0 to i8*
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 4
  store i64 %771, i64* %PC
  %772 = bitcast i8* %768 to <2 x i32>*
  %773 = load <2 x i32>, <2 x i32>* %772, align 1
  %774 = getelementptr inbounds i8, i8* %768, i64 8
  %775 = bitcast i8* %774 to <2 x i32>*
  %776 = load <2 x i32>, <2 x i32>* %775, align 1
  %777 = bitcast i8* %769 to double*
  %778 = load double, double* %777, align 1
  %779 = fptrunc double %778 to float
  %780 = bitcast i8* %768 to float*
  store float %779, float* %780, align 1, !tbaa !2453
  %781 = extractelement <2 x i32> %773, i32 1
  %782 = getelementptr inbounds i8, i8* %768, i64 4
  %783 = bitcast i8* %782 to i32*
  store i32 %781, i32* %783, align 1, !tbaa !2453
  %784 = extractelement <2 x i32> %776, i32 0
  %785 = bitcast i8* %774 to i32*
  store i32 %784, i32* %785, align 1, !tbaa !2453
  %786 = extractelement <2 x i32> %776, i32 1
  %787 = getelementptr inbounds i8, i8* %768, i64 12
  %788 = bitcast i8* %787 to i32*
  store i32 %786, i32* %788, align 1, !tbaa !2453
  %789 = load i64, i64* %RBP
  %790 = sub i64 %789, 24
  %791 = bitcast %union.vec128_t* %XMM0 to i8*
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 5
  store i64 %793, i64* %PC
  %794 = bitcast i8* %791 to <2 x float>*
  %795 = load <2 x float>, <2 x float>* %794, align 1
  %796 = extractelement <2 x float> %795, i32 0
  %797 = inttoptr i64 %790 to float*
  store float %796, float* %797
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 28
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 7
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %799 to i32*
  store i32 1, i32* %802
  br label %block_402cdb

block_402c2b:                                     ; preds = %block_402bf4, %block_402c91
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402bf4 ], [ %MEMORY.2, %block_402c91 ]
  %803 = load i64, i64* %RBP
  %804 = sub i64 %803, 28
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RAX, align 8, !tbaa !2428
  %810 = load i32, i32* %EAX
  %811 = zext i32 %810 to i64
  %812 = load i64, i64* %RBP
  %813 = sub i64 %812, 8
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 3
  store i64 %815, i64* %PC
  %816 = inttoptr i64 %813 to i32*
  %817 = load i32, i32* %816
  %818 = sub i32 %810, %817
  %819 = icmp ult i32 %810, %817
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %820, i8* %821, align 1, !tbaa !2432
  %822 = and i32 %818, 255
  %823 = call i32 @llvm.ctpop.i32(i32 %822) #16
  %824 = trunc i32 %823 to i8
  %825 = and i8 %824, 1
  %826 = xor i8 %825, 1
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %826, i8* %827, align 1, !tbaa !2446
  %828 = xor i32 %817, %810
  %829 = xor i32 %828, %818
  %830 = lshr i32 %829, 4
  %831 = trunc i32 %830 to i8
  %832 = and i8 %831, 1
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %832, i8* %833, align 1, !tbaa !2447
  %834 = icmp eq i32 %818, 0
  %835 = zext i1 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %835, i8* %836, align 1, !tbaa !2448
  %837 = lshr i32 %818, 31
  %838 = trunc i32 %837 to i8
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %838, i8* %839, align 1, !tbaa !2449
  %840 = lshr i32 %810, 31
  %841 = lshr i32 %817, 31
  %842 = xor i32 %841, %840
  %843 = xor i32 %837, %840
  %844 = add nuw nsw i32 %843, %842
  %845 = icmp eq i32 %844, 2
  %846 = zext i1 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %846, i8* %847, align 1, !tbaa !2450
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 119
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 6
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 6
  store i64 %853, i64* %PC
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %855 = load i8, i8* %854, align 1, !tbaa !2449
  %856 = icmp ne i8 %855, 0
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %858 = load i8, i8* %857, align 1, !tbaa !2450
  %859 = icmp ne i8 %858, 0
  %860 = xor i1 %856, %859
  %861 = xor i1 %860, true
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %864 = select i1 %860, i64 %851, i64 %849
  store i64 %864, i64* %863, align 8, !tbaa !2428
  %865 = load i8, i8* %BRANCH_TAKEN
  %866 = icmp eq i8 %865, 1
  br i1 %866, label %block_402ca8, label %block_402c37

block_402bc8:                                     ; preds = %block_402bb0
  %867 = sub i64 %127, 4
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 7
  store i64 %869, i64* %PC
  %870 = inttoptr i64 %867 to i32*
  store i32 -1, i32* %870
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 400
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 5
  store i64 %874, i64* %PC
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %872, i64* %875, align 8, !tbaa !2428
  br label %block_402d5f

block_402bea:                                     ; preds = %block_402bd4
  %876 = sub i64 %503, 20
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 4
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %876 to i32*
  %880 = load i32, i32* %879
  %881 = sub i32 %880, 1
  %882 = icmp ult i32 %880, 1
  %883 = zext i1 %882 to i8
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %883, i8* %884, align 1, !tbaa !2432
  %885 = and i32 %881, 255
  %886 = call i32 @llvm.ctpop.i32(i32 %885) #16
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  %889 = xor i8 %888, 1
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %889, i8* %890, align 1, !tbaa !2446
  %891 = xor i32 %880, 1
  %892 = xor i32 %891, %881
  %893 = lshr i32 %892, 4
  %894 = trunc i32 %893 to i8
  %895 = and i8 %894, 1
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %895, i8* %896, align 1, !tbaa !2447
  %897 = icmp eq i32 %881, 0
  %898 = zext i1 %897 to i8
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %898, i8* %899, align 1, !tbaa !2448
  %900 = lshr i32 %881, 31
  %901 = trunc i32 %900 to i8
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %901, i8* %902, align 1, !tbaa !2449
  %903 = lshr i32 %880, 31
  %904 = xor i32 %900, %903
  %905 = add nuw nsw i32 %904, %903
  %906 = icmp eq i32 %905, 2
  %907 = zext i1 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %907, i8* %908, align 1, !tbaa !2450
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 191
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 6
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 6
  store i64 %914, i64* %PC
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %916 = load i8, i8* %915, align 1, !tbaa !2448
  store i8 %916, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %918 = icmp ne i8 %916, 0
  %919 = select i1 %918, i64 %910, i64 %912
  store i64 %919, i64* %917, align 8, !tbaa !2428
  %920 = load i8, i8* %BRANCH_TAKEN
  %921 = icmp eq i8 %920, 1
  %922 = load i64, i64* %RBP
  br i1 %921, label %block_402cad, label %block_402bf4

block_402ce7:                                     ; preds = %block_402cdb
  %923 = load i64, i64* %RBP
  %924 = sub i64 %923, 16
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 4
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %924 to i64*
  %928 = load i64, i64* %927
  store i64 %928, i64* %RAX, align 8, !tbaa !2428
  %929 = load i64, i64* %RBP
  %930 = sub i64 %929, 28
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 4
  store i64 %932, i64* %PC
  %933 = inttoptr i64 %930 to i32*
  %934 = load i32, i32* %933
  %935 = sext i32 %934 to i64
  store i64 %935, i64* %RCX, align 8, !tbaa !2428
  %936 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %937 = load i64, i64* %RAX
  %938 = load i64, i64* %RCX
  %939 = mul i64 %938, 4
  %940 = add i64 %939, %937
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 5
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to float*
  %944 = load float, float* %943
  %945 = bitcast i8* %936 to float*
  store float %944, float* %945, align 1, !tbaa !2453
  %946 = getelementptr inbounds i8, i8* %936, i64 4
  %947 = bitcast i8* %946 to float*
  store float 0.000000e+00, float* %947, align 1, !tbaa !2453
  %948 = getelementptr inbounds i8, i8* %936, i64 8
  %949 = bitcast i8* %948 to float*
  store float 0.000000e+00, float* %949, align 1, !tbaa !2453
  %950 = getelementptr inbounds i8, i8* %936, i64 12
  %951 = bitcast i8* %950 to float*
  store float 0.000000e+00, float* %951, align 1, !tbaa !2453
  %952 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %953 = bitcast %union.vec128_t* %XMM0 to i8*
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 4
  store i64 %955, i64* %PC
  %956 = bitcast i8* %953 to <2 x float>*
  %957 = load <2 x float>, <2 x float>* %956, align 1
  %958 = extractelement <2 x float> %957, i32 0
  %959 = fpext float %958 to double
  %960 = bitcast i8* %952 to double*
  store double %959, double* %960, align 1, !tbaa !2455
  %961 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 7
  store i64 %963, i64* %PC
  %964 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %965 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %966 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %967 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %968 = bitcast i8* %961 to float*
  store float %964, float* %968, align 1, !tbaa !2453
  %969 = getelementptr inbounds i8, i8* %961, i64 4
  %970 = bitcast i8* %969 to float*
  store float %965, float* %970, align 1, !tbaa !2453
  %971 = getelementptr inbounds i8, i8* %961, i64 8
  %972 = bitcast i8* %971 to float*
  store float %966, float* %972, align 1, !tbaa !2453
  %973 = getelementptr inbounds i8, i8* %961, i64 12
  %974 = bitcast i8* %973 to float*
  store float %967, float* %974, align 1, !tbaa !2453
  %975 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %976 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %977 = bitcast %union.vec128_t* %XMM1 to i8*
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 4
  store i64 %979, i64* %PC
  %980 = bitcast i8* %976 to i64*
  %981 = load i64, i64* %980, align 1
  %982 = getelementptr inbounds i8, i8* %976, i64 8
  %983 = bitcast i8* %982 to i64*
  %984 = load i64, i64* %983, align 1
  %985 = bitcast i8* %977 to i64*
  %986 = load i64, i64* %985, align 1
  %987 = getelementptr inbounds i8, i8* %977, i64 8
  %988 = bitcast i8* %987 to i64*
  %989 = load i64, i64* %988, align 1
  %990 = and i64 %986, %981
  %991 = and i64 %989, %984
  %992 = trunc i64 %990 to i32
  %993 = lshr i64 %990, 32
  %994 = trunc i64 %993 to i32
  %995 = bitcast i8* %975 to i32*
  store i32 %992, i32* %995, align 1, !tbaa !2452
  %996 = getelementptr inbounds i8, i8* %975, i64 4
  %997 = bitcast i8* %996 to i32*
  store i32 %994, i32* %997, align 1, !tbaa !2452
  %998 = trunc i64 %991 to i32
  %999 = getelementptr inbounds i8, i8* %975, i64 8
  %1000 = bitcast i8* %999 to i32*
  store i32 %998, i32* %1000, align 1, !tbaa !2452
  %1001 = lshr i64 %991, 32
  %1002 = trunc i64 %1001 to i32
  %1003 = getelementptr inbounds i8, i8* %975, i64 12
  %1004 = bitcast i8* %1003 to i32*
  store i32 %1002, i32* %1004, align 1, !tbaa !2452
  %1005 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1006 = load i64, i64* %RBP
  %1007 = sub i64 %1006, 24
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 5
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1007 to float*
  %1011 = load float, float* %1010
  %1012 = bitcast i8* %1005 to float*
  store float %1011, float* %1012, align 1, !tbaa !2453
  %1013 = getelementptr inbounds i8, i8* %1005, i64 4
  %1014 = bitcast i8* %1013 to float*
  store float 0.000000e+00, float* %1014, align 1, !tbaa !2453
  %1015 = getelementptr inbounds i8, i8* %1005, i64 8
  %1016 = bitcast i8* %1015 to float*
  store float 0.000000e+00, float* %1016, align 1, !tbaa !2453
  %1017 = getelementptr inbounds i8, i8* %1005, i64 12
  %1018 = bitcast i8* %1017 to float*
  store float 0.000000e+00, float* %1018, align 1, !tbaa !2453
  %1019 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1020 = bitcast %union.vec128_t* %XMM1 to i8*
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 4
  store i64 %1022, i64* %PC
  %1023 = bitcast i8* %1020 to <2 x float>*
  %1024 = load <2 x float>, <2 x float>* %1023, align 1
  %1025 = extractelement <2 x float> %1024, i32 0
  %1026 = fpext float %1025 to double
  %1027 = bitcast i8* %1019 to double*
  store double %1026, double* %1027, align 1, !tbaa !2455
  %1028 = bitcast %union.vec128_t* %XMM0 to i8*
  %1029 = bitcast %union.vec128_t* %XMM1 to i8*
  %1030 = load i64, i64* %PC
  %1031 = add i64 %1030, 4
  store i64 %1031, i64* %PC
  %1032 = bitcast i8* %1028 to double*
  %1033 = load double, double* %1032, align 1
  %1034 = bitcast i8* %1029 to double*
  %1035 = load double, double* %1034, align 1
  %1036 = fcmp uno double %1033, %1035
  br i1 %1036, label %1037, label %1049

; <label>:1037:                                   ; preds = %block_402ce7
  %1038 = fadd double %1033, %1035
  %1039 = bitcast double %1038 to i64
  %1040 = and i64 %1039, 9221120237041090560
  %1041 = icmp eq i64 %1040, 9218868437227405312
  %1042 = and i64 %1039, 2251799813685247
  %1043 = icmp ne i64 %1042, 0
  %1044 = and i1 %1041, %1043
  br i1 %1044, label %1045, label %1055

; <label>:1045:                                   ; preds = %1037
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1047 = load i64, i64* %1046, align 8, !tbaa !2428
  %1048 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1047, %struct.Memory* %MEMORY.3) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1049:                                   ; preds = %block_402ce7
  %1050 = fcmp ogt double %1033, %1035
  br i1 %1050, label %1055, label %1051

; <label>:1051:                                   ; preds = %1049
  %1052 = fcmp olt double %1033, %1035
  br i1 %1052, label %1055, label %1053

; <label>:1053:                                   ; preds = %1051
  %1054 = fcmp oeq double %1033, %1035
  br i1 %1054, label %1055, label %1062

; <label>:1055:                                   ; preds = %1053, %1051, %1049, %1037
  %1056 = phi i8 [ 0, %1049 ], [ 0, %1051 ], [ 1, %1053 ], [ 1, %1037 ]
  %1057 = phi i8 [ 0, %1049 ], [ 0, %1051 ], [ 0, %1053 ], [ 1, %1037 ]
  %1058 = phi i8 [ 0, %1049 ], [ 1, %1051 ], [ 0, %1053 ], [ 1, %1037 ]
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1056, i8* %1059, align 1, !tbaa !2451
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1057, i8* %1060, align 1, !tbaa !2451
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1058, i8* %1061, align 1, !tbaa !2451
  br label %1062

; <label>:1062:                                   ; preds = %1055, %1053
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1063, align 1, !tbaa !2451
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1064, align 1, !tbaa !2451
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1065, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1045, %1062
  %1066 = phi %struct.Memory* [ %1048, %1045 ], [ %MEMORY.3, %1062 ]
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 49
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 6
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 6
  store i64 %1072, i64* %PC
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1074 = load i8, i8* %1073, align 1, !tbaa !2432
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1076 = load i8, i8* %1075, align 1, !tbaa !2448
  %1077 = or i8 %1076, %1074
  %1078 = icmp ne i8 %1077, 0
  %1079 = zext i1 %1078 to i8
  store i8 %1079, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1081 = select i1 %1078, i64 %1068, i64 %1070
  store i64 %1081, i64* %1080, align 8, !tbaa !2428
  %1082 = load i8, i8* %BRANCH_TAKEN
  %1083 = icmp eq i8 %1082, 1
  br i1 %1083, label %block_402d41, label %block_402d16

block_402c66:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1084 = load i64, i64* %RBP
  %1085 = sub i64 %1084, 28
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 3
  store i64 %1087, i64* %PC
  %1088 = inttoptr i64 %1085 to i32*
  %1089 = load i32, i32* %1088
  %1090 = zext i32 %1089 to i64
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = load i64, i64* %RBP
  %1092 = sub i64 %1091, 36
  %1093 = load i32, i32* %EAX
  %1094 = zext i32 %1093 to i64
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 3
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1092 to i32*
  store i32 %1093, i32* %1097
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 16
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 4
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1099 to i64*
  %1103 = load i64, i64* %1102
  store i64 %1103, i64* %RCX, align 8, !tbaa !2428
  %1104 = load i64, i64* %RBP
  %1105 = sub i64 %1104, 32
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 4
  store i64 %1107, i64* %PC
  %1108 = inttoptr i64 %1105 to i32*
  %1109 = load i32, i32* %1108
  %1110 = sext i32 %1109 to i64
  store i64 %1110, i64* %RDX, align 8, !tbaa !2428
  %1111 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1112 = load i64, i64* %RCX
  %1113 = load i64, i64* %RDX
  %1114 = mul i64 %1113, 4
  %1115 = add i64 %1114, %1112
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to float*
  %1119 = load float, float* %1118
  %1120 = bitcast i8* %1111 to float*
  store float %1119, float* %1120, align 1, !tbaa !2453
  %1121 = getelementptr inbounds i8, i8* %1111, i64 4
  %1122 = bitcast i8* %1121 to float*
  store float 0.000000e+00, float* %1122, align 1, !tbaa !2453
  %1123 = getelementptr inbounds i8, i8* %1111, i64 8
  %1124 = bitcast i8* %1123 to float*
  store float 0.000000e+00, float* %1124, align 1, !tbaa !2453
  %1125 = getelementptr inbounds i8, i8* %1111, i64 12
  %1126 = bitcast i8* %1125 to float*
  store float 0.000000e+00, float* %1126, align 1, !tbaa !2453
  %1127 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1128 = bitcast %union.vec128_t* %XMM0 to i8*
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 4
  store i64 %1130, i64* %PC
  %1131 = bitcast i8* %1128 to <2 x float>*
  %1132 = load <2 x float>, <2 x float>* %1131, align 1
  %1133 = extractelement <2 x float> %1132, i32 0
  %1134 = fpext float %1133 to double
  %1135 = bitcast i8* %1127 to double*
  store double %1134, double* %1135, align 1, !tbaa !2455
  %1136 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 7
  store i64 %1138, i64* %PC
  %1139 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %1140 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %1141 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %1142 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %1143 = bitcast i8* %1136 to float*
  store float %1139, float* %1143, align 1, !tbaa !2453
  %1144 = getelementptr inbounds i8, i8* %1136, i64 4
  %1145 = bitcast i8* %1144 to float*
  store float %1140, float* %1145, align 1, !tbaa !2453
  %1146 = getelementptr inbounds i8, i8* %1136, i64 8
  %1147 = bitcast i8* %1146 to float*
  store float %1141, float* %1147, align 1, !tbaa !2453
  %1148 = getelementptr inbounds i8, i8* %1136, i64 12
  %1149 = bitcast i8* %1148 to float*
  store float %1142, float* %1149, align 1, !tbaa !2453
  %1150 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1151 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1152 = bitcast %union.vec128_t* %XMM1 to i8*
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = bitcast i8* %1151 to i64*
  %1156 = load i64, i64* %1155, align 1
  %1157 = getelementptr inbounds i8, i8* %1151, i64 8
  %1158 = bitcast i8* %1157 to i64*
  %1159 = load i64, i64* %1158, align 1
  %1160 = bitcast i8* %1152 to i64*
  %1161 = load i64, i64* %1160, align 1
  %1162 = getelementptr inbounds i8, i8* %1152, i64 8
  %1163 = bitcast i8* %1162 to i64*
  %1164 = load i64, i64* %1163, align 1
  %1165 = and i64 %1161, %1156
  %1166 = and i64 %1164, %1159
  %1167 = trunc i64 %1165 to i32
  %1168 = lshr i64 %1165, 32
  %1169 = trunc i64 %1168 to i32
  %1170 = bitcast i8* %1150 to i32*
  store i32 %1167, i32* %1170, align 1, !tbaa !2452
  %1171 = getelementptr inbounds i8, i8* %1150, i64 4
  %1172 = bitcast i8* %1171 to i32*
  store i32 %1169, i32* %1172, align 1, !tbaa !2452
  %1173 = trunc i64 %1166 to i32
  %1174 = getelementptr inbounds i8, i8* %1150, i64 8
  %1175 = bitcast i8* %1174 to i32*
  store i32 %1173, i32* %1175, align 1, !tbaa !2452
  %1176 = lshr i64 %1166, 32
  %1177 = trunc i64 %1176 to i32
  %1178 = getelementptr inbounds i8, i8* %1150, i64 12
  %1179 = bitcast i8* %1178 to i32*
  store i32 %1177, i32* %1179, align 1, !tbaa !2452
  %1180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1181 = bitcast %union.vec128_t* %XMM0 to i8*
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 4
  store i64 %1183, i64* %PC
  %1184 = bitcast i8* %1180 to <2 x i32>*
  %1185 = load <2 x i32>, <2 x i32>* %1184, align 1
  %1186 = getelementptr inbounds i8, i8* %1180, i64 8
  %1187 = bitcast i8* %1186 to <2 x i32>*
  %1188 = load <2 x i32>, <2 x i32>* %1187, align 1
  %1189 = bitcast i8* %1181 to double*
  %1190 = load double, double* %1189, align 1
  %1191 = fptrunc double %1190 to float
  %1192 = bitcast i8* %1180 to float*
  store float %1191, float* %1192, align 1, !tbaa !2453
  %1193 = extractelement <2 x i32> %1185, i32 1
  %1194 = getelementptr inbounds i8, i8* %1180, i64 4
  %1195 = bitcast i8* %1194 to i32*
  store i32 %1193, i32* %1195, align 1, !tbaa !2453
  %1196 = extractelement <2 x i32> %1188, i32 0
  %1197 = bitcast i8* %1186 to i32*
  store i32 %1196, i32* %1197, align 1, !tbaa !2453
  %1198 = extractelement <2 x i32> %1188, i32 1
  %1199 = getelementptr inbounds i8, i8* %1180, i64 12
  %1200 = bitcast i8* %1199 to i32*
  store i32 %1198, i32* %1200, align 1, !tbaa !2453
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 24
  %1203 = bitcast %union.vec128_t* %XMM0 to i8*
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 5
  store i64 %1205, i64* %PC
  %1206 = bitcast i8* %1203 to <2 x float>*
  %1207 = load <2 x float>, <2 x float>* %1206, align 1
  %1208 = extractelement <2 x float> %1207, i32 0
  %1209 = inttoptr i64 %1202 to float*
  store float %1208, float* %1209
  br label %block_402c91

block_402bf4:                                     ; preds = %block_402bea
  %1210 = sub i64 %922, 32
  %1211 = load i64, i64* %PC
  %1212 = add i64 %1211, 7
  store i64 %1212, i64* %PC
  %1213 = inttoptr i64 %1210 to i32*
  store i32 1, i32* %1213
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 16
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 4
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1215 to i64*
  %1219 = load i64, i64* %1218
  store i64 %1219, i64* %RAX, align 8, !tbaa !2428
  %1220 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1221 = load i64, i64* %RAX
  %1222 = load i64, i64* %PC
  %1223 = add i64 %1222, 4
  store i64 %1223, i64* %PC
  %1224 = inttoptr i64 %1221 to float*
  %1225 = load float, float* %1224
  %1226 = bitcast i8* %1220 to float*
  store float %1225, float* %1226, align 1, !tbaa !2453
  %1227 = getelementptr inbounds i8, i8* %1220, i64 4
  %1228 = bitcast i8* %1227 to float*
  store float 0.000000e+00, float* %1228, align 1, !tbaa !2453
  %1229 = getelementptr inbounds i8, i8* %1220, i64 8
  %1230 = bitcast i8* %1229 to float*
  store float 0.000000e+00, float* %1230, align 1, !tbaa !2453
  %1231 = getelementptr inbounds i8, i8* %1220, i64 12
  %1232 = bitcast i8* %1231 to float*
  store float 0.000000e+00, float* %1232, align 1, !tbaa !2453
  %1233 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1234 = bitcast %union.vec128_t* %XMM0 to i8*
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 4
  store i64 %1236, i64* %PC
  %1237 = bitcast i8* %1234 to <2 x float>*
  %1238 = load <2 x float>, <2 x float>* %1237, align 1
  %1239 = extractelement <2 x float> %1238, i32 0
  %1240 = fpext float %1239 to double
  %1241 = bitcast i8* %1233 to double*
  store double %1240, double* %1241, align 1, !tbaa !2455
  %1242 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 7
  store i64 %1244, i64* %PC
  %1245 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %1246 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %1247 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %1248 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %1249 = bitcast i8* %1242 to float*
  store float %1245, float* %1249, align 1, !tbaa !2453
  %1250 = getelementptr inbounds i8, i8* %1242, i64 4
  %1251 = bitcast i8* %1250 to float*
  store float %1246, float* %1251, align 1, !tbaa !2453
  %1252 = getelementptr inbounds i8, i8* %1242, i64 8
  %1253 = bitcast i8* %1252 to float*
  store float %1247, float* %1253, align 1, !tbaa !2453
  %1254 = getelementptr inbounds i8, i8* %1242, i64 12
  %1255 = bitcast i8* %1254 to float*
  store float %1248, float* %1255, align 1, !tbaa !2453
  %1256 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1257 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1258 = bitcast %union.vec128_t* %XMM1 to i8*
  %1259 = load i64, i64* %PC
  %1260 = add i64 %1259, 4
  store i64 %1260, i64* %PC
  %1261 = bitcast i8* %1257 to i64*
  %1262 = load i64, i64* %1261, align 1
  %1263 = getelementptr inbounds i8, i8* %1257, i64 8
  %1264 = bitcast i8* %1263 to i64*
  %1265 = load i64, i64* %1264, align 1
  %1266 = bitcast i8* %1258 to i64*
  %1267 = load i64, i64* %1266, align 1
  %1268 = getelementptr inbounds i8, i8* %1258, i64 8
  %1269 = bitcast i8* %1268 to i64*
  %1270 = load i64, i64* %1269, align 1
  %1271 = and i64 %1267, %1262
  %1272 = and i64 %1270, %1265
  %1273 = trunc i64 %1271 to i32
  %1274 = lshr i64 %1271, 32
  %1275 = trunc i64 %1274 to i32
  %1276 = bitcast i8* %1256 to i32*
  store i32 %1273, i32* %1276, align 1, !tbaa !2452
  %1277 = getelementptr inbounds i8, i8* %1256, i64 4
  %1278 = bitcast i8* %1277 to i32*
  store i32 %1275, i32* %1278, align 1, !tbaa !2452
  %1279 = trunc i64 %1272 to i32
  %1280 = getelementptr inbounds i8, i8* %1256, i64 8
  %1281 = bitcast i8* %1280 to i32*
  store i32 %1279, i32* %1281, align 1, !tbaa !2452
  %1282 = lshr i64 %1272, 32
  %1283 = trunc i64 %1282 to i32
  %1284 = getelementptr inbounds i8, i8* %1256, i64 12
  %1285 = bitcast i8* %1284 to i32*
  store i32 %1283, i32* %1285, align 1, !tbaa !2452
  %1286 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1287 = bitcast %union.vec128_t* %XMM0 to i8*
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 4
  store i64 %1289, i64* %PC
  %1290 = bitcast i8* %1286 to <2 x i32>*
  %1291 = load <2 x i32>, <2 x i32>* %1290, align 1
  %1292 = getelementptr inbounds i8, i8* %1286, i64 8
  %1293 = bitcast i8* %1292 to <2 x i32>*
  %1294 = load <2 x i32>, <2 x i32>* %1293, align 1
  %1295 = bitcast i8* %1287 to double*
  %1296 = load double, double* %1295, align 1
  %1297 = fptrunc double %1296 to float
  %1298 = bitcast i8* %1286 to float*
  store float %1297, float* %1298, align 1, !tbaa !2453
  %1299 = extractelement <2 x i32> %1291, i32 1
  %1300 = getelementptr inbounds i8, i8* %1286, i64 4
  %1301 = bitcast i8* %1300 to i32*
  store i32 %1299, i32* %1301, align 1, !tbaa !2453
  %1302 = extractelement <2 x i32> %1294, i32 0
  %1303 = bitcast i8* %1292 to i32*
  store i32 %1302, i32* %1303, align 1, !tbaa !2453
  %1304 = extractelement <2 x i32> %1294, i32 1
  %1305 = getelementptr inbounds i8, i8* %1286, i64 12
  %1306 = bitcast i8* %1305 to i32*
  store i32 %1304, i32* %1306, align 1, !tbaa !2453
  %1307 = load i64, i64* %RBP
  %1308 = sub i64 %1307, 24
  %1309 = bitcast %union.vec128_t* %XMM0 to i8*
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 5
  store i64 %1311, i64* %PC
  %1312 = bitcast i8* %1309 to <2 x float>*
  %1313 = load <2 x float>, <2 x float>* %1312, align 1
  %1314 = extractelement <2 x float> %1313, i32 0
  %1315 = inttoptr i64 %1308 to float*
  store float %1314, float* %1315
  %1316 = load i64, i64* %RBP
  %1317 = sub i64 %1316, 32
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 3
  store i64 %1319, i64* %PC
  %1320 = inttoptr i64 %1317 to i32*
  %1321 = load i32, i32* %1320
  %1322 = zext i32 %1321 to i64
  store i64 %1322, i64* %RCX, align 8, !tbaa !2428
  %1323 = load i64, i64* %RCX
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 20
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC
  %1328 = trunc i64 %1323 to i32
  %1329 = inttoptr i64 %1325 to i32*
  %1330 = load i32, i32* %1329
  %1331 = add i32 %1330, %1328
  %1332 = zext i32 %1331 to i64
  store i64 %1332, i64* %RCX, align 8, !tbaa !2428
  %1333 = icmp ult i32 %1331, %1328
  %1334 = icmp ult i32 %1331, %1330
  %1335 = or i1 %1333, %1334
  %1336 = zext i1 %1335 to i8
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1336, i8* %1337, align 1, !tbaa !2432
  %1338 = and i32 %1331, 255
  %1339 = call i32 @llvm.ctpop.i32(i32 %1338) #16
  %1340 = trunc i32 %1339 to i8
  %1341 = and i8 %1340, 1
  %1342 = xor i8 %1341, 1
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1342, i8* %1343, align 1, !tbaa !2446
  %1344 = xor i32 %1330, %1328
  %1345 = xor i32 %1344, %1331
  %1346 = lshr i32 %1345, 4
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1348, i8* %1349, align 1, !tbaa !2447
  %1350 = icmp eq i32 %1331, 0
  %1351 = zext i1 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1351, i8* %1352, align 1, !tbaa !2448
  %1353 = lshr i32 %1331, 31
  %1354 = trunc i32 %1353 to i8
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1354, i8* %1355, align 1, !tbaa !2449
  %1356 = lshr i32 %1328, 31
  %1357 = lshr i32 %1330, 31
  %1358 = xor i32 %1353, %1356
  %1359 = xor i32 %1353, %1357
  %1360 = add nuw nsw i32 %1358, %1359
  %1361 = icmp eq i32 %1360, 2
  %1362 = zext i1 %1361 to i8
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1362, i8* %1363, align 1, !tbaa !2450
  %1364 = load i64, i64* %RBP
  %1365 = sub i64 %1364, 32
  %1366 = load i32, i32* %ECX
  %1367 = zext i32 %1366 to i64
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 3
  store i64 %1369, i64* %PC
  %1370 = inttoptr i64 %1365 to i32*
  store i32 %1366, i32* %1370
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 28
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 7
  store i64 %1374, i64* %PC
  %1375 = inttoptr i64 %1372 to i32*
  store i32 1, i32* %1375
  br label %block_402c2b

block_402d41:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402d16
  %MEMORY.5 = phi %struct.Memory* [ %1066, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %1066, %block_402d16 ]
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 5
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 5
  store i64 %1379, i64* %PC
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1377, i64* %1380, align 8, !tbaa !2428
  %1381 = load i64, i64* %RBP
  %1382 = sub i64 %1381, 28
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 3
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1382 to i32*
  %1386 = load i32, i32* %1385
  %1387 = zext i32 %1386 to i64
  store i64 %1387, i64* %RAX, align 8, !tbaa !2428
  %1388 = load i64, i64* %RAX
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 3
  store i64 %1390, i64* %PC
  %1391 = trunc i64 %1388 to i32
  %1392 = add i32 1, %1391
  %1393 = zext i32 %1392 to i64
  store i64 %1393, i64* %RAX, align 8, !tbaa !2428
  %1394 = icmp ult i32 %1392, %1391
  %1395 = icmp ult i32 %1392, 1
  %1396 = or i1 %1394, %1395
  %1397 = zext i1 %1396 to i8
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1397, i8* %1398, align 1, !tbaa !2432
  %1399 = and i32 %1392, 255
  %1400 = call i32 @llvm.ctpop.i32(i32 %1399) #16
  %1401 = trunc i32 %1400 to i8
  %1402 = and i8 %1401, 1
  %1403 = xor i8 %1402, 1
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1403, i8* %1404, align 1, !tbaa !2446
  %1405 = xor i64 1, %1388
  %1406 = trunc i64 %1405 to i32
  %1407 = xor i32 %1406, %1392
  %1408 = lshr i32 %1407, 4
  %1409 = trunc i32 %1408 to i8
  %1410 = and i8 %1409, 1
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1410, i8* %1411, align 1, !tbaa !2447
  %1412 = icmp eq i32 %1392, 0
  %1413 = zext i1 %1412 to i8
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1413, i8* %1414, align 1, !tbaa !2448
  %1415 = lshr i32 %1392, 31
  %1416 = trunc i32 %1415 to i8
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1416, i8* %1417, align 1, !tbaa !2449
  %1418 = lshr i32 %1391, 31
  %1419 = xor i32 %1415, %1418
  %1420 = add nuw nsw i32 %1419, %1415
  %1421 = icmp eq i32 %1420, 2
  %1422 = zext i1 %1421 to i8
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1422, i8* %1423, align 1, !tbaa !2450
  %1424 = load i64, i64* %RBP
  %1425 = sub i64 %1424, 28
  %1426 = load i32, i32* %EAX
  %1427 = zext i32 %1426 to i64
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 3
  store i64 %1429, i64* %PC
  %1430 = inttoptr i64 %1425 to i32*
  store i32 %1426, i32* %1430
  %1431 = load i64, i64* %PC
  %1432 = sub i64 %1431, 116
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 5
  store i64 %1434, i64* %PC
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1432, i64* %1435, align 8, !tbaa !2428
  br label %block_402cdb
}

; Function Attrs: noinline
define %struct.Memory* @sub_400610_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400610:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 17
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %R8D = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 19
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R9D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 21
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %R10D = bitcast %union.anon* %30 to i32*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 1
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RAX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 5
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RCX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 7
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RDX = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 9
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RSI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RDI = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 13
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RSP = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 15
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %RBP = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 17
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R8 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 19
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %R9 = bitcast %union.anon* %57 to i64*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %59 to %"class.std::bitset"*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %65 to %"class.std::bitset"*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %67 to %"class.std::bitset"*
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %69 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %68, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %69 to %union.vec128_t*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %71 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %70, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %71 to %union.vec128_t*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %73 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %72, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %73 to %union.vec128_t*
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %75 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %74, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %75 to %union.vec128_t*
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %77 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %76, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %77 to %union.vec128_t*
  %78 = load i64, i64* %RBP
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 1
  store i64 %80, i64* %PC
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %82 = load i64, i64* %81, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %78, i64* %84
  store i64 %83, i64* %81, align 8, !tbaa !2428
  %85 = load i64, i64* %RSP
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  store i64 %85, i64* %RBP, align 8, !tbaa !2428
  %88 = load i64, i64* %RSP
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 7
  store i64 %90, i64* %PC
  %91 = sub i64 %88, 1008
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  %92 = icmp ult i64 %88, 1008
  %93 = zext i1 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %93, i8* %94, align 1, !tbaa !2432
  %95 = trunc i64 %91 to i32
  %96 = and i32 %95, 255
  %97 = call i32 @llvm.ctpop.i32(i32 %96) #16
  %98 = trunc i32 %97 to i8
  %99 = and i8 %98, 1
  %100 = xor i8 %99, 1
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %100, i8* %101, align 1, !tbaa !2446
  %102 = xor i64 1008, %88
  %103 = xor i64 %102, %91
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %106, i8* %107, align 1, !tbaa !2447
  %108 = icmp eq i64 %91, 0
  %109 = zext i1 %108 to i8
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %109, i8* %110, align 1, !tbaa !2448
  %111 = lshr i64 %91, 63
  %112 = trunc i64 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %112, i8* %113, align 1, !tbaa !2449
  %114 = lshr i64 %88, 63
  %115 = xor i64 %111, %114
  %116 = add nuw nsw i64 %115, %114
  %117 = icmp eq i64 %116, 2
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %118, i8* %119, align 1, !tbaa !2450
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 10
  store i64 %121, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %122 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 8
  store i64 %124, i64* %PC
  %125 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 8) to float*)
  %126 = bitcast i8* %122 to float*
  store float %125, float* %126, align 1, !tbaa !2453
  %127 = getelementptr inbounds i8, i8* %122, i64 4
  %128 = bitcast i8* %127 to float*
  store float 0.000000e+00, float* %128, align 1, !tbaa !2453
  %129 = getelementptr inbounds i8, i8* %122, i64 8
  %130 = bitcast i8* %129 to float*
  store float 0.000000e+00, float* %130, align 1, !tbaa !2453
  %131 = getelementptr inbounds i8, i8* %122, i64 12
  %132 = bitcast i8* %131 to float*
  store float 0.000000e+00, float* %132, align 1, !tbaa !2453
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 10
  store i64 %134, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 10
  store i64 %136, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  %137 = load i64, i64* %RDX
  %138 = load i32, i32* %EDX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 2
  store i64 %141, i64* %PC
  %142 = xor i64 %139, %137
  %143 = trunc i64 %142 to i32
  %144 = and i64 %142, 4294967295
  store i64 %144, i64* %RDX, align 8, !tbaa !2428
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %145, align 1, !tbaa !2432
  %146 = and i32 %143, 255
  %147 = call i32 @llvm.ctpop.i32(i32 %146) #16
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %150, i8* %151, align 1, !tbaa !2446
  %152 = icmp eq i32 %143, 0
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %153, i8* %154, align 1, !tbaa !2448
  %155 = lshr i32 %143, 31
  %156 = trunc i32 %155 to i8
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %156, i8* %157, align 1, !tbaa !2449
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %158, align 1, !tbaa !2450
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %159, align 1, !tbaa !2447
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  store i64 %161, i64* %PC
  store i64 720, i64* %RDI, align 8, !tbaa !2428
  %162 = bitcast i32* %R8D to i64*
  %163 = load i32, i32* %EDI
  %164 = zext i32 %163 to i64
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 3
  store i64 %166, i64* %PC
  %167 = and i64 %164, 4294967295
  store i64 %167, i64* %162, align 8, !tbaa !2428
  %168 = load i64, i64* %RBP
  %169 = sub i64 %168, 832
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 7
  store i64 %171, i64* %PC
  store i64 %169, i64* %R9, align 8, !tbaa !2428
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 4
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 7
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  store i32 0, i32* %176
  %177 = load i64, i64* %R9
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 3
  store i64 %179, i64* %PC
  store i64 %177, i64* %RDI, align 8, !tbaa !2428
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 840
  %182 = load i64, i64* %RSI
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 7
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %181 to i64*
  store i64 %182, i64* %185
  %186 = load i32, i32* %EDX
  %187 = zext i32 %186 to i64
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 2
  store i64 %189, i64* %PC
  %190 = and i64 %187, 4294967295
  store i64 %190, i64* %RSI, align 8, !tbaa !2428
  %191 = load i64, i64* %R8
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  store i64 %191, i64* %RDX, align 8, !tbaa !2428
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 848
  %196 = load i64, i64* %RCX
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 7
  store i64 %198, i64* %PC
  %199 = inttoptr i64 %195 to i64*
  store i64 %196, i64* %199
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 852
  %202 = bitcast %union.vec128_t* %XMM0 to i8*
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 8
  store i64 %204, i64* %PC
  %205 = bitcast i8* %202 to <2 x float>*
  %206 = load <2 x float>, <2 x float>* %205, align 1
  %207 = extractelement <2 x float> %206, i32 0
  %208 = inttoptr i64 %201 to float*
  store float %207, float* %208
  %209 = load i64, i64* %RBP
  %210 = sub i64 %209, 864
  %211 = load i64, i64* %RAX
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 7
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %210 to i64*
  store i64 %211, i64* %214
  %215 = load i64, i64* %PC
  %216 = sub i64 %215, 462
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 5
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 5
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = add i64 %222, -8
  %224 = inttoptr i64 %223 to i64*
  store i64 %218, i64* %224
  store i64 %223, i64* %221, align 8, !tbaa !2428
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %216, i64* %225, align 8, !tbaa !2428
  %226 = load i64, i64* %PC
  %227 = call %struct.Memory* @ext_4004b0_memset(%struct.State* %0, i64 %226, %struct.Memory* %2)
  %228 = load i64, i64* %RBP
  %229 = sub i64 %228, 832
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 7
  store i64 %231, i64* %PC
  %232 = inttoptr i64 %229 to i8*
  store i8 32, i8* %232
  %233 = load i64, i64* %RBP
  %234 = sub i64 %233, 848
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 7
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i64*
  %238 = load i64, i64* %237
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 96
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %240 to i64*
  store i64 %241, i64* %244
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 864
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 7
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RCX, align 8, !tbaa !2428
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 104
  %253 = load i64, i64* %RCX
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %252 to i64*
  store i64 %253, i64* %256
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 11
  store i64 %258, i64* %PC
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 11
  store i64 %260, i64* %PC
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %261 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 852
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 8
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to float*
  %267 = load float, float* %266
  %268 = bitcast i8* %261 to float*
  store float %267, float* %268, align 1, !tbaa !2453
  %269 = getelementptr inbounds i8, i8* %261, i64 4
  %270 = bitcast i8* %269 to float*
  store float 0.000000e+00, float* %270, align 1, !tbaa !2453
  %271 = getelementptr inbounds i8, i8* %261, i64 8
  %272 = bitcast i8* %271 to float*
  store float 0.000000e+00, float* %272, align 1, !tbaa !2453
  %273 = getelementptr inbounds i8, i8* %261, i64 12
  %274 = bitcast i8* %273 to float*
  store float 0.000000e+00, float* %274, align 1, !tbaa !2453
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 8
  %277 = bitcast %union.vec128_t* %XMM0 to i8*
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 5
  store i64 %279, i64* %PC
  %280 = bitcast i8* %277 to <2 x float>*
  %281 = load <2 x float>, <2 x float>* %280, align 1
  %282 = extractelement <2 x float> %281, i32 0
  %283 = inttoptr i64 %276 to float*
  store float %282, float* %283
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 11
  store i64 %285, i64* %PC
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 8
  store i64 %287, i64* %PC
  %288 = load i64, i64* @stderr
  store i64 %288, i64* %RDI, align 8, !tbaa !2428
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 840
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 7
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i64*
  %294 = load i64, i64* %293
  store i64 %294, i64* %RSI, align 8, !tbaa !2428
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 2
  store i64 %296, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %297 = load i64, i64* %PC
  %298 = sub i64 %297, 543
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 5
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 5
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, -8
  %306 = inttoptr i64 %305 to i64*
  store i64 %300, i64* %306
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %298, i64* %307, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %308, %struct.Memory* %227)
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 10
  store i64 %311, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 8
  store i64 %313, i64* %PC
  %314 = load i64, i64* @stderr
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 868
  %317 = load i32, i32* %EAX
  %318 = zext i32 %317 to i64
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 6
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %316 to i32*
  store i32 %317, i32* %321
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 2
  store i64 %323, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %324 = load i64, i64* %PC
  %325 = sub i64 %324, 574
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 5
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 5
  store i64 %329, i64* %PC
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %331 = load i64, i64* %330, align 8, !tbaa !2428
  %332 = add i64 %331, -8
  %333 = inttoptr i64 %332 to i64*
  store i64 %327, i64* %333
  store i64 %332, i64* %330, align 8, !tbaa !2428
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %325, i64* %334, align 8, !tbaa !2428
  %335 = load i64, i64* %PC
  %336 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %335, %struct.Memory* %309)
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 10
  store i64 %338, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 8
  store i64 %340, i64* %PC
  %341 = load i64, i64* @stderr
  store i64 %341, i64* %RDI, align 8, !tbaa !2428
  %342 = load i64, i64* %RBP
  %343 = sub i64 %342, 872
  %344 = load i32, i32* %EAX
  %345 = zext i32 %344 to i64
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 6
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %343 to i32*
  store i32 %344, i32* %348
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 2
  store i64 %350, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %351 = load i64, i64* %PC
  %352 = sub i64 %351, 605
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 5
  store i64 %356, i64* %PC
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %358 = load i64, i64* %357, align 8, !tbaa !2428
  %359 = add i64 %358, -8
  %360 = inttoptr i64 %359 to i64*
  store i64 %354, i64* %360
  store i64 %359, i64* %357, align 8, !tbaa !2428
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %352, i64* %361, align 8, !tbaa !2428
  %362 = load i64, i64* %PC
  %363 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %362, %struct.Memory* %336)
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 10
  store i64 %365, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 8
  store i64 %367, i64* %PC
  %368 = load i64, i64* @stderr
  store i64 %368, i64* %RDI, align 8, !tbaa !2428
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 96
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 4
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i64*
  %374 = load i64, i64* %373
  store i64 %374, i64* %RDX, align 8, !tbaa !2428
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 876
  %377 = load i32, i32* %EAX
  %378 = zext i32 %377 to i64
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 6
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %376 to i32*
  store i32 %377, i32* %381
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 2
  store i64 %383, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %384 = load i64, i64* %PC
  %385 = sub i64 %384, 640
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 5
  store i64 %389, i64* %PC
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %391 = load i64, i64* %390, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %387, i64* %393
  store i64 %392, i64* %390, align 8, !tbaa !2428
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %385, i64* %394, align 8, !tbaa !2428
  %395 = load i64, i64* %PC
  %396 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %395, %struct.Memory* %363)
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 10
  store i64 %398, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 8
  store i64 %400, i64* %PC
  %401 = load i64, i64* @stderr
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 104
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %RDX, align 8, !tbaa !2428
  %408 = load i64, i64* %RBP
  %409 = sub i64 %408, 880
  %410 = load i32, i32* %EAX
  %411 = zext i32 %410 to i64
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 6
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %409 to i32*
  store i32 %410, i32* %414
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 2
  store i64 %416, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %417 = load i64, i64* %PC
  %418 = sub i64 %417, 675
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 5
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 5
  store i64 %422, i64* %PC
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %424 = load i64, i64* %423, align 8, !tbaa !2428
  %425 = add i64 %424, -8
  %426 = inttoptr i64 %425 to i64*
  store i64 %420, i64* %426
  store i64 %425, i64* %423, align 8, !tbaa !2428
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %418, i64* %427, align 8, !tbaa !2428
  %428 = load i64, i64* %PC
  %429 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %428, %struct.Memory* %396)
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 10
  store i64 %431, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 10
  store i64 %433, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %434 = load i64, i64* %RBP
  %435 = sub i64 %434, 20
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC
  store i64 %435, i64* %R8, align 8, !tbaa !2428
  %438 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 8
  store i64 %440, i64* %PC
  %441 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*)
  %442 = bitcast i8* %438 to double*
  store double %441, double* %442, align 1, !tbaa !2455
  %443 = getelementptr inbounds i8, i8* %438, i64 8
  %444 = bitcast i8* %443 to double*
  store double 0.000000e+00, double* %444, align 1, !tbaa !2455
  %445 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 8
  store i64 %447, i64* %PC
  %448 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 32) to double*)
  %449 = bitcast i8* %445 to double*
  store double %448, double* %449, align 1, !tbaa !2455
  %450 = getelementptr inbounds i8, i8* %445, i64 8
  %451 = bitcast i8* %450 to double*
  store double 0.000000e+00, double* %451, align 1, !tbaa !2455
  %452 = bitcast i32* %R10D to i64*
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 8
  store i64 %454, i64* %PC
  %455 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %456 = zext i32 %455 to i64
  store i64 %456, i64* %452, align 8, !tbaa !2428
  %457 = bitcast i32* %R10D to i64*
  %458 = load i32, i32* %R10D
  %459 = zext i32 %458 to i64
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 9
  store i64 %461, i64* %PC
  %462 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %463 = shl i64 %459, 32
  %464 = ashr exact i64 %463, 32
  %465 = sext i32 %462 to i64
  %466 = mul nsw i64 %465, %464
  %467 = trunc i64 %466 to i32
  %468 = and i64 %466, 4294967295
  store i64 %468, i64* %457, align 8, !tbaa !2428
  %469 = shl i64 %466, 32
  %470 = ashr exact i64 %469, 32
  %471 = icmp ne i64 %470, %466
  %472 = zext i1 %471 to i8
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %472, i8* %473, align 1, !tbaa !2432
  %474 = and i32 %467, 255
  %475 = call i32 @llvm.ctpop.i32(i32 %474) #16
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  %478 = xor i8 %477, 1
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %478, i8* %479, align 1, !tbaa !2446
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %480, align 1, !tbaa !2447
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %481, align 1, !tbaa !2448
  %482 = lshr i32 %467, 31
  %483 = trunc i32 %482 to i8
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %483, i8* %484, align 1, !tbaa !2449
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %472, i8* %485, align 1, !tbaa !2450
  %486 = bitcast i32* %R10D to i64*
  %487 = load i32, i32* %R10D
  %488 = zext i32 %487 to i64
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 9
  store i64 %490, i64* %PC
  %491 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %492 = shl i64 %488, 32
  %493 = ashr exact i64 %492, 32
  %494 = sext i32 %491 to i64
  %495 = mul nsw i64 %494, %493
  %496 = trunc i64 %495 to i32
  %497 = and i64 %495, 4294967295
  store i64 %497, i64* %486, align 8, !tbaa !2428
  %498 = shl i64 %495, 32
  %499 = ashr exact i64 %498, 32
  %500 = icmp ne i64 %499, %495
  %501 = zext i1 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %501, i8* %502, align 1, !tbaa !2432
  %503 = and i32 %496, 255
  %504 = call i32 @llvm.ctpop.i32(i32 %503) #16
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %507, i8* %508, align 1, !tbaa !2446
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %509, align 1, !tbaa !2447
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %510, align 1, !tbaa !2448
  %511 = lshr i32 %496, 31
  %512 = trunc i32 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %512, i8* %513, align 1, !tbaa !2449
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %501, i8* %514, align 1, !tbaa !2450
  %515 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %516 = load i32, i32* %R10D
  %517 = zext i32 %516 to i64
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 5
  store i64 %519, i64* %PC
  %520 = sitofp i32 %516 to double
  %521 = bitcast i8* %515 to double*
  store double %520, double* %521, align 1, !tbaa !2455
  %522 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %523 = bitcast %union.vec128_t* %XMM0 to i8*
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 3
  store i64 %525, i64* %PC
  %526 = bitcast i8* %523 to <2 x i32>*
  %527 = load <2 x i32>, <2 x i32>* %526, align 1
  %528 = getelementptr inbounds i8, i8* %523, i64 8
  %529 = bitcast i8* %528 to <2 x i32>*
  %530 = load <2 x i32>, <2 x i32>* %529, align 1
  %531 = extractelement <2 x i32> %527, i32 0
  %532 = bitcast i8* %522 to i32*
  store i32 %531, i32* %532, align 1, !tbaa !2453
  %533 = extractelement <2 x i32> %527, i32 1
  %534 = getelementptr inbounds i8, i8* %522, i64 4
  %535 = bitcast i8* %534 to i32*
  store i32 %533, i32* %535, align 1, !tbaa !2453
  %536 = extractelement <2 x i32> %530, i32 0
  %537 = getelementptr inbounds i8, i8* %522, i64 8
  %538 = bitcast i8* %537 to i32*
  store i32 %536, i32* %538, align 1, !tbaa !2453
  %539 = extractelement <2 x i32> %530, i32 1
  %540 = getelementptr inbounds i8, i8* %522, i64 12
  %541 = bitcast i8* %540 to i32*
  store i32 %539, i32* %541, align 1, !tbaa !2453
  %542 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %543 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %544 = bitcast %union.vec128_t* %XMM2 to i8*
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 4
  store i64 %546, i64* %PC
  %547 = bitcast i8* %543 to double*
  %548 = load double, double* %547, align 1
  %549 = getelementptr inbounds i8, i8* %543, i64 8
  %550 = bitcast i8* %549 to i64*
  %551 = load i64, i64* %550, align 1
  %552 = bitcast i8* %544 to double*
  %553 = load double, double* %552, align 1
  %554 = fmul double %548, %553
  %555 = bitcast i8* %542 to double*
  store double %554, double* %555, align 1, !tbaa !2455
  %556 = getelementptr inbounds i8, i8* %542, i64 8
  %557 = bitcast i8* %556 to i64*
  store i64 %551, i64* %557, align 1, !tbaa !2455
  %558 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %559 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %560 = bitcast %union.vec128_t* %XMM1 to i8*
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 4
  store i64 %562, i64* %PC
  %563 = bitcast i8* %559 to double*
  %564 = load double, double* %563, align 1
  %565 = getelementptr inbounds i8, i8* %559, i64 8
  %566 = bitcast i8* %565 to i64*
  %567 = load i64, i64* %566, align 1
  %568 = bitcast i8* %560 to double*
  %569 = load double, double* %568, align 1
  %570 = fdiv double %564, %569
  %571 = bitcast i8* %558 to double*
  store double %570, double* %571, align 1, !tbaa !2455
  %572 = getelementptr inbounds i8, i8* %558, i64 8
  %573 = bitcast i8* %572 to i64*
  store i64 %567, i64* %573, align 1, !tbaa !2455
  %574 = bitcast i32* %R10D to i64*
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 8
  store i64 %576, i64* %PC
  %577 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %578 = zext i32 %577 to i64
  store i64 %578, i64* %574, align 8, !tbaa !2428
  %579 = bitcast i32* %R10D to i64*
  %580 = load i32, i32* %R10D
  %581 = zext i32 %580 to i64
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 9
  store i64 %583, i64* %PC
  %584 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %585 = shl i64 %581, 32
  %586 = ashr exact i64 %585, 32
  %587 = sext i32 %584 to i64
  %588 = mul nsw i64 %587, %586
  %589 = trunc i64 %588 to i32
  %590 = and i64 %588, 4294967295
  store i64 %590, i64* %579, align 8, !tbaa !2428
  %591 = shl i64 %588, 32
  %592 = ashr exact i64 %591, 32
  %593 = icmp ne i64 %592, %588
  %594 = zext i1 %593 to i8
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %594, i8* %595, align 1, !tbaa !2432
  %596 = and i32 %589, 255
  %597 = call i32 @llvm.ctpop.i32(i32 %596) #16
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  %600 = xor i8 %599, 1
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %600, i8* %601, align 1, !tbaa !2446
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %602, align 1, !tbaa !2447
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %603, align 1, !tbaa !2448
  %604 = lshr i32 %589, 31
  %605 = trunc i32 %604 to i8
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %605, i8* %606, align 1, !tbaa !2449
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %594, i8* %607, align 1, !tbaa !2450
  %608 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %609 = load i32, i32* %R10D
  %610 = zext i32 %609 to i64
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC
  %613 = sitofp i32 %609 to double
  %614 = bitcast i8* %608 to double*
  store double %613, double* %614, align 1, !tbaa !2455
  %615 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %616 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %617 = bitcast %union.vec128_t* %XMM1 to i8*
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 4
  store i64 %619, i64* %PC
  %620 = bitcast i8* %616 to double*
  %621 = load double, double* %620, align 1
  %622 = getelementptr inbounds i8, i8* %616, i64 8
  %623 = bitcast i8* %622 to i64*
  %624 = load i64, i64* %623, align 1
  %625 = bitcast i8* %617 to double*
  %626 = load double, double* %625, align 1
  %627 = fmul double %621, %626
  %628 = bitcast i8* %615 to double*
  store double %627, double* %628, align 1, !tbaa !2455
  %629 = getelementptr inbounds i8, i8* %615, i64 8
  %630 = bitcast i8* %629 to i64*
  store i64 %624, i64* %630, align 1, !tbaa !2455
  %631 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %632 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %633 = bitcast %union.vec128_t* %XMM0 to i8*
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC
  %636 = bitcast i8* %632 to double*
  %637 = load double, double* %636, align 1
  %638 = getelementptr inbounds i8, i8* %632, i64 8
  %639 = bitcast i8* %638 to i64*
  %640 = load i64, i64* %639, align 1
  %641 = bitcast i8* %633 to double*
  %642 = load double, double* %641, align 1
  %643 = fadd double %637, %642
  %644 = bitcast i8* %631 to double*
  store double %643, double* %644, align 1, !tbaa !2455
  %645 = getelementptr inbounds i8, i8* %631, i64 8
  %646 = bitcast i8* %645 to i64*
  store i64 %640, i64* %646, align 1, !tbaa !2455
  %647 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %648 = bitcast %union.vec128_t* %XMM3 to i8*
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = bitcast i8* %647 to <2 x i32>*
  %652 = load <2 x i32>, <2 x i32>* %651, align 1
  %653 = getelementptr inbounds i8, i8* %647, i64 8
  %654 = bitcast i8* %653 to <2 x i32>*
  %655 = load <2 x i32>, <2 x i32>* %654, align 1
  %656 = bitcast i8* %648 to double*
  %657 = load double, double* %656, align 1
  %658 = fptrunc double %657 to float
  %659 = bitcast i8* %647 to float*
  store float %658, float* %659, align 1, !tbaa !2453
  %660 = extractelement <2 x i32> %652, i32 1
  %661 = getelementptr inbounds i8, i8* %647, i64 4
  %662 = bitcast i8* %661 to i32*
  store i32 %660, i32* %662, align 1, !tbaa !2453
  %663 = extractelement <2 x i32> %655, i32 0
  %664 = bitcast i8* %653 to i32*
  store i32 %663, i32* %664, align 1, !tbaa !2453
  %665 = extractelement <2 x i32> %655, i32 1
  %666 = getelementptr inbounds i8, i8* %647, i64 12
  %667 = bitcast i8* %666 to i32*
  store i32 %665, i32* %667, align 1, !tbaa !2453
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 12
  %670 = bitcast %union.vec128_t* %XMM0 to i8*
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 5
  store i64 %672, i64* %PC
  %673 = bitcast i8* %670 to <2 x float>*
  %674 = load <2 x float>, <2 x float>* %673, align 1
  %675 = extractelement <2 x float> %674, i32 0
  %676 = inttoptr i64 %669 to float*
  store float %675, float* %676
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 7
  store i64 %678, i64* %PC
  %679 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %680 = zext i32 %679 to i64
  store i64 %680, i64* %RSI, align 8, !tbaa !2428
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 7
  store i64 %682, i64* %PC
  %683 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %684 = zext i32 %683 to i64
  store i64 %684, i64* %RDX, align 8, !tbaa !2428
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 884
  %687 = load i32, i32* %EAX
  %688 = zext i32 %687 to i64
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 6
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %686 to i32*
  store i32 %687, i32* %691
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 4027
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 5
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 5
  store i64 %697, i64* %PC
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %699 = load i64, i64* %698, align 8, !tbaa !2428
  %700 = add i64 %699, -8
  %701 = inttoptr i64 %700 to i64*
  store i64 %695, i64* %701
  store i64 %700, i64* %698, align 8, !tbaa !2428
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %693, i64* %702, align 8, !tbaa !2428
  %703 = load i64, i64* %PC
  %704 = call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* %0, i64 %703, %struct.Memory* %429)
  %705 = load i64, i64* %PC
  %706 = sub i64 %705, 570
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 5
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  store i64 %710, i64* %PC
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %712 = load i64, i64* %711, align 8, !tbaa !2428
  %713 = add i64 %712, -8
  %714 = inttoptr i64 %713 to i64*
  store i64 %708, i64* %714
  store i64 %713, i64* %711, align 8, !tbaa !2428
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %706, i64* %715, align 8, !tbaa !2428
  %716 = load i64, i64* %PC
  %717 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %716, %struct.Memory* %704)
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 10
  store i64 %719, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 10
  store i64 %721, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 10
  store i64 %723, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %724 = load i64, i64* %RBP
  %725 = sub i64 %724, 40
  %726 = bitcast %union.vec128_t* %XMM0 to i8*
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  store i64 %728, i64* %PC
  %729 = bitcast i8* %726 to <2 x float>*
  %730 = load <2 x float>, <2 x float>* %729, align 1
  %731 = extractelement <2 x float> %730, i32 0
  %732 = inttoptr i64 %725 to float*
  store float %731, float* %732
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 7
  store i64 %734, i64* %PC
  %735 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %736 = zext i32 %735 to i64
  store i64 %736, i64* %RSI, align 8, !tbaa !2428
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 7
  store i64 %738, i64* %PC
  %739 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %740 = zext i32 %739 to i64
  store i64 %740, i64* %RDX, align 8, !tbaa !2428
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 4432
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 5
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 5
  store i64 %746, i64* %PC
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %748 = load i64, i64* %747, align 8, !tbaa !2428
  %749 = add i64 %748, -8
  %750 = inttoptr i64 %749 to i64*
  store i64 %744, i64* %750
  store i64 %749, i64* %747, align 8, !tbaa !2428
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %742, i64* %751, align 8, !tbaa !2428
  %752 = load i64, i64* %PC
  %753 = call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* %0, i64 %752, %struct.Memory* %717)
  %754 = load i64, i64* %PC
  %755 = sub i64 %754, 629
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  store i64 %759, i64* %PC
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %761 = load i64, i64* %760, align 8, !tbaa !2428
  %762 = add i64 %761, -8
  %763 = inttoptr i64 %762 to i64*
  store i64 %757, i64* %763
  store i64 %762, i64* %760, align 8, !tbaa !2428
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %755, i64* %764, align 8, !tbaa !2428
  %765 = load i64, i64* %PC
  %766 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %765, %struct.Memory* %753)
  %767 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %768 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 40
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 5
  store i64 %772, i64* %PC
  %773 = bitcast i8* %768 to <2 x float>*
  %774 = load <2 x float>, <2 x float>* %773, align 1
  %775 = getelementptr inbounds i8, i8* %768, i64 8
  %776 = bitcast i8* %775 to <2 x i32>*
  %777 = load <2 x i32>, <2 x i32>* %776, align 1
  %778 = inttoptr i64 %770 to float*
  %779 = load float, float* %778
  %780 = extractelement <2 x float> %774, i32 0
  %781 = fsub float %780, %779
  %782 = bitcast i8* %767 to float*
  store float %781, float* %782, align 1, !tbaa !2453
  %783 = bitcast <2 x float> %774 to <2 x i32>
  %784 = extractelement <2 x i32> %783, i32 1
  %785 = getelementptr inbounds i8, i8* %767, i64 4
  %786 = bitcast i8* %785 to i32*
  store i32 %784, i32* %786, align 1, !tbaa !2453
  %787 = extractelement <2 x i32> %777, i32 0
  %788 = getelementptr inbounds i8, i8* %767, i64 8
  %789 = bitcast i8* %788 to i32*
  store i32 %787, i32* %789, align 1, !tbaa !2453
  %790 = extractelement <2 x i32> %777, i32 1
  %791 = getelementptr inbounds i8, i8* %767, i64 12
  %792 = bitcast i8* %791 to i32*
  store i32 %790, i32* %792, align 1, !tbaa !2453
  %793 = bitcast %union.vec128_t* %XMM0 to i8*
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 9
  store i64 %795, i64* %PC
  %796 = bitcast i8* %793 to <2 x float>*
  %797 = load <2 x float>, <2 x float>* %796, align 1
  %798 = extractelement <2 x float> %797, i32 0
  store float %798, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*)
  %799 = load i64, i64* %PC
  %800 = sub i64 %799, 648
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 5
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 5
  store i64 %804, i64* %PC
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %806 = load i64, i64* %805, align 8, !tbaa !2428
  %807 = add i64 %806, -8
  %808 = inttoptr i64 %807 to i64*
  store i64 %802, i64* %808
  store i64 %807, i64* %805, align 8, !tbaa !2428
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %800, i64* %809, align 8, !tbaa !2428
  %810 = load i64, i64* %PC
  %811 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %810, %struct.Memory* %766)
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 10
  store i64 %813, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 10
  store i64 %815, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 10
  store i64 %817, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %818 = bitcast i32* %R9D to i64*
  %819 = load i32, i32* %R9D
  %820 = zext i32 %819 to i64
  %821 = load i32, i32* %R9D
  %822 = zext i32 %821 to i64
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 3
  store i64 %824, i64* %PC
  %825 = xor i64 %822, %820
  %826 = trunc i64 %825 to i32
  %827 = and i64 %825, 4294967295
  store i64 %827, i64* %818, align 8, !tbaa !2428
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %828, align 1, !tbaa !2432
  %829 = and i32 %826, 255
  %830 = call i32 @llvm.ctpop.i32(i32 %829) #16
  %831 = trunc i32 %830 to i8
  %832 = and i8 %831, 1
  %833 = xor i8 %832, 1
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %833, i8* %834, align 1, !tbaa !2446
  %835 = icmp eq i32 %826, 0
  %836 = zext i1 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %836, i8* %837, align 1, !tbaa !2448
  %838 = lshr i32 %826, 31
  %839 = trunc i32 %838 to i8
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %839, i8* %840, align 1, !tbaa !2449
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %841, align 1, !tbaa !2450
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %842, align 1, !tbaa !2447
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 40
  %845 = bitcast %union.vec128_t* %XMM0 to i8*
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = bitcast i8* %845 to <2 x float>*
  %849 = load <2 x float>, <2 x float>* %848, align 1
  %850 = extractelement <2 x float> %849, i32 0
  %851 = inttoptr i64 %844 to float*
  store float %850, float* %851
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 7
  store i64 %853, i64* %PC
  %854 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %855 = zext i32 %854 to i64
  store i64 %855, i64* %RSI, align 8, !tbaa !2428
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 7
  store i64 %857, i64* %PC
  %858 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %859 = zext i32 %858 to i64
  store i64 %859, i64* %RDX, align 8, !tbaa !2428
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 5135
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 5
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %867 = load i64, i64* %866, align 8, !tbaa !2428
  %868 = add i64 %867, -8
  %869 = inttoptr i64 %868 to i64*
  store i64 %863, i64* %869
  store i64 %868, i64* %866, align 8, !tbaa !2428
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %861, i64* %870, align 8, !tbaa !2428
  %871 = load i64, i64* %PC
  %872 = call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* %0, i64 %871, %struct.Memory* %811)
  %873 = load i64, i64* %PC
  %874 = sub i64 %873, 710
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 5
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 5
  store i64 %878, i64* %PC
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %880 = load i64, i64* %879, align 8, !tbaa !2428
  %881 = add i64 %880, -8
  %882 = inttoptr i64 %881 to i64*
  store i64 %876, i64* %882
  store i64 %881, i64* %879, align 8, !tbaa !2428
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %874, i64* %883, align 8, !tbaa !2428
  %884 = load i64, i64* %PC
  %885 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %884, %struct.Memory* %872)
  %886 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %887 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %888 = load i64, i64* %RBP
  %889 = sub i64 %888, 40
  %890 = load i64, i64* %PC
  %891 = add i64 %890, 5
  store i64 %891, i64* %PC
  %892 = bitcast i8* %887 to <2 x float>*
  %893 = load <2 x float>, <2 x float>* %892, align 1
  %894 = getelementptr inbounds i8, i8* %887, i64 8
  %895 = bitcast i8* %894 to <2 x i32>*
  %896 = load <2 x i32>, <2 x i32>* %895, align 1
  %897 = inttoptr i64 %889 to float*
  %898 = load float, float* %897
  %899 = extractelement <2 x float> %893, i32 0
  %900 = fsub float %899, %898
  %901 = bitcast i8* %886 to float*
  store float %900, float* %901, align 1, !tbaa !2453
  %902 = bitcast <2 x float> %893 to <2 x i32>
  %903 = extractelement <2 x i32> %902, i32 1
  %904 = getelementptr inbounds i8, i8* %886, i64 4
  %905 = bitcast i8* %904 to i32*
  store i32 %903, i32* %905, align 1, !tbaa !2453
  %906 = extractelement <2 x i32> %896, i32 0
  %907 = getelementptr inbounds i8, i8* %886, i64 8
  %908 = bitcast i8* %907 to i32*
  store i32 %906, i32* %908, align 1, !tbaa !2453
  %909 = extractelement <2 x i32> %896, i32 1
  %910 = getelementptr inbounds i8, i8* %886, i64 12
  %911 = bitcast i8* %910 to i32*
  store i32 %909, i32* %911, align 1, !tbaa !2453
  %912 = bitcast %union.vec128_t* %XMM0 to i8*
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 9
  store i64 %914, i64* %PC
  %915 = bitcast i8* %912 to <2 x float>*
  %916 = load <2 x float>, <2 x float>* %915, align 1
  %917 = extractelement <2 x float> %916, i32 0
  store float %917, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*)
  %918 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 9
  store i64 %920, i64* %PC
  %921 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*)
  %922 = bitcast i8* %918 to float*
  store float %921, float* %922, align 1, !tbaa !2453
  %923 = getelementptr inbounds i8, i8* %918, i64 4
  %924 = bitcast i8* %923 to float*
  store float 0.000000e+00, float* %924, align 1, !tbaa !2453
  %925 = getelementptr inbounds i8, i8* %918, i64 8
  %926 = bitcast i8* %925 to float*
  store float 0.000000e+00, float* %926, align 1, !tbaa !2453
  %927 = getelementptr inbounds i8, i8* %918, i64 12
  %928 = bitcast i8* %927 to float*
  store float 0.000000e+00, float* %928, align 1, !tbaa !2453
  %929 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %930 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 9
  store i64 %932, i64* %PC
  %933 = bitcast i8* %930 to <2 x float>*
  %934 = load <2 x float>, <2 x float>* %933, align 1
  %935 = getelementptr inbounds i8, i8* %930, i64 8
  %936 = bitcast i8* %935 to <2 x i32>*
  %937 = load <2 x i32>, <2 x i32>* %936, align 1
  %938 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*)
  %939 = extractelement <2 x float> %934, i32 0
  %940 = fadd float %939, %938
  %941 = bitcast i8* %929 to float*
  store float %940, float* %941, align 1, !tbaa !2453
  %942 = bitcast <2 x float> %934 to <2 x i32>
  %943 = extractelement <2 x i32> %942, i32 1
  %944 = getelementptr inbounds i8, i8* %929, i64 4
  %945 = bitcast i8* %944 to i32*
  store i32 %943, i32* %945, align 1, !tbaa !2453
  %946 = extractelement <2 x i32> %937, i32 0
  %947 = getelementptr inbounds i8, i8* %929, i64 8
  %948 = bitcast i8* %947 to i32*
  store i32 %946, i32* %948, align 1, !tbaa !2453
  %949 = extractelement <2 x i32> %937, i32 1
  %950 = getelementptr inbounds i8, i8* %929, i64 12
  %951 = bitcast i8* %950 to i32*
  store i32 %949, i32* %951, align 1, !tbaa !2453
  %952 = load i64, i64* %RBP
  %953 = sub i64 %952, 16
  %954 = bitcast %union.vec128_t* %XMM0 to i8*
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 5
  store i64 %956, i64* %PC
  %957 = bitcast i8* %954 to <2 x float>*
  %958 = load <2 x float>, <2 x float>* %957, align 1
  %959 = extractelement <2 x float> %958, i32 0
  %960 = inttoptr i64 %953 to float*
  store float %959, float* %960
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 11
  store i64 %962, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4008bb

block_400def:                                     ; preds = %block_400d9e
  %963 = sub i64 %6226, 2095
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 5
  %966 = load i64, i64* %PC
  %967 = add i64 %966, 5
  store i64 %967, i64* %PC
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %969 = load i64, i64* %968, align 8, !tbaa !2428
  %970 = add i64 %969, -8
  %971 = inttoptr i64 %970 to i64*
  store i64 %965, i64* %971
  store i64 %970, i64* %968, align 8, !tbaa !2428
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %963, i64* %972, align 8, !tbaa !2428
  %973 = load i64, i64* %PC
  %974 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %973, %struct.Memory* %MEMORY.12)
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 10
  store i64 %976, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  %977 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %978 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %979 = bitcast %union.vec128_t* %XMM1 to i8*
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 3
  store i64 %981, i64* %PC
  %982 = bitcast i8* %978 to i64*
  %983 = load i64, i64* %982, align 1
  %984 = getelementptr inbounds i8, i8* %978, i64 8
  %985 = bitcast i8* %984 to i64*
  %986 = load i64, i64* %985, align 1
  %987 = bitcast i8* %979 to i64*
  %988 = load i64, i64* %987, align 1
  %989 = getelementptr inbounds i8, i8* %979, i64 8
  %990 = bitcast i8* %989 to i64*
  %991 = load i64, i64* %990, align 1
  %992 = xor i64 %988, %983
  %993 = xor i64 %991, %986
  %994 = trunc i64 %992 to i32
  %995 = lshr i64 %992, 32
  %996 = trunc i64 %995 to i32
  %997 = bitcast i8* %977 to i32*
  store i32 %994, i32* %997, align 1, !tbaa !2452
  %998 = getelementptr inbounds i8, i8* %977, i64 4
  %999 = bitcast i8* %998 to i32*
  store i32 %996, i32* %999, align 1, !tbaa !2452
  %1000 = trunc i64 %993 to i32
  %1001 = getelementptr inbounds i8, i8* %977, i64 8
  %1002 = bitcast i8* %1001 to i32*
  store i32 %1000, i32* %1002, align 1, !tbaa !2452
  %1003 = lshr i64 %993, 32
  %1004 = trunc i64 %1003 to i32
  %1005 = getelementptr inbounds i8, i8* %977, i64 12
  %1006 = bitcast i8* %1005 to i32*
  store i32 %1004, i32* %1006, align 1, !tbaa !2452
  %1007 = load i64, i64* %RBP
  %1008 = sub i64 %1007, 84
  %1009 = bitcast %union.vec128_t* %XMM0 to i8*
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 5
  store i64 %1011, i64* %PC
  %1012 = bitcast i8* %1009 to <2 x float>*
  %1013 = load <2 x float>, <2 x float>* %1012, align 1
  %1014 = extractelement <2 x float> %1013, i32 0
  %1015 = inttoptr i64 %1008 to float*
  store float %1014, float* %1015
  %1016 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1017 = load i64, i64* %RBP
  %1018 = sub i64 %1017, 84
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 5
  store i64 %1020, i64* %PC
  %1021 = inttoptr i64 %1018 to float*
  %1022 = load float, float* %1021
  %1023 = bitcast i8* %1016 to float*
  store float %1022, float* %1023, align 1, !tbaa !2453
  %1024 = getelementptr inbounds i8, i8* %1016, i64 4
  %1025 = bitcast i8* %1024 to float*
  store float 0.000000e+00, float* %1025, align 1, !tbaa !2453
  %1026 = getelementptr inbounds i8, i8* %1016, i64 8
  %1027 = bitcast i8* %1026 to float*
  store float 0.000000e+00, float* %1027, align 1, !tbaa !2453
  %1028 = getelementptr inbounds i8, i8* %1016, i64 12
  %1029 = bitcast i8* %1028 to float*
  store float 0.000000e+00, float* %1029, align 1, !tbaa !2453
  %1030 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1032 = load i64, i64* %RBP
  %1033 = sub i64 %1032, 80
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 5
  store i64 %1035, i64* %PC
  %1036 = bitcast i8* %1031 to <2 x float>*
  %1037 = load <2 x float>, <2 x float>* %1036, align 1
  %1038 = getelementptr inbounds i8, i8* %1031, i64 8
  %1039 = bitcast i8* %1038 to <2 x i32>*
  %1040 = load <2 x i32>, <2 x i32>* %1039, align 1
  %1041 = inttoptr i64 %1033 to float*
  %1042 = load float, float* %1041
  %1043 = extractelement <2 x float> %1037, i32 0
  %1044 = fsub float %1043, %1042
  %1045 = bitcast i8* %1030 to float*
  store float %1044, float* %1045, align 1, !tbaa !2453
  %1046 = bitcast <2 x float> %1037 to <2 x i32>
  %1047 = extractelement <2 x i32> %1046, i32 1
  %1048 = getelementptr inbounds i8, i8* %1030, i64 4
  %1049 = bitcast i8* %1048 to i32*
  store i32 %1047, i32* %1049, align 1, !tbaa !2453
  %1050 = extractelement <2 x i32> %1040, i32 0
  %1051 = getelementptr inbounds i8, i8* %1030, i64 8
  %1052 = bitcast i8* %1051 to i32*
  store i32 %1050, i32* %1052, align 1, !tbaa !2453
  %1053 = extractelement <2 x i32> %1040, i32 1
  %1054 = getelementptr inbounds i8, i8* %1030, i64 12
  %1055 = bitcast i8* %1054 to i32*
  store i32 %1053, i32* %1055, align 1, !tbaa !2453
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 72
  %1058 = bitcast %union.vec128_t* %XMM0 to i8*
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 5
  store i64 %1060, i64* %PC
  %1061 = bitcast i8* %1058 to <2 x float>*
  %1062 = load <2 x float>, <2 x float>* %1061, align 1
  %1063 = extractelement <2 x float> %1062, i32 0
  %1064 = inttoptr i64 %1057 to float*
  store float %1063, float* %1064
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 8
  store i64 %1066, i64* %PC
  %1067 = load i64, i64* @stderr
  store i64 %1067, i64* %RDI, align 8, !tbaa !2428
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 68
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = zext i32 %1073 to i64
  store i64 %1074, i64* %RDX, align 8, !tbaa !2428
  %1075 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1076 = bitcast %union.vec128_t* %XMM1 to i8*
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 3
  store i64 %1078, i64* %PC
  %1079 = bitcast i8* %1076 to <2 x i32>*
  %1080 = load <2 x i32>, <2 x i32>* %1079, align 1
  %1081 = getelementptr inbounds i8, i8* %1076, i64 8
  %1082 = bitcast i8* %1081 to <2 x i32>*
  %1083 = load <2 x i32>, <2 x i32>* %1082, align 1
  %1084 = extractelement <2 x i32> %1080, i32 0
  %1085 = bitcast i8* %1075 to i32*
  store i32 %1084, i32* %1085, align 1, !tbaa !2453
  %1086 = extractelement <2 x i32> %1080, i32 1
  %1087 = getelementptr inbounds i8, i8* %1075, i64 4
  %1088 = bitcast i8* %1087 to i32*
  store i32 %1086, i32* %1088, align 1, !tbaa !2453
  %1089 = extractelement <2 x i32> %1083, i32 0
  %1090 = getelementptr inbounds i8, i8* %1075, i64 8
  %1091 = bitcast i8* %1090 to i32*
  store i32 %1089, i32* %1091, align 1, !tbaa !2453
  %1092 = extractelement <2 x i32> %1083, i32 1
  %1093 = getelementptr inbounds i8, i8* %1075, i64 12
  %1094 = bitcast i8* %1093 to i32*
  store i32 %1092, i32* %1094, align 1, !tbaa !2453
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 2
  store i64 %1096, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1097 = load i64, i64* %PC
  %1098 = sub i64 %1097, 2405
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 5
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 5
  store i64 %1102, i64* %PC
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1104 = load i64, i64* %1103, align 8, !tbaa !2428
  %1105 = add i64 %1104, -8
  %1106 = inttoptr i64 %1105 to i64*
  store i64 %1100, i64* %1106
  store i64 %1105, i64* %1103, align 8, !tbaa !2428
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1098, i64* %1107, align 8, !tbaa !2428
  %1108 = load i64, i64* %PC
  %1109 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %1108, %struct.Memory* %974)
  %1110 = load i64, i64* %RBP
  %1111 = sub i64 %1110, 64
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 4
  store i64 %1113, i64* %PC
  %1114 = inttoptr i64 %1111 to i32*
  %1115 = load i32, i32* %1114
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1116, align 1, !tbaa !2432
  %1117 = and i32 %1115, 255
  %1118 = call i32 @llvm.ctpop.i32(i32 %1117) #16
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1121, i8* %1122, align 1, !tbaa !2446
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1123, align 1, !tbaa !2447
  %1124 = icmp eq i32 %1115, 0
  %1125 = zext i1 %1124 to i8
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1125, i8* %1126, align 1, !tbaa !2448
  %1127 = lshr i32 %1115, 31
  %1128 = trunc i32 %1127 to i8
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1128, i8* %1129, align 1, !tbaa !2449
  %1130 = lshr i32 %1115, 31
  %1131 = xor i32 %1127, %1130
  %1132 = add nuw nsw i32 %1131, %1130
  %1133 = icmp eq i32 %1132, 2
  %1134 = zext i1 %1133 to i8
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1134, i8* %1135, align 1, !tbaa !2450
  %1136 = load i64, i64* %RBP
  %1137 = sub i64 %1136, 940
  %1138 = load i32, i32* %EAX
  %1139 = zext i32 %1138 to i64
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 6
  store i64 %1141, i64* %PC
  %1142 = inttoptr i64 %1137 to i32*
  store i32 %1138, i32* %1142
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 15
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 6
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 6
  store i64 %1148, i64* %PC
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1150 = load i8, i8* %1149, align 1, !tbaa !2449
  %1151 = icmp ne i8 %1150, 0
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1153 = load i8, i8* %1152, align 1, !tbaa !2450
  %1154 = icmp ne i8 %1153, 0
  %1155 = xor i1 %1151, %1154
  %1156 = xor i1 %1155, true
  %1157 = zext i1 %1156 to i8
  store i8 %1157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1159 = select i1 %1155, i64 %1146, i64 %1144
  store i64 %1159, i64* %1158, align 8, !tbaa !2428
  %1160 = load i8, i8* %BRANCH_TAKEN
  %1161 = icmp eq i8 %1160, 1
  br i1 %1161, label %block_400e43, label %block_400e3a

block_400f66:                                     ; preds = %block_400ee0
  %1162 = sub i64 %6285, 2470
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 5
  %1165 = load i64, i64* %PC
  %1166 = add i64 %1165, 5
  store i64 %1166, i64* %PC
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1168 = load i64, i64* %1167, align 8, !tbaa !2428
  %1169 = add i64 %1168, -8
  %1170 = inttoptr i64 %1169 to i64*
  store i64 %1164, i64* %1170
  store i64 %1169, i64* %1167, align 8, !tbaa !2428
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1162, i64* %1171, align 8, !tbaa !2428
  %1172 = load i64, i64* %PC
  %1173 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %1172, %struct.Memory* %MEMORY.13)
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 10
  store i64 %1175, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  %1176 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1177 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1178 = bitcast %union.vec128_t* %XMM1 to i8*
  %1179 = load i64, i64* %PC
  %1180 = add i64 %1179, 3
  store i64 %1180, i64* %PC
  %1181 = bitcast i8* %1177 to i64*
  %1182 = load i64, i64* %1181, align 1
  %1183 = getelementptr inbounds i8, i8* %1177, i64 8
  %1184 = bitcast i8* %1183 to i64*
  %1185 = load i64, i64* %1184, align 1
  %1186 = bitcast i8* %1178 to i64*
  %1187 = load i64, i64* %1186, align 1
  %1188 = getelementptr inbounds i8, i8* %1178, i64 8
  %1189 = bitcast i8* %1188 to i64*
  %1190 = load i64, i64* %1189, align 1
  %1191 = xor i64 %1187, %1182
  %1192 = xor i64 %1190, %1185
  %1193 = trunc i64 %1191 to i32
  %1194 = lshr i64 %1191, 32
  %1195 = trunc i64 %1194 to i32
  %1196 = bitcast i8* %1176 to i32*
  store i32 %1193, i32* %1196, align 1, !tbaa !2452
  %1197 = getelementptr inbounds i8, i8* %1176, i64 4
  %1198 = bitcast i8* %1197 to i32*
  store i32 %1195, i32* %1198, align 1, !tbaa !2452
  %1199 = trunc i64 %1192 to i32
  %1200 = getelementptr inbounds i8, i8* %1176, i64 8
  %1201 = bitcast i8* %1200 to i32*
  store i32 %1199, i32* %1201, align 1, !tbaa !2452
  %1202 = lshr i64 %1192, 32
  %1203 = trunc i64 %1202 to i32
  %1204 = getelementptr inbounds i8, i8* %1176, i64 12
  %1205 = bitcast i8* %1204 to i32*
  store i32 %1203, i32* %1205, align 1, !tbaa !2452
  %1206 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 80
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 5
  store i64 %1211, i64* %PC
  %1212 = bitcast i8* %1207 to <2 x float>*
  %1213 = load <2 x float>, <2 x float>* %1212, align 1
  %1214 = getelementptr inbounds i8, i8* %1207, i64 8
  %1215 = bitcast i8* %1214 to <2 x i32>*
  %1216 = load <2 x i32>, <2 x i32>* %1215, align 1
  %1217 = inttoptr i64 %1209 to float*
  %1218 = load float, float* %1217
  %1219 = extractelement <2 x float> %1213, i32 0
  %1220 = fsub float %1219, %1218
  %1221 = bitcast i8* %1206 to float*
  store float %1220, float* %1221, align 1, !tbaa !2453
  %1222 = bitcast <2 x float> %1213 to <2 x i32>
  %1223 = extractelement <2 x i32> %1222, i32 1
  %1224 = getelementptr inbounds i8, i8* %1206, i64 4
  %1225 = bitcast i8* %1224 to i32*
  store i32 %1223, i32* %1225, align 1, !tbaa !2453
  %1226 = extractelement <2 x i32> %1216, i32 0
  %1227 = getelementptr inbounds i8, i8* %1206, i64 8
  %1228 = bitcast i8* %1227 to i32*
  store i32 %1226, i32* %1228, align 1, !tbaa !2453
  %1229 = extractelement <2 x i32> %1216, i32 1
  %1230 = getelementptr inbounds i8, i8* %1206, i64 12
  %1231 = bitcast i8* %1230 to i32*
  store i32 %1229, i32* %1231, align 1, !tbaa !2453
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 84
  %1234 = bitcast %union.vec128_t* %XMM0 to i8*
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 5
  store i64 %1236, i64* %PC
  %1237 = bitcast i8* %1234 to <2 x float>*
  %1238 = load <2 x float>, <2 x float>* %1237, align 1
  %1239 = extractelement <2 x float> %1238, i32 0
  %1240 = inttoptr i64 %1233 to float*
  store float %1239, float* %1240
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 8
  store i64 %1242, i64* %PC
  %1243 = load i64, i64* @stderr
  store i64 %1243, i64* %RDI, align 8, !tbaa !2428
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 7
  store i64 %1245, i64* %PC
  %1246 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %1247 = zext i32 %1246 to i64
  store i64 %1247, i64* %RDX, align 8, !tbaa !2428
  %1248 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1249 = bitcast %union.vec128_t* %XMM1 to i8*
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 3
  store i64 %1251, i64* %PC
  %1252 = bitcast i8* %1249 to <2 x i32>*
  %1253 = load <2 x i32>, <2 x i32>* %1252, align 1
  %1254 = getelementptr inbounds i8, i8* %1249, i64 8
  %1255 = bitcast i8* %1254 to <2 x i32>*
  %1256 = load <2 x i32>, <2 x i32>* %1255, align 1
  %1257 = extractelement <2 x i32> %1253, i32 0
  %1258 = bitcast i8* %1248 to i32*
  store i32 %1257, i32* %1258, align 1, !tbaa !2453
  %1259 = extractelement <2 x i32> %1253, i32 1
  %1260 = getelementptr inbounds i8, i8* %1248, i64 4
  %1261 = bitcast i8* %1260 to i32*
  store i32 %1259, i32* %1261, align 1, !tbaa !2453
  %1262 = extractelement <2 x i32> %1256, i32 0
  %1263 = getelementptr inbounds i8, i8* %1248, i64 8
  %1264 = bitcast i8* %1263 to i32*
  store i32 %1262, i32* %1264, align 1, !tbaa !2453
  %1265 = extractelement <2 x i32> %1256, i32 1
  %1266 = getelementptr inbounds i8, i8* %1248, i64 12
  %1267 = bitcast i8* %1266 to i32*
  store i32 %1265, i32* %1267, align 1, !tbaa !2453
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 2
  store i64 %1269, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1270 = load i64, i64* %PC
  %1271 = sub i64 %1270, 2774
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 5
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 5
  store i64 %1275, i64* %PC
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1277 = load i64, i64* %1276, align 8, !tbaa !2428
  %1278 = add i64 %1277, -8
  %1279 = inttoptr i64 %1278 to i64*
  store i64 %1273, i64* %1279
  store i64 %1278, i64* %1276, align 8, !tbaa !2428
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1271, i64* %1280, align 8, !tbaa !2428
  %1281 = load i64, i64* %PC
  %1282 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %1281, %struct.Memory* %1173)
  %1283 = load i64, i64* %RBP
  %1284 = sub i64 %1283, 64
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 4
  store i64 %1286, i64* %PC
  %1287 = inttoptr i64 %1284 to i32*
  %1288 = load i32, i32* %1287
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1289, align 1, !tbaa !2432
  %1290 = and i32 %1288, 255
  %1291 = call i32 @llvm.ctpop.i32(i32 %1290) #16
  %1292 = trunc i32 %1291 to i8
  %1293 = and i8 %1292, 1
  %1294 = xor i8 %1293, 1
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1294, i8* %1295, align 1, !tbaa !2446
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1296, align 1, !tbaa !2447
  %1297 = icmp eq i32 %1288, 0
  %1298 = zext i1 %1297 to i8
  %1299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1298, i8* %1299, align 1, !tbaa !2448
  %1300 = lshr i32 %1288, 31
  %1301 = trunc i32 %1300 to i8
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1301, i8* %1302, align 1, !tbaa !2449
  %1303 = lshr i32 %1288, 31
  %1304 = xor i32 %1300, %1303
  %1305 = add nuw nsw i32 %1304, %1303
  %1306 = icmp eq i32 %1305, 2
  %1307 = zext i1 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1307, i8* %1308, align 1, !tbaa !2450
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 952
  %1311 = load i32, i32* %EAX
  %1312 = zext i32 %1311 to i64
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 6
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1310 to i32*
  store i32 %1311, i32* %1315
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 23
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 6
  %1320 = load i64, i64* %PC
  %1321 = add i64 %1320, 6
  store i64 %1321, i64* %PC
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1323 = load i8, i8* %1322, align 1, !tbaa !2449
  %1324 = icmp ne i8 %1323, 0
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1326 = load i8, i8* %1325, align 1, !tbaa !2450
  %1327 = icmp ne i8 %1326, 0
  %1328 = xor i1 %1324, %1327
  %1329 = xor i1 %1328, true
  %1330 = zext i1 %1329 to i8
  store i8 %1330, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1332 = select i1 %1328, i64 %1319, i64 %1317
  store i64 %1332, i64* %1331, align 8, !tbaa !2428
  %1333 = load i8, i8* %BRANCH_TAKEN
  %1334 = icmp eq i8 %1333, 1
  br i1 %1334, label %block_400fbc, label %block_400fab

block_4014e5:                                     ; preds = %block_4014d7
  %1335 = sub i64 %1802, 3877
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 5
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 5
  store i64 %1339, i64* %PC
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1341 = load i64, i64* %1340, align 8, !tbaa !2428
  %1342 = add i64 %1341, -8
  %1343 = inttoptr i64 %1342 to i64*
  store i64 %1337, i64* %1343
  store i64 %1342, i64* %1340, align 8, !tbaa !2428
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1335, i64* %1344, align 8, !tbaa !2428
  %1345 = load i64, i64* %PC
  %1346 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %1345, %struct.Memory* %MEMORY.1)
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 40
  %1349 = bitcast %union.vec128_t* %XMM0 to i8*
  %1350 = load i64, i64* %PC
  %1351 = add i64 %1350, 5
  store i64 %1351, i64* %PC
  %1352 = bitcast i8* %1349 to <2 x float>*
  %1353 = load <2 x float>, <2 x float>* %1352, align 1
  %1354 = extractelement <2 x float> %1353, i32 0
  %1355 = inttoptr i64 %1348 to float*
  store float %1354, float* %1355
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 11
  store i64 %1357, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4014fa

block_400fe4:                                     ; preds = %block_400fcb
  %1358 = load i64, i64* %PC
  %1359 = add i64 %1358, 11
  store i64 %1359, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  br label %block_400fef

block_4015d8:                                     ; preds = %block_4015c4
  %1360 = add i64 %3230, 10
  store i64 %1360, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %1361 = load i64, i64* %PC
  %1362 = add i64 %1361, 10
  store i64 %1362, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 10
  store i64 %1364, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %1365 = bitcast i32* %R9D to i64*
  %1366 = load i32, i32* %R9D
  %1367 = zext i32 %1366 to i64
  %1368 = load i32, i32* %R9D
  %1369 = zext i32 %1368 to i64
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 3
  store i64 %1371, i64* %PC
  %1372 = xor i64 %1369, %1367
  %1373 = trunc i64 %1372 to i32
  %1374 = and i64 %1372, 4294967295
  store i64 %1374, i64* %1365, align 8, !tbaa !2428
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1375, align 1, !tbaa !2432
  %1376 = and i32 %1373, 255
  %1377 = call i32 @llvm.ctpop.i32(i32 %1376) #16
  %1378 = trunc i32 %1377 to i8
  %1379 = and i8 %1378, 1
  %1380 = xor i8 %1379, 1
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1380, i8* %1381, align 1, !tbaa !2446
  %1382 = icmp eq i32 %1373, 0
  %1383 = zext i1 %1382 to i8
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1383, i8* %1384, align 1, !tbaa !2448
  %1385 = lshr i32 %1373, 31
  %1386 = trunc i32 %1385 to i8
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1386, i8* %1387, align 1, !tbaa !2449
  %1388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1388, align 1, !tbaa !2450
  %1389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1389, align 1, !tbaa !2447
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 7
  store i64 %1391, i64* %PC
  %1392 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %1393 = zext i32 %1392 to i64
  store i64 %1393, i64* %RSI, align 8, !tbaa !2428
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 7
  store i64 %1395, i64* %PC
  %1396 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %1397 = zext i32 %1396 to i64
  store i64 %1397, i64* %RDX, align 8, !tbaa !2428
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 1673
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 5
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 5
  store i64 %1403, i64* %PC
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1405 = load i64, i64* %1404, align 8, !tbaa !2428
  %1406 = add i64 %1405, -8
  %1407 = inttoptr i64 %1406 to i64*
  store i64 %1401, i64* %1407
  store i64 %1406, i64* %1404, align 8, !tbaa !2428
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1399, i64* %1408, align 8, !tbaa !2428
  %1409 = load i64, i64* %PC
  %1410 = call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* %0, i64 %1409, %struct.Memory* %MEMORY.2)
  %1411 = load i64, i64* %PC
  %1412 = add i64 %1411, 7
  store i64 %1412, i64* %PC
  %1413 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1414 = zext i32 %1413 to i64
  store i64 %1414, i64* %RAX, align 8, !tbaa !2428
  %1415 = load i64, i64* %RAX
  %1416 = load i64, i64* %PC
  %1417 = add i64 %1416, 3
  store i64 %1417, i64* %PC
  %1418 = trunc i64 %1415 to i32
  %1419 = add i32 1, %1418
  %1420 = zext i32 %1419 to i64
  store i64 %1420, i64* %RAX, align 8, !tbaa !2428
  %1421 = icmp ult i32 %1419, %1418
  %1422 = icmp ult i32 %1419, 1
  %1423 = or i1 %1421, %1422
  %1424 = zext i1 %1423 to i8
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1424, i8* %1425, align 1, !tbaa !2432
  %1426 = and i32 %1419, 255
  %1427 = call i32 @llvm.ctpop.i32(i32 %1426) #16
  %1428 = trunc i32 %1427 to i8
  %1429 = and i8 %1428, 1
  %1430 = xor i8 %1429, 1
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1430, i8* %1431, align 1, !tbaa !2446
  %1432 = xor i64 1, %1415
  %1433 = trunc i64 %1432 to i32
  %1434 = xor i32 %1433, %1419
  %1435 = lshr i32 %1434, 4
  %1436 = trunc i32 %1435 to i8
  %1437 = and i8 %1436, 1
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1437, i8* %1438, align 1, !tbaa !2447
  %1439 = icmp eq i32 %1419, 0
  %1440 = zext i1 %1439 to i8
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1440, i8* %1441, align 1, !tbaa !2448
  %1442 = lshr i32 %1419, 31
  %1443 = trunc i32 %1442 to i8
  %1444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1443, i8* %1444, align 1, !tbaa !2449
  %1445 = lshr i32 %1418, 31
  %1446 = xor i32 %1442, %1445
  %1447 = add nuw nsw i32 %1446, %1442
  %1448 = icmp eq i32 %1447, 2
  %1449 = zext i1 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1449, i8* %1450, align 1, !tbaa !2450
  %1451 = load i32, i32* %EAX
  %1452 = zext i32 %1451 to i64
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 7
  store i64 %1454, i64* %PC
  store i32 %1451, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1455 = load i64, i64* %PC
  %1456 = sub i64 %1455, 89
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 5
  store i64 %1458, i64* %PC
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1456, i64* %1459, align 8, !tbaa !2428
  br label %block_4015c4

block_401756:                                     ; preds = %block_4014d7
  %1460 = add i64 %1802, 10
  store i64 %1460, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %1461 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1462 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1463 = bitcast %union.vec128_t* %XMM0 to i8*
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 3
  store i64 %1465, i64* %PC
  %1466 = bitcast i8* %1462 to i64*
  %1467 = load i64, i64* %1466, align 1
  %1468 = getelementptr inbounds i8, i8* %1462, i64 8
  %1469 = bitcast i8* %1468 to i64*
  %1470 = load i64, i64* %1469, align 1
  %1471 = bitcast i8* %1463 to i64*
  %1472 = load i64, i64* %1471, align 1
  %1473 = getelementptr inbounds i8, i8* %1463, i64 8
  %1474 = bitcast i8* %1473 to i64*
  %1475 = load i64, i64* %1474, align 1
  %1476 = xor i64 %1472, %1467
  %1477 = xor i64 %1475, %1470
  %1478 = trunc i64 %1476 to i32
  %1479 = lshr i64 %1476, 32
  %1480 = trunc i64 %1479 to i32
  %1481 = bitcast i8* %1461 to i32*
  store i32 %1478, i32* %1481, align 1, !tbaa !2452
  %1482 = getelementptr inbounds i8, i8* %1461, i64 4
  %1483 = bitcast i8* %1482 to i32*
  store i32 %1480, i32* %1483, align 1, !tbaa !2452
  %1484 = trunc i64 %1477 to i32
  %1485 = getelementptr inbounds i8, i8* %1461, i64 8
  %1486 = bitcast i8* %1485 to i32*
  store i32 %1484, i32* %1486, align 1, !tbaa !2452
  %1487 = lshr i64 %1477, 32
  %1488 = trunc i64 %1487 to i32
  %1489 = getelementptr inbounds i8, i8* %1461, i64 12
  %1490 = bitcast i8* %1489 to i32*
  store i32 %1488, i32* %1490, align 1, !tbaa !2452
  %1491 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 8
  store i64 %1493, i64* %PC
  %1494 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 48) to double*)
  %1495 = bitcast i8* %1491 to double*
  store double %1494, double* %1495, align 1, !tbaa !2455
  %1496 = getelementptr inbounds i8, i8* %1491, i64 8
  %1497 = bitcast i8* %1496 to double*
  store double 0.000000e+00, double* %1497, align 1, !tbaa !2455
  %1498 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1499 = load i64, i64* %PC
  %1500 = add i64 %1499, 9
  store i64 %1500, i64* %PC
  %1501 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %1502 = bitcast i8* %1498 to float*
  store float %1501, float* %1502, align 1, !tbaa !2453
  %1503 = getelementptr inbounds i8, i8* %1498, i64 4
  %1504 = bitcast i8* %1503 to float*
  store float 0.000000e+00, float* %1504, align 1, !tbaa !2453
  %1505 = getelementptr inbounds i8, i8* %1498, i64 8
  %1506 = bitcast i8* %1505 to float*
  store float 0.000000e+00, float* %1506, align 1, !tbaa !2453
  %1507 = getelementptr inbounds i8, i8* %1498, i64 12
  %1508 = bitcast i8* %1507 to float*
  store float 0.000000e+00, float* %1508, align 1, !tbaa !2453
  %1509 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1510 = bitcast %union.vec128_t* %XMM2 to i8*
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 4
  store i64 %1512, i64* %PC
  %1513 = bitcast i8* %1510 to <2 x float>*
  %1514 = load <2 x float>, <2 x float>* %1513, align 1
  %1515 = extractelement <2 x float> %1514, i32 0
  %1516 = fpext float %1515 to double
  %1517 = bitcast i8* %1509 to double*
  store double %1516, double* %1517, align 1, !tbaa !2455
  %1518 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1519 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1520 = bitcast %union.vec128_t* %XMM1 to i8*
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 4
  store i64 %1522, i64* %PC
  %1523 = bitcast i8* %1519 to double*
  %1524 = load double, double* %1523, align 1
  %1525 = getelementptr inbounds i8, i8* %1519, i64 8
  %1526 = bitcast i8* %1525 to i64*
  %1527 = load i64, i64* %1526, align 1
  %1528 = bitcast i8* %1520 to double*
  %1529 = load double, double* %1528, align 1
  %1530 = fdiv double %1524, %1529
  %1531 = bitcast i8* %1518 to double*
  store double %1530, double* %1531, align 1, !tbaa !2455
  %1532 = getelementptr inbounds i8, i8* %1518, i64 8
  %1533 = bitcast i8* %1532 to i64*
  store i64 %1527, i64* %1533, align 1, !tbaa !2455
  %1534 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1535 = bitcast %union.vec128_t* %XMM2 to i8*
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 4
  store i64 %1537, i64* %PC
  %1538 = bitcast i8* %1534 to <2 x i32>*
  %1539 = load <2 x i32>, <2 x i32>* %1538, align 1
  %1540 = getelementptr inbounds i8, i8* %1534, i64 8
  %1541 = bitcast i8* %1540 to <2 x i32>*
  %1542 = load <2 x i32>, <2 x i32>* %1541, align 1
  %1543 = bitcast i8* %1535 to double*
  %1544 = load double, double* %1543, align 1
  %1545 = fptrunc double %1544 to float
  %1546 = bitcast i8* %1534 to float*
  store float %1545, float* %1546, align 1, !tbaa !2453
  %1547 = extractelement <2 x i32> %1539, i32 1
  %1548 = getelementptr inbounds i8, i8* %1534, i64 4
  %1549 = bitcast i8* %1548 to i32*
  store i32 %1547, i32* %1549, align 1, !tbaa !2453
  %1550 = extractelement <2 x i32> %1542, i32 0
  %1551 = bitcast i8* %1540 to i32*
  store i32 %1550, i32* %1551, align 1, !tbaa !2453
  %1552 = extractelement <2 x i32> %1542, i32 1
  %1553 = getelementptr inbounds i8, i8* %1534, i64 12
  %1554 = bitcast i8* %1553 to i32*
  store i32 %1552, i32* %1554, align 1, !tbaa !2453
  %1555 = bitcast %union.vec128_t* %XMM1 to i8*
  %1556 = load i64, i64* %PC
  %1557 = add i64 %1556, 9
  store i64 %1557, i64* %PC
  %1558 = bitcast i8* %1555 to <2 x float>*
  %1559 = load <2 x float>, <2 x float>* %1558, align 1
  %1560 = extractelement <2 x float> %1559, i32 0
  store float %1560, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %1561 = load i64, i64* %PC
  %1562 = add i64 %1561, 8
  store i64 %1562, i64* %PC
  %1563 = load i64, i64* @stderr
  store i64 %1563, i64* %RDI, align 8, !tbaa !2428
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 2
  store i64 %1565, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1566 = load i64, i64* %PC
  %1567 = sub i64 %1566, 4819
  %1568 = load i64, i64* %PC
  %1569 = add i64 %1568, 5
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 5
  store i64 %1571, i64* %PC
  %1572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1573 = load i64, i64* %1572, align 8, !tbaa !2428
  %1574 = add i64 %1573, -8
  %1575 = inttoptr i64 %1574 to i64*
  store i64 %1569, i64* %1575
  store i64 %1574, i64* %1572, align 8, !tbaa !2428
  %1576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1567, i64* %1576, align 8, !tbaa !2428
  %1577 = load i64, i64* %PC
  %1578 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %1577, %struct.Memory* %MEMORY.1)
  %1579 = load i64, i64* %RCX
  %1580 = load i32, i32* %ECX
  %1581 = zext i32 %1580 to i64
  %1582 = load i64, i64* %PC
  %1583 = add i64 %1582, 2
  store i64 %1583, i64* %PC
  %1584 = xor i64 %1581, %1579
  %1585 = trunc i64 %1584 to i32
  %1586 = and i64 %1584, 4294967295
  store i64 %1586, i64* %RCX, align 8, !tbaa !2428
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1587, align 1, !tbaa !2432
  %1588 = and i32 %1585, 255
  %1589 = call i32 @llvm.ctpop.i32(i32 %1588) #16
  %1590 = trunc i32 %1589 to i8
  %1591 = and i8 %1590, 1
  %1592 = xor i8 %1591, 1
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1592, i8* %1593, align 1, !tbaa !2446
  %1594 = icmp eq i32 %1585, 0
  %1595 = zext i1 %1594 to i8
  %1596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1595, i8* %1596, align 1, !tbaa !2448
  %1597 = lshr i32 %1585, 31
  %1598 = trunc i32 %1597 to i8
  %1599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1598, i8* %1599, align 1, !tbaa !2449
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1600, align 1, !tbaa !2450
  %1601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1601, align 1, !tbaa !2447
  %1602 = load i64, i64* %RBP
  %1603 = sub i64 %1602, 996
  %1604 = load i32, i32* %EAX
  %1605 = zext i32 %1604 to i64
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 6
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1603 to i32*
  store i32 %1604, i32* %1608
  %1609 = load i32, i32* %ECX
  %1610 = zext i32 %1609 to i64
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 2
  store i64 %1612, i64* %PC
  %1613 = and i64 %1610, 4294967295
  store i64 %1613, i64* %RAX, align 8, !tbaa !2428
  %1614 = load i64, i64* %RSP
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 7
  store i64 %1616, i64* %PC
  %1617 = add i64 1008, %1614
  store i64 %1617, i64* %RSP, align 8, !tbaa !2428
  %1618 = icmp ult i64 %1617, %1614
  %1619 = icmp ult i64 %1617, 1008
  %1620 = or i1 %1618, %1619
  %1621 = zext i1 %1620 to i8
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1621, i8* %1622, align 1, !tbaa !2432
  %1623 = trunc i64 %1617 to i32
  %1624 = and i32 %1623, 255
  %1625 = call i32 @llvm.ctpop.i32(i32 %1624) #16
  %1626 = trunc i32 %1625 to i8
  %1627 = and i8 %1626, 1
  %1628 = xor i8 %1627, 1
  %1629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1628, i8* %1629, align 1, !tbaa !2446
  %1630 = xor i64 1008, %1614
  %1631 = xor i64 %1630, %1617
  %1632 = lshr i64 %1631, 4
  %1633 = trunc i64 %1632 to i8
  %1634 = and i8 %1633, 1
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1634, i8* %1635, align 1, !tbaa !2447
  %1636 = icmp eq i64 %1617, 0
  %1637 = zext i1 %1636 to i8
  %1638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1637, i8* %1638, align 1, !tbaa !2448
  %1639 = lshr i64 %1617, 63
  %1640 = trunc i64 %1639 to i8
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1640, i8* %1641, align 1, !tbaa !2449
  %1642 = lshr i64 %1614, 63
  %1643 = xor i64 %1639, %1642
  %1644 = add nuw nsw i64 %1643, %1639
  %1645 = icmp eq i64 %1644, 2
  %1646 = zext i1 %1645 to i8
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1646, i8* %1647, align 1, !tbaa !2450
  %1648 = load i64, i64* %PC
  %1649 = add i64 %1648, 1
  store i64 %1649, i64* %PC
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1651 = load i64, i64* %1650, align 8, !tbaa !2428
  %1652 = add i64 %1651, 8
  %1653 = inttoptr i64 %1651 to i64*
  %1654 = load i64, i64* %1653
  store i64 %1654, i64* %RBP, align 8, !tbaa !2428
  store i64 %1652, i64* %1650, align 8, !tbaa !2428
  %1655 = load i64, i64* %PC
  %1656 = add i64 %1655, 1
  store i64 %1656, i64* %PC
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1659 = load i64, i64* %1658, align 8, !tbaa !2428
  %1660 = inttoptr i64 %1659 to i64*
  %1661 = load i64, i64* %1660
  store i64 %1661, i64* %1657, align 8, !tbaa !2428
  %1662 = add i64 %1659, 8
  store i64 %1662, i64* %1658, align 8, !tbaa !2428
  ret %struct.Memory* %1578

block_400aee:                                     ; preds = %block_400ab0, %block_400ac6
  %MEMORY.0 = phi %struct.Memory* [ %7468, %block_400ac6 ], [ %7468, %block_400ab0 ]
  %1663 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1664 = load i64, i64* %RBP
  %1665 = sub i64 %1664, 904
  %1666 = load i64, i64* %PC
  %1667 = add i64 %1666, 8
  store i64 %1667, i64* %PC
  %1668 = inttoptr i64 %1665 to double*
  %1669 = load double, double* %1668
  %1670 = bitcast i8* %1663 to double*
  store double %1669, double* %1670, align 1, !tbaa !2455
  %1671 = getelementptr inbounds i8, i8* %1663, i64 8
  %1672 = bitcast i8* %1671 to double*
  store double 0.000000e+00, double* %1672, align 1, !tbaa !2455
  %1673 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1674 = bitcast %union.vec128_t* %XMM0 to i8*
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = bitcast i8* %1673 to <2 x i32>*
  %1678 = load <2 x i32>, <2 x i32>* %1677, align 1
  %1679 = getelementptr inbounds i8, i8* %1673, i64 8
  %1680 = bitcast i8* %1679 to <2 x i32>*
  %1681 = load <2 x i32>, <2 x i32>* %1680, align 1
  %1682 = bitcast i8* %1674 to double*
  %1683 = load double, double* %1682, align 1
  %1684 = fptrunc double %1683 to float
  %1685 = bitcast i8* %1673 to float*
  store float %1684, float* %1685, align 1, !tbaa !2453
  %1686 = extractelement <2 x i32> %1678, i32 1
  %1687 = getelementptr inbounds i8, i8* %1673, i64 4
  %1688 = bitcast i8* %1687 to i32*
  store i32 %1686, i32* %1688, align 1, !tbaa !2453
  %1689 = extractelement <2 x i32> %1681, i32 0
  %1690 = bitcast i8* %1679 to i32*
  store i32 %1689, i32* %1690, align 1, !tbaa !2453
  %1691 = extractelement <2 x i32> %1681, i32 1
  %1692 = getelementptr inbounds i8, i8* %1673, i64 12
  %1693 = bitcast i8* %1692 to i32*
  store i32 %1691, i32* %1693, align 1, !tbaa !2453
  %1694 = load i64, i64* %RBP
  %1695 = sub i64 %1694, 24
  %1696 = bitcast %union.vec128_t* %XMM0 to i8*
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 5
  store i64 %1698, i64* %PC
  %1699 = bitcast i8* %1696 to <2 x float>*
  %1700 = load <2 x float>, <2 x float>* %1699, align 1
  %1701 = extractelement <2 x float> %1700, i32 0
  %1702 = inttoptr i64 %1695 to float*
  store float %1701, float* %1702
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 7
  store i64 %1704, i64* %PC
  %1705 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1706 = zext i32 %1705 to i64
  store i64 %1706, i64* %RAX, align 8, !tbaa !2428
  %1707 = load i64, i64* %RAX
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 3
  store i64 %1709, i64* %PC
  %1710 = trunc i64 %1707 to i32
  %1711 = add i32 1, %1710
  %1712 = zext i32 %1711 to i64
  store i64 %1712, i64* %RAX, align 8, !tbaa !2428
  %1713 = icmp ult i32 %1711, %1710
  %1714 = icmp ult i32 %1711, 1
  %1715 = or i1 %1713, %1714
  %1716 = zext i1 %1715 to i8
  %1717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1716, i8* %1717, align 1, !tbaa !2432
  %1718 = and i32 %1711, 255
  %1719 = call i32 @llvm.ctpop.i32(i32 %1718) #16
  %1720 = trunc i32 %1719 to i8
  %1721 = and i8 %1720, 1
  %1722 = xor i8 %1721, 1
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1722, i8* %1723, align 1, !tbaa !2446
  %1724 = xor i64 1, %1707
  %1725 = trunc i64 %1724 to i32
  %1726 = xor i32 %1725, %1711
  %1727 = lshr i32 %1726, 4
  %1728 = trunc i32 %1727 to i8
  %1729 = and i8 %1728, 1
  %1730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1729, i8* %1730, align 1, !tbaa !2447
  %1731 = icmp eq i32 %1711, 0
  %1732 = zext i1 %1731 to i8
  %1733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1732, i8* %1733, align 1, !tbaa !2448
  %1734 = lshr i32 %1711, 31
  %1735 = trunc i32 %1734 to i8
  %1736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1735, i8* %1736, align 1, !tbaa !2449
  %1737 = lshr i32 %1710, 31
  %1738 = xor i32 %1734, %1737
  %1739 = add nuw nsw i32 %1738, %1734
  %1740 = icmp eq i32 %1739, 2
  %1741 = zext i1 %1740 to i8
  %1742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1741, i8* %1742, align 1, !tbaa !2450
  %1743 = load i32, i32* %EAX
  %1744 = zext i32 %1743 to i64
  %1745 = load i64, i64* %PC
  %1746 = add i64 %1745, 7
  store i64 %1746, i64* %PC
  store i32 %1743, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1747 = load i64, i64* %PC
  %1748 = sub i64 %1747, 297
  %1749 = load i64, i64* %PC
  %1750 = add i64 %1749, 5
  store i64 %1750, i64* %PC
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1748, i64* %1751, align 8, !tbaa !2428
  br label %block_4009e7

block_4014d7:                                     ; preds = %block_401622, %block_4013ec
  %MEMORY.1 = phi %struct.Memory* [ %3067, %block_4013ec ], [ %4278, %block_401622 ]
  %1752 = load i64, i64* %PC
  %1753 = add i64 %1752, 8
  store i64 %1753, i64* %PC
  %1754 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1755 = sub i32 %1754, 12
  %1756 = icmp ult i32 %1754, 12
  %1757 = zext i1 %1756 to i8
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1757, i8* %1758, align 1, !tbaa !2432
  %1759 = and i32 %1755, 255
  %1760 = call i32 @llvm.ctpop.i32(i32 %1759) #16
  %1761 = trunc i32 %1760 to i8
  %1762 = and i8 %1761, 1
  %1763 = xor i8 %1762, 1
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1763, i8* %1764, align 1, !tbaa !2446
  %1765 = xor i32 %1754, 12
  %1766 = xor i32 %1765, %1755
  %1767 = lshr i32 %1766, 4
  %1768 = trunc i32 %1767 to i8
  %1769 = and i8 %1768, 1
  %1770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1769, i8* %1770, align 1, !tbaa !2447
  %1771 = icmp eq i32 %1755, 0
  %1772 = zext i1 %1771 to i8
  %1773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1772, i8* %1773, align 1, !tbaa !2448
  %1774 = lshr i32 %1755, 31
  %1775 = trunc i32 %1774 to i8
  %1776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1775, i8* %1776, align 1, !tbaa !2449
  %1777 = lshr i32 %1754, 31
  %1778 = xor i32 %1774, %1777
  %1779 = add nuw nsw i32 %1778, %1777
  %1780 = icmp eq i32 %1779, 2
  %1781 = zext i1 %1780 to i8
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1781, i8* %1782, align 1, !tbaa !2450
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 631
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 6
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 6
  store i64 %1788, i64* %PC
  %1789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1790 = load i8, i8* %1789, align 1, !tbaa !2449
  %1791 = icmp ne i8 %1790, 0
  %1792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1793 = load i8, i8* %1792, align 1, !tbaa !2450
  %1794 = icmp ne i8 %1793, 0
  %1795 = xor i1 %1791, %1794
  %1796 = xor i1 %1795, true
  %1797 = zext i1 %1796 to i8
  store i8 %1797, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1799 = select i1 %1795, i64 %1786, i64 %1784
  store i64 %1799, i64* %1798, align 8, !tbaa !2428
  %1800 = load i8, i8* %BRANCH_TAKEN
  %1801 = icmp eq i8 %1800, 1
  %1802 = load i64, i64* %PC
  br i1 %1801, label %block_401756, label %block_4014e5

block_400951:                                     ; preds = %block_40093d
  %1803 = add i64 %6164, 8
  store i64 %1803, i64* %PC
  %1804 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1805 = sext i32 %1804 to i64
  store i64 %1805, i64* %RAX, align 8, !tbaa !2428
  %1806 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1807 = load i64, i64* %RAX
  %1808 = mul i64 %1807, 4
  %1809 = add i64 %1808, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 9
  store i64 %1811, i64* %PC
  %1812 = inttoptr i64 %1809 to float*
  %1813 = load float, float* %1812
  %1814 = bitcast i8* %1806 to float*
  store float %1813, float* %1814, align 1, !tbaa !2453
  %1815 = getelementptr inbounds i8, i8* %1806, i64 4
  %1816 = bitcast i8* %1815 to float*
  store float 0.000000e+00, float* %1816, align 1, !tbaa !2453
  %1817 = getelementptr inbounds i8, i8* %1806, i64 8
  %1818 = bitcast i8* %1817 to float*
  store float 0.000000e+00, float* %1818, align 1, !tbaa !2453
  %1819 = getelementptr inbounds i8, i8* %1806, i64 12
  %1820 = bitcast i8* %1819 to float*
  store float 0.000000e+00, float* %1820, align 1, !tbaa !2453
  %1821 = bitcast %union.vec128_t* %XMM0 to i8*
  %1822 = load i64, i64* %PC
  %1823 = add i64 %1822, 4
  store i64 %1823, i64* %PC
  %1824 = bitcast i8* %1821 to i64*
  %1825 = load i64, i64* %1824, align 1
  %1826 = trunc i64 %1825 to i32
  %1827 = bitcast i64* %RCX to [2 x i32]*
  %1828 = bitcast i64* %RCX to i32*
  store i32 %1826, i32* %1828, align 1, !tbaa !2452
  %1829 = getelementptr inbounds [2 x i32], [2 x i32]* %1827, i64 0, i64 1
  store i32 0, i32* %1829, align 1, !tbaa !2452
  %1830 = load i64, i64* %RCX
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 6
  store i64 %1832, i64* %PC
  %1833 = xor i64 -2147483648, %1830
  %1834 = trunc i64 %1833 to i32
  %1835 = and i64 %1833, 4294967295
  store i64 %1835, i64* %RCX, align 8, !tbaa !2428
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1836, align 1, !tbaa !2432
  %1837 = and i32 %1834, 255
  %1838 = call i32 @llvm.ctpop.i32(i32 %1837) #16
  %1839 = trunc i32 %1838 to i8
  %1840 = and i8 %1839, 1
  %1841 = xor i8 %1840, 1
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1841, i8* %1842, align 1, !tbaa !2446
  %1843 = icmp eq i32 %1834, 0
  %1844 = zext i1 %1843 to i8
  %1845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1844, i8* %1845, align 1, !tbaa !2448
  %1846 = lshr i32 %1834, 31
  %1847 = trunc i32 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1847, i8* %1848, align 1, !tbaa !2449
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1849, align 1, !tbaa !2450
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1850, align 1, !tbaa !2447
  %1851 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1852 = load i32, i32* %ECX
  %1853 = zext i32 %1852 to i64
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 4
  store i64 %1855, i64* %PC
  %1856 = bitcast i8* %1851 to i32*
  store i32 %1852, i32* %1856, align 1, !tbaa !2452
  %1857 = getelementptr inbounds i8, i8* %1851, i64 4
  %1858 = bitcast i8* %1857 to i32*
  store i32 0, i32* %1858, align 1, !tbaa !2452
  %1859 = getelementptr inbounds i8, i8* %1851, i64 8
  %1860 = bitcast i8* %1859 to i32*
  store i32 0, i32* %1860, align 1, !tbaa !2452
  %1861 = getelementptr inbounds i8, i8* %1851, i64 12
  %1862 = bitcast i8* %1861 to i32*
  store i32 0, i32* %1862, align 1, !tbaa !2452
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 8
  store i64 %1864, i64* %PC
  %1865 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1866 = sext i32 %1865 to i64
  store i64 %1866, i64* %RAX, align 8, !tbaa !2428
  %1867 = load i64, i64* %RAX
  %1868 = mul i64 %1867, 4
  %1869 = add i64 %1868, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1870 = bitcast %union.vec128_t* %XMM0 to i8*
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 9
  store i64 %1872, i64* %PC
  %1873 = bitcast i8* %1870 to <2 x float>*
  %1874 = load <2 x float>, <2 x float>* %1873, align 1
  %1875 = extractelement <2 x float> %1874, i32 0
  %1876 = inttoptr i64 %1869 to float*
  store float %1875, float* %1876
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 7
  store i64 %1878, i64* %PC
  %1879 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1880 = zext i32 %1879 to i64
  store i64 %1880, i64* %RAX, align 8, !tbaa !2428
  %1881 = load i64, i64* %RAX
  %1882 = load i64, i64* %PC
  %1883 = add i64 %1882, 3
  store i64 %1883, i64* %PC
  %1884 = trunc i64 %1881 to i32
  %1885 = add i32 1, %1884
  %1886 = zext i32 %1885 to i64
  store i64 %1886, i64* %RAX, align 8, !tbaa !2428
  %1887 = icmp ult i32 %1885, %1884
  %1888 = icmp ult i32 %1885, 1
  %1889 = or i1 %1887, %1888
  %1890 = zext i1 %1889 to i8
  %1891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1890, i8* %1891, align 1, !tbaa !2432
  %1892 = and i32 %1885, 255
  %1893 = call i32 @llvm.ctpop.i32(i32 %1892) #16
  %1894 = trunc i32 %1893 to i8
  %1895 = and i8 %1894, 1
  %1896 = xor i8 %1895, 1
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1896, i8* %1897, align 1, !tbaa !2446
  %1898 = xor i64 1, %1881
  %1899 = trunc i64 %1898 to i32
  %1900 = xor i32 %1899, %1885
  %1901 = lshr i32 %1900, 4
  %1902 = trunc i32 %1901 to i8
  %1903 = and i8 %1902, 1
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1903, i8* %1904, align 1, !tbaa !2447
  %1905 = icmp eq i32 %1885, 0
  %1906 = zext i1 %1905 to i8
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1906, i8* %1907, align 1, !tbaa !2448
  %1908 = lshr i32 %1885, 31
  %1909 = trunc i32 %1908 to i8
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1909, i8* %1910, align 1, !tbaa !2449
  %1911 = lshr i32 %1884, 31
  %1912 = xor i32 %1908, %1911
  %1913 = add nuw nsw i32 %1912, %1908
  %1914 = icmp eq i32 %1913, 2
  %1915 = zext i1 %1914 to i8
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1915, i8* %1916, align 1, !tbaa !2450
  %1917 = load i32, i32* %EAX
  %1918 = zext i32 %1917 to i64
  %1919 = load i64, i64* %PC
  %1920 = add i64 %1919, 7
  store i64 %1920, i64* %PC
  store i32 %1917, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1921 = load i64, i64* %PC
  %1922 = sub i64 %1921, 85
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 5
  store i64 %1924, i64* %PC
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1922, i64* %1925, align 8, !tbaa !2428
  br label %block_40093d

block_400fcb:                                     ; preds = %block_400fbc
  %1926 = load i64, i64* %PC
  %1927 = add i64 %1926, 11
  store i64 %1927, i64* %PC
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %1928 = load i64, i64* %PC
  %1929 = add i64 %1928, 8
  store i64 %1929, i64* %PC
  %1930 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %1931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1931, align 1, !tbaa !2432
  %1932 = and i32 %1930, 255
  %1933 = call i32 @llvm.ctpop.i32(i32 %1932) #16
  %1934 = trunc i32 %1933 to i8
  %1935 = and i8 %1934, 1
  %1936 = xor i8 %1935, 1
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1936, i8* %1937, align 1, !tbaa !2446
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1938, align 1, !tbaa !2447
  %1939 = icmp eq i32 %1930, 0
  %1940 = zext i1 %1939 to i8
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1940, i8* %1941, align 1, !tbaa !2448
  %1942 = lshr i32 %1930, 31
  %1943 = trunc i32 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1943, i8* %1944, align 1, !tbaa !2449
  %1945 = lshr i32 %1930, 31
  %1946 = xor i32 %1942, %1945
  %1947 = add nuw nsw i32 %1946, %1945
  %1948 = icmp eq i32 %1947, 2
  %1949 = zext i1 %1948 to i8
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1949, i8* %1950, align 1, !tbaa !2450
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 17
  %1953 = load i64, i64* %PC
  %1954 = add i64 %1953, 6
  %1955 = load i64, i64* %PC
  %1956 = add i64 %1955, 6
  store i64 %1956, i64* %PC
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1958 = load i8, i8* %1957, align 1, !tbaa !2448
  %1959 = icmp eq i8 %1958, 0
  %1960 = zext i1 %1959 to i8
  store i8 %1960, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1962 = select i1 %1959, i64 %1952, i64 %1954
  store i64 %1962, i64* %1961, align 8, !tbaa !2428
  %1963 = load i8, i8* %BRANCH_TAKEN
  %1964 = icmp eq i8 %1963, 1
  br i1 %1964, label %block_400fef, label %block_400fe4

block_401149:                                     ; preds = %block_4010c3
  %1965 = sub i64 %3338, 2953
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 5
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 5
  store i64 %1969, i64* %PC
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1971 = load i64, i64* %1970, align 8, !tbaa !2428
  %1972 = add i64 %1971, -8
  %1973 = inttoptr i64 %1972 to i64*
  store i64 %1967, i64* %1973
  store i64 %1972, i64* %1970, align 8, !tbaa !2428
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1965, i64* %1974, align 8, !tbaa !2428
  %1975 = load i64, i64* %PC
  %1976 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %1975, %struct.Memory* %MEMORY.4)
  %1977 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1979 = load i64, i64* %RBP
  %1980 = sub i64 %1979, 40
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = bitcast i8* %1978 to <2 x float>*
  %1984 = load <2 x float>, <2 x float>* %1983, align 1
  %1985 = getelementptr inbounds i8, i8* %1978, i64 8
  %1986 = bitcast i8* %1985 to <2 x i32>*
  %1987 = load <2 x i32>, <2 x i32>* %1986, align 1
  %1988 = inttoptr i64 %1980 to float*
  %1989 = load float, float* %1988
  %1990 = extractelement <2 x float> %1984, i32 0
  %1991 = fsub float %1990, %1989
  %1992 = bitcast i8* %1977 to float*
  store float %1991, float* %1992, align 1, !tbaa !2453
  %1993 = bitcast <2 x float> %1984 to <2 x i32>
  %1994 = extractelement <2 x i32> %1993, i32 1
  %1995 = getelementptr inbounds i8, i8* %1977, i64 4
  %1996 = bitcast i8* %1995 to i32*
  store i32 %1994, i32* %1996, align 1, !tbaa !2453
  %1997 = extractelement <2 x i32> %1987, i32 0
  %1998 = getelementptr inbounds i8, i8* %1977, i64 8
  %1999 = bitcast i8* %1998 to i32*
  store i32 %1997, i32* %1999, align 1, !tbaa !2453
  %2000 = extractelement <2 x i32> %1987, i32 1
  %2001 = getelementptr inbounds i8, i8* %1977, i64 12
  %2002 = bitcast i8* %2001 to i32*
  store i32 %2000, i32* %2002, align 1, !tbaa !2453
  %2003 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2004 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2005 = load i64, i64* %RBP
  %2006 = sub i64 %2005, 44
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 5
  store i64 %2008, i64* %PC
  %2009 = bitcast i8* %2004 to <2 x float>*
  %2010 = load <2 x float>, <2 x float>* %2009, align 1
  %2011 = getelementptr inbounds i8, i8* %2004, i64 8
  %2012 = bitcast i8* %2011 to <2 x i32>*
  %2013 = load <2 x i32>, <2 x i32>* %2012, align 1
  %2014 = inttoptr i64 %2006 to float*
  %2015 = load float, float* %2014
  %2016 = extractelement <2 x float> %2010, i32 0
  %2017 = fsub float %2016, %2015
  %2018 = bitcast i8* %2003 to float*
  store float %2017, float* %2018, align 1, !tbaa !2453
  %2019 = bitcast <2 x float> %2010 to <2 x i32>
  %2020 = extractelement <2 x i32> %2019, i32 1
  %2021 = getelementptr inbounds i8, i8* %2003, i64 4
  %2022 = bitcast i8* %2021 to i32*
  store i32 %2020, i32* %2022, align 1, !tbaa !2453
  %2023 = extractelement <2 x i32> %2013, i32 0
  %2024 = getelementptr inbounds i8, i8* %2003, i64 8
  %2025 = bitcast i8* %2024 to i32*
  store i32 %2023, i32* %2025, align 1, !tbaa !2453
  %2026 = extractelement <2 x i32> %2013, i32 1
  %2027 = getelementptr inbounds i8, i8* %2003, i64 12
  %2028 = bitcast i8* %2027 to i32*
  store i32 %2026, i32* %2028, align 1, !tbaa !2453
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 7
  store i64 %2030, i64* %PC
  %2031 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %2032 = zext i32 %2031 to i64
  store i64 %2032, i64* %RAX, align 8, !tbaa !2428
  %2033 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2034 = load i32, i32* %EAX
  %2035 = zext i32 %2034 to i64
  %2036 = load i64, i64* %PC
  %2037 = add i64 %2036, 4
  store i64 %2037, i64* %PC
  %2038 = bitcast i8* %2033 to <2 x i32>*
  %2039 = load <2 x i32>, <2 x i32>* %2038, align 1
  %2040 = getelementptr inbounds i8, i8* %2033, i64 8
  %2041 = bitcast i8* %2040 to <2 x i32>*
  %2042 = load <2 x i32>, <2 x i32>* %2041, align 1
  %2043 = sitofp i32 %2034 to float
  %2044 = bitcast i8* %2033 to float*
  store float %2043, float* %2044, align 1, !tbaa !2453
  %2045 = extractelement <2 x i32> %2039, i32 1
  %2046 = getelementptr inbounds i8, i8* %2033, i64 4
  %2047 = bitcast i8* %2046 to i32*
  store i32 %2045, i32* %2047, align 1, !tbaa !2453
  %2048 = extractelement <2 x i32> %2042, i32 0
  %2049 = bitcast i8* %2040 to i32*
  store i32 %2048, i32* %2049, align 1, !tbaa !2453
  %2050 = extractelement <2 x i32> %2042, i32 1
  %2051 = getelementptr inbounds i8, i8* %2033, i64 12
  %2052 = bitcast i8* %2051 to i32*
  store i32 %2050, i32* %2052, align 1, !tbaa !2453
  %2053 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2054 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2055 = bitcast %union.vec128_t* %XMM1 to i8*
  %2056 = load i64, i64* %PC
  %2057 = add i64 %2056, 4
  store i64 %2057, i64* %PC
  %2058 = bitcast i8* %2054 to <2 x float>*
  %2059 = load <2 x float>, <2 x float>* %2058, align 1
  %2060 = getelementptr inbounds i8, i8* %2054, i64 8
  %2061 = bitcast i8* %2060 to <2 x i32>*
  %2062 = load <2 x i32>, <2 x i32>* %2061, align 1
  %2063 = bitcast i8* %2055 to <2 x float>*
  %2064 = load <2 x float>, <2 x float>* %2063, align 1
  %2065 = extractelement <2 x float> %2059, i32 0
  %2066 = extractelement <2 x float> %2064, i32 0
  %2067 = fdiv float %2065, %2066
  %2068 = bitcast i8* %2053 to float*
  store float %2067, float* %2068, align 1, !tbaa !2453
  %2069 = bitcast <2 x float> %2059 to <2 x i32>
  %2070 = extractelement <2 x i32> %2069, i32 1
  %2071 = getelementptr inbounds i8, i8* %2053, i64 4
  %2072 = bitcast i8* %2071 to i32*
  store i32 %2070, i32* %2072, align 1, !tbaa !2453
  %2073 = extractelement <2 x i32> %2062, i32 0
  %2074 = getelementptr inbounds i8, i8* %2053, i64 8
  %2075 = bitcast i8* %2074 to i32*
  store i32 %2073, i32* %2075, align 1, !tbaa !2453
  %2076 = extractelement <2 x i32> %2062, i32 1
  %2077 = getelementptr inbounds i8, i8* %2053, i64 12
  %2078 = bitcast i8* %2077 to i32*
  store i32 %2076, i32* %2078, align 1, !tbaa !2453
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 8
  store i64 %2080, i64* %PC
  %2081 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2082 = sext i32 %2081 to i64
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = load i64, i64* %RCX
  %2084 = mul i64 %2083, 4
  %2085 = add i64 %2084, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %2086 = bitcast %union.vec128_t* %XMM0 to i8*
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 9
  store i64 %2088, i64* %PC
  %2089 = bitcast i8* %2086 to <2 x float>*
  %2090 = load <2 x float>, <2 x float>* %2089, align 1
  %2091 = extractelement <2 x float> %2090, i32 0
  %2092 = inttoptr i64 %2085 to float*
  store float %2091, float* %2092
  %2093 = load i64, i64* %PC
  %2094 = sub i64 %2093, 3000
  %2095 = load i64, i64* %PC
  %2096 = add i64 %2095, 5
  %2097 = load i64, i64* %PC
  %2098 = add i64 %2097, 5
  store i64 %2098, i64* %PC
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2100 = load i64, i64* %2099, align 8, !tbaa !2428
  %2101 = add i64 %2100, -8
  %2102 = inttoptr i64 %2101 to i64*
  store i64 %2096, i64* %2102
  store i64 %2101, i64* %2099, align 8, !tbaa !2428
  %2103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2094, i64* %2103, align 8, !tbaa !2428
  %2104 = load i64, i64* %PC
  %2105 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %2104, %struct.Memory* %1976)
  %2106 = load i64, i64* %RBP
  %2107 = sub i64 %2106, 40
  %2108 = bitcast %union.vec128_t* %XMM0 to i8*
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 5
  store i64 %2110, i64* %PC
  %2111 = bitcast i8* %2108 to <2 x float>*
  %2112 = load <2 x float>, <2 x float>* %2111, align 1
  %2113 = extractelement <2 x float> %2112, i32 0
  %2114 = inttoptr i64 %2107 to float*
  store float %2113, float* %2114
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 11
  store i64 %2116, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_40118d

block_4011eb:                                     ; preds = %block_40118d
  %2117 = sub i64 %7047, 3115
  %2118 = load i64, i64* %PC
  %2119 = add i64 %2118, 5
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 5
  store i64 %2121, i64* %PC
  %2122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2123 = load i64, i64* %2122, align 8, !tbaa !2428
  %2124 = add i64 %2123, -8
  %2125 = inttoptr i64 %2124 to i64*
  store i64 %2119, i64* %2125
  store i64 %2124, i64* %2122, align 8, !tbaa !2428
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2117, i64* %2126, align 8, !tbaa !2428
  %2127 = load i64, i64* %PC
  %2128 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %2127, %struct.Memory* %MEMORY.16)
  %2129 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2130 = load i64, i64* %PC
  %2131 = add i64 %2130, 8
  store i64 %2131, i64* %PC
  %2132 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*)
  %2133 = bitcast i8* %2129 to double*
  store double %2132, double* %2133, align 1, !tbaa !2455
  %2134 = getelementptr inbounds i8, i8* %2129, i64 8
  %2135 = bitcast i8* %2134 to double*
  store double 0.000000e+00, double* %2135, align 1, !tbaa !2455
  %2136 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2137 = load i64, i64* %PC
  %2138 = add i64 %2137, 8
  store i64 %2138, i64* %PC
  %2139 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to double*)
  %2140 = bitcast i8* %2136 to double*
  store double %2139, double* %2140, align 1, !tbaa !2455
  %2141 = getelementptr inbounds i8, i8* %2136, i64 8
  %2142 = bitcast i8* %2141 to double*
  store double 0.000000e+00, double* %2142, align 1, !tbaa !2455
  %2143 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2144 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2145 = load i64, i64* %RBP
  %2146 = sub i64 %2145, 40
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 5
  store i64 %2148, i64* %PC
  %2149 = bitcast i8* %2144 to <2 x float>*
  %2150 = load <2 x float>, <2 x float>* %2149, align 1
  %2151 = getelementptr inbounds i8, i8* %2144, i64 8
  %2152 = bitcast i8* %2151 to <2 x i32>*
  %2153 = load <2 x i32>, <2 x i32>* %2152, align 1
  %2154 = inttoptr i64 %2146 to float*
  %2155 = load float, float* %2154
  %2156 = extractelement <2 x float> %2150, i32 0
  %2157 = fsub float %2156, %2155
  %2158 = bitcast i8* %2143 to float*
  store float %2157, float* %2158, align 1, !tbaa !2453
  %2159 = bitcast <2 x float> %2150 to <2 x i32>
  %2160 = extractelement <2 x i32> %2159, i32 1
  %2161 = getelementptr inbounds i8, i8* %2143, i64 4
  %2162 = bitcast i8* %2161 to i32*
  store i32 %2160, i32* %2162, align 1, !tbaa !2453
  %2163 = extractelement <2 x i32> %2153, i32 0
  %2164 = getelementptr inbounds i8, i8* %2143, i64 8
  %2165 = bitcast i8* %2164 to i32*
  store i32 %2163, i32* %2165, align 1, !tbaa !2453
  %2166 = extractelement <2 x i32> %2153, i32 1
  %2167 = getelementptr inbounds i8, i8* %2143, i64 12
  %2168 = bitcast i8* %2167 to i32*
  store i32 %2166, i32* %2168, align 1, !tbaa !2453
  %2169 = load i64, i64* %PC
  %2170 = add i64 %2169, 7
  store i64 %2170, i64* %PC
  %2171 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %2172 = zext i32 %2171 to i64
  store i64 %2172, i64* %RAX, align 8, !tbaa !2428
  %2173 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2174 = load i32, i32* %EAX
  %2175 = zext i32 %2174 to i64
  %2176 = load i64, i64* %PC
  %2177 = add i64 %2176, 4
  store i64 %2177, i64* %PC
  %2178 = bitcast i8* %2173 to <2 x i32>*
  %2179 = load <2 x i32>, <2 x i32>* %2178, align 1
  %2180 = getelementptr inbounds i8, i8* %2173, i64 8
  %2181 = bitcast i8* %2180 to <2 x i32>*
  %2182 = load <2 x i32>, <2 x i32>* %2181, align 1
  %2183 = sitofp i32 %2174 to float
  %2184 = bitcast i8* %2173 to float*
  store float %2183, float* %2184, align 1, !tbaa !2453
  %2185 = extractelement <2 x i32> %2179, i32 1
  %2186 = getelementptr inbounds i8, i8* %2173, i64 4
  %2187 = bitcast i8* %2186 to i32*
  store i32 %2185, i32* %2187, align 1, !tbaa !2453
  %2188 = extractelement <2 x i32> %2182, i32 0
  %2189 = bitcast i8* %2180 to i32*
  store i32 %2188, i32* %2189, align 1, !tbaa !2453
  %2190 = extractelement <2 x i32> %2182, i32 1
  %2191 = getelementptr inbounds i8, i8* %2173, i64 12
  %2192 = bitcast i8* %2191 to i32*
  store i32 %2190, i32* %2192, align 1, !tbaa !2453
  %2193 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2194 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2195 = bitcast %union.vec128_t* %XMM3 to i8*
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 4
  store i64 %2197, i64* %PC
  %2198 = bitcast i8* %2194 to <2 x float>*
  %2199 = load <2 x float>, <2 x float>* %2198, align 1
  %2200 = getelementptr inbounds i8, i8* %2194, i64 8
  %2201 = bitcast i8* %2200 to <2 x i32>*
  %2202 = load <2 x i32>, <2 x i32>* %2201, align 1
  %2203 = bitcast i8* %2195 to <2 x float>*
  %2204 = load <2 x float>, <2 x float>* %2203, align 1
  %2205 = extractelement <2 x float> %2199, i32 0
  %2206 = extractelement <2 x float> %2204, i32 0
  %2207 = fdiv float %2205, %2206
  %2208 = bitcast i8* %2193 to float*
  store float %2207, float* %2208, align 1, !tbaa !2453
  %2209 = bitcast <2 x float> %2199 to <2 x i32>
  %2210 = extractelement <2 x i32> %2209, i32 1
  %2211 = getelementptr inbounds i8, i8* %2193, i64 4
  %2212 = bitcast i8* %2211 to i32*
  store i32 %2210, i32* %2212, align 1, !tbaa !2453
  %2213 = extractelement <2 x i32> %2202, i32 0
  %2214 = getelementptr inbounds i8, i8* %2193, i64 8
  %2215 = bitcast i8* %2214 to i32*
  store i32 %2213, i32* %2215, align 1, !tbaa !2453
  %2216 = extractelement <2 x i32> %2202, i32 1
  %2217 = getelementptr inbounds i8, i8* %2193, i64 12
  %2218 = bitcast i8* %2217 to i32*
  store i32 %2216, i32* %2218, align 1, !tbaa !2453
  %2219 = load i64, i64* %PC
  %2220 = add i64 %2219, 8
  store i64 %2220, i64* %PC
  %2221 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2222 = sext i32 %2221 to i64
  store i64 %2222, i64* %RCX, align 8, !tbaa !2428
  %2223 = load i64, i64* %RCX
  %2224 = mul i64 %2223, 4
  %2225 = add i64 %2224, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %2226 = bitcast %union.vec128_t* %XMM0 to i8*
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 9
  store i64 %2228, i64* %PC
  %2229 = bitcast i8* %2226 to <2 x float>*
  %2230 = load <2 x float>, <2 x float>* %2229, align 1
  %2231 = extractelement <2 x float> %2230, i32 0
  %2232 = inttoptr i64 %2225 to float*
  store float %2231, float* %2232
  %2233 = load i64, i64* %PC
  %2234 = add i64 %2233, 8
  store i64 %2234, i64* %PC
  %2235 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2236 = sext i32 %2235 to i64
  store i64 %2236, i64* %RCX, align 8, !tbaa !2428
  %2237 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2238 = load i64, i64* %RCX
  %2239 = mul i64 %2238, 4
  %2240 = add i64 %2239, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 9
  store i64 %2242, i64* %PC
  %2243 = inttoptr i64 %2240 to float*
  %2244 = load float, float* %2243
  %2245 = bitcast i8* %2237 to float*
  store float %2244, float* %2245, align 1, !tbaa !2453
  %2246 = getelementptr inbounds i8, i8* %2237, i64 4
  %2247 = bitcast i8* %2246 to float*
  store float 0.000000e+00, float* %2247, align 1, !tbaa !2453
  %2248 = getelementptr inbounds i8, i8* %2237, i64 8
  %2249 = bitcast i8* %2248 to float*
  store float 0.000000e+00, float* %2249, align 1, !tbaa !2453
  %2250 = getelementptr inbounds i8, i8* %2237, i64 12
  %2251 = bitcast i8* %2250 to float*
  store float 0.000000e+00, float* %2251, align 1, !tbaa !2453
  %2252 = load i64, i64* %PC
  %2253 = add i64 %2252, 8
  store i64 %2253, i64* %PC
  %2254 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2255 = sext i32 %2254 to i64
  store i64 %2255, i64* %RCX, align 8, !tbaa !2428
  %2256 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2257 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2258 = load i64, i64* %RCX
  %2259 = mul i64 %2258, 4
  %2260 = add i64 %2259, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %2261 = load i64, i64* %PC
  %2262 = add i64 %2261, 9
  store i64 %2262, i64* %PC
  %2263 = bitcast i8* %2257 to <2 x float>*
  %2264 = load <2 x float>, <2 x float>* %2263, align 1
  %2265 = getelementptr inbounds i8, i8* %2257, i64 8
  %2266 = bitcast i8* %2265 to <2 x i32>*
  %2267 = load <2 x i32>, <2 x i32>* %2266, align 1
  %2268 = inttoptr i64 %2260 to float*
  %2269 = load float, float* %2268
  %2270 = extractelement <2 x float> %2264, i32 0
  %2271 = fadd float %2270, %2269
  %2272 = bitcast i8* %2256 to float*
  store float %2271, float* %2272, align 1, !tbaa !2453
  %2273 = bitcast <2 x float> %2264 to <2 x i32>
  %2274 = extractelement <2 x i32> %2273, i32 1
  %2275 = getelementptr inbounds i8, i8* %2256, i64 4
  %2276 = bitcast i8* %2275 to i32*
  store i32 %2274, i32* %2276, align 1, !tbaa !2453
  %2277 = extractelement <2 x i32> %2267, i32 0
  %2278 = getelementptr inbounds i8, i8* %2256, i64 8
  %2279 = bitcast i8* %2278 to i32*
  store i32 %2277, i32* %2279, align 1, !tbaa !2453
  %2280 = extractelement <2 x i32> %2267, i32 1
  %2281 = getelementptr inbounds i8, i8* %2256, i64 12
  %2282 = bitcast i8* %2281 to i32*
  store i32 %2280, i32* %2282, align 1, !tbaa !2453
  %2283 = load i64, i64* %RBP
  %2284 = sub i64 %2283, 16
  %2285 = bitcast %union.vec128_t* %XMM0 to i8*
  %2286 = load i64, i64* %PC
  %2287 = add i64 %2286, 5
  store i64 %2287, i64* %PC
  %2288 = bitcast i8* %2285 to <2 x float>*
  %2289 = load <2 x float>, <2 x float>* %2288, align 1
  %2290 = extractelement <2 x float> %2289, i32 0
  %2291 = inttoptr i64 %2284 to float*
  store float %2290, float* %2291
  %2292 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2293 = load i64, i64* %RBP
  %2294 = sub i64 %2293, 16
  %2295 = load i64, i64* %PC
  %2296 = add i64 %2295, 5
  store i64 %2296, i64* %PC
  %2297 = inttoptr i64 %2294 to float*
  %2298 = load float, float* %2297
  %2299 = bitcast i8* %2292 to float*
  store float %2298, float* %2299, align 1, !tbaa !2453
  %2300 = getelementptr inbounds i8, i8* %2292, i64 4
  %2301 = bitcast i8* %2300 to float*
  store float 0.000000e+00, float* %2301, align 1, !tbaa !2453
  %2302 = getelementptr inbounds i8, i8* %2292, i64 8
  %2303 = bitcast i8* %2302 to float*
  store float 0.000000e+00, float* %2303, align 1, !tbaa !2453
  %2304 = getelementptr inbounds i8, i8* %2292, i64 12
  %2305 = bitcast i8* %2304 to float*
  store float 0.000000e+00, float* %2305, align 1, !tbaa !2453
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 8
  store i64 %2307, i64* %PC
  %2308 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2309 = sext i32 %2308 to i64
  store i64 %2309, i64* %RCX, align 8, !tbaa !2428
  %2310 = load i64, i64* %RCX
  %2311 = mul i64 %2310, 4
  %2312 = add i64 %2311, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %2313 = bitcast %union.vec128_t* %XMM0 to i8*
  %2314 = load i64, i64* %PC
  %2315 = add i64 %2314, 9
  store i64 %2315, i64* %PC
  %2316 = bitcast i8* %2313 to <2 x float>*
  %2317 = load <2 x float>, <2 x float>* %2316, align 1
  %2318 = extractelement <2 x float> %2317, i32 0
  %2319 = inttoptr i64 %2312 to float*
  store float %2318, float* %2319
  %2320 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2321 = load i64, i64* %RBP
  %2322 = sub i64 %2321, 12
  %2323 = load i64, i64* %PC
  %2324 = add i64 %2323, 5
  store i64 %2324, i64* %PC
  %2325 = inttoptr i64 %2322 to float*
  %2326 = load float, float* %2325
  %2327 = bitcast i8* %2320 to float*
  store float %2326, float* %2327, align 1, !tbaa !2453
  %2328 = getelementptr inbounds i8, i8* %2320, i64 4
  %2329 = bitcast i8* %2328 to float*
  store float 0.000000e+00, float* %2329, align 1, !tbaa !2453
  %2330 = getelementptr inbounds i8, i8* %2320, i64 8
  %2331 = bitcast i8* %2330 to float*
  store float 0.000000e+00, float* %2331, align 1, !tbaa !2453
  %2332 = getelementptr inbounds i8, i8* %2320, i64 12
  %2333 = bitcast i8* %2332 to float*
  store float 0.000000e+00, float* %2333, align 1, !tbaa !2453
  %2334 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2335 = bitcast %union.vec128_t* %XMM0 to i8*
  %2336 = load i64, i64* %PC
  %2337 = add i64 %2336, 4
  store i64 %2337, i64* %PC
  %2338 = bitcast i8* %2335 to <2 x float>*
  %2339 = load <2 x float>, <2 x float>* %2338, align 1
  %2340 = extractelement <2 x float> %2339, i32 0
  %2341 = fpext float %2340 to double
  %2342 = bitcast i8* %2334 to double*
  store double %2341, double* %2342, align 1, !tbaa !2455
  %2343 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 16
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 5
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to float*
  %2349 = load float, float* %2348
  %2350 = bitcast i8* %2343 to float*
  store float %2349, float* %2350, align 1, !tbaa !2453
  %2351 = getelementptr inbounds i8, i8* %2343, i64 4
  %2352 = bitcast i8* %2351 to float*
  store float 0.000000e+00, float* %2352, align 1, !tbaa !2453
  %2353 = getelementptr inbounds i8, i8* %2343, i64 8
  %2354 = bitcast i8* %2353 to float*
  store float 0.000000e+00, float* %2354, align 1, !tbaa !2453
  %2355 = getelementptr inbounds i8, i8* %2343, i64 12
  %2356 = bitcast i8* %2355 to float*
  store float 0.000000e+00, float* %2356, align 1, !tbaa !2453
  %2357 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2358 = bitcast %union.vec128_t* %XMM3 to i8*
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 4
  store i64 %2360, i64* %PC
  %2361 = bitcast i8* %2358 to <2 x float>*
  %2362 = load <2 x float>, <2 x float>* %2361, align 1
  %2363 = extractelement <2 x float> %2362, i32 0
  %2364 = fpext float %2363 to double
  %2365 = bitcast i8* %2357 to double*
  store double %2364, double* %2365, align 1, !tbaa !2455
  %2366 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2367 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2368 = bitcast %union.vec128_t* %XMM3 to i8*
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 4
  store i64 %2370, i64* %PC
  %2371 = bitcast i8* %2367 to double*
  %2372 = load double, double* %2371, align 1
  %2373 = getelementptr inbounds i8, i8* %2367, i64 8
  %2374 = bitcast i8* %2373 to i64*
  %2375 = load i64, i64* %2374, align 1
  %2376 = bitcast i8* %2368 to double*
  %2377 = load double, double* %2376, align 1
  %2378 = fmul double %2372, %2377
  %2379 = bitcast i8* %2366 to double*
  store double %2378, double* %2379, align 1, !tbaa !2455
  %2380 = getelementptr inbounds i8, i8* %2366, i64 8
  %2381 = bitcast i8* %2380 to i64*
  store i64 %2375, i64* %2381, align 1, !tbaa !2455
  %2382 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2383 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2384 = bitcast %union.vec128_t* %XMM2 to i8*
  %2385 = load i64, i64* %PC
  %2386 = add i64 %2385, 4
  store i64 %2386, i64* %PC
  %2387 = bitcast i8* %2383 to double*
  %2388 = load double, double* %2387, align 1
  %2389 = getelementptr inbounds i8, i8* %2383, i64 8
  %2390 = bitcast i8* %2389 to i64*
  %2391 = load i64, i64* %2390, align 1
  %2392 = bitcast i8* %2384 to double*
  %2393 = load double, double* %2392, align 1
  %2394 = fdiv double %2388, %2393
  %2395 = bitcast i8* %2382 to double*
  store double %2394, double* %2395, align 1, !tbaa !2455
  %2396 = getelementptr inbounds i8, i8* %2382, i64 8
  %2397 = bitcast i8* %2396 to i64*
  store i64 %2391, i64* %2397, align 1, !tbaa !2455
  %2398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2399 = bitcast %union.vec128_t* %XMM0 to i8*
  %2400 = load i64, i64* %PC
  %2401 = add i64 %2400, 4
  store i64 %2401, i64* %PC
  %2402 = bitcast i8* %2398 to <2 x i32>*
  %2403 = load <2 x i32>, <2 x i32>* %2402, align 1
  %2404 = getelementptr inbounds i8, i8* %2398, i64 8
  %2405 = bitcast i8* %2404 to <2 x i32>*
  %2406 = load <2 x i32>, <2 x i32>* %2405, align 1
  %2407 = bitcast i8* %2399 to double*
  %2408 = load double, double* %2407, align 1
  %2409 = fptrunc double %2408 to float
  %2410 = bitcast i8* %2398 to float*
  store float %2409, float* %2410, align 1, !tbaa !2453
  %2411 = extractelement <2 x i32> %2403, i32 1
  %2412 = getelementptr inbounds i8, i8* %2398, i64 4
  %2413 = bitcast i8* %2412 to i32*
  store i32 %2411, i32* %2413, align 1, !tbaa !2453
  %2414 = extractelement <2 x i32> %2406, i32 0
  %2415 = bitcast i8* %2404 to i32*
  store i32 %2414, i32* %2415, align 1, !tbaa !2453
  %2416 = extractelement <2 x i32> %2406, i32 1
  %2417 = getelementptr inbounds i8, i8* %2398, i64 12
  %2418 = bitcast i8* %2417 to i32*
  store i32 %2416, i32* %2418, align 1, !tbaa !2453
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 8
  store i64 %2420, i64* %PC
  %2421 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2422 = sext i32 %2421 to i64
  store i64 %2422, i64* %RCX, align 8, !tbaa !2428
  %2423 = load i64, i64* %RCX
  %2424 = mul i64 %2423, 4
  %2425 = add i64 %2424, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %2426 = bitcast %union.vec128_t* %XMM0 to i8*
  %2427 = load i64, i64* %PC
  %2428 = add i64 %2427, 9
  store i64 %2428, i64* %PC
  %2429 = bitcast i8* %2426 to <2 x float>*
  %2430 = load <2 x float>, <2 x float>* %2429, align 1
  %2431 = extractelement <2 x float> %2430, i32 0
  %2432 = inttoptr i64 %2425 to float*
  store float %2431, float* %2432
  %2433 = load i64, i64* %PC
  %2434 = add i64 %2433, 8
  store i64 %2434, i64* %PC
  %2435 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2436 = sext i32 %2435 to i64
  store i64 %2436, i64* %RCX, align 8, !tbaa !2428
  %2437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2438 = load i64, i64* %RCX
  %2439 = mul i64 %2438, 4
  %2440 = add i64 %2439, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %2441 = load i64, i64* %PC
  %2442 = add i64 %2441, 9
  store i64 %2442, i64* %PC
  %2443 = inttoptr i64 %2440 to float*
  %2444 = load float, float* %2443
  %2445 = bitcast i8* %2437 to float*
  store float %2444, float* %2445, align 1, !tbaa !2453
  %2446 = getelementptr inbounds i8, i8* %2437, i64 4
  %2447 = bitcast i8* %2446 to float*
  store float 0.000000e+00, float* %2447, align 1, !tbaa !2453
  %2448 = getelementptr inbounds i8, i8* %2437, i64 8
  %2449 = bitcast i8* %2448 to float*
  store float 0.000000e+00, float* %2449, align 1, !tbaa !2453
  %2450 = getelementptr inbounds i8, i8* %2437, i64 12
  %2451 = bitcast i8* %2450 to float*
  store float 0.000000e+00, float* %2451, align 1, !tbaa !2453
  %2452 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2453 = bitcast %union.vec128_t* %XMM0 to i8*
  %2454 = load i64, i64* %PC
  %2455 = add i64 %2454, 4
  store i64 %2455, i64* %PC
  %2456 = bitcast i8* %2453 to <2 x float>*
  %2457 = load <2 x float>, <2 x float>* %2456, align 1
  %2458 = extractelement <2 x float> %2457, i32 0
  %2459 = fpext float %2458 to double
  %2460 = bitcast i8* %2452 to double*
  store double %2459, double* %2460, align 1, !tbaa !2455
  %2461 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2462 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2463 = bitcast %union.vec128_t* %XMM0 to i8*
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 4
  store i64 %2465, i64* %PC
  %2466 = bitcast i8* %2462 to double*
  %2467 = load double, double* %2466, align 1
  %2468 = getelementptr inbounds i8, i8* %2462, i64 8
  %2469 = bitcast i8* %2468 to i64*
  %2470 = load i64, i64* %2469, align 1
  %2471 = bitcast i8* %2463 to double*
  %2472 = load double, double* %2471, align 1
  %2473 = fdiv double %2467, %2472
  %2474 = bitcast i8* %2461 to double*
  store double %2473, double* %2474, align 1, !tbaa !2455
  %2475 = getelementptr inbounds i8, i8* %2461, i64 8
  %2476 = bitcast i8* %2475 to i64*
  store i64 %2470, i64* %2476, align 1, !tbaa !2455
  %2477 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2478 = bitcast %union.vec128_t* %XMM1 to i8*
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 4
  store i64 %2480, i64* %PC
  %2481 = bitcast i8* %2477 to <2 x i32>*
  %2482 = load <2 x i32>, <2 x i32>* %2481, align 1
  %2483 = getelementptr inbounds i8, i8* %2477, i64 8
  %2484 = bitcast i8* %2483 to <2 x i32>*
  %2485 = load <2 x i32>, <2 x i32>* %2484, align 1
  %2486 = bitcast i8* %2478 to double*
  %2487 = load double, double* %2486, align 1
  %2488 = fptrunc double %2487 to float
  %2489 = bitcast i8* %2477 to float*
  store float %2488, float* %2489, align 1, !tbaa !2453
  %2490 = extractelement <2 x i32> %2482, i32 1
  %2491 = getelementptr inbounds i8, i8* %2477, i64 4
  %2492 = bitcast i8* %2491 to i32*
  store i32 %2490, i32* %2492, align 1, !tbaa !2453
  %2493 = extractelement <2 x i32> %2485, i32 0
  %2494 = bitcast i8* %2483 to i32*
  store i32 %2493, i32* %2494, align 1, !tbaa !2453
  %2495 = extractelement <2 x i32> %2485, i32 1
  %2496 = getelementptr inbounds i8, i8* %2477, i64 12
  %2497 = bitcast i8* %2496 to i32*
  store i32 %2495, i32* %2497, align 1, !tbaa !2453
  %2498 = load i64, i64* %PC
  %2499 = add i64 %2498, 8
  store i64 %2499, i64* %PC
  %2500 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2501 = sext i32 %2500 to i64
  store i64 %2501, i64* %RCX, align 8, !tbaa !2428
  %2502 = load i64, i64* %RCX
  %2503 = mul i64 %2502, 4
  %2504 = add i64 %2503, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %2505 = bitcast %union.vec128_t* %XMM0 to i8*
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 9
  store i64 %2507, i64* %PC
  %2508 = bitcast i8* %2505 to <2 x float>*
  %2509 = load <2 x float>, <2 x float>* %2508, align 1
  %2510 = extractelement <2 x float> %2509, i32 0
  %2511 = inttoptr i64 %2504 to float*
  store float %2510, float* %2511
  %2512 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2513 = load i64, i64* %RBP
  %2514 = sub i64 %2513, 16
  %2515 = load i64, i64* %PC
  %2516 = add i64 %2515, 5
  store i64 %2516, i64* %PC
  %2517 = inttoptr i64 %2514 to float*
  %2518 = load float, float* %2517
  %2519 = bitcast i8* %2512 to float*
  store float %2518, float* %2519, align 1, !tbaa !2453
  %2520 = getelementptr inbounds i8, i8* %2512, i64 4
  %2521 = bitcast i8* %2520 to float*
  store float 0.000000e+00, float* %2521, align 1, !tbaa !2453
  %2522 = getelementptr inbounds i8, i8* %2512, i64 8
  %2523 = bitcast i8* %2522 to float*
  store float 0.000000e+00, float* %2523, align 1, !tbaa !2453
  %2524 = getelementptr inbounds i8, i8* %2512, i64 12
  %2525 = bitcast i8* %2524 to float*
  store float 0.000000e+00, float* %2525, align 1, !tbaa !2453
  %2526 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2527 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2528 = load i64, i64* %RBP
  %2529 = sub i64 %2528, 8
  %2530 = load i64, i64* %PC
  %2531 = add i64 %2530, 5
  store i64 %2531, i64* %PC
  %2532 = bitcast i8* %2527 to <2 x float>*
  %2533 = load <2 x float>, <2 x float>* %2532, align 1
  %2534 = getelementptr inbounds i8, i8* %2527, i64 8
  %2535 = bitcast i8* %2534 to <2 x i32>*
  %2536 = load <2 x i32>, <2 x i32>* %2535, align 1
  %2537 = inttoptr i64 %2529 to float*
  %2538 = load float, float* %2537
  %2539 = extractelement <2 x float> %2533, i32 0
  %2540 = fdiv float %2539, %2538
  %2541 = bitcast i8* %2526 to float*
  store float %2540, float* %2541, align 1, !tbaa !2453
  %2542 = bitcast <2 x float> %2533 to <2 x i32>
  %2543 = extractelement <2 x i32> %2542, i32 1
  %2544 = getelementptr inbounds i8, i8* %2526, i64 4
  %2545 = bitcast i8* %2544 to i32*
  store i32 %2543, i32* %2545, align 1, !tbaa !2453
  %2546 = extractelement <2 x i32> %2536, i32 0
  %2547 = getelementptr inbounds i8, i8* %2526, i64 8
  %2548 = bitcast i8* %2547 to i32*
  store i32 %2546, i32* %2548, align 1, !tbaa !2453
  %2549 = extractelement <2 x i32> %2536, i32 1
  %2550 = getelementptr inbounds i8, i8* %2526, i64 12
  %2551 = bitcast i8* %2550 to i32*
  store i32 %2549, i32* %2551, align 1, !tbaa !2453
  %2552 = load i64, i64* %PC
  %2553 = add i64 %2552, 8
  store i64 %2553, i64* %PC
  %2554 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2555 = sext i32 %2554 to i64
  store i64 %2555, i64* %RCX, align 8, !tbaa !2428
  %2556 = load i64, i64* %RCX
  %2557 = mul i64 %2556, 4
  %2558 = add i64 %2557, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %2559 = bitcast %union.vec128_t* %XMM0 to i8*
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 9
  store i64 %2561, i64* %PC
  %2562 = bitcast i8* %2559 to <2 x float>*
  %2563 = load <2 x float>, <2 x float>* %2562, align 1
  %2564 = extractelement <2 x float> %2563, i32 0
  %2565 = inttoptr i64 %2558 to float*
  store float %2564, float* %2565
  %2566 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 9
  store i64 %2568, i64* %PC
  %2569 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %2570 = bitcast i8* %2566 to float*
  store float %2569, float* %2570, align 1, !tbaa !2453
  %2571 = getelementptr inbounds i8, i8* %2566, i64 4
  %2572 = bitcast i8* %2571 to float*
  store float 0.000000e+00, float* %2572, align 1, !tbaa !2453
  %2573 = getelementptr inbounds i8, i8* %2566, i64 8
  %2574 = bitcast i8* %2573 to float*
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2453
  %2575 = getelementptr inbounds i8, i8* %2566, i64 12
  %2576 = bitcast i8* %2575 to float*
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2453
  %2577 = load i64, i64* %PC
  %2578 = add i64 %2577, 8
  store i64 %2578, i64* %PC
  %2579 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2580 = sext i32 %2579 to i64
  store i64 %2580, i64* %RCX, align 8, !tbaa !2428
  %2581 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2582 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2583 = load i64, i64* %RCX
  %2584 = mul i64 %2583, 4
  %2585 = add i64 %2584, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %2586 = load i64, i64* %PC
  %2587 = add i64 %2586, 9
  store i64 %2587, i64* %PC
  %2588 = bitcast i8* %2582 to <2 x float>*
  %2589 = load <2 x float>, <2 x float>* %2588, align 1
  %2590 = getelementptr inbounds i8, i8* %2582, i64 8
  %2591 = bitcast i8* %2590 to <2 x i32>*
  %2592 = load <2 x i32>, <2 x i32>* %2591, align 1
  %2593 = inttoptr i64 %2585 to float*
  %2594 = load float, float* %2593
  %2595 = extractelement <2 x float> %2589, i32 0
  %2596 = fadd float %2595, %2594
  %2597 = bitcast i8* %2581 to float*
  store float %2596, float* %2597, align 1, !tbaa !2453
  %2598 = bitcast <2 x float> %2589 to <2 x i32>
  %2599 = extractelement <2 x i32> %2598, i32 1
  %2600 = getelementptr inbounds i8, i8* %2581, i64 4
  %2601 = bitcast i8* %2600 to i32*
  store i32 %2599, i32* %2601, align 1, !tbaa !2453
  %2602 = extractelement <2 x i32> %2592, i32 0
  %2603 = getelementptr inbounds i8, i8* %2581, i64 8
  %2604 = bitcast i8* %2603 to i32*
  store i32 %2602, i32* %2604, align 1, !tbaa !2453
  %2605 = extractelement <2 x i32> %2592, i32 1
  %2606 = getelementptr inbounds i8, i8* %2581, i64 12
  %2607 = bitcast i8* %2606 to i32*
  store i32 %2605, i32* %2607, align 1, !tbaa !2453
  %2608 = bitcast %union.vec128_t* %XMM0 to i8*
  %2609 = load i64, i64* %PC
  %2610 = add i64 %2609, 9
  store i64 %2610, i64* %PC
  %2611 = bitcast i8* %2608 to <2 x float>*
  %2612 = load <2 x float>, <2 x float>* %2611, align 1
  %2613 = extractelement <2 x float> %2612, i32 0
  store float %2613, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %2614 = load i64, i64* %PC
  %2615 = add i64 %2614, 7
  store i64 %2615, i64* %PC
  %2616 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2617 = zext i32 %2616 to i64
  store i64 %2617, i64* %RDI, align 8, !tbaa !2428
  %2618 = load i64, i64* %PC
  %2619 = add i64 %2618, 5580
  %2620 = load i64, i64* %PC
  %2621 = add i64 %2620, 5
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 5
  store i64 %2623, i64* %PC
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2625 = load i64, i64* %2624, align 8, !tbaa !2428
  %2626 = add i64 %2625, -8
  %2627 = inttoptr i64 %2626 to i64*
  store i64 %2621, i64* %2627
  store i64 %2626, i64* %2624, align 8, !tbaa !2428
  %2628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2619, i64* %2628, align 8, !tbaa !2428
  %2629 = load i64, i64* %PC
  %2630 = call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* %0, i64 %2629, %struct.Memory* %2128)
  %2631 = load i64, i64* %PC
  %2632 = add i64 %2631, 7
  store i64 %2632, i64* %PC
  %2633 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2634 = zext i32 %2633 to i64
  store i64 %2634, i64* %RAX, align 8, !tbaa !2428
  %2635 = load i64, i64* %RAX
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 3
  store i64 %2637, i64* %PC
  %2638 = trunc i64 %2635 to i32
  %2639 = add i32 1, %2638
  %2640 = zext i32 %2639 to i64
  store i64 %2640, i64* %RAX, align 8, !tbaa !2428
  %2641 = icmp ult i32 %2639, %2638
  %2642 = icmp ult i32 %2639, 1
  %2643 = or i1 %2641, %2642
  %2644 = zext i1 %2643 to i8
  %2645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2644, i8* %2645, align 1, !tbaa !2432
  %2646 = and i32 %2639, 255
  %2647 = call i32 @llvm.ctpop.i32(i32 %2646) #16
  %2648 = trunc i32 %2647 to i8
  %2649 = and i8 %2648, 1
  %2650 = xor i8 %2649, 1
  %2651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2650, i8* %2651, align 1, !tbaa !2446
  %2652 = xor i64 1, %2635
  %2653 = trunc i64 %2652 to i32
  %2654 = xor i32 %2653, %2639
  %2655 = lshr i32 %2654, 4
  %2656 = trunc i32 %2655 to i8
  %2657 = and i8 %2656, 1
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2657, i8* %2658, align 1, !tbaa !2447
  %2659 = icmp eq i32 %2639, 0
  %2660 = zext i1 %2659 to i8
  %2661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2660, i8* %2661, align 1, !tbaa !2448
  %2662 = lshr i32 %2639, 31
  %2663 = trunc i32 %2662 to i8
  %2664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2663, i8* %2664, align 1, !tbaa !2449
  %2665 = lshr i32 %2638, 31
  %2666 = xor i32 %2662, %2665
  %2667 = add nuw nsw i32 %2666, %2662
  %2668 = icmp eq i32 %2667, 2
  %2669 = zext i1 %2668 to i8
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2669, i8* %2670, align 1, !tbaa !2450
  %2671 = load i32, i32* %EAX
  %2672 = zext i32 %2671 to i64
  %2673 = load i64, i64* %PC
  %2674 = add i64 %2673, 7
  store i64 %2674, i64* %PC
  store i32 %2671, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2675 = load i64, i64* %PC
  %2676 = sub i64 %2675, 634
  %2677 = load i64, i64* %PC
  %2678 = add i64 %2677, 5
  store i64 %2678, i64* %PC
  %2679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2676, i64* %2679, align 8, !tbaa !2428
  br label %block_4010a0

block_400ac6:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %2680 = load i64, i64* %PC
  %2681 = add i64 %2680, 8
  store i64 %2681, i64* %PC
  %2682 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2683 = sext i32 %2682 to i64
  store i64 %2683, i64* %RAX, align 8, !tbaa !2428
  %2684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2685 = load i64, i64* %RAX
  %2686 = mul i64 %2685, 4
  %2687 = add i64 %2686, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2688 = load i64, i64* %PC
  %2689 = add i64 %2688, 9
  store i64 %2689, i64* %PC
  %2690 = inttoptr i64 %2687 to float*
  %2691 = load float, float* %2690
  %2692 = bitcast i8* %2684 to float*
  store float %2691, float* %2692, align 1, !tbaa !2453
  %2693 = getelementptr inbounds i8, i8* %2684, i64 4
  %2694 = bitcast i8* %2693 to float*
  store float 0.000000e+00, float* %2694, align 1, !tbaa !2453
  %2695 = getelementptr inbounds i8, i8* %2684, i64 8
  %2696 = bitcast i8* %2695 to float*
  store float 0.000000e+00, float* %2696, align 1, !tbaa !2453
  %2697 = getelementptr inbounds i8, i8* %2684, i64 12
  %2698 = bitcast i8* %2697 to float*
  store float 0.000000e+00, float* %2698, align 1, !tbaa !2453
  %2699 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2700 = bitcast %union.vec128_t* %XMM0 to i8*
  %2701 = load i64, i64* %PC
  %2702 = add i64 %2701, 4
  store i64 %2702, i64* %PC
  %2703 = bitcast i8* %2700 to <2 x float>*
  %2704 = load <2 x float>, <2 x float>* %2703, align 1
  %2705 = extractelement <2 x float> %2704, i32 0
  %2706 = fpext float %2705 to double
  %2707 = bitcast i8* %2699 to double*
  store double %2706, double* %2707, align 1, !tbaa !2455
  %2708 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2709 = load i64, i64* %PC
  %2710 = add i64 %2709, 7
  store i64 %2710, i64* %PC
  %2711 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %2712 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %2713 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %2714 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %2715 = bitcast i8* %2708 to float*
  store float %2711, float* %2715, align 1, !tbaa !2453
  %2716 = getelementptr inbounds i8, i8* %2708, i64 4
  %2717 = bitcast i8* %2716 to float*
  store float %2712, float* %2717, align 1, !tbaa !2453
  %2718 = getelementptr inbounds i8, i8* %2708, i64 8
  %2719 = bitcast i8* %2718 to float*
  store float %2713, float* %2719, align 1, !tbaa !2453
  %2720 = getelementptr inbounds i8, i8* %2708, i64 12
  %2721 = bitcast i8* %2720 to float*
  store float %2714, float* %2721, align 1, !tbaa !2453
  %2722 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2724 = bitcast %union.vec128_t* %XMM1 to i8*
  %2725 = load i64, i64* %PC
  %2726 = add i64 %2725, 4
  store i64 %2726, i64* %PC
  %2727 = bitcast i8* %2723 to i64*
  %2728 = load i64, i64* %2727, align 1
  %2729 = getelementptr inbounds i8, i8* %2723, i64 8
  %2730 = bitcast i8* %2729 to i64*
  %2731 = load i64, i64* %2730, align 1
  %2732 = bitcast i8* %2724 to i64*
  %2733 = load i64, i64* %2732, align 1
  %2734 = getelementptr inbounds i8, i8* %2724, i64 8
  %2735 = bitcast i8* %2734 to i64*
  %2736 = load i64, i64* %2735, align 1
  %2737 = and i64 %2733, %2728
  %2738 = and i64 %2736, %2731
  %2739 = trunc i64 %2737 to i32
  %2740 = lshr i64 %2737, 32
  %2741 = trunc i64 %2740 to i32
  %2742 = bitcast i8* %2722 to i32*
  store i32 %2739, i32* %2742, align 1, !tbaa !2452
  %2743 = getelementptr inbounds i8, i8* %2722, i64 4
  %2744 = bitcast i8* %2743 to i32*
  store i32 %2741, i32* %2744, align 1, !tbaa !2452
  %2745 = trunc i64 %2738 to i32
  %2746 = getelementptr inbounds i8, i8* %2722, i64 8
  %2747 = bitcast i8* %2746 to i32*
  store i32 %2745, i32* %2747, align 1, !tbaa !2452
  %2748 = lshr i64 %2738, 32
  %2749 = trunc i64 %2748 to i32
  %2750 = getelementptr inbounds i8, i8* %2722, i64 12
  %2751 = bitcast i8* %2750 to i32*
  store i32 %2749, i32* %2751, align 1, !tbaa !2452
  %2752 = load i64, i64* %RBP
  %2753 = sub i64 %2752, 904
  %2754 = bitcast %union.vec128_t* %XMM0 to i8*
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 8
  store i64 %2756, i64* %PC
  %2757 = bitcast i8* %2754 to double*
  %2758 = load double, double* %2757, align 1
  %2759 = inttoptr i64 %2753 to double*
  store double %2758, double* %2759
  br label %block_400aee

block_4013ec:                                     ; preds = %block_40139b
  %2760 = sub i64 %7109, 3628
  %2761 = load i64, i64* %PC
  %2762 = add i64 %2761, 5
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 5
  store i64 %2764, i64* %PC
  %2765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2766 = load i64, i64* %2765, align 8, !tbaa !2428
  %2767 = add i64 %2766, -8
  %2768 = inttoptr i64 %2767 to i64*
  store i64 %2762, i64* %2768
  store i64 %2767, i64* %2765, align 8, !tbaa !2428
  %2769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2760, i64* %2769, align 8, !tbaa !2428
  %2770 = load i64, i64* %PC
  %2771 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %2770, %struct.Memory* %MEMORY.17)
  %2772 = load i64, i64* %PC
  %2773 = add i64 %2772, 10
  store i64 %2773, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %2774 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2775 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2776 = bitcast %union.vec128_t* %XMM1 to i8*
  %2777 = load i64, i64* %PC
  %2778 = add i64 %2777, 3
  store i64 %2778, i64* %PC
  %2779 = bitcast i8* %2775 to i64*
  %2780 = load i64, i64* %2779, align 1
  %2781 = getelementptr inbounds i8, i8* %2775, i64 8
  %2782 = bitcast i8* %2781 to i64*
  %2783 = load i64, i64* %2782, align 1
  %2784 = bitcast i8* %2776 to i64*
  %2785 = load i64, i64* %2784, align 1
  %2786 = getelementptr inbounds i8, i8* %2776, i64 8
  %2787 = bitcast i8* %2786 to i64*
  %2788 = load i64, i64* %2787, align 1
  %2789 = xor i64 %2785, %2780
  %2790 = xor i64 %2788, %2783
  %2791 = trunc i64 %2789 to i32
  %2792 = lshr i64 %2789, 32
  %2793 = trunc i64 %2792 to i32
  %2794 = bitcast i8* %2774 to i32*
  store i32 %2791, i32* %2794, align 1, !tbaa !2452
  %2795 = getelementptr inbounds i8, i8* %2774, i64 4
  %2796 = bitcast i8* %2795 to i32*
  store i32 %2793, i32* %2796, align 1, !tbaa !2452
  %2797 = trunc i64 %2790 to i32
  %2798 = getelementptr inbounds i8, i8* %2774, i64 8
  %2799 = bitcast i8* %2798 to i32*
  store i32 %2797, i32* %2799, align 1, !tbaa !2452
  %2800 = lshr i64 %2790, 32
  %2801 = trunc i64 %2800 to i32
  %2802 = getelementptr inbounds i8, i8* %2774, i64 12
  %2803 = bitcast i8* %2802 to i32*
  store i32 %2801, i32* %2803, align 1, !tbaa !2452
  %2804 = load i64, i64* %RBP
  %2805 = sub i64 %2804, 84
  %2806 = bitcast %union.vec128_t* %XMM0 to i8*
  %2807 = load i64, i64* %PC
  %2808 = add i64 %2807, 5
  store i64 %2808, i64* %PC
  %2809 = bitcast i8* %2806 to <2 x float>*
  %2810 = load <2 x float>, <2 x float>* %2809, align 1
  %2811 = extractelement <2 x float> %2810, i32 0
  %2812 = inttoptr i64 %2805 to float*
  store float %2811, float* %2812
  %2813 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2814 = load i64, i64* %RBP
  %2815 = sub i64 %2814, 84
  %2816 = load i64, i64* %PC
  %2817 = add i64 %2816, 5
  store i64 %2817, i64* %PC
  %2818 = inttoptr i64 %2815 to float*
  %2819 = load float, float* %2818
  %2820 = bitcast i8* %2813 to float*
  store float %2819, float* %2820, align 1, !tbaa !2453
  %2821 = getelementptr inbounds i8, i8* %2813, i64 4
  %2822 = bitcast i8* %2821 to float*
  store float 0.000000e+00, float* %2822, align 1, !tbaa !2453
  %2823 = getelementptr inbounds i8, i8* %2813, i64 8
  %2824 = bitcast i8* %2823 to float*
  store float 0.000000e+00, float* %2824, align 1, !tbaa !2453
  %2825 = getelementptr inbounds i8, i8* %2813, i64 12
  %2826 = bitcast i8* %2825 to float*
  store float 0.000000e+00, float* %2826, align 1, !tbaa !2453
  %2827 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2828 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2829 = load i64, i64* %RBP
  %2830 = sub i64 %2829, 80
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 5
  store i64 %2832, i64* %PC
  %2833 = bitcast i8* %2828 to <2 x float>*
  %2834 = load <2 x float>, <2 x float>* %2833, align 1
  %2835 = getelementptr inbounds i8, i8* %2828, i64 8
  %2836 = bitcast i8* %2835 to <2 x i32>*
  %2837 = load <2 x i32>, <2 x i32>* %2836, align 1
  %2838 = inttoptr i64 %2830 to float*
  %2839 = load float, float* %2838
  %2840 = extractelement <2 x float> %2834, i32 0
  %2841 = fsub float %2840, %2839
  %2842 = bitcast i8* %2827 to float*
  store float %2841, float* %2842, align 1, !tbaa !2453
  %2843 = bitcast <2 x float> %2834 to <2 x i32>
  %2844 = extractelement <2 x i32> %2843, i32 1
  %2845 = getelementptr inbounds i8, i8* %2827, i64 4
  %2846 = bitcast i8* %2845 to i32*
  store i32 %2844, i32* %2846, align 1, !tbaa !2453
  %2847 = extractelement <2 x i32> %2837, i32 0
  %2848 = getelementptr inbounds i8, i8* %2827, i64 8
  %2849 = bitcast i8* %2848 to i32*
  store i32 %2847, i32* %2849, align 1, !tbaa !2453
  %2850 = extractelement <2 x i32> %2837, i32 1
  %2851 = getelementptr inbounds i8, i8* %2827, i64 12
  %2852 = bitcast i8* %2851 to i32*
  store i32 %2850, i32* %2852, align 1, !tbaa !2453
  %2853 = load i64, i64* %RBP
  %2854 = sub i64 %2853, 76
  %2855 = bitcast %union.vec128_t* %XMM0 to i8*
  %2856 = load i64, i64* %PC
  %2857 = add i64 %2856, 5
  store i64 %2857, i64* %PC
  %2858 = bitcast i8* %2855 to <2 x float>*
  %2859 = load <2 x float>, <2 x float>* %2858, align 1
  %2860 = extractelement <2 x float> %2859, i32 0
  %2861 = inttoptr i64 %2854 to float*
  store float %2860, float* %2861
  %2862 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2863 = load i64, i64* %RBP
  %2864 = sub i64 %2863, 76
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 5
  store i64 %2866, i64* %PC
  %2867 = inttoptr i64 %2864 to float*
  %2868 = load float, float* %2867
  %2869 = bitcast i8* %2862 to float*
  store float %2868, float* %2869, align 1, !tbaa !2453
  %2870 = getelementptr inbounds i8, i8* %2862, i64 4
  %2871 = bitcast i8* %2870 to float*
  store float 0.000000e+00, float* %2871, align 1, !tbaa !2453
  %2872 = getelementptr inbounds i8, i8* %2862, i64 8
  %2873 = bitcast i8* %2872 to float*
  store float 0.000000e+00, float* %2873, align 1, !tbaa !2453
  %2874 = getelementptr inbounds i8, i8* %2862, i64 12
  %2875 = bitcast i8* %2874 to float*
  store float 0.000000e+00, float* %2875, align 1, !tbaa !2453
  %2876 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2877 = bitcast %union.vec128_t* %XMM0 to i8*
  %2878 = load i64, i64* %PC
  %2879 = add i64 %2878, 4
  store i64 %2879, i64* %PC
  %2880 = bitcast i8* %2877 to <2 x float>*
  %2881 = load <2 x float>, <2 x float>* %2880, align 1
  %2882 = extractelement <2 x float> %2881, i32 0
  %2883 = fpext float %2882 to double
  %2884 = bitcast i8* %2876 to double*
  store double %2883, double* %2884, align 1, !tbaa !2455
  %2885 = load i64, i64* %RBP
  %2886 = sub i64 %2885, 68
  %2887 = load i64, i64* %PC
  %2888 = add i64 %2887, 3
  store i64 %2888, i64* %PC
  %2889 = inttoptr i64 %2886 to i32*
  %2890 = load i32, i32* %2889
  %2891 = zext i32 %2890 to i64
  store i64 %2891, i64* %RAX, align 8, !tbaa !2428
  %2892 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2893 = load i32, i32* %EAX
  %2894 = zext i32 %2893 to i64
  %2895 = load i64, i64* %PC
  %2896 = add i64 %2895, 4
  store i64 %2896, i64* %PC
  %2897 = sitofp i32 %2893 to double
  %2898 = bitcast i8* %2892 to double*
  store double %2897, double* %2898, align 1, !tbaa !2455
  %2899 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2900 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2901 = bitcast %union.vec128_t* %XMM2 to i8*
  %2902 = load i64, i64* %PC
  %2903 = add i64 %2902, 4
  store i64 %2903, i64* %PC
  %2904 = bitcast i8* %2900 to double*
  %2905 = load double, double* %2904, align 1
  %2906 = getelementptr inbounds i8, i8* %2900, i64 8
  %2907 = bitcast i8* %2906 to i64*
  %2908 = load i64, i64* %2907, align 1
  %2909 = bitcast i8* %2901 to double*
  %2910 = load double, double* %2909, align 1
  %2911 = fdiv double %2905, %2910
  %2912 = bitcast i8* %2899 to double*
  store double %2911, double* %2912, align 1, !tbaa !2455
  %2913 = getelementptr inbounds i8, i8* %2899, i64 8
  %2914 = bitcast i8* %2913 to i64*
  store i64 %2908, i64* %2914, align 1, !tbaa !2455
  %2915 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2916 = bitcast %union.vec128_t* %XMM0 to i8*
  %2917 = load i64, i64* %PC
  %2918 = add i64 %2917, 4
  store i64 %2918, i64* %PC
  %2919 = bitcast i8* %2915 to <2 x i32>*
  %2920 = load <2 x i32>, <2 x i32>* %2919, align 1
  %2921 = getelementptr inbounds i8, i8* %2915, i64 8
  %2922 = bitcast i8* %2921 to <2 x i32>*
  %2923 = load <2 x i32>, <2 x i32>* %2922, align 1
  %2924 = bitcast i8* %2916 to double*
  %2925 = load double, double* %2924, align 1
  %2926 = fptrunc double %2925 to float
  %2927 = bitcast i8* %2915 to float*
  store float %2926, float* %2927, align 1, !tbaa !2453
  %2928 = extractelement <2 x i32> %2920, i32 1
  %2929 = getelementptr inbounds i8, i8* %2915, i64 4
  %2930 = bitcast i8* %2929 to i32*
  store i32 %2928, i32* %2930, align 1, !tbaa !2453
  %2931 = extractelement <2 x i32> %2923, i32 0
  %2932 = bitcast i8* %2921 to i32*
  store i32 %2931, i32* %2932, align 1, !tbaa !2453
  %2933 = extractelement <2 x i32> %2923, i32 1
  %2934 = getelementptr inbounds i8, i8* %2915, i64 12
  %2935 = bitcast i8* %2934 to i32*
  store i32 %2933, i32* %2935, align 1, !tbaa !2453
  %2936 = load i64, i64* %RBP
  %2937 = sub i64 %2936, 76
  %2938 = bitcast %union.vec128_t* %XMM0 to i8*
  %2939 = load i64, i64* %PC
  %2940 = add i64 %2939, 5
  store i64 %2940, i64* %PC
  %2941 = bitcast i8* %2938 to <2 x float>*
  %2942 = load <2 x float>, <2 x float>* %2941, align 1
  %2943 = extractelement <2 x float> %2942, i32 0
  %2944 = inttoptr i64 %2937 to float*
  store float %2943, float* %2944
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 8
  store i64 %2946, i64* %PC
  %2947 = load i64, i64* @stderr
  store i64 %2947, i64* %RDI, align 8, !tbaa !2428
  %2948 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2949 = bitcast %union.vec128_t* %XMM1 to i8*
  %2950 = load i64, i64* %PC
  %2951 = add i64 %2950, 3
  store i64 %2951, i64* %PC
  %2952 = bitcast i8* %2949 to <2 x i32>*
  %2953 = load <2 x i32>, <2 x i32>* %2952, align 1
  %2954 = getelementptr inbounds i8, i8* %2949, i64 8
  %2955 = bitcast i8* %2954 to <2 x i32>*
  %2956 = load <2 x i32>, <2 x i32>* %2955, align 1
  %2957 = extractelement <2 x i32> %2953, i32 0
  %2958 = bitcast i8* %2948 to i32*
  store i32 %2957, i32* %2958, align 1, !tbaa !2453
  %2959 = extractelement <2 x i32> %2953, i32 1
  %2960 = getelementptr inbounds i8, i8* %2948, i64 4
  %2961 = bitcast i8* %2960 to i32*
  store i32 %2959, i32* %2961, align 1, !tbaa !2453
  %2962 = extractelement <2 x i32> %2956, i32 0
  %2963 = getelementptr inbounds i8, i8* %2948, i64 8
  %2964 = bitcast i8* %2963 to i32*
  store i32 %2962, i32* %2964, align 1, !tbaa !2453
  %2965 = extractelement <2 x i32> %2956, i32 1
  %2966 = getelementptr inbounds i8, i8* %2948, i64 12
  %2967 = bitcast i8* %2966 to i32*
  store i32 %2965, i32* %2967, align 1, !tbaa !2453
  %2968 = load i64, i64* %PC
  %2969 = add i64 %2968, 2
  store i64 %2969, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %2970 = load i64, i64* %PC
  %2971 = sub i64 %2970, 3964
  %2972 = load i64, i64* %PC
  %2973 = add i64 %2972, 5
  %2974 = load i64, i64* %PC
  %2975 = add i64 %2974, 5
  store i64 %2975, i64* %PC
  %2976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2977 = load i64, i64* %2976, align 8, !tbaa !2428
  %2978 = add i64 %2977, -8
  %2979 = inttoptr i64 %2978 to i64*
  store i64 %2973, i64* %2979
  store i64 %2978, i64* %2976, align 8, !tbaa !2428
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2971, i64* %2980, align 8, !tbaa !2428
  %2981 = load i64, i64* %PC
  %2982 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2981, %struct.Memory* %2771)
  %2983 = load i64, i64* %PC
  %2984 = add i64 %2983, 10
  store i64 %2984, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %2985 = load i64, i64* %PC
  %2986 = add i64 %2985, 8
  store i64 %2986, i64* %PC
  %2987 = load i64, i64* @stderr
  store i64 %2987, i64* %RDI, align 8, !tbaa !2428
  %2988 = load i64, i64* %PC
  %2989 = add i64 %2988, 7
  store i64 %2989, i64* %PC
  %2990 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %2991 = zext i32 %2990 to i64
  store i64 %2991, i64* %RDX, align 8, !tbaa !2428
  %2992 = load i64, i64* %RBP
  %2993 = sub i64 %2992, 980
  %2994 = load i32, i32* %EAX
  %2995 = zext i32 %2994 to i64
  %2996 = load i64, i64* %PC
  %2997 = add i64 %2996, 6
  store i64 %2997, i64* %PC
  %2998 = inttoptr i64 %2993 to i32*
  store i32 %2994, i32* %2998
  %2999 = load i64, i64* %PC
  %3000 = add i64 %2999, 2
  store i64 %3000, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %3001 = load i64, i64* %PC
  %3002 = sub i64 %3001, 4002
  %3003 = load i64, i64* %PC
  %3004 = add i64 %3003, 5
  %3005 = load i64, i64* %PC
  %3006 = add i64 %3005, 5
  store i64 %3006, i64* %PC
  %3007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3008 = load i64, i64* %3007, align 8, !tbaa !2428
  %3009 = add i64 %3008, -8
  %3010 = inttoptr i64 %3009 to i64*
  store i64 %3004, i64* %3010
  store i64 %3009, i64* %3007, align 8, !tbaa !2428
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3002, i64* %3011, align 8, !tbaa !2428
  %3012 = load i64, i64* %PC
  %3013 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %3012, %struct.Memory* %2982)
  %3014 = load i64, i64* %PC
  %3015 = add i64 %3014, 10
  store i64 %3015, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %3016 = load i64, i64* %PC
  %3017 = add i64 %3016, 8
  store i64 %3017, i64* %PC
  %3018 = load i64, i64* @stderr
  store i64 %3018, i64* %RDI, align 8, !tbaa !2428
  %3019 = load i64, i64* %RBP
  %3020 = sub i64 %3019, 984
  %3021 = load i32, i32* %EAX
  %3022 = zext i32 %3021 to i64
  %3023 = load i64, i64* %PC
  %3024 = add i64 %3023, 6
  store i64 %3024, i64* %PC
  %3025 = inttoptr i64 %3020 to i32*
  store i32 %3021, i32* %3025
  %3026 = load i64, i64* %PC
  %3027 = add i64 %3026, 2
  store i64 %3027, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %3028 = load i64, i64* %PC
  %3029 = sub i64 %3028, 4033
  %3030 = load i64, i64* %PC
  %3031 = add i64 %3030, 5
  %3032 = load i64, i64* %PC
  %3033 = add i64 %3032, 5
  store i64 %3033, i64* %PC
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3035 = load i64, i64* %3034, align 8, !tbaa !2428
  %3036 = add i64 %3035, -8
  %3037 = inttoptr i64 %3036 to i64*
  store i64 %3031, i64* %3037
  store i64 %3036, i64* %3034, align 8, !tbaa !2428
  %3038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3029, i64* %3038, align 8, !tbaa !2428
  %3039 = load i64, i64* %PC
  %3040 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %3039, %struct.Memory* %3013)
  %3041 = load i64, i64* %PC
  %3042 = add i64 %3041, 10
  store i64 %3042, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %3043 = load i64, i64* %PC
  %3044 = add i64 %3043, 8
  store i64 %3044, i64* %PC
  %3045 = load i64, i64* @stderr
  store i64 %3045, i64* %RDI, align 8, !tbaa !2428
  %3046 = load i64, i64* %RBP
  %3047 = sub i64 %3046, 988
  %3048 = load i32, i32* %EAX
  %3049 = zext i32 %3048 to i64
  %3050 = load i64, i64* %PC
  %3051 = add i64 %3050, 6
  store i64 %3051, i64* %PC
  %3052 = inttoptr i64 %3047 to i32*
  store i32 %3048, i32* %3052
  %3053 = load i64, i64* %PC
  %3054 = add i64 %3053, 2
  store i64 %3054, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %3055 = load i64, i64* %PC
  %3056 = sub i64 %3055, 4064
  %3057 = load i64, i64* %PC
  %3058 = add i64 %3057, 5
  %3059 = load i64, i64* %PC
  %3060 = add i64 %3059, 5
  store i64 %3060, i64* %PC
  %3061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3062 = load i64, i64* %3061, align 8, !tbaa !2428
  %3063 = add i64 %3062, -8
  %3064 = inttoptr i64 %3063 to i64*
  store i64 %3058, i64* %3064
  store i64 %3063, i64* %3061, align 8, !tbaa !2428
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3056, i64* %3065, align 8, !tbaa !2428
  %3066 = load i64, i64* %PC
  %3067 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %3066, %struct.Memory* %3040)
  %3068 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3069 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3070 = bitcast %union.vec128_t* %XMM0 to i8*
  %3071 = load i64, i64* %PC
  %3072 = add i64 %3071, 3
  store i64 %3072, i64* %PC
  %3073 = bitcast i8* %3069 to i64*
  %3074 = load i64, i64* %3073, align 1
  %3075 = getelementptr inbounds i8, i8* %3069, i64 8
  %3076 = bitcast i8* %3075 to i64*
  %3077 = load i64, i64* %3076, align 1
  %3078 = bitcast i8* %3070 to i64*
  %3079 = load i64, i64* %3078, align 1
  %3080 = getelementptr inbounds i8, i8* %3070, i64 8
  %3081 = bitcast i8* %3080 to i64*
  %3082 = load i64, i64* %3081, align 1
  %3083 = xor i64 %3079, %3074
  %3084 = xor i64 %3082, %3077
  %3085 = trunc i64 %3083 to i32
  %3086 = lshr i64 %3083, 32
  %3087 = trunc i64 %3086 to i32
  %3088 = bitcast i8* %3068 to i32*
  store i32 %3085, i32* %3088, align 1, !tbaa !2452
  %3089 = getelementptr inbounds i8, i8* %3068, i64 4
  %3090 = bitcast i8* %3089 to i32*
  store i32 %3087, i32* %3090, align 1, !tbaa !2452
  %3091 = trunc i64 %3084 to i32
  %3092 = getelementptr inbounds i8, i8* %3068, i64 8
  %3093 = bitcast i8* %3092 to i32*
  store i32 %3091, i32* %3093, align 1, !tbaa !2452
  %3094 = lshr i64 %3084, 32
  %3095 = trunc i64 %3094 to i32
  %3096 = getelementptr inbounds i8, i8* %3068, i64 12
  %3097 = bitcast i8* %3096 to i32*
  store i32 %3095, i32* %3097, align 1, !tbaa !2452
  %3098 = load i64, i64* %PC
  %3099 = add i64 %3098, 7
  store i64 %3099, i64* %PC
  %3100 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3101 = zext i32 %3100 to i64
  store i64 %3101, i64* %RDX, align 8, !tbaa !2428
  %3102 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3103 = load i32, i32* %EDX
  %3104 = zext i32 %3103 to i64
  %3105 = load i64, i64* %PC
  %3106 = add i64 %3105, 4
  store i64 %3106, i64* %PC
  %3107 = bitcast i8* %3102 to <2 x i32>*
  %3108 = load <2 x i32>, <2 x i32>* %3107, align 1
  %3109 = getelementptr inbounds i8, i8* %3102, i64 8
  %3110 = bitcast i8* %3109 to <2 x i32>*
  %3111 = load <2 x i32>, <2 x i32>* %3110, align 1
  %3112 = sitofp i32 %3103 to float
  %3113 = bitcast i8* %3102 to float*
  store float %3112, float* %3113, align 1, !tbaa !2453
  %3114 = extractelement <2 x i32> %3108, i32 1
  %3115 = getelementptr inbounds i8, i8* %3102, i64 4
  %3116 = bitcast i8* %3115 to i32*
  store i32 %3114, i32* %3116, align 1, !tbaa !2453
  %3117 = extractelement <2 x i32> %3111, i32 0
  %3118 = bitcast i8* %3109 to i32*
  store i32 %3117, i32* %3118, align 1, !tbaa !2453
  %3119 = extractelement <2 x i32> %3111, i32 1
  %3120 = getelementptr inbounds i8, i8* %3102, i64 12
  %3121 = bitcast i8* %3120 to i32*
  store i32 %3119, i32* %3121, align 1, !tbaa !2453
  %3122 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3123 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3124 = load i64, i64* %RBP
  %3125 = sub i64 %3124, 76
  %3126 = load i64, i64* %PC
  %3127 = add i64 %3126, 5
  store i64 %3127, i64* %PC
  %3128 = bitcast i8* %3123 to <2 x float>*
  %3129 = load <2 x float>, <2 x float>* %3128, align 1
  %3130 = getelementptr inbounds i8, i8* %3123, i64 8
  %3131 = bitcast i8* %3130 to <2 x i32>*
  %3132 = load <2 x i32>, <2 x i32>* %3131, align 1
  %3133 = inttoptr i64 %3125 to float*
  %3134 = load float, float* %3133
  %3135 = extractelement <2 x float> %3129, i32 0
  %3136 = fmul float %3135, %3134
  %3137 = bitcast i8* %3122 to float*
  store float %3136, float* %3137, align 1, !tbaa !2453
  %3138 = bitcast <2 x float> %3129 to <2 x i32>
  %3139 = extractelement <2 x i32> %3138, i32 1
  %3140 = getelementptr inbounds i8, i8* %3122, i64 4
  %3141 = bitcast i8* %3140 to i32*
  store i32 %3139, i32* %3141, align 1, !tbaa !2453
  %3142 = extractelement <2 x i32> %3132, i32 0
  %3143 = getelementptr inbounds i8, i8* %3122, i64 8
  %3144 = bitcast i8* %3143 to i32*
  store i32 %3142, i32* %3144, align 1, !tbaa !2453
  %3145 = extractelement <2 x i32> %3132, i32 1
  %3146 = getelementptr inbounds i8, i8* %3122, i64 12
  %3147 = bitcast i8* %3146 to i32*
  store i32 %3145, i32* %3147, align 1, !tbaa !2453
  %3148 = load i64, i64* %RBP
  %3149 = sub i64 %3148, 44
  %3150 = bitcast %union.vec128_t* %XMM1 to i8*
  %3151 = load i64, i64* %PC
  %3152 = add i64 %3151, 5
  store i64 %3152, i64* %PC
  %3153 = bitcast i8* %3150 to <2 x float>*
  %3154 = load <2 x float>, <2 x float>* %3153, align 1
  %3155 = extractelement <2 x float> %3154, i32 0
  %3156 = inttoptr i64 %3149 to float*
  store float %3155, float* %3156
  %3157 = bitcast %union.vec128_t* %XMM0 to i8*
  %3158 = load i64, i64* %PC
  %3159 = add i64 %3158, 9
  store i64 %3159, i64* %PC
  %3160 = bitcast i8* %3157 to <2 x float>*
  %3161 = load <2 x float>, <2 x float>* %3160, align 1
  %3162 = extractelement <2 x float> %3161, i32 0
  store float %3162, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %3163 = load i64, i64* %PC
  %3164 = add i64 %3163, 11
  store i64 %3164, i64* %PC
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3165 = load i64, i64* %RBP
  %3166 = sub i64 %3165, 992
  %3167 = load i32, i32* %EAX
  %3168 = zext i32 %3167 to i64
  %3169 = load i64, i64* %PC
  %3170 = add i64 %3169, 6
  store i64 %3170, i64* %PC
  %3171 = inttoptr i64 %3166 to i32*
  store i32 %3167, i32* %3171
  br label %block_4014d7

block_4015c4:                                     ; preds = %block_401580, %block_4015d8
  %MEMORY.2 = phi %struct.Memory* [ %7769, %block_401580 ], [ %1410, %block_4015d8 ]
  %3172 = load i64, i64* %PC
  %3173 = add i64 %3172, 7
  store i64 %3173, i64* %PC
  %3174 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %3175 = zext i32 %3174 to i64
  store i64 %3175, i64* %RAX, align 8, !tbaa !2428
  %3176 = load i32, i32* %EAX
  %3177 = zext i32 %3176 to i64
  %3178 = load i64, i64* %PC
  %3179 = add i64 %3178, 7
  store i64 %3179, i64* %PC
  %3180 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3181 = sub i32 %3176, %3180
  %3182 = icmp ult i32 %3176, %3180
  %3183 = zext i1 %3182 to i8
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3183, i8* %3184, align 1, !tbaa !2432
  %3185 = and i32 %3181, 255
  %3186 = call i32 @llvm.ctpop.i32(i32 %3185) #16
  %3187 = trunc i32 %3186 to i8
  %3188 = and i8 %3187, 1
  %3189 = xor i8 %3188, 1
  %3190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3189, i8* %3190, align 1, !tbaa !2446
  %3191 = xor i32 %3180, %3176
  %3192 = xor i32 %3191, %3181
  %3193 = lshr i32 %3192, 4
  %3194 = trunc i32 %3193 to i8
  %3195 = and i8 %3194, 1
  %3196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3195, i8* %3196, align 1, !tbaa !2447
  %3197 = icmp eq i32 %3181, 0
  %3198 = zext i1 %3197 to i8
  %3199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3198, i8* %3199, align 1, !tbaa !2448
  %3200 = lshr i32 %3181, 31
  %3201 = trunc i32 %3200 to i8
  %3202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3201, i8* %3202, align 1, !tbaa !2449
  %3203 = lshr i32 %3176, 31
  %3204 = lshr i32 %3180, 31
  %3205 = xor i32 %3204, %3203
  %3206 = xor i32 %3200, %3203
  %3207 = add nuw nsw i32 %3206, %3205
  %3208 = icmp eq i32 %3207, 2
  %3209 = zext i1 %3208 to i8
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3209, i8* %3210, align 1, !tbaa !2450
  %3211 = load i64, i64* %PC
  %3212 = add i64 %3211, 80
  %3213 = load i64, i64* %PC
  %3214 = add i64 %3213, 6
  %3215 = load i64, i64* %PC
  %3216 = add i64 %3215, 6
  store i64 %3216, i64* %PC
  %3217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3218 = load i8, i8* %3217, align 1, !tbaa !2449
  %3219 = icmp ne i8 %3218, 0
  %3220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3221 = load i8, i8* %3220, align 1, !tbaa !2450
  %3222 = icmp ne i8 %3221, 0
  %3223 = xor i1 %3219, %3222
  %3224 = xor i1 %3223, true
  %3225 = zext i1 %3224 to i8
  store i8 %3225, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3227 = select i1 %3223, i64 %3214, i64 %3212
  store i64 %3227, i64* %3226, align 8, !tbaa !2428
  %3228 = load i8, i8* %BRANCH_TAKEN
  %3229 = icmp eq i8 %3228, 1
  %3230 = load i64, i64* %PC
  br i1 %3229, label %block_401622, label %block_4015d8

block_400fbc:                                     ; preds = %block_400fab, %block_400f66
  %MEMORY.3 = phi %struct.Memory* [ %1282, %block_400f66 ], [ %1282, %block_400fab ]
  %3231 = load i64, i64* %PC
  %3232 = add i64 %3231, 5
  %3233 = load i64, i64* %PC
  %3234 = add i64 %3233, 5
  store i64 %3234, i64* %PC
  %3235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3232, i64* %3235, align 8, !tbaa !2428
  %3236 = load i64, i64* %RBP
  %3237 = sub i64 %3236, 64
  %3238 = load i64, i64* %PC
  %3239 = add i64 %3238, 4
  store i64 %3239, i64* %PC
  %3240 = inttoptr i64 %3237 to i32*
  %3241 = load i32, i32* %3240
  %3242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3242, align 1, !tbaa !2432
  %3243 = and i32 %3241, 255
  %3244 = call i32 @llvm.ctpop.i32(i32 %3243) #16
  %3245 = trunc i32 %3244 to i8
  %3246 = and i8 %3245, 1
  %3247 = xor i8 %3246, 1
  %3248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3247, i8* %3248, align 1, !tbaa !2446
  %3249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3249, align 1, !tbaa !2447
  %3250 = icmp eq i32 %3241, 0
  %3251 = zext i1 %3250 to i8
  %3252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3251, i8* %3252, align 1, !tbaa !2448
  %3253 = lshr i32 %3241, 31
  %3254 = trunc i32 %3253 to i8
  %3255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3254, i8* %3255, align 1, !tbaa !2449
  %3256 = lshr i32 %3241, 31
  %3257 = xor i32 %3253, %3256
  %3258 = add nuw nsw i32 %3257, %3256
  %3259 = icmp eq i32 %3258, 2
  %3260 = zext i1 %3259 to i8
  %3261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3260, i8* %3261, align 1, !tbaa !2450
  %3262 = load i64, i64* %PC
  %3263 = sub i64 %3262, 259
  %3264 = load i64, i64* %PC
  %3265 = add i64 %3264, 6
  %3266 = load i64, i64* %PC
  %3267 = add i64 %3266, 6
  store i64 %3267, i64* %PC
  %3268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3269 = load i8, i8* %3268, align 1, !tbaa !2449
  %3270 = icmp ne i8 %3269, 0
  %3271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3272 = load i8, i8* %3271, align 1, !tbaa !2450
  %3273 = icmp ne i8 %3272, 0
  %3274 = xor i1 %3270, %3273
  %3275 = zext i1 %3274 to i8
  store i8 %3275, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3277 = select i1 %3274, i64 %3263, i64 %3265
  store i64 %3277, i64* %3276, align 8, !tbaa !2428
  %3278 = load i8, i8* %BRANCH_TAKEN
  %3279 = icmp eq i8 %3278, 1
  br i1 %3279, label %block_400ec2, label %block_400fcb

block_4010c3:                                     ; preds = %block_4010d7, %block_4010ae
  %MEMORY.4 = phi %struct.Memory* [ %3390, %block_4010ae ], [ %7164, %block_4010d7 ]
  %3280 = load i64, i64* %PC
  %3281 = add i64 %3280, 7
  store i64 %3281, i64* %PC
  %3282 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %3283 = zext i32 %3282 to i64
  store i64 %3283, i64* %RAX, align 8, !tbaa !2428
  %3284 = load i32, i32* %EAX
  %3285 = zext i32 %3284 to i64
  %3286 = load i64, i64* %PC
  %3287 = add i64 %3286, 7
  store i64 %3287, i64* %PC
  %3288 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3289 = sub i32 %3284, %3288
  %3290 = icmp ult i32 %3284, %3288
  %3291 = zext i1 %3290 to i8
  %3292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3291, i8* %3292, align 1, !tbaa !2432
  %3293 = and i32 %3289, 255
  %3294 = call i32 @llvm.ctpop.i32(i32 %3293) #16
  %3295 = trunc i32 %3294 to i8
  %3296 = and i8 %3295, 1
  %3297 = xor i8 %3296, 1
  %3298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3297, i8* %3298, align 1, !tbaa !2446
  %3299 = xor i32 %3288, %3284
  %3300 = xor i32 %3299, %3289
  %3301 = lshr i32 %3300, 4
  %3302 = trunc i32 %3301 to i8
  %3303 = and i8 %3302, 1
  %3304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3303, i8* %3304, align 1, !tbaa !2447
  %3305 = icmp eq i32 %3289, 0
  %3306 = zext i1 %3305 to i8
  %3307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3306, i8* %3307, align 1, !tbaa !2448
  %3308 = lshr i32 %3289, 31
  %3309 = trunc i32 %3308 to i8
  %3310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3309, i8* %3310, align 1, !tbaa !2449
  %3311 = lshr i32 %3284, 31
  %3312 = lshr i32 %3288, 31
  %3313 = xor i32 %3312, %3311
  %3314 = xor i32 %3308, %3311
  %3315 = add nuw nsw i32 %3314, %3313
  %3316 = icmp eq i32 %3315, 2
  %3317 = zext i1 %3316 to i8
  %3318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3317, i8* %3318, align 1, !tbaa !2450
  %3319 = load i64, i64* %PC
  %3320 = add i64 %3319, 120
  %3321 = load i64, i64* %PC
  %3322 = add i64 %3321, 6
  %3323 = load i64, i64* %PC
  %3324 = add i64 %3323, 6
  store i64 %3324, i64* %PC
  %3325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3326 = load i8, i8* %3325, align 1, !tbaa !2449
  %3327 = icmp ne i8 %3326, 0
  %3328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3329 = load i8, i8* %3328, align 1, !tbaa !2450
  %3330 = icmp ne i8 %3329, 0
  %3331 = xor i1 %3327, %3330
  %3332 = xor i1 %3331, true
  %3333 = zext i1 %3332 to i8
  store i8 %3333, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3335 = select i1 %3331, i64 %3322, i64 %3320
  store i64 %3335, i64* %3334, align 8, !tbaa !2428
  %3336 = load i8, i8* %BRANCH_TAKEN
  %3337 = icmp eq i8 %3336, 1
  %3338 = load i64, i64* %PC
  br i1 %3337, label %block_401149, label %block_4010d7

block_400e3a:                                     ; preds = %block_400def
  %3339 = load i64, i64* %RBP
  %3340 = sub i64 %3339, 68
  %3341 = load i64, i64* %PC
  %3342 = add i64 %3341, 3
  store i64 %3342, i64* %PC
  %3343 = inttoptr i64 %3340 to i32*
  %3344 = load i32, i32* %3343
  %3345 = zext i32 %3344 to i64
  store i64 %3345, i64* %RAX, align 8, !tbaa !2428
  %3346 = load i64, i64* %RAX
  %3347 = load i64, i64* %PC
  %3348 = add i64 %3347, 3
  store i64 %3348, i64* %PC
  %3349 = trunc i64 %3346 to i32
  %3350 = shl i32 %3349, 1
  %3351 = icmp slt i32 %3349, 0
  %3352 = icmp slt i32 %3350, 0
  %3353 = xor i1 %3351, %3352
  %3354 = zext i32 %3350 to i64
  store i64 %3354, i64* %RAX, align 8, !tbaa !2428
  %3355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3356 = zext i1 %3351 to i8
  store i8 %3356, i8* %3355, align 1, !tbaa !2451
  %3357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3358 = and i32 %3350, 254
  %3359 = call i32 @llvm.ctpop.i32(i32 %3358) #16
  %3360 = trunc i32 %3359 to i8
  %3361 = and i8 %3360, 1
  %3362 = xor i8 %3361, 1
  store i8 %3362, i8* %3357, align 1, !tbaa !2451
  %3363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3363, align 1, !tbaa !2451
  %3364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3365 = icmp eq i32 %3350, 0
  %3366 = zext i1 %3365 to i8
  store i8 %3366, i8* %3364, align 1, !tbaa !2451
  %3367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3368 = lshr i32 %3350, 31
  %3369 = trunc i32 %3368 to i8
  store i8 %3369, i8* %3367, align 1, !tbaa !2451
  %3370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3371 = zext i1 %3353 to i8
  store i8 %3371, i8* %3370, align 1, !tbaa !2451
  %3372 = load i64, i64* %RBP
  %3373 = sub i64 %3372, 68
  %3374 = load i32, i32* %EAX
  %3375 = zext i32 %3374 to i64
  %3376 = load i64, i64* %PC
  %3377 = add i64 %3376, 3
  store i64 %3377, i64* %PC
  %3378 = inttoptr i64 %3373 to i32*
  store i32 %3374, i32* %3378
  br label %block_400e43

block_4010ae:                                     ; preds = %block_4010a0
  %3379 = sub i64 %5070, 2798
  %3380 = load i64, i64* %PC
  %3381 = add i64 %3380, 5
  %3382 = load i64, i64* %PC
  %3383 = add i64 %3382, 5
  store i64 %3383, i64* %PC
  %3384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3385 = load i64, i64* %3384, align 8, !tbaa !2428
  %3386 = add i64 %3385, -8
  %3387 = inttoptr i64 %3386 to i64*
  store i64 %3381, i64* %3387
  store i64 %3386, i64* %3384, align 8, !tbaa !2428
  %3388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3379, i64* %3388, align 8, !tbaa !2428
  %3389 = load i64, i64* %PC
  %3390 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %3389, %struct.Memory* %MEMORY.9)
  %3391 = load i64, i64* %RBP
  %3392 = sub i64 %3391, 40
  %3393 = bitcast %union.vec128_t* %XMM0 to i8*
  %3394 = load i64, i64* %PC
  %3395 = add i64 %3394, 5
  store i64 %3395, i64* %PC
  %3396 = bitcast i8* %3393 to <2 x float>*
  %3397 = load <2 x float>, <2 x float>* %3396, align 1
  %3398 = extractelement <2 x float> %3397, i32 0
  %3399 = inttoptr i64 %3392 to float*
  store float %3398, float* %3399
  %3400 = load i64, i64* %PC
  %3401 = add i64 %3400, 11
  store i64 %3401, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4010c3

block_400d39:                                     ; preds = %block_400cca, %block_400d24
  %MEMORY.5 = phi %struct.Memory* [ %6080, %block_400d24 ], [ %6080, %block_400cca ]
  %3402 = load i64, i64* %RDI
  %3403 = load i32, i32* %EDI
  %3404 = zext i32 %3403 to i64
  %3405 = load i64, i64* %PC
  %3406 = add i64 %3405, 2
  store i64 %3406, i64* %PC
  %3407 = xor i64 %3404, %3402
  %3408 = trunc i64 %3407 to i32
  %3409 = and i64 %3407, 4294967295
  store i64 %3409, i64* %RDI, align 8, !tbaa !2428
  %3410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3410, align 1, !tbaa !2432
  %3411 = and i32 %3408, 255
  %3412 = call i32 @llvm.ctpop.i32(i32 %3411) #16
  %3413 = trunc i32 %3412 to i8
  %3414 = and i8 %3413, 1
  %3415 = xor i8 %3414, 1
  %3416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3415, i8* %3416, align 1, !tbaa !2446
  %3417 = icmp eq i32 %3408, 0
  %3418 = zext i1 %3417 to i8
  %3419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3418, i8* %3419, align 1, !tbaa !2448
  %3420 = lshr i32 %3408, 31
  %3421 = trunc i32 %3420 to i8
  %3422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3421, i8* %3422, align 1, !tbaa !2449
  %3423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3423, align 1, !tbaa !2450
  %3424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3424, align 1, !tbaa !2447
  %3425 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3426 = load i64, i64* %RBP
  %3427 = sub i64 %3426, 16
  %3428 = load i64, i64* %PC
  %3429 = add i64 %3428, 5
  store i64 %3429, i64* %PC
  %3430 = inttoptr i64 %3427 to float*
  %3431 = load float, float* %3430
  %3432 = bitcast i8* %3425 to float*
  store float %3431, float* %3432, align 1, !tbaa !2453
  %3433 = getelementptr inbounds i8, i8* %3425, i64 4
  %3434 = bitcast i8* %3433 to float*
  store float 0.000000e+00, float* %3434, align 1, !tbaa !2453
  %3435 = getelementptr inbounds i8, i8* %3425, i64 8
  %3436 = bitcast i8* %3435 to float*
  store float 0.000000e+00, float* %3436, align 1, !tbaa !2453
  %3437 = getelementptr inbounds i8, i8* %3425, i64 12
  %3438 = bitcast i8* %3437 to float*
  store float 0.000000e+00, float* %3438, align 1, !tbaa !2453
  %3439 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3440 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3441 = load i64, i64* %RBP
  %3442 = sub i64 %3441, 8
  %3443 = load i64, i64* %PC
  %3444 = add i64 %3443, 5
  store i64 %3444, i64* %PC
  %3445 = bitcast i8* %3440 to <2 x float>*
  %3446 = load <2 x float>, <2 x float>* %3445, align 1
  %3447 = getelementptr inbounds i8, i8* %3440, i64 8
  %3448 = bitcast i8* %3447 to <2 x i32>*
  %3449 = load <2 x i32>, <2 x i32>* %3448, align 1
  %3450 = inttoptr i64 %3442 to float*
  %3451 = load float, float* %3450
  %3452 = extractelement <2 x float> %3446, i32 0
  %3453 = fdiv float %3452, %3451
  %3454 = bitcast i8* %3439 to float*
  store float %3453, float* %3454, align 1, !tbaa !2453
  %3455 = bitcast <2 x float> %3446 to <2 x i32>
  %3456 = extractelement <2 x i32> %3455, i32 1
  %3457 = getelementptr inbounds i8, i8* %3439, i64 4
  %3458 = bitcast i8* %3457 to i32*
  store i32 %3456, i32* %3458, align 1, !tbaa !2453
  %3459 = extractelement <2 x i32> %3449, i32 0
  %3460 = getelementptr inbounds i8, i8* %3439, i64 8
  %3461 = bitcast i8* %3460 to i32*
  store i32 %3459, i32* %3461, align 1, !tbaa !2453
  %3462 = extractelement <2 x i32> %3449, i32 1
  %3463 = getelementptr inbounds i8, i8* %3439, i64 12
  %3464 = bitcast i8* %3463 to i32*
  store i32 %3462, i32* %3464, align 1, !tbaa !2453
  %3465 = bitcast %union.vec128_t* %XMM0 to i8*
  %3466 = load i64, i64* %PC
  %3467 = add i64 %3466, 9
  store i64 %3467, i64* %PC
  %3468 = bitcast i8* %3465 to <2 x float>*
  %3469 = load <2 x float>, <2 x float>* %3468, align 1
  %3470 = extractelement <2 x float> %3469, i32 0
  store float %3470, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*)
  %3471 = load i64, i64* %PC
  %3472 = add i64 %3471, 7042
  %3473 = load i64, i64* %PC
  %3474 = add i64 %3473, 5
  %3475 = load i64, i64* %PC
  %3476 = add i64 %3475, 5
  store i64 %3476, i64* %PC
  %3477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3478 = load i64, i64* %3477, align 8, !tbaa !2428
  %3479 = add i64 %3478, -8
  %3480 = inttoptr i64 %3479 to i64*
  store i64 %3474, i64* %3480
  store i64 %3479, i64* %3477, align 8, !tbaa !2428
  %3481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3472, i64* %3481, align 8, !tbaa !2428
  %3482 = load i64, i64* %PC
  %3483 = call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* %0, i64 %3482, %struct.Memory* %MEMORY.5)
  %3484 = load i64, i64* %PC
  %3485 = add i64 %3484, 10
  store i64 %3485, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %3486 = load i64, i64* %PC
  %3487 = add i64 %3486, 8
  store i64 %3487, i64* %PC
  %3488 = load i64, i64* @stderr
  store i64 %3488, i64* %RDI, align 8, !tbaa !2428
  %3489 = load i64, i64* %PC
  %3490 = add i64 %3489, 2
  store i64 %3490, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %3491 = load i64, i64* %PC
  %3492 = sub i64 %3491, 2215
  %3493 = load i64, i64* %PC
  %3494 = add i64 %3493, 5
  %3495 = load i64, i64* %PC
  %3496 = add i64 %3495, 5
  store i64 %3496, i64* %PC
  %3497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3498 = load i64, i64* %3497, align 8, !tbaa !2428
  %3499 = add i64 %3498, -8
  %3500 = inttoptr i64 %3499 to i64*
  store i64 %3494, i64* %3500
  store i64 %3499, i64* %3497, align 8, !tbaa !2428
  %3501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3492, i64* %3501, align 8, !tbaa !2428
  %3502 = load i64, i64* %PC
  %3503 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %3502, %struct.Memory* %3483)
  %3504 = load i64, i64* %RBP
  %3505 = sub i64 %3504, 64
  %3506 = load i64, i64* %PC
  %3507 = add i64 %3506, 7
  store i64 %3507, i64* %PC
  %3508 = inttoptr i64 %3505 to i32*
  store i32 -3, i32* %3508
  %3509 = load i64, i64* %RBP
  %3510 = sub i64 %3509, 68
  %3511 = load i64, i64* %PC
  %3512 = add i64 %3511, 7
  store i64 %3512, i64* %PC
  %3513 = inttoptr i64 %3510 to i32*
  store i32 100, i32* %3513
  %3514 = load i64, i64* %RBP
  %3515 = sub i64 %3514, 936
  %3516 = load i32, i32* %EAX
  %3517 = zext i32 %3516 to i64
  %3518 = load i64, i64* %PC
  %3519 = add i64 %3518, 6
  store i64 %3519, i64* %PC
  %3520 = inttoptr i64 %3515 to i32*
  store i32 %3516, i32* %3520
  br label %block_400d80

block_400ab0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %3521 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3522 = load i64, i64* %RBP
  %3523 = sub i64 %3522, 24
  %3524 = load i64, i64* %PC
  %3525 = add i64 %3524, 5
  store i64 %3525, i64* %PC
  %3526 = inttoptr i64 %3523 to float*
  %3527 = load float, float* %3526
  %3528 = bitcast i8* %3521 to float*
  store float %3527, float* %3528, align 1, !tbaa !2453
  %3529 = getelementptr inbounds i8, i8* %3521, i64 4
  %3530 = bitcast i8* %3529 to float*
  store float 0.000000e+00, float* %3530, align 1, !tbaa !2453
  %3531 = getelementptr inbounds i8, i8* %3521, i64 8
  %3532 = bitcast i8* %3531 to float*
  store float 0.000000e+00, float* %3532, align 1, !tbaa !2453
  %3533 = getelementptr inbounds i8, i8* %3521, i64 12
  %3534 = bitcast i8* %3533 to float*
  store float 0.000000e+00, float* %3534, align 1, !tbaa !2453
  %3535 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3536 = bitcast %union.vec128_t* %XMM0 to i8*
  %3537 = load i64, i64* %PC
  %3538 = add i64 %3537, 4
  store i64 %3538, i64* %PC
  %3539 = bitcast i8* %3536 to <2 x float>*
  %3540 = load <2 x float>, <2 x float>* %3539, align 1
  %3541 = extractelement <2 x float> %3540, i32 0
  %3542 = fpext float %3541 to double
  %3543 = bitcast i8* %3535 to double*
  store double %3542, double* %3543, align 1, !tbaa !2455
  %3544 = load i64, i64* %RBP
  %3545 = sub i64 %3544, 904
  %3546 = bitcast %union.vec128_t* %XMM0 to i8*
  %3547 = load i64, i64* %PC
  %3548 = add i64 %3547, 8
  store i64 %3548, i64* %PC
  %3549 = bitcast i8* %3546 to double*
  %3550 = load double, double* %3549, align 1
  %3551 = inttoptr i64 %3545 to double*
  store double %3550, double* %3551
  %3552 = load i64, i64* %PC
  %3553 = add i64 %3552, 45
  %3554 = load i64, i64* %PC
  %3555 = add i64 %3554, 5
  store i64 %3555, i64* %PC
  %3556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3553, i64* %3556, align 8, !tbaa !2428
  br label %block_400aee

block_400fab:                                     ; preds = %block_400f66
  %3557 = load i64, i64* %PC
  %3558 = add i64 %3557, 7
  store i64 %3558, i64* %PC
  %3559 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3560 = zext i32 %3559 to i64
  store i64 %3560, i64* %RAX, align 8, !tbaa !2428
  %3561 = load i64, i64* %RAX
  %3562 = load i64, i64* %PC
  %3563 = add i64 %3562, 3
  store i64 %3563, i64* %PC
  %3564 = trunc i64 %3561 to i32
  %3565 = shl i32 %3564, 1
  %3566 = icmp slt i32 %3564, 0
  %3567 = icmp slt i32 %3565, 0
  %3568 = xor i1 %3566, %3567
  %3569 = zext i32 %3565 to i64
  store i64 %3569, i64* %RAX, align 8, !tbaa !2428
  %3570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3571 = zext i1 %3566 to i8
  store i8 %3571, i8* %3570, align 1, !tbaa !2451
  %3572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3573 = and i32 %3565, 254
  %3574 = call i32 @llvm.ctpop.i32(i32 %3573) #16
  %3575 = trunc i32 %3574 to i8
  %3576 = and i8 %3575, 1
  %3577 = xor i8 %3576, 1
  store i8 %3577, i8* %3572, align 1, !tbaa !2451
  %3578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3578, align 1, !tbaa !2451
  %3579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3580 = icmp eq i32 %3565, 0
  %3581 = zext i1 %3580 to i8
  store i8 %3581, i8* %3579, align 1, !tbaa !2451
  %3582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3583 = lshr i32 %3565, 31
  %3584 = trunc i32 %3583 to i8
  store i8 %3584, i8* %3582, align 1, !tbaa !2451
  %3585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3586 = zext i1 %3568 to i8
  store i8 %3586, i8* %3585, align 1, !tbaa !2451
  %3587 = load i32, i32* %EAX
  %3588 = zext i32 %3587 to i64
  %3589 = load i64, i64* %PC
  %3590 = add i64 %3589, 7
  store i64 %3590, i64* %PC
  store i32 %3587, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  br label %block_400fbc

block_4014fa:                                     ; preds = %block_40150e, %block_4014e5
  %MEMORY.6 = phi %struct.Memory* [ %1346, %block_4014e5 ], [ %6939, %block_40150e ]
  %3591 = load i64, i64* %PC
  %3592 = add i64 %3591, 7
  store i64 %3592, i64* %PC
  %3593 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %3594 = zext i32 %3593 to i64
  store i64 %3594, i64* %RAX, align 8, !tbaa !2428
  %3595 = load i32, i32* %EAX
  %3596 = zext i32 %3595 to i64
  %3597 = load i64, i64* %PC
  %3598 = add i64 %3597, 7
  store i64 %3598, i64* %PC
  %3599 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3600 = sub i32 %3595, %3599
  %3601 = icmp ult i32 %3595, %3599
  %3602 = zext i1 %3601 to i8
  %3603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3602, i8* %3603, align 1, !tbaa !2432
  %3604 = and i32 %3600, 255
  %3605 = call i32 @llvm.ctpop.i32(i32 %3604) #16
  %3606 = trunc i32 %3605 to i8
  %3607 = and i8 %3606, 1
  %3608 = xor i8 %3607, 1
  %3609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3608, i8* %3609, align 1, !tbaa !2446
  %3610 = xor i32 %3599, %3595
  %3611 = xor i32 %3610, %3600
  %3612 = lshr i32 %3611, 4
  %3613 = trunc i32 %3612 to i8
  %3614 = and i8 %3613, 1
  %3615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3614, i8* %3615, align 1, !tbaa !2447
  %3616 = icmp eq i32 %3600, 0
  %3617 = zext i1 %3616 to i8
  %3618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3617, i8* %3618, align 1, !tbaa !2448
  %3619 = lshr i32 %3600, 31
  %3620 = trunc i32 %3619 to i8
  %3621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3620, i8* %3621, align 1, !tbaa !2449
  %3622 = lshr i32 %3595, 31
  %3623 = lshr i32 %3599, 31
  %3624 = xor i32 %3623, %3622
  %3625 = xor i32 %3619, %3622
  %3626 = add nuw nsw i32 %3625, %3624
  %3627 = icmp eq i32 %3626, 2
  %3628 = zext i1 %3627 to i8
  %3629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3628, i8* %3629, align 1, !tbaa !2450
  %3630 = load i64, i64* %PC
  %3631 = add i64 %3630, 120
  %3632 = load i64, i64* %PC
  %3633 = add i64 %3632, 6
  %3634 = load i64, i64* %PC
  %3635 = add i64 %3634, 6
  store i64 %3635, i64* %PC
  %3636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3637 = load i8, i8* %3636, align 1, !tbaa !2449
  %3638 = icmp ne i8 %3637, 0
  %3639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3640 = load i8, i8* %3639, align 1, !tbaa !2450
  %3641 = icmp ne i8 %3640, 0
  %3642 = xor i1 %3638, %3641
  %3643 = xor i1 %3642, true
  %3644 = zext i1 %3643 to i8
  store i8 %3644, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3646 = select i1 %3642, i64 %3633, i64 %3631
  store i64 %3646, i64* %3645, align 8, !tbaa !2428
  %3647 = load i8, i8* %BRANCH_TAKEN
  %3648 = icmp eq i8 %3647, 1
  %3649 = load i64, i64* %PC
  br i1 %3648, label %block_401580, label %block_40150e

block_400d24:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %3650 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3651 = bitcast %union.vec128_t* %XMM0 to i8*
  %3652 = load i64, i64* %PC
  %3653 = add i64 %3652, 3
  store i64 %3653, i64* %PC
  %3654 = bitcast i8* %3650 to i64*
  %3655 = load i64, i64* %3654, align 1
  %3656 = getelementptr inbounds i8, i8* %3650, i64 8
  %3657 = bitcast i8* %3656 to i64*
  %3658 = load i64, i64* %3657, align 1
  %3659 = bitcast i8* %3651 to i64*
  %3660 = load i64, i64* %3659, align 1
  %3661 = getelementptr inbounds i8, i8* %3651, i64 8
  %3662 = bitcast i8* %3661 to i64*
  %3663 = load i64, i64* %3662, align 1
  %3664 = xor i64 %3660, %3655
  %3665 = xor i64 %3663, %3658
  %3666 = trunc i64 %3664 to i32
  %3667 = lshr i64 %3664, 32
  %3668 = trunc i64 %3667 to i32
  %3669 = bitcast i8* %6105 to i32*
  store i32 %3666, i32* %3669, align 1, !tbaa !2452
  %3670 = getelementptr inbounds i8, i8* %6105, i64 4
  %3671 = bitcast i8* %3670 to i32*
  store i32 %3668, i32* %3671, align 1, !tbaa !2452
  %3672 = trunc i64 %3665 to i32
  %3673 = getelementptr inbounds i8, i8* %6105, i64 8
  %3674 = bitcast i8* %3673 to i32*
  store i32 %3672, i32* %3674, align 1, !tbaa !2452
  %3675 = lshr i64 %3665, 32
  %3676 = trunc i64 %3675 to i32
  %3677 = getelementptr inbounds i8, i8* %6105, i64 12
  %3678 = bitcast i8* %3677 to i32*
  store i32 %3676, i32* %3678, align 1, !tbaa !2452
  %3679 = bitcast %union.vec128_t* %XMM0 to i8*
  %3680 = load i64, i64* %PC
  %3681 = add i64 %3680, 9
  store i64 %3681, i64* %PC
  %3682 = bitcast i8* %3679 to <2 x float>*
  %3683 = load <2 x float>, <2 x float>* %3682, align 1
  %3684 = extractelement <2 x float> %3683, i32 0
  store float %3684, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %3685 = bitcast %union.vec128_t* %XMM0 to i8*
  %3686 = load i64, i64* %PC
  %3687 = add i64 %3686, 9
  store i64 %3687, i64* %PC
  %3688 = bitcast i8* %3685 to <2 x float>*
  %3689 = load <2 x float>, <2 x float>* %3688, align 1
  %3690 = extractelement <2 x float> %3689, i32 0
  store float %3690, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*)
  br label %block_400d39

block_400ec2:                                     ; preds = %block_400e52, %block_400fbc
  %MEMORY.7 = phi %struct.Memory* [ %5005, %block_400e52 ], [ %MEMORY.3, %block_400fbc ]
  %3691 = load i64, i64* %PC
  %3692 = sub i64 %3691, 2306
  %3693 = load i64, i64* %PC
  %3694 = add i64 %3693, 5
  %3695 = load i64, i64* %PC
  %3696 = add i64 %3695, 5
  store i64 %3696, i64* %PC
  %3697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3698 = load i64, i64* %3697, align 8, !tbaa !2428
  %3699 = add i64 %3698, -8
  %3700 = inttoptr i64 %3699 to i64*
  store i64 %3694, i64* %3700
  store i64 %3699, i64* %3697, align 8, !tbaa !2428
  %3701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3692, i64* %3701, align 8, !tbaa !2428
  %3702 = load i64, i64* %PC
  %3703 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %3702, %struct.Memory* %MEMORY.7)
  %3704 = load i64, i64* %RBP
  %3705 = sub i64 %3704, 80
  %3706 = bitcast %union.vec128_t* %XMM0 to i8*
  %3707 = load i64, i64* %PC
  %3708 = add i64 %3707, 5
  store i64 %3708, i64* %PC
  %3709 = bitcast i8* %3706 to <2 x float>*
  %3710 = load <2 x float>, <2 x float>* %3709, align 1
  %3711 = extractelement <2 x float> %3710, i32 0
  %3712 = inttoptr i64 %3705 to float*
  store float %3711, float* %3712
  %3713 = load i64, i64* %RBP
  %3714 = sub i64 %3713, 64
  %3715 = load i64, i64* %PC
  %3716 = add i64 %3715, 3
  store i64 %3716, i64* %PC
  %3717 = inttoptr i64 %3714 to i32*
  %3718 = load i32, i32* %3717
  %3719 = zext i32 %3718 to i64
  store i64 %3719, i64* %RAX, align 8, !tbaa !2428
  %3720 = load i64, i64* %RAX
  %3721 = load i64, i64* %PC
  %3722 = add i64 %3721, 3
  store i64 %3722, i64* %PC
  %3723 = trunc i64 %3720 to i32
  %3724 = add i32 1, %3723
  %3725 = zext i32 %3724 to i64
  store i64 %3725, i64* %RAX, align 8, !tbaa !2428
  %3726 = icmp ult i32 %3724, %3723
  %3727 = icmp ult i32 %3724, 1
  %3728 = or i1 %3726, %3727
  %3729 = zext i1 %3728 to i8
  %3730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3729, i8* %3730, align 1, !tbaa !2432
  %3731 = and i32 %3724, 255
  %3732 = call i32 @llvm.ctpop.i32(i32 %3731) #16
  %3733 = trunc i32 %3732 to i8
  %3734 = and i8 %3733, 1
  %3735 = xor i8 %3734, 1
  %3736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3735, i8* %3736, align 1, !tbaa !2446
  %3737 = xor i64 1, %3720
  %3738 = trunc i64 %3737 to i32
  %3739 = xor i32 %3738, %3724
  %3740 = lshr i32 %3739, 4
  %3741 = trunc i32 %3740 to i8
  %3742 = and i8 %3741, 1
  %3743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3742, i8* %3743, align 1, !tbaa !2447
  %3744 = icmp eq i32 %3724, 0
  %3745 = zext i1 %3744 to i8
  %3746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3745, i8* %3746, align 1, !tbaa !2448
  %3747 = lshr i32 %3724, 31
  %3748 = trunc i32 %3747 to i8
  %3749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3748, i8* %3749, align 1, !tbaa !2449
  %3750 = lshr i32 %3723, 31
  %3751 = xor i32 %3747, %3750
  %3752 = add nuw nsw i32 %3751, %3747
  %3753 = icmp eq i32 %3752, 2
  %3754 = zext i1 %3753 to i8
  %3755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3754, i8* %3755, align 1, !tbaa !2450
  %3756 = load i64, i64* %RBP
  %3757 = sub i64 %3756, 64
  %3758 = load i32, i32* %EAX
  %3759 = zext i32 %3758 to i64
  %3760 = load i64, i64* %PC
  %3761 = add i64 %3760, 3
  store i64 %3761, i64* %PC
  %3762 = inttoptr i64 %3757 to i32*
  store i32 %3758, i32* %3762
  %3763 = load i64, i64* %PC
  %3764 = add i64 %3763, 11
  store i64 %3764, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_400ee0

block_401622:                                     ; preds = %block_4015c4
  %3765 = sub i64 %3230, 4194
  %3766 = load i64, i64* %PC
  %3767 = add i64 %3766, 5
  %3768 = load i64, i64* %PC
  %3769 = add i64 %3768, 5
  store i64 %3769, i64* %PC
  %3770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3771 = load i64, i64* %3770, align 8, !tbaa !2428
  %3772 = add i64 %3771, -8
  %3773 = inttoptr i64 %3772 to i64*
  store i64 %3767, i64* %3773
  store i64 %3772, i64* %3770, align 8, !tbaa !2428
  %3774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3765, i64* %3774, align 8, !tbaa !2428
  %3775 = load i64, i64* %PC
  %3776 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %3775, %struct.Memory* %MEMORY.2)
  %3777 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3778 = load i64, i64* %PC
  %3779 = add i64 %3778, 8
  store i64 %3779, i64* %PC
  %3780 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*)
  %3781 = bitcast i8* %3777 to double*
  store double %3780, double* %3781, align 1, !tbaa !2455
  %3782 = getelementptr inbounds i8, i8* %3777, i64 8
  %3783 = bitcast i8* %3782 to double*
  store double 0.000000e+00, double* %3783, align 1, !tbaa !2455
  %3784 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3785 = load i64, i64* %PC
  %3786 = add i64 %3785, 8
  store i64 %3786, i64* %PC
  %3787 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to double*)
  %3788 = bitcast i8* %3784 to double*
  store double %3787, double* %3788, align 1, !tbaa !2455
  %3789 = getelementptr inbounds i8, i8* %3784, i64 8
  %3790 = bitcast i8* %3789 to double*
  store double 0.000000e+00, double* %3790, align 1, !tbaa !2455
  %3791 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3792 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3793 = load i64, i64* %RBP
  %3794 = sub i64 %3793, 40
  %3795 = load i64, i64* %PC
  %3796 = add i64 %3795, 5
  store i64 %3796, i64* %PC
  %3797 = bitcast i8* %3792 to <2 x float>*
  %3798 = load <2 x float>, <2 x float>* %3797, align 1
  %3799 = getelementptr inbounds i8, i8* %3792, i64 8
  %3800 = bitcast i8* %3799 to <2 x i32>*
  %3801 = load <2 x i32>, <2 x i32>* %3800, align 1
  %3802 = inttoptr i64 %3794 to float*
  %3803 = load float, float* %3802
  %3804 = extractelement <2 x float> %3798, i32 0
  %3805 = fsub float %3804, %3803
  %3806 = bitcast i8* %3791 to float*
  store float %3805, float* %3806, align 1, !tbaa !2453
  %3807 = bitcast <2 x float> %3798 to <2 x i32>
  %3808 = extractelement <2 x i32> %3807, i32 1
  %3809 = getelementptr inbounds i8, i8* %3791, i64 4
  %3810 = bitcast i8* %3809 to i32*
  store i32 %3808, i32* %3810, align 1, !tbaa !2453
  %3811 = extractelement <2 x i32> %3801, i32 0
  %3812 = getelementptr inbounds i8, i8* %3791, i64 8
  %3813 = bitcast i8* %3812 to i32*
  store i32 %3811, i32* %3813, align 1, !tbaa !2453
  %3814 = extractelement <2 x i32> %3801, i32 1
  %3815 = getelementptr inbounds i8, i8* %3791, i64 12
  %3816 = bitcast i8* %3815 to i32*
  store i32 %3814, i32* %3816, align 1, !tbaa !2453
  %3817 = load i64, i64* %PC
  %3818 = add i64 %3817, 7
  store i64 %3818, i64* %PC
  %3819 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3820 = zext i32 %3819 to i64
  store i64 %3820, i64* %RAX, align 8, !tbaa !2428
  %3821 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3822 = load i32, i32* %EAX
  %3823 = zext i32 %3822 to i64
  %3824 = load i64, i64* %PC
  %3825 = add i64 %3824, 4
  store i64 %3825, i64* %PC
  %3826 = bitcast i8* %3821 to <2 x i32>*
  %3827 = load <2 x i32>, <2 x i32>* %3826, align 1
  %3828 = getelementptr inbounds i8, i8* %3821, i64 8
  %3829 = bitcast i8* %3828 to <2 x i32>*
  %3830 = load <2 x i32>, <2 x i32>* %3829, align 1
  %3831 = sitofp i32 %3822 to float
  %3832 = bitcast i8* %3821 to float*
  store float %3831, float* %3832, align 1, !tbaa !2453
  %3833 = extractelement <2 x i32> %3827, i32 1
  %3834 = getelementptr inbounds i8, i8* %3821, i64 4
  %3835 = bitcast i8* %3834 to i32*
  store i32 %3833, i32* %3835, align 1, !tbaa !2453
  %3836 = extractelement <2 x i32> %3830, i32 0
  %3837 = bitcast i8* %3828 to i32*
  store i32 %3836, i32* %3837, align 1, !tbaa !2453
  %3838 = extractelement <2 x i32> %3830, i32 1
  %3839 = getelementptr inbounds i8, i8* %3821, i64 12
  %3840 = bitcast i8* %3839 to i32*
  store i32 %3838, i32* %3840, align 1, !tbaa !2453
  %3841 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3842 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3843 = bitcast %union.vec128_t* %XMM3 to i8*
  %3844 = load i64, i64* %PC
  %3845 = add i64 %3844, 4
  store i64 %3845, i64* %PC
  %3846 = bitcast i8* %3842 to <2 x float>*
  %3847 = load <2 x float>, <2 x float>* %3846, align 1
  %3848 = getelementptr inbounds i8, i8* %3842, i64 8
  %3849 = bitcast i8* %3848 to <2 x i32>*
  %3850 = load <2 x i32>, <2 x i32>* %3849, align 1
  %3851 = bitcast i8* %3843 to <2 x float>*
  %3852 = load <2 x float>, <2 x float>* %3851, align 1
  %3853 = extractelement <2 x float> %3847, i32 0
  %3854 = extractelement <2 x float> %3852, i32 0
  %3855 = fdiv float %3853, %3854
  %3856 = bitcast i8* %3841 to float*
  store float %3855, float* %3856, align 1, !tbaa !2453
  %3857 = bitcast <2 x float> %3847 to <2 x i32>
  %3858 = extractelement <2 x i32> %3857, i32 1
  %3859 = getelementptr inbounds i8, i8* %3841, i64 4
  %3860 = bitcast i8* %3859 to i32*
  store i32 %3858, i32* %3860, align 1, !tbaa !2453
  %3861 = extractelement <2 x i32> %3850, i32 0
  %3862 = getelementptr inbounds i8, i8* %3841, i64 8
  %3863 = bitcast i8* %3862 to i32*
  store i32 %3861, i32* %3863, align 1, !tbaa !2453
  %3864 = extractelement <2 x i32> %3850, i32 1
  %3865 = getelementptr inbounds i8, i8* %3841, i64 12
  %3866 = bitcast i8* %3865 to i32*
  store i32 %3864, i32* %3866, align 1, !tbaa !2453
  %3867 = load i64, i64* %PC
  %3868 = add i64 %3867, 8
  store i64 %3868, i64* %PC
  %3869 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3870 = sext i32 %3869 to i64
  store i64 %3870, i64* %RCX, align 8, !tbaa !2428
  %3871 = load i64, i64* %RCX
  %3872 = mul i64 %3871, 4
  %3873 = add i64 %3872, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %3874 = bitcast %union.vec128_t* %XMM0 to i8*
  %3875 = load i64, i64* %PC
  %3876 = add i64 %3875, 9
  store i64 %3876, i64* %PC
  %3877 = bitcast i8* %3874 to <2 x float>*
  %3878 = load <2 x float>, <2 x float>* %3877, align 1
  %3879 = extractelement <2 x float> %3878, i32 0
  %3880 = inttoptr i64 %3873 to float*
  store float %3879, float* %3880
  %3881 = load i64, i64* %PC
  %3882 = add i64 %3881, 8
  store i64 %3882, i64* %PC
  %3883 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3884 = sext i32 %3883 to i64
  store i64 %3884, i64* %RCX, align 8, !tbaa !2428
  %3885 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3886 = load i64, i64* %RCX
  %3887 = mul i64 %3886, 4
  %3888 = add i64 %3887, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3889 = load i64, i64* %PC
  %3890 = add i64 %3889, 9
  store i64 %3890, i64* %PC
  %3891 = inttoptr i64 %3888 to float*
  %3892 = load float, float* %3891
  %3893 = bitcast i8* %3885 to float*
  store float %3892, float* %3893, align 1, !tbaa !2453
  %3894 = getelementptr inbounds i8, i8* %3885, i64 4
  %3895 = bitcast i8* %3894 to float*
  store float 0.000000e+00, float* %3895, align 1, !tbaa !2453
  %3896 = getelementptr inbounds i8, i8* %3885, i64 8
  %3897 = bitcast i8* %3896 to float*
  store float 0.000000e+00, float* %3897, align 1, !tbaa !2453
  %3898 = getelementptr inbounds i8, i8* %3885, i64 12
  %3899 = bitcast i8* %3898 to float*
  store float 0.000000e+00, float* %3899, align 1, !tbaa !2453
  %3900 = load i64, i64* %PC
  %3901 = add i64 %3900, 8
  store i64 %3901, i64* %PC
  %3902 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3903 = sext i32 %3902 to i64
  store i64 %3903, i64* %RCX, align 8, !tbaa !2428
  %3904 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3905 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3906 = load i64, i64* %RCX
  %3907 = mul i64 %3906, 4
  %3908 = add i64 %3907, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %3909 = load i64, i64* %PC
  %3910 = add i64 %3909, 9
  store i64 %3910, i64* %PC
  %3911 = bitcast i8* %3905 to <2 x float>*
  %3912 = load <2 x float>, <2 x float>* %3911, align 1
  %3913 = getelementptr inbounds i8, i8* %3905, i64 8
  %3914 = bitcast i8* %3913 to <2 x i32>*
  %3915 = load <2 x i32>, <2 x i32>* %3914, align 1
  %3916 = inttoptr i64 %3908 to float*
  %3917 = load float, float* %3916
  %3918 = extractelement <2 x float> %3912, i32 0
  %3919 = fadd float %3918, %3917
  %3920 = bitcast i8* %3904 to float*
  store float %3919, float* %3920, align 1, !tbaa !2453
  %3921 = bitcast <2 x float> %3912 to <2 x i32>
  %3922 = extractelement <2 x i32> %3921, i32 1
  %3923 = getelementptr inbounds i8, i8* %3904, i64 4
  %3924 = bitcast i8* %3923 to i32*
  store i32 %3922, i32* %3924, align 1, !tbaa !2453
  %3925 = extractelement <2 x i32> %3915, i32 0
  %3926 = getelementptr inbounds i8, i8* %3904, i64 8
  %3927 = bitcast i8* %3926 to i32*
  store i32 %3925, i32* %3927, align 1, !tbaa !2453
  %3928 = extractelement <2 x i32> %3915, i32 1
  %3929 = getelementptr inbounds i8, i8* %3904, i64 12
  %3930 = bitcast i8* %3929 to i32*
  store i32 %3928, i32* %3930, align 1, !tbaa !2453
  %3931 = load i64, i64* %RBP
  %3932 = sub i64 %3931, 16
  %3933 = bitcast %union.vec128_t* %XMM0 to i8*
  %3934 = load i64, i64* %PC
  %3935 = add i64 %3934, 5
  store i64 %3935, i64* %PC
  %3936 = bitcast i8* %3933 to <2 x float>*
  %3937 = load <2 x float>, <2 x float>* %3936, align 1
  %3938 = extractelement <2 x float> %3937, i32 0
  %3939 = inttoptr i64 %3932 to float*
  store float %3938, float* %3939
  %3940 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3941 = load i64, i64* %RBP
  %3942 = sub i64 %3941, 16
  %3943 = load i64, i64* %PC
  %3944 = add i64 %3943, 5
  store i64 %3944, i64* %PC
  %3945 = inttoptr i64 %3942 to float*
  %3946 = load float, float* %3945
  %3947 = bitcast i8* %3940 to float*
  store float %3946, float* %3947, align 1, !tbaa !2453
  %3948 = getelementptr inbounds i8, i8* %3940, i64 4
  %3949 = bitcast i8* %3948 to float*
  store float 0.000000e+00, float* %3949, align 1, !tbaa !2453
  %3950 = getelementptr inbounds i8, i8* %3940, i64 8
  %3951 = bitcast i8* %3950 to float*
  store float 0.000000e+00, float* %3951, align 1, !tbaa !2453
  %3952 = getelementptr inbounds i8, i8* %3940, i64 12
  %3953 = bitcast i8* %3952 to float*
  store float 0.000000e+00, float* %3953, align 1, !tbaa !2453
  %3954 = load i64, i64* %PC
  %3955 = add i64 %3954, 8
  store i64 %3955, i64* %PC
  %3956 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3957 = sext i32 %3956 to i64
  store i64 %3957, i64* %RCX, align 8, !tbaa !2428
  %3958 = load i64, i64* %RCX
  %3959 = mul i64 %3958, 4
  %3960 = add i64 %3959, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %3961 = bitcast %union.vec128_t* %XMM0 to i8*
  %3962 = load i64, i64* %PC
  %3963 = add i64 %3962, 9
  store i64 %3963, i64* %PC
  %3964 = bitcast i8* %3961 to <2 x float>*
  %3965 = load <2 x float>, <2 x float>* %3964, align 1
  %3966 = extractelement <2 x float> %3965, i32 0
  %3967 = inttoptr i64 %3960 to float*
  store float %3966, float* %3967
  %3968 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3969 = load i64, i64* %RBP
  %3970 = sub i64 %3969, 12
  %3971 = load i64, i64* %PC
  %3972 = add i64 %3971, 5
  store i64 %3972, i64* %PC
  %3973 = inttoptr i64 %3970 to float*
  %3974 = load float, float* %3973
  %3975 = bitcast i8* %3968 to float*
  store float %3974, float* %3975, align 1, !tbaa !2453
  %3976 = getelementptr inbounds i8, i8* %3968, i64 4
  %3977 = bitcast i8* %3976 to float*
  store float 0.000000e+00, float* %3977, align 1, !tbaa !2453
  %3978 = getelementptr inbounds i8, i8* %3968, i64 8
  %3979 = bitcast i8* %3978 to float*
  store float 0.000000e+00, float* %3979, align 1, !tbaa !2453
  %3980 = getelementptr inbounds i8, i8* %3968, i64 12
  %3981 = bitcast i8* %3980 to float*
  store float 0.000000e+00, float* %3981, align 1, !tbaa !2453
  %3982 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3983 = bitcast %union.vec128_t* %XMM0 to i8*
  %3984 = load i64, i64* %PC
  %3985 = add i64 %3984, 4
  store i64 %3985, i64* %PC
  %3986 = bitcast i8* %3983 to <2 x float>*
  %3987 = load <2 x float>, <2 x float>* %3986, align 1
  %3988 = extractelement <2 x float> %3987, i32 0
  %3989 = fpext float %3988 to double
  %3990 = bitcast i8* %3982 to double*
  store double %3989, double* %3990, align 1, !tbaa !2455
  %3991 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3992 = load i64, i64* %RBP
  %3993 = sub i64 %3992, 16
  %3994 = load i64, i64* %PC
  %3995 = add i64 %3994, 5
  store i64 %3995, i64* %PC
  %3996 = inttoptr i64 %3993 to float*
  %3997 = load float, float* %3996
  %3998 = bitcast i8* %3991 to float*
  store float %3997, float* %3998, align 1, !tbaa !2453
  %3999 = getelementptr inbounds i8, i8* %3991, i64 4
  %4000 = bitcast i8* %3999 to float*
  store float 0.000000e+00, float* %4000, align 1, !tbaa !2453
  %4001 = getelementptr inbounds i8, i8* %3991, i64 8
  %4002 = bitcast i8* %4001 to float*
  store float 0.000000e+00, float* %4002, align 1, !tbaa !2453
  %4003 = getelementptr inbounds i8, i8* %3991, i64 12
  %4004 = bitcast i8* %4003 to float*
  store float 0.000000e+00, float* %4004, align 1, !tbaa !2453
  %4005 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4006 = bitcast %union.vec128_t* %XMM3 to i8*
  %4007 = load i64, i64* %PC
  %4008 = add i64 %4007, 4
  store i64 %4008, i64* %PC
  %4009 = bitcast i8* %4006 to <2 x float>*
  %4010 = load <2 x float>, <2 x float>* %4009, align 1
  %4011 = extractelement <2 x float> %4010, i32 0
  %4012 = fpext float %4011 to double
  %4013 = bitcast i8* %4005 to double*
  store double %4012, double* %4013, align 1, !tbaa !2455
  %4014 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4015 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4016 = bitcast %union.vec128_t* %XMM3 to i8*
  %4017 = load i64, i64* %PC
  %4018 = add i64 %4017, 4
  store i64 %4018, i64* %PC
  %4019 = bitcast i8* %4015 to double*
  %4020 = load double, double* %4019, align 1
  %4021 = getelementptr inbounds i8, i8* %4015, i64 8
  %4022 = bitcast i8* %4021 to i64*
  %4023 = load i64, i64* %4022, align 1
  %4024 = bitcast i8* %4016 to double*
  %4025 = load double, double* %4024, align 1
  %4026 = fmul double %4020, %4025
  %4027 = bitcast i8* %4014 to double*
  store double %4026, double* %4027, align 1, !tbaa !2455
  %4028 = getelementptr inbounds i8, i8* %4014, i64 8
  %4029 = bitcast i8* %4028 to i64*
  store i64 %4023, i64* %4029, align 1, !tbaa !2455
  %4030 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4032 = bitcast %union.vec128_t* %XMM2 to i8*
  %4033 = load i64, i64* %PC
  %4034 = add i64 %4033, 4
  store i64 %4034, i64* %PC
  %4035 = bitcast i8* %4031 to double*
  %4036 = load double, double* %4035, align 1
  %4037 = getelementptr inbounds i8, i8* %4031, i64 8
  %4038 = bitcast i8* %4037 to i64*
  %4039 = load i64, i64* %4038, align 1
  %4040 = bitcast i8* %4032 to double*
  %4041 = load double, double* %4040, align 1
  %4042 = fdiv double %4036, %4041
  %4043 = bitcast i8* %4030 to double*
  store double %4042, double* %4043, align 1, !tbaa !2455
  %4044 = getelementptr inbounds i8, i8* %4030, i64 8
  %4045 = bitcast i8* %4044 to i64*
  store i64 %4039, i64* %4045, align 1, !tbaa !2455
  %4046 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4047 = bitcast %union.vec128_t* %XMM0 to i8*
  %4048 = load i64, i64* %PC
  %4049 = add i64 %4048, 4
  store i64 %4049, i64* %PC
  %4050 = bitcast i8* %4046 to <2 x i32>*
  %4051 = load <2 x i32>, <2 x i32>* %4050, align 1
  %4052 = getelementptr inbounds i8, i8* %4046, i64 8
  %4053 = bitcast i8* %4052 to <2 x i32>*
  %4054 = load <2 x i32>, <2 x i32>* %4053, align 1
  %4055 = bitcast i8* %4047 to double*
  %4056 = load double, double* %4055, align 1
  %4057 = fptrunc double %4056 to float
  %4058 = bitcast i8* %4046 to float*
  store float %4057, float* %4058, align 1, !tbaa !2453
  %4059 = extractelement <2 x i32> %4051, i32 1
  %4060 = getelementptr inbounds i8, i8* %4046, i64 4
  %4061 = bitcast i8* %4060 to i32*
  store i32 %4059, i32* %4061, align 1, !tbaa !2453
  %4062 = extractelement <2 x i32> %4054, i32 0
  %4063 = bitcast i8* %4052 to i32*
  store i32 %4062, i32* %4063, align 1, !tbaa !2453
  %4064 = extractelement <2 x i32> %4054, i32 1
  %4065 = getelementptr inbounds i8, i8* %4046, i64 12
  %4066 = bitcast i8* %4065 to i32*
  store i32 %4064, i32* %4066, align 1, !tbaa !2453
  %4067 = load i64, i64* %PC
  %4068 = add i64 %4067, 8
  store i64 %4068, i64* %PC
  %4069 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4070 = sext i32 %4069 to i64
  store i64 %4070, i64* %RCX, align 8, !tbaa !2428
  %4071 = load i64, i64* %RCX
  %4072 = mul i64 %4071, 4
  %4073 = add i64 %4072, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %4074 = bitcast %union.vec128_t* %XMM0 to i8*
  %4075 = load i64, i64* %PC
  %4076 = add i64 %4075, 9
  store i64 %4076, i64* %PC
  %4077 = bitcast i8* %4074 to <2 x float>*
  %4078 = load <2 x float>, <2 x float>* %4077, align 1
  %4079 = extractelement <2 x float> %4078, i32 0
  %4080 = inttoptr i64 %4073 to float*
  store float %4079, float* %4080
  %4081 = load i64, i64* %PC
  %4082 = add i64 %4081, 8
  store i64 %4082, i64* %PC
  %4083 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4084 = sext i32 %4083 to i64
  store i64 %4084, i64* %RCX, align 8, !tbaa !2428
  %4085 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4086 = load i64, i64* %RCX
  %4087 = mul i64 %4086, 4
  %4088 = add i64 %4087, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %4089 = load i64, i64* %PC
  %4090 = add i64 %4089, 9
  store i64 %4090, i64* %PC
  %4091 = inttoptr i64 %4088 to float*
  %4092 = load float, float* %4091
  %4093 = bitcast i8* %4085 to float*
  store float %4092, float* %4093, align 1, !tbaa !2453
  %4094 = getelementptr inbounds i8, i8* %4085, i64 4
  %4095 = bitcast i8* %4094 to float*
  store float 0.000000e+00, float* %4095, align 1, !tbaa !2453
  %4096 = getelementptr inbounds i8, i8* %4085, i64 8
  %4097 = bitcast i8* %4096 to float*
  store float 0.000000e+00, float* %4097, align 1, !tbaa !2453
  %4098 = getelementptr inbounds i8, i8* %4085, i64 12
  %4099 = bitcast i8* %4098 to float*
  store float 0.000000e+00, float* %4099, align 1, !tbaa !2453
  %4100 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4101 = bitcast %union.vec128_t* %XMM0 to i8*
  %4102 = load i64, i64* %PC
  %4103 = add i64 %4102, 4
  store i64 %4103, i64* %PC
  %4104 = bitcast i8* %4101 to <2 x float>*
  %4105 = load <2 x float>, <2 x float>* %4104, align 1
  %4106 = extractelement <2 x float> %4105, i32 0
  %4107 = fpext float %4106 to double
  %4108 = bitcast i8* %4100 to double*
  store double %4107, double* %4108, align 1, !tbaa !2455
  %4109 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4110 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4111 = bitcast %union.vec128_t* %XMM0 to i8*
  %4112 = load i64, i64* %PC
  %4113 = add i64 %4112, 4
  store i64 %4113, i64* %PC
  %4114 = bitcast i8* %4110 to double*
  %4115 = load double, double* %4114, align 1
  %4116 = getelementptr inbounds i8, i8* %4110, i64 8
  %4117 = bitcast i8* %4116 to i64*
  %4118 = load i64, i64* %4117, align 1
  %4119 = bitcast i8* %4111 to double*
  %4120 = load double, double* %4119, align 1
  %4121 = fdiv double %4115, %4120
  %4122 = bitcast i8* %4109 to double*
  store double %4121, double* %4122, align 1, !tbaa !2455
  %4123 = getelementptr inbounds i8, i8* %4109, i64 8
  %4124 = bitcast i8* %4123 to i64*
  store i64 %4118, i64* %4124, align 1, !tbaa !2455
  %4125 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4126 = bitcast %union.vec128_t* %XMM1 to i8*
  %4127 = load i64, i64* %PC
  %4128 = add i64 %4127, 4
  store i64 %4128, i64* %PC
  %4129 = bitcast i8* %4125 to <2 x i32>*
  %4130 = load <2 x i32>, <2 x i32>* %4129, align 1
  %4131 = getelementptr inbounds i8, i8* %4125, i64 8
  %4132 = bitcast i8* %4131 to <2 x i32>*
  %4133 = load <2 x i32>, <2 x i32>* %4132, align 1
  %4134 = bitcast i8* %4126 to double*
  %4135 = load double, double* %4134, align 1
  %4136 = fptrunc double %4135 to float
  %4137 = bitcast i8* %4125 to float*
  store float %4136, float* %4137, align 1, !tbaa !2453
  %4138 = extractelement <2 x i32> %4130, i32 1
  %4139 = getelementptr inbounds i8, i8* %4125, i64 4
  %4140 = bitcast i8* %4139 to i32*
  store i32 %4138, i32* %4140, align 1, !tbaa !2453
  %4141 = extractelement <2 x i32> %4133, i32 0
  %4142 = bitcast i8* %4131 to i32*
  store i32 %4141, i32* %4142, align 1, !tbaa !2453
  %4143 = extractelement <2 x i32> %4133, i32 1
  %4144 = getelementptr inbounds i8, i8* %4125, i64 12
  %4145 = bitcast i8* %4144 to i32*
  store i32 %4143, i32* %4145, align 1, !tbaa !2453
  %4146 = load i64, i64* %PC
  %4147 = add i64 %4146, 8
  store i64 %4147, i64* %PC
  %4148 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4149 = sext i32 %4148 to i64
  store i64 %4149, i64* %RCX, align 8, !tbaa !2428
  %4150 = load i64, i64* %RCX
  %4151 = mul i64 %4150, 4
  %4152 = add i64 %4151, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %4153 = bitcast %union.vec128_t* %XMM0 to i8*
  %4154 = load i64, i64* %PC
  %4155 = add i64 %4154, 9
  store i64 %4155, i64* %PC
  %4156 = bitcast i8* %4153 to <2 x float>*
  %4157 = load <2 x float>, <2 x float>* %4156, align 1
  %4158 = extractelement <2 x float> %4157, i32 0
  %4159 = inttoptr i64 %4152 to float*
  store float %4158, float* %4159
  %4160 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4161 = load i64, i64* %RBP
  %4162 = sub i64 %4161, 16
  %4163 = load i64, i64* %PC
  %4164 = add i64 %4163, 5
  store i64 %4164, i64* %PC
  %4165 = inttoptr i64 %4162 to float*
  %4166 = load float, float* %4165
  %4167 = bitcast i8* %4160 to float*
  store float %4166, float* %4167, align 1, !tbaa !2453
  %4168 = getelementptr inbounds i8, i8* %4160, i64 4
  %4169 = bitcast i8* %4168 to float*
  store float 0.000000e+00, float* %4169, align 1, !tbaa !2453
  %4170 = getelementptr inbounds i8, i8* %4160, i64 8
  %4171 = bitcast i8* %4170 to float*
  store float 0.000000e+00, float* %4171, align 1, !tbaa !2453
  %4172 = getelementptr inbounds i8, i8* %4160, i64 12
  %4173 = bitcast i8* %4172 to float*
  store float 0.000000e+00, float* %4173, align 1, !tbaa !2453
  %4174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4176 = load i64, i64* %RBP
  %4177 = sub i64 %4176, 8
  %4178 = load i64, i64* %PC
  %4179 = add i64 %4178, 5
  store i64 %4179, i64* %PC
  %4180 = bitcast i8* %4175 to <2 x float>*
  %4181 = load <2 x float>, <2 x float>* %4180, align 1
  %4182 = getelementptr inbounds i8, i8* %4175, i64 8
  %4183 = bitcast i8* %4182 to <2 x i32>*
  %4184 = load <2 x i32>, <2 x i32>* %4183, align 1
  %4185 = inttoptr i64 %4177 to float*
  %4186 = load float, float* %4185
  %4187 = extractelement <2 x float> %4181, i32 0
  %4188 = fdiv float %4187, %4186
  %4189 = bitcast i8* %4174 to float*
  store float %4188, float* %4189, align 1, !tbaa !2453
  %4190 = bitcast <2 x float> %4181 to <2 x i32>
  %4191 = extractelement <2 x i32> %4190, i32 1
  %4192 = getelementptr inbounds i8, i8* %4174, i64 4
  %4193 = bitcast i8* %4192 to i32*
  store i32 %4191, i32* %4193, align 1, !tbaa !2453
  %4194 = extractelement <2 x i32> %4184, i32 0
  %4195 = getelementptr inbounds i8, i8* %4174, i64 8
  %4196 = bitcast i8* %4195 to i32*
  store i32 %4194, i32* %4196, align 1, !tbaa !2453
  %4197 = extractelement <2 x i32> %4184, i32 1
  %4198 = getelementptr inbounds i8, i8* %4174, i64 12
  %4199 = bitcast i8* %4198 to i32*
  store i32 %4197, i32* %4199, align 1, !tbaa !2453
  %4200 = load i64, i64* %PC
  %4201 = add i64 %4200, 8
  store i64 %4201, i64* %PC
  %4202 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4203 = sext i32 %4202 to i64
  store i64 %4203, i64* %RCX, align 8, !tbaa !2428
  %4204 = load i64, i64* %RCX
  %4205 = mul i64 %4204, 4
  %4206 = add i64 %4205, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %4207 = bitcast %union.vec128_t* %XMM0 to i8*
  %4208 = load i64, i64* %PC
  %4209 = add i64 %4208, 9
  store i64 %4209, i64* %PC
  %4210 = bitcast i8* %4207 to <2 x float>*
  %4211 = load <2 x float>, <2 x float>* %4210, align 1
  %4212 = extractelement <2 x float> %4211, i32 0
  %4213 = inttoptr i64 %4206 to float*
  store float %4212, float* %4213
  %4214 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4215 = load i64, i64* %PC
  %4216 = add i64 %4215, 9
  store i64 %4216, i64* %PC
  %4217 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %4218 = bitcast i8* %4214 to float*
  store float %4217, float* %4218, align 1, !tbaa !2453
  %4219 = getelementptr inbounds i8, i8* %4214, i64 4
  %4220 = bitcast i8* %4219 to float*
  store float 0.000000e+00, float* %4220, align 1, !tbaa !2453
  %4221 = getelementptr inbounds i8, i8* %4214, i64 8
  %4222 = bitcast i8* %4221 to float*
  store float 0.000000e+00, float* %4222, align 1, !tbaa !2453
  %4223 = getelementptr inbounds i8, i8* %4214, i64 12
  %4224 = bitcast i8* %4223 to float*
  store float 0.000000e+00, float* %4224, align 1, !tbaa !2453
  %4225 = load i64, i64* %PC
  %4226 = add i64 %4225, 8
  store i64 %4226, i64* %PC
  %4227 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4228 = sext i32 %4227 to i64
  store i64 %4228, i64* %RCX, align 8, !tbaa !2428
  %4229 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4230 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4231 = load i64, i64* %RCX
  %4232 = mul i64 %4231, 4
  %4233 = add i64 %4232, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %4234 = load i64, i64* %PC
  %4235 = add i64 %4234, 9
  store i64 %4235, i64* %PC
  %4236 = bitcast i8* %4230 to <2 x float>*
  %4237 = load <2 x float>, <2 x float>* %4236, align 1
  %4238 = getelementptr inbounds i8, i8* %4230, i64 8
  %4239 = bitcast i8* %4238 to <2 x i32>*
  %4240 = load <2 x i32>, <2 x i32>* %4239, align 1
  %4241 = inttoptr i64 %4233 to float*
  %4242 = load float, float* %4241
  %4243 = extractelement <2 x float> %4237, i32 0
  %4244 = fadd float %4243, %4242
  %4245 = bitcast i8* %4229 to float*
  store float %4244, float* %4245, align 1, !tbaa !2453
  %4246 = bitcast <2 x float> %4237 to <2 x i32>
  %4247 = extractelement <2 x i32> %4246, i32 1
  %4248 = getelementptr inbounds i8, i8* %4229, i64 4
  %4249 = bitcast i8* %4248 to i32*
  store i32 %4247, i32* %4249, align 1, !tbaa !2453
  %4250 = extractelement <2 x i32> %4240, i32 0
  %4251 = getelementptr inbounds i8, i8* %4229, i64 8
  %4252 = bitcast i8* %4251 to i32*
  store i32 %4250, i32* %4252, align 1, !tbaa !2453
  %4253 = extractelement <2 x i32> %4240, i32 1
  %4254 = getelementptr inbounds i8, i8* %4229, i64 12
  %4255 = bitcast i8* %4254 to i32*
  store i32 %4253, i32* %4255, align 1, !tbaa !2453
  %4256 = bitcast %union.vec128_t* %XMM0 to i8*
  %4257 = load i64, i64* %PC
  %4258 = add i64 %4257, 9
  store i64 %4258, i64* %PC
  %4259 = bitcast i8* %4256 to <2 x float>*
  %4260 = load <2 x float>, <2 x float>* %4259, align 1
  %4261 = extractelement <2 x float> %4260, i32 0
  store float %4261, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %4262 = load i64, i64* %PC
  %4263 = add i64 %4262, 7
  store i64 %4263, i64* %PC
  %4264 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4265 = zext i32 %4264 to i64
  store i64 %4265, i64* %RDI, align 8, !tbaa !2428
  %4266 = load i64, i64* %PC
  %4267 = add i64 %4266, 4501
  %4268 = load i64, i64* %PC
  %4269 = add i64 %4268, 5
  %4270 = load i64, i64* %PC
  %4271 = add i64 %4270, 5
  store i64 %4271, i64* %PC
  %4272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4273 = load i64, i64* %4272, align 8, !tbaa !2428
  %4274 = add i64 %4273, -8
  %4275 = inttoptr i64 %4274 to i64*
  store i64 %4269, i64* %4275
  store i64 %4274, i64* %4272, align 8, !tbaa !2428
  %4276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4267, i64* %4276, align 8, !tbaa !2428
  %4277 = load i64, i64* %PC
  %4278 = call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* %0, i64 %4277, %struct.Memory* %3776)
  %4279 = load i64, i64* %PC
  %4280 = add i64 %4279, 7
  store i64 %4280, i64* %PC
  %4281 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4282 = zext i32 %4281 to i64
  store i64 %4282, i64* %RAX, align 8, !tbaa !2428
  %4283 = load i64, i64* %RAX
  %4284 = load i64, i64* %PC
  %4285 = add i64 %4284, 3
  store i64 %4285, i64* %PC
  %4286 = trunc i64 %4283 to i32
  %4287 = add i32 1, %4286
  %4288 = zext i32 %4287 to i64
  store i64 %4288, i64* %RAX, align 8, !tbaa !2428
  %4289 = icmp ult i32 %4287, %4286
  %4290 = icmp ult i32 %4287, 1
  %4291 = or i1 %4289, %4290
  %4292 = zext i1 %4291 to i8
  %4293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4292, i8* %4293, align 1, !tbaa !2432
  %4294 = and i32 %4287, 255
  %4295 = call i32 @llvm.ctpop.i32(i32 %4294) #16
  %4296 = trunc i32 %4295 to i8
  %4297 = and i8 %4296, 1
  %4298 = xor i8 %4297, 1
  %4299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4298, i8* %4299, align 1, !tbaa !2446
  %4300 = xor i64 1, %4283
  %4301 = trunc i64 %4300 to i32
  %4302 = xor i32 %4301, %4287
  %4303 = lshr i32 %4302, 4
  %4304 = trunc i32 %4303 to i8
  %4305 = and i8 %4304, 1
  %4306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4305, i8* %4306, align 1, !tbaa !2447
  %4307 = icmp eq i32 %4287, 0
  %4308 = zext i1 %4307 to i8
  %4309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4308, i8* %4309, align 1, !tbaa !2448
  %4310 = lshr i32 %4287, 31
  %4311 = trunc i32 %4310 to i8
  %4312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4311, i8* %4312, align 1, !tbaa !2449
  %4313 = lshr i32 %4286, 31
  %4314 = xor i32 %4310, %4313
  %4315 = add nuw nsw i32 %4314, %4310
  %4316 = icmp eq i32 %4315, 2
  %4317 = zext i1 %4316 to i8
  %4318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4317, i8* %4318, align 1, !tbaa !2450
  %4319 = load i32, i32* %EAX
  %4320 = zext i32 %4319 to i64
  %4321 = load i64, i64* %PC
  %4322 = add i64 %4321, 7
  store i64 %4322, i64* %PC
  store i32 %4319, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4323 = load i64, i64* %PC
  %4324 = sub i64 %4323, 634
  %4325 = load i64, i64* %PC
  %4326 = add i64 %4325, 5
  store i64 %4326, i64* %PC
  %4327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4324, i64* %4327, align 8, !tbaa !2428
  br label %block_4014d7

block_400cca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %4328 = load i64, i64* %PC
  %4329 = add i64 %4328, 8
  store i64 %4329, i64* %PC
  %4330 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*)
  %4331 = bitcast i8* %6105 to double*
  store double %4330, double* %4331, align 1, !tbaa !2455
  %4332 = getelementptr inbounds i8, i8* %6105, i64 8
  %4333 = bitcast i8* %4332 to double*
  store double 0.000000e+00, double* %4333, align 1, !tbaa !2455
  %4334 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4335 = load i64, i64* %PC
  %4336 = add i64 %4335, 8
  store i64 %4336, i64* %PC
  %4337 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to double*)
  %4338 = bitcast i8* %4334 to double*
  store double %4337, double* %4338, align 1, !tbaa !2455
  %4339 = getelementptr inbounds i8, i8* %4334, i64 8
  %4340 = bitcast i8* %4339 to double*
  store double 0.000000e+00, double* %4340, align 1, !tbaa !2455
  %4341 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4342 = load i64, i64* %RBP
  %4343 = sub i64 %4342, 12
  %4344 = load i64, i64* %PC
  %4345 = add i64 %4344, 5
  store i64 %4345, i64* %PC
  %4346 = inttoptr i64 %4343 to float*
  %4347 = load float, float* %4346
  %4348 = bitcast i8* %4341 to float*
  store float %4347, float* %4348, align 1, !tbaa !2453
  %4349 = getelementptr inbounds i8, i8* %4341, i64 4
  %4350 = bitcast i8* %4349 to float*
  store float 0.000000e+00, float* %4350, align 1, !tbaa !2453
  %4351 = getelementptr inbounds i8, i8* %4341, i64 8
  %4352 = bitcast i8* %4351 to float*
  store float 0.000000e+00, float* %4352, align 1, !tbaa !2453
  %4353 = getelementptr inbounds i8, i8* %4341, i64 12
  %4354 = bitcast i8* %4353 to float*
  store float 0.000000e+00, float* %4354, align 1, !tbaa !2453
  %4355 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4356 = bitcast %union.vec128_t* %XMM2 to i8*
  %4357 = load i64, i64* %PC
  %4358 = add i64 %4357, 4
  store i64 %4358, i64* %PC
  %4359 = bitcast i8* %4356 to <2 x float>*
  %4360 = load <2 x float>, <2 x float>* %4359, align 1
  %4361 = extractelement <2 x float> %4360, i32 0
  %4362 = fpext float %4361 to double
  %4363 = bitcast i8* %4355 to double*
  store double %4362, double* %4363, align 1, !tbaa !2455
  %4364 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4365 = load i64, i64* %RBP
  %4366 = sub i64 %4365, 16
  %4367 = load i64, i64* %PC
  %4368 = add i64 %4367, 5
  store i64 %4368, i64* %PC
  %4369 = inttoptr i64 %4366 to float*
  %4370 = load float, float* %4369
  %4371 = bitcast i8* %4364 to float*
  store float %4370, float* %4371, align 1, !tbaa !2453
  %4372 = getelementptr inbounds i8, i8* %4364, i64 4
  %4373 = bitcast i8* %4372 to float*
  store float 0.000000e+00, float* %4373, align 1, !tbaa !2453
  %4374 = getelementptr inbounds i8, i8* %4364, i64 8
  %4375 = bitcast i8* %4374 to float*
  store float 0.000000e+00, float* %4375, align 1, !tbaa !2453
  %4376 = getelementptr inbounds i8, i8* %4364, i64 12
  %4377 = bitcast i8* %4376 to float*
  store float 0.000000e+00, float* %4377, align 1, !tbaa !2453
  %4378 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4379 = bitcast %union.vec128_t* %XMM3 to i8*
  %4380 = load i64, i64* %PC
  %4381 = add i64 %4380, 4
  store i64 %4381, i64* %PC
  %4382 = bitcast i8* %4379 to <2 x float>*
  %4383 = load <2 x float>, <2 x float>* %4382, align 1
  %4384 = extractelement <2 x float> %4383, i32 0
  %4385 = fpext float %4384 to double
  %4386 = bitcast i8* %4378 to double*
  store double %4385, double* %4386, align 1, !tbaa !2455
  %4387 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4388 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4389 = bitcast %union.vec128_t* %XMM3 to i8*
  %4390 = load i64, i64* %PC
  %4391 = add i64 %4390, 4
  store i64 %4391, i64* %PC
  %4392 = bitcast i8* %4388 to double*
  %4393 = load double, double* %4392, align 1
  %4394 = getelementptr inbounds i8, i8* %4388, i64 8
  %4395 = bitcast i8* %4394 to i64*
  %4396 = load i64, i64* %4395, align 1
  %4397 = bitcast i8* %4389 to double*
  %4398 = load double, double* %4397, align 1
  %4399 = fmul double %4393, %4398
  %4400 = bitcast i8* %4387 to double*
  store double %4399, double* %4400, align 1, !tbaa !2455
  %4401 = getelementptr inbounds i8, i8* %4387, i64 8
  %4402 = bitcast i8* %4401 to i64*
  store i64 %4396, i64* %4402, align 1, !tbaa !2455
  %4403 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4404 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4405 = bitcast %union.vec128_t* %XMM1 to i8*
  %4406 = load i64, i64* %PC
  %4407 = add i64 %4406, 4
  store i64 %4407, i64* %PC
  %4408 = bitcast i8* %4404 to double*
  %4409 = load double, double* %4408, align 1
  %4410 = getelementptr inbounds i8, i8* %4404, i64 8
  %4411 = bitcast i8* %4410 to i64*
  %4412 = load i64, i64* %4411, align 1
  %4413 = bitcast i8* %4405 to double*
  %4414 = load double, double* %4413, align 1
  %4415 = fdiv double %4409, %4414
  %4416 = bitcast i8* %4403 to double*
  store double %4415, double* %4416, align 1, !tbaa !2455
  %4417 = getelementptr inbounds i8, i8* %4403, i64 8
  %4418 = bitcast i8* %4417 to i64*
  store i64 %4412, i64* %4418, align 1, !tbaa !2455
  %4419 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4420 = bitcast %union.vec128_t* %XMM2 to i8*
  %4421 = load i64, i64* %PC
  %4422 = add i64 %4421, 4
  store i64 %4422, i64* %PC
  %4423 = bitcast i8* %4419 to <2 x i32>*
  %4424 = load <2 x i32>, <2 x i32>* %4423, align 1
  %4425 = getelementptr inbounds i8, i8* %4419, i64 8
  %4426 = bitcast i8* %4425 to <2 x i32>*
  %4427 = load <2 x i32>, <2 x i32>* %4426, align 1
  %4428 = bitcast i8* %4420 to double*
  %4429 = load double, double* %4428, align 1
  %4430 = fptrunc double %4429 to float
  %4431 = bitcast i8* %4419 to float*
  store float %4430, float* %4431, align 1, !tbaa !2453
  %4432 = extractelement <2 x i32> %4424, i32 1
  %4433 = getelementptr inbounds i8, i8* %4419, i64 4
  %4434 = bitcast i8* %4433 to i32*
  store i32 %4432, i32* %4434, align 1, !tbaa !2453
  %4435 = extractelement <2 x i32> %4427, i32 0
  %4436 = bitcast i8* %4425 to i32*
  store i32 %4435, i32* %4436, align 1, !tbaa !2453
  %4437 = extractelement <2 x i32> %4427, i32 1
  %4438 = getelementptr inbounds i8, i8* %4419, i64 12
  %4439 = bitcast i8* %4438 to i32*
  store i32 %4437, i32* %4439, align 1, !tbaa !2453
  %4440 = bitcast %union.vec128_t* %XMM1 to i8*
  %4441 = load i64, i64* %PC
  %4442 = add i64 %4441, 9
  store i64 %4442, i64* %PC
  %4443 = bitcast i8* %4440 to <2 x float>*
  %4444 = load <2 x float>, <2 x float>* %4443, align 1
  %4445 = extractelement <2 x float> %4444, i32 0
  store float %4445, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %4446 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4447 = load i64, i64* %PC
  %4448 = add i64 %4447, 9
  store i64 %4448, i64* %PC
  %4449 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %4450 = bitcast i8* %4446 to float*
  store float %4449, float* %4450, align 1, !tbaa !2453
  %4451 = getelementptr inbounds i8, i8* %4446, i64 4
  %4452 = bitcast i8* %4451 to float*
  store float 0.000000e+00, float* %4452, align 1, !tbaa !2453
  %4453 = getelementptr inbounds i8, i8* %4446, i64 8
  %4454 = bitcast i8* %4453 to float*
  store float 0.000000e+00, float* %4454, align 1, !tbaa !2453
  %4455 = getelementptr inbounds i8, i8* %4446, i64 12
  %4456 = bitcast i8* %4455 to float*
  store float 0.000000e+00, float* %4456, align 1, !tbaa !2453
  %4457 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4458 = bitcast %union.vec128_t* %XMM1 to i8*
  %4459 = load i64, i64* %PC
  %4460 = add i64 %4459, 4
  store i64 %4460, i64* %PC
  %4461 = bitcast i8* %4458 to <2 x float>*
  %4462 = load <2 x float>, <2 x float>* %4461, align 1
  %4463 = extractelement <2 x float> %4462, i32 0
  %4464 = fpext float %4463 to double
  %4465 = bitcast i8* %4457 to double*
  store double %4464, double* %4465, align 1, !tbaa !2455
  %4466 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4467 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4468 = bitcast %union.vec128_t* %XMM1 to i8*
  %4469 = load i64, i64* %PC
  %4470 = add i64 %4469, 4
  store i64 %4470, i64* %PC
  %4471 = bitcast i8* %4467 to double*
  %4472 = load double, double* %4471, align 1
  %4473 = getelementptr inbounds i8, i8* %4467, i64 8
  %4474 = bitcast i8* %4473 to i64*
  %4475 = load i64, i64* %4474, align 1
  %4476 = bitcast i8* %4468 to double*
  %4477 = load double, double* %4476, align 1
  %4478 = fdiv double %4472, %4477
  %4479 = bitcast i8* %4466 to double*
  store double %4478, double* %4479, align 1, !tbaa !2455
  %4480 = getelementptr inbounds i8, i8* %4466, i64 8
  %4481 = bitcast i8* %4480 to i64*
  store i64 %4475, i64* %4481, align 1, !tbaa !2455
  %4482 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4483 = bitcast %union.vec128_t* %XMM0 to i8*
  %4484 = load i64, i64* %PC
  %4485 = add i64 %4484, 4
  store i64 %4485, i64* %PC
  %4486 = bitcast i8* %4482 to <2 x i32>*
  %4487 = load <2 x i32>, <2 x i32>* %4486, align 1
  %4488 = getelementptr inbounds i8, i8* %4482, i64 8
  %4489 = bitcast i8* %4488 to <2 x i32>*
  %4490 = load <2 x i32>, <2 x i32>* %4489, align 1
  %4491 = bitcast i8* %4483 to double*
  %4492 = load double, double* %4491, align 1
  %4493 = fptrunc double %4492 to float
  %4494 = bitcast i8* %4482 to float*
  store float %4493, float* %4494, align 1, !tbaa !2453
  %4495 = extractelement <2 x i32> %4487, i32 1
  %4496 = getelementptr inbounds i8, i8* %4482, i64 4
  %4497 = bitcast i8* %4496 to i32*
  store i32 %4495, i32* %4497, align 1, !tbaa !2453
  %4498 = extractelement <2 x i32> %4490, i32 0
  %4499 = bitcast i8* %4488 to i32*
  store i32 %4498, i32* %4499, align 1, !tbaa !2453
  %4500 = extractelement <2 x i32> %4490, i32 1
  %4501 = getelementptr inbounds i8, i8* %4482, i64 12
  %4502 = bitcast i8* %4501 to i32*
  store i32 %4500, i32* %4502, align 1, !tbaa !2453
  %4503 = bitcast %union.vec128_t* %XMM0 to i8*
  %4504 = load i64, i64* %PC
  %4505 = add i64 %4504, 9
  store i64 %4505, i64* %PC
  %4506 = bitcast i8* %4503 to <2 x float>*
  %4507 = load <2 x float>, <2 x float>* %4506, align 1
  %4508 = extractelement <2 x float> %4507, i32 0
  store float %4508, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*)
  %4509 = load i64, i64* %PC
  %4510 = add i64 %4509, 26
  %4511 = load i64, i64* %PC
  %4512 = add i64 %4511, 5
  store i64 %4512, i64* %PC
  %4513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4510, i64* %4513, align 8, !tbaa !2428
  br label %block_400d39

block_4011a1:                                     ; preds = %block_40118d
  %4514 = add i64 %7047, 10
  store i64 %4514, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %4515 = load i64, i64* %PC
  %4516 = add i64 %4515, 10
  store i64 %4516, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %4517 = load i64, i64* %PC
  %4518 = add i64 %4517, 10
  store i64 %4518, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %4519 = bitcast i32* %R9D to i64*
  %4520 = load i32, i32* %R9D
  %4521 = zext i32 %4520 to i64
  %4522 = load i32, i32* %R9D
  %4523 = zext i32 %4522 to i64
  %4524 = load i64, i64* %PC
  %4525 = add i64 %4524, 3
  store i64 %4525, i64* %PC
  %4526 = xor i64 %4523, %4521
  %4527 = trunc i64 %4526 to i32
  %4528 = and i64 %4526, 4294967295
  store i64 %4528, i64* %4519, align 8, !tbaa !2428
  %4529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4529, align 1, !tbaa !2432
  %4530 = and i32 %4527, 255
  %4531 = call i32 @llvm.ctpop.i32(i32 %4530) #16
  %4532 = trunc i32 %4531 to i8
  %4533 = and i8 %4532, 1
  %4534 = xor i8 %4533, 1
  %4535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4534, i8* %4535, align 1, !tbaa !2446
  %4536 = icmp eq i32 %4527, 0
  %4537 = zext i1 %4536 to i8
  %4538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4537, i8* %4538, align 1, !tbaa !2448
  %4539 = lshr i32 %4527, 31
  %4540 = trunc i32 %4539 to i8
  %4541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4540, i8* %4541, align 1, !tbaa !2449
  %4542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4542, align 1, !tbaa !2450
  %4543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4543, align 1, !tbaa !2447
  %4544 = load i64, i64* %PC
  %4545 = add i64 %4544, 7
  store i64 %4545, i64* %PC
  %4546 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %4547 = zext i32 %4546 to i64
  store i64 %4547, i64* %RSI, align 8, !tbaa !2428
  %4548 = load i64, i64* %PC
  %4549 = add i64 %4548, 7
  store i64 %4549, i64* %PC
  %4550 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %4551 = zext i32 %4550 to i64
  store i64 %4551, i64* %RDX, align 8, !tbaa !2428
  %4552 = load i64, i64* %PC
  %4553 = add i64 %4552, 2752
  %4554 = load i64, i64* %PC
  %4555 = add i64 %4554, 5
  %4556 = load i64, i64* %PC
  %4557 = add i64 %4556, 5
  store i64 %4557, i64* %PC
  %4558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4559 = load i64, i64* %4558, align 8, !tbaa !2428
  %4560 = add i64 %4559, -8
  %4561 = inttoptr i64 %4560 to i64*
  store i64 %4555, i64* %4561
  store i64 %4560, i64* %4558, align 8, !tbaa !2428
  %4562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4553, i64* %4562, align 8, !tbaa !2428
  %4563 = load i64, i64* %PC
  %4564 = call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* %0, i64 %4563, %struct.Memory* %MEMORY.16)
  %4565 = load i64, i64* %PC
  %4566 = add i64 %4565, 7
  store i64 %4566, i64* %PC
  %4567 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4568 = zext i32 %4567 to i64
  store i64 %4568, i64* %RAX, align 8, !tbaa !2428
  %4569 = load i64, i64* %RAX
  %4570 = load i64, i64* %PC
  %4571 = add i64 %4570, 3
  store i64 %4571, i64* %PC
  %4572 = trunc i64 %4569 to i32
  %4573 = add i32 1, %4572
  %4574 = zext i32 %4573 to i64
  store i64 %4574, i64* %RAX, align 8, !tbaa !2428
  %4575 = icmp ult i32 %4573, %4572
  %4576 = icmp ult i32 %4573, 1
  %4577 = or i1 %4575, %4576
  %4578 = zext i1 %4577 to i8
  %4579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4578, i8* %4579, align 1, !tbaa !2432
  %4580 = and i32 %4573, 255
  %4581 = call i32 @llvm.ctpop.i32(i32 %4580) #16
  %4582 = trunc i32 %4581 to i8
  %4583 = and i8 %4582, 1
  %4584 = xor i8 %4583, 1
  %4585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4584, i8* %4585, align 1, !tbaa !2446
  %4586 = xor i64 1, %4569
  %4587 = trunc i64 %4586 to i32
  %4588 = xor i32 %4587, %4573
  %4589 = lshr i32 %4588, 4
  %4590 = trunc i32 %4589 to i8
  %4591 = and i8 %4590, 1
  %4592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4591, i8* %4592, align 1, !tbaa !2447
  %4593 = icmp eq i32 %4573, 0
  %4594 = zext i1 %4593 to i8
  %4595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4594, i8* %4595, align 1, !tbaa !2448
  %4596 = lshr i32 %4573, 31
  %4597 = trunc i32 %4596 to i8
  %4598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4597, i8* %4598, align 1, !tbaa !2449
  %4599 = lshr i32 %4572, 31
  %4600 = xor i32 %4596, %4599
  %4601 = add nuw nsw i32 %4600, %4596
  %4602 = icmp eq i32 %4601, 2
  %4603 = zext i1 %4602 to i8
  %4604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4603, i8* %4604, align 1, !tbaa !2450
  %4605 = load i32, i32* %EAX
  %4606 = zext i32 %4605 to i64
  %4607 = load i64, i64* %PC
  %4608 = add i64 %4607, 7
  store i64 %4608, i64* %PC
  store i32 %4605, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4609 = load i64, i64* %PC
  %4610 = sub i64 %4609, 89
  %4611 = load i64, i64* %PC
  %4612 = add i64 %4611, 5
  store i64 %4612, i64* %PC
  %4613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4610, i64* %4613, align 8, !tbaa !2428
  br label %block_40118d

block_400fef:                                     ; preds = %block_400fcb, %block_400fe4
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.3, %block_400fcb ], [ %MEMORY.3, %block_400fe4 ]
  %4614 = load i64, i64* %PC
  %4615 = add i64 %4614, 10
  store i64 %4615, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  %4616 = load i64, i64* %RDX
  %4617 = load i32, i32* %EDX
  %4618 = zext i32 %4617 to i64
  %4619 = load i64, i64* %PC
  %4620 = add i64 %4619, 2
  store i64 %4620, i64* %PC
  %4621 = xor i64 %4618, %4616
  %4622 = trunc i64 %4621 to i32
  %4623 = and i64 %4621, 4294967295
  store i64 %4623, i64* %RDX, align 8, !tbaa !2428
  %4624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4624, align 1, !tbaa !2432
  %4625 = and i32 %4622, 255
  %4626 = call i32 @llvm.ctpop.i32(i32 %4625) #16
  %4627 = trunc i32 %4626 to i8
  %4628 = and i8 %4627, 1
  %4629 = xor i8 %4628, 1
  %4630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4629, i8* %4630, align 1, !tbaa !2446
  %4631 = icmp eq i32 %4622, 0
  %4632 = zext i1 %4631 to i8
  %4633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4632, i8* %4633, align 1, !tbaa !2448
  %4634 = lshr i32 %4622, 31
  %4635 = trunc i32 %4634 to i8
  %4636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4635, i8* %4636, align 1, !tbaa !2449
  %4637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4637, align 1, !tbaa !2450
  %4638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4638, align 1, !tbaa !2447
  %4639 = load i64, i64* %PC
  %4640 = add i64 %4639, 8
  store i64 %4640, i64* %PC
  %4641 = load i64, i64* @stderr
  store i64 %4641, i64* %RDI, align 8, !tbaa !2428
  %4642 = load i64, i64* %PC
  %4643 = add i64 %4642, 2
  store i64 %4643, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4644 = load i64, i64* %PC
  %4645 = sub i64 %4644, 2885
  %4646 = load i64, i64* %PC
  %4647 = add i64 %4646, 5
  %4648 = load i64, i64* %PC
  %4649 = add i64 %4648, 5
  store i64 %4649, i64* %PC
  %4650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4651 = load i64, i64* %4650, align 8, !tbaa !2428
  %4652 = add i64 %4651, -8
  %4653 = inttoptr i64 %4652 to i64*
  store i64 %4647, i64* %4653
  store i64 %4652, i64* %4650, align 8, !tbaa !2428
  %4654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4645, i64* %4654, align 8, !tbaa !2428
  %4655 = load i64, i64* %PC
  %4656 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4655, %struct.Memory* %MEMORY.8)
  %4657 = load i64, i64* %PC
  %4658 = add i64 %4657, 10
  store i64 %4658, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %4659 = load i64, i64* %PC
  %4660 = add i64 %4659, 8
  store i64 %4660, i64* %PC
  %4661 = load i64, i64* @stderr
  store i64 %4661, i64* %RDI, align 8, !tbaa !2428
  %4662 = load i64, i64* %PC
  %4663 = add i64 %4662, 7
  store i64 %4663, i64* %PC
  %4664 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %4665 = zext i32 %4664 to i64
  store i64 %4665, i64* %RDX, align 8, !tbaa !2428
  %4666 = load i64, i64* %RBP
  %4667 = sub i64 %4666, 956
  %4668 = load i32, i32* %EAX
  %4669 = zext i32 %4668 to i64
  %4670 = load i64, i64* %PC
  %4671 = add i64 %4670, 6
  store i64 %4671, i64* %PC
  %4672 = inttoptr i64 %4667 to i32*
  store i32 %4668, i32* %4672
  %4673 = load i64, i64* %PC
  %4674 = add i64 %4673, 2
  store i64 %4674, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4675 = load i64, i64* %PC
  %4676 = sub i64 %4675, 2923
  %4677 = load i64, i64* %PC
  %4678 = add i64 %4677, 5
  %4679 = load i64, i64* %PC
  %4680 = add i64 %4679, 5
  store i64 %4680, i64* %PC
  %4681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4682 = load i64, i64* %4681, align 8, !tbaa !2428
  %4683 = add i64 %4682, -8
  %4684 = inttoptr i64 %4683 to i64*
  store i64 %4678, i64* %4684
  store i64 %4683, i64* %4681, align 8, !tbaa !2428
  %4685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4676, i64* %4685, align 8, !tbaa !2428
  %4686 = load i64, i64* %PC
  %4687 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4686, %struct.Memory* %4656)
  %4688 = load i64, i64* %PC
  %4689 = add i64 %4688, 10
  store i64 %4689, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %4690 = load i64, i64* %PC
  %4691 = add i64 %4690, 8
  store i64 %4691, i64* %PC
  %4692 = load i64, i64* @stderr
  store i64 %4692, i64* %RDI, align 8, !tbaa !2428
  %4693 = load i64, i64* %RBP
  %4694 = sub i64 %4693, 960
  %4695 = load i32, i32* %EAX
  %4696 = zext i32 %4695 to i64
  %4697 = load i64, i64* %PC
  %4698 = add i64 %4697, 6
  store i64 %4698, i64* %PC
  %4699 = inttoptr i64 %4694 to i32*
  store i32 %4695, i32* %4699
  %4700 = load i64, i64* %PC
  %4701 = add i64 %4700, 2
  store i64 %4701, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4702 = load i64, i64* %PC
  %4703 = sub i64 %4702, 2954
  %4704 = load i64, i64* %PC
  %4705 = add i64 %4704, 5
  %4706 = load i64, i64* %PC
  %4707 = add i64 %4706, 5
  store i64 %4707, i64* %PC
  %4708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4709 = load i64, i64* %4708, align 8, !tbaa !2428
  %4710 = add i64 %4709, -8
  %4711 = inttoptr i64 %4710 to i64*
  store i64 %4705, i64* %4711
  store i64 %4710, i64* %4708, align 8, !tbaa !2428
  %4712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4703, i64* %4712, align 8, !tbaa !2428
  %4713 = load i64, i64* %PC
  %4714 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4713, %struct.Memory* %4687)
  %4715 = load i64, i64* %PC
  %4716 = add i64 %4715, 10
  store i64 %4716, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %4717 = load i64, i64* %PC
  %4718 = add i64 %4717, 8
  store i64 %4718, i64* %PC
  %4719 = load i64, i64* @stderr
  store i64 %4719, i64* %RDI, align 8, !tbaa !2428
  %4720 = load i64, i64* %RBP
  %4721 = sub i64 %4720, 964
  %4722 = load i32, i32* %EAX
  %4723 = zext i32 %4722 to i64
  %4724 = load i64, i64* %PC
  %4725 = add i64 %4724, 6
  store i64 %4725, i64* %PC
  %4726 = inttoptr i64 %4721 to i32*
  store i32 %4722, i32* %4726
  %4727 = load i64, i64* %PC
  %4728 = add i64 %4727, 2
  store i64 %4728, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4729 = load i64, i64* %PC
  %4730 = sub i64 %4729, 2985
  %4731 = load i64, i64* %PC
  %4732 = add i64 %4731, 5
  %4733 = load i64, i64* %PC
  %4734 = add i64 %4733, 5
  store i64 %4734, i64* %PC
  %4735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4736 = load i64, i64* %4735, align 8, !tbaa !2428
  %4737 = add i64 %4736, -8
  %4738 = inttoptr i64 %4737 to i64*
  store i64 %4732, i64* %4738
  store i64 %4737, i64* %4735, align 8, !tbaa !2428
  %4739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4730, i64* %4739, align 8, !tbaa !2428
  %4740 = load i64, i64* %PC
  %4741 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4740, %struct.Memory* %4714)
  %4742 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4743 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4744 = bitcast %union.vec128_t* %XMM0 to i8*
  %4745 = load i64, i64* %PC
  %4746 = add i64 %4745, 3
  store i64 %4746, i64* %PC
  %4747 = bitcast i8* %4743 to i64*
  %4748 = load i64, i64* %4747, align 1
  %4749 = getelementptr inbounds i8, i8* %4743, i64 8
  %4750 = bitcast i8* %4749 to i64*
  %4751 = load i64, i64* %4750, align 1
  %4752 = bitcast i8* %4744 to i64*
  %4753 = load i64, i64* %4752, align 1
  %4754 = getelementptr inbounds i8, i8* %4744, i64 8
  %4755 = bitcast i8* %4754 to i64*
  %4756 = load i64, i64* %4755, align 1
  %4757 = xor i64 %4753, %4748
  %4758 = xor i64 %4756, %4751
  %4759 = trunc i64 %4757 to i32
  %4760 = lshr i64 %4757, 32
  %4761 = trunc i64 %4760 to i32
  %4762 = bitcast i8* %4742 to i32*
  store i32 %4759, i32* %4762, align 1, !tbaa !2452
  %4763 = getelementptr inbounds i8, i8* %4742, i64 4
  %4764 = bitcast i8* %4763 to i32*
  store i32 %4761, i32* %4764, align 1, !tbaa !2452
  %4765 = trunc i64 %4758 to i32
  %4766 = getelementptr inbounds i8, i8* %4742, i64 8
  %4767 = bitcast i8* %4766 to i32*
  store i32 %4765, i32* %4767, align 1, !tbaa !2452
  %4768 = lshr i64 %4758, 32
  %4769 = trunc i64 %4768 to i32
  %4770 = getelementptr inbounds i8, i8* %4742, i64 12
  %4771 = bitcast i8* %4770 to i32*
  store i32 %4769, i32* %4771, align 1, !tbaa !2452
  %4772 = load i64, i64* %PC
  %4773 = add i64 %4772, 7
  store i64 %4773, i64* %PC
  %4774 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4775 = zext i32 %4774 to i64
  store i64 %4775, i64* %RDX, align 8, !tbaa !2428
  %4776 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4777 = load i32, i32* %EDX
  %4778 = zext i32 %4777 to i64
  %4779 = load i64, i64* %PC
  %4780 = add i64 %4779, 4
  store i64 %4780, i64* %PC
  %4781 = bitcast i8* %4776 to <2 x i32>*
  %4782 = load <2 x i32>, <2 x i32>* %4781, align 1
  %4783 = getelementptr inbounds i8, i8* %4776, i64 8
  %4784 = bitcast i8* %4783 to <2 x i32>*
  %4785 = load <2 x i32>, <2 x i32>* %4784, align 1
  %4786 = sitofp i32 %4777 to float
  %4787 = bitcast i8* %4776 to float*
  store float %4786, float* %4787, align 1, !tbaa !2453
  %4788 = extractelement <2 x i32> %4782, i32 1
  %4789 = getelementptr inbounds i8, i8* %4776, i64 4
  %4790 = bitcast i8* %4789 to i32*
  store i32 %4788, i32* %4790, align 1, !tbaa !2453
  %4791 = extractelement <2 x i32> %4785, i32 0
  %4792 = bitcast i8* %4783 to i32*
  store i32 %4791, i32* %4792, align 1, !tbaa !2453
  %4793 = extractelement <2 x i32> %4785, i32 1
  %4794 = getelementptr inbounds i8, i8* %4776, i64 12
  %4795 = bitcast i8* %4794 to i32*
  store i32 %4793, i32* %4795, align 1, !tbaa !2453
  %4796 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4797 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4798 = load i64, i64* %RBP
  %4799 = sub i64 %4798, 72
  %4800 = load i64, i64* %PC
  %4801 = add i64 %4800, 5
  store i64 %4801, i64* %PC
  %4802 = bitcast i8* %4797 to <2 x float>*
  %4803 = load <2 x float>, <2 x float>* %4802, align 1
  %4804 = getelementptr inbounds i8, i8* %4797, i64 8
  %4805 = bitcast i8* %4804 to <2 x i32>*
  %4806 = load <2 x i32>, <2 x i32>* %4805, align 1
  %4807 = inttoptr i64 %4799 to float*
  %4808 = load float, float* %4807
  %4809 = extractelement <2 x float> %4803, i32 0
  %4810 = fmul float %4809, %4808
  %4811 = bitcast i8* %4796 to float*
  store float %4810, float* %4811, align 1, !tbaa !2453
  %4812 = bitcast <2 x float> %4803 to <2 x i32>
  %4813 = extractelement <2 x i32> %4812, i32 1
  %4814 = getelementptr inbounds i8, i8* %4796, i64 4
  %4815 = bitcast i8* %4814 to i32*
  store i32 %4813, i32* %4815, align 1, !tbaa !2453
  %4816 = extractelement <2 x i32> %4806, i32 0
  %4817 = getelementptr inbounds i8, i8* %4796, i64 8
  %4818 = bitcast i8* %4817 to i32*
  store i32 %4816, i32* %4818, align 1, !tbaa !2453
  %4819 = extractelement <2 x i32> %4806, i32 1
  %4820 = getelementptr inbounds i8, i8* %4796, i64 12
  %4821 = bitcast i8* %4820 to i32*
  store i32 %4819, i32* %4821, align 1, !tbaa !2453
  %4822 = load i64, i64* %RBP
  %4823 = sub i64 %4822, 44
  %4824 = bitcast %union.vec128_t* %XMM1 to i8*
  %4825 = load i64, i64* %PC
  %4826 = add i64 %4825, 5
  store i64 %4826, i64* %PC
  %4827 = bitcast i8* %4824 to <2 x float>*
  %4828 = load <2 x float>, <2 x float>* %4827, align 1
  %4829 = extractelement <2 x float> %4828, i32 0
  %4830 = inttoptr i64 %4823 to float*
  store float %4829, float* %4830
  %4831 = bitcast %union.vec128_t* %XMM0 to i8*
  %4832 = load i64, i64* %PC
  %4833 = add i64 %4832, 9
  store i64 %4833, i64* %PC
  %4834 = bitcast i8* %4831 to <2 x float>*
  %4835 = load <2 x float>, <2 x float>* %4834, align 1
  %4836 = extractelement <2 x float> %4835, i32 0
  store float %4836, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %4837 = load i64, i64* %PC
  %4838 = add i64 %4837, 11
  store i64 %4838, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4839 = load i64, i64* %RBP
  %4840 = sub i64 %4839, 968
  %4841 = load i32, i32* %EAX
  %4842 = zext i32 %4841 to i64
  %4843 = load i64, i64* %PC
  %4844 = add i64 %4843, 6
  store i64 %4844, i64* %PC
  %4845 = inttoptr i64 %4840 to i32*
  store i32 %4841, i32* %4845
  br label %block_4010a0

block_400e52:                                     ; preds = %block_400e43
  %4846 = load i64, i64* %PC
  %4847 = add i64 %4846, 10
  store i64 %4847, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %4848 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4849 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4850 = bitcast %union.vec128_t* %XMM0 to i8*
  %4851 = load i64, i64* %PC
  %4852 = add i64 %4851, 3
  store i64 %4852, i64* %PC
  %4853 = bitcast i8* %4849 to i64*
  %4854 = load i64, i64* %4853, align 1
  %4855 = getelementptr inbounds i8, i8* %4849, i64 8
  %4856 = bitcast i8* %4855 to i64*
  %4857 = load i64, i64* %4856, align 1
  %4858 = bitcast i8* %4850 to i64*
  %4859 = load i64, i64* %4858, align 1
  %4860 = getelementptr inbounds i8, i8* %4850, i64 8
  %4861 = bitcast i8* %4860 to i64*
  %4862 = load i64, i64* %4861, align 1
  %4863 = xor i64 %4859, %4854
  %4864 = xor i64 %4862, %4857
  %4865 = trunc i64 %4863 to i32
  %4866 = lshr i64 %4863, 32
  %4867 = trunc i64 %4866 to i32
  %4868 = bitcast i8* %4848 to i32*
  store i32 %4865, i32* %4868, align 1, !tbaa !2452
  %4869 = getelementptr inbounds i8, i8* %4848, i64 4
  %4870 = bitcast i8* %4869 to i32*
  store i32 %4867, i32* %4870, align 1, !tbaa !2452
  %4871 = trunc i64 %4864 to i32
  %4872 = getelementptr inbounds i8, i8* %4848, i64 8
  %4873 = bitcast i8* %4872 to i32*
  store i32 %4871, i32* %4873, align 1, !tbaa !2452
  %4874 = lshr i64 %4864, 32
  %4875 = trunc i64 %4874 to i32
  %4876 = getelementptr inbounds i8, i8* %4848, i64 12
  %4877 = bitcast i8* %4876 to i32*
  store i32 %4875, i32* %4877, align 1, !tbaa !2452
  %4878 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4879 = load i64, i64* %RBP
  %4880 = sub i64 %4879, 72
  %4881 = load i64, i64* %PC
  %4882 = add i64 %4881, 5
  store i64 %4882, i64* %PC
  %4883 = inttoptr i64 %4880 to float*
  %4884 = load float, float* %4883
  %4885 = bitcast i8* %4878 to float*
  store float %4884, float* %4885, align 1, !tbaa !2453
  %4886 = getelementptr inbounds i8, i8* %4878, i64 4
  %4887 = bitcast i8* %4886 to float*
  store float 0.000000e+00, float* %4887, align 1, !tbaa !2453
  %4888 = getelementptr inbounds i8, i8* %4878, i64 8
  %4889 = bitcast i8* %4888 to float*
  store float 0.000000e+00, float* %4889, align 1, !tbaa !2453
  %4890 = getelementptr inbounds i8, i8* %4878, i64 12
  %4891 = bitcast i8* %4890 to float*
  store float 0.000000e+00, float* %4891, align 1, !tbaa !2453
  %4892 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4893 = bitcast %union.vec128_t* %XMM1 to i8*
  %4894 = load i64, i64* %PC
  %4895 = add i64 %4894, 4
  store i64 %4895, i64* %PC
  %4896 = bitcast i8* %4893 to <2 x float>*
  %4897 = load <2 x float>, <2 x float>* %4896, align 1
  %4898 = extractelement <2 x float> %4897, i32 0
  %4899 = fpext float %4898 to double
  %4900 = bitcast i8* %4892 to double*
  store double %4899, double* %4900, align 1, !tbaa !2455
  %4901 = load i64, i64* %RBP
  %4902 = sub i64 %4901, 68
  %4903 = load i64, i64* %PC
  %4904 = add i64 %4903, 3
  store i64 %4904, i64* %PC
  %4905 = inttoptr i64 %4902 to i32*
  %4906 = load i32, i32* %4905
  %4907 = zext i32 %4906 to i64
  store i64 %4907, i64* %RAX, align 8, !tbaa !2428
  %4908 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4909 = load i32, i32* %EAX
  %4910 = zext i32 %4909 to i64
  %4911 = load i64, i64* %PC
  %4912 = add i64 %4911, 4
  store i64 %4912, i64* %PC
  %4913 = sitofp i32 %4909 to double
  %4914 = bitcast i8* %4908 to double*
  store double %4913, double* %4914, align 1, !tbaa !2455
  %4915 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4916 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4917 = bitcast %union.vec128_t* %XMM2 to i8*
  %4918 = load i64, i64* %PC
  %4919 = add i64 %4918, 4
  store i64 %4919, i64* %PC
  %4920 = bitcast i8* %4916 to double*
  %4921 = load double, double* %4920, align 1
  %4922 = getelementptr inbounds i8, i8* %4916, i64 8
  %4923 = bitcast i8* %4922 to i64*
  %4924 = load i64, i64* %4923, align 1
  %4925 = bitcast i8* %4917 to double*
  %4926 = load double, double* %4925, align 1
  %4927 = fdiv double %4921, %4926
  %4928 = bitcast i8* %4915 to double*
  store double %4927, double* %4928, align 1, !tbaa !2455
  %4929 = getelementptr inbounds i8, i8* %4915, i64 8
  %4930 = bitcast i8* %4929 to i64*
  store i64 %4924, i64* %4930, align 1, !tbaa !2455
  %4931 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4932 = bitcast %union.vec128_t* %XMM1 to i8*
  %4933 = load i64, i64* %PC
  %4934 = add i64 %4933, 4
  store i64 %4934, i64* %PC
  %4935 = bitcast i8* %4931 to <2 x i32>*
  %4936 = load <2 x i32>, <2 x i32>* %4935, align 1
  %4937 = getelementptr inbounds i8, i8* %4931, i64 8
  %4938 = bitcast i8* %4937 to <2 x i32>*
  %4939 = load <2 x i32>, <2 x i32>* %4938, align 1
  %4940 = bitcast i8* %4932 to double*
  %4941 = load double, double* %4940, align 1
  %4942 = fptrunc double %4941 to float
  %4943 = bitcast i8* %4931 to float*
  store float %4942, float* %4943, align 1, !tbaa !2453
  %4944 = extractelement <2 x i32> %4936, i32 1
  %4945 = getelementptr inbounds i8, i8* %4931, i64 4
  %4946 = bitcast i8* %4945 to i32*
  store i32 %4944, i32* %4946, align 1, !tbaa !2453
  %4947 = extractelement <2 x i32> %4939, i32 0
  %4948 = bitcast i8* %4937 to i32*
  store i32 %4947, i32* %4948, align 1, !tbaa !2453
  %4949 = extractelement <2 x i32> %4939, i32 1
  %4950 = getelementptr inbounds i8, i8* %4931, i64 12
  %4951 = bitcast i8* %4950 to i32*
  store i32 %4949, i32* %4951, align 1, !tbaa !2453
  %4952 = load i64, i64* %RBP
  %4953 = sub i64 %4952, 72
  %4954 = bitcast %union.vec128_t* %XMM1 to i8*
  %4955 = load i64, i64* %PC
  %4956 = add i64 %4955, 5
  store i64 %4956, i64* %PC
  %4957 = bitcast i8* %4954 to <2 x float>*
  %4958 = load <2 x float>, <2 x float>* %4957, align 1
  %4959 = extractelement <2 x float> %4958, i32 0
  %4960 = inttoptr i64 %4953 to float*
  store float %4959, float* %4960
  %4961 = load i64, i64* %PC
  %4962 = add i64 %4961, 8
  store i64 %4962, i64* %PC
  %4963 = load i64, i64* @stderr
  store i64 %4963, i64* %RDI, align 8, !tbaa !2428
  %4964 = load i64, i64* %PC
  %4965 = add i64 %4964, 2
  store i64 %4965, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %4966 = load i64, i64* %PC
  %4967 = sub i64 %4966, 2502
  %4968 = load i64, i64* %PC
  %4969 = add i64 %4968, 5
  %4970 = load i64, i64* %PC
  %4971 = add i64 %4970, 5
  store i64 %4971, i64* %PC
  %4972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4973 = load i64, i64* %4972, align 8, !tbaa !2428
  %4974 = add i64 %4973, -8
  %4975 = inttoptr i64 %4974 to i64*
  store i64 %4969, i64* %4975
  store i64 %4974, i64* %4972, align 8, !tbaa !2428
  %4976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4967, i64* %4976, align 8, !tbaa !2428
  %4977 = load i64, i64* %PC
  %4978 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4977, %struct.Memory* %MEMORY.15)
  %4979 = load i64, i64* %PC
  %4980 = add i64 %4979, 10
  store i64 %4980, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %4981 = load i64, i64* %PC
  %4982 = add i64 %4981, 8
  store i64 %4982, i64* %PC
  %4983 = load i64, i64* @stderr
  store i64 %4983, i64* %RDI, align 8, !tbaa !2428
  %4984 = load i64, i64* %RBP
  %4985 = sub i64 %4984, 944
  %4986 = load i32, i32* %EAX
  %4987 = zext i32 %4986 to i64
  %4988 = load i64, i64* %PC
  %4989 = add i64 %4988, 6
  store i64 %4989, i64* %PC
  %4990 = inttoptr i64 %4985 to i32*
  store i32 %4986, i32* %4990
  %4991 = load i64, i64* %PC
  %4992 = add i64 %4991, 2
  store i64 %4992, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4993 = load i64, i64* %PC
  %4994 = sub i64 %4993, 2533
  %4995 = load i64, i64* %PC
  %4996 = add i64 %4995, 5
  %4997 = load i64, i64* %PC
  %4998 = add i64 %4997, 5
  store i64 %4998, i64* %PC
  %4999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5000 = load i64, i64* %4999, align 8, !tbaa !2428
  %5001 = add i64 %5000, -8
  %5002 = inttoptr i64 %5001 to i64*
  store i64 %4996, i64* %5002
  store i64 %5001, i64* %4999, align 8, !tbaa !2428
  %5003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4994, i64* %5003, align 8, !tbaa !2428
  %5004 = load i64, i64* %PC
  %5005 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5004, %struct.Memory* %4978)
  %5006 = load i64, i64* %RBP
  %5007 = sub i64 %5006, 64
  %5008 = load i64, i64* %PC
  %5009 = add i64 %5008, 7
  store i64 %5009, i64* %PC
  %5010 = inttoptr i64 %5007 to i32*
  store i32 -3, i32* %5010
  %5011 = load i64, i64* %PC
  %5012 = add i64 %5011, 11
  store i64 %5012, i64* %PC
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %5013 = load i64, i64* %RBP
  %5014 = sub i64 %5013, 948
  %5015 = load i32, i32* %EAX
  %5016 = zext i32 %5015 to i64
  %5017 = load i64, i64* %PC
  %5018 = add i64 %5017, 6
  store i64 %5018, i64* %PC
  %5019 = inttoptr i64 %5014 to i32*
  store i32 %5015, i32* %5019
  br label %block_400ec2

block_4010a0:                                     ; preds = %block_400fef, %block_4011eb
  %MEMORY.9 = phi %struct.Memory* [ %4741, %block_400fef ], [ %2630, %block_4011eb ]
  %5020 = load i64, i64* %PC
  %5021 = add i64 %5020, 8
  store i64 %5021, i64* %PC
  %5022 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %5023 = sub i32 %5022, 6
  %5024 = icmp ult i32 %5022, 6
  %5025 = zext i1 %5024 to i8
  %5026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5025, i8* %5026, align 1, !tbaa !2432
  %5027 = and i32 %5023, 255
  %5028 = call i32 @llvm.ctpop.i32(i32 %5027) #16
  %5029 = trunc i32 %5028 to i8
  %5030 = and i8 %5029, 1
  %5031 = xor i8 %5030, 1
  %5032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5031, i8* %5032, align 1, !tbaa !2446
  %5033 = xor i32 %5022, 6
  %5034 = xor i32 %5033, %5023
  %5035 = lshr i32 %5034, 4
  %5036 = trunc i32 %5035 to i8
  %5037 = and i8 %5036, 1
  %5038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5037, i8* %5038, align 1, !tbaa !2447
  %5039 = icmp eq i32 %5023, 0
  %5040 = zext i1 %5039 to i8
  %5041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5040, i8* %5041, align 1, !tbaa !2448
  %5042 = lshr i32 %5023, 31
  %5043 = trunc i32 %5042 to i8
  %5044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5043, i8* %5044, align 1, !tbaa !2449
  %5045 = lshr i32 %5022, 31
  %5046 = xor i32 %5042, %5045
  %5047 = add nuw nsw i32 %5046, %5045
  %5048 = icmp eq i32 %5047, 2
  %5049 = zext i1 %5048 to i8
  %5050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5049, i8* %5050, align 1, !tbaa !2450
  %5051 = load i64, i64* %PC
  %5052 = add i64 %5051, 631
  %5053 = load i64, i64* %PC
  %5054 = add i64 %5053, 6
  %5055 = load i64, i64* %PC
  %5056 = add i64 %5055, 6
  store i64 %5056, i64* %PC
  %5057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5058 = load i8, i8* %5057, align 1, !tbaa !2449
  %5059 = icmp ne i8 %5058, 0
  %5060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5061 = load i8, i8* %5060, align 1, !tbaa !2450
  %5062 = icmp ne i8 %5061, 0
  %5063 = xor i1 %5059, %5062
  %5064 = xor i1 %5063, true
  %5065 = zext i1 %5064 to i8
  store i8 %5065, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5067 = select i1 %5063, i64 %5054, i64 %5052
  store i64 %5067, i64* %5066, align 8, !tbaa !2428
  %5068 = load i8, i8* %BRANCH_TAKEN
  %5069 = icmp eq i8 %5068, 1
  %5070 = load i64, i64* %PC
  br i1 %5069, label %block_40131f, label %block_4010ae

block_4009e7:                                     ; preds = %block_400997, %block_400aee
  %MEMORY.10 = phi %struct.Memory* [ %6395, %block_400997 ], [ %MEMORY.0, %block_400aee ]
  %5071 = load i64, i64* %PC
  %5072 = add i64 %5071, 7
  store i64 %5072, i64* %PC
  %5073 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %5074 = zext i32 %5073 to i64
  store i64 %5074, i64* %RAX, align 8, !tbaa !2428
  %5075 = load i32, i32* %EAX
  %5076 = zext i32 %5075 to i64
  %5077 = load i64, i64* %PC
  %5078 = add i64 %5077, 7
  store i64 %5078, i64* %PC
  %5079 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5080 = sub i32 %5075, %5079
  %5081 = icmp ult i32 %5075, %5079
  %5082 = zext i1 %5081 to i8
  %5083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5082, i8* %5083, align 1, !tbaa !2432
  %5084 = and i32 %5080, 255
  %5085 = call i32 @llvm.ctpop.i32(i32 %5084) #16
  %5086 = trunc i32 %5085 to i8
  %5087 = and i8 %5086, 1
  %5088 = xor i8 %5087, 1
  %5089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5088, i8* %5089, align 1, !tbaa !2446
  %5090 = xor i32 %5079, %5075
  %5091 = xor i32 %5090, %5080
  %5092 = lshr i32 %5091, 4
  %5093 = trunc i32 %5092 to i8
  %5094 = and i8 %5093, 1
  %5095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5094, i8* %5095, align 1, !tbaa !2447
  %5096 = icmp eq i32 %5080, 0
  %5097 = zext i1 %5096 to i8
  %5098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5097, i8* %5098, align 1, !tbaa !2448
  %5099 = lshr i32 %5080, 31
  %5100 = trunc i32 %5099 to i8
  %5101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5100, i8* %5101, align 1, !tbaa !2449
  %5102 = lshr i32 %5075, 31
  %5103 = lshr i32 %5079, 31
  %5104 = xor i32 %5103, %5102
  %5105 = xor i32 %5099, %5102
  %5106 = add nuw nsw i32 %5105, %5104
  %5107 = icmp eq i32 %5106, 2
  %5108 = zext i1 %5107 to i8
  %5109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5108, i8* %5109, align 1, !tbaa !2450
  %5110 = load i64, i64* %PC
  %5111 = add i64 %5110, 288
  %5112 = load i64, i64* %PC
  %5113 = add i64 %5112, 6
  %5114 = load i64, i64* %PC
  %5115 = add i64 %5114, 6
  store i64 %5115, i64* %PC
  %5116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5117 = load i8, i8* %5116, align 1, !tbaa !2449
  %5118 = icmp ne i8 %5117, 0
  %5119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5120 = load i8, i8* %5119, align 1, !tbaa !2450
  %5121 = icmp ne i8 %5120, 0
  %5122 = xor i1 %5118, %5121
  %5123 = xor i1 %5122, true
  %5124 = zext i1 %5123 to i8
  store i8 %5124, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5126 = select i1 %5122, i64 %5113, i64 %5111
  store i64 %5126, i64* %5125, align 8, !tbaa !2428
  %5127 = load i8, i8* %BRANCH_TAKEN
  %5128 = icmp eq i8 %5127, 1
  %5129 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %5128, label %block_400b15, label %block_4009fb

block_40131f:                                     ; preds = %block_4010a0
  %5130 = add i64 %5070, 10
  store i64 %5130, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %5131 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5132 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5133 = bitcast %union.vec128_t* %XMM0 to i8*
  %5134 = load i64, i64* %PC
  %5135 = add i64 %5134, 3
  store i64 %5135, i64* %PC
  %5136 = bitcast i8* %5132 to i64*
  %5137 = load i64, i64* %5136, align 1
  %5138 = getelementptr inbounds i8, i8* %5132, i64 8
  %5139 = bitcast i8* %5138 to i64*
  %5140 = load i64, i64* %5139, align 1
  %5141 = bitcast i8* %5133 to i64*
  %5142 = load i64, i64* %5141, align 1
  %5143 = getelementptr inbounds i8, i8* %5133, i64 8
  %5144 = bitcast i8* %5143 to i64*
  %5145 = load i64, i64* %5144, align 1
  %5146 = xor i64 %5142, %5137
  %5147 = xor i64 %5145, %5140
  %5148 = trunc i64 %5146 to i32
  %5149 = lshr i64 %5146, 32
  %5150 = trunc i64 %5149 to i32
  %5151 = bitcast i8* %5131 to i32*
  store i32 %5148, i32* %5151, align 1, !tbaa !2452
  %5152 = getelementptr inbounds i8, i8* %5131, i64 4
  %5153 = bitcast i8* %5152 to i32*
  store i32 %5150, i32* %5153, align 1, !tbaa !2452
  %5154 = trunc i64 %5147 to i32
  %5155 = getelementptr inbounds i8, i8* %5131, i64 8
  %5156 = bitcast i8* %5155 to i32*
  store i32 %5154, i32* %5156, align 1, !tbaa !2452
  %5157 = lshr i64 %5147, 32
  %5158 = trunc i64 %5157 to i32
  %5159 = getelementptr inbounds i8, i8* %5131, i64 12
  %5160 = bitcast i8* %5159 to i32*
  store i32 %5158, i32* %5160, align 1, !tbaa !2452
  %5161 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5162 = load i64, i64* %PC
  %5163 = add i64 %5162, 8
  store i64 %5163, i64* %PC
  %5164 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 48) to double*)
  %5165 = bitcast i8* %5161 to double*
  store double %5164, double* %5165, align 1, !tbaa !2455
  %5166 = getelementptr inbounds i8, i8* %5161, i64 8
  %5167 = bitcast i8* %5166 to double*
  store double 0.000000e+00, double* %5167, align 1, !tbaa !2455
  %5168 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5169 = load i64, i64* %PC
  %5170 = add i64 %5169, 9
  store i64 %5170, i64* %PC
  %5171 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %5172 = bitcast i8* %5168 to float*
  store float %5171, float* %5172, align 1, !tbaa !2453
  %5173 = getelementptr inbounds i8, i8* %5168, i64 4
  %5174 = bitcast i8* %5173 to float*
  store float 0.000000e+00, float* %5174, align 1, !tbaa !2453
  %5175 = getelementptr inbounds i8, i8* %5168, i64 8
  %5176 = bitcast i8* %5175 to float*
  store float 0.000000e+00, float* %5176, align 1, !tbaa !2453
  %5177 = getelementptr inbounds i8, i8* %5168, i64 12
  %5178 = bitcast i8* %5177 to float*
  store float 0.000000e+00, float* %5178, align 1, !tbaa !2453
  %5179 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5180 = bitcast %union.vec128_t* %XMM2 to i8*
  %5181 = load i64, i64* %PC
  %5182 = add i64 %5181, 4
  store i64 %5182, i64* %PC
  %5183 = bitcast i8* %5180 to <2 x float>*
  %5184 = load <2 x float>, <2 x float>* %5183, align 1
  %5185 = extractelement <2 x float> %5184, i32 0
  %5186 = fpext float %5185 to double
  %5187 = bitcast i8* %5179 to double*
  store double %5186, double* %5187, align 1, !tbaa !2455
  %5188 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5189 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5190 = bitcast %union.vec128_t* %XMM1 to i8*
  %5191 = load i64, i64* %PC
  %5192 = add i64 %5191, 4
  store i64 %5192, i64* %PC
  %5193 = bitcast i8* %5189 to double*
  %5194 = load double, double* %5193, align 1
  %5195 = getelementptr inbounds i8, i8* %5189, i64 8
  %5196 = bitcast i8* %5195 to i64*
  %5197 = load i64, i64* %5196, align 1
  %5198 = bitcast i8* %5190 to double*
  %5199 = load double, double* %5198, align 1
  %5200 = fdiv double %5194, %5199
  %5201 = bitcast i8* %5188 to double*
  store double %5200, double* %5201, align 1, !tbaa !2455
  %5202 = getelementptr inbounds i8, i8* %5188, i64 8
  %5203 = bitcast i8* %5202 to i64*
  store i64 %5197, i64* %5203, align 1, !tbaa !2455
  %5204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5205 = bitcast %union.vec128_t* %XMM2 to i8*
  %5206 = load i64, i64* %PC
  %5207 = add i64 %5206, 4
  store i64 %5207, i64* %PC
  %5208 = bitcast i8* %5204 to <2 x i32>*
  %5209 = load <2 x i32>, <2 x i32>* %5208, align 1
  %5210 = getelementptr inbounds i8, i8* %5204, i64 8
  %5211 = bitcast i8* %5210 to <2 x i32>*
  %5212 = load <2 x i32>, <2 x i32>* %5211, align 1
  %5213 = bitcast i8* %5205 to double*
  %5214 = load double, double* %5213, align 1
  %5215 = fptrunc double %5214 to float
  %5216 = bitcast i8* %5204 to float*
  store float %5215, float* %5216, align 1, !tbaa !2453
  %5217 = extractelement <2 x i32> %5209, i32 1
  %5218 = getelementptr inbounds i8, i8* %5204, i64 4
  %5219 = bitcast i8* %5218 to i32*
  store i32 %5217, i32* %5219, align 1, !tbaa !2453
  %5220 = extractelement <2 x i32> %5212, i32 0
  %5221 = bitcast i8* %5210 to i32*
  store i32 %5220, i32* %5221, align 1, !tbaa !2453
  %5222 = extractelement <2 x i32> %5212, i32 1
  %5223 = getelementptr inbounds i8, i8* %5204, i64 12
  %5224 = bitcast i8* %5223 to i32*
  store i32 %5222, i32* %5224, align 1, !tbaa !2453
  %5225 = bitcast %union.vec128_t* %XMM1 to i8*
  %5226 = load i64, i64* %PC
  %5227 = add i64 %5226, 9
  store i64 %5227, i64* %PC
  %5228 = bitcast i8* %5225 to <2 x float>*
  %5229 = load <2 x float>, <2 x float>* %5228, align 1
  %5230 = extractelement <2 x float> %5229, i32 0
  store float %5230, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %5231 = load i64, i64* %PC
  %5232 = add i64 %5231, 8
  store i64 %5232, i64* %PC
  %5233 = load i64, i64* @stderr
  store i64 %5233, i64* %RDI, align 8, !tbaa !2428
  %5234 = load i64, i64* %PC
  %5235 = add i64 %5234, 2
  store i64 %5235, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %5236 = load i64, i64* %PC
  %5237 = sub i64 %5236, 3740
  %5238 = load i64, i64* %PC
  %5239 = add i64 %5238, 5
  %5240 = load i64, i64* %PC
  %5241 = add i64 %5240, 5
  store i64 %5241, i64* %PC
  %5242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5243 = load i64, i64* %5242, align 8, !tbaa !2428
  %5244 = add i64 %5243, -8
  %5245 = inttoptr i64 %5244 to i64*
  store i64 %5239, i64* %5245
  store i64 %5244, i64* %5242, align 8, !tbaa !2428
  %5246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5237, i64* %5246, align 8, !tbaa !2428
  %5247 = load i64, i64* %PC
  %5248 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5247, %struct.Memory* %MEMORY.9)
  %5249 = load i64, i64* %PC
  %5250 = add i64 %5249, 10
  store i64 %5250, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %5251 = load i64, i64* %PC
  %5252 = add i64 %5251, 8
  store i64 %5252, i64* %PC
  %5253 = load i64, i64* @stderr
  store i64 %5253, i64* %RDI, align 8, !tbaa !2428
  %5254 = load i64, i64* %RBP
  %5255 = sub i64 %5254, 972
  %5256 = load i32, i32* %EAX
  %5257 = zext i32 %5256 to i64
  %5258 = load i64, i64* %PC
  %5259 = add i64 %5258, 6
  store i64 %5259, i64* %PC
  %5260 = inttoptr i64 %5255 to i32*
  store i32 %5256, i32* %5260
  %5261 = load i64, i64* %PC
  %5262 = add i64 %5261, 2
  store i64 %5262, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5263 = load i64, i64* %PC
  %5264 = sub i64 %5263, 3771
  %5265 = load i64, i64* %PC
  %5266 = add i64 %5265, 5
  %5267 = load i64, i64* %PC
  %5268 = add i64 %5267, 5
  store i64 %5268, i64* %PC
  %5269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5270 = load i64, i64* %5269, align 8, !tbaa !2428
  %5271 = add i64 %5270, -8
  %5272 = inttoptr i64 %5271 to i64*
  store i64 %5266, i64* %5272
  store i64 %5271, i64* %5269, align 8, !tbaa !2428
  %5273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5264, i64* %5273, align 8, !tbaa !2428
  %5274 = load i64, i64* %PC
  %5275 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5274, %struct.Memory* %5248)
  %5276 = load i64, i64* %RBP
  %5277 = sub i64 %5276, 976
  %5278 = load i32, i32* %EAX
  %5279 = zext i32 %5278 to i64
  %5280 = load i64, i64* %PC
  %5281 = add i64 %5280, 6
  store i64 %5281, i64* %PC
  %5282 = inttoptr i64 %5277 to i32*
  store i32 %5278, i32* %5282
  %5283 = load i64, i64* %PC
  %5284 = sub i64 %5283, 3526
  %5285 = load i64, i64* %PC
  %5286 = add i64 %5285, 5
  %5287 = load i64, i64* %PC
  %5288 = add i64 %5287, 5
  store i64 %5288, i64* %PC
  %5289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5290 = load i64, i64* %5289, align 8, !tbaa !2428
  %5291 = add i64 %5290, -8
  %5292 = inttoptr i64 %5291 to i64*
  store i64 %5286, i64* %5292
  store i64 %5291, i64* %5289, align 8, !tbaa !2428
  %5293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5284, i64* %5293, align 8, !tbaa !2428
  %5294 = load i64, i64* %PC
  %5295 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %5294, %struct.Memory* %5275)
  %5296 = load i64, i64* %RBP
  %5297 = sub i64 %5296, 80
  %5298 = bitcast %union.vec128_t* %XMM0 to i8*
  %5299 = load i64, i64* %PC
  %5300 = add i64 %5299, 5
  store i64 %5300, i64* %PC
  %5301 = bitcast i8* %5298 to <2 x float>*
  %5302 = load <2 x float>, <2 x float>* %5301, align 1
  %5303 = extractelement <2 x float> %5302, i32 0
  %5304 = inttoptr i64 %5297 to float*
  store float %5303, float* %5304
  %5305 = load i64, i64* %PC
  %5306 = add i64 %5305, 11
  store i64 %5306, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_40139b

block_400b15:                                     ; preds = %block_4009e7
  %5307 = load i64, i64* %PC
  %5308 = add i64 %5307, 8
  store i64 %5308, i64* %PC
  %5309 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 12) to float*)
  %5310 = bitcast i8* %5129 to float*
  store float %5309, float* %5310, align 1, !tbaa !2453
  %5311 = getelementptr inbounds i8, i8* %5129, i64 4
  %5312 = bitcast i8* %5311 to float*
  store float 0.000000e+00, float* %5312, align 1, !tbaa !2453
  %5313 = getelementptr inbounds i8, i8* %5129, i64 8
  %5314 = bitcast i8* %5313 to float*
  store float 0.000000e+00, float* %5314, align 1, !tbaa !2453
  %5315 = getelementptr inbounds i8, i8* %5129, i64 12
  %5316 = bitcast i8* %5315 to float*
  store float 0.000000e+00, float* %5316, align 1, !tbaa !2453
  %5317 = load i64, i64* %PC
  %5318 = add i64 %5317, 7411
  %5319 = load i64, i64* %PC
  %5320 = add i64 %5319, 5
  %5321 = load i64, i64* %PC
  %5322 = add i64 %5321, 5
  store i64 %5322, i64* %PC
  %5323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5324 = load i64, i64* %5323, align 8, !tbaa !2428
  %5325 = add i64 %5324, -8
  %5326 = inttoptr i64 %5325 to i64*
  store i64 %5320, i64* %5326
  store i64 %5325, i64* %5323, align 8, !tbaa !2428
  %5327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5318, i64* %5327, align 8, !tbaa !2428
  %5328 = load i64, i64* %PC
  %5329 = call %struct.Memory* @sub_402810_epslon_renamed_(%struct.State* %0, i64 %5328, %struct.Memory* %MEMORY.10)
  %5330 = load i64, i64* %PC
  %5331 = add i64 %5330, 10
  store i64 %5331, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %5332 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5333 = load i64, i64* %PC
  %5334 = add i64 %5333, 8
  store i64 %5334, i64* %PC
  %5335 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 12) to float*)
  %5336 = bitcast i8* %5332 to float*
  store float %5335, float* %5336, align 1, !tbaa !2453
  %5337 = getelementptr inbounds i8, i8* %5332, i64 4
  %5338 = bitcast i8* %5337 to float*
  store float 0.000000e+00, float* %5338, align 1, !tbaa !2453
  %5339 = getelementptr inbounds i8, i8* %5332, i64 8
  %5340 = bitcast i8* %5339 to float*
  store float 0.000000e+00, float* %5340, align 1, !tbaa !2453
  %5341 = getelementptr inbounds i8, i8* %5332, i64 12
  %5342 = bitcast i8* %5341 to float*
  store float 0.000000e+00, float* %5342, align 1, !tbaa !2453
  %5343 = load i64, i64* %RBP
  %5344 = sub i64 %5343, 36
  %5345 = bitcast %union.vec128_t* %XMM0 to i8*
  %5346 = load i64, i64* %PC
  %5347 = add i64 %5346, 5
  store i64 %5347, i64* %PC
  %5348 = bitcast i8* %5345 to <2 x float>*
  %5349 = load <2 x float>, <2 x float>* %5348, align 1
  %5350 = extractelement <2 x float> %5349, i32 0
  %5351 = inttoptr i64 %5344 to float*
  store float %5350, float* %5351
  %5352 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5353 = load i64, i64* %RBP
  %5354 = sub i64 %5353, 28
  %5355 = load i64, i64* %PC
  %5356 = add i64 %5355, 5
  store i64 %5356, i64* %PC
  %5357 = inttoptr i64 %5354 to float*
  %5358 = load float, float* %5357
  %5359 = bitcast i8* %5352 to float*
  store float %5358, float* %5359, align 1, !tbaa !2453
  %5360 = getelementptr inbounds i8, i8* %5352, i64 4
  %5361 = bitcast i8* %5360 to float*
  store float 0.000000e+00, float* %5361, align 1, !tbaa !2453
  %5362 = getelementptr inbounds i8, i8* %5352, i64 8
  %5363 = bitcast i8* %5362 to float*
  store float 0.000000e+00, float* %5363, align 1, !tbaa !2453
  %5364 = getelementptr inbounds i8, i8* %5352, i64 12
  %5365 = bitcast i8* %5364 to float*
  store float 0.000000e+00, float* %5365, align 1, !tbaa !2453
  %5366 = load i64, i64* %PC
  %5367 = add i64 %5366, 7
  store i64 %5367, i64* %PC
  %5368 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5369 = zext i32 %5368 to i64
  store i64 %5369, i64* %RAX, align 8, !tbaa !2428
  %5370 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5371 = load i32, i32* %EAX
  %5372 = zext i32 %5371 to i64
  %5373 = load i64, i64* %PC
  %5374 = add i64 %5373, 4
  store i64 %5374, i64* %PC
  %5375 = bitcast i8* %5370 to <2 x i32>*
  %5376 = load <2 x i32>, <2 x i32>* %5375, align 1
  %5377 = getelementptr inbounds i8, i8* %5370, i64 8
  %5378 = bitcast i8* %5377 to <2 x i32>*
  %5379 = load <2 x i32>, <2 x i32>* %5378, align 1
  %5380 = sitofp i32 %5371 to float
  %5381 = bitcast i8* %5370 to float*
  store float %5380, float* %5381, align 1, !tbaa !2453
  %5382 = extractelement <2 x i32> %5376, i32 1
  %5383 = getelementptr inbounds i8, i8* %5370, i64 4
  %5384 = bitcast i8* %5383 to i32*
  store i32 %5382, i32* %5384, align 1, !tbaa !2453
  %5385 = extractelement <2 x i32> %5379, i32 0
  %5386 = bitcast i8* %5377 to i32*
  store i32 %5385, i32* %5386, align 1, !tbaa !2453
  %5387 = extractelement <2 x i32> %5379, i32 1
  %5388 = getelementptr inbounds i8, i8* %5370, i64 12
  %5389 = bitcast i8* %5388 to i32*
  store i32 %5387, i32* %5389, align 1, !tbaa !2453
  %5390 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5391 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5392 = load i64, i64* %RBP
  %5393 = sub i64 %5392, 20
  %5394 = load i64, i64* %PC
  %5395 = add i64 %5394, 5
  store i64 %5395, i64* %PC
  %5396 = bitcast i8* %5391 to <2 x float>*
  %5397 = load <2 x float>, <2 x float>* %5396, align 1
  %5398 = getelementptr inbounds i8, i8* %5391, i64 8
  %5399 = bitcast i8* %5398 to <2 x i32>*
  %5400 = load <2 x i32>, <2 x i32>* %5399, align 1
  %5401 = inttoptr i64 %5393 to float*
  %5402 = load float, float* %5401
  %5403 = extractelement <2 x float> %5397, i32 0
  %5404 = fmul float %5403, %5402
  %5405 = bitcast i8* %5390 to float*
  store float %5404, float* %5405, align 1, !tbaa !2453
  %5406 = bitcast <2 x float> %5397 to <2 x i32>
  %5407 = extractelement <2 x i32> %5406, i32 1
  %5408 = getelementptr inbounds i8, i8* %5390, i64 4
  %5409 = bitcast i8* %5408 to i32*
  store i32 %5407, i32* %5409, align 1, !tbaa !2453
  %5410 = extractelement <2 x i32> %5400, i32 0
  %5411 = getelementptr inbounds i8, i8* %5390, i64 8
  %5412 = bitcast i8* %5411 to i32*
  store i32 %5410, i32* %5412, align 1, !tbaa !2453
  %5413 = extractelement <2 x i32> %5400, i32 1
  %5414 = getelementptr inbounds i8, i8* %5390, i64 12
  %5415 = bitcast i8* %5414 to i32*
  store i32 %5413, i32* %5415, align 1, !tbaa !2453
  %5416 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5417 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5418 = load i64, i64* %RBP
  %5419 = sub i64 %5418, 24
  %5420 = load i64, i64* %PC
  %5421 = add i64 %5420, 5
  store i64 %5421, i64* %PC
  %5422 = bitcast i8* %5417 to <2 x float>*
  %5423 = load <2 x float>, <2 x float>* %5422, align 1
  %5424 = getelementptr inbounds i8, i8* %5417, i64 8
  %5425 = bitcast i8* %5424 to <2 x i32>*
  %5426 = load <2 x i32>, <2 x i32>* %5425, align 1
  %5427 = inttoptr i64 %5419 to float*
  %5428 = load float, float* %5427
  %5429 = extractelement <2 x float> %5423, i32 0
  %5430 = fmul float %5429, %5428
  %5431 = bitcast i8* %5416 to float*
  store float %5430, float* %5431, align 1, !tbaa !2453
  %5432 = bitcast <2 x float> %5423 to <2 x i32>
  %5433 = extractelement <2 x i32> %5432, i32 1
  %5434 = getelementptr inbounds i8, i8* %5416, i64 4
  %5435 = bitcast i8* %5434 to i32*
  store i32 %5433, i32* %5435, align 1, !tbaa !2453
  %5436 = extractelement <2 x i32> %5426, i32 0
  %5437 = getelementptr inbounds i8, i8* %5416, i64 8
  %5438 = bitcast i8* %5437 to i32*
  store i32 %5436, i32* %5438, align 1, !tbaa !2453
  %5439 = extractelement <2 x i32> %5426, i32 1
  %5440 = getelementptr inbounds i8, i8* %5416, i64 12
  %5441 = bitcast i8* %5440 to i32*
  store i32 %5439, i32* %5441, align 1, !tbaa !2453
  %5442 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5443 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5444 = load i64, i64* %RBP
  %5445 = sub i64 %5444, 36
  %5446 = load i64, i64* %PC
  %5447 = add i64 %5446, 5
  store i64 %5447, i64* %PC
  %5448 = bitcast i8* %5443 to <2 x float>*
  %5449 = load <2 x float>, <2 x float>* %5448, align 1
  %5450 = getelementptr inbounds i8, i8* %5443, i64 8
  %5451 = bitcast i8* %5450 to <2 x i32>*
  %5452 = load <2 x i32>, <2 x i32>* %5451, align 1
  %5453 = inttoptr i64 %5445 to float*
  %5454 = load float, float* %5453
  %5455 = extractelement <2 x float> %5449, i32 0
  %5456 = fmul float %5455, %5454
  %5457 = bitcast i8* %5442 to float*
  store float %5456, float* %5457, align 1, !tbaa !2453
  %5458 = bitcast <2 x float> %5449 to <2 x i32>
  %5459 = extractelement <2 x i32> %5458, i32 1
  %5460 = getelementptr inbounds i8, i8* %5442, i64 4
  %5461 = bitcast i8* %5460 to i32*
  store i32 %5459, i32* %5461, align 1, !tbaa !2453
  %5462 = extractelement <2 x i32> %5452, i32 0
  %5463 = getelementptr inbounds i8, i8* %5442, i64 8
  %5464 = bitcast i8* %5463 to i32*
  store i32 %5462, i32* %5464, align 1, !tbaa !2453
  %5465 = extractelement <2 x i32> %5452, i32 1
  %5466 = getelementptr inbounds i8, i8* %5442, i64 12
  %5467 = bitcast i8* %5466 to i32*
  store i32 %5465, i32* %5467, align 1, !tbaa !2453
  %5468 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5469 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5470 = bitcast %union.vec128_t* %XMM2 to i8*
  %5471 = load i64, i64* %PC
  %5472 = add i64 %5471, 4
  store i64 %5472, i64* %PC
  %5473 = bitcast i8* %5469 to <2 x float>*
  %5474 = load <2 x float>, <2 x float>* %5473, align 1
  %5475 = getelementptr inbounds i8, i8* %5469, i64 8
  %5476 = bitcast i8* %5475 to <2 x i32>*
  %5477 = load <2 x i32>, <2 x i32>* %5476, align 1
  %5478 = bitcast i8* %5470 to <2 x float>*
  %5479 = load <2 x float>, <2 x float>* %5478, align 1
  %5480 = extractelement <2 x float> %5474, i32 0
  %5481 = extractelement <2 x float> %5479, i32 0
  %5482 = fdiv float %5480, %5481
  %5483 = bitcast i8* %5468 to float*
  store float %5482, float* %5483, align 1, !tbaa !2453
  %5484 = bitcast <2 x float> %5474 to <2 x i32>
  %5485 = extractelement <2 x i32> %5484, i32 1
  %5486 = getelementptr inbounds i8, i8* %5468, i64 4
  %5487 = bitcast i8* %5486 to i32*
  store i32 %5485, i32* %5487, align 1, !tbaa !2453
  %5488 = extractelement <2 x i32> %5477, i32 0
  %5489 = getelementptr inbounds i8, i8* %5468, i64 8
  %5490 = bitcast i8* %5489 to i32*
  store i32 %5488, i32* %5490, align 1, !tbaa !2453
  %5491 = extractelement <2 x i32> %5477, i32 1
  %5492 = getelementptr inbounds i8, i8* %5468, i64 12
  %5493 = bitcast i8* %5492 to i32*
  store i32 %5491, i32* %5493, align 1, !tbaa !2453
  %5494 = load i64, i64* %RBP
  %5495 = sub i64 %5494, 32
  %5496 = bitcast %union.vec128_t* %XMM0 to i8*
  %5497 = load i64, i64* %PC
  %5498 = add i64 %5497, 5
  store i64 %5498, i64* %PC
  %5499 = bitcast i8* %5496 to <2 x float>*
  %5500 = load <2 x float>, <2 x float>* %5499, align 1
  %5501 = extractelement <2 x float> %5500, i32 0
  %5502 = inttoptr i64 %5495 to float*
  store float %5501, float* %5502
  %5503 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5504 = load i64, i64* %RBP
  %5505 = sub i64 %5504, 36
  %5506 = load i64, i64* %PC
  %5507 = add i64 %5506, 5
  store i64 %5507, i64* %PC
  %5508 = inttoptr i64 %5505 to float*
  %5509 = load float, float* %5508
  %5510 = bitcast i8* %5503 to float*
  store float %5509, float* %5510, align 1, !tbaa !2453
  %5511 = getelementptr inbounds i8, i8* %5503, i64 4
  %5512 = bitcast i8* %5511 to float*
  store float 0.000000e+00, float* %5512, align 1, !tbaa !2453
  %5513 = getelementptr inbounds i8, i8* %5503, i64 8
  %5514 = bitcast i8* %5513 to float*
  store float 0.000000e+00, float* %5514, align 1, !tbaa !2453
  %5515 = getelementptr inbounds i8, i8* %5503, i64 12
  %5516 = bitcast i8* %5515 to float*
  store float 0.000000e+00, float* %5516, align 1, !tbaa !2453
  %5517 = load i64, i64* %RBP
  %5518 = sub i64 %5517, 48
  %5519 = bitcast %union.vec128_t* %XMM0 to i8*
  %5520 = load i64, i64* %PC
  %5521 = add i64 %5520, 5
  store i64 %5521, i64* %PC
  %5522 = bitcast i8* %5519 to <2 x float>*
  %5523 = load <2 x float>, <2 x float>* %5522, align 1
  %5524 = extractelement <2 x float> %5523, i32 0
  %5525 = inttoptr i64 %5518 to float*
  store float %5524, float* %5525
  %5526 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5527 = load i64, i64* %PC
  %5528 = add i64 %5527, 9
  store i64 %5528, i64* %PC
  %5529 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to float*)
  %5530 = bitcast i8* %5526 to float*
  store float %5529, float* %5530, align 1, !tbaa !2453
  %5531 = getelementptr inbounds i8, i8* %5526, i64 4
  %5532 = bitcast i8* %5531 to float*
  store float 0.000000e+00, float* %5532, align 1, !tbaa !2453
  %5533 = getelementptr inbounds i8, i8* %5526, i64 8
  %5534 = bitcast i8* %5533 to float*
  store float 0.000000e+00, float* %5534, align 1, !tbaa !2453
  %5535 = getelementptr inbounds i8, i8* %5526, i64 12
  %5536 = bitcast i8* %5535 to float*
  store float 0.000000e+00, float* %5536, align 1, !tbaa !2453
  %5537 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5538 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5539 = bitcast %union.vec128_t* %XMM1 to i8*
  %5540 = load i64, i64* %PC
  %5541 = add i64 %5540, 4
  store i64 %5541, i64* %PC
  %5542 = bitcast i8* %5538 to <2 x float>*
  %5543 = load <2 x float>, <2 x float>* %5542, align 1
  %5544 = getelementptr inbounds i8, i8* %5538, i64 8
  %5545 = bitcast i8* %5544 to <2 x i32>*
  %5546 = load <2 x i32>, <2 x i32>* %5545, align 1
  %5547 = bitcast i8* %5539 to <2 x float>*
  %5548 = load <2 x float>, <2 x float>* %5547, align 1
  %5549 = extractelement <2 x float> %5543, i32 0
  %5550 = extractelement <2 x float> %5548, i32 0
  %5551 = fsub float %5549, %5550
  %5552 = bitcast i8* %5537 to float*
  store float %5551, float* %5552, align 1, !tbaa !2453
  %5553 = bitcast <2 x float> %5543 to <2 x i32>
  %5554 = extractelement <2 x i32> %5553, i32 1
  %5555 = getelementptr inbounds i8, i8* %5537, i64 4
  %5556 = bitcast i8* %5555 to i32*
  store i32 %5554, i32* %5556, align 1, !tbaa !2453
  %5557 = extractelement <2 x i32> %5546, i32 0
  %5558 = getelementptr inbounds i8, i8* %5537, i64 8
  %5559 = bitcast i8* %5558 to i32*
  store i32 %5557, i32* %5559, align 1, !tbaa !2453
  %5560 = extractelement <2 x i32> %5546, i32 1
  %5561 = getelementptr inbounds i8, i8* %5537, i64 12
  %5562 = bitcast i8* %5561 to i32*
  store i32 %5560, i32* %5562, align 1, !tbaa !2453
  %5563 = load i64, i64* %RBP
  %5564 = sub i64 %5563, 52
  %5565 = bitcast %union.vec128_t* %XMM0 to i8*
  %5566 = load i64, i64* %PC
  %5567 = add i64 %5566, 5
  store i64 %5567, i64* %PC
  %5568 = bitcast i8* %5565 to <2 x float>*
  %5569 = load <2 x float>, <2 x float>* %5568, align 1
  %5570 = extractelement <2 x float> %5569, i32 0
  %5571 = inttoptr i64 %5564 to float*
  store float %5570, float* %5571
  %5572 = load i64, i64* %PC
  %5573 = add i64 %5572, 7
  store i64 %5573, i64* %PC
  %5574 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5575 = zext i32 %5574 to i64
  store i64 %5575, i64* %RAX, align 8, !tbaa !2428
  %5576 = load i64, i64* %RAX
  %5577 = load i64, i64* %PC
  %5578 = add i64 %5577, 3
  store i64 %5578, i64* %PC
  %5579 = trunc i64 %5576 to i32
  %5580 = sub i32 %5579, 1
  %5581 = zext i32 %5580 to i64
  store i64 %5581, i64* %RAX, align 8, !tbaa !2428
  %5582 = icmp ult i32 %5579, 1
  %5583 = zext i1 %5582 to i8
  %5584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5583, i8* %5584, align 1, !tbaa !2432
  %5585 = and i32 %5580, 255
  %5586 = call i32 @llvm.ctpop.i32(i32 %5585) #16
  %5587 = trunc i32 %5586 to i8
  %5588 = and i8 %5587, 1
  %5589 = xor i8 %5588, 1
  %5590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5589, i8* %5590, align 1, !tbaa !2446
  %5591 = xor i64 1, %5576
  %5592 = trunc i64 %5591 to i32
  %5593 = xor i32 %5592, %5580
  %5594 = lshr i32 %5593, 4
  %5595 = trunc i32 %5594 to i8
  %5596 = and i8 %5595, 1
  %5597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5596, i8* %5597, align 1, !tbaa !2447
  %5598 = icmp eq i32 %5580, 0
  %5599 = zext i1 %5598 to i8
  %5600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5599, i8* %5600, align 1, !tbaa !2448
  %5601 = lshr i32 %5580, 31
  %5602 = trunc i32 %5601 to i8
  %5603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5602, i8* %5603, align 1, !tbaa !2449
  %5604 = lshr i32 %5579, 31
  %5605 = xor i32 %5601, %5604
  %5606 = add nuw nsw i32 %5605, %5604
  %5607 = icmp eq i32 %5606, 2
  %5608 = zext i1 %5607 to i8
  %5609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5608, i8* %5609, align 1, !tbaa !2450
  %5610 = load i32, i32* %EAX
  %5611 = zext i32 %5610 to i64
  %5612 = load i64, i64* %PC
  %5613 = add i64 %5612, 3
  store i64 %5613, i64* %PC
  %5614 = shl i64 %5611, 32
  %5615 = ashr exact i64 %5614, 32
  store i64 %5615, i64* %RCX, align 8, !tbaa !2428
  %5616 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5617 = load i64, i64* %RCX
  %5618 = mul i64 %5617, 4
  %5619 = add i64 %5618, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %5620 = load i64, i64* %PC
  %5621 = add i64 %5620, 9
  store i64 %5621, i64* %PC
  %5622 = inttoptr i64 %5619 to float*
  %5623 = load float, float* %5622
  %5624 = bitcast i8* %5616 to float*
  store float %5623, float* %5624, align 1, !tbaa !2453
  %5625 = getelementptr inbounds i8, i8* %5616, i64 4
  %5626 = bitcast i8* %5625 to float*
  store float 0.000000e+00, float* %5626, align 1, !tbaa !2453
  %5627 = getelementptr inbounds i8, i8* %5616, i64 8
  %5628 = bitcast i8* %5627 to float*
  store float 0.000000e+00, float* %5628, align 1, !tbaa !2453
  %5629 = getelementptr inbounds i8, i8* %5616, i64 12
  %5630 = bitcast i8* %5629 to float*
  store float 0.000000e+00, float* %5630, align 1, !tbaa !2453
  %5631 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5632 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5633 = bitcast %union.vec128_t* %XMM1 to i8*
  %5634 = load i64, i64* %PC
  %5635 = add i64 %5634, 4
  store i64 %5635, i64* %PC
  %5636 = bitcast i8* %5632 to <2 x float>*
  %5637 = load <2 x float>, <2 x float>* %5636, align 1
  %5638 = getelementptr inbounds i8, i8* %5632, i64 8
  %5639 = bitcast i8* %5638 to <2 x i32>*
  %5640 = load <2 x i32>, <2 x i32>* %5639, align 1
  %5641 = bitcast i8* %5633 to <2 x float>*
  %5642 = load <2 x float>, <2 x float>* %5641, align 1
  %5643 = extractelement <2 x float> %5637, i32 0
  %5644 = extractelement <2 x float> %5642, i32 0
  %5645 = fsub float %5643, %5644
  %5646 = bitcast i8* %5631 to float*
  store float %5645, float* %5646, align 1, !tbaa !2453
  %5647 = bitcast <2 x float> %5637 to <2 x i32>
  %5648 = extractelement <2 x i32> %5647, i32 1
  %5649 = getelementptr inbounds i8, i8* %5631, i64 4
  %5650 = bitcast i8* %5649 to i32*
  store i32 %5648, i32* %5650, align 1, !tbaa !2453
  %5651 = extractelement <2 x i32> %5640, i32 0
  %5652 = getelementptr inbounds i8, i8* %5631, i64 8
  %5653 = bitcast i8* %5652 to i32*
  store i32 %5651, i32* %5653, align 1, !tbaa !2453
  %5654 = extractelement <2 x i32> %5640, i32 1
  %5655 = getelementptr inbounds i8, i8* %5631, i64 12
  %5656 = bitcast i8* %5655 to i32*
  store i32 %5654, i32* %5656, align 1, !tbaa !2453
  %5657 = load i64, i64* %RBP
  %5658 = sub i64 %5657, 56
  %5659 = bitcast %union.vec128_t* %XMM0 to i8*
  %5660 = load i64, i64* %PC
  %5661 = add i64 %5660, 5
  store i64 %5661, i64* %PC
  %5662 = bitcast i8* %5659 to <2 x float>*
  %5663 = load <2 x float>, <2 x float>* %5662, align 1
  %5664 = extractelement <2 x float> %5663, i32 0
  %5665 = inttoptr i64 %5658 to float*
  store float %5664, float* %5665
  %5666 = load i64, i64* %PC
  %5667 = add i64 %5666, 8
  store i64 %5667, i64* %PC
  %5668 = load i64, i64* @stderr
  store i64 %5668, i64* %RDI, align 8, !tbaa !2428
  %5669 = load i64, i64* %PC
  %5670 = add i64 %5669, 2
  store i64 %5670, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5671 = load i64, i64* %PC
  %5672 = sub i64 %5671, 1766
  %5673 = load i64, i64* %PC
  %5674 = add i64 %5673, 5
  %5675 = load i64, i64* %PC
  %5676 = add i64 %5675, 5
  store i64 %5676, i64* %PC
  %5677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5678 = load i64, i64* %5677, align 8, !tbaa !2428
  %5679 = add i64 %5678, -8
  %5680 = inttoptr i64 %5679 to i64*
  store i64 %5674, i64* %5680
  store i64 %5679, i64* %5677, align 8, !tbaa !2428
  %5681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5672, i64* %5681, align 8, !tbaa !2428
  %5682 = load i64, i64* %PC
  %5683 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5682, %struct.Memory* %5329)
  %5684 = load i64, i64* %PC
  %5685 = add i64 %5684, 10
  store i64 %5685, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %5686 = load i64, i64* %PC
  %5687 = add i64 %5686, 8
  store i64 %5687, i64* %PC
  %5688 = load i64, i64* @stderr
  store i64 %5688, i64* %RDI, align 8, !tbaa !2428
  %5689 = load i64, i64* %RBP
  %5690 = sub i64 %5689, 908
  %5691 = load i32, i32* %EAX
  %5692 = zext i32 %5691 to i64
  %5693 = load i64, i64* %PC
  %5694 = add i64 %5693, 6
  store i64 %5694, i64* %PC
  %5695 = inttoptr i64 %5690 to i32*
  store i32 %5691, i32* %5695
  %5696 = load i64, i64* %PC
  %5697 = add i64 %5696, 2
  store i64 %5697, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5698 = load i64, i64* %PC
  %5699 = sub i64 %5698, 1797
  %5700 = load i64, i64* %PC
  %5701 = add i64 %5700, 5
  %5702 = load i64, i64* %PC
  %5703 = add i64 %5702, 5
  store i64 %5703, i64* %PC
  %5704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5705 = load i64, i64* %5704, align 8, !tbaa !2428
  %5706 = add i64 %5705, -8
  %5707 = inttoptr i64 %5706 to i64*
  store i64 %5701, i64* %5707
  store i64 %5706, i64* %5704, align 8, !tbaa !2428
  %5708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5699, i64* %5708, align 8, !tbaa !2428
  %5709 = load i64, i64* %PC
  %5710 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5709, %struct.Memory* %5683)
  %5711 = load i64, i64* %PC
  %5712 = add i64 %5711, 10
  store i64 %5712, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %5713 = load i64, i64* %PC
  %5714 = add i64 %5713, 8
  store i64 %5714, i64* %PC
  %5715 = load i64, i64* @stderr
  store i64 %5715, i64* %RDI, align 8, !tbaa !2428
  %5716 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5717 = load i64, i64* %RBP
  %5718 = sub i64 %5717, 32
  %5719 = load i64, i64* %PC
  %5720 = add i64 %5719, 5
  store i64 %5720, i64* %PC
  %5721 = inttoptr i64 %5718 to float*
  %5722 = load float, float* %5721
  %5723 = bitcast i8* %5716 to float*
  store float %5722, float* %5723, align 1, !tbaa !2453
  %5724 = getelementptr inbounds i8, i8* %5716, i64 4
  %5725 = bitcast i8* %5724 to float*
  store float 0.000000e+00, float* %5725, align 1, !tbaa !2453
  %5726 = getelementptr inbounds i8, i8* %5716, i64 8
  %5727 = bitcast i8* %5726 to float*
  store float 0.000000e+00, float* %5727, align 1, !tbaa !2453
  %5728 = getelementptr inbounds i8, i8* %5716, i64 12
  %5729 = bitcast i8* %5728 to float*
  store float 0.000000e+00, float* %5729, align 1, !tbaa !2453
  %5730 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5731 = bitcast %union.vec128_t* %XMM0 to i8*
  %5732 = load i64, i64* %PC
  %5733 = add i64 %5732, 4
  store i64 %5733, i64* %PC
  %5734 = bitcast i8* %5731 to <2 x float>*
  %5735 = load <2 x float>, <2 x float>* %5734, align 1
  %5736 = extractelement <2 x float> %5735, i32 0
  %5737 = fpext float %5736 to double
  %5738 = bitcast i8* %5730 to double*
  store double %5737, double* %5738, align 1, !tbaa !2455
  %5739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5740 = load i64, i64* %RBP
  %5741 = sub i64 %5740, 28
  %5742 = load i64, i64* %PC
  %5743 = add i64 %5742, 5
  store i64 %5743, i64* %PC
  %5744 = inttoptr i64 %5741 to float*
  %5745 = load float, float* %5744
  %5746 = bitcast i8* %5739 to float*
  store float %5745, float* %5746, align 1, !tbaa !2453
  %5747 = getelementptr inbounds i8, i8* %5739, i64 4
  %5748 = bitcast i8* %5747 to float*
  store float 0.000000e+00, float* %5748, align 1, !tbaa !2453
  %5749 = getelementptr inbounds i8, i8* %5739, i64 8
  %5750 = bitcast i8* %5749 to float*
  store float 0.000000e+00, float* %5750, align 1, !tbaa !2453
  %5751 = getelementptr inbounds i8, i8* %5739, i64 12
  %5752 = bitcast i8* %5751 to float*
  store float 0.000000e+00, float* %5752, align 1, !tbaa !2453
  %5753 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5754 = bitcast %union.vec128_t* %XMM1 to i8*
  %5755 = load i64, i64* %PC
  %5756 = add i64 %5755, 4
  store i64 %5756, i64* %PC
  %5757 = bitcast i8* %5754 to <2 x float>*
  %5758 = load <2 x float>, <2 x float>* %5757, align 1
  %5759 = extractelement <2 x float> %5758, i32 0
  %5760 = fpext float %5759 to double
  %5761 = bitcast i8* %5753 to double*
  store double %5760, double* %5761, align 1, !tbaa !2455
  %5762 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5763 = load i64, i64* %RBP
  %5764 = sub i64 %5763, 48
  %5765 = load i64, i64* %PC
  %5766 = add i64 %5765, 5
  store i64 %5766, i64* %PC
  %5767 = inttoptr i64 %5764 to float*
  %5768 = load float, float* %5767
  %5769 = bitcast i8* %5762 to float*
  store float %5768, float* %5769, align 1, !tbaa !2453
  %5770 = getelementptr inbounds i8, i8* %5762, i64 4
  %5771 = bitcast i8* %5770 to float*
  store float 0.000000e+00, float* %5771, align 1, !tbaa !2453
  %5772 = getelementptr inbounds i8, i8* %5762, i64 8
  %5773 = bitcast i8* %5772 to float*
  store float 0.000000e+00, float* %5773, align 1, !tbaa !2453
  %5774 = getelementptr inbounds i8, i8* %5762, i64 12
  %5775 = bitcast i8* %5774 to float*
  store float 0.000000e+00, float* %5775, align 1, !tbaa !2453
  %5776 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5777 = bitcast %union.vec128_t* %XMM2 to i8*
  %5778 = load i64, i64* %PC
  %5779 = add i64 %5778, 4
  store i64 %5779, i64* %PC
  %5780 = bitcast i8* %5777 to <2 x float>*
  %5781 = load <2 x float>, <2 x float>* %5780, align 1
  %5782 = extractelement <2 x float> %5781, i32 0
  %5783 = fpext float %5782 to double
  %5784 = bitcast i8* %5776 to double*
  store double %5783, double* %5784, align 1, !tbaa !2455
  %5785 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5786 = load i64, i64* %RBP
  %5787 = sub i64 %5786, 52
  %5788 = load i64, i64* %PC
  %5789 = add i64 %5788, 5
  store i64 %5789, i64* %PC
  %5790 = inttoptr i64 %5787 to float*
  %5791 = load float, float* %5790
  %5792 = bitcast i8* %5785 to float*
  store float %5791, float* %5792, align 1, !tbaa !2453
  %5793 = getelementptr inbounds i8, i8* %5785, i64 4
  %5794 = bitcast i8* %5793 to float*
  store float 0.000000e+00, float* %5794, align 1, !tbaa !2453
  %5795 = getelementptr inbounds i8, i8* %5785, i64 8
  %5796 = bitcast i8* %5795 to float*
  store float 0.000000e+00, float* %5796, align 1, !tbaa !2453
  %5797 = getelementptr inbounds i8, i8* %5785, i64 12
  %5798 = bitcast i8* %5797 to float*
  store float 0.000000e+00, float* %5798, align 1, !tbaa !2453
  %5799 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5800 = bitcast %union.vec128_t* %XMM3 to i8*
  %5801 = load i64, i64* %PC
  %5802 = add i64 %5801, 4
  store i64 %5802, i64* %PC
  %5803 = bitcast i8* %5800 to <2 x float>*
  %5804 = load <2 x float>, <2 x float>* %5803, align 1
  %5805 = extractelement <2 x float> %5804, i32 0
  %5806 = fpext float %5805 to double
  %5807 = bitcast i8* %5799 to double*
  store double %5806, double* %5807, align 1, !tbaa !2455
  %5808 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5809 = load i64, i64* %RBP
  %5810 = sub i64 %5809, 56
  %5811 = load i64, i64* %PC
  %5812 = add i64 %5811, 5
  store i64 %5812, i64* %PC
  %5813 = inttoptr i64 %5810 to float*
  %5814 = load float, float* %5813
  %5815 = bitcast i8* %5808 to float*
  store float %5814, float* %5815, align 1, !tbaa !2453
  %5816 = getelementptr inbounds i8, i8* %5808, i64 4
  %5817 = bitcast i8* %5816 to float*
  store float 0.000000e+00, float* %5817, align 1, !tbaa !2453
  %5818 = getelementptr inbounds i8, i8* %5808, i64 8
  %5819 = bitcast i8* %5818 to float*
  store float 0.000000e+00, float* %5819, align 1, !tbaa !2453
  %5820 = getelementptr inbounds i8, i8* %5808, i64 12
  %5821 = bitcast i8* %5820 to float*
  store float 0.000000e+00, float* %5821, align 1, !tbaa !2453
  %5822 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5823 = bitcast %union.vec128_t* %XMM4 to i8*
  %5824 = load i64, i64* %PC
  %5825 = add i64 %5824, 4
  store i64 %5825, i64* %PC
  %5826 = bitcast i8* %5823 to <2 x float>*
  %5827 = load <2 x float>, <2 x float>* %5826, align 1
  %5828 = extractelement <2 x float> %5827, i32 0
  %5829 = fpext float %5828 to double
  %5830 = bitcast i8* %5822 to double*
  store double %5829, double* %5830, align 1, !tbaa !2455
  %5831 = load i64, i64* %RBP
  %5832 = sub i64 %5831, 912
  %5833 = load i32, i32* %EAX
  %5834 = zext i32 %5833 to i64
  %5835 = load i64, i64* %PC
  %5836 = add i64 %5835, 6
  store i64 %5836, i64* %PC
  %5837 = inttoptr i64 %5832 to i32*
  store i32 %5833, i32* %5837
  %5838 = load i64, i64* %PC
  %5839 = add i64 %5838, 2
  store i64 %5839, i64* %PC
  store i8 5, i8* %AL, align 1, !tbaa !2451
  %5840 = load i64, i64* %PC
  %5841 = sub i64 %5840, 1873
  %5842 = load i64, i64* %PC
  %5843 = add i64 %5842, 5
  %5844 = load i64, i64* %PC
  %5845 = add i64 %5844, 5
  store i64 %5845, i64* %PC
  %5846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5847 = load i64, i64* %5846, align 8, !tbaa !2428
  %5848 = add i64 %5847, -8
  %5849 = inttoptr i64 %5848 to i64*
  store i64 %5843, i64* %5849
  store i64 %5848, i64* %5846, align 8, !tbaa !2428
  %5850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5841, i64* %5850, align 8, !tbaa !2428
  %5851 = load i64, i64* %PC
  %5852 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5851, %struct.Memory* %5710)
  %5853 = load i64, i64* %PC
  %5854 = add i64 %5853, 10
  store i64 %5854, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %5855 = load i64, i64* %PC
  %5856 = add i64 %5855, 8
  store i64 %5856, i64* %PC
  %5857 = load i64, i64* @stderr
  store i64 %5857, i64* %RDI, align 8, !tbaa !2428
  %5858 = load i64, i64* %PC
  %5859 = add i64 %5858, 7
  store i64 %5859, i64* %PC
  %5860 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5861 = zext i32 %5860 to i64
  store i64 %5861, i64* %RDX, align 8, !tbaa !2428
  %5862 = load i64, i64* %RBP
  %5863 = sub i64 %5862, 916
  %5864 = load i32, i32* %EAX
  %5865 = zext i32 %5864 to i64
  %5866 = load i64, i64* %PC
  %5867 = add i64 %5866, 6
  store i64 %5867, i64* %PC
  %5868 = inttoptr i64 %5863 to i32*
  store i32 %5864, i32* %5868
  %5869 = load i64, i64* %PC
  %5870 = add i64 %5869, 2
  store i64 %5870, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5871 = load i64, i64* %PC
  %5872 = sub i64 %5871, 1911
  %5873 = load i64, i64* %PC
  %5874 = add i64 %5873, 5
  %5875 = load i64, i64* %PC
  %5876 = add i64 %5875, 5
  store i64 %5876, i64* %PC
  %5877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5878 = load i64, i64* %5877, align 8, !tbaa !2428
  %5879 = add i64 %5878, -8
  %5880 = inttoptr i64 %5879 to i64*
  store i64 %5874, i64* %5880
  store i64 %5879, i64* %5877, align 8, !tbaa !2428
  %5881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5872, i64* %5881, align 8, !tbaa !2428
  %5882 = load i64, i64* %PC
  %5883 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5882, %struct.Memory* %5852)
  %5884 = load i64, i64* %PC
  %5885 = add i64 %5884, 10
  store i64 %5885, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %5886 = load i64, i64* %PC
  %5887 = add i64 %5886, 8
  store i64 %5887, i64* %PC
  %5888 = load i64, i64* @stderr
  store i64 %5888, i64* %RDI, align 8, !tbaa !2428
  %5889 = load i64, i64* %PC
  %5890 = add i64 %5889, 7
  store i64 %5890, i64* %PC
  %5891 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %5892 = zext i32 %5891 to i64
  store i64 %5892, i64* %RDX, align 8, !tbaa !2428
  %5893 = load i64, i64* %RBP
  %5894 = sub i64 %5893, 920
  %5895 = load i32, i32* %EAX
  %5896 = zext i32 %5895 to i64
  %5897 = load i64, i64* %PC
  %5898 = add i64 %5897, 6
  store i64 %5898, i64* %PC
  %5899 = inttoptr i64 %5894 to i32*
  store i32 %5895, i32* %5899
  %5900 = load i64, i64* %PC
  %5901 = add i64 %5900, 2
  store i64 %5901, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5902 = load i64, i64* %PC
  %5903 = sub i64 %5902, 1949
  %5904 = load i64, i64* %PC
  %5905 = add i64 %5904, 5
  %5906 = load i64, i64* %PC
  %5907 = add i64 %5906, 5
  store i64 %5907, i64* %PC
  %5908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5909 = load i64, i64* %5908, align 8, !tbaa !2428
  %5910 = add i64 %5909, -8
  %5911 = inttoptr i64 %5910 to i64*
  store i64 %5905, i64* %5911
  store i64 %5910, i64* %5908, align 8, !tbaa !2428
  %5912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5903, i64* %5912, align 8, !tbaa !2428
  %5913 = load i64, i64* %PC
  %5914 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5913, %struct.Memory* %5883)
  %5915 = load i64, i64* %PC
  %5916 = add i64 %5915, 10
  store i64 %5916, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %5917 = load i64, i64* %PC
  %5918 = add i64 %5917, 8
  store i64 %5918, i64* %PC
  %5919 = load i64, i64* @stderr
  store i64 %5919, i64* %RDI, align 8, !tbaa !2428
  %5920 = load i64, i64* %RBP
  %5921 = sub i64 %5920, 924
  %5922 = load i32, i32* %EAX
  %5923 = zext i32 %5922 to i64
  %5924 = load i64, i64* %PC
  %5925 = add i64 %5924, 6
  store i64 %5925, i64* %PC
  %5926 = inttoptr i64 %5921 to i32*
  store i32 %5922, i32* %5926
  %5927 = load i64, i64* %PC
  %5928 = add i64 %5927, 2
  store i64 %5928, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5929 = load i64, i64* %PC
  %5930 = sub i64 %5929, 1980
  %5931 = load i64, i64* %PC
  %5932 = add i64 %5931, 5
  %5933 = load i64, i64* %PC
  %5934 = add i64 %5933, 5
  store i64 %5934, i64* %PC
  %5935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5936 = load i64, i64* %5935, align 8, !tbaa !2428
  %5937 = add i64 %5936, -8
  %5938 = inttoptr i64 %5937 to i64*
  store i64 %5932, i64* %5938
  store i64 %5937, i64* %5935, align 8, !tbaa !2428
  %5939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5930, i64* %5939, align 8, !tbaa !2428
  %5940 = load i64, i64* %PC
  %5941 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5940, %struct.Memory* %5914)
  %5942 = load i64, i64* %PC
  %5943 = add i64 %5942, 10
  store i64 %5943, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %5944 = load i64, i64* %PC
  %5945 = add i64 %5944, 8
  store i64 %5945, i64* %PC
  %5946 = load i64, i64* @stderr
  store i64 %5946, i64* %RDI, align 8, !tbaa !2428
  %5947 = load i64, i64* %RBP
  %5948 = sub i64 %5947, 928
  %5949 = load i32, i32* %EAX
  %5950 = zext i32 %5949 to i64
  %5951 = load i64, i64* %PC
  %5952 = add i64 %5951, 6
  store i64 %5952, i64* %PC
  %5953 = inttoptr i64 %5948 to i32*
  store i32 %5949, i32* %5953
  %5954 = load i64, i64* %PC
  %5955 = add i64 %5954, 2
  store i64 %5955, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5956 = load i64, i64* %PC
  %5957 = sub i64 %5956, 2011
  %5958 = load i64, i64* %PC
  %5959 = add i64 %5958, 5
  %5960 = load i64, i64* %PC
  %5961 = add i64 %5960, 5
  store i64 %5961, i64* %PC
  %5962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5963 = load i64, i64* %5962, align 8, !tbaa !2428
  %5964 = add i64 %5963, -8
  %5965 = inttoptr i64 %5964 to i64*
  store i64 %5959, i64* %5965
  store i64 %5964, i64* %5962, align 8, !tbaa !2428
  %5966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5957, i64* %5966, align 8, !tbaa !2428
  %5967 = load i64, i64* %PC
  %5968 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5967, %struct.Memory* %5941)
  %5969 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5970 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5971 = bitcast %union.vec128_t* %XMM0 to i8*
  %5972 = load i64, i64* %PC
  %5973 = add i64 %5972, 3
  store i64 %5973, i64* %PC
  %5974 = bitcast i8* %5970 to i64*
  %5975 = load i64, i64* %5974, align 1
  %5976 = getelementptr inbounds i8, i8* %5970, i64 8
  %5977 = bitcast i8* %5976 to i64*
  %5978 = load i64, i64* %5977, align 1
  %5979 = bitcast i8* %5971 to i64*
  %5980 = load i64, i64* %5979, align 1
  %5981 = getelementptr inbounds i8, i8* %5971, i64 8
  %5982 = bitcast i8* %5981 to i64*
  %5983 = load i64, i64* %5982, align 1
  %5984 = xor i64 %5980, %5975
  %5985 = xor i64 %5983, %5978
  %5986 = trunc i64 %5984 to i32
  %5987 = lshr i64 %5984, 32
  %5988 = trunc i64 %5987 to i32
  %5989 = bitcast i8* %5969 to i32*
  store i32 %5986, i32* %5989, align 1, !tbaa !2452
  %5990 = getelementptr inbounds i8, i8* %5969, i64 4
  %5991 = bitcast i8* %5990 to i32*
  store i32 %5988, i32* %5991, align 1, !tbaa !2452
  %5992 = trunc i64 %5985 to i32
  %5993 = getelementptr inbounds i8, i8* %5969, i64 8
  %5994 = bitcast i8* %5993 to i32*
  store i32 %5992, i32* %5994, align 1, !tbaa !2452
  %5995 = lshr i64 %5985, 32
  %5996 = trunc i64 %5995 to i32
  %5997 = getelementptr inbounds i8, i8* %5969, i64 12
  %5998 = bitcast i8* %5997 to i32*
  store i32 %5996, i32* %5998, align 1, !tbaa !2452
  %5999 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6000 = load i64, i64* %RBP
  %6001 = sub i64 %6000, 16
  %6002 = load i64, i64* %PC
  %6003 = add i64 %6002, 5
  store i64 %6003, i64* %PC
  %6004 = inttoptr i64 %6001 to float*
  %6005 = load float, float* %6004
  %6006 = bitcast i8* %5999 to float*
  store float %6005, float* %6006, align 1, !tbaa !2453
  %6007 = getelementptr inbounds i8, i8* %5999, i64 4
  %6008 = bitcast i8* %6007 to float*
  store float 0.000000e+00, float* %6008, align 1, !tbaa !2453
  %6009 = getelementptr inbounds i8, i8* %5999, i64 8
  %6010 = bitcast i8* %6009 to float*
  store float 0.000000e+00, float* %6010, align 1, !tbaa !2453
  %6011 = getelementptr inbounds i8, i8* %5999, i64 12
  %6012 = bitcast i8* %6011 to float*
  store float 0.000000e+00, float* %6012, align 1, !tbaa !2453
  %6013 = bitcast %union.vec128_t* %XMM1 to i8*
  %6014 = load i64, i64* %PC
  %6015 = add i64 %6014, 9
  store i64 %6015, i64* %PC
  %6016 = bitcast i8* %6013 to <2 x float>*
  %6017 = load <2 x float>, <2 x float>* %6016, align 1
  %6018 = extractelement <2 x float> %6017, i32 0
  store float %6018, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*)
  %6019 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6020 = load i64, i64* %RBP
  %6021 = sub i64 %6020, 16
  %6022 = load i64, i64* %PC
  %6023 = add i64 %6022, 5
  store i64 %6023, i64* %PC
  %6024 = inttoptr i64 %6021 to float*
  %6025 = load float, float* %6024
  %6026 = bitcast i8* %6019 to float*
  store float %6025, float* %6026, align 1, !tbaa !2453
  %6027 = getelementptr inbounds i8, i8* %6019, i64 4
  %6028 = bitcast i8* %6027 to float*
  store float 0.000000e+00, float* %6028, align 1, !tbaa !2453
  %6029 = getelementptr inbounds i8, i8* %6019, i64 8
  %6030 = bitcast i8* %6029 to float*
  store float 0.000000e+00, float* %6030, align 1, !tbaa !2453
  %6031 = getelementptr inbounds i8, i8* %6019, i64 12
  %6032 = bitcast i8* %6031 to float*
  store float 0.000000e+00, float* %6032, align 1, !tbaa !2453
  %6033 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6034 = bitcast %union.vec128_t* %XMM1 to i8*
  %6035 = load i64, i64* %PC
  %6036 = add i64 %6035, 4
  store i64 %6036, i64* %PC
  %6037 = bitcast i8* %6034 to <2 x float>*
  %6038 = load <2 x float>, <2 x float>* %6037, align 1
  %6039 = extractelement <2 x float> %6038, i32 0
  %6040 = fpext float %6039 to double
  %6041 = bitcast i8* %6033 to double*
  store double %6040, double* %6041, align 1, !tbaa !2455
  %6042 = bitcast %union.vec128_t* %XMM1 to i8*
  %6043 = bitcast %union.vec128_t* %XMM0 to i8*
  %6044 = load i64, i64* %PC
  %6045 = add i64 %6044, 4
  store i64 %6045, i64* %PC
  %6046 = bitcast i8* %6042 to double*
  %6047 = load double, double* %6046, align 1
  %6048 = bitcast i8* %6043 to double*
  %6049 = load double, double* %6048, align 1
  %6050 = fcmp uno double %6047, %6049
  br i1 %6050, label %6051, label %6063

; <label>:6051:                                   ; preds = %block_400b15
  %6052 = fadd double %6047, %6049
  %6053 = bitcast double %6052 to i64
  %6054 = and i64 %6053, 9221120237041090560
  %6055 = icmp eq i64 %6054, 9218868437227405312
  %6056 = and i64 %6053, 2251799813685247
  %6057 = icmp ne i64 %6056, 0
  %6058 = and i1 %6055, %6057
  br i1 %6058, label %6059, label %6069

; <label>:6059:                                   ; preds = %6051
  %6060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6061 = load i64, i64* %6060, align 8, !tbaa !2428
  %6062 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6061, %struct.Memory* %5968) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:6063:                                   ; preds = %block_400b15
  %6064 = fcmp ogt double %6047, %6049
  br i1 %6064, label %6069, label %6065

; <label>:6065:                                   ; preds = %6063
  %6066 = fcmp olt double %6047, %6049
  br i1 %6066, label %6069, label %6067

; <label>:6067:                                   ; preds = %6065
  %6068 = fcmp oeq double %6047, %6049
  br i1 %6068, label %6069, label %6076

; <label>:6069:                                   ; preds = %6067, %6065, %6063, %6051
  %6070 = phi i8 [ 0, %6063 ], [ 0, %6065 ], [ 1, %6067 ], [ 1, %6051 ]
  %6071 = phi i8 [ 0, %6063 ], [ 0, %6065 ], [ 0, %6067 ], [ 1, %6051 ]
  %6072 = phi i8 [ 0, %6063 ], [ 1, %6065 ], [ 0, %6067 ], [ 1, %6051 ]
  %6073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6070, i8* %6073, align 1, !tbaa !2451
  %6074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6071, i8* %6074, align 1, !tbaa !2451
  %6075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6072, i8* %6075, align 1, !tbaa !2451
  br label %6076

; <label>:6076:                                   ; preds = %6069, %6067
  %6077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6077, align 1, !tbaa !2451
  %6078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6078, align 1, !tbaa !2451
  %6079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6079, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %6059, %6076
  %6080 = phi %struct.Memory* [ %6062, %6059 ], [ %5968, %6076 ]
  %6081 = load i64, i64* %RBP
  %6082 = sub i64 %6081, 932
  %6083 = load i32, i32* %EAX
  %6084 = zext i32 %6083 to i64
  %6085 = load i64, i64* %PC
  %6086 = add i64 %6085, 6
  store i64 %6086, i64* %PC
  %6087 = inttoptr i64 %6082 to i32*
  store i32 %6083, i32* %6087
  %6088 = load i64, i64* %PC
  %6089 = add i64 %6088, 96
  %6090 = load i64, i64* %PC
  %6091 = add i64 %6090, 6
  %6092 = load i64, i64* %PC
  %6093 = add i64 %6092, 6
  store i64 %6093, i64* %PC
  %6094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6095 = load i8, i8* %6094, align 1, !tbaa !2432
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6097 = load i8, i8* %6096, align 1, !tbaa !2448
  %6098 = or i8 %6097, %6095
  %6099 = icmp ne i8 %6098, 0
  %6100 = zext i1 %6099 to i8
  store i8 %6100, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6102 = select i1 %6099, i64 %6089, i64 %6091
  store i64 %6102, i64* %6101, align 8, !tbaa !2428
  %6103 = load i8, i8* %BRANCH_TAKEN
  %6104 = icmp eq i8 %6103, 1
  %6105 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %6104, label %block_400d24, label %block_400cca

block_40093d:                                     ; preds = %block_400907, %block_400951
  %MEMORY.11 = phi %struct.Memory* [ %7549, %block_400907 ], [ %MEMORY.11, %block_400951 ]
  %6106 = load i64, i64* %PC
  %6107 = add i64 %6106, 7
  store i64 %6107, i64* %PC
  %6108 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6109 = zext i32 %6108 to i64
  store i64 %6109, i64* %RAX, align 8, !tbaa !2428
  %6110 = load i32, i32* %EAX
  %6111 = zext i32 %6110 to i64
  %6112 = load i64, i64* %PC
  %6113 = add i64 %6112, 7
  store i64 %6113, i64* %PC
  %6114 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6115 = sub i32 %6110, %6114
  %6116 = icmp ult i32 %6110, %6114
  %6117 = zext i1 %6116 to i8
  %6118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6117, i8* %6118, align 1, !tbaa !2432
  %6119 = and i32 %6115, 255
  %6120 = call i32 @llvm.ctpop.i32(i32 %6119) #16
  %6121 = trunc i32 %6120 to i8
  %6122 = and i8 %6121, 1
  %6123 = xor i8 %6122, 1
  %6124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6123, i8* %6124, align 1, !tbaa !2446
  %6125 = xor i32 %6114, %6110
  %6126 = xor i32 %6125, %6115
  %6127 = lshr i32 %6126, 4
  %6128 = trunc i32 %6127 to i8
  %6129 = and i8 %6128, 1
  %6130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6129, i8* %6130, align 1, !tbaa !2447
  %6131 = icmp eq i32 %6115, 0
  %6132 = zext i1 %6131 to i8
  %6133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6132, i8* %6133, align 1, !tbaa !2448
  %6134 = lshr i32 %6115, 31
  %6135 = trunc i32 %6134 to i8
  %6136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6135, i8* %6136, align 1, !tbaa !2449
  %6137 = lshr i32 %6110, 31
  %6138 = lshr i32 %6114, 31
  %6139 = xor i32 %6138, %6137
  %6140 = xor i32 %6134, %6137
  %6141 = add nuw nsw i32 %6140, %6139
  %6142 = icmp eq i32 %6141, 2
  %6143 = zext i1 %6142 to i8
  %6144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6143, i8* %6144, align 1, !tbaa !2450
  %6145 = load i64, i64* %PC
  %6146 = add i64 %6145, 76
  %6147 = load i64, i64* %PC
  %6148 = add i64 %6147, 6
  %6149 = load i64, i64* %PC
  %6150 = add i64 %6149, 6
  store i64 %6150, i64* %PC
  %6151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6152 = load i8, i8* %6151, align 1, !tbaa !2449
  %6153 = icmp ne i8 %6152, 0
  %6154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6155 = load i8, i8* %6154, align 1, !tbaa !2450
  %6156 = icmp ne i8 %6155, 0
  %6157 = xor i1 %6153, %6156
  %6158 = xor i1 %6157, true
  %6159 = zext i1 %6158 to i8
  store i8 %6159, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6161 = select i1 %6157, i64 %6148, i64 %6146
  store i64 %6161, i64* %6160, align 8, !tbaa !2428
  %6162 = load i8, i8* %BRANCH_TAKEN
  %6163 = icmp eq i8 %6162, 1
  %6164 = load i64, i64* %PC
  br i1 %6163, label %block_400997, label %block_400951

block_400d9e:                                     ; preds = %block_400d80, %block_400dae
  %MEMORY.12 = phi %struct.Memory* [ %7793, %block_400d80 ], [ %6835, %block_400dae ]
  %6165 = load i64, i64* %PC
  %6166 = add i64 %6165, 7
  store i64 %6166, i64* %PC
  %6167 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6168 = zext i32 %6167 to i64
  store i64 %6168, i64* %RAX, align 8, !tbaa !2428
  %6169 = load i32, i32* %EAX
  %6170 = zext i32 %6169 to i64
  %6171 = load i64, i64* %RBP
  %6172 = sub i64 %6171, 68
  %6173 = load i64, i64* %PC
  %6174 = add i64 %6173, 3
  store i64 %6174, i64* %PC
  %6175 = inttoptr i64 %6172 to i32*
  %6176 = load i32, i32* %6175
  %6177 = sub i32 %6169, %6176
  %6178 = icmp ult i32 %6169, %6176
  %6179 = zext i1 %6178 to i8
  %6180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6179, i8* %6180, align 1, !tbaa !2432
  %6181 = and i32 %6177, 255
  %6182 = call i32 @llvm.ctpop.i32(i32 %6181) #16
  %6183 = trunc i32 %6182 to i8
  %6184 = and i8 %6183, 1
  %6185 = xor i8 %6184, 1
  %6186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6185, i8* %6186, align 1, !tbaa !2446
  %6187 = xor i32 %6176, %6169
  %6188 = xor i32 %6187, %6177
  %6189 = lshr i32 %6188, 4
  %6190 = trunc i32 %6189 to i8
  %6191 = and i8 %6190, 1
  %6192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6191, i8* %6192, align 1, !tbaa !2447
  %6193 = icmp eq i32 %6177, 0
  %6194 = zext i1 %6193 to i8
  %6195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6194, i8* %6195, align 1, !tbaa !2448
  %6196 = lshr i32 %6177, 31
  %6197 = trunc i32 %6196 to i8
  %6198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6197, i8* %6198, align 1, !tbaa !2449
  %6199 = lshr i32 %6169, 31
  %6200 = lshr i32 %6176, 31
  %6201 = xor i32 %6200, %6199
  %6202 = xor i32 %6196, %6199
  %6203 = add nuw nsw i32 %6202, %6201
  %6204 = icmp eq i32 %6203, 2
  %6205 = zext i1 %6204 to i8
  %6206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6205, i8* %6206, align 1, !tbaa !2450
  %6207 = load i64, i64* %PC
  %6208 = add i64 %6207, 71
  %6209 = load i64, i64* %PC
  %6210 = add i64 %6209, 6
  %6211 = load i64, i64* %PC
  %6212 = add i64 %6211, 6
  store i64 %6212, i64* %PC
  %6213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6214 = load i8, i8* %6213, align 1, !tbaa !2449
  %6215 = icmp ne i8 %6214, 0
  %6216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6217 = load i8, i8* %6216, align 1, !tbaa !2450
  %6218 = icmp ne i8 %6217, 0
  %6219 = xor i1 %6215, %6218
  %6220 = xor i1 %6219, true
  %6221 = zext i1 %6220 to i8
  store i8 %6221, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6223 = select i1 %6219, i64 %6210, i64 %6208
  store i64 %6223, i64* %6222, align 8, !tbaa !2428
  %6224 = load i8, i8* %BRANCH_TAKEN
  %6225 = icmp eq i8 %6224, 1
  %6226 = load i64, i64* %PC
  br i1 %6225, label %block_400def, label %block_400dae

block_400ee0:                                     ; preds = %block_400ef4, %block_400ec2
  %MEMORY.13 = phi %struct.Memory* [ %3703, %block_400ec2 ], [ %6500, %block_400ef4 ]
  %6227 = load i64, i64* %PC
  %6228 = add i64 %6227, 7
  store i64 %6228, i64* %PC
  %6229 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6230 = zext i32 %6229 to i64
  store i64 %6230, i64* %RAX, align 8, !tbaa !2428
  %6231 = load i32, i32* %EAX
  %6232 = zext i32 %6231 to i64
  %6233 = load i64, i64* %PC
  %6234 = add i64 %6233, 7
  store i64 %6234, i64* %PC
  %6235 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %6236 = sub i32 %6231, %6235
  %6237 = icmp ult i32 %6231, %6235
  %6238 = zext i1 %6237 to i8
  %6239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6238, i8* %6239, align 1, !tbaa !2432
  %6240 = and i32 %6236, 255
  %6241 = call i32 @llvm.ctpop.i32(i32 %6240) #16
  %6242 = trunc i32 %6241 to i8
  %6243 = and i8 %6242, 1
  %6244 = xor i8 %6243, 1
  %6245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6244, i8* %6245, align 1, !tbaa !2446
  %6246 = xor i32 %6235, %6231
  %6247 = xor i32 %6246, %6236
  %6248 = lshr i32 %6247, 4
  %6249 = trunc i32 %6248 to i8
  %6250 = and i8 %6249, 1
  %6251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6250, i8* %6251, align 1, !tbaa !2447
  %6252 = icmp eq i32 %6236, 0
  %6253 = zext i1 %6252 to i8
  %6254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6253, i8* %6254, align 1, !tbaa !2448
  %6255 = lshr i32 %6236, 31
  %6256 = trunc i32 %6255 to i8
  %6257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6256, i8* %6257, align 1, !tbaa !2449
  %6258 = lshr i32 %6231, 31
  %6259 = lshr i32 %6235, 31
  %6260 = xor i32 %6259, %6258
  %6261 = xor i32 %6255, %6258
  %6262 = add nuw nsw i32 %6261, %6260
  %6263 = icmp eq i32 %6262, 2
  %6264 = zext i1 %6263 to i8
  %6265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6264, i8* %6265, align 1, !tbaa !2450
  %6266 = load i64, i64* %PC
  %6267 = add i64 %6266, 120
  %6268 = load i64, i64* %PC
  %6269 = add i64 %6268, 6
  %6270 = load i64, i64* %PC
  %6271 = add i64 %6270, 6
  store i64 %6271, i64* %PC
  %6272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6273 = load i8, i8* %6272, align 1, !tbaa !2449
  %6274 = icmp ne i8 %6273, 0
  %6275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6276 = load i8, i8* %6275, align 1, !tbaa !2450
  %6277 = icmp ne i8 %6276, 0
  %6278 = xor i1 %6274, %6277
  %6279 = xor i1 %6278, true
  %6280 = zext i1 %6279 to i8
  store i8 %6280, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6282 = select i1 %6278, i64 %6269, i64 %6267
  store i64 %6282, i64* %6281, align 8, !tbaa !2428
  %6283 = load i8, i8* %BRANCH_TAKEN
  %6284 = icmp eq i8 %6283, 1
  %6285 = load i64, i64* %PC
  br i1 %6284, label %block_400f66, label %block_400ef4

block_400a44:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %6286 = load i64, i64* %PC
  %6287 = add i64 %6286, 8
  store i64 %6287, i64* %PC
  %6288 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6289 = sext i32 %6288 to i64
  store i64 %6289, i64* %RAX, align 8, !tbaa !2428
  %6290 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6291 = load i64, i64* %RAX
  %6292 = mul i64 %6291, 4
  %6293 = add i64 %6292, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %6294 = load i64, i64* %PC
  %6295 = add i64 %6294, 9
  store i64 %6295, i64* %PC
  %6296 = inttoptr i64 %6293 to float*
  %6297 = load float, float* %6296
  %6298 = bitcast i8* %6290 to float*
  store float %6297, float* %6298, align 1, !tbaa !2453
  %6299 = getelementptr inbounds i8, i8* %6290, i64 4
  %6300 = bitcast i8* %6299 to float*
  store float 0.000000e+00, float* %6300, align 1, !tbaa !2453
  %6301 = getelementptr inbounds i8, i8* %6290, i64 8
  %6302 = bitcast i8* %6301 to float*
  store float 0.000000e+00, float* %6302, align 1, !tbaa !2453
  %6303 = getelementptr inbounds i8, i8* %6290, i64 12
  %6304 = bitcast i8* %6303 to float*
  store float 0.000000e+00, float* %6304, align 1, !tbaa !2453
  %6305 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6306 = bitcast %union.vec128_t* %XMM0 to i8*
  %6307 = load i64, i64* %PC
  %6308 = add i64 %6307, 4
  store i64 %6308, i64* %PC
  %6309 = bitcast i8* %6306 to <2 x float>*
  %6310 = load <2 x float>, <2 x float>* %6309, align 1
  %6311 = extractelement <2 x float> %6310, i32 0
  %6312 = fpext float %6311 to double
  %6313 = bitcast i8* %6305 to double*
  store double %6312, double* %6313, align 1, !tbaa !2455
  %6314 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6315 = load i64, i64* %PC
  %6316 = add i64 %6315, 7
  store i64 %6316, i64* %PC
  %6317 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %6318 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %6319 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %6320 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %6321 = bitcast i8* %6314 to float*
  store float %6317, float* %6321, align 1, !tbaa !2453
  %6322 = getelementptr inbounds i8, i8* %6314, i64 4
  %6323 = bitcast i8* %6322 to float*
  store float %6318, float* %6323, align 1, !tbaa !2453
  %6324 = getelementptr inbounds i8, i8* %6314, i64 8
  %6325 = bitcast i8* %6324 to float*
  store float %6319, float* %6325, align 1, !tbaa !2453
  %6326 = getelementptr inbounds i8, i8* %6314, i64 12
  %6327 = bitcast i8* %6326 to float*
  store float %6320, float* %6327, align 1, !tbaa !2453
  %6328 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6329 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6330 = bitcast %union.vec128_t* %XMM1 to i8*
  %6331 = load i64, i64* %PC
  %6332 = add i64 %6331, 4
  store i64 %6332, i64* %PC
  %6333 = bitcast i8* %6329 to i64*
  %6334 = load i64, i64* %6333, align 1
  %6335 = getelementptr inbounds i8, i8* %6329, i64 8
  %6336 = bitcast i8* %6335 to i64*
  %6337 = load i64, i64* %6336, align 1
  %6338 = bitcast i8* %6330 to i64*
  %6339 = load i64, i64* %6338, align 1
  %6340 = getelementptr inbounds i8, i8* %6330, i64 8
  %6341 = bitcast i8* %6340 to i64*
  %6342 = load i64, i64* %6341, align 1
  %6343 = and i64 %6339, %6334
  %6344 = and i64 %6342, %6337
  %6345 = trunc i64 %6343 to i32
  %6346 = lshr i64 %6343, 32
  %6347 = trunc i64 %6346 to i32
  %6348 = bitcast i8* %6328 to i32*
  store i32 %6345, i32* %6348, align 1, !tbaa !2452
  %6349 = getelementptr inbounds i8, i8* %6328, i64 4
  %6350 = bitcast i8* %6349 to i32*
  store i32 %6347, i32* %6350, align 1, !tbaa !2452
  %6351 = trunc i64 %6344 to i32
  %6352 = getelementptr inbounds i8, i8* %6328, i64 8
  %6353 = bitcast i8* %6352 to i32*
  store i32 %6351, i32* %6353, align 1, !tbaa !2452
  %6354 = lshr i64 %6344, 32
  %6355 = trunc i64 %6354 to i32
  %6356 = getelementptr inbounds i8, i8* %6328, i64 12
  %6357 = bitcast i8* %6356 to i32*
  store i32 %6355, i32* %6357, align 1, !tbaa !2452
  %6358 = load i64, i64* %RBP
  %6359 = sub i64 %6358, 896
  %6360 = bitcast %union.vec128_t* %XMM0 to i8*
  %6361 = load i64, i64* %PC
  %6362 = add i64 %6361, 8
  store i64 %6362, i64* %PC
  %6363 = bitcast i8* %6360 to double*
  %6364 = load double, double* %6363, align 1
  %6365 = inttoptr i64 %6359 to double*
  store double %6364, double* %6365
  br label %block_400a6c

block_400997:                                     ; preds = %block_40093d
  %6366 = add i64 %6164, 10
  store i64 %6366, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  %6367 = load i64, i64* %PC
  %6368 = add i64 %6367, 10
  store i64 %6368, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  %6369 = load i64, i64* %PC
  %6370 = add i64 %6369, 10
  store i64 %6370, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %6371 = load i64, i64* %PC
  %6372 = add i64 %6371, 7
  store i64 %6372, i64* %PC
  %6373 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6374 = zext i32 %6373 to i64
  store i64 %6374, i64* %RDI, align 8, !tbaa !2428
  %6375 = load i64, i64* %PC
  %6376 = add i64 %6375, 7
  store i64 %6376, i64* %PC
  %6377 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6378 = zext i32 %6377 to i64
  store i64 %6378, i64* %RDX, align 8, !tbaa !2428
  %6379 = load i64, i64* %PC
  %6380 = add i64 %6379, 7
  store i64 %6380, i64* %PC
  %6381 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %6382 = zext i32 %6381 to i64
  store i64 %6382, i64* %RCX, align 8, !tbaa !2428
  %6383 = load i64, i64* %PC
  %6384 = add i64 %6383, 5702
  %6385 = load i64, i64* %PC
  %6386 = add i64 %6385, 5
  %6387 = load i64, i64* %PC
  %6388 = add i64 %6387, 5
  store i64 %6388, i64* %PC
  %6389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6390 = load i64, i64* %6389, align 8, !tbaa !2428
  %6391 = add i64 %6390, -8
  %6392 = inttoptr i64 %6391 to i64*
  store i64 %6386, i64* %6392
  store i64 %6391, i64* %6389, align 8, !tbaa !2428
  %6393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6384, i64* %6393, align 8, !tbaa !2428
  %6394 = load i64, i64* %PC
  %6395 = call %struct.Memory* @sub_402010_dmxpy_renamed_(%struct.State* %0, i64 %6394, %struct.Memory* %MEMORY.11)
  %6396 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6397 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6398 = bitcast %union.vec128_t* %XMM0 to i8*
  %6399 = load i64, i64* %PC
  %6400 = add i64 %6399, 3
  store i64 %6400, i64* %PC
  %6401 = bitcast i8* %6397 to i64*
  %6402 = load i64, i64* %6401, align 1
  %6403 = getelementptr inbounds i8, i8* %6397, i64 8
  %6404 = bitcast i8* %6403 to i64*
  %6405 = load i64, i64* %6404, align 1
  %6406 = bitcast i8* %6398 to i64*
  %6407 = load i64, i64* %6406, align 1
  %6408 = getelementptr inbounds i8, i8* %6398, i64 8
  %6409 = bitcast i8* %6408 to i64*
  %6410 = load i64, i64* %6409, align 1
  %6411 = xor i64 %6407, %6402
  %6412 = xor i64 %6410, %6405
  %6413 = trunc i64 %6411 to i32
  %6414 = lshr i64 %6411, 32
  %6415 = trunc i64 %6414 to i32
  %6416 = bitcast i8* %6396 to i32*
  store i32 %6413, i32* %6416, align 1, !tbaa !2452
  %6417 = getelementptr inbounds i8, i8* %6396, i64 4
  %6418 = bitcast i8* %6417 to i32*
  store i32 %6415, i32* %6418, align 1, !tbaa !2452
  %6419 = trunc i64 %6412 to i32
  %6420 = getelementptr inbounds i8, i8* %6396, i64 8
  %6421 = bitcast i8* %6420 to i32*
  store i32 %6419, i32* %6421, align 1, !tbaa !2452
  %6422 = lshr i64 %6412, 32
  %6423 = trunc i64 %6422 to i32
  %6424 = getelementptr inbounds i8, i8* %6396, i64 12
  %6425 = bitcast i8* %6424 to i32*
  store i32 %6423, i32* %6425, align 1, !tbaa !2452
  %6426 = load i64, i64* %RBP
  %6427 = sub i64 %6426, 28
  %6428 = bitcast %union.vec128_t* %XMM0 to i8*
  %6429 = load i64, i64* %PC
  %6430 = add i64 %6429, 5
  store i64 %6430, i64* %PC
  %6431 = bitcast i8* %6428 to <2 x float>*
  %6432 = load <2 x float>, <2 x float>* %6431, align 1
  %6433 = extractelement <2 x float> %6432, i32 0
  %6434 = inttoptr i64 %6427 to float*
  store float %6433, float* %6434
  %6435 = load i64, i64* %RBP
  %6436 = sub i64 %6435, 24
  %6437 = bitcast %union.vec128_t* %XMM0 to i8*
  %6438 = load i64, i64* %PC
  %6439 = add i64 %6438, 5
  store i64 %6439, i64* %PC
  %6440 = bitcast i8* %6437 to <2 x float>*
  %6441 = load <2 x float>, <2 x float>* %6440, align 1
  %6442 = extractelement <2 x float> %6441, i32 0
  %6443 = inttoptr i64 %6436 to float*
  store float %6442, float* %6443
  %6444 = load i64, i64* %PC
  %6445 = add i64 %6444, 11
  store i64 %6445, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4009e7

block_400ef4:                                     ; preds = %block_400ee0
  %6446 = add i64 %6285, 10
  store i64 %6446, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %6447 = load i64, i64* %PC
  %6448 = add i64 %6447, 10
  store i64 %6448, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %6449 = load i64, i64* %RBP
  %6450 = sub i64 %6449, 20
  %6451 = load i64, i64* %PC
  %6452 = add i64 %6451, 4
  store i64 %6452, i64* %PC
  store i64 %6450, i64* %R8, align 8, !tbaa !2428
  %6453 = load i64, i64* %PC
  %6454 = add i64 %6453, 7
  store i64 %6454, i64* %PC
  %6455 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %6456 = zext i32 %6455 to i64
  store i64 %6456, i64* %RSI, align 8, !tbaa !2428
  %6457 = load i64, i64* %PC
  %6458 = add i64 %6457, 7
  store i64 %6458, i64* %PC
  %6459 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6460 = zext i32 %6459 to i64
  store i64 %6460, i64* %RDX, align 8, !tbaa !2428
  %6461 = load i64, i64* %PC
  %6462 = add i64 %6461, 2198
  %6463 = load i64, i64* %PC
  %6464 = add i64 %6463, 5
  %6465 = load i64, i64* %PC
  %6466 = add i64 %6465, 5
  store i64 %6466, i64* %PC
  %6467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6468 = load i64, i64* %6467, align 8, !tbaa !2428
  %6469 = add i64 %6468, -8
  %6470 = inttoptr i64 %6469 to i64*
  store i64 %6464, i64* %6470
  store i64 %6469, i64* %6467, align 8, !tbaa !2428
  %6471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6462, i64* %6471, align 8, !tbaa !2428
  %6472 = load i64, i64* %PC
  %6473 = call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* %0, i64 %6472, %struct.Memory* %MEMORY.13)
  %6474 = load i64, i64* %PC
  %6475 = add i64 %6474, 10
  store i64 %6475, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %6476 = load i64, i64* %PC
  %6477 = add i64 %6476, 10
  store i64 %6477, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %6478 = load i64, i64* %PC
  %6479 = add i64 %6478, 10
  store i64 %6479, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %6480 = load i64, i64* %PC
  %6481 = add i64 %6480, 7
  store i64 %6481, i64* %PC
  %6482 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %6483 = zext i32 %6482 to i64
  store i64 %6483, i64* %RSI, align 8, !tbaa !2428
  %6484 = load i64, i64* %PC
  %6485 = add i64 %6484, 7
  store i64 %6485, i64* %PC
  %6486 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6487 = zext i32 %6486 to i64
  store i64 %6487, i64* %RDX, align 8, !tbaa !2428
  %6488 = load i64, i64* %PC
  %6489 = add i64 %6488, 2613
  %6490 = load i64, i64* %PC
  %6491 = add i64 %6490, 5
  %6492 = load i64, i64* %PC
  %6493 = add i64 %6492, 5
  store i64 %6493, i64* %PC
  %6494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6495 = load i64, i64* %6494, align 8, !tbaa !2428
  %6496 = add i64 %6495, -8
  %6497 = inttoptr i64 %6496 to i64*
  store i64 %6491, i64* %6497
  store i64 %6496, i64* %6494, align 8, !tbaa !2428
  %6498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6489, i64* %6498, align 8, !tbaa !2428
  %6499 = load i64, i64* %PC
  %6500 = call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* %0, i64 %6499, %struct.Memory* %6473)
  %6501 = load i64, i64* %PC
  %6502 = add i64 %6501, 7
  store i64 %6502, i64* %PC
  %6503 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6504 = zext i32 %6503 to i64
  store i64 %6504, i64* %RAX, align 8, !tbaa !2428
  %6505 = load i64, i64* %RAX
  %6506 = load i64, i64* %PC
  %6507 = add i64 %6506, 3
  store i64 %6507, i64* %PC
  %6508 = trunc i64 %6505 to i32
  %6509 = add i32 1, %6508
  %6510 = zext i32 %6509 to i64
  store i64 %6510, i64* %RAX, align 8, !tbaa !2428
  %6511 = icmp ult i32 %6509, %6508
  %6512 = icmp ult i32 %6509, 1
  %6513 = or i1 %6511, %6512
  %6514 = zext i1 %6513 to i8
  %6515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6514, i8* %6515, align 1, !tbaa !2432
  %6516 = and i32 %6509, 255
  %6517 = call i32 @llvm.ctpop.i32(i32 %6516) #16
  %6518 = trunc i32 %6517 to i8
  %6519 = and i8 %6518, 1
  %6520 = xor i8 %6519, 1
  %6521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6520, i8* %6521, align 1, !tbaa !2446
  %6522 = xor i64 1, %6505
  %6523 = trunc i64 %6522 to i32
  %6524 = xor i32 %6523, %6509
  %6525 = lshr i32 %6524, 4
  %6526 = trunc i32 %6525 to i8
  %6527 = and i8 %6526, 1
  %6528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6527, i8* %6528, align 1, !tbaa !2447
  %6529 = icmp eq i32 %6509, 0
  %6530 = zext i1 %6529 to i8
  %6531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6530, i8* %6531, align 1, !tbaa !2448
  %6532 = lshr i32 %6509, 31
  %6533 = trunc i32 %6532 to i8
  %6534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6533, i8* %6534, align 1, !tbaa !2449
  %6535 = lshr i32 %6508, 31
  %6536 = xor i32 %6532, %6535
  %6537 = add nuw nsw i32 %6536, %6532
  %6538 = icmp eq i32 %6537, 2
  %6539 = zext i1 %6538 to i8
  %6540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6539, i8* %6540, align 1, !tbaa !2450
  %6541 = load i32, i32* %EAX
  %6542 = zext i32 %6541 to i64
  %6543 = load i64, i64* %PC
  %6544 = add i64 %6543, 7
  store i64 %6544, i64* %PC
  store i32 %6541, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6545 = load i64, i64* %PC
  %6546 = sub i64 %6545, 129
  %6547 = load i64, i64* %PC
  %6548 = add i64 %6547, 5
  store i64 %6548, i64* %PC
  %6549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6546, i64* %6549, align 8, !tbaa !2428
  br label %block_400ee0

block_4008bb:                                     ; preds = %block_4008cf, %block_400610
  %MEMORY.14 = phi %struct.Memory* [ %885, %block_400610 ], [ %MEMORY.14, %block_4008cf ]
  %6550 = load i64, i64* %PC
  %6551 = add i64 %6550, 7
  store i64 %6551, i64* %PC
  %6552 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6553 = zext i32 %6552 to i64
  store i64 %6553, i64* %RAX, align 8, !tbaa !2428
  %6554 = load i32, i32* %EAX
  %6555 = zext i32 %6554 to i64
  %6556 = load i64, i64* %PC
  %6557 = add i64 %6556, 7
  store i64 %6557, i64* %PC
  %6558 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6559 = sub i32 %6554, %6558
  %6560 = icmp ult i32 %6554, %6558
  %6561 = zext i1 %6560 to i8
  %6562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6561, i8* %6562, align 1, !tbaa !2432
  %6563 = and i32 %6559, 255
  %6564 = call i32 @llvm.ctpop.i32(i32 %6563) #16
  %6565 = trunc i32 %6564 to i8
  %6566 = and i8 %6565, 1
  %6567 = xor i8 %6566, 1
  %6568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6567, i8* %6568, align 1, !tbaa !2446
  %6569 = xor i32 %6558, %6554
  %6570 = xor i32 %6569, %6559
  %6571 = lshr i32 %6570, 4
  %6572 = trunc i32 %6571 to i8
  %6573 = and i8 %6572, 1
  %6574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6573, i8* %6574, align 1, !tbaa !2447
  %6575 = icmp eq i32 %6559, 0
  %6576 = zext i1 %6575 to i8
  %6577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6576, i8* %6577, align 1, !tbaa !2448
  %6578 = lshr i32 %6559, 31
  %6579 = trunc i32 %6578 to i8
  %6580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6579, i8* %6580, align 1, !tbaa !2449
  %6581 = lshr i32 %6554, 31
  %6582 = lshr i32 %6558, 31
  %6583 = xor i32 %6582, %6581
  %6584 = xor i32 %6578, %6581
  %6585 = add nuw nsw i32 %6584, %6583
  %6586 = icmp eq i32 %6585, 2
  %6587 = zext i1 %6586 to i8
  %6588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6587, i8* %6588, align 1, !tbaa !2450
  %6589 = load i64, i64* %PC
  %6590 = add i64 %6589, 62
  %6591 = load i64, i64* %PC
  %6592 = add i64 %6591, 6
  %6593 = load i64, i64* %PC
  %6594 = add i64 %6593, 6
  store i64 %6594, i64* %PC
  %6595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6596 = load i8, i8* %6595, align 1, !tbaa !2449
  %6597 = icmp ne i8 %6596, 0
  %6598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6599 = load i8, i8* %6598, align 1, !tbaa !2450
  %6600 = icmp ne i8 %6599, 0
  %6601 = xor i1 %6597, %6600
  %6602 = xor i1 %6601, true
  %6603 = zext i1 %6602 to i8
  store i8 %6603, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6605 = select i1 %6601, i64 %6592, i64 %6590
  store i64 %6605, i64* %6604, align 8, !tbaa !2428
  %6606 = load i8, i8* %BRANCH_TAKEN
  %6607 = icmp eq i8 %6606, 1
  %6608 = load i64, i64* %PC
  br i1 %6607, label %block_400907, label %block_4008cf

block_400e43:                                     ; preds = %block_400e3a, %block_400def
  %MEMORY.15 = phi %struct.Memory* [ %1109, %block_400def ], [ %1109, %block_400e3a ]
  %6609 = load i64, i64* %PC
  %6610 = add i64 %6609, 5
  %6611 = load i64, i64* %PC
  %6612 = add i64 %6611, 5
  store i64 %6612, i64* %PC
  %6613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6610, i64* %6613, align 8, !tbaa !2428
  %6614 = load i64, i64* %RBP
  %6615 = sub i64 %6614, 64
  %6616 = load i64, i64* %PC
  %6617 = add i64 %6616, 4
  store i64 %6617, i64* %PC
  %6618 = inttoptr i64 %6615 to i32*
  %6619 = load i32, i32* %6618
  %6620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6620, align 1, !tbaa !2432
  %6621 = and i32 %6619, 255
  %6622 = call i32 @llvm.ctpop.i32(i32 %6621) #16
  %6623 = trunc i32 %6622 to i8
  %6624 = and i8 %6623, 1
  %6625 = xor i8 %6624, 1
  %6626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6625, i8* %6626, align 1, !tbaa !2446
  %6627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6627, align 1, !tbaa !2447
  %6628 = icmp eq i32 %6619, 0
  %6629 = zext i1 %6628 to i8
  %6630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6629, i8* %6630, align 1, !tbaa !2448
  %6631 = lshr i32 %6619, 31
  %6632 = trunc i32 %6631 to i8
  %6633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6632, i8* %6633, align 1, !tbaa !2449
  %6634 = lshr i32 %6619, 31
  %6635 = xor i32 %6631, %6634
  %6636 = add nuw nsw i32 %6635, %6634
  %6637 = icmp eq i32 %6636, 2
  %6638 = zext i1 %6637 to i8
  %6639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6638, i8* %6639, align 1, !tbaa !2450
  %6640 = load i64, i64* %PC
  %6641 = sub i64 %6640, 204
  %6642 = load i64, i64* %PC
  %6643 = add i64 %6642, 6
  %6644 = load i64, i64* %PC
  %6645 = add i64 %6644, 6
  store i64 %6645, i64* %PC
  %6646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6647 = load i8, i8* %6646, align 1, !tbaa !2449
  %6648 = icmp ne i8 %6647, 0
  %6649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6650 = load i8, i8* %6649, align 1, !tbaa !2450
  %6651 = icmp ne i8 %6650, 0
  %6652 = xor i1 %6648, %6651
  %6653 = zext i1 %6652 to i8
  store i8 %6653, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6655 = select i1 %6652, i64 %6641, i64 %6643
  store i64 %6655, i64* %6654, align 8, !tbaa !2428
  %6656 = load i8, i8* %BRANCH_TAKEN
  %6657 = icmp eq i8 %6656, 1
  br i1 %6657, label %block_400d80, label %block_400e52

block_4009fb:                                     ; preds = %block_4009e7
  %6658 = load i64, i64* %RBP
  %6659 = sub i64 %6658, 28
  %6660 = load i64, i64* %PC
  %6661 = add i64 %6660, 5
  store i64 %6661, i64* %PC
  %6662 = inttoptr i64 %6659 to float*
  %6663 = load float, float* %6662
  %6664 = bitcast i8* %5129 to float*
  store float %6663, float* %6664, align 1, !tbaa !2453
  %6665 = getelementptr inbounds i8, i8* %5129, i64 4
  %6666 = bitcast i8* %6665 to float*
  store float 0.000000e+00, float* %6666, align 1, !tbaa !2453
  %6667 = getelementptr inbounds i8, i8* %5129, i64 8
  %6668 = bitcast i8* %6667 to float*
  store float 0.000000e+00, float* %6668, align 1, !tbaa !2453
  %6669 = getelementptr inbounds i8, i8* %5129, i64 12
  %6670 = bitcast i8* %6669 to float*
  store float 0.000000e+00, float* %6670, align 1, !tbaa !2453
  %6671 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6672 = bitcast %union.vec128_t* %XMM0 to i8*
  %6673 = load i64, i64* %PC
  %6674 = add i64 %6673, 4
  store i64 %6674, i64* %PC
  %6675 = bitcast i8* %6672 to <2 x float>*
  %6676 = load <2 x float>, <2 x float>* %6675, align 1
  %6677 = extractelement <2 x float> %6676, i32 0
  %6678 = fpext float %6677 to double
  %6679 = bitcast i8* %6671 to double*
  store double %6678, double* %6679, align 1, !tbaa !2455
  %6680 = load i64, i64* %PC
  %6681 = add i64 %6680, 8
  store i64 %6681, i64* %PC
  %6682 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6683 = sext i32 %6682 to i64
  store i64 %6683, i64* %RAX, align 8, !tbaa !2428
  %6684 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6685 = load i64, i64* %RAX
  %6686 = mul i64 %6685, 4
  %6687 = add i64 %6686, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %6688 = load i64, i64* %PC
  %6689 = add i64 %6688, 9
  store i64 %6689, i64* %PC
  %6690 = inttoptr i64 %6687 to float*
  %6691 = load float, float* %6690
  %6692 = bitcast i8* %6684 to float*
  store float %6691, float* %6692, align 1, !tbaa !2453
  %6693 = getelementptr inbounds i8, i8* %6684, i64 4
  %6694 = bitcast i8* %6693 to float*
  store float 0.000000e+00, float* %6694, align 1, !tbaa !2453
  %6695 = getelementptr inbounds i8, i8* %6684, i64 8
  %6696 = bitcast i8* %6695 to float*
  store float 0.000000e+00, float* %6696, align 1, !tbaa !2453
  %6697 = getelementptr inbounds i8, i8* %6684, i64 12
  %6698 = bitcast i8* %6697 to float*
  store float 0.000000e+00, float* %6698, align 1, !tbaa !2453
  %6699 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6700 = bitcast %union.vec128_t* %XMM1 to i8*
  %6701 = load i64, i64* %PC
  %6702 = add i64 %6701, 4
  store i64 %6702, i64* %PC
  %6703 = bitcast i8* %6700 to <2 x float>*
  %6704 = load <2 x float>, <2 x float>* %6703, align 1
  %6705 = extractelement <2 x float> %6704, i32 0
  %6706 = fpext float %6705 to double
  %6707 = bitcast i8* %6699 to double*
  store double %6706, double* %6707, align 1, !tbaa !2455
  %6708 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6709 = load i64, i64* %PC
  %6710 = add i64 %6709, 7
  store i64 %6710, i64* %PC
  %6711 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %6712 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %6713 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %6714 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %6715 = bitcast i8* %6708 to float*
  store float %6711, float* %6715, align 1, !tbaa !2453
  %6716 = getelementptr inbounds i8, i8* %6708, i64 4
  %6717 = bitcast i8* %6716 to float*
  store float %6712, float* %6717, align 1, !tbaa !2453
  %6718 = getelementptr inbounds i8, i8* %6708, i64 8
  %6719 = bitcast i8* %6718 to float*
  store float %6713, float* %6719, align 1, !tbaa !2453
  %6720 = getelementptr inbounds i8, i8* %6708, i64 12
  %6721 = bitcast i8* %6720 to float*
  store float %6714, float* %6721, align 1, !tbaa !2453
  %6722 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6723 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6724 = bitcast %union.vec128_t* %XMM2 to i8*
  %6725 = load i64, i64* %PC
  %6726 = add i64 %6725, 4
  store i64 %6726, i64* %PC
  %6727 = bitcast i8* %6723 to i64*
  %6728 = load i64, i64* %6727, align 1
  %6729 = getelementptr inbounds i8, i8* %6723, i64 8
  %6730 = bitcast i8* %6729 to i64*
  %6731 = load i64, i64* %6730, align 1
  %6732 = bitcast i8* %6724 to i64*
  %6733 = load i64, i64* %6732, align 1
  %6734 = getelementptr inbounds i8, i8* %6724, i64 8
  %6735 = bitcast i8* %6734 to i64*
  %6736 = load i64, i64* %6735, align 1
  %6737 = and i64 %6733, %6728
  %6738 = and i64 %6736, %6731
  %6739 = trunc i64 %6737 to i32
  %6740 = lshr i64 %6737, 32
  %6741 = trunc i64 %6740 to i32
  %6742 = bitcast i8* %6722 to i32*
  store i32 %6739, i32* %6742, align 1, !tbaa !2452
  %6743 = getelementptr inbounds i8, i8* %6722, i64 4
  %6744 = bitcast i8* %6743 to i32*
  store i32 %6741, i32* %6744, align 1, !tbaa !2452
  %6745 = trunc i64 %6738 to i32
  %6746 = getelementptr inbounds i8, i8* %6722, i64 8
  %6747 = bitcast i8* %6746 to i32*
  store i32 %6745, i32* %6747, align 1, !tbaa !2452
  %6748 = lshr i64 %6738, 32
  %6749 = trunc i64 %6748 to i32
  %6750 = getelementptr inbounds i8, i8* %6722, i64 12
  %6751 = bitcast i8* %6750 to i32*
  store i32 %6749, i32* %6751, align 1, !tbaa !2452
  %6752 = bitcast %union.vec128_t* %XMM0 to i8*
  %6753 = bitcast %union.vec128_t* %XMM1 to i8*
  %6754 = load i64, i64* %PC
  %6755 = add i64 %6754, 4
  store i64 %6755, i64* %PC
  %6756 = bitcast i8* %6752 to double*
  %6757 = load double, double* %6756, align 1
  %6758 = bitcast i8* %6753 to double*
  %6759 = load double, double* %6758, align 1
  %6760 = fcmp uno double %6757, %6759
  br i1 %6760, label %6761, label %6773

; <label>:6761:                                   ; preds = %block_4009fb
  %6762 = fadd double %6757, %6759
  %6763 = bitcast double %6762 to i64
  %6764 = and i64 %6763, 9221120237041090560
  %6765 = icmp eq i64 %6764, 9218868437227405312
  %6766 = and i64 %6763, 2251799813685247
  %6767 = icmp ne i64 %6766, 0
  %6768 = and i1 %6765, %6767
  br i1 %6768, label %6769, label %6779

; <label>:6769:                                   ; preds = %6761
  %6770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6771 = load i64, i64* %6770, align 8, !tbaa !2428
  %6772 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6771, %struct.Memory* %MEMORY.10) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:6773:                                   ; preds = %block_4009fb
  %6774 = fcmp ogt double %6757, %6759
  br i1 %6774, label %6779, label %6775

; <label>:6775:                                   ; preds = %6773
  %6776 = fcmp olt double %6757, %6759
  br i1 %6776, label %6779, label %6777

; <label>:6777:                                   ; preds = %6775
  %6778 = fcmp oeq double %6757, %6759
  br i1 %6778, label %6779, label %6786

; <label>:6779:                                   ; preds = %6777, %6775, %6773, %6761
  %6780 = phi i8 [ 0, %6773 ], [ 0, %6775 ], [ 1, %6777 ], [ 1, %6761 ]
  %6781 = phi i8 [ 0, %6773 ], [ 0, %6775 ], [ 0, %6777 ], [ 1, %6761 ]
  %6782 = phi i8 [ 0, %6773 ], [ 1, %6775 ], [ 0, %6777 ], [ 1, %6761 ]
  %6783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6780, i8* %6783, align 1, !tbaa !2451
  %6784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6781, i8* %6784, align 1, !tbaa !2451
  %6785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6782, i8* %6785, align 1, !tbaa !2451
  br label %6786

; <label>:6786:                                   ; preds = %6779, %6777
  %6787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6787, align 1, !tbaa !2451
  %6788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6788, align 1, !tbaa !2451
  %6789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6789, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %6769, %6786
  %6790 = phi %struct.Memory* [ %6772, %6769 ], [ %MEMORY.10, %6786 ]
  %6791 = load i64, i64* %PC
  %6792 = add i64 %6791, 28
  %6793 = load i64, i64* %PC
  %6794 = add i64 %6793, 6
  %6795 = load i64, i64* %PC
  %6796 = add i64 %6795, 6
  store i64 %6796, i64* %PC
  %6797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6798 = load i8, i8* %6797, align 1, !tbaa !2432
  %6799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6800 = load i8, i8* %6799, align 1, !tbaa !2448
  %6801 = or i8 %6800, %6798
  %6802 = icmp ne i8 %6801, 0
  %6803 = zext i1 %6802 to i8
  store i8 %6803, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6805 = select i1 %6802, i64 %6792, i64 %6794
  store i64 %6805, i64* %6804, align 8, !tbaa !2428
  %6806 = load i8, i8* %BRANCH_TAKEN
  %6807 = icmp eq i8 %6806, 1
  br i1 %6807, label %block_400a44, label %block_400a2e

block_400dae:                                     ; preds = %block_400d9e
  %6808 = add i64 %6226, 10
  store i64 %6808, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %6809 = load i64, i64* %PC
  %6810 = add i64 %6809, 10
  store i64 %6810, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %6811 = load i64, i64* %RBP
  %6812 = sub i64 %6811, 20
  %6813 = load i64, i64* %PC
  %6814 = add i64 %6813, 4
  store i64 %6814, i64* %PC
  store i64 %6812, i64* %R8, align 8, !tbaa !2428
  %6815 = load i64, i64* %PC
  %6816 = add i64 %6815, 7
  store i64 %6816, i64* %PC
  %6817 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %6818 = zext i32 %6817 to i64
  store i64 %6818, i64* %RSI, align 8, !tbaa !2428
  %6819 = load i64, i64* %PC
  %6820 = add i64 %6819, 7
  store i64 %6820, i64* %PC
  %6821 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6822 = zext i32 %6821 to i64
  store i64 %6822, i64* %RDX, align 8, !tbaa !2428
  %6823 = load i64, i64* %PC
  %6824 = add i64 %6823, 2524
  %6825 = load i64, i64* %PC
  %6826 = add i64 %6825, 5
  %6827 = load i64, i64* %PC
  %6828 = add i64 %6827, 5
  store i64 %6828, i64* %PC
  %6829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6830 = load i64, i64* %6829, align 8, !tbaa !2428
  %6831 = add i64 %6830, -8
  %6832 = inttoptr i64 %6831 to i64*
  store i64 %6826, i64* %6832
  store i64 %6831, i64* %6829, align 8, !tbaa !2428
  %6833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6824, i64* %6833, align 8, !tbaa !2428
  %6834 = load i64, i64* %PC
  %6835 = call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* %0, i64 %6834, %struct.Memory* %MEMORY.12)
  %6836 = load i64, i64* %PC
  %6837 = add i64 %6836, 7
  store i64 %6837, i64* %PC
  %6838 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6839 = zext i32 %6838 to i64
  store i64 %6839, i64* %RAX, align 8, !tbaa !2428
  %6840 = load i64, i64* %RAX
  %6841 = load i64, i64* %PC
  %6842 = add i64 %6841, 3
  store i64 %6842, i64* %PC
  %6843 = trunc i64 %6840 to i32
  %6844 = add i32 1, %6843
  %6845 = zext i32 %6844 to i64
  store i64 %6845, i64* %RAX, align 8, !tbaa !2428
  %6846 = icmp ult i32 %6844, %6843
  %6847 = icmp ult i32 %6844, 1
  %6848 = or i1 %6846, %6847
  %6849 = zext i1 %6848 to i8
  %6850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6849, i8* %6850, align 1, !tbaa !2432
  %6851 = and i32 %6844, 255
  %6852 = call i32 @llvm.ctpop.i32(i32 %6851) #16
  %6853 = trunc i32 %6852 to i8
  %6854 = and i8 %6853, 1
  %6855 = xor i8 %6854, 1
  %6856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6855, i8* %6856, align 1, !tbaa !2446
  %6857 = xor i64 1, %6840
  %6858 = trunc i64 %6857 to i32
  %6859 = xor i32 %6858, %6844
  %6860 = lshr i32 %6859, 4
  %6861 = trunc i32 %6860 to i8
  %6862 = and i8 %6861, 1
  %6863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6862, i8* %6863, align 1, !tbaa !2447
  %6864 = icmp eq i32 %6844, 0
  %6865 = zext i1 %6864 to i8
  %6866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6865, i8* %6866, align 1, !tbaa !2448
  %6867 = lshr i32 %6844, 31
  %6868 = trunc i32 %6867 to i8
  %6869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6868, i8* %6869, align 1, !tbaa !2449
  %6870 = lshr i32 %6843, 31
  %6871 = xor i32 %6867, %6870
  %6872 = add nuw nsw i32 %6871, %6867
  %6873 = icmp eq i32 %6872, 2
  %6874 = zext i1 %6873 to i8
  %6875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6874, i8* %6875, align 1, !tbaa !2450
  %6876 = load i32, i32* %EAX
  %6877 = zext i32 %6876 to i64
  %6878 = load i64, i64* %PC
  %6879 = add i64 %6878, 7
  store i64 %6879, i64* %PC
  store i32 %6876, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6880 = load i64, i64* %PC
  %6881 = sub i64 %6880, 76
  %6882 = load i64, i64* %PC
  %6883 = add i64 %6882, 5
  store i64 %6883, i64* %PC
  %6884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6881, i64* %6884, align 8, !tbaa !2428
  br label %block_400d9e

block_40150e:                                     ; preds = %block_4014fa
  %6885 = add i64 %3649, 10
  store i64 %6885, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %6886 = load i64, i64* %PC
  %6887 = add i64 %6886, 10
  store i64 %6887, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %6888 = load i64, i64* %RBP
  %6889 = sub i64 %6888, 20
  %6890 = load i64, i64* %PC
  %6891 = add i64 %6890, 4
  store i64 %6891, i64* %PC
  store i64 %6889, i64* %R8, align 8, !tbaa !2428
  %6892 = load i64, i64* %PC
  %6893 = add i64 %6892, 7
  store i64 %6893, i64* %PC
  %6894 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %6895 = zext i32 %6894 to i64
  store i64 %6895, i64* %RSI, align 8, !tbaa !2428
  %6896 = load i64, i64* %PC
  %6897 = add i64 %6896, 7
  store i64 %6897, i64* %PC
  %6898 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6899 = zext i32 %6898 to i64
  store i64 %6899, i64* %RDX, align 8, !tbaa !2428
  %6900 = load i64, i64* %PC
  %6901 = add i64 %6900, 636
  %6902 = load i64, i64* %PC
  %6903 = add i64 %6902, 5
  %6904 = load i64, i64* %PC
  %6905 = add i64 %6904, 5
  store i64 %6905, i64* %PC
  %6906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6907 = load i64, i64* %6906, align 8, !tbaa !2428
  %6908 = add i64 %6907, -8
  %6909 = inttoptr i64 %6908 to i64*
  store i64 %6903, i64* %6909
  store i64 %6908, i64* %6906, align 8, !tbaa !2428
  %6910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6901, i64* %6910, align 8, !tbaa !2428
  %6911 = load i64, i64* %PC
  %6912 = call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* %0, i64 %6911, %struct.Memory* %MEMORY.6)
  %6913 = load i64, i64* %PC
  %6914 = add i64 %6913, 10
  store i64 %6914, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %6915 = load i64, i64* %PC
  %6916 = add i64 %6915, 10
  store i64 %6916, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %6917 = load i64, i64* %PC
  %6918 = add i64 %6917, 10
  store i64 %6918, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %6919 = load i64, i64* %PC
  %6920 = add i64 %6919, 7
  store i64 %6920, i64* %PC
  %6921 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %6922 = zext i32 %6921 to i64
  store i64 %6922, i64* %RSI, align 8, !tbaa !2428
  %6923 = load i64, i64* %PC
  %6924 = add i64 %6923, 7
  store i64 %6924, i64* %PC
  %6925 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %6926 = zext i32 %6925 to i64
  store i64 %6926, i64* %RDX, align 8, !tbaa !2428
  %6927 = load i64, i64* %PC
  %6928 = add i64 %6927, 1051
  %6929 = load i64, i64* %PC
  %6930 = add i64 %6929, 5
  %6931 = load i64, i64* %PC
  %6932 = add i64 %6931, 5
  store i64 %6932, i64* %PC
  %6933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6934 = load i64, i64* %6933, align 8, !tbaa !2428
  %6935 = add i64 %6934, -8
  %6936 = inttoptr i64 %6935 to i64*
  store i64 %6930, i64* %6936
  store i64 %6935, i64* %6933, align 8, !tbaa !2428
  %6937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6928, i64* %6937, align 8, !tbaa !2428
  %6938 = load i64, i64* %PC
  %6939 = call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* %0, i64 %6938, %struct.Memory* %6912)
  %6940 = load i64, i64* %PC
  %6941 = add i64 %6940, 7
  store i64 %6941, i64* %PC
  %6942 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6943 = zext i32 %6942 to i64
  store i64 %6943, i64* %RAX, align 8, !tbaa !2428
  %6944 = load i64, i64* %RAX
  %6945 = load i64, i64* %PC
  %6946 = add i64 %6945, 3
  store i64 %6946, i64* %PC
  %6947 = trunc i64 %6944 to i32
  %6948 = add i32 1, %6947
  %6949 = zext i32 %6948 to i64
  store i64 %6949, i64* %RAX, align 8, !tbaa !2428
  %6950 = icmp ult i32 %6948, %6947
  %6951 = icmp ult i32 %6948, 1
  %6952 = or i1 %6950, %6951
  %6953 = zext i1 %6952 to i8
  %6954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6953, i8* %6954, align 1, !tbaa !2432
  %6955 = and i32 %6948, 255
  %6956 = call i32 @llvm.ctpop.i32(i32 %6955) #16
  %6957 = trunc i32 %6956 to i8
  %6958 = and i8 %6957, 1
  %6959 = xor i8 %6958, 1
  %6960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6959, i8* %6960, align 1, !tbaa !2446
  %6961 = xor i64 1, %6944
  %6962 = trunc i64 %6961 to i32
  %6963 = xor i32 %6962, %6948
  %6964 = lshr i32 %6963, 4
  %6965 = trunc i32 %6964 to i8
  %6966 = and i8 %6965, 1
  %6967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6966, i8* %6967, align 1, !tbaa !2447
  %6968 = icmp eq i32 %6948, 0
  %6969 = zext i1 %6968 to i8
  %6970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6969, i8* %6970, align 1, !tbaa !2448
  %6971 = lshr i32 %6948, 31
  %6972 = trunc i32 %6971 to i8
  %6973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6972, i8* %6973, align 1, !tbaa !2449
  %6974 = lshr i32 %6947, 31
  %6975 = xor i32 %6971, %6974
  %6976 = add nuw nsw i32 %6975, %6971
  %6977 = icmp eq i32 %6976, 2
  %6978 = zext i1 %6977 to i8
  %6979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6978, i8* %6979, align 1, !tbaa !2450
  %6980 = load i32, i32* %EAX
  %6981 = zext i32 %6980 to i64
  %6982 = load i64, i64* %PC
  %6983 = add i64 %6982, 7
  store i64 %6983, i64* %PC
  store i32 %6980, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6984 = load i64, i64* %PC
  %6985 = sub i64 %6984, 129
  %6986 = load i64, i64* %PC
  %6987 = add i64 %6986, 5
  store i64 %6987, i64* %PC
  %6988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6985, i64* %6988, align 8, !tbaa !2428
  br label %block_4014fa

block_40118d:                                     ; preds = %block_4011a1, %block_401149
  %MEMORY.16 = phi %struct.Memory* [ %2105, %block_401149 ], [ %4564, %block_4011a1 ]
  %6989 = load i64, i64* %PC
  %6990 = add i64 %6989, 7
  store i64 %6990, i64* %PC
  %6991 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6992 = zext i32 %6991 to i64
  store i64 %6992, i64* %RAX, align 8, !tbaa !2428
  %6993 = load i32, i32* %EAX
  %6994 = zext i32 %6993 to i64
  %6995 = load i64, i64* %PC
  %6996 = add i64 %6995, 7
  store i64 %6996, i64* %PC
  %6997 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %6998 = sub i32 %6993, %6997
  %6999 = icmp ult i32 %6993, %6997
  %7000 = zext i1 %6999 to i8
  %7001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7000, i8* %7001, align 1, !tbaa !2432
  %7002 = and i32 %6998, 255
  %7003 = call i32 @llvm.ctpop.i32(i32 %7002) #16
  %7004 = trunc i32 %7003 to i8
  %7005 = and i8 %7004, 1
  %7006 = xor i8 %7005, 1
  %7007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7006, i8* %7007, align 1, !tbaa !2446
  %7008 = xor i32 %6997, %6993
  %7009 = xor i32 %7008, %6998
  %7010 = lshr i32 %7009, 4
  %7011 = trunc i32 %7010 to i8
  %7012 = and i8 %7011, 1
  %7013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7012, i8* %7013, align 1, !tbaa !2447
  %7014 = icmp eq i32 %6998, 0
  %7015 = zext i1 %7014 to i8
  %7016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7015, i8* %7016, align 1, !tbaa !2448
  %7017 = lshr i32 %6998, 31
  %7018 = trunc i32 %7017 to i8
  %7019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7018, i8* %7019, align 1, !tbaa !2449
  %7020 = lshr i32 %6993, 31
  %7021 = lshr i32 %6997, 31
  %7022 = xor i32 %7021, %7020
  %7023 = xor i32 %7017, %7020
  %7024 = add nuw nsw i32 %7023, %7022
  %7025 = icmp eq i32 %7024, 2
  %7026 = zext i1 %7025 to i8
  %7027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7026, i8* %7027, align 1, !tbaa !2450
  %7028 = load i64, i64* %PC
  %7029 = add i64 %7028, 80
  %7030 = load i64, i64* %PC
  %7031 = add i64 %7030, 6
  %7032 = load i64, i64* %PC
  %7033 = add i64 %7032, 6
  store i64 %7033, i64* %PC
  %7034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7035 = load i8, i8* %7034, align 1, !tbaa !2449
  %7036 = icmp ne i8 %7035, 0
  %7037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7038 = load i8, i8* %7037, align 1, !tbaa !2450
  %7039 = icmp ne i8 %7038, 0
  %7040 = xor i1 %7036, %7039
  %7041 = xor i1 %7040, true
  %7042 = zext i1 %7041 to i8
  store i8 %7042, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7044 = select i1 %7040, i64 %7031, i64 %7029
  store i64 %7044, i64* %7043, align 8, !tbaa !2428
  %7045 = load i8, i8* %BRANCH_TAKEN
  %7046 = icmp eq i8 %7045, 1
  %7047 = load i64, i64* %PC
  br i1 %7046, label %block_4011eb, label %block_4011a1

block_40139b:                                     ; preds = %block_4013ab, %block_40131f
  %MEMORY.17 = phi %struct.Memory* [ %5295, %block_40131f ], [ %7579, %block_4013ab ]
  %7048 = load i64, i64* %PC
  %7049 = add i64 %7048, 7
  store i64 %7049, i64* %PC
  %7050 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7051 = zext i32 %7050 to i64
  store i64 %7051, i64* %RAX, align 8, !tbaa !2428
  %7052 = load i32, i32* %EAX
  %7053 = zext i32 %7052 to i64
  %7054 = load i64, i64* %RBP
  %7055 = sub i64 %7054, 68
  %7056 = load i64, i64* %PC
  %7057 = add i64 %7056, 3
  store i64 %7057, i64* %PC
  %7058 = inttoptr i64 %7055 to i32*
  %7059 = load i32, i32* %7058
  %7060 = sub i32 %7052, %7059
  %7061 = icmp ult i32 %7052, %7059
  %7062 = zext i1 %7061 to i8
  %7063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7062, i8* %7063, align 1, !tbaa !2432
  %7064 = and i32 %7060, 255
  %7065 = call i32 @llvm.ctpop.i32(i32 %7064) #16
  %7066 = trunc i32 %7065 to i8
  %7067 = and i8 %7066, 1
  %7068 = xor i8 %7067, 1
  %7069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7068, i8* %7069, align 1, !tbaa !2446
  %7070 = xor i32 %7059, %7052
  %7071 = xor i32 %7070, %7060
  %7072 = lshr i32 %7071, 4
  %7073 = trunc i32 %7072 to i8
  %7074 = and i8 %7073, 1
  %7075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7074, i8* %7075, align 1, !tbaa !2447
  %7076 = icmp eq i32 %7060, 0
  %7077 = zext i1 %7076 to i8
  %7078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7077, i8* %7078, align 1, !tbaa !2448
  %7079 = lshr i32 %7060, 31
  %7080 = trunc i32 %7079 to i8
  %7081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7080, i8* %7081, align 1, !tbaa !2449
  %7082 = lshr i32 %7052, 31
  %7083 = lshr i32 %7059, 31
  %7084 = xor i32 %7083, %7082
  %7085 = xor i32 %7079, %7082
  %7086 = add nuw nsw i32 %7085, %7084
  %7087 = icmp eq i32 %7086, 2
  %7088 = zext i1 %7087 to i8
  %7089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7088, i8* %7089, align 1, !tbaa !2450
  %7090 = load i64, i64* %PC
  %7091 = add i64 %7090, 71
  %7092 = load i64, i64* %PC
  %7093 = add i64 %7092, 6
  %7094 = load i64, i64* %PC
  %7095 = add i64 %7094, 6
  store i64 %7095, i64* %PC
  %7096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7097 = load i8, i8* %7096, align 1, !tbaa !2449
  %7098 = icmp ne i8 %7097, 0
  %7099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7100 = load i8, i8* %7099, align 1, !tbaa !2450
  %7101 = icmp ne i8 %7100, 0
  %7102 = xor i1 %7098, %7101
  %7103 = xor i1 %7102, true
  %7104 = zext i1 %7103 to i8
  store i8 %7104, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7106 = select i1 %7102, i64 %7093, i64 %7091
  store i64 %7106, i64* %7105, align 8, !tbaa !2428
  %7107 = load i8, i8* %BRANCH_TAKEN
  %7108 = icmp eq i8 %7107, 1
  %7109 = load i64, i64* %PC
  br i1 %7108, label %block_4013ec, label %block_4013ab

block_4010d7:                                     ; preds = %block_4010c3
  %7110 = add i64 %3338, 10
  store i64 %7110, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %7111 = load i64, i64* %PC
  %7112 = add i64 %7111, 10
  store i64 %7112, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %7113 = load i64, i64* %RBP
  %7114 = sub i64 %7113, 20
  %7115 = load i64, i64* %PC
  %7116 = add i64 %7115, 4
  store i64 %7116, i64* %PC
  store i64 %7114, i64* %R8, align 8, !tbaa !2428
  %7117 = load i64, i64* %PC
  %7118 = add i64 %7117, 7
  store i64 %7118, i64* %PC
  %7119 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %7120 = zext i32 %7119 to i64
  store i64 %7120, i64* %RSI, align 8, !tbaa !2428
  %7121 = load i64, i64* %PC
  %7122 = add i64 %7121, 7
  store i64 %7122, i64* %PC
  %7123 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7124 = zext i32 %7123 to i64
  store i64 %7124, i64* %RDX, align 8, !tbaa !2428
  %7125 = load i64, i64* %PC
  %7126 = add i64 %7125, 1715
  %7127 = load i64, i64* %PC
  %7128 = add i64 %7127, 5
  %7129 = load i64, i64* %PC
  %7130 = add i64 %7129, 5
  store i64 %7130, i64* %PC
  %7131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7132 = load i64, i64* %7131, align 8, !tbaa !2428
  %7133 = add i64 %7132, -8
  %7134 = inttoptr i64 %7133 to i64*
  store i64 %7128, i64* %7134
  store i64 %7133, i64* %7131, align 8, !tbaa !2428
  %7135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7126, i64* %7135, align 8, !tbaa !2428
  %7136 = load i64, i64* %PC
  %7137 = call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* %0, i64 %7136, %struct.Memory* %MEMORY.4)
  %7138 = load i64, i64* %PC
  %7139 = add i64 %7138, 10
  store i64 %7139, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %7140 = load i64, i64* %PC
  %7141 = add i64 %7140, 10
  store i64 %7141, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %7142 = load i64, i64* %PC
  %7143 = add i64 %7142, 10
  store i64 %7143, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %7144 = load i64, i64* %PC
  %7145 = add i64 %7144, 7
  store i64 %7145, i64* %PC
  %7146 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %7147 = zext i32 %7146 to i64
  store i64 %7147, i64* %RSI, align 8, !tbaa !2428
  %7148 = load i64, i64* %PC
  %7149 = add i64 %7148, 7
  store i64 %7149, i64* %PC
  %7150 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7151 = zext i32 %7150 to i64
  store i64 %7151, i64* %RDX, align 8, !tbaa !2428
  %7152 = load i64, i64* %PC
  %7153 = add i64 %7152, 2130
  %7154 = load i64, i64* %PC
  %7155 = add i64 %7154, 5
  %7156 = load i64, i64* %PC
  %7157 = add i64 %7156, 5
  store i64 %7157, i64* %PC
  %7158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7159 = load i64, i64* %7158, align 8, !tbaa !2428
  %7160 = add i64 %7159, -8
  %7161 = inttoptr i64 %7160 to i64*
  store i64 %7155, i64* %7161
  store i64 %7160, i64* %7158, align 8, !tbaa !2428
  %7162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7153, i64* %7162, align 8, !tbaa !2428
  %7163 = load i64, i64* %PC
  %7164 = call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* %0, i64 %7163, %struct.Memory* %7137)
  %7165 = load i64, i64* %PC
  %7166 = add i64 %7165, 7
  store i64 %7166, i64* %PC
  %7167 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7168 = zext i32 %7167 to i64
  store i64 %7168, i64* %RAX, align 8, !tbaa !2428
  %7169 = load i64, i64* %RAX
  %7170 = load i64, i64* %PC
  %7171 = add i64 %7170, 3
  store i64 %7171, i64* %PC
  %7172 = trunc i64 %7169 to i32
  %7173 = add i32 1, %7172
  %7174 = zext i32 %7173 to i64
  store i64 %7174, i64* %RAX, align 8, !tbaa !2428
  %7175 = icmp ult i32 %7173, %7172
  %7176 = icmp ult i32 %7173, 1
  %7177 = or i1 %7175, %7176
  %7178 = zext i1 %7177 to i8
  %7179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7178, i8* %7179, align 1, !tbaa !2432
  %7180 = and i32 %7173, 255
  %7181 = call i32 @llvm.ctpop.i32(i32 %7180) #16
  %7182 = trunc i32 %7181 to i8
  %7183 = and i8 %7182, 1
  %7184 = xor i8 %7183, 1
  %7185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7184, i8* %7185, align 1, !tbaa !2446
  %7186 = xor i64 1, %7169
  %7187 = trunc i64 %7186 to i32
  %7188 = xor i32 %7187, %7173
  %7189 = lshr i32 %7188, 4
  %7190 = trunc i32 %7189 to i8
  %7191 = and i8 %7190, 1
  %7192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7191, i8* %7192, align 1, !tbaa !2447
  %7193 = icmp eq i32 %7173, 0
  %7194 = zext i1 %7193 to i8
  %7195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7194, i8* %7195, align 1, !tbaa !2448
  %7196 = lshr i32 %7173, 31
  %7197 = trunc i32 %7196 to i8
  %7198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7197, i8* %7198, align 1, !tbaa !2449
  %7199 = lshr i32 %7172, 31
  %7200 = xor i32 %7196, %7199
  %7201 = add nuw nsw i32 %7200, %7196
  %7202 = icmp eq i32 %7201, 2
  %7203 = zext i1 %7202 to i8
  %7204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7203, i8* %7204, align 1, !tbaa !2450
  %7205 = load i32, i32* %EAX
  %7206 = zext i32 %7205 to i64
  %7207 = load i64, i64* %PC
  %7208 = add i64 %7207, 7
  store i64 %7208, i64* %PC
  store i32 %7205, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7209 = load i64, i64* %PC
  %7210 = sub i64 %7209, 129
  %7211 = load i64, i64* %PC
  %7212 = add i64 %7211, 5
  store i64 %7212, i64* %PC
  %7213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7210, i64* %7213, align 8, !tbaa !2428
  br label %block_4010c3

block_4008cf:                                     ; preds = %block_4008bb
  %7214 = add i64 %6608, 8
  store i64 %7214, i64* %PC
  %7215 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7216 = sext i32 %7215 to i64
  store i64 %7216, i64* %RAX, align 8, !tbaa !2428
  %7217 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7218 = load i64, i64* %RAX
  %7219 = mul i64 %7218, 4
  %7220 = add i64 %7219, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %7221 = load i64, i64* %PC
  %7222 = add i64 %7221, 9
  store i64 %7222, i64* %PC
  %7223 = inttoptr i64 %7220 to float*
  %7224 = load float, float* %7223
  %7225 = bitcast i8* %7217 to float*
  store float %7224, float* %7225, align 1, !tbaa !2453
  %7226 = getelementptr inbounds i8, i8* %7217, i64 4
  %7227 = bitcast i8* %7226 to float*
  store float 0.000000e+00, float* %7227, align 1, !tbaa !2453
  %7228 = getelementptr inbounds i8, i8* %7217, i64 8
  %7229 = bitcast i8* %7228 to float*
  store float 0.000000e+00, float* %7229, align 1, !tbaa !2453
  %7230 = getelementptr inbounds i8, i8* %7217, i64 12
  %7231 = bitcast i8* %7230 to float*
  store float 0.000000e+00, float* %7231, align 1, !tbaa !2453
  %7232 = load i64, i64* %PC
  %7233 = add i64 %7232, 8
  store i64 %7233, i64* %PC
  %7234 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7235 = sext i32 %7234 to i64
  store i64 %7235, i64* %RAX, align 8, !tbaa !2428
  %7236 = load i64, i64* %RAX
  %7237 = mul i64 %7236, 4
  %7238 = add i64 %7237, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %7239 = bitcast %union.vec128_t* %XMM0 to i8*
  %7240 = load i64, i64* %PC
  %7241 = add i64 %7240, 9
  store i64 %7241, i64* %PC
  %7242 = bitcast i8* %7239 to <2 x float>*
  %7243 = load <2 x float>, <2 x float>* %7242, align 1
  %7244 = extractelement <2 x float> %7243, i32 0
  %7245 = inttoptr i64 %7238 to float*
  store float %7244, float* %7245
  %7246 = load i64, i64* %PC
  %7247 = add i64 %7246, 7
  store i64 %7247, i64* %PC
  %7248 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7249 = zext i32 %7248 to i64
  store i64 %7249, i64* %RAX, align 8, !tbaa !2428
  %7250 = load i64, i64* %RAX
  %7251 = load i64, i64* %PC
  %7252 = add i64 %7251, 3
  store i64 %7252, i64* %PC
  %7253 = trunc i64 %7250 to i32
  %7254 = add i32 1, %7253
  %7255 = zext i32 %7254 to i64
  store i64 %7255, i64* %RAX, align 8, !tbaa !2428
  %7256 = icmp ult i32 %7254, %7253
  %7257 = icmp ult i32 %7254, 1
  %7258 = or i1 %7256, %7257
  %7259 = zext i1 %7258 to i8
  %7260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7259, i8* %7260, align 1, !tbaa !2432
  %7261 = and i32 %7254, 255
  %7262 = call i32 @llvm.ctpop.i32(i32 %7261) #16
  %7263 = trunc i32 %7262 to i8
  %7264 = and i8 %7263, 1
  %7265 = xor i8 %7264, 1
  %7266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7265, i8* %7266, align 1, !tbaa !2446
  %7267 = xor i64 1, %7250
  %7268 = trunc i64 %7267 to i32
  %7269 = xor i32 %7268, %7254
  %7270 = lshr i32 %7269, 4
  %7271 = trunc i32 %7270 to i8
  %7272 = and i8 %7271, 1
  %7273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7272, i8* %7273, align 1, !tbaa !2447
  %7274 = icmp eq i32 %7254, 0
  %7275 = zext i1 %7274 to i8
  %7276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7275, i8* %7276, align 1, !tbaa !2448
  %7277 = lshr i32 %7254, 31
  %7278 = trunc i32 %7277 to i8
  %7279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7278, i8* %7279, align 1, !tbaa !2449
  %7280 = lshr i32 %7253, 31
  %7281 = xor i32 %7277, %7280
  %7282 = add nuw nsw i32 %7281, %7277
  %7283 = icmp eq i32 %7282, 2
  %7284 = zext i1 %7283 to i8
  %7285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7284, i8* %7285, align 1, !tbaa !2450
  %7286 = load i32, i32* %EAX
  %7287 = zext i32 %7286 to i64
  %7288 = load i64, i64* %PC
  %7289 = add i64 %7288, 7
  store i64 %7289, i64* %PC
  store i32 %7286, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7290 = load i64, i64* %PC
  %7291 = sub i64 %7290, 71
  %7292 = load i64, i64* %PC
  %7293 = add i64 %7292, 5
  store i64 %7293, i64* %PC
  %7294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7291, i64* %7294, align 8, !tbaa !2428
  br label %block_4008bb

block_400a6c:                                     ; preds = %block_400a2e, %block_400a44
  %MEMORY.18 = phi %struct.Memory* [ %6790, %block_400a44 ], [ %6790, %block_400a2e ]
  %7295 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7296 = load i64, i64* %RBP
  %7297 = sub i64 %7296, 896
  %7298 = load i64, i64* %PC
  %7299 = add i64 %7298, 8
  store i64 %7299, i64* %PC
  %7300 = inttoptr i64 %7297 to double*
  %7301 = load double, double* %7300
  %7302 = bitcast i8* %7295 to double*
  store double %7301, double* %7302, align 1, !tbaa !2455
  %7303 = getelementptr inbounds i8, i8* %7295, i64 8
  %7304 = bitcast i8* %7303 to double*
  store double 0.000000e+00, double* %7304, align 1, !tbaa !2455
  %7305 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7306 = bitcast %union.vec128_t* %XMM0 to i8*
  %7307 = load i64, i64* %PC
  %7308 = add i64 %7307, 4
  store i64 %7308, i64* %PC
  %7309 = bitcast i8* %7305 to <2 x i32>*
  %7310 = load <2 x i32>, <2 x i32>* %7309, align 1
  %7311 = getelementptr inbounds i8, i8* %7305, i64 8
  %7312 = bitcast i8* %7311 to <2 x i32>*
  %7313 = load <2 x i32>, <2 x i32>* %7312, align 1
  %7314 = bitcast i8* %7306 to double*
  %7315 = load double, double* %7314, align 1
  %7316 = fptrunc double %7315 to float
  %7317 = bitcast i8* %7305 to float*
  store float %7316, float* %7317, align 1, !tbaa !2453
  %7318 = extractelement <2 x i32> %7310, i32 1
  %7319 = getelementptr inbounds i8, i8* %7305, i64 4
  %7320 = bitcast i8* %7319 to i32*
  store i32 %7318, i32* %7320, align 1, !tbaa !2453
  %7321 = extractelement <2 x i32> %7313, i32 0
  %7322 = bitcast i8* %7311 to i32*
  store i32 %7321, i32* %7322, align 1, !tbaa !2453
  %7323 = extractelement <2 x i32> %7313, i32 1
  %7324 = getelementptr inbounds i8, i8* %7305, i64 12
  %7325 = bitcast i8* %7324 to i32*
  store i32 %7323, i32* %7325, align 1, !tbaa !2453
  %7326 = load i64, i64* %RBP
  %7327 = sub i64 %7326, 28
  %7328 = bitcast %union.vec128_t* %XMM0 to i8*
  %7329 = load i64, i64* %PC
  %7330 = add i64 %7329, 5
  store i64 %7330, i64* %PC
  %7331 = bitcast i8* %7328 to <2 x float>*
  %7332 = load <2 x float>, <2 x float>* %7331, align 1
  %7333 = extractelement <2 x float> %7332, i32 0
  %7334 = inttoptr i64 %7327 to float*
  store float %7333, float* %7334
  %7335 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7336 = load i64, i64* %RBP
  %7337 = sub i64 %7336, 24
  %7338 = load i64, i64* %PC
  %7339 = add i64 %7338, 5
  store i64 %7339, i64* %PC
  %7340 = inttoptr i64 %7337 to float*
  %7341 = load float, float* %7340
  %7342 = bitcast i8* %7335 to float*
  store float %7341, float* %7342, align 1, !tbaa !2453
  %7343 = getelementptr inbounds i8, i8* %7335, i64 4
  %7344 = bitcast i8* %7343 to float*
  store float 0.000000e+00, float* %7344, align 1, !tbaa !2453
  %7345 = getelementptr inbounds i8, i8* %7335, i64 8
  %7346 = bitcast i8* %7345 to float*
  store float 0.000000e+00, float* %7346, align 1, !tbaa !2453
  %7347 = getelementptr inbounds i8, i8* %7335, i64 12
  %7348 = bitcast i8* %7347 to float*
  store float 0.000000e+00, float* %7348, align 1, !tbaa !2453
  %7349 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7350 = bitcast %union.vec128_t* %XMM0 to i8*
  %7351 = load i64, i64* %PC
  %7352 = add i64 %7351, 4
  store i64 %7352, i64* %PC
  %7353 = bitcast i8* %7350 to <2 x float>*
  %7354 = load <2 x float>, <2 x float>* %7353, align 1
  %7355 = extractelement <2 x float> %7354, i32 0
  %7356 = fpext float %7355 to double
  %7357 = bitcast i8* %7349 to double*
  store double %7356, double* %7357, align 1, !tbaa !2455
  %7358 = load i64, i64* %PC
  %7359 = add i64 %7358, 8
  store i64 %7359, i64* %PC
  %7360 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7361 = sext i32 %7360 to i64
  store i64 %7361, i64* %RAX, align 8, !tbaa !2428
  %7362 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7363 = load i64, i64* %RAX
  %7364 = mul i64 %7363, 4
  %7365 = add i64 %7364, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %7366 = load i64, i64* %PC
  %7367 = add i64 %7366, 9
  store i64 %7367, i64* %PC
  %7368 = inttoptr i64 %7365 to float*
  %7369 = load float, float* %7368
  %7370 = bitcast i8* %7362 to float*
  store float %7369, float* %7370, align 1, !tbaa !2453
  %7371 = getelementptr inbounds i8, i8* %7362, i64 4
  %7372 = bitcast i8* %7371 to float*
  store float 0.000000e+00, float* %7372, align 1, !tbaa !2453
  %7373 = getelementptr inbounds i8, i8* %7362, i64 8
  %7374 = bitcast i8* %7373 to float*
  store float 0.000000e+00, float* %7374, align 1, !tbaa !2453
  %7375 = getelementptr inbounds i8, i8* %7362, i64 12
  %7376 = bitcast i8* %7375 to float*
  store float 0.000000e+00, float* %7376, align 1, !tbaa !2453
  %7377 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7378 = bitcast %union.vec128_t* %XMM1 to i8*
  %7379 = load i64, i64* %PC
  %7380 = add i64 %7379, 4
  store i64 %7380, i64* %PC
  %7381 = bitcast i8* %7378 to <2 x float>*
  %7382 = load <2 x float>, <2 x float>* %7381, align 1
  %7383 = extractelement <2 x float> %7382, i32 0
  %7384 = fpext float %7383 to double
  %7385 = bitcast i8* %7377 to double*
  store double %7384, double* %7385, align 1, !tbaa !2455
  %7386 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7387 = load i64, i64* %PC
  %7388 = add i64 %7387, 7
  store i64 %7388, i64* %PC
  %7389 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %7390 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %7391 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %7392 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %7393 = bitcast i8* %7386 to float*
  store float %7389, float* %7393, align 1, !tbaa !2453
  %7394 = getelementptr inbounds i8, i8* %7386, i64 4
  %7395 = bitcast i8* %7394 to float*
  store float %7390, float* %7395, align 1, !tbaa !2453
  %7396 = getelementptr inbounds i8, i8* %7386, i64 8
  %7397 = bitcast i8* %7396 to float*
  store float %7391, float* %7397, align 1, !tbaa !2453
  %7398 = getelementptr inbounds i8, i8* %7386, i64 12
  %7399 = bitcast i8* %7398 to float*
  store float %7392, float* %7399, align 1, !tbaa !2453
  %7400 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7401 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7402 = bitcast %union.vec128_t* %XMM2 to i8*
  %7403 = load i64, i64* %PC
  %7404 = add i64 %7403, 4
  store i64 %7404, i64* %PC
  %7405 = bitcast i8* %7401 to i64*
  %7406 = load i64, i64* %7405, align 1
  %7407 = getelementptr inbounds i8, i8* %7401, i64 8
  %7408 = bitcast i8* %7407 to i64*
  %7409 = load i64, i64* %7408, align 1
  %7410 = bitcast i8* %7402 to i64*
  %7411 = load i64, i64* %7410, align 1
  %7412 = getelementptr inbounds i8, i8* %7402, i64 8
  %7413 = bitcast i8* %7412 to i64*
  %7414 = load i64, i64* %7413, align 1
  %7415 = and i64 %7411, %7406
  %7416 = and i64 %7414, %7409
  %7417 = trunc i64 %7415 to i32
  %7418 = lshr i64 %7415, 32
  %7419 = trunc i64 %7418 to i32
  %7420 = bitcast i8* %7400 to i32*
  store i32 %7417, i32* %7420, align 1, !tbaa !2452
  %7421 = getelementptr inbounds i8, i8* %7400, i64 4
  %7422 = bitcast i8* %7421 to i32*
  store i32 %7419, i32* %7422, align 1, !tbaa !2452
  %7423 = trunc i64 %7416 to i32
  %7424 = getelementptr inbounds i8, i8* %7400, i64 8
  %7425 = bitcast i8* %7424 to i32*
  store i32 %7423, i32* %7425, align 1, !tbaa !2452
  %7426 = lshr i64 %7416, 32
  %7427 = trunc i64 %7426 to i32
  %7428 = getelementptr inbounds i8, i8* %7400, i64 12
  %7429 = bitcast i8* %7428 to i32*
  store i32 %7427, i32* %7429, align 1, !tbaa !2452
  %7430 = bitcast %union.vec128_t* %XMM0 to i8*
  %7431 = bitcast %union.vec128_t* %XMM1 to i8*
  %7432 = load i64, i64* %PC
  %7433 = add i64 %7432, 4
  store i64 %7433, i64* %PC
  %7434 = bitcast i8* %7430 to double*
  %7435 = load double, double* %7434, align 1
  %7436 = bitcast i8* %7431 to double*
  %7437 = load double, double* %7436, align 1
  %7438 = fcmp uno double %7435, %7437
  br i1 %7438, label %7439, label %7451

; <label>:7439:                                   ; preds = %block_400a6c
  %7440 = fadd double %7435, %7437
  %7441 = bitcast double %7440 to i64
  %7442 = and i64 %7441, 9221120237041090560
  %7443 = icmp eq i64 %7442, 9218868437227405312
  %7444 = and i64 %7441, 2251799813685247
  %7445 = icmp ne i64 %7444, 0
  %7446 = and i1 %7443, %7445
  br i1 %7446, label %7447, label %7457

; <label>:7447:                                   ; preds = %7439
  %7448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7449 = load i64, i64* %7448, align 8, !tbaa !2428
  %7450 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7449, %struct.Memory* %MEMORY.18) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:7451:                                   ; preds = %block_400a6c
  %7452 = fcmp ogt double %7435, %7437
  br i1 %7452, label %7457, label %7453

; <label>:7453:                                   ; preds = %7451
  %7454 = fcmp olt double %7435, %7437
  br i1 %7454, label %7457, label %7455

; <label>:7455:                                   ; preds = %7453
  %7456 = fcmp oeq double %7435, %7437
  br i1 %7456, label %7457, label %7464

; <label>:7457:                                   ; preds = %7455, %7453, %7451, %7439
  %7458 = phi i8 [ 0, %7451 ], [ 0, %7453 ], [ 1, %7455 ], [ 1, %7439 ]
  %7459 = phi i8 [ 0, %7451 ], [ 0, %7453 ], [ 0, %7455 ], [ 1, %7439 ]
  %7460 = phi i8 [ 0, %7451 ], [ 1, %7453 ], [ 0, %7455 ], [ 1, %7439 ]
  %7461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7458, i8* %7461, align 1, !tbaa !2451
  %7462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7459, i8* %7462, align 1, !tbaa !2451
  %7463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7460, i8* %7463, align 1, !tbaa !2451
  br label %7464

; <label>:7464:                                   ; preds = %7457, %7455
  %7465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7465, align 1, !tbaa !2451
  %7466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7466, align 1, !tbaa !2451
  %7467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7467, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %7447, %7464
  %7468 = phi %struct.Memory* [ %7450, %7447 ], [ %MEMORY.18, %7464 ]
  %7469 = load i64, i64* %PC
  %7470 = add i64 %7469, 28
  %7471 = load i64, i64* %PC
  %7472 = add i64 %7471, 6
  %7473 = load i64, i64* %PC
  %7474 = add i64 %7473, 6
  store i64 %7474, i64* %PC
  %7475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7476 = load i8, i8* %7475, align 1, !tbaa !2432
  %7477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7478 = load i8, i8* %7477, align 1, !tbaa !2448
  %7479 = or i8 %7478, %7476
  %7480 = icmp ne i8 %7479, 0
  %7481 = zext i1 %7480 to i8
  store i8 %7481, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7483 = select i1 %7480, i64 %7470, i64 %7472
  store i64 %7483, i64* %7482, align 8, !tbaa !2428
  %7484 = load i8, i8* %BRANCH_TAKEN
  %7485 = icmp eq i8 %7484, 1
  br i1 %7485, label %block_400ac6, label %block_400ab0

block_400a2e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %7486 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7487 = load i64, i64* %RBP
  %7488 = sub i64 %7487, 28
  %7489 = load i64, i64* %PC
  %7490 = add i64 %7489, 5
  store i64 %7490, i64* %PC
  %7491 = inttoptr i64 %7488 to float*
  %7492 = load float, float* %7491
  %7493 = bitcast i8* %7486 to float*
  store float %7492, float* %7493, align 1, !tbaa !2453
  %7494 = getelementptr inbounds i8, i8* %7486, i64 4
  %7495 = bitcast i8* %7494 to float*
  store float 0.000000e+00, float* %7495, align 1, !tbaa !2453
  %7496 = getelementptr inbounds i8, i8* %7486, i64 8
  %7497 = bitcast i8* %7496 to float*
  store float 0.000000e+00, float* %7497, align 1, !tbaa !2453
  %7498 = getelementptr inbounds i8, i8* %7486, i64 12
  %7499 = bitcast i8* %7498 to float*
  store float 0.000000e+00, float* %7499, align 1, !tbaa !2453
  %7500 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7501 = bitcast %union.vec128_t* %XMM0 to i8*
  %7502 = load i64, i64* %PC
  %7503 = add i64 %7502, 4
  store i64 %7503, i64* %PC
  %7504 = bitcast i8* %7501 to <2 x float>*
  %7505 = load <2 x float>, <2 x float>* %7504, align 1
  %7506 = extractelement <2 x float> %7505, i32 0
  %7507 = fpext float %7506 to double
  %7508 = bitcast i8* %7500 to double*
  store double %7507, double* %7508, align 1, !tbaa !2455
  %7509 = load i64, i64* %RBP
  %7510 = sub i64 %7509, 896
  %7511 = bitcast %union.vec128_t* %XMM0 to i8*
  %7512 = load i64, i64* %PC
  %7513 = add i64 %7512, 8
  store i64 %7513, i64* %PC
  %7514 = bitcast i8* %7511 to double*
  %7515 = load double, double* %7514, align 1
  %7516 = inttoptr i64 %7510 to double*
  store double %7515, double* %7516
  %7517 = load i64, i64* %PC
  %7518 = add i64 %7517, 45
  %7519 = load i64, i64* %PC
  %7520 = add i64 %7519, 5
  store i64 %7520, i64* %PC
  %7521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7518, i64* %7521, align 8, !tbaa !2428
  br label %block_400a6c

block_400907:                                     ; preds = %block_4008bb
  %7522 = add i64 %6608, 10
  store i64 %7522, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %7523 = load i64, i64* %PC
  %7524 = add i64 %7523, 10
  store i64 %7524, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %7525 = load i64, i64* %RBP
  %7526 = sub i64 %7525, 20
  %7527 = load i64, i64* %PC
  %7528 = add i64 %7527, 4
  store i64 %7528, i64* %PC
  store i64 %7526, i64* %R8, align 8, !tbaa !2428
  %7529 = load i64, i64* %PC
  %7530 = add i64 %7529, 7
  store i64 %7530, i64* %PC
  %7531 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %7532 = zext i32 %7531 to i64
  store i64 %7532, i64* %RSI, align 8, !tbaa !2428
  %7533 = load i64, i64* %PC
  %7534 = add i64 %7533, 7
  store i64 %7534, i64* %PC
  %7535 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7536 = zext i32 %7535 to i64
  store i64 %7536, i64* %RDX, align 8, !tbaa !2428
  %7537 = load i64, i64* %PC
  %7538 = add i64 %7537, 3715
  %7539 = load i64, i64* %PC
  %7540 = add i64 %7539, 5
  %7541 = load i64, i64* %PC
  %7542 = add i64 %7541, 5
  store i64 %7542, i64* %PC
  %7543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7544 = load i64, i64* %7543, align 8, !tbaa !2428
  %7545 = add i64 %7544, -8
  %7546 = inttoptr i64 %7545 to i64*
  store i64 %7540, i64* %7546
  store i64 %7545, i64* %7543, align 8, !tbaa !2428
  %7547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7538, i64* %7547, align 8, !tbaa !2428
  %7548 = load i64, i64* %PC
  %7549 = call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* %0, i64 %7548, %struct.Memory* %MEMORY.14)
  %7550 = load i64, i64* %PC
  %7551 = add i64 %7550, 11
  store i64 %7551, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_40093d

block_4013ab:                                     ; preds = %block_40139b
  %7552 = add i64 %7109, 10
  store i64 %7552, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %7553 = load i64, i64* %PC
  %7554 = add i64 %7553, 10
  store i64 %7554, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %7555 = load i64, i64* %RBP
  %7556 = sub i64 %7555, 20
  %7557 = load i64, i64* %PC
  %7558 = add i64 %7557, 4
  store i64 %7558, i64* %PC
  store i64 %7556, i64* %R8, align 8, !tbaa !2428
  %7559 = load i64, i64* %PC
  %7560 = add i64 %7559, 7
  store i64 %7560, i64* %PC
  %7561 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %7562 = zext i32 %7561 to i64
  store i64 %7562, i64* %RSI, align 8, !tbaa !2428
  %7563 = load i64, i64* %PC
  %7564 = add i64 %7563, 7
  store i64 %7564, i64* %PC
  %7565 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7566 = zext i32 %7565 to i64
  store i64 %7566, i64* %RDX, align 8, !tbaa !2428
  %7567 = load i64, i64* %PC
  %7568 = add i64 %7567, 991
  %7569 = load i64, i64* %PC
  %7570 = add i64 %7569, 5
  %7571 = load i64, i64* %PC
  %7572 = add i64 %7571, 5
  store i64 %7572, i64* %PC
  %7573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7574 = load i64, i64* %7573, align 8, !tbaa !2428
  %7575 = add i64 %7574, -8
  %7576 = inttoptr i64 %7575 to i64*
  store i64 %7570, i64* %7576
  store i64 %7575, i64* %7573, align 8, !tbaa !2428
  %7577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7568, i64* %7577, align 8, !tbaa !2428
  %7578 = load i64, i64* %PC
  %7579 = call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* %0, i64 %7578, %struct.Memory* %MEMORY.17)
  %7580 = load i64, i64* %PC
  %7581 = add i64 %7580, 7
  store i64 %7581, i64* %PC
  %7582 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7583 = zext i32 %7582 to i64
  store i64 %7583, i64* %RAX, align 8, !tbaa !2428
  %7584 = load i64, i64* %RAX
  %7585 = load i64, i64* %PC
  %7586 = add i64 %7585, 3
  store i64 %7586, i64* %PC
  %7587 = trunc i64 %7584 to i32
  %7588 = add i32 1, %7587
  %7589 = zext i32 %7588 to i64
  store i64 %7589, i64* %RAX, align 8, !tbaa !2428
  %7590 = icmp ult i32 %7588, %7587
  %7591 = icmp ult i32 %7588, 1
  %7592 = or i1 %7590, %7591
  %7593 = zext i1 %7592 to i8
  %7594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7593, i8* %7594, align 1, !tbaa !2432
  %7595 = and i32 %7588, 255
  %7596 = call i32 @llvm.ctpop.i32(i32 %7595) #16
  %7597 = trunc i32 %7596 to i8
  %7598 = and i8 %7597, 1
  %7599 = xor i8 %7598, 1
  %7600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7599, i8* %7600, align 1, !tbaa !2446
  %7601 = xor i64 1, %7584
  %7602 = trunc i64 %7601 to i32
  %7603 = xor i32 %7602, %7588
  %7604 = lshr i32 %7603, 4
  %7605 = trunc i32 %7604 to i8
  %7606 = and i8 %7605, 1
  %7607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7606, i8* %7607, align 1, !tbaa !2447
  %7608 = icmp eq i32 %7588, 0
  %7609 = zext i1 %7608 to i8
  %7610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7609, i8* %7610, align 1, !tbaa !2448
  %7611 = lshr i32 %7588, 31
  %7612 = trunc i32 %7611 to i8
  %7613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7612, i8* %7613, align 1, !tbaa !2449
  %7614 = lshr i32 %7587, 31
  %7615 = xor i32 %7611, %7614
  %7616 = add nuw nsw i32 %7615, %7611
  %7617 = icmp eq i32 %7616, 2
  %7618 = zext i1 %7617 to i8
  %7619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7618, i8* %7619, align 1, !tbaa !2450
  %7620 = load i32, i32* %EAX
  %7621 = zext i32 %7620 to i64
  %7622 = load i64, i64* %PC
  %7623 = add i64 %7622, 7
  store i64 %7623, i64* %PC
  store i32 %7620, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7624 = load i64, i64* %PC
  %7625 = sub i64 %7624, 76
  %7626 = load i64, i64* %PC
  %7627 = add i64 %7626, 5
  store i64 %7627, i64* %PC
  %7628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7625, i64* %7628, align 8, !tbaa !2428
  br label %block_40139b

block_401580:                                     ; preds = %block_4014fa
  %7629 = sub i64 %3649, 4032
  %7630 = load i64, i64* %PC
  %7631 = add i64 %7630, 5
  %7632 = load i64, i64* %PC
  %7633 = add i64 %7632, 5
  store i64 %7633, i64* %PC
  %7634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7635 = load i64, i64* %7634, align 8, !tbaa !2428
  %7636 = add i64 %7635, -8
  %7637 = inttoptr i64 %7636 to i64*
  store i64 %7631, i64* %7637
  store i64 %7636, i64* %7634, align 8, !tbaa !2428
  %7638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7629, i64* %7638, align 8, !tbaa !2428
  %7639 = load i64, i64* %PC
  %7640 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %7639, %struct.Memory* %MEMORY.6)
  %7641 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7642 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7643 = load i64, i64* %RBP
  %7644 = sub i64 %7643, 40
  %7645 = load i64, i64* %PC
  %7646 = add i64 %7645, 5
  store i64 %7646, i64* %PC
  %7647 = bitcast i8* %7642 to <2 x float>*
  %7648 = load <2 x float>, <2 x float>* %7647, align 1
  %7649 = getelementptr inbounds i8, i8* %7642, i64 8
  %7650 = bitcast i8* %7649 to <2 x i32>*
  %7651 = load <2 x i32>, <2 x i32>* %7650, align 1
  %7652 = inttoptr i64 %7644 to float*
  %7653 = load float, float* %7652
  %7654 = extractelement <2 x float> %7648, i32 0
  %7655 = fsub float %7654, %7653
  %7656 = bitcast i8* %7641 to float*
  store float %7655, float* %7656, align 1, !tbaa !2453
  %7657 = bitcast <2 x float> %7648 to <2 x i32>
  %7658 = extractelement <2 x i32> %7657, i32 1
  %7659 = getelementptr inbounds i8, i8* %7641, i64 4
  %7660 = bitcast i8* %7659 to i32*
  store i32 %7658, i32* %7660, align 1, !tbaa !2453
  %7661 = extractelement <2 x i32> %7651, i32 0
  %7662 = getelementptr inbounds i8, i8* %7641, i64 8
  %7663 = bitcast i8* %7662 to i32*
  store i32 %7661, i32* %7663, align 1, !tbaa !2453
  %7664 = extractelement <2 x i32> %7651, i32 1
  %7665 = getelementptr inbounds i8, i8* %7641, i64 12
  %7666 = bitcast i8* %7665 to i32*
  store i32 %7664, i32* %7666, align 1, !tbaa !2453
  %7667 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7668 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7669 = load i64, i64* %RBP
  %7670 = sub i64 %7669, 44
  %7671 = load i64, i64* %PC
  %7672 = add i64 %7671, 5
  store i64 %7672, i64* %PC
  %7673 = bitcast i8* %7668 to <2 x float>*
  %7674 = load <2 x float>, <2 x float>* %7673, align 1
  %7675 = getelementptr inbounds i8, i8* %7668, i64 8
  %7676 = bitcast i8* %7675 to <2 x i32>*
  %7677 = load <2 x i32>, <2 x i32>* %7676, align 1
  %7678 = inttoptr i64 %7670 to float*
  %7679 = load float, float* %7678
  %7680 = extractelement <2 x float> %7674, i32 0
  %7681 = fsub float %7680, %7679
  %7682 = bitcast i8* %7667 to float*
  store float %7681, float* %7682, align 1, !tbaa !2453
  %7683 = bitcast <2 x float> %7674 to <2 x i32>
  %7684 = extractelement <2 x i32> %7683, i32 1
  %7685 = getelementptr inbounds i8, i8* %7667, i64 4
  %7686 = bitcast i8* %7685 to i32*
  store i32 %7684, i32* %7686, align 1, !tbaa !2453
  %7687 = extractelement <2 x i32> %7677, i32 0
  %7688 = getelementptr inbounds i8, i8* %7667, i64 8
  %7689 = bitcast i8* %7688 to i32*
  store i32 %7687, i32* %7689, align 1, !tbaa !2453
  %7690 = extractelement <2 x i32> %7677, i32 1
  %7691 = getelementptr inbounds i8, i8* %7667, i64 12
  %7692 = bitcast i8* %7691 to i32*
  store i32 %7690, i32* %7692, align 1, !tbaa !2453
  %7693 = load i64, i64* %PC
  %7694 = add i64 %7693, 7
  store i64 %7694, i64* %PC
  %7695 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %7696 = zext i32 %7695 to i64
  store i64 %7696, i64* %RAX, align 8, !tbaa !2428
  %7697 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7698 = load i32, i32* %EAX
  %7699 = zext i32 %7698 to i64
  %7700 = load i64, i64* %PC
  %7701 = add i64 %7700, 4
  store i64 %7701, i64* %PC
  %7702 = bitcast i8* %7697 to <2 x i32>*
  %7703 = load <2 x i32>, <2 x i32>* %7702, align 1
  %7704 = getelementptr inbounds i8, i8* %7697, i64 8
  %7705 = bitcast i8* %7704 to <2 x i32>*
  %7706 = load <2 x i32>, <2 x i32>* %7705, align 1
  %7707 = sitofp i32 %7698 to float
  %7708 = bitcast i8* %7697 to float*
  store float %7707, float* %7708, align 1, !tbaa !2453
  %7709 = extractelement <2 x i32> %7703, i32 1
  %7710 = getelementptr inbounds i8, i8* %7697, i64 4
  %7711 = bitcast i8* %7710 to i32*
  store i32 %7709, i32* %7711, align 1, !tbaa !2453
  %7712 = extractelement <2 x i32> %7706, i32 0
  %7713 = bitcast i8* %7704 to i32*
  store i32 %7712, i32* %7713, align 1, !tbaa !2453
  %7714 = extractelement <2 x i32> %7706, i32 1
  %7715 = getelementptr inbounds i8, i8* %7697, i64 12
  %7716 = bitcast i8* %7715 to i32*
  store i32 %7714, i32* %7716, align 1, !tbaa !2453
  %7717 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7718 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7719 = bitcast %union.vec128_t* %XMM1 to i8*
  %7720 = load i64, i64* %PC
  %7721 = add i64 %7720, 4
  store i64 %7721, i64* %PC
  %7722 = bitcast i8* %7718 to <2 x float>*
  %7723 = load <2 x float>, <2 x float>* %7722, align 1
  %7724 = getelementptr inbounds i8, i8* %7718, i64 8
  %7725 = bitcast i8* %7724 to <2 x i32>*
  %7726 = load <2 x i32>, <2 x i32>* %7725, align 1
  %7727 = bitcast i8* %7719 to <2 x float>*
  %7728 = load <2 x float>, <2 x float>* %7727, align 1
  %7729 = extractelement <2 x float> %7723, i32 0
  %7730 = extractelement <2 x float> %7728, i32 0
  %7731 = fdiv float %7729, %7730
  %7732 = bitcast i8* %7717 to float*
  store float %7731, float* %7732, align 1, !tbaa !2453
  %7733 = bitcast <2 x float> %7723 to <2 x i32>
  %7734 = extractelement <2 x i32> %7733, i32 1
  %7735 = getelementptr inbounds i8, i8* %7717, i64 4
  %7736 = bitcast i8* %7735 to i32*
  store i32 %7734, i32* %7736, align 1, !tbaa !2453
  %7737 = extractelement <2 x i32> %7726, i32 0
  %7738 = getelementptr inbounds i8, i8* %7717, i64 8
  %7739 = bitcast i8* %7738 to i32*
  store i32 %7737, i32* %7739, align 1, !tbaa !2453
  %7740 = extractelement <2 x i32> %7726, i32 1
  %7741 = getelementptr inbounds i8, i8* %7717, i64 12
  %7742 = bitcast i8* %7741 to i32*
  store i32 %7740, i32* %7742, align 1, !tbaa !2453
  %7743 = load i64, i64* %PC
  %7744 = add i64 %7743, 8
  store i64 %7744, i64* %PC
  %7745 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %7746 = sext i32 %7745 to i64
  store i64 %7746, i64* %RCX, align 8, !tbaa !2428
  %7747 = load i64, i64* %RCX
  %7748 = mul i64 %7747, 4
  %7749 = add i64 %7748, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %7750 = bitcast %union.vec128_t* %XMM0 to i8*
  %7751 = load i64, i64* %PC
  %7752 = add i64 %7751, 9
  store i64 %7752, i64* %PC
  %7753 = bitcast i8* %7750 to <2 x float>*
  %7754 = load <2 x float>, <2 x float>* %7753, align 1
  %7755 = extractelement <2 x float> %7754, i32 0
  %7756 = inttoptr i64 %7749 to float*
  store float %7755, float* %7756
  %7757 = load i64, i64* %PC
  %7758 = sub i64 %7757, 4079
  %7759 = load i64, i64* %PC
  %7760 = add i64 %7759, 5
  %7761 = load i64, i64* %PC
  %7762 = add i64 %7761, 5
  store i64 %7762, i64* %PC
  %7763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7764 = load i64, i64* %7763, align 8, !tbaa !2428
  %7765 = add i64 %7764, -8
  %7766 = inttoptr i64 %7765 to i64*
  store i64 %7760, i64* %7766
  store i64 %7765, i64* %7763, align 8, !tbaa !2428
  %7767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7758, i64* %7767, align 8, !tbaa !2428
  %7768 = load i64, i64* %PC
  %7769 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %7768, %struct.Memory* %7640)
  %7770 = load i64, i64* %RBP
  %7771 = sub i64 %7770, 40
  %7772 = bitcast %union.vec128_t* %XMM0 to i8*
  %7773 = load i64, i64* %PC
  %7774 = add i64 %7773, 5
  store i64 %7774, i64* %PC
  %7775 = bitcast i8* %7772 to <2 x float>*
  %7776 = load <2 x float>, <2 x float>* %7775, align 1
  %7777 = extractelement <2 x float> %7776, i32 0
  %7778 = inttoptr i64 %7771 to float*
  store float %7777, float* %7778
  %7779 = load i64, i64* %PC
  %7780 = add i64 %7779, 11
  store i64 %7780, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4015c4

block_400d80:                                     ; preds = %block_400e43, %block_400d39
  %MEMORY.19 = phi %struct.Memory* [ %3503, %block_400d39 ], [ %MEMORY.15, %block_400e43 ]
  %7781 = load i64, i64* %PC
  %7782 = sub i64 %7781, 1984
  %7783 = load i64, i64* %PC
  %7784 = add i64 %7783, 5
  %7785 = load i64, i64* %PC
  %7786 = add i64 %7785, 5
  store i64 %7786, i64* %PC
  %7787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7788 = load i64, i64* %7787, align 8, !tbaa !2428
  %7789 = add i64 %7788, -8
  %7790 = inttoptr i64 %7789 to i64*
  store i64 %7784, i64* %7790
  store i64 %7789, i64* %7787, align 8, !tbaa !2428
  %7791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7782, i64* %7791, align 8, !tbaa !2428
  %7792 = load i64, i64* %PC
  %7793 = call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* %0, i64 %7792, %struct.Memory* %MEMORY.19)
  %7794 = load i64, i64* %RBP
  %7795 = sub i64 %7794, 80
  %7796 = bitcast %union.vec128_t* %XMM0 to i8*
  %7797 = load i64, i64* %PC
  %7798 = add i64 %7797, 5
  store i64 %7798, i64* %PC
  %7799 = bitcast i8* %7796 to <2 x float>*
  %7800 = load <2 x float>, <2 x float>* %7799, align 1
  %7801 = extractelement <2 x float> %7800, i32 0
  %7802 = inttoptr i64 %7795 to float*
  store float %7801, float* %7802
  %7803 = load i64, i64* %RBP
  %7804 = sub i64 %7803, 64
  %7805 = load i64, i64* %PC
  %7806 = add i64 %7805, 3
  store i64 %7806, i64* %PC
  %7807 = inttoptr i64 %7804 to i32*
  %7808 = load i32, i32* %7807
  %7809 = zext i32 %7808 to i64
  store i64 %7809, i64* %RAX, align 8, !tbaa !2428
  %7810 = load i64, i64* %RAX
  %7811 = load i64, i64* %PC
  %7812 = add i64 %7811, 3
  store i64 %7812, i64* %PC
  %7813 = trunc i64 %7810 to i32
  %7814 = add i32 1, %7813
  %7815 = zext i32 %7814 to i64
  store i64 %7815, i64* %RAX, align 8, !tbaa !2428
  %7816 = icmp ult i32 %7814, %7813
  %7817 = icmp ult i32 %7814, 1
  %7818 = or i1 %7816, %7817
  %7819 = zext i1 %7818 to i8
  %7820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7819, i8* %7820, align 1, !tbaa !2432
  %7821 = and i32 %7814, 255
  %7822 = call i32 @llvm.ctpop.i32(i32 %7821) #16
  %7823 = trunc i32 %7822 to i8
  %7824 = and i8 %7823, 1
  %7825 = xor i8 %7824, 1
  %7826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7825, i8* %7826, align 1, !tbaa !2446
  %7827 = xor i64 1, %7810
  %7828 = trunc i64 %7827 to i32
  %7829 = xor i32 %7828, %7814
  %7830 = lshr i32 %7829, 4
  %7831 = trunc i32 %7830 to i8
  %7832 = and i8 %7831, 1
  %7833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7832, i8* %7833, align 1, !tbaa !2447
  %7834 = icmp eq i32 %7814, 0
  %7835 = zext i1 %7834 to i8
  %7836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7835, i8* %7836, align 1, !tbaa !2448
  %7837 = lshr i32 %7814, 31
  %7838 = trunc i32 %7837 to i8
  %7839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7838, i8* %7839, align 1, !tbaa !2449
  %7840 = lshr i32 %7813, 31
  %7841 = xor i32 %7837, %7840
  %7842 = add nuw nsw i32 %7841, %7837
  %7843 = icmp eq i32 %7842, 2
  %7844 = zext i1 %7843 to i8
  %7845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7844, i8* %7845, align 1, !tbaa !2450
  %7846 = load i64, i64* %RBP
  %7847 = sub i64 %7846, 64
  %7848 = load i32, i32* %EAX
  %7849 = zext i32 %7848 to i64
  %7850 = load i64, i64* %PC
  %7851 = add i64 %7850, 3
  store i64 %7851, i64* %PC
  %7852 = inttoptr i64 %7847 to i32*
  store i32 %7848, i32* %7852
  %7853 = load i64, i64* %PC
  %7854 = add i64 %7853, 11
  store i64 %7854, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_400d9e
}

; Function Attrs: noinline
define %struct.Memory* @sub_402d70_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402d70:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 4
  %46 = load i32, i32* %EDI
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %45 to i32*
  store i32 %46, i32* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = bitcast %union.vec128_t* %XMM0 to i8*
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 5
  store i64 %55, i64* %PC
  %56 = bitcast i8* %53 to <2 x float>*
  %57 = load <2 x float>, <2 x float>* %56, align 1
  %58 = extractelement <2 x float> %57, i32 0
  %59 = inttoptr i64 %52 to float*
  store float %58, float* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 16
  %62 = load i64, i64* %RSI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 20
  %68 = load i32, i32* %EDX
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 32
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 28
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 7
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i32*
  store i32 0, i32* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 4
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i32*
  %88 = load i32, i32* %87
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %89, align 1, !tbaa !2432
  %90 = and i32 %88, 255
  %91 = call i32 @llvm.ctpop.i32(i32 %90) #16
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %94, i8* %95, align 1, !tbaa !2446
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %96, align 1, !tbaa !2447
  %97 = icmp eq i32 %88, 0
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %98, i8* %99, align 1, !tbaa !2448
  %100 = lshr i32 %88, 31
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %101, i8* %102, align 1, !tbaa !2449
  %103 = lshr i32 %88, 31
  %104 = xor i32 %100, %103
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %107, i8* %108, align 1, !tbaa !2450
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 11
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 6
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 6
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %116 = load i8, i8* %115, align 1, !tbaa !2448
  %117 = icmp eq i8 %116, 0
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %119 = load i8, i8* %118, align 1, !tbaa !2449
  %120 = icmp ne i8 %119, 0
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %122 = load i8, i8* %121, align 1, !tbaa !2450
  %123 = icmp ne i8 %122, 0
  %124 = xor i1 %120, %123
  %125 = xor i1 %124, true
  %126 = and i1 %117, %125
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %129 = select i1 %126, i64 %110, i64 %112
  store i64 %129, i64* %128, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_402da0, label %block_402d9b

block_402d9b:                                     ; preds = %block_402d70
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 158
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 5
  store i64 %135, i64* %PC
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %133, i64* %136, align 8, !tbaa !2428
  br label %block_402e39

block_402dbb:                                     ; preds = %block_402dc7, %block_402daa
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402daa ], [ %MEMORY.0, %block_402dc7 ]
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 24
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  %142 = load i32, i32* %141
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = load i32, i32* %EAX
  %145 = zext i32 %144 to i64
  %146 = load i64, i64* %RBP
  %147 = sub i64 %146, 36
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 3
  store i64 %149, i64* %PC
  %150 = inttoptr i64 %147 to i32*
  %151 = load i32, i32* %150
  %152 = sub i32 %144, %151
  %153 = icmp ult i32 %144, %151
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %154, i8* %155, align 1, !tbaa !2432
  %156 = and i32 %152, 255
  %157 = call i32 @llvm.ctpop.i32(i32 %156) #16
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %160, i8* %161, align 1, !tbaa !2446
  %162 = xor i32 %151, %144
  %163 = xor i32 %162, %152
  %164 = lshr i32 %163, 4
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %166, i8* %167, align 1, !tbaa !2447
  %168 = icmp eq i32 %152, 0
  %169 = zext i1 %168 to i8
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %169, i8* %170, align 1, !tbaa !2448
  %171 = lshr i32 %152, 31
  %172 = trunc i32 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %172, i8* %173, align 1, !tbaa !2449
  %174 = lshr i32 %144, 31
  %175 = lshr i32 %151, 31
  %176 = xor i32 %175, %174
  %177 = xor i32 %171, %174
  %178 = add nuw nsw i32 %177, %176
  %179 = icmp eq i32 %178, 2
  %180 = zext i1 %179 to i8
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %180, i8* %181, align 1, !tbaa !2450
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 51
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 6
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 6
  store i64 %187, i64* %PC
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %189 = load i8, i8* %188, align 1, !tbaa !2449
  %190 = icmp ne i8 %189, 0
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %192 = load i8, i8* %191, align 1, !tbaa !2450
  %193 = icmp ne i8 %192, 0
  %194 = xor i1 %190, %193
  %195 = xor i1 %194, true
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %198 = select i1 %194, i64 %185, i64 %183
  store i64 %198, i64* %197, align 8, !tbaa !2428
  %199 = load i8, i8* %BRANCH_TAKEN
  %200 = icmp eq i8 %199, 1
  br i1 %200, label %block_402df4, label %block_402dc7

block_402df9:                                     ; preds = %block_402da0
  %201 = sub i64 %657, 24
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 7
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i32*
  store i32 0, i32* %204
  br label %block_402e00

block_402df4:                                     ; preds = %block_402dbb
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 69
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %206, i64* %209, align 8, !tbaa !2428
  br label %block_402e39

block_402e0c:                                     ; preds = %block_402e00
  %210 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 8
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 5
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to float*
  %216 = load float, float* %215
  %217 = bitcast i8* %210 to float*
  store float %216, float* %217, align 1, !tbaa !2453
  %218 = getelementptr inbounds i8, i8* %210, i64 4
  %219 = bitcast i8* %218 to float*
  store float 0.000000e+00, float* %219, align 1, !tbaa !2453
  %220 = getelementptr inbounds i8, i8* %210, i64 8
  %221 = bitcast i8* %220 to float*
  store float 0.000000e+00, float* %221, align 1, !tbaa !2453
  %222 = getelementptr inbounds i8, i8* %210, i64 12
  %223 = bitcast i8* %222 to float*
  store float 0.000000e+00, float* %223, align 1, !tbaa !2453
  %224 = load i64, i64* %RBP
  %225 = sub i64 %224, 16
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 24
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = sext i32 %235 to i64
  store i64 %236, i64* %RCX, align 8, !tbaa !2428
  %237 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %RCX
  %241 = mul i64 %240, 4
  %242 = add i64 %241, %239
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 5
  store i64 %244, i64* %PC
  %245 = bitcast i8* %238 to <2 x float>*
  %246 = load <2 x float>, <2 x float>* %245, align 1
  %247 = getelementptr inbounds i8, i8* %238, i64 8
  %248 = bitcast i8* %247 to <2 x i32>*
  %249 = load <2 x i32>, <2 x i32>* %248, align 1
  %250 = inttoptr i64 %242 to float*
  %251 = load float, float* %250
  %252 = extractelement <2 x float> %246, i32 0
  %253 = fmul float %252, %251
  %254 = bitcast i8* %237 to float*
  store float %253, float* %254, align 1, !tbaa !2453
  %255 = bitcast <2 x float> %246 to <2 x i32>
  %256 = extractelement <2 x i32> %255, i32 1
  %257 = getelementptr inbounds i8, i8* %237, i64 4
  %258 = bitcast i8* %257 to i32*
  store i32 %256, i32* %258, align 1, !tbaa !2453
  %259 = extractelement <2 x i32> %249, i32 0
  %260 = getelementptr inbounds i8, i8* %237, i64 8
  %261 = bitcast i8* %260 to i32*
  store i32 %259, i32* %261, align 1, !tbaa !2453
  %262 = extractelement <2 x i32> %249, i32 1
  %263 = getelementptr inbounds i8, i8* %237, i64 12
  %264 = bitcast i8* %263 to i32*
  store i32 %262, i32* %264, align 1, !tbaa !2453
  %265 = load i64, i64* %RBP
  %266 = sub i64 %265, 16
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC
  %269 = inttoptr i64 %266 to i64*
  %270 = load i64, i64* %269
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 24
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %272 to i32*
  %276 = load i32, i32* %275
  %277 = sext i32 %276 to i64
  store i64 %277, i64* %RCX, align 8, !tbaa !2428
  %278 = load i64, i64* %RAX
  %279 = load i64, i64* %RCX
  %280 = mul i64 %279, 4
  %281 = add i64 %280, %278
  %282 = bitcast %union.vec128_t* %XMM0 to i8*
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 5
  store i64 %284, i64* %PC
  %285 = bitcast i8* %282 to <2 x float>*
  %286 = load <2 x float>, <2 x float>* %285, align 1
  %287 = extractelement <2 x float> %286, i32 0
  %288 = inttoptr i64 %281 to float*
  store float %287, float* %288
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 24
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 3
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i32*
  %294 = load i32, i32* %293
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = load i64, i64* %RAX
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = trunc i64 %296 to i32
  %300 = add i32 1, %299
  %301 = zext i32 %300 to i64
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = icmp ult i32 %300, %299
  %303 = icmp ult i32 %300, 1
  %304 = or i1 %302, %303
  %305 = zext i1 %304 to i8
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %305, i8* %306, align 1, !tbaa !2432
  %307 = and i32 %300, 255
  %308 = call i32 @llvm.ctpop.i32(i32 %307) #16
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %311, i8* %312, align 1, !tbaa !2446
  %313 = xor i64 1, %296
  %314 = trunc i64 %313 to i32
  %315 = xor i32 %314, %300
  %316 = lshr i32 %315, 4
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %318, i8* %319, align 1, !tbaa !2447
  %320 = icmp eq i32 %300, 0
  %321 = zext i1 %320 to i8
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %321, i8* %322, align 1, !tbaa !2448
  %323 = lshr i32 %300, 31
  %324 = trunc i32 %323 to i8
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %324, i8* %325, align 1, !tbaa !2449
  %326 = lshr i32 %299, 31
  %327 = xor i32 %323, %326
  %328 = add nuw nsw i32 %327, %323
  %329 = icmp eq i32 %328, 2
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %330, i8* %331, align 1, !tbaa !2450
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 24
  %334 = load i32, i32* %EAX
  %335 = zext i32 %334 to i64
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC
  %338 = inttoptr i64 %333 to i32*
  store i32 %334, i32* %338
  %339 = load i64, i64* %PC
  %340 = sub i64 %339, 52
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 5
  store i64 %342, i64* %PC
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %340, i64* %343, align 8, !tbaa !2428
  br label %block_402e00

block_402e39:                                     ; preds = %block_402e00, %block_402df4, %block_402d9b
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_402e00 ], [ %MEMORY.0, %block_402df4 ], [ %2, %block_402d9b ]
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 1
  store i64 %345, i64* %PC
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %347 = load i64, i64* %346, align 8, !tbaa !2428
  %348 = add i64 %347, 8
  %349 = inttoptr i64 %347 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RBP, align 8, !tbaa !2428
  store i64 %348, i64* %346, align 8, !tbaa !2428
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 1
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %355 = load i64, i64* %354, align 8, !tbaa !2428
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %353, align 8, !tbaa !2428
  %358 = add i64 %355, 8
  store i64 %358, i64* %354, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_402daa:                                     ; preds = %block_402da0
  %359 = sub i64 %657, 4
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 3
  store i64 %361, i64* %PC
  %362 = inttoptr i64 %359 to i32*
  %363 = load i32, i32* %362
  %364 = zext i32 %363 to i64
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = load i64, i64* %RAX
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 20
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i32*
  %371 = load i32, i32* %370
  %372 = shl i64 %365, 32
  %373 = ashr exact i64 %372, 32
  %374 = sext i32 %371 to i64
  %375 = mul nsw i64 %374, %373
  %376 = trunc i64 %375 to i32
  %377 = and i64 %375, 4294967295
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = shl i64 %375, 32
  %379 = ashr exact i64 %378, 32
  %380 = icmp ne i64 %379, %375
  %381 = zext i1 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %381, i8* %382, align 1, !tbaa !2432
  %383 = and i32 %376, 255
  %384 = call i32 @llvm.ctpop.i32(i32 %383) #16
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  %387 = xor i8 %386, 1
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %387, i8* %388, align 1, !tbaa !2446
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %389, align 1, !tbaa !2447
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %390, align 1, !tbaa !2448
  %391 = lshr i32 %376, 31
  %392 = trunc i32 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %392, i8* %393, align 1, !tbaa !2449
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %381, i8* %394, align 1, !tbaa !2450
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 36
  %397 = load i32, i32* %EAX
  %398 = zext i32 %397 to i64
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 3
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %396 to i32*
  store i32 %397, i32* %401
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 24
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 7
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i32*
  store i32 0, i32* %406
  br label %block_402dbb

block_402e00:                                     ; preds = %block_402e0c, %block_402df9
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_402df9 ], [ %MEMORY.2, %block_402e0c ]
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 24
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = load i32, i32* %EAX
  %415 = zext i32 %414 to i64
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 4
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 3
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i32*
  %421 = load i32, i32* %420
  %422 = sub i32 %414, %421
  %423 = icmp ult i32 %414, %421
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %424, i8* %425, align 1, !tbaa !2432
  %426 = and i32 %422, 255
  %427 = call i32 @llvm.ctpop.i32(i32 %426) #16
  %428 = trunc i32 %427 to i8
  %429 = and i8 %428, 1
  %430 = xor i8 %429, 1
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %430, i8* %431, align 1, !tbaa !2446
  %432 = xor i32 %421, %414
  %433 = xor i32 %432, %422
  %434 = lshr i32 %433, 4
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %436, i8* %437, align 1, !tbaa !2447
  %438 = icmp eq i32 %422, 0
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %439, i8* %440, align 1, !tbaa !2448
  %441 = lshr i32 %422, 31
  %442 = trunc i32 %441 to i8
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %442, i8* %443, align 1, !tbaa !2449
  %444 = lshr i32 %414, 31
  %445 = lshr i32 %421, 31
  %446 = xor i32 %445, %444
  %447 = xor i32 %441, %444
  %448 = add nuw nsw i32 %447, %446
  %449 = icmp eq i32 %448, 2
  %450 = zext i1 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %450, i8* %451, align 1, !tbaa !2450
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 51
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 6
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 6
  store i64 %457, i64* %PC
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %459 = load i8, i8* %458, align 1, !tbaa !2449
  %460 = icmp ne i8 %459, 0
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %462 = load i8, i8* %461, align 1, !tbaa !2450
  %463 = icmp ne i8 %462, 0
  %464 = xor i1 %460, %463
  %465 = xor i1 %464, true
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %464, i64 %455, i64 %453
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_402e39, label %block_402e0c

block_402dc7:                                     ; preds = %block_402dbb
  %471 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 8
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 5
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to float*
  %477 = load float, float* %476
  %478 = bitcast i8* %471 to float*
  store float %477, float* %478, align 1, !tbaa !2453
  %479 = getelementptr inbounds i8, i8* %471, i64 4
  %480 = bitcast i8* %479 to float*
  store float 0.000000e+00, float* %480, align 1, !tbaa !2453
  %481 = getelementptr inbounds i8, i8* %471, i64 8
  %482 = bitcast i8* %481 to float*
  store float 0.000000e+00, float* %482, align 1, !tbaa !2453
  %483 = getelementptr inbounds i8, i8* %471, i64 12
  %484 = bitcast i8* %483 to float*
  store float 0.000000e+00, float* %484, align 1, !tbaa !2453
  %485 = load i64, i64* %RBP
  %486 = sub i64 %485, 16
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %486 to i64*
  %490 = load i64, i64* %489
  store i64 %490, i64* %RAX, align 8, !tbaa !2428
  %491 = load i64, i64* %RBP
  %492 = sub i64 %491, 24
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 4
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = sext i32 %496 to i64
  store i64 %497, i64* %RCX, align 8, !tbaa !2428
  %498 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %499 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %500 = load i64, i64* %RAX
  %501 = load i64, i64* %RCX
  %502 = mul i64 %501, 4
  %503 = add i64 %502, %500
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  store i64 %505, i64* %PC
  %506 = bitcast i8* %499 to <2 x float>*
  %507 = load <2 x float>, <2 x float>* %506, align 1
  %508 = getelementptr inbounds i8, i8* %499, i64 8
  %509 = bitcast i8* %508 to <2 x i32>*
  %510 = load <2 x i32>, <2 x i32>* %509, align 1
  %511 = inttoptr i64 %503 to float*
  %512 = load float, float* %511
  %513 = extractelement <2 x float> %507, i32 0
  %514 = fmul float %513, %512
  %515 = bitcast i8* %498 to float*
  store float %514, float* %515, align 1, !tbaa !2453
  %516 = bitcast <2 x float> %507 to <2 x i32>
  %517 = extractelement <2 x i32> %516, i32 1
  %518 = getelementptr inbounds i8, i8* %498, i64 4
  %519 = bitcast i8* %518 to i32*
  store i32 %517, i32* %519, align 1, !tbaa !2453
  %520 = extractelement <2 x i32> %510, i32 0
  %521 = getelementptr inbounds i8, i8* %498, i64 8
  %522 = bitcast i8* %521 to i32*
  store i32 %520, i32* %522, align 1, !tbaa !2453
  %523 = extractelement <2 x i32> %510, i32 1
  %524 = getelementptr inbounds i8, i8* %498, i64 12
  %525 = bitcast i8* %524 to i32*
  store i32 %523, i32* %525, align 1, !tbaa !2453
  %526 = load i64, i64* %RBP
  %527 = sub i64 %526, 16
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 4
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i64*
  %531 = load i64, i64* %530
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 24
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 4
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %533 to i32*
  %537 = load i32, i32* %536
  %538 = sext i32 %537 to i64
  store i64 %538, i64* %RCX, align 8, !tbaa !2428
  %539 = load i64, i64* %RAX
  %540 = load i64, i64* %RCX
  %541 = mul i64 %540, 4
  %542 = add i64 %541, %539
  %543 = bitcast %union.vec128_t* %XMM0 to i8*
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 5
  store i64 %545, i64* %PC
  %546 = bitcast i8* %543 to <2 x float>*
  %547 = load <2 x float>, <2 x float>* %546, align 1
  %548 = extractelement <2 x float> %547, i32 0
  %549 = inttoptr i64 %542 to float*
  store float %548, float* %549
  %550 = load i64, i64* %RBP
  %551 = sub i64 %550, 24
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 3
  store i64 %553, i64* %PC
  %554 = inttoptr i64 %551 to i32*
  %555 = load i32, i32* %554
  %556 = zext i32 %555 to i64
  store i64 %556, i64* %RAX, align 8, !tbaa !2428
  %557 = load i64, i64* %RAX
  %558 = load i64, i64* %RBP
  %559 = sub i64 %558, 20
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 3
  store i64 %561, i64* %PC
  %562 = trunc i64 %557 to i32
  %563 = inttoptr i64 %559 to i32*
  %564 = load i32, i32* %563
  %565 = add i32 %564, %562
  %566 = zext i32 %565 to i64
  store i64 %566, i64* %RAX, align 8, !tbaa !2428
  %567 = icmp ult i32 %565, %562
  %568 = icmp ult i32 %565, %564
  %569 = or i1 %567, %568
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %570, i8* %571, align 1, !tbaa !2432
  %572 = and i32 %565, 255
  %573 = call i32 @llvm.ctpop.i32(i32 %572) #16
  %574 = trunc i32 %573 to i8
  %575 = and i8 %574, 1
  %576 = xor i8 %575, 1
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %576, i8* %577, align 1, !tbaa !2446
  %578 = xor i32 %564, %562
  %579 = xor i32 %578, %565
  %580 = lshr i32 %579, 4
  %581 = trunc i32 %580 to i8
  %582 = and i8 %581, 1
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %582, i8* %583, align 1, !tbaa !2447
  %584 = icmp eq i32 %565, 0
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %585, i8* %586, align 1, !tbaa !2448
  %587 = lshr i32 %565, 31
  %588 = trunc i32 %587 to i8
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %588, i8* %589, align 1, !tbaa !2449
  %590 = lshr i32 %562, 31
  %591 = lshr i32 %564, 31
  %592 = xor i32 %587, %590
  %593 = xor i32 %587, %591
  %594 = add nuw nsw i32 %592, %593
  %595 = icmp eq i32 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 24
  %600 = load i32, i32* %EAX
  %601 = zext i32 %600 to i64
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %599 to i32*
  store i32 %600, i32* %604
  %605 = load i64, i64* %PC
  %606 = sub i64 %605, 52
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 5
  store i64 %608, i64* %PC
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %606, i64* %609, align 8, !tbaa !2428
  br label %block_402dbb

block_402da0:                                     ; preds = %block_402d70
  %610 = load i64, i64* %RBP
  %611 = sub i64 %610, 20
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 4
  store i64 %613, i64* %PC
  %614 = inttoptr i64 %611 to i32*
  %615 = load i32, i32* %614
  %616 = sub i32 %615, 1
  %617 = icmp ult i32 %615, 1
  %618 = zext i1 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %618, i8* %619, align 1, !tbaa !2432
  %620 = and i32 %616, 255
  %621 = call i32 @llvm.ctpop.i32(i32 %620) #16
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %624, i8* %625, align 1, !tbaa !2446
  %626 = xor i32 %615, 1
  %627 = xor i32 %626, %616
  %628 = lshr i32 %627, 4
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %630, i8* %631, align 1, !tbaa !2447
  %632 = icmp eq i32 %616, 0
  %633 = zext i1 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %633, i8* %634, align 1, !tbaa !2448
  %635 = lshr i32 %616, 31
  %636 = trunc i32 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %636, i8* %637, align 1, !tbaa !2449
  %638 = lshr i32 %615, 31
  %639 = xor i32 %635, %638
  %640 = add nuw nsw i32 %639, %638
  %641 = icmp eq i32 %640, 2
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %642, i8* %643, align 1, !tbaa !2450
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 85
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 6
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 6
  store i64 %649, i64* %PC
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %651 = load i8, i8* %650, align 1, !tbaa !2448
  store i8 %651, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %653 = icmp ne i8 %651, 0
  %654 = select i1 %653, i64 %645, i64 %647
  store i64 %654, i64* %652, align 8, !tbaa !2428
  %655 = load i8, i8* %BRANCH_TAKEN
  %656 = icmp eq i8 %655, 1
  %657 = load i64, i64* %RBP
  br i1 %656, label %block_402df9, label %block_402daa
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028d0_print_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4028d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RBP
  %26 = sub i64 %25, 4
  %27 = load i32, i32* %EDI
  %28 = zext i32 %27 to i64
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  %31 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %31
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 1
  store i64 %40, i64* %PC
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %41, align 8, !tbaa !2428
  %46 = add i64 %43, 8
  store i64 %46, i64* %42, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (i64* @stderr to i64)
  %37 = icmp ult i64 %33, ptrtoint (i64* @stderr to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (i64* @stderr to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400538, label %block_400521

block_400538:                                     ; preds = %block_400521, %block_400533, %block_400510
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400510 ], [ %2, %block_400521 ], [ %2, %block_400533 ]
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 1
  store i64 %90, i64* %PC
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %91, align 8, !tbaa !2428
  %96 = add i64 %93, 8
  store i64 %96, i64* %92, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40053a:                                     ; preds = %block_40052b
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = add i64 %98, %97
  %100 = load i16, i16* %AX
  %101 = zext i16 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = load i64, i64* %PC
  %105 = tail call %struct.Memory* @sub_400540_register_tm_clones(%struct.State* %0, i64 %104, %struct.Memory* %2)
  ret %struct.Memory* %105

block_400533:                                     ; preds = %block_40052b
  %106 = load i64, i64* %RAX
  %107 = load i64, i64* %RAX
  %108 = add i64 %107, %106
  %109 = load i32, i32* %EAX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC
  br label %block_400538

block_40052b:                                     ; preds = %block_400521
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 1
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %116 = load i64, i64* %115, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %115, align 8, !tbaa !2428
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  switch i64 %126, label %163 [
    i64 4195642, label %block_40053a
    i64 4195635, label %block_400533
  ]

block_400521:                                     ; preds = %block_400510
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  store i64 %128, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %RAX
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 3
  store i64 %132, i64* %PC
  %133 = and i64 %130, %129
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2432
  %135 = trunc i64 %133 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2446
  %142 = icmp eq i64 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %133, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %148, align 1, !tbaa !2450
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2447
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 15
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 2
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 2
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = load i8, i8* %156, align 1, !tbaa !2448
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = icmp ne i8 %157, 0
  %160 = select i1 %159, i64 %151, i64 %153
  store i64 %160, i64* %158, align 8, !tbaa !2428
  %161 = load i8, i8* %BRANCH_TAKEN
  %162 = icmp eq i8 %161, 1
  br i1 %162, label %block_400538, label %block_40052b

; <label>:163:                                    ; preds = %block_40052b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402eb0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402eb4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400500__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400500:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e40___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402e40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 10740
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400478__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_402e96, label %block_402e76

block_402e96:                                     ; preds = %block_402e80, %block_402e40
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_402e40 ], [ %387, %block_402e80 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402e76:                                     ; preds = %block_402e40
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_402e80

block_402e80:                                     ; preds = %block_402e80, %block_402e76
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_402e76 ], [ %387, %block_402e80 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_402e80, label %block_402e96
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c90_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c90:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 17
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %R8D = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 19
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %R9D = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 7
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 9
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 11
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RDI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 13
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RSP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 15
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RBP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 17
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R8 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = sub i64 %66, 96
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  %70 = icmp ult i64 %66, 96
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2432
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2446
  %80 = xor i64 96, %66
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %66, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i64, i64* %RDI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 12
  %106 = load i32, i32* %ESI
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 16
  %113 = load i32, i32* %EDX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 24
  %120 = load i64, i64* %RCX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 32
  %126 = load i64, i64* %R8
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 36
  %132 = load i32, i32* %R9D
  %133 = zext i32 %132 to i64
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %131 to i32*
  store i32 %132, i32* %136
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  %142 = load i32, i32* %141
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RDX, align 8, !tbaa !2428
  %144 = load i64, i64* %RDX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  %147 = trunc i64 %144 to i32
  %148 = sub i32 %147, 1
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RDX, align 8, !tbaa !2428
  %150 = icmp ult i32 %147, 1
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2432
  %153 = and i32 %148, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2446
  %159 = xor i64 1, %144
  %160 = trunc i64 %159 to i32
  %161 = xor i32 %160, %148
  %162 = lshr i32 %161, 4
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %164, i8* %165, align 1, !tbaa !2447
  %166 = icmp eq i32 %148, 0
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %167, i8* %168, align 1, !tbaa !2448
  %169 = lshr i32 %148, 31
  %170 = trunc i32 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2449
  %172 = lshr i32 %147, 31
  %173 = xor i32 %169, %172
  %174 = add nuw nsw i32 %173, %172
  %175 = icmp eq i32 %174, 2
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %176, i8* %177, align 1, !tbaa !2450
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 56
  %180 = load i32, i32* %EDX
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %179 to i32*
  store i32 %180, i32* %184
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 36
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i32*
  %190 = load i32, i32* %189
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %191, align 1, !tbaa !2432
  %192 = and i32 %190, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %198, align 1, !tbaa !2447
  %199 = icmp eq i32 %190, 0
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %200, i8* %201, align 1, !tbaa !2448
  %202 = lshr i32 %190, 31
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %203, i8* %204, align 1, !tbaa !2449
  %205 = lshr i32 %190, 31
  %206 = xor i32 %202, %205
  %207 = add nuw nsw i32 %206, %205
  %208 = icmp eq i32 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2450
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 413
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 6
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 6
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %218 = load i8, i8* %217, align 1, !tbaa !2448
  %219 = icmp eq i8 %218, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %222 = select i1 %219, i64 %212, i64 %214
  store i64 %222, i64* %221, align 8, !tbaa !2428
  %223 = load i8, i8* %BRANCH_TAKEN
  %224 = icmp eq i8 %223, 1
  %225 = load i64, i64* %RBP
  br i1 %224, label %block_401e58, label %block_401cc1

block_401ef6:                                     ; preds = %block_401eec
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 48
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  store i32 1, i32* %230
  br label %block_401efd

block_401e6b:                                     ; preds = %block_401e5f
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %233 = load i64, i64* %RBP
  %234 = sub i64 %233, 44
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 3
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i32*
  %238 = load i32, i32* %237
  %239 = zext i32 %238 to i64
  store i64 %239, i64* %RDI, align 8, !tbaa !2428
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 8
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RCX, align 8, !tbaa !2428
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 12
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 3
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i32*
  %251 = load i32, i32* %250
  %252 = zext i32 %251 to i64
  store i64 %252, i64* %RDX, align 8, !tbaa !2428
  %253 = load i64, i64* %RDX
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 44
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i32*
  %259 = load i32, i32* %258
  %260 = shl i64 %253, 32
  %261 = ashr exact i64 %260, 32
  %262 = sext i32 %259 to i64
  %263 = mul nsw i64 %262, %261
  %264 = trunc i64 %263 to i32
  %265 = and i64 %263, 4294967295
  store i64 %265, i64* %RDX, align 8, !tbaa !2428
  %266 = shl i64 %263, 32
  %267 = ashr exact i64 %266, 32
  %268 = icmp ne i64 %267, %263
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %269, i8* %270, align 1, !tbaa !2432
  %271 = and i32 %264, 255
  %272 = call i32 @llvm.ctpop.i32(i32 %271) #16
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %275, i8* %276, align 1, !tbaa !2446
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %277, align 1, !tbaa !2447
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %278, align 1, !tbaa !2448
  %279 = lshr i32 %264, 31
  %280 = trunc i32 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %280, i8* %281, align 1, !tbaa !2449
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %269, i8* %282, align 1, !tbaa !2450
  %283 = load i64, i64* %RDX
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 3
  store i64 %285, i64* %PC
  %286 = trunc i64 %283 to i32
  %287 = zext i32 %286 to i64
  store i64 %287, i64* %RDX, align 8, !tbaa !2428
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %288, align 1, !tbaa !2432
  %289 = and i32 %286, 255
  %290 = call i32 @llvm.ctpop.i32(i32 %289) #16
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %293, i8* %294, align 1, !tbaa !2446
  %295 = trunc i64 %283 to i32
  %296 = xor i32 %295, %286
  %297 = lshr i32 %296, 4
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %299, i8* %300, align 1, !tbaa !2447
  %301 = icmp eq i32 %286, 0
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %302, i8* %303, align 1, !tbaa !2448
  %304 = lshr i32 %286, 31
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %305, i8* %306, align 1, !tbaa !2449
  %307 = lshr i32 %286, 31
  %308 = xor i32 %304, %307
  %309 = add nuw nsw i32 %308, %304
  %310 = icmp eq i32 %309, 2
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %311, i8* %312, align 1, !tbaa !2450
  %313 = load i32, i32* %EDX
  %314 = zext i32 %313 to i64
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 3
  store i64 %316, i64* %PC
  %317 = shl i64 %314, 32
  %318 = ashr exact i64 %317, 32
  store i64 %318, i64* %RSI, align 8, !tbaa !2428
  %319 = load i64, i64* %RSI
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = shl i64 %319, 1
  %323 = icmp slt i64 %322, 0
  %324 = shl i64 %322, 1
  store i64 %324, i64* %RSI, align 8, !tbaa !2428
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %326 = zext i1 %323 to i8
  store i8 %326, i8* %325, align 1, !tbaa !2451
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %328 = trunc i64 %324 to i32
  %329 = and i32 %328, 254
  %330 = call i32 @llvm.ctpop.i32(i32 %329) #16
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = xor i8 %332, 1
  store i8 %333, i8* %327, align 1, !tbaa !2451
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %334, align 1, !tbaa !2451
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %336 = icmp eq i64 %324, 0
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %335, align 1, !tbaa !2451
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %339 = lshr i64 %324, 63
  %340 = trunc i64 %339 to i8
  store i8 %340, i8* %338, align 1, !tbaa !2451
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %341, align 1, !tbaa !2451
  %342 = load i64, i64* %RCX
  %343 = load i64, i64* %RSI
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  %346 = add i64 %343, %342
  store i64 %346, i64* %RCX, align 8, !tbaa !2428
  %347 = icmp ult i64 %346, %342
  %348 = icmp ult i64 %346, %343
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2432
  %352 = trunc i64 %346 to i32
  %353 = and i32 %352, 255
  %354 = call i32 @llvm.ctpop.i32(i32 %353) #16
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %357, i8* %358, align 1, !tbaa !2446
  %359 = xor i64 %343, %342
  %360 = xor i64 %359, %346
  %361 = lshr i64 %360, 4
  %362 = trunc i64 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2447
  %365 = icmp eq i64 %346, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2448
  %368 = lshr i64 %346, 63
  %369 = trunc i64 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2449
  %371 = lshr i64 %342, 63
  %372 = lshr i64 %343, 63
  %373 = xor i64 %368, %371
  %374 = xor i64 %368, %372
  %375 = add nuw nsw i64 %373, %374
  %376 = icmp eq i64 %375, 2
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %377, i8* %378, align 1, !tbaa !2450
  %379 = load i64, i64* %RBP
  %380 = sub i64 %379, 32
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 4
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %380 to i64*
  %384 = load i64, i64* %383
  store i64 %384, i64* %RSI, align 8, !tbaa !2428
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 72
  %387 = load i64, i64* %RSI
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %386 to i64*
  store i64 %387, i64* %390
  %391 = load i64, i64* %RCX
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  store i64 %391, i64* %RSI, align 8, !tbaa !2428
  %394 = load i32, i32* %EAX
  %395 = zext i32 %394 to i64
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 2
  store i64 %397, i64* %PC
  %398 = and i64 %395, 4294967295
  store i64 %398, i64* %RDX, align 8, !tbaa !2428
  %399 = load i64, i64* %RBP
  %400 = sub i64 %399, 72
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 4
  store i64 %402, i64* %PC
  %403 = inttoptr i64 %400 to i64*
  %404 = load i64, i64* %403
  store i64 %404, i64* %RCX, align 8, !tbaa !2428
  %405 = bitcast i32* %R8D to i64*
  %406 = load i32, i32* %EAX
  %407 = zext i32 %406 to i64
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 3
  store i64 %409, i64* %PC
  %410 = and i64 %407, 4294967295
  store i64 %410, i64* %405, align 8, !tbaa !2428
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 2993
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 5
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 5
  store i64 %416, i64* %PC
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %418 = load i64, i64* %417, align 8, !tbaa !2428
  %419 = add i64 %418, -8
  %420 = inttoptr i64 %419 to i64*
  store i64 %414, i64* %420
  store i64 %419, i64* %417, align 8, !tbaa !2428
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %412, i64* %421, align 8, !tbaa !2428
  %422 = load i64, i64* %PC
  %423 = call %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* %0, i64 %422, %struct.Memory* %MEMORY.0)
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 40
  %426 = bitcast %union.vec128_t* %XMM0 to i8*
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 5
  store i64 %428, i64* %PC
  %429 = bitcast i8* %426 to <2 x float>*
  %430 = load <2 x float>, <2 x float>* %429, align 1
  %431 = extractelement <2 x float> %430, i32 0
  %432 = inttoptr i64 %425 to float*
  store float %431, float* %432
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 32
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437
  store i64 %438, i64* %RCX, align 8, !tbaa !2428
  %439 = load i64, i64* %RBP
  %440 = sub i64 %439, 44
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 4
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %440 to i32*
  %444 = load i32, i32* %443
  %445 = sext i32 %444 to i64
  store i64 %445, i64* %RSI, align 8, !tbaa !2428
  %446 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %447 = load i64, i64* %RCX
  %448 = load i64, i64* %RSI
  %449 = mul i64 %448, 4
  %450 = add i64 %449, %447
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 5
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to float*
  %454 = load float, float* %453
  %455 = bitcast i8* %446 to float*
  store float %454, float* %455, align 1, !tbaa !2453
  %456 = getelementptr inbounds i8, i8* %446, i64 4
  %457 = bitcast i8* %456 to float*
  store float 0.000000e+00, float* %457, align 1, !tbaa !2453
  %458 = getelementptr inbounds i8, i8* %446, i64 8
  %459 = bitcast i8* %458 to float*
  store float 0.000000e+00, float* %459, align 1, !tbaa !2453
  %460 = getelementptr inbounds i8, i8* %446, i64 12
  %461 = bitcast i8* %460 to float*
  store float 0.000000e+00, float* %461, align 1, !tbaa !2453
  %462 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %463 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 40
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 5
  store i64 %467, i64* %PC
  %468 = bitcast i8* %463 to <2 x float>*
  %469 = load <2 x float>, <2 x float>* %468, align 1
  %470 = getelementptr inbounds i8, i8* %463, i64 8
  %471 = bitcast i8* %470 to <2 x i32>*
  %472 = load <2 x i32>, <2 x i32>* %471, align 1
  %473 = inttoptr i64 %465 to float*
  %474 = load float, float* %473
  %475 = extractelement <2 x float> %469, i32 0
  %476 = fsub float %475, %474
  %477 = bitcast i8* %462 to float*
  store float %476, float* %477, align 1, !tbaa !2453
  %478 = bitcast <2 x float> %469 to <2 x i32>
  %479 = extractelement <2 x i32> %478, i32 1
  %480 = getelementptr inbounds i8, i8* %462, i64 4
  %481 = bitcast i8* %480 to i32*
  store i32 %479, i32* %481, align 1, !tbaa !2453
  %482 = extractelement <2 x i32> %472, i32 0
  %483 = getelementptr inbounds i8, i8* %462, i64 8
  %484 = bitcast i8* %483 to i32*
  store i32 %482, i32* %484, align 1, !tbaa !2453
  %485 = extractelement <2 x i32> %472, i32 1
  %486 = getelementptr inbounds i8, i8* %462, i64 12
  %487 = bitcast i8* %486 to i32*
  store i32 %485, i32* %487, align 1, !tbaa !2453
  %488 = load i64, i64* %RBP
  %489 = sub i64 %488, 8
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %RCX, align 8, !tbaa !2428
  %494 = load i64, i64* %RBP
  %495 = sub i64 %494, 12
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i32*
  %499 = load i32, i32* %498
  %500 = zext i32 %499 to i64
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 44
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i32*
  %507 = load i32, i32* %506
  %508 = shl i64 %501, 32
  %509 = ashr exact i64 %508, 32
  %510 = sext i32 %507 to i64
  %511 = mul nsw i64 %510, %509
  %512 = trunc i64 %511 to i32
  %513 = and i64 %511, 4294967295
  store i64 %513, i64* %RAX, align 8, !tbaa !2428
  %514 = shl i64 %511, 32
  %515 = ashr exact i64 %514, 32
  %516 = icmp ne i64 %515, %511
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %517, i8* %518, align 1, !tbaa !2432
  %519 = and i32 %512, 255
  %520 = call i32 @llvm.ctpop.i32(i32 %519) #16
  %521 = trunc i32 %520 to i8
  %522 = and i8 %521, 1
  %523 = xor i8 %522, 1
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %523, i8* %524, align 1, !tbaa !2446
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %525, align 1, !tbaa !2447
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %526, align 1, !tbaa !2448
  %527 = lshr i32 %512, 31
  %528 = trunc i32 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %528, i8* %529, align 1, !tbaa !2449
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %517, i8* %530, align 1, !tbaa !2450
  %531 = load i64, i64* %RAX
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 44
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  %536 = trunc i64 %531 to i32
  %537 = inttoptr i64 %533 to i32*
  %538 = load i32, i32* %537
  %539 = add i32 %538, %536
  %540 = zext i32 %539 to i64
  store i64 %540, i64* %RAX, align 8, !tbaa !2428
  %541 = icmp ult i32 %539, %536
  %542 = icmp ult i32 %539, %538
  %543 = or i1 %541, %542
  %544 = zext i1 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %544, i8* %545, align 1, !tbaa !2432
  %546 = and i32 %539, 255
  %547 = call i32 @llvm.ctpop.i32(i32 %546) #16
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %550, i8* %551, align 1, !tbaa !2446
  %552 = xor i32 %538, %536
  %553 = xor i32 %552, %539
  %554 = lshr i32 %553, 4
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %556, i8* %557, align 1, !tbaa !2447
  %558 = icmp eq i32 %539, 0
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %559, i8* %560, align 1, !tbaa !2448
  %561 = lshr i32 %539, 31
  %562 = trunc i32 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %562, i8* %563, align 1, !tbaa !2449
  %564 = lshr i32 %536, 31
  %565 = lshr i32 %538, 31
  %566 = xor i32 %561, %564
  %567 = xor i32 %561, %565
  %568 = add nuw nsw i32 %566, %567
  %569 = icmp eq i32 %568, 2
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %570, i8* %571, align 1, !tbaa !2450
  %572 = load i32, i32* %EAX
  %573 = zext i32 %572 to i64
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 3
  store i64 %575, i64* %PC
  %576 = shl i64 %573, 32
  %577 = ashr exact i64 %576, 32
  store i64 %577, i64* %RSI, align 8, !tbaa !2428
  %578 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %579 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %580 = load i64, i64* %RCX
  %581 = load i64, i64* %RSI
  %582 = mul i64 %581, 4
  %583 = add i64 %582, %580
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  store i64 %585, i64* %PC
  %586 = bitcast i8* %579 to <2 x float>*
  %587 = load <2 x float>, <2 x float>* %586, align 1
  %588 = getelementptr inbounds i8, i8* %579, i64 8
  %589 = bitcast i8* %588 to <2 x i32>*
  %590 = load <2 x i32>, <2 x i32>* %589, align 1
  %591 = inttoptr i64 %583 to float*
  %592 = load float, float* %591
  %593 = extractelement <2 x float> %587, i32 0
  %594 = fdiv float %593, %592
  %595 = bitcast i8* %578 to float*
  store float %594, float* %595, align 1, !tbaa !2453
  %596 = bitcast <2 x float> %587 to <2 x i32>
  %597 = extractelement <2 x i32> %596, i32 1
  %598 = getelementptr inbounds i8, i8* %578, i64 4
  %599 = bitcast i8* %598 to i32*
  store i32 %597, i32* %599, align 1, !tbaa !2453
  %600 = extractelement <2 x i32> %590, i32 0
  %601 = getelementptr inbounds i8, i8* %578, i64 8
  %602 = bitcast i8* %601 to i32*
  store i32 %600, i32* %602, align 1, !tbaa !2453
  %603 = extractelement <2 x i32> %590, i32 1
  %604 = getelementptr inbounds i8, i8* %578, i64 12
  %605 = bitcast i8* %604 to i32*
  store i32 %603, i32* %605, align 1, !tbaa !2453
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 32
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  %610 = inttoptr i64 %607 to i64*
  %611 = load i64, i64* %610
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = load i64, i64* %RBP
  %613 = sub i64 %612, 44
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 4
  store i64 %615, i64* %PC
  %616 = inttoptr i64 %613 to i32*
  %617 = load i32, i32* %616
  %618 = sext i32 %617 to i64
  store i64 %618, i64* %RSI, align 8, !tbaa !2428
  %619 = load i64, i64* %RCX
  %620 = load i64, i64* %RSI
  %621 = mul i64 %620, 4
  %622 = add i64 %621, %619
  %623 = bitcast %union.vec128_t* %XMM0 to i8*
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 5
  store i64 %625, i64* %PC
  %626 = bitcast i8* %623 to <2 x float>*
  %627 = load <2 x float>, <2 x float>* %626, align 1
  %628 = extractelement <2 x float> %627, i32 0
  %629 = inttoptr i64 %622 to float*
  store float %628, float* %629
  %630 = load i64, i64* %RBP
  %631 = sub i64 %630, 44
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 3
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %631 to i32*
  %635 = load i32, i32* %634
  %636 = zext i32 %635 to i64
  store i64 %636, i64* %RAX, align 8, !tbaa !2428
  %637 = load i64, i64* %RAX
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC
  %640 = trunc i64 %637 to i32
  %641 = add i32 1, %640
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RAX, align 8, !tbaa !2428
  %643 = icmp ult i32 %641, %640
  %644 = icmp ult i32 %641, 1
  %645 = or i1 %643, %644
  %646 = zext i1 %645 to i8
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %646, i8* %647, align 1, !tbaa !2432
  %648 = and i32 %641, 255
  %649 = call i32 @llvm.ctpop.i32(i32 %648) #16
  %650 = trunc i32 %649 to i8
  %651 = and i8 %650, 1
  %652 = xor i8 %651, 1
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %652, i8* %653, align 1, !tbaa !2446
  %654 = xor i64 1, %637
  %655 = trunc i64 %654 to i32
  %656 = xor i32 %655, %641
  %657 = lshr i32 %656, 4
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %659, i8* %660, align 1, !tbaa !2447
  %661 = icmp eq i32 %641, 0
  %662 = zext i1 %661 to i8
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %662, i8* %663, align 1, !tbaa !2448
  %664 = lshr i32 %641, 31
  %665 = trunc i32 %664 to i8
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %665, i8* %666, align 1, !tbaa !2449
  %667 = lshr i32 %640, 31
  %668 = xor i32 %664, %667
  %669 = add nuw nsw i32 %668, %664
  %670 = icmp eq i32 %669, 2
  %671 = zext i1 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %671, i8* %672, align 1, !tbaa !2450
  %673 = load i64, i64* %RBP
  %674 = sub i64 %673, 44
  %675 = load i32, i32* %EAX
  %676 = zext i32 %675 to i64
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 3
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %674 to i32*
  store i32 %675, i32* %679
  %680 = load i64, i64* %PC
  %681 = sub i64 %680, 136
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 5
  store i64 %683, i64* %PC
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %681, i64* %684, align 8, !tbaa !2428
  br label %block_401e5f

block_401e5f:                                     ; preds = %block_401e58, %block_401e6b
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e58 ], [ %423, %block_401e6b ]
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 44
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %686 to i32*
  %690 = load i32, i32* %689
  %691 = zext i32 %690 to i64
  store i64 %691, i64* %RAX, align 8, !tbaa !2428
  %692 = load i32, i32* %EAX
  %693 = zext i32 %692 to i64
  %694 = load i64, i64* %RBP
  %695 = sub i64 %694, 16
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 3
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to i32*
  %699 = load i32, i32* %698
  %700 = sub i32 %692, %699
  %701 = icmp ult i32 %692, %699
  %702 = zext i1 %701 to i8
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %702, i8* %703, align 1, !tbaa !2432
  %704 = and i32 %700, 255
  %705 = call i32 @llvm.ctpop.i32(i32 %704) #16
  %706 = trunc i32 %705 to i8
  %707 = and i8 %706, 1
  %708 = xor i8 %707, 1
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %708, i8* %709, align 1, !tbaa !2446
  %710 = xor i32 %699, %692
  %711 = xor i32 %710, %700
  %712 = lshr i32 %711, 4
  %713 = trunc i32 %712 to i8
  %714 = and i8 %713, 1
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %714, i8* %715, align 1, !tbaa !2447
  %716 = icmp eq i32 %700, 0
  %717 = zext i1 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %717, i8* %718, align 1, !tbaa !2448
  %719 = lshr i32 %700, 31
  %720 = trunc i32 %719 to i8
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %720, i8* %721, align 1, !tbaa !2449
  %722 = lshr i32 %692, 31
  %723 = lshr i32 %699, 31
  %724 = xor i32 %723, %722
  %725 = xor i32 %719, %722
  %726 = add nuw nsw i32 %725, %724
  %727 = icmp eq i32 %726, 2
  %728 = zext i1 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %728, i8* %729, align 1, !tbaa !2450
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 135
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 6
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 6
  store i64 %735, i64* %PC
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %737 = load i8, i8* %736, align 1, !tbaa !2449
  %738 = icmp ne i8 %737, 0
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %740 = load i8, i8* %739, align 1, !tbaa !2450
  %741 = icmp ne i8 %740, 0
  %742 = xor i1 %738, %741
  %743 = xor i1 %742, true
  %744 = zext i1 %743 to i8
  store i8 %744, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %746 = select i1 %742, i64 %733, i64 %731
  store i64 %746, i64* %745, align 8, !tbaa !2428
  %747 = load i8, i8* %BRANCH_TAKEN
  %748 = icmp eq i8 %747, 1
  br i1 %748, label %block_401eec, label %block_401e6b

block_401e53:                                     ; preds = %block_401da8
  %749 = add i64 %2288, 436
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 5
  store i64 %751, i64* %PC
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %749, i64* %752, align 8, !tbaa !2428
  br label %block_402007

block_401cd2:                                     ; preds = %block_401d36, %block_401ccb
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401ccb ], [ %1447, %block_401d36 ]
  %753 = load i64, i64* %RBP
  %754 = sub i64 %753, 44
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 3
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %754 to i32*
  %758 = load i32, i32* %757
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RAX, align 8, !tbaa !2428
  %760 = load i32, i32* %EAX
  %761 = zext i32 %760 to i64
  %762 = load i64, i64* %RBP
  %763 = sub i64 %762, 56
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 3
  store i64 %765, i64* %PC
  %766 = inttoptr i64 %763 to i32*
  %767 = load i32, i32* %766
  %768 = sub i32 %760, %767
  %769 = icmp ult i32 %760, %767
  %770 = zext i1 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %770, i8* %771, align 1, !tbaa !2432
  %772 = and i32 %768, 255
  %773 = call i32 @llvm.ctpop.i32(i32 %772) #16
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = xor i8 %775, 1
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %776, i8* %777, align 1, !tbaa !2446
  %778 = xor i32 %767, %760
  %779 = xor i32 %778, %768
  %780 = lshr i32 %779, 4
  %781 = trunc i32 %780 to i8
  %782 = and i8 %781, 1
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %782, i8* %783, align 1, !tbaa !2447
  %784 = icmp eq i32 %768, 0
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %785, i8* %786, align 1, !tbaa !2448
  %787 = lshr i32 %768, 31
  %788 = trunc i32 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %788, i8* %789, align 1, !tbaa !2449
  %790 = lshr i32 %760, 31
  %791 = lshr i32 %767, 31
  %792 = xor i32 %791, %790
  %793 = xor i32 %787, %790
  %794 = add nuw nsw i32 %793, %792
  %795 = icmp eq i32 %794, 2
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %796, i8* %797, align 1, !tbaa !2450
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 196
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 6
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 6
  store i64 %803, i64* %PC
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %805 = load i8, i8* %804, align 1, !tbaa !2449
  %806 = icmp ne i8 %805, 0
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %808 = load i8, i8* %807, align 1, !tbaa !2450
  %809 = icmp ne i8 %808, 0
  %810 = xor i1 %806, %809
  %811 = xor i1 %810, true
  %812 = zext i1 %811 to i8
  store i8 %812, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %814 = select i1 %810, i64 %801, i64 %799
  store i64 %814, i64* %813, align 8, !tbaa !2428
  %815 = load i8, i8* %BRANCH_TAKEN
  %816 = icmp eq i8 %815, 1
  br i1 %816, label %block_401d9c, label %block_401cde

block_401ccb:                                     ; preds = %block_401cc1
  %817 = load i64, i64* %RBP
  %818 = sub i64 %817, 44
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 7
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %818 to i32*
  store i32 0, i32* %821
  br label %block_401cd2

block_401cde:                                     ; preds = %block_401cd2
  %822 = load i64, i64* %RBP
  %823 = sub i64 %822, 24
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 4
  store i64 %825, i64* %PC
  %826 = inttoptr i64 %823 to i64*
  %827 = load i64, i64* %826
  store i64 %827, i64* %RAX, align 8, !tbaa !2428
  %828 = load i64, i64* %RBP
  %829 = sub i64 %828, 44
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 4
  store i64 %831, i64* %PC
  %832 = inttoptr i64 %829 to i32*
  %833 = load i32, i32* %832
  %834 = sext i32 %833 to i64
  store i64 %834, i64* %RCX, align 8, !tbaa !2428
  %835 = load i64, i64* %RAX
  %836 = load i64, i64* %RCX
  %837 = mul i64 %836, 4
  %838 = add i64 %837, %835
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 3
  store i64 %840, i64* %PC
  %841 = inttoptr i64 %838 to i32*
  %842 = load i32, i32* %841
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RDX, align 8, !tbaa !2428
  %844 = load i64, i64* %RBP
  %845 = sub i64 %844, 52
  %846 = load i32, i32* %EDX
  %847 = zext i32 %846 to i64
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 3
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %845 to i32*
  store i32 %846, i32* %850
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 32
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 4
  store i64 %854, i64* %PC
  %855 = inttoptr i64 %852 to i64*
  %856 = load i64, i64* %855
  store i64 %856, i64* %RAX, align 8, !tbaa !2428
  %857 = load i64, i64* %RBP
  %858 = sub i64 %857, 52
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 4
  store i64 %860, i64* %PC
  %861 = inttoptr i64 %858 to i32*
  %862 = load i32, i32* %861
  %863 = sext i32 %862 to i64
  store i64 %863, i64* %RCX, align 8, !tbaa !2428
  %864 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %865 = load i64, i64* %RAX
  %866 = load i64, i64* %RCX
  %867 = mul i64 %866, 4
  %868 = add i64 %867, %865
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 5
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to float*
  %872 = load float, float* %871
  %873 = bitcast i8* %864 to float*
  store float %872, float* %873, align 1, !tbaa !2453
  %874 = getelementptr inbounds i8, i8* %864, i64 4
  %875 = bitcast i8* %874 to float*
  store float 0.000000e+00, float* %875, align 1, !tbaa !2453
  %876 = getelementptr inbounds i8, i8* %864, i64 8
  %877 = bitcast i8* %876 to float*
  store float 0.000000e+00, float* %877, align 1, !tbaa !2453
  %878 = getelementptr inbounds i8, i8* %864, i64 12
  %879 = bitcast i8* %878 to float*
  store float 0.000000e+00, float* %879, align 1, !tbaa !2453
  %880 = load i64, i64* %RBP
  %881 = sub i64 %880, 40
  %882 = bitcast %union.vec128_t* %XMM0 to i8*
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 5
  store i64 %884, i64* %PC
  %885 = bitcast i8* %882 to <2 x float>*
  %886 = load <2 x float>, <2 x float>* %885, align 1
  %887 = extractelement <2 x float> %886, i32 0
  %888 = inttoptr i64 %881 to float*
  store float %887, float* %888
  %889 = load i64, i64* %RBP
  %890 = sub i64 %889, 52
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 3
  store i64 %892, i64* %PC
  %893 = inttoptr i64 %890 to i32*
  %894 = load i32, i32* %893
  %895 = zext i32 %894 to i64
  store i64 %895, i64* %RDX, align 8, !tbaa !2428
  %896 = load i32, i32* %EDX
  %897 = zext i32 %896 to i64
  %898 = load i64, i64* %RBP
  %899 = sub i64 %898, 44
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 3
  store i64 %901, i64* %PC
  %902 = inttoptr i64 %899 to i32*
  %903 = load i32, i32* %902
  %904 = sub i32 %896, %903
  %905 = icmp ult i32 %896, %903
  %906 = zext i1 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %906, i8* %907, align 1, !tbaa !2432
  %908 = and i32 %904, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #16
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = xor i32 %903, %896
  %915 = xor i32 %914, %904
  %916 = lshr i32 %915, 4
  %917 = trunc i32 %916 to i8
  %918 = and i8 %917, 1
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %918, i8* %919, align 1, !tbaa !2447
  %920 = icmp eq i32 %904, 0
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %921, i8* %922, align 1, !tbaa !2448
  %923 = lshr i32 %904, 31
  %924 = trunc i32 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %924, i8* %925, align 1, !tbaa !2449
  %926 = lshr i32 %896, 31
  %927 = lshr i32 %903, 31
  %928 = xor i32 %927, %926
  %929 = xor i32 %923, %926
  %930 = add nuw nsw i32 %929, %928
  %931 = icmp eq i32 %930, 2
  %932 = zext i1 %931 to i8
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %932, i8* %933, align 1, !tbaa !2450
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 50
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 6
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 6
  store i64 %939, i64* %PC
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %941 = load i8, i8* %940, align 1, !tbaa !2448
  store i8 %941, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %943 = icmp ne i8 %941, 0
  %944 = select i1 %943, i64 %935, i64 %937
  store i64 %944, i64* %942, align 8, !tbaa !2428
  %945 = load i8, i8* %BRANCH_TAKEN
  %946 = icmp eq i8 %945, 1
  br i1 %946, label %block_401d36, label %block_401d0a

block_401cc1:                                     ; preds = %block_401c90
  %947 = sub i64 %225, 56
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %947 to i32*
  %951 = load i32, i32* %950
  %952 = sub i32 %951, 1
  %953 = icmp ult i32 %951, 1
  %954 = zext i1 %953 to i8
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %954, i8* %955, align 1, !tbaa !2432
  %956 = and i32 %952, 255
  %957 = call i32 @llvm.ctpop.i32(i32 %956) #16
  %958 = trunc i32 %957 to i8
  %959 = and i8 %958, 1
  %960 = xor i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %960, i8* %961, align 1, !tbaa !2446
  %962 = xor i32 %951, 1
  %963 = xor i32 %962, %952
  %964 = lshr i32 %963, 4
  %965 = trunc i32 %964 to i8
  %966 = and i8 %965, 1
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %966, i8* %967, align 1, !tbaa !2447
  %968 = icmp eq i32 %952, 0
  %969 = zext i1 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %969, i8* %970, align 1, !tbaa !2448
  %971 = lshr i32 %952, 31
  %972 = trunc i32 %971 to i8
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %972, i8* %973, align 1, !tbaa !2449
  %974 = lshr i32 %951, 31
  %975 = xor i32 %971, %974
  %976 = add nuw nsw i32 %975, %974
  %977 = icmp eq i32 %976, 2
  %978 = zext i1 %977 to i8
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %978, i8* %979, align 1, !tbaa !2450
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 220
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 6
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 6
  store i64 %985, i64* %PC
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %987 = load i8, i8* %986, align 1, !tbaa !2449
  %988 = icmp ne i8 %987, 0
  %989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %990 = load i8, i8* %989, align 1, !tbaa !2450
  %991 = icmp ne i8 %990, 0
  %992 = xor i1 %988, %991
  %993 = zext i1 %992 to i8
  store i8 %993, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %995 = select i1 %992, i64 %981, i64 %983
  store i64 %995, i64* %994, align 8, !tbaa !2428
  %996 = load i8, i8* %BRANCH_TAKEN
  %997 = icmp eq i8 %996, 1
  br i1 %997, label %block_401da1, label %block_401ccb

block_401e58:                                     ; preds = %block_401c90
  %998 = sub i64 %225, 44
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 7
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i32*
  store i32 0, i32* %1001
  br label %block_401e5f

block_401d36:                                     ; preds = %block_401d0a, %block_401cde
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_401cde ], [ %MEMORY.1, %block_401d0a ]
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 5
  store i64 %1003, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1004 = load i64, i64* %RBP
  %1005 = sub i64 %1004, 16
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 3
  store i64 %1007, i64* %PC
  %1008 = inttoptr i64 %1005 to i32*
  %1009 = load i32, i32* %1008
  %1010 = zext i32 %1009 to i64
  store i64 %1010, i64* %RCX, align 8, !tbaa !2428
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 44
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 3
  store i64 %1014, i64* %PC
  %1015 = inttoptr i64 %1012 to i32*
  %1016 = load i32, i32* %1015
  %1017 = zext i32 %1016 to i64
  store i64 %1017, i64* %RDX, align 8, !tbaa !2428
  %1018 = load i64, i64* %RDX
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 3
  store i64 %1020, i64* %PC
  %1021 = trunc i64 %1018 to i32
  %1022 = add i32 1, %1021
  %1023 = zext i32 %1022 to i64
  store i64 %1023, i64* %RDX, align 8, !tbaa !2428
  %1024 = icmp ult i32 %1022, %1021
  %1025 = icmp ult i32 %1022, 1
  %1026 = or i1 %1024, %1025
  %1027 = zext i1 %1026 to i8
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1027, i8* %1028, align 1, !tbaa !2432
  %1029 = and i32 %1022, 255
  %1030 = call i32 @llvm.ctpop.i32(i32 %1029) #16
  %1031 = trunc i32 %1030 to i8
  %1032 = and i8 %1031, 1
  %1033 = xor i8 %1032, 1
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1033, i8* %1034, align 1, !tbaa !2446
  %1035 = xor i64 1, %1018
  %1036 = trunc i64 %1035 to i32
  %1037 = xor i32 %1036, %1022
  %1038 = lshr i32 %1037, 4
  %1039 = trunc i32 %1038 to i8
  %1040 = and i8 %1039, 1
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1040, i8* %1041, align 1, !tbaa !2447
  %1042 = icmp eq i32 %1022, 0
  %1043 = zext i1 %1042 to i8
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1043, i8* %1044, align 1, !tbaa !2448
  %1045 = lshr i32 %1022, 31
  %1046 = trunc i32 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1046, i8* %1047, align 1, !tbaa !2449
  %1048 = lshr i32 %1021, 31
  %1049 = xor i32 %1045, %1048
  %1050 = add nuw nsw i32 %1049, %1045
  %1051 = icmp eq i32 %1050, 2
  %1052 = zext i1 %1051 to i8
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1052, i8* %1053, align 1, !tbaa !2450
  %1054 = load i64, i64* %RCX
  %1055 = load i32, i32* %EDX
  %1056 = zext i32 %1055 to i64
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 2
  store i64 %1058, i64* %PC
  %1059 = trunc i64 %1054 to i32
  %1060 = sub i32 %1059, %1055
  %1061 = zext i32 %1060 to i64
  store i64 %1061, i64* %RCX, align 8, !tbaa !2428
  %1062 = icmp ult i32 %1059, %1055
  %1063 = zext i1 %1062 to i8
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1063, i8* %1064, align 1, !tbaa !2432
  %1065 = and i32 %1060, 255
  %1066 = call i32 @llvm.ctpop.i32(i32 %1065) #16
  %1067 = trunc i32 %1066 to i8
  %1068 = and i8 %1067, 1
  %1069 = xor i8 %1068, 1
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1069, i8* %1070, align 1, !tbaa !2446
  %1071 = xor i64 %1056, %1054
  %1072 = trunc i64 %1071 to i32
  %1073 = xor i32 %1072, %1060
  %1074 = lshr i32 %1073, 4
  %1075 = trunc i32 %1074 to i8
  %1076 = and i8 %1075, 1
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1076, i8* %1077, align 1, !tbaa !2447
  %1078 = icmp eq i32 %1060, 0
  %1079 = zext i1 %1078 to i8
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1079, i8* %1080, align 1, !tbaa !2448
  %1081 = lshr i32 %1060, 31
  %1082 = trunc i32 %1081 to i8
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1082, i8* %1083, align 1, !tbaa !2449
  %1084 = lshr i32 %1059, 31
  %1085 = lshr i32 %1055, 31
  %1086 = xor i32 %1085, %1084
  %1087 = xor i32 %1081, %1084
  %1088 = add nuw nsw i32 %1087, %1086
  %1089 = icmp eq i32 %1088, 2
  %1090 = zext i1 %1089 to i8
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1090, i8* %1091, align 1, !tbaa !2450
  %1092 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 40
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 5
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to float*
  %1098 = load float, float* %1097
  %1099 = bitcast i8* %1092 to float*
  store float %1098, float* %1099, align 1, !tbaa !2453
  %1100 = getelementptr inbounds i8, i8* %1092, i64 4
  %1101 = bitcast i8* %1100 to float*
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2453
  %1102 = getelementptr inbounds i8, i8* %1092, i64 8
  %1103 = bitcast i8* %1102 to float*
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2453
  %1104 = getelementptr inbounds i8, i8* %1092, i64 12
  %1105 = bitcast i8* %1104 to float*
  store float 0.000000e+00, float* %1105, align 1, !tbaa !2453
  %1106 = load i64, i64* %RBP
  %1107 = sub i64 %1106, 8
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %RSI, align 8, !tbaa !2428
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 12
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  %1117 = load i32, i32* %1116
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RDX, align 8, !tbaa !2428
  %1119 = load i64, i64* %RDX
  %1120 = load i64, i64* %RBP
  %1121 = sub i64 %1120, 44
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 4
  store i64 %1123, i64* %PC
  %1124 = inttoptr i64 %1121 to i32*
  %1125 = load i32, i32* %1124
  %1126 = shl i64 %1119, 32
  %1127 = ashr exact i64 %1126, 32
  %1128 = sext i32 %1125 to i64
  %1129 = mul nsw i64 %1128, %1127
  %1130 = trunc i64 %1129 to i32
  %1131 = and i64 %1129, 4294967295
  store i64 %1131, i64* %RDX, align 8, !tbaa !2428
  %1132 = shl i64 %1129, 32
  %1133 = ashr exact i64 %1132, 32
  %1134 = icmp ne i64 %1133, %1129
  %1135 = zext i1 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1135, i8* %1136, align 1, !tbaa !2432
  %1137 = and i32 %1130, 255
  %1138 = call i32 @llvm.ctpop.i32(i32 %1137) #16
  %1139 = trunc i32 %1138 to i8
  %1140 = and i8 %1139, 1
  %1141 = xor i8 %1140, 1
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1141, i8* %1142, align 1, !tbaa !2446
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1143, align 1, !tbaa !2447
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1144, align 1, !tbaa !2448
  %1145 = lshr i32 %1130, 31
  %1146 = trunc i32 %1145 to i8
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1146, i8* %1147, align 1, !tbaa !2449
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1135, i8* %1148, align 1, !tbaa !2450
  %1149 = load i64, i64* %RDX
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 44
  %1152 = load i64, i64* %PC
  %1153 = add i64 %1152, 3
  store i64 %1153, i64* %PC
  %1154 = trunc i64 %1149 to i32
  %1155 = inttoptr i64 %1151 to i32*
  %1156 = load i32, i32* %1155
  %1157 = add i32 %1156, %1154
  %1158 = zext i32 %1157 to i64
  store i64 %1158, i64* %RDX, align 8, !tbaa !2428
  %1159 = icmp ult i32 %1157, %1154
  %1160 = icmp ult i32 %1157, %1156
  %1161 = or i1 %1159, %1160
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1162, i8* %1163, align 1, !tbaa !2432
  %1164 = and i32 %1157, 255
  %1165 = call i32 @llvm.ctpop.i32(i32 %1164) #16
  %1166 = trunc i32 %1165 to i8
  %1167 = and i8 %1166, 1
  %1168 = xor i8 %1167, 1
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1168, i8* %1169, align 1, !tbaa !2446
  %1170 = xor i32 %1156, %1154
  %1171 = xor i32 %1170, %1157
  %1172 = lshr i32 %1171, 4
  %1173 = trunc i32 %1172 to i8
  %1174 = and i8 %1173, 1
  %1175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1174, i8* %1175, align 1, !tbaa !2447
  %1176 = icmp eq i32 %1157, 0
  %1177 = zext i1 %1176 to i8
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1177, i8* %1178, align 1, !tbaa !2448
  %1179 = lshr i32 %1157, 31
  %1180 = trunc i32 %1179 to i8
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1180, i8* %1181, align 1, !tbaa !2449
  %1182 = lshr i32 %1154, 31
  %1183 = lshr i32 %1156, 31
  %1184 = xor i32 %1179, %1182
  %1185 = xor i32 %1179, %1183
  %1186 = add nuw nsw i32 %1184, %1185
  %1187 = icmp eq i32 %1186, 2
  %1188 = zext i1 %1187 to i8
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1188, i8* %1189, align 1, !tbaa !2450
  %1190 = load i64, i64* %RDX
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 3
  store i64 %1192, i64* %PC
  %1193 = trunc i64 %1190 to i32
  %1194 = add i32 1, %1193
  %1195 = zext i32 %1194 to i64
  store i64 %1195, i64* %RDX, align 8, !tbaa !2428
  %1196 = icmp ult i32 %1194, %1193
  %1197 = icmp ult i32 %1194, 1
  %1198 = or i1 %1196, %1197
  %1199 = zext i1 %1198 to i8
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1199, i8* %1200, align 1, !tbaa !2432
  %1201 = and i32 %1194, 255
  %1202 = call i32 @llvm.ctpop.i32(i32 %1201) #16
  %1203 = trunc i32 %1202 to i8
  %1204 = and i8 %1203, 1
  %1205 = xor i8 %1204, 1
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1205, i8* %1206, align 1, !tbaa !2446
  %1207 = xor i64 1, %1190
  %1208 = trunc i64 %1207 to i32
  %1209 = xor i32 %1208, %1194
  %1210 = lshr i32 %1209, 4
  %1211 = trunc i32 %1210 to i8
  %1212 = and i8 %1211, 1
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1212, i8* %1213, align 1, !tbaa !2447
  %1214 = icmp eq i32 %1194, 0
  %1215 = zext i1 %1214 to i8
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1215, i8* %1216, align 1, !tbaa !2448
  %1217 = lshr i32 %1194, 31
  %1218 = trunc i32 %1217 to i8
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1218, i8* %1219, align 1, !tbaa !2449
  %1220 = lshr i32 %1193, 31
  %1221 = xor i32 %1217, %1220
  %1222 = add nuw nsw i32 %1221, %1217
  %1223 = icmp eq i32 %1222, 2
  %1224 = zext i1 %1223 to i8
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1224, i8* %1225, align 1, !tbaa !2450
  %1226 = load i32, i32* %EDX
  %1227 = zext i32 %1226 to i64
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 3
  store i64 %1229, i64* %PC
  %1230 = shl i64 %1227, 32
  %1231 = ashr exact i64 %1230, 32
  store i64 %1231, i64* %RDI, align 8, !tbaa !2428
  %1232 = load i64, i64* %RDI
  %1233 = load i64, i64* %PC
  %1234 = add i64 %1233, 4
  store i64 %1234, i64* %PC
  %1235 = shl i64 %1232, 1
  %1236 = icmp slt i64 %1235, 0
  %1237 = shl i64 %1235, 1
  store i64 %1237, i64* %RDI, align 8, !tbaa !2428
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1239 = zext i1 %1236 to i8
  store i8 %1239, i8* %1238, align 1, !tbaa !2451
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1241 = trunc i64 %1237 to i32
  %1242 = and i32 %1241, 254
  %1243 = call i32 @llvm.ctpop.i32(i32 %1242) #16
  %1244 = trunc i32 %1243 to i8
  %1245 = and i8 %1244, 1
  %1246 = xor i8 %1245, 1
  store i8 %1246, i8* %1240, align 1, !tbaa !2451
  %1247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1247, align 1, !tbaa !2451
  %1248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1249 = icmp eq i64 %1237, 0
  %1250 = zext i1 %1249 to i8
  store i8 %1250, i8* %1248, align 1, !tbaa !2451
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1252 = lshr i64 %1237, 63
  %1253 = trunc i64 %1252 to i8
  store i8 %1253, i8* %1251, align 1, !tbaa !2451
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1254, align 1, !tbaa !2451
  %1255 = load i64, i64* %RSI
  %1256 = load i64, i64* %RDI
  %1257 = load i64, i64* %PC
  %1258 = add i64 %1257, 3
  store i64 %1258, i64* %PC
  %1259 = add i64 %1256, %1255
  store i64 %1259, i64* %RSI, align 8, !tbaa !2428
  %1260 = icmp ult i64 %1259, %1255
  %1261 = icmp ult i64 %1259, %1256
  %1262 = or i1 %1260, %1261
  %1263 = zext i1 %1262 to i8
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1263, i8* %1264, align 1, !tbaa !2432
  %1265 = trunc i64 %1259 to i32
  %1266 = and i32 %1265, 255
  %1267 = call i32 @llvm.ctpop.i32(i32 %1266) #16
  %1268 = trunc i32 %1267 to i8
  %1269 = and i8 %1268, 1
  %1270 = xor i8 %1269, 1
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1270, i8* %1271, align 1, !tbaa !2446
  %1272 = xor i64 %1256, %1255
  %1273 = xor i64 %1272, %1259
  %1274 = lshr i64 %1273, 4
  %1275 = trunc i64 %1274 to i8
  %1276 = and i8 %1275, 1
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1276, i8* %1277, align 1, !tbaa !2447
  %1278 = icmp eq i64 %1259, 0
  %1279 = zext i1 %1278 to i8
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1279, i8* %1280, align 1, !tbaa !2448
  %1281 = lshr i64 %1259, 63
  %1282 = trunc i64 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1282, i8* %1283, align 1, !tbaa !2449
  %1284 = lshr i64 %1255, 63
  %1285 = lshr i64 %1256, 63
  %1286 = xor i64 %1281, %1284
  %1287 = xor i64 %1281, %1285
  %1288 = add nuw nsw i64 %1286, %1287
  %1289 = icmp eq i64 %1288, 2
  %1290 = zext i1 %1289 to i8
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1290, i8* %1291, align 1, !tbaa !2450
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 32
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 4
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1293 to i64*
  %1297 = load i64, i64* %1296
  store i64 %1297, i64* %RDI, align 8, !tbaa !2428
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 44
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 3
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to i32*
  %1303 = load i32, i32* %1302
  %1304 = zext i32 %1303 to i64
  store i64 %1304, i64* %RDX, align 8, !tbaa !2428
  %1305 = load i64, i64* %RDX
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 3
  store i64 %1307, i64* %PC
  %1308 = trunc i64 %1305 to i32
  %1309 = add i32 1, %1308
  %1310 = zext i32 %1309 to i64
  store i64 %1310, i64* %RDX, align 8, !tbaa !2428
  %1311 = icmp ult i32 %1309, %1308
  %1312 = icmp ult i32 %1309, 1
  %1313 = or i1 %1311, %1312
  %1314 = zext i1 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1314, i8* %1315, align 1, !tbaa !2432
  %1316 = and i32 %1309, 255
  %1317 = call i32 @llvm.ctpop.i32(i32 %1316) #16
  %1318 = trunc i32 %1317 to i8
  %1319 = and i8 %1318, 1
  %1320 = xor i8 %1319, 1
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1320, i8* %1321, align 1, !tbaa !2446
  %1322 = xor i64 1, %1305
  %1323 = trunc i64 %1322 to i32
  %1324 = xor i32 %1323, %1309
  %1325 = lshr i32 %1324, 4
  %1326 = trunc i32 %1325 to i8
  %1327 = and i8 %1326, 1
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1327, i8* %1328, align 1, !tbaa !2447
  %1329 = icmp eq i32 %1309, 0
  %1330 = zext i1 %1329 to i8
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1330, i8* %1331, align 1, !tbaa !2448
  %1332 = lshr i32 %1309, 31
  %1333 = trunc i32 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1333, i8* %1334, align 1, !tbaa !2449
  %1335 = lshr i32 %1308, 31
  %1336 = xor i32 %1332, %1335
  %1337 = add nuw nsw i32 %1336, %1332
  %1338 = icmp eq i32 %1337, 2
  %1339 = zext i1 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1339, i8* %1340, align 1, !tbaa !2450
  %1341 = load i32, i32* %EDX
  %1342 = zext i32 %1341 to i64
  %1343 = load i64, i64* %PC
  %1344 = add i64 %1343, 3
  store i64 %1344, i64* %PC
  %1345 = shl i64 %1342, 32
  %1346 = ashr exact i64 %1345, 32
  store i64 %1346, i64* %R8, align 8, !tbaa !2428
  %1347 = load i64, i64* %R8
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 4
  store i64 %1349, i64* %PC
  %1350 = shl i64 %1347, 1
  %1351 = icmp slt i64 %1350, 0
  %1352 = shl i64 %1350, 1
  store i64 %1352, i64* %R8, align 8, !tbaa !2428
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1354 = zext i1 %1351 to i8
  store i8 %1354, i8* %1353, align 1, !tbaa !2451
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1356 = trunc i64 %1352 to i32
  %1357 = and i32 %1356, 254
  %1358 = call i32 @llvm.ctpop.i32(i32 %1357) #16
  %1359 = trunc i32 %1358 to i8
  %1360 = and i8 %1359, 1
  %1361 = xor i8 %1360, 1
  store i8 %1361, i8* %1355, align 1, !tbaa !2451
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1362, align 1, !tbaa !2451
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1364 = icmp eq i64 %1352, 0
  %1365 = zext i1 %1364 to i8
  store i8 %1365, i8* %1363, align 1, !tbaa !2451
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1367 = lshr i64 %1352, 63
  %1368 = trunc i64 %1367 to i8
  store i8 %1368, i8* %1366, align 1, !tbaa !2451
  %1369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1369, align 1, !tbaa !2451
  %1370 = load i64, i64* %RDI
  %1371 = load i64, i64* %R8
  %1372 = load i64, i64* %PC
  %1373 = add i64 %1372, 3
  store i64 %1373, i64* %PC
  %1374 = add i64 %1371, %1370
  store i64 %1374, i64* %RDI, align 8, !tbaa !2428
  %1375 = icmp ult i64 %1374, %1370
  %1376 = icmp ult i64 %1374, %1371
  %1377 = or i1 %1375, %1376
  %1378 = zext i1 %1377 to i8
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1378, i8* %1379, align 1, !tbaa !2432
  %1380 = trunc i64 %1374 to i32
  %1381 = and i32 %1380, 255
  %1382 = call i32 @llvm.ctpop.i32(i32 %1381) #16
  %1383 = trunc i32 %1382 to i8
  %1384 = and i8 %1383, 1
  %1385 = xor i8 %1384, 1
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1385, i8* %1386, align 1, !tbaa !2446
  %1387 = xor i64 %1371, %1370
  %1388 = xor i64 %1387, %1374
  %1389 = lshr i64 %1388, 4
  %1390 = trunc i64 %1389 to i8
  %1391 = and i8 %1390, 1
  %1392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1391, i8* %1392, align 1, !tbaa !2447
  %1393 = icmp eq i64 %1374, 0
  %1394 = zext i1 %1393 to i8
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1394, i8* %1395, align 1, !tbaa !2448
  %1396 = lshr i64 %1374, 63
  %1397 = trunc i64 %1396 to i8
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1397, i8* %1398, align 1, !tbaa !2449
  %1399 = lshr i64 %1370, 63
  %1400 = lshr i64 %1371, 63
  %1401 = xor i64 %1396, %1399
  %1402 = xor i64 %1396, %1400
  %1403 = add nuw nsw i64 %1401, %1402
  %1404 = icmp eq i64 %1403, 2
  %1405 = zext i1 %1404 to i8
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1405, i8* %1406, align 1, !tbaa !2450
  %1407 = load i64, i64* %RBP
  %1408 = sub i64 %1407, 64
  %1409 = load i64, i64* %RDI
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 4
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1408 to i64*
  store i64 %1409, i64* %1412
  %1413 = load i32, i32* %ECX
  %1414 = zext i32 %1413 to i64
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 2
  store i64 %1416, i64* %PC
  %1417 = and i64 %1414, 4294967295
  store i64 %1417, i64* %RDI, align 8, !tbaa !2428
  %1418 = load i32, i32* %EAX
  %1419 = zext i32 %1418 to i64
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 2
  store i64 %1421, i64* %PC
  %1422 = and i64 %1419, 4294967295
  store i64 %1422, i64* %RDX, align 8, !tbaa !2428
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 64
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 4
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i64*
  %1428 = load i64, i64* %1427
  store i64 %1428, i64* %RCX, align 8, !tbaa !2428
  %1429 = bitcast i32* %R8D to i64*
  %1430 = load i32, i32* %EAX
  %1431 = zext i32 %1430 to i64
  %1432 = load i64, i64* %PC
  %1433 = add i64 %1432, 3
  store i64 %1433, i64* %PC
  %1434 = and i64 %1431, 4294967295
  store i64 %1434, i64* %1429, align 8, !tbaa !2428
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 2903
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 5
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 5
  store i64 %1440, i64* %PC
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1442 = load i64, i64* %1441, align 8, !tbaa !2428
  %1443 = add i64 %1442, -8
  %1444 = inttoptr i64 %1443 to i64*
  store i64 %1438, i64* %1444
  store i64 %1443, i64* %1441, align 8, !tbaa !2428
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1436, i64* %1445, align 8, !tbaa !2428
  %1446 = load i64, i64* %PC
  %1447 = call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* %0, i64 %1446, %struct.Memory* %MEMORY.2)
  %1448 = load i64, i64* %RBP
  %1449 = sub i64 %1448, 44
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 3
  store i64 %1451, i64* %PC
  %1452 = inttoptr i64 %1449 to i32*
  %1453 = load i32, i32* %1452
  %1454 = zext i32 %1453 to i64
  store i64 %1454, i64* %RAX, align 8, !tbaa !2428
  %1455 = load i64, i64* %RAX
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 3
  store i64 %1457, i64* %PC
  %1458 = trunc i64 %1455 to i32
  %1459 = add i32 1, %1458
  %1460 = zext i32 %1459 to i64
  store i64 %1460, i64* %RAX, align 8, !tbaa !2428
  %1461 = icmp ult i32 %1459, %1458
  %1462 = icmp ult i32 %1459, 1
  %1463 = or i1 %1461, %1462
  %1464 = zext i1 %1463 to i8
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1464, i8* %1465, align 1, !tbaa !2432
  %1466 = and i32 %1459, 255
  %1467 = call i32 @llvm.ctpop.i32(i32 %1466) #16
  %1468 = trunc i32 %1467 to i8
  %1469 = and i8 %1468, 1
  %1470 = xor i8 %1469, 1
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1470, i8* %1471, align 1, !tbaa !2446
  %1472 = xor i64 1, %1455
  %1473 = trunc i64 %1472 to i32
  %1474 = xor i32 %1473, %1459
  %1475 = lshr i32 %1474, 4
  %1476 = trunc i32 %1475 to i8
  %1477 = and i8 %1476, 1
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1477, i8* %1478, align 1, !tbaa !2447
  %1479 = icmp eq i32 %1459, 0
  %1480 = zext i1 %1479 to i8
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1480, i8* %1481, align 1, !tbaa !2448
  %1482 = lshr i32 %1459, 31
  %1483 = trunc i32 %1482 to i8
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1483, i8* %1484, align 1, !tbaa !2449
  %1485 = lshr i32 %1458, 31
  %1486 = xor i32 %1482, %1485
  %1487 = add nuw nsw i32 %1486, %1482
  %1488 = icmp eq i32 %1487, 2
  %1489 = zext i1 %1488 to i8
  %1490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1489, i8* %1490, align 1, !tbaa !2450
  %1491 = load i64, i64* %RBP
  %1492 = sub i64 %1491, 44
  %1493 = load i32, i32* %EAX
  %1494 = zext i32 %1493 to i64
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 3
  store i64 %1496, i64* %PC
  %1497 = inttoptr i64 %1492 to i32*
  store i32 %1493, i32* %1497
  %1498 = load i64, i64* %PC
  %1499 = sub i64 %1498, 197
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 5
  store i64 %1501, i64* %PC
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1499, i64* %1502, align 8, !tbaa !2428
  br label %block_401cd2

block_401db4:                                     ; preds = %block_401da8
  %1503 = add i64 %2288, 5
  store i64 %1503, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1504 = load i64, i64* %RBP
  %1505 = sub i64 %1504, 16
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 3
  store i64 %1507, i64* %PC
  %1508 = inttoptr i64 %1505 to i32*
  %1509 = load i32, i32* %1508
  %1510 = zext i32 %1509 to i64
  store i64 %1510, i64* %RCX, align 8, !tbaa !2428
  %1511 = load i64, i64* %RBP
  %1512 = sub i64 %1511, 48
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 3
  store i64 %1514, i64* %PC
  %1515 = inttoptr i64 %1512 to i32*
  %1516 = load i32, i32* %1515
  %1517 = zext i32 %1516 to i64
  store i64 %1517, i64* %RDX, align 8, !tbaa !2428
  %1518 = load i64, i64* %RDX
  %1519 = load i64, i64* %PC
  %1520 = add i64 %1519, 3
  store i64 %1520, i64* %PC
  %1521 = trunc i64 %1518 to i32
  %1522 = add i32 1, %1521
  %1523 = zext i32 %1522 to i64
  store i64 %1523, i64* %RDX, align 8, !tbaa !2428
  %1524 = icmp ult i32 %1522, %1521
  %1525 = icmp ult i32 %1522, 1
  %1526 = or i1 %1524, %1525
  %1527 = zext i1 %1526 to i8
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1527, i8* %1528, align 1, !tbaa !2432
  %1529 = and i32 %1522, 255
  %1530 = call i32 @llvm.ctpop.i32(i32 %1529) #16
  %1531 = trunc i32 %1530 to i8
  %1532 = and i8 %1531, 1
  %1533 = xor i8 %1532, 1
  %1534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1533, i8* %1534, align 1, !tbaa !2446
  %1535 = xor i64 1, %1518
  %1536 = trunc i64 %1535 to i32
  %1537 = xor i32 %1536, %1522
  %1538 = lshr i32 %1537, 4
  %1539 = trunc i32 %1538 to i8
  %1540 = and i8 %1539, 1
  %1541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1540, i8* %1541, align 1, !tbaa !2447
  %1542 = icmp eq i32 %1522, 0
  %1543 = zext i1 %1542 to i8
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1543, i8* %1544, align 1, !tbaa !2448
  %1545 = lshr i32 %1522, 31
  %1546 = trunc i32 %1545 to i8
  %1547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1546, i8* %1547, align 1, !tbaa !2449
  %1548 = lshr i32 %1521, 31
  %1549 = xor i32 %1545, %1548
  %1550 = add nuw nsw i32 %1549, %1545
  %1551 = icmp eq i32 %1550, 2
  %1552 = zext i1 %1551 to i8
  %1553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1552, i8* %1553, align 1, !tbaa !2450
  %1554 = load i64, i64* %RCX
  %1555 = load i32, i32* %EDX
  %1556 = zext i32 %1555 to i64
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 2
  store i64 %1558, i64* %PC
  %1559 = trunc i64 %1554 to i32
  %1560 = sub i32 %1559, %1555
  %1561 = zext i32 %1560 to i64
  store i64 %1561, i64* %RCX, align 8, !tbaa !2428
  %1562 = icmp ult i32 %1559, %1555
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1563, i8* %1564, align 1, !tbaa !2432
  %1565 = and i32 %1560, 255
  %1566 = call i32 @llvm.ctpop.i32(i32 %1565) #16
  %1567 = trunc i32 %1566 to i8
  %1568 = and i8 %1567, 1
  %1569 = xor i8 %1568, 1
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1569, i8* %1570, align 1, !tbaa !2446
  %1571 = xor i64 %1556, %1554
  %1572 = trunc i64 %1571 to i32
  %1573 = xor i32 %1572, %1560
  %1574 = lshr i32 %1573, 4
  %1575 = trunc i32 %1574 to i8
  %1576 = and i8 %1575, 1
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1576, i8* %1577, align 1, !tbaa !2447
  %1578 = icmp eq i32 %1560, 0
  %1579 = zext i1 %1578 to i8
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1579, i8* %1580, align 1, !tbaa !2448
  %1581 = lshr i32 %1560, 31
  %1582 = trunc i32 %1581 to i8
  %1583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1582, i8* %1583, align 1, !tbaa !2449
  %1584 = lshr i32 %1559, 31
  %1585 = lshr i32 %1555, 31
  %1586 = xor i32 %1585, %1584
  %1587 = xor i32 %1581, %1584
  %1588 = add nuw nsw i32 %1587, %1586
  %1589 = icmp eq i32 %1588, 2
  %1590 = zext i1 %1589 to i8
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1590, i8* %1591, align 1, !tbaa !2450
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 44
  %1594 = load i32, i32* %ECX
  %1595 = zext i32 %1594 to i64
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 3
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1593 to i32*
  store i32 %1594, i32* %1598
  %1599 = load i64, i64* %RBP
  %1600 = sub i64 %1599, 32
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 4
  store i64 %1602, i64* %PC
  %1603 = inttoptr i64 %1600 to i64*
  %1604 = load i64, i64* %1603
  store i64 %1604, i64* %RSI, align 8, !tbaa !2428
  %1605 = load i64, i64* %RBP
  %1606 = sub i64 %1605, 44
  %1607 = load i64, i64* %PC
  %1608 = add i64 %1607, 4
  store i64 %1608, i64* %PC
  %1609 = inttoptr i64 %1606 to i32*
  %1610 = load i32, i32* %1609
  %1611 = sext i32 %1610 to i64
  store i64 %1611, i64* %RDI, align 8, !tbaa !2428
  %1612 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1613 = load i64, i64* %RSI
  %1614 = load i64, i64* %RDI
  %1615 = mul i64 %1614, 4
  %1616 = add i64 %1615, %1613
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 5
  store i64 %1618, i64* %PC
  %1619 = inttoptr i64 %1616 to float*
  %1620 = load float, float* %1619
  %1621 = bitcast i8* %1612 to float*
  store float %1620, float* %1621, align 1, !tbaa !2453
  %1622 = getelementptr inbounds i8, i8* %1612, i64 4
  %1623 = bitcast i8* %1622 to float*
  store float 0.000000e+00, float* %1623, align 1, !tbaa !2453
  %1624 = getelementptr inbounds i8, i8* %1612, i64 8
  %1625 = bitcast i8* %1624 to float*
  store float 0.000000e+00, float* %1625, align 1, !tbaa !2453
  %1626 = getelementptr inbounds i8, i8* %1612, i64 12
  %1627 = bitcast i8* %1626 to float*
  store float 0.000000e+00, float* %1627, align 1, !tbaa !2453
  %1628 = load i64, i64* %RBP
  %1629 = sub i64 %1628, 8
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 4
  store i64 %1631, i64* %PC
  %1632 = inttoptr i64 %1629 to i64*
  %1633 = load i64, i64* %1632
  store i64 %1633, i64* %RSI, align 8, !tbaa !2428
  %1634 = load i64, i64* %RBP
  %1635 = sub i64 %1634, 12
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 3
  store i64 %1637, i64* %PC
  %1638 = inttoptr i64 %1635 to i32*
  %1639 = load i32, i32* %1638
  %1640 = zext i32 %1639 to i64
  store i64 %1640, i64* %RCX, align 8, !tbaa !2428
  %1641 = load i64, i64* %RCX
  %1642 = load i64, i64* %RBP
  %1643 = sub i64 %1642, 44
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 4
  store i64 %1645, i64* %PC
  %1646 = inttoptr i64 %1643 to i32*
  %1647 = load i32, i32* %1646
  %1648 = shl i64 %1641, 32
  %1649 = ashr exact i64 %1648, 32
  %1650 = sext i32 %1647 to i64
  %1651 = mul nsw i64 %1650, %1649
  %1652 = trunc i64 %1651 to i32
  %1653 = and i64 %1651, 4294967295
  store i64 %1653, i64* %RCX, align 8, !tbaa !2428
  %1654 = shl i64 %1651, 32
  %1655 = ashr exact i64 %1654, 32
  %1656 = icmp ne i64 %1655, %1651
  %1657 = zext i1 %1656 to i8
  %1658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1657, i8* %1658, align 1, !tbaa !2432
  %1659 = and i32 %1652, 255
  %1660 = call i32 @llvm.ctpop.i32(i32 %1659) #16
  %1661 = trunc i32 %1660 to i8
  %1662 = and i8 %1661, 1
  %1663 = xor i8 %1662, 1
  %1664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1663, i8* %1664, align 1, !tbaa !2446
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1665, align 1, !tbaa !2447
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1666, align 1, !tbaa !2448
  %1667 = lshr i32 %1652, 31
  %1668 = trunc i32 %1667 to i8
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1668, i8* %1669, align 1, !tbaa !2449
  %1670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1657, i8* %1670, align 1, !tbaa !2450
  %1671 = load i64, i64* %RCX
  %1672 = load i64, i64* %RBP
  %1673 = sub i64 %1672, 44
  %1674 = load i64, i64* %PC
  %1675 = add i64 %1674, 3
  store i64 %1675, i64* %PC
  %1676 = trunc i64 %1671 to i32
  %1677 = inttoptr i64 %1673 to i32*
  %1678 = load i32, i32* %1677
  %1679 = add i32 %1678, %1676
  %1680 = zext i32 %1679 to i64
  store i64 %1680, i64* %RCX, align 8, !tbaa !2428
  %1681 = icmp ult i32 %1679, %1676
  %1682 = icmp ult i32 %1679, %1678
  %1683 = or i1 %1681, %1682
  %1684 = zext i1 %1683 to i8
  %1685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1684, i8* %1685, align 1, !tbaa !2432
  %1686 = and i32 %1679, 255
  %1687 = call i32 @llvm.ctpop.i32(i32 %1686) #16
  %1688 = trunc i32 %1687 to i8
  %1689 = and i8 %1688, 1
  %1690 = xor i8 %1689, 1
  %1691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1690, i8* %1691, align 1, !tbaa !2446
  %1692 = xor i32 %1678, %1676
  %1693 = xor i32 %1692, %1679
  %1694 = lshr i32 %1693, 4
  %1695 = trunc i32 %1694 to i8
  %1696 = and i8 %1695, 1
  %1697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1696, i8* %1697, align 1, !tbaa !2447
  %1698 = icmp eq i32 %1679, 0
  %1699 = zext i1 %1698 to i8
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1699, i8* %1700, align 1, !tbaa !2448
  %1701 = lshr i32 %1679, 31
  %1702 = trunc i32 %1701 to i8
  %1703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1702, i8* %1703, align 1, !tbaa !2449
  %1704 = lshr i32 %1676, 31
  %1705 = lshr i32 %1678, 31
  %1706 = xor i32 %1701, %1704
  %1707 = xor i32 %1701, %1705
  %1708 = add nuw nsw i32 %1706, %1707
  %1709 = icmp eq i32 %1708, 2
  %1710 = zext i1 %1709 to i8
  %1711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1710, i8* %1711, align 1, !tbaa !2450
  %1712 = load i32, i32* %ECX
  %1713 = zext i32 %1712 to i64
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 3
  store i64 %1715, i64* %PC
  %1716 = shl i64 %1713, 32
  %1717 = ashr exact i64 %1716, 32
  store i64 %1717, i64* %RDI, align 8, !tbaa !2428
  %1718 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1719 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1720 = load i64, i64* %RSI
  %1721 = load i64, i64* %RDI
  %1722 = mul i64 %1721, 4
  %1723 = add i64 %1722, %1720
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 5
  store i64 %1725, i64* %PC
  %1726 = bitcast i8* %1719 to <2 x float>*
  %1727 = load <2 x float>, <2 x float>* %1726, align 1
  %1728 = getelementptr inbounds i8, i8* %1719, i64 8
  %1729 = bitcast i8* %1728 to <2 x i32>*
  %1730 = load <2 x i32>, <2 x i32>* %1729, align 1
  %1731 = inttoptr i64 %1723 to float*
  %1732 = load float, float* %1731
  %1733 = extractelement <2 x float> %1727, i32 0
  %1734 = fdiv float %1733, %1732
  %1735 = bitcast i8* %1718 to float*
  store float %1734, float* %1735, align 1, !tbaa !2453
  %1736 = bitcast <2 x float> %1727 to <2 x i32>
  %1737 = extractelement <2 x i32> %1736, i32 1
  %1738 = getelementptr inbounds i8, i8* %1718, i64 4
  %1739 = bitcast i8* %1738 to i32*
  store i32 %1737, i32* %1739, align 1, !tbaa !2453
  %1740 = extractelement <2 x i32> %1730, i32 0
  %1741 = getelementptr inbounds i8, i8* %1718, i64 8
  %1742 = bitcast i8* %1741 to i32*
  store i32 %1740, i32* %1742, align 1, !tbaa !2453
  %1743 = extractelement <2 x i32> %1730, i32 1
  %1744 = getelementptr inbounds i8, i8* %1718, i64 12
  %1745 = bitcast i8* %1744 to i32*
  store i32 %1743, i32* %1745, align 1, !tbaa !2453
  %1746 = load i64, i64* %RBP
  %1747 = sub i64 %1746, 32
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 4
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to i64*
  %1751 = load i64, i64* %1750
  store i64 %1751, i64* %RSI, align 8, !tbaa !2428
  %1752 = load i64, i64* %RBP
  %1753 = sub i64 %1752, 44
  %1754 = load i64, i64* %PC
  %1755 = add i64 %1754, 4
  store i64 %1755, i64* %PC
  %1756 = inttoptr i64 %1753 to i32*
  %1757 = load i32, i32* %1756
  %1758 = sext i32 %1757 to i64
  store i64 %1758, i64* %RDI, align 8, !tbaa !2428
  %1759 = load i64, i64* %RSI
  %1760 = load i64, i64* %RDI
  %1761 = mul i64 %1760, 4
  %1762 = add i64 %1761, %1759
  %1763 = bitcast %union.vec128_t* %XMM0 to i8*
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 5
  store i64 %1765, i64* %PC
  %1766 = bitcast i8* %1763 to <2 x float>*
  %1767 = load <2 x float>, <2 x float>* %1766, align 1
  %1768 = extractelement <2 x float> %1767, i32 0
  %1769 = inttoptr i64 %1762 to float*
  store float %1768, float* %1769
  %1770 = load i64, i64* %RBP
  %1771 = sub i64 %1770, 32
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 4
  store i64 %1773, i64* %PC
  %1774 = inttoptr i64 %1771 to i64*
  %1775 = load i64, i64* %1774
  store i64 %1775, i64* %RSI, align 8, !tbaa !2428
  %1776 = load i64, i64* %RBP
  %1777 = sub i64 %1776, 44
  %1778 = load i64, i64* %PC
  %1779 = add i64 %1778, 4
  store i64 %1779, i64* %PC
  %1780 = inttoptr i64 %1777 to i32*
  %1781 = load i32, i32* %1780
  %1782 = sext i32 %1781 to i64
  store i64 %1782, i64* %RDI, align 8, !tbaa !2428
  %1783 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1784 = load i64, i64* %RSI
  %1785 = load i64, i64* %RDI
  %1786 = mul i64 %1785, 4
  %1787 = add i64 %1786, %1784
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 5
  store i64 %1789, i64* %PC
  %1790 = inttoptr i64 %1787 to float*
  %1791 = load float, float* %1790
  %1792 = bitcast i8* %1783 to float*
  store float %1791, float* %1792, align 1, !tbaa !2453
  %1793 = getelementptr inbounds i8, i8* %1783, i64 4
  %1794 = bitcast i8* %1793 to float*
  store float 0.000000e+00, float* %1794, align 1, !tbaa !2453
  %1795 = getelementptr inbounds i8, i8* %1783, i64 8
  %1796 = bitcast i8* %1795 to float*
  store float 0.000000e+00, float* %1796, align 1, !tbaa !2453
  %1797 = getelementptr inbounds i8, i8* %1783, i64 12
  %1798 = bitcast i8* %1797 to float*
  store float 0.000000e+00, float* %1798, align 1, !tbaa !2453
  %1799 = bitcast %union.vec128_t* %XMM0 to i8*
  %1800 = load i64, i64* %PC
  %1801 = add i64 %1800, 4
  store i64 %1801, i64* %PC
  %1802 = bitcast i8* %1799 to i64*
  %1803 = load i64, i64* %1802, align 1
  %1804 = trunc i64 %1803 to i32
  %1805 = bitcast i64* %RCX to [2 x i32]*
  %1806 = bitcast i64* %RCX to i32*
  store i32 %1804, i32* %1806, align 1, !tbaa !2452
  %1807 = getelementptr inbounds [2 x i32], [2 x i32]* %1805, i64 0, i64 1
  store i32 0, i32* %1807, align 1, !tbaa !2452
  %1808 = load i64, i64* %RCX
  %1809 = load i64, i64* %PC
  %1810 = add i64 %1809, 6
  store i64 %1810, i64* %PC
  %1811 = xor i64 -2147483648, %1808
  %1812 = trunc i64 %1811 to i32
  %1813 = and i64 %1811, 4294967295
  store i64 %1813, i64* %RCX, align 8, !tbaa !2428
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1814, align 1, !tbaa !2432
  %1815 = and i32 %1812, 255
  %1816 = call i32 @llvm.ctpop.i32(i32 %1815) #16
  %1817 = trunc i32 %1816 to i8
  %1818 = and i8 %1817, 1
  %1819 = xor i8 %1818, 1
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1819, i8* %1820, align 1, !tbaa !2446
  %1821 = icmp eq i32 %1812, 0
  %1822 = zext i1 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1822, i8* %1823, align 1, !tbaa !2448
  %1824 = lshr i32 %1812, 31
  %1825 = trunc i32 %1824 to i8
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1825, i8* %1826, align 1, !tbaa !2449
  %1827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1827, align 1, !tbaa !2450
  %1828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1828, align 1, !tbaa !2447
  %1829 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1830 = load i32, i32* %ECX
  %1831 = zext i32 %1830 to i64
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 4
  store i64 %1833, i64* %PC
  %1834 = bitcast i8* %1829 to i32*
  store i32 %1830, i32* %1834, align 1, !tbaa !2452
  %1835 = getelementptr inbounds i8, i8* %1829, i64 4
  %1836 = bitcast i8* %1835 to i32*
  store i32 0, i32* %1836, align 1, !tbaa !2452
  %1837 = getelementptr inbounds i8, i8* %1829, i64 8
  %1838 = bitcast i8* %1837 to i32*
  store i32 0, i32* %1838, align 1, !tbaa !2452
  %1839 = getelementptr inbounds i8, i8* %1829, i64 12
  %1840 = bitcast i8* %1839 to i32*
  store i32 0, i32* %1840, align 1, !tbaa !2452
  %1841 = load i64, i64* %RBP
  %1842 = sub i64 %1841, 40
  %1843 = bitcast %union.vec128_t* %XMM0 to i8*
  %1844 = load i64, i64* %PC
  %1845 = add i64 %1844, 5
  store i64 %1845, i64* %PC
  %1846 = bitcast i8* %1843 to <2 x float>*
  %1847 = load <2 x float>, <2 x float>* %1846, align 1
  %1848 = extractelement <2 x float> %1847, i32 0
  %1849 = inttoptr i64 %1842 to float*
  store float %1848, float* %1849
  %1850 = load i64, i64* %RBP
  %1851 = sub i64 %1850, 44
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 3
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1851 to i32*
  %1855 = load i32, i32* %1854
  %1856 = zext i32 %1855 to i64
  store i64 %1856, i64* %RDI, align 8, !tbaa !2428
  %1857 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1858 = load i64, i64* %RBP
  %1859 = sub i64 %1858, 40
  %1860 = load i64, i64* %PC
  %1861 = add i64 %1860, 5
  store i64 %1861, i64* %PC
  %1862 = inttoptr i64 %1859 to float*
  %1863 = load float, float* %1862
  %1864 = bitcast i8* %1857 to float*
  store float %1863, float* %1864, align 1, !tbaa !2453
  %1865 = getelementptr inbounds i8, i8* %1857, i64 4
  %1866 = bitcast i8* %1865 to float*
  store float 0.000000e+00, float* %1866, align 1, !tbaa !2453
  %1867 = getelementptr inbounds i8, i8* %1857, i64 8
  %1868 = bitcast i8* %1867 to float*
  store float 0.000000e+00, float* %1868, align 1, !tbaa !2453
  %1869 = getelementptr inbounds i8, i8* %1857, i64 12
  %1870 = bitcast i8* %1869 to float*
  store float 0.000000e+00, float* %1870, align 1, !tbaa !2453
  %1871 = load i64, i64* %RBP
  %1872 = sub i64 %1871, 8
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 4
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1872 to i64*
  %1876 = load i64, i64* %1875
  store i64 %1876, i64* %RSI, align 8, !tbaa !2428
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 12
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 3
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i32*
  %1882 = load i32, i32* %1881
  %1883 = zext i32 %1882 to i64
  store i64 %1883, i64* %RCX, align 8, !tbaa !2428
  %1884 = load i64, i64* %RCX
  %1885 = load i64, i64* %RBP
  %1886 = sub i64 %1885, 44
  %1887 = load i64, i64* %PC
  %1888 = add i64 %1887, 4
  store i64 %1888, i64* %PC
  %1889 = inttoptr i64 %1886 to i32*
  %1890 = load i32, i32* %1889
  %1891 = shl i64 %1884, 32
  %1892 = ashr exact i64 %1891, 32
  %1893 = sext i32 %1890 to i64
  %1894 = mul nsw i64 %1893, %1892
  %1895 = trunc i64 %1894 to i32
  %1896 = and i64 %1894, 4294967295
  store i64 %1896, i64* %RCX, align 8, !tbaa !2428
  %1897 = shl i64 %1894, 32
  %1898 = ashr exact i64 %1897, 32
  %1899 = icmp ne i64 %1898, %1894
  %1900 = zext i1 %1899 to i8
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1900, i8* %1901, align 1, !tbaa !2432
  %1902 = and i32 %1895, 255
  %1903 = call i32 @llvm.ctpop.i32(i32 %1902) #16
  %1904 = trunc i32 %1903 to i8
  %1905 = and i8 %1904, 1
  %1906 = xor i8 %1905, 1
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1906, i8* %1907, align 1, !tbaa !2446
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1908, align 1, !tbaa !2447
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1909, align 1, !tbaa !2448
  %1910 = lshr i32 %1895, 31
  %1911 = trunc i32 %1910 to i8
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1911, i8* %1912, align 1, !tbaa !2449
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1900, i8* %1913, align 1, !tbaa !2450
  %1914 = load i64, i64* %RCX
  %1915 = load i64, i64* %PC
  %1916 = add i64 %1915, 3
  store i64 %1916, i64* %PC
  %1917 = trunc i64 %1914 to i32
  %1918 = zext i32 %1917 to i64
  store i64 %1918, i64* %RCX, align 8, !tbaa !2428
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1919, align 1, !tbaa !2432
  %1920 = and i32 %1917, 255
  %1921 = call i32 @llvm.ctpop.i32(i32 %1920) #16
  %1922 = trunc i32 %1921 to i8
  %1923 = and i8 %1922, 1
  %1924 = xor i8 %1923, 1
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1924, i8* %1925, align 1, !tbaa !2446
  %1926 = trunc i64 %1914 to i32
  %1927 = xor i32 %1926, %1917
  %1928 = lshr i32 %1927, 4
  %1929 = trunc i32 %1928 to i8
  %1930 = and i8 %1929, 1
  %1931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1930, i8* %1931, align 1, !tbaa !2447
  %1932 = icmp eq i32 %1917, 0
  %1933 = zext i1 %1932 to i8
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1933, i8* %1934, align 1, !tbaa !2448
  %1935 = lshr i32 %1917, 31
  %1936 = trunc i32 %1935 to i8
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1936, i8* %1937, align 1, !tbaa !2449
  %1938 = lshr i32 %1917, 31
  %1939 = xor i32 %1935, %1938
  %1940 = add nuw nsw i32 %1939, %1935
  %1941 = icmp eq i32 %1940, 2
  %1942 = zext i1 %1941 to i8
  %1943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1942, i8* %1943, align 1, !tbaa !2450
  %1944 = load i32, i32* %ECX
  %1945 = zext i32 %1944 to i64
  %1946 = load i64, i64* %PC
  %1947 = add i64 %1946, 3
  store i64 %1947, i64* %PC
  %1948 = shl i64 %1945, 32
  %1949 = ashr exact i64 %1948, 32
  store i64 %1949, i64* %R8, align 8, !tbaa !2428
  %1950 = load i64, i64* %R8
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 4
  store i64 %1952, i64* %PC
  %1953 = shl i64 %1950, 1
  %1954 = icmp slt i64 %1953, 0
  %1955 = shl i64 %1953, 1
  store i64 %1955, i64* %R8, align 8, !tbaa !2428
  %1956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1957 = zext i1 %1954 to i8
  store i8 %1957, i8* %1956, align 1, !tbaa !2451
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1959 = trunc i64 %1955 to i32
  %1960 = and i32 %1959, 254
  %1961 = call i32 @llvm.ctpop.i32(i32 %1960) #16
  %1962 = trunc i32 %1961 to i8
  %1963 = and i8 %1962, 1
  %1964 = xor i8 %1963, 1
  store i8 %1964, i8* %1958, align 1, !tbaa !2451
  %1965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1965, align 1, !tbaa !2451
  %1966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1967 = icmp eq i64 %1955, 0
  %1968 = zext i1 %1967 to i8
  store i8 %1968, i8* %1966, align 1, !tbaa !2451
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1970 = lshr i64 %1955, 63
  %1971 = trunc i64 %1970 to i8
  store i8 %1971, i8* %1969, align 1, !tbaa !2451
  %1972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1972, align 1, !tbaa !2451
  %1973 = load i64, i64* %RSI
  %1974 = load i64, i64* %R8
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 3
  store i64 %1976, i64* %PC
  %1977 = add i64 %1974, %1973
  store i64 %1977, i64* %RSI, align 8, !tbaa !2428
  %1978 = icmp ult i64 %1977, %1973
  %1979 = icmp ult i64 %1977, %1974
  %1980 = or i1 %1978, %1979
  %1981 = zext i1 %1980 to i8
  %1982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1981, i8* %1982, align 1, !tbaa !2432
  %1983 = trunc i64 %1977 to i32
  %1984 = and i32 %1983, 255
  %1985 = call i32 @llvm.ctpop.i32(i32 %1984) #16
  %1986 = trunc i32 %1985 to i8
  %1987 = and i8 %1986, 1
  %1988 = xor i8 %1987, 1
  %1989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1988, i8* %1989, align 1, !tbaa !2446
  %1990 = xor i64 %1974, %1973
  %1991 = xor i64 %1990, %1977
  %1992 = lshr i64 %1991, 4
  %1993 = trunc i64 %1992 to i8
  %1994 = and i8 %1993, 1
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1994, i8* %1995, align 1, !tbaa !2447
  %1996 = icmp eq i64 %1977, 0
  %1997 = zext i1 %1996 to i8
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1997, i8* %1998, align 1, !tbaa !2448
  %1999 = lshr i64 %1977, 63
  %2000 = trunc i64 %1999 to i8
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2000, i8* %2001, align 1, !tbaa !2449
  %2002 = lshr i64 %1973, 63
  %2003 = lshr i64 %1974, 63
  %2004 = xor i64 %1999, %2002
  %2005 = xor i64 %1999, %2003
  %2006 = add nuw nsw i64 %2004, %2005
  %2007 = icmp eq i64 %2006, 2
  %2008 = zext i1 %2007 to i8
  %2009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2008, i8* %2009, align 1, !tbaa !2450
  %2010 = load i64, i64* %RBP
  %2011 = sub i64 %2010, 32
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 4
  store i64 %2013, i64* %PC
  %2014 = inttoptr i64 %2011 to i64*
  %2015 = load i64, i64* %2014
  store i64 %2015, i64* %RCX, align 8, !tbaa !2428
  %2016 = load i32, i32* %EAX
  %2017 = zext i32 %2016 to i64
  %2018 = load i64, i64* %PC
  %2019 = add i64 %2018, 2
  store i64 %2019, i64* %PC
  %2020 = and i64 %2017, 4294967295
  store i64 %2020, i64* %RDX, align 8, !tbaa !2428
  %2021 = bitcast i32* %R8D to i64*
  %2022 = load i32, i32* %EAX
  %2023 = zext i32 %2022 to i64
  %2024 = load i64, i64* %PC
  %2025 = add i64 %2024, 3
  store i64 %2025, i64* %PC
  %2026 = and i64 %2023, 4294967295
  store i64 %2026, i64* %2021, align 8, !tbaa !2428
  %2027 = load i64, i64* %PC
  %2028 = add i64 %2027, 2720
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 5
  %2031 = load i64, i64* %PC
  %2032 = add i64 %2031, 5
  store i64 %2032, i64* %PC
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2034 = load i64, i64* %2033, align 8, !tbaa !2428
  %2035 = add i64 %2034, -8
  %2036 = inttoptr i64 %2035 to i64*
  store i64 %2030, i64* %2036
  store i64 %2035, i64* %2033, align 8, !tbaa !2428
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2028, i64* %2037, align 8, !tbaa !2428
  %2038 = load i64, i64* %PC
  %2039 = call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* %0, i64 %2038, %struct.Memory* %MEMORY.3)
  %2040 = load i64, i64* %RBP
  %2041 = sub i64 %2040, 48
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 3
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2041 to i32*
  %2045 = load i32, i32* %2044
  %2046 = zext i32 %2045 to i64
  store i64 %2046, i64* %RAX, align 8, !tbaa !2428
  %2047 = load i64, i64* %RAX
  %2048 = load i64, i64* %PC
  %2049 = add i64 %2048, 3
  store i64 %2049, i64* %PC
  %2050 = trunc i64 %2047 to i32
  %2051 = add i32 1, %2050
  %2052 = zext i32 %2051 to i64
  store i64 %2052, i64* %RAX, align 8, !tbaa !2428
  %2053 = icmp ult i32 %2051, %2050
  %2054 = icmp ult i32 %2051, 1
  %2055 = or i1 %2053, %2054
  %2056 = zext i1 %2055 to i8
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2056, i8* %2057, align 1, !tbaa !2432
  %2058 = and i32 %2051, 255
  %2059 = call i32 @llvm.ctpop.i32(i32 %2058) #16
  %2060 = trunc i32 %2059 to i8
  %2061 = and i8 %2060, 1
  %2062 = xor i8 %2061, 1
  %2063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2062, i8* %2063, align 1, !tbaa !2446
  %2064 = xor i64 1, %2047
  %2065 = trunc i64 %2064 to i32
  %2066 = xor i32 %2065, %2051
  %2067 = lshr i32 %2066, 4
  %2068 = trunc i32 %2067 to i8
  %2069 = and i8 %2068, 1
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2069, i8* %2070, align 1, !tbaa !2447
  %2071 = icmp eq i32 %2051, 0
  %2072 = zext i1 %2071 to i8
  %2073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2072, i8* %2073, align 1, !tbaa !2448
  %2074 = lshr i32 %2051, 31
  %2075 = trunc i32 %2074 to i8
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2075, i8* %2076, align 1, !tbaa !2449
  %2077 = lshr i32 %2050, 31
  %2078 = xor i32 %2074, %2077
  %2079 = add nuw nsw i32 %2078, %2074
  %2080 = icmp eq i32 %2079, 2
  %2081 = zext i1 %2080 to i8
  %2082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2081, i8* %2082, align 1, !tbaa !2450
  %2083 = load i64, i64* %RBP
  %2084 = sub i64 %2083, 48
  %2085 = load i32, i32* %EAX
  %2086 = zext i32 %2085 to i64
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 3
  store i64 %2088, i64* %PC
  %2089 = inttoptr i64 %2084 to i32*
  store i32 %2085, i32* %2089
  %2090 = load i64, i64* %PC
  %2091 = sub i64 %2090, 166
  %2092 = load i64, i64* %PC
  %2093 = add i64 %2092, 5
  store i64 %2093, i64* %PC
  %2094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2091, i64* %2094, align 8, !tbaa !2428
  br label %block_401da8

block_401fac:                                     ; preds = %block_401f09
  %2095 = load i64, i64* %RBP
  %2096 = sub i64 %2095, 32
  %2097 = load i64, i64* %PC
  %2098 = add i64 %2097, 4
  store i64 %2098, i64* %PC
  %2099 = inttoptr i64 %2096 to i64*
  %2100 = load i64, i64* %2099
  store i64 %2100, i64* %RAX, align 8, !tbaa !2428
  %2101 = load i64, i64* %RBP
  %2102 = sub i64 %2101, 52
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 4
  store i64 %2104, i64* %PC
  %2105 = inttoptr i64 %2102 to i32*
  %2106 = load i32, i32* %2105
  %2107 = sext i32 %2106 to i64
  store i64 %2107, i64* %RCX, align 8, !tbaa !2428
  %2108 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2109 = load i64, i64* %RAX
  %2110 = load i64, i64* %RCX
  %2111 = mul i64 %2110, 4
  %2112 = add i64 %2111, %2109
  %2113 = load i64, i64* %PC
  %2114 = add i64 %2113, 5
  store i64 %2114, i64* %PC
  %2115 = inttoptr i64 %2112 to float*
  %2116 = load float, float* %2115
  %2117 = bitcast i8* %2108 to float*
  store float %2116, float* %2117, align 1, !tbaa !2453
  %2118 = getelementptr inbounds i8, i8* %2108, i64 4
  %2119 = bitcast i8* %2118 to float*
  store float 0.000000e+00, float* %2119, align 1, !tbaa !2453
  %2120 = getelementptr inbounds i8, i8* %2108, i64 8
  %2121 = bitcast i8* %2120 to float*
  store float 0.000000e+00, float* %2121, align 1, !tbaa !2453
  %2122 = getelementptr inbounds i8, i8* %2108, i64 12
  %2123 = bitcast i8* %2122 to float*
  store float 0.000000e+00, float* %2123, align 1, !tbaa !2453
  %2124 = load i64, i64* %RBP
  %2125 = sub i64 %2124, 40
  %2126 = bitcast %union.vec128_t* %XMM0 to i8*
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 5
  store i64 %2128, i64* %PC
  %2129 = bitcast i8* %2126 to <2 x float>*
  %2130 = load <2 x float>, <2 x float>* %2129, align 1
  %2131 = extractelement <2 x float> %2130, i32 0
  %2132 = inttoptr i64 %2125 to float*
  store float %2131, float* %2132
  %2133 = load i64, i64* %RBP
  %2134 = sub i64 %2133, 32
  %2135 = load i64, i64* %PC
  %2136 = add i64 %2135, 4
  store i64 %2136, i64* %PC
  %2137 = inttoptr i64 %2134 to i64*
  %2138 = load i64, i64* %2137
  store i64 %2138, i64* %RAX, align 8, !tbaa !2428
  %2139 = load i64, i64* %RBP
  %2140 = sub i64 %2139, 44
  %2141 = load i64, i64* %PC
  %2142 = add i64 %2141, 4
  store i64 %2142, i64* %PC
  %2143 = inttoptr i64 %2140 to i32*
  %2144 = load i32, i32* %2143
  %2145 = sext i32 %2144 to i64
  store i64 %2145, i64* %RCX, align 8, !tbaa !2428
  %2146 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2147 = load i64, i64* %RAX
  %2148 = load i64, i64* %RCX
  %2149 = mul i64 %2148, 4
  %2150 = add i64 %2149, %2147
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 5
  store i64 %2152, i64* %PC
  %2153 = inttoptr i64 %2150 to float*
  %2154 = load float, float* %2153
  %2155 = bitcast i8* %2146 to float*
  store float %2154, float* %2155, align 1, !tbaa !2453
  %2156 = getelementptr inbounds i8, i8* %2146, i64 4
  %2157 = bitcast i8* %2156 to float*
  store float 0.000000e+00, float* %2157, align 1, !tbaa !2453
  %2158 = getelementptr inbounds i8, i8* %2146, i64 8
  %2159 = bitcast i8* %2158 to float*
  store float 0.000000e+00, float* %2159, align 1, !tbaa !2453
  %2160 = getelementptr inbounds i8, i8* %2146, i64 12
  %2161 = bitcast i8* %2160 to float*
  store float 0.000000e+00, float* %2161, align 1, !tbaa !2453
  %2162 = load i64, i64* %RBP
  %2163 = sub i64 %2162, 32
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 4
  store i64 %2165, i64* %PC
  %2166 = inttoptr i64 %2163 to i64*
  %2167 = load i64, i64* %2166
  store i64 %2167, i64* %RAX, align 8, !tbaa !2428
  %2168 = load i64, i64* %RBP
  %2169 = sub i64 %2168, 52
  %2170 = load i64, i64* %PC
  %2171 = add i64 %2170, 4
  store i64 %2171, i64* %PC
  %2172 = inttoptr i64 %2169 to i32*
  %2173 = load i32, i32* %2172
  %2174 = sext i32 %2173 to i64
  store i64 %2174, i64* %RCX, align 8, !tbaa !2428
  %2175 = load i64, i64* %RAX
  %2176 = load i64, i64* %RCX
  %2177 = mul i64 %2176, 4
  %2178 = add i64 %2177, %2175
  %2179 = bitcast %union.vec128_t* %XMM0 to i8*
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 5
  store i64 %2181, i64* %PC
  %2182 = bitcast i8* %2179 to <2 x float>*
  %2183 = load <2 x float>, <2 x float>* %2182, align 1
  %2184 = extractelement <2 x float> %2183, i32 0
  %2185 = inttoptr i64 %2178 to float*
  store float %2184, float* %2185
  %2186 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2187 = load i64, i64* %RBP
  %2188 = sub i64 %2187, 40
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  store i64 %2190, i64* %PC
  %2191 = inttoptr i64 %2188 to float*
  %2192 = load float, float* %2191
  %2193 = bitcast i8* %2186 to float*
  store float %2192, float* %2193, align 1, !tbaa !2453
  %2194 = getelementptr inbounds i8, i8* %2186, i64 4
  %2195 = bitcast i8* %2194 to float*
  store float 0.000000e+00, float* %2195, align 1, !tbaa !2453
  %2196 = getelementptr inbounds i8, i8* %2186, i64 8
  %2197 = bitcast i8* %2196 to float*
  store float 0.000000e+00, float* %2197, align 1, !tbaa !2453
  %2198 = getelementptr inbounds i8, i8* %2186, i64 12
  %2199 = bitcast i8* %2198 to float*
  store float 0.000000e+00, float* %2199, align 1, !tbaa !2453
  %2200 = load i64, i64* %RBP
  %2201 = sub i64 %2200, 32
  %2202 = load i64, i64* %PC
  %2203 = add i64 %2202, 4
  store i64 %2203, i64* %PC
  %2204 = inttoptr i64 %2201 to i64*
  %2205 = load i64, i64* %2204
  store i64 %2205, i64* %RAX, align 8, !tbaa !2428
  %2206 = load i64, i64* %RBP
  %2207 = sub i64 %2206, 44
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 4
  store i64 %2209, i64* %PC
  %2210 = inttoptr i64 %2207 to i32*
  %2211 = load i32, i32* %2210
  %2212 = sext i32 %2211 to i64
  store i64 %2212, i64* %RCX, align 8, !tbaa !2428
  %2213 = load i64, i64* %RAX
  %2214 = load i64, i64* %RCX
  %2215 = mul i64 %2214, 4
  %2216 = add i64 %2215, %2213
  %2217 = bitcast %union.vec128_t* %XMM0 to i8*
  %2218 = load i64, i64* %PC
  %2219 = add i64 %2218, 5
  store i64 %2219, i64* %PC
  %2220 = bitcast i8* %2217 to <2 x float>*
  %2221 = load <2 x float>, <2 x float>* %2220, align 1
  %2222 = extractelement <2 x float> %2221, i32 0
  %2223 = inttoptr i64 %2216 to float*
  store float %2222, float* %2223
  br label %block_401fea

block_401da8:                                     ; preds = %block_401da1, %block_401db4
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.7, %block_401da1 ], [ %2039, %block_401db4 ]
  %2224 = load i64, i64* %RBP
  %2225 = sub i64 %2224, 48
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 3
  store i64 %2227, i64* %PC
  %2228 = inttoptr i64 %2225 to i32*
  %2229 = load i32, i32* %2228
  %2230 = zext i32 %2229 to i64
  store i64 %2230, i64* %RAX, align 8, !tbaa !2428
  %2231 = load i32, i32* %EAX
  %2232 = zext i32 %2231 to i64
  %2233 = load i64, i64* %RBP
  %2234 = sub i64 %2233, 16
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 3
  store i64 %2236, i64* %PC
  %2237 = inttoptr i64 %2234 to i32*
  %2238 = load i32, i32* %2237
  %2239 = sub i32 %2231, %2238
  %2240 = icmp ult i32 %2231, %2238
  %2241 = zext i1 %2240 to i8
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2241, i8* %2242, align 1, !tbaa !2432
  %2243 = and i32 %2239, 255
  %2244 = call i32 @llvm.ctpop.i32(i32 %2243) #16
  %2245 = trunc i32 %2244 to i8
  %2246 = and i8 %2245, 1
  %2247 = xor i8 %2246, 1
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2247, i8* %2248, align 1, !tbaa !2446
  %2249 = xor i32 %2238, %2231
  %2250 = xor i32 %2249, %2239
  %2251 = lshr i32 %2250, 4
  %2252 = trunc i32 %2251 to i8
  %2253 = and i8 %2252, 1
  %2254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2253, i8* %2254, align 1, !tbaa !2447
  %2255 = icmp eq i32 %2239, 0
  %2256 = zext i1 %2255 to i8
  %2257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2256, i8* %2257, align 1, !tbaa !2448
  %2258 = lshr i32 %2239, 31
  %2259 = trunc i32 %2258 to i8
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2259, i8* %2260, align 1, !tbaa !2449
  %2261 = lshr i32 %2231, 31
  %2262 = lshr i32 %2238, 31
  %2263 = xor i32 %2262, %2261
  %2264 = xor i32 %2258, %2261
  %2265 = add nuw nsw i32 %2264, %2263
  %2266 = icmp eq i32 %2265, 2
  %2267 = zext i1 %2266 to i8
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2267, i8* %2268, align 1, !tbaa !2450
  %2269 = load i64, i64* %PC
  %2270 = add i64 %2269, 165
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 6
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 6
  store i64 %2274, i64* %PC
  %2275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2276 = load i8, i8* %2275, align 1, !tbaa !2449
  %2277 = icmp ne i8 %2276, 0
  %2278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2279 = load i8, i8* %2278, align 1, !tbaa !2450
  %2280 = icmp ne i8 %2279, 0
  %2281 = xor i1 %2277, %2280
  %2282 = xor i1 %2281, true
  %2283 = zext i1 %2282 to i8
  store i8 %2283, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2285 = select i1 %2281, i64 %2272, i64 %2270
  store i64 %2285, i64* %2284, align 8, !tbaa !2428
  %2286 = load i8, i8* %BRANCH_TAKEN
  %2287 = icmp eq i8 %2286, 1
  %2288 = load i64, i64* %PC
  br i1 %2287, label %block_401e53, label %block_401db4

block_401ffd:                                     ; preds = %block_401efd
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 5
  store i64 %2290, i64* %PC
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3328, i64* %2291, align 8, !tbaa !2428
  br label %block_402002

block_401d9c:                                     ; preds = %block_401cd2
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 5
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 5
  store i64 %2295, i64* %PC
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2293, i64* %2296, align 8, !tbaa !2428
  br label %block_401da1

block_401d0a:                                     ; preds = %block_401cde
  %2297 = load i64, i64* %RBP
  %2298 = sub i64 %2297, 32
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 4
  store i64 %2300, i64* %PC
  %2301 = inttoptr i64 %2298 to i64*
  %2302 = load i64, i64* %2301
  store i64 %2302, i64* %RAX, align 8, !tbaa !2428
  %2303 = load i64, i64* %RBP
  %2304 = sub i64 %2303, 44
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 4
  store i64 %2306, i64* %PC
  %2307 = inttoptr i64 %2304 to i32*
  %2308 = load i32, i32* %2307
  %2309 = sext i32 %2308 to i64
  store i64 %2309, i64* %RCX, align 8, !tbaa !2428
  %2310 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2311 = load i64, i64* %RAX
  %2312 = load i64, i64* %RCX
  %2313 = mul i64 %2312, 4
  %2314 = add i64 %2313, %2311
  %2315 = load i64, i64* %PC
  %2316 = add i64 %2315, 5
  store i64 %2316, i64* %PC
  %2317 = inttoptr i64 %2314 to float*
  %2318 = load float, float* %2317
  %2319 = bitcast i8* %2310 to float*
  store float %2318, float* %2319, align 1, !tbaa !2453
  %2320 = getelementptr inbounds i8, i8* %2310, i64 4
  %2321 = bitcast i8* %2320 to float*
  store float 0.000000e+00, float* %2321, align 1, !tbaa !2453
  %2322 = getelementptr inbounds i8, i8* %2310, i64 8
  %2323 = bitcast i8* %2322 to float*
  store float 0.000000e+00, float* %2323, align 1, !tbaa !2453
  %2324 = getelementptr inbounds i8, i8* %2310, i64 12
  %2325 = bitcast i8* %2324 to float*
  store float 0.000000e+00, float* %2325, align 1, !tbaa !2453
  %2326 = load i64, i64* %RBP
  %2327 = sub i64 %2326, 32
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 4
  store i64 %2329, i64* %PC
  %2330 = inttoptr i64 %2327 to i64*
  %2331 = load i64, i64* %2330
  store i64 %2331, i64* %RAX, align 8, !tbaa !2428
  %2332 = load i64, i64* %RBP
  %2333 = sub i64 %2332, 52
  %2334 = load i64, i64* %PC
  %2335 = add i64 %2334, 4
  store i64 %2335, i64* %PC
  %2336 = inttoptr i64 %2333 to i32*
  %2337 = load i32, i32* %2336
  %2338 = sext i32 %2337 to i64
  store i64 %2338, i64* %RCX, align 8, !tbaa !2428
  %2339 = load i64, i64* %RAX
  %2340 = load i64, i64* %RCX
  %2341 = mul i64 %2340, 4
  %2342 = add i64 %2341, %2339
  %2343 = bitcast %union.vec128_t* %XMM0 to i8*
  %2344 = load i64, i64* %PC
  %2345 = add i64 %2344, 5
  store i64 %2345, i64* %PC
  %2346 = bitcast i8* %2343 to <2 x float>*
  %2347 = load <2 x float>, <2 x float>* %2346, align 1
  %2348 = extractelement <2 x float> %2347, i32 0
  %2349 = inttoptr i64 %2342 to float*
  store float %2348, float* %2349
  %2350 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2351 = load i64, i64* %RBP
  %2352 = sub i64 %2351, 40
  %2353 = load i64, i64* %PC
  %2354 = add i64 %2353, 5
  store i64 %2354, i64* %PC
  %2355 = inttoptr i64 %2352 to float*
  %2356 = load float, float* %2355
  %2357 = bitcast i8* %2350 to float*
  store float %2356, float* %2357, align 1, !tbaa !2453
  %2358 = getelementptr inbounds i8, i8* %2350, i64 4
  %2359 = bitcast i8* %2358 to float*
  store float 0.000000e+00, float* %2359, align 1, !tbaa !2453
  %2360 = getelementptr inbounds i8, i8* %2350, i64 8
  %2361 = bitcast i8* %2360 to float*
  store float 0.000000e+00, float* %2361, align 1, !tbaa !2453
  %2362 = getelementptr inbounds i8, i8* %2350, i64 12
  %2363 = bitcast i8* %2362 to float*
  store float 0.000000e+00, float* %2363, align 1, !tbaa !2453
  %2364 = load i64, i64* %RBP
  %2365 = sub i64 %2364, 32
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 4
  store i64 %2367, i64* %PC
  %2368 = inttoptr i64 %2365 to i64*
  %2369 = load i64, i64* %2368
  store i64 %2369, i64* %RAX, align 8, !tbaa !2428
  %2370 = load i64, i64* %RBP
  %2371 = sub i64 %2370, 44
  %2372 = load i64, i64* %PC
  %2373 = add i64 %2372, 4
  store i64 %2373, i64* %PC
  %2374 = inttoptr i64 %2371 to i32*
  %2375 = load i32, i32* %2374
  %2376 = sext i32 %2375 to i64
  store i64 %2376, i64* %RCX, align 8, !tbaa !2428
  %2377 = load i64, i64* %RAX
  %2378 = load i64, i64* %RCX
  %2379 = mul i64 %2378, 4
  %2380 = add i64 %2379, %2377
  %2381 = bitcast %union.vec128_t* %XMM0 to i8*
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 5
  store i64 %2383, i64* %PC
  %2384 = bitcast i8* %2381 to <2 x float>*
  %2385 = load <2 x float>, <2 x float>* %2384, align 1
  %2386 = extractelement <2 x float> %2385, i32 0
  %2387 = inttoptr i64 %2380 to float*
  store float %2386, float* %2387
  br label %block_401d36

block_401eec:                                     ; preds = %block_401e5f
  %2388 = load i64, i64* %RBP
  %2389 = sub i64 %2388, 56
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 4
  store i64 %2391, i64* %PC
  %2392 = inttoptr i64 %2389 to i32*
  %2393 = load i32, i32* %2392
  %2394 = sub i32 %2393, 1
  %2395 = icmp ult i32 %2393, 1
  %2396 = zext i1 %2395 to i8
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2396, i8* %2397, align 1, !tbaa !2432
  %2398 = and i32 %2394, 255
  %2399 = call i32 @llvm.ctpop.i32(i32 %2398) #16
  %2400 = trunc i32 %2399 to i8
  %2401 = and i8 %2400, 1
  %2402 = xor i8 %2401, 1
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2402, i8* %2403, align 1, !tbaa !2446
  %2404 = xor i32 %2393, 1
  %2405 = xor i32 %2404, %2394
  %2406 = lshr i32 %2405, 4
  %2407 = trunc i32 %2406 to i8
  %2408 = and i8 %2407, 1
  %2409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2408, i8* %2409, align 1, !tbaa !2447
  %2410 = icmp eq i32 %2394, 0
  %2411 = zext i1 %2410 to i8
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2411, i8* %2412, align 1, !tbaa !2448
  %2413 = lshr i32 %2394, 31
  %2414 = trunc i32 %2413 to i8
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2414, i8* %2415, align 1, !tbaa !2449
  %2416 = lshr i32 %2393, 31
  %2417 = xor i32 %2413, %2416
  %2418 = add nuw nsw i32 %2417, %2416
  %2419 = icmp eq i32 %2418, 2
  %2420 = zext i1 %2419 to i8
  %2421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2420, i8* %2421, align 1, !tbaa !2450
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 274
  %2424 = load i64, i64* %PC
  %2425 = add i64 %2424, 6
  %2426 = load i64, i64* %PC
  %2427 = add i64 %2426, 6
  store i64 %2427, i64* %PC
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2429 = load i8, i8* %2428, align 1, !tbaa !2449
  %2430 = icmp ne i8 %2429, 0
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2432 = load i8, i8* %2431, align 1, !tbaa !2450
  %2433 = icmp ne i8 %2432, 0
  %2434 = xor i1 %2430, %2433
  %2435 = zext i1 %2434 to i8
  store i8 %2435, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2437 = select i1 %2434, i64 %2423, i64 %2425
  store i64 %2437, i64* %2436, align 8, !tbaa !2428
  %2438 = load i8, i8* %BRANCH_TAKEN
  %2439 = icmp eq i8 %2438, 1
  br i1 %2439, label %block_402002, label %block_401ef6

block_401f09:                                     ; preds = %block_401efd
  store i64 %3328, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %2440 = load i64, i64* %RBP
  %2441 = sub i64 %2440, 16
  %2442 = load i64, i64* %PC
  %2443 = add i64 %2442, 3
  store i64 %2443, i64* %PC
  %2444 = inttoptr i64 %2441 to i32*
  %2445 = load i32, i32* %2444
  %2446 = zext i32 %2445 to i64
  store i64 %2446, i64* %RCX, align 8, !tbaa !2428
  %2447 = load i64, i64* %RBP
  %2448 = sub i64 %2447, 48
  %2449 = load i64, i64* %PC
  %2450 = add i64 %2449, 3
  store i64 %2450, i64* %PC
  %2451 = inttoptr i64 %2448 to i32*
  %2452 = load i32, i32* %2451
  %2453 = zext i32 %2452 to i64
  store i64 %2453, i64* %RDX, align 8, !tbaa !2428
  %2454 = load i64, i64* %RDX
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 3
  store i64 %2456, i64* %PC
  %2457 = trunc i64 %2454 to i32
  %2458 = add i32 1, %2457
  %2459 = zext i32 %2458 to i64
  store i64 %2459, i64* %RDX, align 8, !tbaa !2428
  %2460 = icmp ult i32 %2458, %2457
  %2461 = icmp ult i32 %2458, 1
  %2462 = or i1 %2460, %2461
  %2463 = zext i1 %2462 to i8
  %2464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2463, i8* %2464, align 1, !tbaa !2432
  %2465 = and i32 %2458, 255
  %2466 = call i32 @llvm.ctpop.i32(i32 %2465) #16
  %2467 = trunc i32 %2466 to i8
  %2468 = and i8 %2467, 1
  %2469 = xor i8 %2468, 1
  %2470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2469, i8* %2470, align 1, !tbaa !2446
  %2471 = xor i64 1, %2454
  %2472 = trunc i64 %2471 to i32
  %2473 = xor i32 %2472, %2458
  %2474 = lshr i32 %2473, 4
  %2475 = trunc i32 %2474 to i8
  %2476 = and i8 %2475, 1
  %2477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2476, i8* %2477, align 1, !tbaa !2447
  %2478 = icmp eq i32 %2458, 0
  %2479 = zext i1 %2478 to i8
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2479, i8* %2480, align 1, !tbaa !2448
  %2481 = lshr i32 %2458, 31
  %2482 = trunc i32 %2481 to i8
  %2483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2482, i8* %2483, align 1, !tbaa !2449
  %2484 = lshr i32 %2457, 31
  %2485 = xor i32 %2481, %2484
  %2486 = add nuw nsw i32 %2485, %2481
  %2487 = icmp eq i32 %2486, 2
  %2488 = zext i1 %2487 to i8
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2488, i8* %2489, align 1, !tbaa !2450
  %2490 = load i64, i64* %RCX
  %2491 = load i32, i32* %EDX
  %2492 = zext i32 %2491 to i64
  %2493 = load i64, i64* %PC
  %2494 = add i64 %2493, 2
  store i64 %2494, i64* %PC
  %2495 = trunc i64 %2490 to i32
  %2496 = sub i32 %2495, %2491
  %2497 = zext i32 %2496 to i64
  store i64 %2497, i64* %RCX, align 8, !tbaa !2428
  %2498 = icmp ult i32 %2495, %2491
  %2499 = zext i1 %2498 to i8
  %2500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2499, i8* %2500, align 1, !tbaa !2432
  %2501 = and i32 %2496, 255
  %2502 = call i32 @llvm.ctpop.i32(i32 %2501) #16
  %2503 = trunc i32 %2502 to i8
  %2504 = and i8 %2503, 1
  %2505 = xor i8 %2504, 1
  %2506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2505, i8* %2506, align 1, !tbaa !2446
  %2507 = xor i64 %2492, %2490
  %2508 = trunc i64 %2507 to i32
  %2509 = xor i32 %2508, %2496
  %2510 = lshr i32 %2509, 4
  %2511 = trunc i32 %2510 to i8
  %2512 = and i8 %2511, 1
  %2513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2512, i8* %2513, align 1, !tbaa !2447
  %2514 = icmp eq i32 %2496, 0
  %2515 = zext i1 %2514 to i8
  %2516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2515, i8* %2516, align 1, !tbaa !2448
  %2517 = lshr i32 %2496, 31
  %2518 = trunc i32 %2517 to i8
  %2519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2518, i8* %2519, align 1, !tbaa !2449
  %2520 = lshr i32 %2495, 31
  %2521 = lshr i32 %2491, 31
  %2522 = xor i32 %2521, %2520
  %2523 = xor i32 %2517, %2520
  %2524 = add nuw nsw i32 %2523, %2522
  %2525 = icmp eq i32 %2524, 2
  %2526 = zext i1 %2525 to i8
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2526, i8* %2527, align 1, !tbaa !2450
  %2528 = load i64, i64* %RBP
  %2529 = sub i64 %2528, 44
  %2530 = load i32, i32* %ECX
  %2531 = zext i32 %2530 to i64
  %2532 = load i64, i64* %PC
  %2533 = add i64 %2532, 3
  store i64 %2533, i64* %PC
  %2534 = inttoptr i64 %2529 to i32*
  store i32 %2530, i32* %2534
  %2535 = load i64, i64* %RBP
  %2536 = sub i64 %2535, 32
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 4
  store i64 %2538, i64* %PC
  %2539 = inttoptr i64 %2536 to i64*
  %2540 = load i64, i64* %2539
  store i64 %2540, i64* %RSI, align 8, !tbaa !2428
  %2541 = load i64, i64* %RBP
  %2542 = sub i64 %2541, 44
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 4
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2542 to i32*
  %2546 = load i32, i32* %2545
  %2547 = sext i32 %2546 to i64
  store i64 %2547, i64* %RDI, align 8, !tbaa !2428
  %2548 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2549 = load i64, i64* %RSI
  %2550 = load i64, i64* %RDI
  %2551 = mul i64 %2550, 4
  %2552 = add i64 %2551, %2549
  %2553 = load i64, i64* %PC
  %2554 = add i64 %2553, 5
  store i64 %2554, i64* %PC
  %2555 = inttoptr i64 %2552 to float*
  %2556 = load float, float* %2555
  %2557 = bitcast i8* %2548 to float*
  store float %2556, float* %2557, align 1, !tbaa !2453
  %2558 = getelementptr inbounds i8, i8* %2548, i64 4
  %2559 = bitcast i8* %2558 to float*
  store float 0.000000e+00, float* %2559, align 1, !tbaa !2453
  %2560 = getelementptr inbounds i8, i8* %2548, i64 8
  %2561 = bitcast i8* %2560 to float*
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2453
  %2562 = getelementptr inbounds i8, i8* %2548, i64 12
  %2563 = bitcast i8* %2562 to float*
  store float 0.000000e+00, float* %2563, align 1, !tbaa !2453
  %2564 = load i64, i64* %RBP
  %2565 = sub i64 %2564, 16
  %2566 = load i64, i64* %PC
  %2567 = add i64 %2566, 3
  store i64 %2567, i64* %PC
  %2568 = inttoptr i64 %2565 to i32*
  %2569 = load i32, i32* %2568
  %2570 = zext i32 %2569 to i64
  store i64 %2570, i64* %RCX, align 8, !tbaa !2428
  %2571 = load i64, i64* %RBP
  %2572 = sub i64 %2571, 44
  %2573 = load i64, i64* %PC
  %2574 = add i64 %2573, 3
  store i64 %2574, i64* %PC
  %2575 = inttoptr i64 %2572 to i32*
  %2576 = load i32, i32* %2575
  %2577 = zext i32 %2576 to i64
  store i64 %2577, i64* %RDX, align 8, !tbaa !2428
  %2578 = load i64, i64* %RDX
  %2579 = load i64, i64* %PC
  %2580 = add i64 %2579, 3
  store i64 %2580, i64* %PC
  %2581 = trunc i64 %2578 to i32
  %2582 = add i32 1, %2581
  %2583 = zext i32 %2582 to i64
  store i64 %2583, i64* %RDX, align 8, !tbaa !2428
  %2584 = icmp ult i32 %2582, %2581
  %2585 = icmp ult i32 %2582, 1
  %2586 = or i1 %2584, %2585
  %2587 = zext i1 %2586 to i8
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2587, i8* %2588, align 1, !tbaa !2432
  %2589 = and i32 %2582, 255
  %2590 = call i32 @llvm.ctpop.i32(i32 %2589) #16
  %2591 = trunc i32 %2590 to i8
  %2592 = and i8 %2591, 1
  %2593 = xor i8 %2592, 1
  %2594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2593, i8* %2594, align 1, !tbaa !2446
  %2595 = xor i64 1, %2578
  %2596 = trunc i64 %2595 to i32
  %2597 = xor i32 %2596, %2582
  %2598 = lshr i32 %2597, 4
  %2599 = trunc i32 %2598 to i8
  %2600 = and i8 %2599, 1
  %2601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2600, i8* %2601, align 1, !tbaa !2447
  %2602 = icmp eq i32 %2582, 0
  %2603 = zext i1 %2602 to i8
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2603, i8* %2604, align 1, !tbaa !2448
  %2605 = lshr i32 %2582, 31
  %2606 = trunc i32 %2605 to i8
  %2607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2606, i8* %2607, align 1, !tbaa !2449
  %2608 = lshr i32 %2581, 31
  %2609 = xor i32 %2605, %2608
  %2610 = add nuw nsw i32 %2609, %2605
  %2611 = icmp eq i32 %2610, 2
  %2612 = zext i1 %2611 to i8
  %2613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2612, i8* %2613, align 1, !tbaa !2450
  %2614 = load i64, i64* %RCX
  %2615 = load i32, i32* %EDX
  %2616 = zext i32 %2615 to i64
  %2617 = load i64, i64* %PC
  %2618 = add i64 %2617, 2
  store i64 %2618, i64* %PC
  %2619 = trunc i64 %2614 to i32
  %2620 = sub i32 %2619, %2615
  %2621 = zext i32 %2620 to i64
  store i64 %2621, i64* %RCX, align 8, !tbaa !2428
  %2622 = icmp ult i32 %2619, %2615
  %2623 = zext i1 %2622 to i8
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2623, i8* %2624, align 1, !tbaa !2432
  %2625 = and i32 %2620, 255
  %2626 = call i32 @llvm.ctpop.i32(i32 %2625) #16
  %2627 = trunc i32 %2626 to i8
  %2628 = and i8 %2627, 1
  %2629 = xor i8 %2628, 1
  %2630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2629, i8* %2630, align 1, !tbaa !2446
  %2631 = xor i64 %2616, %2614
  %2632 = trunc i64 %2631 to i32
  %2633 = xor i32 %2632, %2620
  %2634 = lshr i32 %2633, 4
  %2635 = trunc i32 %2634 to i8
  %2636 = and i8 %2635, 1
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2636, i8* %2637, align 1, !tbaa !2447
  %2638 = icmp eq i32 %2620, 0
  %2639 = zext i1 %2638 to i8
  %2640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2639, i8* %2640, align 1, !tbaa !2448
  %2641 = lshr i32 %2620, 31
  %2642 = trunc i32 %2641 to i8
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2642, i8* %2643, align 1, !tbaa !2449
  %2644 = lshr i32 %2619, 31
  %2645 = lshr i32 %2615, 31
  %2646 = xor i32 %2645, %2644
  %2647 = xor i32 %2641, %2644
  %2648 = add nuw nsw i32 %2647, %2646
  %2649 = icmp eq i32 %2648, 2
  %2650 = zext i1 %2649 to i8
  %2651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2650, i8* %2651, align 1, !tbaa !2450
  %2652 = load i64, i64* %RBP
  %2653 = sub i64 %2652, 8
  %2654 = load i64, i64* %PC
  %2655 = add i64 %2654, 4
  store i64 %2655, i64* %PC
  %2656 = inttoptr i64 %2653 to i64*
  %2657 = load i64, i64* %2656
  store i64 %2657, i64* %RSI, align 8, !tbaa !2428
  %2658 = load i64, i64* %RBP
  %2659 = sub i64 %2658, 12
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 3
  store i64 %2661, i64* %PC
  %2662 = inttoptr i64 %2659 to i32*
  %2663 = load i32, i32* %2662
  %2664 = zext i32 %2663 to i64
  store i64 %2664, i64* %RDX, align 8, !tbaa !2428
  %2665 = load i64, i64* %RDX
  %2666 = load i64, i64* %RBP
  %2667 = sub i64 %2666, 44
  %2668 = load i64, i64* %PC
  %2669 = add i64 %2668, 4
  store i64 %2669, i64* %PC
  %2670 = inttoptr i64 %2667 to i32*
  %2671 = load i32, i32* %2670
  %2672 = shl i64 %2665, 32
  %2673 = ashr exact i64 %2672, 32
  %2674 = sext i32 %2671 to i64
  %2675 = mul nsw i64 %2674, %2673
  %2676 = trunc i64 %2675 to i32
  %2677 = and i64 %2675, 4294967295
  store i64 %2677, i64* %RDX, align 8, !tbaa !2428
  %2678 = shl i64 %2675, 32
  %2679 = ashr exact i64 %2678, 32
  %2680 = icmp ne i64 %2679, %2675
  %2681 = zext i1 %2680 to i8
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2681, i8* %2682, align 1, !tbaa !2432
  %2683 = and i32 %2676, 255
  %2684 = call i32 @llvm.ctpop.i32(i32 %2683) #16
  %2685 = trunc i32 %2684 to i8
  %2686 = and i8 %2685, 1
  %2687 = xor i8 %2686, 1
  %2688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2687, i8* %2688, align 1, !tbaa !2446
  %2689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2689, align 1, !tbaa !2447
  %2690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2690, align 1, !tbaa !2448
  %2691 = lshr i32 %2676, 31
  %2692 = trunc i32 %2691 to i8
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2692, i8* %2693, align 1, !tbaa !2449
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2681, i8* %2694, align 1, !tbaa !2450
  %2695 = load i64, i64* %RDX
  %2696 = load i64, i64* %RBP
  %2697 = sub i64 %2696, 44
  %2698 = load i64, i64* %PC
  %2699 = add i64 %2698, 3
  store i64 %2699, i64* %PC
  %2700 = trunc i64 %2695 to i32
  %2701 = inttoptr i64 %2697 to i32*
  %2702 = load i32, i32* %2701
  %2703 = add i32 %2702, %2700
  %2704 = zext i32 %2703 to i64
  store i64 %2704, i64* %RDX, align 8, !tbaa !2428
  %2705 = icmp ult i32 %2703, %2700
  %2706 = icmp ult i32 %2703, %2702
  %2707 = or i1 %2705, %2706
  %2708 = zext i1 %2707 to i8
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2708, i8* %2709, align 1, !tbaa !2432
  %2710 = and i32 %2703, 255
  %2711 = call i32 @llvm.ctpop.i32(i32 %2710) #16
  %2712 = trunc i32 %2711 to i8
  %2713 = and i8 %2712, 1
  %2714 = xor i8 %2713, 1
  %2715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2714, i8* %2715, align 1, !tbaa !2446
  %2716 = xor i32 %2702, %2700
  %2717 = xor i32 %2716, %2703
  %2718 = lshr i32 %2717, 4
  %2719 = trunc i32 %2718 to i8
  %2720 = and i8 %2719, 1
  %2721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2720, i8* %2721, align 1, !tbaa !2447
  %2722 = icmp eq i32 %2703, 0
  %2723 = zext i1 %2722 to i8
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2723, i8* %2724, align 1, !tbaa !2448
  %2725 = lshr i32 %2703, 31
  %2726 = trunc i32 %2725 to i8
  %2727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2726, i8* %2727, align 1, !tbaa !2449
  %2728 = lshr i32 %2700, 31
  %2729 = lshr i32 %2702, 31
  %2730 = xor i32 %2725, %2728
  %2731 = xor i32 %2725, %2729
  %2732 = add nuw nsw i32 %2730, %2731
  %2733 = icmp eq i32 %2732, 2
  %2734 = zext i1 %2733 to i8
  %2735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2734, i8* %2735, align 1, !tbaa !2450
  %2736 = load i64, i64* %RDX
  %2737 = load i64, i64* %PC
  %2738 = add i64 %2737, 3
  store i64 %2738, i64* %PC
  %2739 = trunc i64 %2736 to i32
  %2740 = add i32 1, %2739
  %2741 = zext i32 %2740 to i64
  store i64 %2741, i64* %RDX, align 8, !tbaa !2428
  %2742 = icmp ult i32 %2740, %2739
  %2743 = icmp ult i32 %2740, 1
  %2744 = or i1 %2742, %2743
  %2745 = zext i1 %2744 to i8
  %2746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2745, i8* %2746, align 1, !tbaa !2432
  %2747 = and i32 %2740, 255
  %2748 = call i32 @llvm.ctpop.i32(i32 %2747) #16
  %2749 = trunc i32 %2748 to i8
  %2750 = and i8 %2749, 1
  %2751 = xor i8 %2750, 1
  %2752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2751, i8* %2752, align 1, !tbaa !2446
  %2753 = xor i64 1, %2736
  %2754 = trunc i64 %2753 to i32
  %2755 = xor i32 %2754, %2740
  %2756 = lshr i32 %2755, 4
  %2757 = trunc i32 %2756 to i8
  %2758 = and i8 %2757, 1
  %2759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2758, i8* %2759, align 1, !tbaa !2447
  %2760 = icmp eq i32 %2740, 0
  %2761 = zext i1 %2760 to i8
  %2762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2761, i8* %2762, align 1, !tbaa !2448
  %2763 = lshr i32 %2740, 31
  %2764 = trunc i32 %2763 to i8
  %2765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2764, i8* %2765, align 1, !tbaa !2449
  %2766 = lshr i32 %2739, 31
  %2767 = xor i32 %2763, %2766
  %2768 = add nuw nsw i32 %2767, %2763
  %2769 = icmp eq i32 %2768, 2
  %2770 = zext i1 %2769 to i8
  %2771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2770, i8* %2771, align 1, !tbaa !2450
  %2772 = load i32, i32* %EDX
  %2773 = zext i32 %2772 to i64
  %2774 = load i64, i64* %PC
  %2775 = add i64 %2774, 3
  store i64 %2775, i64* %PC
  %2776 = shl i64 %2773, 32
  %2777 = ashr exact i64 %2776, 32
  store i64 %2777, i64* %RDI, align 8, !tbaa !2428
  %2778 = load i64, i64* %RDI
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 4
  store i64 %2780, i64* %PC
  %2781 = shl i64 %2778, 1
  %2782 = icmp slt i64 %2781, 0
  %2783 = shl i64 %2781, 1
  store i64 %2783, i64* %RDI, align 8, !tbaa !2428
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2785 = zext i1 %2782 to i8
  store i8 %2785, i8* %2784, align 1, !tbaa !2451
  %2786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2787 = trunc i64 %2783 to i32
  %2788 = and i32 %2787, 254
  %2789 = call i32 @llvm.ctpop.i32(i32 %2788) #16
  %2790 = trunc i32 %2789 to i8
  %2791 = and i8 %2790, 1
  %2792 = xor i8 %2791, 1
  store i8 %2792, i8* %2786, align 1, !tbaa !2451
  %2793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2793, align 1, !tbaa !2451
  %2794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2795 = icmp eq i64 %2783, 0
  %2796 = zext i1 %2795 to i8
  store i8 %2796, i8* %2794, align 1, !tbaa !2451
  %2797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2798 = lshr i64 %2783, 63
  %2799 = trunc i64 %2798 to i8
  store i8 %2799, i8* %2797, align 1, !tbaa !2451
  %2800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2800, align 1, !tbaa !2451
  %2801 = load i64, i64* %RSI
  %2802 = load i64, i64* %RDI
  %2803 = load i64, i64* %PC
  %2804 = add i64 %2803, 3
  store i64 %2804, i64* %PC
  %2805 = add i64 %2802, %2801
  store i64 %2805, i64* %RSI, align 8, !tbaa !2428
  %2806 = icmp ult i64 %2805, %2801
  %2807 = icmp ult i64 %2805, %2802
  %2808 = or i1 %2806, %2807
  %2809 = zext i1 %2808 to i8
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2809, i8* %2810, align 1, !tbaa !2432
  %2811 = trunc i64 %2805 to i32
  %2812 = and i32 %2811, 255
  %2813 = call i32 @llvm.ctpop.i32(i32 %2812) #16
  %2814 = trunc i32 %2813 to i8
  %2815 = and i8 %2814, 1
  %2816 = xor i8 %2815, 1
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2816, i8* %2817, align 1, !tbaa !2446
  %2818 = xor i64 %2802, %2801
  %2819 = xor i64 %2818, %2805
  %2820 = lshr i64 %2819, 4
  %2821 = trunc i64 %2820 to i8
  %2822 = and i8 %2821, 1
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2822, i8* %2823, align 1, !tbaa !2447
  %2824 = icmp eq i64 %2805, 0
  %2825 = zext i1 %2824 to i8
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2825, i8* %2826, align 1, !tbaa !2448
  %2827 = lshr i64 %2805, 63
  %2828 = trunc i64 %2827 to i8
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2828, i8* %2829, align 1, !tbaa !2449
  %2830 = lshr i64 %2801, 63
  %2831 = lshr i64 %2802, 63
  %2832 = xor i64 %2827, %2830
  %2833 = xor i64 %2827, %2831
  %2834 = add nuw nsw i64 %2832, %2833
  %2835 = icmp eq i64 %2834, 2
  %2836 = zext i1 %2835 to i8
  %2837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2836, i8* %2837, align 1, !tbaa !2450
  %2838 = load i64, i64* %RBP
  %2839 = sub i64 %2838, 32
  %2840 = load i64, i64* %PC
  %2841 = add i64 %2840, 4
  store i64 %2841, i64* %PC
  %2842 = inttoptr i64 %2839 to i64*
  %2843 = load i64, i64* %2842
  store i64 %2843, i64* %RDI, align 8, !tbaa !2428
  %2844 = load i64, i64* %RBP
  %2845 = sub i64 %2844, 44
  %2846 = load i64, i64* %PC
  %2847 = add i64 %2846, 3
  store i64 %2847, i64* %PC
  %2848 = inttoptr i64 %2845 to i32*
  %2849 = load i32, i32* %2848
  %2850 = zext i32 %2849 to i64
  store i64 %2850, i64* %RDX, align 8, !tbaa !2428
  %2851 = load i64, i64* %RDX
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 3
  store i64 %2853, i64* %PC
  %2854 = trunc i64 %2851 to i32
  %2855 = add i32 1, %2854
  %2856 = zext i32 %2855 to i64
  store i64 %2856, i64* %RDX, align 8, !tbaa !2428
  %2857 = icmp ult i32 %2855, %2854
  %2858 = icmp ult i32 %2855, 1
  %2859 = or i1 %2857, %2858
  %2860 = zext i1 %2859 to i8
  %2861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2860, i8* %2861, align 1, !tbaa !2432
  %2862 = and i32 %2855, 255
  %2863 = call i32 @llvm.ctpop.i32(i32 %2862) #16
  %2864 = trunc i32 %2863 to i8
  %2865 = and i8 %2864, 1
  %2866 = xor i8 %2865, 1
  %2867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2866, i8* %2867, align 1, !tbaa !2446
  %2868 = xor i64 1, %2851
  %2869 = trunc i64 %2868 to i32
  %2870 = xor i32 %2869, %2855
  %2871 = lshr i32 %2870, 4
  %2872 = trunc i32 %2871 to i8
  %2873 = and i8 %2872, 1
  %2874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2873, i8* %2874, align 1, !tbaa !2447
  %2875 = icmp eq i32 %2855, 0
  %2876 = zext i1 %2875 to i8
  %2877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2876, i8* %2877, align 1, !tbaa !2448
  %2878 = lshr i32 %2855, 31
  %2879 = trunc i32 %2878 to i8
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2879, i8* %2880, align 1, !tbaa !2449
  %2881 = lshr i32 %2854, 31
  %2882 = xor i32 %2878, %2881
  %2883 = add nuw nsw i32 %2882, %2878
  %2884 = icmp eq i32 %2883, 2
  %2885 = zext i1 %2884 to i8
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2885, i8* %2886, align 1, !tbaa !2450
  %2887 = load i32, i32* %EDX
  %2888 = zext i32 %2887 to i64
  %2889 = load i64, i64* %PC
  %2890 = add i64 %2889, 3
  store i64 %2890, i64* %PC
  %2891 = shl i64 %2888, 32
  %2892 = ashr exact i64 %2891, 32
  store i64 %2892, i64* %R8, align 8, !tbaa !2428
  %2893 = load i64, i64* %R8
  %2894 = load i64, i64* %PC
  %2895 = add i64 %2894, 4
  store i64 %2895, i64* %PC
  %2896 = shl i64 %2893, 1
  %2897 = icmp slt i64 %2896, 0
  %2898 = shl i64 %2896, 1
  store i64 %2898, i64* %R8, align 8, !tbaa !2428
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2900 = zext i1 %2897 to i8
  store i8 %2900, i8* %2899, align 1, !tbaa !2451
  %2901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2902 = trunc i64 %2898 to i32
  %2903 = and i32 %2902, 254
  %2904 = call i32 @llvm.ctpop.i32(i32 %2903) #16
  %2905 = trunc i32 %2904 to i8
  %2906 = and i8 %2905, 1
  %2907 = xor i8 %2906, 1
  store i8 %2907, i8* %2901, align 1, !tbaa !2451
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2908, align 1, !tbaa !2451
  %2909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2910 = icmp eq i64 %2898, 0
  %2911 = zext i1 %2910 to i8
  store i8 %2911, i8* %2909, align 1, !tbaa !2451
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2913 = lshr i64 %2898, 63
  %2914 = trunc i64 %2913 to i8
  store i8 %2914, i8* %2912, align 1, !tbaa !2451
  %2915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2915, align 1, !tbaa !2451
  %2916 = load i64, i64* %RDI
  %2917 = load i64, i64* %R8
  %2918 = load i64, i64* %PC
  %2919 = add i64 %2918, 3
  store i64 %2919, i64* %PC
  %2920 = add i64 %2917, %2916
  store i64 %2920, i64* %RDI, align 8, !tbaa !2428
  %2921 = icmp ult i64 %2920, %2916
  %2922 = icmp ult i64 %2920, %2917
  %2923 = or i1 %2921, %2922
  %2924 = zext i1 %2923 to i8
  %2925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2924, i8* %2925, align 1, !tbaa !2432
  %2926 = trunc i64 %2920 to i32
  %2927 = and i32 %2926, 255
  %2928 = call i32 @llvm.ctpop.i32(i32 %2927) #16
  %2929 = trunc i32 %2928 to i8
  %2930 = and i8 %2929, 1
  %2931 = xor i8 %2930, 1
  %2932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2931, i8* %2932, align 1, !tbaa !2446
  %2933 = xor i64 %2917, %2916
  %2934 = xor i64 %2933, %2920
  %2935 = lshr i64 %2934, 4
  %2936 = trunc i64 %2935 to i8
  %2937 = and i8 %2936, 1
  %2938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2937, i8* %2938, align 1, !tbaa !2447
  %2939 = icmp eq i64 %2920, 0
  %2940 = zext i1 %2939 to i8
  %2941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2940, i8* %2941, align 1, !tbaa !2448
  %2942 = lshr i64 %2920, 63
  %2943 = trunc i64 %2942 to i8
  %2944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2943, i8* %2944, align 1, !tbaa !2449
  %2945 = lshr i64 %2916, 63
  %2946 = lshr i64 %2917, 63
  %2947 = xor i64 %2942, %2945
  %2948 = xor i64 %2942, %2946
  %2949 = add nuw nsw i64 %2947, %2948
  %2950 = icmp eq i64 %2949, 2
  %2951 = zext i1 %2950 to i8
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2951, i8* %2952, align 1, !tbaa !2450
  %2953 = load i64, i64* %RBP
  %2954 = sub i64 %2953, 80
  %2955 = load i64, i64* %RDI
  %2956 = load i64, i64* %PC
  %2957 = add i64 %2956, 4
  store i64 %2957, i64* %PC
  %2958 = inttoptr i64 %2954 to i64*
  store i64 %2955, i64* %2958
  %2959 = load i32, i32* %ECX
  %2960 = zext i32 %2959 to i64
  %2961 = load i64, i64* %PC
  %2962 = add i64 %2961, 2
  store i64 %2962, i64* %PC
  %2963 = and i64 %2960, 4294967295
  store i64 %2963, i64* %RDI, align 8, !tbaa !2428
  %2964 = load i32, i32* %EAX
  %2965 = zext i32 %2964 to i64
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 2
  store i64 %2967, i64* %PC
  %2968 = and i64 %2965, 4294967295
  store i64 %2968, i64* %RDX, align 8, !tbaa !2428
  %2969 = load i64, i64* %RBP
  %2970 = sub i64 %2969, 80
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 4
  store i64 %2972, i64* %PC
  %2973 = inttoptr i64 %2970 to i64*
  %2974 = load i64, i64* %2973
  store i64 %2974, i64* %RCX, align 8, !tbaa !2428
  %2975 = bitcast i32* %R8D to i64*
  %2976 = load i32, i32* %EAX
  %2977 = zext i32 %2976 to i64
  %2978 = load i64, i64* %PC
  %2979 = add i64 %2978, 3
  store i64 %2979, i64* %PC
  %2980 = and i64 %2977, 4294967295
  store i64 %2980, i64* %2975, align 8, !tbaa !2428
  %2981 = load i64, i64* %RBP
  %2982 = sub i64 %2981, 84
  %2983 = bitcast %union.vec128_t* %XMM0 to i8*
  %2984 = load i64, i64* %PC
  %2985 = add i64 %2984, 5
  store i64 %2985, i64* %PC
  %2986 = bitcast i8* %2983 to <2 x float>*
  %2987 = load <2 x float>, <2 x float>* %2986, align 1
  %2988 = extractelement <2 x float> %2987, i32 0
  %2989 = inttoptr i64 %2982 to float*
  store float %2988, float* %2989
  %2990 = load i64, i64* %PC
  %2991 = add i64 %2990, 2777
  %2992 = load i64, i64* %PC
  %2993 = add i64 %2992, 5
  %2994 = load i64, i64* %PC
  %2995 = add i64 %2994, 5
  store i64 %2995, i64* %PC
  %2996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2997 = load i64, i64* %2996, align 8, !tbaa !2428
  %2998 = add i64 %2997, -8
  %2999 = inttoptr i64 %2998 to i64*
  store i64 %2993, i64* %2999
  store i64 %2998, i64* %2996, align 8, !tbaa !2428
  %3000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2991, i64* %3000, align 8, !tbaa !2428
  %3001 = load i64, i64* %PC
  %3002 = call %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* %0, i64 %3001, %struct.Memory* %MEMORY.6)
  %3003 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3004 = load i64, i64* %RBP
  %3005 = sub i64 %3004, 84
  %3006 = load i64, i64* %PC
  %3007 = add i64 %3006, 5
  store i64 %3007, i64* %PC
  %3008 = inttoptr i64 %3005 to float*
  %3009 = load float, float* %3008
  %3010 = bitcast i8* %3003 to float*
  store float %3009, float* %3010, align 1, !tbaa !2453
  %3011 = getelementptr inbounds i8, i8* %3003, i64 4
  %3012 = bitcast i8* %3011 to float*
  store float 0.000000e+00, float* %3012, align 1, !tbaa !2453
  %3013 = getelementptr inbounds i8, i8* %3003, i64 8
  %3014 = bitcast i8* %3013 to float*
  store float 0.000000e+00, float* %3014, align 1, !tbaa !2453
  %3015 = getelementptr inbounds i8, i8* %3003, i64 12
  %3016 = bitcast i8* %3015 to float*
  store float 0.000000e+00, float* %3016, align 1, !tbaa !2453
  %3017 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3018 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3019 = bitcast %union.vec128_t* %XMM0 to i8*
  %3020 = load i64, i64* %PC
  %3021 = add i64 %3020, 4
  store i64 %3021, i64* %PC
  %3022 = bitcast i8* %3018 to <2 x float>*
  %3023 = load <2 x float>, <2 x float>* %3022, align 1
  %3024 = getelementptr inbounds i8, i8* %3018, i64 8
  %3025 = bitcast i8* %3024 to <2 x i32>*
  %3026 = load <2 x i32>, <2 x i32>* %3025, align 1
  %3027 = bitcast i8* %3019 to <2 x float>*
  %3028 = load <2 x float>, <2 x float>* %3027, align 1
  %3029 = extractelement <2 x float> %3023, i32 0
  %3030 = extractelement <2 x float> %3028, i32 0
  %3031 = fadd float %3029, %3030
  %3032 = bitcast i8* %3017 to float*
  store float %3031, float* %3032, align 1, !tbaa !2453
  %3033 = bitcast <2 x float> %3023 to <2 x i32>
  %3034 = extractelement <2 x i32> %3033, i32 1
  %3035 = getelementptr inbounds i8, i8* %3017, i64 4
  %3036 = bitcast i8* %3035 to i32*
  store i32 %3034, i32* %3036, align 1, !tbaa !2453
  %3037 = extractelement <2 x i32> %3026, i32 0
  %3038 = getelementptr inbounds i8, i8* %3017, i64 8
  %3039 = bitcast i8* %3038 to i32*
  store i32 %3037, i32* %3039, align 1, !tbaa !2453
  %3040 = extractelement <2 x i32> %3026, i32 1
  %3041 = getelementptr inbounds i8, i8* %3017, i64 12
  %3042 = bitcast i8* %3041 to i32*
  store i32 %3040, i32* %3042, align 1, !tbaa !2453
  %3043 = load i64, i64* %RBP
  %3044 = sub i64 %3043, 32
  %3045 = load i64, i64* %PC
  %3046 = add i64 %3045, 4
  store i64 %3046, i64* %PC
  %3047 = inttoptr i64 %3044 to i64*
  %3048 = load i64, i64* %3047
  store i64 %3048, i64* %RCX, align 8, !tbaa !2428
  %3049 = load i64, i64* %RBP
  %3050 = sub i64 %3049, 44
  %3051 = load i64, i64* %PC
  %3052 = add i64 %3051, 4
  store i64 %3052, i64* %PC
  %3053 = inttoptr i64 %3050 to i32*
  %3054 = load i32, i32* %3053
  %3055 = sext i32 %3054 to i64
  store i64 %3055, i64* %RSI, align 8, !tbaa !2428
  %3056 = load i64, i64* %RCX
  %3057 = load i64, i64* %RSI
  %3058 = mul i64 %3057, 4
  %3059 = add i64 %3058, %3056
  %3060 = bitcast %union.vec128_t* %XMM1 to i8*
  %3061 = load i64, i64* %PC
  %3062 = add i64 %3061, 5
  store i64 %3062, i64* %PC
  %3063 = bitcast i8* %3060 to <2 x float>*
  %3064 = load <2 x float>, <2 x float>* %3063, align 1
  %3065 = extractelement <2 x float> %3064, i32 0
  %3066 = inttoptr i64 %3059 to float*
  store float %3065, float* %3066
  %3067 = load i64, i64* %RBP
  %3068 = sub i64 %3067, 24
  %3069 = load i64, i64* %PC
  %3070 = add i64 %3069, 4
  store i64 %3070, i64* %PC
  %3071 = inttoptr i64 %3068 to i64*
  %3072 = load i64, i64* %3071
  store i64 %3072, i64* %RCX, align 8, !tbaa !2428
  %3073 = load i64, i64* %RBP
  %3074 = sub i64 %3073, 44
  %3075 = load i64, i64* %PC
  %3076 = add i64 %3075, 4
  store i64 %3076, i64* %PC
  %3077 = inttoptr i64 %3074 to i32*
  %3078 = load i32, i32* %3077
  %3079 = sext i32 %3078 to i64
  store i64 %3079, i64* %RSI, align 8, !tbaa !2428
  %3080 = load i64, i64* %RCX
  %3081 = load i64, i64* %RSI
  %3082 = mul i64 %3081, 4
  %3083 = add i64 %3082, %3080
  %3084 = load i64, i64* %PC
  %3085 = add i64 %3084, 3
  store i64 %3085, i64* %PC
  %3086 = inttoptr i64 %3083 to i32*
  %3087 = load i32, i32* %3086
  %3088 = zext i32 %3087 to i64
  store i64 %3088, i64* %RAX, align 8, !tbaa !2428
  %3089 = load i64, i64* %RBP
  %3090 = sub i64 %3089, 52
  %3091 = load i32, i32* %EAX
  %3092 = zext i32 %3091 to i64
  %3093 = load i64, i64* %PC
  %3094 = add i64 %3093, 3
  store i64 %3094, i64* %PC
  %3095 = inttoptr i64 %3090 to i32*
  store i32 %3091, i32* %3095
  %3096 = load i64, i64* %RBP
  %3097 = sub i64 %3096, 52
  %3098 = load i64, i64* %PC
  %3099 = add i64 %3098, 3
  store i64 %3099, i64* %PC
  %3100 = inttoptr i64 %3097 to i32*
  %3101 = load i32, i32* %3100
  %3102 = zext i32 %3101 to i64
  store i64 %3102, i64* %RAX, align 8, !tbaa !2428
  %3103 = load i32, i32* %EAX
  %3104 = zext i32 %3103 to i64
  %3105 = load i64, i64* %RBP
  %3106 = sub i64 %3105, 44
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 3
  store i64 %3108, i64* %PC
  %3109 = inttoptr i64 %3106 to i32*
  %3110 = load i32, i32* %3109
  %3111 = sub i32 %3103, %3110
  %3112 = icmp ult i32 %3103, %3110
  %3113 = zext i1 %3112 to i8
  %3114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3113, i8* %3114, align 1, !tbaa !2432
  %3115 = and i32 %3111, 255
  %3116 = call i32 @llvm.ctpop.i32(i32 %3115) #16
  %3117 = trunc i32 %3116 to i8
  %3118 = and i8 %3117, 1
  %3119 = xor i8 %3118, 1
  %3120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3119, i8* %3120, align 1, !tbaa !2446
  %3121 = xor i32 %3110, %3103
  %3122 = xor i32 %3121, %3111
  %3123 = lshr i32 %3122, 4
  %3124 = trunc i32 %3123 to i8
  %3125 = and i8 %3124, 1
  %3126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3125, i8* %3126, align 1, !tbaa !2447
  %3127 = icmp eq i32 %3111, 0
  %3128 = zext i1 %3127 to i8
  %3129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3128, i8* %3129, align 1, !tbaa !2448
  %3130 = lshr i32 %3111, 31
  %3131 = trunc i32 %3130 to i8
  %3132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3131, i8* %3132, align 1, !tbaa !2449
  %3133 = lshr i32 %3103, 31
  %3134 = lshr i32 %3110, 31
  %3135 = xor i32 %3134, %3133
  %3136 = xor i32 %3130, %3133
  %3137 = add nuw nsw i32 %3136, %3135
  %3138 = icmp eq i32 %3137, 2
  %3139 = zext i1 %3138 to i8
  %3140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3139, i8* %3140, align 1, !tbaa !2450
  %3141 = load i64, i64* %PC
  %3142 = add i64 %3141, 68
  %3143 = load i64, i64* %PC
  %3144 = add i64 %3143, 6
  %3145 = load i64, i64* %PC
  %3146 = add i64 %3145, 6
  store i64 %3146, i64* %PC
  %3147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3148 = load i8, i8* %3147, align 1, !tbaa !2448
  store i8 %3148, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3150 = icmp ne i8 %3148, 0
  %3151 = select i1 %3150, i64 %3142, i64 %3144
  store i64 %3151, i64* %3149, align 8, !tbaa !2428
  %3152 = load i8, i8* %BRANCH_TAKEN
  %3153 = icmp eq i8 %3152, 1
  br i1 %3153, label %block_401fea, label %block_401fac

block_401fea:                                     ; preds = %block_401f09, %block_401fac
  %MEMORY.4 = phi %struct.Memory* [ %3002, %block_401f09 ], [ %3002, %block_401fac ]
  %3154 = load i64, i64* %PC
  %3155 = add i64 %3154, 5
  %3156 = load i64, i64* %PC
  %3157 = add i64 %3156, 5
  store i64 %3157, i64* %PC
  %3158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3155, i64* %3158, align 8, !tbaa !2428
  %3159 = load i64, i64* %RBP
  %3160 = sub i64 %3159, 48
  %3161 = load i64, i64* %PC
  %3162 = add i64 %3161, 3
  store i64 %3162, i64* %PC
  %3163 = inttoptr i64 %3160 to i32*
  %3164 = load i32, i32* %3163
  %3165 = zext i32 %3164 to i64
  store i64 %3165, i64* %RAX, align 8, !tbaa !2428
  %3166 = load i64, i64* %RAX
  %3167 = load i64, i64* %PC
  %3168 = add i64 %3167, 3
  store i64 %3168, i64* %PC
  %3169 = trunc i64 %3166 to i32
  %3170 = add i32 1, %3169
  %3171 = zext i32 %3170 to i64
  store i64 %3171, i64* %RAX, align 8, !tbaa !2428
  %3172 = icmp ult i32 %3170, %3169
  %3173 = icmp ult i32 %3170, 1
  %3174 = or i1 %3172, %3173
  %3175 = zext i1 %3174 to i8
  %3176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3175, i8* %3176, align 1, !tbaa !2432
  %3177 = and i32 %3170, 255
  %3178 = call i32 @llvm.ctpop.i32(i32 %3177) #16
  %3179 = trunc i32 %3178 to i8
  %3180 = and i8 %3179, 1
  %3181 = xor i8 %3180, 1
  %3182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3181, i8* %3182, align 1, !tbaa !2446
  %3183 = xor i64 1, %3166
  %3184 = trunc i64 %3183 to i32
  %3185 = xor i32 %3184, %3170
  %3186 = lshr i32 %3185, 4
  %3187 = trunc i32 %3186 to i8
  %3188 = and i8 %3187, 1
  %3189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3188, i8* %3189, align 1, !tbaa !2447
  %3190 = icmp eq i32 %3170, 0
  %3191 = zext i1 %3190 to i8
  %3192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3191, i8* %3192, align 1, !tbaa !2448
  %3193 = lshr i32 %3170, 31
  %3194 = trunc i32 %3193 to i8
  %3195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3194, i8* %3195, align 1, !tbaa !2449
  %3196 = lshr i32 %3169, 31
  %3197 = xor i32 %3193, %3196
  %3198 = add nuw nsw i32 %3197, %3193
  %3199 = icmp eq i32 %3198, 2
  %3200 = zext i1 %3199 to i8
  %3201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3200, i8* %3201, align 1, !tbaa !2450
  %3202 = load i64, i64* %RBP
  %3203 = sub i64 %3202, 48
  %3204 = load i32, i32* %EAX
  %3205 = zext i32 %3204 to i64
  %3206 = load i64, i64* %PC
  %3207 = add i64 %3206, 3
  store i64 %3207, i64* %PC
  %3208 = inttoptr i64 %3203 to i32*
  store i32 %3204, i32* %3208
  %3209 = load i64, i64* %PC
  %3210 = sub i64 %3209, 251
  %3211 = load i64, i64* %PC
  %3212 = add i64 %3211, 5
  store i64 %3212, i64* %PC
  %3213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3210, i64* %3213, align 8, !tbaa !2428
  br label %block_401efd

block_402007:                                     ; preds = %block_402002, %block_401e53
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.8, %block_402002 ], [ %MEMORY.3, %block_401e53 ]
  %3214 = load i64, i64* %RSP
  %3215 = load i64, i64* %PC
  %3216 = add i64 %3215, 4
  store i64 %3216, i64* %PC
  %3217 = add i64 96, %3214
  store i64 %3217, i64* %RSP, align 8, !tbaa !2428
  %3218 = icmp ult i64 %3217, %3214
  %3219 = icmp ult i64 %3217, 96
  %3220 = or i1 %3218, %3219
  %3221 = zext i1 %3220 to i8
  %3222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3221, i8* %3222, align 1, !tbaa !2432
  %3223 = trunc i64 %3217 to i32
  %3224 = and i32 %3223, 255
  %3225 = call i32 @llvm.ctpop.i32(i32 %3224) #16
  %3226 = trunc i32 %3225 to i8
  %3227 = and i8 %3226, 1
  %3228 = xor i8 %3227, 1
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3228, i8* %3229, align 1, !tbaa !2446
  %3230 = xor i64 96, %3214
  %3231 = xor i64 %3230, %3217
  %3232 = lshr i64 %3231, 4
  %3233 = trunc i64 %3232 to i8
  %3234 = and i8 %3233, 1
  %3235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3234, i8* %3235, align 1, !tbaa !2447
  %3236 = icmp eq i64 %3217, 0
  %3237 = zext i1 %3236 to i8
  %3238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3237, i8* %3238, align 1, !tbaa !2448
  %3239 = lshr i64 %3217, 63
  %3240 = trunc i64 %3239 to i8
  %3241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3240, i8* %3241, align 1, !tbaa !2449
  %3242 = lshr i64 %3214, 63
  %3243 = xor i64 %3239, %3242
  %3244 = add nuw nsw i64 %3243, %3239
  %3245 = icmp eq i64 %3244, 2
  %3246 = zext i1 %3245 to i8
  %3247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3246, i8* %3247, align 1, !tbaa !2450
  %3248 = load i64, i64* %PC
  %3249 = add i64 %3248, 1
  store i64 %3249, i64* %PC
  %3250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3251 = load i64, i64* %3250, align 8, !tbaa !2428
  %3252 = add i64 %3251, 8
  %3253 = inttoptr i64 %3251 to i64*
  %3254 = load i64, i64* %3253
  store i64 %3254, i64* %RBP, align 8, !tbaa !2428
  store i64 %3252, i64* %3250, align 8, !tbaa !2428
  %3255 = load i64, i64* %PC
  %3256 = add i64 %3255, 1
  store i64 %3256, i64* %PC
  %3257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3259 = load i64, i64* %3258, align 8, !tbaa !2428
  %3260 = inttoptr i64 %3259 to i64*
  %3261 = load i64, i64* %3260
  store i64 %3261, i64* %3257, align 8, !tbaa !2428
  %3262 = add i64 %3259, 8
  store i64 %3262, i64* %3258, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_401efd:                                     ; preds = %block_401fea, %block_401ef6
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.0, %block_401ef6 ], [ %MEMORY.4, %block_401fea ]
  %3263 = load i64, i64* %RBP
  %3264 = sub i64 %3263, 48
  %3265 = load i64, i64* %PC
  %3266 = add i64 %3265, 3
  store i64 %3266, i64* %PC
  %3267 = inttoptr i64 %3264 to i32*
  %3268 = load i32, i32* %3267
  %3269 = zext i32 %3268 to i64
  store i64 %3269, i64* %RAX, align 8, !tbaa !2428
  %3270 = load i32, i32* %EAX
  %3271 = zext i32 %3270 to i64
  %3272 = load i64, i64* %RBP
  %3273 = sub i64 %3272, 56
  %3274 = load i64, i64* %PC
  %3275 = add i64 %3274, 3
  store i64 %3275, i64* %PC
  %3276 = inttoptr i64 %3273 to i32*
  %3277 = load i32, i32* %3276
  %3278 = sub i32 %3270, %3277
  %3279 = icmp ult i32 %3270, %3277
  %3280 = zext i1 %3279 to i8
  %3281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3280, i8* %3281, align 1, !tbaa !2432
  %3282 = and i32 %3278, 255
  %3283 = call i32 @llvm.ctpop.i32(i32 %3282) #16
  %3284 = trunc i32 %3283 to i8
  %3285 = and i8 %3284, 1
  %3286 = xor i8 %3285, 1
  %3287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3286, i8* %3287, align 1, !tbaa !2446
  %3288 = xor i32 %3277, %3270
  %3289 = xor i32 %3288, %3278
  %3290 = lshr i32 %3289, 4
  %3291 = trunc i32 %3290 to i8
  %3292 = and i8 %3291, 1
  %3293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3292, i8* %3293, align 1, !tbaa !2447
  %3294 = icmp eq i32 %3278, 0
  %3295 = zext i1 %3294 to i8
  %3296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3295, i8* %3296, align 1, !tbaa !2448
  %3297 = lshr i32 %3278, 31
  %3298 = trunc i32 %3297 to i8
  %3299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3298, i8* %3299, align 1, !tbaa !2449
  %3300 = lshr i32 %3270, 31
  %3301 = lshr i32 %3277, 31
  %3302 = xor i32 %3301, %3300
  %3303 = xor i32 %3297, %3300
  %3304 = add nuw nsw i32 %3303, %3302
  %3305 = icmp eq i32 %3304, 2
  %3306 = zext i1 %3305 to i8
  %3307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3306, i8* %3307, align 1, !tbaa !2450
  %3308 = load i64, i64* %PC
  %3309 = add i64 %3308, 250
  %3310 = load i64, i64* %PC
  %3311 = add i64 %3310, 6
  %3312 = load i64, i64* %PC
  %3313 = add i64 %3312, 6
  store i64 %3313, i64* %PC
  %3314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3315 = load i8, i8* %3314, align 1, !tbaa !2449
  %3316 = icmp ne i8 %3315, 0
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3318 = load i8, i8* %3317, align 1, !tbaa !2450
  %3319 = icmp ne i8 %3318, 0
  %3320 = xor i1 %3316, %3319
  %3321 = xor i1 %3320, true
  %3322 = zext i1 %3321 to i8
  store i8 %3322, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3324 = select i1 %3320, i64 %3311, i64 %3309
  store i64 %3324, i64* %3323, align 8, !tbaa !2428
  %3325 = load i8, i8* %BRANCH_TAKEN
  %3326 = icmp eq i8 %3325, 1
  %3327 = load i64, i64* %PC
  %3328 = add i64 %3327, 5
  br i1 %3326, label %block_401ffd, label %block_401f09

block_401da1:                                     ; preds = %block_401d9c, %block_401cc1
  %MEMORY.7 = phi %struct.Memory* [ %2, %block_401cc1 ], [ %MEMORY.1, %block_401d9c ]
  %3329 = load i64, i64* %RBP
  %3330 = sub i64 %3329, 48
  %3331 = load i64, i64* %PC
  %3332 = add i64 %3331, 7
  store i64 %3332, i64* %PC
  %3333 = inttoptr i64 %3330 to i32*
  store i32 0, i32* %3333
  br label %block_401da8

block_402002:                                     ; preds = %block_401eec, %block_401ffd
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.0, %block_401eec ], [ %MEMORY.6, %block_401ffd ]
  %3334 = load i64, i64* %PC
  %3335 = add i64 %3334, 5
  %3336 = load i64, i64* %PC
  %3337 = add i64 %3336, 5
  store i64 %3337, i64* %PC
  %3338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3335, i64* %3338, align 8, !tbaa !2428
  br label %block_402007
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400540:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (i64* @stderr to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (i64* @stderr to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (i64* @stderr to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_400578, label %block_400563

block_40057a:                                     ; preds = %block_40056d
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %RAX
  %193 = add i64 %192, %191
  %194 = load i16, i16* %AX
  %195 = zext i16 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  store i64 %197, i64* %PC
  %198 = load i64, i64* %PC
  %199 = tail call %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* %0, i64 %198, %struct.Memory* %2)
  ret %struct.Memory* %199

block_400575:                                     ; preds = %block_40056d
  %200 = load i64, i64* %RAX
  %201 = load i32, i32* %EAX
  %202 = zext i32 %201 to i64
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 3
  store i64 %204, i64* %PC
  br label %block_400578

block_40056d:                                     ; preds = %block_400563
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 1
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %208 = load i64, i64* %207, align 8, !tbaa !2428
  %209 = add i64 %208, 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RBP, align 8, !tbaa !2428
  store i64 %209, i64* %207, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 2
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  switch i64 %218, label %270 [
    i64 4195706, label %block_40057a
    i64 4195701, label %block_400575
  ]

block_400578:                                     ; preds = %block_400563, %block_400575, %block_400540
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400540 ], [ %2, %block_400563 ], [ %2, %block_400575 ]
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 1
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = add i64 %222, 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RBP, align 8, !tbaa !2428
  store i64 %223, i64* %221, align 8, !tbaa !2428
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %228, align 8, !tbaa !2428
  %233 = add i64 %230, 8
  store i64 %233, i64* %229, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400563:                                     ; preds = %block_400540
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = and i64 %237, %236
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %241, align 1, !tbaa !2432
  %242 = trunc i64 %240 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #16
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2446
  %249 = icmp eq i64 %240, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2448
  %252 = lshr i64 %240, 63
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2449
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %255, align 1, !tbaa !2450
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %256, align 1, !tbaa !2447
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 13
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 2
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 2
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %264 = load i8, i8* %263, align 1, !tbaa !2448
  store i8 %264, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %266 = icmp ne i8 %264, 0
  %267 = select i1 %266, i64 %258, i64 %260
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %268 = load i8, i8* %BRANCH_TAKEN
  %269 = icmp eq i8 %268, 1
  br i1 %269, label %block_400578, label %block_40056d

; <label>:270:                                    ; preds = %block_40056d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_401980_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401980:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 17
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %R8D = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 7
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 9
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 11
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RDI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 13
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RSP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 15
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RBP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 17
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R8 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = sub i64 %66, 64
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  %70 = icmp ult i64 %66, 64
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2432
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2446
  %80 = xor i64 64, %66
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %66, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i64, i64* %RDI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 12
  %106 = load i32, i32* %ESI
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 16
  %113 = load i32, i32* %EDX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 24
  %120 = load i64, i64* %RCX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 32
  %126 = load i64, i64* %R8
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 32
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %RCX, align 8, !tbaa !2428
  %136 = load i64, i64* %RCX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 6
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i32*
  store i32 0, i32* %139
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 16
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i32*
  %145 = load i32, i32* %144
  %146 = zext i32 %145 to i64
  store i64 %146, i64* %RDX, align 8, !tbaa !2428
  %147 = load i64, i64* %RDX
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 3
  store i64 %149, i64* %PC
  %150 = trunc i64 %147 to i32
  %151 = sub i32 %150, 1
  %152 = zext i32 %151 to i64
  store i64 %152, i64* %RDX, align 8, !tbaa !2428
  %153 = icmp ult i32 %150, 1
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %154, i8* %155, align 1, !tbaa !2432
  %156 = and i32 %151, 255
  %157 = call i32 @llvm.ctpop.i32(i32 %156) #16
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %160, i8* %161, align 1, !tbaa !2446
  %162 = xor i64 1, %147
  %163 = trunc i64 %162 to i32
  %164 = xor i32 %163, %151
  %165 = lshr i32 %164, 4
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %167, i8* %168, align 1, !tbaa !2447
  %169 = icmp eq i32 %151, 0
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %170, i8* %171, align 1, !tbaa !2448
  %172 = lshr i32 %151, 31
  %173 = trunc i32 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %173, i8* %174, align 1, !tbaa !2449
  %175 = lshr i32 %150, 31
  %176 = xor i32 %172, %175
  %177 = add nuw nsw i32 %176, %175
  %178 = icmp eq i32 %177, 2
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %179, i8* %180, align 1, !tbaa !2450
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 56
  %183 = load i32, i32* %EDX
  %184 = zext i32 %183 to i64
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 3
  store i64 %186, i64* %PC
  %187 = inttoptr i64 %182 to i32*
  store i32 %183, i32* %187
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 56
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %189 to i32*
  %193 = load i32, i32* %192
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %194, align 1, !tbaa !2432
  %195 = and i32 %193, 255
  %196 = call i32 @llvm.ctpop.i32(i32 %195) #16
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %199, i8* %200, align 1, !tbaa !2446
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %201, align 1, !tbaa !2447
  %202 = icmp eq i32 %193, 0
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %203, i8* %204, align 1, !tbaa !2448
  %205 = lshr i32 %193, 31
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %206, i8* %207, align 1, !tbaa !2449
  %208 = lshr i32 %193, 31
  %209 = xor i32 %205, %208
  %210 = add nuw nsw i32 %209, %208
  %211 = icmp eq i32 %210, 2
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %212, i8* %213, align 1, !tbaa !2450
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 639
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 6
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 6
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %221 = load i8, i8* %220, align 1, !tbaa !2449
  %222 = icmp ne i8 %221, 0
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %224 = load i8, i8* %223, align 1, !tbaa !2450
  %225 = icmp ne i8 %224, 0
  %226 = xor i1 %222, %225
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = select i1 %226, i64 %215, i64 %217
  store i64 %229, i64* %228, align 8, !tbaa !2428
  %230 = load i8, i8* %BRANCH_TAKEN
  %231 = icmp eq i8 %230, 1
  br i1 %231, label %block_401c30, label %block_4019b7

block_401b56:                                     ; preds = %block_401b2f
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 8
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = load i64, i64* %RBP
  %239 = sub i64 %238, 12
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %239 to i32*
  %243 = load i32, i32* %242
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RCX, align 8, !tbaa !2428
  %245 = load i64, i64* %RCX
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 40
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i32*
  %251 = load i32, i32* %250
  %252 = shl i64 %245, 32
  %253 = ashr exact i64 %252, 32
  %254 = sext i32 %251 to i64
  %255 = mul nsw i64 %254, %253
  %256 = trunc i64 %255 to i32
  %257 = and i64 %255, 4294967295
  store i64 %257, i64* %RCX, align 8, !tbaa !2428
  %258 = shl i64 %255, 32
  %259 = ashr exact i64 %258, 32
  %260 = icmp ne i64 %259, %255
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %261, i8* %262, align 1, !tbaa !2432
  %263 = and i32 %256, 255
  %264 = call i32 @llvm.ctpop.i32(i32 %263) #16
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  %267 = xor i8 %266, 1
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %267, i8* %268, align 1, !tbaa !2446
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %269, align 1, !tbaa !2447
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %270, align 1, !tbaa !2448
  %271 = lshr i32 %256, 31
  %272 = trunc i32 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %261, i8* %274, align 1, !tbaa !2450
  %275 = load i64, i64* %RCX
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 44
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  %280 = trunc i64 %275 to i32
  %281 = inttoptr i64 %277 to i32*
  %282 = load i32, i32* %281
  %283 = add i32 %282, %280
  %284 = zext i32 %283 to i64
  store i64 %284, i64* %RCX, align 8, !tbaa !2428
  %285 = icmp ult i32 %283, %280
  %286 = icmp ult i32 %283, %282
  %287 = or i1 %285, %286
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %288, i8* %289, align 1, !tbaa !2432
  %290 = and i32 %283, 255
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %294, i8* %295, align 1, !tbaa !2446
  %296 = xor i32 %282, %280
  %297 = xor i32 %296, %283
  %298 = lshr i32 %297, 4
  %299 = trunc i32 %298 to i8
  %300 = and i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %300, i8* %301, align 1, !tbaa !2447
  %302 = icmp eq i32 %283, 0
  %303 = zext i1 %302 to i8
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %303, i8* %304, align 1, !tbaa !2448
  %305 = lshr i32 %283, 31
  %306 = trunc i32 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %306, i8* %307, align 1, !tbaa !2449
  %308 = lshr i32 %280, 31
  %309 = lshr i32 %282, 31
  %310 = xor i32 %305, %308
  %311 = xor i32 %305, %309
  %312 = add nuw nsw i32 %310, %311
  %313 = icmp eq i32 %312, 2
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %314, i8* %315, align 1, !tbaa !2450
  %316 = load i32, i32* %ECX
  %317 = zext i32 %316 to i64
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 3
  store i64 %319, i64* %PC
  %320 = shl i64 %317, 32
  %321 = ashr exact i64 %320, 32
  store i64 %321, i64* %RDX, align 8, !tbaa !2428
  %322 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %323 = load i64, i64* %RAX
  %324 = load i64, i64* %RDX
  %325 = mul i64 %324, 4
  %326 = add i64 %325, %323
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to float*
  %330 = load float, float* %329
  %331 = bitcast i8* %322 to float*
  store float %330, float* %331, align 1, !tbaa !2453
  %332 = getelementptr inbounds i8, i8* %322, i64 4
  %333 = bitcast i8* %332 to float*
  store float 0.000000e+00, float* %333, align 1, !tbaa !2453
  %334 = getelementptr inbounds i8, i8* %322, i64 8
  %335 = bitcast i8* %334 to float*
  store float 0.000000e+00, float* %335, align 1, !tbaa !2453
  %336 = getelementptr inbounds i8, i8* %322, i64 12
  %337 = bitcast i8* %336 to float*
  store float 0.000000e+00, float* %337, align 1, !tbaa !2453
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 8
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i64*
  %343 = load i64, i64* %342
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 12
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i32*
  %349 = load i32, i32* %348
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RCX, align 8, !tbaa !2428
  %351 = load i64, i64* %RCX
  %352 = load i64, i64* %RBP
  %353 = sub i64 %352, 40
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 4
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i32*
  %357 = load i32, i32* %356
  %358 = shl i64 %351, 32
  %359 = ashr exact i64 %358, 32
  %360 = sext i32 %357 to i64
  %361 = mul nsw i64 %360, %359
  %362 = trunc i64 %361 to i32
  %363 = and i64 %361, 4294967295
  store i64 %363, i64* %RCX, align 8, !tbaa !2428
  %364 = shl i64 %361, 32
  %365 = ashr exact i64 %364, 32
  %366 = icmp ne i64 %365, %361
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %367, i8* %368, align 1, !tbaa !2432
  %369 = and i32 %362, 255
  %370 = call i32 @llvm.ctpop.i32(i32 %369) #16
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %373, i8* %374, align 1, !tbaa !2446
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %375, align 1, !tbaa !2447
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %376, align 1, !tbaa !2448
  %377 = lshr i32 %362, 31
  %378 = trunc i32 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %378, i8* %379, align 1, !tbaa !2449
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %367, i8* %380, align 1, !tbaa !2450
  %381 = load i64, i64* %RCX
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 52
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 3
  store i64 %385, i64* %PC
  %386 = trunc i64 %381 to i32
  %387 = inttoptr i64 %383 to i32*
  %388 = load i32, i32* %387
  %389 = add i32 %388, %386
  %390 = zext i32 %389 to i64
  store i64 %390, i64* %RCX, align 8, !tbaa !2428
  %391 = icmp ult i32 %389, %386
  %392 = icmp ult i32 %389, %388
  %393 = or i1 %391, %392
  %394 = zext i1 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %394, i8* %395, align 1, !tbaa !2432
  %396 = and i32 %389, 255
  %397 = call i32 @llvm.ctpop.i32(i32 %396) #16
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  %400 = xor i8 %399, 1
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %400, i8* %401, align 1, !tbaa !2446
  %402 = xor i32 %388, %386
  %403 = xor i32 %402, %389
  %404 = lshr i32 %403, 4
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %406, i8* %407, align 1, !tbaa !2447
  %408 = icmp eq i32 %389, 0
  %409 = zext i1 %408 to i8
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %409, i8* %410, align 1, !tbaa !2448
  %411 = lshr i32 %389, 31
  %412 = trunc i32 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %412, i8* %413, align 1, !tbaa !2449
  %414 = lshr i32 %386, 31
  %415 = lshr i32 %388, 31
  %416 = xor i32 %411, %414
  %417 = xor i32 %411, %415
  %418 = add nuw nsw i32 %416, %417
  %419 = icmp eq i32 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i32, i32* %ECX
  %423 = zext i32 %422 to i64
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = shl i64 %423, 32
  %427 = ashr exact i64 %426, 32
  store i64 %427, i64* %RDX, align 8, !tbaa !2428
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %RDX
  %430 = mul i64 %429, 4
  %431 = add i64 %430, %428
  %432 = bitcast %union.vec128_t* %XMM0 to i8*
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 5
  store i64 %434, i64* %PC
  %435 = bitcast i8* %432 to <2 x float>*
  %436 = load <2 x float>, <2 x float>* %435, align 1
  %437 = extractelement <2 x float> %436, i32 0
  %438 = inttoptr i64 %431 to float*
  store float %437, float* %438
  %439 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 36
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to float*
  %445 = load float, float* %444
  %446 = bitcast i8* %439 to float*
  store float %445, float* %446, align 1, !tbaa !2453
  %447 = getelementptr inbounds i8, i8* %439, i64 4
  %448 = bitcast i8* %447 to float*
  store float 0.000000e+00, float* %448, align 1, !tbaa !2453
  %449 = getelementptr inbounds i8, i8* %439, i64 8
  %450 = bitcast i8* %449 to float*
  store float 0.000000e+00, float* %450, align 1, !tbaa !2453
  %451 = getelementptr inbounds i8, i8* %439, i64 12
  %452 = bitcast i8* %451 to float*
  store float 0.000000e+00, float* %452, align 1, !tbaa !2453
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 8
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 4
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i64*
  %458 = load i64, i64* %457
  store i64 %458, i64* %RAX, align 8, !tbaa !2428
  %459 = load i64, i64* %RBP
  %460 = sub i64 %459, 12
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 3
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %460 to i32*
  %464 = load i32, i32* %463
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = load i64, i64* %RCX
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 40
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471
  %473 = shl i64 %466, 32
  %474 = ashr exact i64 %473, 32
  %475 = sext i32 %472 to i64
  %476 = mul nsw i64 %475, %474
  %477 = trunc i64 %476 to i32
  %478 = and i64 %476, 4294967295
  store i64 %478, i64* %RCX, align 8, !tbaa !2428
  %479 = shl i64 %476, 32
  %480 = ashr exact i64 %479, 32
  %481 = icmp ne i64 %480, %476
  %482 = zext i1 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %482, i8* %483, align 1, !tbaa !2432
  %484 = and i32 %477, 255
  %485 = call i32 @llvm.ctpop.i32(i32 %484) #16
  %486 = trunc i32 %485 to i8
  %487 = and i8 %486, 1
  %488 = xor i8 %487, 1
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %488, i8* %489, align 1, !tbaa !2446
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %490, align 1, !tbaa !2447
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %491, align 1, !tbaa !2448
  %492 = lshr i32 %477, 31
  %493 = trunc i32 %492 to i8
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %493, i8* %494, align 1, !tbaa !2449
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %482, i8* %495, align 1, !tbaa !2450
  %496 = load i64, i64* %RCX
  %497 = load i64, i64* %RBP
  %498 = sub i64 %497, 44
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 3
  store i64 %500, i64* %PC
  %501 = trunc i64 %496 to i32
  %502 = inttoptr i64 %498 to i32*
  %503 = load i32, i32* %502
  %504 = add i32 %503, %501
  %505 = zext i32 %504 to i64
  store i64 %505, i64* %RCX, align 8, !tbaa !2428
  %506 = icmp ult i32 %504, %501
  %507 = icmp ult i32 %504, %503
  %508 = or i1 %506, %507
  %509 = zext i1 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %509, i8* %510, align 1, !tbaa !2432
  %511 = and i32 %504, 255
  %512 = call i32 @llvm.ctpop.i32(i32 %511) #16
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  %515 = xor i8 %514, 1
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %515, i8* %516, align 1, !tbaa !2446
  %517 = xor i32 %503, %501
  %518 = xor i32 %517, %504
  %519 = lshr i32 %518, 4
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %521, i8* %522, align 1, !tbaa !2447
  %523 = icmp eq i32 %504, 0
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %524, i8* %525, align 1, !tbaa !2448
  %526 = lshr i32 %504, 31
  %527 = trunc i32 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %527, i8* %528, align 1, !tbaa !2449
  %529 = lshr i32 %501, 31
  %530 = lshr i32 %503, 31
  %531 = xor i32 %526, %529
  %532 = xor i32 %526, %530
  %533 = add nuw nsw i32 %531, %532
  %534 = icmp eq i32 %533, 2
  %535 = zext i1 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %535, i8* %536, align 1, !tbaa !2450
  %537 = load i32, i32* %ECX
  %538 = zext i32 %537 to i64
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 3
  store i64 %540, i64* %PC
  %541 = shl i64 %538, 32
  %542 = ashr exact i64 %541, 32
  store i64 %542, i64* %RDX, align 8, !tbaa !2428
  %543 = load i64, i64* %RAX
  %544 = load i64, i64* %RDX
  %545 = mul i64 %544, 4
  %546 = add i64 %545, %543
  %547 = bitcast %union.vec128_t* %XMM0 to i8*
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 5
  store i64 %549, i64* %PC
  %550 = bitcast i8* %547 to <2 x float>*
  %551 = load <2 x float>, <2 x float>* %550, align 1
  %552 = extractelement <2 x float> %551, i32 0
  %553 = inttoptr i64 %546 to float*
  store float %552, float* %553
  br label %block_401b9d

block_401a46:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_401a3b
  %MEMORY.0 = phi %struct.Memory* [ %2734, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %2734, %block_401a3b ]
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 52
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 3
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  %559 = load i32, i32* %558
  %560 = zext i32 %559 to i64
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i32, i32* %EAX
  %562 = zext i32 %561 to i64
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 44
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 3
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = sub i32 %561, %568
  %570 = icmp ult i32 %561, %568
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = and i32 %569, 255
  %574 = call i32 @llvm.ctpop.i32(i32 %573) #16
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %577, i8* %578, align 1, !tbaa !2446
  %579 = xor i32 %568, %561
  %580 = xor i32 %579, %569
  %581 = lshr i32 %580, 4
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %583, i8* %584, align 1, !tbaa !2447
  %585 = icmp eq i32 %569, 0
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %586, i8* %587, align 1, !tbaa !2448
  %588 = lshr i32 %569, 31
  %589 = trunc i32 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %589, i8* %590, align 1, !tbaa !2449
  %591 = lshr i32 %561, 31
  %592 = lshr i32 %568, 31
  %593 = xor i32 %592, %591
  %594 = xor i32 %588, %591
  %595 = add nuw nsw i32 %594, %593
  %596 = icmp eq i32 %595, 2
  %597 = zext i1 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %597, i8* %598, align 1, !tbaa !2450
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 104
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 6
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 6
  store i64 %604, i64* %PC
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %606 = load i8, i8* %605, align 1, !tbaa !2448
  store i8 %606, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %608 = icmp ne i8 %606, 0
  %609 = select i1 %608, i64 %600, i64 %602
  store i64 %609, i64* %607, align 8, !tbaa !2428
  %610 = load i8, i8* %BRANCH_TAKEN
  %611 = icmp eq i8 %610, 1
  br i1 %611, label %block_401ab4, label %block_401a52

block_401a52:                                     ; preds = %block_401a46
  %612 = load i64, i64* %RBP
  %613 = sub i64 %612, 8
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 4
  store i64 %615, i64* %PC
  %616 = inttoptr i64 %613 to i64*
  %617 = load i64, i64* %616
  store i64 %617, i64* %RAX, align 8, !tbaa !2428
  %618 = load i64, i64* %RBP
  %619 = sub i64 %618, 12
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 3
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %619 to i32*
  %623 = load i32, i32* %622
  %624 = zext i32 %623 to i64
  store i64 %624, i64* %RCX, align 8, !tbaa !2428
  %625 = load i64, i64* %RCX
  %626 = load i64, i64* %RBP
  %627 = sub i64 %626, 44
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 4
  store i64 %629, i64* %PC
  %630 = inttoptr i64 %627 to i32*
  %631 = load i32, i32* %630
  %632 = shl i64 %625, 32
  %633 = ashr exact i64 %632, 32
  %634 = sext i32 %631 to i64
  %635 = mul nsw i64 %634, %633
  %636 = trunc i64 %635 to i32
  %637 = and i64 %635, 4294967295
  store i64 %637, i64* %RCX, align 8, !tbaa !2428
  %638 = shl i64 %635, 32
  %639 = ashr exact i64 %638, 32
  %640 = icmp ne i64 %639, %635
  %641 = zext i1 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %641, i8* %642, align 1, !tbaa !2432
  %643 = and i32 %636, 255
  %644 = call i32 @llvm.ctpop.i32(i32 %643) #16
  %645 = trunc i32 %644 to i8
  %646 = and i8 %645, 1
  %647 = xor i8 %646, 1
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %647, i8* %648, align 1, !tbaa !2446
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %649, align 1, !tbaa !2447
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %650, align 1, !tbaa !2448
  %651 = lshr i32 %636, 31
  %652 = trunc i32 %651 to i8
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %652, i8* %653, align 1, !tbaa !2449
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %641, i8* %654, align 1, !tbaa !2450
  %655 = load i64, i64* %RCX
  %656 = load i64, i64* %RBP
  %657 = sub i64 %656, 52
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 3
  store i64 %659, i64* %PC
  %660 = trunc i64 %655 to i32
  %661 = inttoptr i64 %657 to i32*
  %662 = load i32, i32* %661
  %663 = add i32 %662, %660
  %664 = zext i32 %663 to i64
  store i64 %664, i64* %RCX, align 8, !tbaa !2428
  %665 = icmp ult i32 %663, %660
  %666 = icmp ult i32 %663, %662
  %667 = or i1 %665, %666
  %668 = zext i1 %667 to i8
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %668, i8* %669, align 1, !tbaa !2432
  %670 = and i32 %663, 255
  %671 = call i32 @llvm.ctpop.i32(i32 %670) #16
  %672 = trunc i32 %671 to i8
  %673 = and i8 %672, 1
  %674 = xor i8 %673, 1
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %674, i8* %675, align 1, !tbaa !2446
  %676 = xor i32 %662, %660
  %677 = xor i32 %676, %663
  %678 = lshr i32 %677, 4
  %679 = trunc i32 %678 to i8
  %680 = and i8 %679, 1
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %680, i8* %681, align 1, !tbaa !2447
  %682 = icmp eq i32 %663, 0
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %683, i8* %684, align 1, !tbaa !2448
  %685 = lshr i32 %663, 31
  %686 = trunc i32 %685 to i8
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %686, i8* %687, align 1, !tbaa !2449
  %688 = lshr i32 %660, 31
  %689 = lshr i32 %662, 31
  %690 = xor i32 %685, %688
  %691 = xor i32 %685, %689
  %692 = add nuw nsw i32 %690, %691
  %693 = icmp eq i32 %692, 2
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %694, i8* %695, align 1, !tbaa !2450
  %696 = load i32, i32* %ECX
  %697 = zext i32 %696 to i64
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 3
  store i64 %699, i64* %PC
  %700 = shl i64 %697, 32
  %701 = ashr exact i64 %700, 32
  store i64 %701, i64* %RDX, align 8, !tbaa !2428
  %702 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %703 = load i64, i64* %RAX
  %704 = load i64, i64* %RDX
  %705 = mul i64 %704, 4
  %706 = add i64 %705, %703
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 5
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %706 to float*
  %710 = load float, float* %709
  %711 = bitcast i8* %702 to float*
  store float %710, float* %711, align 1, !tbaa !2453
  %712 = getelementptr inbounds i8, i8* %702, i64 4
  %713 = bitcast i8* %712 to float*
  store float 0.000000e+00, float* %713, align 1, !tbaa !2453
  %714 = getelementptr inbounds i8, i8* %702, i64 8
  %715 = bitcast i8* %714 to float*
  store float 0.000000e+00, float* %715, align 1, !tbaa !2453
  %716 = getelementptr inbounds i8, i8* %702, i64 12
  %717 = bitcast i8* %716 to float*
  store float 0.000000e+00, float* %717, align 1, !tbaa !2453
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 36
  %720 = bitcast %union.vec128_t* %XMM0 to i8*
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 5
  store i64 %722, i64* %PC
  %723 = bitcast i8* %720 to <2 x float>*
  %724 = load <2 x float>, <2 x float>* %723, align 1
  %725 = extractelement <2 x float> %724, i32 0
  %726 = inttoptr i64 %719 to float*
  store float %725, float* %726
  %727 = load i64, i64* %RBP
  %728 = sub i64 %727, 8
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 4
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i64*
  %732 = load i64, i64* %731
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 12
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 3
  store i64 %736, i64* %PC
  %737 = inttoptr i64 %734 to i32*
  %738 = load i32, i32* %737
  %739 = zext i32 %738 to i64
  store i64 %739, i64* %RCX, align 8, !tbaa !2428
  %740 = load i64, i64* %RCX
  %741 = load i64, i64* %RBP
  %742 = sub i64 %741, 44
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 4
  store i64 %744, i64* %PC
  %745 = inttoptr i64 %742 to i32*
  %746 = load i32, i32* %745
  %747 = shl i64 %740, 32
  %748 = ashr exact i64 %747, 32
  %749 = sext i32 %746 to i64
  %750 = mul nsw i64 %749, %748
  %751 = trunc i64 %750 to i32
  %752 = and i64 %750, 4294967295
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = shl i64 %750, 32
  %754 = ashr exact i64 %753, 32
  %755 = icmp ne i64 %754, %750
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2432
  %758 = and i32 %751, 255
  %759 = call i32 @llvm.ctpop.i32(i32 %758) #16
  %760 = trunc i32 %759 to i8
  %761 = and i8 %760, 1
  %762 = xor i8 %761, 1
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %762, i8* %763, align 1, !tbaa !2446
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %764, align 1, !tbaa !2447
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %765, align 1, !tbaa !2448
  %766 = lshr i32 %751, 31
  %767 = trunc i32 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %767, i8* %768, align 1, !tbaa !2449
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %756, i8* %769, align 1, !tbaa !2450
  %770 = load i64, i64* %RCX
  %771 = load i64, i64* %RBP
  %772 = sub i64 %771, 44
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 3
  store i64 %774, i64* %PC
  %775 = trunc i64 %770 to i32
  %776 = inttoptr i64 %772 to i32*
  %777 = load i32, i32* %776
  %778 = add i32 %777, %775
  %779 = zext i32 %778 to i64
  store i64 %779, i64* %RCX, align 8, !tbaa !2428
  %780 = icmp ult i32 %778, %775
  %781 = icmp ult i32 %778, %777
  %782 = or i1 %780, %781
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %783, i8* %784, align 1, !tbaa !2432
  %785 = and i32 %778, 255
  %786 = call i32 @llvm.ctpop.i32(i32 %785) #16
  %787 = trunc i32 %786 to i8
  %788 = and i8 %787, 1
  %789 = xor i8 %788, 1
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %789, i8* %790, align 1, !tbaa !2446
  %791 = xor i32 %777, %775
  %792 = xor i32 %791, %778
  %793 = lshr i32 %792, 4
  %794 = trunc i32 %793 to i8
  %795 = and i8 %794, 1
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %795, i8* %796, align 1, !tbaa !2447
  %797 = icmp eq i32 %778, 0
  %798 = zext i1 %797 to i8
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %798, i8* %799, align 1, !tbaa !2448
  %800 = lshr i32 %778, 31
  %801 = trunc i32 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %801, i8* %802, align 1, !tbaa !2449
  %803 = lshr i32 %775, 31
  %804 = lshr i32 %777, 31
  %805 = xor i32 %800, %803
  %806 = xor i32 %800, %804
  %807 = add nuw nsw i32 %805, %806
  %808 = icmp eq i32 %807, 2
  %809 = zext i1 %808 to i8
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %809, i8* %810, align 1, !tbaa !2450
  %811 = load i32, i32* %ECX
  %812 = zext i32 %811 to i64
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 3
  store i64 %814, i64* %PC
  %815 = shl i64 %812, 32
  %816 = ashr exact i64 %815, 32
  store i64 %816, i64* %RDX, align 8, !tbaa !2428
  %817 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %818 = load i64, i64* %RAX
  %819 = load i64, i64* %RDX
  %820 = mul i64 %819, 4
  %821 = add i64 %820, %818
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 5
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to float*
  %825 = load float, float* %824
  %826 = bitcast i8* %817 to float*
  store float %825, float* %826, align 1, !tbaa !2453
  %827 = getelementptr inbounds i8, i8* %817, i64 4
  %828 = bitcast i8* %827 to float*
  store float 0.000000e+00, float* %828, align 1, !tbaa !2453
  %829 = getelementptr inbounds i8, i8* %817, i64 8
  %830 = bitcast i8* %829 to float*
  store float 0.000000e+00, float* %830, align 1, !tbaa !2453
  %831 = getelementptr inbounds i8, i8* %817, i64 12
  %832 = bitcast i8* %831 to float*
  store float 0.000000e+00, float* %832, align 1, !tbaa !2453
  %833 = load i64, i64* %RBP
  %834 = sub i64 %833, 8
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 4
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %834 to i64*
  %838 = load i64, i64* %837
  store i64 %838, i64* %RAX, align 8, !tbaa !2428
  %839 = load i64, i64* %RBP
  %840 = sub i64 %839, 12
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 3
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i32*
  %844 = load i32, i32* %843
  %845 = zext i32 %844 to i64
  store i64 %845, i64* %RCX, align 8, !tbaa !2428
  %846 = load i64, i64* %RCX
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 44
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 4
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i32*
  %852 = load i32, i32* %851
  %853 = shl i64 %846, 32
  %854 = ashr exact i64 %853, 32
  %855 = sext i32 %852 to i64
  %856 = mul nsw i64 %855, %854
  %857 = trunc i64 %856 to i32
  %858 = and i64 %856, 4294967295
  store i64 %858, i64* %RCX, align 8, !tbaa !2428
  %859 = shl i64 %856, 32
  %860 = ashr exact i64 %859, 32
  %861 = icmp ne i64 %860, %856
  %862 = zext i1 %861 to i8
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %862, i8* %863, align 1, !tbaa !2432
  %864 = and i32 %857, 255
  %865 = call i32 @llvm.ctpop.i32(i32 %864) #16
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  %868 = xor i8 %867, 1
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %868, i8* %869, align 1, !tbaa !2446
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %870, align 1, !tbaa !2447
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %871, align 1, !tbaa !2448
  %872 = lshr i32 %857, 31
  %873 = trunc i32 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %873, i8* %874, align 1, !tbaa !2449
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %862, i8* %875, align 1, !tbaa !2450
  %876 = load i64, i64* %RCX
  %877 = load i64, i64* %RBP
  %878 = sub i64 %877, 52
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 3
  store i64 %880, i64* %PC
  %881 = trunc i64 %876 to i32
  %882 = inttoptr i64 %878 to i32*
  %883 = load i32, i32* %882
  %884 = add i32 %883, %881
  %885 = zext i32 %884 to i64
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %886 = icmp ult i32 %884, %881
  %887 = icmp ult i32 %884, %883
  %888 = or i1 %886, %887
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %889, i8* %890, align 1, !tbaa !2432
  %891 = and i32 %884, 255
  %892 = call i32 @llvm.ctpop.i32(i32 %891) #16
  %893 = trunc i32 %892 to i8
  %894 = and i8 %893, 1
  %895 = xor i8 %894, 1
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %895, i8* %896, align 1, !tbaa !2446
  %897 = xor i32 %883, %881
  %898 = xor i32 %897, %884
  %899 = lshr i32 %898, 4
  %900 = trunc i32 %899 to i8
  %901 = and i8 %900, 1
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %901, i8* %902, align 1, !tbaa !2447
  %903 = icmp eq i32 %884, 0
  %904 = zext i1 %903 to i8
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %904, i8* %905, align 1, !tbaa !2448
  %906 = lshr i32 %884, 31
  %907 = trunc i32 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %907, i8* %908, align 1, !tbaa !2449
  %909 = lshr i32 %881, 31
  %910 = lshr i32 %883, 31
  %911 = xor i32 %906, %909
  %912 = xor i32 %906, %910
  %913 = add nuw nsw i32 %911, %912
  %914 = icmp eq i32 %913, 2
  %915 = zext i1 %914 to i8
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %915, i8* %916, align 1, !tbaa !2450
  %917 = load i32, i32* %ECX
  %918 = zext i32 %917 to i64
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 3
  store i64 %920, i64* %PC
  %921 = shl i64 %918, 32
  %922 = ashr exact i64 %921, 32
  store i64 %922, i64* %RDX, align 8, !tbaa !2428
  %923 = load i64, i64* %RAX
  %924 = load i64, i64* %RDX
  %925 = mul i64 %924, 4
  %926 = add i64 %925, %923
  %927 = bitcast %union.vec128_t* %XMM0 to i8*
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 5
  store i64 %929, i64* %PC
  %930 = bitcast i8* %927 to <2 x float>*
  %931 = load <2 x float>, <2 x float>* %930, align 1
  %932 = extractelement <2 x float> %931, i32 0
  %933 = inttoptr i64 %926 to float*
  store float %932, float* %933
  %934 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %935 = load i64, i64* %RBP
  %936 = sub i64 %935, 36
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 5
  store i64 %938, i64* %PC
  %939 = inttoptr i64 %936 to float*
  %940 = load float, float* %939
  %941 = bitcast i8* %934 to float*
  store float %940, float* %941, align 1, !tbaa !2453
  %942 = getelementptr inbounds i8, i8* %934, i64 4
  %943 = bitcast i8* %942 to float*
  store float 0.000000e+00, float* %943, align 1, !tbaa !2453
  %944 = getelementptr inbounds i8, i8* %934, i64 8
  %945 = bitcast i8* %944 to float*
  store float 0.000000e+00, float* %945, align 1, !tbaa !2453
  %946 = getelementptr inbounds i8, i8* %934, i64 12
  %947 = bitcast i8* %946 to float*
  store float 0.000000e+00, float* %947, align 1, !tbaa !2453
  %948 = load i64, i64* %RBP
  %949 = sub i64 %948, 8
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 4
  store i64 %951, i64* %PC
  %952 = inttoptr i64 %949 to i64*
  %953 = load i64, i64* %952
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = load i64, i64* %RBP
  %955 = sub i64 %954, 12
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 3
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i32*
  %959 = load i32, i32* %958
  %960 = zext i32 %959 to i64
  store i64 %960, i64* %RCX, align 8, !tbaa !2428
  %961 = load i64, i64* %RCX
  %962 = load i64, i64* %RBP
  %963 = sub i64 %962, 44
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 4
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to i32*
  %967 = load i32, i32* %966
  %968 = shl i64 %961, 32
  %969 = ashr exact i64 %968, 32
  %970 = sext i32 %967 to i64
  %971 = mul nsw i64 %970, %969
  %972 = trunc i64 %971 to i32
  %973 = and i64 %971, 4294967295
  store i64 %973, i64* %RCX, align 8, !tbaa !2428
  %974 = shl i64 %971, 32
  %975 = ashr exact i64 %974, 32
  %976 = icmp ne i64 %975, %971
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %977, i8* %978, align 1, !tbaa !2432
  %979 = and i32 %972, 255
  %980 = call i32 @llvm.ctpop.i32(i32 %979) #16
  %981 = trunc i32 %980 to i8
  %982 = and i8 %981, 1
  %983 = xor i8 %982, 1
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %983, i8* %984, align 1, !tbaa !2446
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %985, align 1, !tbaa !2447
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %986, align 1, !tbaa !2448
  %987 = lshr i32 %972, 31
  %988 = trunc i32 %987 to i8
  %989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %988, i8* %989, align 1, !tbaa !2449
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %990, align 1, !tbaa !2450
  %991 = load i64, i64* %RCX
  %992 = load i64, i64* %RBP
  %993 = sub i64 %992, 44
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 3
  store i64 %995, i64* %PC
  %996 = trunc i64 %991 to i32
  %997 = inttoptr i64 %993 to i32*
  %998 = load i32, i32* %997
  %999 = add i32 %998, %996
  %1000 = zext i32 %999 to i64
  store i64 %1000, i64* %RCX, align 8, !tbaa !2428
  %1001 = icmp ult i32 %999, %996
  %1002 = icmp ult i32 %999, %998
  %1003 = or i1 %1001, %1002
  %1004 = zext i1 %1003 to i8
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1004, i8* %1005, align 1, !tbaa !2432
  %1006 = and i32 %999, 255
  %1007 = call i32 @llvm.ctpop.i32(i32 %1006) #16
  %1008 = trunc i32 %1007 to i8
  %1009 = and i8 %1008, 1
  %1010 = xor i8 %1009, 1
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1010, i8* %1011, align 1, !tbaa !2446
  %1012 = xor i32 %998, %996
  %1013 = xor i32 %1012, %999
  %1014 = lshr i32 %1013, 4
  %1015 = trunc i32 %1014 to i8
  %1016 = and i8 %1015, 1
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1016, i8* %1017, align 1, !tbaa !2447
  %1018 = icmp eq i32 %999, 0
  %1019 = zext i1 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1019, i8* %1020, align 1, !tbaa !2448
  %1021 = lshr i32 %999, 31
  %1022 = trunc i32 %1021 to i8
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1022, i8* %1023, align 1, !tbaa !2449
  %1024 = lshr i32 %996, 31
  %1025 = lshr i32 %998, 31
  %1026 = xor i32 %1021, %1024
  %1027 = xor i32 %1021, %1025
  %1028 = add nuw nsw i32 %1026, %1027
  %1029 = icmp eq i32 %1028, 2
  %1030 = zext i1 %1029 to i8
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1030, i8* %1031, align 1, !tbaa !2450
  %1032 = load i32, i32* %ECX
  %1033 = zext i32 %1032 to i64
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 3
  store i64 %1035, i64* %PC
  %1036 = shl i64 %1033, 32
  %1037 = ashr exact i64 %1036, 32
  store i64 %1037, i64* %RDX, align 8, !tbaa !2428
  %1038 = load i64, i64* %RAX
  %1039 = load i64, i64* %RDX
  %1040 = mul i64 %1039, 4
  %1041 = add i64 %1040, %1038
  %1042 = bitcast %union.vec128_t* %XMM0 to i8*
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 5
  store i64 %1044, i64* %PC
  %1045 = bitcast i8* %1042 to <2 x float>*
  %1046 = load <2 x float>, <2 x float>* %1045, align 1
  %1047 = extractelement <2 x float> %1046, i32 0
  %1048 = inttoptr i64 %1041 to float*
  store float %1047, float* %1048
  br label %block_401ab4

block_401a3b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 11
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 6
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 6
  store i64 %1054, i64* %PC
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1056 = load i8, i8* %1055, align 1, !tbaa !2446
  store i8 %1056, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1058 = icmp ne i8 %1056, 0
  %1059 = select i1 %1058, i64 %1050, i64 %1052
  store i64 %1059, i64* %1057, align 8, !tbaa !2428
  %1060 = load i8, i8* %BRANCH_TAKEN
  %1061 = icmp eq i8 %1060, 1
  br i1 %1061, label %block_401a46, label %block_401a41

block_401a41:                                     ; preds = %block_401a3b
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 462
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 5
  store i64 %1065, i64* %PC
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1063, i64* %1066, align 8, !tbaa !2428
  %1067 = load i64, i64* %RBP
  %1068 = sub i64 %1067, 44
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 3
  store i64 %1070, i64* %PC
  %1071 = inttoptr i64 %1068 to i32*
  %1072 = load i32, i32* %1071
  %1073 = zext i32 %1072 to i64
  store i64 %1073, i64* %RAX, align 8, !tbaa !2428
  %1074 = load i64, i64* %RBP
  %1075 = sub i64 %1074, 32
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 4
  store i64 %1077, i64* %PC
  %1078 = inttoptr i64 %1075 to i64*
  %1079 = load i64, i64* %1078
  store i64 %1079, i64* %RCX, align 8, !tbaa !2428
  %1080 = load i64, i64* %RCX
  %1081 = load i32, i32* %EAX
  %1082 = zext i32 %1081 to i64
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 2
  store i64 %1084, i64* %PC
  %1085 = inttoptr i64 %1080 to i32*
  store i32 %1081, i32* %1085
  br label %block_401c18

block_4019b7:                                     ; preds = %block_401980
  %1086 = load i64, i64* %RBP
  %1087 = sub i64 %1086, 44
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 7
  store i64 %1089, i64* %PC
  %1090 = inttoptr i64 %1087 to i32*
  store i32 0, i32* %1090
  br label %block_4019be

block_401ab4:                                     ; preds = %block_401a52, %block_401a46
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_401a46 ], [ %MEMORY.0, %block_401a52 ]
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 5
  store i64 %1092, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %1093 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 8
  store i64 %1095, i64* %PC
  %1096 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 72) to double*)
  %1097 = bitcast i8* %1093 to double*
  store double %1096, double* %1097, align 1, !tbaa !2455
  %1098 = getelementptr inbounds i8, i8* %1093, i64 8
  %1099 = bitcast i8* %1098 to double*
  store double 0.000000e+00, double* %1099, align 1, !tbaa !2455
  %1100 = load i64, i64* %RBP
  %1101 = sub i64 %1100, 8
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 4
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1101 to i64*
  %1105 = load i64, i64* %1104
  store i64 %1105, i64* %RAX, align 8, !tbaa !2428
  %1106 = load i64, i64* %RBP
  %1107 = sub i64 %1106, 12
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 3
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i32*
  %1111 = load i32, i32* %1110
  %1112 = zext i32 %1111 to i64
  store i64 %1112, i64* %RCX, align 8, !tbaa !2428
  %1113 = load i64, i64* %RCX
  %1114 = load i64, i64* %RBP
  %1115 = sub i64 %1114, 44
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 4
  store i64 %1117, i64* %PC
  %1118 = inttoptr i64 %1115 to i32*
  %1119 = load i32, i32* %1118
  %1120 = shl i64 %1113, 32
  %1121 = ashr exact i64 %1120, 32
  %1122 = sext i32 %1119 to i64
  %1123 = mul nsw i64 %1122, %1121
  %1124 = trunc i64 %1123 to i32
  %1125 = and i64 %1123, 4294967295
  store i64 %1125, i64* %RCX, align 8, !tbaa !2428
  %1126 = shl i64 %1123, 32
  %1127 = ashr exact i64 %1126, 32
  %1128 = icmp ne i64 %1127, %1123
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1129, i8* %1130, align 1, !tbaa !2432
  %1131 = and i32 %1124, 255
  %1132 = call i32 @llvm.ctpop.i32(i32 %1131) #16
  %1133 = trunc i32 %1132 to i8
  %1134 = and i8 %1133, 1
  %1135 = xor i8 %1134, 1
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1135, i8* %1136, align 1, !tbaa !2446
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1137, align 1, !tbaa !2447
  %1138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1138, align 1, !tbaa !2448
  %1139 = lshr i32 %1124, 31
  %1140 = trunc i32 %1139 to i8
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1140, i8* %1141, align 1, !tbaa !2449
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1129, i8* %1142, align 1, !tbaa !2450
  %1143 = load i64, i64* %RCX
  %1144 = load i64, i64* %RBP
  %1145 = sub i64 %1144, 44
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 3
  store i64 %1147, i64* %PC
  %1148 = trunc i64 %1143 to i32
  %1149 = inttoptr i64 %1145 to i32*
  %1150 = load i32, i32* %1149
  %1151 = add i32 %1150, %1148
  %1152 = zext i32 %1151 to i64
  store i64 %1152, i64* %RCX, align 8, !tbaa !2428
  %1153 = icmp ult i32 %1151, %1148
  %1154 = icmp ult i32 %1151, %1150
  %1155 = or i1 %1153, %1154
  %1156 = zext i1 %1155 to i8
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1156, i8* %1157, align 1, !tbaa !2432
  %1158 = and i32 %1151, 255
  %1159 = call i32 @llvm.ctpop.i32(i32 %1158) #16
  %1160 = trunc i32 %1159 to i8
  %1161 = and i8 %1160, 1
  %1162 = xor i8 %1161, 1
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1162, i8* %1163, align 1, !tbaa !2446
  %1164 = xor i32 %1150, %1148
  %1165 = xor i32 %1164, %1151
  %1166 = lshr i32 %1165, 4
  %1167 = trunc i32 %1166 to i8
  %1168 = and i8 %1167, 1
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1168, i8* %1169, align 1, !tbaa !2447
  %1170 = icmp eq i32 %1151, 0
  %1171 = zext i1 %1170 to i8
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1171, i8* %1172, align 1, !tbaa !2448
  %1173 = lshr i32 %1151, 31
  %1174 = trunc i32 %1173 to i8
  %1175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1174, i8* %1175, align 1, !tbaa !2449
  %1176 = lshr i32 %1148, 31
  %1177 = lshr i32 %1150, 31
  %1178 = xor i32 %1173, %1176
  %1179 = xor i32 %1173, %1177
  %1180 = add nuw nsw i32 %1178, %1179
  %1181 = icmp eq i32 %1180, 2
  %1182 = zext i1 %1181 to i8
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1182, i8* %1183, align 1, !tbaa !2450
  %1184 = load i32, i32* %ECX
  %1185 = zext i32 %1184 to i64
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 3
  store i64 %1187, i64* %PC
  %1188 = shl i64 %1185, 32
  %1189 = ashr exact i64 %1188, 32
  store i64 %1189, i64* %RSI, align 8, !tbaa !2428
  %1190 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1191 = load i64, i64* %RAX
  %1192 = load i64, i64* %RSI
  %1193 = mul i64 %1192, 4
  %1194 = add i64 %1193, %1191
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 5
  store i64 %1196, i64* %PC
  %1197 = inttoptr i64 %1194 to float*
  %1198 = load float, float* %1197
  %1199 = bitcast i8* %1190 to float*
  store float %1198, float* %1199, align 1, !tbaa !2453
  %1200 = getelementptr inbounds i8, i8* %1190, i64 4
  %1201 = bitcast i8* %1200 to float*
  store float 0.000000e+00, float* %1201, align 1, !tbaa !2453
  %1202 = getelementptr inbounds i8, i8* %1190, i64 8
  %1203 = bitcast i8* %1202 to float*
  store float 0.000000e+00, float* %1203, align 1, !tbaa !2453
  %1204 = getelementptr inbounds i8, i8* %1190, i64 12
  %1205 = bitcast i8* %1204 to float*
  store float 0.000000e+00, float* %1205, align 1, !tbaa !2453
  %1206 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1207 = bitcast %union.vec128_t* %XMM1 to i8*
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 4
  store i64 %1209, i64* %PC
  %1210 = bitcast i8* %1207 to <2 x float>*
  %1211 = load <2 x float>, <2 x float>* %1210, align 1
  %1212 = extractelement <2 x float> %1211, i32 0
  %1213 = fpext float %1212 to double
  %1214 = bitcast i8* %1206 to double*
  store double %1213, double* %1214, align 1, !tbaa !2455
  %1215 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1216 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1217 = bitcast %union.vec128_t* %XMM1 to i8*
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 4
  store i64 %1219, i64* %PC
  %1220 = bitcast i8* %1216 to double*
  %1221 = load double, double* %1220, align 1
  %1222 = getelementptr inbounds i8, i8* %1216, i64 8
  %1223 = bitcast i8* %1222 to i64*
  %1224 = load i64, i64* %1223, align 1
  %1225 = bitcast i8* %1217 to double*
  %1226 = load double, double* %1225, align 1
  %1227 = fdiv double %1221, %1226
  %1228 = bitcast i8* %1215 to double*
  store double %1227, double* %1228, align 1, !tbaa !2455
  %1229 = getelementptr inbounds i8, i8* %1215, i64 8
  %1230 = bitcast i8* %1229 to i64*
  store i64 %1224, i64* %1230, align 1, !tbaa !2455
  %1231 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1232 = bitcast %union.vec128_t* %XMM0 to i8*
  %1233 = load i64, i64* %PC
  %1234 = add i64 %1233, 4
  store i64 %1234, i64* %PC
  %1235 = bitcast i8* %1231 to <2 x i32>*
  %1236 = load <2 x i32>, <2 x i32>* %1235, align 1
  %1237 = getelementptr inbounds i8, i8* %1231, i64 8
  %1238 = bitcast i8* %1237 to <2 x i32>*
  %1239 = load <2 x i32>, <2 x i32>* %1238, align 1
  %1240 = bitcast i8* %1232 to double*
  %1241 = load double, double* %1240, align 1
  %1242 = fptrunc double %1241 to float
  %1243 = bitcast i8* %1231 to float*
  store float %1242, float* %1243, align 1, !tbaa !2453
  %1244 = extractelement <2 x i32> %1236, i32 1
  %1245 = getelementptr inbounds i8, i8* %1231, i64 4
  %1246 = bitcast i8* %1245 to i32*
  store i32 %1244, i32* %1246, align 1, !tbaa !2453
  %1247 = extractelement <2 x i32> %1239, i32 0
  %1248 = bitcast i8* %1237 to i32*
  store i32 %1247, i32* %1248, align 1, !tbaa !2453
  %1249 = extractelement <2 x i32> %1239, i32 1
  %1250 = getelementptr inbounds i8, i8* %1231, i64 12
  %1251 = bitcast i8* %1250 to i32*
  store i32 %1249, i32* %1251, align 1, !tbaa !2453
  %1252 = load i64, i64* %RBP
  %1253 = sub i64 %1252, 36
  %1254 = bitcast %union.vec128_t* %XMM0 to i8*
  %1255 = load i64, i64* %PC
  %1256 = add i64 %1255, 5
  store i64 %1256, i64* %PC
  %1257 = bitcast i8* %1254 to <2 x float>*
  %1258 = load <2 x float>, <2 x float>* %1257, align 1
  %1259 = extractelement <2 x float> %1258, i32 0
  %1260 = inttoptr i64 %1253 to float*
  store float %1259, float* %1260
  %1261 = load i64, i64* %RBP
  %1262 = sub i64 %1261, 16
  %1263 = load i64, i64* %PC
  %1264 = add i64 %1263, 3
  store i64 %1264, i64* %PC
  %1265 = inttoptr i64 %1262 to i32*
  %1266 = load i32, i32* %1265
  %1267 = zext i32 %1266 to i64
  store i64 %1267, i64* %RCX, align 8, !tbaa !2428
  %1268 = load i64, i64* %RBP
  %1269 = sub i64 %1268, 44
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 3
  store i64 %1271, i64* %PC
  %1272 = inttoptr i64 %1269 to i32*
  %1273 = load i32, i32* %1272
  %1274 = zext i32 %1273 to i64
  store i64 %1274, i64* %RDI, align 8, !tbaa !2428
  %1275 = load i64, i64* %RDI
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 3
  store i64 %1277, i64* %PC
  %1278 = trunc i64 %1275 to i32
  %1279 = add i32 1, %1278
  %1280 = zext i32 %1279 to i64
  store i64 %1280, i64* %RDI, align 8, !tbaa !2428
  %1281 = icmp ult i32 %1279, %1278
  %1282 = icmp ult i32 %1279, 1
  %1283 = or i1 %1281, %1282
  %1284 = zext i1 %1283 to i8
  %1285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1284, i8* %1285, align 1, !tbaa !2432
  %1286 = and i32 %1279, 255
  %1287 = call i32 @llvm.ctpop.i32(i32 %1286) #16
  %1288 = trunc i32 %1287 to i8
  %1289 = and i8 %1288, 1
  %1290 = xor i8 %1289, 1
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1290, i8* %1291, align 1, !tbaa !2446
  %1292 = xor i64 1, %1275
  %1293 = trunc i64 %1292 to i32
  %1294 = xor i32 %1293, %1279
  %1295 = lshr i32 %1294, 4
  %1296 = trunc i32 %1295 to i8
  %1297 = and i8 %1296, 1
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1297, i8* %1298, align 1, !tbaa !2447
  %1299 = icmp eq i32 %1279, 0
  %1300 = zext i1 %1299 to i8
  %1301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1300, i8* %1301, align 1, !tbaa !2448
  %1302 = lshr i32 %1279, 31
  %1303 = trunc i32 %1302 to i8
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1303, i8* %1304, align 1, !tbaa !2449
  %1305 = lshr i32 %1278, 31
  %1306 = xor i32 %1302, %1305
  %1307 = add nuw nsw i32 %1306, %1302
  %1308 = icmp eq i32 %1307, 2
  %1309 = zext i1 %1308 to i8
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1309, i8* %1310, align 1, !tbaa !2450
  %1311 = load i64, i64* %RCX
  %1312 = load i32, i32* %EDI
  %1313 = zext i32 %1312 to i64
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 2
  store i64 %1315, i64* %PC
  %1316 = trunc i64 %1311 to i32
  %1317 = sub i32 %1316, %1312
  %1318 = zext i32 %1317 to i64
  store i64 %1318, i64* %RCX, align 8, !tbaa !2428
  %1319 = icmp ult i32 %1316, %1312
  %1320 = zext i1 %1319 to i8
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1320, i8* %1321, align 1, !tbaa !2432
  %1322 = and i32 %1317, 255
  %1323 = call i32 @llvm.ctpop.i32(i32 %1322) #16
  %1324 = trunc i32 %1323 to i8
  %1325 = and i8 %1324, 1
  %1326 = xor i8 %1325, 1
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1326, i8* %1327, align 1, !tbaa !2446
  %1328 = xor i64 %1313, %1311
  %1329 = trunc i64 %1328 to i32
  %1330 = xor i32 %1329, %1317
  %1331 = lshr i32 %1330, 4
  %1332 = trunc i32 %1331 to i8
  %1333 = and i8 %1332, 1
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1333, i8* %1334, align 1, !tbaa !2447
  %1335 = icmp eq i32 %1317, 0
  %1336 = zext i1 %1335 to i8
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1336, i8* %1337, align 1, !tbaa !2448
  %1338 = lshr i32 %1317, 31
  %1339 = trunc i32 %1338 to i8
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1339, i8* %1340, align 1, !tbaa !2449
  %1341 = lshr i32 %1316, 31
  %1342 = lshr i32 %1312, 31
  %1343 = xor i32 %1342, %1341
  %1344 = xor i32 %1338, %1341
  %1345 = add nuw nsw i32 %1344, %1343
  %1346 = icmp eq i32 %1345, 2
  %1347 = zext i1 %1346 to i8
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1347, i8* %1348, align 1, !tbaa !2450
  %1349 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1350 = load i64, i64* %RBP
  %1351 = sub i64 %1350, 36
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 5
  store i64 %1353, i64* %PC
  %1354 = inttoptr i64 %1351 to float*
  %1355 = load float, float* %1354
  %1356 = bitcast i8* %1349 to float*
  store float %1355, float* %1356, align 1, !tbaa !2453
  %1357 = getelementptr inbounds i8, i8* %1349, i64 4
  %1358 = bitcast i8* %1357 to float*
  store float 0.000000e+00, float* %1358, align 1, !tbaa !2453
  %1359 = getelementptr inbounds i8, i8* %1349, i64 8
  %1360 = bitcast i8* %1359 to float*
  store float 0.000000e+00, float* %1360, align 1, !tbaa !2453
  %1361 = getelementptr inbounds i8, i8* %1349, i64 12
  %1362 = bitcast i8* %1361 to float*
  store float 0.000000e+00, float* %1362, align 1, !tbaa !2453
  %1363 = load i64, i64* %RBP
  %1364 = sub i64 %1363, 8
  %1365 = load i64, i64* %PC
  %1366 = add i64 %1365, 4
  store i64 %1366, i64* %PC
  %1367 = inttoptr i64 %1364 to i64*
  %1368 = load i64, i64* %1367
  store i64 %1368, i64* %RAX, align 8, !tbaa !2428
  %1369 = load i64, i64* %RBP
  %1370 = sub i64 %1369, 12
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 3
  store i64 %1372, i64* %PC
  %1373 = inttoptr i64 %1370 to i32*
  %1374 = load i32, i32* %1373
  %1375 = zext i32 %1374 to i64
  store i64 %1375, i64* %RDI, align 8, !tbaa !2428
  %1376 = load i64, i64* %RDI
  %1377 = load i64, i64* %RBP
  %1378 = sub i64 %1377, 44
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 4
  store i64 %1380, i64* %PC
  %1381 = inttoptr i64 %1378 to i32*
  %1382 = load i32, i32* %1381
  %1383 = shl i64 %1376, 32
  %1384 = ashr exact i64 %1383, 32
  %1385 = sext i32 %1382 to i64
  %1386 = mul nsw i64 %1385, %1384
  %1387 = trunc i64 %1386 to i32
  %1388 = and i64 %1386, 4294967295
  store i64 %1388, i64* %RDI, align 8, !tbaa !2428
  %1389 = shl i64 %1386, 32
  %1390 = ashr exact i64 %1389, 32
  %1391 = icmp ne i64 %1390, %1386
  %1392 = zext i1 %1391 to i8
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1392, i8* %1393, align 1, !tbaa !2432
  %1394 = and i32 %1387, 255
  %1395 = call i32 @llvm.ctpop.i32(i32 %1394) #16
  %1396 = trunc i32 %1395 to i8
  %1397 = and i8 %1396, 1
  %1398 = xor i8 %1397, 1
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1398, i8* %1399, align 1, !tbaa !2446
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1400, align 1, !tbaa !2447
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1401, align 1, !tbaa !2448
  %1402 = lshr i32 %1387, 31
  %1403 = trunc i32 %1402 to i8
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1403, i8* %1404, align 1, !tbaa !2449
  %1405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1392, i8* %1405, align 1, !tbaa !2450
  %1406 = load i64, i64* %RDI
  %1407 = load i64, i64* %RBP
  %1408 = sub i64 %1407, 44
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 3
  store i64 %1410, i64* %PC
  %1411 = trunc i64 %1406 to i32
  %1412 = inttoptr i64 %1408 to i32*
  %1413 = load i32, i32* %1412
  %1414 = add i32 %1413, %1411
  %1415 = zext i32 %1414 to i64
  store i64 %1415, i64* %RDI, align 8, !tbaa !2428
  %1416 = icmp ult i32 %1414, %1411
  %1417 = icmp ult i32 %1414, %1413
  %1418 = or i1 %1416, %1417
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1419, i8* %1420, align 1, !tbaa !2432
  %1421 = and i32 %1414, 255
  %1422 = call i32 @llvm.ctpop.i32(i32 %1421) #16
  %1423 = trunc i32 %1422 to i8
  %1424 = and i8 %1423, 1
  %1425 = xor i8 %1424, 1
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1425, i8* %1426, align 1, !tbaa !2446
  %1427 = xor i32 %1413, %1411
  %1428 = xor i32 %1427, %1414
  %1429 = lshr i32 %1428, 4
  %1430 = trunc i32 %1429 to i8
  %1431 = and i8 %1430, 1
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1431, i8* %1432, align 1, !tbaa !2447
  %1433 = icmp eq i32 %1414, 0
  %1434 = zext i1 %1433 to i8
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1434, i8* %1435, align 1, !tbaa !2448
  %1436 = lshr i32 %1414, 31
  %1437 = trunc i32 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1437, i8* %1438, align 1, !tbaa !2449
  %1439 = lshr i32 %1411, 31
  %1440 = lshr i32 %1413, 31
  %1441 = xor i32 %1436, %1439
  %1442 = xor i32 %1436, %1440
  %1443 = add nuw nsw i32 %1441, %1442
  %1444 = icmp eq i32 %1443, 2
  %1445 = zext i1 %1444 to i8
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1445, i8* %1446, align 1, !tbaa !2450
  %1447 = load i64, i64* %RDI
  %1448 = load i64, i64* %PC
  %1449 = add i64 %1448, 3
  store i64 %1449, i64* %PC
  %1450 = trunc i64 %1447 to i32
  %1451 = add i32 1, %1450
  %1452 = zext i32 %1451 to i64
  store i64 %1452, i64* %RDI, align 8, !tbaa !2428
  %1453 = icmp ult i32 %1451, %1450
  %1454 = icmp ult i32 %1451, 1
  %1455 = or i1 %1453, %1454
  %1456 = zext i1 %1455 to i8
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1456, i8* %1457, align 1, !tbaa !2432
  %1458 = and i32 %1451, 255
  %1459 = call i32 @llvm.ctpop.i32(i32 %1458) #16
  %1460 = trunc i32 %1459 to i8
  %1461 = and i8 %1460, 1
  %1462 = xor i8 %1461, 1
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1462, i8* %1463, align 1, !tbaa !2446
  %1464 = xor i64 1, %1447
  %1465 = trunc i64 %1464 to i32
  %1466 = xor i32 %1465, %1451
  %1467 = lshr i32 %1466, 4
  %1468 = trunc i32 %1467 to i8
  %1469 = and i8 %1468, 1
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1469, i8* %1470, align 1, !tbaa !2447
  %1471 = icmp eq i32 %1451, 0
  %1472 = zext i1 %1471 to i8
  %1473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1472, i8* %1473, align 1, !tbaa !2448
  %1474 = lshr i32 %1451, 31
  %1475 = trunc i32 %1474 to i8
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1475, i8* %1476, align 1, !tbaa !2449
  %1477 = lshr i32 %1450, 31
  %1478 = xor i32 %1474, %1477
  %1479 = add nuw nsw i32 %1478, %1474
  %1480 = icmp eq i32 %1479, 2
  %1481 = zext i1 %1480 to i8
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1481, i8* %1482, align 1, !tbaa !2450
  %1483 = load i32, i32* %EDI
  %1484 = zext i32 %1483 to i64
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 3
  store i64 %1486, i64* %PC
  %1487 = shl i64 %1484, 32
  %1488 = ashr exact i64 %1487, 32
  store i64 %1488, i64* %RSI, align 8, !tbaa !2428
  %1489 = load i64, i64* %RSI
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 4
  store i64 %1491, i64* %PC
  %1492 = shl i64 %1489, 1
  %1493 = icmp slt i64 %1492, 0
  %1494 = shl i64 %1492, 1
  store i64 %1494, i64* %RSI, align 8, !tbaa !2428
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1496 = zext i1 %1493 to i8
  store i8 %1496, i8* %1495, align 1, !tbaa !2451
  %1497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1498 = trunc i64 %1494 to i32
  %1499 = and i32 %1498, 254
  %1500 = call i32 @llvm.ctpop.i32(i32 %1499) #16
  %1501 = trunc i32 %1500 to i8
  %1502 = and i8 %1501, 1
  %1503 = xor i8 %1502, 1
  store i8 %1503, i8* %1497, align 1, !tbaa !2451
  %1504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1504, align 1, !tbaa !2451
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1506 = icmp eq i64 %1494, 0
  %1507 = zext i1 %1506 to i8
  store i8 %1507, i8* %1505, align 1, !tbaa !2451
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1509 = lshr i64 %1494, 63
  %1510 = trunc i64 %1509 to i8
  store i8 %1510, i8* %1508, align 1, !tbaa !2451
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1511, align 1, !tbaa !2451
  %1512 = load i64, i64* %RAX
  %1513 = load i64, i64* %RSI
  %1514 = load i64, i64* %PC
  %1515 = add i64 %1514, 3
  store i64 %1515, i64* %PC
  %1516 = add i64 %1513, %1512
  store i64 %1516, i64* %RAX, align 8, !tbaa !2428
  %1517 = icmp ult i64 %1516, %1512
  %1518 = icmp ult i64 %1516, %1513
  %1519 = or i1 %1517, %1518
  %1520 = zext i1 %1519 to i8
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1520, i8* %1521, align 1, !tbaa !2432
  %1522 = trunc i64 %1516 to i32
  %1523 = and i32 %1522, 255
  %1524 = call i32 @llvm.ctpop.i32(i32 %1523) #16
  %1525 = trunc i32 %1524 to i8
  %1526 = and i8 %1525, 1
  %1527 = xor i8 %1526, 1
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1527, i8* %1528, align 1, !tbaa !2446
  %1529 = xor i64 %1513, %1512
  %1530 = xor i64 %1529, %1516
  %1531 = lshr i64 %1530, 4
  %1532 = trunc i64 %1531 to i8
  %1533 = and i8 %1532, 1
  %1534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1533, i8* %1534, align 1, !tbaa !2447
  %1535 = icmp eq i64 %1516, 0
  %1536 = zext i1 %1535 to i8
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1536, i8* %1537, align 1, !tbaa !2448
  %1538 = lshr i64 %1516, 63
  %1539 = trunc i64 %1538 to i8
  %1540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1539, i8* %1540, align 1, !tbaa !2449
  %1541 = lshr i64 %1512, 63
  %1542 = lshr i64 %1513, 63
  %1543 = xor i64 %1538, %1541
  %1544 = xor i64 %1538, %1542
  %1545 = add nuw nsw i64 %1543, %1544
  %1546 = icmp eq i64 %1545, 2
  %1547 = zext i1 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1547, i8* %1548, align 1, !tbaa !2450
  %1549 = load i32, i32* %ECX
  %1550 = zext i32 %1549 to i64
  %1551 = load i64, i64* %PC
  %1552 = add i64 %1551, 2
  store i64 %1552, i64* %PC
  %1553 = and i64 %1550, 4294967295
  store i64 %1553, i64* %RDI, align 8, !tbaa !2428
  %1554 = load i64, i64* %RAX
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 3
  store i64 %1556, i64* %PC
  store i64 %1554, i64* %RSI, align 8, !tbaa !2428
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 4696
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 5
  %1561 = load i64, i64* %PC
  %1562 = add i64 %1561, 5
  store i64 %1562, i64* %PC
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1564 = load i64, i64* %1563, align 8, !tbaa !2428
  %1565 = add i64 %1564, -8
  %1566 = inttoptr i64 %1565 to i64*
  store i64 %1560, i64* %1566
  store i64 %1565, i64* %1563, align 8, !tbaa !2428
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1558, i64* %1567, align 8, !tbaa !2428
  %1568 = load i64, i64* %PC
  %1569 = call %struct.Memory* @sub_402d70_dscal_renamed_(%struct.State* %0, i64 %1568, %struct.Memory* %MEMORY.1)
  %1570 = load i64, i64* %RBP
  %1571 = sub i64 %1570, 48
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 3
  store i64 %1573, i64* %PC
  %1574 = inttoptr i64 %1571 to i32*
  %1575 = load i32, i32* %1574
  %1576 = zext i32 %1575 to i64
  store i64 %1576, i64* %RCX, align 8, !tbaa !2428
  %1577 = load i64, i64* %RBP
  %1578 = sub i64 %1577, 40
  %1579 = load i32, i32* %ECX
  %1580 = zext i32 %1579 to i64
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 3
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1578 to i32*
  store i32 %1579, i32* %1583
  br label %block_401b23

block_401c30:                                     ; preds = %block_401c2b, %block_401980
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_401980 ], [ %MEMORY.3, %block_401c2b ]
  %1584 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1585 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1586 = bitcast %union.vec128_t* %XMM0 to i8*
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 3
  store i64 %1588, i64* %PC
  %1589 = bitcast i8* %1585 to i64*
  %1590 = load i64, i64* %1589, align 1
  %1591 = getelementptr inbounds i8, i8* %1585, i64 8
  %1592 = bitcast i8* %1591 to i64*
  %1593 = load i64, i64* %1592, align 1
  %1594 = bitcast i8* %1586 to i64*
  %1595 = load i64, i64* %1594, align 1
  %1596 = getelementptr inbounds i8, i8* %1586, i64 8
  %1597 = bitcast i8* %1596 to i64*
  %1598 = load i64, i64* %1597, align 1
  %1599 = xor i64 %1595, %1590
  %1600 = xor i64 %1598, %1593
  %1601 = trunc i64 %1599 to i32
  %1602 = lshr i64 %1599, 32
  %1603 = trunc i64 %1602 to i32
  %1604 = bitcast i8* %1584 to i32*
  store i32 %1601, i32* %1604, align 1, !tbaa !2452
  %1605 = getelementptr inbounds i8, i8* %1584, i64 4
  %1606 = bitcast i8* %1605 to i32*
  store i32 %1603, i32* %1606, align 1, !tbaa !2452
  %1607 = trunc i64 %1600 to i32
  %1608 = getelementptr inbounds i8, i8* %1584, i64 8
  %1609 = bitcast i8* %1608 to i32*
  store i32 %1607, i32* %1609, align 1, !tbaa !2452
  %1610 = lshr i64 %1600, 32
  %1611 = trunc i64 %1610 to i32
  %1612 = getelementptr inbounds i8, i8* %1584, i64 12
  %1613 = bitcast i8* %1612 to i32*
  store i32 %1611, i32* %1613, align 1, !tbaa !2452
  %1614 = load i64, i64* %RBP
  %1615 = sub i64 %1614, 16
  %1616 = load i64, i64* %PC
  %1617 = add i64 %1616, 3
  store i64 %1617, i64* %PC
  %1618 = inttoptr i64 %1615 to i32*
  %1619 = load i32, i32* %1618
  %1620 = zext i32 %1619 to i64
  store i64 %1620, i64* %RAX, align 8, !tbaa !2428
  %1621 = load i64, i64* %RAX
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 3
  store i64 %1623, i64* %PC
  %1624 = trunc i64 %1621 to i32
  %1625 = sub i32 %1624, 1
  %1626 = zext i32 %1625 to i64
  store i64 %1626, i64* %RAX, align 8, !tbaa !2428
  %1627 = icmp ult i32 %1624, 1
  %1628 = zext i1 %1627 to i8
  %1629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1628, i8* %1629, align 1, !tbaa !2432
  %1630 = and i32 %1625, 255
  %1631 = call i32 @llvm.ctpop.i32(i32 %1630) #16
  %1632 = trunc i32 %1631 to i8
  %1633 = and i8 %1632, 1
  %1634 = xor i8 %1633, 1
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1634, i8* %1635, align 1, !tbaa !2446
  %1636 = xor i64 1, %1621
  %1637 = trunc i64 %1636 to i32
  %1638 = xor i32 %1637, %1625
  %1639 = lshr i32 %1638, 4
  %1640 = trunc i32 %1639 to i8
  %1641 = and i8 %1640, 1
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1641, i8* %1642, align 1, !tbaa !2447
  %1643 = icmp eq i32 %1625, 0
  %1644 = zext i1 %1643 to i8
  %1645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1644, i8* %1645, align 1, !tbaa !2448
  %1646 = lshr i32 %1625, 31
  %1647 = trunc i32 %1646 to i8
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1647, i8* %1648, align 1, !tbaa !2449
  %1649 = lshr i32 %1624, 31
  %1650 = xor i32 %1646, %1649
  %1651 = add nuw nsw i32 %1650, %1649
  %1652 = icmp eq i32 %1651, 2
  %1653 = zext i1 %1652 to i8
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1653, i8* %1654, align 1, !tbaa !2450
  %1655 = load i64, i64* %RBP
  %1656 = sub i64 %1655, 24
  %1657 = load i64, i64* %PC
  %1658 = add i64 %1657, 4
  store i64 %1658, i64* %PC
  %1659 = inttoptr i64 %1656 to i64*
  %1660 = load i64, i64* %1659
  store i64 %1660, i64* %RCX, align 8, !tbaa !2428
  %1661 = load i64, i64* %RBP
  %1662 = sub i64 %1661, 16
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 3
  store i64 %1664, i64* %PC
  %1665 = inttoptr i64 %1662 to i32*
  %1666 = load i32, i32* %1665
  %1667 = zext i32 %1666 to i64
  store i64 %1667, i64* %RDX, align 8, !tbaa !2428
  %1668 = load i64, i64* %RDX
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 3
  store i64 %1670, i64* %PC
  %1671 = trunc i64 %1668 to i32
  %1672 = sub i32 %1671, 1
  %1673 = zext i32 %1672 to i64
  store i64 %1673, i64* %RDX, align 8, !tbaa !2428
  %1674 = icmp ult i32 %1671, 1
  %1675 = zext i1 %1674 to i8
  %1676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1675, i8* %1676, align 1, !tbaa !2432
  %1677 = and i32 %1672, 255
  %1678 = call i32 @llvm.ctpop.i32(i32 %1677) #16
  %1679 = trunc i32 %1678 to i8
  %1680 = and i8 %1679, 1
  %1681 = xor i8 %1680, 1
  %1682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1681, i8* %1682, align 1, !tbaa !2446
  %1683 = xor i64 1, %1668
  %1684 = trunc i64 %1683 to i32
  %1685 = xor i32 %1684, %1672
  %1686 = lshr i32 %1685, 4
  %1687 = trunc i32 %1686 to i8
  %1688 = and i8 %1687, 1
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1688, i8* %1689, align 1, !tbaa !2447
  %1690 = icmp eq i32 %1672, 0
  %1691 = zext i1 %1690 to i8
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1691, i8* %1692, align 1, !tbaa !2448
  %1693 = lshr i32 %1672, 31
  %1694 = trunc i32 %1693 to i8
  %1695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1694, i8* %1695, align 1, !tbaa !2449
  %1696 = lshr i32 %1671, 31
  %1697 = xor i32 %1693, %1696
  %1698 = add nuw nsw i32 %1697, %1696
  %1699 = icmp eq i32 %1698, 2
  %1700 = zext i1 %1699 to i8
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1700, i8* %1701, align 1, !tbaa !2450
  %1702 = load i32, i32* %EDX
  %1703 = zext i32 %1702 to i64
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 3
  store i64 %1705, i64* %PC
  %1706 = shl i64 %1703, 32
  %1707 = ashr exact i64 %1706, 32
  store i64 %1707, i64* %RSI, align 8, !tbaa !2428
  %1708 = load i64, i64* %RCX
  %1709 = load i64, i64* %RSI
  %1710 = mul i64 %1709, 4
  %1711 = add i64 %1710, %1708
  %1712 = load i32, i32* %EAX
  %1713 = zext i32 %1712 to i64
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 3
  store i64 %1715, i64* %PC
  %1716 = inttoptr i64 %1711 to i32*
  store i32 %1712, i32* %1716
  %1717 = load i64, i64* %RBP
  %1718 = sub i64 %1717, 8
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 4
  store i64 %1720, i64* %PC
  %1721 = inttoptr i64 %1718 to i64*
  %1722 = load i64, i64* %1721
  store i64 %1722, i64* %RCX, align 8, !tbaa !2428
  %1723 = load i64, i64* %RBP
  %1724 = sub i64 %1723, 12
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 3
  store i64 %1726, i64* %PC
  %1727 = inttoptr i64 %1724 to i32*
  %1728 = load i32, i32* %1727
  %1729 = zext i32 %1728 to i64
  store i64 %1729, i64* %RAX, align 8, !tbaa !2428
  %1730 = load i64, i64* %RBP
  %1731 = sub i64 %1730, 16
  %1732 = load i64, i64* %PC
  %1733 = add i64 %1732, 3
  store i64 %1733, i64* %PC
  %1734 = inttoptr i64 %1731 to i32*
  %1735 = load i32, i32* %1734
  %1736 = zext i32 %1735 to i64
  store i64 %1736, i64* %RDX, align 8, !tbaa !2428
  %1737 = load i64, i64* %RDX
  %1738 = load i64, i64* %PC
  %1739 = add i64 %1738, 3
  store i64 %1739, i64* %PC
  %1740 = trunc i64 %1737 to i32
  %1741 = sub i32 %1740, 1
  %1742 = zext i32 %1741 to i64
  store i64 %1742, i64* %RDX, align 8, !tbaa !2428
  %1743 = icmp ult i32 %1740, 1
  %1744 = zext i1 %1743 to i8
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1744, i8* %1745, align 1, !tbaa !2432
  %1746 = and i32 %1741, 255
  %1747 = call i32 @llvm.ctpop.i32(i32 %1746) #16
  %1748 = trunc i32 %1747 to i8
  %1749 = and i8 %1748, 1
  %1750 = xor i8 %1749, 1
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1750, i8* %1751, align 1, !tbaa !2446
  %1752 = xor i64 1, %1737
  %1753 = trunc i64 %1752 to i32
  %1754 = xor i32 %1753, %1741
  %1755 = lshr i32 %1754, 4
  %1756 = trunc i32 %1755 to i8
  %1757 = and i8 %1756, 1
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1757, i8* %1758, align 1, !tbaa !2447
  %1759 = icmp eq i32 %1741, 0
  %1760 = zext i1 %1759 to i8
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1760, i8* %1761, align 1, !tbaa !2448
  %1762 = lshr i32 %1741, 31
  %1763 = trunc i32 %1762 to i8
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1763, i8* %1764, align 1, !tbaa !2449
  %1765 = lshr i32 %1740, 31
  %1766 = xor i32 %1762, %1765
  %1767 = add nuw nsw i32 %1766, %1765
  %1768 = icmp eq i32 %1767, 2
  %1769 = zext i1 %1768 to i8
  %1770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1769, i8* %1770, align 1, !tbaa !2450
  %1771 = load i64, i64* %RAX
  %1772 = load i32, i32* %EDX
  %1773 = zext i32 %1772 to i64
  %1774 = load i64, i64* %PC
  %1775 = add i64 %1774, 3
  store i64 %1775, i64* %PC
  %1776 = shl i64 %1771, 32
  %1777 = ashr exact i64 %1776, 32
  %1778 = shl i64 %1773, 32
  %1779 = ashr exact i64 %1778, 32
  %1780 = mul nsw i64 %1779, %1777
  %1781 = trunc i64 %1780 to i32
  %1782 = and i64 %1780, 4294967295
  store i64 %1782, i64* %RAX, align 8, !tbaa !2428
  %1783 = shl i64 %1780, 32
  %1784 = ashr exact i64 %1783, 32
  %1785 = icmp ne i64 %1784, %1780
  %1786 = zext i1 %1785 to i8
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1786, i8* %1787, align 1, !tbaa !2432
  %1788 = and i32 %1781, 255
  %1789 = call i32 @llvm.ctpop.i32(i32 %1788) #16
  %1790 = trunc i32 %1789 to i8
  %1791 = and i8 %1790, 1
  %1792 = xor i8 %1791, 1
  %1793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1792, i8* %1793, align 1, !tbaa !2446
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1794, align 1, !tbaa !2447
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1795, align 1, !tbaa !2448
  %1796 = lshr i32 %1781, 31
  %1797 = trunc i32 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1797, i8* %1798, align 1, !tbaa !2449
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1786, i8* %1799, align 1, !tbaa !2450
  %1800 = load i64, i64* %RBP
  %1801 = sub i64 %1800, 16
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 3
  store i64 %1803, i64* %PC
  %1804 = inttoptr i64 %1801 to i32*
  %1805 = load i32, i32* %1804
  %1806 = zext i32 %1805 to i64
  store i64 %1806, i64* %RDX, align 8, !tbaa !2428
  %1807 = load i64, i64* %RDX
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 3
  store i64 %1809, i64* %PC
  %1810 = trunc i64 %1807 to i32
  %1811 = sub i32 %1810, 1
  %1812 = zext i32 %1811 to i64
  store i64 %1812, i64* %RDX, align 8, !tbaa !2428
  %1813 = icmp ult i32 %1810, 1
  %1814 = zext i1 %1813 to i8
  %1815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1814, i8* %1815, align 1, !tbaa !2432
  %1816 = and i32 %1811, 255
  %1817 = call i32 @llvm.ctpop.i32(i32 %1816) #16
  %1818 = trunc i32 %1817 to i8
  %1819 = and i8 %1818, 1
  %1820 = xor i8 %1819, 1
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1820, i8* %1821, align 1, !tbaa !2446
  %1822 = xor i64 1, %1807
  %1823 = trunc i64 %1822 to i32
  %1824 = xor i32 %1823, %1811
  %1825 = lshr i32 %1824, 4
  %1826 = trunc i32 %1825 to i8
  %1827 = and i8 %1826, 1
  %1828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1827, i8* %1828, align 1, !tbaa !2447
  %1829 = icmp eq i32 %1811, 0
  %1830 = zext i1 %1829 to i8
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1830, i8* %1831, align 1, !tbaa !2448
  %1832 = lshr i32 %1811, 31
  %1833 = trunc i32 %1832 to i8
  %1834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1833, i8* %1834, align 1, !tbaa !2449
  %1835 = lshr i32 %1810, 31
  %1836 = xor i32 %1832, %1835
  %1837 = add nuw nsw i32 %1836, %1835
  %1838 = icmp eq i32 %1837, 2
  %1839 = zext i1 %1838 to i8
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1839, i8* %1840, align 1, !tbaa !2450
  %1841 = load i64, i64* %RAX
  %1842 = load i32, i32* %EDX
  %1843 = zext i32 %1842 to i64
  %1844 = load i64, i64* %PC
  %1845 = add i64 %1844, 2
  store i64 %1845, i64* %PC
  %1846 = trunc i64 %1841 to i32
  %1847 = add i32 %1842, %1846
  %1848 = zext i32 %1847 to i64
  store i64 %1848, i64* %RAX, align 8, !tbaa !2428
  %1849 = icmp ult i32 %1847, %1846
  %1850 = icmp ult i32 %1847, %1842
  %1851 = or i1 %1849, %1850
  %1852 = zext i1 %1851 to i8
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1852, i8* %1853, align 1, !tbaa !2432
  %1854 = and i32 %1847, 255
  %1855 = call i32 @llvm.ctpop.i32(i32 %1854) #16
  %1856 = trunc i32 %1855 to i8
  %1857 = and i8 %1856, 1
  %1858 = xor i8 %1857, 1
  %1859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1858, i8* %1859, align 1, !tbaa !2446
  %1860 = xor i64 %1843, %1841
  %1861 = trunc i64 %1860 to i32
  %1862 = xor i32 %1861, %1847
  %1863 = lshr i32 %1862, 4
  %1864 = trunc i32 %1863 to i8
  %1865 = and i8 %1864, 1
  %1866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1865, i8* %1866, align 1, !tbaa !2447
  %1867 = icmp eq i32 %1847, 0
  %1868 = zext i1 %1867 to i8
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1868, i8* %1869, align 1, !tbaa !2448
  %1870 = lshr i32 %1847, 31
  %1871 = trunc i32 %1870 to i8
  %1872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1871, i8* %1872, align 1, !tbaa !2449
  %1873 = lshr i32 %1846, 31
  %1874 = lshr i32 %1842, 31
  %1875 = xor i32 %1870, %1873
  %1876 = xor i32 %1870, %1874
  %1877 = add nuw nsw i32 %1875, %1876
  %1878 = icmp eq i32 %1877, 2
  %1879 = zext i1 %1878 to i8
  %1880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1879, i8* %1880, align 1, !tbaa !2450
  %1881 = load i32, i32* %EAX
  %1882 = zext i32 %1881 to i64
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 3
  store i64 %1884, i64* %PC
  %1885 = shl i64 %1882, 32
  %1886 = ashr exact i64 %1885, 32
  store i64 %1886, i64* %RSI, align 8, !tbaa !2428
  %1887 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1888 = load i64, i64* %RCX
  %1889 = load i64, i64* %RSI
  %1890 = mul i64 %1889, 4
  %1891 = add i64 %1890, %1888
  %1892 = load i64, i64* %PC
  %1893 = add i64 %1892, 5
  store i64 %1893, i64* %PC
  %1894 = inttoptr i64 %1891 to float*
  %1895 = load float, float* %1894
  %1896 = bitcast i8* %1887 to float*
  store float %1895, float* %1896, align 1, !tbaa !2453
  %1897 = getelementptr inbounds i8, i8* %1887, i64 4
  %1898 = bitcast i8* %1897 to float*
  store float 0.000000e+00, float* %1898, align 1, !tbaa !2453
  %1899 = getelementptr inbounds i8, i8* %1887, i64 8
  %1900 = bitcast i8* %1899 to float*
  store float 0.000000e+00, float* %1900, align 1, !tbaa !2453
  %1901 = getelementptr inbounds i8, i8* %1887, i64 12
  %1902 = bitcast i8* %1901 to float*
  store float 0.000000e+00, float* %1902, align 1, !tbaa !2453
  %1903 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1904 = bitcast %union.vec128_t* %XMM1 to i8*
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 4
  store i64 %1906, i64* %PC
  %1907 = bitcast i8* %1904 to <2 x float>*
  %1908 = load <2 x float>, <2 x float>* %1907, align 1
  %1909 = extractelement <2 x float> %1908, i32 0
  %1910 = fpext float %1909 to double
  %1911 = bitcast i8* %1903 to double*
  store double %1910, double* %1911, align 1, !tbaa !2455
  %1912 = bitcast %union.vec128_t* %XMM1 to i8*
  %1913 = bitcast %union.vec128_t* %XMM0 to i8*
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 4
  store i64 %1915, i64* %PC
  %1916 = bitcast i8* %1912 to double*
  %1917 = load double, double* %1916, align 1
  %1918 = bitcast i8* %1913 to double*
  %1919 = load double, double* %1918, align 1
  %1920 = fcmp uno double %1917, %1919
  br i1 %1920, label %1921, label %1933

; <label>:1921:                                   ; preds = %block_401c30
  %1922 = fadd double %1917, %1919
  %1923 = bitcast double %1922 to i64
  %1924 = and i64 %1923, 9221120237041090560
  %1925 = icmp eq i64 %1924, 9218868437227405312
  %1926 = and i64 %1923, 2251799813685247
  %1927 = icmp ne i64 %1926, 0
  %1928 = and i1 %1925, %1927
  br i1 %1928, label %1929, label %1939

; <label>:1929:                                   ; preds = %1921
  %1930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1931 = load i64, i64* %1930, align 8, !tbaa !2428
  %1932 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1931, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:1933:                                   ; preds = %block_401c30
  %1934 = fcmp ogt double %1917, %1919
  br i1 %1934, label %1939, label %1935

; <label>:1935:                                   ; preds = %1933
  %1936 = fcmp olt double %1917, %1919
  br i1 %1936, label %1939, label %1937

; <label>:1937:                                   ; preds = %1935
  %1938 = fcmp oeq double %1917, %1919
  br i1 %1938, label %1939, label %1946

; <label>:1939:                                   ; preds = %1937, %1935, %1933, %1921
  %1940 = phi i8 [ 0, %1933 ], [ 0, %1935 ], [ 1, %1937 ], [ 1, %1921 ]
  %1941 = phi i8 [ 0, %1933 ], [ 0, %1935 ], [ 0, %1937 ], [ 1, %1921 ]
  %1942 = phi i8 [ 0, %1933 ], [ 1, %1935 ], [ 0, %1937 ], [ 1, %1921 ]
  %1943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1940, i8* %1943, align 1, !tbaa !2451
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1941, i8* %1944, align 1, !tbaa !2451
  %1945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1942, i8* %1945, align 1, !tbaa !2451
  br label %1946

; <label>:1946:                                   ; preds = %1939, %1937
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1947, align 1, !tbaa !2451
  %1948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1948, align 1, !tbaa !2451
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1949, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %1929, %1946
  %1950 = phi %struct.Memory* [ %1932, %1929 ], [ %MEMORY.2, %1946 ]
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 24
  %1953 = load i64, i64* %PC
  %1954 = add i64 %1953, 6
  %1955 = load i64, i64* %PC
  %1956 = add i64 %1955, 6
  store i64 %1956, i64* %PC
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1958 = load i8, i8* %1957, align 1, !tbaa !2448
  %1959 = icmp eq i8 %1958, 0
  %1960 = zext i1 %1959 to i8
  store i8 %1960, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1962 = select i1 %1959, i64 %1952, i64 %1954
  store i64 %1962, i64* %1961, align 8, !tbaa !2428
  %1963 = load i8, i8* %BRANCH_TAKEN
  %1964 = icmp eq i8 %1963, 1
  br i1 %1964, label %block_401c89, label %block_401c77

block_401b2f:                                     ; preds = %block_401b23
  %1965 = load i64, i64* %RBP
  %1966 = sub i64 %1965, 8
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 4
  store i64 %1968, i64* %PC
  %1969 = inttoptr i64 %1966 to i64*
  %1970 = load i64, i64* %1969
  store i64 %1970, i64* %RAX, align 8, !tbaa !2428
  %1971 = load i64, i64* %RBP
  %1972 = sub i64 %1971, 12
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 3
  store i64 %1974, i64* %PC
  %1975 = inttoptr i64 %1972 to i32*
  %1976 = load i32, i32* %1975
  %1977 = zext i32 %1976 to i64
  store i64 %1977, i64* %RCX, align 8, !tbaa !2428
  %1978 = load i64, i64* %RCX
  %1979 = load i64, i64* %RBP
  %1980 = sub i64 %1979, 40
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 4
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1980 to i32*
  %1984 = load i32, i32* %1983
  %1985 = shl i64 %1978, 32
  %1986 = ashr exact i64 %1985, 32
  %1987 = sext i32 %1984 to i64
  %1988 = mul nsw i64 %1987, %1986
  %1989 = trunc i64 %1988 to i32
  %1990 = and i64 %1988, 4294967295
  store i64 %1990, i64* %RCX, align 8, !tbaa !2428
  %1991 = shl i64 %1988, 32
  %1992 = ashr exact i64 %1991, 32
  %1993 = icmp ne i64 %1992, %1988
  %1994 = zext i1 %1993 to i8
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1994, i8* %1995, align 1, !tbaa !2432
  %1996 = and i32 %1989, 255
  %1997 = call i32 @llvm.ctpop.i32(i32 %1996) #16
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2000, i8* %2001, align 1, !tbaa !2446
  %2002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2002, align 1, !tbaa !2447
  %2003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2003, align 1, !tbaa !2448
  %2004 = lshr i32 %1989, 31
  %2005 = trunc i32 %2004 to i8
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2005, i8* %2006, align 1, !tbaa !2449
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1994, i8* %2007, align 1, !tbaa !2450
  %2008 = load i64, i64* %RCX
  %2009 = load i64, i64* %RBP
  %2010 = sub i64 %2009, 52
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 3
  store i64 %2012, i64* %PC
  %2013 = trunc i64 %2008 to i32
  %2014 = inttoptr i64 %2010 to i32*
  %2015 = load i32, i32* %2014
  %2016 = add i32 %2015, %2013
  %2017 = zext i32 %2016 to i64
  store i64 %2017, i64* %RCX, align 8, !tbaa !2428
  %2018 = icmp ult i32 %2016, %2013
  %2019 = icmp ult i32 %2016, %2015
  %2020 = or i1 %2018, %2019
  %2021 = zext i1 %2020 to i8
  %2022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2021, i8* %2022, align 1, !tbaa !2432
  %2023 = and i32 %2016, 255
  %2024 = call i32 @llvm.ctpop.i32(i32 %2023) #16
  %2025 = trunc i32 %2024 to i8
  %2026 = and i8 %2025, 1
  %2027 = xor i8 %2026, 1
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2027, i8* %2028, align 1, !tbaa !2446
  %2029 = xor i32 %2015, %2013
  %2030 = xor i32 %2029, %2016
  %2031 = lshr i32 %2030, 4
  %2032 = trunc i32 %2031 to i8
  %2033 = and i8 %2032, 1
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2033, i8* %2034, align 1, !tbaa !2447
  %2035 = icmp eq i32 %2016, 0
  %2036 = zext i1 %2035 to i8
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2036, i8* %2037, align 1, !tbaa !2448
  %2038 = lshr i32 %2016, 31
  %2039 = trunc i32 %2038 to i8
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2039, i8* %2040, align 1, !tbaa !2449
  %2041 = lshr i32 %2013, 31
  %2042 = lshr i32 %2015, 31
  %2043 = xor i32 %2038, %2041
  %2044 = xor i32 %2038, %2042
  %2045 = add nuw nsw i32 %2043, %2044
  %2046 = icmp eq i32 %2045, 2
  %2047 = zext i1 %2046 to i8
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2047, i8* %2048, align 1, !tbaa !2450
  %2049 = load i32, i32* %ECX
  %2050 = zext i32 %2049 to i64
  %2051 = load i64, i64* %PC
  %2052 = add i64 %2051, 3
  store i64 %2052, i64* %PC
  %2053 = shl i64 %2050, 32
  %2054 = ashr exact i64 %2053, 32
  store i64 %2054, i64* %RDX, align 8, !tbaa !2428
  %2055 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2056 = load i64, i64* %RAX
  %2057 = load i64, i64* %RDX
  %2058 = mul i64 %2057, 4
  %2059 = add i64 %2058, %2056
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 5
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2059 to float*
  %2063 = load float, float* %2062
  %2064 = bitcast i8* %2055 to float*
  store float %2063, float* %2064, align 1, !tbaa !2453
  %2065 = getelementptr inbounds i8, i8* %2055, i64 4
  %2066 = bitcast i8* %2065 to float*
  store float 0.000000e+00, float* %2066, align 1, !tbaa !2453
  %2067 = getelementptr inbounds i8, i8* %2055, i64 8
  %2068 = bitcast i8* %2067 to float*
  store float 0.000000e+00, float* %2068, align 1, !tbaa !2453
  %2069 = getelementptr inbounds i8, i8* %2055, i64 12
  %2070 = bitcast i8* %2069 to float*
  store float 0.000000e+00, float* %2070, align 1, !tbaa !2453
  %2071 = load i64, i64* %RBP
  %2072 = sub i64 %2071, 36
  %2073 = bitcast %union.vec128_t* %XMM0 to i8*
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 5
  store i64 %2075, i64* %PC
  %2076 = bitcast i8* %2073 to <2 x float>*
  %2077 = load <2 x float>, <2 x float>* %2076, align 1
  %2078 = extractelement <2 x float> %2077, i32 0
  %2079 = inttoptr i64 %2072 to float*
  store float %2078, float* %2079
  %2080 = load i64, i64* %RBP
  %2081 = sub i64 %2080, 52
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 3
  store i64 %2083, i64* %PC
  %2084 = inttoptr i64 %2081 to i32*
  %2085 = load i32, i32* %2084
  %2086 = zext i32 %2085 to i64
  store i64 %2086, i64* %RCX, align 8, !tbaa !2428
  %2087 = load i32, i32* %ECX
  %2088 = zext i32 %2087 to i64
  %2089 = load i64, i64* %RBP
  %2090 = sub i64 %2089, 44
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 3
  store i64 %2092, i64* %PC
  %2093 = inttoptr i64 %2090 to i32*
  %2094 = load i32, i32* %2093
  %2095 = sub i32 %2087, %2094
  %2096 = icmp ult i32 %2087, %2094
  %2097 = zext i1 %2096 to i8
  %2098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2097, i8* %2098, align 1, !tbaa !2432
  %2099 = and i32 %2095, 255
  %2100 = call i32 @llvm.ctpop.i32(i32 %2099) #16
  %2101 = trunc i32 %2100 to i8
  %2102 = and i8 %2101, 1
  %2103 = xor i8 %2102, 1
  %2104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2103, i8* %2104, align 1, !tbaa !2446
  %2105 = xor i32 %2094, %2087
  %2106 = xor i32 %2105, %2095
  %2107 = lshr i32 %2106, 4
  %2108 = trunc i32 %2107 to i8
  %2109 = and i8 %2108, 1
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2109, i8* %2110, align 1, !tbaa !2447
  %2111 = icmp eq i32 %2095, 0
  %2112 = zext i1 %2111 to i8
  %2113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2112, i8* %2113, align 1, !tbaa !2448
  %2114 = lshr i32 %2095, 31
  %2115 = trunc i32 %2114 to i8
  %2116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2115, i8* %2116, align 1, !tbaa !2449
  %2117 = lshr i32 %2087, 31
  %2118 = lshr i32 %2094, 31
  %2119 = xor i32 %2118, %2117
  %2120 = xor i32 %2114, %2117
  %2121 = add nuw nsw i32 %2120, %2119
  %2122 = icmp eq i32 %2121, 2
  %2123 = zext i1 %2122 to i8
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2123, i8* %2124, align 1, !tbaa !2450
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 77
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 6
  %2129 = load i64, i64* %PC
  %2130 = add i64 %2129, 6
  store i64 %2130, i64* %PC
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2132 = load i8, i8* %2131, align 1, !tbaa !2448
  store i8 %2132, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2134 = icmp ne i8 %2132, 0
  %2135 = select i1 %2134, i64 %2126, i64 %2128
  store i64 %2135, i64* %2133, align 8, !tbaa !2428
  %2136 = load i8, i8* %BRANCH_TAKEN
  %2137 = icmp eq i8 %2136, 1
  br i1 %2137, label %block_401b9d, label %block_401b56

block_4019be:                                     ; preds = %block_401c18, %block_4019b7
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4019b7 ], [ %MEMORY.6, %block_401c18 ]
  %2138 = load i64, i64* %RBP
  %2139 = sub i64 %2138, 44
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 3
  store i64 %2141, i64* %PC
  %2142 = inttoptr i64 %2139 to i32*
  %2143 = load i32, i32* %2142
  %2144 = zext i32 %2143 to i64
  store i64 %2144, i64* %RAX, align 8, !tbaa !2428
  %2145 = load i32, i32* %EAX
  %2146 = zext i32 %2145 to i64
  %2147 = load i64, i64* %RBP
  %2148 = sub i64 %2147, 56
  %2149 = load i64, i64* %PC
  %2150 = add i64 %2149, 3
  store i64 %2150, i64* %PC
  %2151 = inttoptr i64 %2148 to i32*
  %2152 = load i32, i32* %2151
  %2153 = sub i32 %2145, %2152
  %2154 = icmp ult i32 %2145, %2152
  %2155 = zext i1 %2154 to i8
  %2156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2155, i8* %2156, align 1, !tbaa !2432
  %2157 = and i32 %2153, 255
  %2158 = call i32 @llvm.ctpop.i32(i32 %2157) #16
  %2159 = trunc i32 %2158 to i8
  %2160 = and i8 %2159, 1
  %2161 = xor i8 %2160, 1
  %2162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2161, i8* %2162, align 1, !tbaa !2446
  %2163 = xor i32 %2152, %2145
  %2164 = xor i32 %2163, %2153
  %2165 = lshr i32 %2164, 4
  %2166 = trunc i32 %2165 to i8
  %2167 = and i8 %2166, 1
  %2168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2167, i8* %2168, align 1, !tbaa !2447
  %2169 = icmp eq i32 %2153, 0
  %2170 = zext i1 %2169 to i8
  %2171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2170, i8* %2171, align 1, !tbaa !2448
  %2172 = lshr i32 %2153, 31
  %2173 = trunc i32 %2172 to i8
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2173, i8* %2174, align 1, !tbaa !2449
  %2175 = lshr i32 %2145, 31
  %2176 = lshr i32 %2152, 31
  %2177 = xor i32 %2176, %2175
  %2178 = xor i32 %2172, %2175
  %2179 = add nuw nsw i32 %2178, %2177
  %2180 = icmp eq i32 %2179, 2
  %2181 = zext i1 %2180 to i8
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2181, i8* %2182, align 1, !tbaa !2450
  %2183 = load i64, i64* %PC
  %2184 = add i64 %2183, 615
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 6
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 6
  store i64 %2188, i64* %PC
  %2189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2190 = load i8, i8* %2189, align 1, !tbaa !2449
  %2191 = icmp ne i8 %2190, 0
  %2192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2193 = load i8, i8* %2192, align 1, !tbaa !2450
  %2194 = icmp ne i8 %2193, 0
  %2195 = xor i1 %2191, %2194
  %2196 = xor i1 %2195, true
  %2197 = zext i1 %2196 to i8
  store i8 %2197, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2199 = select i1 %2195, i64 %2186, i64 %2184
  store i64 %2199, i64* %2198, align 8, !tbaa !2428
  %2200 = load i8, i8* %BRANCH_TAKEN
  %2201 = icmp eq i8 %2200, 1
  %2202 = load i64, i64* %PC
  %2203 = add i64 %2202, 5
  br i1 %2201, label %block_401c2b, label %block_4019ca

block_401c2b:                                     ; preds = %block_4019be
  %2204 = load i64, i64* %PC
  %2205 = add i64 %2204, 5
  store i64 %2205, i64* %PC
  %2206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2203, i64* %2206, align 8, !tbaa !2428
  br label %block_401c30

block_4019ca:                                     ; preds = %block_4019be
  store i64 %2203, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %2207 = load i64, i64* %RBP
  %2208 = sub i64 %2207, 44
  %2209 = load i64, i64* %PC
  %2210 = add i64 %2209, 3
  store i64 %2210, i64* %PC
  %2211 = inttoptr i64 %2208 to i32*
  %2212 = load i32, i32* %2211
  %2213 = zext i32 %2212 to i64
  store i64 %2213, i64* %RAX, align 8, !tbaa !2428
  %2214 = load i64, i64* %RAX
  %2215 = load i64, i64* %PC
  %2216 = add i64 %2215, 3
  store i64 %2216, i64* %PC
  %2217 = trunc i64 %2214 to i32
  %2218 = add i32 1, %2217
  %2219 = zext i32 %2218 to i64
  store i64 %2219, i64* %RAX, align 8, !tbaa !2428
  %2220 = icmp ult i32 %2218, %2217
  %2221 = icmp ult i32 %2218, 1
  %2222 = or i1 %2220, %2221
  %2223 = zext i1 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2223, i8* %2224, align 1, !tbaa !2432
  %2225 = and i32 %2218, 255
  %2226 = call i32 @llvm.ctpop.i32(i32 %2225) #16
  %2227 = trunc i32 %2226 to i8
  %2228 = and i8 %2227, 1
  %2229 = xor i8 %2228, 1
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2229, i8* %2230, align 1, !tbaa !2446
  %2231 = xor i64 1, %2214
  %2232 = trunc i64 %2231 to i32
  %2233 = xor i32 %2232, %2218
  %2234 = lshr i32 %2233, 4
  %2235 = trunc i32 %2234 to i8
  %2236 = and i8 %2235, 1
  %2237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2236, i8* %2237, align 1, !tbaa !2447
  %2238 = icmp eq i32 %2218, 0
  %2239 = zext i1 %2238 to i8
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2239, i8* %2240, align 1, !tbaa !2448
  %2241 = lshr i32 %2218, 31
  %2242 = trunc i32 %2241 to i8
  %2243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2242, i8* %2243, align 1, !tbaa !2449
  %2244 = lshr i32 %2217, 31
  %2245 = xor i32 %2241, %2244
  %2246 = add nuw nsw i32 %2245, %2241
  %2247 = icmp eq i32 %2246, 2
  %2248 = zext i1 %2247 to i8
  %2249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2248, i8* %2249, align 1, !tbaa !2450
  %2250 = load i64, i64* %RBP
  %2251 = sub i64 %2250, 48
  %2252 = load i32, i32* %EAX
  %2253 = zext i32 %2252 to i64
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 3
  store i64 %2255, i64* %PC
  %2256 = inttoptr i64 %2251 to i32*
  store i32 %2252, i32* %2256
  %2257 = load i64, i64* %RBP
  %2258 = sub i64 %2257, 16
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 3
  store i64 %2260, i64* %PC
  %2261 = inttoptr i64 %2258 to i32*
  %2262 = load i32, i32* %2261
  %2263 = zext i32 %2262 to i64
  store i64 %2263, i64* %RAX, align 8, !tbaa !2428
  %2264 = load i64, i64* %RAX
  %2265 = load i64, i64* %RBP
  %2266 = sub i64 %2265, 44
  %2267 = load i64, i64* %PC
  %2268 = add i64 %2267, 3
  store i64 %2268, i64* %PC
  %2269 = trunc i64 %2264 to i32
  %2270 = inttoptr i64 %2266 to i32*
  %2271 = load i32, i32* %2270
  %2272 = sub i32 %2269, %2271
  %2273 = zext i32 %2272 to i64
  store i64 %2273, i64* %RAX, align 8, !tbaa !2428
  %2274 = icmp ult i32 %2269, %2271
  %2275 = zext i1 %2274 to i8
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2275, i8* %2276, align 1, !tbaa !2432
  %2277 = and i32 %2272, 255
  %2278 = call i32 @llvm.ctpop.i32(i32 %2277) #16
  %2279 = trunc i32 %2278 to i8
  %2280 = and i8 %2279, 1
  %2281 = xor i8 %2280, 1
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2281, i8* %2282, align 1, !tbaa !2446
  %2283 = xor i32 %2271, %2269
  %2284 = xor i32 %2283, %2272
  %2285 = lshr i32 %2284, 4
  %2286 = trunc i32 %2285 to i8
  %2287 = and i8 %2286, 1
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2287, i8* %2288, align 1, !tbaa !2447
  %2289 = icmp eq i32 %2272, 0
  %2290 = zext i1 %2289 to i8
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2290, i8* %2291, align 1, !tbaa !2448
  %2292 = lshr i32 %2272, 31
  %2293 = trunc i32 %2292 to i8
  %2294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2293, i8* %2294, align 1, !tbaa !2449
  %2295 = lshr i32 %2269, 31
  %2296 = lshr i32 %2271, 31
  %2297 = xor i32 %2296, %2295
  %2298 = xor i32 %2292, %2295
  %2299 = add nuw nsw i32 %2298, %2297
  %2300 = icmp eq i32 %2299, 2
  %2301 = zext i1 %2300 to i8
  %2302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2301, i8* %2302, align 1, !tbaa !2450
  %2303 = load i64, i64* %RBP
  %2304 = sub i64 %2303, 8
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 4
  store i64 %2306, i64* %PC
  %2307 = inttoptr i64 %2304 to i64*
  %2308 = load i64, i64* %2307
  store i64 %2308, i64* %RCX, align 8, !tbaa !2428
  %2309 = load i64, i64* %RBP
  %2310 = sub i64 %2309, 12
  %2311 = load i64, i64* %PC
  %2312 = add i64 %2311, 3
  store i64 %2312, i64* %PC
  %2313 = inttoptr i64 %2310 to i32*
  %2314 = load i32, i32* %2313
  %2315 = zext i32 %2314 to i64
  store i64 %2315, i64* %RSI, align 8, !tbaa !2428
  %2316 = load i64, i64* %RSI
  %2317 = load i64, i64* %RBP
  %2318 = sub i64 %2317, 44
  %2319 = load i64, i64* %PC
  %2320 = add i64 %2319, 4
  store i64 %2320, i64* %PC
  %2321 = inttoptr i64 %2318 to i32*
  %2322 = load i32, i32* %2321
  %2323 = shl i64 %2316, 32
  %2324 = ashr exact i64 %2323, 32
  %2325 = sext i32 %2322 to i64
  %2326 = mul nsw i64 %2325, %2324
  %2327 = trunc i64 %2326 to i32
  %2328 = and i64 %2326, 4294967295
  store i64 %2328, i64* %RSI, align 8, !tbaa !2428
  %2329 = shl i64 %2326, 32
  %2330 = ashr exact i64 %2329, 32
  %2331 = icmp ne i64 %2330, %2326
  %2332 = zext i1 %2331 to i8
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2332, i8* %2333, align 1, !tbaa !2432
  %2334 = and i32 %2327, 255
  %2335 = call i32 @llvm.ctpop.i32(i32 %2334) #16
  %2336 = trunc i32 %2335 to i8
  %2337 = and i8 %2336, 1
  %2338 = xor i8 %2337, 1
  %2339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2338, i8* %2339, align 1, !tbaa !2446
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2340, align 1, !tbaa !2447
  %2341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2341, align 1, !tbaa !2448
  %2342 = lshr i32 %2327, 31
  %2343 = trunc i32 %2342 to i8
  %2344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2343, i8* %2344, align 1, !tbaa !2449
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2332, i8* %2345, align 1, !tbaa !2450
  %2346 = load i64, i64* %RSI
  %2347 = load i64, i64* %RBP
  %2348 = sub i64 %2347, 44
  %2349 = load i64, i64* %PC
  %2350 = add i64 %2349, 3
  store i64 %2350, i64* %PC
  %2351 = trunc i64 %2346 to i32
  %2352 = inttoptr i64 %2348 to i32*
  %2353 = load i32, i32* %2352
  %2354 = add i32 %2353, %2351
  %2355 = zext i32 %2354 to i64
  store i64 %2355, i64* %RSI, align 8, !tbaa !2428
  %2356 = icmp ult i32 %2354, %2351
  %2357 = icmp ult i32 %2354, %2353
  %2358 = or i1 %2356, %2357
  %2359 = zext i1 %2358 to i8
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2359, i8* %2360, align 1, !tbaa !2432
  %2361 = and i32 %2354, 255
  %2362 = call i32 @llvm.ctpop.i32(i32 %2361) #16
  %2363 = trunc i32 %2362 to i8
  %2364 = and i8 %2363, 1
  %2365 = xor i8 %2364, 1
  %2366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2365, i8* %2366, align 1, !tbaa !2446
  %2367 = xor i32 %2353, %2351
  %2368 = xor i32 %2367, %2354
  %2369 = lshr i32 %2368, 4
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  %2372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2371, i8* %2372, align 1, !tbaa !2447
  %2373 = icmp eq i32 %2354, 0
  %2374 = zext i1 %2373 to i8
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2374, i8* %2375, align 1, !tbaa !2448
  %2376 = lshr i32 %2354, 31
  %2377 = trunc i32 %2376 to i8
  %2378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2377, i8* %2378, align 1, !tbaa !2449
  %2379 = lshr i32 %2351, 31
  %2380 = lshr i32 %2353, 31
  %2381 = xor i32 %2376, %2379
  %2382 = xor i32 %2376, %2380
  %2383 = add nuw nsw i32 %2381, %2382
  %2384 = icmp eq i32 %2383, 2
  %2385 = zext i1 %2384 to i8
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2385, i8* %2386, align 1, !tbaa !2450
  %2387 = load i32, i32* %ESI
  %2388 = zext i32 %2387 to i64
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 3
  store i64 %2390, i64* %PC
  %2391 = shl i64 %2388, 32
  %2392 = ashr exact i64 %2391, 32
  store i64 %2392, i64* %RDI, align 8, !tbaa !2428
  %2393 = load i64, i64* %RDI
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 4
  store i64 %2395, i64* %PC
  %2396 = shl i64 %2393, 1
  %2397 = icmp slt i64 %2396, 0
  %2398 = shl i64 %2396, 1
  store i64 %2398, i64* %RDI, align 8, !tbaa !2428
  %2399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2400 = zext i1 %2397 to i8
  store i8 %2400, i8* %2399, align 1, !tbaa !2451
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2402 = trunc i64 %2398 to i32
  %2403 = and i32 %2402, 254
  %2404 = call i32 @llvm.ctpop.i32(i32 %2403) #16
  %2405 = trunc i32 %2404 to i8
  %2406 = and i8 %2405, 1
  %2407 = xor i8 %2406, 1
  store i8 %2407, i8* %2401, align 1, !tbaa !2451
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2408, align 1, !tbaa !2451
  %2409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2410 = icmp eq i64 %2398, 0
  %2411 = zext i1 %2410 to i8
  store i8 %2411, i8* %2409, align 1, !tbaa !2451
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2413 = lshr i64 %2398, 63
  %2414 = trunc i64 %2413 to i8
  store i8 %2414, i8* %2412, align 1, !tbaa !2451
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2415, align 1, !tbaa !2451
  %2416 = load i64, i64* %RCX
  %2417 = load i64, i64* %RDI
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 3
  store i64 %2419, i64* %PC
  %2420 = add i64 %2417, %2416
  store i64 %2420, i64* %RCX, align 8, !tbaa !2428
  %2421 = icmp ult i64 %2420, %2416
  %2422 = icmp ult i64 %2420, %2417
  %2423 = or i1 %2421, %2422
  %2424 = zext i1 %2423 to i8
  %2425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2424, i8* %2425, align 1, !tbaa !2432
  %2426 = trunc i64 %2420 to i32
  %2427 = and i32 %2426, 255
  %2428 = call i32 @llvm.ctpop.i32(i32 %2427) #16
  %2429 = trunc i32 %2428 to i8
  %2430 = and i8 %2429, 1
  %2431 = xor i8 %2430, 1
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2431, i8* %2432, align 1, !tbaa !2446
  %2433 = xor i64 %2417, %2416
  %2434 = xor i64 %2433, %2420
  %2435 = lshr i64 %2434, 4
  %2436 = trunc i64 %2435 to i8
  %2437 = and i8 %2436, 1
  %2438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2437, i8* %2438, align 1, !tbaa !2447
  %2439 = icmp eq i64 %2420, 0
  %2440 = zext i1 %2439 to i8
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2440, i8* %2441, align 1, !tbaa !2448
  %2442 = lshr i64 %2420, 63
  %2443 = trunc i64 %2442 to i8
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2443, i8* %2444, align 1, !tbaa !2449
  %2445 = lshr i64 %2416, 63
  %2446 = lshr i64 %2417, 63
  %2447 = xor i64 %2442, %2445
  %2448 = xor i64 %2442, %2446
  %2449 = add nuw nsw i64 %2447, %2448
  %2450 = icmp eq i64 %2449, 2
  %2451 = zext i1 %2450 to i8
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2451, i8* %2452, align 1, !tbaa !2450
  %2453 = load i32, i32* %EAX
  %2454 = zext i32 %2453 to i64
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 2
  store i64 %2456, i64* %PC
  %2457 = and i64 %2454, 4294967295
  store i64 %2457, i64* %RDI, align 8, !tbaa !2428
  %2458 = load i64, i64* %RCX
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 3
  store i64 %2460, i64* %PC
  store i64 %2458, i64* %RSI, align 8, !tbaa !2428
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 4533
  %2463 = load i64, i64* %PC
  %2464 = add i64 %2463, 5
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 5
  store i64 %2466, i64* %PC
  %2467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2468 = load i64, i64* %2467, align 8, !tbaa !2428
  %2469 = add i64 %2468, -8
  %2470 = inttoptr i64 %2469 to i64*
  store i64 %2464, i64* %2470
  store i64 %2469, i64* %2467, align 8, !tbaa !2428
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2462, i64* %2471, align 8, !tbaa !2428
  %2472 = load i64, i64* %PC
  %2473 = call %struct.Memory* @sub_402bb0_idamax_renamed_(%struct.State* %0, i64 %2472, %struct.Memory* %MEMORY.3)
  %2474 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2475 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2476 = bitcast %union.vec128_t* %XMM0 to i8*
  %2477 = load i64, i64* %PC
  %2478 = add i64 %2477, 3
  store i64 %2478, i64* %PC
  %2479 = bitcast i8* %2475 to i64*
  %2480 = load i64, i64* %2479, align 1
  %2481 = getelementptr inbounds i8, i8* %2475, i64 8
  %2482 = bitcast i8* %2481 to i64*
  %2483 = load i64, i64* %2482, align 1
  %2484 = bitcast i8* %2476 to i64*
  %2485 = load i64, i64* %2484, align 1
  %2486 = getelementptr inbounds i8, i8* %2476, i64 8
  %2487 = bitcast i8* %2486 to i64*
  %2488 = load i64, i64* %2487, align 1
  %2489 = xor i64 %2485, %2480
  %2490 = xor i64 %2488, %2483
  %2491 = trunc i64 %2489 to i32
  %2492 = lshr i64 %2489, 32
  %2493 = trunc i64 %2492 to i32
  %2494 = bitcast i8* %2474 to i32*
  store i32 %2491, i32* %2494, align 1, !tbaa !2452
  %2495 = getelementptr inbounds i8, i8* %2474, i64 4
  %2496 = bitcast i8* %2495 to i32*
  store i32 %2493, i32* %2496, align 1, !tbaa !2452
  %2497 = trunc i64 %2490 to i32
  %2498 = getelementptr inbounds i8, i8* %2474, i64 8
  %2499 = bitcast i8* %2498 to i32*
  store i32 %2497, i32* %2499, align 1, !tbaa !2452
  %2500 = lshr i64 %2490, 32
  %2501 = trunc i64 %2500 to i32
  %2502 = getelementptr inbounds i8, i8* %2474, i64 12
  %2503 = bitcast i8* %2502 to i32*
  store i32 %2501, i32* %2503, align 1, !tbaa !2452
  %2504 = load i64, i64* %RAX
  %2505 = load i64, i64* %RBP
  %2506 = sub i64 %2505, 44
  %2507 = load i64, i64* %PC
  %2508 = add i64 %2507, 3
  store i64 %2508, i64* %PC
  %2509 = trunc i64 %2504 to i32
  %2510 = inttoptr i64 %2506 to i32*
  %2511 = load i32, i32* %2510
  %2512 = add i32 %2511, %2509
  %2513 = zext i32 %2512 to i64
  store i64 %2513, i64* %RAX, align 8, !tbaa !2428
  %2514 = icmp ult i32 %2512, %2509
  %2515 = icmp ult i32 %2512, %2511
  %2516 = or i1 %2514, %2515
  %2517 = zext i1 %2516 to i8
  %2518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2517, i8* %2518, align 1, !tbaa !2432
  %2519 = and i32 %2512, 255
  %2520 = call i32 @llvm.ctpop.i32(i32 %2519) #16
  %2521 = trunc i32 %2520 to i8
  %2522 = and i8 %2521, 1
  %2523 = xor i8 %2522, 1
  %2524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2523, i8* %2524, align 1, !tbaa !2446
  %2525 = xor i32 %2511, %2509
  %2526 = xor i32 %2525, %2512
  %2527 = lshr i32 %2526, 4
  %2528 = trunc i32 %2527 to i8
  %2529 = and i8 %2528, 1
  %2530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2529, i8* %2530, align 1, !tbaa !2447
  %2531 = icmp eq i32 %2512, 0
  %2532 = zext i1 %2531 to i8
  %2533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2532, i8* %2533, align 1, !tbaa !2448
  %2534 = lshr i32 %2512, 31
  %2535 = trunc i32 %2534 to i8
  %2536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2535, i8* %2536, align 1, !tbaa !2449
  %2537 = lshr i32 %2509, 31
  %2538 = lshr i32 %2511, 31
  %2539 = xor i32 %2534, %2537
  %2540 = xor i32 %2534, %2538
  %2541 = add nuw nsw i32 %2539, %2540
  %2542 = icmp eq i32 %2541, 2
  %2543 = zext i1 %2542 to i8
  %2544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2543, i8* %2544, align 1, !tbaa !2450
  %2545 = load i64, i64* %RBP
  %2546 = sub i64 %2545, 52
  %2547 = load i32, i32* %EAX
  %2548 = zext i32 %2547 to i64
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 3
  store i64 %2550, i64* %PC
  %2551 = inttoptr i64 %2546 to i32*
  store i32 %2547, i32* %2551
  %2552 = load i64, i64* %RBP
  %2553 = sub i64 %2552, 52
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 3
  store i64 %2555, i64* %PC
  %2556 = inttoptr i64 %2553 to i32*
  %2557 = load i32, i32* %2556
  %2558 = zext i32 %2557 to i64
  store i64 %2558, i64* %RAX, align 8, !tbaa !2428
  %2559 = load i64, i64* %RBP
  %2560 = sub i64 %2559, 24
  %2561 = load i64, i64* %PC
  %2562 = add i64 %2561, 4
  store i64 %2562, i64* %PC
  %2563 = inttoptr i64 %2560 to i64*
  %2564 = load i64, i64* %2563
  store i64 %2564, i64* %RCX, align 8, !tbaa !2428
  %2565 = load i64, i64* %RBP
  %2566 = sub i64 %2565, 44
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 4
  store i64 %2568, i64* %PC
  %2569 = inttoptr i64 %2566 to i32*
  %2570 = load i32, i32* %2569
  %2571 = sext i32 %2570 to i64
  store i64 %2571, i64* %RSI, align 8, !tbaa !2428
  %2572 = load i64, i64* %RCX
  %2573 = load i64, i64* %RSI
  %2574 = mul i64 %2573, 4
  %2575 = add i64 %2574, %2572
  %2576 = load i32, i32* %EAX
  %2577 = zext i32 %2576 to i64
  %2578 = load i64, i64* %PC
  %2579 = add i64 %2578, 3
  store i64 %2579, i64* %PC
  %2580 = inttoptr i64 %2575 to i32*
  store i32 %2576, i32* %2580
  %2581 = load i64, i64* %RBP
  %2582 = sub i64 %2581, 8
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 4
  store i64 %2584, i64* %PC
  %2585 = inttoptr i64 %2582 to i64*
  %2586 = load i64, i64* %2585
  store i64 %2586, i64* %RCX, align 8, !tbaa !2428
  %2587 = load i64, i64* %RBP
  %2588 = sub i64 %2587, 12
  %2589 = load i64, i64* %PC
  %2590 = add i64 %2589, 3
  store i64 %2590, i64* %PC
  %2591 = inttoptr i64 %2588 to i32*
  %2592 = load i32, i32* %2591
  %2593 = zext i32 %2592 to i64
  store i64 %2593, i64* %RAX, align 8, !tbaa !2428
  %2594 = load i64, i64* %RAX
  %2595 = load i64, i64* %RBP
  %2596 = sub i64 %2595, 44
  %2597 = load i64, i64* %PC
  %2598 = add i64 %2597, 4
  store i64 %2598, i64* %PC
  %2599 = inttoptr i64 %2596 to i32*
  %2600 = load i32, i32* %2599
  %2601 = shl i64 %2594, 32
  %2602 = ashr exact i64 %2601, 32
  %2603 = sext i32 %2600 to i64
  %2604 = mul nsw i64 %2603, %2602
  %2605 = trunc i64 %2604 to i32
  %2606 = and i64 %2604, 4294967295
  store i64 %2606, i64* %RAX, align 8, !tbaa !2428
  %2607 = shl i64 %2604, 32
  %2608 = ashr exact i64 %2607, 32
  %2609 = icmp ne i64 %2608, %2604
  %2610 = zext i1 %2609 to i8
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2610, i8* %2611, align 1, !tbaa !2432
  %2612 = and i32 %2605, 255
  %2613 = call i32 @llvm.ctpop.i32(i32 %2612) #16
  %2614 = trunc i32 %2613 to i8
  %2615 = and i8 %2614, 1
  %2616 = xor i8 %2615, 1
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2616, i8* %2617, align 1, !tbaa !2446
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2618, align 1, !tbaa !2447
  %2619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2619, align 1, !tbaa !2448
  %2620 = lshr i32 %2605, 31
  %2621 = trunc i32 %2620 to i8
  %2622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2621, i8* %2622, align 1, !tbaa !2449
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2610, i8* %2623, align 1, !tbaa !2450
  %2624 = load i64, i64* %RAX
  %2625 = load i64, i64* %RBP
  %2626 = sub i64 %2625, 52
  %2627 = load i64, i64* %PC
  %2628 = add i64 %2627, 3
  store i64 %2628, i64* %PC
  %2629 = trunc i64 %2624 to i32
  %2630 = inttoptr i64 %2626 to i32*
  %2631 = load i32, i32* %2630
  %2632 = add i32 %2631, %2629
  %2633 = zext i32 %2632 to i64
  store i64 %2633, i64* %RAX, align 8, !tbaa !2428
  %2634 = icmp ult i32 %2632, %2629
  %2635 = icmp ult i32 %2632, %2631
  %2636 = or i1 %2634, %2635
  %2637 = zext i1 %2636 to i8
  %2638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2637, i8* %2638, align 1, !tbaa !2432
  %2639 = and i32 %2632, 255
  %2640 = call i32 @llvm.ctpop.i32(i32 %2639) #16
  %2641 = trunc i32 %2640 to i8
  %2642 = and i8 %2641, 1
  %2643 = xor i8 %2642, 1
  %2644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2643, i8* %2644, align 1, !tbaa !2446
  %2645 = xor i32 %2631, %2629
  %2646 = xor i32 %2645, %2632
  %2647 = lshr i32 %2646, 4
  %2648 = trunc i32 %2647 to i8
  %2649 = and i8 %2648, 1
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2649, i8* %2650, align 1, !tbaa !2447
  %2651 = icmp eq i32 %2632, 0
  %2652 = zext i1 %2651 to i8
  %2653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2652, i8* %2653, align 1, !tbaa !2448
  %2654 = lshr i32 %2632, 31
  %2655 = trunc i32 %2654 to i8
  %2656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2655, i8* %2656, align 1, !tbaa !2449
  %2657 = lshr i32 %2629, 31
  %2658 = lshr i32 %2631, 31
  %2659 = xor i32 %2654, %2657
  %2660 = xor i32 %2654, %2658
  %2661 = add nuw nsw i32 %2659, %2660
  %2662 = icmp eq i32 %2661, 2
  %2663 = zext i1 %2662 to i8
  %2664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2663, i8* %2664, align 1, !tbaa !2450
  %2665 = load i32, i32* %EAX
  %2666 = zext i32 %2665 to i64
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 3
  store i64 %2668, i64* %PC
  %2669 = shl i64 %2666, 32
  %2670 = ashr exact i64 %2669, 32
  store i64 %2670, i64* %RSI, align 8, !tbaa !2428
  %2671 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2672 = load i64, i64* %RCX
  %2673 = load i64, i64* %RSI
  %2674 = mul i64 %2673, 4
  %2675 = add i64 %2674, %2672
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 5
  store i64 %2677, i64* %PC
  %2678 = inttoptr i64 %2675 to float*
  %2679 = load float, float* %2678
  %2680 = bitcast i8* %2671 to float*
  store float %2679, float* %2680, align 1, !tbaa !2453
  %2681 = getelementptr inbounds i8, i8* %2671, i64 4
  %2682 = bitcast i8* %2681 to float*
  store float 0.000000e+00, float* %2682, align 1, !tbaa !2453
  %2683 = getelementptr inbounds i8, i8* %2671, i64 8
  %2684 = bitcast i8* %2683 to float*
  store float 0.000000e+00, float* %2684, align 1, !tbaa !2453
  %2685 = getelementptr inbounds i8, i8* %2671, i64 12
  %2686 = bitcast i8* %2685 to float*
  store float 0.000000e+00, float* %2686, align 1, !tbaa !2453
  %2687 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2688 = bitcast %union.vec128_t* %XMM1 to i8*
  %2689 = load i64, i64* %PC
  %2690 = add i64 %2689, 4
  store i64 %2690, i64* %PC
  %2691 = bitcast i8* %2688 to <2 x float>*
  %2692 = load <2 x float>, <2 x float>* %2691, align 1
  %2693 = extractelement <2 x float> %2692, i32 0
  %2694 = fpext float %2693 to double
  %2695 = bitcast i8* %2687 to double*
  store double %2694, double* %2695, align 1, !tbaa !2455
  %2696 = bitcast %union.vec128_t* %XMM1 to i8*
  %2697 = bitcast %union.vec128_t* %XMM0 to i8*
  %2698 = load i64, i64* %PC
  %2699 = add i64 %2698, 4
  store i64 %2699, i64* %PC
  %2700 = bitcast i8* %2696 to double*
  %2701 = load double, double* %2700, align 1
  %2702 = bitcast i8* %2697 to double*
  %2703 = load double, double* %2702, align 1
  %2704 = fcmp uno double %2701, %2703
  br i1 %2704, label %2705, label %2717

; <label>:2705:                                   ; preds = %block_4019ca
  %2706 = fadd double %2701, %2703
  %2707 = bitcast double %2706 to i64
  %2708 = and i64 %2707, 9221120237041090560
  %2709 = icmp eq i64 %2708, 9218868437227405312
  %2710 = and i64 %2707, 2251799813685247
  %2711 = icmp ne i64 %2710, 0
  %2712 = and i1 %2709, %2711
  br i1 %2712, label %2713, label %2723

; <label>:2713:                                   ; preds = %2705
  %2714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2715 = load i64, i64* %2714, align 8, !tbaa !2428
  %2716 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2715, %struct.Memory* %2473) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:2717:                                   ; preds = %block_4019ca
  %2718 = fcmp ogt double %2701, %2703
  br i1 %2718, label %2723, label %2719

; <label>:2719:                                   ; preds = %2717
  %2720 = fcmp olt double %2701, %2703
  br i1 %2720, label %2723, label %2721

; <label>:2721:                                   ; preds = %2719
  %2722 = fcmp oeq double %2701, %2703
  br i1 %2722, label %2723, label %2730

; <label>:2723:                                   ; preds = %2721, %2719, %2717, %2705
  %2724 = phi i8 [ 0, %2717 ], [ 0, %2719 ], [ 1, %2721 ], [ 1, %2705 ]
  %2725 = phi i8 [ 0, %2717 ], [ 0, %2719 ], [ 0, %2721 ], [ 1, %2705 ]
  %2726 = phi i8 [ 0, %2717 ], [ 1, %2719 ], [ 0, %2721 ], [ 1, %2705 ]
  %2727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2724, i8* %2727, align 1, !tbaa !2451
  %2728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2725, i8* %2728, align 1, !tbaa !2451
  %2729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2726, i8* %2729, align 1, !tbaa !2451
  br label %2730

; <label>:2730:                                   ; preds = %2723, %2721
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2731, align 1, !tbaa !2451
  %2732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2732, align 1, !tbaa !2451
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2733, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %2713, %2730
  %2734 = phi %struct.Memory* [ %2716, %2713 ], [ %2473, %2730 ]
  %2735 = load i64, i64* %PC
  %2736 = add i64 %2735, 17
  %2737 = load i64, i64* %PC
  %2738 = add i64 %2737, 6
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 6
  store i64 %2740, i64* %PC
  %2741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2742 = load i8, i8* %2741, align 1, !tbaa !2448
  %2743 = icmp eq i8 %2742, 0
  %2744 = zext i1 %2743 to i8
  store i8 %2744, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2746 = select i1 %2743, i64 %2736, i64 %2738
  store i64 %2746, i64* %2745, align 8, !tbaa !2428
  %2747 = load i8, i8* %BRANCH_TAKEN
  %2748 = icmp eq i8 %2747, 1
  br i1 %2748, label %block_401a46, label %block_401a3b

block_401b23:                                     ; preds = %block_401b9d, %block_401ab4
  %MEMORY.4 = phi %struct.Memory* [ %1569, %block_401ab4 ], [ %3329, %block_401b9d ]
  %2749 = load i64, i64* %RBP
  %2750 = sub i64 %2749, 40
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 3
  store i64 %2752, i64* %PC
  %2753 = inttoptr i64 %2750 to i32*
  %2754 = load i32, i32* %2753
  %2755 = zext i32 %2754 to i64
  store i64 %2755, i64* %RAX, align 8, !tbaa !2428
  %2756 = load i32, i32* %EAX
  %2757 = zext i32 %2756 to i64
  %2758 = load i64, i64* %RBP
  %2759 = sub i64 %2758, 16
  %2760 = load i64, i64* %PC
  %2761 = add i64 %2760, 3
  store i64 %2761, i64* %PC
  %2762 = inttoptr i64 %2759 to i32*
  %2763 = load i32, i32* %2762
  %2764 = sub i32 %2756, %2763
  %2765 = icmp ult i32 %2756, %2763
  %2766 = zext i1 %2765 to i8
  %2767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2766, i8* %2767, align 1, !tbaa !2432
  %2768 = and i32 %2764, 255
  %2769 = call i32 @llvm.ctpop.i32(i32 %2768) #16
  %2770 = trunc i32 %2769 to i8
  %2771 = and i8 %2770, 1
  %2772 = xor i8 %2771, 1
  %2773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2772, i8* %2773, align 1, !tbaa !2446
  %2774 = xor i32 %2763, %2756
  %2775 = xor i32 %2774, %2764
  %2776 = lshr i32 %2775, 4
  %2777 = trunc i32 %2776 to i8
  %2778 = and i8 %2777, 1
  %2779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2778, i8* %2779, align 1, !tbaa !2447
  %2780 = icmp eq i32 %2764, 0
  %2781 = zext i1 %2780 to i8
  %2782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2781, i8* %2782, align 1, !tbaa !2448
  %2783 = lshr i32 %2764, 31
  %2784 = trunc i32 %2783 to i8
  %2785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2784, i8* %2785, align 1, !tbaa !2449
  %2786 = lshr i32 %2756, 31
  %2787 = lshr i32 %2763, 31
  %2788 = xor i32 %2787, %2786
  %2789 = xor i32 %2783, %2786
  %2790 = add nuw nsw i32 %2789, %2788
  %2791 = icmp eq i32 %2790, 2
  %2792 = zext i1 %2791 to i8
  %2793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2792, i8* %2793, align 1, !tbaa !2450
  %2794 = load i64, i64* %PC
  %2795 = add i64 %2794, 225
  %2796 = load i64, i64* %PC
  %2797 = add i64 %2796, 6
  %2798 = load i64, i64* %PC
  %2799 = add i64 %2798, 6
  store i64 %2799, i64* %PC
  %2800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2801 = load i8, i8* %2800, align 1, !tbaa !2449
  %2802 = icmp ne i8 %2801, 0
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2804 = load i8, i8* %2803, align 1, !tbaa !2450
  %2805 = icmp ne i8 %2804, 0
  %2806 = xor i1 %2802, %2805
  %2807 = xor i1 %2806, true
  %2808 = zext i1 %2807 to i8
  store i8 %2808, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2810 = select i1 %2806, i64 %2797, i64 %2795
  store i64 %2810, i64* %2809, align 8, !tbaa !2428
  %2811 = load i8, i8* %BRANCH_TAKEN
  %2812 = icmp eq i8 %2811, 1
  br i1 %2812, label %block_401c0a, label %block_401b2f

block_401b9d:                                     ; preds = %block_401b2f, %block_401b56
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.4, %block_401b2f ], [ %MEMORY.4, %block_401b56 ]
  %2813 = load i64, i64* %PC
  %2814 = add i64 %2813, 5
  store i64 %2814, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %2815 = load i64, i64* %RBP
  %2816 = sub i64 %2815, 16
  %2817 = load i64, i64* %PC
  %2818 = add i64 %2817, 3
  store i64 %2818, i64* %PC
  %2819 = inttoptr i64 %2816 to i32*
  %2820 = load i32, i32* %2819
  %2821 = zext i32 %2820 to i64
  store i64 %2821, i64* %RCX, align 8, !tbaa !2428
  %2822 = load i64, i64* %RBP
  %2823 = sub i64 %2822, 44
  %2824 = load i64, i64* %PC
  %2825 = add i64 %2824, 3
  store i64 %2825, i64* %PC
  %2826 = inttoptr i64 %2823 to i32*
  %2827 = load i32, i32* %2826
  %2828 = zext i32 %2827 to i64
  store i64 %2828, i64* %RDX, align 8, !tbaa !2428
  %2829 = load i64, i64* %RDX
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 3
  store i64 %2831, i64* %PC
  %2832 = trunc i64 %2829 to i32
  %2833 = add i32 1, %2832
  %2834 = zext i32 %2833 to i64
  store i64 %2834, i64* %RDX, align 8, !tbaa !2428
  %2835 = icmp ult i32 %2833, %2832
  %2836 = icmp ult i32 %2833, 1
  %2837 = or i1 %2835, %2836
  %2838 = zext i1 %2837 to i8
  %2839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2838, i8* %2839, align 1, !tbaa !2432
  %2840 = and i32 %2833, 255
  %2841 = call i32 @llvm.ctpop.i32(i32 %2840) #16
  %2842 = trunc i32 %2841 to i8
  %2843 = and i8 %2842, 1
  %2844 = xor i8 %2843, 1
  %2845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2844, i8* %2845, align 1, !tbaa !2446
  %2846 = xor i64 1, %2829
  %2847 = trunc i64 %2846 to i32
  %2848 = xor i32 %2847, %2833
  %2849 = lshr i32 %2848, 4
  %2850 = trunc i32 %2849 to i8
  %2851 = and i8 %2850, 1
  %2852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2851, i8* %2852, align 1, !tbaa !2447
  %2853 = icmp eq i32 %2833, 0
  %2854 = zext i1 %2853 to i8
  %2855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2854, i8* %2855, align 1, !tbaa !2448
  %2856 = lshr i32 %2833, 31
  %2857 = trunc i32 %2856 to i8
  %2858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2857, i8* %2858, align 1, !tbaa !2449
  %2859 = lshr i32 %2832, 31
  %2860 = xor i32 %2856, %2859
  %2861 = add nuw nsw i32 %2860, %2856
  %2862 = icmp eq i32 %2861, 2
  %2863 = zext i1 %2862 to i8
  %2864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2863, i8* %2864, align 1, !tbaa !2450
  %2865 = load i64, i64* %RCX
  %2866 = load i32, i32* %EDX
  %2867 = zext i32 %2866 to i64
  %2868 = load i64, i64* %PC
  %2869 = add i64 %2868, 2
  store i64 %2869, i64* %PC
  %2870 = trunc i64 %2865 to i32
  %2871 = sub i32 %2870, %2866
  %2872 = zext i32 %2871 to i64
  store i64 %2872, i64* %RCX, align 8, !tbaa !2428
  %2873 = icmp ult i32 %2870, %2866
  %2874 = zext i1 %2873 to i8
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2874, i8* %2875, align 1, !tbaa !2432
  %2876 = and i32 %2871, 255
  %2877 = call i32 @llvm.ctpop.i32(i32 %2876) #16
  %2878 = trunc i32 %2877 to i8
  %2879 = and i8 %2878, 1
  %2880 = xor i8 %2879, 1
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2880, i8* %2881, align 1, !tbaa !2446
  %2882 = xor i64 %2867, %2865
  %2883 = trunc i64 %2882 to i32
  %2884 = xor i32 %2883, %2871
  %2885 = lshr i32 %2884, 4
  %2886 = trunc i32 %2885 to i8
  %2887 = and i8 %2886, 1
  %2888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2887, i8* %2888, align 1, !tbaa !2447
  %2889 = icmp eq i32 %2871, 0
  %2890 = zext i1 %2889 to i8
  %2891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2890, i8* %2891, align 1, !tbaa !2448
  %2892 = lshr i32 %2871, 31
  %2893 = trunc i32 %2892 to i8
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2893, i8* %2894, align 1, !tbaa !2449
  %2895 = lshr i32 %2870, 31
  %2896 = lshr i32 %2866, 31
  %2897 = xor i32 %2896, %2895
  %2898 = xor i32 %2892, %2895
  %2899 = add nuw nsw i32 %2898, %2897
  %2900 = icmp eq i32 %2899, 2
  %2901 = zext i1 %2900 to i8
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2901, i8* %2902, align 1, !tbaa !2450
  %2903 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2904 = load i64, i64* %RBP
  %2905 = sub i64 %2904, 36
  %2906 = load i64, i64* %PC
  %2907 = add i64 %2906, 5
  store i64 %2907, i64* %PC
  %2908 = inttoptr i64 %2905 to float*
  %2909 = load float, float* %2908
  %2910 = bitcast i8* %2903 to float*
  store float %2909, float* %2910, align 1, !tbaa !2453
  %2911 = getelementptr inbounds i8, i8* %2903, i64 4
  %2912 = bitcast i8* %2911 to float*
  store float 0.000000e+00, float* %2912, align 1, !tbaa !2453
  %2913 = getelementptr inbounds i8, i8* %2903, i64 8
  %2914 = bitcast i8* %2913 to float*
  store float 0.000000e+00, float* %2914, align 1, !tbaa !2453
  %2915 = getelementptr inbounds i8, i8* %2903, i64 12
  %2916 = bitcast i8* %2915 to float*
  store float 0.000000e+00, float* %2916, align 1, !tbaa !2453
  %2917 = load i64, i64* %RBP
  %2918 = sub i64 %2917, 8
  %2919 = load i64, i64* %PC
  %2920 = add i64 %2919, 4
  store i64 %2920, i64* %PC
  %2921 = inttoptr i64 %2918 to i64*
  %2922 = load i64, i64* %2921
  store i64 %2922, i64* %RSI, align 8, !tbaa !2428
  %2923 = load i64, i64* %RBP
  %2924 = sub i64 %2923, 12
  %2925 = load i64, i64* %PC
  %2926 = add i64 %2925, 3
  store i64 %2926, i64* %PC
  %2927 = inttoptr i64 %2924 to i32*
  %2928 = load i32, i32* %2927
  %2929 = zext i32 %2928 to i64
  store i64 %2929, i64* %RDX, align 8, !tbaa !2428
  %2930 = load i64, i64* %RDX
  %2931 = load i64, i64* %RBP
  %2932 = sub i64 %2931, 44
  %2933 = load i64, i64* %PC
  %2934 = add i64 %2933, 4
  store i64 %2934, i64* %PC
  %2935 = inttoptr i64 %2932 to i32*
  %2936 = load i32, i32* %2935
  %2937 = shl i64 %2930, 32
  %2938 = ashr exact i64 %2937, 32
  %2939 = sext i32 %2936 to i64
  %2940 = mul nsw i64 %2939, %2938
  %2941 = trunc i64 %2940 to i32
  %2942 = and i64 %2940, 4294967295
  store i64 %2942, i64* %RDX, align 8, !tbaa !2428
  %2943 = shl i64 %2940, 32
  %2944 = ashr exact i64 %2943, 32
  %2945 = icmp ne i64 %2944, %2940
  %2946 = zext i1 %2945 to i8
  %2947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2946, i8* %2947, align 1, !tbaa !2432
  %2948 = and i32 %2941, 255
  %2949 = call i32 @llvm.ctpop.i32(i32 %2948) #16
  %2950 = trunc i32 %2949 to i8
  %2951 = and i8 %2950, 1
  %2952 = xor i8 %2951, 1
  %2953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2952, i8* %2953, align 1, !tbaa !2446
  %2954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2954, align 1, !tbaa !2447
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2955, align 1, !tbaa !2448
  %2956 = lshr i32 %2941, 31
  %2957 = trunc i32 %2956 to i8
  %2958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2957, i8* %2958, align 1, !tbaa !2449
  %2959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2946, i8* %2959, align 1, !tbaa !2450
  %2960 = load i64, i64* %RDX
  %2961 = load i64, i64* %RBP
  %2962 = sub i64 %2961, 44
  %2963 = load i64, i64* %PC
  %2964 = add i64 %2963, 3
  store i64 %2964, i64* %PC
  %2965 = trunc i64 %2960 to i32
  %2966 = inttoptr i64 %2962 to i32*
  %2967 = load i32, i32* %2966
  %2968 = add i32 %2967, %2965
  %2969 = zext i32 %2968 to i64
  store i64 %2969, i64* %RDX, align 8, !tbaa !2428
  %2970 = icmp ult i32 %2968, %2965
  %2971 = icmp ult i32 %2968, %2967
  %2972 = or i1 %2970, %2971
  %2973 = zext i1 %2972 to i8
  %2974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2973, i8* %2974, align 1, !tbaa !2432
  %2975 = and i32 %2968, 255
  %2976 = call i32 @llvm.ctpop.i32(i32 %2975) #16
  %2977 = trunc i32 %2976 to i8
  %2978 = and i8 %2977, 1
  %2979 = xor i8 %2978, 1
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2979, i8* %2980, align 1, !tbaa !2446
  %2981 = xor i32 %2967, %2965
  %2982 = xor i32 %2981, %2968
  %2983 = lshr i32 %2982, 4
  %2984 = trunc i32 %2983 to i8
  %2985 = and i8 %2984, 1
  %2986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2985, i8* %2986, align 1, !tbaa !2447
  %2987 = icmp eq i32 %2968, 0
  %2988 = zext i1 %2987 to i8
  %2989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2988, i8* %2989, align 1, !tbaa !2448
  %2990 = lshr i32 %2968, 31
  %2991 = trunc i32 %2990 to i8
  %2992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2991, i8* %2992, align 1, !tbaa !2449
  %2993 = lshr i32 %2965, 31
  %2994 = lshr i32 %2967, 31
  %2995 = xor i32 %2990, %2993
  %2996 = xor i32 %2990, %2994
  %2997 = add nuw nsw i32 %2995, %2996
  %2998 = icmp eq i32 %2997, 2
  %2999 = zext i1 %2998 to i8
  %3000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2999, i8* %3000, align 1, !tbaa !2450
  %3001 = load i64, i64* %RDX
  %3002 = load i64, i64* %PC
  %3003 = add i64 %3002, 3
  store i64 %3003, i64* %PC
  %3004 = trunc i64 %3001 to i32
  %3005 = add i32 1, %3004
  %3006 = zext i32 %3005 to i64
  store i64 %3006, i64* %RDX, align 8, !tbaa !2428
  %3007 = icmp ult i32 %3005, %3004
  %3008 = icmp ult i32 %3005, 1
  %3009 = or i1 %3007, %3008
  %3010 = zext i1 %3009 to i8
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3010, i8* %3011, align 1, !tbaa !2432
  %3012 = and i32 %3005, 255
  %3013 = call i32 @llvm.ctpop.i32(i32 %3012) #16
  %3014 = trunc i32 %3013 to i8
  %3015 = and i8 %3014, 1
  %3016 = xor i8 %3015, 1
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3016, i8* %3017, align 1, !tbaa !2446
  %3018 = xor i64 1, %3001
  %3019 = trunc i64 %3018 to i32
  %3020 = xor i32 %3019, %3005
  %3021 = lshr i32 %3020, 4
  %3022 = trunc i32 %3021 to i8
  %3023 = and i8 %3022, 1
  %3024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3023, i8* %3024, align 1, !tbaa !2447
  %3025 = icmp eq i32 %3005, 0
  %3026 = zext i1 %3025 to i8
  %3027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3026, i8* %3027, align 1, !tbaa !2448
  %3028 = lshr i32 %3005, 31
  %3029 = trunc i32 %3028 to i8
  %3030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3029, i8* %3030, align 1, !tbaa !2449
  %3031 = lshr i32 %3004, 31
  %3032 = xor i32 %3028, %3031
  %3033 = add nuw nsw i32 %3032, %3028
  %3034 = icmp eq i32 %3033, 2
  %3035 = zext i1 %3034 to i8
  %3036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3035, i8* %3036, align 1, !tbaa !2450
  %3037 = load i32, i32* %EDX
  %3038 = zext i32 %3037 to i64
  %3039 = load i64, i64* %PC
  %3040 = add i64 %3039, 3
  store i64 %3040, i64* %PC
  %3041 = shl i64 %3038, 32
  %3042 = ashr exact i64 %3041, 32
  store i64 %3042, i64* %RDI, align 8, !tbaa !2428
  %3043 = load i64, i64* %RDI
  %3044 = load i64, i64* %PC
  %3045 = add i64 %3044, 4
  store i64 %3045, i64* %PC
  %3046 = shl i64 %3043, 1
  %3047 = icmp slt i64 %3046, 0
  %3048 = shl i64 %3046, 1
  store i64 %3048, i64* %RDI, align 8, !tbaa !2428
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3050 = zext i1 %3047 to i8
  store i8 %3050, i8* %3049, align 1, !tbaa !2451
  %3051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3052 = trunc i64 %3048 to i32
  %3053 = and i32 %3052, 254
  %3054 = call i32 @llvm.ctpop.i32(i32 %3053) #16
  %3055 = trunc i32 %3054 to i8
  %3056 = and i8 %3055, 1
  %3057 = xor i8 %3056, 1
  store i8 %3057, i8* %3051, align 1, !tbaa !2451
  %3058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3058, align 1, !tbaa !2451
  %3059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3060 = icmp eq i64 %3048, 0
  %3061 = zext i1 %3060 to i8
  store i8 %3061, i8* %3059, align 1, !tbaa !2451
  %3062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3063 = lshr i64 %3048, 63
  %3064 = trunc i64 %3063 to i8
  store i8 %3064, i8* %3062, align 1, !tbaa !2451
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3065, align 1, !tbaa !2451
  %3066 = load i64, i64* %RSI
  %3067 = load i64, i64* %RDI
  %3068 = load i64, i64* %PC
  %3069 = add i64 %3068, 3
  store i64 %3069, i64* %PC
  %3070 = add i64 %3067, %3066
  store i64 %3070, i64* %RSI, align 8, !tbaa !2428
  %3071 = icmp ult i64 %3070, %3066
  %3072 = icmp ult i64 %3070, %3067
  %3073 = or i1 %3071, %3072
  %3074 = zext i1 %3073 to i8
  %3075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3074, i8* %3075, align 1, !tbaa !2432
  %3076 = trunc i64 %3070 to i32
  %3077 = and i32 %3076, 255
  %3078 = call i32 @llvm.ctpop.i32(i32 %3077) #16
  %3079 = trunc i32 %3078 to i8
  %3080 = and i8 %3079, 1
  %3081 = xor i8 %3080, 1
  %3082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3081, i8* %3082, align 1, !tbaa !2446
  %3083 = xor i64 %3067, %3066
  %3084 = xor i64 %3083, %3070
  %3085 = lshr i64 %3084, 4
  %3086 = trunc i64 %3085 to i8
  %3087 = and i8 %3086, 1
  %3088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3087, i8* %3088, align 1, !tbaa !2447
  %3089 = icmp eq i64 %3070, 0
  %3090 = zext i1 %3089 to i8
  %3091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3090, i8* %3091, align 1, !tbaa !2448
  %3092 = lshr i64 %3070, 63
  %3093 = trunc i64 %3092 to i8
  %3094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3093, i8* %3094, align 1, !tbaa !2449
  %3095 = lshr i64 %3066, 63
  %3096 = lshr i64 %3067, 63
  %3097 = xor i64 %3092, %3095
  %3098 = xor i64 %3092, %3096
  %3099 = add nuw nsw i64 %3097, %3098
  %3100 = icmp eq i64 %3099, 2
  %3101 = zext i1 %3100 to i8
  %3102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3101, i8* %3102, align 1, !tbaa !2450
  %3103 = load i64, i64* %RBP
  %3104 = sub i64 %3103, 8
  %3105 = load i64, i64* %PC
  %3106 = add i64 %3105, 4
  store i64 %3106, i64* %PC
  %3107 = inttoptr i64 %3104 to i64*
  %3108 = load i64, i64* %3107
  store i64 %3108, i64* %RDI, align 8, !tbaa !2428
  %3109 = load i64, i64* %RBP
  %3110 = sub i64 %3109, 12
  %3111 = load i64, i64* %PC
  %3112 = add i64 %3111, 3
  store i64 %3112, i64* %PC
  %3113 = inttoptr i64 %3110 to i32*
  %3114 = load i32, i32* %3113
  %3115 = zext i32 %3114 to i64
  store i64 %3115, i64* %RDX, align 8, !tbaa !2428
  %3116 = load i64, i64* %RDX
  %3117 = load i64, i64* %RBP
  %3118 = sub i64 %3117, 40
  %3119 = load i64, i64* %PC
  %3120 = add i64 %3119, 4
  store i64 %3120, i64* %PC
  %3121 = inttoptr i64 %3118 to i32*
  %3122 = load i32, i32* %3121
  %3123 = shl i64 %3116, 32
  %3124 = ashr exact i64 %3123, 32
  %3125 = sext i32 %3122 to i64
  %3126 = mul nsw i64 %3125, %3124
  %3127 = trunc i64 %3126 to i32
  %3128 = and i64 %3126, 4294967295
  store i64 %3128, i64* %RDX, align 8, !tbaa !2428
  %3129 = shl i64 %3126, 32
  %3130 = ashr exact i64 %3129, 32
  %3131 = icmp ne i64 %3130, %3126
  %3132 = zext i1 %3131 to i8
  %3133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3132, i8* %3133, align 1, !tbaa !2432
  %3134 = and i32 %3127, 255
  %3135 = call i32 @llvm.ctpop.i32(i32 %3134) #16
  %3136 = trunc i32 %3135 to i8
  %3137 = and i8 %3136, 1
  %3138 = xor i8 %3137, 1
  %3139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3138, i8* %3139, align 1, !tbaa !2446
  %3140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3140, align 1, !tbaa !2447
  %3141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3141, align 1, !tbaa !2448
  %3142 = lshr i32 %3127, 31
  %3143 = trunc i32 %3142 to i8
  %3144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3143, i8* %3144, align 1, !tbaa !2449
  %3145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3132, i8* %3145, align 1, !tbaa !2450
  %3146 = load i64, i64* %RDX
  %3147 = load i64, i64* %RBP
  %3148 = sub i64 %3147, 44
  %3149 = load i64, i64* %PC
  %3150 = add i64 %3149, 3
  store i64 %3150, i64* %PC
  %3151 = trunc i64 %3146 to i32
  %3152 = inttoptr i64 %3148 to i32*
  %3153 = load i32, i32* %3152
  %3154 = add i32 %3153, %3151
  %3155 = zext i32 %3154 to i64
  store i64 %3155, i64* %RDX, align 8, !tbaa !2428
  %3156 = icmp ult i32 %3154, %3151
  %3157 = icmp ult i32 %3154, %3153
  %3158 = or i1 %3156, %3157
  %3159 = zext i1 %3158 to i8
  %3160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3159, i8* %3160, align 1, !tbaa !2432
  %3161 = and i32 %3154, 255
  %3162 = call i32 @llvm.ctpop.i32(i32 %3161) #16
  %3163 = trunc i32 %3162 to i8
  %3164 = and i8 %3163, 1
  %3165 = xor i8 %3164, 1
  %3166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3165, i8* %3166, align 1, !tbaa !2446
  %3167 = xor i32 %3153, %3151
  %3168 = xor i32 %3167, %3154
  %3169 = lshr i32 %3168, 4
  %3170 = trunc i32 %3169 to i8
  %3171 = and i8 %3170, 1
  %3172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3171, i8* %3172, align 1, !tbaa !2447
  %3173 = icmp eq i32 %3154, 0
  %3174 = zext i1 %3173 to i8
  %3175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3174, i8* %3175, align 1, !tbaa !2448
  %3176 = lshr i32 %3154, 31
  %3177 = trunc i32 %3176 to i8
  %3178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3177, i8* %3178, align 1, !tbaa !2449
  %3179 = lshr i32 %3151, 31
  %3180 = lshr i32 %3153, 31
  %3181 = xor i32 %3176, %3179
  %3182 = xor i32 %3176, %3180
  %3183 = add nuw nsw i32 %3181, %3182
  %3184 = icmp eq i32 %3183, 2
  %3185 = zext i1 %3184 to i8
  %3186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3185, i8* %3186, align 1, !tbaa !2450
  %3187 = load i64, i64* %RDX
  %3188 = load i64, i64* %PC
  %3189 = add i64 %3188, 3
  store i64 %3189, i64* %PC
  %3190 = trunc i64 %3187 to i32
  %3191 = add i32 1, %3190
  %3192 = zext i32 %3191 to i64
  store i64 %3192, i64* %RDX, align 8, !tbaa !2428
  %3193 = icmp ult i32 %3191, %3190
  %3194 = icmp ult i32 %3191, 1
  %3195 = or i1 %3193, %3194
  %3196 = zext i1 %3195 to i8
  %3197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3196, i8* %3197, align 1, !tbaa !2432
  %3198 = and i32 %3191, 255
  %3199 = call i32 @llvm.ctpop.i32(i32 %3198) #16
  %3200 = trunc i32 %3199 to i8
  %3201 = and i8 %3200, 1
  %3202 = xor i8 %3201, 1
  %3203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3202, i8* %3203, align 1, !tbaa !2446
  %3204 = xor i64 1, %3187
  %3205 = trunc i64 %3204 to i32
  %3206 = xor i32 %3205, %3191
  %3207 = lshr i32 %3206, 4
  %3208 = trunc i32 %3207 to i8
  %3209 = and i8 %3208, 1
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3209, i8* %3210, align 1, !tbaa !2447
  %3211 = icmp eq i32 %3191, 0
  %3212 = zext i1 %3211 to i8
  %3213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3212, i8* %3213, align 1, !tbaa !2448
  %3214 = lshr i32 %3191, 31
  %3215 = trunc i32 %3214 to i8
  %3216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3215, i8* %3216, align 1, !tbaa !2449
  %3217 = lshr i32 %3190, 31
  %3218 = xor i32 %3214, %3217
  %3219 = add nuw nsw i32 %3218, %3214
  %3220 = icmp eq i32 %3219, 2
  %3221 = zext i1 %3220 to i8
  %3222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3221, i8* %3222, align 1, !tbaa !2450
  %3223 = load i32, i32* %EDX
  %3224 = zext i32 %3223 to i64
  %3225 = load i64, i64* %PC
  %3226 = add i64 %3225, 3
  store i64 %3226, i64* %PC
  %3227 = shl i64 %3224, 32
  %3228 = ashr exact i64 %3227, 32
  store i64 %3228, i64* %R8, align 8, !tbaa !2428
  %3229 = load i64, i64* %R8
  %3230 = load i64, i64* %PC
  %3231 = add i64 %3230, 4
  store i64 %3231, i64* %PC
  %3232 = shl i64 %3229, 1
  %3233 = icmp slt i64 %3232, 0
  %3234 = shl i64 %3232, 1
  store i64 %3234, i64* %R8, align 8, !tbaa !2428
  %3235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3236 = zext i1 %3233 to i8
  store i8 %3236, i8* %3235, align 1, !tbaa !2451
  %3237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3238 = trunc i64 %3234 to i32
  %3239 = and i32 %3238, 254
  %3240 = call i32 @llvm.ctpop.i32(i32 %3239) #16
  %3241 = trunc i32 %3240 to i8
  %3242 = and i8 %3241, 1
  %3243 = xor i8 %3242, 1
  store i8 %3243, i8* %3237, align 1, !tbaa !2451
  %3244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3244, align 1, !tbaa !2451
  %3245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3246 = icmp eq i64 %3234, 0
  %3247 = zext i1 %3246 to i8
  store i8 %3247, i8* %3245, align 1, !tbaa !2451
  %3248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3249 = lshr i64 %3234, 63
  %3250 = trunc i64 %3249 to i8
  store i8 %3250, i8* %3248, align 1, !tbaa !2451
  %3251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3251, align 1, !tbaa !2451
  %3252 = load i64, i64* %RDI
  %3253 = load i64, i64* %R8
  %3254 = load i64, i64* %PC
  %3255 = add i64 %3254, 3
  store i64 %3255, i64* %PC
  %3256 = add i64 %3253, %3252
  store i64 %3256, i64* %RDI, align 8, !tbaa !2428
  %3257 = icmp ult i64 %3256, %3252
  %3258 = icmp ult i64 %3256, %3253
  %3259 = or i1 %3257, %3258
  %3260 = zext i1 %3259 to i8
  %3261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3260, i8* %3261, align 1, !tbaa !2432
  %3262 = trunc i64 %3256 to i32
  %3263 = and i32 %3262, 255
  %3264 = call i32 @llvm.ctpop.i32(i32 %3263) #16
  %3265 = trunc i32 %3264 to i8
  %3266 = and i8 %3265, 1
  %3267 = xor i8 %3266, 1
  %3268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3267, i8* %3268, align 1, !tbaa !2446
  %3269 = xor i64 %3253, %3252
  %3270 = xor i64 %3269, %3256
  %3271 = lshr i64 %3270, 4
  %3272 = trunc i64 %3271 to i8
  %3273 = and i8 %3272, 1
  %3274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3273, i8* %3274, align 1, !tbaa !2447
  %3275 = icmp eq i64 %3256, 0
  %3276 = zext i1 %3275 to i8
  %3277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3276, i8* %3277, align 1, !tbaa !2448
  %3278 = lshr i64 %3256, 63
  %3279 = trunc i64 %3278 to i8
  %3280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3279, i8* %3280, align 1, !tbaa !2449
  %3281 = lshr i64 %3252, 63
  %3282 = lshr i64 %3253, 63
  %3283 = xor i64 %3278, %3281
  %3284 = xor i64 %3278, %3282
  %3285 = add nuw nsw i64 %3283, %3284
  %3286 = icmp eq i64 %3285, 2
  %3287 = zext i1 %3286 to i8
  %3288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3287, i8* %3288, align 1, !tbaa !2450
  %3289 = load i64, i64* %RBP
  %3290 = sub i64 %3289, 64
  %3291 = load i64, i64* %RDI
  %3292 = load i64, i64* %PC
  %3293 = add i64 %3292, 4
  store i64 %3293, i64* %PC
  %3294 = inttoptr i64 %3290 to i64*
  store i64 %3291, i64* %3294
  %3295 = load i32, i32* %ECX
  %3296 = zext i32 %3295 to i64
  %3297 = load i64, i64* %PC
  %3298 = add i64 %3297, 2
  store i64 %3298, i64* %PC
  %3299 = and i64 %3296, 4294967295
  store i64 %3299, i64* %RDI, align 8, !tbaa !2428
  %3300 = load i32, i32* %EAX
  %3301 = zext i32 %3300 to i64
  %3302 = load i64, i64* %PC
  %3303 = add i64 %3302, 2
  store i64 %3303, i64* %PC
  %3304 = and i64 %3301, 4294967295
  store i64 %3304, i64* %RDX, align 8, !tbaa !2428
  %3305 = load i64, i64* %RBP
  %3306 = sub i64 %3305, 64
  %3307 = load i64, i64* %PC
  %3308 = add i64 %3307, 4
  store i64 %3308, i64* %PC
  %3309 = inttoptr i64 %3306 to i64*
  %3310 = load i64, i64* %3309
  store i64 %3310, i64* %RCX, align 8, !tbaa !2428
  %3311 = bitcast i32* %R8D to i64*
  %3312 = load i32, i32* %EAX
  %3313 = zext i32 %3312 to i64
  %3314 = load i64, i64* %PC
  %3315 = add i64 %3314, 3
  store i64 %3315, i64* %PC
  %3316 = and i64 %3313, 4294967295
  store i64 %3316, i64* %3311, align 8, !tbaa !2428
  %3317 = load i64, i64* %PC
  %3318 = add i64 %3317, 3305
  %3319 = load i64, i64* %PC
  %3320 = add i64 %3319, 5
  %3321 = load i64, i64* %PC
  %3322 = add i64 %3321, 5
  store i64 %3322, i64* %PC
  %3323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3324 = load i64, i64* %3323, align 8, !tbaa !2428
  %3325 = add i64 %3324, -8
  %3326 = inttoptr i64 %3325 to i64*
  store i64 %3320, i64* %3326
  store i64 %3325, i64* %3323, align 8, !tbaa !2428
  %3327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3318, i64* %3327, align 8, !tbaa !2428
  %3328 = load i64, i64* %PC
  %3329 = call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* %0, i64 %3328, %struct.Memory* %MEMORY.5)
  %3330 = load i64, i64* %RBP
  %3331 = sub i64 %3330, 40
  %3332 = load i64, i64* %PC
  %3333 = add i64 %3332, 3
  store i64 %3333, i64* %PC
  %3334 = inttoptr i64 %3331 to i32*
  %3335 = load i32, i32* %3334
  %3336 = zext i32 %3335 to i64
  store i64 %3336, i64* %RAX, align 8, !tbaa !2428
  %3337 = load i64, i64* %RAX
  %3338 = load i64, i64* %PC
  %3339 = add i64 %3338, 3
  store i64 %3339, i64* %PC
  %3340 = trunc i64 %3337 to i32
  %3341 = add i32 1, %3340
  %3342 = zext i32 %3341 to i64
  store i64 %3342, i64* %RAX, align 8, !tbaa !2428
  %3343 = icmp ult i32 %3341, %3340
  %3344 = icmp ult i32 %3341, 1
  %3345 = or i1 %3343, %3344
  %3346 = zext i1 %3345 to i8
  %3347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3346, i8* %3347, align 1, !tbaa !2432
  %3348 = and i32 %3341, 255
  %3349 = call i32 @llvm.ctpop.i32(i32 %3348) #16
  %3350 = trunc i32 %3349 to i8
  %3351 = and i8 %3350, 1
  %3352 = xor i8 %3351, 1
  %3353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3352, i8* %3353, align 1, !tbaa !2446
  %3354 = xor i64 1, %3337
  %3355 = trunc i64 %3354 to i32
  %3356 = xor i32 %3355, %3341
  %3357 = lshr i32 %3356, 4
  %3358 = trunc i32 %3357 to i8
  %3359 = and i8 %3358, 1
  %3360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3359, i8* %3360, align 1, !tbaa !2447
  %3361 = icmp eq i32 %3341, 0
  %3362 = zext i1 %3361 to i8
  %3363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3362, i8* %3363, align 1, !tbaa !2448
  %3364 = lshr i32 %3341, 31
  %3365 = trunc i32 %3364 to i8
  %3366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3365, i8* %3366, align 1, !tbaa !2449
  %3367 = lshr i32 %3340, 31
  %3368 = xor i32 %3364, %3367
  %3369 = add nuw nsw i32 %3368, %3364
  %3370 = icmp eq i32 %3369, 2
  %3371 = zext i1 %3370 to i8
  %3372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3371, i8* %3372, align 1, !tbaa !2450
  %3373 = load i64, i64* %RBP
  %3374 = sub i64 %3373, 40
  %3375 = load i32, i32* %EAX
  %3376 = zext i32 %3375 to i64
  %3377 = load i64, i64* %PC
  %3378 = add i64 %3377, 3
  store i64 %3378, i64* %PC
  %3379 = inttoptr i64 %3374 to i32*
  store i32 %3375, i32* %3379
  %3380 = load i64, i64* %PC
  %3381 = sub i64 %3380, 226
  %3382 = load i64, i64* %PC
  %3383 = add i64 %3382, 5
  store i64 %3383, i64* %PC
  %3384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3381, i64* %3384, align 8, !tbaa !2428
  br label %block_401b23

block_401c18:                                     ; preds = %block_401c0a, %block_401a41
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.4, %block_401c0a ], [ %2734, %block_401a41 ]
  %3385 = load i64, i64* %PC
  %3386 = add i64 %3385, 5
  %3387 = load i64, i64* %PC
  %3388 = add i64 %3387, 5
  store i64 %3388, i64* %PC
  %3389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3386, i64* %3389, align 8, !tbaa !2428
  %3390 = load i64, i64* %RBP
  %3391 = sub i64 %3390, 44
  %3392 = load i64, i64* %PC
  %3393 = add i64 %3392, 3
  store i64 %3393, i64* %PC
  %3394 = inttoptr i64 %3391 to i32*
  %3395 = load i32, i32* %3394
  %3396 = zext i32 %3395 to i64
  store i64 %3396, i64* %RAX, align 8, !tbaa !2428
  %3397 = load i64, i64* %RAX
  %3398 = load i64, i64* %PC
  %3399 = add i64 %3398, 3
  store i64 %3399, i64* %PC
  %3400 = trunc i64 %3397 to i32
  %3401 = add i32 1, %3400
  %3402 = zext i32 %3401 to i64
  store i64 %3402, i64* %RAX, align 8, !tbaa !2428
  %3403 = icmp ult i32 %3401, %3400
  %3404 = icmp ult i32 %3401, 1
  %3405 = or i1 %3403, %3404
  %3406 = zext i1 %3405 to i8
  %3407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3406, i8* %3407, align 1, !tbaa !2432
  %3408 = and i32 %3401, 255
  %3409 = call i32 @llvm.ctpop.i32(i32 %3408) #16
  %3410 = trunc i32 %3409 to i8
  %3411 = and i8 %3410, 1
  %3412 = xor i8 %3411, 1
  %3413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3412, i8* %3413, align 1, !tbaa !2446
  %3414 = xor i64 1, %3397
  %3415 = trunc i64 %3414 to i32
  %3416 = xor i32 %3415, %3401
  %3417 = lshr i32 %3416, 4
  %3418 = trunc i32 %3417 to i8
  %3419 = and i8 %3418, 1
  %3420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3419, i8* %3420, align 1, !tbaa !2447
  %3421 = icmp eq i32 %3401, 0
  %3422 = zext i1 %3421 to i8
  %3423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3422, i8* %3423, align 1, !tbaa !2448
  %3424 = lshr i32 %3401, 31
  %3425 = trunc i32 %3424 to i8
  %3426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3425, i8* %3426, align 1, !tbaa !2449
  %3427 = lshr i32 %3400, 31
  %3428 = xor i32 %3424, %3427
  %3429 = add nuw nsw i32 %3428, %3424
  %3430 = icmp eq i32 %3429, 2
  %3431 = zext i1 %3430 to i8
  %3432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3431, i8* %3432, align 1, !tbaa !2450
  %3433 = load i64, i64* %RBP
  %3434 = sub i64 %3433, 44
  %3435 = load i32, i32* %EAX
  %3436 = zext i32 %3435 to i64
  %3437 = load i64, i64* %PC
  %3438 = add i64 %3437, 3
  store i64 %3438, i64* %PC
  %3439 = inttoptr i64 %3434 to i32*
  store i32 %3435, i32* %3439
  %3440 = load i64, i64* %PC
  %3441 = sub i64 %3440, 616
  %3442 = load i64, i64* %PC
  %3443 = add i64 %3442, 5
  store i64 %3443, i64* %PC
  %3444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3441, i64* %3444, align 8, !tbaa !2428
  br label %block_4019be

block_401c7d:                                     ; preds = %block_401c77
  %3445 = load i64, i64* %RBP
  %3446 = sub i64 %3445, 16
  %3447 = load i64, i64* %PC
  %3448 = add i64 %3447, 3
  store i64 %3448, i64* %PC
  %3449 = inttoptr i64 %3446 to i32*
  %3450 = load i32, i32* %3449
  %3451 = zext i32 %3450 to i64
  store i64 %3451, i64* %RAX, align 8, !tbaa !2428
  %3452 = load i64, i64* %RAX
  %3453 = load i64, i64* %PC
  %3454 = add i64 %3453, 3
  store i64 %3454, i64* %PC
  %3455 = trunc i64 %3452 to i32
  %3456 = sub i32 %3455, 1
  %3457 = zext i32 %3456 to i64
  store i64 %3457, i64* %RAX, align 8, !tbaa !2428
  %3458 = icmp ult i32 %3455, 1
  %3459 = zext i1 %3458 to i8
  %3460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3459, i8* %3460, align 1, !tbaa !2432
  %3461 = and i32 %3456, 255
  %3462 = call i32 @llvm.ctpop.i32(i32 %3461) #16
  %3463 = trunc i32 %3462 to i8
  %3464 = and i8 %3463, 1
  %3465 = xor i8 %3464, 1
  %3466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3465, i8* %3466, align 1, !tbaa !2446
  %3467 = xor i64 1, %3452
  %3468 = trunc i64 %3467 to i32
  %3469 = xor i32 %3468, %3456
  %3470 = lshr i32 %3469, 4
  %3471 = trunc i32 %3470 to i8
  %3472 = and i8 %3471, 1
  %3473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3472, i8* %3473, align 1, !tbaa !2447
  %3474 = icmp eq i32 %3456, 0
  %3475 = zext i1 %3474 to i8
  %3476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3475, i8* %3476, align 1, !tbaa !2448
  %3477 = lshr i32 %3456, 31
  %3478 = trunc i32 %3477 to i8
  %3479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3478, i8* %3479, align 1, !tbaa !2449
  %3480 = lshr i32 %3455, 31
  %3481 = xor i32 %3477, %3480
  %3482 = add nuw nsw i32 %3481, %3480
  %3483 = icmp eq i32 %3482, 2
  %3484 = zext i1 %3483 to i8
  %3485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3484, i8* %3485, align 1, !tbaa !2450
  %3486 = load i64, i64* %RBP
  %3487 = sub i64 %3486, 32
  %3488 = load i64, i64* %PC
  %3489 = add i64 %3488, 4
  store i64 %3489, i64* %PC
  %3490 = inttoptr i64 %3487 to i64*
  %3491 = load i64, i64* %3490
  store i64 %3491, i64* %RCX, align 8, !tbaa !2428
  %3492 = load i64, i64* %RCX
  %3493 = load i32, i32* %EAX
  %3494 = zext i32 %3493 to i64
  %3495 = load i64, i64* %PC
  %3496 = add i64 %3495, 2
  store i64 %3496, i64* %PC
  %3497 = inttoptr i64 %3492 to i32*
  store i32 %3493, i32* %3497
  br label %block_401c89

block_401c0a:                                     ; preds = %block_401b23
  %3498 = load i64, i64* %PC
  %3499 = add i64 %3498, 14
  %3500 = load i64, i64* %PC
  %3501 = add i64 %3500, 5
  store i64 %3501, i64* %PC
  %3502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3499, i64* %3502, align 8, !tbaa !2428
  br label %block_401c18

block_401c89:                                     ; preds = %block_401c77, %block_401c7d, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %MEMORY.7 = phi %struct.Memory* [ %1950, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %1950, %block_401c77 ], [ %1950, %block_401c7d ]
  %3503 = load i64, i64* %RSP
  %3504 = load i64, i64* %PC
  %3505 = add i64 %3504, 4
  store i64 %3505, i64* %PC
  %3506 = add i64 64, %3503
  store i64 %3506, i64* %RSP, align 8, !tbaa !2428
  %3507 = icmp ult i64 %3506, %3503
  %3508 = icmp ult i64 %3506, 64
  %3509 = or i1 %3507, %3508
  %3510 = zext i1 %3509 to i8
  %3511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3510, i8* %3511, align 1, !tbaa !2432
  %3512 = trunc i64 %3506 to i32
  %3513 = and i32 %3512, 255
  %3514 = call i32 @llvm.ctpop.i32(i32 %3513) #16
  %3515 = trunc i32 %3514 to i8
  %3516 = and i8 %3515, 1
  %3517 = xor i8 %3516, 1
  %3518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3517, i8* %3518, align 1, !tbaa !2446
  %3519 = xor i64 64, %3503
  %3520 = xor i64 %3519, %3506
  %3521 = lshr i64 %3520, 4
  %3522 = trunc i64 %3521 to i8
  %3523 = and i8 %3522, 1
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3523, i8* %3524, align 1, !tbaa !2447
  %3525 = icmp eq i64 %3506, 0
  %3526 = zext i1 %3525 to i8
  %3527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3526, i8* %3527, align 1, !tbaa !2448
  %3528 = lshr i64 %3506, 63
  %3529 = trunc i64 %3528 to i8
  %3530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3529, i8* %3530, align 1, !tbaa !2449
  %3531 = lshr i64 %3503, 63
  %3532 = xor i64 %3528, %3531
  %3533 = add nuw nsw i64 %3532, %3528
  %3534 = icmp eq i64 %3533, 2
  %3535 = zext i1 %3534 to i8
  %3536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3535, i8* %3536, align 1, !tbaa !2450
  %3537 = load i64, i64* %PC
  %3538 = add i64 %3537, 1
  store i64 %3538, i64* %PC
  %3539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3540 = load i64, i64* %3539, align 8, !tbaa !2428
  %3541 = add i64 %3540, 8
  %3542 = inttoptr i64 %3540 to i64*
  %3543 = load i64, i64* %3542
  store i64 %3543, i64* %RBP, align 8, !tbaa !2428
  store i64 %3541, i64* %3539, align 8, !tbaa !2428
  %3544 = load i64, i64* %PC
  %3545 = add i64 %3544, 1
  store i64 %3545, i64* %PC
  %3546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3548 = load i64, i64* %3547, align 8, !tbaa !2428
  %3549 = inttoptr i64 %3548 to i64*
  %3550 = load i64, i64* %3549
  store i64 %3550, i64* %3546, align 8, !tbaa !2428
  %3551 = add i64 %3548, 8
  store i64 %3551, i64* %3547, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.7

block_401c77:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %3552 = load i64, i64* %PC
  %3553 = add i64 %3552, 18
  %3554 = load i64, i64* %PC
  %3555 = add i64 %3554, 6
  %3556 = load i64, i64* %PC
  %3557 = add i64 %3556, 6
  store i64 %3557, i64* %PC
  %3558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3559 = load i8, i8* %3558, align 1, !tbaa !2446
  store i8 %3559, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3561 = icmp ne i8 %3559, 0
  %3562 = select i1 %3561, i64 %3553, i64 %3555
  store i64 %3562, i64* %3560, align 8, !tbaa !2428
  %3563 = load i8, i8* %BRANCH_TAKEN
  %3564 = icmp eq i8 %3563, 1
  br i1 %3564, label %block_401c89, label %block_401c7d
}

; Function Attrs: noinline
define %struct.Memory* @sub_4017b0_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4017b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %47 to %"class.std::bitset"*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %51 to %union.vec128_t*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = load i64, i64* %RBP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %54, i64* %60
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %61 = load i64, i64* %RSP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  %64 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %65 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %66 = bitcast %union.vec128_t* %XMM0 to i8*
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = bitcast i8* %65 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = getelementptr inbounds i8, i8* %65, i64 8
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = bitcast i8* %66 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = getelementptr inbounds i8, i8* %66, i64 8
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = xor i64 %75, %70
  %80 = xor i64 %78, %73
  %81 = trunc i64 %79 to i32
  %82 = lshr i64 %79, 32
  %83 = trunc i64 %82 to i32
  %84 = bitcast i8* %64 to i32*
  store i32 %81, i32* %84, align 1, !tbaa !2452
  %85 = getelementptr inbounds i8, i8* %64, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 %83, i32* %86, align 1, !tbaa !2452
  %87 = trunc i64 %80 to i32
  %88 = getelementptr inbounds i8, i8* %64, i64 8
  %89 = bitcast i8* %88 to i32*
  store i32 %87, i32* %89, align 1, !tbaa !2452
  %90 = lshr i64 %80, 32
  %91 = trunc i64 %90 to i32
  %92 = getelementptr inbounds i8, i8* %64, i64 12
  %93 = bitcast i8* %92 to i32*
  store i32 %91, i32* %93, align 1, !tbaa !2452
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %RDI
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 12
  %102 = load i32, i32* %ESI
  %103 = zext i32 %102 to i64
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 16
  %109 = load i32, i32* %EDX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %113
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 24
  %116 = load i64, i64* %RCX
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 32
  %122 = load i64, i64* %R8
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %121 to i64*
  store i64 %122, i64* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 36
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 7
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  store i32 1325, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 32
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = load i64, i64* %RCX
  %138 = bitcast %union.vec128_t* %XMM0 to i8*
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = bitcast i8* %138 to <2 x float>*
  %142 = load <2 x float>, <2 x float>* %141, align 1
  %143 = extractelement <2 x float> %142, i32 0
  %144 = inttoptr i64 %137 to float*
  store float %143, float* %144
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 44
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i32*
  store i32 0, i32* %149
  br label %block_4017df

block_4017fe:                                     ; preds = %block_4017f2
  %150 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 8
  store i64 %152, i64* %PC
  %153 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 56) to double*)
  %154 = bitcast i8* %150 to double*
  store double %153, double* %154, align 1, !tbaa !2455
  %155 = getelementptr inbounds i8, i8* %150, i64 8
  %156 = bitcast i8* %155 to double*
  store double 0.000000e+00, double* %156, align 1, !tbaa !2455
  %157 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 8
  store i64 %159, i64* %PC
  %160 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 64) to double*)
  %161 = bitcast i8* %157 to double*
  store double %160, double* %161, align 1, !tbaa !2455
  %162 = getelementptr inbounds i8, i8* %157, i64 8
  %163 = bitcast i8* %162 to double*
  store double 0.000000e+00, double* %163, align 1, !tbaa !2455
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  store i64 %165, i64* %PC
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 36
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 7
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i32*
  %171 = load i32, i32* %170
  %172 = sext i32 %171 to i64
  %173 = mul nsw i64 %172, 3125
  %174 = trunc i64 %173 to i32
  %175 = and i64 %173, 4294967295
  store i64 %175, i64* %RCX, align 8, !tbaa !2428
  %176 = shl i64 %173, 32
  %177 = ashr exact i64 %176, 32
  %178 = icmp ne i64 %177, %173
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %179, i8* %180, align 1, !tbaa !2432
  %181 = and i32 %174, 255
  %182 = call i32 @llvm.ctpop.i32(i32 %181) #16
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  %185 = xor i8 %184, 1
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %185, i8* %186, align 1, !tbaa !2446
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %187, align 1, !tbaa !2447
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %188, align 1, !tbaa !2448
  %189 = lshr i32 %174, 31
  %190 = trunc i32 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %190, i8* %191, align 1, !tbaa !2449
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %179, i8* %192, align 1, !tbaa !2450
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 48
  %195 = load i32, i32* %EAX
  %196 = zext i32 %195 to i64
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 3
  store i64 %198, i64* %PC
  %199 = inttoptr i64 %194 to i32*
  store i32 %195, i32* %199
  %200 = load i32, i32* %ECX
  %201 = zext i32 %200 to i64
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 2
  store i64 %203, i64* %PC
  %204 = and i64 %201, 4294967295
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 1
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %209 = bitcast %union.anon* %208 to i32*
  %210 = load i32, i32* %209, align 8, !tbaa !2452
  %211 = sext i32 %210 to i64
  %212 = lshr i64 %211, 32
  store i64 %212, i64* %207, align 8, !tbaa !2428
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 48
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %214 to i32*
  %218 = load i32, i32* %217
  %219 = zext i32 %218 to i64
  store i64 %219, i64* %RCX, align 8, !tbaa !2428
  %220 = load i32, i32* %ECX
  %221 = zext i32 %220 to i64
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 2
  store i64 %223, i64* %PC
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %225 = bitcast %union.anon* %224 to i32*
  %226 = load i32, i32* %225, align 8, !tbaa !2452
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %229 = bitcast %union.anon* %228 to i32*
  %230 = load i32, i32* %229, align 8, !tbaa !2452
  %231 = zext i32 %230 to i64
  %232 = shl i64 %221, 32
  %233 = ashr exact i64 %232, 32
  %234 = shl nuw i64 %231, 32
  %235 = or i64 %234, %227
  %236 = sdiv i64 %235, %233
  %237 = shl i64 %236, 32
  %238 = ashr exact i64 %237, 32
  %239 = icmp eq i64 %236, %238
  br i1 %239, label %244, label %240

; <label>:240:                                    ; preds = %block_4017fe
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = load i64, i64* %241, align 8, !tbaa !2428
  %243 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %242, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:244:                                    ; preds = %block_4017fe
  %245 = srem i64 %235, %233
  %246 = getelementptr inbounds %union.anon, %union.anon* %224, i64 0, i32 0
  %247 = and i64 %236, 4294967295
  store i64 %247, i64* %246, align 8, !tbaa !2428
  %248 = getelementptr inbounds %union.anon, %union.anon* %228, i64 0, i32 0
  %249 = and i64 %245, 4294967295
  store i64 %249, i64* %248, align 8, !tbaa !2428
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %250, align 1, !tbaa !2432
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %251, align 1, !tbaa !2446
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %252, align 1, !tbaa !2447
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %253, align 1, !tbaa !2448
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %254, align 1, !tbaa !2449
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %255, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %240, %244
  %256 = phi %struct.Memory* [ %243, %240 ], [ %MEMORY.2, %244 ]
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 36
  %259 = load i32, i32* %EDX
  %260 = zext i32 %259 to i64
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %258 to i32*
  store i32 %259, i32* %263
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 36
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 3
  store i64 %267, i64* %PC
  %268 = inttoptr i64 %265 to i32*
  %269 = load i32, i32* %268
  %270 = zext i32 %269 to i64
  store i64 %270, i64* %RDX, align 8, !tbaa !2428
  %271 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %272 = load i32, i32* %EDX
  %273 = zext i32 %272 to i64
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 4
  store i64 %275, i64* %PC
  %276 = sitofp i32 %272 to double
  %277 = bitcast i8* %271 to double*
  store double %276, double* %277, align 1, !tbaa !2455
  %278 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %279 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %280 = bitcast %union.vec128_t* %XMM1 to i8*
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = bitcast i8* %279 to double*
  %284 = load double, double* %283, align 1
  %285 = getelementptr inbounds i8, i8* %279, i64 8
  %286 = bitcast i8* %285 to i64*
  %287 = load i64, i64* %286, align 1
  %288 = bitcast i8* %280 to double*
  %289 = load double, double* %288, align 1
  %290 = fsub double %284, %289
  %291 = bitcast i8* %278 to double*
  store double %290, double* %291, align 1, !tbaa !2455
  %292 = getelementptr inbounds i8, i8* %278, i64 8
  %293 = bitcast i8* %292 to i64*
  store i64 %287, i64* %293, align 1, !tbaa !2455
  %294 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %295 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %296 = bitcast %union.vec128_t* %XMM0 to i8*
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = bitcast i8* %295 to double*
  %300 = load double, double* %299, align 1
  %301 = getelementptr inbounds i8, i8* %295, i64 8
  %302 = bitcast i8* %301 to i64*
  %303 = load i64, i64* %302, align 1
  %304 = bitcast i8* %296 to double*
  %305 = load double, double* %304, align 1
  %306 = fdiv double %300, %305
  %307 = bitcast i8* %294 to double*
  store double %306, double* %307, align 1, !tbaa !2455
  %308 = getelementptr inbounds i8, i8* %294, i64 8
  %309 = bitcast i8* %308 to i64*
  store i64 %303, i64* %309, align 1, !tbaa !2455
  %310 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %311 = bitcast %union.vec128_t* %XMM2 to i8*
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 4
  store i64 %313, i64* %PC
  %314 = bitcast i8* %310 to <2 x i32>*
  %315 = load <2 x i32>, <2 x i32>* %314, align 1
  %316 = getelementptr inbounds i8, i8* %310, i64 8
  %317 = bitcast i8* %316 to <2 x i32>*
  %318 = load <2 x i32>, <2 x i32>* %317, align 1
  %319 = bitcast i8* %311 to double*
  %320 = load double, double* %319, align 1
  %321 = fptrunc double %320 to float
  %322 = bitcast i8* %310 to float*
  store float %321, float* %322, align 1, !tbaa !2453
  %323 = extractelement <2 x i32> %315, i32 1
  %324 = getelementptr inbounds i8, i8* %310, i64 4
  %325 = bitcast i8* %324 to i32*
  store i32 %323, i32* %325, align 1, !tbaa !2453
  %326 = extractelement <2 x i32> %318, i32 0
  %327 = bitcast i8* %316 to i32*
  store i32 %326, i32* %327, align 1, !tbaa !2453
  %328 = extractelement <2 x i32> %318, i32 1
  %329 = getelementptr inbounds i8, i8* %310, i64 12
  %330 = bitcast i8* %329 to i32*
  store i32 %328, i32* %330, align 1, !tbaa !2453
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 8
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 4
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to i64*
  %336 = load i64, i64* %335
  store i64 %336, i64* %RSI, align 8, !tbaa !2428
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 12
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 3
  store i64 %340, i64* %PC
  %341 = inttoptr i64 %338 to i32*
  %342 = load i32, i32* %341
  %343 = zext i32 %342 to i64
  store i64 %343, i64* %RDX, align 8, !tbaa !2428
  %344 = load i64, i64* %RDX
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 44
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 4
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %346 to i32*
  %350 = load i32, i32* %349
  %351 = shl i64 %344, 32
  %352 = ashr exact i64 %351, 32
  %353 = sext i32 %350 to i64
  %354 = mul nsw i64 %353, %352
  %355 = trunc i64 %354 to i32
  %356 = and i64 %354, 4294967295
  store i64 %356, i64* %RDX, align 8, !tbaa !2428
  %357 = shl i64 %354, 32
  %358 = ashr exact i64 %357, 32
  %359 = icmp ne i64 %358, %354
  %360 = zext i1 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %360, i8* %361, align 1, !tbaa !2432
  %362 = and i32 %355, 255
  %363 = call i32 @llvm.ctpop.i32(i32 %362) #16
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = xor i8 %365, 1
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %366, i8* %367, align 1, !tbaa !2446
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %368, align 1, !tbaa !2447
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %369, align 1, !tbaa !2448
  %370 = lshr i32 %355, 31
  %371 = trunc i32 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %371, i8* %372, align 1, !tbaa !2449
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %360, i8* %373, align 1, !tbaa !2450
  %374 = load i64, i64* %RDX
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 40
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC
  %379 = trunc i64 %374 to i32
  %380 = inttoptr i64 %376 to i32*
  %381 = load i32, i32* %380
  %382 = add i32 %381, %379
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RDX, align 8, !tbaa !2428
  %384 = icmp ult i32 %382, %379
  %385 = icmp ult i32 %382, %381
  %386 = or i1 %384, %385
  %387 = zext i1 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %387, i8* %388, align 1, !tbaa !2432
  %389 = and i32 %382, 255
  %390 = call i32 @llvm.ctpop.i32(i32 %389) #16
  %391 = trunc i32 %390 to i8
  %392 = and i8 %391, 1
  %393 = xor i8 %392, 1
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %393, i8* %394, align 1, !tbaa !2446
  %395 = xor i32 %381, %379
  %396 = xor i32 %395, %382
  %397 = lshr i32 %396, 4
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %399, i8* %400, align 1, !tbaa !2447
  %401 = icmp eq i32 %382, 0
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %402, i8* %403, align 1, !tbaa !2448
  %404 = lshr i32 %382, 31
  %405 = trunc i32 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %405, i8* %406, align 1, !tbaa !2449
  %407 = lshr i32 %379, 31
  %408 = lshr i32 %381, 31
  %409 = xor i32 %404, %407
  %410 = xor i32 %404, %408
  %411 = add nuw nsw i32 %409, %410
  %412 = icmp eq i32 %411, 2
  %413 = zext i1 %412 to i8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %413, i8* %414, align 1, !tbaa !2450
  %415 = load i32, i32* %EDX
  %416 = zext i32 %415 to i64
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 3
  store i64 %418, i64* %PC
  %419 = shl i64 %416, 32
  %420 = ashr exact i64 %419, 32
  store i64 %420, i64* %RDI, align 8, !tbaa !2428
  %421 = load i64, i64* %RSI
  %422 = load i64, i64* %RDI
  %423 = mul i64 %422, 4
  %424 = add i64 %423, %421
  %425 = bitcast %union.vec128_t* %XMM0 to i8*
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 5
  store i64 %427, i64* %PC
  %428 = bitcast i8* %425 to <2 x float>*
  %429 = load <2 x float>, <2 x float>* %428, align 1
  %430 = extractelement <2 x float> %429, i32 0
  %431 = inttoptr i64 %424 to float*
  store float %430, float* %431
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 8
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 4
  store i64 %435, i64* %PC
  %436 = inttoptr i64 %433 to i64*
  %437 = load i64, i64* %436
  store i64 %437, i64* %RSI, align 8, !tbaa !2428
  %438 = load i64, i64* %RBP
  %439 = sub i64 %438, 12
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 3
  store i64 %441, i64* %PC
  %442 = inttoptr i64 %439 to i32*
  %443 = load i32, i32* %442
  %444 = zext i32 %443 to i64
  store i64 %444, i64* %RDX, align 8, !tbaa !2428
  %445 = load i64, i64* %RDX
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 44
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i32*
  %451 = load i32, i32* %450
  %452 = shl i64 %445, 32
  %453 = ashr exact i64 %452, 32
  %454 = sext i32 %451 to i64
  %455 = mul nsw i64 %454, %453
  %456 = trunc i64 %455 to i32
  %457 = and i64 %455, 4294967295
  store i64 %457, i64* %RDX, align 8, !tbaa !2428
  %458 = shl i64 %455, 32
  %459 = ashr exact i64 %458, 32
  %460 = icmp ne i64 %459, %455
  %461 = zext i1 %460 to i8
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %461, i8* %462, align 1, !tbaa !2432
  %463 = and i32 %456, 255
  %464 = call i32 @llvm.ctpop.i32(i32 %463) #16
  %465 = trunc i32 %464 to i8
  %466 = and i8 %465, 1
  %467 = xor i8 %466, 1
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %467, i8* %468, align 1, !tbaa !2446
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %469, align 1, !tbaa !2447
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %470, align 1, !tbaa !2448
  %471 = lshr i32 %456, 31
  %472 = trunc i32 %471 to i8
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %472, i8* %473, align 1, !tbaa !2449
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %461, i8* %474, align 1, !tbaa !2450
  %475 = load i64, i64* %RDX
  %476 = load i64, i64* %RBP
  %477 = sub i64 %476, 40
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 3
  store i64 %479, i64* %PC
  %480 = trunc i64 %475 to i32
  %481 = inttoptr i64 %477 to i32*
  %482 = load i32, i32* %481
  %483 = add i32 %482, %480
  %484 = zext i32 %483 to i64
  store i64 %484, i64* %RDX, align 8, !tbaa !2428
  %485 = icmp ult i32 %483, %480
  %486 = icmp ult i32 %483, %482
  %487 = or i1 %485, %486
  %488 = zext i1 %487 to i8
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %488, i8* %489, align 1, !tbaa !2432
  %490 = and i32 %483, 255
  %491 = call i32 @llvm.ctpop.i32(i32 %490) #16
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = xor i8 %493, 1
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %494, i8* %495, align 1, !tbaa !2446
  %496 = xor i32 %482, %480
  %497 = xor i32 %496, %483
  %498 = lshr i32 %497, 4
  %499 = trunc i32 %498 to i8
  %500 = and i8 %499, 1
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %500, i8* %501, align 1, !tbaa !2447
  %502 = icmp eq i32 %483, 0
  %503 = zext i1 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %503, i8* %504, align 1, !tbaa !2448
  %505 = lshr i32 %483, 31
  %506 = trunc i32 %505 to i8
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %506, i8* %507, align 1, !tbaa !2449
  %508 = lshr i32 %480, 31
  %509 = lshr i32 %482, 31
  %510 = xor i32 %505, %508
  %511 = xor i32 %505, %509
  %512 = add nuw nsw i32 %510, %511
  %513 = icmp eq i32 %512, 2
  %514 = zext i1 %513 to i8
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %514, i8* %515, align 1, !tbaa !2450
  %516 = load i32, i32* %EDX
  %517 = zext i32 %516 to i64
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 3
  store i64 %519, i64* %PC
  %520 = shl i64 %517, 32
  %521 = ashr exact i64 %520, 32
  store i64 %521, i64* %RDI, align 8, !tbaa !2428
  %522 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %523 = load i64, i64* %RSI
  %524 = load i64, i64* %RDI
  %525 = mul i64 %524, 4
  %526 = add i64 %525, %523
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = inttoptr i64 %526 to float*
  %530 = load float, float* %529
  %531 = bitcast i8* %522 to float*
  store float %530, float* %531, align 1, !tbaa !2453
  %532 = getelementptr inbounds i8, i8* %522, i64 4
  %533 = bitcast i8* %532 to float*
  store float 0.000000e+00, float* %533, align 1, !tbaa !2453
  %534 = getelementptr inbounds i8, i8* %522, i64 8
  %535 = bitcast i8* %534 to float*
  store float 0.000000e+00, float* %535, align 1, !tbaa !2453
  %536 = getelementptr inbounds i8, i8* %522, i64 12
  %537 = bitcast i8* %536 to float*
  store float 0.000000e+00, float* %537, align 1, !tbaa !2453
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 32
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i64*
  %543 = load i64, i64* %542
  store i64 %543, i64* %RSI, align 8, !tbaa !2428
  %544 = bitcast %union.vec128_t* %XMM0 to i8*
  %545 = load i64, i64* %RSI
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 3
  store i64 %547, i64* %PC
  %548 = bitcast i8* %544 to <2 x float>*
  %549 = load <2 x float>, <2 x float>* %548, align 1
  %550 = extractelement <2 x float> %549, i32 0
  %551 = inttoptr i64 %545 to float*
  %552 = load float, float* %551
  %553 = fcmp uno float %550, %552
  br i1 %553, label %554, label %566

; <label>:554:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %555 = fadd float %550, %552
  %556 = bitcast float %555 to i32
  %557 = and i32 %556, 2143289344
  %558 = icmp eq i32 %557, 2139095040
  %559 = and i32 %556, 4194303
  %560 = icmp ne i32 %559, 0
  %561 = and i1 %558, %560
  br i1 %561, label %562, label %572

; <label>:562:                                    ; preds = %554
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %564 = load i64, i64* %563, align 8, !tbaa !2428
  %565 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %564, %struct.Memory* %256) #17
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:566:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %567 = fcmp ogt float %550, %552
  br i1 %567, label %572, label %568

; <label>:568:                                    ; preds = %566
  %569 = fcmp olt float %550, %552
  br i1 %569, label %572, label %570

; <label>:570:                                    ; preds = %568
  %571 = fcmp oeq float %550, %552
  br i1 %571, label %572, label %579

; <label>:572:                                    ; preds = %570, %568, %566, %554
  %573 = phi i8 [ 0, %566 ], [ 0, %568 ], [ 1, %570 ], [ 1, %554 ]
  %574 = phi i8 [ 0, %566 ], [ 0, %568 ], [ 0, %570 ], [ 1, %554 ]
  %575 = phi i8 [ 0, %566 ], [ 1, %568 ], [ 0, %570 ], [ 1, %554 ]
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %573, i8* %576, align 1, !tbaa !2451
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %574, i8* %577, align 1, !tbaa !2451
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %575, i8* %578, align 1, !tbaa !2451
  br label %579

; <label>:579:                                    ; preds = %572, %570
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %580, align 1, !tbaa !2451
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %581, align 1, !tbaa !2451
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %582, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %562, %579
  %583 = phi %struct.Memory* [ %565, %562 ], [ %256, %579 ]
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 38
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 6
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 6
  store i64 %589, i64* %PC
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %591 = load i8, i8* %590, align 1, !tbaa !2432
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %593 = load i8, i8* %592, align 1, !tbaa !2448
  %594 = or i8 %593, %591
  %595 = icmp ne i8 %594, 0
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %598 = select i1 %595, i64 %585, i64 %587
  store i64 %598, i64* %597, align 8, !tbaa !2428
  %599 = load i8, i8* %BRANCH_TAKEN
  %600 = icmp eq i8 %599, 1
  %601 = load i64, i64* %RBP
  br i1 %600, label %block_401894, label %block_401874

block_401874:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %602 = sub i64 %601, 8
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 4
  store i64 %604, i64* %PC
  %605 = inttoptr i64 %602 to i64*
  %606 = load i64, i64* %605
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 12
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 3
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  %612 = load i32, i32* %611
  %613 = zext i32 %612 to i64
  store i64 %613, i64* %RCX, align 8, !tbaa !2428
  %614 = load i64, i64* %RCX
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 44
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 4
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i32*
  %620 = load i32, i32* %619
  %621 = shl i64 %614, 32
  %622 = ashr exact i64 %621, 32
  %623 = sext i32 %620 to i64
  %624 = mul nsw i64 %623, %622
  %625 = trunc i64 %624 to i32
  %626 = and i64 %624, 4294967295
  store i64 %626, i64* %RCX, align 8, !tbaa !2428
  %627 = shl i64 %624, 32
  %628 = ashr exact i64 %627, 32
  %629 = icmp ne i64 %628, %624
  %630 = zext i1 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %630, i8* %631, align 1, !tbaa !2432
  %632 = and i32 %625, 255
  %633 = call i32 @llvm.ctpop.i32(i32 %632) #16
  %634 = trunc i32 %633 to i8
  %635 = and i8 %634, 1
  %636 = xor i8 %635, 1
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %636, i8* %637, align 1, !tbaa !2446
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %638, align 1, !tbaa !2447
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %639, align 1, !tbaa !2448
  %640 = lshr i32 %625, 31
  %641 = trunc i32 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %641, i8* %642, align 1, !tbaa !2449
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %630, i8* %643, align 1, !tbaa !2450
  %644 = load i64, i64* %RCX
  %645 = load i64, i64* %RBP
  %646 = sub i64 %645, 40
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 3
  store i64 %648, i64* %PC
  %649 = trunc i64 %644 to i32
  %650 = inttoptr i64 %646 to i32*
  %651 = load i32, i32* %650
  %652 = add i32 %651, %649
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %654 = icmp ult i32 %652, %649
  %655 = icmp ult i32 %652, %651
  %656 = or i1 %654, %655
  %657 = zext i1 %656 to i8
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %657, i8* %658, align 1, !tbaa !2432
  %659 = and i32 %652, 255
  %660 = call i32 @llvm.ctpop.i32(i32 %659) #16
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = xor i8 %662, 1
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %663, i8* %664, align 1, !tbaa !2446
  %665 = xor i32 %651, %649
  %666 = xor i32 %665, %652
  %667 = lshr i32 %666, 4
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %669, i8* %670, align 1, !tbaa !2447
  %671 = icmp eq i32 %652, 0
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %672, i8* %673, align 1, !tbaa !2448
  %674 = lshr i32 %652, 31
  %675 = trunc i32 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2449
  %677 = lshr i32 %649, 31
  %678 = lshr i32 %651, 31
  %679 = xor i32 %674, %677
  %680 = xor i32 %674, %678
  %681 = add nuw nsw i32 %679, %680
  %682 = icmp eq i32 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i32, i32* %ECX
  %686 = zext i32 %685 to i64
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC
  %689 = shl i64 %686, 32
  %690 = ashr exact i64 %689, 32
  store i64 %690, i64* %RDX, align 8, !tbaa !2428
  %691 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %692 = load i64, i64* %RAX
  %693 = load i64, i64* %RDX
  %694 = mul i64 %693, 4
  %695 = add i64 %694, %692
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 5
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to float*
  %699 = load float, float* %698
  %700 = bitcast i8* %691 to float*
  store float %699, float* %700, align 1, !tbaa !2453
  %701 = getelementptr inbounds i8, i8* %691, i64 4
  %702 = bitcast i8* %701 to float*
  store float 0.000000e+00, float* %702, align 1, !tbaa !2453
  %703 = getelementptr inbounds i8, i8* %691, i64 8
  %704 = bitcast i8* %703 to float*
  store float 0.000000e+00, float* %704, align 1, !tbaa !2453
  %705 = getelementptr inbounds i8, i8* %691, i64 12
  %706 = bitcast i8* %705 to float*
  store float 0.000000e+00, float* %706, align 1, !tbaa !2453
  %707 = load i64, i64* %RBP
  %708 = sub i64 %707, 52
  %709 = bitcast %union.vec128_t* %XMM0 to i8*
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 5
  store i64 %711, i64* %PC
  %712 = bitcast i8* %709 to <2 x float>*
  %713 = load <2 x float>, <2 x float>* %712, align 1
  %714 = extractelement <2 x float> %713, i32 0
  %715 = inttoptr i64 %708 to float*
  store float %714, float* %715
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 18
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 5
  store i64 %719, i64* %PC
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %717, i64* %720, align 8, !tbaa !2428
  br label %block_4018a1

block_401964:                                     ; preds = %block_40191a
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 5
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 5
  store i64 %724, i64* %PC
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %722, i64* %725, align 8, !tbaa !2428
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 44
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 3
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  %731 = load i32, i32* %730
  %732 = zext i32 %731 to i64
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = load i64, i64* %RAX
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 3
  store i64 %735, i64* %PC
  %736 = trunc i64 %733 to i32
  %737 = add i32 1, %736
  %738 = zext i32 %737 to i64
  store i64 %738, i64* %RAX, align 8, !tbaa !2428
  %739 = icmp ult i32 %737, %736
  %740 = icmp ult i32 %737, 1
  %741 = or i1 %739, %740
  %742 = zext i1 %741 to i8
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %742, i8* %743, align 1, !tbaa !2432
  %744 = and i32 %737, 255
  %745 = call i32 @llvm.ctpop.i32(i32 %744) #16
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  %748 = xor i8 %747, 1
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %748, i8* %749, align 1, !tbaa !2446
  %750 = xor i64 1, %733
  %751 = trunc i64 %750 to i32
  %752 = xor i32 %751, %737
  %753 = lshr i32 %752, 4
  %754 = trunc i32 %753 to i8
  %755 = and i8 %754, 1
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %755, i8* %756, align 1, !tbaa !2447
  %757 = icmp eq i32 %737, 0
  %758 = zext i1 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %758, i8* %759, align 1, !tbaa !2448
  %760 = lshr i32 %737, 31
  %761 = trunc i32 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %761, i8* %762, align 1, !tbaa !2449
  %763 = lshr i32 %736, 31
  %764 = xor i32 %760, %763
  %765 = add nuw nsw i32 %764, %760
  %766 = icmp eq i32 %765, 2
  %767 = zext i1 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %767, i8* %768, align 1, !tbaa !2450
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 44
  %771 = load i32, i32* %EAX
  %772 = zext i32 %771 to i64
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 3
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %770 to i32*
  store i32 %771, i32* %775
  %776 = load i64, i64* %PC
  %777 = sub i64 %776, 107
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 5
  store i64 %779, i64* %PC
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %777, i64* %780, align 8, !tbaa !2428
  br label %block_401907

block_4018e2:                                     ; preds = %block_4018d6
  %781 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %782 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %783 = bitcast %union.vec128_t* %XMM0 to i8*
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 3
  store i64 %785, i64* %PC
  %786 = bitcast i8* %782 to i64*
  %787 = load i64, i64* %786, align 1
  %788 = getelementptr inbounds i8, i8* %782, i64 8
  %789 = bitcast i8* %788 to i64*
  %790 = load i64, i64* %789, align 1
  %791 = bitcast i8* %783 to i64*
  %792 = load i64, i64* %791, align 1
  %793 = getelementptr inbounds i8, i8* %783, i64 8
  %794 = bitcast i8* %793 to i64*
  %795 = load i64, i64* %794, align 1
  %796 = xor i64 %792, %787
  %797 = xor i64 %795, %790
  %798 = trunc i64 %796 to i32
  %799 = lshr i64 %796, 32
  %800 = trunc i64 %799 to i32
  %801 = bitcast i8* %781 to i32*
  store i32 %798, i32* %801, align 1, !tbaa !2452
  %802 = getelementptr inbounds i8, i8* %781, i64 4
  %803 = bitcast i8* %802 to i32*
  store i32 %800, i32* %803, align 1, !tbaa !2452
  %804 = trunc i64 %797 to i32
  %805 = getelementptr inbounds i8, i8* %781, i64 8
  %806 = bitcast i8* %805 to i32*
  store i32 %804, i32* %806, align 1, !tbaa !2452
  %807 = lshr i64 %797, 32
  %808 = trunc i64 %807 to i32
  %809 = getelementptr inbounds i8, i8* %781, i64 12
  %810 = bitcast i8* %809 to i32*
  store i32 %808, i32* %810, align 1, !tbaa !2452
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 24
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 4
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %812 to i64*
  %816 = load i64, i64* %815
  store i64 %816, i64* %RAX, align 8, !tbaa !2428
  %817 = load i64, i64* %RBP
  %818 = sub i64 %817, 40
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 4
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %818 to i32*
  %822 = load i32, i32* %821
  %823 = sext i32 %822 to i64
  store i64 %823, i64* %RCX, align 8, !tbaa !2428
  %824 = load i64, i64* %RAX
  %825 = load i64, i64* %RCX
  %826 = mul i64 %825, 4
  %827 = add i64 %826, %824
  %828 = bitcast %union.vec128_t* %XMM0 to i8*
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = bitcast i8* %828 to <2 x float>*
  %832 = load <2 x float>, <2 x float>* %831, align 1
  %833 = extractelement <2 x float> %832, i32 0
  %834 = inttoptr i64 %827 to float*
  store float %833, float* %834
  %835 = load i64, i64* %RBP
  %836 = sub i64 %835, 40
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 3
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to i32*
  %840 = load i32, i32* %839
  %841 = zext i32 %840 to i64
  store i64 %841, i64* %RAX, align 8, !tbaa !2428
  %842 = load i64, i64* %RAX
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 3
  store i64 %844, i64* %PC
  %845 = trunc i64 %842 to i32
  %846 = add i32 1, %845
  %847 = zext i32 %846 to i64
  store i64 %847, i64* %RAX, align 8, !tbaa !2428
  %848 = icmp ult i32 %846, %845
  %849 = icmp ult i32 %846, 1
  %850 = or i1 %848, %849
  %851 = zext i1 %850 to i8
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %851, i8* %852, align 1, !tbaa !2432
  %853 = and i32 %846, 255
  %854 = call i32 @llvm.ctpop.i32(i32 %853) #16
  %855 = trunc i32 %854 to i8
  %856 = and i8 %855, 1
  %857 = xor i8 %856, 1
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %857, i8* %858, align 1, !tbaa !2446
  %859 = xor i64 1, %842
  %860 = trunc i64 %859 to i32
  %861 = xor i32 %860, %846
  %862 = lshr i32 %861, 4
  %863 = trunc i32 %862 to i8
  %864 = and i8 %863, 1
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %864, i8* %865, align 1, !tbaa !2447
  %866 = icmp eq i32 %846, 0
  %867 = zext i1 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %867, i8* %868, align 1, !tbaa !2448
  %869 = lshr i32 %846, 31
  %870 = trunc i32 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %870, i8* %871, align 1, !tbaa !2449
  %872 = lshr i32 %845, 31
  %873 = xor i32 %869, %872
  %874 = add nuw nsw i32 %873, %869
  %875 = icmp eq i32 %874, 2
  %876 = zext i1 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %876, i8* %877, align 1, !tbaa !2450
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 40
  %880 = load i32, i32* %EAX
  %881 = zext i32 %880 to i64
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 3
  store i64 %883, i64* %PC
  %884 = inttoptr i64 %879 to i32*
  store i32 %880, i32* %884
  %885 = load i64, i64* %PC
  %886 = sub i64 %885, 37
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 5
  store i64 %888, i64* %PC
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %886, i64* %889, align 8, !tbaa !2428
  br label %block_4018d6

block_4017df:                                     ; preds = %block_4018bc, %block_4017b0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4017b0 ], [ %MEMORY.2, %block_4018bc ]
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 44
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 3
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i32*
  %895 = load i32, i32* %894
  %896 = zext i32 %895 to i64
  store i64 %896, i64* %RAX, align 8, !tbaa !2428
  %897 = load i32, i32* %EAX
  %898 = zext i32 %897 to i64
  %899 = load i64, i64* %RBP
  %900 = sub i64 %899, 16
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 3
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i32*
  %904 = load i32, i32* %903
  %905 = sub i32 %897, %904
  %906 = icmp ult i32 %897, %904
  %907 = zext i1 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %907, i8* %908, align 1, !tbaa !2432
  %909 = and i32 %905, 255
  %910 = call i32 @llvm.ctpop.i32(i32 %909) #16
  %911 = trunc i32 %910 to i8
  %912 = and i8 %911, 1
  %913 = xor i8 %912, 1
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %913, i8* %914, align 1, !tbaa !2446
  %915 = xor i32 %904, %897
  %916 = xor i32 %915, %905
  %917 = lshr i32 %916, 4
  %918 = trunc i32 %917 to i8
  %919 = and i8 %918, 1
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %919, i8* %920, align 1, !tbaa !2447
  %921 = icmp eq i32 %905, 0
  %922 = zext i1 %921 to i8
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %922, i8* %923, align 1, !tbaa !2448
  %924 = lshr i32 %905, 31
  %925 = trunc i32 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %925, i8* %926, align 1, !tbaa !2449
  %927 = lshr i32 %897, 31
  %928 = lshr i32 %904, 31
  %929 = xor i32 %928, %927
  %930 = xor i32 %924, %927
  %931 = add nuw nsw i32 %930, %929
  %932 = icmp eq i32 %931, 2
  %933 = zext i1 %932 to i8
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %933, i8* %934, align 1, !tbaa !2450
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 234
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 6
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 6
  store i64 %940, i64* %PC
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %942 = load i8, i8* %941, align 1, !tbaa !2449
  %943 = icmp ne i8 %942, 0
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %945 = load i8, i8* %944, align 1, !tbaa !2450
  %946 = icmp ne i8 %945, 0
  %947 = xor i1 %943, %946
  %948 = xor i1 %947, true
  %949 = zext i1 %948 to i8
  store i8 %949, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %951 = select i1 %947, i64 %938, i64 %936
  store i64 %951, i64* %950, align 8, !tbaa !2428
  %952 = load i8, i8* %BRANCH_TAKEN
  %953 = icmp eq i8 %952, 1
  %954 = load i64, i64* %RBP
  %955 = sub i64 %954, 40
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 7
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i32*
  store i32 0, i32* %958
  br i1 %953, label %block_4018d6, label %block_4017f2

block_401977:                                     ; preds = %block_401907
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 1
  store i64 %960, i64* %PC
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %962 = load i64, i64* %961, align 8, !tbaa !2428
  %963 = add i64 %962, 8
  %964 = inttoptr i64 %962 to i64*
  %965 = load i64, i64* %964
  store i64 %965, i64* %RBP, align 8, !tbaa !2428
  store i64 %963, i64* %961, align 8, !tbaa !2428
  %966 = load i64, i64* %PC
  %967 = add i64 %966, 1
  store i64 %967, i64* %PC
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %970 = load i64, i64* %969, align 8, !tbaa !2428
  %971 = inttoptr i64 %970 to i64*
  %972 = load i64, i64* %971
  store i64 %972, i64* %968, align 8, !tbaa !2428
  %973 = add i64 %970, 8
  store i64 %973, i64* %969, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_4018d6:                                     ; preds = %block_4017df, %block_4018e2
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4017df ], [ %MEMORY.1, %block_4018e2 ]
  %974 = load i64, i64* %RBP
  %975 = sub i64 %974, 40
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 3
  store i64 %977, i64* %PC
  %978 = inttoptr i64 %975 to i32*
  %979 = load i32, i32* %978
  %980 = zext i32 %979 to i64
  store i64 %980, i64* %RAX, align 8, !tbaa !2428
  %981 = load i32, i32* %EAX
  %982 = zext i32 %981 to i64
  %983 = load i64, i64* %RBP
  %984 = sub i64 %983, 16
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 3
  store i64 %986, i64* %PC
  %987 = inttoptr i64 %984 to i32*
  %988 = load i32, i32* %987
  %989 = sub i32 %981, %988
  %990 = icmp ult i32 %981, %988
  %991 = zext i1 %990 to i8
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %991, i8* %992, align 1, !tbaa !2432
  %993 = and i32 %989, 255
  %994 = call i32 @llvm.ctpop.i32(i32 %993) #16
  %995 = trunc i32 %994 to i8
  %996 = and i8 %995, 1
  %997 = xor i8 %996, 1
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %997, i8* %998, align 1, !tbaa !2446
  %999 = xor i32 %988, %981
  %1000 = xor i32 %999, %989
  %1001 = lshr i32 %1000, 4
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1003, i8* %1004, align 1, !tbaa !2447
  %1005 = icmp eq i32 %989, 0
  %1006 = zext i1 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1006, i8* %1007, align 1, !tbaa !2448
  %1008 = lshr i32 %989, 31
  %1009 = trunc i32 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1009, i8* %1010, align 1, !tbaa !2449
  %1011 = lshr i32 %981, 31
  %1012 = lshr i32 %988, 31
  %1013 = xor i32 %1012, %1011
  %1014 = xor i32 %1008, %1011
  %1015 = add nuw nsw i32 %1014, %1013
  %1016 = icmp eq i32 %1015, 2
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1017, i8* %1018, align 1, !tbaa !2450
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 36
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 6
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 6
  store i64 %1024, i64* %PC
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1026 = load i8, i8* %1025, align 1, !tbaa !2449
  %1027 = icmp ne i8 %1026, 0
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1029 = load i8, i8* %1028, align 1, !tbaa !2450
  %1030 = icmp ne i8 %1029, 0
  %1031 = xor i1 %1027, %1030
  %1032 = xor i1 %1031, true
  %1033 = zext i1 %1032 to i8
  store i8 %1033, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1035 = select i1 %1031, i64 %1022, i64 %1020
  store i64 %1035, i64* %1034, align 8, !tbaa !2428
  %1036 = load i8, i8* %BRANCH_TAKEN
  %1037 = icmp eq i8 %1036, 1
  br i1 %1037, label %block_401900, label %block_4018e2

block_4017f2:                                     ; preds = %block_4018a1, %block_4017df
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_4017df ], [ %MEMORY.3, %block_4018a1 ]
  %1038 = load i64, i64* %RBP
  %1039 = sub i64 %1038, 40
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 3
  store i64 %1041, i64* %PC
  %1042 = inttoptr i64 %1039 to i32*
  %1043 = load i32, i32* %1042
  %1044 = zext i32 %1043 to i64
  store i64 %1044, i64* %RAX, align 8, !tbaa !2428
  %1045 = load i32, i32* %EAX
  %1046 = zext i32 %1045 to i64
  %1047 = load i64, i64* %RBP
  %1048 = sub i64 %1047, 16
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 3
  store i64 %1050, i64* %PC
  %1051 = inttoptr i64 %1048 to i32*
  %1052 = load i32, i32* %1051
  %1053 = sub i32 %1045, %1052
  %1054 = icmp ult i32 %1045, %1052
  %1055 = zext i1 %1054 to i8
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1055, i8* %1056, align 1, !tbaa !2432
  %1057 = and i32 %1053, 255
  %1058 = call i32 @llvm.ctpop.i32(i32 %1057) #16
  %1059 = trunc i32 %1058 to i8
  %1060 = and i8 %1059, 1
  %1061 = xor i8 %1060, 1
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1061, i8* %1062, align 1, !tbaa !2446
  %1063 = xor i32 %1052, %1045
  %1064 = xor i32 %1063, %1053
  %1065 = lshr i32 %1064, 4
  %1066 = trunc i32 %1065 to i8
  %1067 = and i8 %1066, 1
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1067, i8* %1068, align 1, !tbaa !2447
  %1069 = icmp eq i32 %1053, 0
  %1070 = zext i1 %1069 to i8
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1070, i8* %1071, align 1, !tbaa !2448
  %1072 = lshr i32 %1053, 31
  %1073 = trunc i32 %1072 to i8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1073, i8* %1074, align 1, !tbaa !2449
  %1075 = lshr i32 %1045, 31
  %1076 = lshr i32 %1052, 31
  %1077 = xor i32 %1076, %1075
  %1078 = xor i32 %1072, %1075
  %1079 = add nuw nsw i32 %1078, %1077
  %1080 = icmp eq i32 %1079, 2
  %1081 = zext i1 %1080 to i8
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1081, i8* %1082, align 1, !tbaa !2450
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 196
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 6
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 6
  store i64 %1088, i64* %PC
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1090 = load i8, i8* %1089, align 1, !tbaa !2449
  %1091 = icmp ne i8 %1090, 0
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1093 = load i8, i8* %1092, align 1, !tbaa !2450
  %1094 = icmp ne i8 %1093, 0
  %1095 = xor i1 %1091, %1094
  %1096 = xor i1 %1095, true
  %1097 = zext i1 %1096 to i8
  store i8 %1097, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1099 = select i1 %1095, i64 %1086, i64 %1084
  store i64 %1099, i64* %1098, align 8, !tbaa !2428
  %1100 = load i8, i8* %BRANCH_TAKEN
  %1101 = icmp eq i8 %1100, 1
  br i1 %1101, label %block_4018bc, label %block_4017fe

block_4018bc:                                     ; preds = %block_4017f2
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 5
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1103, i64* %1106, align 8, !tbaa !2428
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 44
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 3
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i32*
  %1112 = load i32, i32* %1111
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RAX, align 8, !tbaa !2428
  %1114 = load i64, i64* %RAX
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 3
  store i64 %1116, i64* %PC
  %1117 = trunc i64 %1114 to i32
  %1118 = add i32 1, %1117
  %1119 = zext i32 %1118 to i64
  store i64 %1119, i64* %RAX, align 8, !tbaa !2428
  %1120 = icmp ult i32 %1118, %1117
  %1121 = icmp ult i32 %1118, 1
  %1122 = or i1 %1120, %1121
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1123, i8* %1124, align 1, !tbaa !2432
  %1125 = and i32 %1118, 255
  %1126 = call i32 @llvm.ctpop.i32(i32 %1125) #16
  %1127 = trunc i32 %1126 to i8
  %1128 = and i8 %1127, 1
  %1129 = xor i8 %1128, 1
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1129, i8* %1130, align 1, !tbaa !2446
  %1131 = xor i64 1, %1114
  %1132 = trunc i64 %1131 to i32
  %1133 = xor i32 %1132, %1118
  %1134 = lshr i32 %1133, 4
  %1135 = trunc i32 %1134 to i8
  %1136 = and i8 %1135, 1
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1136, i8* %1137, align 1, !tbaa !2447
  %1138 = icmp eq i32 %1118, 0
  %1139 = zext i1 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1139, i8* %1140, align 1, !tbaa !2448
  %1141 = lshr i32 %1118, 31
  %1142 = trunc i32 %1141 to i8
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1142, i8* %1143, align 1, !tbaa !2449
  %1144 = lshr i32 %1117, 31
  %1145 = xor i32 %1141, %1144
  %1146 = add nuw nsw i32 %1145, %1141
  %1147 = icmp eq i32 %1146, 2
  %1148 = zext i1 %1147 to i8
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1148, i8* %1149, align 1, !tbaa !2450
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 44
  %1152 = load i32, i32* %EAX
  %1153 = zext i32 %1152 to i64
  %1154 = load i64, i64* %PC
  %1155 = add i64 %1154, 3
  store i64 %1155, i64* %PC
  %1156 = inttoptr i64 %1151 to i32*
  store i32 %1152, i32* %1156
  %1157 = load i64, i64* %PC
  %1158 = sub i64 %1157, 235
  %1159 = load i64, i64* %PC
  %1160 = add i64 %1159, 5
  store i64 %1160, i64* %PC
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1158, i64* %1161, align 8, !tbaa !2428
  br label %block_4017df

block_401926:                                     ; preds = %block_40191a
  %1162 = load i64, i64* %RBP
  %1163 = sub i64 %1162, 24
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 4
  store i64 %1165, i64* %PC
  %1166 = inttoptr i64 %1163 to i64*
  %1167 = load i64, i64* %1166
  store i64 %1167, i64* %RAX, align 8, !tbaa !2428
  %1168 = load i64, i64* %RBP
  %1169 = sub i64 %1168, 40
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 4
  store i64 %1171, i64* %PC
  %1172 = inttoptr i64 %1169 to i32*
  %1173 = load i32, i32* %1172
  %1174 = sext i32 %1173 to i64
  store i64 %1174, i64* %RCX, align 8, !tbaa !2428
  %1175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1176 = load i64, i64* %RAX
  %1177 = load i64, i64* %RCX
  %1178 = mul i64 %1177, 4
  %1179 = add i64 %1178, %1176
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 5
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1179 to float*
  %1183 = load float, float* %1182
  %1184 = bitcast i8* %1175 to float*
  store float %1183, float* %1184, align 1, !tbaa !2453
  %1185 = getelementptr inbounds i8, i8* %1175, i64 4
  %1186 = bitcast i8* %1185 to float*
  store float 0.000000e+00, float* %1186, align 1, !tbaa !2453
  %1187 = getelementptr inbounds i8, i8* %1175, i64 8
  %1188 = bitcast i8* %1187 to float*
  store float 0.000000e+00, float* %1188, align 1, !tbaa !2453
  %1189 = getelementptr inbounds i8, i8* %1175, i64 12
  %1190 = bitcast i8* %1189 to float*
  store float 0.000000e+00, float* %1190, align 1, !tbaa !2453
  %1191 = load i64, i64* %RBP
  %1192 = sub i64 %1191, 8
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 4
  store i64 %1194, i64* %PC
  %1195 = inttoptr i64 %1192 to i64*
  %1196 = load i64, i64* %1195
  store i64 %1196, i64* %RAX, align 8, !tbaa !2428
  %1197 = load i64, i64* %RBP
  %1198 = sub i64 %1197, 12
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 3
  store i64 %1200, i64* %PC
  %1201 = inttoptr i64 %1198 to i32*
  %1202 = load i32, i32* %1201
  %1203 = zext i32 %1202 to i64
  store i64 %1203, i64* %RDX, align 8, !tbaa !2428
  %1204 = load i64, i64* %RDX
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 44
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 4
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  %1210 = load i32, i32* %1209
  %1211 = shl i64 %1204, 32
  %1212 = ashr exact i64 %1211, 32
  %1213 = sext i32 %1210 to i64
  %1214 = mul nsw i64 %1213, %1212
  %1215 = trunc i64 %1214 to i32
  %1216 = and i64 %1214, 4294967295
  store i64 %1216, i64* %RDX, align 8, !tbaa !2428
  %1217 = shl i64 %1214, 32
  %1218 = ashr exact i64 %1217, 32
  %1219 = icmp ne i64 %1218, %1214
  %1220 = zext i1 %1219 to i8
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1220, i8* %1221, align 1, !tbaa !2432
  %1222 = and i32 %1215, 255
  %1223 = call i32 @llvm.ctpop.i32(i32 %1222) #16
  %1224 = trunc i32 %1223 to i8
  %1225 = and i8 %1224, 1
  %1226 = xor i8 %1225, 1
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1226, i8* %1227, align 1, !tbaa !2446
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1228, align 1, !tbaa !2447
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1229, align 1, !tbaa !2448
  %1230 = lshr i32 %1215, 31
  %1231 = trunc i32 %1230 to i8
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1231, i8* %1232, align 1, !tbaa !2449
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1220, i8* %1233, align 1, !tbaa !2450
  %1234 = load i64, i64* %RDX
  %1235 = load i64, i64* %RBP
  %1236 = sub i64 %1235, 40
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 3
  store i64 %1238, i64* %PC
  %1239 = trunc i64 %1234 to i32
  %1240 = inttoptr i64 %1236 to i32*
  %1241 = load i32, i32* %1240
  %1242 = add i32 %1241, %1239
  %1243 = zext i32 %1242 to i64
  store i64 %1243, i64* %RDX, align 8, !tbaa !2428
  %1244 = icmp ult i32 %1242, %1239
  %1245 = icmp ult i32 %1242, %1241
  %1246 = or i1 %1244, %1245
  %1247 = zext i1 %1246 to i8
  %1248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1247, i8* %1248, align 1, !tbaa !2432
  %1249 = and i32 %1242, 255
  %1250 = call i32 @llvm.ctpop.i32(i32 %1249) #16
  %1251 = trunc i32 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = xor i8 %1252, 1
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1253, i8* %1254, align 1, !tbaa !2446
  %1255 = xor i32 %1241, %1239
  %1256 = xor i32 %1255, %1242
  %1257 = lshr i32 %1256, 4
  %1258 = trunc i32 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1259, i8* %1260, align 1, !tbaa !2447
  %1261 = icmp eq i32 %1242, 0
  %1262 = zext i1 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1262, i8* %1263, align 1, !tbaa !2448
  %1264 = lshr i32 %1242, 31
  %1265 = trunc i32 %1264 to i8
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1265, i8* %1266, align 1, !tbaa !2449
  %1267 = lshr i32 %1239, 31
  %1268 = lshr i32 %1241, 31
  %1269 = xor i32 %1264, %1267
  %1270 = xor i32 %1264, %1268
  %1271 = add nuw nsw i32 %1269, %1270
  %1272 = icmp eq i32 %1271, 2
  %1273 = zext i1 %1272 to i8
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1273, i8* %1274, align 1, !tbaa !2450
  %1275 = load i32, i32* %EDX
  %1276 = zext i32 %1275 to i64
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 3
  store i64 %1278, i64* %PC
  %1279 = shl i64 %1276, 32
  %1280 = ashr exact i64 %1279, 32
  store i64 %1280, i64* %RCX, align 8, !tbaa !2428
  %1281 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1282 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1283 = load i64, i64* %RAX
  %1284 = load i64, i64* %RCX
  %1285 = mul i64 %1284, 4
  %1286 = add i64 %1285, %1283
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 5
  store i64 %1288, i64* %PC
  %1289 = bitcast i8* %1282 to <2 x float>*
  %1290 = load <2 x float>, <2 x float>* %1289, align 1
  %1291 = getelementptr inbounds i8, i8* %1282, i64 8
  %1292 = bitcast i8* %1291 to <2 x i32>*
  %1293 = load <2 x i32>, <2 x i32>* %1292, align 1
  %1294 = inttoptr i64 %1286 to float*
  %1295 = load float, float* %1294
  %1296 = extractelement <2 x float> %1290, i32 0
  %1297 = fadd float %1296, %1295
  %1298 = bitcast i8* %1281 to float*
  store float %1297, float* %1298, align 1, !tbaa !2453
  %1299 = bitcast <2 x float> %1290 to <2 x i32>
  %1300 = extractelement <2 x i32> %1299, i32 1
  %1301 = getelementptr inbounds i8, i8* %1281, i64 4
  %1302 = bitcast i8* %1301 to i32*
  store i32 %1300, i32* %1302, align 1, !tbaa !2453
  %1303 = extractelement <2 x i32> %1293, i32 0
  %1304 = getelementptr inbounds i8, i8* %1281, i64 8
  %1305 = bitcast i8* %1304 to i32*
  store i32 %1303, i32* %1305, align 1, !tbaa !2453
  %1306 = extractelement <2 x i32> %1293, i32 1
  %1307 = getelementptr inbounds i8, i8* %1281, i64 12
  %1308 = bitcast i8* %1307 to i32*
  store i32 %1306, i32* %1308, align 1, !tbaa !2453
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 24
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 4
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1310 to i64*
  %1314 = load i64, i64* %1313
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = load i64, i64* %RBP
  %1316 = sub i64 %1315, 40
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 4
  store i64 %1318, i64* %PC
  %1319 = inttoptr i64 %1316 to i32*
  %1320 = load i32, i32* %1319
  %1321 = sext i32 %1320 to i64
  store i64 %1321, i64* %RCX, align 8, !tbaa !2428
  %1322 = load i64, i64* %RAX
  %1323 = load i64, i64* %RCX
  %1324 = mul i64 %1323, 4
  %1325 = add i64 %1324, %1322
  %1326 = bitcast %union.vec128_t* %XMM0 to i8*
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 5
  store i64 %1328, i64* %PC
  %1329 = bitcast i8* %1326 to <2 x float>*
  %1330 = load <2 x float>, <2 x float>* %1329, align 1
  %1331 = extractelement <2 x float> %1330, i32 0
  %1332 = inttoptr i64 %1325 to float*
  store float %1331, float* %1332
  %1333 = load i64, i64* %RBP
  %1334 = sub i64 %1333, 40
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 3
  store i64 %1336, i64* %PC
  %1337 = inttoptr i64 %1334 to i32*
  %1338 = load i32, i32* %1337
  %1339 = zext i32 %1338 to i64
  store i64 %1339, i64* %RAX, align 8, !tbaa !2428
  %1340 = load i64, i64* %RAX
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 3
  store i64 %1342, i64* %PC
  %1343 = trunc i64 %1340 to i32
  %1344 = add i32 1, %1343
  %1345 = zext i32 %1344 to i64
  store i64 %1345, i64* %RAX, align 8, !tbaa !2428
  %1346 = icmp ult i32 %1344, %1343
  %1347 = icmp ult i32 %1344, 1
  %1348 = or i1 %1346, %1347
  %1349 = zext i1 %1348 to i8
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1349, i8* %1350, align 1, !tbaa !2432
  %1351 = and i32 %1344, 255
  %1352 = call i32 @llvm.ctpop.i32(i32 %1351) #16
  %1353 = trunc i32 %1352 to i8
  %1354 = and i8 %1353, 1
  %1355 = xor i8 %1354, 1
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1355, i8* %1356, align 1, !tbaa !2446
  %1357 = xor i64 1, %1340
  %1358 = trunc i64 %1357 to i32
  %1359 = xor i32 %1358, %1344
  %1360 = lshr i32 %1359, 4
  %1361 = trunc i32 %1360 to i8
  %1362 = and i8 %1361, 1
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1362, i8* %1363, align 1, !tbaa !2447
  %1364 = icmp eq i32 %1344, 0
  %1365 = zext i1 %1364 to i8
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1365, i8* %1366, align 1, !tbaa !2448
  %1367 = lshr i32 %1344, 31
  %1368 = trunc i32 %1367 to i8
  %1369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1368, i8* %1369, align 1, !tbaa !2449
  %1370 = lshr i32 %1343, 31
  %1371 = xor i32 %1367, %1370
  %1372 = add nuw nsw i32 %1371, %1367
  %1373 = icmp eq i32 %1372, 2
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1374, i8* %1375, align 1, !tbaa !2450
  %1376 = load i64, i64* %RBP
  %1377 = sub i64 %1376, 40
  %1378 = load i32, i32* %EAX
  %1379 = zext i32 %1378 to i64
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 3
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1377 to i32*
  store i32 %1378, i32* %1382
  %1383 = load i64, i64* %PC
  %1384 = sub i64 %1383, 69
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 5
  store i64 %1386, i64* %PC
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1384, i64* %1387, align 8, !tbaa !2428
  br label %block_40191a

block_4018a1:                                     ; preds = %block_401894, %block_401874
  %MEMORY.3 = phi %struct.Memory* [ %583, %block_401894 ], [ %583, %block_401874 ]
  %1388 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1389 = load i64, i64* %RBP
  %1390 = sub i64 %1389, 52
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 5
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to float*
  %1394 = load float, float* %1393
  %1395 = bitcast i8* %1388 to float*
  store float %1394, float* %1395, align 1, !tbaa !2453
  %1396 = getelementptr inbounds i8, i8* %1388, i64 4
  %1397 = bitcast i8* %1396 to float*
  store float 0.000000e+00, float* %1397, align 1, !tbaa !2453
  %1398 = getelementptr inbounds i8, i8* %1388, i64 8
  %1399 = bitcast i8* %1398 to float*
  store float 0.000000e+00, float* %1399, align 1, !tbaa !2453
  %1400 = getelementptr inbounds i8, i8* %1388, i64 12
  %1401 = bitcast i8* %1400 to float*
  store float 0.000000e+00, float* %1401, align 1, !tbaa !2453
  %1402 = load i64, i64* %RBP
  %1403 = sub i64 %1402, 32
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 4
  store i64 %1405, i64* %PC
  %1406 = inttoptr i64 %1403 to i64*
  %1407 = load i64, i64* %1406
  store i64 %1407, i64* %RAX, align 8, !tbaa !2428
  %1408 = load i64, i64* %RAX
  %1409 = bitcast %union.vec128_t* %XMM0 to i8*
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 4
  store i64 %1411, i64* %PC
  %1412 = bitcast i8* %1409 to <2 x float>*
  %1413 = load <2 x float>, <2 x float>* %1412, align 1
  %1414 = extractelement <2 x float> %1413, i32 0
  %1415 = inttoptr i64 %1408 to float*
  store float %1414, float* %1415
  %1416 = load i64, i64* %RBP
  %1417 = sub i64 %1416, 40
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 3
  store i64 %1419, i64* %PC
  %1420 = inttoptr i64 %1417 to i32*
  %1421 = load i32, i32* %1420
  %1422 = zext i32 %1421 to i64
  store i64 %1422, i64* %RAX, align 8, !tbaa !2428
  %1423 = load i64, i64* %RAX
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 3
  store i64 %1425, i64* %PC
  %1426 = trunc i64 %1423 to i32
  %1427 = add i32 1, %1426
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RAX, align 8, !tbaa !2428
  %1429 = icmp ult i32 %1427, %1426
  %1430 = icmp ult i32 %1427, 1
  %1431 = or i1 %1429, %1430
  %1432 = zext i1 %1431 to i8
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1432, i8* %1433, align 1, !tbaa !2432
  %1434 = and i32 %1427, 255
  %1435 = call i32 @llvm.ctpop.i32(i32 %1434) #16
  %1436 = trunc i32 %1435 to i8
  %1437 = and i8 %1436, 1
  %1438 = xor i8 %1437, 1
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1438, i8* %1439, align 1, !tbaa !2446
  %1440 = xor i64 1, %1423
  %1441 = trunc i64 %1440 to i32
  %1442 = xor i32 %1441, %1427
  %1443 = lshr i32 %1442, 4
  %1444 = trunc i32 %1443 to i8
  %1445 = and i8 %1444, 1
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1445, i8* %1446, align 1, !tbaa !2447
  %1447 = icmp eq i32 %1427, 0
  %1448 = zext i1 %1447 to i8
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1448, i8* %1449, align 1, !tbaa !2448
  %1450 = lshr i32 %1427, 31
  %1451 = trunc i32 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1451, i8* %1452, align 1, !tbaa !2449
  %1453 = lshr i32 %1426, 31
  %1454 = xor i32 %1450, %1453
  %1455 = add nuw nsw i32 %1454, %1450
  %1456 = icmp eq i32 %1455, 2
  %1457 = zext i1 %1456 to i8
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1457, i8* %1458, align 1, !tbaa !2450
  %1459 = load i64, i64* %RBP
  %1460 = sub i64 %1459, 40
  %1461 = load i32, i32* %EAX
  %1462 = zext i32 %1461 to i64
  %1463 = load i64, i64* %PC
  %1464 = add i64 %1463, 3
  store i64 %1464, i64* %PC
  %1465 = inttoptr i64 %1460 to i32*
  store i32 %1461, i32* %1465
  %1466 = load i64, i64* %PC
  %1467 = sub i64 %1466, 197
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 5
  store i64 %1469, i64* %PC
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1467, i64* %1470, align 8, !tbaa !2428
  br label %block_4017f2

block_40191a:                                     ; preds = %block_401913, %block_401926
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_401913 ], [ %MEMORY.4, %block_401926 ]
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 40
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 3
  store i64 %1474, i64* %PC
  %1475 = inttoptr i64 %1472 to i32*
  %1476 = load i32, i32* %1475
  %1477 = zext i32 %1476 to i64
  store i64 %1477, i64* %RAX, align 8, !tbaa !2428
  %1478 = load i32, i32* %EAX
  %1479 = zext i32 %1478 to i64
  %1480 = load i64, i64* %RBP
  %1481 = sub i64 %1480, 16
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 3
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i32*
  %1485 = load i32, i32* %1484
  %1486 = sub i32 %1478, %1485
  %1487 = icmp ult i32 %1478, %1485
  %1488 = zext i1 %1487 to i8
  %1489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1488, i8* %1489, align 1, !tbaa !2432
  %1490 = and i32 %1486, 255
  %1491 = call i32 @llvm.ctpop.i32(i32 %1490) #16
  %1492 = trunc i32 %1491 to i8
  %1493 = and i8 %1492, 1
  %1494 = xor i8 %1493, 1
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1494, i8* %1495, align 1, !tbaa !2446
  %1496 = xor i32 %1485, %1478
  %1497 = xor i32 %1496, %1486
  %1498 = lshr i32 %1497, 4
  %1499 = trunc i32 %1498 to i8
  %1500 = and i8 %1499, 1
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1500, i8* %1501, align 1, !tbaa !2447
  %1502 = icmp eq i32 %1486, 0
  %1503 = zext i1 %1502 to i8
  %1504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1503, i8* %1504, align 1, !tbaa !2448
  %1505 = lshr i32 %1486, 31
  %1506 = trunc i32 %1505 to i8
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1506, i8* %1507, align 1, !tbaa !2449
  %1508 = lshr i32 %1478, 31
  %1509 = lshr i32 %1485, 31
  %1510 = xor i32 %1509, %1508
  %1511 = xor i32 %1505, %1508
  %1512 = add nuw nsw i32 %1511, %1510
  %1513 = icmp eq i32 %1512, 2
  %1514 = zext i1 %1513 to i8
  %1515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1514, i8* %1515, align 1, !tbaa !2450
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 68
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 6
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 6
  store i64 %1521, i64* %PC
  %1522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1523 = load i8, i8* %1522, align 1, !tbaa !2449
  %1524 = icmp ne i8 %1523, 0
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1526 = load i8, i8* %1525, align 1, !tbaa !2450
  %1527 = icmp ne i8 %1526, 0
  %1528 = xor i1 %1524, %1527
  %1529 = xor i1 %1528, true
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1532 = select i1 %1528, i64 %1519, i64 %1517
  store i64 %1532, i64* %1531, align 8, !tbaa !2428
  %1533 = load i8, i8* %BRANCH_TAKEN
  %1534 = icmp eq i8 %1533, 1
  br i1 %1534, label %block_401964, label %block_401926

block_401913:                                     ; preds = %block_401907
  %1535 = load i64, i64* %RBP
  %1536 = sub i64 %1535, 40
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 7
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1536 to i32*
  store i32 0, i32* %1539
  br label %block_40191a

block_401894:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %1540 = sub i64 %601, 32
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 4
  store i64 %1542, i64* %PC
  %1543 = inttoptr i64 %1540 to i64*
  %1544 = load i64, i64* %1543
  store i64 %1544, i64* %RAX, align 8, !tbaa !2428
  %1545 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1546 = load i64, i64* %RAX
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 4
  store i64 %1548, i64* %PC
  %1549 = inttoptr i64 %1546 to float*
  %1550 = load float, float* %1549
  %1551 = bitcast i8* %1545 to float*
  store float %1550, float* %1551, align 1, !tbaa !2453
  %1552 = getelementptr inbounds i8, i8* %1545, i64 4
  %1553 = bitcast i8* %1552 to float*
  store float 0.000000e+00, float* %1553, align 1, !tbaa !2453
  %1554 = getelementptr inbounds i8, i8* %1545, i64 8
  %1555 = bitcast i8* %1554 to float*
  store float 0.000000e+00, float* %1555, align 1, !tbaa !2453
  %1556 = getelementptr inbounds i8, i8* %1545, i64 12
  %1557 = bitcast i8* %1556 to float*
  store float 0.000000e+00, float* %1557, align 1, !tbaa !2453
  %1558 = load i64, i64* %RBP
  %1559 = sub i64 %1558, 52
  %1560 = bitcast %union.vec128_t* %XMM0 to i8*
  %1561 = load i64, i64* %PC
  %1562 = add i64 %1561, 5
  store i64 %1562, i64* %PC
  %1563 = bitcast i8* %1560 to <2 x float>*
  %1564 = load <2 x float>, <2 x float>* %1563, align 1
  %1565 = extractelement <2 x float> %1564, i32 0
  %1566 = inttoptr i64 %1559 to float*
  store float %1565, float* %1566
  br label %block_4018a1

block_401907:                                     ; preds = %block_401900, %block_401964
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.1, %block_401900 ], [ %MEMORY.4, %block_401964 ]
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 44
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 3
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  %1572 = load i32, i32* %1571
  %1573 = zext i32 %1572 to i64
  store i64 %1573, i64* %RAX, align 8, !tbaa !2428
  %1574 = load i32, i32* %EAX
  %1575 = zext i32 %1574 to i64
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 16
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 3
  store i64 %1579, i64* %PC
  %1580 = inttoptr i64 %1577 to i32*
  %1581 = load i32, i32* %1580
  %1582 = sub i32 %1574, %1581
  %1583 = icmp ult i32 %1574, %1581
  %1584 = zext i1 %1583 to i8
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1584, i8* %1585, align 1, !tbaa !2432
  %1586 = and i32 %1582, 255
  %1587 = call i32 @llvm.ctpop.i32(i32 %1586) #16
  %1588 = trunc i32 %1587 to i8
  %1589 = and i8 %1588, 1
  %1590 = xor i8 %1589, 1
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1590, i8* %1591, align 1, !tbaa !2446
  %1592 = xor i32 %1581, %1574
  %1593 = xor i32 %1592, %1582
  %1594 = lshr i32 %1593, 4
  %1595 = trunc i32 %1594 to i8
  %1596 = and i8 %1595, 1
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1596, i8* %1597, align 1, !tbaa !2447
  %1598 = icmp eq i32 %1582, 0
  %1599 = zext i1 %1598 to i8
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1599, i8* %1600, align 1, !tbaa !2448
  %1601 = lshr i32 %1582, 31
  %1602 = trunc i32 %1601 to i8
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1602, i8* %1603, align 1, !tbaa !2449
  %1604 = lshr i32 %1574, 31
  %1605 = lshr i32 %1581, 31
  %1606 = xor i32 %1605, %1604
  %1607 = xor i32 %1601, %1604
  %1608 = add nuw nsw i32 %1607, %1606
  %1609 = icmp eq i32 %1608, 2
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1610, i8* %1611, align 1, !tbaa !2450
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 106
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 6
  %1616 = load i64, i64* %PC
  %1617 = add i64 %1616, 6
  store i64 %1617, i64* %PC
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1619 = load i8, i8* %1618, align 1, !tbaa !2449
  %1620 = icmp ne i8 %1619, 0
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1622 = load i8, i8* %1621, align 1, !tbaa !2450
  %1623 = icmp ne i8 %1622, 0
  %1624 = xor i1 %1620, %1623
  %1625 = xor i1 %1624, true
  %1626 = zext i1 %1625 to i8
  store i8 %1626, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1628 = select i1 %1624, i64 %1615, i64 %1613
  store i64 %1628, i64* %1627, align 8, !tbaa !2428
  %1629 = load i8, i8* %BRANCH_TAKEN
  %1630 = icmp eq i8 %1629, 1
  br i1 %1630, label %block_401977, label %block_401913

block_401900:                                     ; preds = %block_4018d6
  %1631 = load i64, i64* %RBP
  %1632 = sub i64 %1631, 44
  %1633 = load i64, i64* %PC
  %1634 = add i64 %1633, 7
  store i64 %1634, i64* %PC
  %1635 = inttoptr i64 %1632 to i32*
  store i32 0, i32* %1635
  br label %block_401907
}

; Function Attrs: noinline
define %struct.Memory* @sub_402810_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402810:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %13 to %"class.std::bitset"*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %15 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %14, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %15 to %"class.std::bitset"*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %17 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %16, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %17 to %"class.std::bitset"*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %19 to %union.vec128_t*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %23 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %22, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %23 to %union.vec128_t*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %35 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %36 = bitcast %union.vec128_t* %XMM1 to i8*
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC
  %39 = bitcast i8* %35 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = getelementptr inbounds i8, i8* %35, i64 8
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = bitcast i8* %36 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = getelementptr inbounds i8, i8* %36, i64 8
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = xor i64 %45, %40
  %50 = xor i64 %48, %43
  %51 = trunc i64 %49 to i32
  %52 = lshr i64 %49, 32
  %53 = trunc i64 %52 to i32
  %54 = bitcast i8* %34 to i32*
  store i32 %51, i32* %54, align 1, !tbaa !2452
  %55 = getelementptr inbounds i8, i8* %34, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1, !tbaa !2452
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %34, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !2452
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %34, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !2452
  %64 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 8
  store i64 %66, i64* %PC
  %67 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 16) to float*)
  %68 = bitcast i8* %64 to float*
  store float %67, float* %68, align 1, !tbaa !2453
  %69 = getelementptr inbounds i8, i8* %64, i64 4
  %70 = bitcast i8* %69 to float*
  store float 0.000000e+00, float* %70, align 1, !tbaa !2453
  %71 = getelementptr inbounds i8, i8* %64, i64 8
  %72 = bitcast i8* %71 to float*
  store float 0.000000e+00, float* %72, align 1, !tbaa !2453
  %73 = getelementptr inbounds i8, i8* %64, i64 12
  %74 = bitcast i8* %73 to float*
  store float 0.000000e+00, float* %74, align 1, !tbaa !2453
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 4
  %77 = bitcast %union.vec128_t* %XMM0 to i8*
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 5
  store i64 %79, i64* %PC
  %80 = bitcast i8* %77 to <2 x float>*
  %81 = load <2 x float>, <2 x float>* %80, align 1
  %82 = extractelement <2 x float> %81, i32 0
  %83 = inttoptr i64 %76 to float*
  store float %82, float* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = bitcast %union.vec128_t* %XMM2 to i8*
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 5
  store i64 %88, i64* %PC
  %89 = bitcast i8* %86 to <2 x float>*
  %90 = load <2 x float>, <2 x float>* %89, align 1
  %91 = extractelement <2 x float> %90, i32 0
  %92 = inttoptr i64 %85 to float*
  store float %91, float* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 20
  %95 = bitcast %union.vec128_t* %XMM1 to i8*
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  %98 = bitcast i8* %95 to <2 x float>*
  %99 = load <2 x float>, <2 x float>* %98, align 1
  %100 = extractelement <2 x float> %99, i32 0
  %101 = inttoptr i64 %94 to float*
  store float %100, float* %101
  br label %block_40282e

block_40282e:                                     ; preds = %block_40284a, %block_402810
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402810 ], [ %193, %block_40284a ]
  %102 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %103 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %104 = bitcast %union.vec128_t* %XMM0 to i8*
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 3
  store i64 %106, i64* %PC
  %107 = bitcast i8* %103 to i64*
  %108 = load i64, i64* %107, align 1
  %109 = getelementptr inbounds i8, i8* %103, i64 8
  %110 = bitcast i8* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = bitcast i8* %104 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = getelementptr inbounds i8, i8* %104, i64 8
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = xor i64 %113, %108
  %118 = xor i64 %116, %111
  %119 = trunc i64 %117 to i32
  %120 = lshr i64 %117, 32
  %121 = trunc i64 %120 to i32
  %122 = bitcast i8* %102 to i32*
  store i32 %119, i32* %122, align 1, !tbaa !2452
  %123 = getelementptr inbounds i8, i8* %102, i64 4
  %124 = bitcast i8* %123 to i32*
  store i32 %121, i32* %124, align 1, !tbaa !2452
  %125 = trunc i64 %118 to i32
  %126 = getelementptr inbounds i8, i8* %102, i64 8
  %127 = bitcast i8* %126 to i32*
  store i32 %125, i32* %127, align 1, !tbaa !2452
  %128 = lshr i64 %118, 32
  %129 = trunc i64 %128 to i32
  %130 = getelementptr inbounds i8, i8* %102, i64 12
  %131 = bitcast i8* %130 to i32*
  store i32 %129, i32* %131, align 1, !tbaa !2452
  %132 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %133 = load i64, i64* %RBP
  %134 = sub i64 %133, 20
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %134 to float*
  %138 = load float, float* %137
  %139 = bitcast i8* %132 to float*
  store float %138, float* %139, align 1, !tbaa !2453
  %140 = getelementptr inbounds i8, i8* %132, i64 4
  %141 = bitcast i8* %140 to float*
  store float 0.000000e+00, float* %141, align 1, !tbaa !2453
  %142 = getelementptr inbounds i8, i8* %132, i64 8
  %143 = bitcast i8* %142 to float*
  store float 0.000000e+00, float* %143, align 1, !tbaa !2453
  %144 = getelementptr inbounds i8, i8* %132, i64 12
  %145 = bitcast i8* %144 to float*
  store float 0.000000e+00, float* %145, align 1, !tbaa !2453
  %146 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %147 = bitcast %union.vec128_t* %XMM1 to i8*
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 4
  store i64 %149, i64* %PC
  %150 = bitcast i8* %147 to <2 x float>*
  %151 = load <2 x float>, <2 x float>* %150, align 1
  %152 = extractelement <2 x float> %151, i32 0
  %153 = fpext float %152 to double
  %154 = bitcast i8* %146 to double*
  store double %153, double* %154, align 1, !tbaa !2455
  %155 = bitcast %union.vec128_t* %XMM1 to i8*
  %156 = bitcast %union.vec128_t* %XMM0 to i8*
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = bitcast i8* %155 to double*
  %160 = load double, double* %159, align 1
  %161 = bitcast i8* %156 to double*
  %162 = load double, double* %161, align 1
  %163 = fcmp uno double %160, %162
  br i1 %163, label %164, label %176

; <label>:164:                                    ; preds = %block_40282e
  %165 = fadd double %160, %162
  %166 = bitcast double %165 to i64
  %167 = and i64 %166, 9221120237041090560
  %168 = icmp eq i64 %167, 9218868437227405312
  %169 = and i64 %166, 2251799813685247
  %170 = icmp ne i64 %169, 0
  %171 = and i1 %168, %170
  br i1 %171, label %172, label %182

; <label>:172:                                    ; preds = %164
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %174 = load i64, i64* %173, align 8, !tbaa !2428
  %175 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %174, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:176:                                    ; preds = %block_40282e
  %177 = fcmp ogt double %160, %162
  br i1 %177, label %182, label %178

; <label>:178:                                    ; preds = %176
  %179 = fcmp olt double %160, %162
  br i1 %179, label %182, label %180

; <label>:180:                                    ; preds = %178
  %181 = fcmp oeq double %160, %162
  br i1 %181, label %182, label %189

; <label>:182:                                    ; preds = %180, %178, %176, %164
  %183 = phi i8 [ 0, %176 ], [ 0, %178 ], [ 1, %180 ], [ 1, %164 ]
  %184 = phi i8 [ 0, %176 ], [ 0, %178 ], [ 0, %180 ], [ 1, %164 ]
  %185 = phi i8 [ 0, %176 ], [ 1, %178 ], [ 0, %180 ], [ 1, %164 ]
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %183, i8* %186, align 1, !tbaa !2451
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %184, i8* %187, align 1, !tbaa !2451
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %185, i8* %188, align 1, !tbaa !2451
  br label %189

; <label>:189:                                    ; preds = %182, %180
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %190, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %192, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %172, %189
  %193 = phi %struct.Memory* [ %175, %172 ], [ %MEMORY.0, %189 ]
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 100
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 6
  store i64 %199, i64* %PC
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %201 = load i8, i8* %200, align 1, !tbaa !2448
  %202 = icmp eq i8 %201, 0
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %205 = select i1 %202, i64 %195, i64 %197
  store i64 %205, i64* %204, align 8, !tbaa !2428
  %206 = load i8, i8* %BRANCH_TAKEN
  %207 = icmp eq i8 %206, 1
  br i1 %207, label %block_4028a2, label %block_402844

block_40284a:                                     ; preds = %block_402844
  %208 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 8
  store i64 %210, i64* %PC
  %211 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 80) to double*)
  %212 = bitcast i8* %208 to double*
  store double %211, double* %212, align 1, !tbaa !2455
  %213 = getelementptr inbounds i8, i8* %208, i64 8
  %214 = bitcast i8* %213 to double*
  store double 0.000000e+00, double* %214, align 1, !tbaa !2455
  %215 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 8
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 5
  store i64 %219, i64* %PC
  %220 = inttoptr i64 %217 to float*
  %221 = load float, float* %220
  %222 = bitcast i8* %215 to float*
  store float %221, float* %222, align 1, !tbaa !2453
  %223 = getelementptr inbounds i8, i8* %215, i64 4
  %224 = bitcast i8* %223 to float*
  store float 0.000000e+00, float* %224, align 1, !tbaa !2453
  %225 = getelementptr inbounds i8, i8* %215, i64 8
  %226 = bitcast i8* %225 to float*
  store float 0.000000e+00, float* %226, align 1, !tbaa !2453
  %227 = getelementptr inbounds i8, i8* %215, i64 12
  %228 = bitcast i8* %227 to float*
  store float 0.000000e+00, float* %228, align 1, !tbaa !2453
  %229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %230 = bitcast %union.vec128_t* %XMM1 to i8*
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 4
  store i64 %232, i64* %PC
  %233 = bitcast i8* %230 to <2 x float>*
  %234 = load <2 x float>, <2 x float>* %233, align 1
  %235 = extractelement <2 x float> %234, i32 0
  %236 = fpext float %235 to double
  %237 = bitcast i8* %229 to double*
  store double %236, double* %237, align 1, !tbaa !2455
  %238 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %239 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %240 = bitcast %union.vec128_t* %XMM0 to i8*
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC
  %243 = bitcast i8* %239 to double*
  %244 = load double, double* %243, align 1
  %245 = getelementptr inbounds i8, i8* %239, i64 8
  %246 = bitcast i8* %245 to i64*
  %247 = load i64, i64* %246, align 1
  %248 = bitcast i8* %240 to double*
  %249 = load double, double* %248, align 1
  %250 = fsub double %244, %249
  %251 = bitcast i8* %238 to double*
  store double %250, double* %251, align 1, !tbaa !2455
  %252 = getelementptr inbounds i8, i8* %238, i64 8
  %253 = bitcast i8* %252 to i64*
  store i64 %247, i64* %253, align 1, !tbaa !2455
  %254 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %255 = bitcast %union.vec128_t* %XMM1 to i8*
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  %258 = bitcast i8* %254 to <2 x i32>*
  %259 = load <2 x i32>, <2 x i32>* %258, align 1
  %260 = getelementptr inbounds i8, i8* %254, i64 8
  %261 = bitcast i8* %260 to <2 x i32>*
  %262 = load <2 x i32>, <2 x i32>* %261, align 1
  %263 = bitcast i8* %255 to double*
  %264 = load double, double* %263, align 1
  %265 = fptrunc double %264 to float
  %266 = bitcast i8* %254 to float*
  store float %265, float* %266, align 1, !tbaa !2453
  %267 = extractelement <2 x i32> %259, i32 1
  %268 = getelementptr inbounds i8, i8* %254, i64 4
  %269 = bitcast i8* %268 to i32*
  store i32 %267, i32* %269, align 1, !tbaa !2453
  %270 = extractelement <2 x i32> %262, i32 0
  %271 = bitcast i8* %260 to i32*
  store i32 %270, i32* %271, align 1, !tbaa !2453
  %272 = extractelement <2 x i32> %262, i32 1
  %273 = getelementptr inbounds i8, i8* %254, i64 12
  %274 = bitcast i8* %273 to i32*
  store i32 %272, i32* %274, align 1, !tbaa !2453
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 12
  %277 = bitcast %union.vec128_t* %XMM1 to i8*
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 5
  store i64 %279, i64* %PC
  %280 = bitcast i8* %277 to <2 x float>*
  %281 = load <2 x float>, <2 x float>* %280, align 1
  %282 = extractelement <2 x float> %281, i32 0
  %283 = inttoptr i64 %276 to float*
  store float %282, float* %283
  %284 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 12
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to float*
  %290 = load float, float* %289
  %291 = bitcast i8* %284 to float*
  store float %290, float* %291, align 1, !tbaa !2453
  %292 = getelementptr inbounds i8, i8* %284, i64 4
  %293 = bitcast i8* %292 to float*
  store float 0.000000e+00, float* %293, align 1, !tbaa !2453
  %294 = getelementptr inbounds i8, i8* %284, i64 8
  %295 = bitcast i8* %294 to float*
  store float 0.000000e+00, float* %295, align 1, !tbaa !2453
  %296 = getelementptr inbounds i8, i8* %284, i64 12
  %297 = bitcast i8* %296 to float*
  store float 0.000000e+00, float* %297, align 1, !tbaa !2453
  %298 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %299 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 12
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = bitcast i8* %299 to <2 x float>*
  %305 = load <2 x float>, <2 x float>* %304, align 1
  %306 = getelementptr inbounds i8, i8* %299, i64 8
  %307 = bitcast i8* %306 to <2 x i32>*
  %308 = load <2 x i32>, <2 x i32>* %307, align 1
  %309 = inttoptr i64 %301 to float*
  %310 = load float, float* %309
  %311 = extractelement <2 x float> %305, i32 0
  %312 = fadd float %311, %310
  %313 = bitcast i8* %298 to float*
  store float %312, float* %313, align 1, !tbaa !2453
  %314 = bitcast <2 x float> %305 to <2 x i32>
  %315 = extractelement <2 x i32> %314, i32 1
  %316 = getelementptr inbounds i8, i8* %298, i64 4
  %317 = bitcast i8* %316 to i32*
  store i32 %315, i32* %317, align 1, !tbaa !2453
  %318 = extractelement <2 x i32> %308, i32 0
  %319 = getelementptr inbounds i8, i8* %298, i64 8
  %320 = bitcast i8* %319 to i32*
  store i32 %318, i32* %320, align 1, !tbaa !2453
  %321 = extractelement <2 x i32> %308, i32 1
  %322 = getelementptr inbounds i8, i8* %298, i64 12
  %323 = bitcast i8* %322 to i32*
  store i32 %321, i32* %323, align 1, !tbaa !2453
  %324 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %325 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 12
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 5
  store i64 %329, i64* %PC
  %330 = bitcast i8* %325 to <2 x float>*
  %331 = load <2 x float>, <2 x float>* %330, align 1
  %332 = getelementptr inbounds i8, i8* %325, i64 8
  %333 = bitcast i8* %332 to <2 x i32>*
  %334 = load <2 x i32>, <2 x i32>* %333, align 1
  %335 = inttoptr i64 %327 to float*
  %336 = load float, float* %335
  %337 = extractelement <2 x float> %331, i32 0
  %338 = fadd float %337, %336
  %339 = bitcast i8* %324 to float*
  store float %338, float* %339, align 1, !tbaa !2453
  %340 = bitcast <2 x float> %331 to <2 x i32>
  %341 = extractelement <2 x i32> %340, i32 1
  %342 = getelementptr inbounds i8, i8* %324, i64 4
  %343 = bitcast i8* %342 to i32*
  store i32 %341, i32* %343, align 1, !tbaa !2453
  %344 = extractelement <2 x i32> %334, i32 0
  %345 = getelementptr inbounds i8, i8* %324, i64 8
  %346 = bitcast i8* %345 to i32*
  store i32 %344, i32* %346, align 1, !tbaa !2453
  %347 = extractelement <2 x i32> %334, i32 1
  %348 = getelementptr inbounds i8, i8* %324, i64 12
  %349 = bitcast i8* %348 to i32*
  store i32 %347, i32* %349, align 1, !tbaa !2453
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 16
  %352 = bitcast %union.vec128_t* %XMM1 to i8*
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  store i64 %354, i64* %PC
  %355 = bitcast i8* %352 to <2 x float>*
  %356 = load <2 x float>, <2 x float>* %355, align 1
  %357 = extractelement <2 x float> %356, i32 0
  %358 = inttoptr i64 %351 to float*
  store float %357, float* %358
  %359 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 16
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 5
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to float*
  %365 = load float, float* %364
  %366 = bitcast i8* %359 to float*
  store float %365, float* %366, align 1, !tbaa !2453
  %367 = getelementptr inbounds i8, i8* %359, i64 4
  %368 = bitcast i8* %367 to float*
  store float 0.000000e+00, float* %368, align 1, !tbaa !2453
  %369 = getelementptr inbounds i8, i8* %359, i64 8
  %370 = bitcast i8* %369 to float*
  store float 0.000000e+00, float* %370, align 1, !tbaa !2453
  %371 = getelementptr inbounds i8, i8* %359, i64 12
  %372 = bitcast i8* %371 to float*
  store float 0.000000e+00, float* %372, align 1, !tbaa !2453
  %373 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %374 = bitcast %union.vec128_t* %XMM1 to i8*
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = bitcast i8* %374 to <2 x float>*
  %378 = load <2 x float>, <2 x float>* %377, align 1
  %379 = extractelement <2 x float> %378, i32 0
  %380 = fpext float %379 to double
  %381 = bitcast i8* %373 to double*
  store double %380, double* %381, align 1, !tbaa !2455
  %382 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %383 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %384 = bitcast %union.vec128_t* %XMM0 to i8*
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 4
  store i64 %386, i64* %PC
  %387 = bitcast i8* %383 to double*
  %388 = load double, double* %387, align 1
  %389 = getelementptr inbounds i8, i8* %383, i64 8
  %390 = bitcast i8* %389 to i64*
  %391 = load i64, i64* %390, align 1
  %392 = bitcast i8* %384 to double*
  %393 = load double, double* %392, align 1
  %394 = fsub double %388, %393
  %395 = bitcast i8* %382 to double*
  store double %394, double* %395, align 1, !tbaa !2455
  %396 = getelementptr inbounds i8, i8* %382, i64 8
  %397 = bitcast i8* %396 to i64*
  store i64 %391, i64* %397, align 1, !tbaa !2455
  %398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 7
  store i64 %400, i64* %PC
  %401 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %402 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %403 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %404 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %405 = bitcast i8* %398 to float*
  store float %401, float* %405, align 1, !tbaa !2453
  %406 = getelementptr inbounds i8, i8* %398, i64 4
  %407 = bitcast i8* %406 to float*
  store float %402, float* %407, align 1, !tbaa !2453
  %408 = getelementptr inbounds i8, i8* %398, i64 8
  %409 = bitcast i8* %408 to float*
  store float %403, float* %409, align 1, !tbaa !2453
  %410 = getelementptr inbounds i8, i8* %398, i64 12
  %411 = bitcast i8* %410 to float*
  store float %404, float* %411, align 1, !tbaa !2453
  %412 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %413 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %414 = bitcast %union.vec128_t* %XMM0 to i8*
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 4
  store i64 %416, i64* %PC
  %417 = bitcast i8* %413 to i64*
  %418 = load i64, i64* %417, align 1
  %419 = getelementptr inbounds i8, i8* %413, i64 8
  %420 = bitcast i8* %419 to i64*
  %421 = load i64, i64* %420, align 1
  %422 = bitcast i8* %414 to i64*
  %423 = load i64, i64* %422, align 1
  %424 = getelementptr inbounds i8, i8* %414, i64 8
  %425 = bitcast i8* %424 to i64*
  %426 = load i64, i64* %425, align 1
  %427 = and i64 %423, %418
  %428 = and i64 %426, %421
  %429 = trunc i64 %427 to i32
  %430 = lshr i64 %427, 32
  %431 = trunc i64 %430 to i32
  %432 = bitcast i8* %412 to i32*
  store i32 %429, i32* %432, align 1, !tbaa !2452
  %433 = getelementptr inbounds i8, i8* %412, i64 4
  %434 = bitcast i8* %433 to i32*
  store i32 %431, i32* %434, align 1, !tbaa !2452
  %435 = trunc i64 %428 to i32
  %436 = getelementptr inbounds i8, i8* %412, i64 8
  %437 = bitcast i8* %436 to i32*
  store i32 %435, i32* %437, align 1, !tbaa !2452
  %438 = lshr i64 %428, 32
  %439 = trunc i64 %438 to i32
  %440 = getelementptr inbounds i8, i8* %412, i64 12
  %441 = bitcast i8* %440 to i32*
  store i32 %439, i32* %441, align 1, !tbaa !2452
  %442 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %443 = bitcast %union.vec128_t* %XMM1 to i8*
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 4
  store i64 %445, i64* %PC
  %446 = bitcast i8* %442 to <2 x i32>*
  %447 = load <2 x i32>, <2 x i32>* %446, align 1
  %448 = getelementptr inbounds i8, i8* %442, i64 8
  %449 = bitcast i8* %448 to <2 x i32>*
  %450 = load <2 x i32>, <2 x i32>* %449, align 1
  %451 = bitcast i8* %443 to double*
  %452 = load double, double* %451, align 1
  %453 = fptrunc double %452 to float
  %454 = bitcast i8* %442 to float*
  store float %453, float* %454, align 1, !tbaa !2453
  %455 = extractelement <2 x i32> %447, i32 1
  %456 = getelementptr inbounds i8, i8* %442, i64 4
  %457 = bitcast i8* %456 to i32*
  store i32 %455, i32* %457, align 1, !tbaa !2453
  %458 = extractelement <2 x i32> %450, i32 0
  %459 = bitcast i8* %448 to i32*
  store i32 %458, i32* %459, align 1, !tbaa !2453
  %460 = extractelement <2 x i32> %450, i32 1
  %461 = getelementptr inbounds i8, i8* %442, i64 12
  %462 = bitcast i8* %461 to i32*
  store i32 %460, i32* %462, align 1, !tbaa !2453
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 20
  %465 = bitcast %union.vec128_t* %XMM0 to i8*
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 5
  store i64 %467, i64* %PC
  %468 = bitcast i8* %465 to <2 x float>*
  %469 = load <2 x float>, <2 x float>* %468, align 1
  %470 = extractelement <2 x float> %469, i32 0
  %471 = inttoptr i64 %464 to float*
  store float %470, float* %471
  %472 = load i64, i64* %PC
  %473 = sub i64 %472, 111
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 5
  store i64 %475, i64* %PC
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %473, i64* %476, align 8, !tbaa !2428
  br label %block_40282e

block_402844:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 94
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 6
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 6
  store i64 %482, i64* %PC
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %484 = load i8, i8* %483, align 1, !tbaa !2446
  store i8 %484, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %486 = icmp ne i8 %484, 0
  %487 = select i1 %486, i64 %478, i64 %480
  store i64 %487, i64* %485, align 8, !tbaa !2428
  %488 = load i8, i8* %BRANCH_TAKEN
  %489 = icmp eq i8 %488, 1
  br i1 %489, label %block_4028a2, label %block_40284a

block_4028a2:                                     ; preds = %block_402844, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.1 = phi %struct.Memory* [ %193, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %193, %block_402844 ]
  %490 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %491 = load i64, i64* %RBP
  %492 = sub i64 %491, 20
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 5
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to float*
  %496 = load float, float* %495
  %497 = bitcast i8* %490 to float*
  store float %496, float* %497, align 1, !tbaa !2453
  %498 = getelementptr inbounds i8, i8* %490, i64 4
  %499 = bitcast i8* %498 to float*
  store float 0.000000e+00, float* %499, align 1, !tbaa !2453
  %500 = getelementptr inbounds i8, i8* %490, i64 8
  %501 = bitcast i8* %500 to float*
  store float 0.000000e+00, float* %501, align 1, !tbaa !2453
  %502 = getelementptr inbounds i8, i8* %490, i64 12
  %503 = bitcast i8* %502 to float*
  store float 0.000000e+00, float* %503, align 1, !tbaa !2453
  %504 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %505 = bitcast %union.vec128_t* %XMM0 to i8*
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 4
  store i64 %507, i64* %PC
  %508 = bitcast i8* %505 to <2 x float>*
  %509 = load <2 x float>, <2 x float>* %508, align 1
  %510 = extractelement <2 x float> %509, i32 0
  %511 = fpext float %510 to double
  %512 = bitcast i8* %504 to double*
  store double %511, double* %512, align 1, !tbaa !2455
  %513 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %514 = load i64, i64* %RBP
  %515 = sub i64 %514, 4
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to float*
  %519 = load float, float* %518
  %520 = bitcast i8* %513 to float*
  store float %519, float* %520, align 1, !tbaa !2453
  %521 = getelementptr inbounds i8, i8* %513, i64 4
  %522 = bitcast i8* %521 to float*
  store float 0.000000e+00, float* %522, align 1, !tbaa !2453
  %523 = getelementptr inbounds i8, i8* %513, i64 8
  %524 = bitcast i8* %523 to float*
  store float 0.000000e+00, float* %524, align 1, !tbaa !2453
  %525 = getelementptr inbounds i8, i8* %513, i64 12
  %526 = bitcast i8* %525 to float*
  store float 0.000000e+00, float* %526, align 1, !tbaa !2453
  %527 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %528 = bitcast %union.vec128_t* %XMM1 to i8*
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 4
  store i64 %530, i64* %PC
  %531 = bitcast i8* %528 to <2 x float>*
  %532 = load <2 x float>, <2 x float>* %531, align 1
  %533 = extractelement <2 x float> %532, i32 0
  %534 = fpext float %533 to double
  %535 = bitcast i8* %527 to double*
  store double %534, double* %535, align 1, !tbaa !2455
  %536 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 7
  store i64 %538, i64* %PC
  %539 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to float*)
  %540 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to float*)
  %541 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to float*)
  %542 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to float*)
  %543 = bitcast i8* %536 to float*
  store float %539, float* %543, align 1, !tbaa !2453
  %544 = getelementptr inbounds i8, i8* %536, i64 4
  %545 = bitcast i8* %544 to float*
  store float %540, float* %545, align 1, !tbaa !2453
  %546 = getelementptr inbounds i8, i8* %536, i64 8
  %547 = bitcast i8* %546 to float*
  store float %541, float* %547, align 1, !tbaa !2453
  %548 = getelementptr inbounds i8, i8* %536, i64 12
  %549 = bitcast i8* %548 to float*
  store float %542, float* %549, align 1, !tbaa !2453
  %550 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %551 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %552 = bitcast %union.vec128_t* %XMM2 to i8*
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 4
  store i64 %554, i64* %PC
  %555 = bitcast i8* %551 to i64*
  %556 = load i64, i64* %555, align 1
  %557 = getelementptr inbounds i8, i8* %551, i64 8
  %558 = bitcast i8* %557 to i64*
  %559 = load i64, i64* %558, align 1
  %560 = bitcast i8* %552 to i64*
  %561 = load i64, i64* %560, align 1
  %562 = getelementptr inbounds i8, i8* %552, i64 8
  %563 = bitcast i8* %562 to i64*
  %564 = load i64, i64* %563, align 1
  %565 = and i64 %561, %556
  %566 = and i64 %564, %559
  %567 = trunc i64 %565 to i32
  %568 = lshr i64 %565, 32
  %569 = trunc i64 %568 to i32
  %570 = bitcast i8* %550 to i32*
  store i32 %567, i32* %570, align 1, !tbaa !2452
  %571 = getelementptr inbounds i8, i8* %550, i64 4
  %572 = bitcast i8* %571 to i32*
  store i32 %569, i32* %572, align 1, !tbaa !2452
  %573 = trunc i64 %566 to i32
  %574 = getelementptr inbounds i8, i8* %550, i64 8
  %575 = bitcast i8* %574 to i32*
  store i32 %573, i32* %575, align 1, !tbaa !2452
  %576 = lshr i64 %566, 32
  %577 = trunc i64 %576 to i32
  %578 = getelementptr inbounds i8, i8* %550, i64 12
  %579 = bitcast i8* %578 to i32*
  store i32 %577, i32* %579, align 1, !tbaa !2452
  %580 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %581 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %582 = bitcast %union.vec128_t* %XMM1 to i8*
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 4
  store i64 %584, i64* %PC
  %585 = bitcast i8* %581 to double*
  %586 = load double, double* %585, align 1
  %587 = getelementptr inbounds i8, i8* %581, i64 8
  %588 = bitcast i8* %587 to i64*
  %589 = load i64, i64* %588, align 1
  %590 = bitcast i8* %582 to double*
  %591 = load double, double* %590, align 1
  %592 = fmul double %586, %591
  %593 = bitcast i8* %580 to double*
  store double %592, double* %593, align 1, !tbaa !2455
  %594 = getelementptr inbounds i8, i8* %580, i64 8
  %595 = bitcast i8* %594 to i64*
  store i64 %589, i64* %595, align 1, !tbaa !2455
  %596 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %597 = bitcast %union.vec128_t* %XMM0 to i8*
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 4
  store i64 %599, i64* %PC
  %600 = bitcast i8* %596 to <2 x i32>*
  %601 = load <2 x i32>, <2 x i32>* %600, align 1
  %602 = getelementptr inbounds i8, i8* %596, i64 8
  %603 = bitcast i8* %602 to <2 x i32>*
  %604 = load <2 x i32>, <2 x i32>* %603, align 1
  %605 = bitcast i8* %597 to double*
  %606 = load double, double* %605, align 1
  %607 = fptrunc double %606 to float
  %608 = bitcast i8* %596 to float*
  store float %607, float* %608, align 1, !tbaa !2453
  %609 = extractelement <2 x i32> %601, i32 1
  %610 = getelementptr inbounds i8, i8* %596, i64 4
  %611 = bitcast i8* %610 to i32*
  store i32 %609, i32* %611, align 1, !tbaa !2453
  %612 = extractelement <2 x i32> %604, i32 0
  %613 = bitcast i8* %602 to i32*
  store i32 %612, i32* %613, align 1, !tbaa !2453
  %614 = extractelement <2 x i32> %604, i32 1
  %615 = getelementptr inbounds i8, i8* %596, i64 12
  %616 = bitcast i8* %615 to i32*
  store i32 %614, i32* %616, align 1, !tbaa !2453
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 1
  store i64 %618, i64* %PC
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %620 = load i64, i64* %619, align 8, !tbaa !2428
  %621 = add i64 %620, 8
  %622 = inttoptr i64 %620 to i64*
  %623 = load i64, i64* %622
  store i64 %623, i64* %RBP, align 8, !tbaa !2428
  store i64 %621, i64* %619, align 8, !tbaa !2428
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 1
  store i64 %625, i64* %PC
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %628 = load i64, i64* %627, align 8, !tbaa !2428
  %629 = inttoptr i64 %628 to i64*
  %630 = load i64, i64* %629
  store i64 %630, i64* %626, align 8, !tbaa !2428
  %631 = add i64 %628, 8
  store i64 %631, i64* %627, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a50_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402a50:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %55 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %56 = bitcast %union.vec128_t* %XMM0 to i8*
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = bitcast i8* %55 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = getelementptr inbounds i8, i8* %55, i64 8
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = bitcast i8* %56 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = getelementptr inbounds i8, i8* %56, i64 8
  %67 = bitcast i8* %66 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = xor i64 %65, %60
  %70 = xor i64 %68, %63
  %71 = trunc i64 %69 to i32
  %72 = lshr i64 %69, 32
  %73 = trunc i64 %72 to i32
  %74 = bitcast i8* %54 to i32*
  store i32 %71, i32* %74, align 1, !tbaa !2452
  %75 = getelementptr inbounds i8, i8* %54, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %73, i32* %76, align 1, !tbaa !2452
  %77 = trunc i64 %70 to i32
  %78 = getelementptr inbounds i8, i8* %54, i64 8
  %79 = bitcast i8* %78 to i32*
  store i32 %77, i32* %79, align 1, !tbaa !2452
  %80 = lshr i64 %70, 32
  %81 = trunc i64 %80 to i32
  %82 = getelementptr inbounds i8, i8* %54, i64 12
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 1, !tbaa !2452
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = load i32, i32* %EDI
  %87 = zext i32 %86 to i64
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 20
  %99 = load i32, i32* %EDX
  %100 = zext i32 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 32
  %106 = load i64, i64* %RCX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %105 to i64*
  store i64 %106, i64* %109
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 36
  %112 = load i32, i32* %R8D
  %113 = zext i32 %112 to i64
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %116
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 60
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 0, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 56
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 7
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  store i32 0, i32* %126
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 40
  %129 = bitcast %union.vec128_t* %XMM0 to i8*
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 5
  store i64 %131, i64* %PC
  %132 = bitcast i8* %129 to <2 x float>*
  %133 = load <2 x float>, <2 x float>* %132, align 1
  %134 = extractelement <2 x float> %133, i32 0
  %135 = inttoptr i64 %128 to float*
  store float %134, float* %135
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 8
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i32*
  %141 = load i32, i32* %140
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %142, align 1, !tbaa !2432
  %143 = and i32 %141, 255
  %144 = call i32 @llvm.ctpop.i32(i32 %143) #16
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %147, i8* %148, align 1, !tbaa !2446
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2447
  %150 = icmp eq i32 %141, 0
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %151, i8* %152, align 1, !tbaa !2448
  %153 = lshr i32 %141, 31
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %154, i8* %155, align 1, !tbaa !2449
  %156 = lshr i32 %141, 31
  %157 = xor i32 %153, %156
  %158 = add nuw nsw i32 %157, %156
  %159 = icmp eq i32 %158, 2
  %160 = zext i1 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %160, i8* %161, align 1, !tbaa !2450
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 19
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 6
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 6
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %169 = load i8, i8* %168, align 1, !tbaa !2448
  %170 = icmp eq i8 %169, 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %172 = load i8, i8* %171, align 1, !tbaa !2449
  %173 = icmp ne i8 %172, 0
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %175 = load i8, i8* %174, align 1, !tbaa !2450
  %176 = icmp ne i8 %175, 0
  %177 = xor i1 %173, %176
  %178 = xor i1 %177, true
  %179 = and i1 %170, %178
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %182 = select i1 %179, i64 %163, i64 %165
  store i64 %182, i64* %181, align 8, !tbaa !2428
  %183 = load i8, i8* %BRANCH_TAKEN
  %184 = icmp eq i8 %183, 1
  br i1 %184, label %block_402a93, label %block_402a86

block_402b9a:                                     ; preds = %block_402b58
  %185 = sub i64 %271, 4
  %186 = bitcast %union.vec128_t* %XMM0 to i8*
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC
  %189 = bitcast i8* %186 to <2 x float>*
  %190 = load <2 x float>, <2 x float>* %189, align 1
  %191 = extractelement <2 x float> %190, i32 0
  %192 = inttoptr i64 %185 to float*
  store float %191, float* %192
  br label %block_402ba4

block_402b58:                                     ; preds = %block_402b64, %block_402b51
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402b51 ], [ %MEMORY.0, %block_402b64 ]
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 44
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %RAX, align 8, !tbaa !2428
  %200 = load i32, i32* %EAX
  %201 = zext i32 %200 to i64
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 8
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 3
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i32*
  %207 = load i32, i32* %206
  %208 = sub i32 %200, %207
  %209 = icmp ult i32 %200, %207
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %210, i8* %211, align 1, !tbaa !2432
  %212 = and i32 %208, 255
  %213 = call i32 @llvm.ctpop.i32(i32 %212) #16
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %216, i8* %217, align 1, !tbaa !2446
  %218 = xor i32 %207, %200
  %219 = xor i32 %218, %208
  %220 = lshr i32 %219, 4
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %222, i8* %223, align 1, !tbaa !2447
  %224 = icmp eq i32 %208, 0
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %225, i8* %226, align 1, !tbaa !2448
  %227 = lshr i32 %208, 31
  %228 = trunc i32 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %228, i8* %229, align 1, !tbaa !2449
  %230 = lshr i32 %200, 31
  %231 = lshr i32 %207, 31
  %232 = xor i32 %231, %230
  %233 = xor i32 %227, %230
  %234 = add nuw nsw i32 %233, %232
  %235 = icmp eq i32 %234, 2
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %236, i8* %237, align 1, !tbaa !2450
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 60
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 6
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 6
  store i64 %243, i64* %PC
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %245 = load i8, i8* %244, align 1, !tbaa !2449
  %246 = icmp ne i8 %245, 0
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %248 = load i8, i8* %247, align 1, !tbaa !2450
  %249 = icmp ne i8 %248, 0
  %250 = xor i1 %246, %249
  %251 = xor i1 %250, true
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %254 = select i1 %250, i64 %241, i64 %239
  store i64 %254, i64* %253, align 8, !tbaa !2428
  %255 = load i8, i8* %BRANCH_TAKEN
  %256 = icmp eq i8 %255, 1
  %257 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 40
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to float*
  %263 = load float, float* %262
  %264 = bitcast i8* %257 to float*
  store float %263, float* %264, align 1, !tbaa !2453
  %265 = getelementptr inbounds i8, i8* %257, i64 4
  %266 = bitcast i8* %265 to float*
  store float 0.000000e+00, float* %266, align 1, !tbaa !2453
  %267 = getelementptr inbounds i8, i8* %257, i64 8
  %268 = bitcast i8* %267 to float*
  store float 0.000000e+00, float* %268, align 1, !tbaa !2453
  %269 = getelementptr inbounds i8, i8* %257, i64 12
  %270 = bitcast i8* %269 to float*
  store float 0.000000e+00, float* %270, align 1, !tbaa !2453
  %271 = load i64, i64* %RBP
  br i1 %256, label %block_402b9a, label %block_402b64

block_402ba4:                                     ; preds = %block_402b42, %block_402a86, %block_402b9a
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_402b42 ], [ %MEMORY.0, %block_402b9a ], [ %2, %block_402a86 ]
  %272 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %273 = load i64, i64* %RBP
  %274 = sub i64 %273, 4
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 5
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %274 to float*
  %278 = load float, float* %277
  %279 = bitcast i8* %272 to float*
  store float %278, float* %279, align 1, !tbaa !2453
  %280 = getelementptr inbounds i8, i8* %272, i64 4
  %281 = bitcast i8* %280 to float*
  store float 0.000000e+00, float* %281, align 1, !tbaa !2453
  %282 = getelementptr inbounds i8, i8* %272, i64 8
  %283 = bitcast i8* %282 to float*
  store float 0.000000e+00, float* %283, align 1, !tbaa !2453
  %284 = getelementptr inbounds i8, i8* %272, i64 12
  %285 = bitcast i8* %284 to float*
  store float 0.000000e+00, float* %285, align 1, !tbaa !2453
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 1
  store i64 %287, i64* %PC
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %289 = load i64, i64* %288, align 8, !tbaa !2428
  %290 = add i64 %289, 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RBP, align 8, !tbaa !2428
  store i64 %290, i64* %288, align 8, !tbaa !2428
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %295, align 8, !tbaa !2428
  %300 = add i64 %297, 8
  store i64 %300, i64* %296, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_402ad8:                                     ; preds = %block_402ace
  %301 = load i64, i64* %RAX
  %302 = load i32, i32* %EAX
  %303 = zext i32 %302 to i64
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 2
  store i64 %305, i64* %PC
  %306 = xor i64 %303, %301
  %307 = trunc i64 %306 to i32
  %308 = and i64 %306, 4294967295
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %309, align 1, !tbaa !2432
  %310 = and i32 %307, 255
  %311 = call i32 @llvm.ctpop.i32(i32 %310) #16
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %314, i8* %315, align 1, !tbaa !2446
  %316 = icmp eq i32 %307, 0
  %317 = zext i1 %316 to i8
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %317, i8* %318, align 1, !tbaa !2448
  %319 = lshr i32 %307, 31
  %320 = trunc i32 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %320, i8* %321, align 1, !tbaa !2449
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %322, align 1, !tbaa !2450
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %323, align 1, !tbaa !2447
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 8
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = trunc i64 %324 to i32
  %330 = inttoptr i64 %326 to i32*
  %331 = load i32, i32* %330
  %332 = sub i32 %329, %331
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = icmp ult i32 %329, %331
  %335 = zext i1 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %335, i8* %336, align 1, !tbaa !2432
  %337 = and i32 %332, 255
  %338 = call i32 @llvm.ctpop.i32(i32 %337) #16
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %341, i8* %342, align 1, !tbaa !2446
  %343 = xor i32 %331, %329
  %344 = xor i32 %343, %332
  %345 = lshr i32 %344, 4
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %347, i8* %348, align 1, !tbaa !2447
  %349 = icmp eq i32 %332, 0
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %350, i8* %351, align 1, !tbaa !2448
  %352 = lshr i32 %332, 31
  %353 = trunc i32 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %353, i8* %354, align 1, !tbaa !2449
  %355 = lshr i32 %329, 31
  %356 = lshr i32 %331, 31
  %357 = xor i32 %356, %355
  %358 = xor i32 %352, %355
  %359 = add nuw nsw i32 %358, %357
  %360 = icmp eq i32 %359, 2
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %361, i8* %362, align 1, !tbaa !2450
  %363 = load i64, i64* %RAX
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  %366 = trunc i64 %363 to i32
  %367 = add i32 1, %366
  %368 = zext i32 %367 to i64
  store i64 %368, i64* %RAX, align 8, !tbaa !2428
  %369 = icmp ult i32 %367, %366
  %370 = icmp ult i32 %367, 1
  %371 = or i1 %369, %370
  %372 = zext i1 %371 to i8
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %372, i8* %373, align 1, !tbaa !2432
  %374 = and i32 %367, 255
  %375 = call i32 @llvm.ctpop.i32(i32 %374) #16
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  %378 = xor i8 %377, 1
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %378, i8* %379, align 1, !tbaa !2446
  %380 = xor i64 1, %363
  %381 = trunc i64 %380 to i32
  %382 = xor i32 %381, %367
  %383 = lshr i32 %382, 4
  %384 = trunc i32 %383 to i8
  %385 = and i8 %384, 1
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %385, i8* %386, align 1, !tbaa !2447
  %387 = icmp eq i32 %367, 0
  %388 = zext i1 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %388, i8* %389, align 1, !tbaa !2448
  %390 = lshr i32 %367, 31
  %391 = trunc i32 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %391, i8* %392, align 1, !tbaa !2449
  %393 = lshr i32 %366, 31
  %394 = xor i32 %390, %393
  %395 = add nuw nsw i32 %394, %390
  %396 = icmp eq i32 %395, 2
  %397 = zext i1 %396 to i8
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %397, i8* %398, align 1, !tbaa !2450
  %399 = load i64, i64* %RAX
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 36
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i32*
  %405 = load i32, i32* %404
  %406 = shl i64 %399, 32
  %407 = ashr exact i64 %406, 32
  %408 = sext i32 %405 to i64
  %409 = mul nsw i64 %408, %407
  %410 = trunc i64 %409 to i32
  %411 = and i64 %409, 4294967295
  store i64 %411, i64* %RAX, align 8, !tbaa !2428
  %412 = shl i64 %409, 32
  %413 = ashr exact i64 %412, 32
  %414 = icmp ne i64 %413, %409
  %415 = zext i1 %414 to i8
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %415, i8* %416, align 1, !tbaa !2432
  %417 = and i32 %410, 255
  %418 = call i32 @llvm.ctpop.i32(i32 %417) #16
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  %421 = xor i8 %420, 1
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %421, i8* %422, align 1, !tbaa !2446
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %423, align 1, !tbaa !2447
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %424, align 1, !tbaa !2448
  %425 = lshr i32 %410, 31
  %426 = trunc i32 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %426, i8* %427, align 1, !tbaa !2449
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %415, i8* %428, align 1, !tbaa !2450
  %429 = load i64, i64* %RBP
  %430 = sub i64 %429, 52
  %431 = load i32, i32* %EAX
  %432 = zext i32 %431 to i64
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 3
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %430 to i32*
  store i32 %431, i32* %435
  br label %block_402ae7

block_402aee:                                     ; preds = %block_402ae7, %block_402afa
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.5, %block_402ae7 ], [ %MEMORY.2, %block_402afa ]
  %436 = load i64, i64* %RBP
  %437 = sub i64 %436, 44
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 3
  store i64 %439, i64* %PC
  %440 = inttoptr i64 %437 to i32*
  %441 = load i32, i32* %440
  %442 = zext i32 %441 to i64
  store i64 %442, i64* %RAX, align 8, !tbaa !2428
  %443 = load i32, i32* %EAX
  %444 = zext i32 %443 to i64
  %445 = load i64, i64* %RBP
  %446 = sub i64 %445, 8
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 3
  store i64 %448, i64* %PC
  %449 = inttoptr i64 %446 to i32*
  %450 = load i32, i32* %449
  %451 = sub i32 %443, %450
  %452 = icmp ult i32 %443, %450
  %453 = zext i1 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %453, i8* %454, align 1, !tbaa !2432
  %455 = and i32 %451, 255
  %456 = call i32 @llvm.ctpop.i32(i32 %455) #16
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  %459 = xor i8 %458, 1
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %459, i8* %460, align 1, !tbaa !2446
  %461 = xor i32 %450, %443
  %462 = xor i32 %461, %451
  %463 = lshr i32 %462, 4
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %465, i8* %466, align 1, !tbaa !2447
  %467 = icmp eq i32 %451, 0
  %468 = zext i1 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %468, i8* %469, align 1, !tbaa !2448
  %470 = lshr i32 %451, 31
  %471 = trunc i32 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %471, i8* %472, align 1, !tbaa !2449
  %473 = lshr i32 %443, 31
  %474 = lshr i32 %450, 31
  %475 = xor i32 %474, %473
  %476 = xor i32 %470, %473
  %477 = add nuw nsw i32 %476, %475
  %478 = icmp eq i32 %477, 2
  %479 = zext i1 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %479, i8* %480, align 1, !tbaa !2450
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 78
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 6
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 6
  store i64 %486, i64* %PC
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %488 = load i8, i8* %487, align 1, !tbaa !2449
  %489 = icmp ne i8 %488, 0
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %491 = load i8, i8* %490, align 1, !tbaa !2450
  %492 = icmp ne i8 %491, 0
  %493 = xor i1 %489, %492
  %494 = xor i1 %493, true
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %497 = select i1 %493, i64 %484, i64 %482
  store i64 %497, i64* %496, align 8, !tbaa !2428
  %498 = load i8, i8* %BRANCH_TAKEN
  %499 = icmp eq i8 %498, 1
  %500 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %501 = load i64, i64* %RBP
  %502 = sub i64 %501, 40
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 5
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %502 to float*
  %506 = load float, float* %505
  %507 = bitcast i8* %500 to float*
  store float %506, float* %507, align 1, !tbaa !2453
  %508 = getelementptr inbounds i8, i8* %500, i64 4
  %509 = bitcast i8* %508 to float*
  store float 0.000000e+00, float* %509, align 1, !tbaa !2453
  %510 = getelementptr inbounds i8, i8* %500, i64 8
  %511 = bitcast i8* %510 to float*
  store float 0.000000e+00, float* %511, align 1, !tbaa !2453
  %512 = getelementptr inbounds i8, i8* %500, i64 12
  %513 = bitcast i8* %512 to float*
  store float 0.000000e+00, float* %513, align 1, !tbaa !2453
  %514 = load i64, i64* %RBP
  br i1 %499, label %block_402b42, label %block_402afa

block_402a9d:                                     ; preds = %block_402a93
  %515 = load i64, i64* %RBP
  %516 = sub i64 %515, 36
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 4
  store i64 %518, i64* %PC
  %519 = inttoptr i64 %516 to i32*
  %520 = load i32, i32* %519
  %521 = sub i32 %520, 1
  %522 = icmp ult i32 %520, 1
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %523, i8* %524, align 1, !tbaa !2432
  %525 = and i32 %521, 255
  %526 = call i32 @llvm.ctpop.i32(i32 %525) #16
  %527 = trunc i32 %526 to i8
  %528 = and i8 %527, 1
  %529 = xor i8 %528, 1
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %529, i8* %530, align 1, !tbaa !2446
  %531 = xor i32 %520, 1
  %532 = xor i32 %531, %521
  %533 = lshr i32 %532, 4
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %535, i8* %536, align 1, !tbaa !2447
  %537 = icmp eq i32 %521, 0
  %538 = zext i1 %537 to i8
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %538, i8* %539, align 1, !tbaa !2448
  %540 = lshr i32 %521, 31
  %541 = trunc i32 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %541, i8* %542, align 1, !tbaa !2449
  %543 = lshr i32 %520, 31
  %544 = xor i32 %540, %543
  %545 = add nuw nsw i32 %544, %543
  %546 = icmp eq i32 %545, 2
  %547 = zext i1 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %547, i8* %548, align 1, !tbaa !2450
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 176
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 6
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 6
  store i64 %554, i64* %PC
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %556 = load i8, i8* %555, align 1, !tbaa !2448
  store i8 %556, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %558 = icmp ne i8 %556, 0
  %559 = select i1 %558, i64 %550, i64 %552
  store i64 %559, i64* %557, align 8, !tbaa !2428
  %560 = load i8, i8* %BRANCH_TAKEN
  %561 = icmp eq i8 %560, 1
  br i1 %561, label %block_402b51, label %block_402aa7

block_402ace:                                     ; preds = %block_402abf, %block_402aa7
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_402aa7 ], [ %MEMORY.4, %block_402abf ]
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 36
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 4
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to i32*
  %567 = load i32, i32* %566
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %568, align 1, !tbaa !2432
  %569 = and i32 %567, 255
  %570 = call i32 @llvm.ctpop.i32(i32 %569) #16
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = xor i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %573, i8* %574, align 1, !tbaa !2446
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %575, align 1, !tbaa !2447
  %576 = icmp eq i32 %567, 0
  %577 = zext i1 %576 to i8
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %577, i8* %578, align 1, !tbaa !2448
  %579 = lshr i32 %567, 31
  %580 = trunc i32 %579 to i8
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %580, i8* %581, align 1, !tbaa !2449
  %582 = lshr i32 %567, 31
  %583 = xor i32 %579, %582
  %584 = add nuw nsw i32 %583, %582
  %585 = icmp eq i32 %584, 2
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %586, i8* %587, align 1, !tbaa !2450
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 21
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 6
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 6
  store i64 %593, i64* %PC
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %595 = load i8, i8* %594, align 1, !tbaa !2449
  %596 = icmp ne i8 %595, 0
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %598 = load i8, i8* %597, align 1, !tbaa !2450
  %599 = icmp ne i8 %598, 0
  %600 = xor i1 %596, %599
  %601 = xor i1 %600, true
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %604 = select i1 %600, i64 %591, i64 %589
  store i64 %604, i64* %603, align 8, !tbaa !2428
  %605 = load i8, i8* %BRANCH_TAKEN
  %606 = icmp eq i8 %605, 1
  br i1 %606, label %block_402ae7, label %block_402ad8

block_402aa7:                                     ; preds = %block_402a93, %block_402a9d
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402a93 ], [ %2, %block_402a9d ]
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 48
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 7
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  store i32 0, i32* %611
  %612 = load i64, i64* %RBP
  %613 = sub i64 %612, 52
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 7
  store i64 %615, i64* %PC
  %616 = inttoptr i64 %613 to i32*
  store i32 0, i32* %616
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 20
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %623, align 1, !tbaa !2432
  %624 = and i32 %622, 255
  %625 = call i32 @llvm.ctpop.i32(i32 %624) #16
  %626 = trunc i32 %625 to i8
  %627 = and i8 %626, 1
  %628 = xor i8 %627, 1
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %628, i8* %629, align 1, !tbaa !2446
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %630, align 1, !tbaa !2447
  %631 = icmp eq i32 %622, 0
  %632 = zext i1 %631 to i8
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %632, i8* %633, align 1, !tbaa !2448
  %634 = lshr i32 %622, 31
  %635 = trunc i32 %634 to i8
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %635, i8* %636, align 1, !tbaa !2449
  %637 = lshr i32 %622, 31
  %638 = xor i32 %634, %637
  %639 = add nuw nsw i32 %638, %637
  %640 = icmp eq i32 %639, 2
  %641 = zext i1 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %641, i8* %642, align 1, !tbaa !2450
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 21
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 6
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 6
  store i64 %648, i64* %PC
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %650 = load i8, i8* %649, align 1, !tbaa !2449
  %651 = icmp ne i8 %650, 0
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %653 = load i8, i8* %652, align 1, !tbaa !2450
  %654 = icmp ne i8 %653, 0
  %655 = xor i1 %651, %654
  %656 = xor i1 %655, true
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %659 = select i1 %655, i64 %646, i64 %644
  store i64 %659, i64* %658, align 8, !tbaa !2428
  %660 = load i8, i8* %BRANCH_TAKEN
  %661 = icmp eq i8 %660, 1
  br i1 %661, label %block_402ace, label %block_402abf

block_402afa:                                     ; preds = %block_402aee
  %662 = sub i64 %514, 16
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = inttoptr i64 %662 to i64*
  %666 = load i64, i64* %665
  store i64 %666, i64* %RAX, align 8, !tbaa !2428
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 48
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 4
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %668 to i32*
  %672 = load i32, i32* %671
  %673 = sext i32 %672 to i64
  store i64 %673, i64* %RCX, align 8, !tbaa !2428
  %674 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %675 = load i64, i64* %RAX
  %676 = load i64, i64* %RCX
  %677 = mul i64 %676, 4
  %678 = add i64 %677, %675
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 5
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %678 to float*
  %682 = load float, float* %681
  %683 = bitcast i8* %674 to float*
  store float %682, float* %683, align 1, !tbaa !2453
  %684 = getelementptr inbounds i8, i8* %674, i64 4
  %685 = bitcast i8* %684 to float*
  store float 0.000000e+00, float* %685, align 1, !tbaa !2453
  %686 = getelementptr inbounds i8, i8* %674, i64 8
  %687 = bitcast i8* %686 to float*
  store float 0.000000e+00, float* %687, align 1, !tbaa !2453
  %688 = getelementptr inbounds i8, i8* %674, i64 12
  %689 = bitcast i8* %688 to float*
  store float 0.000000e+00, float* %689, align 1, !tbaa !2453
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 32
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 4
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %RAX, align 8, !tbaa !2428
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 52
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 4
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i32*
  %701 = load i32, i32* %700
  %702 = sext i32 %701 to i64
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %703 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %704 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %705 = load i64, i64* %RAX
  %706 = load i64, i64* %RCX
  %707 = mul i64 %706, 4
  %708 = add i64 %707, %705
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  store i64 %710, i64* %PC
  %711 = bitcast i8* %704 to <2 x float>*
  %712 = load <2 x float>, <2 x float>* %711, align 1
  %713 = getelementptr inbounds i8, i8* %704, i64 8
  %714 = bitcast i8* %713 to <2 x i32>*
  %715 = load <2 x i32>, <2 x i32>* %714, align 1
  %716 = inttoptr i64 %708 to float*
  %717 = load float, float* %716
  %718 = extractelement <2 x float> %712, i32 0
  %719 = fmul float %718, %717
  %720 = bitcast i8* %703 to float*
  store float %719, float* %720, align 1, !tbaa !2453
  %721 = bitcast <2 x float> %712 to <2 x i32>
  %722 = extractelement <2 x i32> %721, i32 1
  %723 = getelementptr inbounds i8, i8* %703, i64 4
  %724 = bitcast i8* %723 to i32*
  store i32 %722, i32* %724, align 1, !tbaa !2453
  %725 = extractelement <2 x i32> %715, i32 0
  %726 = getelementptr inbounds i8, i8* %703, i64 8
  %727 = bitcast i8* %726 to i32*
  store i32 %725, i32* %727, align 1, !tbaa !2453
  %728 = extractelement <2 x i32> %715, i32 1
  %729 = getelementptr inbounds i8, i8* %703, i64 12
  %730 = bitcast i8* %729 to i32*
  store i32 %728, i32* %730, align 1, !tbaa !2453
  %731 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %732 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %733 = bitcast %union.vec128_t* %XMM1 to i8*
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 4
  store i64 %735, i64* %PC
  %736 = bitcast i8* %732 to <2 x float>*
  %737 = load <2 x float>, <2 x float>* %736, align 1
  %738 = getelementptr inbounds i8, i8* %732, i64 8
  %739 = bitcast i8* %738 to <2 x i32>*
  %740 = load <2 x i32>, <2 x i32>* %739, align 1
  %741 = bitcast i8* %733 to <2 x float>*
  %742 = load <2 x float>, <2 x float>* %741, align 1
  %743 = extractelement <2 x float> %737, i32 0
  %744 = extractelement <2 x float> %742, i32 0
  %745 = fadd float %743, %744
  %746 = bitcast i8* %731 to float*
  store float %745, float* %746, align 1, !tbaa !2453
  %747 = bitcast <2 x float> %737 to <2 x i32>
  %748 = extractelement <2 x i32> %747, i32 1
  %749 = getelementptr inbounds i8, i8* %731, i64 4
  %750 = bitcast i8* %749 to i32*
  store i32 %748, i32* %750, align 1, !tbaa !2453
  %751 = extractelement <2 x i32> %740, i32 0
  %752 = getelementptr inbounds i8, i8* %731, i64 8
  %753 = bitcast i8* %752 to i32*
  store i32 %751, i32* %753, align 1, !tbaa !2453
  %754 = extractelement <2 x i32> %740, i32 1
  %755 = getelementptr inbounds i8, i8* %731, i64 12
  %756 = bitcast i8* %755 to i32*
  store i32 %754, i32* %756, align 1, !tbaa !2453
  %757 = load i64, i64* %RBP
  %758 = sub i64 %757, 40
  %759 = bitcast %union.vec128_t* %XMM0 to i8*
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  store i64 %761, i64* %PC
  %762 = bitcast i8* %759 to <2 x float>*
  %763 = load <2 x float>, <2 x float>* %762, align 1
  %764 = extractelement <2 x float> %763, i32 0
  %765 = inttoptr i64 %758 to float*
  store float %764, float* %765
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 48
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 3
  store i64 %769, i64* %PC
  %770 = inttoptr i64 %767 to i32*
  %771 = load i32, i32* %770
  %772 = zext i32 %771 to i64
  store i64 %772, i64* %RDX, align 8, !tbaa !2428
  %773 = load i64, i64* %RDX
  %774 = load i64, i64* %RBP
  %775 = sub i64 %774, 20
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 3
  store i64 %777, i64* %PC
  %778 = trunc i64 %773 to i32
  %779 = inttoptr i64 %775 to i32*
  %780 = load i32, i32* %779
  %781 = add i32 %780, %778
  %782 = zext i32 %781 to i64
  store i64 %782, i64* %RDX, align 8, !tbaa !2428
  %783 = icmp ult i32 %781, %778
  %784 = icmp ult i32 %781, %780
  %785 = or i1 %783, %784
  %786 = zext i1 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %786, i8* %787, align 1, !tbaa !2432
  %788 = and i32 %781, 255
  %789 = call i32 @llvm.ctpop.i32(i32 %788) #16
  %790 = trunc i32 %789 to i8
  %791 = and i8 %790, 1
  %792 = xor i8 %791, 1
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %792, i8* %793, align 1, !tbaa !2446
  %794 = xor i32 %780, %778
  %795 = xor i32 %794, %781
  %796 = lshr i32 %795, 4
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %798, i8* %799, align 1, !tbaa !2447
  %800 = icmp eq i32 %781, 0
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %801, i8* %802, align 1, !tbaa !2448
  %803 = lshr i32 %781, 31
  %804 = trunc i32 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %804, i8* %805, align 1, !tbaa !2449
  %806 = lshr i32 %778, 31
  %807 = lshr i32 %780, 31
  %808 = xor i32 %803, %806
  %809 = xor i32 %803, %807
  %810 = add nuw nsw i32 %808, %809
  %811 = icmp eq i32 %810, 2
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %812, i8* %813, align 1, !tbaa !2450
  %814 = load i64, i64* %RBP
  %815 = sub i64 %814, 48
  %816 = load i32, i32* %EDX
  %817 = zext i32 %816 to i64
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 3
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %815 to i32*
  store i32 %816, i32* %820
  %821 = load i64, i64* %RBP
  %822 = sub i64 %821, 52
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 3
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %822 to i32*
  %826 = load i32, i32* %825
  %827 = zext i32 %826 to i64
  store i64 %827, i64* %RDX, align 8, !tbaa !2428
  %828 = load i64, i64* %RDX
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 36
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 3
  store i64 %832, i64* %PC
  %833 = trunc i64 %828 to i32
  %834 = inttoptr i64 %830 to i32*
  %835 = load i32, i32* %834
  %836 = add i32 %835, %833
  %837 = zext i32 %836 to i64
  store i64 %837, i64* %RDX, align 8, !tbaa !2428
  %838 = icmp ult i32 %836, %833
  %839 = icmp ult i32 %836, %835
  %840 = or i1 %838, %839
  %841 = zext i1 %840 to i8
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %841, i8* %842, align 1, !tbaa !2432
  %843 = and i32 %836, 255
  %844 = call i32 @llvm.ctpop.i32(i32 %843) #16
  %845 = trunc i32 %844 to i8
  %846 = and i8 %845, 1
  %847 = xor i8 %846, 1
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %847, i8* %848, align 1, !tbaa !2446
  %849 = xor i32 %835, %833
  %850 = xor i32 %849, %836
  %851 = lshr i32 %850, 4
  %852 = trunc i32 %851 to i8
  %853 = and i8 %852, 1
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %853, i8* %854, align 1, !tbaa !2447
  %855 = icmp eq i32 %836, 0
  %856 = zext i1 %855 to i8
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %856, i8* %857, align 1, !tbaa !2448
  %858 = lshr i32 %836, 31
  %859 = trunc i32 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %859, i8* %860, align 1, !tbaa !2449
  %861 = lshr i32 %833, 31
  %862 = lshr i32 %835, 31
  %863 = xor i32 %858, %861
  %864 = xor i32 %858, %862
  %865 = add nuw nsw i32 %863, %864
  %866 = icmp eq i32 %865, 2
  %867 = zext i1 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %867, i8* %868, align 1, !tbaa !2450
  %869 = load i64, i64* %RBP
  %870 = sub i64 %869, 52
  %871 = load i32, i32* %EDX
  %872 = zext i32 %871 to i64
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 3
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %870 to i32*
  store i32 %871, i32* %875
  %876 = load i64, i64* %RBP
  %877 = sub i64 %876, 44
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 3
  store i64 %879, i64* %PC
  %880 = inttoptr i64 %877 to i32*
  %881 = load i32, i32* %880
  %882 = zext i32 %881 to i64
  store i64 %882, i64* %RAX, align 8, !tbaa !2428
  %883 = load i64, i64* %RAX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 3
  store i64 %885, i64* %PC
  %886 = trunc i64 %883 to i32
  %887 = add i32 1, %886
  %888 = zext i32 %887 to i64
  store i64 %888, i64* %RAX, align 8, !tbaa !2428
  %889 = icmp ult i32 %887, %886
  %890 = icmp ult i32 %887, 1
  %891 = or i1 %889, %890
  %892 = zext i1 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %892, i8* %893, align 1, !tbaa !2432
  %894 = and i32 %887, 255
  %895 = call i32 @llvm.ctpop.i32(i32 %894) #16
  %896 = trunc i32 %895 to i8
  %897 = and i8 %896, 1
  %898 = xor i8 %897, 1
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %898, i8* %899, align 1, !tbaa !2446
  %900 = xor i64 1, %883
  %901 = trunc i64 %900 to i32
  %902 = xor i32 %901, %887
  %903 = lshr i32 %902, 4
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %905, i8* %906, align 1, !tbaa !2447
  %907 = icmp eq i32 %887, 0
  %908 = zext i1 %907 to i8
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %908, i8* %909, align 1, !tbaa !2448
  %910 = lshr i32 %887, 31
  %911 = trunc i32 %910 to i8
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %911, i8* %912, align 1, !tbaa !2449
  %913 = lshr i32 %886, 31
  %914 = xor i32 %910, %913
  %915 = add nuw nsw i32 %914, %910
  %916 = icmp eq i32 %915, 2
  %917 = zext i1 %916 to i8
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %917, i8* %918, align 1, !tbaa !2450
  %919 = load i64, i64* %RBP
  %920 = sub i64 %919, 44
  %921 = load i32, i32* %EAX
  %922 = zext i32 %921 to i64
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 3
  store i64 %924, i64* %PC
  %925 = inttoptr i64 %920 to i32*
  store i32 %921, i32* %925
  %926 = load i64, i64* %PC
  %927 = sub i64 %926, 79
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 5
  store i64 %929, i64* %PC
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %927, i64* %930, align 8, !tbaa !2428
  br label %block_402aee

block_402ae7:                                     ; preds = %block_402ace, %block_402ad8
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.3, %block_402ace ], [ %MEMORY.3, %block_402ad8 ]
  %931 = load i64, i64* %RBP
  %932 = sub i64 %931, 44
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 7
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %932 to i32*
  store i32 0, i32* %935
  br label %block_402aee

block_402abf:                                     ; preds = %block_402aa7
  %936 = load i64, i64* %RAX
  %937 = load i32, i32* %EAX
  %938 = zext i32 %937 to i64
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 2
  store i64 %940, i64* %PC
  %941 = xor i64 %938, %936
  %942 = trunc i64 %941 to i32
  %943 = and i64 %941, 4294967295
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %944, align 1, !tbaa !2432
  %945 = and i32 %942, 255
  %946 = call i32 @llvm.ctpop.i32(i32 %945) #16
  %947 = trunc i32 %946 to i8
  %948 = and i8 %947, 1
  %949 = xor i8 %948, 1
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %949, i8* %950, align 1, !tbaa !2446
  %951 = icmp eq i32 %942, 0
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %952, i8* %953, align 1, !tbaa !2448
  %954 = lshr i32 %942, 31
  %955 = trunc i32 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %955, i8* %956, align 1, !tbaa !2449
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %957, align 1, !tbaa !2450
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %958, align 1, !tbaa !2447
  %959 = load i64, i64* %RAX
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 8
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 3
  store i64 %963, i64* %PC
  %964 = trunc i64 %959 to i32
  %965 = inttoptr i64 %961 to i32*
  %966 = load i32, i32* %965
  %967 = sub i32 %964, %966
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RAX, align 8, !tbaa !2428
  %969 = icmp ult i32 %964, %966
  %970 = zext i1 %969 to i8
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %970, i8* %971, align 1, !tbaa !2432
  %972 = and i32 %967, 255
  %973 = call i32 @llvm.ctpop.i32(i32 %972) #16
  %974 = trunc i32 %973 to i8
  %975 = and i8 %974, 1
  %976 = xor i8 %975, 1
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %976, i8* %977, align 1, !tbaa !2446
  %978 = xor i32 %966, %964
  %979 = xor i32 %978, %967
  %980 = lshr i32 %979, 4
  %981 = trunc i32 %980 to i8
  %982 = and i8 %981, 1
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %982, i8* %983, align 1, !tbaa !2447
  %984 = icmp eq i32 %967, 0
  %985 = zext i1 %984 to i8
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %985, i8* %986, align 1, !tbaa !2448
  %987 = lshr i32 %967, 31
  %988 = trunc i32 %987 to i8
  %989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %988, i8* %989, align 1, !tbaa !2449
  %990 = lshr i32 %964, 31
  %991 = lshr i32 %966, 31
  %992 = xor i32 %991, %990
  %993 = xor i32 %987, %990
  %994 = add nuw nsw i32 %993, %992
  %995 = icmp eq i32 %994, 2
  %996 = zext i1 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %996, i8* %997, align 1, !tbaa !2450
  %998 = load i64, i64* %RAX
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 3
  store i64 %1000, i64* %PC
  %1001 = trunc i64 %998 to i32
  %1002 = add i32 1, %1001
  %1003 = zext i32 %1002 to i64
  store i64 %1003, i64* %RAX, align 8, !tbaa !2428
  %1004 = icmp ult i32 %1002, %1001
  %1005 = icmp ult i32 %1002, 1
  %1006 = or i1 %1004, %1005
  %1007 = zext i1 %1006 to i8
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1007, i8* %1008, align 1, !tbaa !2432
  %1009 = and i32 %1002, 255
  %1010 = call i32 @llvm.ctpop.i32(i32 %1009) #16
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1013, i8* %1014, align 1, !tbaa !2446
  %1015 = xor i64 1, %998
  %1016 = trunc i64 %1015 to i32
  %1017 = xor i32 %1016, %1002
  %1018 = lshr i32 %1017, 4
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1020, i8* %1021, align 1, !tbaa !2447
  %1022 = icmp eq i32 %1002, 0
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1023, i8* %1024, align 1, !tbaa !2448
  %1025 = lshr i32 %1002, 31
  %1026 = trunc i32 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1026, i8* %1027, align 1, !tbaa !2449
  %1028 = lshr i32 %1001, 31
  %1029 = xor i32 %1025, %1028
  %1030 = add nuw nsw i32 %1029, %1025
  %1031 = icmp eq i32 %1030, 2
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1032, i8* %1033, align 1, !tbaa !2450
  %1034 = load i64, i64* %RAX
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 20
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039
  %1041 = shl i64 %1034, 32
  %1042 = ashr exact i64 %1041, 32
  %1043 = sext i32 %1040 to i64
  %1044 = mul nsw i64 %1043, %1042
  %1045 = trunc i64 %1044 to i32
  %1046 = and i64 %1044, 4294967295
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = shl i64 %1044, 32
  %1048 = ashr exact i64 %1047, 32
  %1049 = icmp ne i64 %1048, %1044
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1050, i8* %1051, align 1, !tbaa !2432
  %1052 = and i32 %1045, 255
  %1053 = call i32 @llvm.ctpop.i32(i32 %1052) #16
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  %1056 = xor i8 %1055, 1
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1056, i8* %1057, align 1, !tbaa !2446
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1058, align 1, !tbaa !2447
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1059, align 1, !tbaa !2448
  %1060 = lshr i32 %1045, 31
  %1061 = trunc i32 %1060 to i8
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1061, i8* %1062, align 1, !tbaa !2449
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1050, i8* %1063, align 1, !tbaa !2450
  %1064 = load i64, i64* %RBP
  %1065 = sub i64 %1064, 48
  %1066 = load i32, i32* %EAX
  %1067 = zext i32 %1066 to i64
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 3
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1065 to i32*
  store i32 %1066, i32* %1070
  br label %block_402ace

block_402a86:                                     ; preds = %block_402a50
  %1071 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1073 = bitcast %union.vec128_t* %XMM0 to i8*
  %1074 = load i64, i64* %PC
  %1075 = add i64 %1074, 3
  store i64 %1075, i64* %PC
  %1076 = bitcast i8* %1072 to i64*
  %1077 = load i64, i64* %1076, align 1
  %1078 = getelementptr inbounds i8, i8* %1072, i64 8
  %1079 = bitcast i8* %1078 to i64*
  %1080 = load i64, i64* %1079, align 1
  %1081 = bitcast i8* %1073 to i64*
  %1082 = load i64, i64* %1081, align 1
  %1083 = getelementptr inbounds i8, i8* %1073, i64 8
  %1084 = bitcast i8* %1083 to i64*
  %1085 = load i64, i64* %1084, align 1
  %1086 = xor i64 %1082, %1077
  %1087 = xor i64 %1085, %1080
  %1088 = trunc i64 %1086 to i32
  %1089 = lshr i64 %1086, 32
  %1090 = trunc i64 %1089 to i32
  %1091 = bitcast i8* %1071 to i32*
  store i32 %1088, i32* %1091, align 1, !tbaa !2452
  %1092 = getelementptr inbounds i8, i8* %1071, i64 4
  %1093 = bitcast i8* %1092 to i32*
  store i32 %1090, i32* %1093, align 1, !tbaa !2452
  %1094 = trunc i64 %1087 to i32
  %1095 = getelementptr inbounds i8, i8* %1071, i64 8
  %1096 = bitcast i8* %1095 to i32*
  store i32 %1094, i32* %1096, align 1, !tbaa !2452
  %1097 = lshr i64 %1087, 32
  %1098 = trunc i64 %1097 to i32
  %1099 = getelementptr inbounds i8, i8* %1071, i64 12
  %1100 = bitcast i8* %1099 to i32*
  store i32 %1098, i32* %1100, align 1, !tbaa !2452
  %1101 = load i64, i64* %RBP
  %1102 = sub i64 %1101, 4
  %1103 = bitcast %union.vec128_t* %XMM0 to i8*
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 5
  store i64 %1105, i64* %PC
  %1106 = bitcast i8* %1103 to <2 x float>*
  %1107 = load <2 x float>, <2 x float>* %1106, align 1
  %1108 = extractelement <2 x float> %1107, i32 0
  %1109 = inttoptr i64 %1102 to float*
  store float %1108, float* %1109
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 278
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 5
  store i64 %1113, i64* %PC
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1111, i64* %1114, align 8, !tbaa !2428
  br label %block_402ba4

block_402a93:                                     ; preds = %block_402a50
  %1115 = load i64, i64* %RBP
  %1116 = sub i64 %1115, 20
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 4
  store i64 %1118, i64* %PC
  %1119 = inttoptr i64 %1116 to i32*
  %1120 = load i32, i32* %1119
  %1121 = sub i32 %1120, 1
  %1122 = icmp ult i32 %1120, 1
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1123, i8* %1124, align 1, !tbaa !2432
  %1125 = and i32 %1121, 255
  %1126 = call i32 @llvm.ctpop.i32(i32 %1125) #16
  %1127 = trunc i32 %1126 to i8
  %1128 = and i8 %1127, 1
  %1129 = xor i8 %1128, 1
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1129, i8* %1130, align 1, !tbaa !2446
  %1131 = xor i32 %1120, 1
  %1132 = xor i32 %1131, %1121
  %1133 = lshr i32 %1132, 4
  %1134 = trunc i32 %1133 to i8
  %1135 = and i8 %1134, 1
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1135, i8* %1136, align 1, !tbaa !2447
  %1137 = icmp eq i32 %1121, 0
  %1138 = zext i1 %1137 to i8
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1138, i8* %1139, align 1, !tbaa !2448
  %1140 = lshr i32 %1121, 31
  %1141 = trunc i32 %1140 to i8
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1141, i8* %1142, align 1, !tbaa !2449
  %1143 = lshr i32 %1120, 31
  %1144 = xor i32 %1140, %1143
  %1145 = add nuw nsw i32 %1144, %1143
  %1146 = icmp eq i32 %1145, 2
  %1147 = zext i1 %1146 to i8
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1147, i8* %1148, align 1, !tbaa !2450
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 16
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 6
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 6
  store i64 %1154, i64* %PC
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1156 = load i8, i8* %1155, align 1, !tbaa !2448
  %1157 = icmp eq i8 %1156, 0
  %1158 = zext i1 %1157 to i8
  store i8 %1158, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1160 = select i1 %1157, i64 %1150, i64 %1152
  store i64 %1160, i64* %1159, align 8, !tbaa !2428
  %1161 = load i8, i8* %BRANCH_TAKEN
  %1162 = icmp eq i8 %1161, 1
  br i1 %1162, label %block_402aa7, label %block_402a9d

block_402b51:                                     ; preds = %block_402a9d
  %1163 = load i64, i64* %RBP
  %1164 = sub i64 %1163, 44
  %1165 = load i64, i64* %PC
  %1166 = add i64 %1165, 7
  store i64 %1166, i64* %PC
  %1167 = inttoptr i64 %1164 to i32*
  store i32 0, i32* %1167
  br label %block_402b58

block_402b64:                                     ; preds = %block_402b58
  %1168 = sub i64 %271, 16
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 4
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1168 to i64*
  %1172 = load i64, i64* %1171
  store i64 %1172, i64* %RAX, align 8, !tbaa !2428
  %1173 = load i64, i64* %RBP
  %1174 = sub i64 %1173, 44
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 4
  store i64 %1176, i64* %PC
  %1177 = inttoptr i64 %1174 to i32*
  %1178 = load i32, i32* %1177
  %1179 = sext i32 %1178 to i64
  store i64 %1179, i64* %RCX, align 8, !tbaa !2428
  %1180 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1181 = load i64, i64* %RAX
  %1182 = load i64, i64* %RCX
  %1183 = mul i64 %1182, 4
  %1184 = add i64 %1183, %1181
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 5
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to float*
  %1188 = load float, float* %1187
  %1189 = bitcast i8* %1180 to float*
  store float %1188, float* %1189, align 1, !tbaa !2453
  %1190 = getelementptr inbounds i8, i8* %1180, i64 4
  %1191 = bitcast i8* %1190 to float*
  store float 0.000000e+00, float* %1191, align 1, !tbaa !2453
  %1192 = getelementptr inbounds i8, i8* %1180, i64 8
  %1193 = bitcast i8* %1192 to float*
  store float 0.000000e+00, float* %1193, align 1, !tbaa !2453
  %1194 = getelementptr inbounds i8, i8* %1180, i64 12
  %1195 = bitcast i8* %1194 to float*
  store float 0.000000e+00, float* %1195, align 1, !tbaa !2453
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 32
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 4
  store i64 %1199, i64* %PC
  %1200 = inttoptr i64 %1197 to i64*
  %1201 = load i64, i64* %1200
  store i64 %1201, i64* %RAX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RBP
  %1203 = sub i64 %1202, 44
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 4
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1203 to i32*
  %1207 = load i32, i32* %1206
  %1208 = sext i32 %1207 to i64
  store i64 %1208, i64* %RCX, align 8, !tbaa !2428
  %1209 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1210 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1211 = load i64, i64* %RAX
  %1212 = load i64, i64* %RCX
  %1213 = mul i64 %1212, 4
  %1214 = add i64 %1213, %1211
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 5
  store i64 %1216, i64* %PC
  %1217 = bitcast i8* %1210 to <2 x float>*
  %1218 = load <2 x float>, <2 x float>* %1217, align 1
  %1219 = getelementptr inbounds i8, i8* %1210, i64 8
  %1220 = bitcast i8* %1219 to <2 x i32>*
  %1221 = load <2 x i32>, <2 x i32>* %1220, align 1
  %1222 = inttoptr i64 %1214 to float*
  %1223 = load float, float* %1222
  %1224 = extractelement <2 x float> %1218, i32 0
  %1225 = fmul float %1224, %1223
  %1226 = bitcast i8* %1209 to float*
  store float %1225, float* %1226, align 1, !tbaa !2453
  %1227 = bitcast <2 x float> %1218 to <2 x i32>
  %1228 = extractelement <2 x i32> %1227, i32 1
  %1229 = getelementptr inbounds i8, i8* %1209, i64 4
  %1230 = bitcast i8* %1229 to i32*
  store i32 %1228, i32* %1230, align 1, !tbaa !2453
  %1231 = extractelement <2 x i32> %1221, i32 0
  %1232 = getelementptr inbounds i8, i8* %1209, i64 8
  %1233 = bitcast i8* %1232 to i32*
  store i32 %1231, i32* %1233, align 1, !tbaa !2453
  %1234 = extractelement <2 x i32> %1221, i32 1
  %1235 = getelementptr inbounds i8, i8* %1209, i64 12
  %1236 = bitcast i8* %1235 to i32*
  store i32 %1234, i32* %1236, align 1, !tbaa !2453
  %1237 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1239 = bitcast %union.vec128_t* %XMM1 to i8*
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 4
  store i64 %1241, i64* %PC
  %1242 = bitcast i8* %1238 to <2 x float>*
  %1243 = load <2 x float>, <2 x float>* %1242, align 1
  %1244 = getelementptr inbounds i8, i8* %1238, i64 8
  %1245 = bitcast i8* %1244 to <2 x i32>*
  %1246 = load <2 x i32>, <2 x i32>* %1245, align 1
  %1247 = bitcast i8* %1239 to <2 x float>*
  %1248 = load <2 x float>, <2 x float>* %1247, align 1
  %1249 = extractelement <2 x float> %1243, i32 0
  %1250 = extractelement <2 x float> %1248, i32 0
  %1251 = fadd float %1249, %1250
  %1252 = bitcast i8* %1237 to float*
  store float %1251, float* %1252, align 1, !tbaa !2453
  %1253 = bitcast <2 x float> %1243 to <2 x i32>
  %1254 = extractelement <2 x i32> %1253, i32 1
  %1255 = getelementptr inbounds i8, i8* %1237, i64 4
  %1256 = bitcast i8* %1255 to i32*
  store i32 %1254, i32* %1256, align 1, !tbaa !2453
  %1257 = extractelement <2 x i32> %1246, i32 0
  %1258 = getelementptr inbounds i8, i8* %1237, i64 8
  %1259 = bitcast i8* %1258 to i32*
  store i32 %1257, i32* %1259, align 1, !tbaa !2453
  %1260 = extractelement <2 x i32> %1246, i32 1
  %1261 = getelementptr inbounds i8, i8* %1237, i64 12
  %1262 = bitcast i8* %1261 to i32*
  store i32 %1260, i32* %1262, align 1, !tbaa !2453
  %1263 = load i64, i64* %RBP
  %1264 = sub i64 %1263, 40
  %1265 = bitcast %union.vec128_t* %XMM0 to i8*
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 5
  store i64 %1267, i64* %PC
  %1268 = bitcast i8* %1265 to <2 x float>*
  %1269 = load <2 x float>, <2 x float>* %1268, align 1
  %1270 = extractelement <2 x float> %1269, i32 0
  %1271 = inttoptr i64 %1264 to float*
  store float %1270, float* %1271
  %1272 = load i64, i64* %RBP
  %1273 = sub i64 %1272, 44
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 3
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1273 to i32*
  %1277 = load i32, i32* %1276
  %1278 = zext i32 %1277 to i64
  store i64 %1278, i64* %RAX, align 8, !tbaa !2428
  %1279 = load i64, i64* %RAX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = trunc i64 %1279 to i32
  %1283 = add i32 1, %1282
  %1284 = zext i32 %1283 to i64
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = icmp ult i32 %1283, %1282
  %1286 = icmp ult i32 %1283, 1
  %1287 = or i1 %1285, %1286
  %1288 = zext i1 %1287 to i8
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1288, i8* %1289, align 1, !tbaa !2432
  %1290 = and i32 %1283, 255
  %1291 = call i32 @llvm.ctpop.i32(i32 %1290) #16
  %1292 = trunc i32 %1291 to i8
  %1293 = and i8 %1292, 1
  %1294 = xor i8 %1293, 1
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1294, i8* %1295, align 1, !tbaa !2446
  %1296 = xor i64 1, %1279
  %1297 = trunc i64 %1296 to i32
  %1298 = xor i32 %1297, %1283
  %1299 = lshr i32 %1298, 4
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1301, i8* %1302, align 1, !tbaa !2447
  %1303 = icmp eq i32 %1283, 0
  %1304 = zext i1 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1304, i8* %1305, align 1, !tbaa !2448
  %1306 = lshr i32 %1283, 31
  %1307 = trunc i32 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1307, i8* %1308, align 1, !tbaa !2449
  %1309 = lshr i32 %1282, 31
  %1310 = xor i32 %1306, %1309
  %1311 = add nuw nsw i32 %1310, %1306
  %1312 = icmp eq i32 %1311, 2
  %1313 = zext i1 %1312 to i8
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1313, i8* %1314, align 1, !tbaa !2450
  %1315 = load i64, i64* %RBP
  %1316 = sub i64 %1315, 44
  %1317 = load i32, i32* %EAX
  %1318 = zext i32 %1317 to i64
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 3
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1316 to i32*
  store i32 %1317, i32* %1321
  %1322 = load i64, i64* %PC
  %1323 = sub i64 %1322, 61
  %1324 = load i64, i64* %PC
  %1325 = add i64 %1324, 5
  store i64 %1325, i64* %PC
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1323, i64* %1326, align 8, !tbaa !2428
  br label %block_402b58

block_402b42:                                     ; preds = %block_402aee
  %1327 = sub i64 %514, 4
  %1328 = bitcast %union.vec128_t* %XMM0 to i8*
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 5
  store i64 %1330, i64* %PC
  %1331 = bitcast i8* %1328 to <2 x float>*
  %1332 = load <2 x float>, <2 x float>* %1331, align 1
  %1333 = extractelement <2 x float> %1332, i32 0
  %1334 = inttoptr i64 %1327 to float*
  store float %1333, float* %1334
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 88
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 5
  store i64 %1338, i64* %PC
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1336, i64* %1339, align 8, !tbaa !2428
  br label %block_402ba4
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005b0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4005b0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005b0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400580___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400580;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400580___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402eb0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402eb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402eb0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402eb0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e40___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402e40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402e40___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402e40___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400610;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400610_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653150___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653140_clock(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653138_fprintf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4004b0_memset(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400478;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400478__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dscal() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402d70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402d70_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dmxpy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402010_dmxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @matgen() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4017b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4017b0_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @daxpy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4028e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4028e0_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @ddot() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402a50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402a50_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @epslon() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402810;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402810_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgesl() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c90_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005c0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @idamax() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402bb0_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @print_time() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4028d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @print_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4028d0_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @what_date() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @18, void ()** @2)
  ret void
}

define internal %struct.Memory* @what_date_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400600_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgefa() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401980;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @19, void ()** @2)
  ret void
}

define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401980_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402eb4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @20, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402eb4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_402eb0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_402e40___libc_csu_init()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2445, !2445, i64 0}
!2453 = !{!2454, !2454, i64 0}
!2454 = !{!"float", !2430, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"double", !2430, i64 0}
