; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_402ec0__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_402ec0__rodata = internal constant %seg_402ec0__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005b0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400580___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005b0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400580___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402eb0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e40___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402810_epslon_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402d70_dscal_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400478__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402010_dmxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400510_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402bb0_idamax_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_400478__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400478:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #8
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2447
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2448
  store i8 0, i8* %10, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_400478.block_40048a_crit_edge, label %block_400488

block_400478.block_40048a_crit_edge:              ; preds = %block_400478
  br label %block_40048a

block_400488:                                     ; preds = %block_400478
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_40048a

block_40048a:                                     ; preds = %block_400478.block_40048a_crit_edge, %block_400488
  %27 = phi i64 [ %22, %block_400478.block_40048a_crit_edge ], [ %.pre1, %block_400488 ]
  %28 = phi i64 [ %4, %block_400478.block_40048a_crit_edge ], [ %.pre, %block_400488 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400478.block_40048a_crit_edge ], [ %26, %block_400488 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #8
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %28, %29
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2450
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2447
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2448
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2449
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400540_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004d0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4004d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2447
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2448
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2449
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2450
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %12 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %RSI, align 8, !tbaa !2428
  store i64 %13, i64* %RDX, align 8, !tbaa !2428
  %16 = and i64 %13, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 240
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %4, align 1, !tbaa !2446
  %23 = icmp eq i64 %16, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !2447
  %25 = lshr i64 %13, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %6, align 1, !tbaa !2448
  store i8 0, i8* %7, align 1, !tbaa !2449
  store i8 0, i8* %8, align 1, !tbaa !2450
  %27 = load i64, i64* %RAX, align 8
  %28 = add i64 %1, 14
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %16, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %16, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %29, i64* %34, align 16
  %35 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_402eb0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_402e40___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %36 = add i64 %35, 27
  %37 = add i64 %16, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %11, align 8, !tbaa !2428
  %39 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = tail call fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC, align 8
  %43 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %42, %struct.Memory* %40)
  ret %struct.Memory* %43
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028e0_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4028e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -12
  %16 = load i32, i32* %EDI, align 4
  %17 = add i64 %14, 6
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i32*
  store i32 %16, i32* %18, align 4
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 5
  store i64 %22, i64* %PC, align 8
  %23 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = extractelement <2 x float> %24, i32 0
  %26 = inttoptr i64 %20 to float*
  store float %25, float* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -56
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -52
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %67, align 1, !tbaa !2432
  %68 = and i32 %66, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #8
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !2446
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %74, align 1, !tbaa !2450
  %75 = icmp eq i32 %66, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2447
  %78 = lshr i32 %66, 31
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2448
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %81, align 1, !tbaa !2449
  %82 = xor i1 %75, true
  %83 = icmp eq i8 %79, 0
  %84 = and i1 %83, %82
  %.v = select i1 %84, i64 15, i64 10
  %85 = add i64 %63, %.v
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_402918, label %block_402913

block_4029f5:                                     ; preds = %block_402943
  %86 = add i64 %306, -40
  %87 = add i64 %508, 7
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  store i32 0, i32* %88, align 4
  %89 = bitcast [32 x %union.VectorReg]* %6 to float*
  %90 = bitcast i8* %101 to float*
  %91 = bitcast i64* %99 to float*
  %92 = bitcast i8* %104 to float*
  %93 = bitcast i64* %115 to <2 x i32>*
  %94 = bitcast i8* %113 to i32*
  %95 = bitcast i64* %115 to i32*
  %96 = bitcast i8* %117 to i32*
  %97 = bitcast i64* %99 to <2 x i32>*
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_4029fc

block_402918:                                     ; preds = %block_4028e0
  %98 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %100 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %100, align 1, !tbaa !2451
  %101 = getelementptr inbounds i8, i8* %98, i64 4
  %102 = bitcast i8* %101 to i32*
  store i32 0, i32* %102, align 1, !tbaa !2451
  %103 = bitcast i64* %99 to i32*
  store i32 0, i32* %103, align 1, !tbaa !2451
  %104 = getelementptr inbounds i8, i8* %98, i64 12
  %105 = bitcast i8* %104 to i32*
  store i32 0, i32* %105, align 1, !tbaa !2451
  %106 = bitcast %union.VectorReg* %7 to i8*
  %107 = add i64 %61, -8
  %108 = add i64 %85, 8
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = bitcast %union.VectorReg* %7 to float*
  %112 = bitcast %union.VectorReg* %7 to i32*
  store i32 %110, i32* %112, align 1, !tbaa !2452
  %113 = getelementptr inbounds i8, i8* %106, i64 4
  %114 = bitcast i8* %113 to float*
  store float 0.000000e+00, float* %114, align 1, !tbaa !2452
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %116 = bitcast i64* %115 to float*
  store float 0.000000e+00, float* %116, align 1, !tbaa !2452
  %117 = getelementptr inbounds i8, i8* %106, i64 12
  %118 = bitcast i8* %117 to float*
  store float 0.000000e+00, float* %118, align 1, !tbaa !2452
  %119 = bitcast %union.VectorReg* %7 to <2 x float>*
  %120 = load <2 x float>, <2 x float>* %119, align 1
  %121 = extractelement <2 x float> %120, i32 0
  %122 = fpext float %121 to double
  %123 = bitcast %union.VectorReg* %7 to double*
  store double %122, double* %123, align 1, !tbaa !2454
  %124 = add i64 %85, 16
  store i64 %124, i64* %PC, align 8
  %125 = bitcast [32 x %union.VectorReg]* %6 to double*
  %126 = load double, double* %125, align 1
  %127 = fcmp uno double %122, %126
  br i1 %127, label %128, label %138

; <label>:128:                                    ; preds = %block_402918
  %129 = fadd double %122, %126
  %130 = bitcast double %129 to i64
  %131 = and i64 %130, 9221120237041090560
  %132 = icmp eq i64 %131, 9218868437227405312
  %133 = and i64 %130, 2251799813685247
  %134 = icmp ne i64 %133, 0
  %135 = and i1 %132, %134
  br i1 %135, label %136, label %144

; <label>:136:                                    ; preds = %128
  %137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %124, %struct.Memory* %2) #9
  %.pre = load i64, i64* %PC, align 8
  %.pre1 = load i8, i8* %77, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:138:                                    ; preds = %block_402918
  %139 = fcmp ogt double %122, %126
  br i1 %139, label %144, label %140

; <label>:140:                                    ; preds = %138
  %141 = fcmp olt double %122, %126
  br i1 %141, label %144, label %142

; <label>:142:                                    ; preds = %140
  %143 = fcmp oeq double %122, %126
  br i1 %143, label %144, label %148

; <label>:144:                                    ; preds = %142, %140, %138, %128
  %145 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 1, %142 ], [ 1, %128 ]
  %146 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 0, %142 ], [ 1, %128 ]
  %147 = phi i8 [ 0, %138 ], [ 1, %140 ], [ 0, %142 ], [ 1, %128 ]
  store i8 %145, i8* %77, align 1, !tbaa !2456
  store i8 %146, i8* %73, align 1, !tbaa !2456
  store i8 %147, i8* %67, align 1, !tbaa !2456
  br label %148

; <label>:148:                                    ; preds = %144, %142
  %149 = phi i8 [ %145, %144 ], [ 0, %142 ]
  store i8 0, i8* %81, align 1, !tbaa !2456
  store i8 0, i8* %80, align 1, !tbaa !2456
  store i8 0, i8* %74, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %148, %136
  %150 = phi i8 [ %.pre1, %136 ], [ %149, %148 ]
  %151 = phi i64 [ %.pre, %136 ], [ %124, %148 ]
  %152 = phi %struct.Memory* [ %137, %136 ], [ %2, %148 ]
  %153 = icmp eq i8 %150, 0
  %.v9 = select i1 %153, i64 17, i64 6
  %154 = add i64 %151, %.v9
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  br i1 %153, label %block_402939, label %block_40292e

block_402974:                                     ; preds = %block_40294d, %block_402965
  %155 = phi i64 [ %.pre4, %block_402965 ], [ %255, %block_40294d ]
  %156 = phi i64 [ %.pre3, %block_402965 ], [ %239, %block_40294d ]
  %157 = add i64 %156, -36
  %158 = add i64 %155, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i32*
  %160 = load i32, i32* %159, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %161 = and i32 %160, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #8
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  %166 = icmp eq i32 %160, 0
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %77, align 1, !tbaa !2447
  %168 = lshr i32 %160, 31
  %169 = trunc i32 %168 to i8
  store i8 %169, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  %170 = icmp ne i8 %169, 0
  %.v14 = select i1 %170, i64 10, i64 25
  %171 = add i64 %155, %.v14
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  br i1 %170, label %block_40297e, label %block_40298d

block_402913:                                     ; preds = %block_4028e0
  %172 = add i64 %85, 312
  br label %block_402a4b

block_402994:                                     ; preds = %block_4029a0, %block_40298d
  %173 = phi i64 [ %717, %block_4029a0 ], [ %.pre7, %block_40298d ]
  %174 = load i64, i64* %RBP, align 8
  %175 = add i64 %174, -40
  %176 = add i64 %173, 3
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i64
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = add i64 %174, -4
  %181 = add i64 %173, 6
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = sub i32 %178, %183
  %185 = icmp ult i32 %178, %183
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %67, align 1, !tbaa !2432
  %187 = and i32 %184, 255
  %188 = tail call i32 @llvm.ctpop.i32(i32 %187) #8
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  store i8 %191, i8* %73, align 1, !tbaa !2446
  %192 = xor i32 %183, %178
  %193 = xor i32 %192, %184
  %194 = lshr i32 %193, 4
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  store i8 %196, i8* %74, align 1, !tbaa !2450
  %197 = icmp eq i32 %184, 0
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %77, align 1, !tbaa !2447
  %199 = lshr i32 %184, 31
  %200 = trunc i32 %199 to i8
  store i8 %200, i8* %80, align 1, !tbaa !2448
  %201 = lshr i32 %178, 31
  %202 = lshr i32 %183, 31
  %203 = xor i32 %202, %201
  %204 = xor i32 %199, %201
  %205 = add nuw nsw i32 %204, %203
  %206 = icmp eq i32 %205, 2
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %81, align 1, !tbaa !2449
  %208 = icmp ne i8 %200, 0
  %209 = xor i1 %208, %206
  %.v15 = select i1 %209, i64 12, i64 92
  %210 = add i64 %173, %.v15
  store i64 %210, i64* %PC, align 8, !tbaa !2428
  br i1 %209, label %block_4029a0, label %block_4029f0

block_4029f0:                                     ; preds = %block_402994
  %211 = add i64 %210, 91
  br label %block_402a4b

block_40298d:                                     ; preds = %block_402974, %block_40297e
  %212 = phi i64 [ %.pre6, %block_40297e ], [ %171, %block_402974 ]
  %213 = phi i64 [ %.pre5, %block_40297e ], [ %156, %block_402974 ]
  %214 = add i64 %213, -40
  %215 = add i64 %212, 7
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i32*
  store i32 0, i32* %216, align 4
  %217 = bitcast [32 x %union.VectorReg]* %6 to float*
  %218 = bitcast i8* %101 to float*
  %219 = bitcast i64* %99 to float*
  %220 = bitcast i8* %104 to float*
  %221 = bitcast i64* %115 to <2 x i32>*
  %222 = bitcast i8* %113 to i32*
  %223 = bitcast i64* %115 to i32*
  %224 = bitcast i8* %117 to i32*
  %225 = bitcast i64* %99 to <2 x i32>*
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_402994

block_40292e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %226 = load i8, i8* %73, align 1, !tbaa !2446
  %227 = icmp ne i8 %226, 0
  %.v10 = select i1 %227, i64 11, i64 6
  %228 = add i64 %154, %.v10
  store i64 %228, i64* %PC, align 8, !tbaa !2428
  %229 = icmp eq i8 %226, 1
  br i1 %229, label %block_402939, label %block_402934

block_40294d:                                     ; preds = %block_402939, %block_402943
  %230 = phi i64 [ %508, %block_402943 ], [ %332, %block_402939 ]
  %231 = add i64 %306, -44
  %232 = add i64 %230, 7
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i32*
  store i32 0, i32* %233, align 4
  %234 = load i64, i64* %RBP, align 8
  %235 = add i64 %234, -48
  %236 = load i64, i64* %PC, align 8
  %237 = add i64 %236, 7
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %235 to i32*
  store i32 0, i32* %238, align 4
  %239 = load i64, i64* %RBP, align 8
  %240 = add i64 %239, -20
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %240 to i32*
  %244 = load i32, i32* %243, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %245 = and i32 %244, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245) #8
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  %250 = icmp eq i32 %244, 0
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %77, align 1, !tbaa !2447
  %252 = lshr i32 %244, 31
  %253 = trunc i32 %252 to i8
  store i8 %253, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  %254 = icmp ne i8 %253, 0
  %.v13 = select i1 %254, i64 10, i64 25
  %255 = add i64 %241, %.v13
  store i64 %255, i64* %PC, align 8, !tbaa !2428
  br i1 %254, label %block_402965, label %block_402974

block_40297e:                                     ; preds = %block_402974
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2447
  store i8 0, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  store i8 0, i8* %74, align 1, !tbaa !2450
  %256 = add i64 %156, -4
  %257 = add i64 %171, 5
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i32*
  %259 = load i32, i32* %258, align 4
  %260 = sub i32 0, %259
  %261 = lshr i32 %260, 31
  %262 = sub i32 1, %259
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = icmp ult i32 %262, %260
  %265 = icmp eq i32 %262, 0
  %266 = or i1 %264, %265
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %67, align 1, !tbaa !2432
  %268 = and i32 %262, 255
  %269 = tail call i32 @llvm.ctpop.i32(i32 %268) #8
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  store i8 %272, i8* %73, align 1, !tbaa !2446
  %273 = xor i32 %262, %260
  %274 = lshr i32 %273, 4
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %74, align 1, !tbaa !2450
  %277 = zext i1 %265 to i8
  store i8 %277, i8* %77, align 1, !tbaa !2447
  %278 = lshr i32 %262, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %80, align 1, !tbaa !2448
  %280 = xor i32 %278, %261
  %281 = add nuw nsw i32 %280, %278
  %282 = icmp eq i32 %281, 2
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %81, align 1, !tbaa !2449
  %284 = add i64 %171, 12
  store i64 %284, i64* %PC, align 8
  %285 = load i32, i32* %159, align 4
  %286 = sext i32 %262 to i64
  %287 = sext i32 %285 to i64
  %288 = mul nsw i64 %287, %286
  %289 = trunc i64 %288 to i32
  %290 = and i64 %288, 4294967295
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = shl i64 %288, 32
  %292 = ashr exact i64 %291, 32
  %293 = icmp ne i64 %292, %288
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %67, align 1, !tbaa !2432
  %295 = and i32 %289, 255
  %296 = tail call i32 @llvm.ctpop.i32(i32 %295) #8
  %297 = trunc i32 %296 to i8
  %298 = and i8 %297, 1
  %299 = xor i8 %298, 1
  store i8 %299, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  store i8 0, i8* %77, align 1, !tbaa !2447
  %300 = lshr i32 %289, 31
  %301 = trunc i32 %300 to i8
  store i8 %301, i8* %80, align 1, !tbaa !2448
  store i8 %294, i8* %81, align 1, !tbaa !2449
  %302 = add i64 %156, -48
  %303 = add i64 %171, 15
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i32*
  store i32 %289, i32* %304, align 4
  %.pre5 = load i64, i64* %RBP, align 8
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_40298d

block_402939:                                     ; preds = %block_40292e, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %305 = phi i64 [ %228, %block_40292e ], [ %154, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %306 = load i64, i64* %RBP, align 8
  %307 = add i64 %306, -20
  %308 = add i64 %305, 4
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i32*
  %310 = load i32, i32* %309, align 4
  %311 = add i32 %310, -1
  %312 = icmp eq i32 %310, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %67, align 1, !tbaa !2432
  %314 = and i32 %311, 255
  %315 = tail call i32 @llvm.ctpop.i32(i32 %314) #8
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  store i8 %318, i8* %73, align 1, !tbaa !2446
  %319 = xor i32 %310, %311
  %320 = lshr i32 %319, 4
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  store i8 %322, i8* %74, align 1, !tbaa !2450
  %323 = icmp eq i32 %311, 0
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %77, align 1, !tbaa !2447
  %325 = lshr i32 %311, 31
  %326 = trunc i32 %325 to i8
  store i8 %326, i8* %80, align 1, !tbaa !2448
  %327 = lshr i32 %310, 31
  %328 = xor i32 %325, %327
  %329 = add nuw nsw i32 %328, %327
  %330 = icmp eq i32 %329, 2
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %81, align 1, !tbaa !2449
  %.v11 = select i1 %323, i64 10, i64 20
  %332 = add i64 %305, %.v11
  store i64 %332, i64* %PC, align 8, !tbaa !2428
  br i1 %323, label %block_402943, label %block_40294d

block_402a08:                                     ; preds = %block_4029fc
  %333 = add i64 %510, -32
  %334 = add i64 %546, 4
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = add i64 %546, 8
  store i64 %337, i64* %PC, align 8
  %338 = load i32, i32* %513, align 4
  %339 = sext i32 %338 to i64
  store i64 %339, i64* %RCX, align 8, !tbaa !2428
  %340 = shl nsw i64 %339, 2
  %341 = add i64 %340, %336
  %342 = add i64 %546, 13
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i32*
  %344 = load i32, i32* %343, align 4
  store i32 %344, i32* %100, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  store float 0.000000e+00, float* %91, align 1, !tbaa !2452
  store float 0.000000e+00, float* %92, align 1, !tbaa !2452
  %345 = add i64 %510, -8
  %346 = add i64 %546, 18
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %345 to i32*
  %348 = load i32, i32* %347, align 4
  store i32 %348, i32* %112, align 1, !tbaa !2452
  store float 0.000000e+00, float* %114, align 1, !tbaa !2452
  store float 0.000000e+00, float* %116, align 1, !tbaa !2452
  store float 0.000000e+00, float* %118, align 1, !tbaa !2452
  %349 = add i64 %510, -16
  %350 = add i64 %546, 22
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %349 to i64*
  %352 = load i64, i64* %351, align 8
  store i64 %352, i64* %RAX, align 8, !tbaa !2428
  %353 = add i64 %546, 26
  store i64 %353, i64* %PC, align 8
  %354 = load i32, i32* %513, align 4
  %355 = sext i32 %354 to i64
  store i64 %355, i64* %RCX, align 8, !tbaa !2428
  %356 = shl nsw i64 %355, 2
  %357 = add i64 %356, %352
  %358 = add i64 %546, 31
  store i64 %358, i64* %PC, align 8
  %359 = load <2 x float>, <2 x float>* %119, align 1
  %360 = load <2 x i32>, <2 x i32>* %93, align 1
  %361 = inttoptr i64 %357 to float*
  %362 = load float, float* %361, align 4
  %363 = extractelement <2 x float> %359, i32 0
  %364 = fmul float %363, %362
  store float %364, float* %111, align 1, !tbaa !2452
  %365 = bitcast <2 x float> %359 to <2 x i32>
  %366 = extractelement <2 x i32> %365, i32 1
  store i32 %366, i32* %94, align 1, !tbaa !2452
  %367 = extractelement <2 x i32> %360, i32 0
  store i32 %367, i32* %95, align 1, !tbaa !2452
  %368 = extractelement <2 x i32> %360, i32 1
  store i32 %368, i32* %96, align 1, !tbaa !2452
  %369 = load <2 x float>, <2 x float>* %23, align 1
  %370 = load <2 x i32>, <2 x i32>* %97, align 1
  %371 = load <2 x float>, <2 x float>* %119, align 1
  %372 = extractelement <2 x float> %369, i32 0
  %373 = extractelement <2 x float> %371, i32 0
  %374 = fadd float %372, %373
  store float %374, float* %89, align 1, !tbaa !2452
  %375 = bitcast <2 x float> %369 to <2 x i32>
  %376 = extractelement <2 x i32> %375, i32 1
  store i32 %376, i32* %102, align 1, !tbaa !2452
  %377 = extractelement <2 x i32> %370, i32 0
  store i32 %377, i32* %103, align 1, !tbaa !2452
  %378 = extractelement <2 x i32> %370, i32 1
  store i32 %378, i32* %105, align 1, !tbaa !2452
  %379 = add i64 %546, 39
  store i64 %379, i64* %PC, align 8
  %380 = load i64, i64* %335, align 8
  store i64 %380, i64* %RAX, align 8, !tbaa !2428
  %381 = add i64 %546, 43
  store i64 %381, i64* %PC, align 8
  %382 = load i32, i32* %513, align 4
  %383 = sext i32 %382 to i64
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = shl nsw i64 %383, 2
  %385 = add i64 %384, %380
  %386 = add i64 %546, 48
  store i64 %386, i64* %PC, align 8
  %387 = load <2 x float>, <2 x float>* %23, align 1
  %388 = extractelement <2 x float> %387, i32 0
  %389 = inttoptr i64 %385 to float*
  store float %388, float* %389, align 4
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -40
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394, align 4
  %396 = add i32 %395, 1
  %397 = zext i32 %396 to i64
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = icmp eq i32 %395, -1
  %399 = icmp eq i32 %396, 0
  %400 = or i1 %398, %399
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %67, align 1, !tbaa !2432
  %402 = and i32 %396, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #8
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %73, align 1, !tbaa !2446
  %407 = xor i32 %395, %396
  %408 = lshr i32 %407, 4
  %409 = trunc i32 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %74, align 1, !tbaa !2450
  %411 = zext i1 %399 to i8
  store i8 %411, i8* %77, align 1, !tbaa !2447
  %412 = lshr i32 %396, 31
  %413 = trunc i32 %412 to i8
  store i8 %413, i8* %80, align 1, !tbaa !2448
  %414 = lshr i32 %395, 31
  %415 = xor i32 %412, %414
  %416 = add nuw nsw i32 %415, %412
  %417 = icmp eq i32 %416, 2
  %418 = zext i1 %417 to i8
  store i8 %418, i8* %81, align 1, !tbaa !2449
  %419 = add i64 %392, 9
  store i64 %419, i64* %PC, align 8
  store i32 %396, i32* %394, align 4
  %420 = load i64, i64* %PC, align 8
  %421 = add i64 %420, -69
  store i64 %421, i64* %PC, align 8, !tbaa !2428
  br label %block_4029fc

block_402934:                                     ; preds = %block_40292e
  %422 = add i64 %228, 279
  br label %block_402a4b

block_402a46:                                     ; preds = %block_4029fc
  %423 = add i64 %546, 5
  br label %block_402a4b

block_402a4b:                                     ; preds = %block_402a46, %block_402934, %block_4029f0, %block_402913
  %424 = phi i64 [ %211, %block_4029f0 ], [ %423, %block_402a46 ], [ %422, %block_402934 ], [ %172, %block_402913 ]
  %MEMORY.5 = phi %struct.Memory* [ %152, %block_4029f0 ], [ %152, %block_402a46 ], [ %152, %block_402934 ], [ %2, %block_402913 ]
  %425 = add i64 %424, 1
  store i64 %425, i64* %PC, align 8
  %426 = load i64, i64* %10, align 8, !tbaa !2428
  %427 = add i64 %426, 8
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %RBP, align 8, !tbaa !2428
  store i64 %427, i64* %10, align 8, !tbaa !2428
  %430 = add i64 %424, 2
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %427 to i64*
  %432 = load i64, i64* %431, align 8
  store i64 %432, i64* %PC, align 8, !tbaa !2428
  %433 = add i64 %426, 16
  store i64 %433, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_402965:                                     ; preds = %block_40294d
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2447
  store i8 0, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  store i8 0, i8* %74, align 1, !tbaa !2450
  %434 = add i64 %239, -4
  %435 = add i64 %255, 5
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %434 to i32*
  %437 = load i32, i32* %436, align 4
  %438 = sub i32 0, %437
  %439 = lshr i32 %438, 31
  %440 = sub i32 1, %437
  %441 = zext i32 %440 to i64
  store i64 %441, i64* %RAX, align 8, !tbaa !2428
  %442 = icmp ult i32 %440, %438
  %443 = icmp eq i32 %440, 0
  %444 = or i1 %442, %443
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %67, align 1, !tbaa !2432
  %446 = and i32 %440, 255
  %447 = tail call i32 @llvm.ctpop.i32(i32 %446) #8
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  store i8 %450, i8* %73, align 1, !tbaa !2446
  %451 = xor i32 %440, %438
  %452 = lshr i32 %451, 4
  %453 = trunc i32 %452 to i8
  %454 = and i8 %453, 1
  store i8 %454, i8* %74, align 1, !tbaa !2450
  %455 = zext i1 %443 to i8
  store i8 %455, i8* %77, align 1, !tbaa !2447
  %456 = lshr i32 %440, 31
  %457 = trunc i32 %456 to i8
  store i8 %457, i8* %80, align 1, !tbaa !2448
  %458 = xor i32 %456, %439
  %459 = add nuw nsw i32 %458, %456
  %460 = icmp eq i32 %459, 2
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %81, align 1, !tbaa !2449
  %462 = add i64 %255, 12
  store i64 %462, i64* %PC, align 8
  %463 = load i32, i32* %243, align 4
  %464 = sext i32 %440 to i64
  %465 = sext i32 %463 to i64
  %466 = mul nsw i64 %465, %464
  %467 = trunc i64 %466 to i32
  %468 = and i64 %466, 4294967295
  store i64 %468, i64* %RAX, align 8, !tbaa !2428
  %469 = shl i64 %466, 32
  %470 = ashr exact i64 %469, 32
  %471 = icmp ne i64 %470, %466
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %67, align 1, !tbaa !2432
  %473 = and i32 %467, 255
  %474 = tail call i32 @llvm.ctpop.i32(i32 %473) #8
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = xor i8 %476, 1
  store i8 %477, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  store i8 0, i8* %77, align 1, !tbaa !2447
  %478 = lshr i32 %467, 31
  %479 = trunc i32 %478 to i8
  store i8 %479, i8* %80, align 1, !tbaa !2448
  store i8 %472, i8* %81, align 1, !tbaa !2449
  %480 = add i64 %239, -44
  %481 = add i64 %255, 15
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i32*
  store i32 %467, i32* %482, align 4
  %.pre3 = load i64, i64* %RBP, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402974

block_402943:                                     ; preds = %block_402939
  %483 = add i64 %306, -36
  %484 = add i64 %332, 4
  store i64 %484, i64* %PC, align 8
  %485 = inttoptr i64 %483 to i32*
  %486 = load i32, i32* %485, align 4
  %487 = add i32 %486, -1
  %488 = icmp eq i32 %486, 0
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %67, align 1, !tbaa !2432
  %490 = and i32 %487, 255
  %491 = tail call i32 @llvm.ctpop.i32(i32 %490) #8
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = xor i8 %493, 1
  store i8 %494, i8* %73, align 1, !tbaa !2446
  %495 = xor i32 %486, %487
  %496 = lshr i32 %495, 4
  %497 = trunc i32 %496 to i8
  %498 = and i8 %497, 1
  store i8 %498, i8* %74, align 1, !tbaa !2450
  %499 = icmp eq i32 %487, 0
  %500 = zext i1 %499 to i8
  store i8 %500, i8* %77, align 1, !tbaa !2447
  %501 = lshr i32 %487, 31
  %502 = trunc i32 %501 to i8
  store i8 %502, i8* %80, align 1, !tbaa !2448
  %503 = lshr i32 %486, 31
  %504 = xor i32 %501, %503
  %505 = add nuw nsw i32 %504, %503
  %506 = icmp eq i32 %505, 2
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %81, align 1, !tbaa !2449
  %.v12 = select i1 %499, i64 178, i64 10
  %508 = add i64 %332, %.v12
  store i64 %508, i64* %PC, align 8, !tbaa !2428
  br i1 %499, label %block_4029f5, label %block_40294d

block_4029fc:                                     ; preds = %block_402a08, %block_4029f5
  %509 = phi i64 [ %421, %block_402a08 ], [ %.pre2, %block_4029f5 ]
  %510 = load i64, i64* %RBP, align 8
  %511 = add i64 %510, -40
  %512 = add i64 %509, 3
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RAX, align 8, !tbaa !2428
  %516 = add i64 %510, -4
  %517 = add i64 %509, 6
  store i64 %517, i64* %PC, align 8
  %518 = inttoptr i64 %516 to i32*
  %519 = load i32, i32* %518, align 4
  %520 = sub i32 %514, %519
  %521 = icmp ult i32 %514, %519
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %67, align 1, !tbaa !2432
  %523 = and i32 %520, 255
  %524 = tail call i32 @llvm.ctpop.i32(i32 %523) #8
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  %527 = xor i8 %526, 1
  store i8 %527, i8* %73, align 1, !tbaa !2446
  %528 = xor i32 %519, %514
  %529 = xor i32 %528, %520
  %530 = lshr i32 %529, 4
  %531 = trunc i32 %530 to i8
  %532 = and i8 %531, 1
  store i8 %532, i8* %74, align 1, !tbaa !2450
  %533 = icmp eq i32 %520, 0
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %77, align 1, !tbaa !2447
  %535 = lshr i32 %520, 31
  %536 = trunc i32 %535 to i8
  store i8 %536, i8* %80, align 1, !tbaa !2448
  %537 = lshr i32 %514, 31
  %538 = lshr i32 %519, 31
  %539 = xor i32 %538, %537
  %540 = xor i32 %535, %537
  %541 = add nuw nsw i32 %540, %539
  %542 = icmp eq i32 %541, 2
  %543 = zext i1 %542 to i8
  store i8 %543, i8* %81, align 1, !tbaa !2449
  %544 = icmp ne i8 %536, 0
  %545 = xor i1 %544, %542
  %.v16 = select i1 %545, i64 12, i64 74
  %546 = add i64 %509, %.v16
  store i64 %546, i64* %PC, align 8, !tbaa !2428
  br i1 %545, label %block_402a08, label %block_402a46

block_4029a0:                                     ; preds = %block_402994
  %547 = add i64 %174, -32
  %548 = add i64 %210, 4
  store i64 %548, i64* %PC, align 8
  %549 = inttoptr i64 %547 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %RAX, align 8, !tbaa !2428
  %551 = add i64 %174, -48
  %552 = add i64 %210, 8
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %551 to i32*
  %554 = load i32, i32* %553, align 4
  %555 = sext i32 %554 to i64
  store i64 %555, i64* %RCX, align 8, !tbaa !2428
  %556 = shl nsw i64 %555, 2
  %557 = add i64 %556, %550
  %558 = add i64 %210, 13
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %557 to i32*
  %560 = load i32, i32* %559, align 4
  store i32 %560, i32* %100, align 1, !tbaa !2452
  store float 0.000000e+00, float* %218, align 1, !tbaa !2452
  store float 0.000000e+00, float* %219, align 1, !tbaa !2452
  store float 0.000000e+00, float* %220, align 1, !tbaa !2452
  %561 = add i64 %174, -8
  %562 = add i64 %210, 18
  store i64 %562, i64* %PC, align 8
  %563 = inttoptr i64 %561 to i32*
  %564 = load i32, i32* %563, align 4
  store i32 %564, i32* %112, align 1, !tbaa !2452
  store float 0.000000e+00, float* %114, align 1, !tbaa !2452
  store float 0.000000e+00, float* %116, align 1, !tbaa !2452
  store float 0.000000e+00, float* %118, align 1, !tbaa !2452
  %565 = add i64 %174, -16
  %566 = add i64 %210, 22
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i64*
  %568 = load i64, i64* %567, align 8
  store i64 %568, i64* %RAX, align 8, !tbaa !2428
  %569 = add i64 %174, -44
  %570 = add i64 %210, 26
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to i32*
  %572 = load i32, i32* %571, align 4
  %573 = sext i32 %572 to i64
  store i64 %573, i64* %RCX, align 8, !tbaa !2428
  %574 = shl nsw i64 %573, 2
  %575 = add i64 %574, %568
  %576 = add i64 %210, 31
  store i64 %576, i64* %PC, align 8
  %577 = load <2 x float>, <2 x float>* %119, align 1
  %578 = load <2 x i32>, <2 x i32>* %221, align 1
  %579 = inttoptr i64 %575 to float*
  %580 = load float, float* %579, align 4
  %581 = extractelement <2 x float> %577, i32 0
  %582 = fmul float %581, %580
  store float %582, float* %111, align 1, !tbaa !2452
  %583 = bitcast <2 x float> %577 to <2 x i32>
  %584 = extractelement <2 x i32> %583, i32 1
  store i32 %584, i32* %222, align 1, !tbaa !2452
  %585 = extractelement <2 x i32> %578, i32 0
  store i32 %585, i32* %223, align 1, !tbaa !2452
  %586 = extractelement <2 x i32> %578, i32 1
  store i32 %586, i32* %224, align 1, !tbaa !2452
  %587 = load <2 x float>, <2 x float>* %23, align 1
  %588 = load <2 x i32>, <2 x i32>* %225, align 1
  %589 = load <2 x float>, <2 x float>* %119, align 1
  %590 = extractelement <2 x float> %587, i32 0
  %591 = extractelement <2 x float> %589, i32 0
  %592 = fadd float %590, %591
  store float %592, float* %217, align 1, !tbaa !2452
  %593 = bitcast <2 x float> %587 to <2 x i32>
  %594 = extractelement <2 x i32> %593, i32 1
  store i32 %594, i32* %102, align 1, !tbaa !2452
  %595 = extractelement <2 x i32> %588, i32 0
  store i32 %595, i32* %103, align 1, !tbaa !2452
  %596 = extractelement <2 x i32> %588, i32 1
  store i32 %596, i32* %105, align 1, !tbaa !2452
  %597 = add i64 %210, 39
  store i64 %597, i64* %PC, align 8
  %598 = load i64, i64* %549, align 8
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = add i64 %210, 43
  store i64 %599, i64* %PC, align 8
  %600 = load i32, i32* %553, align 4
  %601 = sext i32 %600 to i64
  store i64 %601, i64* %RCX, align 8, !tbaa !2428
  %602 = shl nsw i64 %601, 2
  %603 = add i64 %602, %598
  %604 = add i64 %210, 48
  store i64 %604, i64* %PC, align 8
  %605 = load <2 x float>, <2 x float>* %23, align 1
  %606 = extractelement <2 x float> %605, i32 0
  %607 = inttoptr i64 %603 to float*
  store float %606, float* %607, align 4
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -44
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 3
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i32*
  %613 = load i32, i32* %612, align 4
  %614 = zext i32 %613 to i64
  store i64 %614, i64* %RDX, align 8, !tbaa !2428
  %615 = add i64 %608, -20
  %616 = add i64 %610, 6
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i32*
  %618 = load i32, i32* %617, align 4
  %619 = add i32 %618, %613
  %620 = zext i32 %619 to i64
  store i64 %620, i64* %RDX, align 8, !tbaa !2428
  %621 = icmp ult i32 %619, %613
  %622 = icmp ult i32 %619, %618
  %623 = or i1 %621, %622
  %624 = zext i1 %623 to i8
  store i8 %624, i8* %67, align 1, !tbaa !2432
  %625 = and i32 %619, 255
  %626 = tail call i32 @llvm.ctpop.i32(i32 %625) #8
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  %629 = xor i8 %628, 1
  store i8 %629, i8* %73, align 1, !tbaa !2446
  %630 = xor i32 %618, %613
  %631 = xor i32 %630, %619
  %632 = lshr i32 %631, 4
  %633 = trunc i32 %632 to i8
  %634 = and i8 %633, 1
  store i8 %634, i8* %74, align 1, !tbaa !2450
  %635 = icmp eq i32 %619, 0
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %77, align 1, !tbaa !2447
  %637 = lshr i32 %619, 31
  %638 = trunc i32 %637 to i8
  store i8 %638, i8* %80, align 1, !tbaa !2448
  %639 = lshr i32 %613, 31
  %640 = lshr i32 %618, 31
  %641 = xor i32 %637, %639
  %642 = xor i32 %637, %640
  %643 = add nuw nsw i32 %641, %642
  %644 = icmp eq i32 %643, 2
  %645 = zext i1 %644 to i8
  store i8 %645, i8* %81, align 1, !tbaa !2449
  %646 = add i64 %610, 9
  store i64 %646, i64* %PC, align 8
  store i32 %619, i32* %612, align 4
  %647 = load i64, i64* %RBP, align 8
  %648 = add i64 %647, -48
  %649 = load i64, i64* %PC, align 8
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %648 to i32*
  %652 = load i32, i32* %651, align 4
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RDX, align 8, !tbaa !2428
  %654 = add i64 %647, -36
  %655 = add i64 %649, 6
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %654 to i32*
  %657 = load i32, i32* %656, align 4
  %658 = add i32 %657, %652
  %659 = zext i32 %658 to i64
  store i64 %659, i64* %RDX, align 8, !tbaa !2428
  %660 = icmp ult i32 %658, %652
  %661 = icmp ult i32 %658, %657
  %662 = or i1 %660, %661
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %67, align 1, !tbaa !2432
  %664 = and i32 %658, 255
  %665 = tail call i32 @llvm.ctpop.i32(i32 %664) #8
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = xor i8 %667, 1
  store i8 %668, i8* %73, align 1, !tbaa !2446
  %669 = xor i32 %657, %652
  %670 = xor i32 %669, %658
  %671 = lshr i32 %670, 4
  %672 = trunc i32 %671 to i8
  %673 = and i8 %672, 1
  store i8 %673, i8* %74, align 1, !tbaa !2450
  %674 = icmp eq i32 %658, 0
  %675 = zext i1 %674 to i8
  store i8 %675, i8* %77, align 1, !tbaa !2447
  %676 = lshr i32 %658, 31
  %677 = trunc i32 %676 to i8
  store i8 %677, i8* %80, align 1, !tbaa !2448
  %678 = lshr i32 %652, 31
  %679 = lshr i32 %657, 31
  %680 = xor i32 %676, %678
  %681 = xor i32 %676, %679
  %682 = add nuw nsw i32 %680, %681
  %683 = icmp eq i32 %682, 2
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %81, align 1, !tbaa !2449
  %685 = add i64 %649, 9
  store i64 %685, i64* %PC, align 8
  store i32 %658, i32* %651, align 4
  %686 = load i64, i64* %RBP, align 8
  %687 = add i64 %686, -40
  %688 = load i64, i64* %PC, align 8
  %689 = add i64 %688, 3
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %687 to i32*
  %691 = load i32, i32* %690, align 4
  %692 = add i32 %691, 1
  %693 = zext i32 %692 to i64
  store i64 %693, i64* %RAX, align 8, !tbaa !2428
  %694 = icmp eq i32 %691, -1
  %695 = icmp eq i32 %692, 0
  %696 = or i1 %694, %695
  %697 = zext i1 %696 to i8
  store i8 %697, i8* %67, align 1, !tbaa !2432
  %698 = and i32 %692, 255
  %699 = tail call i32 @llvm.ctpop.i32(i32 %698) #8
  %700 = trunc i32 %699 to i8
  %701 = and i8 %700, 1
  %702 = xor i8 %701, 1
  store i8 %702, i8* %73, align 1, !tbaa !2446
  %703 = xor i32 %691, %692
  %704 = lshr i32 %703, 4
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  store i8 %706, i8* %74, align 1, !tbaa !2450
  %707 = zext i1 %695 to i8
  store i8 %707, i8* %77, align 1, !tbaa !2447
  %708 = lshr i32 %692, 31
  %709 = trunc i32 %708 to i8
  store i8 %709, i8* %80, align 1, !tbaa !2448
  %710 = lshr i32 %691, 31
  %711 = xor i32 %708, %710
  %712 = add nuw nsw i32 %711, %708
  %713 = icmp eq i32 %712, 2
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %81, align 1, !tbaa !2449
  %715 = add i64 %688, 9
  store i64 %715, i64* %PC, align 8
  store i32 %692, i32* %690, align 4
  %716 = load i64, i64* %PC, align 8
  %717 = add i64 %716, -87
  store i64 %717, i64* %PC, align 8, !tbaa !2428
  br label %block_402994
}

; Function Attrs: noinline
define %struct.Memory* @sub_402010_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %16 = add i64 %12, -12
  %17 = load i32, i32* %EDI, align 4
  %18 = add i64 %15, 11
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i32*
  store i32 %17, i32* %19, align 4
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %RSI, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -20
  %28 = load i32, i32* %EDX, align 4
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %31, align 4
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i32, i32* %ECX, align 4
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i32*
  store i32 %34, i32* %37, align 4
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -32
  %40 = load i64, i64* %R8, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -40
  %46 = load i64, i64* %R9, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -20
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = add i64 %50, -56
  %58 = load i32, i32* %EAX, align 4
  %59 = add i64 %52, 6
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %60, align 4
  %61 = load i32, i32* %ECX, align 4
  %62 = zext i32 %61 to i64
  %63 = load i64, i64* %PC, align 8
  store i64 %62, i64* %RAX, align 8, !tbaa !2428
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %65 = sext i32 %61 to i64
  %66 = lshr i64 %65, 32
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -56
  %69 = add i64 %63, 6
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RCX, align 8, !tbaa !2428
  %73 = add i64 %63, 8
  store i64 %73, i64* %PC, align 8
  %74 = sext i32 %71 to i64
  %75 = shl nuw i64 %66, 32
  %76 = or i64 %75, %62
  %77 = sdiv i64 %76, %74
  %78 = shl i64 %77, 32
  %79 = ashr exact i64 %78, 32
  %80 = icmp eq i64 %77, %79
  br i1 %80, label %83, label %81

; <label>:81:                                     ; preds = %block_402010
  %82 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %73, %struct.Memory* %2) #9
  %.pre = load i64, i64* %RBP, align 8
  %.pre1 = load i32, i32* %EDX, align 4
  %.pre2 = load i64, i64* %PC, align 8
  %.pre21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.pre22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %.pre24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %.pre28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %.pre30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:83:                                     ; preds = %block_402010
  %84 = srem i64 %76, %74
  %85 = and i64 %77, 4294967295
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = and i64 %84, 4294967295
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %87, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %88, align 1, !tbaa !2446
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %89, align 1, !tbaa !2450
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %90, align 1, !tbaa !2447
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %91, align 1, !tbaa !2448
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %92, align 1, !tbaa !2449
  %93 = trunc i64 %84 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %83, %81
  %.pre-phi31 = phi i8* [ %92, %83 ], [ %.pre30, %81 ]
  %.pre-phi29 = phi i8* [ %91, %83 ], [ %.pre28, %81 ]
  %.pre-phi27 = phi i8* [ %90, %83 ], [ %.pre26, %81 ]
  %.pre-phi25 = phi i8* [ %89, %83 ], [ %.pre24, %81 ]
  %.pre-phi23 = phi i8* [ %88, %83 ], [ %.pre22, %81 ]
  %.pre-phi = phi i8* [ %87, %83 ], [ %.pre21, %81 ]
  %94 = phi i64 [ %73, %83 ], [ %.pre2, %81 ]
  %95 = phi i32 [ %93, %83 ], [ %.pre1, %81 ]
  %96 = phi i64 [ %67, %83 ], [ %.pre, %81 ]
  %97 = phi %struct.Memory* [ %2, %83 ], [ %82, %81 ]
  %98 = add i64 %96, -44
  %99 = add i64 %94, 3
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i32*
  store i32 %95, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -44
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = add i32 %106, -1
  %108 = icmp eq i32 %106, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %.pre-phi, align 1, !tbaa !2432
  %110 = and i32 %107, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #8
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %.pre-phi23, align 1, !tbaa !2446
  %115 = xor i32 %106, %107
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %.pre-phi25, align 1, !tbaa !2450
  %119 = icmp eq i32 %107, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %.pre-phi27, align 1, !tbaa !2447
  %121 = lshr i32 %107, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %.pre-phi29, align 1, !tbaa !2448
  %123 = lshr i32 %106, 31
  %124 = xor i32 %121, %123
  %125 = add nuw nsw i32 %124, %123
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %.pre-phi31, align 1, !tbaa !2449
  %128 = icmp ne i8 %122, 0
  %129 = xor i1 %128, %126
  %.v34 = select i1 %129, i64 122, i64 10
  %130 = add i64 %103, %.v34
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  br i1 %129, label %block_4020b9, label %block_402049

block_4020d9:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %131 = add i64 %414, 3
  store i64 %131, i64* %PC, align 8
  %132 = load i32, i32* %389, align 4
  %133 = add i32 %132, -1
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  %135 = icmp eq i32 %132, 0
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %.pre-phi, align 1, !tbaa !2432
  %137 = and i32 %133, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #8
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %.pre-phi23, align 1, !tbaa !2446
  %142 = xor i32 %132, %133
  %143 = lshr i32 %142, 4
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %.pre-phi25, align 1, !tbaa !2450
  %146 = icmp eq i32 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %.pre-phi27, align 1, !tbaa !2447
  %148 = lshr i32 %133, 31
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %.pre-phi29, align 1, !tbaa !2448
  %150 = lshr i32 %132, 31
  %151 = xor i32 %148, %150
  %152 = add nuw nsw i32 %151, %150
  %153 = icmp eq i32 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %.pre-phi31, align 1, !tbaa !2449
  %155 = add i64 %414, 9
  store i64 %155, i64* %PC, align 8
  store i32 %133, i32* %389, align 4
  %156 = load i64, i64* %RBP, align 8
  %157 = add i64 %156, -48
  %158 = load i64, i64* %PC, align 8
  %159 = add i64 %158, 7
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %157 to i32*
  store i32 0, i32* %160, align 4
  %161 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %162 = bitcast [32 x %union.VectorReg]* %7 to float*
  %163 = getelementptr inbounds i8, i8* %161, i64 4
  %164 = bitcast i8* %163 to float*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %166 = bitcast i64* %165 to float*
  %167 = getelementptr inbounds i8, i8* %161, i64 12
  %168 = bitcast i8* %167 to float*
  %169 = bitcast %union.VectorReg* %8 to i8*
  %170 = bitcast %union.VectorReg* %8 to float*
  %171 = getelementptr inbounds i8, i8* %169, i64 4
  %172 = bitcast i8* %171 to float*
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %174 = bitcast i64* %173 to float*
  %175 = getelementptr inbounds i8, i8* %169, i64 12
  %176 = bitcast i8* %175 to float*
  %177 = bitcast %union.VectorReg* %8 to <2 x float>*
  %178 = bitcast i64* %173 to <2 x i32>*
  %179 = bitcast i8* %171 to i32*
  %180 = bitcast i64* %173 to i32*
  %181 = bitcast i8* %175 to i32*
  %182 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %183 = bitcast i64* %165 to <2 x i32>*
  %184 = bitcast i8* %163 to i32*
  %185 = bitcast i64* %165 to i32*
  %186 = bitcast i8* %167 to i32*
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4020e9

block_402065:                                     ; preds = %block_402059
  %187 = add i64 %3565, -16
  %188 = add i64 %3601, 4
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = add i64 %3601, 8
  store i64 %191, i64* %PC, align 8
  %192 = load i32, i32* %3568, align 4
  %193 = sext i32 %192 to i64
  store i64 %193, i64* %RCX, align 8, !tbaa !2428
  %194 = shl nsw i64 %193, 2
  %195 = add i64 %194, %190
  %196 = add i64 %3601, 13
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %198, i32* %199, align 1, !tbaa !2452
  store float 0.000000e+00, float* %486, align 1, !tbaa !2452
  store float 0.000000e+00, float* %488, align 1, !tbaa !2452
  store float 0.000000e+00, float* %490, align 1, !tbaa !2452
  %200 = add i64 %3565, -32
  %201 = add i64 %3601, 17
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %3565, -44
  %205 = add i64 %3601, 21
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = sext i32 %207 to i64
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = shl nsw i64 %208, 2
  %210 = add i64 %209, %203
  %211 = add i64 %3601, 26
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i32*
  %213 = load i32, i32* %212, align 4
  %214 = bitcast %union.VectorReg* %8 to i32*
  store i32 %213, i32* %214, align 1, !tbaa !2452
  store float 0.000000e+00, float* %494, align 1, !tbaa !2452
  store float 0.000000e+00, float* %496, align 1, !tbaa !2452
  store float 0.000000e+00, float* %498, align 1, !tbaa !2452
  %215 = add i64 %3565, -40
  %216 = add i64 %3601, 30
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RAX, align 8, !tbaa !2428
  %219 = add i64 %3565, -24
  %220 = add i64 %3601, 33
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = zext i32 %222 to i64
  store i64 %223, i64* %RDX, align 8, !tbaa !2428
  %224 = add i64 %3601, 37
  store i64 %224, i64* %PC, align 8
  %225 = load i32, i32* %206, align 4
  %226 = sext i32 %222 to i64
  %227 = sext i32 %225 to i64
  %228 = mul nsw i64 %227, %226
  %229 = trunc i64 %228 to i32
  %230 = and i64 %228, 4294967295
  store i64 %230, i64* %RDX, align 8, !tbaa !2428
  %231 = shl i64 %228, 32
  %232 = ashr exact i64 %231, 32
  %233 = icmp ne i64 %232, %228
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %.pre-phi, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %240 = lshr i32 %229, 31
  %241 = trunc i32 %240 to i8
  store i8 %241, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %234, i8* %.pre-phi31, align 1, !tbaa !2449
  %242 = add i64 %3601, 40
  store i64 %242, i64* %PC, align 8
  %243 = load i32, i32* %3568, align 4
  %244 = add i32 %243, %229
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RDX, align 8, !tbaa !2428
  %246 = icmp ult i32 %244, %229
  %247 = icmp ult i32 %244, %243
  %248 = or i1 %246, %247
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %.pre-phi, align 1, !tbaa !2432
  %250 = and i32 %244, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #8
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %.pre-phi23, align 1, !tbaa !2446
  %255 = xor i32 %243, %229
  %256 = xor i32 %255, %244
  %257 = lshr i32 %256, 4
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  store i8 %259, i8* %.pre-phi25, align 1, !tbaa !2450
  %260 = icmp eq i32 %244, 0
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %.pre-phi27, align 1, !tbaa !2447
  %262 = lshr i32 %244, 31
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %.pre-phi29, align 1, !tbaa !2448
  %264 = lshr i32 %243, 31
  %265 = xor i32 %262, %240
  %266 = xor i32 %262, %264
  %267 = add nuw nsw i32 %265, %266
  %268 = icmp eq i32 %267, 2
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %.pre-phi31, align 1, !tbaa !2449
  %270 = sext i32 %244 to i64
  store i64 %270, i64* %RCX, align 8, !tbaa !2428
  %271 = shl nsw i64 %270, 2
  %272 = add i64 %271, %218
  %273 = add i64 %3601, 48
  store i64 %273, i64* %PC, align 8
  %274 = load <2 x float>, <2 x float>* %499, align 1
  %275 = load <2 x i32>, <2 x i32>* %500, align 1
  %276 = inttoptr i64 %272 to float*
  %277 = load float, float* %276, align 4
  %278 = extractelement <2 x float> %274, i32 0
  %279 = fmul float %278, %277
  store float %279, float* %492, align 1, !tbaa !2452
  %280 = bitcast <2 x float> %274 to <2 x i32>
  %281 = extractelement <2 x i32> %280, i32 1
  store i32 %281, i32* %501, align 1, !tbaa !2452
  %282 = extractelement <2 x i32> %275, i32 0
  store i32 %282, i32* %502, align 1, !tbaa !2452
  %283 = extractelement <2 x i32> %275, i32 1
  store i32 %283, i32* %503, align 1, !tbaa !2452
  %284 = load <2 x float>, <2 x float>* %504, align 1
  %285 = load <2 x i32>, <2 x i32>* %505, align 1
  %286 = load <2 x float>, <2 x float>* %499, align 1
  %287 = extractelement <2 x float> %284, i32 0
  %288 = extractelement <2 x float> %286, i32 0
  %289 = fadd float %287, %288
  store float %289, float* %484, align 1, !tbaa !2452
  %290 = bitcast <2 x float> %284 to <2 x i32>
  %291 = extractelement <2 x i32> %290, i32 1
  store i32 %291, i32* %506, align 1, !tbaa !2452
  %292 = extractelement <2 x i32> %285, i32 0
  store i32 %292, i32* %507, align 1, !tbaa !2452
  %293 = extractelement <2 x i32> %285, i32 1
  store i32 %293, i32* %508, align 1, !tbaa !2452
  %294 = load i64, i64* %RBP, align 8
  %295 = add i64 %294, -16
  %296 = add i64 %3601, 56
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %294, -48
  %300 = add i64 %3601, 60
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %299 to i32*
  %302 = load i32, i32* %301, align 4
  %303 = sext i32 %302 to i64
  store i64 %303, i64* %RCX, align 8, !tbaa !2428
  %304 = shl nsw i64 %303, 2
  %305 = add i64 %304, %298
  %306 = add i64 %3601, 65
  store i64 %306, i64* %PC, align 8
  %307 = load <2 x float>, <2 x float>* %504, align 1
  %308 = extractelement <2 x float> %307, i32 0
  %309 = inttoptr i64 %305 to float*
  store float %308, float* %309, align 4
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -48
  %312 = load i64, i64* %PC, align 8
  %313 = add i64 %312, 3
  store i64 %313, i64* %PC, align 8
  %314 = inttoptr i64 %311 to i32*
  %315 = load i32, i32* %314, align 4
  %316 = add i32 %315, 1
  %317 = zext i32 %316 to i64
  store i64 %317, i64* %RAX, align 8, !tbaa !2428
  %318 = icmp eq i32 %315, -1
  %319 = icmp eq i32 %316, 0
  %320 = or i1 %318, %319
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %.pre-phi, align 1, !tbaa !2432
  %322 = and i32 %316, 255
  %323 = tail call i32 @llvm.ctpop.i32(i32 %322) #8
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = xor i8 %325, 1
  store i8 %326, i8* %.pre-phi23, align 1, !tbaa !2446
  %327 = xor i32 %315, %316
  %328 = lshr i32 %327, 4
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  store i8 %330, i8* %.pre-phi25, align 1, !tbaa !2450
  %331 = zext i1 %319 to i8
  store i8 %331, i8* %.pre-phi27, align 1, !tbaa !2447
  %332 = lshr i32 %316, 31
  %333 = trunc i32 %332 to i8
  store i8 %333, i8* %.pre-phi29, align 1, !tbaa !2448
  %334 = lshr i32 %315, 31
  %335 = xor i32 %332, %334
  %336 = add nuw nsw i32 %335, %332
  %337 = icmp eq i32 %336, 2
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %.pre-phi31, align 1, !tbaa !2449
  %339 = add i64 %312, 9
  store i64 %339, i64* %PC, align 8
  store i32 %316, i32* %314, align 4
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, -86
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  br label %block_402059

block_4020b9:                                     ; preds = %block_4020b4, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %342 = phi i64 [ %3565, %block_4020b4 ], [ %101, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  %343 = phi i64 [ %3059, %block_4020b4 ], [ %130, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %344 = add i64 %342, -20
  %345 = add i64 %343, 8
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %344 to i32*
  %347 = load i32, i32* %346, align 4
  %348 = zext i32 %347 to i64
  store i64 %348, i64* %RCX, align 8, !tbaa !2428
  %349 = add i64 %342, -60
  %350 = add i64 %343, 11
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %349 to i32*
  store i32 4, i32* %351, align 4
  %352 = load i32, i32* %ECX, align 4
  %353 = zext i32 %352 to i64
  %354 = load i64, i64* %PC, align 8
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %355 = sext i32 %352 to i64
  %356 = lshr i64 %355, 32
  store i64 %356, i64* %64, align 8, !tbaa !2428
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -60
  %359 = add i64 %354, 6
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i32*
  %361 = load i32, i32* %360, align 4
  %362 = zext i32 %361 to i64
  store i64 %362, i64* %RCX, align 8, !tbaa !2428
  %363 = add i64 %354, 8
  store i64 %363, i64* %PC, align 8
  %364 = sext i32 %361 to i64
  %365 = shl nuw i64 %356, 32
  %366 = or i64 %365, %353
  %367 = sdiv i64 %366, %364
  %368 = shl i64 %367, 32
  %369 = ashr exact i64 %368, 32
  %370 = icmp eq i64 %367, %369
  br i1 %370, label %373, label %371

; <label>:371:                                    ; preds = %block_4020b9
  %372 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %363, %struct.Memory* %97) #9
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i32, i32* %EDX, align 4
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:373:                                    ; preds = %block_4020b9
  %374 = srem i64 %366, %364
  %375 = and i64 %367, 4294967295
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = and i64 %374, 4294967295
  store i64 %376, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %377 = trunc i64 %374 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %373, %371
  %378 = phi i64 [ %.pre6, %371 ], [ %363, %373 ]
  %379 = phi i32 [ %.pre5, %371 ], [ %377, %373 ]
  %380 = phi i64 [ %.pre4, %371 ], [ %357, %373 ]
  %381 = phi %struct.Memory* [ %372, %371 ], [ %97, %373 ]
  %382 = add i64 %380, -44
  %383 = add i64 %378, 3
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i32*
  store i32 %379, i32* %384, align 4
  %385 = load i64, i64* %RBP, align 8
  %386 = add i64 %385, -44
  %387 = load i64, i64* %PC, align 8
  %388 = add i64 %387, 4
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %386 to i32*
  %390 = load i32, i32* %389, align 4
  %391 = add i32 %390, -2
  %392 = icmp ult i32 %390, 2
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %.pre-phi, align 1, !tbaa !2432
  %394 = and i32 %391, 255
  %395 = tail call i32 @llvm.ctpop.i32(i32 %394) #8
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  %398 = xor i8 %397, 1
  store i8 %398, i8* %.pre-phi23, align 1, !tbaa !2446
  %399 = xor i32 %390, %391
  %400 = lshr i32 %399, 4
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  store i8 %402, i8* %.pre-phi25, align 1, !tbaa !2450
  %403 = icmp eq i32 %391, 0
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %.pre-phi27, align 1, !tbaa !2447
  %405 = lshr i32 %391, 31
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %.pre-phi29, align 1, !tbaa !2448
  %407 = lshr i32 %390, 31
  %408 = xor i32 %405, %407
  %409 = add nuw nsw i32 %408, %407
  %410 = icmp eq i32 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %.pre-phi31, align 1, !tbaa !2449
  %412 = icmp ne i8 %406, 0
  %413 = xor i1 %412, %410
  %.v36 = select i1 %413, i64 171, i64 10
  %414 = add i64 %387, %.v36
  store i64 %414, i64* %PC, align 8, !tbaa !2428
  br i1 %413, label %block_40217a, label %block_4020d9

block_4022cd:                                     ; preds = %block_4022d9, %block_4022bd
  %415 = phi i64 [ %4724, %block_4022d9 ], [ %.pre15, %block_4022bd ]
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -48
  %418 = add i64 %415, 3
  store i64 %418, i64* %PC, align 8
  %419 = inttoptr i64 %417 to i32*
  %420 = load i32, i32* %419, align 4
  %421 = zext i32 %420 to i64
  store i64 %421, i64* %RAX, align 8, !tbaa !2428
  %422 = add i64 %416, -4
  %423 = add i64 %415, 6
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to i32*
  %425 = load i32, i32* %424, align 4
  %426 = sub i32 %420, %425
  %427 = icmp ult i32 %420, %425
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %.pre-phi, align 1, !tbaa !2432
  %429 = and i32 %426, 255
  %430 = tail call i32 @llvm.ctpop.i32(i32 %429) #8
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  %433 = xor i8 %432, 1
  store i8 %433, i8* %.pre-phi23, align 1, !tbaa !2446
  %434 = xor i32 %425, %420
  %435 = xor i32 %434, %426
  %436 = lshr i32 %435, 4
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  store i8 %438, i8* %.pre-phi25, align 1, !tbaa !2450
  %439 = icmp eq i32 %426, 0
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %.pre-phi27, align 1, !tbaa !2447
  %441 = lshr i32 %426, 31
  %442 = trunc i32 %441 to i8
  store i8 %442, i8* %.pre-phi29, align 1, !tbaa !2448
  %443 = lshr i32 %420, 31
  %444 = lshr i32 %425, 31
  %445 = xor i32 %444, %443
  %446 = xor i32 %441, %443
  %447 = add nuw nsw i32 %446, %445
  %448 = icmp eq i32 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %.pre-phi31, align 1, !tbaa !2449
  %450 = icmp ne i8 %442, 0
  %451 = xor i1 %450, %448
  %.v41 = select i1 %451, i64 12, i64 434
  %452 = add i64 %415, %.v41
  store i64 %452, i64* %PC, align 8, !tbaa !2428
  br i1 %451, label %block_4022d9, label %block_40247f

block_402049:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %453 = add i64 %130, 3
  store i64 %453, i64* %PC, align 8
  %454 = load i32, i32* %105, align 4
  %455 = add i32 %454, -1
  %456 = zext i32 %455 to i64
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = icmp eq i32 %454, 0
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %.pre-phi, align 1, !tbaa !2432
  %459 = and i32 %455, 255
  %460 = tail call i32 @llvm.ctpop.i32(i32 %459) #8
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  store i8 %463, i8* %.pre-phi23, align 1, !tbaa !2446
  %464 = xor i32 %454, %455
  %465 = lshr i32 %464, 4
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  store i8 %467, i8* %.pre-phi25, align 1, !tbaa !2450
  %468 = icmp eq i32 %455, 0
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %.pre-phi27, align 1, !tbaa !2447
  %470 = lshr i32 %455, 31
  %471 = trunc i32 %470 to i8
  store i8 %471, i8* %.pre-phi29, align 1, !tbaa !2448
  %472 = lshr i32 %454, 31
  %473 = xor i32 %470, %472
  %474 = add nuw nsw i32 %473, %472
  %475 = icmp eq i32 %474, 2
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %.pre-phi31, align 1, !tbaa !2449
  %477 = add i64 %130, 9
  store i64 %477, i64* %PC, align 8
  store i32 %455, i32* %105, align 4
  %478 = load i64, i64* %RBP, align 8
  %479 = add i64 %478, -48
  %480 = load i64, i64* %PC, align 8
  %481 = add i64 %480, 7
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %479 to i32*
  store i32 0, i32* %482, align 4
  %483 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %484 = bitcast [32 x %union.VectorReg]* %7 to float*
  %485 = getelementptr inbounds i8, i8* %483, i64 4
  %486 = bitcast i8* %485 to float*
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %488 = bitcast i64* %487 to float*
  %489 = getelementptr inbounds i8, i8* %483, i64 12
  %490 = bitcast i8* %489 to float*
  %491 = bitcast %union.VectorReg* %8 to i8*
  %492 = bitcast %union.VectorReg* %8 to float*
  %493 = getelementptr inbounds i8, i8* %491, i64 4
  %494 = bitcast i8* %493 to float*
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %496 = bitcast i64* %495 to float*
  %497 = getelementptr inbounds i8, i8* %491, i64 12
  %498 = bitcast i8* %497 to float*
  %499 = bitcast %union.VectorReg* %8 to <2 x float>*
  %500 = bitcast i64* %495 to <2 x i32>*
  %501 = bitcast i8* %493 to i32*
  %502 = bitcast i64* %495 to i32*
  %503 = bitcast i8* %497 to i32*
  %504 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %505 = bitcast i64* %487 to <2 x i32>*
  %506 = bitcast i8* %485 to i32*
  %507 = bitcast i64* %487 to i32*
  %508 = bitcast i8* %489 to i32*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_402059

block_4027f3:                                     ; preds = %block_4024b9
  %509 = add i64 %3340, -44
  %510 = add i64 %3376, 8
  store i64 %510, i64* %PC, align 8
  %511 = inttoptr i64 %509 to i32*
  %512 = load i32, i32* %511, align 4
  %513 = add i32 %512, 16
  %514 = zext i32 %513 to i64
  store i64 %514, i64* %RAX, align 8, !tbaa !2428
  %515 = icmp ugt i32 %512, -17
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %.pre-phi, align 1, !tbaa !2432
  %517 = and i32 %513, 255
  %518 = tail call i32 @llvm.ctpop.i32(i32 %517) #8
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  store i8 %521, i8* %.pre-phi23, align 1, !tbaa !2446
  %522 = xor i32 %512, 16
  %523 = xor i32 %522, %513
  %524 = lshr i32 %523, 4
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  store i8 %526, i8* %.pre-phi25, align 1, !tbaa !2450
  %527 = icmp eq i32 %513, 0
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %.pre-phi27, align 1, !tbaa !2447
  %529 = lshr i32 %513, 31
  %530 = trunc i32 %529 to i8
  store i8 %530, i8* %.pre-phi29, align 1, !tbaa !2448
  %531 = lshr i32 %512, 31
  %532 = xor i32 %529, %531
  %533 = add nuw nsw i32 %532, %529
  %534 = icmp eq i32 %533, 2
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %.pre-phi31, align 1, !tbaa !2449
  %536 = add i64 %3376, 14
  store i64 %536, i64* %PC, align 8
  store i32 %513, i32* %511, align 4
  %537 = load i64, i64* %PC, align 8
  %538 = add i64 %537, -859
  store i64 %538, i64* %PC, align 8, !tbaa !2428
  br label %block_4024a6

block_4022bd:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %539 = add i64 %3674, 3
  store i64 %539, i64* %PC, align 8
  %540 = load i32, i32* %3649, align 4
  %541 = add i32 %540, -1
  %542 = zext i32 %541 to i64
  store i64 %542, i64* %RAX, align 8, !tbaa !2428
  %543 = icmp eq i32 %540, 0
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %.pre-phi, align 1, !tbaa !2432
  %545 = and i32 %541, 255
  %546 = tail call i32 @llvm.ctpop.i32(i32 %545) #8
  %547 = trunc i32 %546 to i8
  %548 = and i8 %547, 1
  %549 = xor i8 %548, 1
  store i8 %549, i8* %.pre-phi23, align 1, !tbaa !2446
  %550 = xor i32 %540, %541
  %551 = lshr i32 %550, 4
  %552 = trunc i32 %551 to i8
  %553 = and i8 %552, 1
  store i8 %553, i8* %.pre-phi25, align 1, !tbaa !2450
  %554 = icmp eq i32 %541, 0
  %555 = zext i1 %554 to i8
  store i8 %555, i8* %.pre-phi27, align 1, !tbaa !2447
  %556 = lshr i32 %541, 31
  %557 = trunc i32 %556 to i8
  store i8 %557, i8* %.pre-phi29, align 1, !tbaa !2448
  %558 = lshr i32 %540, 31
  %559 = xor i32 %556, %558
  %560 = add nuw nsw i32 %559, %558
  %561 = icmp eq i32 %560, 2
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %.pre-phi31, align 1, !tbaa !2449
  %563 = add i64 %3674, 9
  store i64 %563, i64* %PC, align 8
  store i32 %541, i32* %3649, align 4
  %564 = load i64, i64* %RBP, align 8
  %565 = add i64 %564, -48
  %566 = load i64, i64* %PC, align 8
  %567 = add i64 %566, 7
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %565 to i32*
  store i32 0, i32* %568, align 4
  %569 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %570 = bitcast [32 x %union.VectorReg]* %7 to float*
  %571 = getelementptr inbounds i8, i8* %569, i64 4
  %572 = bitcast i8* %571 to float*
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %574 = bitcast i64* %573 to float*
  %575 = getelementptr inbounds i8, i8* %569, i64 12
  %576 = bitcast i8* %575 to float*
  %577 = bitcast %union.VectorReg* %8 to i8*
  %578 = bitcast %union.VectorReg* %8 to float*
  %579 = getelementptr inbounds i8, i8* %577, i64 4
  %580 = bitcast i8* %579 to float*
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %582 = bitcast i64* %581 to float*
  %583 = getelementptr inbounds i8, i8* %577, i64 12
  %584 = bitcast i8* %583 to float*
  %585 = bitcast %union.VectorReg* %8 to <2 x float>*
  %586 = bitcast i64* %581 to <2 x i32>*
  %587 = bitcast i8* %579 to i32*
  %588 = bitcast i64* %581 to i32*
  %589 = bitcast i8* %583 to i32*
  %590 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %591 = bitcast i64* %573 to <2 x i32>*
  %592 = bitcast i8* %571 to i32*
  %593 = bitcast i64* %573 to i32*
  %594 = bitcast i8* %575 to i32*
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_4022cd

block_4024c5:                                     ; preds = %block_4024b9
  %595 = add i64 %3340, -16
  %596 = add i64 %3376, 4
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i64*
  %598 = load i64, i64* %597, align 8
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = add i64 %3376, 8
  store i64 %599, i64* %PC, align 8
  %600 = load i32, i32* %3343, align 4
  %601 = sext i32 %600 to i64
  store i64 %601, i64* %RCX, align 8, !tbaa !2428
  %602 = shl nsw i64 %601, 2
  %603 = add i64 %602, %598
  %604 = add i64 %3376, 13
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %603 to i32*
  %606 = load i32, i32* %605, align 4
  %607 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %606, i32* %607, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4836, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4838, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4840, align 1, !tbaa !2452
  %608 = add i64 %3340, -32
  %609 = add i64 %3376, 17
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %608 to i64*
  %611 = load i64, i64* %610, align 8
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = add i64 %3340, -44
  %613 = add i64 %3376, 20
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i32*
  %615 = load i32, i32* %614, align 4
  %616 = add i32 %615, -15
  %617 = zext i32 %616 to i64
  store i64 %617, i64* %RDX, align 8, !tbaa !2428
  %618 = icmp ult i32 %615, 15
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %.pre-phi, align 1, !tbaa !2432
  %620 = and i32 %616, 255
  %621 = tail call i32 @llvm.ctpop.i32(i32 %620) #8
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  store i8 %624, i8* %.pre-phi23, align 1, !tbaa !2446
  %625 = xor i32 %615, %616
  %626 = lshr i32 %625, 4
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  store i8 %628, i8* %.pre-phi25, align 1, !tbaa !2450
  %629 = icmp eq i32 %616, 0
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %.pre-phi27, align 1, !tbaa !2447
  %631 = lshr i32 %616, 31
  %632 = trunc i32 %631 to i8
  store i8 %632, i8* %.pre-phi29, align 1, !tbaa !2448
  %633 = lshr i32 %615, 31
  %634 = xor i32 %631, %633
  %635 = add nuw nsw i32 %634, %633
  %636 = icmp eq i32 %635, 2
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %.pre-phi31, align 1, !tbaa !2449
  %638 = sext i32 %616 to i64
  store i64 %638, i64* %RCX, align 8, !tbaa !2428
  %639 = shl nsw i64 %638, 2
  %640 = add i64 %639, %611
  %641 = add i64 %3376, 31
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i32*
  %643 = load i32, i32* %642, align 4
  %644 = bitcast %union.VectorReg* %8 to i32*
  store i32 %643, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %645 = add i64 %3340, -40
  %646 = add i64 %3376, 35
  store i64 %646, i64* %PC, align 8
  %647 = inttoptr i64 %645 to i64*
  %648 = load i64, i64* %647, align 8
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = add i64 %3340, -24
  %650 = add i64 %3376, 38
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %649 to i32*
  %652 = load i32, i32* %651, align 4
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RDX, align 8, !tbaa !2428
  %654 = add i64 %3376, 41
  store i64 %654, i64* %PC, align 8
  %655 = load i32, i32* %614, align 4
  %656 = add i32 %655, -15
  %657 = zext i32 %656 to i64
  store i64 %657, i64* %RSI, align 8, !tbaa !2428
  %658 = sext i32 %652 to i64
  %659 = sext i32 %656 to i64
  %660 = mul nsw i64 %659, %658
  %661 = trunc i64 %660 to i32
  %662 = and i64 %660, 4294967295
  store i64 %662, i64* %RDX, align 8, !tbaa !2428
  %663 = shl i64 %660, 32
  %664 = ashr exact i64 %663, 32
  %665 = icmp ne i64 %664, %660
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %.pre-phi, align 1, !tbaa !2432
  %667 = and i32 %661, 255
  %668 = tail call i32 @llvm.ctpop.i32(i32 %667) #8
  %669 = trunc i32 %668 to i8
  %670 = and i8 %669, 1
  %671 = xor i8 %670, 1
  store i8 %671, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %672 = lshr i32 %661, 31
  %673 = trunc i32 %672 to i8
  store i8 %673, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %666, i8* %.pre-phi31, align 1, !tbaa !2449
  %674 = load i64, i64* %RBP, align 8
  %675 = add i64 %674, -48
  %676 = add i64 %3376, 50
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i32*
  %678 = load i32, i32* %677, align 4
  %679 = add i32 %678, %661
  %680 = zext i32 %679 to i64
  store i64 %680, i64* %RDX, align 8, !tbaa !2428
  %681 = icmp ult i32 %679, %661
  %682 = icmp ult i32 %679, %678
  %683 = or i1 %681, %682
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %.pre-phi, align 1, !tbaa !2432
  %685 = and i32 %679, 255
  %686 = tail call i32 @llvm.ctpop.i32(i32 %685) #8
  %687 = trunc i32 %686 to i8
  %688 = and i8 %687, 1
  %689 = xor i8 %688, 1
  store i8 %689, i8* %.pre-phi23, align 1, !tbaa !2446
  %690 = xor i32 %678, %661
  %691 = xor i32 %690, %679
  %692 = lshr i32 %691, 4
  %693 = trunc i32 %692 to i8
  %694 = and i8 %693, 1
  store i8 %694, i8* %.pre-phi25, align 1, !tbaa !2450
  %695 = icmp eq i32 %679, 0
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %.pre-phi27, align 1, !tbaa !2447
  %697 = lshr i32 %679, 31
  %698 = trunc i32 %697 to i8
  store i8 %698, i8* %.pre-phi29, align 1, !tbaa !2448
  %699 = lshr i32 %678, 31
  %700 = xor i32 %697, %672
  %701 = xor i32 %697, %699
  %702 = add nuw nsw i32 %700, %701
  %703 = icmp eq i32 %702, 2
  %704 = zext i1 %703 to i8
  store i8 %704, i8* %.pre-phi31, align 1, !tbaa !2449
  %705 = sext i32 %679 to i64
  store i64 %705, i64* %RCX, align 8, !tbaa !2428
  %706 = shl nsw i64 %705, 2
  %707 = add i64 %706, %648
  %708 = add i64 %3376, 58
  store i64 %708, i64* %PC, align 8
  %709 = load <2 x float>, <2 x float>* %4849, align 1
  %710 = load <2 x i32>, <2 x i32>* %4850, align 1
  %711 = inttoptr i64 %707 to float*
  %712 = load float, float* %711, align 4
  %713 = extractelement <2 x float> %709, i32 0
  %714 = fmul float %713, %712
  store float %714, float* %4842, align 1, !tbaa !2452
  %715 = bitcast <2 x float> %709 to <2 x i32>
  %716 = extractelement <2 x i32> %715, i32 1
  store i32 %716, i32* %4851, align 1, !tbaa !2452
  %717 = extractelement <2 x i32> %710, i32 0
  store i32 %717, i32* %4852, align 1, !tbaa !2452
  %718 = extractelement <2 x i32> %710, i32 1
  store i32 %718, i32* %4853, align 1, !tbaa !2452
  %719 = load <2 x float>, <2 x float>* %4854, align 1
  %720 = load <2 x i32>, <2 x i32>* %4855, align 1
  %721 = load <2 x float>, <2 x float>* %4849, align 1
  %722 = extractelement <2 x float> %719, i32 0
  %723 = extractelement <2 x float> %721, i32 0
  %724 = fadd float %722, %723
  store float %724, float* %4834, align 1, !tbaa !2452
  %725 = bitcast <2 x float> %719 to <2 x i32>
  %726 = extractelement <2 x i32> %725, i32 1
  store i32 %726, i32* %4856, align 1, !tbaa !2452
  %727 = extractelement <2 x i32> %720, i32 0
  store i32 %727, i32* %4857, align 1, !tbaa !2452
  %728 = extractelement <2 x i32> %720, i32 1
  store i32 %728, i32* %4858, align 1, !tbaa !2452
  %729 = add i64 %674, -32
  %730 = add i64 %3376, 66
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %729 to i64*
  %732 = load i64, i64* %731, align 8
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = add i64 %674, -44
  %734 = add i64 %3376, 69
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %733 to i32*
  %736 = load i32, i32* %735, align 4
  %737 = add i32 %736, -14
  %738 = zext i32 %737 to i64
  store i64 %738, i64* %RDX, align 8, !tbaa !2428
  %739 = icmp ult i32 %736, 14
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %.pre-phi, align 1, !tbaa !2432
  %741 = and i32 %737, 255
  %742 = tail call i32 @llvm.ctpop.i32(i32 %741) #8
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  store i8 %745, i8* %.pre-phi23, align 1, !tbaa !2446
  %746 = xor i32 %736, %737
  %747 = lshr i32 %746, 4
  %748 = trunc i32 %747 to i8
  %749 = and i8 %748, 1
  store i8 %749, i8* %.pre-phi25, align 1, !tbaa !2450
  %750 = icmp eq i32 %737, 0
  %751 = zext i1 %750 to i8
  store i8 %751, i8* %.pre-phi27, align 1, !tbaa !2447
  %752 = lshr i32 %737, 31
  %753 = trunc i32 %752 to i8
  store i8 %753, i8* %.pre-phi29, align 1, !tbaa !2448
  %754 = lshr i32 %736, 31
  %755 = xor i32 %752, %754
  %756 = add nuw nsw i32 %755, %754
  %757 = icmp eq i32 %756, 2
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %.pre-phi31, align 1, !tbaa !2449
  %759 = sext i32 %737 to i64
  store i64 %759, i64* %RCX, align 8, !tbaa !2428
  %760 = shl nsw i64 %759, 2
  %761 = add i64 %760, %732
  %762 = add i64 %3376, 80
  store i64 %762, i64* %PC, align 8
  %763 = inttoptr i64 %761 to i32*
  %764 = load i32, i32* %763, align 4
  store i32 %764, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %765 = load i64, i64* %RBP, align 8
  %766 = add i64 %765, -40
  %767 = add i64 %3376, 84
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %766 to i64*
  %769 = load i64, i64* %768, align 8
  store i64 %769, i64* %RAX, align 8, !tbaa !2428
  %770 = add i64 %765, -24
  %771 = add i64 %3376, 87
  store i64 %771, i64* %PC, align 8
  %772 = inttoptr i64 %770 to i32*
  %773 = load i32, i32* %772, align 4
  %774 = zext i32 %773 to i64
  store i64 %774, i64* %RDX, align 8, !tbaa !2428
  %775 = add i64 %765, -44
  %776 = add i64 %3376, 90
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %775 to i32*
  %778 = load i32, i32* %777, align 4
  %779 = add i32 %778, -14
  %780 = zext i32 %779 to i64
  store i64 %780, i64* %RSI, align 8, !tbaa !2428
  %781 = sext i32 %773 to i64
  %782 = sext i32 %779 to i64
  %783 = mul nsw i64 %782, %781
  %784 = trunc i64 %783 to i32
  %785 = and i64 %783, 4294967295
  store i64 %785, i64* %RDX, align 8, !tbaa !2428
  %786 = shl i64 %783, 32
  %787 = ashr exact i64 %786, 32
  %788 = icmp ne i64 %787, %783
  %789 = zext i1 %788 to i8
  store i8 %789, i8* %.pre-phi, align 1, !tbaa !2432
  %790 = and i32 %784, 255
  %791 = tail call i32 @llvm.ctpop.i32(i32 %790) #8
  %792 = trunc i32 %791 to i8
  %793 = and i8 %792, 1
  %794 = xor i8 %793, 1
  store i8 %794, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %795 = lshr i32 %784, 31
  %796 = trunc i32 %795 to i8
  store i8 %796, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %789, i8* %.pre-phi31, align 1, !tbaa !2449
  %797 = add i64 %765, -48
  %798 = add i64 %3376, 99
  store i64 %798, i64* %PC, align 8
  %799 = inttoptr i64 %797 to i32*
  %800 = load i32, i32* %799, align 4
  %801 = add i32 %800, %784
  %802 = zext i32 %801 to i64
  store i64 %802, i64* %RDX, align 8, !tbaa !2428
  %803 = icmp ult i32 %801, %784
  %804 = icmp ult i32 %801, %800
  %805 = or i1 %803, %804
  %806 = zext i1 %805 to i8
  store i8 %806, i8* %.pre-phi, align 1, !tbaa !2432
  %807 = and i32 %801, 255
  %808 = tail call i32 @llvm.ctpop.i32(i32 %807) #8
  %809 = trunc i32 %808 to i8
  %810 = and i8 %809, 1
  %811 = xor i8 %810, 1
  store i8 %811, i8* %.pre-phi23, align 1, !tbaa !2446
  %812 = xor i32 %800, %784
  %813 = xor i32 %812, %801
  %814 = lshr i32 %813, 4
  %815 = trunc i32 %814 to i8
  %816 = and i8 %815, 1
  store i8 %816, i8* %.pre-phi25, align 1, !tbaa !2450
  %817 = icmp eq i32 %801, 0
  %818 = zext i1 %817 to i8
  store i8 %818, i8* %.pre-phi27, align 1, !tbaa !2447
  %819 = lshr i32 %801, 31
  %820 = trunc i32 %819 to i8
  store i8 %820, i8* %.pre-phi29, align 1, !tbaa !2448
  %821 = lshr i32 %800, 31
  %822 = xor i32 %819, %795
  %823 = xor i32 %819, %821
  %824 = add nuw nsw i32 %822, %823
  %825 = icmp eq i32 %824, 2
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %.pre-phi31, align 1, !tbaa !2449
  %827 = sext i32 %801 to i64
  store i64 %827, i64* %RCX, align 8, !tbaa !2428
  %828 = shl nsw i64 %827, 2
  %829 = add i64 %828, %769
  %830 = add i64 %3376, 107
  store i64 %830, i64* %PC, align 8
  %831 = load <2 x float>, <2 x float>* %4849, align 1
  %832 = load <2 x i32>, <2 x i32>* %4850, align 1
  %833 = inttoptr i64 %829 to float*
  %834 = load float, float* %833, align 4
  %835 = extractelement <2 x float> %831, i32 0
  %836 = fmul float %835, %834
  store float %836, float* %4842, align 1, !tbaa !2452
  %837 = bitcast <2 x float> %831 to <2 x i32>
  %838 = extractelement <2 x i32> %837, i32 1
  store i32 %838, i32* %4851, align 1, !tbaa !2452
  %839 = extractelement <2 x i32> %832, i32 0
  store i32 %839, i32* %4852, align 1, !tbaa !2452
  %840 = extractelement <2 x i32> %832, i32 1
  store i32 %840, i32* %4853, align 1, !tbaa !2452
  %841 = load <2 x float>, <2 x float>* %4854, align 1
  %842 = load <2 x i32>, <2 x i32>* %4855, align 1
  %843 = load <2 x float>, <2 x float>* %4849, align 1
  %844 = extractelement <2 x float> %841, i32 0
  %845 = extractelement <2 x float> %843, i32 0
  %846 = fadd float %844, %845
  store float %846, float* %4834, align 1, !tbaa !2452
  %847 = bitcast <2 x float> %841 to <2 x i32>
  %848 = extractelement <2 x i32> %847, i32 1
  store i32 %848, i32* %4856, align 1, !tbaa !2452
  %849 = extractelement <2 x i32> %842, i32 0
  store i32 %849, i32* %4857, align 1, !tbaa !2452
  %850 = extractelement <2 x i32> %842, i32 1
  store i32 %850, i32* %4858, align 1, !tbaa !2452
  %851 = load i64, i64* %RBP, align 8
  %852 = add i64 %851, -32
  %853 = add i64 %3376, 115
  store i64 %853, i64* %PC, align 8
  %854 = inttoptr i64 %852 to i64*
  %855 = load i64, i64* %854, align 8
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = add i64 %851, -44
  %857 = add i64 %3376, 118
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %856 to i32*
  %859 = load i32, i32* %858, align 4
  %860 = add i32 %859, -13
  %861 = zext i32 %860 to i64
  store i64 %861, i64* %RDX, align 8, !tbaa !2428
  %862 = icmp ult i32 %859, 13
  %863 = zext i1 %862 to i8
  store i8 %863, i8* %.pre-phi, align 1, !tbaa !2432
  %864 = and i32 %860, 255
  %865 = tail call i32 @llvm.ctpop.i32(i32 %864) #8
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  %868 = xor i8 %867, 1
  store i8 %868, i8* %.pre-phi23, align 1, !tbaa !2446
  %869 = xor i32 %859, %860
  %870 = lshr i32 %869, 4
  %871 = trunc i32 %870 to i8
  %872 = and i8 %871, 1
  store i8 %872, i8* %.pre-phi25, align 1, !tbaa !2450
  %873 = icmp eq i32 %860, 0
  %874 = zext i1 %873 to i8
  store i8 %874, i8* %.pre-phi27, align 1, !tbaa !2447
  %875 = lshr i32 %860, 31
  %876 = trunc i32 %875 to i8
  store i8 %876, i8* %.pre-phi29, align 1, !tbaa !2448
  %877 = lshr i32 %859, 31
  %878 = xor i32 %875, %877
  %879 = add nuw nsw i32 %878, %877
  %880 = icmp eq i32 %879, 2
  %881 = zext i1 %880 to i8
  store i8 %881, i8* %.pre-phi31, align 1, !tbaa !2449
  %882 = sext i32 %860 to i64
  store i64 %882, i64* %RCX, align 8, !tbaa !2428
  %883 = shl nsw i64 %882, 2
  %884 = add i64 %883, %855
  %885 = add i64 %3376, 129
  store i64 %885, i64* %PC, align 8
  %886 = inttoptr i64 %884 to i32*
  %887 = load i32, i32* %886, align 4
  store i32 %887, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %888 = add i64 %851, -40
  %889 = add i64 %3376, 133
  store i64 %889, i64* %PC, align 8
  %890 = inttoptr i64 %888 to i64*
  %891 = load i64, i64* %890, align 8
  store i64 %891, i64* %RAX, align 8, !tbaa !2428
  %892 = add i64 %851, -24
  %893 = add i64 %3376, 136
  store i64 %893, i64* %PC, align 8
  %894 = inttoptr i64 %892 to i32*
  %895 = load i32, i32* %894, align 4
  %896 = zext i32 %895 to i64
  store i64 %896, i64* %RDX, align 8, !tbaa !2428
  %897 = add i64 %3376, 139
  store i64 %897, i64* %PC, align 8
  %898 = load i32, i32* %858, align 4
  %899 = add i32 %898, -13
  %900 = zext i32 %899 to i64
  store i64 %900, i64* %RSI, align 8, !tbaa !2428
  %901 = sext i32 %895 to i64
  %902 = sext i32 %899 to i64
  %903 = mul nsw i64 %902, %901
  %904 = trunc i64 %903 to i32
  %905 = and i64 %903, 4294967295
  store i64 %905, i64* %RDX, align 8, !tbaa !2428
  %906 = shl i64 %903, 32
  %907 = ashr exact i64 %906, 32
  %908 = icmp ne i64 %907, %903
  %909 = zext i1 %908 to i8
  store i8 %909, i8* %.pre-phi, align 1, !tbaa !2432
  %910 = and i32 %904, 255
  %911 = tail call i32 @llvm.ctpop.i32(i32 %910) #8
  %912 = trunc i32 %911 to i8
  %913 = and i8 %912, 1
  %914 = xor i8 %913, 1
  store i8 %914, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %915 = lshr i32 %904, 31
  %916 = trunc i32 %915 to i8
  store i8 %916, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %909, i8* %.pre-phi31, align 1, !tbaa !2449
  %917 = add i64 %851, -48
  %918 = add i64 %3376, 148
  store i64 %918, i64* %PC, align 8
  %919 = inttoptr i64 %917 to i32*
  %920 = load i32, i32* %919, align 4
  %921 = add i32 %920, %904
  %922 = zext i32 %921 to i64
  store i64 %922, i64* %RDX, align 8, !tbaa !2428
  %923 = icmp ult i32 %921, %904
  %924 = icmp ult i32 %921, %920
  %925 = or i1 %923, %924
  %926 = zext i1 %925 to i8
  store i8 %926, i8* %.pre-phi, align 1, !tbaa !2432
  %927 = and i32 %921, 255
  %928 = tail call i32 @llvm.ctpop.i32(i32 %927) #8
  %929 = trunc i32 %928 to i8
  %930 = and i8 %929, 1
  %931 = xor i8 %930, 1
  store i8 %931, i8* %.pre-phi23, align 1, !tbaa !2446
  %932 = xor i32 %920, %904
  %933 = xor i32 %932, %921
  %934 = lshr i32 %933, 4
  %935 = trunc i32 %934 to i8
  %936 = and i8 %935, 1
  store i8 %936, i8* %.pre-phi25, align 1, !tbaa !2450
  %937 = icmp eq i32 %921, 0
  %938 = zext i1 %937 to i8
  store i8 %938, i8* %.pre-phi27, align 1, !tbaa !2447
  %939 = lshr i32 %921, 31
  %940 = trunc i32 %939 to i8
  store i8 %940, i8* %.pre-phi29, align 1, !tbaa !2448
  %941 = lshr i32 %920, 31
  %942 = xor i32 %939, %915
  %943 = xor i32 %939, %941
  %944 = add nuw nsw i32 %942, %943
  %945 = icmp eq i32 %944, 2
  %946 = zext i1 %945 to i8
  store i8 %946, i8* %.pre-phi31, align 1, !tbaa !2449
  %947 = sext i32 %921 to i64
  store i64 %947, i64* %RCX, align 8, !tbaa !2428
  %948 = shl nsw i64 %947, 2
  %949 = add i64 %948, %891
  %950 = add i64 %3376, 156
  store i64 %950, i64* %PC, align 8
  %951 = load <2 x float>, <2 x float>* %4849, align 1
  %952 = load <2 x i32>, <2 x i32>* %4850, align 1
  %953 = inttoptr i64 %949 to float*
  %954 = load float, float* %953, align 4
  %955 = extractelement <2 x float> %951, i32 0
  %956 = fmul float %955, %954
  store float %956, float* %4842, align 1, !tbaa !2452
  %957 = bitcast <2 x float> %951 to <2 x i32>
  %958 = extractelement <2 x i32> %957, i32 1
  store i32 %958, i32* %4851, align 1, !tbaa !2452
  %959 = extractelement <2 x i32> %952, i32 0
  store i32 %959, i32* %4852, align 1, !tbaa !2452
  %960 = extractelement <2 x i32> %952, i32 1
  store i32 %960, i32* %4853, align 1, !tbaa !2452
  %961 = load <2 x float>, <2 x float>* %4854, align 1
  %962 = load <2 x i32>, <2 x i32>* %4855, align 1
  %963 = load <2 x float>, <2 x float>* %4849, align 1
  %964 = extractelement <2 x float> %961, i32 0
  %965 = extractelement <2 x float> %963, i32 0
  %966 = fadd float %964, %965
  store float %966, float* %4834, align 1, !tbaa !2452
  %967 = bitcast <2 x float> %961 to <2 x i32>
  %968 = extractelement <2 x i32> %967, i32 1
  store i32 %968, i32* %4856, align 1, !tbaa !2452
  %969 = extractelement <2 x i32> %962, i32 0
  store i32 %969, i32* %4857, align 1, !tbaa !2452
  %970 = extractelement <2 x i32> %962, i32 1
  store i32 %970, i32* %4858, align 1, !tbaa !2452
  %971 = add i64 %3376, 164
  store i64 %971, i64* %PC, align 8
  %972 = load i64, i64* %854, align 8
  store i64 %972, i64* %RAX, align 8, !tbaa !2428
  %973 = add i64 %3376, 167
  store i64 %973, i64* %PC, align 8
  %974 = load i32, i32* %858, align 4
  %975 = add i32 %974, -12
  %976 = zext i32 %975 to i64
  store i64 %976, i64* %RDX, align 8, !tbaa !2428
  %977 = icmp ult i32 %974, 12
  %978 = zext i1 %977 to i8
  store i8 %978, i8* %.pre-phi, align 1, !tbaa !2432
  %979 = and i32 %975, 255
  %980 = tail call i32 @llvm.ctpop.i32(i32 %979) #8
  %981 = trunc i32 %980 to i8
  %982 = and i8 %981, 1
  %983 = xor i8 %982, 1
  store i8 %983, i8* %.pre-phi23, align 1, !tbaa !2446
  %984 = xor i32 %974, %975
  %985 = lshr i32 %984, 4
  %986 = trunc i32 %985 to i8
  %987 = and i8 %986, 1
  store i8 %987, i8* %.pre-phi25, align 1, !tbaa !2450
  %988 = icmp eq i32 %975, 0
  %989 = zext i1 %988 to i8
  store i8 %989, i8* %.pre-phi27, align 1, !tbaa !2447
  %990 = lshr i32 %975, 31
  %991 = trunc i32 %990 to i8
  store i8 %991, i8* %.pre-phi29, align 1, !tbaa !2448
  %992 = lshr i32 %974, 31
  %993 = xor i32 %990, %992
  %994 = add nuw nsw i32 %993, %992
  %995 = icmp eq i32 %994, 2
  %996 = zext i1 %995 to i8
  store i8 %996, i8* %.pre-phi31, align 1, !tbaa !2449
  %997 = sext i32 %975 to i64
  store i64 %997, i64* %RCX, align 8, !tbaa !2428
  %998 = shl nsw i64 %997, 2
  %999 = add i64 %998, %972
  %1000 = add i64 %3376, 178
  store i64 %1000, i64* %PC, align 8
  %1001 = inttoptr i64 %999 to i32*
  %1002 = load i32, i32* %1001, align 4
  store i32 %1002, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1003 = load i64, i64* %RBP, align 8
  %1004 = add i64 %1003, -40
  %1005 = add i64 %3376, 182
  store i64 %1005, i64* %PC, align 8
  %1006 = inttoptr i64 %1004 to i64*
  %1007 = load i64, i64* %1006, align 8
  store i64 %1007, i64* %RAX, align 8, !tbaa !2428
  %1008 = add i64 %1003, -24
  %1009 = add i64 %3376, 185
  store i64 %1009, i64* %PC, align 8
  %1010 = inttoptr i64 %1008 to i32*
  %1011 = load i32, i32* %1010, align 4
  %1012 = zext i32 %1011 to i64
  store i64 %1012, i64* %RDX, align 8, !tbaa !2428
  %1013 = add i64 %1003, -44
  %1014 = add i64 %3376, 188
  store i64 %1014, i64* %PC, align 8
  %1015 = inttoptr i64 %1013 to i32*
  %1016 = load i32, i32* %1015, align 4
  %1017 = add i32 %1016, -12
  %1018 = zext i32 %1017 to i64
  store i64 %1018, i64* %RSI, align 8, !tbaa !2428
  %1019 = sext i32 %1011 to i64
  %1020 = sext i32 %1017 to i64
  %1021 = mul nsw i64 %1020, %1019
  %1022 = trunc i64 %1021 to i32
  %1023 = and i64 %1021, 4294967295
  store i64 %1023, i64* %RDX, align 8, !tbaa !2428
  %1024 = shl i64 %1021, 32
  %1025 = ashr exact i64 %1024, 32
  %1026 = icmp ne i64 %1025, %1021
  %1027 = zext i1 %1026 to i8
  store i8 %1027, i8* %.pre-phi, align 1, !tbaa !2432
  %1028 = and i32 %1022, 255
  %1029 = tail call i32 @llvm.ctpop.i32(i32 %1028) #8
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = xor i8 %1031, 1
  store i8 %1032, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1033 = lshr i32 %1022, 31
  %1034 = trunc i32 %1033 to i8
  store i8 %1034, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1027, i8* %.pre-phi31, align 1, !tbaa !2449
  %1035 = add i64 %1003, -48
  %1036 = add i64 %3376, 197
  store i64 %1036, i64* %PC, align 8
  %1037 = inttoptr i64 %1035 to i32*
  %1038 = load i32, i32* %1037, align 4
  %1039 = add i32 %1038, %1022
  %1040 = zext i32 %1039 to i64
  store i64 %1040, i64* %RDX, align 8, !tbaa !2428
  %1041 = icmp ult i32 %1039, %1022
  %1042 = icmp ult i32 %1039, %1038
  %1043 = or i1 %1041, %1042
  %1044 = zext i1 %1043 to i8
  store i8 %1044, i8* %.pre-phi, align 1, !tbaa !2432
  %1045 = and i32 %1039, 255
  %1046 = tail call i32 @llvm.ctpop.i32(i32 %1045) #8
  %1047 = trunc i32 %1046 to i8
  %1048 = and i8 %1047, 1
  %1049 = xor i8 %1048, 1
  store i8 %1049, i8* %.pre-phi23, align 1, !tbaa !2446
  %1050 = xor i32 %1038, %1022
  %1051 = xor i32 %1050, %1039
  %1052 = lshr i32 %1051, 4
  %1053 = trunc i32 %1052 to i8
  %1054 = and i8 %1053, 1
  store i8 %1054, i8* %.pre-phi25, align 1, !tbaa !2450
  %1055 = icmp eq i32 %1039, 0
  %1056 = zext i1 %1055 to i8
  store i8 %1056, i8* %.pre-phi27, align 1, !tbaa !2447
  %1057 = lshr i32 %1039, 31
  %1058 = trunc i32 %1057 to i8
  store i8 %1058, i8* %.pre-phi29, align 1, !tbaa !2448
  %1059 = lshr i32 %1038, 31
  %1060 = xor i32 %1057, %1033
  %1061 = xor i32 %1057, %1059
  %1062 = add nuw nsw i32 %1060, %1061
  %1063 = icmp eq i32 %1062, 2
  %1064 = zext i1 %1063 to i8
  store i8 %1064, i8* %.pre-phi31, align 1, !tbaa !2449
  %1065 = sext i32 %1039 to i64
  store i64 %1065, i64* %RCX, align 8, !tbaa !2428
  %1066 = shl nsw i64 %1065, 2
  %1067 = add i64 %1066, %1007
  %1068 = add i64 %3376, 205
  store i64 %1068, i64* %PC, align 8
  %1069 = load <2 x float>, <2 x float>* %4849, align 1
  %1070 = load <2 x i32>, <2 x i32>* %4850, align 1
  %1071 = inttoptr i64 %1067 to float*
  %1072 = load float, float* %1071, align 4
  %1073 = extractelement <2 x float> %1069, i32 0
  %1074 = fmul float %1073, %1072
  store float %1074, float* %4842, align 1, !tbaa !2452
  %1075 = bitcast <2 x float> %1069 to <2 x i32>
  %1076 = extractelement <2 x i32> %1075, i32 1
  store i32 %1076, i32* %4851, align 1, !tbaa !2452
  %1077 = extractelement <2 x i32> %1070, i32 0
  store i32 %1077, i32* %4852, align 1, !tbaa !2452
  %1078 = extractelement <2 x i32> %1070, i32 1
  store i32 %1078, i32* %4853, align 1, !tbaa !2452
  %1079 = load <2 x float>, <2 x float>* %4854, align 1
  %1080 = load <2 x i32>, <2 x i32>* %4855, align 1
  %1081 = load <2 x float>, <2 x float>* %4849, align 1
  %1082 = extractelement <2 x float> %1079, i32 0
  %1083 = extractelement <2 x float> %1081, i32 0
  %1084 = fadd float %1082, %1083
  store float %1084, float* %4834, align 1, !tbaa !2452
  %1085 = bitcast <2 x float> %1079 to <2 x i32>
  %1086 = extractelement <2 x i32> %1085, i32 1
  store i32 %1086, i32* %4856, align 1, !tbaa !2452
  %1087 = extractelement <2 x i32> %1080, i32 0
  store i32 %1087, i32* %4857, align 1, !tbaa !2452
  %1088 = extractelement <2 x i32> %1080, i32 1
  store i32 %1088, i32* %4858, align 1, !tbaa !2452
  %1089 = load i64, i64* %RBP, align 8
  %1090 = add i64 %1089, -32
  %1091 = add i64 %3376, 213
  store i64 %1091, i64* %PC, align 8
  %1092 = inttoptr i64 %1090 to i64*
  %1093 = load i64, i64* %1092, align 8
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  %1094 = add i64 %1089, -44
  %1095 = add i64 %3376, 216
  store i64 %1095, i64* %PC, align 8
  %1096 = inttoptr i64 %1094 to i32*
  %1097 = load i32, i32* %1096, align 4
  %1098 = add i32 %1097, -11
  %1099 = zext i32 %1098 to i64
  store i64 %1099, i64* %RDX, align 8, !tbaa !2428
  %1100 = icmp ult i32 %1097, 11
  %1101 = zext i1 %1100 to i8
  store i8 %1101, i8* %.pre-phi, align 1, !tbaa !2432
  %1102 = and i32 %1098, 255
  %1103 = tail call i32 @llvm.ctpop.i32(i32 %1102) #8
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  %1106 = xor i8 %1105, 1
  store i8 %1106, i8* %.pre-phi23, align 1, !tbaa !2446
  %1107 = xor i32 %1097, %1098
  %1108 = lshr i32 %1107, 4
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  store i8 %1110, i8* %.pre-phi25, align 1, !tbaa !2450
  %1111 = icmp eq i32 %1098, 0
  %1112 = zext i1 %1111 to i8
  store i8 %1112, i8* %.pre-phi27, align 1, !tbaa !2447
  %1113 = lshr i32 %1098, 31
  %1114 = trunc i32 %1113 to i8
  store i8 %1114, i8* %.pre-phi29, align 1, !tbaa !2448
  %1115 = lshr i32 %1097, 31
  %1116 = xor i32 %1113, %1115
  %1117 = add nuw nsw i32 %1116, %1115
  %1118 = icmp eq i32 %1117, 2
  %1119 = zext i1 %1118 to i8
  store i8 %1119, i8* %.pre-phi31, align 1, !tbaa !2449
  %1120 = sext i32 %1098 to i64
  store i64 %1120, i64* %RCX, align 8, !tbaa !2428
  %1121 = shl nsw i64 %1120, 2
  %1122 = add i64 %1121, %1093
  %1123 = add i64 %3376, 227
  store i64 %1123, i64* %PC, align 8
  %1124 = inttoptr i64 %1122 to i32*
  %1125 = load i32, i32* %1124, align 4
  store i32 %1125, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1126 = add i64 %1089, -40
  %1127 = add i64 %3376, 231
  store i64 %1127, i64* %PC, align 8
  %1128 = inttoptr i64 %1126 to i64*
  %1129 = load i64, i64* %1128, align 8
  store i64 %1129, i64* %RAX, align 8, !tbaa !2428
  %1130 = add i64 %1089, -24
  %1131 = add i64 %3376, 234
  store i64 %1131, i64* %PC, align 8
  %1132 = inttoptr i64 %1130 to i32*
  %1133 = load i32, i32* %1132, align 4
  %1134 = zext i32 %1133 to i64
  store i64 %1134, i64* %RDX, align 8, !tbaa !2428
  %1135 = add i64 %3376, 237
  store i64 %1135, i64* %PC, align 8
  %1136 = load i32, i32* %1096, align 4
  %1137 = add i32 %1136, -11
  %1138 = zext i32 %1137 to i64
  store i64 %1138, i64* %RSI, align 8, !tbaa !2428
  %1139 = sext i32 %1133 to i64
  %1140 = sext i32 %1137 to i64
  %1141 = mul nsw i64 %1140, %1139
  %1142 = trunc i64 %1141 to i32
  %1143 = and i64 %1141, 4294967295
  store i64 %1143, i64* %RDX, align 8, !tbaa !2428
  %1144 = shl i64 %1141, 32
  %1145 = ashr exact i64 %1144, 32
  %1146 = icmp ne i64 %1145, %1141
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %.pre-phi, align 1, !tbaa !2432
  %1148 = and i32 %1142, 255
  %1149 = tail call i32 @llvm.ctpop.i32(i32 %1148) #8
  %1150 = trunc i32 %1149 to i8
  %1151 = and i8 %1150, 1
  %1152 = xor i8 %1151, 1
  store i8 %1152, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1153 = lshr i32 %1142, 31
  %1154 = trunc i32 %1153 to i8
  store i8 %1154, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1147, i8* %.pre-phi31, align 1, !tbaa !2449
  %1155 = add i64 %1089, -48
  %1156 = add i64 %3376, 246
  store i64 %1156, i64* %PC, align 8
  %1157 = inttoptr i64 %1155 to i32*
  %1158 = load i32, i32* %1157, align 4
  %1159 = add i32 %1158, %1142
  %1160 = zext i32 %1159 to i64
  store i64 %1160, i64* %RDX, align 8, !tbaa !2428
  %1161 = icmp ult i32 %1159, %1142
  %1162 = icmp ult i32 %1159, %1158
  %1163 = or i1 %1161, %1162
  %1164 = zext i1 %1163 to i8
  store i8 %1164, i8* %.pre-phi, align 1, !tbaa !2432
  %1165 = and i32 %1159, 255
  %1166 = tail call i32 @llvm.ctpop.i32(i32 %1165) #8
  %1167 = trunc i32 %1166 to i8
  %1168 = and i8 %1167, 1
  %1169 = xor i8 %1168, 1
  store i8 %1169, i8* %.pre-phi23, align 1, !tbaa !2446
  %1170 = xor i32 %1158, %1142
  %1171 = xor i32 %1170, %1159
  %1172 = lshr i32 %1171, 4
  %1173 = trunc i32 %1172 to i8
  %1174 = and i8 %1173, 1
  store i8 %1174, i8* %.pre-phi25, align 1, !tbaa !2450
  %1175 = icmp eq i32 %1159, 0
  %1176 = zext i1 %1175 to i8
  store i8 %1176, i8* %.pre-phi27, align 1, !tbaa !2447
  %1177 = lshr i32 %1159, 31
  %1178 = trunc i32 %1177 to i8
  store i8 %1178, i8* %.pre-phi29, align 1, !tbaa !2448
  %1179 = lshr i32 %1158, 31
  %1180 = xor i32 %1177, %1153
  %1181 = xor i32 %1177, %1179
  %1182 = add nuw nsw i32 %1180, %1181
  %1183 = icmp eq i32 %1182, 2
  %1184 = zext i1 %1183 to i8
  store i8 %1184, i8* %.pre-phi31, align 1, !tbaa !2449
  %1185 = sext i32 %1159 to i64
  store i64 %1185, i64* %RCX, align 8, !tbaa !2428
  %1186 = shl nsw i64 %1185, 2
  %1187 = add i64 %1186, %1129
  %1188 = add i64 %3376, 254
  store i64 %1188, i64* %PC, align 8
  %1189 = load <2 x float>, <2 x float>* %4849, align 1
  %1190 = load <2 x i32>, <2 x i32>* %4850, align 1
  %1191 = inttoptr i64 %1187 to float*
  %1192 = load float, float* %1191, align 4
  %1193 = extractelement <2 x float> %1189, i32 0
  %1194 = fmul float %1193, %1192
  store float %1194, float* %4842, align 1, !tbaa !2452
  %1195 = bitcast <2 x float> %1189 to <2 x i32>
  %1196 = extractelement <2 x i32> %1195, i32 1
  store i32 %1196, i32* %4851, align 1, !tbaa !2452
  %1197 = extractelement <2 x i32> %1190, i32 0
  store i32 %1197, i32* %4852, align 1, !tbaa !2452
  %1198 = extractelement <2 x i32> %1190, i32 1
  store i32 %1198, i32* %4853, align 1, !tbaa !2452
  %1199 = load <2 x float>, <2 x float>* %4854, align 1
  %1200 = load <2 x i32>, <2 x i32>* %4855, align 1
  %1201 = load <2 x float>, <2 x float>* %4849, align 1
  %1202 = extractelement <2 x float> %1199, i32 0
  %1203 = extractelement <2 x float> %1201, i32 0
  %1204 = fadd float %1202, %1203
  store float %1204, float* %4834, align 1, !tbaa !2452
  %1205 = bitcast <2 x float> %1199 to <2 x i32>
  %1206 = extractelement <2 x i32> %1205, i32 1
  store i32 %1206, i32* %4856, align 1, !tbaa !2452
  %1207 = extractelement <2 x i32> %1200, i32 0
  store i32 %1207, i32* %4857, align 1, !tbaa !2452
  %1208 = extractelement <2 x i32> %1200, i32 1
  store i32 %1208, i32* %4858, align 1, !tbaa !2452
  %1209 = add i64 %3376, 262
  store i64 %1209, i64* %PC, align 8
  %1210 = load i64, i64* %1092, align 8
  store i64 %1210, i64* %RAX, align 8, !tbaa !2428
  %1211 = add i64 %3376, 265
  store i64 %1211, i64* %PC, align 8
  %1212 = load i32, i32* %1096, align 4
  %1213 = add i32 %1212, -10
  %1214 = zext i32 %1213 to i64
  store i64 %1214, i64* %RDX, align 8, !tbaa !2428
  %1215 = icmp ult i32 %1212, 10
  %1216 = zext i1 %1215 to i8
  store i8 %1216, i8* %.pre-phi, align 1, !tbaa !2432
  %1217 = and i32 %1213, 255
  %1218 = tail call i32 @llvm.ctpop.i32(i32 %1217) #8
  %1219 = trunc i32 %1218 to i8
  %1220 = and i8 %1219, 1
  %1221 = xor i8 %1220, 1
  store i8 %1221, i8* %.pre-phi23, align 1, !tbaa !2446
  %1222 = xor i32 %1212, %1213
  %1223 = lshr i32 %1222, 4
  %1224 = trunc i32 %1223 to i8
  %1225 = and i8 %1224, 1
  store i8 %1225, i8* %.pre-phi25, align 1, !tbaa !2450
  %1226 = icmp eq i32 %1213, 0
  %1227 = zext i1 %1226 to i8
  store i8 %1227, i8* %.pre-phi27, align 1, !tbaa !2447
  %1228 = lshr i32 %1213, 31
  %1229 = trunc i32 %1228 to i8
  store i8 %1229, i8* %.pre-phi29, align 1, !tbaa !2448
  %1230 = lshr i32 %1212, 31
  %1231 = xor i32 %1228, %1230
  %1232 = add nuw nsw i32 %1231, %1230
  %1233 = icmp eq i32 %1232, 2
  %1234 = zext i1 %1233 to i8
  store i8 %1234, i8* %.pre-phi31, align 1, !tbaa !2449
  %1235 = sext i32 %1213 to i64
  store i64 %1235, i64* %RCX, align 8, !tbaa !2428
  %1236 = shl nsw i64 %1235, 2
  %1237 = add i64 %1236, %1210
  %1238 = add i64 %3376, 276
  store i64 %1238, i64* %PC, align 8
  %1239 = inttoptr i64 %1237 to i32*
  %1240 = load i32, i32* %1239, align 4
  store i32 %1240, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1241 = load i64, i64* %RBP, align 8
  %1242 = add i64 %1241, -40
  %1243 = add i64 %3376, 280
  store i64 %1243, i64* %PC, align 8
  %1244 = inttoptr i64 %1242 to i64*
  %1245 = load i64, i64* %1244, align 8
  store i64 %1245, i64* %RAX, align 8, !tbaa !2428
  %1246 = add i64 %1241, -24
  %1247 = add i64 %3376, 283
  store i64 %1247, i64* %PC, align 8
  %1248 = inttoptr i64 %1246 to i32*
  %1249 = load i32, i32* %1248, align 4
  %1250 = zext i32 %1249 to i64
  store i64 %1250, i64* %RDX, align 8, !tbaa !2428
  %1251 = add i64 %1241, -44
  %1252 = add i64 %3376, 286
  store i64 %1252, i64* %PC, align 8
  %1253 = inttoptr i64 %1251 to i32*
  %1254 = load i32, i32* %1253, align 4
  %1255 = add i32 %1254, -10
  %1256 = zext i32 %1255 to i64
  store i64 %1256, i64* %RSI, align 8, !tbaa !2428
  %1257 = sext i32 %1249 to i64
  %1258 = sext i32 %1255 to i64
  %1259 = mul nsw i64 %1258, %1257
  %1260 = trunc i64 %1259 to i32
  %1261 = and i64 %1259, 4294967295
  store i64 %1261, i64* %RDX, align 8, !tbaa !2428
  %1262 = shl i64 %1259, 32
  %1263 = ashr exact i64 %1262, 32
  %1264 = icmp ne i64 %1263, %1259
  %1265 = zext i1 %1264 to i8
  store i8 %1265, i8* %.pre-phi, align 1, !tbaa !2432
  %1266 = and i32 %1260, 255
  %1267 = tail call i32 @llvm.ctpop.i32(i32 %1266) #8
  %1268 = trunc i32 %1267 to i8
  %1269 = and i8 %1268, 1
  %1270 = xor i8 %1269, 1
  store i8 %1270, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1271 = lshr i32 %1260, 31
  %1272 = trunc i32 %1271 to i8
  store i8 %1272, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1265, i8* %.pre-phi31, align 1, !tbaa !2449
  %1273 = add i64 %1241, -48
  %1274 = add i64 %3376, 295
  store i64 %1274, i64* %PC, align 8
  %1275 = inttoptr i64 %1273 to i32*
  %1276 = load i32, i32* %1275, align 4
  %1277 = add i32 %1276, %1260
  %1278 = zext i32 %1277 to i64
  store i64 %1278, i64* %RDX, align 8, !tbaa !2428
  %1279 = icmp ult i32 %1277, %1260
  %1280 = icmp ult i32 %1277, %1276
  %1281 = or i1 %1279, %1280
  %1282 = zext i1 %1281 to i8
  store i8 %1282, i8* %.pre-phi, align 1, !tbaa !2432
  %1283 = and i32 %1277, 255
  %1284 = tail call i32 @llvm.ctpop.i32(i32 %1283) #8
  %1285 = trunc i32 %1284 to i8
  %1286 = and i8 %1285, 1
  %1287 = xor i8 %1286, 1
  store i8 %1287, i8* %.pre-phi23, align 1, !tbaa !2446
  %1288 = xor i32 %1276, %1260
  %1289 = xor i32 %1288, %1277
  %1290 = lshr i32 %1289, 4
  %1291 = trunc i32 %1290 to i8
  %1292 = and i8 %1291, 1
  store i8 %1292, i8* %.pre-phi25, align 1, !tbaa !2450
  %1293 = icmp eq i32 %1277, 0
  %1294 = zext i1 %1293 to i8
  store i8 %1294, i8* %.pre-phi27, align 1, !tbaa !2447
  %1295 = lshr i32 %1277, 31
  %1296 = trunc i32 %1295 to i8
  store i8 %1296, i8* %.pre-phi29, align 1, !tbaa !2448
  %1297 = lshr i32 %1276, 31
  %1298 = xor i32 %1295, %1271
  %1299 = xor i32 %1295, %1297
  %1300 = add nuw nsw i32 %1298, %1299
  %1301 = icmp eq i32 %1300, 2
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %.pre-phi31, align 1, !tbaa !2449
  %1303 = sext i32 %1277 to i64
  store i64 %1303, i64* %RCX, align 8, !tbaa !2428
  %1304 = shl nsw i64 %1303, 2
  %1305 = add i64 %1304, %1245
  %1306 = add i64 %3376, 303
  store i64 %1306, i64* %PC, align 8
  %1307 = load <2 x float>, <2 x float>* %4849, align 1
  %1308 = load <2 x i32>, <2 x i32>* %4850, align 1
  %1309 = inttoptr i64 %1305 to float*
  %1310 = load float, float* %1309, align 4
  %1311 = extractelement <2 x float> %1307, i32 0
  %1312 = fmul float %1311, %1310
  store float %1312, float* %4842, align 1, !tbaa !2452
  %1313 = bitcast <2 x float> %1307 to <2 x i32>
  %1314 = extractelement <2 x i32> %1313, i32 1
  store i32 %1314, i32* %4851, align 1, !tbaa !2452
  %1315 = extractelement <2 x i32> %1308, i32 0
  store i32 %1315, i32* %4852, align 1, !tbaa !2452
  %1316 = extractelement <2 x i32> %1308, i32 1
  store i32 %1316, i32* %4853, align 1, !tbaa !2452
  %1317 = load <2 x float>, <2 x float>* %4854, align 1
  %1318 = load <2 x i32>, <2 x i32>* %4855, align 1
  %1319 = load <2 x float>, <2 x float>* %4849, align 1
  %1320 = extractelement <2 x float> %1317, i32 0
  %1321 = extractelement <2 x float> %1319, i32 0
  %1322 = fadd float %1320, %1321
  store float %1322, float* %4834, align 1, !tbaa !2452
  %1323 = bitcast <2 x float> %1317 to <2 x i32>
  %1324 = extractelement <2 x i32> %1323, i32 1
  store i32 %1324, i32* %4856, align 1, !tbaa !2452
  %1325 = extractelement <2 x i32> %1318, i32 0
  store i32 %1325, i32* %4857, align 1, !tbaa !2452
  %1326 = extractelement <2 x i32> %1318, i32 1
  store i32 %1326, i32* %4858, align 1, !tbaa !2452
  %1327 = load i64, i64* %RBP, align 8
  %1328 = add i64 %1327, -32
  %1329 = add i64 %3376, 311
  store i64 %1329, i64* %PC, align 8
  %1330 = inttoptr i64 %1328 to i64*
  %1331 = load i64, i64* %1330, align 8
  store i64 %1331, i64* %RAX, align 8, !tbaa !2428
  %1332 = add i64 %1327, -44
  %1333 = add i64 %3376, 314
  store i64 %1333, i64* %PC, align 8
  %1334 = inttoptr i64 %1332 to i32*
  %1335 = load i32, i32* %1334, align 4
  %1336 = add i32 %1335, -9
  %1337 = zext i32 %1336 to i64
  store i64 %1337, i64* %RDX, align 8, !tbaa !2428
  %1338 = icmp ult i32 %1335, 9
  %1339 = zext i1 %1338 to i8
  store i8 %1339, i8* %.pre-phi, align 1, !tbaa !2432
  %1340 = and i32 %1336, 255
  %1341 = tail call i32 @llvm.ctpop.i32(i32 %1340) #8
  %1342 = trunc i32 %1341 to i8
  %1343 = and i8 %1342, 1
  %1344 = xor i8 %1343, 1
  store i8 %1344, i8* %.pre-phi23, align 1, !tbaa !2446
  %1345 = xor i32 %1335, %1336
  %1346 = lshr i32 %1345, 4
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  store i8 %1348, i8* %.pre-phi25, align 1, !tbaa !2450
  %1349 = icmp eq i32 %1336, 0
  %1350 = zext i1 %1349 to i8
  store i8 %1350, i8* %.pre-phi27, align 1, !tbaa !2447
  %1351 = lshr i32 %1336, 31
  %1352 = trunc i32 %1351 to i8
  store i8 %1352, i8* %.pre-phi29, align 1, !tbaa !2448
  %1353 = lshr i32 %1335, 31
  %1354 = xor i32 %1351, %1353
  %1355 = add nuw nsw i32 %1354, %1353
  %1356 = icmp eq i32 %1355, 2
  %1357 = zext i1 %1356 to i8
  store i8 %1357, i8* %.pre-phi31, align 1, !tbaa !2449
  %1358 = sext i32 %1336 to i64
  store i64 %1358, i64* %RCX, align 8, !tbaa !2428
  %1359 = shl nsw i64 %1358, 2
  %1360 = add i64 %1359, %1331
  %1361 = add i64 %3376, 325
  store i64 %1361, i64* %PC, align 8
  %1362 = inttoptr i64 %1360 to i32*
  %1363 = load i32, i32* %1362, align 4
  store i32 %1363, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1364 = add i64 %1327, -40
  %1365 = add i64 %3376, 329
  store i64 %1365, i64* %PC, align 8
  %1366 = inttoptr i64 %1364 to i64*
  %1367 = load i64, i64* %1366, align 8
  store i64 %1367, i64* %RAX, align 8, !tbaa !2428
  %1368 = add i64 %1327, -24
  %1369 = add i64 %3376, 332
  store i64 %1369, i64* %PC, align 8
  %1370 = inttoptr i64 %1368 to i32*
  %1371 = load i32, i32* %1370, align 4
  %1372 = zext i32 %1371 to i64
  store i64 %1372, i64* %RDX, align 8, !tbaa !2428
  %1373 = add i64 %3376, 335
  store i64 %1373, i64* %PC, align 8
  %1374 = load i32, i32* %1334, align 4
  %1375 = add i32 %1374, -9
  %1376 = zext i32 %1375 to i64
  store i64 %1376, i64* %RSI, align 8, !tbaa !2428
  %1377 = sext i32 %1371 to i64
  %1378 = sext i32 %1375 to i64
  %1379 = mul nsw i64 %1378, %1377
  %1380 = trunc i64 %1379 to i32
  %1381 = and i64 %1379, 4294967295
  store i64 %1381, i64* %RDX, align 8, !tbaa !2428
  %1382 = shl i64 %1379, 32
  %1383 = ashr exact i64 %1382, 32
  %1384 = icmp ne i64 %1383, %1379
  %1385 = zext i1 %1384 to i8
  store i8 %1385, i8* %.pre-phi, align 1, !tbaa !2432
  %1386 = and i32 %1380, 255
  %1387 = tail call i32 @llvm.ctpop.i32(i32 %1386) #8
  %1388 = trunc i32 %1387 to i8
  %1389 = and i8 %1388, 1
  %1390 = xor i8 %1389, 1
  store i8 %1390, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1391 = lshr i32 %1380, 31
  %1392 = trunc i32 %1391 to i8
  store i8 %1392, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1385, i8* %.pre-phi31, align 1, !tbaa !2449
  %1393 = add i64 %1327, -48
  %1394 = add i64 %3376, 344
  store i64 %1394, i64* %PC, align 8
  %1395 = inttoptr i64 %1393 to i32*
  %1396 = load i32, i32* %1395, align 4
  %1397 = add i32 %1396, %1380
  %1398 = zext i32 %1397 to i64
  store i64 %1398, i64* %RDX, align 8, !tbaa !2428
  %1399 = icmp ult i32 %1397, %1380
  %1400 = icmp ult i32 %1397, %1396
  %1401 = or i1 %1399, %1400
  %1402 = zext i1 %1401 to i8
  store i8 %1402, i8* %.pre-phi, align 1, !tbaa !2432
  %1403 = and i32 %1397, 255
  %1404 = tail call i32 @llvm.ctpop.i32(i32 %1403) #8
  %1405 = trunc i32 %1404 to i8
  %1406 = and i8 %1405, 1
  %1407 = xor i8 %1406, 1
  store i8 %1407, i8* %.pre-phi23, align 1, !tbaa !2446
  %1408 = xor i32 %1396, %1380
  %1409 = xor i32 %1408, %1397
  %1410 = lshr i32 %1409, 4
  %1411 = trunc i32 %1410 to i8
  %1412 = and i8 %1411, 1
  store i8 %1412, i8* %.pre-phi25, align 1, !tbaa !2450
  %1413 = icmp eq i32 %1397, 0
  %1414 = zext i1 %1413 to i8
  store i8 %1414, i8* %.pre-phi27, align 1, !tbaa !2447
  %1415 = lshr i32 %1397, 31
  %1416 = trunc i32 %1415 to i8
  store i8 %1416, i8* %.pre-phi29, align 1, !tbaa !2448
  %1417 = lshr i32 %1396, 31
  %1418 = xor i32 %1415, %1391
  %1419 = xor i32 %1415, %1417
  %1420 = add nuw nsw i32 %1418, %1419
  %1421 = icmp eq i32 %1420, 2
  %1422 = zext i1 %1421 to i8
  store i8 %1422, i8* %.pre-phi31, align 1, !tbaa !2449
  %1423 = sext i32 %1397 to i64
  store i64 %1423, i64* %RCX, align 8, !tbaa !2428
  %1424 = shl nsw i64 %1423, 2
  %1425 = add i64 %1424, %1367
  %1426 = add i64 %3376, 352
  store i64 %1426, i64* %PC, align 8
  %1427 = load <2 x float>, <2 x float>* %4849, align 1
  %1428 = load <2 x i32>, <2 x i32>* %4850, align 1
  %1429 = inttoptr i64 %1425 to float*
  %1430 = load float, float* %1429, align 4
  %1431 = extractelement <2 x float> %1427, i32 0
  %1432 = fmul float %1431, %1430
  store float %1432, float* %4842, align 1, !tbaa !2452
  %1433 = bitcast <2 x float> %1427 to <2 x i32>
  %1434 = extractelement <2 x i32> %1433, i32 1
  store i32 %1434, i32* %4851, align 1, !tbaa !2452
  %1435 = extractelement <2 x i32> %1428, i32 0
  store i32 %1435, i32* %4852, align 1, !tbaa !2452
  %1436 = extractelement <2 x i32> %1428, i32 1
  store i32 %1436, i32* %4853, align 1, !tbaa !2452
  %1437 = load <2 x float>, <2 x float>* %4854, align 1
  %1438 = load <2 x i32>, <2 x i32>* %4855, align 1
  %1439 = load <2 x float>, <2 x float>* %4849, align 1
  %1440 = extractelement <2 x float> %1437, i32 0
  %1441 = extractelement <2 x float> %1439, i32 0
  %1442 = fadd float %1440, %1441
  store float %1442, float* %4834, align 1, !tbaa !2452
  %1443 = bitcast <2 x float> %1437 to <2 x i32>
  %1444 = extractelement <2 x i32> %1443, i32 1
  store i32 %1444, i32* %4856, align 1, !tbaa !2452
  %1445 = extractelement <2 x i32> %1438, i32 0
  store i32 %1445, i32* %4857, align 1, !tbaa !2452
  %1446 = extractelement <2 x i32> %1438, i32 1
  store i32 %1446, i32* %4858, align 1, !tbaa !2452
  %1447 = add i64 %3376, 360
  store i64 %1447, i64* %PC, align 8
  %1448 = load i64, i64* %1330, align 8
  store i64 %1448, i64* %RAX, align 8, !tbaa !2428
  %1449 = add i64 %3376, 363
  store i64 %1449, i64* %PC, align 8
  %1450 = load i32, i32* %1334, align 4
  %1451 = add i32 %1450, -8
  %1452 = zext i32 %1451 to i64
  store i64 %1452, i64* %RDX, align 8, !tbaa !2428
  %1453 = icmp ult i32 %1450, 8
  %1454 = zext i1 %1453 to i8
  store i8 %1454, i8* %.pre-phi, align 1, !tbaa !2432
  %1455 = and i32 %1451, 255
  %1456 = tail call i32 @llvm.ctpop.i32(i32 %1455) #8
  %1457 = trunc i32 %1456 to i8
  %1458 = and i8 %1457, 1
  %1459 = xor i8 %1458, 1
  store i8 %1459, i8* %.pre-phi23, align 1, !tbaa !2446
  %1460 = xor i32 %1450, %1451
  %1461 = lshr i32 %1460, 4
  %1462 = trunc i32 %1461 to i8
  %1463 = and i8 %1462, 1
  store i8 %1463, i8* %.pre-phi25, align 1, !tbaa !2450
  %1464 = icmp eq i32 %1451, 0
  %1465 = zext i1 %1464 to i8
  store i8 %1465, i8* %.pre-phi27, align 1, !tbaa !2447
  %1466 = lshr i32 %1451, 31
  %1467 = trunc i32 %1466 to i8
  store i8 %1467, i8* %.pre-phi29, align 1, !tbaa !2448
  %1468 = lshr i32 %1450, 31
  %1469 = xor i32 %1466, %1468
  %1470 = add nuw nsw i32 %1469, %1468
  %1471 = icmp eq i32 %1470, 2
  %1472 = zext i1 %1471 to i8
  store i8 %1472, i8* %.pre-phi31, align 1, !tbaa !2449
  %1473 = sext i32 %1451 to i64
  store i64 %1473, i64* %RCX, align 8, !tbaa !2428
  %1474 = shl nsw i64 %1473, 2
  %1475 = add i64 %1474, %1448
  %1476 = add i64 %3376, 374
  store i64 %1476, i64* %PC, align 8
  %1477 = inttoptr i64 %1475 to i32*
  %1478 = load i32, i32* %1477, align 4
  store i32 %1478, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1479 = load i64, i64* %RBP, align 8
  %1480 = add i64 %1479, -40
  %1481 = add i64 %3376, 378
  store i64 %1481, i64* %PC, align 8
  %1482 = inttoptr i64 %1480 to i64*
  %1483 = load i64, i64* %1482, align 8
  store i64 %1483, i64* %RAX, align 8, !tbaa !2428
  %1484 = add i64 %1479, -24
  %1485 = add i64 %3376, 381
  store i64 %1485, i64* %PC, align 8
  %1486 = inttoptr i64 %1484 to i32*
  %1487 = load i32, i32* %1486, align 4
  %1488 = zext i32 %1487 to i64
  store i64 %1488, i64* %RDX, align 8, !tbaa !2428
  %1489 = add i64 %1479, -44
  %1490 = add i64 %3376, 384
  store i64 %1490, i64* %PC, align 8
  %1491 = inttoptr i64 %1489 to i32*
  %1492 = load i32, i32* %1491, align 4
  %1493 = add i32 %1492, -8
  %1494 = zext i32 %1493 to i64
  store i64 %1494, i64* %RSI, align 8, !tbaa !2428
  %1495 = sext i32 %1487 to i64
  %1496 = sext i32 %1493 to i64
  %1497 = mul nsw i64 %1496, %1495
  %1498 = trunc i64 %1497 to i32
  %1499 = and i64 %1497, 4294967295
  store i64 %1499, i64* %RDX, align 8, !tbaa !2428
  %1500 = shl i64 %1497, 32
  %1501 = ashr exact i64 %1500, 32
  %1502 = icmp ne i64 %1501, %1497
  %1503 = zext i1 %1502 to i8
  store i8 %1503, i8* %.pre-phi, align 1, !tbaa !2432
  %1504 = and i32 %1498, 255
  %1505 = tail call i32 @llvm.ctpop.i32(i32 %1504) #8
  %1506 = trunc i32 %1505 to i8
  %1507 = and i8 %1506, 1
  %1508 = xor i8 %1507, 1
  store i8 %1508, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1509 = lshr i32 %1498, 31
  %1510 = trunc i32 %1509 to i8
  store i8 %1510, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1503, i8* %.pre-phi31, align 1, !tbaa !2449
  %1511 = add i64 %1479, -48
  %1512 = add i64 %3376, 393
  store i64 %1512, i64* %PC, align 8
  %1513 = inttoptr i64 %1511 to i32*
  %1514 = load i32, i32* %1513, align 4
  %1515 = add i32 %1514, %1498
  %1516 = zext i32 %1515 to i64
  store i64 %1516, i64* %RDX, align 8, !tbaa !2428
  %1517 = icmp ult i32 %1515, %1498
  %1518 = icmp ult i32 %1515, %1514
  %1519 = or i1 %1517, %1518
  %1520 = zext i1 %1519 to i8
  store i8 %1520, i8* %.pre-phi, align 1, !tbaa !2432
  %1521 = and i32 %1515, 255
  %1522 = tail call i32 @llvm.ctpop.i32(i32 %1521) #8
  %1523 = trunc i32 %1522 to i8
  %1524 = and i8 %1523, 1
  %1525 = xor i8 %1524, 1
  store i8 %1525, i8* %.pre-phi23, align 1, !tbaa !2446
  %1526 = xor i32 %1514, %1498
  %1527 = xor i32 %1526, %1515
  %1528 = lshr i32 %1527, 4
  %1529 = trunc i32 %1528 to i8
  %1530 = and i8 %1529, 1
  store i8 %1530, i8* %.pre-phi25, align 1, !tbaa !2450
  %1531 = icmp eq i32 %1515, 0
  %1532 = zext i1 %1531 to i8
  store i8 %1532, i8* %.pre-phi27, align 1, !tbaa !2447
  %1533 = lshr i32 %1515, 31
  %1534 = trunc i32 %1533 to i8
  store i8 %1534, i8* %.pre-phi29, align 1, !tbaa !2448
  %1535 = lshr i32 %1514, 31
  %1536 = xor i32 %1533, %1509
  %1537 = xor i32 %1533, %1535
  %1538 = add nuw nsw i32 %1536, %1537
  %1539 = icmp eq i32 %1538, 2
  %1540 = zext i1 %1539 to i8
  store i8 %1540, i8* %.pre-phi31, align 1, !tbaa !2449
  %1541 = sext i32 %1515 to i64
  store i64 %1541, i64* %RCX, align 8, !tbaa !2428
  %1542 = shl nsw i64 %1541, 2
  %1543 = add i64 %1542, %1483
  %1544 = add i64 %3376, 401
  store i64 %1544, i64* %PC, align 8
  %1545 = load <2 x float>, <2 x float>* %4849, align 1
  %1546 = load <2 x i32>, <2 x i32>* %4850, align 1
  %1547 = inttoptr i64 %1543 to float*
  %1548 = load float, float* %1547, align 4
  %1549 = extractelement <2 x float> %1545, i32 0
  %1550 = fmul float %1549, %1548
  store float %1550, float* %4842, align 1, !tbaa !2452
  %1551 = bitcast <2 x float> %1545 to <2 x i32>
  %1552 = extractelement <2 x i32> %1551, i32 1
  store i32 %1552, i32* %4851, align 1, !tbaa !2452
  %1553 = extractelement <2 x i32> %1546, i32 0
  store i32 %1553, i32* %4852, align 1, !tbaa !2452
  %1554 = extractelement <2 x i32> %1546, i32 1
  store i32 %1554, i32* %4853, align 1, !tbaa !2452
  %1555 = load <2 x float>, <2 x float>* %4854, align 1
  %1556 = load <2 x i32>, <2 x i32>* %4855, align 1
  %1557 = load <2 x float>, <2 x float>* %4849, align 1
  %1558 = extractelement <2 x float> %1555, i32 0
  %1559 = extractelement <2 x float> %1557, i32 0
  %1560 = fadd float %1558, %1559
  store float %1560, float* %4834, align 1, !tbaa !2452
  %1561 = bitcast <2 x float> %1555 to <2 x i32>
  %1562 = extractelement <2 x i32> %1561, i32 1
  store i32 %1562, i32* %4856, align 1, !tbaa !2452
  %1563 = extractelement <2 x i32> %1556, i32 0
  store i32 %1563, i32* %4857, align 1, !tbaa !2452
  %1564 = extractelement <2 x i32> %1556, i32 1
  store i32 %1564, i32* %4858, align 1, !tbaa !2452
  %1565 = load i64, i64* %RBP, align 8
  %1566 = add i64 %1565, -32
  %1567 = add i64 %3376, 409
  store i64 %1567, i64* %PC, align 8
  %1568 = inttoptr i64 %1566 to i64*
  %1569 = load i64, i64* %1568, align 8
  store i64 %1569, i64* %RAX, align 8, !tbaa !2428
  %1570 = add i64 %1565, -44
  %1571 = add i64 %3376, 412
  store i64 %1571, i64* %PC, align 8
  %1572 = inttoptr i64 %1570 to i32*
  %1573 = load i32, i32* %1572, align 4
  %1574 = add i32 %1573, -7
  %1575 = zext i32 %1574 to i64
  store i64 %1575, i64* %RDX, align 8, !tbaa !2428
  %1576 = icmp ult i32 %1573, 7
  %1577 = zext i1 %1576 to i8
  store i8 %1577, i8* %.pre-phi, align 1, !tbaa !2432
  %1578 = and i32 %1574, 255
  %1579 = tail call i32 @llvm.ctpop.i32(i32 %1578) #8
  %1580 = trunc i32 %1579 to i8
  %1581 = and i8 %1580, 1
  %1582 = xor i8 %1581, 1
  store i8 %1582, i8* %.pre-phi23, align 1, !tbaa !2446
  %1583 = xor i32 %1573, %1574
  %1584 = lshr i32 %1583, 4
  %1585 = trunc i32 %1584 to i8
  %1586 = and i8 %1585, 1
  store i8 %1586, i8* %.pre-phi25, align 1, !tbaa !2450
  %1587 = icmp eq i32 %1574, 0
  %1588 = zext i1 %1587 to i8
  store i8 %1588, i8* %.pre-phi27, align 1, !tbaa !2447
  %1589 = lshr i32 %1574, 31
  %1590 = trunc i32 %1589 to i8
  store i8 %1590, i8* %.pre-phi29, align 1, !tbaa !2448
  %1591 = lshr i32 %1573, 31
  %1592 = xor i32 %1589, %1591
  %1593 = add nuw nsw i32 %1592, %1591
  %1594 = icmp eq i32 %1593, 2
  %1595 = zext i1 %1594 to i8
  store i8 %1595, i8* %.pre-phi31, align 1, !tbaa !2449
  %1596 = sext i32 %1574 to i64
  store i64 %1596, i64* %RCX, align 8, !tbaa !2428
  %1597 = shl nsw i64 %1596, 2
  %1598 = add i64 %1597, %1569
  %1599 = add i64 %3376, 423
  store i64 %1599, i64* %PC, align 8
  %1600 = inttoptr i64 %1598 to i32*
  %1601 = load i32, i32* %1600, align 4
  store i32 %1601, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1602 = add i64 %1565, -40
  %1603 = add i64 %3376, 427
  store i64 %1603, i64* %PC, align 8
  %1604 = inttoptr i64 %1602 to i64*
  %1605 = load i64, i64* %1604, align 8
  store i64 %1605, i64* %RAX, align 8, !tbaa !2428
  %1606 = add i64 %1565, -24
  %1607 = add i64 %3376, 430
  store i64 %1607, i64* %PC, align 8
  %1608 = inttoptr i64 %1606 to i32*
  %1609 = load i32, i32* %1608, align 4
  %1610 = zext i32 %1609 to i64
  store i64 %1610, i64* %RDX, align 8, !tbaa !2428
  %1611 = add i64 %3376, 433
  store i64 %1611, i64* %PC, align 8
  %1612 = load i32, i32* %1572, align 4
  %1613 = add i32 %1612, -7
  %1614 = zext i32 %1613 to i64
  store i64 %1614, i64* %RSI, align 8, !tbaa !2428
  %1615 = sext i32 %1609 to i64
  %1616 = sext i32 %1613 to i64
  %1617 = mul nsw i64 %1616, %1615
  %1618 = trunc i64 %1617 to i32
  %1619 = and i64 %1617, 4294967295
  store i64 %1619, i64* %RDX, align 8, !tbaa !2428
  %1620 = shl i64 %1617, 32
  %1621 = ashr exact i64 %1620, 32
  %1622 = icmp ne i64 %1621, %1617
  %1623 = zext i1 %1622 to i8
  store i8 %1623, i8* %.pre-phi, align 1, !tbaa !2432
  %1624 = and i32 %1618, 255
  %1625 = tail call i32 @llvm.ctpop.i32(i32 %1624) #8
  %1626 = trunc i32 %1625 to i8
  %1627 = and i8 %1626, 1
  %1628 = xor i8 %1627, 1
  store i8 %1628, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1629 = lshr i32 %1618, 31
  %1630 = trunc i32 %1629 to i8
  store i8 %1630, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1623, i8* %.pre-phi31, align 1, !tbaa !2449
  %1631 = add i64 %1565, -48
  %1632 = add i64 %3376, 442
  store i64 %1632, i64* %PC, align 8
  %1633 = inttoptr i64 %1631 to i32*
  %1634 = load i32, i32* %1633, align 4
  %1635 = add i32 %1634, %1618
  %1636 = zext i32 %1635 to i64
  store i64 %1636, i64* %RDX, align 8, !tbaa !2428
  %1637 = icmp ult i32 %1635, %1618
  %1638 = icmp ult i32 %1635, %1634
  %1639 = or i1 %1637, %1638
  %1640 = zext i1 %1639 to i8
  store i8 %1640, i8* %.pre-phi, align 1, !tbaa !2432
  %1641 = and i32 %1635, 255
  %1642 = tail call i32 @llvm.ctpop.i32(i32 %1641) #8
  %1643 = trunc i32 %1642 to i8
  %1644 = and i8 %1643, 1
  %1645 = xor i8 %1644, 1
  store i8 %1645, i8* %.pre-phi23, align 1, !tbaa !2446
  %1646 = xor i32 %1634, %1618
  %1647 = xor i32 %1646, %1635
  %1648 = lshr i32 %1647, 4
  %1649 = trunc i32 %1648 to i8
  %1650 = and i8 %1649, 1
  store i8 %1650, i8* %.pre-phi25, align 1, !tbaa !2450
  %1651 = icmp eq i32 %1635, 0
  %1652 = zext i1 %1651 to i8
  store i8 %1652, i8* %.pre-phi27, align 1, !tbaa !2447
  %1653 = lshr i32 %1635, 31
  %1654 = trunc i32 %1653 to i8
  store i8 %1654, i8* %.pre-phi29, align 1, !tbaa !2448
  %1655 = lshr i32 %1634, 31
  %1656 = xor i32 %1653, %1629
  %1657 = xor i32 %1653, %1655
  %1658 = add nuw nsw i32 %1656, %1657
  %1659 = icmp eq i32 %1658, 2
  %1660 = zext i1 %1659 to i8
  store i8 %1660, i8* %.pre-phi31, align 1, !tbaa !2449
  %1661 = sext i32 %1635 to i64
  store i64 %1661, i64* %RCX, align 8, !tbaa !2428
  %1662 = shl nsw i64 %1661, 2
  %1663 = add i64 %1662, %1605
  %1664 = add i64 %3376, 450
  store i64 %1664, i64* %PC, align 8
  %1665 = load <2 x float>, <2 x float>* %4849, align 1
  %1666 = load <2 x i32>, <2 x i32>* %4850, align 1
  %1667 = inttoptr i64 %1663 to float*
  %1668 = load float, float* %1667, align 4
  %1669 = extractelement <2 x float> %1665, i32 0
  %1670 = fmul float %1669, %1668
  store float %1670, float* %4842, align 1, !tbaa !2452
  %1671 = bitcast <2 x float> %1665 to <2 x i32>
  %1672 = extractelement <2 x i32> %1671, i32 1
  store i32 %1672, i32* %4851, align 1, !tbaa !2452
  %1673 = extractelement <2 x i32> %1666, i32 0
  store i32 %1673, i32* %4852, align 1, !tbaa !2452
  %1674 = extractelement <2 x i32> %1666, i32 1
  store i32 %1674, i32* %4853, align 1, !tbaa !2452
  %1675 = load <2 x float>, <2 x float>* %4854, align 1
  %1676 = load <2 x i32>, <2 x i32>* %4855, align 1
  %1677 = load <2 x float>, <2 x float>* %4849, align 1
  %1678 = extractelement <2 x float> %1675, i32 0
  %1679 = extractelement <2 x float> %1677, i32 0
  %1680 = fadd float %1678, %1679
  store float %1680, float* %4834, align 1, !tbaa !2452
  %1681 = bitcast <2 x float> %1675 to <2 x i32>
  %1682 = extractelement <2 x i32> %1681, i32 1
  store i32 %1682, i32* %4856, align 1, !tbaa !2452
  %1683 = extractelement <2 x i32> %1676, i32 0
  store i32 %1683, i32* %4857, align 1, !tbaa !2452
  %1684 = extractelement <2 x i32> %1676, i32 1
  store i32 %1684, i32* %4858, align 1, !tbaa !2452
  %1685 = add i64 %3376, 458
  store i64 %1685, i64* %PC, align 8
  %1686 = load i64, i64* %1568, align 8
  store i64 %1686, i64* %RAX, align 8, !tbaa !2428
  %1687 = add i64 %3376, 461
  store i64 %1687, i64* %PC, align 8
  %1688 = load i32, i32* %1572, align 4
  %1689 = add i32 %1688, -6
  %1690 = zext i32 %1689 to i64
  store i64 %1690, i64* %RDX, align 8, !tbaa !2428
  %1691 = icmp ult i32 %1688, 6
  %1692 = zext i1 %1691 to i8
  store i8 %1692, i8* %.pre-phi, align 1, !tbaa !2432
  %1693 = and i32 %1689, 255
  %1694 = tail call i32 @llvm.ctpop.i32(i32 %1693) #8
  %1695 = trunc i32 %1694 to i8
  %1696 = and i8 %1695, 1
  %1697 = xor i8 %1696, 1
  store i8 %1697, i8* %.pre-phi23, align 1, !tbaa !2446
  %1698 = xor i32 %1688, %1689
  %1699 = lshr i32 %1698, 4
  %1700 = trunc i32 %1699 to i8
  %1701 = and i8 %1700, 1
  store i8 %1701, i8* %.pre-phi25, align 1, !tbaa !2450
  %1702 = icmp eq i32 %1689, 0
  %1703 = zext i1 %1702 to i8
  store i8 %1703, i8* %.pre-phi27, align 1, !tbaa !2447
  %1704 = lshr i32 %1689, 31
  %1705 = trunc i32 %1704 to i8
  store i8 %1705, i8* %.pre-phi29, align 1, !tbaa !2448
  %1706 = lshr i32 %1688, 31
  %1707 = xor i32 %1704, %1706
  %1708 = add nuw nsw i32 %1707, %1706
  %1709 = icmp eq i32 %1708, 2
  %1710 = zext i1 %1709 to i8
  store i8 %1710, i8* %.pre-phi31, align 1, !tbaa !2449
  %1711 = sext i32 %1689 to i64
  store i64 %1711, i64* %RCX, align 8, !tbaa !2428
  %1712 = shl nsw i64 %1711, 2
  %1713 = add i64 %1712, %1686
  %1714 = add i64 %3376, 472
  store i64 %1714, i64* %PC, align 8
  %1715 = inttoptr i64 %1713 to i32*
  %1716 = load i32, i32* %1715, align 4
  store i32 %1716, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1717 = load i64, i64* %RBP, align 8
  %1718 = add i64 %1717, -40
  %1719 = add i64 %3376, 476
  store i64 %1719, i64* %PC, align 8
  %1720 = inttoptr i64 %1718 to i64*
  %1721 = load i64, i64* %1720, align 8
  store i64 %1721, i64* %RAX, align 8, !tbaa !2428
  %1722 = add i64 %1717, -24
  %1723 = add i64 %3376, 479
  store i64 %1723, i64* %PC, align 8
  %1724 = inttoptr i64 %1722 to i32*
  %1725 = load i32, i32* %1724, align 4
  %1726 = zext i32 %1725 to i64
  store i64 %1726, i64* %RDX, align 8, !tbaa !2428
  %1727 = add i64 %1717, -44
  %1728 = add i64 %3376, 482
  store i64 %1728, i64* %PC, align 8
  %1729 = inttoptr i64 %1727 to i32*
  %1730 = load i32, i32* %1729, align 4
  %1731 = add i32 %1730, -6
  %1732 = zext i32 %1731 to i64
  store i64 %1732, i64* %RSI, align 8, !tbaa !2428
  %1733 = sext i32 %1725 to i64
  %1734 = sext i32 %1731 to i64
  %1735 = mul nsw i64 %1734, %1733
  %1736 = trunc i64 %1735 to i32
  %1737 = and i64 %1735, 4294967295
  store i64 %1737, i64* %RDX, align 8, !tbaa !2428
  %1738 = shl i64 %1735, 32
  %1739 = ashr exact i64 %1738, 32
  %1740 = icmp ne i64 %1739, %1735
  %1741 = zext i1 %1740 to i8
  store i8 %1741, i8* %.pre-phi, align 1, !tbaa !2432
  %1742 = and i32 %1736, 255
  %1743 = tail call i32 @llvm.ctpop.i32(i32 %1742) #8
  %1744 = trunc i32 %1743 to i8
  %1745 = and i8 %1744, 1
  %1746 = xor i8 %1745, 1
  store i8 %1746, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1747 = lshr i32 %1736, 31
  %1748 = trunc i32 %1747 to i8
  store i8 %1748, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1741, i8* %.pre-phi31, align 1, !tbaa !2449
  %1749 = add i64 %1717, -48
  %1750 = add i64 %3376, 491
  store i64 %1750, i64* %PC, align 8
  %1751 = inttoptr i64 %1749 to i32*
  %1752 = load i32, i32* %1751, align 4
  %1753 = add i32 %1752, %1736
  %1754 = zext i32 %1753 to i64
  store i64 %1754, i64* %RDX, align 8, !tbaa !2428
  %1755 = icmp ult i32 %1753, %1736
  %1756 = icmp ult i32 %1753, %1752
  %1757 = or i1 %1755, %1756
  %1758 = zext i1 %1757 to i8
  store i8 %1758, i8* %.pre-phi, align 1, !tbaa !2432
  %1759 = and i32 %1753, 255
  %1760 = tail call i32 @llvm.ctpop.i32(i32 %1759) #8
  %1761 = trunc i32 %1760 to i8
  %1762 = and i8 %1761, 1
  %1763 = xor i8 %1762, 1
  store i8 %1763, i8* %.pre-phi23, align 1, !tbaa !2446
  %1764 = xor i32 %1752, %1736
  %1765 = xor i32 %1764, %1753
  %1766 = lshr i32 %1765, 4
  %1767 = trunc i32 %1766 to i8
  %1768 = and i8 %1767, 1
  store i8 %1768, i8* %.pre-phi25, align 1, !tbaa !2450
  %1769 = icmp eq i32 %1753, 0
  %1770 = zext i1 %1769 to i8
  store i8 %1770, i8* %.pre-phi27, align 1, !tbaa !2447
  %1771 = lshr i32 %1753, 31
  %1772 = trunc i32 %1771 to i8
  store i8 %1772, i8* %.pre-phi29, align 1, !tbaa !2448
  %1773 = lshr i32 %1752, 31
  %1774 = xor i32 %1771, %1747
  %1775 = xor i32 %1771, %1773
  %1776 = add nuw nsw i32 %1774, %1775
  %1777 = icmp eq i32 %1776, 2
  %1778 = zext i1 %1777 to i8
  store i8 %1778, i8* %.pre-phi31, align 1, !tbaa !2449
  %1779 = sext i32 %1753 to i64
  store i64 %1779, i64* %RCX, align 8, !tbaa !2428
  %1780 = shl nsw i64 %1779, 2
  %1781 = add i64 %1780, %1721
  %1782 = add i64 %3376, 499
  store i64 %1782, i64* %PC, align 8
  %1783 = load <2 x float>, <2 x float>* %4849, align 1
  %1784 = load <2 x i32>, <2 x i32>* %4850, align 1
  %1785 = inttoptr i64 %1781 to float*
  %1786 = load float, float* %1785, align 4
  %1787 = extractelement <2 x float> %1783, i32 0
  %1788 = fmul float %1787, %1786
  store float %1788, float* %4842, align 1, !tbaa !2452
  %1789 = bitcast <2 x float> %1783 to <2 x i32>
  %1790 = extractelement <2 x i32> %1789, i32 1
  store i32 %1790, i32* %4851, align 1, !tbaa !2452
  %1791 = extractelement <2 x i32> %1784, i32 0
  store i32 %1791, i32* %4852, align 1, !tbaa !2452
  %1792 = extractelement <2 x i32> %1784, i32 1
  store i32 %1792, i32* %4853, align 1, !tbaa !2452
  %1793 = load <2 x float>, <2 x float>* %4854, align 1
  %1794 = load <2 x i32>, <2 x i32>* %4855, align 1
  %1795 = load <2 x float>, <2 x float>* %4849, align 1
  %1796 = extractelement <2 x float> %1793, i32 0
  %1797 = extractelement <2 x float> %1795, i32 0
  %1798 = fadd float %1796, %1797
  store float %1798, float* %4834, align 1, !tbaa !2452
  %1799 = bitcast <2 x float> %1793 to <2 x i32>
  %1800 = extractelement <2 x i32> %1799, i32 1
  store i32 %1800, i32* %4856, align 1, !tbaa !2452
  %1801 = extractelement <2 x i32> %1794, i32 0
  store i32 %1801, i32* %4857, align 1, !tbaa !2452
  %1802 = extractelement <2 x i32> %1794, i32 1
  store i32 %1802, i32* %4858, align 1, !tbaa !2452
  %1803 = load i64, i64* %RBP, align 8
  %1804 = add i64 %1803, -32
  %1805 = add i64 %3376, 507
  store i64 %1805, i64* %PC, align 8
  %1806 = inttoptr i64 %1804 to i64*
  %1807 = load i64, i64* %1806, align 8
  store i64 %1807, i64* %RAX, align 8, !tbaa !2428
  %1808 = add i64 %1803, -44
  %1809 = add i64 %3376, 510
  store i64 %1809, i64* %PC, align 8
  %1810 = inttoptr i64 %1808 to i32*
  %1811 = load i32, i32* %1810, align 4
  %1812 = add i32 %1811, -5
  %1813 = zext i32 %1812 to i64
  store i64 %1813, i64* %RDX, align 8, !tbaa !2428
  %1814 = icmp ult i32 %1811, 5
  %1815 = zext i1 %1814 to i8
  store i8 %1815, i8* %.pre-phi, align 1, !tbaa !2432
  %1816 = and i32 %1812, 255
  %1817 = tail call i32 @llvm.ctpop.i32(i32 %1816) #8
  %1818 = trunc i32 %1817 to i8
  %1819 = and i8 %1818, 1
  %1820 = xor i8 %1819, 1
  store i8 %1820, i8* %.pre-phi23, align 1, !tbaa !2446
  %1821 = xor i32 %1811, %1812
  %1822 = lshr i32 %1821, 4
  %1823 = trunc i32 %1822 to i8
  %1824 = and i8 %1823, 1
  store i8 %1824, i8* %.pre-phi25, align 1, !tbaa !2450
  %1825 = icmp eq i32 %1812, 0
  %1826 = zext i1 %1825 to i8
  store i8 %1826, i8* %.pre-phi27, align 1, !tbaa !2447
  %1827 = lshr i32 %1812, 31
  %1828 = trunc i32 %1827 to i8
  store i8 %1828, i8* %.pre-phi29, align 1, !tbaa !2448
  %1829 = lshr i32 %1811, 31
  %1830 = xor i32 %1827, %1829
  %1831 = add nuw nsw i32 %1830, %1829
  %1832 = icmp eq i32 %1831, 2
  %1833 = zext i1 %1832 to i8
  store i8 %1833, i8* %.pre-phi31, align 1, !tbaa !2449
  %1834 = sext i32 %1812 to i64
  store i64 %1834, i64* %RCX, align 8, !tbaa !2428
  %1835 = shl nsw i64 %1834, 2
  %1836 = add i64 %1835, %1807
  %1837 = add i64 %3376, 521
  store i64 %1837, i64* %PC, align 8
  %1838 = inttoptr i64 %1836 to i32*
  %1839 = load i32, i32* %1838, align 4
  store i32 %1839, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1840 = add i64 %1803, -40
  %1841 = add i64 %3376, 525
  store i64 %1841, i64* %PC, align 8
  %1842 = inttoptr i64 %1840 to i64*
  %1843 = load i64, i64* %1842, align 8
  store i64 %1843, i64* %RAX, align 8, !tbaa !2428
  %1844 = add i64 %1803, -24
  %1845 = add i64 %3376, 528
  store i64 %1845, i64* %PC, align 8
  %1846 = inttoptr i64 %1844 to i32*
  %1847 = load i32, i32* %1846, align 4
  %1848 = zext i32 %1847 to i64
  store i64 %1848, i64* %RDX, align 8, !tbaa !2428
  %1849 = add i64 %3376, 531
  store i64 %1849, i64* %PC, align 8
  %1850 = load i32, i32* %1810, align 4
  %1851 = add i32 %1850, -5
  %1852 = zext i32 %1851 to i64
  store i64 %1852, i64* %RSI, align 8, !tbaa !2428
  %1853 = sext i32 %1847 to i64
  %1854 = sext i32 %1851 to i64
  %1855 = mul nsw i64 %1854, %1853
  %1856 = trunc i64 %1855 to i32
  %1857 = and i64 %1855, 4294967295
  store i64 %1857, i64* %RDX, align 8, !tbaa !2428
  %1858 = shl i64 %1855, 32
  %1859 = ashr exact i64 %1858, 32
  %1860 = icmp ne i64 %1859, %1855
  %1861 = zext i1 %1860 to i8
  store i8 %1861, i8* %.pre-phi, align 1, !tbaa !2432
  %1862 = and i32 %1856, 255
  %1863 = tail call i32 @llvm.ctpop.i32(i32 %1862) #8
  %1864 = trunc i32 %1863 to i8
  %1865 = and i8 %1864, 1
  %1866 = xor i8 %1865, 1
  store i8 %1866, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1867 = lshr i32 %1856, 31
  %1868 = trunc i32 %1867 to i8
  store i8 %1868, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1861, i8* %.pre-phi31, align 1, !tbaa !2449
  %1869 = add i64 %1803, -48
  %1870 = add i64 %3376, 540
  store i64 %1870, i64* %PC, align 8
  %1871 = inttoptr i64 %1869 to i32*
  %1872 = load i32, i32* %1871, align 4
  %1873 = add i32 %1872, %1856
  %1874 = zext i32 %1873 to i64
  store i64 %1874, i64* %RDX, align 8, !tbaa !2428
  %1875 = icmp ult i32 %1873, %1856
  %1876 = icmp ult i32 %1873, %1872
  %1877 = or i1 %1875, %1876
  %1878 = zext i1 %1877 to i8
  store i8 %1878, i8* %.pre-phi, align 1, !tbaa !2432
  %1879 = and i32 %1873, 255
  %1880 = tail call i32 @llvm.ctpop.i32(i32 %1879) #8
  %1881 = trunc i32 %1880 to i8
  %1882 = and i8 %1881, 1
  %1883 = xor i8 %1882, 1
  store i8 %1883, i8* %.pre-phi23, align 1, !tbaa !2446
  %1884 = xor i32 %1872, %1856
  %1885 = xor i32 %1884, %1873
  %1886 = lshr i32 %1885, 4
  %1887 = trunc i32 %1886 to i8
  %1888 = and i8 %1887, 1
  store i8 %1888, i8* %.pre-phi25, align 1, !tbaa !2450
  %1889 = icmp eq i32 %1873, 0
  %1890 = zext i1 %1889 to i8
  store i8 %1890, i8* %.pre-phi27, align 1, !tbaa !2447
  %1891 = lshr i32 %1873, 31
  %1892 = trunc i32 %1891 to i8
  store i8 %1892, i8* %.pre-phi29, align 1, !tbaa !2448
  %1893 = lshr i32 %1872, 31
  %1894 = xor i32 %1891, %1867
  %1895 = xor i32 %1891, %1893
  %1896 = add nuw nsw i32 %1894, %1895
  %1897 = icmp eq i32 %1896, 2
  %1898 = zext i1 %1897 to i8
  store i8 %1898, i8* %.pre-phi31, align 1, !tbaa !2449
  %1899 = sext i32 %1873 to i64
  store i64 %1899, i64* %RCX, align 8, !tbaa !2428
  %1900 = shl nsw i64 %1899, 2
  %1901 = add i64 %1900, %1843
  %1902 = add i64 %3376, 548
  store i64 %1902, i64* %PC, align 8
  %1903 = load <2 x float>, <2 x float>* %4849, align 1
  %1904 = load <2 x i32>, <2 x i32>* %4850, align 1
  %1905 = inttoptr i64 %1901 to float*
  %1906 = load float, float* %1905, align 4
  %1907 = extractelement <2 x float> %1903, i32 0
  %1908 = fmul float %1907, %1906
  store float %1908, float* %4842, align 1, !tbaa !2452
  %1909 = bitcast <2 x float> %1903 to <2 x i32>
  %1910 = extractelement <2 x i32> %1909, i32 1
  store i32 %1910, i32* %4851, align 1, !tbaa !2452
  %1911 = extractelement <2 x i32> %1904, i32 0
  store i32 %1911, i32* %4852, align 1, !tbaa !2452
  %1912 = extractelement <2 x i32> %1904, i32 1
  store i32 %1912, i32* %4853, align 1, !tbaa !2452
  %1913 = load <2 x float>, <2 x float>* %4854, align 1
  %1914 = load <2 x i32>, <2 x i32>* %4855, align 1
  %1915 = load <2 x float>, <2 x float>* %4849, align 1
  %1916 = extractelement <2 x float> %1913, i32 0
  %1917 = extractelement <2 x float> %1915, i32 0
  %1918 = fadd float %1916, %1917
  store float %1918, float* %4834, align 1, !tbaa !2452
  %1919 = bitcast <2 x float> %1913 to <2 x i32>
  %1920 = extractelement <2 x i32> %1919, i32 1
  store i32 %1920, i32* %4856, align 1, !tbaa !2452
  %1921 = extractelement <2 x i32> %1914, i32 0
  store i32 %1921, i32* %4857, align 1, !tbaa !2452
  %1922 = extractelement <2 x i32> %1914, i32 1
  store i32 %1922, i32* %4858, align 1, !tbaa !2452
  %1923 = add i64 %3376, 556
  store i64 %1923, i64* %PC, align 8
  %1924 = load i64, i64* %1806, align 8
  store i64 %1924, i64* %RAX, align 8, !tbaa !2428
  %1925 = add i64 %3376, 559
  store i64 %1925, i64* %PC, align 8
  %1926 = load i32, i32* %1810, align 4
  %1927 = add i32 %1926, -4
  %1928 = zext i32 %1927 to i64
  store i64 %1928, i64* %RDX, align 8, !tbaa !2428
  %1929 = icmp ult i32 %1926, 4
  %1930 = zext i1 %1929 to i8
  store i8 %1930, i8* %.pre-phi, align 1, !tbaa !2432
  %1931 = and i32 %1927, 255
  %1932 = tail call i32 @llvm.ctpop.i32(i32 %1931) #8
  %1933 = trunc i32 %1932 to i8
  %1934 = and i8 %1933, 1
  %1935 = xor i8 %1934, 1
  store i8 %1935, i8* %.pre-phi23, align 1, !tbaa !2446
  %1936 = xor i32 %1926, %1927
  %1937 = lshr i32 %1936, 4
  %1938 = trunc i32 %1937 to i8
  %1939 = and i8 %1938, 1
  store i8 %1939, i8* %.pre-phi25, align 1, !tbaa !2450
  %1940 = icmp eq i32 %1927, 0
  %1941 = zext i1 %1940 to i8
  store i8 %1941, i8* %.pre-phi27, align 1, !tbaa !2447
  %1942 = lshr i32 %1927, 31
  %1943 = trunc i32 %1942 to i8
  store i8 %1943, i8* %.pre-phi29, align 1, !tbaa !2448
  %1944 = lshr i32 %1926, 31
  %1945 = xor i32 %1942, %1944
  %1946 = add nuw nsw i32 %1945, %1944
  %1947 = icmp eq i32 %1946, 2
  %1948 = zext i1 %1947 to i8
  store i8 %1948, i8* %.pre-phi31, align 1, !tbaa !2449
  %1949 = sext i32 %1927 to i64
  store i64 %1949, i64* %RCX, align 8, !tbaa !2428
  %1950 = shl nsw i64 %1949, 2
  %1951 = add i64 %1950, %1924
  %1952 = add i64 %3376, 570
  store i64 %1952, i64* %PC, align 8
  %1953 = inttoptr i64 %1951 to i32*
  %1954 = load i32, i32* %1953, align 4
  store i32 %1954, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %1955 = load i64, i64* %RBP, align 8
  %1956 = add i64 %1955, -40
  %1957 = add i64 %3376, 574
  store i64 %1957, i64* %PC, align 8
  %1958 = inttoptr i64 %1956 to i64*
  %1959 = load i64, i64* %1958, align 8
  store i64 %1959, i64* %RAX, align 8, !tbaa !2428
  %1960 = add i64 %1955, -24
  %1961 = add i64 %3376, 577
  store i64 %1961, i64* %PC, align 8
  %1962 = inttoptr i64 %1960 to i32*
  %1963 = load i32, i32* %1962, align 4
  %1964 = zext i32 %1963 to i64
  store i64 %1964, i64* %RDX, align 8, !tbaa !2428
  %1965 = add i64 %1955, -44
  %1966 = add i64 %3376, 580
  store i64 %1966, i64* %PC, align 8
  %1967 = inttoptr i64 %1965 to i32*
  %1968 = load i32, i32* %1967, align 4
  %1969 = add i32 %1968, -4
  %1970 = zext i32 %1969 to i64
  store i64 %1970, i64* %RSI, align 8, !tbaa !2428
  %1971 = sext i32 %1963 to i64
  %1972 = sext i32 %1969 to i64
  %1973 = mul nsw i64 %1972, %1971
  %1974 = trunc i64 %1973 to i32
  %1975 = and i64 %1973, 4294967295
  store i64 %1975, i64* %RDX, align 8, !tbaa !2428
  %1976 = shl i64 %1973, 32
  %1977 = ashr exact i64 %1976, 32
  %1978 = icmp ne i64 %1977, %1973
  %1979 = zext i1 %1978 to i8
  store i8 %1979, i8* %.pre-phi, align 1, !tbaa !2432
  %1980 = and i32 %1974, 255
  %1981 = tail call i32 @llvm.ctpop.i32(i32 %1980) #8
  %1982 = trunc i32 %1981 to i8
  %1983 = and i8 %1982, 1
  %1984 = xor i8 %1983, 1
  store i8 %1984, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1985 = lshr i32 %1974, 31
  %1986 = trunc i32 %1985 to i8
  store i8 %1986, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1979, i8* %.pre-phi31, align 1, !tbaa !2449
  %1987 = add i64 %1955, -48
  %1988 = add i64 %3376, 589
  store i64 %1988, i64* %PC, align 8
  %1989 = inttoptr i64 %1987 to i32*
  %1990 = load i32, i32* %1989, align 4
  %1991 = add i32 %1990, %1974
  %1992 = zext i32 %1991 to i64
  store i64 %1992, i64* %RDX, align 8, !tbaa !2428
  %1993 = icmp ult i32 %1991, %1974
  %1994 = icmp ult i32 %1991, %1990
  %1995 = or i1 %1993, %1994
  %1996 = zext i1 %1995 to i8
  store i8 %1996, i8* %.pre-phi, align 1, !tbaa !2432
  %1997 = and i32 %1991, 255
  %1998 = tail call i32 @llvm.ctpop.i32(i32 %1997) #8
  %1999 = trunc i32 %1998 to i8
  %2000 = and i8 %1999, 1
  %2001 = xor i8 %2000, 1
  store i8 %2001, i8* %.pre-phi23, align 1, !tbaa !2446
  %2002 = xor i32 %1990, %1974
  %2003 = xor i32 %2002, %1991
  %2004 = lshr i32 %2003, 4
  %2005 = trunc i32 %2004 to i8
  %2006 = and i8 %2005, 1
  store i8 %2006, i8* %.pre-phi25, align 1, !tbaa !2450
  %2007 = icmp eq i32 %1991, 0
  %2008 = zext i1 %2007 to i8
  store i8 %2008, i8* %.pre-phi27, align 1, !tbaa !2447
  %2009 = lshr i32 %1991, 31
  %2010 = trunc i32 %2009 to i8
  store i8 %2010, i8* %.pre-phi29, align 1, !tbaa !2448
  %2011 = lshr i32 %1990, 31
  %2012 = xor i32 %2009, %1985
  %2013 = xor i32 %2009, %2011
  %2014 = add nuw nsw i32 %2012, %2013
  %2015 = icmp eq i32 %2014, 2
  %2016 = zext i1 %2015 to i8
  store i8 %2016, i8* %.pre-phi31, align 1, !tbaa !2449
  %2017 = sext i32 %1991 to i64
  store i64 %2017, i64* %RCX, align 8, !tbaa !2428
  %2018 = shl nsw i64 %2017, 2
  %2019 = add i64 %2018, %1959
  %2020 = add i64 %3376, 597
  store i64 %2020, i64* %PC, align 8
  %2021 = load <2 x float>, <2 x float>* %4849, align 1
  %2022 = load <2 x i32>, <2 x i32>* %4850, align 1
  %2023 = inttoptr i64 %2019 to float*
  %2024 = load float, float* %2023, align 4
  %2025 = extractelement <2 x float> %2021, i32 0
  %2026 = fmul float %2025, %2024
  store float %2026, float* %4842, align 1, !tbaa !2452
  %2027 = bitcast <2 x float> %2021 to <2 x i32>
  %2028 = extractelement <2 x i32> %2027, i32 1
  store i32 %2028, i32* %4851, align 1, !tbaa !2452
  %2029 = extractelement <2 x i32> %2022, i32 0
  store i32 %2029, i32* %4852, align 1, !tbaa !2452
  %2030 = extractelement <2 x i32> %2022, i32 1
  store i32 %2030, i32* %4853, align 1, !tbaa !2452
  %2031 = load <2 x float>, <2 x float>* %4854, align 1
  %2032 = load <2 x i32>, <2 x i32>* %4855, align 1
  %2033 = load <2 x float>, <2 x float>* %4849, align 1
  %2034 = extractelement <2 x float> %2031, i32 0
  %2035 = extractelement <2 x float> %2033, i32 0
  %2036 = fadd float %2034, %2035
  store float %2036, float* %4834, align 1, !tbaa !2452
  %2037 = bitcast <2 x float> %2031 to <2 x i32>
  %2038 = extractelement <2 x i32> %2037, i32 1
  store i32 %2038, i32* %4856, align 1, !tbaa !2452
  %2039 = extractelement <2 x i32> %2032, i32 0
  store i32 %2039, i32* %4857, align 1, !tbaa !2452
  %2040 = extractelement <2 x i32> %2032, i32 1
  store i32 %2040, i32* %4858, align 1, !tbaa !2452
  %2041 = load i64, i64* %RBP, align 8
  %2042 = add i64 %2041, -32
  %2043 = add i64 %3376, 605
  store i64 %2043, i64* %PC, align 8
  %2044 = inttoptr i64 %2042 to i64*
  %2045 = load i64, i64* %2044, align 8
  store i64 %2045, i64* %RAX, align 8, !tbaa !2428
  %2046 = add i64 %2041, -44
  %2047 = add i64 %3376, 608
  store i64 %2047, i64* %PC, align 8
  %2048 = inttoptr i64 %2046 to i32*
  %2049 = load i32, i32* %2048, align 4
  %2050 = add i32 %2049, -3
  %2051 = zext i32 %2050 to i64
  store i64 %2051, i64* %RDX, align 8, !tbaa !2428
  %2052 = icmp ult i32 %2049, 3
  %2053 = zext i1 %2052 to i8
  store i8 %2053, i8* %.pre-phi, align 1, !tbaa !2432
  %2054 = and i32 %2050, 255
  %2055 = tail call i32 @llvm.ctpop.i32(i32 %2054) #8
  %2056 = trunc i32 %2055 to i8
  %2057 = and i8 %2056, 1
  %2058 = xor i8 %2057, 1
  store i8 %2058, i8* %.pre-phi23, align 1, !tbaa !2446
  %2059 = xor i32 %2049, %2050
  %2060 = lshr i32 %2059, 4
  %2061 = trunc i32 %2060 to i8
  %2062 = and i8 %2061, 1
  store i8 %2062, i8* %.pre-phi25, align 1, !tbaa !2450
  %2063 = icmp eq i32 %2050, 0
  %2064 = zext i1 %2063 to i8
  store i8 %2064, i8* %.pre-phi27, align 1, !tbaa !2447
  %2065 = lshr i32 %2050, 31
  %2066 = trunc i32 %2065 to i8
  store i8 %2066, i8* %.pre-phi29, align 1, !tbaa !2448
  %2067 = lshr i32 %2049, 31
  %2068 = xor i32 %2065, %2067
  %2069 = add nuw nsw i32 %2068, %2067
  %2070 = icmp eq i32 %2069, 2
  %2071 = zext i1 %2070 to i8
  store i8 %2071, i8* %.pre-phi31, align 1, !tbaa !2449
  %2072 = sext i32 %2050 to i64
  store i64 %2072, i64* %RCX, align 8, !tbaa !2428
  %2073 = shl nsw i64 %2072, 2
  %2074 = add i64 %2073, %2045
  %2075 = add i64 %3376, 619
  store i64 %2075, i64* %PC, align 8
  %2076 = inttoptr i64 %2074 to i32*
  %2077 = load i32, i32* %2076, align 4
  store i32 %2077, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %2078 = add i64 %2041, -40
  %2079 = add i64 %3376, 623
  store i64 %2079, i64* %PC, align 8
  %2080 = inttoptr i64 %2078 to i64*
  %2081 = load i64, i64* %2080, align 8
  store i64 %2081, i64* %RAX, align 8, !tbaa !2428
  %2082 = add i64 %2041, -24
  %2083 = add i64 %3376, 626
  store i64 %2083, i64* %PC, align 8
  %2084 = inttoptr i64 %2082 to i32*
  %2085 = load i32, i32* %2084, align 4
  %2086 = zext i32 %2085 to i64
  store i64 %2086, i64* %RDX, align 8, !tbaa !2428
  %2087 = add i64 %3376, 629
  store i64 %2087, i64* %PC, align 8
  %2088 = load i32, i32* %2048, align 4
  %2089 = add i32 %2088, -3
  %2090 = zext i32 %2089 to i64
  store i64 %2090, i64* %RSI, align 8, !tbaa !2428
  %2091 = sext i32 %2085 to i64
  %2092 = sext i32 %2089 to i64
  %2093 = mul nsw i64 %2092, %2091
  %2094 = trunc i64 %2093 to i32
  %2095 = and i64 %2093, 4294967295
  store i64 %2095, i64* %RDX, align 8, !tbaa !2428
  %2096 = shl i64 %2093, 32
  %2097 = ashr exact i64 %2096, 32
  %2098 = icmp ne i64 %2097, %2093
  %2099 = zext i1 %2098 to i8
  store i8 %2099, i8* %.pre-phi, align 1, !tbaa !2432
  %2100 = and i32 %2094, 255
  %2101 = tail call i32 @llvm.ctpop.i32(i32 %2100) #8
  %2102 = trunc i32 %2101 to i8
  %2103 = and i8 %2102, 1
  %2104 = xor i8 %2103, 1
  store i8 %2104, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2105 = lshr i32 %2094, 31
  %2106 = trunc i32 %2105 to i8
  store i8 %2106, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2099, i8* %.pre-phi31, align 1, !tbaa !2449
  %2107 = add i64 %2041, -48
  %2108 = add i64 %3376, 638
  store i64 %2108, i64* %PC, align 8
  %2109 = inttoptr i64 %2107 to i32*
  %2110 = load i32, i32* %2109, align 4
  %2111 = add i32 %2110, %2094
  %2112 = zext i32 %2111 to i64
  store i64 %2112, i64* %RDX, align 8, !tbaa !2428
  %2113 = icmp ult i32 %2111, %2094
  %2114 = icmp ult i32 %2111, %2110
  %2115 = or i1 %2113, %2114
  %2116 = zext i1 %2115 to i8
  store i8 %2116, i8* %.pre-phi, align 1, !tbaa !2432
  %2117 = and i32 %2111, 255
  %2118 = tail call i32 @llvm.ctpop.i32(i32 %2117) #8
  %2119 = trunc i32 %2118 to i8
  %2120 = and i8 %2119, 1
  %2121 = xor i8 %2120, 1
  store i8 %2121, i8* %.pre-phi23, align 1, !tbaa !2446
  %2122 = xor i32 %2110, %2094
  %2123 = xor i32 %2122, %2111
  %2124 = lshr i32 %2123, 4
  %2125 = trunc i32 %2124 to i8
  %2126 = and i8 %2125, 1
  store i8 %2126, i8* %.pre-phi25, align 1, !tbaa !2450
  %2127 = icmp eq i32 %2111, 0
  %2128 = zext i1 %2127 to i8
  store i8 %2128, i8* %.pre-phi27, align 1, !tbaa !2447
  %2129 = lshr i32 %2111, 31
  %2130 = trunc i32 %2129 to i8
  store i8 %2130, i8* %.pre-phi29, align 1, !tbaa !2448
  %2131 = lshr i32 %2110, 31
  %2132 = xor i32 %2129, %2105
  %2133 = xor i32 %2129, %2131
  %2134 = add nuw nsw i32 %2132, %2133
  %2135 = icmp eq i32 %2134, 2
  %2136 = zext i1 %2135 to i8
  store i8 %2136, i8* %.pre-phi31, align 1, !tbaa !2449
  %2137 = sext i32 %2111 to i64
  store i64 %2137, i64* %RCX, align 8, !tbaa !2428
  %2138 = shl nsw i64 %2137, 2
  %2139 = add i64 %2138, %2081
  %2140 = add i64 %3376, 646
  store i64 %2140, i64* %PC, align 8
  %2141 = load <2 x float>, <2 x float>* %4849, align 1
  %2142 = load <2 x i32>, <2 x i32>* %4850, align 1
  %2143 = inttoptr i64 %2139 to float*
  %2144 = load float, float* %2143, align 4
  %2145 = extractelement <2 x float> %2141, i32 0
  %2146 = fmul float %2145, %2144
  store float %2146, float* %4842, align 1, !tbaa !2452
  %2147 = bitcast <2 x float> %2141 to <2 x i32>
  %2148 = extractelement <2 x i32> %2147, i32 1
  store i32 %2148, i32* %4851, align 1, !tbaa !2452
  %2149 = extractelement <2 x i32> %2142, i32 0
  store i32 %2149, i32* %4852, align 1, !tbaa !2452
  %2150 = extractelement <2 x i32> %2142, i32 1
  store i32 %2150, i32* %4853, align 1, !tbaa !2452
  %2151 = load <2 x float>, <2 x float>* %4854, align 1
  %2152 = load <2 x i32>, <2 x i32>* %4855, align 1
  %2153 = load <2 x float>, <2 x float>* %4849, align 1
  %2154 = extractelement <2 x float> %2151, i32 0
  %2155 = extractelement <2 x float> %2153, i32 0
  %2156 = fadd float %2154, %2155
  store float %2156, float* %4834, align 1, !tbaa !2452
  %2157 = bitcast <2 x float> %2151 to <2 x i32>
  %2158 = extractelement <2 x i32> %2157, i32 1
  store i32 %2158, i32* %4856, align 1, !tbaa !2452
  %2159 = extractelement <2 x i32> %2152, i32 0
  store i32 %2159, i32* %4857, align 1, !tbaa !2452
  %2160 = extractelement <2 x i32> %2152, i32 1
  store i32 %2160, i32* %4858, align 1, !tbaa !2452
  %2161 = add i64 %3376, 654
  store i64 %2161, i64* %PC, align 8
  %2162 = load i64, i64* %2044, align 8
  store i64 %2162, i64* %RAX, align 8, !tbaa !2428
  %2163 = add i64 %3376, 657
  store i64 %2163, i64* %PC, align 8
  %2164 = load i32, i32* %2048, align 4
  %2165 = add i32 %2164, -2
  %2166 = zext i32 %2165 to i64
  store i64 %2166, i64* %RDX, align 8, !tbaa !2428
  %2167 = icmp ult i32 %2164, 2
  %2168 = zext i1 %2167 to i8
  store i8 %2168, i8* %.pre-phi, align 1, !tbaa !2432
  %2169 = and i32 %2165, 255
  %2170 = tail call i32 @llvm.ctpop.i32(i32 %2169) #8
  %2171 = trunc i32 %2170 to i8
  %2172 = and i8 %2171, 1
  %2173 = xor i8 %2172, 1
  store i8 %2173, i8* %.pre-phi23, align 1, !tbaa !2446
  %2174 = xor i32 %2164, %2165
  %2175 = lshr i32 %2174, 4
  %2176 = trunc i32 %2175 to i8
  %2177 = and i8 %2176, 1
  store i8 %2177, i8* %.pre-phi25, align 1, !tbaa !2450
  %2178 = icmp eq i32 %2165, 0
  %2179 = zext i1 %2178 to i8
  store i8 %2179, i8* %.pre-phi27, align 1, !tbaa !2447
  %2180 = lshr i32 %2165, 31
  %2181 = trunc i32 %2180 to i8
  store i8 %2181, i8* %.pre-phi29, align 1, !tbaa !2448
  %2182 = lshr i32 %2164, 31
  %2183 = xor i32 %2180, %2182
  %2184 = add nuw nsw i32 %2183, %2182
  %2185 = icmp eq i32 %2184, 2
  %2186 = zext i1 %2185 to i8
  store i8 %2186, i8* %.pre-phi31, align 1, !tbaa !2449
  %2187 = sext i32 %2165 to i64
  store i64 %2187, i64* %RCX, align 8, !tbaa !2428
  %2188 = shl nsw i64 %2187, 2
  %2189 = add i64 %2188, %2162
  %2190 = add i64 %3376, 668
  store i64 %2190, i64* %PC, align 8
  %2191 = inttoptr i64 %2189 to i32*
  %2192 = load i32, i32* %2191, align 4
  store i32 %2192, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %2193 = load i64, i64* %RBP, align 8
  %2194 = add i64 %2193, -40
  %2195 = add i64 %3376, 672
  store i64 %2195, i64* %PC, align 8
  %2196 = inttoptr i64 %2194 to i64*
  %2197 = load i64, i64* %2196, align 8
  store i64 %2197, i64* %RAX, align 8, !tbaa !2428
  %2198 = add i64 %2193, -24
  %2199 = add i64 %3376, 675
  store i64 %2199, i64* %PC, align 8
  %2200 = inttoptr i64 %2198 to i32*
  %2201 = load i32, i32* %2200, align 4
  %2202 = zext i32 %2201 to i64
  store i64 %2202, i64* %RDX, align 8, !tbaa !2428
  %2203 = add i64 %2193, -44
  %2204 = add i64 %3376, 678
  store i64 %2204, i64* %PC, align 8
  %2205 = inttoptr i64 %2203 to i32*
  %2206 = load i32, i32* %2205, align 4
  %2207 = add i32 %2206, -2
  %2208 = zext i32 %2207 to i64
  store i64 %2208, i64* %RSI, align 8, !tbaa !2428
  %2209 = sext i32 %2201 to i64
  %2210 = sext i32 %2207 to i64
  %2211 = mul nsw i64 %2210, %2209
  %2212 = trunc i64 %2211 to i32
  %2213 = and i64 %2211, 4294967295
  store i64 %2213, i64* %RDX, align 8, !tbaa !2428
  %2214 = shl i64 %2211, 32
  %2215 = ashr exact i64 %2214, 32
  %2216 = icmp ne i64 %2215, %2211
  %2217 = zext i1 %2216 to i8
  store i8 %2217, i8* %.pre-phi, align 1, !tbaa !2432
  %2218 = and i32 %2212, 255
  %2219 = tail call i32 @llvm.ctpop.i32(i32 %2218) #8
  %2220 = trunc i32 %2219 to i8
  %2221 = and i8 %2220, 1
  %2222 = xor i8 %2221, 1
  store i8 %2222, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2223 = lshr i32 %2212, 31
  %2224 = trunc i32 %2223 to i8
  store i8 %2224, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2217, i8* %.pre-phi31, align 1, !tbaa !2449
  %2225 = add i64 %2193, -48
  %2226 = add i64 %3376, 687
  store i64 %2226, i64* %PC, align 8
  %2227 = inttoptr i64 %2225 to i32*
  %2228 = load i32, i32* %2227, align 4
  %2229 = add i32 %2228, %2212
  %2230 = zext i32 %2229 to i64
  store i64 %2230, i64* %RDX, align 8, !tbaa !2428
  %2231 = icmp ult i32 %2229, %2212
  %2232 = icmp ult i32 %2229, %2228
  %2233 = or i1 %2231, %2232
  %2234 = zext i1 %2233 to i8
  store i8 %2234, i8* %.pre-phi, align 1, !tbaa !2432
  %2235 = and i32 %2229, 255
  %2236 = tail call i32 @llvm.ctpop.i32(i32 %2235) #8
  %2237 = trunc i32 %2236 to i8
  %2238 = and i8 %2237, 1
  %2239 = xor i8 %2238, 1
  store i8 %2239, i8* %.pre-phi23, align 1, !tbaa !2446
  %2240 = xor i32 %2228, %2212
  %2241 = xor i32 %2240, %2229
  %2242 = lshr i32 %2241, 4
  %2243 = trunc i32 %2242 to i8
  %2244 = and i8 %2243, 1
  store i8 %2244, i8* %.pre-phi25, align 1, !tbaa !2450
  %2245 = icmp eq i32 %2229, 0
  %2246 = zext i1 %2245 to i8
  store i8 %2246, i8* %.pre-phi27, align 1, !tbaa !2447
  %2247 = lshr i32 %2229, 31
  %2248 = trunc i32 %2247 to i8
  store i8 %2248, i8* %.pre-phi29, align 1, !tbaa !2448
  %2249 = lshr i32 %2228, 31
  %2250 = xor i32 %2247, %2223
  %2251 = xor i32 %2247, %2249
  %2252 = add nuw nsw i32 %2250, %2251
  %2253 = icmp eq i32 %2252, 2
  %2254 = zext i1 %2253 to i8
  store i8 %2254, i8* %.pre-phi31, align 1, !tbaa !2449
  %2255 = sext i32 %2229 to i64
  store i64 %2255, i64* %RCX, align 8, !tbaa !2428
  %2256 = shl nsw i64 %2255, 2
  %2257 = add i64 %2256, %2197
  %2258 = add i64 %3376, 695
  store i64 %2258, i64* %PC, align 8
  %2259 = load <2 x float>, <2 x float>* %4849, align 1
  %2260 = load <2 x i32>, <2 x i32>* %4850, align 1
  %2261 = inttoptr i64 %2257 to float*
  %2262 = load float, float* %2261, align 4
  %2263 = extractelement <2 x float> %2259, i32 0
  %2264 = fmul float %2263, %2262
  store float %2264, float* %4842, align 1, !tbaa !2452
  %2265 = bitcast <2 x float> %2259 to <2 x i32>
  %2266 = extractelement <2 x i32> %2265, i32 1
  store i32 %2266, i32* %4851, align 1, !tbaa !2452
  %2267 = extractelement <2 x i32> %2260, i32 0
  store i32 %2267, i32* %4852, align 1, !tbaa !2452
  %2268 = extractelement <2 x i32> %2260, i32 1
  store i32 %2268, i32* %4853, align 1, !tbaa !2452
  %2269 = load <2 x float>, <2 x float>* %4854, align 1
  %2270 = load <2 x i32>, <2 x i32>* %4855, align 1
  %2271 = load <2 x float>, <2 x float>* %4849, align 1
  %2272 = extractelement <2 x float> %2269, i32 0
  %2273 = extractelement <2 x float> %2271, i32 0
  %2274 = fadd float %2272, %2273
  store float %2274, float* %4834, align 1, !tbaa !2452
  %2275 = bitcast <2 x float> %2269 to <2 x i32>
  %2276 = extractelement <2 x i32> %2275, i32 1
  store i32 %2276, i32* %4856, align 1, !tbaa !2452
  %2277 = extractelement <2 x i32> %2270, i32 0
  store i32 %2277, i32* %4857, align 1, !tbaa !2452
  %2278 = extractelement <2 x i32> %2270, i32 1
  store i32 %2278, i32* %4858, align 1, !tbaa !2452
  %2279 = load i64, i64* %RBP, align 8
  %2280 = add i64 %2279, -32
  %2281 = add i64 %3376, 703
  store i64 %2281, i64* %PC, align 8
  %2282 = inttoptr i64 %2280 to i64*
  %2283 = load i64, i64* %2282, align 8
  store i64 %2283, i64* %RAX, align 8, !tbaa !2428
  %2284 = add i64 %2279, -44
  %2285 = add i64 %3376, 706
  store i64 %2285, i64* %PC, align 8
  %2286 = inttoptr i64 %2284 to i32*
  %2287 = load i32, i32* %2286, align 4
  %2288 = add i32 %2287, -1
  %2289 = zext i32 %2288 to i64
  store i64 %2289, i64* %RDX, align 8, !tbaa !2428
  %2290 = icmp eq i32 %2287, 0
  %2291 = zext i1 %2290 to i8
  store i8 %2291, i8* %.pre-phi, align 1, !tbaa !2432
  %2292 = and i32 %2288, 255
  %2293 = tail call i32 @llvm.ctpop.i32(i32 %2292) #8
  %2294 = trunc i32 %2293 to i8
  %2295 = and i8 %2294, 1
  %2296 = xor i8 %2295, 1
  store i8 %2296, i8* %.pre-phi23, align 1, !tbaa !2446
  %2297 = xor i32 %2287, %2288
  %2298 = lshr i32 %2297, 4
  %2299 = trunc i32 %2298 to i8
  %2300 = and i8 %2299, 1
  store i8 %2300, i8* %.pre-phi25, align 1, !tbaa !2450
  %2301 = icmp eq i32 %2288, 0
  %2302 = zext i1 %2301 to i8
  store i8 %2302, i8* %.pre-phi27, align 1, !tbaa !2447
  %2303 = lshr i32 %2288, 31
  %2304 = trunc i32 %2303 to i8
  store i8 %2304, i8* %.pre-phi29, align 1, !tbaa !2448
  %2305 = lshr i32 %2287, 31
  %2306 = xor i32 %2303, %2305
  %2307 = add nuw nsw i32 %2306, %2305
  %2308 = icmp eq i32 %2307, 2
  %2309 = zext i1 %2308 to i8
  store i8 %2309, i8* %.pre-phi31, align 1, !tbaa !2449
  %2310 = sext i32 %2288 to i64
  store i64 %2310, i64* %RCX, align 8, !tbaa !2428
  %2311 = shl nsw i64 %2310, 2
  %2312 = add i64 %2311, %2283
  %2313 = add i64 %3376, 717
  store i64 %2313, i64* %PC, align 8
  %2314 = inttoptr i64 %2312 to i32*
  %2315 = load i32, i32* %2314, align 4
  store i32 %2315, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %2316 = add i64 %2279, -40
  %2317 = add i64 %3376, 721
  store i64 %2317, i64* %PC, align 8
  %2318 = inttoptr i64 %2316 to i64*
  %2319 = load i64, i64* %2318, align 8
  store i64 %2319, i64* %RAX, align 8, !tbaa !2428
  %2320 = add i64 %2279, -24
  %2321 = add i64 %3376, 724
  store i64 %2321, i64* %PC, align 8
  %2322 = inttoptr i64 %2320 to i32*
  %2323 = load i32, i32* %2322, align 4
  %2324 = zext i32 %2323 to i64
  store i64 %2324, i64* %RDX, align 8, !tbaa !2428
  %2325 = add i64 %3376, 727
  store i64 %2325, i64* %PC, align 8
  %2326 = load i32, i32* %2286, align 4
  %2327 = add i32 %2326, -1
  %2328 = zext i32 %2327 to i64
  store i64 %2328, i64* %RSI, align 8, !tbaa !2428
  %2329 = sext i32 %2323 to i64
  %2330 = sext i32 %2327 to i64
  %2331 = mul nsw i64 %2330, %2329
  %2332 = trunc i64 %2331 to i32
  %2333 = and i64 %2331, 4294967295
  store i64 %2333, i64* %RDX, align 8, !tbaa !2428
  %2334 = shl i64 %2331, 32
  %2335 = ashr exact i64 %2334, 32
  %2336 = icmp ne i64 %2335, %2331
  %2337 = zext i1 %2336 to i8
  store i8 %2337, i8* %.pre-phi, align 1, !tbaa !2432
  %2338 = and i32 %2332, 255
  %2339 = tail call i32 @llvm.ctpop.i32(i32 %2338) #8
  %2340 = trunc i32 %2339 to i8
  %2341 = and i8 %2340, 1
  %2342 = xor i8 %2341, 1
  store i8 %2342, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2343 = lshr i32 %2332, 31
  %2344 = trunc i32 %2343 to i8
  store i8 %2344, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2337, i8* %.pre-phi31, align 1, !tbaa !2449
  %2345 = add i64 %2279, -48
  %2346 = add i64 %3376, 736
  store i64 %2346, i64* %PC, align 8
  %2347 = inttoptr i64 %2345 to i32*
  %2348 = load i32, i32* %2347, align 4
  %2349 = add i32 %2348, %2332
  %2350 = zext i32 %2349 to i64
  store i64 %2350, i64* %RDX, align 8, !tbaa !2428
  %2351 = icmp ult i32 %2349, %2332
  %2352 = icmp ult i32 %2349, %2348
  %2353 = or i1 %2351, %2352
  %2354 = zext i1 %2353 to i8
  store i8 %2354, i8* %.pre-phi, align 1, !tbaa !2432
  %2355 = and i32 %2349, 255
  %2356 = tail call i32 @llvm.ctpop.i32(i32 %2355) #8
  %2357 = trunc i32 %2356 to i8
  %2358 = and i8 %2357, 1
  %2359 = xor i8 %2358, 1
  store i8 %2359, i8* %.pre-phi23, align 1, !tbaa !2446
  %2360 = xor i32 %2348, %2332
  %2361 = xor i32 %2360, %2349
  %2362 = lshr i32 %2361, 4
  %2363 = trunc i32 %2362 to i8
  %2364 = and i8 %2363, 1
  store i8 %2364, i8* %.pre-phi25, align 1, !tbaa !2450
  %2365 = icmp eq i32 %2349, 0
  %2366 = zext i1 %2365 to i8
  store i8 %2366, i8* %.pre-phi27, align 1, !tbaa !2447
  %2367 = lshr i32 %2349, 31
  %2368 = trunc i32 %2367 to i8
  store i8 %2368, i8* %.pre-phi29, align 1, !tbaa !2448
  %2369 = lshr i32 %2348, 31
  %2370 = xor i32 %2367, %2343
  %2371 = xor i32 %2367, %2369
  %2372 = add nuw nsw i32 %2370, %2371
  %2373 = icmp eq i32 %2372, 2
  %2374 = zext i1 %2373 to i8
  store i8 %2374, i8* %.pre-phi31, align 1, !tbaa !2449
  %2375 = sext i32 %2349 to i64
  store i64 %2375, i64* %RCX, align 8, !tbaa !2428
  %2376 = shl nsw i64 %2375, 2
  %2377 = add i64 %2376, %2319
  %2378 = add i64 %3376, 744
  store i64 %2378, i64* %PC, align 8
  %2379 = load <2 x float>, <2 x float>* %4849, align 1
  %2380 = load <2 x i32>, <2 x i32>* %4850, align 1
  %2381 = inttoptr i64 %2377 to float*
  %2382 = load float, float* %2381, align 4
  %2383 = extractelement <2 x float> %2379, i32 0
  %2384 = fmul float %2383, %2382
  store float %2384, float* %4842, align 1, !tbaa !2452
  %2385 = bitcast <2 x float> %2379 to <2 x i32>
  %2386 = extractelement <2 x i32> %2385, i32 1
  store i32 %2386, i32* %4851, align 1, !tbaa !2452
  %2387 = extractelement <2 x i32> %2380, i32 0
  store i32 %2387, i32* %4852, align 1, !tbaa !2452
  %2388 = extractelement <2 x i32> %2380, i32 1
  store i32 %2388, i32* %4853, align 1, !tbaa !2452
  %2389 = load <2 x float>, <2 x float>* %4854, align 1
  %2390 = load <2 x i32>, <2 x i32>* %4855, align 1
  %2391 = load <2 x float>, <2 x float>* %4849, align 1
  %2392 = extractelement <2 x float> %2389, i32 0
  %2393 = extractelement <2 x float> %2391, i32 0
  %2394 = fadd float %2392, %2393
  store float %2394, float* %4834, align 1, !tbaa !2452
  %2395 = bitcast <2 x float> %2389 to <2 x i32>
  %2396 = extractelement <2 x i32> %2395, i32 1
  store i32 %2396, i32* %4856, align 1, !tbaa !2452
  %2397 = extractelement <2 x i32> %2390, i32 0
  store i32 %2397, i32* %4857, align 1, !tbaa !2452
  %2398 = extractelement <2 x i32> %2390, i32 1
  store i32 %2398, i32* %4858, align 1, !tbaa !2452
  %2399 = add i64 %3376, 752
  store i64 %2399, i64* %PC, align 8
  %2400 = load i64, i64* %2282, align 8
  store i64 %2400, i64* %RAX, align 8, !tbaa !2428
  %2401 = add i64 %3376, 756
  store i64 %2401, i64* %PC, align 8
  %2402 = load i32, i32* %2286, align 4
  %2403 = sext i32 %2402 to i64
  store i64 %2403, i64* %RCX, align 8, !tbaa !2428
  %2404 = shl nsw i64 %2403, 2
  %2405 = add i64 %2404, %2400
  %2406 = add i64 %3376, 761
  store i64 %2406, i64* %PC, align 8
  %2407 = inttoptr i64 %2405 to i32*
  %2408 = load i32, i32* %2407, align 4
  store i32 %2408, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4846, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4848, align 1, !tbaa !2452
  %2409 = load i64, i64* %RBP, align 8
  %2410 = add i64 %2409, -40
  %2411 = add i64 %3376, 765
  store i64 %2411, i64* %PC, align 8
  %2412 = inttoptr i64 %2410 to i64*
  %2413 = load i64, i64* %2412, align 8
  store i64 %2413, i64* %RAX, align 8, !tbaa !2428
  %2414 = add i64 %2409, -24
  %2415 = add i64 %3376, 768
  store i64 %2415, i64* %PC, align 8
  %2416 = inttoptr i64 %2414 to i32*
  %2417 = load i32, i32* %2416, align 4
  %2418 = zext i32 %2417 to i64
  store i64 %2418, i64* %RDX, align 8, !tbaa !2428
  %2419 = add i64 %2409, -44
  %2420 = add i64 %3376, 772
  store i64 %2420, i64* %PC, align 8
  %2421 = inttoptr i64 %2419 to i32*
  %2422 = load i32, i32* %2421, align 4
  %2423 = sext i32 %2417 to i64
  %2424 = sext i32 %2422 to i64
  %2425 = mul nsw i64 %2424, %2423
  %2426 = trunc i64 %2425 to i32
  %2427 = and i64 %2425, 4294967295
  store i64 %2427, i64* %RDX, align 8, !tbaa !2428
  %2428 = shl i64 %2425, 32
  %2429 = ashr exact i64 %2428, 32
  %2430 = icmp ne i64 %2429, %2425
  %2431 = zext i1 %2430 to i8
  store i8 %2431, i8* %.pre-phi, align 1, !tbaa !2432
  %2432 = and i32 %2426, 255
  %2433 = tail call i32 @llvm.ctpop.i32(i32 %2432) #8
  %2434 = trunc i32 %2433 to i8
  %2435 = and i8 %2434, 1
  %2436 = xor i8 %2435, 1
  store i8 %2436, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2437 = lshr i32 %2426, 31
  %2438 = trunc i32 %2437 to i8
  store i8 %2438, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2431, i8* %.pre-phi31, align 1, !tbaa !2449
  %2439 = add i64 %2409, -48
  %2440 = add i64 %3376, 775
  store i64 %2440, i64* %PC, align 8
  %2441 = inttoptr i64 %2439 to i32*
  %2442 = load i32, i32* %2441, align 4
  %2443 = add i32 %2442, %2426
  %2444 = zext i32 %2443 to i64
  store i64 %2444, i64* %RDX, align 8, !tbaa !2428
  %2445 = icmp ult i32 %2443, %2426
  %2446 = icmp ult i32 %2443, %2442
  %2447 = or i1 %2445, %2446
  %2448 = zext i1 %2447 to i8
  store i8 %2448, i8* %.pre-phi, align 1, !tbaa !2432
  %2449 = and i32 %2443, 255
  %2450 = tail call i32 @llvm.ctpop.i32(i32 %2449) #8
  %2451 = trunc i32 %2450 to i8
  %2452 = and i8 %2451, 1
  %2453 = xor i8 %2452, 1
  store i8 %2453, i8* %.pre-phi23, align 1, !tbaa !2446
  %2454 = xor i32 %2442, %2426
  %2455 = xor i32 %2454, %2443
  %2456 = lshr i32 %2455, 4
  %2457 = trunc i32 %2456 to i8
  %2458 = and i8 %2457, 1
  store i8 %2458, i8* %.pre-phi25, align 1, !tbaa !2450
  %2459 = icmp eq i32 %2443, 0
  %2460 = zext i1 %2459 to i8
  store i8 %2460, i8* %.pre-phi27, align 1, !tbaa !2447
  %2461 = lshr i32 %2443, 31
  %2462 = trunc i32 %2461 to i8
  store i8 %2462, i8* %.pre-phi29, align 1, !tbaa !2448
  %2463 = lshr i32 %2442, 31
  %2464 = xor i32 %2461, %2437
  %2465 = xor i32 %2461, %2463
  %2466 = add nuw nsw i32 %2464, %2465
  %2467 = icmp eq i32 %2466, 2
  %2468 = zext i1 %2467 to i8
  store i8 %2468, i8* %.pre-phi31, align 1, !tbaa !2449
  %2469 = sext i32 %2443 to i64
  store i64 %2469, i64* %RCX, align 8, !tbaa !2428
  %2470 = shl nsw i64 %2469, 2
  %2471 = add i64 %2470, %2413
  %2472 = add i64 %3376, 783
  store i64 %2472, i64* %PC, align 8
  %2473 = load <2 x float>, <2 x float>* %4849, align 1
  %2474 = load <2 x i32>, <2 x i32>* %4850, align 1
  %2475 = inttoptr i64 %2471 to float*
  %2476 = load float, float* %2475, align 4
  %2477 = extractelement <2 x float> %2473, i32 0
  %2478 = fmul float %2477, %2476
  store float %2478, float* %4842, align 1, !tbaa !2452
  %2479 = bitcast <2 x float> %2473 to <2 x i32>
  %2480 = extractelement <2 x i32> %2479, i32 1
  store i32 %2480, i32* %4851, align 1, !tbaa !2452
  %2481 = extractelement <2 x i32> %2474, i32 0
  store i32 %2481, i32* %4852, align 1, !tbaa !2452
  %2482 = extractelement <2 x i32> %2474, i32 1
  store i32 %2482, i32* %4853, align 1, !tbaa !2452
  %2483 = load <2 x float>, <2 x float>* %4854, align 1
  %2484 = load <2 x i32>, <2 x i32>* %4855, align 1
  %2485 = load <2 x float>, <2 x float>* %4849, align 1
  %2486 = extractelement <2 x float> %2483, i32 0
  %2487 = extractelement <2 x float> %2485, i32 0
  %2488 = fadd float %2486, %2487
  store float %2488, float* %4834, align 1, !tbaa !2452
  %2489 = bitcast <2 x float> %2483 to <2 x i32>
  %2490 = extractelement <2 x i32> %2489, i32 1
  store i32 %2490, i32* %4856, align 1, !tbaa !2452
  %2491 = extractelement <2 x i32> %2484, i32 0
  store i32 %2491, i32* %4857, align 1, !tbaa !2452
  %2492 = extractelement <2 x i32> %2484, i32 1
  store i32 %2492, i32* %4858, align 1, !tbaa !2452
  %2493 = load i64, i64* %RBP, align 8
  %2494 = add i64 %2493, -16
  %2495 = add i64 %3376, 791
  store i64 %2495, i64* %PC, align 8
  %2496 = inttoptr i64 %2494 to i64*
  %2497 = load i64, i64* %2496, align 8
  store i64 %2497, i64* %RAX, align 8, !tbaa !2428
  %2498 = add i64 %2493, -48
  %2499 = add i64 %3376, 795
  store i64 %2499, i64* %PC, align 8
  %2500 = inttoptr i64 %2498 to i32*
  %2501 = load i32, i32* %2500, align 4
  %2502 = sext i32 %2501 to i64
  store i64 %2502, i64* %RCX, align 8, !tbaa !2428
  %2503 = shl nsw i64 %2502, 2
  %2504 = add i64 %2503, %2497
  %2505 = add i64 %3376, 800
  store i64 %2505, i64* %PC, align 8
  %2506 = load <2 x float>, <2 x float>* %4854, align 1
  %2507 = extractelement <2 x float> %2506, i32 0
  %2508 = inttoptr i64 %2504 to float*
  store float %2507, float* %2508, align 4
  %2509 = load i64, i64* %RBP, align 8
  %2510 = add i64 %2509, -48
  %2511 = load i64, i64* %PC, align 8
  %2512 = add i64 %2511, 3
  store i64 %2512, i64* %PC, align 8
  %2513 = inttoptr i64 %2510 to i32*
  %2514 = load i32, i32* %2513, align 4
  %2515 = add i32 %2514, 1
  %2516 = zext i32 %2515 to i64
  store i64 %2516, i64* %RAX, align 8, !tbaa !2428
  %2517 = icmp eq i32 %2514, -1
  %2518 = icmp eq i32 %2515, 0
  %2519 = or i1 %2517, %2518
  %2520 = zext i1 %2519 to i8
  store i8 %2520, i8* %.pre-phi, align 1, !tbaa !2432
  %2521 = and i32 %2515, 255
  %2522 = tail call i32 @llvm.ctpop.i32(i32 %2521) #8
  %2523 = trunc i32 %2522 to i8
  %2524 = and i8 %2523, 1
  %2525 = xor i8 %2524, 1
  store i8 %2525, i8* %.pre-phi23, align 1, !tbaa !2446
  %2526 = xor i32 %2514, %2515
  %2527 = lshr i32 %2526, 4
  %2528 = trunc i32 %2527 to i8
  %2529 = and i8 %2528, 1
  store i8 %2529, i8* %.pre-phi25, align 1, !tbaa !2450
  %2530 = zext i1 %2518 to i8
  store i8 %2530, i8* %.pre-phi27, align 1, !tbaa !2447
  %2531 = lshr i32 %2515, 31
  %2532 = trunc i32 %2531 to i8
  store i8 %2532, i8* %.pre-phi29, align 1, !tbaa !2448
  %2533 = lshr i32 %2514, 31
  %2534 = xor i32 %2531, %2533
  %2535 = add nuw nsw i32 %2534, %2531
  %2536 = icmp eq i32 %2535, 2
  %2537 = zext i1 %2536 to i8
  store i8 %2537, i8* %.pre-phi31, align 1, !tbaa !2449
  %2538 = add i64 %2511, 9
  store i64 %2538, i64* %PC, align 8
  store i32 %2515, i32* %2513, align 4
  %2539 = load i64, i64* %PC, align 8
  %2540 = add i64 %2539, -821
  store i64 %2540, i64* %PC, align 8, !tbaa !2428
  br label %block_4024b9

block_4021b6:                                     ; preds = %block_4021aa
  %2541 = add i64 %3378, -16
  %2542 = add i64 %3414, 4
  store i64 %2542, i64* %PC, align 8
  %2543 = inttoptr i64 %2541 to i64*
  %2544 = load i64, i64* %2543, align 8
  store i64 %2544, i64* %RAX, align 8, !tbaa !2428
  %2545 = add i64 %3414, 8
  store i64 %2545, i64* %PC, align 8
  %2546 = load i32, i32* %3381, align 4
  %2547 = sext i32 %2546 to i64
  store i64 %2547, i64* %RCX, align 8, !tbaa !2428
  %2548 = shl nsw i64 %2547, 2
  %2549 = add i64 %2548, %2544
  %2550 = add i64 %3414, 13
  store i64 %2550, i64* %PC, align 8
  %2551 = inttoptr i64 %2549 to i32*
  %2552 = load i32, i32* %2551, align 4
  %2553 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %2552, i32* %2553, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3708, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3710, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3712, align 1, !tbaa !2452
  %2554 = add i64 %3378, -32
  %2555 = add i64 %3414, 17
  store i64 %2555, i64* %PC, align 8
  %2556 = inttoptr i64 %2554 to i64*
  %2557 = load i64, i64* %2556, align 8
  store i64 %2557, i64* %RAX, align 8, !tbaa !2428
  %2558 = add i64 %3378, -44
  %2559 = add i64 %3414, 20
  store i64 %2559, i64* %PC, align 8
  %2560 = inttoptr i64 %2558 to i32*
  %2561 = load i32, i32* %2560, align 4
  %2562 = add i32 %2561, -3
  %2563 = zext i32 %2562 to i64
  store i64 %2563, i64* %RDX, align 8, !tbaa !2428
  %2564 = icmp ult i32 %2561, 3
  %2565 = zext i1 %2564 to i8
  store i8 %2565, i8* %.pre-phi, align 1, !tbaa !2432
  %2566 = and i32 %2562, 255
  %2567 = tail call i32 @llvm.ctpop.i32(i32 %2566) #8
  %2568 = trunc i32 %2567 to i8
  %2569 = and i8 %2568, 1
  %2570 = xor i8 %2569, 1
  store i8 %2570, i8* %.pre-phi23, align 1, !tbaa !2446
  %2571 = xor i32 %2561, %2562
  %2572 = lshr i32 %2571, 4
  %2573 = trunc i32 %2572 to i8
  %2574 = and i8 %2573, 1
  store i8 %2574, i8* %.pre-phi25, align 1, !tbaa !2450
  %2575 = icmp eq i32 %2562, 0
  %2576 = zext i1 %2575 to i8
  store i8 %2576, i8* %.pre-phi27, align 1, !tbaa !2447
  %2577 = lshr i32 %2562, 31
  %2578 = trunc i32 %2577 to i8
  store i8 %2578, i8* %.pre-phi29, align 1, !tbaa !2448
  %2579 = lshr i32 %2561, 31
  %2580 = xor i32 %2577, %2579
  %2581 = add nuw nsw i32 %2580, %2579
  %2582 = icmp eq i32 %2581, 2
  %2583 = zext i1 %2582 to i8
  store i8 %2583, i8* %.pre-phi31, align 1, !tbaa !2449
  %2584 = sext i32 %2562 to i64
  store i64 %2584, i64* %RCX, align 8, !tbaa !2428
  %2585 = shl nsw i64 %2584, 2
  %2586 = add i64 %2585, %2557
  %2587 = add i64 %3414, 31
  store i64 %2587, i64* %PC, align 8
  %2588 = inttoptr i64 %2586 to i32*
  %2589 = load i32, i32* %2588, align 4
  %2590 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2589, i32* %2590, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3716, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3718, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3720, align 1, !tbaa !2452
  %2591 = add i64 %3378, -40
  %2592 = add i64 %3414, 35
  store i64 %2592, i64* %PC, align 8
  %2593 = inttoptr i64 %2591 to i64*
  %2594 = load i64, i64* %2593, align 8
  store i64 %2594, i64* %RAX, align 8, !tbaa !2428
  %2595 = add i64 %3378, -24
  %2596 = add i64 %3414, 38
  store i64 %2596, i64* %PC, align 8
  %2597 = inttoptr i64 %2595 to i32*
  %2598 = load i32, i32* %2597, align 4
  %2599 = zext i32 %2598 to i64
  store i64 %2599, i64* %RDX, align 8, !tbaa !2428
  %2600 = add i64 %3414, 41
  store i64 %2600, i64* %PC, align 8
  %2601 = load i32, i32* %2560, align 4
  %2602 = add i32 %2601, -3
  %2603 = zext i32 %2602 to i64
  store i64 %2603, i64* %RSI, align 8, !tbaa !2428
  %2604 = sext i32 %2598 to i64
  %2605 = sext i32 %2602 to i64
  %2606 = mul nsw i64 %2605, %2604
  %2607 = trunc i64 %2606 to i32
  %2608 = and i64 %2606, 4294967295
  store i64 %2608, i64* %RDX, align 8, !tbaa !2428
  %2609 = shl i64 %2606, 32
  %2610 = ashr exact i64 %2609, 32
  %2611 = icmp ne i64 %2610, %2606
  %2612 = zext i1 %2611 to i8
  store i8 %2612, i8* %.pre-phi, align 1, !tbaa !2432
  %2613 = and i32 %2607, 255
  %2614 = tail call i32 @llvm.ctpop.i32(i32 %2613) #8
  %2615 = trunc i32 %2614 to i8
  %2616 = and i8 %2615, 1
  %2617 = xor i8 %2616, 1
  store i8 %2617, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2618 = lshr i32 %2607, 31
  %2619 = trunc i32 %2618 to i8
  store i8 %2619, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2612, i8* %.pre-phi31, align 1, !tbaa !2449
  %2620 = load i64, i64* %RBP, align 8
  %2621 = add i64 %2620, -48
  %2622 = add i64 %3414, 50
  store i64 %2622, i64* %PC, align 8
  %2623 = inttoptr i64 %2621 to i32*
  %2624 = load i32, i32* %2623, align 4
  %2625 = add i32 %2624, %2607
  %2626 = zext i32 %2625 to i64
  store i64 %2626, i64* %RDX, align 8, !tbaa !2428
  %2627 = icmp ult i32 %2625, %2607
  %2628 = icmp ult i32 %2625, %2624
  %2629 = or i1 %2627, %2628
  %2630 = zext i1 %2629 to i8
  store i8 %2630, i8* %.pre-phi, align 1, !tbaa !2432
  %2631 = and i32 %2625, 255
  %2632 = tail call i32 @llvm.ctpop.i32(i32 %2631) #8
  %2633 = trunc i32 %2632 to i8
  %2634 = and i8 %2633, 1
  %2635 = xor i8 %2634, 1
  store i8 %2635, i8* %.pre-phi23, align 1, !tbaa !2446
  %2636 = xor i32 %2624, %2607
  %2637 = xor i32 %2636, %2625
  %2638 = lshr i32 %2637, 4
  %2639 = trunc i32 %2638 to i8
  %2640 = and i8 %2639, 1
  store i8 %2640, i8* %.pre-phi25, align 1, !tbaa !2450
  %2641 = icmp eq i32 %2625, 0
  %2642 = zext i1 %2641 to i8
  store i8 %2642, i8* %.pre-phi27, align 1, !tbaa !2447
  %2643 = lshr i32 %2625, 31
  %2644 = trunc i32 %2643 to i8
  store i8 %2644, i8* %.pre-phi29, align 1, !tbaa !2448
  %2645 = lshr i32 %2624, 31
  %2646 = xor i32 %2643, %2618
  %2647 = xor i32 %2643, %2645
  %2648 = add nuw nsw i32 %2646, %2647
  %2649 = icmp eq i32 %2648, 2
  %2650 = zext i1 %2649 to i8
  store i8 %2650, i8* %.pre-phi31, align 1, !tbaa !2449
  %2651 = sext i32 %2625 to i64
  store i64 %2651, i64* %RCX, align 8, !tbaa !2428
  %2652 = shl nsw i64 %2651, 2
  %2653 = add i64 %2652, %2594
  %2654 = add i64 %3414, 58
  store i64 %2654, i64* %PC, align 8
  %2655 = load <2 x float>, <2 x float>* %3721, align 1
  %2656 = load <2 x i32>, <2 x i32>* %3722, align 1
  %2657 = inttoptr i64 %2653 to float*
  %2658 = load float, float* %2657, align 4
  %2659 = extractelement <2 x float> %2655, i32 0
  %2660 = fmul float %2659, %2658
  store float %2660, float* %3714, align 1, !tbaa !2452
  %2661 = bitcast <2 x float> %2655 to <2 x i32>
  %2662 = extractelement <2 x i32> %2661, i32 1
  store i32 %2662, i32* %3723, align 1, !tbaa !2452
  %2663 = extractelement <2 x i32> %2656, i32 0
  store i32 %2663, i32* %3724, align 1, !tbaa !2452
  %2664 = extractelement <2 x i32> %2656, i32 1
  store i32 %2664, i32* %3725, align 1, !tbaa !2452
  %2665 = load <2 x float>, <2 x float>* %3726, align 1
  %2666 = load <2 x i32>, <2 x i32>* %3727, align 1
  %2667 = load <2 x float>, <2 x float>* %3721, align 1
  %2668 = extractelement <2 x float> %2665, i32 0
  %2669 = extractelement <2 x float> %2667, i32 0
  %2670 = fadd float %2668, %2669
  store float %2670, float* %3706, align 1, !tbaa !2452
  %2671 = bitcast <2 x float> %2665 to <2 x i32>
  %2672 = extractelement <2 x i32> %2671, i32 1
  store i32 %2672, i32* %3728, align 1, !tbaa !2452
  %2673 = extractelement <2 x i32> %2666, i32 0
  store i32 %2673, i32* %3729, align 1, !tbaa !2452
  %2674 = extractelement <2 x i32> %2666, i32 1
  store i32 %2674, i32* %3730, align 1, !tbaa !2452
  %2675 = add i64 %2620, -32
  %2676 = add i64 %3414, 66
  store i64 %2676, i64* %PC, align 8
  %2677 = inttoptr i64 %2675 to i64*
  %2678 = load i64, i64* %2677, align 8
  store i64 %2678, i64* %RAX, align 8, !tbaa !2428
  %2679 = add i64 %2620, -44
  %2680 = add i64 %3414, 69
  store i64 %2680, i64* %PC, align 8
  %2681 = inttoptr i64 %2679 to i32*
  %2682 = load i32, i32* %2681, align 4
  %2683 = add i32 %2682, -2
  %2684 = zext i32 %2683 to i64
  store i64 %2684, i64* %RDX, align 8, !tbaa !2428
  %2685 = icmp ult i32 %2682, 2
  %2686 = zext i1 %2685 to i8
  store i8 %2686, i8* %.pre-phi, align 1, !tbaa !2432
  %2687 = and i32 %2683, 255
  %2688 = tail call i32 @llvm.ctpop.i32(i32 %2687) #8
  %2689 = trunc i32 %2688 to i8
  %2690 = and i8 %2689, 1
  %2691 = xor i8 %2690, 1
  store i8 %2691, i8* %.pre-phi23, align 1, !tbaa !2446
  %2692 = xor i32 %2682, %2683
  %2693 = lshr i32 %2692, 4
  %2694 = trunc i32 %2693 to i8
  %2695 = and i8 %2694, 1
  store i8 %2695, i8* %.pre-phi25, align 1, !tbaa !2450
  %2696 = icmp eq i32 %2683, 0
  %2697 = zext i1 %2696 to i8
  store i8 %2697, i8* %.pre-phi27, align 1, !tbaa !2447
  %2698 = lshr i32 %2683, 31
  %2699 = trunc i32 %2698 to i8
  store i8 %2699, i8* %.pre-phi29, align 1, !tbaa !2448
  %2700 = lshr i32 %2682, 31
  %2701 = xor i32 %2698, %2700
  %2702 = add nuw nsw i32 %2701, %2700
  %2703 = icmp eq i32 %2702, 2
  %2704 = zext i1 %2703 to i8
  store i8 %2704, i8* %.pre-phi31, align 1, !tbaa !2449
  %2705 = sext i32 %2683 to i64
  store i64 %2705, i64* %RCX, align 8, !tbaa !2428
  %2706 = shl nsw i64 %2705, 2
  %2707 = add i64 %2706, %2678
  %2708 = add i64 %3414, 80
  store i64 %2708, i64* %PC, align 8
  %2709 = inttoptr i64 %2707 to i32*
  %2710 = load i32, i32* %2709, align 4
  store i32 %2710, i32* %2590, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3716, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3718, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3720, align 1, !tbaa !2452
  %2711 = load i64, i64* %RBP, align 8
  %2712 = add i64 %2711, -40
  %2713 = add i64 %3414, 84
  store i64 %2713, i64* %PC, align 8
  %2714 = inttoptr i64 %2712 to i64*
  %2715 = load i64, i64* %2714, align 8
  store i64 %2715, i64* %RAX, align 8, !tbaa !2428
  %2716 = add i64 %2711, -24
  %2717 = add i64 %3414, 87
  store i64 %2717, i64* %PC, align 8
  %2718 = inttoptr i64 %2716 to i32*
  %2719 = load i32, i32* %2718, align 4
  %2720 = zext i32 %2719 to i64
  store i64 %2720, i64* %RDX, align 8, !tbaa !2428
  %2721 = add i64 %2711, -44
  %2722 = add i64 %3414, 90
  store i64 %2722, i64* %PC, align 8
  %2723 = inttoptr i64 %2721 to i32*
  %2724 = load i32, i32* %2723, align 4
  %2725 = add i32 %2724, -2
  %2726 = zext i32 %2725 to i64
  store i64 %2726, i64* %RSI, align 8, !tbaa !2428
  %2727 = sext i32 %2719 to i64
  %2728 = sext i32 %2725 to i64
  %2729 = mul nsw i64 %2728, %2727
  %2730 = trunc i64 %2729 to i32
  %2731 = and i64 %2729, 4294967295
  store i64 %2731, i64* %RDX, align 8, !tbaa !2428
  %2732 = shl i64 %2729, 32
  %2733 = ashr exact i64 %2732, 32
  %2734 = icmp ne i64 %2733, %2729
  %2735 = zext i1 %2734 to i8
  store i8 %2735, i8* %.pre-phi, align 1, !tbaa !2432
  %2736 = and i32 %2730, 255
  %2737 = tail call i32 @llvm.ctpop.i32(i32 %2736) #8
  %2738 = trunc i32 %2737 to i8
  %2739 = and i8 %2738, 1
  %2740 = xor i8 %2739, 1
  store i8 %2740, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2741 = lshr i32 %2730, 31
  %2742 = trunc i32 %2741 to i8
  store i8 %2742, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2735, i8* %.pre-phi31, align 1, !tbaa !2449
  %2743 = add i64 %2711, -48
  %2744 = add i64 %3414, 99
  store i64 %2744, i64* %PC, align 8
  %2745 = inttoptr i64 %2743 to i32*
  %2746 = load i32, i32* %2745, align 4
  %2747 = add i32 %2746, %2730
  %2748 = zext i32 %2747 to i64
  store i64 %2748, i64* %RDX, align 8, !tbaa !2428
  %2749 = icmp ult i32 %2747, %2730
  %2750 = icmp ult i32 %2747, %2746
  %2751 = or i1 %2749, %2750
  %2752 = zext i1 %2751 to i8
  store i8 %2752, i8* %.pre-phi, align 1, !tbaa !2432
  %2753 = and i32 %2747, 255
  %2754 = tail call i32 @llvm.ctpop.i32(i32 %2753) #8
  %2755 = trunc i32 %2754 to i8
  %2756 = and i8 %2755, 1
  %2757 = xor i8 %2756, 1
  store i8 %2757, i8* %.pre-phi23, align 1, !tbaa !2446
  %2758 = xor i32 %2746, %2730
  %2759 = xor i32 %2758, %2747
  %2760 = lshr i32 %2759, 4
  %2761 = trunc i32 %2760 to i8
  %2762 = and i8 %2761, 1
  store i8 %2762, i8* %.pre-phi25, align 1, !tbaa !2450
  %2763 = icmp eq i32 %2747, 0
  %2764 = zext i1 %2763 to i8
  store i8 %2764, i8* %.pre-phi27, align 1, !tbaa !2447
  %2765 = lshr i32 %2747, 31
  %2766 = trunc i32 %2765 to i8
  store i8 %2766, i8* %.pre-phi29, align 1, !tbaa !2448
  %2767 = lshr i32 %2746, 31
  %2768 = xor i32 %2765, %2741
  %2769 = xor i32 %2765, %2767
  %2770 = add nuw nsw i32 %2768, %2769
  %2771 = icmp eq i32 %2770, 2
  %2772 = zext i1 %2771 to i8
  store i8 %2772, i8* %.pre-phi31, align 1, !tbaa !2449
  %2773 = sext i32 %2747 to i64
  store i64 %2773, i64* %RCX, align 8, !tbaa !2428
  %2774 = shl nsw i64 %2773, 2
  %2775 = add i64 %2774, %2715
  %2776 = add i64 %3414, 107
  store i64 %2776, i64* %PC, align 8
  %2777 = load <2 x float>, <2 x float>* %3721, align 1
  %2778 = load <2 x i32>, <2 x i32>* %3722, align 1
  %2779 = inttoptr i64 %2775 to float*
  %2780 = load float, float* %2779, align 4
  %2781 = extractelement <2 x float> %2777, i32 0
  %2782 = fmul float %2781, %2780
  store float %2782, float* %3714, align 1, !tbaa !2452
  %2783 = bitcast <2 x float> %2777 to <2 x i32>
  %2784 = extractelement <2 x i32> %2783, i32 1
  store i32 %2784, i32* %3723, align 1, !tbaa !2452
  %2785 = extractelement <2 x i32> %2778, i32 0
  store i32 %2785, i32* %3724, align 1, !tbaa !2452
  %2786 = extractelement <2 x i32> %2778, i32 1
  store i32 %2786, i32* %3725, align 1, !tbaa !2452
  %2787 = load <2 x float>, <2 x float>* %3726, align 1
  %2788 = load <2 x i32>, <2 x i32>* %3727, align 1
  %2789 = load <2 x float>, <2 x float>* %3721, align 1
  %2790 = extractelement <2 x float> %2787, i32 0
  %2791 = extractelement <2 x float> %2789, i32 0
  %2792 = fadd float %2790, %2791
  store float %2792, float* %3706, align 1, !tbaa !2452
  %2793 = bitcast <2 x float> %2787 to <2 x i32>
  %2794 = extractelement <2 x i32> %2793, i32 1
  store i32 %2794, i32* %3728, align 1, !tbaa !2452
  %2795 = extractelement <2 x i32> %2788, i32 0
  store i32 %2795, i32* %3729, align 1, !tbaa !2452
  %2796 = extractelement <2 x i32> %2788, i32 1
  store i32 %2796, i32* %3730, align 1, !tbaa !2452
  %2797 = load i64, i64* %RBP, align 8
  %2798 = add i64 %2797, -32
  %2799 = add i64 %3414, 115
  store i64 %2799, i64* %PC, align 8
  %2800 = inttoptr i64 %2798 to i64*
  %2801 = load i64, i64* %2800, align 8
  store i64 %2801, i64* %RAX, align 8, !tbaa !2428
  %2802 = add i64 %2797, -44
  %2803 = add i64 %3414, 118
  store i64 %2803, i64* %PC, align 8
  %2804 = inttoptr i64 %2802 to i32*
  %2805 = load i32, i32* %2804, align 4
  %2806 = add i32 %2805, -1
  %2807 = zext i32 %2806 to i64
  store i64 %2807, i64* %RDX, align 8, !tbaa !2428
  %2808 = icmp eq i32 %2805, 0
  %2809 = zext i1 %2808 to i8
  store i8 %2809, i8* %.pre-phi, align 1, !tbaa !2432
  %2810 = and i32 %2806, 255
  %2811 = tail call i32 @llvm.ctpop.i32(i32 %2810) #8
  %2812 = trunc i32 %2811 to i8
  %2813 = and i8 %2812, 1
  %2814 = xor i8 %2813, 1
  store i8 %2814, i8* %.pre-phi23, align 1, !tbaa !2446
  %2815 = xor i32 %2805, %2806
  %2816 = lshr i32 %2815, 4
  %2817 = trunc i32 %2816 to i8
  %2818 = and i8 %2817, 1
  store i8 %2818, i8* %.pre-phi25, align 1, !tbaa !2450
  %2819 = icmp eq i32 %2806, 0
  %2820 = zext i1 %2819 to i8
  store i8 %2820, i8* %.pre-phi27, align 1, !tbaa !2447
  %2821 = lshr i32 %2806, 31
  %2822 = trunc i32 %2821 to i8
  store i8 %2822, i8* %.pre-phi29, align 1, !tbaa !2448
  %2823 = lshr i32 %2805, 31
  %2824 = xor i32 %2821, %2823
  %2825 = add nuw nsw i32 %2824, %2823
  %2826 = icmp eq i32 %2825, 2
  %2827 = zext i1 %2826 to i8
  store i8 %2827, i8* %.pre-phi31, align 1, !tbaa !2449
  %2828 = sext i32 %2806 to i64
  store i64 %2828, i64* %RCX, align 8, !tbaa !2428
  %2829 = shl nsw i64 %2828, 2
  %2830 = add i64 %2829, %2801
  %2831 = add i64 %3414, 129
  store i64 %2831, i64* %PC, align 8
  %2832 = inttoptr i64 %2830 to i32*
  %2833 = load i32, i32* %2832, align 4
  store i32 %2833, i32* %2590, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3716, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3718, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3720, align 1, !tbaa !2452
  %2834 = add i64 %2797, -40
  %2835 = add i64 %3414, 133
  store i64 %2835, i64* %PC, align 8
  %2836 = inttoptr i64 %2834 to i64*
  %2837 = load i64, i64* %2836, align 8
  store i64 %2837, i64* %RAX, align 8, !tbaa !2428
  %2838 = add i64 %2797, -24
  %2839 = add i64 %3414, 136
  store i64 %2839, i64* %PC, align 8
  %2840 = inttoptr i64 %2838 to i32*
  %2841 = load i32, i32* %2840, align 4
  %2842 = zext i32 %2841 to i64
  store i64 %2842, i64* %RDX, align 8, !tbaa !2428
  %2843 = add i64 %3414, 139
  store i64 %2843, i64* %PC, align 8
  %2844 = load i32, i32* %2804, align 4
  %2845 = add i32 %2844, -1
  %2846 = zext i32 %2845 to i64
  store i64 %2846, i64* %RSI, align 8, !tbaa !2428
  %2847 = sext i32 %2841 to i64
  %2848 = sext i32 %2845 to i64
  %2849 = mul nsw i64 %2848, %2847
  %2850 = trunc i64 %2849 to i32
  %2851 = and i64 %2849, 4294967295
  store i64 %2851, i64* %RDX, align 8, !tbaa !2428
  %2852 = shl i64 %2849, 32
  %2853 = ashr exact i64 %2852, 32
  %2854 = icmp ne i64 %2853, %2849
  %2855 = zext i1 %2854 to i8
  store i8 %2855, i8* %.pre-phi, align 1, !tbaa !2432
  %2856 = and i32 %2850, 255
  %2857 = tail call i32 @llvm.ctpop.i32(i32 %2856) #8
  %2858 = trunc i32 %2857 to i8
  %2859 = and i8 %2858, 1
  %2860 = xor i8 %2859, 1
  store i8 %2860, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2861 = lshr i32 %2850, 31
  %2862 = trunc i32 %2861 to i8
  store i8 %2862, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2855, i8* %.pre-phi31, align 1, !tbaa !2449
  %2863 = add i64 %2797, -48
  %2864 = add i64 %3414, 148
  store i64 %2864, i64* %PC, align 8
  %2865 = inttoptr i64 %2863 to i32*
  %2866 = load i32, i32* %2865, align 4
  %2867 = add i32 %2866, %2850
  %2868 = zext i32 %2867 to i64
  store i64 %2868, i64* %RDX, align 8, !tbaa !2428
  %2869 = icmp ult i32 %2867, %2850
  %2870 = icmp ult i32 %2867, %2866
  %2871 = or i1 %2869, %2870
  %2872 = zext i1 %2871 to i8
  store i8 %2872, i8* %.pre-phi, align 1, !tbaa !2432
  %2873 = and i32 %2867, 255
  %2874 = tail call i32 @llvm.ctpop.i32(i32 %2873) #8
  %2875 = trunc i32 %2874 to i8
  %2876 = and i8 %2875, 1
  %2877 = xor i8 %2876, 1
  store i8 %2877, i8* %.pre-phi23, align 1, !tbaa !2446
  %2878 = xor i32 %2866, %2850
  %2879 = xor i32 %2878, %2867
  %2880 = lshr i32 %2879, 4
  %2881 = trunc i32 %2880 to i8
  %2882 = and i8 %2881, 1
  store i8 %2882, i8* %.pre-phi25, align 1, !tbaa !2450
  %2883 = icmp eq i32 %2867, 0
  %2884 = zext i1 %2883 to i8
  store i8 %2884, i8* %.pre-phi27, align 1, !tbaa !2447
  %2885 = lshr i32 %2867, 31
  %2886 = trunc i32 %2885 to i8
  store i8 %2886, i8* %.pre-phi29, align 1, !tbaa !2448
  %2887 = lshr i32 %2866, 31
  %2888 = xor i32 %2885, %2861
  %2889 = xor i32 %2885, %2887
  %2890 = add nuw nsw i32 %2888, %2889
  %2891 = icmp eq i32 %2890, 2
  %2892 = zext i1 %2891 to i8
  store i8 %2892, i8* %.pre-phi31, align 1, !tbaa !2449
  %2893 = sext i32 %2867 to i64
  store i64 %2893, i64* %RCX, align 8, !tbaa !2428
  %2894 = shl nsw i64 %2893, 2
  %2895 = add i64 %2894, %2837
  %2896 = add i64 %3414, 156
  store i64 %2896, i64* %PC, align 8
  %2897 = load <2 x float>, <2 x float>* %3721, align 1
  %2898 = load <2 x i32>, <2 x i32>* %3722, align 1
  %2899 = inttoptr i64 %2895 to float*
  %2900 = load float, float* %2899, align 4
  %2901 = extractelement <2 x float> %2897, i32 0
  %2902 = fmul float %2901, %2900
  store float %2902, float* %3714, align 1, !tbaa !2452
  %2903 = bitcast <2 x float> %2897 to <2 x i32>
  %2904 = extractelement <2 x i32> %2903, i32 1
  store i32 %2904, i32* %3723, align 1, !tbaa !2452
  %2905 = extractelement <2 x i32> %2898, i32 0
  store i32 %2905, i32* %3724, align 1, !tbaa !2452
  %2906 = extractelement <2 x i32> %2898, i32 1
  store i32 %2906, i32* %3725, align 1, !tbaa !2452
  %2907 = load <2 x float>, <2 x float>* %3726, align 1
  %2908 = load <2 x i32>, <2 x i32>* %3727, align 1
  %2909 = load <2 x float>, <2 x float>* %3721, align 1
  %2910 = extractelement <2 x float> %2907, i32 0
  %2911 = extractelement <2 x float> %2909, i32 0
  %2912 = fadd float %2910, %2911
  store float %2912, float* %3706, align 1, !tbaa !2452
  %2913 = bitcast <2 x float> %2907 to <2 x i32>
  %2914 = extractelement <2 x i32> %2913, i32 1
  store i32 %2914, i32* %3728, align 1, !tbaa !2452
  %2915 = extractelement <2 x i32> %2908, i32 0
  store i32 %2915, i32* %3729, align 1, !tbaa !2452
  %2916 = extractelement <2 x i32> %2908, i32 1
  store i32 %2916, i32* %3730, align 1, !tbaa !2452
  %2917 = add i64 %3414, 164
  store i64 %2917, i64* %PC, align 8
  %2918 = load i64, i64* %2800, align 8
  store i64 %2918, i64* %RAX, align 8, !tbaa !2428
  %2919 = add i64 %3414, 168
  store i64 %2919, i64* %PC, align 8
  %2920 = load i32, i32* %2804, align 4
  %2921 = sext i32 %2920 to i64
  store i64 %2921, i64* %RCX, align 8, !tbaa !2428
  %2922 = shl nsw i64 %2921, 2
  %2923 = add i64 %2922, %2918
  %2924 = add i64 %3414, 173
  store i64 %2924, i64* %PC, align 8
  %2925 = inttoptr i64 %2923 to i32*
  %2926 = load i32, i32* %2925, align 4
  store i32 %2926, i32* %2590, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3716, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3718, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3720, align 1, !tbaa !2452
  %2927 = load i64, i64* %RBP, align 8
  %2928 = add i64 %2927, -40
  %2929 = add i64 %3414, 177
  store i64 %2929, i64* %PC, align 8
  %2930 = inttoptr i64 %2928 to i64*
  %2931 = load i64, i64* %2930, align 8
  store i64 %2931, i64* %RAX, align 8, !tbaa !2428
  %2932 = add i64 %2927, -24
  %2933 = add i64 %3414, 180
  store i64 %2933, i64* %PC, align 8
  %2934 = inttoptr i64 %2932 to i32*
  %2935 = load i32, i32* %2934, align 4
  %2936 = zext i32 %2935 to i64
  store i64 %2936, i64* %RDX, align 8, !tbaa !2428
  %2937 = add i64 %2927, -44
  %2938 = add i64 %3414, 184
  store i64 %2938, i64* %PC, align 8
  %2939 = inttoptr i64 %2937 to i32*
  %2940 = load i32, i32* %2939, align 4
  %2941 = sext i32 %2935 to i64
  %2942 = sext i32 %2940 to i64
  %2943 = mul nsw i64 %2942, %2941
  %2944 = trunc i64 %2943 to i32
  %2945 = and i64 %2943, 4294967295
  store i64 %2945, i64* %RDX, align 8, !tbaa !2428
  %2946 = shl i64 %2943, 32
  %2947 = ashr exact i64 %2946, 32
  %2948 = icmp ne i64 %2947, %2943
  %2949 = zext i1 %2948 to i8
  store i8 %2949, i8* %.pre-phi, align 1, !tbaa !2432
  %2950 = and i32 %2944, 255
  %2951 = tail call i32 @llvm.ctpop.i32(i32 %2950) #8
  %2952 = trunc i32 %2951 to i8
  %2953 = and i8 %2952, 1
  %2954 = xor i8 %2953, 1
  store i8 %2954, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2955 = lshr i32 %2944, 31
  %2956 = trunc i32 %2955 to i8
  store i8 %2956, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2949, i8* %.pre-phi31, align 1, !tbaa !2449
  %2957 = add i64 %2927, -48
  %2958 = add i64 %3414, 187
  store i64 %2958, i64* %PC, align 8
  %2959 = inttoptr i64 %2957 to i32*
  %2960 = load i32, i32* %2959, align 4
  %2961 = add i32 %2960, %2944
  %2962 = zext i32 %2961 to i64
  store i64 %2962, i64* %RDX, align 8, !tbaa !2428
  %2963 = icmp ult i32 %2961, %2944
  %2964 = icmp ult i32 %2961, %2960
  %2965 = or i1 %2963, %2964
  %2966 = zext i1 %2965 to i8
  store i8 %2966, i8* %.pre-phi, align 1, !tbaa !2432
  %2967 = and i32 %2961, 255
  %2968 = tail call i32 @llvm.ctpop.i32(i32 %2967) #8
  %2969 = trunc i32 %2968 to i8
  %2970 = and i8 %2969, 1
  %2971 = xor i8 %2970, 1
  store i8 %2971, i8* %.pre-phi23, align 1, !tbaa !2446
  %2972 = xor i32 %2960, %2944
  %2973 = xor i32 %2972, %2961
  %2974 = lshr i32 %2973, 4
  %2975 = trunc i32 %2974 to i8
  %2976 = and i8 %2975, 1
  store i8 %2976, i8* %.pre-phi25, align 1, !tbaa !2450
  %2977 = icmp eq i32 %2961, 0
  %2978 = zext i1 %2977 to i8
  store i8 %2978, i8* %.pre-phi27, align 1, !tbaa !2447
  %2979 = lshr i32 %2961, 31
  %2980 = trunc i32 %2979 to i8
  store i8 %2980, i8* %.pre-phi29, align 1, !tbaa !2448
  %2981 = lshr i32 %2960, 31
  %2982 = xor i32 %2979, %2955
  %2983 = xor i32 %2979, %2981
  %2984 = add nuw nsw i32 %2982, %2983
  %2985 = icmp eq i32 %2984, 2
  %2986 = zext i1 %2985 to i8
  store i8 %2986, i8* %.pre-phi31, align 1, !tbaa !2449
  %2987 = sext i32 %2961 to i64
  store i64 %2987, i64* %RCX, align 8, !tbaa !2428
  %2988 = shl nsw i64 %2987, 2
  %2989 = add i64 %2988, %2931
  %2990 = add i64 %3414, 195
  store i64 %2990, i64* %PC, align 8
  %2991 = load <2 x float>, <2 x float>* %3721, align 1
  %2992 = load <2 x i32>, <2 x i32>* %3722, align 1
  %2993 = inttoptr i64 %2989 to float*
  %2994 = load float, float* %2993, align 4
  %2995 = extractelement <2 x float> %2991, i32 0
  %2996 = fmul float %2995, %2994
  store float %2996, float* %3714, align 1, !tbaa !2452
  %2997 = bitcast <2 x float> %2991 to <2 x i32>
  %2998 = extractelement <2 x i32> %2997, i32 1
  store i32 %2998, i32* %3723, align 1, !tbaa !2452
  %2999 = extractelement <2 x i32> %2992, i32 0
  store i32 %2999, i32* %3724, align 1, !tbaa !2452
  %3000 = extractelement <2 x i32> %2992, i32 1
  store i32 %3000, i32* %3725, align 1, !tbaa !2452
  %3001 = load <2 x float>, <2 x float>* %3726, align 1
  %3002 = load <2 x i32>, <2 x i32>* %3727, align 1
  %3003 = load <2 x float>, <2 x float>* %3721, align 1
  %3004 = extractelement <2 x float> %3001, i32 0
  %3005 = extractelement <2 x float> %3003, i32 0
  %3006 = fadd float %3004, %3005
  store float %3006, float* %3706, align 1, !tbaa !2452
  %3007 = bitcast <2 x float> %3001 to <2 x i32>
  %3008 = extractelement <2 x i32> %3007, i32 1
  store i32 %3008, i32* %3728, align 1, !tbaa !2452
  %3009 = extractelement <2 x i32> %3002, i32 0
  store i32 %3009, i32* %3729, align 1, !tbaa !2452
  %3010 = extractelement <2 x i32> %3002, i32 1
  store i32 %3010, i32* %3730, align 1, !tbaa !2452
  %3011 = load i64, i64* %RBP, align 8
  %3012 = add i64 %3011, -16
  %3013 = add i64 %3414, 203
  store i64 %3013, i64* %PC, align 8
  %3014 = inttoptr i64 %3012 to i64*
  %3015 = load i64, i64* %3014, align 8
  store i64 %3015, i64* %RAX, align 8, !tbaa !2428
  %3016 = add i64 %3011, -48
  %3017 = add i64 %3414, 207
  store i64 %3017, i64* %PC, align 8
  %3018 = inttoptr i64 %3016 to i32*
  %3019 = load i32, i32* %3018, align 4
  %3020 = sext i32 %3019 to i64
  store i64 %3020, i64* %RCX, align 8, !tbaa !2428
  %3021 = shl nsw i64 %3020, 2
  %3022 = add i64 %3021, %3015
  %3023 = add i64 %3414, 212
  store i64 %3023, i64* %PC, align 8
  %3024 = load <2 x float>, <2 x float>* %3726, align 1
  %3025 = extractelement <2 x float> %3024, i32 0
  %3026 = inttoptr i64 %3022 to float*
  store float %3025, float* %3026, align 4
  %3027 = load i64, i64* %RBP, align 8
  %3028 = add i64 %3027, -48
  %3029 = load i64, i64* %PC, align 8
  %3030 = add i64 %3029, 3
  store i64 %3030, i64* %PC, align 8
  %3031 = inttoptr i64 %3028 to i32*
  %3032 = load i32, i32* %3031, align 4
  %3033 = add i32 %3032, 1
  %3034 = zext i32 %3033 to i64
  store i64 %3034, i64* %RAX, align 8, !tbaa !2428
  %3035 = icmp eq i32 %3032, -1
  %3036 = icmp eq i32 %3033, 0
  %3037 = or i1 %3035, %3036
  %3038 = zext i1 %3037 to i8
  store i8 %3038, i8* %.pre-phi, align 1, !tbaa !2432
  %3039 = and i32 %3033, 255
  %3040 = tail call i32 @llvm.ctpop.i32(i32 %3039) #8
  %3041 = trunc i32 %3040 to i8
  %3042 = and i8 %3041, 1
  %3043 = xor i8 %3042, 1
  store i8 %3043, i8* %.pre-phi23, align 1, !tbaa !2446
  %3044 = xor i32 %3032, %3033
  %3045 = lshr i32 %3044, 4
  %3046 = trunc i32 %3045 to i8
  %3047 = and i8 %3046, 1
  store i8 %3047, i8* %.pre-phi25, align 1, !tbaa !2450
  %3048 = zext i1 %3036 to i8
  store i8 %3048, i8* %.pre-phi27, align 1, !tbaa !2447
  %3049 = lshr i32 %3033, 31
  %3050 = trunc i32 %3049 to i8
  store i8 %3050, i8* %.pre-phi29, align 1, !tbaa !2448
  %3051 = lshr i32 %3032, 31
  %3052 = xor i32 %3049, %3051
  %3053 = add nuw nsw i32 %3052, %3049
  %3054 = icmp eq i32 %3053, 2
  %3055 = zext i1 %3054 to i8
  store i8 %3055, i8* %.pre-phi31, align 1, !tbaa !2449
  %3056 = add i64 %3029, 9
  store i64 %3056, i64* %PC, align 8
  store i32 %3033, i32* %3031, align 4
  %3057 = load i64, i64* %PC, align 8
  %3058 = add i64 %3057, -233
  store i64 %3058, i64* %PC, align 8, !tbaa !2428
  br label %block_4021aa

block_4020b4:                                     ; preds = %block_402059
  %3059 = add i64 %3601, 5
  store i64 %3059, i64* %PC, align 8, !tbaa !2428
  br label %block_4020b9

block_4020f5:                                     ; preds = %block_4020e9
  %3060 = add i64 %3489, -16
  %3061 = add i64 %3525, 4
  store i64 %3061, i64* %PC, align 8
  %3062 = inttoptr i64 %3060 to i64*
  %3063 = load i64, i64* %3062, align 8
  store i64 %3063, i64* %RAX, align 8, !tbaa !2428
  %3064 = add i64 %3525, 8
  store i64 %3064, i64* %PC, align 8
  %3065 = load i32, i32* %3492, align 4
  %3066 = sext i32 %3065 to i64
  store i64 %3066, i64* %RCX, align 8, !tbaa !2428
  %3067 = shl nsw i64 %3066, 2
  %3068 = add i64 %3067, %3063
  %3069 = add i64 %3525, 13
  store i64 %3069, i64* %PC, align 8
  %3070 = inttoptr i64 %3068 to i32*
  %3071 = load i32, i32* %3070, align 4
  %3072 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %3071, i32* %3072, align 1, !tbaa !2452
  store float 0.000000e+00, float* %164, align 1, !tbaa !2452
  store float 0.000000e+00, float* %166, align 1, !tbaa !2452
  store float 0.000000e+00, float* %168, align 1, !tbaa !2452
  %3073 = add i64 %3489, -32
  %3074 = add i64 %3525, 17
  store i64 %3074, i64* %PC, align 8
  %3075 = inttoptr i64 %3073 to i64*
  %3076 = load i64, i64* %3075, align 8
  store i64 %3076, i64* %RAX, align 8, !tbaa !2428
  %3077 = add i64 %3489, -44
  %3078 = add i64 %3525, 20
  store i64 %3078, i64* %PC, align 8
  %3079 = inttoptr i64 %3077 to i32*
  %3080 = load i32, i32* %3079, align 4
  %3081 = add i32 %3080, -1
  %3082 = zext i32 %3081 to i64
  store i64 %3082, i64* %RDX, align 8, !tbaa !2428
  %3083 = icmp eq i32 %3080, 0
  %3084 = zext i1 %3083 to i8
  store i8 %3084, i8* %.pre-phi, align 1, !tbaa !2432
  %3085 = and i32 %3081, 255
  %3086 = tail call i32 @llvm.ctpop.i32(i32 %3085) #8
  %3087 = trunc i32 %3086 to i8
  %3088 = and i8 %3087, 1
  %3089 = xor i8 %3088, 1
  store i8 %3089, i8* %.pre-phi23, align 1, !tbaa !2446
  %3090 = xor i32 %3080, %3081
  %3091 = lshr i32 %3090, 4
  %3092 = trunc i32 %3091 to i8
  %3093 = and i8 %3092, 1
  store i8 %3093, i8* %.pre-phi25, align 1, !tbaa !2450
  %3094 = icmp eq i32 %3081, 0
  %3095 = zext i1 %3094 to i8
  store i8 %3095, i8* %.pre-phi27, align 1, !tbaa !2447
  %3096 = lshr i32 %3081, 31
  %3097 = trunc i32 %3096 to i8
  store i8 %3097, i8* %.pre-phi29, align 1, !tbaa !2448
  %3098 = lshr i32 %3080, 31
  %3099 = xor i32 %3096, %3098
  %3100 = add nuw nsw i32 %3099, %3098
  %3101 = icmp eq i32 %3100, 2
  %3102 = zext i1 %3101 to i8
  store i8 %3102, i8* %.pre-phi31, align 1, !tbaa !2449
  %3103 = sext i32 %3081 to i64
  store i64 %3103, i64* %RCX, align 8, !tbaa !2428
  %3104 = shl nsw i64 %3103, 2
  %3105 = add i64 %3104, %3076
  %3106 = add i64 %3525, 31
  store i64 %3106, i64* %PC, align 8
  %3107 = inttoptr i64 %3105 to i32*
  %3108 = load i32, i32* %3107, align 4
  %3109 = bitcast %union.VectorReg* %8 to i32*
  store i32 %3108, i32* %3109, align 1, !tbaa !2452
  store float 0.000000e+00, float* %172, align 1, !tbaa !2452
  store float 0.000000e+00, float* %174, align 1, !tbaa !2452
  store float 0.000000e+00, float* %176, align 1, !tbaa !2452
  %3110 = add i64 %3489, -40
  %3111 = add i64 %3525, 35
  store i64 %3111, i64* %PC, align 8
  %3112 = inttoptr i64 %3110 to i64*
  %3113 = load i64, i64* %3112, align 8
  store i64 %3113, i64* %RAX, align 8, !tbaa !2428
  %3114 = add i64 %3489, -24
  %3115 = add i64 %3525, 38
  store i64 %3115, i64* %PC, align 8
  %3116 = inttoptr i64 %3114 to i32*
  %3117 = load i32, i32* %3116, align 4
  %3118 = zext i32 %3117 to i64
  store i64 %3118, i64* %RDX, align 8, !tbaa !2428
  %3119 = add i64 %3525, 41
  store i64 %3119, i64* %PC, align 8
  %3120 = load i32, i32* %3079, align 4
  %3121 = add i32 %3120, -1
  %3122 = zext i32 %3121 to i64
  store i64 %3122, i64* %RSI, align 8, !tbaa !2428
  %3123 = sext i32 %3117 to i64
  %3124 = sext i32 %3121 to i64
  %3125 = mul nsw i64 %3124, %3123
  %3126 = trunc i64 %3125 to i32
  %3127 = and i64 %3125, 4294967295
  store i64 %3127, i64* %RDX, align 8, !tbaa !2428
  %3128 = shl i64 %3125, 32
  %3129 = ashr exact i64 %3128, 32
  %3130 = icmp ne i64 %3129, %3125
  %3131 = zext i1 %3130 to i8
  store i8 %3131, i8* %.pre-phi, align 1, !tbaa !2432
  %3132 = and i32 %3126, 255
  %3133 = tail call i32 @llvm.ctpop.i32(i32 %3132) #8
  %3134 = trunc i32 %3133 to i8
  %3135 = and i8 %3134, 1
  %3136 = xor i8 %3135, 1
  store i8 %3136, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3137 = lshr i32 %3126, 31
  %3138 = trunc i32 %3137 to i8
  store i8 %3138, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3131, i8* %.pre-phi31, align 1, !tbaa !2449
  %3139 = load i64, i64* %RBP, align 8
  %3140 = add i64 %3139, -48
  %3141 = add i64 %3525, 50
  store i64 %3141, i64* %PC, align 8
  %3142 = inttoptr i64 %3140 to i32*
  %3143 = load i32, i32* %3142, align 4
  %3144 = add i32 %3143, %3126
  %3145 = zext i32 %3144 to i64
  store i64 %3145, i64* %RDX, align 8, !tbaa !2428
  %3146 = icmp ult i32 %3144, %3126
  %3147 = icmp ult i32 %3144, %3143
  %3148 = or i1 %3146, %3147
  %3149 = zext i1 %3148 to i8
  store i8 %3149, i8* %.pre-phi, align 1, !tbaa !2432
  %3150 = and i32 %3144, 255
  %3151 = tail call i32 @llvm.ctpop.i32(i32 %3150) #8
  %3152 = trunc i32 %3151 to i8
  %3153 = and i8 %3152, 1
  %3154 = xor i8 %3153, 1
  store i8 %3154, i8* %.pre-phi23, align 1, !tbaa !2446
  %3155 = xor i32 %3143, %3126
  %3156 = xor i32 %3155, %3144
  %3157 = lshr i32 %3156, 4
  %3158 = trunc i32 %3157 to i8
  %3159 = and i8 %3158, 1
  store i8 %3159, i8* %.pre-phi25, align 1, !tbaa !2450
  %3160 = icmp eq i32 %3144, 0
  %3161 = zext i1 %3160 to i8
  store i8 %3161, i8* %.pre-phi27, align 1, !tbaa !2447
  %3162 = lshr i32 %3144, 31
  %3163 = trunc i32 %3162 to i8
  store i8 %3163, i8* %.pre-phi29, align 1, !tbaa !2448
  %3164 = lshr i32 %3143, 31
  %3165 = xor i32 %3162, %3137
  %3166 = xor i32 %3162, %3164
  %3167 = add nuw nsw i32 %3165, %3166
  %3168 = icmp eq i32 %3167, 2
  %3169 = zext i1 %3168 to i8
  store i8 %3169, i8* %.pre-phi31, align 1, !tbaa !2449
  %3170 = sext i32 %3144 to i64
  store i64 %3170, i64* %RCX, align 8, !tbaa !2428
  %3171 = shl nsw i64 %3170, 2
  %3172 = add i64 %3171, %3113
  %3173 = add i64 %3525, 58
  store i64 %3173, i64* %PC, align 8
  %3174 = load <2 x float>, <2 x float>* %177, align 1
  %3175 = load <2 x i32>, <2 x i32>* %178, align 1
  %3176 = inttoptr i64 %3172 to float*
  %3177 = load float, float* %3176, align 4
  %3178 = extractelement <2 x float> %3174, i32 0
  %3179 = fmul float %3178, %3177
  store float %3179, float* %170, align 1, !tbaa !2452
  %3180 = bitcast <2 x float> %3174 to <2 x i32>
  %3181 = extractelement <2 x i32> %3180, i32 1
  store i32 %3181, i32* %179, align 1, !tbaa !2452
  %3182 = extractelement <2 x i32> %3175, i32 0
  store i32 %3182, i32* %180, align 1, !tbaa !2452
  %3183 = extractelement <2 x i32> %3175, i32 1
  store i32 %3183, i32* %181, align 1, !tbaa !2452
  %3184 = load <2 x float>, <2 x float>* %182, align 1
  %3185 = load <2 x i32>, <2 x i32>* %183, align 1
  %3186 = load <2 x float>, <2 x float>* %177, align 1
  %3187 = extractelement <2 x float> %3184, i32 0
  %3188 = extractelement <2 x float> %3186, i32 0
  %3189 = fadd float %3187, %3188
  store float %3189, float* %162, align 1, !tbaa !2452
  %3190 = bitcast <2 x float> %3184 to <2 x i32>
  %3191 = extractelement <2 x i32> %3190, i32 1
  store i32 %3191, i32* %184, align 1, !tbaa !2452
  %3192 = extractelement <2 x i32> %3185, i32 0
  store i32 %3192, i32* %185, align 1, !tbaa !2452
  %3193 = extractelement <2 x i32> %3185, i32 1
  store i32 %3193, i32* %186, align 1, !tbaa !2452
  %3194 = add i64 %3139, -32
  %3195 = add i64 %3525, 66
  store i64 %3195, i64* %PC, align 8
  %3196 = inttoptr i64 %3194 to i64*
  %3197 = load i64, i64* %3196, align 8
  store i64 %3197, i64* %RAX, align 8, !tbaa !2428
  %3198 = add i64 %3139, -44
  %3199 = add i64 %3525, 70
  store i64 %3199, i64* %PC, align 8
  %3200 = inttoptr i64 %3198 to i32*
  %3201 = load i32, i32* %3200, align 4
  %3202 = sext i32 %3201 to i64
  store i64 %3202, i64* %RCX, align 8, !tbaa !2428
  %3203 = shl nsw i64 %3202, 2
  %3204 = add i64 %3203, %3197
  %3205 = add i64 %3525, 75
  store i64 %3205, i64* %PC, align 8
  %3206 = inttoptr i64 %3204 to i32*
  %3207 = load i32, i32* %3206, align 4
  store i32 %3207, i32* %3109, align 1, !tbaa !2452
  store float 0.000000e+00, float* %172, align 1, !tbaa !2452
  store float 0.000000e+00, float* %174, align 1, !tbaa !2452
  store float 0.000000e+00, float* %176, align 1, !tbaa !2452
  %3208 = add i64 %3139, -40
  %3209 = add i64 %3525, 79
  store i64 %3209, i64* %PC, align 8
  %3210 = inttoptr i64 %3208 to i64*
  %3211 = load i64, i64* %3210, align 8
  store i64 %3211, i64* %RAX, align 8, !tbaa !2428
  %3212 = add i64 %3139, -24
  %3213 = add i64 %3525, 82
  store i64 %3213, i64* %PC, align 8
  %3214 = inttoptr i64 %3212 to i32*
  %3215 = load i32, i32* %3214, align 4
  %3216 = zext i32 %3215 to i64
  store i64 %3216, i64* %RDX, align 8, !tbaa !2428
  %3217 = add i64 %3525, 86
  store i64 %3217, i64* %PC, align 8
  %3218 = load i32, i32* %3200, align 4
  %3219 = sext i32 %3215 to i64
  %3220 = sext i32 %3218 to i64
  %3221 = mul nsw i64 %3220, %3219
  %3222 = trunc i64 %3221 to i32
  %3223 = and i64 %3221, 4294967295
  store i64 %3223, i64* %RDX, align 8, !tbaa !2428
  %3224 = shl i64 %3221, 32
  %3225 = ashr exact i64 %3224, 32
  %3226 = icmp ne i64 %3225, %3221
  %3227 = zext i1 %3226 to i8
  store i8 %3227, i8* %.pre-phi, align 1, !tbaa !2432
  %3228 = and i32 %3222, 255
  %3229 = tail call i32 @llvm.ctpop.i32(i32 %3228) #8
  %3230 = trunc i32 %3229 to i8
  %3231 = and i8 %3230, 1
  %3232 = xor i8 %3231, 1
  store i8 %3232, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3233 = lshr i32 %3222, 31
  %3234 = trunc i32 %3233 to i8
  store i8 %3234, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3227, i8* %.pre-phi31, align 1, !tbaa !2449
  %3235 = add i64 %3525, 89
  store i64 %3235, i64* %PC, align 8
  %3236 = load i32, i32* %3142, align 4
  %3237 = add i32 %3236, %3222
  %3238 = zext i32 %3237 to i64
  store i64 %3238, i64* %RDX, align 8, !tbaa !2428
  %3239 = icmp ult i32 %3237, %3222
  %3240 = icmp ult i32 %3237, %3236
  %3241 = or i1 %3239, %3240
  %3242 = zext i1 %3241 to i8
  store i8 %3242, i8* %.pre-phi, align 1, !tbaa !2432
  %3243 = and i32 %3237, 255
  %3244 = tail call i32 @llvm.ctpop.i32(i32 %3243) #8
  %3245 = trunc i32 %3244 to i8
  %3246 = and i8 %3245, 1
  %3247 = xor i8 %3246, 1
  store i8 %3247, i8* %.pre-phi23, align 1, !tbaa !2446
  %3248 = xor i32 %3236, %3222
  %3249 = xor i32 %3248, %3237
  %3250 = lshr i32 %3249, 4
  %3251 = trunc i32 %3250 to i8
  %3252 = and i8 %3251, 1
  store i8 %3252, i8* %.pre-phi25, align 1, !tbaa !2450
  %3253 = icmp eq i32 %3237, 0
  %3254 = zext i1 %3253 to i8
  store i8 %3254, i8* %.pre-phi27, align 1, !tbaa !2447
  %3255 = lshr i32 %3237, 31
  %3256 = trunc i32 %3255 to i8
  store i8 %3256, i8* %.pre-phi29, align 1, !tbaa !2448
  %3257 = lshr i32 %3236, 31
  %3258 = xor i32 %3255, %3233
  %3259 = xor i32 %3255, %3257
  %3260 = add nuw nsw i32 %3258, %3259
  %3261 = icmp eq i32 %3260, 2
  %3262 = zext i1 %3261 to i8
  store i8 %3262, i8* %.pre-phi31, align 1, !tbaa !2449
  %3263 = sext i32 %3237 to i64
  store i64 %3263, i64* %RCX, align 8, !tbaa !2428
  %3264 = shl nsw i64 %3263, 2
  %3265 = add i64 %3264, %3211
  %3266 = add i64 %3525, 97
  store i64 %3266, i64* %PC, align 8
  %3267 = load <2 x float>, <2 x float>* %177, align 1
  %3268 = load <2 x i32>, <2 x i32>* %178, align 1
  %3269 = inttoptr i64 %3265 to float*
  %3270 = load float, float* %3269, align 4
  %3271 = extractelement <2 x float> %3267, i32 0
  %3272 = fmul float %3271, %3270
  store float %3272, float* %170, align 1, !tbaa !2452
  %3273 = bitcast <2 x float> %3267 to <2 x i32>
  %3274 = extractelement <2 x i32> %3273, i32 1
  store i32 %3274, i32* %179, align 1, !tbaa !2452
  %3275 = extractelement <2 x i32> %3268, i32 0
  store i32 %3275, i32* %180, align 1, !tbaa !2452
  %3276 = extractelement <2 x i32> %3268, i32 1
  store i32 %3276, i32* %181, align 1, !tbaa !2452
  %3277 = load <2 x float>, <2 x float>* %182, align 1
  %3278 = load <2 x i32>, <2 x i32>* %183, align 1
  %3279 = load <2 x float>, <2 x float>* %177, align 1
  %3280 = extractelement <2 x float> %3277, i32 0
  %3281 = extractelement <2 x float> %3279, i32 0
  %3282 = fadd float %3280, %3281
  store float %3282, float* %162, align 1, !tbaa !2452
  %3283 = bitcast <2 x float> %3277 to <2 x i32>
  %3284 = extractelement <2 x i32> %3283, i32 1
  store i32 %3284, i32* %184, align 1, !tbaa !2452
  %3285 = extractelement <2 x i32> %3278, i32 0
  store i32 %3285, i32* %185, align 1, !tbaa !2452
  %3286 = extractelement <2 x i32> %3278, i32 1
  store i32 %3286, i32* %186, align 1, !tbaa !2452
  %3287 = load i64, i64* %RBP, align 8
  %3288 = add i64 %3287, -16
  %3289 = add i64 %3525, 105
  store i64 %3289, i64* %PC, align 8
  %3290 = inttoptr i64 %3288 to i64*
  %3291 = load i64, i64* %3290, align 8
  store i64 %3291, i64* %RAX, align 8, !tbaa !2428
  %3292 = add i64 %3287, -48
  %3293 = add i64 %3525, 109
  store i64 %3293, i64* %PC, align 8
  %3294 = inttoptr i64 %3292 to i32*
  %3295 = load i32, i32* %3294, align 4
  %3296 = sext i32 %3295 to i64
  store i64 %3296, i64* %RCX, align 8, !tbaa !2428
  %3297 = shl nsw i64 %3296, 2
  %3298 = add i64 %3297, %3291
  %3299 = add i64 %3525, 114
  store i64 %3299, i64* %PC, align 8
  %3300 = load <2 x float>, <2 x float>* %182, align 1
  %3301 = extractelement <2 x float> %3300, i32 0
  %3302 = inttoptr i64 %3298 to float*
  store float %3301, float* %3302, align 4
  %3303 = load i64, i64* %RBP, align 8
  %3304 = add i64 %3303, -48
  %3305 = load i64, i64* %PC, align 8
  %3306 = add i64 %3305, 3
  store i64 %3306, i64* %PC, align 8
  %3307 = inttoptr i64 %3304 to i32*
  %3308 = load i32, i32* %3307, align 4
  %3309 = add i32 %3308, 1
  %3310 = zext i32 %3309 to i64
  store i64 %3310, i64* %RAX, align 8, !tbaa !2428
  %3311 = icmp eq i32 %3308, -1
  %3312 = icmp eq i32 %3309, 0
  %3313 = or i1 %3311, %3312
  %3314 = zext i1 %3313 to i8
  store i8 %3314, i8* %.pre-phi, align 1, !tbaa !2432
  %3315 = and i32 %3309, 255
  %3316 = tail call i32 @llvm.ctpop.i32(i32 %3315) #8
  %3317 = trunc i32 %3316 to i8
  %3318 = and i8 %3317, 1
  %3319 = xor i8 %3318, 1
  store i8 %3319, i8* %.pre-phi23, align 1, !tbaa !2446
  %3320 = xor i32 %3308, %3309
  %3321 = lshr i32 %3320, 4
  %3322 = trunc i32 %3321 to i8
  %3323 = and i8 %3322, 1
  store i8 %3323, i8* %.pre-phi25, align 1, !tbaa !2450
  %3324 = zext i1 %3312 to i8
  store i8 %3324, i8* %.pre-phi27, align 1, !tbaa !2447
  %3325 = lshr i32 %3309, 31
  %3326 = trunc i32 %3325 to i8
  store i8 %3326, i8* %.pre-phi29, align 1, !tbaa !2448
  %3327 = lshr i32 %3308, 31
  %3328 = xor i32 %3325, %3327
  %3329 = add nuw nsw i32 %3328, %3325
  %3330 = icmp eq i32 %3329, 2
  %3331 = zext i1 %3330 to i8
  store i8 %3331, i8* %.pre-phi31, align 1, !tbaa !2449
  %3332 = add i64 %3305, 9
  store i64 %3332, i64* %PC, align 8
  store i32 %3309, i32* %3307, align 4
  %3333 = load i64, i64* %PC, align 8
  %3334 = add i64 %3333, -135
  store i64 %3334, i64* %PC, align 8, !tbaa !2428
  br label %block_4020e9

block_4024b2:                                     ; preds = %block_4024a6
  %3335 = add i64 %3527, -48
  %3336 = add i64 %3563, 7
  store i64 %3336, i64* %PC, align 8
  %3337 = inttoptr i64 %3335 to i32*
  store i32 0, i32* %3337, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_4024b9

block_40247f:                                     ; preds = %block_4022cd
  %3338 = add i64 %452, 5
  store i64 %3338, i64* %PC, align 8, !tbaa !2428
  br label %block_402484

block_4024b9:                                     ; preds = %block_4024b2, %block_4024c5
  %3339 = phi i64 [ %.pre20, %block_4024b2 ], [ %2540, %block_4024c5 ]
  %3340 = load i64, i64* %RBP, align 8
  %3341 = add i64 %3340, -48
  %3342 = add i64 %3339, 3
  store i64 %3342, i64* %PC, align 8
  %3343 = inttoptr i64 %3341 to i32*
  %3344 = load i32, i32* %3343, align 4
  %3345 = zext i32 %3344 to i64
  store i64 %3345, i64* %RAX, align 8, !tbaa !2428
  %3346 = add i64 %3340, -4
  %3347 = add i64 %3339, 6
  store i64 %3347, i64* %PC, align 8
  %3348 = inttoptr i64 %3346 to i32*
  %3349 = load i32, i32* %3348, align 4
  %3350 = sub i32 %3344, %3349
  %3351 = icmp ult i32 %3344, %3349
  %3352 = zext i1 %3351 to i8
  store i8 %3352, i8* %.pre-phi, align 1, !tbaa !2432
  %3353 = and i32 %3350, 255
  %3354 = tail call i32 @llvm.ctpop.i32(i32 %3353) #8
  %3355 = trunc i32 %3354 to i8
  %3356 = and i8 %3355, 1
  %3357 = xor i8 %3356, 1
  store i8 %3357, i8* %.pre-phi23, align 1, !tbaa !2446
  %3358 = xor i32 %3349, %3344
  %3359 = xor i32 %3358, %3350
  %3360 = lshr i32 %3359, 4
  %3361 = trunc i32 %3360 to i8
  %3362 = and i8 %3361, 1
  store i8 %3362, i8* %.pre-phi25, align 1, !tbaa !2450
  %3363 = icmp eq i32 %3350, 0
  %3364 = zext i1 %3363 to i8
  store i8 %3364, i8* %.pre-phi27, align 1, !tbaa !2447
  %3365 = lshr i32 %3350, 31
  %3366 = trunc i32 %3365 to i8
  store i8 %3366, i8* %.pre-phi29, align 1, !tbaa !2448
  %3367 = lshr i32 %3344, 31
  %3368 = lshr i32 %3349, 31
  %3369 = xor i32 %3368, %3367
  %3370 = xor i32 %3365, %3367
  %3371 = add nuw nsw i32 %3370, %3369
  %3372 = icmp eq i32 %3371, 2
  %3373 = zext i1 %3372 to i8
  store i8 %3373, i8* %.pre-phi31, align 1, !tbaa !2449
  %3374 = icmp ne i8 %3366, 0
  %3375 = xor i1 %3374, %3372
  %.v = select i1 %3375, i64 12, i64 826
  %3376 = add i64 %3339, %.v
  store i64 %3376, i64* %PC, align 8, !tbaa !2428
  br i1 %3375, label %block_4024c5, label %block_4027f3

block_4021aa:                                     ; preds = %block_40219a, %block_4021b6
  %3377 = phi i64 [ %.pre11, %block_40219a ], [ %3058, %block_4021b6 ]
  %3378 = load i64, i64* %RBP, align 8
  %3379 = add i64 %3378, -48
  %3380 = add i64 %3377, 3
  store i64 %3380, i64* %PC, align 8
  %3381 = inttoptr i64 %3379 to i32*
  %3382 = load i32, i32* %3381, align 4
  %3383 = zext i32 %3382 to i64
  store i64 %3383, i64* %RAX, align 8, !tbaa !2428
  %3384 = add i64 %3378, -4
  %3385 = add i64 %3377, 6
  store i64 %3385, i64* %PC, align 8
  %3386 = inttoptr i64 %3384 to i32*
  %3387 = load i32, i32* %3386, align 4
  %3388 = sub i32 %3382, %3387
  %3389 = icmp ult i32 %3382, %3387
  %3390 = zext i1 %3389 to i8
  store i8 %3390, i8* %.pre-phi, align 1, !tbaa !2432
  %3391 = and i32 %3388, 255
  %3392 = tail call i32 @llvm.ctpop.i32(i32 %3391) #8
  %3393 = trunc i32 %3392 to i8
  %3394 = and i8 %3393, 1
  %3395 = xor i8 %3394, 1
  store i8 %3395, i8* %.pre-phi23, align 1, !tbaa !2446
  %3396 = xor i32 %3387, %3382
  %3397 = xor i32 %3396, %3388
  %3398 = lshr i32 %3397, 4
  %3399 = trunc i32 %3398 to i8
  %3400 = and i8 %3399, 1
  store i8 %3400, i8* %.pre-phi25, align 1, !tbaa !2450
  %3401 = icmp eq i32 %3388, 0
  %3402 = zext i1 %3401 to i8
  store i8 %3402, i8* %.pre-phi27, align 1, !tbaa !2447
  %3403 = lshr i32 %3388, 31
  %3404 = trunc i32 %3403 to i8
  store i8 %3404, i8* %.pre-phi29, align 1, !tbaa !2448
  %3405 = lshr i32 %3382, 31
  %3406 = lshr i32 %3387, 31
  %3407 = xor i32 %3406, %3405
  %3408 = xor i32 %3403, %3405
  %3409 = add nuw nsw i32 %3408, %3407
  %3410 = icmp eq i32 %3409, 2
  %3411 = zext i1 %3410 to i8
  store i8 %3411, i8* %.pre-phi31, align 1, !tbaa !2449
  %3412 = icmp ne i8 %3404, 0
  %3413 = xor i1 %3412, %3410
  %.v39 = select i1 %3413, i64 12, i64 238
  %3414 = add i64 %3377, %.v39
  store i64 %3414, i64* %PC, align 8, !tbaa !2428
  br i1 %3413, label %block_4021b6, label %block_402298

block_40217a:                                     ; preds = %block_402175, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %3415 = phi i64 [ %3489, %block_402175 ], [ %385, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  %3416 = phi i64 [ %4735, %block_402175 ], [ %414, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %3417 = add i64 %3415, -20
  %3418 = add i64 %3416, 8
  store i64 %3418, i64* %PC, align 8
  %3419 = inttoptr i64 %3417 to i32*
  %3420 = load i32, i32* %3419, align 4
  %3421 = zext i32 %3420 to i64
  store i64 %3421, i64* %RCX, align 8, !tbaa !2428
  %3422 = add i64 %3415, -64
  %3423 = add i64 %3416, 11
  store i64 %3423, i64* %PC, align 8
  %3424 = inttoptr i64 %3422 to i32*
  store i32 8, i32* %3424, align 4
  %3425 = load i32, i32* %ECX, align 4
  %3426 = zext i32 %3425 to i64
  %3427 = load i64, i64* %PC, align 8
  store i64 %3426, i64* %RAX, align 8, !tbaa !2428
  %3428 = sext i32 %3425 to i64
  %3429 = lshr i64 %3428, 32
  store i64 %3429, i64* %64, align 8, !tbaa !2428
  %3430 = load i64, i64* %RBP, align 8
  %3431 = add i64 %3430, -64
  %3432 = add i64 %3427, 6
  store i64 %3432, i64* %PC, align 8
  %3433 = inttoptr i64 %3431 to i32*
  %3434 = load i32, i32* %3433, align 4
  %3435 = zext i32 %3434 to i64
  store i64 %3435, i64* %RCX, align 8, !tbaa !2428
  %3436 = add i64 %3427, 8
  store i64 %3436, i64* %PC, align 8
  %3437 = sext i32 %3434 to i64
  %3438 = shl nuw i64 %3429, 32
  %3439 = or i64 %3438, %3426
  %3440 = sdiv i64 %3439, %3437
  %3441 = shl i64 %3440, 32
  %3442 = ashr exact i64 %3441, 32
  %3443 = icmp eq i64 %3440, %3442
  br i1 %3443, label %3446, label %3444

; <label>:3444:                                   ; preds = %block_40217a
  %3445 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3436, %struct.Memory* %381) #9
  %.pre8 = load i64, i64* %RBP, align 8
  %.pre9 = load i32, i32* %EDX, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:3446:                                   ; preds = %block_40217a
  %3447 = srem i64 %3439, %3437
  %3448 = and i64 %3440, 4294967295
  store i64 %3448, i64* %RAX, align 8, !tbaa !2428
  %3449 = and i64 %3447, 4294967295
  store i64 %3449, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %3450 = trunc i64 %3447 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %3446, %3444
  %3451 = phi i64 [ %.pre10, %3444 ], [ %3436, %3446 ]
  %3452 = phi i32 [ %.pre9, %3444 ], [ %3450, %3446 ]
  %3453 = phi i64 [ %.pre8, %3444 ], [ %3430, %3446 ]
  %3454 = phi %struct.Memory* [ %3445, %3444 ], [ %381, %3446 ]
  %3455 = add i64 %3453, -44
  %3456 = add i64 %3451, 3
  store i64 %3456, i64* %PC, align 8
  %3457 = inttoptr i64 %3455 to i32*
  store i32 %3452, i32* %3457, align 4
  %3458 = load i64, i64* %RBP, align 8
  %3459 = add i64 %3458, -44
  %3460 = load i64, i64* %PC, align 8
  %3461 = add i64 %3460, 4
  store i64 %3461, i64* %PC, align 8
  %3462 = inttoptr i64 %3459 to i32*
  %3463 = load i32, i32* %3462, align 4
  %3464 = add i32 %3463, -4
  %3465 = icmp ult i32 %3463, 4
  %3466 = zext i1 %3465 to i8
  store i8 %3466, i8* %.pre-phi, align 1, !tbaa !2432
  %3467 = and i32 %3464, 255
  %3468 = tail call i32 @llvm.ctpop.i32(i32 %3467) #8
  %3469 = trunc i32 %3468 to i8
  %3470 = and i8 %3469, 1
  %3471 = xor i8 %3470, 1
  store i8 %3471, i8* %.pre-phi23, align 1, !tbaa !2446
  %3472 = xor i32 %3463, %3464
  %3473 = lshr i32 %3472, 4
  %3474 = trunc i32 %3473 to i8
  %3475 = and i8 %3474, 1
  store i8 %3475, i8* %.pre-phi25, align 1, !tbaa !2450
  %3476 = icmp eq i32 %3464, 0
  %3477 = zext i1 %3476 to i8
  store i8 %3477, i8* %.pre-phi27, align 1, !tbaa !2447
  %3478 = lshr i32 %3464, 31
  %3479 = trunc i32 %3478 to i8
  store i8 %3479, i8* %.pre-phi29, align 1, !tbaa !2448
  %3480 = lshr i32 %3463, 31
  %3481 = xor i32 %3478, %3480
  %3482 = add nuw nsw i32 %3481, %3480
  %3483 = icmp eq i32 %3482, 2
  %3484 = zext i1 %3483 to i8
  store i8 %3484, i8* %.pre-phi31, align 1, !tbaa !2449
  %3485 = icmp ne i8 %3479, 0
  %3486 = xor i1 %3485, %3483
  %.v38 = select i1 %3486, i64 269, i64 10
  %3487 = add i64 %3460, %.v38
  store i64 %3487, i64* %PC, align 8, !tbaa !2428
  br i1 %3486, label %block_40229d, label %block_40219a

block_4020e9:                                     ; preds = %block_4020f5, %block_4020d9
  %3488 = phi i64 [ %3334, %block_4020f5 ], [ %.pre7, %block_4020d9 ]
  %3489 = load i64, i64* %RBP, align 8
  %3490 = add i64 %3489, -48
  %3491 = add i64 %3488, 3
  store i64 %3491, i64* %PC, align 8
  %3492 = inttoptr i64 %3490 to i32*
  %3493 = load i32, i32* %3492, align 4
  %3494 = zext i32 %3493 to i64
  store i64 %3494, i64* %RAX, align 8, !tbaa !2428
  %3495 = add i64 %3489, -4
  %3496 = add i64 %3488, 6
  store i64 %3496, i64* %PC, align 8
  %3497 = inttoptr i64 %3495 to i32*
  %3498 = load i32, i32* %3497, align 4
  %3499 = sub i32 %3493, %3498
  %3500 = icmp ult i32 %3493, %3498
  %3501 = zext i1 %3500 to i8
  store i8 %3501, i8* %.pre-phi, align 1, !tbaa !2432
  %3502 = and i32 %3499, 255
  %3503 = tail call i32 @llvm.ctpop.i32(i32 %3502) #8
  %3504 = trunc i32 %3503 to i8
  %3505 = and i8 %3504, 1
  %3506 = xor i8 %3505, 1
  store i8 %3506, i8* %.pre-phi23, align 1, !tbaa !2446
  %3507 = xor i32 %3498, %3493
  %3508 = xor i32 %3507, %3499
  %3509 = lshr i32 %3508, 4
  %3510 = trunc i32 %3509 to i8
  %3511 = and i8 %3510, 1
  store i8 %3511, i8* %.pre-phi25, align 1, !tbaa !2450
  %3512 = icmp eq i32 %3499, 0
  %3513 = zext i1 %3512 to i8
  store i8 %3513, i8* %.pre-phi27, align 1, !tbaa !2447
  %3514 = lshr i32 %3499, 31
  %3515 = trunc i32 %3514 to i8
  store i8 %3515, i8* %.pre-phi29, align 1, !tbaa !2448
  %3516 = lshr i32 %3493, 31
  %3517 = lshr i32 %3498, 31
  %3518 = xor i32 %3517, %3516
  %3519 = xor i32 %3514, %3516
  %3520 = add nuw nsw i32 %3519, %3518
  %3521 = icmp eq i32 %3520, 2
  %3522 = zext i1 %3521 to i8
  store i8 %3522, i8* %.pre-phi31, align 1, !tbaa !2449
  %3523 = icmp ne i8 %3515, 0
  %3524 = xor i1 %3523, %3521
  %.v37 = select i1 %3524, i64 12, i64 140
  %3525 = add i64 %3488, %.v37
  store i64 %3525, i64* %PC, align 8, !tbaa !2428
  br i1 %3524, label %block_4020f5, label %block_402175

block_4024a6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4027f3
  %3526 = phi i64 [ %.pre19, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %538, %block_4027f3 ]
  %3527 = load i64, i64* %RBP, align 8
  %3528 = add i64 %3527, -44
  %3529 = add i64 %3526, 3
  store i64 %3529, i64* %PC, align 8
  %3530 = inttoptr i64 %3528 to i32*
  %3531 = load i32, i32* %3530, align 4
  %3532 = zext i32 %3531 to i64
  store i64 %3532, i64* %RAX, align 8, !tbaa !2428
  %3533 = add i64 %3527, -20
  %3534 = add i64 %3526, 6
  store i64 %3534, i64* %PC, align 8
  %3535 = inttoptr i64 %3533 to i32*
  %3536 = load i32, i32* %3535, align 4
  %3537 = sub i32 %3531, %3536
  %3538 = icmp ult i32 %3531, %3536
  %3539 = zext i1 %3538 to i8
  store i8 %3539, i8* %.pre-phi, align 1, !tbaa !2432
  %3540 = and i32 %3537, 255
  %3541 = tail call i32 @llvm.ctpop.i32(i32 %3540) #8
  %3542 = trunc i32 %3541 to i8
  %3543 = and i8 %3542, 1
  %3544 = xor i8 %3543, 1
  store i8 %3544, i8* %.pre-phi23, align 1, !tbaa !2446
  %3545 = xor i32 %3536, %3531
  %3546 = xor i32 %3545, %3537
  %3547 = lshr i32 %3546, 4
  %3548 = trunc i32 %3547 to i8
  %3549 = and i8 %3548, 1
  store i8 %3549, i8* %.pre-phi25, align 1, !tbaa !2450
  %3550 = icmp eq i32 %3537, 0
  %3551 = zext i1 %3550 to i8
  store i8 %3551, i8* %.pre-phi27, align 1, !tbaa !2447
  %3552 = lshr i32 %3537, 31
  %3553 = trunc i32 %3552 to i8
  store i8 %3553, i8* %.pre-phi29, align 1, !tbaa !2448
  %3554 = lshr i32 %3531, 31
  %3555 = lshr i32 %3536, 31
  %3556 = xor i32 %3555, %3554
  %3557 = xor i32 %3552, %3554
  %3558 = add nuw nsw i32 %3557, %3556
  %3559 = icmp eq i32 %3558, 2
  %3560 = zext i1 %3559 to i8
  store i8 %3560, i8* %.pre-phi31, align 1, !tbaa !2449
  %3561 = icmp ne i8 %3553, 0
  %3562 = xor i1 %3561, %3559
  %.v42 = select i1 %3562, i64 12, i64 864
  %3563 = add i64 %3526, %.v42
  store i64 %3563, i64* %PC, align 8, !tbaa !2428
  br i1 %3562, label %block_4024b2, label %block_402806

block_402059:                                     ; preds = %block_402049, %block_402065
  %3564 = phi i64 [ %.pre3, %block_402049 ], [ %341, %block_402065 ]
  %3565 = load i64, i64* %RBP, align 8
  %3566 = add i64 %3565, -48
  %3567 = add i64 %3564, 3
  store i64 %3567, i64* %PC, align 8
  %3568 = inttoptr i64 %3566 to i32*
  %3569 = load i32, i32* %3568, align 4
  %3570 = zext i32 %3569 to i64
  store i64 %3570, i64* %RAX, align 8, !tbaa !2428
  %3571 = add i64 %3565, -4
  %3572 = add i64 %3564, 6
  store i64 %3572, i64* %PC, align 8
  %3573 = inttoptr i64 %3571 to i32*
  %3574 = load i32, i32* %3573, align 4
  %3575 = sub i32 %3569, %3574
  %3576 = icmp ult i32 %3569, %3574
  %3577 = zext i1 %3576 to i8
  store i8 %3577, i8* %.pre-phi, align 1, !tbaa !2432
  %3578 = and i32 %3575, 255
  %3579 = tail call i32 @llvm.ctpop.i32(i32 %3578) #8
  %3580 = trunc i32 %3579 to i8
  %3581 = and i8 %3580, 1
  %3582 = xor i8 %3581, 1
  store i8 %3582, i8* %.pre-phi23, align 1, !tbaa !2446
  %3583 = xor i32 %3574, %3569
  %3584 = xor i32 %3583, %3575
  %3585 = lshr i32 %3584, 4
  %3586 = trunc i32 %3585 to i8
  %3587 = and i8 %3586, 1
  store i8 %3587, i8* %.pre-phi25, align 1, !tbaa !2450
  %3588 = icmp eq i32 %3575, 0
  %3589 = zext i1 %3588 to i8
  store i8 %3589, i8* %.pre-phi27, align 1, !tbaa !2447
  %3590 = lshr i32 %3575, 31
  %3591 = trunc i32 %3590 to i8
  store i8 %3591, i8* %.pre-phi29, align 1, !tbaa !2448
  %3592 = lshr i32 %3569, 31
  %3593 = lshr i32 %3574, 31
  %3594 = xor i32 %3593, %3592
  %3595 = xor i32 %3590, %3592
  %3596 = add nuw nsw i32 %3595, %3594
  %3597 = icmp eq i32 %3596, 2
  %3598 = zext i1 %3597 to i8
  store i8 %3598, i8* %.pre-phi31, align 1, !tbaa !2449
  %3599 = icmp ne i8 %3591, 0
  %3600 = xor i1 %3599, %3597
  %.v35 = select i1 %3600, i64 12, i64 91
  %3601 = add i64 %3564, %.v35
  store i64 %3601, i64* %PC, align 8, !tbaa !2428
  br i1 %3600, label %block_402065, label %block_4020b4

block_40229d:                                     ; preds = %block_402298, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %3602 = phi i64 [ %3378, %block_402298 ], [ %3458, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  %3603 = phi i64 [ %4725, %block_402298 ], [ %3487, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %3604 = add i64 %3602, -20
  %3605 = add i64 %3603, 8
  store i64 %3605, i64* %PC, align 8
  %3606 = inttoptr i64 %3604 to i32*
  %3607 = load i32, i32* %3606, align 4
  %3608 = zext i32 %3607 to i64
  store i64 %3608, i64* %RCX, align 8, !tbaa !2428
  %3609 = add i64 %3602, -68
  %3610 = add i64 %3603, 11
  store i64 %3610, i64* %PC, align 8
  %3611 = inttoptr i64 %3609 to i32*
  store i32 16, i32* %3611, align 4
  %3612 = load i32, i32* %ECX, align 4
  %3613 = zext i32 %3612 to i64
  %3614 = load i64, i64* %PC, align 8
  store i64 %3613, i64* %RAX, align 8, !tbaa !2428
  %3615 = sext i32 %3612 to i64
  %3616 = lshr i64 %3615, 32
  store i64 %3616, i64* %64, align 8, !tbaa !2428
  %3617 = load i64, i64* %RBP, align 8
  %3618 = add i64 %3617, -68
  %3619 = add i64 %3614, 6
  store i64 %3619, i64* %PC, align 8
  %3620 = inttoptr i64 %3618 to i32*
  %3621 = load i32, i32* %3620, align 4
  %3622 = zext i32 %3621 to i64
  store i64 %3622, i64* %RCX, align 8, !tbaa !2428
  %3623 = add i64 %3614, 8
  store i64 %3623, i64* %PC, align 8
  %3624 = sext i32 %3621 to i64
  %3625 = shl nuw i64 %3616, 32
  %3626 = or i64 %3625, %3613
  %3627 = sdiv i64 %3626, %3624
  %3628 = shl i64 %3627, 32
  %3629 = ashr exact i64 %3628, 32
  %3630 = icmp eq i64 %3627, %3629
  br i1 %3630, label %3633, label %3631

; <label>:3631:                                   ; preds = %block_40229d
  %3632 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3623, %struct.Memory* %3454) #9
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i32, i32* %EDX, align 4
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:3633:                                   ; preds = %block_40229d
  %3634 = srem i64 %3626, %3624
  %3635 = and i64 %3627, 4294967295
  store i64 %3635, i64* %RAX, align 8, !tbaa !2428
  %3636 = and i64 %3634, 4294967295
  store i64 %3636, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %3637 = trunc i64 %3634 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %3633, %3631
  %3638 = phi i64 [ %.pre14, %3631 ], [ %3623, %3633 ]
  %3639 = phi i32 [ %.pre13, %3631 ], [ %3637, %3633 ]
  %3640 = phi i64 [ %.pre12, %3631 ], [ %3617, %3633 ]
  %3641 = phi %struct.Memory* [ %3632, %3631 ], [ %3454, %3633 ]
  %3642 = add i64 %3640, -44
  %3643 = add i64 %3638, 3
  store i64 %3643, i64* %PC, align 8
  %3644 = inttoptr i64 %3642 to i32*
  store i32 %3639, i32* %3644, align 4
  %3645 = load i64, i64* %RBP, align 8
  %3646 = add i64 %3645, -44
  %3647 = load i64, i64* %PC, align 8
  %3648 = add i64 %3647, 4
  store i64 %3648, i64* %PC, align 8
  %3649 = inttoptr i64 %3646 to i32*
  %3650 = load i32, i32* %3649, align 4
  %3651 = add i32 %3650, -8
  %3652 = icmp ult i32 %3650, 8
  %3653 = zext i1 %3652 to i8
  store i8 %3653, i8* %.pre-phi, align 1, !tbaa !2432
  %3654 = and i32 %3651, 255
  %3655 = tail call i32 @llvm.ctpop.i32(i32 %3654) #8
  %3656 = trunc i32 %3655 to i8
  %3657 = and i8 %3656, 1
  %3658 = xor i8 %3657, 1
  store i8 %3658, i8* %.pre-phi23, align 1, !tbaa !2446
  %3659 = xor i32 %3650, %3651
  %3660 = lshr i32 %3659, 4
  %3661 = trunc i32 %3660 to i8
  %3662 = and i8 %3661, 1
  store i8 %3662, i8* %.pre-phi25, align 1, !tbaa !2450
  %3663 = icmp eq i32 %3651, 0
  %3664 = zext i1 %3663 to i8
  store i8 %3664, i8* %.pre-phi27, align 1, !tbaa !2447
  %3665 = lshr i32 %3651, 31
  %3666 = trunc i32 %3665 to i8
  store i8 %3666, i8* %.pre-phi29, align 1, !tbaa !2448
  %3667 = lshr i32 %3650, 31
  %3668 = xor i32 %3665, %3667
  %3669 = add nuw nsw i32 %3668, %3667
  %3670 = icmp eq i32 %3669, 2
  %3671 = zext i1 %3670 to i8
  store i8 %3671, i8* %.pre-phi31, align 1, !tbaa !2449
  %3672 = icmp ne i8 %3666, 0
  %3673 = xor i1 %3672, %3670
  %.v40 = select i1 %3673, i64 465, i64 10
  %3674 = add i64 %3647, %.v40
  store i64 %3674, i64* %PC, align 8, !tbaa !2428
  br i1 %3673, label %block_402484, label %block_4022bd

block_40219a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %3675 = add i64 %3487, 3
  store i64 %3675, i64* %PC, align 8
  %3676 = load i32, i32* %3462, align 4
  %3677 = add i32 %3676, -1
  %3678 = zext i32 %3677 to i64
  store i64 %3678, i64* %RAX, align 8, !tbaa !2428
  %3679 = icmp eq i32 %3676, 0
  %3680 = zext i1 %3679 to i8
  store i8 %3680, i8* %.pre-phi, align 1, !tbaa !2432
  %3681 = and i32 %3677, 255
  %3682 = tail call i32 @llvm.ctpop.i32(i32 %3681) #8
  %3683 = trunc i32 %3682 to i8
  %3684 = and i8 %3683, 1
  %3685 = xor i8 %3684, 1
  store i8 %3685, i8* %.pre-phi23, align 1, !tbaa !2446
  %3686 = xor i32 %3676, %3677
  %3687 = lshr i32 %3686, 4
  %3688 = trunc i32 %3687 to i8
  %3689 = and i8 %3688, 1
  store i8 %3689, i8* %.pre-phi25, align 1, !tbaa !2450
  %3690 = icmp eq i32 %3677, 0
  %3691 = zext i1 %3690 to i8
  store i8 %3691, i8* %.pre-phi27, align 1, !tbaa !2447
  %3692 = lshr i32 %3677, 31
  %3693 = trunc i32 %3692 to i8
  store i8 %3693, i8* %.pre-phi29, align 1, !tbaa !2448
  %3694 = lshr i32 %3676, 31
  %3695 = xor i32 %3692, %3694
  %3696 = add nuw nsw i32 %3695, %3694
  %3697 = icmp eq i32 %3696, 2
  %3698 = zext i1 %3697 to i8
  store i8 %3698, i8* %.pre-phi31, align 1, !tbaa !2449
  %3699 = add i64 %3487, 9
  store i64 %3699, i64* %PC, align 8
  store i32 %3677, i32* %3462, align 4
  %3700 = load i64, i64* %RBP, align 8
  %3701 = add i64 %3700, -48
  %3702 = load i64, i64* %PC, align 8
  %3703 = add i64 %3702, 7
  store i64 %3703, i64* %PC, align 8
  %3704 = inttoptr i64 %3701 to i32*
  store i32 0, i32* %3704, align 4
  %3705 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %3706 = bitcast [32 x %union.VectorReg]* %7 to float*
  %3707 = getelementptr inbounds i8, i8* %3705, i64 4
  %3708 = bitcast i8* %3707 to float*
  %3709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3710 = bitcast i64* %3709 to float*
  %3711 = getelementptr inbounds i8, i8* %3705, i64 12
  %3712 = bitcast i8* %3711 to float*
  %3713 = bitcast %union.VectorReg* %8 to i8*
  %3714 = bitcast %union.VectorReg* %8 to float*
  %3715 = getelementptr inbounds i8, i8* %3713, i64 4
  %3716 = bitcast i8* %3715 to float*
  %3717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %3718 = bitcast i64* %3717 to float*
  %3719 = getelementptr inbounds i8, i8* %3713, i64 12
  %3720 = bitcast i8* %3719 to float*
  %3721 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3722 = bitcast i64* %3717 to <2 x i32>*
  %3723 = bitcast i8* %3715 to i32*
  %3724 = bitcast i64* %3717 to i32*
  %3725 = bitcast i8* %3719 to i32*
  %3726 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %3727 = bitcast i64* %3709 to <2 x i32>*
  %3728 = bitcast i8* %3707 to i32*
  %3729 = bitcast i64* %3709 to i32*
  %3730 = bitcast i8* %3711 to i32*
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_4021aa

block_4022d9:                                     ; preds = %block_4022cd
  %3731 = add i64 %416, -16
  %3732 = add i64 %452, 4
  store i64 %3732, i64* %PC, align 8
  %3733 = inttoptr i64 %3731 to i64*
  %3734 = load i64, i64* %3733, align 8
  store i64 %3734, i64* %RAX, align 8, !tbaa !2428
  %3735 = add i64 %452, 8
  store i64 %3735, i64* %PC, align 8
  %3736 = load i32, i32* %419, align 4
  %3737 = sext i32 %3736 to i64
  store i64 %3737, i64* %RCX, align 8, !tbaa !2428
  %3738 = shl nsw i64 %3737, 2
  %3739 = add i64 %3738, %3734
  %3740 = add i64 %452, 13
  store i64 %3740, i64* %PC, align 8
  %3741 = inttoptr i64 %3739 to i32*
  %3742 = load i32, i32* %3741, align 4
  %3743 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %3742, i32* %3743, align 1, !tbaa !2452
  store float 0.000000e+00, float* %572, align 1, !tbaa !2452
  store float 0.000000e+00, float* %574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %576, align 1, !tbaa !2452
  %3744 = add i64 %416, -32
  %3745 = add i64 %452, 17
  store i64 %3745, i64* %PC, align 8
  %3746 = inttoptr i64 %3744 to i64*
  %3747 = load i64, i64* %3746, align 8
  store i64 %3747, i64* %RAX, align 8, !tbaa !2428
  %3748 = add i64 %416, -44
  %3749 = add i64 %452, 20
  store i64 %3749, i64* %PC, align 8
  %3750 = inttoptr i64 %3748 to i32*
  %3751 = load i32, i32* %3750, align 4
  %3752 = add i32 %3751, -7
  %3753 = zext i32 %3752 to i64
  store i64 %3753, i64* %RDX, align 8, !tbaa !2428
  %3754 = icmp ult i32 %3751, 7
  %3755 = zext i1 %3754 to i8
  store i8 %3755, i8* %.pre-phi, align 1, !tbaa !2432
  %3756 = and i32 %3752, 255
  %3757 = tail call i32 @llvm.ctpop.i32(i32 %3756) #8
  %3758 = trunc i32 %3757 to i8
  %3759 = and i8 %3758, 1
  %3760 = xor i8 %3759, 1
  store i8 %3760, i8* %.pre-phi23, align 1, !tbaa !2446
  %3761 = xor i32 %3751, %3752
  %3762 = lshr i32 %3761, 4
  %3763 = trunc i32 %3762 to i8
  %3764 = and i8 %3763, 1
  store i8 %3764, i8* %.pre-phi25, align 1, !tbaa !2450
  %3765 = icmp eq i32 %3752, 0
  %3766 = zext i1 %3765 to i8
  store i8 %3766, i8* %.pre-phi27, align 1, !tbaa !2447
  %3767 = lshr i32 %3752, 31
  %3768 = trunc i32 %3767 to i8
  store i8 %3768, i8* %.pre-phi29, align 1, !tbaa !2448
  %3769 = lshr i32 %3751, 31
  %3770 = xor i32 %3767, %3769
  %3771 = add nuw nsw i32 %3770, %3769
  %3772 = icmp eq i32 %3771, 2
  %3773 = zext i1 %3772 to i8
  store i8 %3773, i8* %.pre-phi31, align 1, !tbaa !2449
  %3774 = sext i32 %3752 to i64
  store i64 %3774, i64* %RCX, align 8, !tbaa !2428
  %3775 = shl nsw i64 %3774, 2
  %3776 = add i64 %3775, %3747
  %3777 = add i64 %452, 31
  store i64 %3777, i64* %PC, align 8
  %3778 = inttoptr i64 %3776 to i32*
  %3779 = load i32, i32* %3778, align 4
  %3780 = bitcast %union.VectorReg* %8 to i32*
  store i32 %3779, i32* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %3781 = add i64 %416, -40
  %3782 = add i64 %452, 35
  store i64 %3782, i64* %PC, align 8
  %3783 = inttoptr i64 %3781 to i64*
  %3784 = load i64, i64* %3783, align 8
  store i64 %3784, i64* %RAX, align 8, !tbaa !2428
  %3785 = add i64 %416, -24
  %3786 = add i64 %452, 38
  store i64 %3786, i64* %PC, align 8
  %3787 = inttoptr i64 %3785 to i32*
  %3788 = load i32, i32* %3787, align 4
  %3789 = zext i32 %3788 to i64
  store i64 %3789, i64* %RDX, align 8, !tbaa !2428
  %3790 = add i64 %452, 41
  store i64 %3790, i64* %PC, align 8
  %3791 = load i32, i32* %3750, align 4
  %3792 = add i32 %3791, -7
  %3793 = zext i32 %3792 to i64
  store i64 %3793, i64* %RSI, align 8, !tbaa !2428
  %3794 = sext i32 %3788 to i64
  %3795 = sext i32 %3792 to i64
  %3796 = mul nsw i64 %3795, %3794
  %3797 = trunc i64 %3796 to i32
  %3798 = and i64 %3796, 4294967295
  store i64 %3798, i64* %RDX, align 8, !tbaa !2428
  %3799 = shl i64 %3796, 32
  %3800 = ashr exact i64 %3799, 32
  %3801 = icmp ne i64 %3800, %3796
  %3802 = zext i1 %3801 to i8
  store i8 %3802, i8* %.pre-phi, align 1, !tbaa !2432
  %3803 = and i32 %3797, 255
  %3804 = tail call i32 @llvm.ctpop.i32(i32 %3803) #8
  %3805 = trunc i32 %3804 to i8
  %3806 = and i8 %3805, 1
  %3807 = xor i8 %3806, 1
  store i8 %3807, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3808 = lshr i32 %3797, 31
  %3809 = trunc i32 %3808 to i8
  store i8 %3809, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3802, i8* %.pre-phi31, align 1, !tbaa !2449
  %3810 = load i64, i64* %RBP, align 8
  %3811 = add i64 %3810, -48
  %3812 = add i64 %452, 50
  store i64 %3812, i64* %PC, align 8
  %3813 = inttoptr i64 %3811 to i32*
  %3814 = load i32, i32* %3813, align 4
  %3815 = add i32 %3814, %3797
  %3816 = zext i32 %3815 to i64
  store i64 %3816, i64* %RDX, align 8, !tbaa !2428
  %3817 = icmp ult i32 %3815, %3797
  %3818 = icmp ult i32 %3815, %3814
  %3819 = or i1 %3817, %3818
  %3820 = zext i1 %3819 to i8
  store i8 %3820, i8* %.pre-phi, align 1, !tbaa !2432
  %3821 = and i32 %3815, 255
  %3822 = tail call i32 @llvm.ctpop.i32(i32 %3821) #8
  %3823 = trunc i32 %3822 to i8
  %3824 = and i8 %3823, 1
  %3825 = xor i8 %3824, 1
  store i8 %3825, i8* %.pre-phi23, align 1, !tbaa !2446
  %3826 = xor i32 %3814, %3797
  %3827 = xor i32 %3826, %3815
  %3828 = lshr i32 %3827, 4
  %3829 = trunc i32 %3828 to i8
  %3830 = and i8 %3829, 1
  store i8 %3830, i8* %.pre-phi25, align 1, !tbaa !2450
  %3831 = icmp eq i32 %3815, 0
  %3832 = zext i1 %3831 to i8
  store i8 %3832, i8* %.pre-phi27, align 1, !tbaa !2447
  %3833 = lshr i32 %3815, 31
  %3834 = trunc i32 %3833 to i8
  store i8 %3834, i8* %.pre-phi29, align 1, !tbaa !2448
  %3835 = lshr i32 %3814, 31
  %3836 = xor i32 %3833, %3808
  %3837 = xor i32 %3833, %3835
  %3838 = add nuw nsw i32 %3836, %3837
  %3839 = icmp eq i32 %3838, 2
  %3840 = zext i1 %3839 to i8
  store i8 %3840, i8* %.pre-phi31, align 1, !tbaa !2449
  %3841 = sext i32 %3815 to i64
  store i64 %3841, i64* %RCX, align 8, !tbaa !2428
  %3842 = shl nsw i64 %3841, 2
  %3843 = add i64 %3842, %3784
  %3844 = add i64 %452, 58
  store i64 %3844, i64* %PC, align 8
  %3845 = load <2 x float>, <2 x float>* %585, align 1
  %3846 = load <2 x i32>, <2 x i32>* %586, align 1
  %3847 = inttoptr i64 %3843 to float*
  %3848 = load float, float* %3847, align 4
  %3849 = extractelement <2 x float> %3845, i32 0
  %3850 = fmul float %3849, %3848
  store float %3850, float* %578, align 1, !tbaa !2452
  %3851 = bitcast <2 x float> %3845 to <2 x i32>
  %3852 = extractelement <2 x i32> %3851, i32 1
  store i32 %3852, i32* %587, align 1, !tbaa !2452
  %3853 = extractelement <2 x i32> %3846, i32 0
  store i32 %3853, i32* %588, align 1, !tbaa !2452
  %3854 = extractelement <2 x i32> %3846, i32 1
  store i32 %3854, i32* %589, align 1, !tbaa !2452
  %3855 = load <2 x float>, <2 x float>* %590, align 1
  %3856 = load <2 x i32>, <2 x i32>* %591, align 1
  %3857 = load <2 x float>, <2 x float>* %585, align 1
  %3858 = extractelement <2 x float> %3855, i32 0
  %3859 = extractelement <2 x float> %3857, i32 0
  %3860 = fadd float %3858, %3859
  store float %3860, float* %570, align 1, !tbaa !2452
  %3861 = bitcast <2 x float> %3855 to <2 x i32>
  %3862 = extractelement <2 x i32> %3861, i32 1
  store i32 %3862, i32* %592, align 1, !tbaa !2452
  %3863 = extractelement <2 x i32> %3856, i32 0
  store i32 %3863, i32* %593, align 1, !tbaa !2452
  %3864 = extractelement <2 x i32> %3856, i32 1
  store i32 %3864, i32* %594, align 1, !tbaa !2452
  %3865 = add i64 %3810, -32
  %3866 = add i64 %452, 66
  store i64 %3866, i64* %PC, align 8
  %3867 = inttoptr i64 %3865 to i64*
  %3868 = load i64, i64* %3867, align 8
  store i64 %3868, i64* %RAX, align 8, !tbaa !2428
  %3869 = add i64 %3810, -44
  %3870 = add i64 %452, 69
  store i64 %3870, i64* %PC, align 8
  %3871 = inttoptr i64 %3869 to i32*
  %3872 = load i32, i32* %3871, align 4
  %3873 = add i32 %3872, -6
  %3874 = zext i32 %3873 to i64
  store i64 %3874, i64* %RDX, align 8, !tbaa !2428
  %3875 = icmp ult i32 %3872, 6
  %3876 = zext i1 %3875 to i8
  store i8 %3876, i8* %.pre-phi, align 1, !tbaa !2432
  %3877 = and i32 %3873, 255
  %3878 = tail call i32 @llvm.ctpop.i32(i32 %3877) #8
  %3879 = trunc i32 %3878 to i8
  %3880 = and i8 %3879, 1
  %3881 = xor i8 %3880, 1
  store i8 %3881, i8* %.pre-phi23, align 1, !tbaa !2446
  %3882 = xor i32 %3872, %3873
  %3883 = lshr i32 %3882, 4
  %3884 = trunc i32 %3883 to i8
  %3885 = and i8 %3884, 1
  store i8 %3885, i8* %.pre-phi25, align 1, !tbaa !2450
  %3886 = icmp eq i32 %3873, 0
  %3887 = zext i1 %3886 to i8
  store i8 %3887, i8* %.pre-phi27, align 1, !tbaa !2447
  %3888 = lshr i32 %3873, 31
  %3889 = trunc i32 %3888 to i8
  store i8 %3889, i8* %.pre-phi29, align 1, !tbaa !2448
  %3890 = lshr i32 %3872, 31
  %3891 = xor i32 %3888, %3890
  %3892 = add nuw nsw i32 %3891, %3890
  %3893 = icmp eq i32 %3892, 2
  %3894 = zext i1 %3893 to i8
  store i8 %3894, i8* %.pre-phi31, align 1, !tbaa !2449
  %3895 = sext i32 %3873 to i64
  store i64 %3895, i64* %RCX, align 8, !tbaa !2428
  %3896 = shl nsw i64 %3895, 2
  %3897 = add i64 %3896, %3868
  %3898 = add i64 %452, 80
  store i64 %3898, i64* %PC, align 8
  %3899 = inttoptr i64 %3897 to i32*
  %3900 = load i32, i32* %3899, align 4
  store i32 %3900, i32* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %3901 = load i64, i64* %RBP, align 8
  %3902 = add i64 %3901, -40
  %3903 = add i64 %452, 84
  store i64 %3903, i64* %PC, align 8
  %3904 = inttoptr i64 %3902 to i64*
  %3905 = load i64, i64* %3904, align 8
  store i64 %3905, i64* %RAX, align 8, !tbaa !2428
  %3906 = add i64 %3901, -24
  %3907 = add i64 %452, 87
  store i64 %3907, i64* %PC, align 8
  %3908 = inttoptr i64 %3906 to i32*
  %3909 = load i32, i32* %3908, align 4
  %3910 = zext i32 %3909 to i64
  store i64 %3910, i64* %RDX, align 8, !tbaa !2428
  %3911 = add i64 %3901, -44
  %3912 = add i64 %452, 90
  store i64 %3912, i64* %PC, align 8
  %3913 = inttoptr i64 %3911 to i32*
  %3914 = load i32, i32* %3913, align 4
  %3915 = add i32 %3914, -6
  %3916 = zext i32 %3915 to i64
  store i64 %3916, i64* %RSI, align 8, !tbaa !2428
  %3917 = sext i32 %3909 to i64
  %3918 = sext i32 %3915 to i64
  %3919 = mul nsw i64 %3918, %3917
  %3920 = trunc i64 %3919 to i32
  %3921 = and i64 %3919, 4294967295
  store i64 %3921, i64* %RDX, align 8, !tbaa !2428
  %3922 = shl i64 %3919, 32
  %3923 = ashr exact i64 %3922, 32
  %3924 = icmp ne i64 %3923, %3919
  %3925 = zext i1 %3924 to i8
  store i8 %3925, i8* %.pre-phi, align 1, !tbaa !2432
  %3926 = and i32 %3920, 255
  %3927 = tail call i32 @llvm.ctpop.i32(i32 %3926) #8
  %3928 = trunc i32 %3927 to i8
  %3929 = and i8 %3928, 1
  %3930 = xor i8 %3929, 1
  store i8 %3930, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3931 = lshr i32 %3920, 31
  %3932 = trunc i32 %3931 to i8
  store i8 %3932, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3925, i8* %.pre-phi31, align 1, !tbaa !2449
  %3933 = add i64 %3901, -48
  %3934 = add i64 %452, 99
  store i64 %3934, i64* %PC, align 8
  %3935 = inttoptr i64 %3933 to i32*
  %3936 = load i32, i32* %3935, align 4
  %3937 = add i32 %3936, %3920
  %3938 = zext i32 %3937 to i64
  store i64 %3938, i64* %RDX, align 8, !tbaa !2428
  %3939 = icmp ult i32 %3937, %3920
  %3940 = icmp ult i32 %3937, %3936
  %3941 = or i1 %3939, %3940
  %3942 = zext i1 %3941 to i8
  store i8 %3942, i8* %.pre-phi, align 1, !tbaa !2432
  %3943 = and i32 %3937, 255
  %3944 = tail call i32 @llvm.ctpop.i32(i32 %3943) #8
  %3945 = trunc i32 %3944 to i8
  %3946 = and i8 %3945, 1
  %3947 = xor i8 %3946, 1
  store i8 %3947, i8* %.pre-phi23, align 1, !tbaa !2446
  %3948 = xor i32 %3936, %3920
  %3949 = xor i32 %3948, %3937
  %3950 = lshr i32 %3949, 4
  %3951 = trunc i32 %3950 to i8
  %3952 = and i8 %3951, 1
  store i8 %3952, i8* %.pre-phi25, align 1, !tbaa !2450
  %3953 = icmp eq i32 %3937, 0
  %3954 = zext i1 %3953 to i8
  store i8 %3954, i8* %.pre-phi27, align 1, !tbaa !2447
  %3955 = lshr i32 %3937, 31
  %3956 = trunc i32 %3955 to i8
  store i8 %3956, i8* %.pre-phi29, align 1, !tbaa !2448
  %3957 = lshr i32 %3936, 31
  %3958 = xor i32 %3955, %3931
  %3959 = xor i32 %3955, %3957
  %3960 = add nuw nsw i32 %3958, %3959
  %3961 = icmp eq i32 %3960, 2
  %3962 = zext i1 %3961 to i8
  store i8 %3962, i8* %.pre-phi31, align 1, !tbaa !2449
  %3963 = sext i32 %3937 to i64
  store i64 %3963, i64* %RCX, align 8, !tbaa !2428
  %3964 = shl nsw i64 %3963, 2
  %3965 = add i64 %3964, %3905
  %3966 = add i64 %452, 107
  store i64 %3966, i64* %PC, align 8
  %3967 = load <2 x float>, <2 x float>* %585, align 1
  %3968 = load <2 x i32>, <2 x i32>* %586, align 1
  %3969 = inttoptr i64 %3965 to float*
  %3970 = load float, float* %3969, align 4
  %3971 = extractelement <2 x float> %3967, i32 0
  %3972 = fmul float %3971, %3970
  store float %3972, float* %578, align 1, !tbaa !2452
  %3973 = bitcast <2 x float> %3967 to <2 x i32>
  %3974 = extractelement <2 x i32> %3973, i32 1
  store i32 %3974, i32* %587, align 1, !tbaa !2452
  %3975 = extractelement <2 x i32> %3968, i32 0
  store i32 %3975, i32* %588, align 1, !tbaa !2452
  %3976 = extractelement <2 x i32> %3968, i32 1
  store i32 %3976, i32* %589, align 1, !tbaa !2452
  %3977 = load <2 x float>, <2 x float>* %590, align 1
  %3978 = load <2 x i32>, <2 x i32>* %591, align 1
  %3979 = load <2 x float>, <2 x float>* %585, align 1
  %3980 = extractelement <2 x float> %3977, i32 0
  %3981 = extractelement <2 x float> %3979, i32 0
  %3982 = fadd float %3980, %3981
  store float %3982, float* %570, align 1, !tbaa !2452
  %3983 = bitcast <2 x float> %3977 to <2 x i32>
  %3984 = extractelement <2 x i32> %3983, i32 1
  store i32 %3984, i32* %592, align 1, !tbaa !2452
  %3985 = extractelement <2 x i32> %3978, i32 0
  store i32 %3985, i32* %593, align 1, !tbaa !2452
  %3986 = extractelement <2 x i32> %3978, i32 1
  store i32 %3986, i32* %594, align 1, !tbaa !2452
  %3987 = load i64, i64* %RBP, align 8
  %3988 = add i64 %3987, -32
  %3989 = add i64 %452, 115
  store i64 %3989, i64* %PC, align 8
  %3990 = inttoptr i64 %3988 to i64*
  %3991 = load i64, i64* %3990, align 8
  store i64 %3991, i64* %RAX, align 8, !tbaa !2428
  %3992 = add i64 %3987, -44
  %3993 = add i64 %452, 118
  store i64 %3993, i64* %PC, align 8
  %3994 = inttoptr i64 %3992 to i32*
  %3995 = load i32, i32* %3994, align 4
  %3996 = add i32 %3995, -5
  %3997 = zext i32 %3996 to i64
  store i64 %3997, i64* %RDX, align 8, !tbaa !2428
  %3998 = icmp ult i32 %3995, 5
  %3999 = zext i1 %3998 to i8
  store i8 %3999, i8* %.pre-phi, align 1, !tbaa !2432
  %4000 = and i32 %3996, 255
  %4001 = tail call i32 @llvm.ctpop.i32(i32 %4000) #8
  %4002 = trunc i32 %4001 to i8
  %4003 = and i8 %4002, 1
  %4004 = xor i8 %4003, 1
  store i8 %4004, i8* %.pre-phi23, align 1, !tbaa !2446
  %4005 = xor i32 %3995, %3996
  %4006 = lshr i32 %4005, 4
  %4007 = trunc i32 %4006 to i8
  %4008 = and i8 %4007, 1
  store i8 %4008, i8* %.pre-phi25, align 1, !tbaa !2450
  %4009 = icmp eq i32 %3996, 0
  %4010 = zext i1 %4009 to i8
  store i8 %4010, i8* %.pre-phi27, align 1, !tbaa !2447
  %4011 = lshr i32 %3996, 31
  %4012 = trunc i32 %4011 to i8
  store i8 %4012, i8* %.pre-phi29, align 1, !tbaa !2448
  %4013 = lshr i32 %3995, 31
  %4014 = xor i32 %4011, %4013
  %4015 = add nuw nsw i32 %4014, %4013
  %4016 = icmp eq i32 %4015, 2
  %4017 = zext i1 %4016 to i8
  store i8 %4017, i8* %.pre-phi31, align 1, !tbaa !2449
  %4018 = sext i32 %3996 to i64
  store i64 %4018, i64* %RCX, align 8, !tbaa !2428
  %4019 = shl nsw i64 %4018, 2
  %4020 = add i64 %4019, %3991
  %4021 = add i64 %452, 129
  store i64 %4021, i64* %PC, align 8
  %4022 = inttoptr i64 %4020 to i32*
  %4023 = load i32, i32* %4022, align 4
  store i32 %4023, i32* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4024 = add i64 %3987, -40
  %4025 = add i64 %452, 133
  store i64 %4025, i64* %PC, align 8
  %4026 = inttoptr i64 %4024 to i64*
  %4027 = load i64, i64* %4026, align 8
  store i64 %4027, i64* %RAX, align 8, !tbaa !2428
  %4028 = add i64 %3987, -24
  %4029 = add i64 %452, 136
  store i64 %4029, i64* %PC, align 8
  %4030 = inttoptr i64 %4028 to i32*
  %4031 = load i32, i32* %4030, align 4
  %4032 = zext i32 %4031 to i64
  store i64 %4032, i64* %RDX, align 8, !tbaa !2428
  %4033 = add i64 %452, 139
  store i64 %4033, i64* %PC, align 8
  %4034 = load i32, i32* %3994, align 4
  %4035 = add i32 %4034, -5
  %4036 = zext i32 %4035 to i64
  store i64 %4036, i64* %RSI, align 8, !tbaa !2428
  %4037 = sext i32 %4031 to i64
  %4038 = sext i32 %4035 to i64
  %4039 = mul nsw i64 %4038, %4037
  %4040 = trunc i64 %4039 to i32
  %4041 = and i64 %4039, 4294967295
  store i64 %4041, i64* %RDX, align 8, !tbaa !2428
  %4042 = shl i64 %4039, 32
  %4043 = ashr exact i64 %4042, 32
  %4044 = icmp ne i64 %4043, %4039
  %4045 = zext i1 %4044 to i8
  store i8 %4045, i8* %.pre-phi, align 1, !tbaa !2432
  %4046 = and i32 %4040, 255
  %4047 = tail call i32 @llvm.ctpop.i32(i32 %4046) #8
  %4048 = trunc i32 %4047 to i8
  %4049 = and i8 %4048, 1
  %4050 = xor i8 %4049, 1
  store i8 %4050, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4051 = lshr i32 %4040, 31
  %4052 = trunc i32 %4051 to i8
  store i8 %4052, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4045, i8* %.pre-phi31, align 1, !tbaa !2449
  %4053 = add i64 %3987, -48
  %4054 = add i64 %452, 148
  store i64 %4054, i64* %PC, align 8
  %4055 = inttoptr i64 %4053 to i32*
  %4056 = load i32, i32* %4055, align 4
  %4057 = add i32 %4056, %4040
  %4058 = zext i32 %4057 to i64
  store i64 %4058, i64* %RDX, align 8, !tbaa !2428
  %4059 = icmp ult i32 %4057, %4040
  %4060 = icmp ult i32 %4057, %4056
  %4061 = or i1 %4059, %4060
  %4062 = zext i1 %4061 to i8
  store i8 %4062, i8* %.pre-phi, align 1, !tbaa !2432
  %4063 = and i32 %4057, 255
  %4064 = tail call i32 @llvm.ctpop.i32(i32 %4063) #8
  %4065 = trunc i32 %4064 to i8
  %4066 = and i8 %4065, 1
  %4067 = xor i8 %4066, 1
  store i8 %4067, i8* %.pre-phi23, align 1, !tbaa !2446
  %4068 = xor i32 %4056, %4040
  %4069 = xor i32 %4068, %4057
  %4070 = lshr i32 %4069, 4
  %4071 = trunc i32 %4070 to i8
  %4072 = and i8 %4071, 1
  store i8 %4072, i8* %.pre-phi25, align 1, !tbaa !2450
  %4073 = icmp eq i32 %4057, 0
  %4074 = zext i1 %4073 to i8
  store i8 %4074, i8* %.pre-phi27, align 1, !tbaa !2447
  %4075 = lshr i32 %4057, 31
  %4076 = trunc i32 %4075 to i8
  store i8 %4076, i8* %.pre-phi29, align 1, !tbaa !2448
  %4077 = lshr i32 %4056, 31
  %4078 = xor i32 %4075, %4051
  %4079 = xor i32 %4075, %4077
  %4080 = add nuw nsw i32 %4078, %4079
  %4081 = icmp eq i32 %4080, 2
  %4082 = zext i1 %4081 to i8
  store i8 %4082, i8* %.pre-phi31, align 1, !tbaa !2449
  %4083 = sext i32 %4057 to i64
  store i64 %4083, i64* %RCX, align 8, !tbaa !2428
  %4084 = shl nsw i64 %4083, 2
  %4085 = add i64 %4084, %4027
  %4086 = add i64 %452, 156
  store i64 %4086, i64* %PC, align 8
  %4087 = load <2 x float>, <2 x float>* %585, align 1
  %4088 = load <2 x i32>, <2 x i32>* %586, align 1
  %4089 = inttoptr i64 %4085 to float*
  %4090 = load float, float* %4089, align 4
  %4091 = extractelement <2 x float> %4087, i32 0
  %4092 = fmul float %4091, %4090
  store float %4092, float* %578, align 1, !tbaa !2452
  %4093 = bitcast <2 x float> %4087 to <2 x i32>
  %4094 = extractelement <2 x i32> %4093, i32 1
  store i32 %4094, i32* %587, align 1, !tbaa !2452
  %4095 = extractelement <2 x i32> %4088, i32 0
  store i32 %4095, i32* %588, align 1, !tbaa !2452
  %4096 = extractelement <2 x i32> %4088, i32 1
  store i32 %4096, i32* %589, align 1, !tbaa !2452
  %4097 = load <2 x float>, <2 x float>* %590, align 1
  %4098 = load <2 x i32>, <2 x i32>* %591, align 1
  %4099 = load <2 x float>, <2 x float>* %585, align 1
  %4100 = extractelement <2 x float> %4097, i32 0
  %4101 = extractelement <2 x float> %4099, i32 0
  %4102 = fadd float %4100, %4101
  store float %4102, float* %570, align 1, !tbaa !2452
  %4103 = bitcast <2 x float> %4097 to <2 x i32>
  %4104 = extractelement <2 x i32> %4103, i32 1
  store i32 %4104, i32* %592, align 1, !tbaa !2452
  %4105 = extractelement <2 x i32> %4098, i32 0
  store i32 %4105, i32* %593, align 1, !tbaa !2452
  %4106 = extractelement <2 x i32> %4098, i32 1
  store i32 %4106, i32* %594, align 1, !tbaa !2452
  %4107 = add i64 %452, 164
  store i64 %4107, i64* %PC, align 8
  %4108 = load i64, i64* %3990, align 8
  store i64 %4108, i64* %RAX, align 8, !tbaa !2428
  %4109 = add i64 %452, 167
  store i64 %4109, i64* %PC, align 8
  %4110 = load i32, i32* %3994, align 4
  %4111 = add i32 %4110, -4
  %4112 = zext i32 %4111 to i64
  store i64 %4112, i64* %RDX, align 8, !tbaa !2428
  %4113 = icmp ult i32 %4110, 4
  %4114 = zext i1 %4113 to i8
  store i8 %4114, i8* %.pre-phi, align 1, !tbaa !2432
  %4115 = and i32 %4111, 255
  %4116 = tail call i32 @llvm.ctpop.i32(i32 %4115) #8
  %4117 = trunc i32 %4116 to i8
  %4118 = and i8 %4117, 1
  %4119 = xor i8 %4118, 1
  store i8 %4119, i8* %.pre-phi23, align 1, !tbaa !2446
  %4120 = xor i32 %4110, %4111
  %4121 = lshr i32 %4120, 4
  %4122 = trunc i32 %4121 to i8
  %4123 = and i8 %4122, 1
  store i8 %4123, i8* %.pre-phi25, align 1, !tbaa !2450
  %4124 = icmp eq i32 %4111, 0
  %4125 = zext i1 %4124 to i8
  store i8 %4125, i8* %.pre-phi27, align 1, !tbaa !2447
  %4126 = lshr i32 %4111, 31
  %4127 = trunc i32 %4126 to i8
  store i8 %4127, i8* %.pre-phi29, align 1, !tbaa !2448
  %4128 = lshr i32 %4110, 31
  %4129 = xor i32 %4126, %4128
  %4130 = add nuw nsw i32 %4129, %4128
  %4131 = icmp eq i32 %4130, 2
  %4132 = zext i1 %4131 to i8
  store i8 %4132, i8* %.pre-phi31, align 1, !tbaa !2449
  %4133 = sext i32 %4111 to i64
  store i64 %4133, i64* %RCX, align 8, !tbaa !2428
  %4134 = shl nsw i64 %4133, 2
  %4135 = add i64 %4134, %4108
  %4136 = add i64 %452, 178
  store i64 %4136, i64* %PC, align 8
  %4137 = inttoptr i64 %4135 to i32*
  %4138 = load i32, i32* %4137, align 4
  store i32 %4138, i32* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4139 = load i64, i64* %RBP, align 8
  %4140 = add i64 %4139, -40
  %4141 = add i64 %452, 182
  store i64 %4141, i64* %PC, align 8
  %4142 = inttoptr i64 %4140 to i64*
  %4143 = load i64, i64* %4142, align 8
  store i64 %4143, i64* %RAX, align 8, !tbaa !2428
  %4144 = add i64 %4139, -24
  %4145 = add i64 %452, 185
  store i64 %4145, i64* %PC, align 8
  %4146 = inttoptr i64 %4144 to i32*
  %4147 = load i32, i32* %4146, align 4
  %4148 = zext i32 %4147 to i64
  store i64 %4148, i64* %RDX, align 8, !tbaa !2428
  %4149 = add i64 %4139, -44
  %4150 = add i64 %452, 188
  store i64 %4150, i64* %PC, align 8
  %4151 = inttoptr i64 %4149 to i32*
  %4152 = load i32, i32* %4151, align 4
  %4153 = add i32 %4152, -4
  %4154 = zext i32 %4153 to i64
  store i64 %4154, i64* %RSI, align 8, !tbaa !2428
  %4155 = sext i32 %4147 to i64
  %4156 = sext i32 %4153 to i64
  %4157 = mul nsw i64 %4156, %4155
  %4158 = trunc i64 %4157 to i32
  %4159 = and i64 %4157, 4294967295
  store i64 %4159, i64* %RDX, align 8, !tbaa !2428
  %4160 = shl i64 %4157, 32
  %4161 = ashr exact i64 %4160, 32
  %4162 = icmp ne i64 %4161, %4157
  %4163 = zext i1 %4162 to i8
  store i8 %4163, i8* %.pre-phi, align 1, !tbaa !2432
  %4164 = and i32 %4158, 255
  %4165 = tail call i32 @llvm.ctpop.i32(i32 %4164) #8
  %4166 = trunc i32 %4165 to i8
  %4167 = and i8 %4166, 1
  %4168 = xor i8 %4167, 1
  store i8 %4168, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4169 = lshr i32 %4158, 31
  %4170 = trunc i32 %4169 to i8
  store i8 %4170, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4163, i8* %.pre-phi31, align 1, !tbaa !2449
  %4171 = add i64 %4139, -48
  %4172 = add i64 %452, 197
  store i64 %4172, i64* %PC, align 8
  %4173 = inttoptr i64 %4171 to i32*
  %4174 = load i32, i32* %4173, align 4
  %4175 = add i32 %4174, %4158
  %4176 = zext i32 %4175 to i64
  store i64 %4176, i64* %RDX, align 8, !tbaa !2428
  %4177 = icmp ult i32 %4175, %4158
  %4178 = icmp ult i32 %4175, %4174
  %4179 = or i1 %4177, %4178
  %4180 = zext i1 %4179 to i8
  store i8 %4180, i8* %.pre-phi, align 1, !tbaa !2432
  %4181 = and i32 %4175, 255
  %4182 = tail call i32 @llvm.ctpop.i32(i32 %4181) #8
  %4183 = trunc i32 %4182 to i8
  %4184 = and i8 %4183, 1
  %4185 = xor i8 %4184, 1
  store i8 %4185, i8* %.pre-phi23, align 1, !tbaa !2446
  %4186 = xor i32 %4174, %4158
  %4187 = xor i32 %4186, %4175
  %4188 = lshr i32 %4187, 4
  %4189 = trunc i32 %4188 to i8
  %4190 = and i8 %4189, 1
  store i8 %4190, i8* %.pre-phi25, align 1, !tbaa !2450
  %4191 = icmp eq i32 %4175, 0
  %4192 = zext i1 %4191 to i8
  store i8 %4192, i8* %.pre-phi27, align 1, !tbaa !2447
  %4193 = lshr i32 %4175, 31
  %4194 = trunc i32 %4193 to i8
  store i8 %4194, i8* %.pre-phi29, align 1, !tbaa !2448
  %4195 = lshr i32 %4174, 31
  %4196 = xor i32 %4193, %4169
  %4197 = xor i32 %4193, %4195
  %4198 = add nuw nsw i32 %4196, %4197
  %4199 = icmp eq i32 %4198, 2
  %4200 = zext i1 %4199 to i8
  store i8 %4200, i8* %.pre-phi31, align 1, !tbaa !2449
  %4201 = sext i32 %4175 to i64
  store i64 %4201, i64* %RCX, align 8, !tbaa !2428
  %4202 = shl nsw i64 %4201, 2
  %4203 = add i64 %4202, %4143
  %4204 = add i64 %452, 205
  store i64 %4204, i64* %PC, align 8
  %4205 = load <2 x float>, <2 x float>* %585, align 1
  %4206 = load <2 x i32>, <2 x i32>* %586, align 1
  %4207 = inttoptr i64 %4203 to float*
  %4208 = load float, float* %4207, align 4
  %4209 = extractelement <2 x float> %4205, i32 0
  %4210 = fmul float %4209, %4208
  store float %4210, float* %578, align 1, !tbaa !2452
  %4211 = bitcast <2 x float> %4205 to <2 x i32>
  %4212 = extractelement <2 x i32> %4211, i32 1
  store i32 %4212, i32* %587, align 1, !tbaa !2452
  %4213 = extractelement <2 x i32> %4206, i32 0
  store i32 %4213, i32* %588, align 1, !tbaa !2452
  %4214 = extractelement <2 x i32> %4206, i32 1
  store i32 %4214, i32* %589, align 1, !tbaa !2452
  %4215 = load <2 x float>, <2 x float>* %590, align 1
  %4216 = load <2 x i32>, <2 x i32>* %591, align 1
  %4217 = load <2 x float>, <2 x float>* %585, align 1
  %4218 = extractelement <2 x float> %4215, i32 0
  %4219 = extractelement <2 x float> %4217, i32 0
  %4220 = fadd float %4218, %4219
  store float %4220, float* %570, align 1, !tbaa !2452
  %4221 = bitcast <2 x float> %4215 to <2 x i32>
  %4222 = extractelement <2 x i32> %4221, i32 1
  store i32 %4222, i32* %592, align 1, !tbaa !2452
  %4223 = extractelement <2 x i32> %4216, i32 0
  store i32 %4223, i32* %593, align 1, !tbaa !2452
  %4224 = extractelement <2 x i32> %4216, i32 1
  store i32 %4224, i32* %594, align 1, !tbaa !2452
  %4225 = load i64, i64* %RBP, align 8
  %4226 = add i64 %4225, -32
  %4227 = add i64 %452, 213
  store i64 %4227, i64* %PC, align 8
  %4228 = inttoptr i64 %4226 to i64*
  %4229 = load i64, i64* %4228, align 8
  store i64 %4229, i64* %RAX, align 8, !tbaa !2428
  %4230 = add i64 %4225, -44
  %4231 = add i64 %452, 216
  store i64 %4231, i64* %PC, align 8
  %4232 = inttoptr i64 %4230 to i32*
  %4233 = load i32, i32* %4232, align 4
  %4234 = add i32 %4233, -3
  %4235 = zext i32 %4234 to i64
  store i64 %4235, i64* %RDX, align 8, !tbaa !2428
  %4236 = icmp ult i32 %4233, 3
  %4237 = zext i1 %4236 to i8
  store i8 %4237, i8* %.pre-phi, align 1, !tbaa !2432
  %4238 = and i32 %4234, 255
  %4239 = tail call i32 @llvm.ctpop.i32(i32 %4238) #8
  %4240 = trunc i32 %4239 to i8
  %4241 = and i8 %4240, 1
  %4242 = xor i8 %4241, 1
  store i8 %4242, i8* %.pre-phi23, align 1, !tbaa !2446
  %4243 = xor i32 %4233, %4234
  %4244 = lshr i32 %4243, 4
  %4245 = trunc i32 %4244 to i8
  %4246 = and i8 %4245, 1
  store i8 %4246, i8* %.pre-phi25, align 1, !tbaa !2450
  %4247 = icmp eq i32 %4234, 0
  %4248 = zext i1 %4247 to i8
  store i8 %4248, i8* %.pre-phi27, align 1, !tbaa !2447
  %4249 = lshr i32 %4234, 31
  %4250 = trunc i32 %4249 to i8
  store i8 %4250, i8* %.pre-phi29, align 1, !tbaa !2448
  %4251 = lshr i32 %4233, 31
  %4252 = xor i32 %4249, %4251
  %4253 = add nuw nsw i32 %4252, %4251
  %4254 = icmp eq i32 %4253, 2
  %4255 = zext i1 %4254 to i8
  store i8 %4255, i8* %.pre-phi31, align 1, !tbaa !2449
  %4256 = sext i32 %4234 to i64
  store i64 %4256, i64* %RCX, align 8, !tbaa !2428
  %4257 = shl nsw i64 %4256, 2
  %4258 = add i64 %4257, %4229
  %4259 = add i64 %452, 227
  store i64 %4259, i64* %PC, align 8
  %4260 = inttoptr i64 %4258 to i32*
  %4261 = load i32, i32* %4260, align 4
  store i32 %4261, i32* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4262 = add i64 %4225, -40
  %4263 = add i64 %452, 231
  store i64 %4263, i64* %PC, align 8
  %4264 = inttoptr i64 %4262 to i64*
  %4265 = load i64, i64* %4264, align 8
  store i64 %4265, i64* %RAX, align 8, !tbaa !2428
  %4266 = add i64 %4225, -24
  %4267 = add i64 %452, 234
  store i64 %4267, i64* %PC, align 8
  %4268 = inttoptr i64 %4266 to i32*
  %4269 = load i32, i32* %4268, align 4
  %4270 = zext i32 %4269 to i64
  store i64 %4270, i64* %RDX, align 8, !tbaa !2428
  %4271 = add i64 %452, 237
  store i64 %4271, i64* %PC, align 8
  %4272 = load i32, i32* %4232, align 4
  %4273 = add i32 %4272, -3
  %4274 = zext i32 %4273 to i64
  store i64 %4274, i64* %RSI, align 8, !tbaa !2428
  %4275 = sext i32 %4269 to i64
  %4276 = sext i32 %4273 to i64
  %4277 = mul nsw i64 %4276, %4275
  %4278 = trunc i64 %4277 to i32
  %4279 = and i64 %4277, 4294967295
  store i64 %4279, i64* %RDX, align 8, !tbaa !2428
  %4280 = shl i64 %4277, 32
  %4281 = ashr exact i64 %4280, 32
  %4282 = icmp ne i64 %4281, %4277
  %4283 = zext i1 %4282 to i8
  store i8 %4283, i8* %.pre-phi, align 1, !tbaa !2432
  %4284 = and i32 %4278, 255
  %4285 = tail call i32 @llvm.ctpop.i32(i32 %4284) #8
  %4286 = trunc i32 %4285 to i8
  %4287 = and i8 %4286, 1
  %4288 = xor i8 %4287, 1
  store i8 %4288, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4289 = lshr i32 %4278, 31
  %4290 = trunc i32 %4289 to i8
  store i8 %4290, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4283, i8* %.pre-phi31, align 1, !tbaa !2449
  %4291 = add i64 %4225, -48
  %4292 = add i64 %452, 246
  store i64 %4292, i64* %PC, align 8
  %4293 = inttoptr i64 %4291 to i32*
  %4294 = load i32, i32* %4293, align 4
  %4295 = add i32 %4294, %4278
  %4296 = zext i32 %4295 to i64
  store i64 %4296, i64* %RDX, align 8, !tbaa !2428
  %4297 = icmp ult i32 %4295, %4278
  %4298 = icmp ult i32 %4295, %4294
  %4299 = or i1 %4297, %4298
  %4300 = zext i1 %4299 to i8
  store i8 %4300, i8* %.pre-phi, align 1, !tbaa !2432
  %4301 = and i32 %4295, 255
  %4302 = tail call i32 @llvm.ctpop.i32(i32 %4301) #8
  %4303 = trunc i32 %4302 to i8
  %4304 = and i8 %4303, 1
  %4305 = xor i8 %4304, 1
  store i8 %4305, i8* %.pre-phi23, align 1, !tbaa !2446
  %4306 = xor i32 %4294, %4278
  %4307 = xor i32 %4306, %4295
  %4308 = lshr i32 %4307, 4
  %4309 = trunc i32 %4308 to i8
  %4310 = and i8 %4309, 1
  store i8 %4310, i8* %.pre-phi25, align 1, !tbaa !2450
  %4311 = icmp eq i32 %4295, 0
  %4312 = zext i1 %4311 to i8
  store i8 %4312, i8* %.pre-phi27, align 1, !tbaa !2447
  %4313 = lshr i32 %4295, 31
  %4314 = trunc i32 %4313 to i8
  store i8 %4314, i8* %.pre-phi29, align 1, !tbaa !2448
  %4315 = lshr i32 %4294, 31
  %4316 = xor i32 %4313, %4289
  %4317 = xor i32 %4313, %4315
  %4318 = add nuw nsw i32 %4316, %4317
  %4319 = icmp eq i32 %4318, 2
  %4320 = zext i1 %4319 to i8
  store i8 %4320, i8* %.pre-phi31, align 1, !tbaa !2449
  %4321 = sext i32 %4295 to i64
  store i64 %4321, i64* %RCX, align 8, !tbaa !2428
  %4322 = shl nsw i64 %4321, 2
  %4323 = add i64 %4322, %4265
  %4324 = add i64 %452, 254
  store i64 %4324, i64* %PC, align 8
  %4325 = load <2 x float>, <2 x float>* %585, align 1
  %4326 = load <2 x i32>, <2 x i32>* %586, align 1
  %4327 = inttoptr i64 %4323 to float*
  %4328 = load float, float* %4327, align 4
  %4329 = extractelement <2 x float> %4325, i32 0
  %4330 = fmul float %4329, %4328
  store float %4330, float* %578, align 1, !tbaa !2452
  %4331 = bitcast <2 x float> %4325 to <2 x i32>
  %4332 = extractelement <2 x i32> %4331, i32 1
  store i32 %4332, i32* %587, align 1, !tbaa !2452
  %4333 = extractelement <2 x i32> %4326, i32 0
  store i32 %4333, i32* %588, align 1, !tbaa !2452
  %4334 = extractelement <2 x i32> %4326, i32 1
  store i32 %4334, i32* %589, align 1, !tbaa !2452
  %4335 = load <2 x float>, <2 x float>* %590, align 1
  %4336 = load <2 x i32>, <2 x i32>* %591, align 1
  %4337 = load <2 x float>, <2 x float>* %585, align 1
  %4338 = extractelement <2 x float> %4335, i32 0
  %4339 = extractelement <2 x float> %4337, i32 0
  %4340 = fadd float %4338, %4339
  store float %4340, float* %570, align 1, !tbaa !2452
  %4341 = bitcast <2 x float> %4335 to <2 x i32>
  %4342 = extractelement <2 x i32> %4341, i32 1
  store i32 %4342, i32* %592, align 1, !tbaa !2452
  %4343 = extractelement <2 x i32> %4336, i32 0
  store i32 %4343, i32* %593, align 1, !tbaa !2452
  %4344 = extractelement <2 x i32> %4336, i32 1
  store i32 %4344, i32* %594, align 1, !tbaa !2452
  %4345 = add i64 %452, 262
  store i64 %4345, i64* %PC, align 8
  %4346 = load i64, i64* %4228, align 8
  store i64 %4346, i64* %RAX, align 8, !tbaa !2428
  %4347 = add i64 %452, 265
  store i64 %4347, i64* %PC, align 8
  %4348 = load i32, i32* %4232, align 4
  %4349 = add i32 %4348, -2
  %4350 = zext i32 %4349 to i64
  store i64 %4350, i64* %RDX, align 8, !tbaa !2428
  %4351 = icmp ult i32 %4348, 2
  %4352 = zext i1 %4351 to i8
  store i8 %4352, i8* %.pre-phi, align 1, !tbaa !2432
  %4353 = and i32 %4349, 255
  %4354 = tail call i32 @llvm.ctpop.i32(i32 %4353) #8
  %4355 = trunc i32 %4354 to i8
  %4356 = and i8 %4355, 1
  %4357 = xor i8 %4356, 1
  store i8 %4357, i8* %.pre-phi23, align 1, !tbaa !2446
  %4358 = xor i32 %4348, %4349
  %4359 = lshr i32 %4358, 4
  %4360 = trunc i32 %4359 to i8
  %4361 = and i8 %4360, 1
  store i8 %4361, i8* %.pre-phi25, align 1, !tbaa !2450
  %4362 = icmp eq i32 %4349, 0
  %4363 = zext i1 %4362 to i8
  store i8 %4363, i8* %.pre-phi27, align 1, !tbaa !2447
  %4364 = lshr i32 %4349, 31
  %4365 = trunc i32 %4364 to i8
  store i8 %4365, i8* %.pre-phi29, align 1, !tbaa !2448
  %4366 = lshr i32 %4348, 31
  %4367 = xor i32 %4364, %4366
  %4368 = add nuw nsw i32 %4367, %4366
  %4369 = icmp eq i32 %4368, 2
  %4370 = zext i1 %4369 to i8
  store i8 %4370, i8* %.pre-phi31, align 1, !tbaa !2449
  %4371 = sext i32 %4349 to i64
  store i64 %4371, i64* %RCX, align 8, !tbaa !2428
  %4372 = shl nsw i64 %4371, 2
  %4373 = add i64 %4372, %4346
  %4374 = add i64 %452, 276
  store i64 %4374, i64* %PC, align 8
  %4375 = inttoptr i64 %4373 to i32*
  %4376 = load i32, i32* %4375, align 4
  store i32 %4376, i32* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4377 = load i64, i64* %RBP, align 8
  %4378 = add i64 %4377, -40
  %4379 = add i64 %452, 280
  store i64 %4379, i64* %PC, align 8
  %4380 = inttoptr i64 %4378 to i64*
  %4381 = load i64, i64* %4380, align 8
  store i64 %4381, i64* %RAX, align 8, !tbaa !2428
  %4382 = add i64 %4377, -24
  %4383 = add i64 %452, 283
  store i64 %4383, i64* %PC, align 8
  %4384 = inttoptr i64 %4382 to i32*
  %4385 = load i32, i32* %4384, align 4
  %4386 = zext i32 %4385 to i64
  store i64 %4386, i64* %RDX, align 8, !tbaa !2428
  %4387 = add i64 %4377, -44
  %4388 = add i64 %452, 286
  store i64 %4388, i64* %PC, align 8
  %4389 = inttoptr i64 %4387 to i32*
  %4390 = load i32, i32* %4389, align 4
  %4391 = add i32 %4390, -2
  %4392 = zext i32 %4391 to i64
  store i64 %4392, i64* %RSI, align 8, !tbaa !2428
  %4393 = sext i32 %4385 to i64
  %4394 = sext i32 %4391 to i64
  %4395 = mul nsw i64 %4394, %4393
  %4396 = trunc i64 %4395 to i32
  %4397 = and i64 %4395, 4294967295
  store i64 %4397, i64* %RDX, align 8, !tbaa !2428
  %4398 = shl i64 %4395, 32
  %4399 = ashr exact i64 %4398, 32
  %4400 = icmp ne i64 %4399, %4395
  %4401 = zext i1 %4400 to i8
  store i8 %4401, i8* %.pre-phi, align 1, !tbaa !2432
  %4402 = and i32 %4396, 255
  %4403 = tail call i32 @llvm.ctpop.i32(i32 %4402) #8
  %4404 = trunc i32 %4403 to i8
  %4405 = and i8 %4404, 1
  %4406 = xor i8 %4405, 1
  store i8 %4406, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4407 = lshr i32 %4396, 31
  %4408 = trunc i32 %4407 to i8
  store i8 %4408, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4401, i8* %.pre-phi31, align 1, !tbaa !2449
  %4409 = add i64 %4377, -48
  %4410 = add i64 %452, 295
  store i64 %4410, i64* %PC, align 8
  %4411 = inttoptr i64 %4409 to i32*
  %4412 = load i32, i32* %4411, align 4
  %4413 = add i32 %4412, %4396
  %4414 = zext i32 %4413 to i64
  store i64 %4414, i64* %RDX, align 8, !tbaa !2428
  %4415 = icmp ult i32 %4413, %4396
  %4416 = icmp ult i32 %4413, %4412
  %4417 = or i1 %4415, %4416
  %4418 = zext i1 %4417 to i8
  store i8 %4418, i8* %.pre-phi, align 1, !tbaa !2432
  %4419 = and i32 %4413, 255
  %4420 = tail call i32 @llvm.ctpop.i32(i32 %4419) #8
  %4421 = trunc i32 %4420 to i8
  %4422 = and i8 %4421, 1
  %4423 = xor i8 %4422, 1
  store i8 %4423, i8* %.pre-phi23, align 1, !tbaa !2446
  %4424 = xor i32 %4412, %4396
  %4425 = xor i32 %4424, %4413
  %4426 = lshr i32 %4425, 4
  %4427 = trunc i32 %4426 to i8
  %4428 = and i8 %4427, 1
  store i8 %4428, i8* %.pre-phi25, align 1, !tbaa !2450
  %4429 = icmp eq i32 %4413, 0
  %4430 = zext i1 %4429 to i8
  store i8 %4430, i8* %.pre-phi27, align 1, !tbaa !2447
  %4431 = lshr i32 %4413, 31
  %4432 = trunc i32 %4431 to i8
  store i8 %4432, i8* %.pre-phi29, align 1, !tbaa !2448
  %4433 = lshr i32 %4412, 31
  %4434 = xor i32 %4431, %4407
  %4435 = xor i32 %4431, %4433
  %4436 = add nuw nsw i32 %4434, %4435
  %4437 = icmp eq i32 %4436, 2
  %4438 = zext i1 %4437 to i8
  store i8 %4438, i8* %.pre-phi31, align 1, !tbaa !2449
  %4439 = sext i32 %4413 to i64
  store i64 %4439, i64* %RCX, align 8, !tbaa !2428
  %4440 = shl nsw i64 %4439, 2
  %4441 = add i64 %4440, %4381
  %4442 = add i64 %452, 303
  store i64 %4442, i64* %PC, align 8
  %4443 = load <2 x float>, <2 x float>* %585, align 1
  %4444 = load <2 x i32>, <2 x i32>* %586, align 1
  %4445 = inttoptr i64 %4441 to float*
  %4446 = load float, float* %4445, align 4
  %4447 = extractelement <2 x float> %4443, i32 0
  %4448 = fmul float %4447, %4446
  store float %4448, float* %578, align 1, !tbaa !2452
  %4449 = bitcast <2 x float> %4443 to <2 x i32>
  %4450 = extractelement <2 x i32> %4449, i32 1
  store i32 %4450, i32* %587, align 1, !tbaa !2452
  %4451 = extractelement <2 x i32> %4444, i32 0
  store i32 %4451, i32* %588, align 1, !tbaa !2452
  %4452 = extractelement <2 x i32> %4444, i32 1
  store i32 %4452, i32* %589, align 1, !tbaa !2452
  %4453 = load <2 x float>, <2 x float>* %590, align 1
  %4454 = load <2 x i32>, <2 x i32>* %591, align 1
  %4455 = load <2 x float>, <2 x float>* %585, align 1
  %4456 = extractelement <2 x float> %4453, i32 0
  %4457 = extractelement <2 x float> %4455, i32 0
  %4458 = fadd float %4456, %4457
  store float %4458, float* %570, align 1, !tbaa !2452
  %4459 = bitcast <2 x float> %4453 to <2 x i32>
  %4460 = extractelement <2 x i32> %4459, i32 1
  store i32 %4460, i32* %592, align 1, !tbaa !2452
  %4461 = extractelement <2 x i32> %4454, i32 0
  store i32 %4461, i32* %593, align 1, !tbaa !2452
  %4462 = extractelement <2 x i32> %4454, i32 1
  store i32 %4462, i32* %594, align 1, !tbaa !2452
  %4463 = load i64, i64* %RBP, align 8
  %4464 = add i64 %4463, -32
  %4465 = add i64 %452, 311
  store i64 %4465, i64* %PC, align 8
  %4466 = inttoptr i64 %4464 to i64*
  %4467 = load i64, i64* %4466, align 8
  store i64 %4467, i64* %RAX, align 8, !tbaa !2428
  %4468 = add i64 %4463, -44
  %4469 = add i64 %452, 314
  store i64 %4469, i64* %PC, align 8
  %4470 = inttoptr i64 %4468 to i32*
  %4471 = load i32, i32* %4470, align 4
  %4472 = add i32 %4471, -1
  %4473 = zext i32 %4472 to i64
  store i64 %4473, i64* %RDX, align 8, !tbaa !2428
  %4474 = icmp eq i32 %4471, 0
  %4475 = zext i1 %4474 to i8
  store i8 %4475, i8* %.pre-phi, align 1, !tbaa !2432
  %4476 = and i32 %4472, 255
  %4477 = tail call i32 @llvm.ctpop.i32(i32 %4476) #8
  %4478 = trunc i32 %4477 to i8
  %4479 = and i8 %4478, 1
  %4480 = xor i8 %4479, 1
  store i8 %4480, i8* %.pre-phi23, align 1, !tbaa !2446
  %4481 = xor i32 %4471, %4472
  %4482 = lshr i32 %4481, 4
  %4483 = trunc i32 %4482 to i8
  %4484 = and i8 %4483, 1
  store i8 %4484, i8* %.pre-phi25, align 1, !tbaa !2450
  %4485 = icmp eq i32 %4472, 0
  %4486 = zext i1 %4485 to i8
  store i8 %4486, i8* %.pre-phi27, align 1, !tbaa !2447
  %4487 = lshr i32 %4472, 31
  %4488 = trunc i32 %4487 to i8
  store i8 %4488, i8* %.pre-phi29, align 1, !tbaa !2448
  %4489 = lshr i32 %4471, 31
  %4490 = xor i32 %4487, %4489
  %4491 = add nuw nsw i32 %4490, %4489
  %4492 = icmp eq i32 %4491, 2
  %4493 = zext i1 %4492 to i8
  store i8 %4493, i8* %.pre-phi31, align 1, !tbaa !2449
  %4494 = sext i32 %4472 to i64
  store i64 %4494, i64* %RCX, align 8, !tbaa !2428
  %4495 = shl nsw i64 %4494, 2
  %4496 = add i64 %4495, %4467
  %4497 = add i64 %452, 325
  store i64 %4497, i64* %PC, align 8
  %4498 = inttoptr i64 %4496 to i32*
  %4499 = load i32, i32* %4498, align 4
  store i32 %4499, i32* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4500 = add i64 %4463, -40
  %4501 = add i64 %452, 329
  store i64 %4501, i64* %PC, align 8
  %4502 = inttoptr i64 %4500 to i64*
  %4503 = load i64, i64* %4502, align 8
  store i64 %4503, i64* %RAX, align 8, !tbaa !2428
  %4504 = add i64 %4463, -24
  %4505 = add i64 %452, 332
  store i64 %4505, i64* %PC, align 8
  %4506 = inttoptr i64 %4504 to i32*
  %4507 = load i32, i32* %4506, align 4
  %4508 = zext i32 %4507 to i64
  store i64 %4508, i64* %RDX, align 8, !tbaa !2428
  %4509 = add i64 %452, 335
  store i64 %4509, i64* %PC, align 8
  %4510 = load i32, i32* %4470, align 4
  %4511 = add i32 %4510, -1
  %4512 = zext i32 %4511 to i64
  store i64 %4512, i64* %RSI, align 8, !tbaa !2428
  %4513 = sext i32 %4507 to i64
  %4514 = sext i32 %4511 to i64
  %4515 = mul nsw i64 %4514, %4513
  %4516 = trunc i64 %4515 to i32
  %4517 = and i64 %4515, 4294967295
  store i64 %4517, i64* %RDX, align 8, !tbaa !2428
  %4518 = shl i64 %4515, 32
  %4519 = ashr exact i64 %4518, 32
  %4520 = icmp ne i64 %4519, %4515
  %4521 = zext i1 %4520 to i8
  store i8 %4521, i8* %.pre-phi, align 1, !tbaa !2432
  %4522 = and i32 %4516, 255
  %4523 = tail call i32 @llvm.ctpop.i32(i32 %4522) #8
  %4524 = trunc i32 %4523 to i8
  %4525 = and i8 %4524, 1
  %4526 = xor i8 %4525, 1
  store i8 %4526, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4527 = lshr i32 %4516, 31
  %4528 = trunc i32 %4527 to i8
  store i8 %4528, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4521, i8* %.pre-phi31, align 1, !tbaa !2449
  %4529 = add i64 %4463, -48
  %4530 = add i64 %452, 344
  store i64 %4530, i64* %PC, align 8
  %4531 = inttoptr i64 %4529 to i32*
  %4532 = load i32, i32* %4531, align 4
  %4533 = add i32 %4532, %4516
  %4534 = zext i32 %4533 to i64
  store i64 %4534, i64* %RDX, align 8, !tbaa !2428
  %4535 = icmp ult i32 %4533, %4516
  %4536 = icmp ult i32 %4533, %4532
  %4537 = or i1 %4535, %4536
  %4538 = zext i1 %4537 to i8
  store i8 %4538, i8* %.pre-phi, align 1, !tbaa !2432
  %4539 = and i32 %4533, 255
  %4540 = tail call i32 @llvm.ctpop.i32(i32 %4539) #8
  %4541 = trunc i32 %4540 to i8
  %4542 = and i8 %4541, 1
  %4543 = xor i8 %4542, 1
  store i8 %4543, i8* %.pre-phi23, align 1, !tbaa !2446
  %4544 = xor i32 %4532, %4516
  %4545 = xor i32 %4544, %4533
  %4546 = lshr i32 %4545, 4
  %4547 = trunc i32 %4546 to i8
  %4548 = and i8 %4547, 1
  store i8 %4548, i8* %.pre-phi25, align 1, !tbaa !2450
  %4549 = icmp eq i32 %4533, 0
  %4550 = zext i1 %4549 to i8
  store i8 %4550, i8* %.pre-phi27, align 1, !tbaa !2447
  %4551 = lshr i32 %4533, 31
  %4552 = trunc i32 %4551 to i8
  store i8 %4552, i8* %.pre-phi29, align 1, !tbaa !2448
  %4553 = lshr i32 %4532, 31
  %4554 = xor i32 %4551, %4527
  %4555 = xor i32 %4551, %4553
  %4556 = add nuw nsw i32 %4554, %4555
  %4557 = icmp eq i32 %4556, 2
  %4558 = zext i1 %4557 to i8
  store i8 %4558, i8* %.pre-phi31, align 1, !tbaa !2449
  %4559 = sext i32 %4533 to i64
  store i64 %4559, i64* %RCX, align 8, !tbaa !2428
  %4560 = shl nsw i64 %4559, 2
  %4561 = add i64 %4560, %4503
  %4562 = add i64 %452, 352
  store i64 %4562, i64* %PC, align 8
  %4563 = load <2 x float>, <2 x float>* %585, align 1
  %4564 = load <2 x i32>, <2 x i32>* %586, align 1
  %4565 = inttoptr i64 %4561 to float*
  %4566 = load float, float* %4565, align 4
  %4567 = extractelement <2 x float> %4563, i32 0
  %4568 = fmul float %4567, %4566
  store float %4568, float* %578, align 1, !tbaa !2452
  %4569 = bitcast <2 x float> %4563 to <2 x i32>
  %4570 = extractelement <2 x i32> %4569, i32 1
  store i32 %4570, i32* %587, align 1, !tbaa !2452
  %4571 = extractelement <2 x i32> %4564, i32 0
  store i32 %4571, i32* %588, align 1, !tbaa !2452
  %4572 = extractelement <2 x i32> %4564, i32 1
  store i32 %4572, i32* %589, align 1, !tbaa !2452
  %4573 = load <2 x float>, <2 x float>* %590, align 1
  %4574 = load <2 x i32>, <2 x i32>* %591, align 1
  %4575 = load <2 x float>, <2 x float>* %585, align 1
  %4576 = extractelement <2 x float> %4573, i32 0
  %4577 = extractelement <2 x float> %4575, i32 0
  %4578 = fadd float %4576, %4577
  store float %4578, float* %570, align 1, !tbaa !2452
  %4579 = bitcast <2 x float> %4573 to <2 x i32>
  %4580 = extractelement <2 x i32> %4579, i32 1
  store i32 %4580, i32* %592, align 1, !tbaa !2452
  %4581 = extractelement <2 x i32> %4574, i32 0
  store i32 %4581, i32* %593, align 1, !tbaa !2452
  %4582 = extractelement <2 x i32> %4574, i32 1
  store i32 %4582, i32* %594, align 1, !tbaa !2452
  %4583 = add i64 %452, 360
  store i64 %4583, i64* %PC, align 8
  %4584 = load i64, i64* %4466, align 8
  store i64 %4584, i64* %RAX, align 8, !tbaa !2428
  %4585 = add i64 %452, 364
  store i64 %4585, i64* %PC, align 8
  %4586 = load i32, i32* %4470, align 4
  %4587 = sext i32 %4586 to i64
  store i64 %4587, i64* %RCX, align 8, !tbaa !2428
  %4588 = shl nsw i64 %4587, 2
  %4589 = add i64 %4588, %4584
  %4590 = add i64 %452, 369
  store i64 %4590, i64* %PC, align 8
  %4591 = inttoptr i64 %4589 to i32*
  %4592 = load i32, i32* %4591, align 4
  store i32 %4592, i32* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4593 = load i64, i64* %RBP, align 8
  %4594 = add i64 %4593, -40
  %4595 = add i64 %452, 373
  store i64 %4595, i64* %PC, align 8
  %4596 = inttoptr i64 %4594 to i64*
  %4597 = load i64, i64* %4596, align 8
  store i64 %4597, i64* %RAX, align 8, !tbaa !2428
  %4598 = add i64 %4593, -24
  %4599 = add i64 %452, 376
  store i64 %4599, i64* %PC, align 8
  %4600 = inttoptr i64 %4598 to i32*
  %4601 = load i32, i32* %4600, align 4
  %4602 = zext i32 %4601 to i64
  store i64 %4602, i64* %RDX, align 8, !tbaa !2428
  %4603 = add i64 %4593, -44
  %4604 = add i64 %452, 380
  store i64 %4604, i64* %PC, align 8
  %4605 = inttoptr i64 %4603 to i32*
  %4606 = load i32, i32* %4605, align 4
  %4607 = sext i32 %4601 to i64
  %4608 = sext i32 %4606 to i64
  %4609 = mul nsw i64 %4608, %4607
  %4610 = trunc i64 %4609 to i32
  %4611 = and i64 %4609, 4294967295
  store i64 %4611, i64* %RDX, align 8, !tbaa !2428
  %4612 = shl i64 %4609, 32
  %4613 = ashr exact i64 %4612, 32
  %4614 = icmp ne i64 %4613, %4609
  %4615 = zext i1 %4614 to i8
  store i8 %4615, i8* %.pre-phi, align 1, !tbaa !2432
  %4616 = and i32 %4610, 255
  %4617 = tail call i32 @llvm.ctpop.i32(i32 %4616) #8
  %4618 = trunc i32 %4617 to i8
  %4619 = and i8 %4618, 1
  %4620 = xor i8 %4619, 1
  store i8 %4620, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4621 = lshr i32 %4610, 31
  %4622 = trunc i32 %4621 to i8
  store i8 %4622, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4615, i8* %.pre-phi31, align 1, !tbaa !2449
  %4623 = add i64 %4593, -48
  %4624 = add i64 %452, 383
  store i64 %4624, i64* %PC, align 8
  %4625 = inttoptr i64 %4623 to i32*
  %4626 = load i32, i32* %4625, align 4
  %4627 = add i32 %4626, %4610
  %4628 = zext i32 %4627 to i64
  store i64 %4628, i64* %RDX, align 8, !tbaa !2428
  %4629 = icmp ult i32 %4627, %4610
  %4630 = icmp ult i32 %4627, %4626
  %4631 = or i1 %4629, %4630
  %4632 = zext i1 %4631 to i8
  store i8 %4632, i8* %.pre-phi, align 1, !tbaa !2432
  %4633 = and i32 %4627, 255
  %4634 = tail call i32 @llvm.ctpop.i32(i32 %4633) #8
  %4635 = trunc i32 %4634 to i8
  %4636 = and i8 %4635, 1
  %4637 = xor i8 %4636, 1
  store i8 %4637, i8* %.pre-phi23, align 1, !tbaa !2446
  %4638 = xor i32 %4626, %4610
  %4639 = xor i32 %4638, %4627
  %4640 = lshr i32 %4639, 4
  %4641 = trunc i32 %4640 to i8
  %4642 = and i8 %4641, 1
  store i8 %4642, i8* %.pre-phi25, align 1, !tbaa !2450
  %4643 = icmp eq i32 %4627, 0
  %4644 = zext i1 %4643 to i8
  store i8 %4644, i8* %.pre-phi27, align 1, !tbaa !2447
  %4645 = lshr i32 %4627, 31
  %4646 = trunc i32 %4645 to i8
  store i8 %4646, i8* %.pre-phi29, align 1, !tbaa !2448
  %4647 = lshr i32 %4626, 31
  %4648 = xor i32 %4645, %4621
  %4649 = xor i32 %4645, %4647
  %4650 = add nuw nsw i32 %4648, %4649
  %4651 = icmp eq i32 %4650, 2
  %4652 = zext i1 %4651 to i8
  store i8 %4652, i8* %.pre-phi31, align 1, !tbaa !2449
  %4653 = sext i32 %4627 to i64
  store i64 %4653, i64* %RCX, align 8, !tbaa !2428
  %4654 = shl nsw i64 %4653, 2
  %4655 = add i64 %4654, %4597
  %4656 = add i64 %452, 391
  store i64 %4656, i64* %PC, align 8
  %4657 = load <2 x float>, <2 x float>* %585, align 1
  %4658 = load <2 x i32>, <2 x i32>* %586, align 1
  %4659 = inttoptr i64 %4655 to float*
  %4660 = load float, float* %4659, align 4
  %4661 = extractelement <2 x float> %4657, i32 0
  %4662 = fmul float %4661, %4660
  store float %4662, float* %578, align 1, !tbaa !2452
  %4663 = bitcast <2 x float> %4657 to <2 x i32>
  %4664 = extractelement <2 x i32> %4663, i32 1
  store i32 %4664, i32* %587, align 1, !tbaa !2452
  %4665 = extractelement <2 x i32> %4658, i32 0
  store i32 %4665, i32* %588, align 1, !tbaa !2452
  %4666 = extractelement <2 x i32> %4658, i32 1
  store i32 %4666, i32* %589, align 1, !tbaa !2452
  %4667 = load <2 x float>, <2 x float>* %590, align 1
  %4668 = load <2 x i32>, <2 x i32>* %591, align 1
  %4669 = load <2 x float>, <2 x float>* %585, align 1
  %4670 = extractelement <2 x float> %4667, i32 0
  %4671 = extractelement <2 x float> %4669, i32 0
  %4672 = fadd float %4670, %4671
  store float %4672, float* %570, align 1, !tbaa !2452
  %4673 = bitcast <2 x float> %4667 to <2 x i32>
  %4674 = extractelement <2 x i32> %4673, i32 1
  store i32 %4674, i32* %592, align 1, !tbaa !2452
  %4675 = extractelement <2 x i32> %4668, i32 0
  store i32 %4675, i32* %593, align 1, !tbaa !2452
  %4676 = extractelement <2 x i32> %4668, i32 1
  store i32 %4676, i32* %594, align 1, !tbaa !2452
  %4677 = load i64, i64* %RBP, align 8
  %4678 = add i64 %4677, -16
  %4679 = add i64 %452, 399
  store i64 %4679, i64* %PC, align 8
  %4680 = inttoptr i64 %4678 to i64*
  %4681 = load i64, i64* %4680, align 8
  store i64 %4681, i64* %RAX, align 8, !tbaa !2428
  %4682 = add i64 %4677, -48
  %4683 = add i64 %452, 403
  store i64 %4683, i64* %PC, align 8
  %4684 = inttoptr i64 %4682 to i32*
  %4685 = load i32, i32* %4684, align 4
  %4686 = sext i32 %4685 to i64
  store i64 %4686, i64* %RCX, align 8, !tbaa !2428
  %4687 = shl nsw i64 %4686, 2
  %4688 = add i64 %4687, %4681
  %4689 = add i64 %452, 408
  store i64 %4689, i64* %PC, align 8
  %4690 = load <2 x float>, <2 x float>* %590, align 1
  %4691 = extractelement <2 x float> %4690, i32 0
  %4692 = inttoptr i64 %4688 to float*
  store float %4691, float* %4692, align 4
  %4693 = load i64, i64* %RBP, align 8
  %4694 = add i64 %4693, -48
  %4695 = load i64, i64* %PC, align 8
  %4696 = add i64 %4695, 3
  store i64 %4696, i64* %PC, align 8
  %4697 = inttoptr i64 %4694 to i32*
  %4698 = load i32, i32* %4697, align 4
  %4699 = add i32 %4698, 1
  %4700 = zext i32 %4699 to i64
  store i64 %4700, i64* %RAX, align 8, !tbaa !2428
  %4701 = icmp eq i32 %4698, -1
  %4702 = icmp eq i32 %4699, 0
  %4703 = or i1 %4701, %4702
  %4704 = zext i1 %4703 to i8
  store i8 %4704, i8* %.pre-phi, align 1, !tbaa !2432
  %4705 = and i32 %4699, 255
  %4706 = tail call i32 @llvm.ctpop.i32(i32 %4705) #8
  %4707 = trunc i32 %4706 to i8
  %4708 = and i8 %4707, 1
  %4709 = xor i8 %4708, 1
  store i8 %4709, i8* %.pre-phi23, align 1, !tbaa !2446
  %4710 = xor i32 %4698, %4699
  %4711 = lshr i32 %4710, 4
  %4712 = trunc i32 %4711 to i8
  %4713 = and i8 %4712, 1
  store i8 %4713, i8* %.pre-phi25, align 1, !tbaa !2450
  %4714 = zext i1 %4702 to i8
  store i8 %4714, i8* %.pre-phi27, align 1, !tbaa !2447
  %4715 = lshr i32 %4699, 31
  %4716 = trunc i32 %4715 to i8
  store i8 %4716, i8* %.pre-phi29, align 1, !tbaa !2448
  %4717 = lshr i32 %4698, 31
  %4718 = xor i32 %4715, %4717
  %4719 = add nuw nsw i32 %4718, %4715
  %4720 = icmp eq i32 %4719, 2
  %4721 = zext i1 %4720 to i8
  store i8 %4721, i8* %.pre-phi31, align 1, !tbaa !2449
  %4722 = add i64 %4695, 9
  store i64 %4722, i64* %PC, align 8
  store i32 %4699, i32* %4697, align 4
  %4723 = load i64, i64* %PC, align 8
  %4724 = add i64 %4723, -429
  store i64 %4724, i64* %PC, align 8, !tbaa !2428
  br label %block_4022cd

block_402298:                                     ; preds = %block_4021aa
  %4725 = add i64 %3414, 5
  store i64 %4725, i64* %PC, align 8, !tbaa !2428
  br label %block_40229d

block_402806:                                     ; preds = %block_4024a6
  %4726 = add i64 %3563, 1
  store i64 %4726, i64* %PC, align 8
  %4727 = load i64, i64* %11, align 8, !tbaa !2428
  %4728 = add i64 %4727, 8
  %4729 = inttoptr i64 %4727 to i64*
  %4730 = load i64, i64* %4729, align 8
  store i64 %4730, i64* %RBP, align 8, !tbaa !2428
  store i64 %4728, i64* %11, align 8, !tbaa !2428
  %4731 = add i64 %3563, 2
  store i64 %4731, i64* %PC, align 8
  %4732 = inttoptr i64 %4728 to i64*
  %4733 = load i64, i64* %4732, align 8
  store i64 %4733, i64* %PC, align 8, !tbaa !2428
  %4734 = add i64 %4727, 16
  store i64 %4734, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %4774

block_402175:                                     ; preds = %block_4020e9
  %4735 = add i64 %3525, 5
  store i64 %4735, i64* %PC, align 8, !tbaa !2428
  br label %block_40217a

block_402484:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_40247f
  %4736 = phi i64 [ %3645, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %416, %block_40247f ]
  %4737 = phi i64 [ %3674, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %3338, %block_40247f ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %4738 = add i64 %4736, -20
  %4739 = add i64 %4737, 8
  store i64 %4739, i64* %PC, align 8
  %4740 = inttoptr i64 %4738 to i32*
  %4741 = load i32, i32* %4740, align 4
  %4742 = zext i32 %4741 to i64
  store i64 %4742, i64* %RCX, align 8, !tbaa !2428
  %4743 = add i64 %4736, -72
  %4744 = add i64 %4737, 11
  store i64 %4744, i64* %PC, align 8
  %4745 = inttoptr i64 %4743 to i32*
  store i32 16, i32* %4745, align 4
  %4746 = load i32, i32* %ECX, align 4
  %4747 = zext i32 %4746 to i64
  %4748 = load i64, i64* %PC, align 8
  store i64 %4747, i64* %RAX, align 8, !tbaa !2428
  %4749 = sext i32 %4746 to i64
  %4750 = lshr i64 %4749, 32
  store i64 %4750, i64* %64, align 8, !tbaa !2428
  %4751 = load i64, i64* %RBP, align 8
  %4752 = add i64 %4751, -72
  %4753 = add i64 %4748, 6
  store i64 %4753, i64* %PC, align 8
  %4754 = inttoptr i64 %4752 to i32*
  %4755 = load i32, i32* %4754, align 4
  %4756 = zext i32 %4755 to i64
  store i64 %4756, i64* %RCX, align 8, !tbaa !2428
  %4757 = add i64 %4748, 8
  store i64 %4757, i64* %PC, align 8
  %4758 = sext i32 %4755 to i64
  %4759 = shl nuw i64 %4750, 32
  %4760 = or i64 %4759, %4747
  %4761 = sdiv i64 %4760, %4758
  %4762 = shl i64 %4761, 32
  %4763 = ashr exact i64 %4762, 32
  %4764 = icmp eq i64 %4761, %4763
  br i1 %4764, label %4767, label %4765

; <label>:4765:                                   ; preds = %block_402484
  %4766 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4757, %struct.Memory* %3641) #9
  %.pre16 = load i64, i64* %RDX, align 8
  %.pre17 = load i64, i64* %PC, align 8
  %.pre18 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:4767:                                   ; preds = %block_402484
  %4768 = srem i64 %4760, %4758
  %4769 = and i64 %4761, 4294967295
  store i64 %4769, i64* %RAX, align 8, !tbaa !2428
  %4770 = and i64 %4768, 4294967295
  store i64 %4770, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %4767, %4765
  %4771 = phi i64 [ %.pre18, %4765 ], [ %4751, %4767 ]
  %4772 = phi i64 [ %.pre17, %4765 ], [ %4757, %4767 ]
  %4773 = phi i64 [ %.pre16, %4765 ], [ %4770, %4767 ]
  %4774 = phi %struct.Memory* [ %4766, %4765 ], [ %3641, %4767 ]
  %4775 = trunc i64 %4773 to i32
  %4776 = add i32 %4775, 16
  %4777 = zext i32 %4776 to i64
  store i64 %4777, i64* %RDX, align 8, !tbaa !2428
  %4778 = icmp ugt i32 %4775, -17
  %4779 = zext i1 %4778 to i8
  store i8 %4779, i8* %.pre-phi, align 1, !tbaa !2432
  %4780 = and i32 %4776, 255
  %4781 = tail call i32 @llvm.ctpop.i32(i32 %4780) #8
  %4782 = trunc i32 %4781 to i8
  %4783 = and i8 %4782, 1
  %4784 = xor i8 %4783, 1
  store i8 %4784, i8* %.pre-phi23, align 1, !tbaa !2446
  %4785 = xor i32 %4775, 16
  %4786 = xor i32 %4785, %4776
  %4787 = lshr i32 %4786, 4
  %4788 = trunc i32 %4787 to i8
  %4789 = and i8 %4788, 1
  store i8 %4789, i8* %.pre-phi25, align 1, !tbaa !2450
  %4790 = icmp eq i32 %4776, 0
  %4791 = zext i1 %4790 to i8
  store i8 %4791, i8* %.pre-phi27, align 1, !tbaa !2447
  %4792 = lshr i32 %4776, 31
  %4793 = trunc i32 %4792 to i8
  store i8 %4793, i8* %.pre-phi29, align 1, !tbaa !2448
  %4794 = lshr i32 %4775, 31
  %4795 = xor i32 %4792, %4794
  %4796 = add nuw nsw i32 %4795, %4792
  %4797 = icmp eq i32 %4796, 2
  %4798 = zext i1 %4797 to i8
  store i8 %4798, i8* %.pre-phi31, align 1, !tbaa !2449
  %4799 = add i64 %4771, -52
  %4800 = add i64 %4772, 6
  store i64 %4800, i64* %PC, align 8
  %4801 = inttoptr i64 %4799 to i32*
  store i32 %4776, i32* %4801, align 4
  %4802 = load i64, i64* %RBP, align 8
  %4803 = add i64 %4802, -52
  %4804 = load i64, i64* %PC, align 8
  %4805 = add i64 %4804, 3
  store i64 %4805, i64* %PC, align 8
  %4806 = inttoptr i64 %4803 to i32*
  %4807 = load i32, i32* %4806, align 4
  %4808 = add i32 %4807, -1
  %4809 = zext i32 %4808 to i64
  store i64 %4809, i64* %RDX, align 8, !tbaa !2428
  %4810 = icmp eq i32 %4807, 0
  %4811 = zext i1 %4810 to i8
  store i8 %4811, i8* %.pre-phi, align 1, !tbaa !2432
  %4812 = and i32 %4808, 255
  %4813 = tail call i32 @llvm.ctpop.i32(i32 %4812) #8
  %4814 = trunc i32 %4813 to i8
  %4815 = and i8 %4814, 1
  %4816 = xor i8 %4815, 1
  store i8 %4816, i8* %.pre-phi23, align 1, !tbaa !2446
  %4817 = xor i32 %4807, %4808
  %4818 = lshr i32 %4817, 4
  %4819 = trunc i32 %4818 to i8
  %4820 = and i8 %4819, 1
  store i8 %4820, i8* %.pre-phi25, align 1, !tbaa !2450
  %4821 = icmp eq i32 %4808, 0
  %4822 = zext i1 %4821 to i8
  store i8 %4822, i8* %.pre-phi27, align 1, !tbaa !2447
  %4823 = lshr i32 %4808, 31
  %4824 = trunc i32 %4823 to i8
  store i8 %4824, i8* %.pre-phi29, align 1, !tbaa !2448
  %4825 = lshr i32 %4807, 31
  %4826 = xor i32 %4823, %4825
  %4827 = add nuw nsw i32 %4826, %4825
  %4828 = icmp eq i32 %4827, 2
  %4829 = zext i1 %4828 to i8
  store i8 %4829, i8* %.pre-phi31, align 1, !tbaa !2449
  %4830 = add i64 %4802, -44
  %4831 = add i64 %4804, 9
  store i64 %4831, i64* %PC, align 8
  %4832 = inttoptr i64 %4830 to i32*
  store i32 %4808, i32* %4832, align 4
  %4833 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %4834 = bitcast [32 x %union.VectorReg]* %7 to float*
  %4835 = getelementptr inbounds i8, i8* %4833, i64 4
  %4836 = bitcast i8* %4835 to float*
  %4837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %4838 = bitcast i64* %4837 to float*
  %4839 = getelementptr inbounds i8, i8* %4833, i64 12
  %4840 = bitcast i8* %4839 to float*
  %4841 = bitcast %union.VectorReg* %8 to i8*
  %4842 = bitcast %union.VectorReg* %8 to float*
  %4843 = getelementptr inbounds i8, i8* %4841, i64 4
  %4844 = bitcast i8* %4843 to float*
  %4845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %4846 = bitcast i64* %4845 to float*
  %4847 = getelementptr inbounds i8, i8* %4841, i64 12
  %4848 = bitcast i8* %4847 to float*
  %4849 = bitcast %union.VectorReg* %8 to <2 x float>*
  %4850 = bitcast i64* %4845 to <2 x i32>*
  %4851 = bitcast i8* %4843 to i32*
  %4852 = bitcast i64* %4845 to i32*
  %4853 = bitcast i8* %4847 to i32*
  %4854 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %4855 = bitcast i64* %4837 to <2 x i32>*
  %4856 = bitcast i8* %4835 to i32*
  %4857 = bitcast i64* %4837 to i32*
  %4858 = bitcast i8* %4839 to i32*
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4024a6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400600_what_date(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400600:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, 5
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %6 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %PC, align 8, !tbaa !2428
  %15 = add i64 %6, 8
  store i64 %15, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005c0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2450
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2447
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2448
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2449
  %40 = add i64 %10, -289
  %41 = add i64 %10, 12
  %42 = add i64 %7, -32
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43, align 8
  store i64 %42, i64* %RSP, align 8, !tbaa !2428
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %44 = tail call fastcc %struct.Memory* @ext_653140_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %45 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %46 = load i64, i64* %PC, align 8
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 4) to i32*), align 4
  %48 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %47, i32* %48, align 1, !tbaa !2452
  %49 = getelementptr inbounds i8, i8* %45, i64 4
  %50 = bitcast i8* %49 to float*
  store float 0.000000e+00, float* %50, align 1, !tbaa !2452
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %52 = bitcast i64* %51 to float*
  store float 0.000000e+00, float* %52, align 1, !tbaa !2452
  %53 = getelementptr inbounds i8, i8* %45, i64 12
  %54 = bitcast i8* %53 to float*
  store float 0.000000e+00, float* %54, align 1, !tbaa !2452
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i64, i64* %RAX, align 8
  %58 = add i64 %46, 12
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = bitcast %union.VectorReg* %4 to i8*
  %67 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %68 = load <2 x i32>, <2 x i32>* %67, align 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %70 = bitcast i64* %69 to <2 x i32>*
  %71 = load <2 x i32>, <2 x i32>* %70, align 1
  %72 = sitofp i64 %65 to float
  %73 = bitcast %union.VectorReg* %4 to float*
  store float %72, float* %73, align 1, !tbaa !2452
  %74 = extractelement <2 x i32> %68, i32 1
  %75 = getelementptr inbounds i8, i8* %66, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %74, i32* %76, align 1, !tbaa !2452
  %77 = extractelement <2 x i32> %71, i32 0
  %78 = bitcast i64* %69 to i32*
  store i32 %77, i32* %78, align 1, !tbaa !2452
  %79 = extractelement <2 x i32> %71, i32 1
  %80 = getelementptr inbounds i8, i8* %66, i64 12
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 1, !tbaa !2452
  %82 = bitcast %union.VectorReg* %4 to <2 x float>*
  %83 = load <2 x float>, <2 x float>* %82, align 1
  %84 = load <2 x i32>, <2 x i32>* %70, align 1
  %85 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %86 = load <2 x float>, <2 x float>* %85, align 1
  %87 = extractelement <2 x float> %83, i32 0
  %88 = extractelement <2 x float> %86, i32 0
  %89 = fdiv float %87, %88
  store float %89, float* %73, align 1, !tbaa !2452
  %90 = bitcast <2 x float> %83 to <2 x i32>
  %91 = extractelement <2 x i32> %90, i32 1
  store i32 %91, i32* %76, align 1, !tbaa !2452
  %92 = extractelement <2 x i32> %84, i32 0
  store i32 %92, i32* %78, align 1, !tbaa !2452
  %93 = extractelement <2 x i32> %84, i32 1
  store i32 %93, i32* %81, align 1, !tbaa !2452
  %94 = add i64 %60, -4
  %95 = add i64 %62, 18
  store i64 %95, i64* %PC, align 8
  %96 = load <2 x float>, <2 x float>* %82, align 1
  %97 = extractelement <2 x float> %96, i32 0
  %98 = inttoptr i64 %94 to float*
  store float %97, float* %98, align 4
  %99 = load i64, i64* %RBP, align 8
  %100 = add i64 %99, -4
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 5
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %48, align 1, !tbaa !2452
  store float 0.000000e+00, float* %50, align 1, !tbaa !2452
  store float 0.000000e+00, float* %52, align 1, !tbaa !2452
  store float 0.000000e+00, float* %54, align 1, !tbaa !2452
  %105 = load i64, i64* %RSP, align 8
  %106 = add i64 %105, 16
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %107 = icmp ugt i64 %105, -17
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %14, align 1, !tbaa !2432
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #8
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %21, align 1, !tbaa !2446
  %115 = xor i64 %105, 16
  %116 = xor i64 %115, %106
  %117 = lshr i64 %116, 4
  %118 = trunc i64 %117 to i8
  %119 = and i8 %118, 1
  store i8 %119, i8* %27, align 1, !tbaa !2450
  %120 = icmp eq i64 %106, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %30, align 1, !tbaa !2447
  %122 = lshr i64 %106, 63
  %123 = trunc i64 %122 to i8
  store i8 %123, i8* %33, align 1, !tbaa !2448
  %124 = lshr i64 %105, 63
  %125 = xor i64 %122, %124
  %126 = add nuw nsw i64 %125, %122
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %39, align 1, !tbaa !2449
  %129 = add i64 %101, 10
  store i64 %129, i64* %PC, align 8
  %130 = add i64 %105, 24
  %131 = inttoptr i64 %106 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RBP, align 8, !tbaa !2428
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %133 = add i64 %101, 11
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %130 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  %136 = add i64 %105, 32
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %44
}

; Function Attrs: noinline
define %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400580:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #8
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2450
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2447
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2449
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_400589, label %block_4005a0

block_4005a0:                                     ; preds = %block_400580
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400589:                                     ; preds = %block_400580
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400510_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bb0_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402bb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -16
  %15 = load i32, i32* %EDI, align 4
  %16 = add i64 %13, 6
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %17, align 4
  %18 = load i64, i64* %RBP, align 8
  %19 = add i64 %18, -16
  %20 = load i64, i64* %RSI, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -20
  %26 = load i32, i32* %EDX, align 4
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 3
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %29, align 4
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = icmp eq i32 %35, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = and i32 %36, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #8
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2446
  %46 = xor i32 %35, %36
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = icmp eq i32 %36, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = lshr i32 %36, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = lshr i32 %35, 31
  %58 = xor i32 %54, %57
  %59 = add nuw nsw i32 %58, %57
  %60 = icmp eq i32 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = icmp ne i8 %55, 0
  %64 = xor i1 %63, %60
  %.v = select i1 %64, i64 10, i64 22
  %65 = add i64 %32, %.v
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  br i1 %64, label %block_402bc8, label %block_402bd4

block_402d5f:                                     ; preds = %block_402bc8, %block_402bde, %block_402d59
  %66 = phi i64 [ %.pre10, %block_402d59 ], [ %360, %block_402bde ], [ %481, %block_402bc8 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_402d59 ], [ %2, %block_402bde ], [ %2, %block_402bc8 ]
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -4
  %69 = add i64 %66, 3
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = add i64 %66, 4
  store i64 %73, i64* %PC, align 8
  %74 = load i64, i64* %9, align 8, !tbaa !2428
  %75 = add i64 %74, 8
  %76 = inttoptr i64 %74 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RBP, align 8, !tbaa !2428
  store i64 %75, i64* %9, align 8, !tbaa !2428
  %78 = add i64 %66, 5
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %75 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %81 = add i64 %74, 16
  store i64 %81, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402d54:                                     ; preds = %block_402cdb
  %82 = add i64 %355, 5
  br label %block_402d59

block_402d59:                                     ; preds = %block_402ca8, %block_402d54
  %83 = phi i64 [ %82, %block_402d54 ], [ %246, %block_402ca8 ]
  %84 = phi i64 [ %319, %block_402d54 ], [ %440, %block_402ca8 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402d54 ], [ %MEMORY.4, %block_402ca8 ]
  %85 = add i64 %84, -36
  %86 = add i64 %83, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = zext i32 %88 to i64
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = add i64 %84, -4
  %91 = add i64 %83, 6
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i32*
  store i32 %88, i32* %92, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_402d5f

block_402c37:                                     ; preds = %block_402c2b
  %93 = add i64 %440, -16
  %94 = add i64 %476, 4
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = add i64 %440, -32
  %98 = add i64 %476, 8
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %100 to i64
  store i64 %101, i64* %RCX, align 8, !tbaa !2428
  %102 = shl nsw i64 %101, 2
  %103 = add i64 %102, %96
  %104 = add i64 %476, 13
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i32*
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %649, align 1, !tbaa !2452
  store float 0.000000e+00, float* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %655, align 1, !tbaa !2452
  %107 = load <2 x float>, <2 x float>* %656, align 1
  %108 = extractelement <2 x float> %107, i32 0
  %109 = fpext float %108 to double
  %110 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %111 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %112 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %113 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %110, i32* %665, align 1, !tbaa !2452
  store i32 %111, i32* %668, align 1, !tbaa !2452
  store i32 %112, i32* %671, align 1, !tbaa !2452
  store i32 %113, i32* %674, align 1, !tbaa !2452
  %114 = bitcast double %109 to i64
  %115 = load i64, i64* %652, align 1
  %116 = load i64, i64* %677, align 1
  %117 = load i64, i64* %669, align 1
  %118 = and i64 %116, %114
  %119 = and i64 %117, %115
  %120 = trunc i64 %118 to i32
  %121 = lshr i64 %118, 32
  %122 = trunc i64 %121 to i32
  store i32 %120, i32* %649, align 1, !tbaa !2451
  store i32 %122, i32* %685, align 1, !tbaa !2451
  %123 = trunc i64 %119 to i32
  store i32 %123, i32* %687, align 1, !tbaa !2451
  %124 = lshr i64 %119, 32
  %125 = trunc i64 %124 to i32
  store i32 %125, i32* %690, align 1, !tbaa !2451
  %126 = add i64 %440, -24
  %127 = add i64 %476, 33
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i32*
  %129 = load i32, i32* %128, align 4
  store i32 %129, i32* %665, align 1, !tbaa !2452
  store float 0.000000e+00, float* %667, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %673, align 1, !tbaa !2452
  %130 = load <2 x float>, <2 x float>* %750, align 1
  %131 = extractelement <2 x float> %130, i32 0
  %132 = fpext float %131 to double
  store double %132, double* %751, align 1, !tbaa !2454
  %133 = add i64 %476, 41
  store i64 %133, i64* %PC, align 8
  %134 = load double, double* %695, align 1
  %135 = fcmp uno double %134, %132
  br i1 %135, label %136, label %146

; <label>:136:                                    ; preds = %block_402c37
  %137 = fadd double %134, %132
  %138 = bitcast double %137 to i64
  %139 = and i64 %138, 9221120237041090560
  %140 = icmp eq i64 %139, 9218868437227405312
  %141 = and i64 %138, 2251799813685247
  %142 = icmp ne i64 %141, 0
  %143 = and i1 %140, %142
  br i1 %143, label %144, label %152

; <label>:144:                                    ; preds = %136
  %145 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %133, %struct.Memory* %MEMORY.4) #9
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre3 = load i8, i8* %53, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:146:                                    ; preds = %block_402c37
  %147 = fcmp ogt double %134, %132
  br i1 %147, label %152, label %148

; <label>:148:                                    ; preds = %146
  %149 = fcmp olt double %134, %132
  br i1 %149, label %152, label %150

; <label>:150:                                    ; preds = %148
  %151 = fcmp oeq double %134, %132
  br i1 %151, label %152, label %156

; <label>:152:                                    ; preds = %150, %148, %146, %136
  %153 = phi i8 [ 0, %146 ], [ 0, %148 ], [ 1, %150 ], [ 1, %136 ]
  %154 = phi i8 [ 0, %146 ], [ 0, %148 ], [ 0, %150 ], [ 1, %136 ]
  %155 = phi i8 [ 0, %146 ], [ 1, %148 ], [ 0, %150 ], [ 1, %136 ]
  store i8 %153, i8* %53, align 1, !tbaa !2456
  store i8 %154, i8* %45, align 1, !tbaa !2456
  store i8 %155, i8* %39, align 1, !tbaa !2456
  br label %156

; <label>:156:                                    ; preds = %152, %150
  %157 = phi i8 [ %153, %152 ], [ %464, %150 ]
  %158 = phi i8 [ %155, %152 ], [ %452, %150 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %156, %144
  %159 = phi i8 [ %.pre3, %144 ], [ %157, %156 ]
  %160 = phi i8 [ %.pre2, %144 ], [ %158, %156 ]
  %161 = phi i64 [ %.pre1, %144 ], [ %133, %156 ]
  %162 = phi %struct.Memory* [ %145, %144 ], [ %MEMORY.4, %156 ]
  %163 = or i8 %159, %160
  %164 = icmp ne i8 %163, 0
  %.v15 = select i1 %164, i64 49, i64 6
  %165 = add i64 %161, %.v15
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  br i1 %164, label %block_402c91, label %block_402c66

block_402d16:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -28
  %168 = add i64 %578, 3
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = zext i32 %170 to i64
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = add i64 %166, -36
  %173 = add i64 %578, 6
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i32*
  store i32 %170, i32* %174, align 4
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -16
  %177 = load i64, i64* %PC, align 8
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179, align 8
  store i64 %180, i64* %RCX, align 8, !tbaa !2428
  %181 = add i64 %175, -28
  %182 = add i64 %177, 8
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %181 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %184 to i64
  store i64 %185, i64* %RDX, align 8, !tbaa !2428
  %186 = shl nsw i64 %185, 2
  %187 = add i64 %186, %180
  %188 = add i64 %177, 13
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i32*
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %375, align 1, !tbaa !2452
  store float 0.000000e+00, float* %377, align 1, !tbaa !2452
  store float 0.000000e+00, float* %379, align 1, !tbaa !2452
  store float 0.000000e+00, float* %381, align 1, !tbaa !2452
  %191 = load <2 x float>, <2 x float>* %382, align 1
  %192 = extractelement <2 x float> %191, i32 0
  %193 = fpext float %192 to double
  %194 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %195 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %196 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %197 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %194, i32* %391, align 1, !tbaa !2452
  store i32 %195, i32* %394, align 1, !tbaa !2452
  store i32 %196, i32* %397, align 1, !tbaa !2452
  store i32 %197, i32* %400, align 1, !tbaa !2452
  %198 = bitcast double %193 to i64
  %199 = load i64, i64* %378, align 1
  %200 = load i64, i64* %403, align 1
  %201 = load i64, i64* %395, align 1
  %202 = and i64 %200, %198
  %203 = and i64 %201, %199
  %204 = trunc i64 %202 to i32
  %205 = lshr i64 %202, 32
  %206 = trunc i64 %205 to i32
  store i32 %204, i32* %375, align 1, !tbaa !2451
  store i32 %206, i32* %411, align 1, !tbaa !2451
  %207 = trunc i64 %203 to i32
  store i32 %207, i32* %413, align 1, !tbaa !2451
  %208 = lshr i64 %203, 32
  %209 = trunc i64 %208 to i32
  store i32 %209, i32* %416, align 1, !tbaa !2451
  %210 = load <2 x i32>, <2 x i32>* %417, align 1
  %211 = load <2 x i32>, <2 x i32>* %419, align 1
  %212 = bitcast <2 x i32> %210 to double
  %213 = fptrunc double %212 to float
  store float %213, float* %374, align 1, !tbaa !2452
  %214 = extractelement <2 x i32> %210, i32 1
  store i32 %214, i32* %411, align 1, !tbaa !2452
  %215 = extractelement <2 x i32> %211, i32 0
  store i32 %215, i32* %413, align 1, !tbaa !2452
  %216 = extractelement <2 x i32> %211, i32 1
  store i32 %216, i32* %416, align 1, !tbaa !2452
  %217 = add i64 %175, -24
  %218 = add i64 %177, 37
  store i64 %218, i64* %PC, align 8
  %219 = load <2 x float>, <2 x float>* %382, align 1
  %220 = extractelement <2 x float> %219, i32 0
  %221 = inttoptr i64 %217 to float*
  store float %220, float* %221, align 4
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_402d41

block_402bd4:                                     ; preds = %block_402bb0
  %222 = add i64 %65, 4
  store i64 %222, i64* %PC, align 8
  %223 = load i32, i32* %34, align 4
  %224 = add i32 %223, -1
  %225 = icmp eq i32 %223, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %39, align 1, !tbaa !2432
  %227 = and i32 %224, 255
  %228 = tail call i32 @llvm.ctpop.i32(i32 %227) #8
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  store i8 %231, i8* %45, align 1, !tbaa !2446
  %232 = xor i32 %223, %224
  %233 = lshr i32 %232, 4
  %234 = trunc i32 %233 to i8
  %235 = and i8 %234, 1
  store i8 %235, i8* %50, align 1, !tbaa !2450
  %236 = icmp eq i32 %224, 0
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %53, align 1, !tbaa !2447
  %238 = lshr i32 %224, 31
  %239 = trunc i32 %238 to i8
  store i8 %239, i8* %56, align 1, !tbaa !2448
  %240 = lshr i32 %223, 31
  %241 = xor i32 %238, %240
  %242 = add nuw nsw i32 %241, %240
  %243 = icmp eq i32 %242, 2
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %62, align 1, !tbaa !2449
  %.v12 = select i1 %236, i64 10, i64 22
  %245 = add i64 %65, %.v12
  store i64 %245, i64* %PC, align 8, !tbaa !2428
  br i1 %236, label %block_402bde, label %block_402bea

block_402ca8:                                     ; preds = %block_402c2b
  %246 = add i64 %476, 177
  br label %block_402d59

block_402c91:                                     ; preds = %block_402c66, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %247 = phi i64 [ %.pre4, %block_402c66 ], [ %165, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -32
  %250 = add i64 %247, 3
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i64
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = add i64 %248, -20
  %255 = add i64 %247, 6
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = add i32 %257, %252
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RAX, align 8, !tbaa !2428
  %260 = icmp ult i32 %258, %252
  %261 = icmp ult i32 %258, %257
  %262 = or i1 %260, %261
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %39, align 1, !tbaa !2432
  %264 = and i32 %258, 255
  %265 = tail call i32 @llvm.ctpop.i32(i32 %264) #8
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  store i8 %268, i8* %45, align 1, !tbaa !2446
  %269 = xor i32 %257, %252
  %270 = xor i32 %269, %258
  %271 = lshr i32 %270, 4
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  store i8 %273, i8* %50, align 1, !tbaa !2450
  %274 = icmp eq i32 %258, 0
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %53, align 1, !tbaa !2447
  %276 = lshr i32 %258, 31
  %277 = trunc i32 %276 to i8
  store i8 %277, i8* %56, align 1, !tbaa !2448
  %278 = lshr i32 %252, 31
  %279 = lshr i32 %257, 31
  %280 = xor i32 %276, %278
  %281 = xor i32 %276, %279
  %282 = add nuw nsw i32 %280, %281
  %283 = icmp eq i32 %282, 2
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %62, align 1, !tbaa !2449
  %285 = add i64 %247, 9
  store i64 %285, i64* %PC, align 8
  store i32 %258, i32* %251, align 4
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -28
  %288 = load i64, i64* %PC, align 8
  %289 = add i64 %288, 3
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %287 to i32*
  %291 = load i32, i32* %290, align 4
  %292 = add i32 %291, 1
  %293 = zext i32 %292 to i64
  store i64 %293, i64* %RAX, align 8, !tbaa !2428
  %294 = icmp eq i32 %291, -1
  %295 = icmp eq i32 %292, 0
  %296 = or i1 %294, %295
  %297 = zext i1 %296 to i8
  store i8 %297, i8* %39, align 1, !tbaa !2432
  %298 = and i32 %292, 255
  %299 = tail call i32 @llvm.ctpop.i32(i32 %298) #8
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = xor i8 %301, 1
  store i8 %302, i8* %45, align 1, !tbaa !2446
  %303 = xor i32 %291, %292
  %304 = lshr i32 %303, 4
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  store i8 %306, i8* %50, align 1, !tbaa !2450
  %307 = zext i1 %295 to i8
  store i8 %307, i8* %53, align 1, !tbaa !2447
  %308 = lshr i32 %292, 31
  %309 = trunc i32 %308 to i8
  store i8 %309, i8* %56, align 1, !tbaa !2448
  %310 = lshr i32 %291, 31
  %311 = xor i32 %308, %310
  %312 = add nuw nsw i32 %311, %308
  %313 = icmp eq i32 %312, 2
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %62, align 1, !tbaa !2449
  %315 = add i64 %288, 9
  store i64 %315, i64* %PC, align 8
  store i32 %292, i32* %290, align 4
  %316 = load i64, i64* %PC, align 8
  %317 = add i64 %316, -120
  store i64 %317, i64* %PC, align 8, !tbaa !2428
  br label %block_402c2b

block_402cdb:                                     ; preds = %block_402d41, %block_402cad
  %318 = phi i64 [ %.pre5, %block_402cad ], [ %783, %block_402d41 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402cad ], [ %575, %block_402d41 ]
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -28
  %321 = add i64 %318, 3
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %320 to i32*
  %323 = load i32, i32* %322, align 4
  %324 = zext i32 %323 to i64
  store i64 %324, i64* %RAX, align 8, !tbaa !2428
  %325 = add i64 %319, -8
  %326 = add i64 %318, 6
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %325 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = sub i32 %323, %328
  %330 = icmp ult i32 %323, %328
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %39, align 1, !tbaa !2432
  %332 = and i32 %329, 255
  %333 = tail call i32 @llvm.ctpop.i32(i32 %332) #8
  %334 = trunc i32 %333 to i8
  %335 = and i8 %334, 1
  %336 = xor i8 %335, 1
  store i8 %336, i8* %45, align 1, !tbaa !2446
  %337 = xor i32 %328, %323
  %338 = xor i32 %337, %329
  %339 = lshr i32 %338, 4
  %340 = trunc i32 %339 to i8
  %341 = and i8 %340, 1
  store i8 %341, i8* %50, align 1, !tbaa !2450
  %342 = icmp eq i32 %329, 0
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %53, align 1, !tbaa !2447
  %344 = lshr i32 %329, 31
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %56, align 1, !tbaa !2448
  %346 = lshr i32 %323, 31
  %347 = lshr i32 %328, 31
  %348 = xor i32 %347, %346
  %349 = xor i32 %344, %346
  %350 = add nuw nsw i32 %349, %348
  %351 = icmp eq i32 %350, 2
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %62, align 1, !tbaa !2449
  %353 = icmp ne i8 %345, 0
  %354 = xor i1 %353, %351
  %.v16 = select i1 %354, i64 12, i64 121
  %355 = add i64 %318, %.v16
  store i64 %355, i64* %PC, align 8, !tbaa !2428
  br i1 %354, label %block_402ce7, label %block_402d54

block_402bde:                                     ; preds = %block_402bd4
  %356 = add i64 %30, -4
  %357 = add i64 %245, 7
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i32*
  store i32 0, i32* %358, align 4
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, 378
  store i64 %360, i64* %PC, align 8, !tbaa !2428
  br label %block_402d5f

block_402cad:                                     ; preds = %block_402bea
  %361 = add i64 %30, -36
  %362 = add i64 %507, 7
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i32*
  store i32 0, i32* %363, align 4
  %364 = load i64, i64* %RBP, align 8
  %365 = add i64 %364, -16
  %366 = load i64, i64* %PC, align 8
  %367 = add i64 %366, 4
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %365 to i64*
  %369 = load i64, i64* %368, align 8
  store i64 %369, i64* %RAX, align 8, !tbaa !2428
  %370 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %371 = add i64 %366, 8
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = bitcast [32 x %union.VectorReg]* %5 to float*
  %375 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %373, i32* %375, align 1, !tbaa !2452
  %376 = getelementptr inbounds i8, i8* %370, i64 4
  %377 = bitcast i8* %376 to float*
  store float 0.000000e+00, float* %377, align 1, !tbaa !2452
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %379 = bitcast i64* %378 to float*
  store float 0.000000e+00, float* %379, align 1, !tbaa !2452
  %380 = getelementptr inbounds i8, i8* %370, i64 12
  %381 = bitcast i8* %380 to float*
  store float 0.000000e+00, float* %381, align 1, !tbaa !2452
  %382 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %383 = load <2 x float>, <2 x float>* %382, align 1
  %384 = extractelement <2 x float> %383, i32 0
  %385 = fpext float %384 to double
  %386 = bitcast %union.VectorReg* %6 to i8*
  %387 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %388 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %389 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %390 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %391 = bitcast %union.VectorReg* %6 to i32*
  store i32 %387, i32* %391, align 1, !tbaa !2452
  %392 = getelementptr inbounds i8, i8* %386, i64 4
  %393 = bitcast i8* %392 to float*
  %394 = bitcast i8* %392 to i32*
  store i32 %388, i32* %394, align 1, !tbaa !2452
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %396 = bitcast i64* %395 to float*
  %397 = bitcast i64* %395 to i32*
  store i32 %389, i32* %397, align 1, !tbaa !2452
  %398 = getelementptr inbounds i8, i8* %386, i64 12
  %399 = bitcast i8* %398 to float*
  %400 = bitcast i8* %398 to i32*
  store i32 %390, i32* %400, align 1, !tbaa !2452
  %401 = bitcast double %385 to i64
  %402 = load i64, i64* %378, align 1
  %403 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %404 = load i64, i64* %403, align 1
  %405 = load i64, i64* %395, align 1
  %406 = and i64 %404, %401
  %407 = and i64 %405, %402
  %408 = trunc i64 %406 to i32
  %409 = lshr i64 %406, 32
  %410 = trunc i64 %409 to i32
  store i32 %408, i32* %375, align 1, !tbaa !2451
  %411 = bitcast i8* %376 to i32*
  store i32 %410, i32* %411, align 1, !tbaa !2451
  %412 = trunc i64 %407 to i32
  %413 = bitcast i64* %378 to i32*
  store i32 %412, i32* %413, align 1, !tbaa !2451
  %414 = lshr i64 %407, 32
  %415 = trunc i64 %414 to i32
  %416 = bitcast i8* %380 to i32*
  store i32 %415, i32* %416, align 1, !tbaa !2451
  %417 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %418 = load <2 x i32>, <2 x i32>* %417, align 1
  %419 = bitcast i64* %378 to <2 x i32>*
  %420 = load <2 x i32>, <2 x i32>* %419, align 1
  %421 = bitcast [32 x %union.VectorReg]* %5 to double*
  %422 = bitcast <2 x i32> %418 to double
  %423 = fptrunc double %422 to float
  store float %423, float* %374, align 1, !tbaa !2452
  %424 = extractelement <2 x i32> %418, i32 1
  store i32 %424, i32* %411, align 1, !tbaa !2452
  %425 = extractelement <2 x i32> %420, i32 0
  store i32 %425, i32* %413, align 1, !tbaa !2452
  %426 = extractelement <2 x i32> %420, i32 1
  store i32 %426, i32* %416, align 1, !tbaa !2452
  %427 = add i64 %364, -24
  %428 = add i64 %366, 32
  store i64 %428, i64* %PC, align 8
  %429 = load <2 x float>, <2 x float>* %382, align 1
  %430 = extractelement <2 x float> %429, i32 0
  %431 = inttoptr i64 %427 to float*
  store float %430, float* %431, align 4
  %432 = load i64, i64* %RBP, align 8
  %433 = add i64 %432, -28
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %433 to i32*
  store i32 1, i32* %436, align 4
  %437 = bitcast %union.VectorReg* %6 to <2 x float>*
  %438 = bitcast %union.VectorReg* %6 to double*
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_402cdb

block_402c2b:                                     ; preds = %block_402bf4, %block_402c91
  %439 = phi i64 [ %.pre, %block_402bf4 ], [ %317, %block_402c91 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402bf4 ], [ %162, %block_402c91 ]
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -28
  %442 = add i64 %439, 3
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i32*
  %444 = load i32, i32* %443, align 4
  %445 = zext i32 %444 to i64
  store i64 %445, i64* %RAX, align 8, !tbaa !2428
  %446 = add i64 %440, -8
  %447 = add i64 %439, 6
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %446 to i32*
  %449 = load i32, i32* %448, align 4
  %450 = sub i32 %444, %449
  %451 = icmp ult i32 %444, %449
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %39, align 1, !tbaa !2432
  %453 = and i32 %450, 255
  %454 = tail call i32 @llvm.ctpop.i32(i32 %453) #8
  %455 = trunc i32 %454 to i8
  %456 = and i8 %455, 1
  %457 = xor i8 %456, 1
  store i8 %457, i8* %45, align 1, !tbaa !2446
  %458 = xor i32 %449, %444
  %459 = xor i32 %458, %450
  %460 = lshr i32 %459, 4
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  store i8 %462, i8* %50, align 1, !tbaa !2450
  %463 = icmp eq i32 %450, 0
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %53, align 1, !tbaa !2447
  %465 = lshr i32 %450, 31
  %466 = trunc i32 %465 to i8
  store i8 %466, i8* %56, align 1, !tbaa !2448
  %467 = lshr i32 %444, 31
  %468 = lshr i32 %449, 31
  %469 = xor i32 %468, %467
  %470 = xor i32 %465, %467
  %471 = add nuw nsw i32 %470, %469
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %62, align 1, !tbaa !2449
  %474 = icmp ne i8 %466, 0
  %475 = xor i1 %474, %472
  %.v14 = select i1 %475, i64 12, i64 125
  %476 = add i64 %439, %.v14
  store i64 %476, i64* %PC, align 8, !tbaa !2428
  br i1 %475, label %block_402c37, label %block_402ca8

block_402bc8:                                     ; preds = %block_402bb0
  %477 = add i64 %30, -4
  %478 = add i64 %65, 7
  store i64 %478, i64* %PC, align 8
  %479 = inttoptr i64 %477 to i32*
  store i32 -1, i32* %479, align 4
  %480 = load i64, i64* %PC, align 8
  %481 = add i64 %480, 400
  store i64 %481, i64* %PC, align 8, !tbaa !2428
  br label %block_402d5f

block_402bea:                                     ; preds = %block_402bd4
  %482 = add i64 %30, -20
  %483 = add i64 %245, 4
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i32*
  %485 = load i32, i32* %484, align 4
  %486 = add i32 %485, -1
  %487 = icmp eq i32 %485, 0
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %39, align 1, !tbaa !2432
  %489 = and i32 %486, 255
  %490 = tail call i32 @llvm.ctpop.i32(i32 %489) #8
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = xor i8 %492, 1
  store i8 %493, i8* %45, align 1, !tbaa !2446
  %494 = xor i32 %485, %486
  %495 = lshr i32 %494, 4
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  store i8 %497, i8* %50, align 1, !tbaa !2450
  %498 = icmp eq i32 %486, 0
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %53, align 1, !tbaa !2447
  %500 = lshr i32 %486, 31
  %501 = trunc i32 %500 to i8
  store i8 %501, i8* %56, align 1, !tbaa !2448
  %502 = lshr i32 %485, 31
  %503 = xor i32 %500, %502
  %504 = add nuw nsw i32 %503, %502
  %505 = icmp eq i32 %504, 2
  %506 = zext i1 %505 to i8
  store i8 %506, i8* %62, align 1, !tbaa !2449
  %.v13 = select i1 %498, i64 195, i64 10
  %507 = add i64 %245, %.v13
  store i64 %507, i64* %PC, align 8, !tbaa !2428
  br i1 %498, label %block_402cad, label %block_402bf4

block_402ce7:                                     ; preds = %block_402cdb
  %508 = add i64 %319, -16
  %509 = add i64 %355, 4
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to i64*
  %511 = load i64, i64* %510, align 8
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = add i64 %355, 8
  store i64 %512, i64* %PC, align 8
  %513 = load i32, i32* %322, align 4
  %514 = sext i32 %513 to i64
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %515 = shl nsw i64 %514, 2
  %516 = add i64 %515, %511
  %517 = add i64 %355, 13
  store i64 %517, i64* %PC, align 8
  %518 = inttoptr i64 %516 to i32*
  %519 = load i32, i32* %518, align 4
  store i32 %519, i32* %375, align 1, !tbaa !2452
  store float 0.000000e+00, float* %377, align 1, !tbaa !2452
  store float 0.000000e+00, float* %379, align 1, !tbaa !2452
  store float 0.000000e+00, float* %381, align 1, !tbaa !2452
  %520 = load <2 x float>, <2 x float>* %382, align 1
  %521 = extractelement <2 x float> %520, i32 0
  %522 = fpext float %521 to double
  %523 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %524 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %525 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %526 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %523, i32* %391, align 1, !tbaa !2452
  store i32 %524, i32* %394, align 1, !tbaa !2452
  store i32 %525, i32* %397, align 1, !tbaa !2452
  store i32 %526, i32* %400, align 1, !tbaa !2452
  %527 = bitcast double %522 to i64
  %528 = load i64, i64* %378, align 1
  %529 = load i64, i64* %403, align 1
  %530 = load i64, i64* %395, align 1
  %531 = and i64 %529, %527
  %532 = and i64 %530, %528
  %533 = trunc i64 %531 to i32
  %534 = lshr i64 %531, 32
  %535 = trunc i64 %534 to i32
  store i32 %533, i32* %375, align 1, !tbaa !2451
  store i32 %535, i32* %411, align 1, !tbaa !2451
  %536 = trunc i64 %532 to i32
  store i32 %536, i32* %413, align 1, !tbaa !2451
  %537 = lshr i64 %532, 32
  %538 = trunc i64 %537 to i32
  store i32 %538, i32* %416, align 1, !tbaa !2451
  %539 = add i64 %319, -24
  %540 = add i64 %355, 33
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %539 to i32*
  %542 = load i32, i32* %541, align 4
  store i32 %542, i32* %391, align 1, !tbaa !2452
  store float 0.000000e+00, float* %393, align 1, !tbaa !2452
  store float 0.000000e+00, float* %396, align 1, !tbaa !2452
  store float 0.000000e+00, float* %399, align 1, !tbaa !2452
  %543 = load <2 x float>, <2 x float>* %437, align 1
  %544 = extractelement <2 x float> %543, i32 0
  %545 = fpext float %544 to double
  store double %545, double* %438, align 1, !tbaa !2454
  %546 = add i64 %355, 41
  store i64 %546, i64* %PC, align 8
  %547 = load double, double* %421, align 1
  %548 = fcmp uno double %547, %545
  br i1 %548, label %549, label %559

; <label>:549:                                    ; preds = %block_402ce7
  %550 = fadd double %547, %545
  %551 = bitcast double %550 to i64
  %552 = and i64 %551, 9221120237041090560
  %553 = icmp eq i64 %552, 9218868437227405312
  %554 = and i64 %551, 2251799813685247
  %555 = icmp ne i64 %554, 0
  %556 = and i1 %553, %555
  br i1 %556, label %557, label %565

; <label>:557:                                    ; preds = %549
  %558 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %546, %struct.Memory* %MEMORY.3) #9
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre8 = load i8, i8* %53, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:559:                                    ; preds = %block_402ce7
  %560 = fcmp ogt double %547, %545
  br i1 %560, label %565, label %561

; <label>:561:                                    ; preds = %559
  %562 = fcmp olt double %547, %545
  br i1 %562, label %565, label %563

; <label>:563:                                    ; preds = %561
  %564 = fcmp oeq double %547, %545
  br i1 %564, label %565, label %569

; <label>:565:                                    ; preds = %563, %561, %559, %549
  %566 = phi i8 [ 0, %559 ], [ 0, %561 ], [ 1, %563 ], [ 1, %549 ]
  %567 = phi i8 [ 0, %559 ], [ 0, %561 ], [ 0, %563 ], [ 1, %549 ]
  %568 = phi i8 [ 0, %559 ], [ 1, %561 ], [ 0, %563 ], [ 1, %549 ]
  store i8 %566, i8* %53, align 1, !tbaa !2456
  store i8 %567, i8* %45, align 1, !tbaa !2456
  store i8 %568, i8* %39, align 1, !tbaa !2456
  br label %569

; <label>:569:                                    ; preds = %565, %563
  %570 = phi i8 [ %566, %565 ], [ %343, %563 ]
  %571 = phi i8 [ %568, %565 ], [ %331, %563 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %569, %557
  %572 = phi i8 [ %.pre8, %557 ], [ %570, %569 ]
  %573 = phi i8 [ %.pre7, %557 ], [ %571, %569 ]
  %574 = phi i64 [ %.pre6, %557 ], [ %546, %569 ]
  %575 = phi %struct.Memory* [ %558, %557 ], [ %MEMORY.3, %569 ]
  %576 = or i8 %572, %573
  %577 = icmp ne i8 %576, 0
  %.v17 = select i1 %577, i64 49, i64 6
  %578 = add i64 %574, %.v17
  store i64 %578, i64* %PC, align 8, !tbaa !2428
  br i1 %577, label %block_402d41, label %block_402d16

block_402c66:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %579 = load i64, i64* %RBP, align 8
  %580 = add i64 %579, -28
  %581 = add i64 %165, 3
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i32*
  %583 = load i32, i32* %582, align 4
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = add i64 %579, -36
  %586 = add i64 %165, 6
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %585 to i32*
  store i32 %583, i32* %587, align 4
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -16
  %590 = load i64, i64* %PC, align 8
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %589 to i64*
  %593 = load i64, i64* %592, align 8
  store i64 %593, i64* %RCX, align 8, !tbaa !2428
  %594 = add i64 %588, -32
  %595 = add i64 %590, 8
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i32*
  %597 = load i32, i32* %596, align 4
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RDX, align 8, !tbaa !2428
  %599 = shl nsw i64 %598, 2
  %600 = add i64 %599, %593
  %601 = add i64 %590, 13
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i32*
  %603 = load i32, i32* %602, align 4
  store i32 %603, i32* %649, align 1, !tbaa !2452
  store float 0.000000e+00, float* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %655, align 1, !tbaa !2452
  %604 = load <2 x float>, <2 x float>* %656, align 1
  %605 = extractelement <2 x float> %604, i32 0
  %606 = fpext float %605 to double
  %607 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %608 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %609 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %610 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %607, i32* %665, align 1, !tbaa !2452
  store i32 %608, i32* %668, align 1, !tbaa !2452
  store i32 %609, i32* %671, align 1, !tbaa !2452
  store i32 %610, i32* %674, align 1, !tbaa !2452
  %611 = bitcast double %606 to i64
  %612 = load i64, i64* %652, align 1
  %613 = load i64, i64* %677, align 1
  %614 = load i64, i64* %669, align 1
  %615 = and i64 %613, %611
  %616 = and i64 %614, %612
  %617 = trunc i64 %615 to i32
  %618 = lshr i64 %615, 32
  %619 = trunc i64 %618 to i32
  store i32 %617, i32* %649, align 1, !tbaa !2451
  store i32 %619, i32* %685, align 1, !tbaa !2451
  %620 = trunc i64 %616 to i32
  store i32 %620, i32* %687, align 1, !tbaa !2451
  %621 = lshr i64 %616, 32
  %622 = trunc i64 %621 to i32
  store i32 %622, i32* %690, align 1, !tbaa !2451
  %623 = load <2 x i32>, <2 x i32>* %691, align 1
  %624 = load <2 x i32>, <2 x i32>* %693, align 1
  %625 = bitcast <2 x i32> %623 to double
  %626 = fptrunc double %625 to float
  store float %626, float* %648, align 1, !tbaa !2452
  %627 = extractelement <2 x i32> %623, i32 1
  store i32 %627, i32* %685, align 1, !tbaa !2452
  %628 = extractelement <2 x i32> %624, i32 0
  store i32 %628, i32* %687, align 1, !tbaa !2452
  %629 = extractelement <2 x i32> %624, i32 1
  store i32 %629, i32* %690, align 1, !tbaa !2452
  %630 = add i64 %588, -24
  %631 = add i64 %590, 37
  store i64 %631, i64* %PC, align 8
  %632 = load <2 x float>, <2 x float>* %656, align 1
  %633 = extractelement <2 x float> %632, i32 0
  %634 = inttoptr i64 %630 to float*
  store float %633, float* %634, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402c91

block_402bf4:                                     ; preds = %block_402bea
  %635 = add i64 %30, -32
  %636 = add i64 %507, 7
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %635 to i32*
  store i32 1, i32* %637, align 4
  %638 = load i64, i64* %RBP, align 8
  %639 = add i64 %638, -16
  %640 = load i64, i64* %PC, align 8
  %641 = add i64 %640, 4
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %639 to i64*
  %643 = load i64, i64* %642, align 8
  store i64 %643, i64* %RAX, align 8, !tbaa !2428
  %644 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %645 = add i64 %640, 8
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %643 to i32*
  %647 = load i32, i32* %646, align 4
  %648 = bitcast [32 x %union.VectorReg]* %5 to float*
  %649 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %647, i32* %649, align 1, !tbaa !2452
  %650 = getelementptr inbounds i8, i8* %644, i64 4
  %651 = bitcast i8* %650 to float*
  store float 0.000000e+00, float* %651, align 1, !tbaa !2452
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %653 = bitcast i64* %652 to float*
  store float 0.000000e+00, float* %653, align 1, !tbaa !2452
  %654 = getelementptr inbounds i8, i8* %644, i64 12
  %655 = bitcast i8* %654 to float*
  store float 0.000000e+00, float* %655, align 1, !tbaa !2452
  %656 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %657 = load <2 x float>, <2 x float>* %656, align 1
  %658 = extractelement <2 x float> %657, i32 0
  %659 = fpext float %658 to double
  %660 = bitcast %union.VectorReg* %6 to i8*
  %661 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %662 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %663 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %664 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %665 = bitcast %union.VectorReg* %6 to i32*
  store i32 %661, i32* %665, align 1, !tbaa !2452
  %666 = getelementptr inbounds i8, i8* %660, i64 4
  %667 = bitcast i8* %666 to float*
  %668 = bitcast i8* %666 to i32*
  store i32 %662, i32* %668, align 1, !tbaa !2452
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %670 = bitcast i64* %669 to float*
  %671 = bitcast i64* %669 to i32*
  store i32 %663, i32* %671, align 1, !tbaa !2452
  %672 = getelementptr inbounds i8, i8* %660, i64 12
  %673 = bitcast i8* %672 to float*
  %674 = bitcast i8* %672 to i32*
  store i32 %664, i32* %674, align 1, !tbaa !2452
  %675 = bitcast double %659 to i64
  %676 = load i64, i64* %652, align 1
  %677 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %678 = load i64, i64* %677, align 1
  %679 = load i64, i64* %669, align 1
  %680 = and i64 %678, %675
  %681 = and i64 %679, %676
  %682 = trunc i64 %680 to i32
  %683 = lshr i64 %680, 32
  %684 = trunc i64 %683 to i32
  store i32 %682, i32* %649, align 1, !tbaa !2451
  %685 = bitcast i8* %650 to i32*
  store i32 %684, i32* %685, align 1, !tbaa !2451
  %686 = trunc i64 %681 to i32
  %687 = bitcast i64* %652 to i32*
  store i32 %686, i32* %687, align 1, !tbaa !2451
  %688 = lshr i64 %681, 32
  %689 = trunc i64 %688 to i32
  %690 = bitcast i8* %654 to i32*
  store i32 %689, i32* %690, align 1, !tbaa !2451
  %691 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %692 = load <2 x i32>, <2 x i32>* %691, align 1
  %693 = bitcast i64* %652 to <2 x i32>*
  %694 = load <2 x i32>, <2 x i32>* %693, align 1
  %695 = bitcast [32 x %union.VectorReg]* %5 to double*
  %696 = bitcast <2 x i32> %692 to double
  %697 = fptrunc double %696 to float
  store float %697, float* %648, align 1, !tbaa !2452
  %698 = extractelement <2 x i32> %692, i32 1
  store i32 %698, i32* %685, align 1, !tbaa !2452
  %699 = extractelement <2 x i32> %694, i32 0
  store i32 %699, i32* %687, align 1, !tbaa !2452
  %700 = extractelement <2 x i32> %694, i32 1
  store i32 %700, i32* %690, align 1, !tbaa !2452
  %701 = add i64 %638, -24
  %702 = add i64 %640, 32
  store i64 %702, i64* %PC, align 8
  %703 = load <2 x float>, <2 x float>* %656, align 1
  %704 = extractelement <2 x float> %703, i32 0
  %705 = inttoptr i64 %701 to float*
  store float %704, float* %705, align 4
  %706 = load i64, i64* %RBP, align 8
  %707 = add i64 %706, -32
  %708 = load i64, i64* %PC, align 8
  %709 = add i64 %708, 3
  store i64 %709, i64* %PC, align 8
  %710 = inttoptr i64 %707 to i32*
  %711 = load i32, i32* %710, align 4
  %712 = zext i32 %711 to i64
  store i64 %712, i64* %RCX, align 8, !tbaa !2428
  %713 = add i64 %706, -20
  %714 = add i64 %708, 6
  store i64 %714, i64* %PC, align 8
  %715 = inttoptr i64 %713 to i32*
  %716 = load i32, i32* %715, align 4
  %717 = add i32 %716, %711
  %718 = zext i32 %717 to i64
  store i64 %718, i64* %RCX, align 8, !tbaa !2428
  %719 = icmp ult i32 %717, %711
  %720 = icmp ult i32 %717, %716
  %721 = or i1 %719, %720
  %722 = zext i1 %721 to i8
  store i8 %722, i8* %39, align 1, !tbaa !2432
  %723 = and i32 %717, 255
  %724 = tail call i32 @llvm.ctpop.i32(i32 %723) #8
  %725 = trunc i32 %724 to i8
  %726 = and i8 %725, 1
  %727 = xor i8 %726, 1
  store i8 %727, i8* %45, align 1, !tbaa !2446
  %728 = xor i32 %716, %711
  %729 = xor i32 %728, %717
  %730 = lshr i32 %729, 4
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  store i8 %732, i8* %50, align 1, !tbaa !2450
  %733 = icmp eq i32 %717, 0
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %53, align 1, !tbaa !2447
  %735 = lshr i32 %717, 31
  %736 = trunc i32 %735 to i8
  store i8 %736, i8* %56, align 1, !tbaa !2448
  %737 = lshr i32 %711, 31
  %738 = lshr i32 %716, 31
  %739 = xor i32 %735, %737
  %740 = xor i32 %735, %738
  %741 = add nuw nsw i32 %739, %740
  %742 = icmp eq i32 %741, 2
  %743 = zext i1 %742 to i8
  store i8 %743, i8* %62, align 1, !tbaa !2449
  %744 = add i64 %708, 9
  store i64 %744, i64* %PC, align 8
  store i32 %717, i32* %710, align 4
  %745 = load i64, i64* %RBP, align 8
  %746 = add i64 %745, -28
  %747 = load i64, i64* %PC, align 8
  %748 = add i64 %747, 7
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %746 to i32*
  store i32 1, i32* %749, align 4
  %750 = bitcast %union.VectorReg* %6 to <2 x float>*
  %751 = bitcast %union.VectorReg* %6 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c2b

block_402d41:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402d16
  %752 = phi i64 [ %578, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %.pre9, %block_402d16 ]
  %753 = load i64, i64* %RBP, align 8
  %754 = add i64 %753, -28
  %755 = add i64 %752, 8
  store i64 %755, i64* %PC, align 8
  %756 = inttoptr i64 %754 to i32*
  %757 = load i32, i32* %756, align 4
  %758 = add i32 %757, 1
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RAX, align 8, !tbaa !2428
  %760 = icmp eq i32 %757, -1
  %761 = icmp eq i32 %758, 0
  %762 = or i1 %760, %761
  %763 = zext i1 %762 to i8
  store i8 %763, i8* %39, align 1, !tbaa !2432
  %764 = and i32 %758, 255
  %765 = tail call i32 @llvm.ctpop.i32(i32 %764) #8
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  store i8 %768, i8* %45, align 1, !tbaa !2446
  %769 = xor i32 %757, %758
  %770 = lshr i32 %769, 4
  %771 = trunc i32 %770 to i8
  %772 = and i8 %771, 1
  store i8 %772, i8* %50, align 1, !tbaa !2450
  %773 = zext i1 %761 to i8
  store i8 %773, i8* %53, align 1, !tbaa !2447
  %774 = lshr i32 %758, 31
  %775 = trunc i32 %774 to i8
  store i8 %775, i8* %56, align 1, !tbaa !2448
  %776 = lshr i32 %757, 31
  %777 = xor i32 %774, %776
  %778 = add nuw nsw i32 %777, %774
  %779 = icmp eq i32 %778, 2
  %780 = zext i1 %779 to i8
  store i8 %780, i8* %62, align 1, !tbaa !2449
  %781 = add i64 %752, 14
  store i64 %781, i64* %PC, align 8
  store i32 %758, i32* %756, align 4
  %782 = load i64, i64* %PC, align 8
  %783 = add i64 %782, -116
  store i64 %783, i64* %PC, align 8, !tbaa !2428
  br label %block_402cdb
}

; Function Attrs: noinline
define %struct.Memory* @sub_400610_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400610:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %R9 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %1, 1
  store i64 %14, i64* %PC, align 8
  %15 = load i64, i64* %RSP, align 8, !tbaa !2428
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %13, i64* %17, align 8
  %18 = load i64, i64* %PC, align 8
  store i64 %16, i64* %RBP, align 8, !tbaa !2428
  %19 = add i64 %15, -1016
  store i64 %19, i64* %RSP, align 8, !tbaa !2428
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %26 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %27 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 8) to i32*), align 8
  %28 = bitcast [32 x %union.VectorReg]* %8 to float*
  %29 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %27, i32* %29, align 1, !tbaa !2452
  %30 = getelementptr inbounds i8, i8* %26, i64 4
  %31 = bitcast i8* %30 to float*
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to float*
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  %34 = getelementptr inbounds i8, i8* %26, i64 12
  %35 = bitcast i8* %34 to float*
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i64 720, i64* %R8, align 8, !tbaa !2428
  %36 = add i64 %15, -840
  store i64 %36, i64* %R9, align 8, !tbaa !2428
  %37 = add i64 %15, -12
  %38 = add i64 %18, 72
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %37 to i32*
  store i32 0, i32* %39, align 4
  %40 = load i64, i64* %R9, align 8
  %41 = load i64, i64* %PC, align 8
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -840
  %44 = load i64, i64* %RSI, align 8
  %45 = add i64 %41, 10
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %46, align 8
  %47 = load i32, i32* %EDX, align 4
  %48 = zext i32 %47 to i64
  %49 = load i64, i64* %PC, align 8
  store i64 %48, i64* %RSI, align 8, !tbaa !2428
  %50 = load i64, i64* %R8, align 8
  store i64 %50, i64* %RDX, align 8, !tbaa !2428
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -848
  %53 = load i64, i64* %RCX, align 8
  %54 = add i64 %49, 12
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -852
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 8
  store i64 %59, i64* %PC, align 8
  %60 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %61 = load <2 x float>, <2 x float>* %60, align 1
  %62 = extractelement <2 x float> %61, i32 0
  %63 = inttoptr i64 %57 to float*
  store float %62, float* %63, align 4
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -864
  %66 = load i64, i64* %RAX, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 7
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, -462
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call fastcc %struct.Memory* @ext_4004b0_memset(%struct.State* nonnull %0, %struct.Memory* %2)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -832
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i8*
  store i8 32, i8* %81, align 1
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -848
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %RAX, align 8, !tbaa !2428
  %88 = add i64 %82, -96
  %89 = add i64 %84, 11
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  store i64 %87, i64* %90, align 8
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -864
  %93 = load i64, i64* %PC, align 8
  %94 = add i64 %93, 7
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RCX, align 8, !tbaa !2428
  %97 = add i64 %91, -104
  %98 = add i64 %93, 11
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  store i64 %96, i64* %99, align 8
  %100 = load i64, i64* %PC, align 8
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -852
  %103 = add i64 %100, 30
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %106 = add i64 %101, -8
  %107 = add i64 %100, 35
  store i64 %107, i64* %PC, align 8
  %108 = load <2 x float>, <2 x float>* %60, align 1
  %109 = extractelement <2 x float> %108, i32 0
  %110 = inttoptr i64 %106 to float*
  store float %109, float* %110, align 4
  %111 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %112 = load i64, i64* @stderr, align 64
  store i64 %112, i64* %RDI, align 8, !tbaa !2428
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -840
  %115 = add i64 %111, 26
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %118 = add i64 %111, -515
  %119 = add i64 %111, 33
  %120 = load i64, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122, align 8
  store i64 %121, i64* %RSP, align 8, !tbaa !2428
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %123 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %76)
  %124 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %125 = load i64, i64* @stderr, align 64
  store i64 %125, i64* %RDI, align 8, !tbaa !2428
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -868
  %128 = load i32, i32* %EAX, align 4
  %129 = add i64 %124, 24
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i32*
  store i32 %128, i32* %130, align 4
  %131 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %132 = add i64 %131, -572
  %133 = add i64 %131, 7
  %134 = load i64, i64* %RSP, align 8, !tbaa !2428
  %135 = add i64 %134, -8
  %136 = inttoptr i64 %135 to i64*
  store i64 %133, i64* %136, align 8
  store i64 %135, i64* %RSP, align 8, !tbaa !2428
  store i64 %132, i64* %PC, align 8, !tbaa !2428
  %137 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %123)
  %138 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %139 = load i64, i64* @stderr, align 64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %RBP, align 8
  %141 = add i64 %140, -872
  %142 = load i32, i32* %EAX, align 4
  %143 = add i64 %138, 24
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %141 to i32*
  store i32 %142, i32* %144, align 4
  %145 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %146 = add i64 %145, -603
  %147 = add i64 %145, 7
  %148 = load i64, i64* %RSP, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150, align 8
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %151 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %137)
  %152 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %153 = load i64, i64* @stderr, align 64
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -96
  %156 = add i64 %152, 22
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %155 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RDX, align 8, !tbaa !2428
  %159 = add i64 %154, -876
  %160 = load i32, i32* %EAX, align 4
  %161 = add i64 %152, 28
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  store i32 %160, i32* %162, align 4
  %163 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %164 = add i64 %163, -638
  %165 = add i64 %163, 7
  %166 = load i64, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %168, align 8
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  %169 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %151)
  %170 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %171 = load i64, i64* @stderr, align 64
  store i64 %171, i64* %RDI, align 8, !tbaa !2428
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -104
  %174 = add i64 %170, 22
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %RDX, align 8, !tbaa !2428
  %177 = add i64 %172, -880
  %178 = load i32, i32* %EAX, align 4
  %179 = add i64 %170, 28
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %177 to i32*
  store i32 %178, i32* %180, align 4
  %181 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %182 = add i64 %181, -673
  %183 = add i64 %181, 7
  %184 = load i64, i64* %RSP, align 8, !tbaa !2428
  %185 = add i64 %184, -8
  %186 = inttoptr i64 %185 to i64*
  store i64 %183, i64* %186, align 8
  store i64 %185, i64* %RSP, align 8, !tbaa !2428
  store i64 %182, i64* %PC, align 8, !tbaa !2428
  %187 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %169)
  %188 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -20
  store i64 %190, i64* %R8, align 8, !tbaa !2428
  %191 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*), align 8
  %192 = bitcast [32 x %union.VectorReg]* %8 to double*
  %193 = bitcast i64* %32 to double*
  %194 = bitcast %union.VectorReg* %9 to i8*
  %195 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 32) to i64*), align 16
  %196 = bitcast %union.VectorReg* %9 to double*
  %197 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %199 = bitcast i64* %198 to double*
  store double 0.000000e+00, double* %199, align 1, !tbaa !2454
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %201 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %202 = sext i32 %201 to i64
  %203 = mul nsw i64 %202, %202
  %204 = shl i64 %203, 32
  %205 = ashr exact i64 %204, 32
  %206 = mul nsw i64 %202, %205
  %207 = bitcast %union.VectorReg* %10 to i8*
  %208 = trunc i64 %206 to i32
  %209 = sitofp i32 %208 to double
  %210 = bitcast %union.VectorReg* %10 to double*
  store double %209, double* %210, align 1, !tbaa !2454
  %211 = bitcast %union.VectorReg* %11 to i8*
  %212 = bitcast double %191 to <2 x i32>
  %213 = extractelement <2 x i32> %212, i32 0
  %214 = bitcast %union.VectorReg* %11 to i32*
  store i32 %213, i32* %214, align 1, !tbaa !2452
  %215 = extractelement <2 x i32> %212, i32 1
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = bitcast i8* %216 to i32*
  store i32 %215, i32* %217, align 1, !tbaa !2452
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %219 = bitcast i64* %218 to i32*
  store i32 0, i32* %219, align 1, !tbaa !2452
  %220 = getelementptr inbounds i8, i8* %211, i64 12
  %221 = bitcast i8* %220 to i32*
  store i32 0, i32* %221, align 1, !tbaa !2452
  %222 = bitcast %union.VectorReg* %11 to double*
  %223 = load double, double* %222, align 1
  %224 = fmul double %223, %209
  %225 = bitcast i64 %195 to double
  %226 = fdiv double %224, %225
  %227 = trunc i64 %203 to i32
  %228 = and i64 %203, 4294967295
  store i64 %228, i64* %200, align 8, !tbaa !2428
  %229 = icmp ne i64 %205, %203
  %230 = zext i1 %229 to i8
  store i8 %230, i8* %20, align 1, !tbaa !2432
  %231 = and i32 %227, 255
  %232 = tail call i32 @llvm.ctpop.i32(i32 %231) #8
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  store i8 %235, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %23, align 1, !tbaa !2447
  %236 = lshr i32 %227, 31
  %237 = trunc i32 %236 to i8
  store i8 %237, i8* %24, align 1, !tbaa !2448
  store i8 %230, i8* %25, align 1, !tbaa !2449
  %238 = sitofp i32 %227 to double
  store double %238, double* %196, align 1, !tbaa !2454
  %239 = bitcast i64* %32 to <2 x i32>*
  %240 = fmul double %191, %238
  %241 = fadd double %226, %240
  store double %241, double* %222, align 1, !tbaa !2454
  %242 = bitcast double %240 to <2 x i32>
  %243 = fptrunc double %241 to float
  store float %243, float* %28, align 1, !tbaa !2452
  %244 = extractelement <2 x i32> %242, i32 1
  %245 = bitcast i8* %30 to i32*
  store i32 %244, i32* %245, align 1, !tbaa !2452
  %246 = bitcast i64* %32 to i32*
  store i32 0, i32* %246, align 1, !tbaa !2452
  %247 = bitcast i8* %34 to i32*
  store i32 0, i32* %247, align 1, !tbaa !2452
  %248 = add i64 %189, -12
  %249 = add i64 %188, 121
  store i64 %249, i64* %PC, align 8
  %250 = load <2 x float>, <2 x float>* %60, align 1
  %251 = extractelement <2 x float> %250, i32 0
  %252 = inttoptr i64 %248 to float*
  store float %251, float* %252, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %255 = zext i32 %254 to i64
  store i64 %255, i64* %RSI, align 8, !tbaa !2428
  %256 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RDX, align 8, !tbaa !2428
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -884
  %260 = load i32, i32* %EAX, align 4
  %261 = add i64 %253, 20
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i32*
  store i32 %260, i32* %262, align 4
  %263 = load i64, i64* %PC, align 8
  %264 = add i64 %263, 4027
  %265 = add i64 %263, 5
  %266 = load i64, i64* %RSP, align 8, !tbaa !2428
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 %265, i64* %268, align 8
  store i64 %267, i64* %RSP, align 8, !tbaa !2428
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  %269 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %264, %struct.Memory* %187)
  %270 = load i64, i64* %PC, align 8
  %271 = add i64 %270, -570
  %272 = add i64 %270, 5
  %273 = load i64, i64* %RSP, align 8, !tbaa !2428
  %274 = add i64 %273, -8
  %275 = inttoptr i64 %274 to i64*
  store i64 %272, i64* %275, align 8
  store i64 %274, i64* %RSP, align 8, !tbaa !2428
  store i64 %271, i64* %PC, align 8, !tbaa !2428
  %276 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %271, %struct.Memory* %269)
  %277 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %278 = load i64, i64* %RBP, align 8
  %279 = add i64 %278, -40
  %280 = add i64 %277, 35
  store i64 %280, i64* %PC, align 8
  %281 = load <2 x float>, <2 x float>* %60, align 1
  %282 = extractelement <2 x float> %281, i32 0
  %283 = inttoptr i64 %279 to float*
  store float %282, float* %283, align 4
  %284 = load i64, i64* %PC, align 8
  %285 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RSI, align 8, !tbaa !2428
  %287 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %288 = zext i32 %287 to i64
  store i64 %288, i64* %RDX, align 8, !tbaa !2428
  %289 = add i64 %284, 4446
  %290 = add i64 %284, 19
  %291 = load i64, i64* %RSP, align 8, !tbaa !2428
  %292 = add i64 %291, -8
  %293 = inttoptr i64 %292 to i64*
  store i64 %290, i64* %293, align 8
  store i64 %292, i64* %RSP, align 8, !tbaa !2428
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  %294 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %289, %struct.Memory* %276)
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, -629
  %297 = add i64 %295, 5
  %298 = load i64, i64* %RSP, align 8, !tbaa !2428
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %297, i64* %300, align 8
  store i64 %299, i64* %RSP, align 8, !tbaa !2428
  store i64 %296, i64* %PC, align 8, !tbaa !2428
  %301 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %296, %struct.Memory* %294)
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -40
  %304 = load i64, i64* %PC, align 8
  %305 = add i64 %304, 5
  store i64 %305, i64* %PC, align 8
  %306 = load <2 x float>, <2 x float>* %60, align 1
  %307 = load <2 x i32>, <2 x i32>* %239, align 1
  %308 = inttoptr i64 %303 to float*
  %309 = load float, float* %308, align 4
  %310 = extractelement <2 x float> %306, i32 0
  %311 = fsub float %310, %309
  store float %311, float* %28, align 1, !tbaa !2452
  %312 = bitcast <2 x float> %306 to <2 x i32>
  %313 = extractelement <2 x i32> %312, i32 1
  store i32 %313, i32* %245, align 1, !tbaa !2452
  %314 = extractelement <2 x i32> %307, i32 0
  store i32 %314, i32* %246, align 1, !tbaa !2452
  %315 = extractelement <2 x i32> %307, i32 1
  store i32 %315, i32* %247, align 1, !tbaa !2452
  %316 = load <2 x float>, <2 x float>* %60, align 1
  %317 = extractelement <2 x float> %316, i32 0
  store float %317, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*), align 16
  %318 = add i64 %304, -634
  %319 = add i64 %304, 19
  %320 = load i64, i64* %RSP, align 8, !tbaa !2428
  %321 = add i64 %320, -8
  %322 = inttoptr i64 %321 to i64*
  store i64 %319, i64* %322, align 8
  store i64 %321, i64* %RSP, align 8, !tbaa !2428
  store i64 %318, i64* %PC, align 8, !tbaa !2428
  %323 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %318, %struct.Memory* %301)
  %324 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %325 = load i64, i64* %RBP, align 8
  %326 = add i64 %325, -40
  %327 = add i64 %324, 38
  store i64 %327, i64* %PC, align 8
  %328 = load <2 x float>, <2 x float>* %60, align 1
  %329 = extractelement <2 x float> %328, i32 0
  %330 = inttoptr i64 %326 to float*
  store float %329, float* %330, align 4
  %331 = load i64, i64* %PC, align 8
  %332 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RSI, align 8, !tbaa !2428
  %334 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %335 = zext i32 %334 to i64
  store i64 %335, i64* %RDX, align 8, !tbaa !2428
  %336 = add i64 %331, 5149
  %337 = add i64 %331, 19
  %338 = load i64, i64* %RSP, align 8, !tbaa !2428
  %339 = add i64 %338, -8
  %340 = inttoptr i64 %339 to i64*
  store i64 %337, i64* %340, align 8
  store i64 %339, i64* %RSP, align 8, !tbaa !2428
  store i64 %336, i64* %PC, align 8, !tbaa !2428
  %341 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %336, %struct.Memory* %323)
  %342 = load i64, i64* %PC, align 8
  %343 = add i64 %342, -710
  %344 = add i64 %342, 5
  %345 = load i64, i64* %RSP, align 8, !tbaa !2428
  %346 = add i64 %345, -8
  %347 = inttoptr i64 %346 to i64*
  store i64 %344, i64* %347, align 8
  store i64 %346, i64* %RSP, align 8, !tbaa !2428
  store i64 %343, i64* %PC, align 8, !tbaa !2428
  %348 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %343, %struct.Memory* %341)
  %349 = load i64, i64* %RBP, align 8
  %350 = add i64 %349, -40
  %351 = load i64, i64* %PC, align 8
  %352 = add i64 %351, 5
  store i64 %352, i64* %PC, align 8
  %353 = load <2 x float>, <2 x float>* %60, align 1
  %354 = inttoptr i64 %350 to float*
  %355 = load float, float* %354, align 4
  %356 = extractelement <2 x float> %353, i32 0
  %357 = fsub float %356, %355
  store float %357, float* %28, align 1, !tbaa !2452
  %358 = bitcast <2 x float> %353 to <2 x i32>
  %359 = extractelement <2 x i32> %358, i32 1
  store i32 %359, i32* %245, align 1, !tbaa !2452
  %360 = load <2 x float>, <2 x float>* %60, align 1
  %361 = extractelement <2 x float> %360, i32 0
  store float %361, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*), align 4
  %362 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to i32*), align 16
  store i32 %362, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %363 = load <2 x float>, <2 x float>* %60, align 1
  %364 = load <2 x i32>, <2 x i32>* %239, align 1
  %365 = extractelement <2 x float> %363, i32 0
  %366 = fadd float %365, %361
  store float %366, float* %28, align 1, !tbaa !2452
  %367 = bitcast <2 x float> %363 to <2 x i32>
  %368 = extractelement <2 x i32> %367, i32 1
  store i32 %368, i32* %245, align 1, !tbaa !2452
  %369 = extractelement <2 x i32> %364, i32 0
  store i32 %369, i32* %246, align 1, !tbaa !2452
  %370 = extractelement <2 x i32> %364, i32 1
  store i32 %370, i32* %247, align 1, !tbaa !2452
  %371 = add i64 %349, -16
  %372 = add i64 %351, 37
  store i64 %372, i64* %PC, align 8
  %373 = load <2 x float>, <2 x float>* %60, align 1
  %374 = extractelement <2 x float> %373, i32 0
  %375 = inttoptr i64 %371 to float*
  store float %374, float* %375, align 4
  %376 = load i64, i64* %PC, align 8
  %377 = add i64 %376, 11
  store i64 %377, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4008bb

block_400def:                                     ; preds = %block_400d9e
  %378 = add i64 %2471, -2095
  %379 = add i64 %2471, 5
  %380 = load i64, i64* %RSP, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %379, i64* %382, align 8
  store i64 %381, i64* %RSP, align 8, !tbaa !2428
  store i64 %378, i64* %PC, align 8, !tbaa !2428
  %383 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %378, %struct.Memory* %MEMORY.12)
  %384 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2574, align 1, !tbaa !2451
  store i32 0, i32* %2575, align 1, !tbaa !2451
  store i32 0, i32* %2576, align 1, !tbaa !2451
  store i32 0, i32* %2577, align 1, !tbaa !2451
  %385 = load i64, i64* %RBP, align 8
  %386 = add i64 %385, -84
  %387 = add i64 %384, 18
  store i64 %387, i64* %PC, align 8
  %388 = load <2 x float>, <2 x float>* %60, align 1
  %389 = extractelement <2 x float> %388, i32 0
  %390 = inttoptr i64 %386 to float*
  store float %389, float* %390, align 4
  %391 = load i64, i64* %RBP, align 8
  %392 = add i64 %391, -84
  %393 = load i64, i64* %PC, align 8
  %394 = add i64 %393, 5
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %392 to i32*
  %396 = load i32, i32* %395, align 4
  store i32 %396, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %397 = add i64 %391, -80
  %398 = add i64 %393, 10
  store i64 %398, i64* %PC, align 8
  %399 = load <2 x float>, <2 x float>* %60, align 1
  %400 = load <2 x i32>, <2 x i32>* %239, align 1
  %401 = inttoptr i64 %397 to float*
  %402 = load float, float* %401, align 4
  %403 = extractelement <2 x float> %399, i32 0
  %404 = fsub float %403, %402
  store float %404, float* %28, align 1, !tbaa !2452
  %405 = bitcast <2 x float> %399 to <2 x i32>
  %406 = extractelement <2 x i32> %405, i32 1
  store i32 %406, i32* %245, align 1, !tbaa !2452
  %407 = extractelement <2 x i32> %400, i32 0
  store i32 %407, i32* %246, align 1, !tbaa !2452
  %408 = extractelement <2 x i32> %400, i32 1
  store i32 %408, i32* %247, align 1, !tbaa !2452
  %409 = add i64 %391, -72
  %410 = add i64 %393, 15
  store i64 %410, i64* %PC, align 8
  %411 = load <2 x float>, <2 x float>* %60, align 1
  %412 = extractelement <2 x float> %411, i32 0
  %413 = inttoptr i64 %409 to float*
  store float %412, float* %413, align 4
  %414 = load i64, i64* %PC, align 8
  %415 = load i64, i64* @stderr, align 64
  store i64 %415, i64* %RDI, align 8, !tbaa !2428
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -68
  %418 = add i64 %414, 11
  store i64 %418, i64* %PC, align 8
  %419 = inttoptr i64 %417 to i32*
  %420 = load i32, i32* %419, align 4
  %421 = zext i32 %420 to i64
  store i64 %421, i64* %RDX, align 8, !tbaa !2428
  %422 = load <2 x i32>, <2 x i32>* %1475, align 1
  %423 = load <2 x i32>, <2 x i32>* %1476, align 1
  %424 = extractelement <2 x i32> %422, i32 0
  store i32 %424, i32* %29, align 1, !tbaa !2452
  %425 = extractelement <2 x i32> %422, i32 1
  store i32 %425, i32* %245, align 1, !tbaa !2452
  %426 = extractelement <2 x i32> %423, i32 0
  store i32 %426, i32* %246, align 1, !tbaa !2452
  %427 = extractelement <2 x i32> %423, i32 1
  store i32 %427, i32* %247, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %428 = add i64 %414, -2389
  %429 = add i64 %414, 21
  %430 = load i64, i64* %RSP, align 8, !tbaa !2428
  %431 = add i64 %430, -8
  %432 = inttoptr i64 %431 to i64*
  store i64 %429, i64* %432, align 8
  store i64 %431, i64* %RSP, align 8, !tbaa !2428
  store i64 %428, i64* %PC, align 8, !tbaa !2428
  %433 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %383)
  %434 = load i64, i64* %RBP, align 8
  %435 = add i64 %434, -64
  %436 = load i64, i64* %PC, align 8
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %435 to i32*
  %439 = load i32, i32* %438, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %440 = and i32 %439, 255
  %441 = tail call i32 @llvm.ctpop.i32(i32 %440) #8
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  %444 = xor i8 %443, 1
  store i8 %444, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  %445 = icmp eq i32 %439, 0
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %23, align 1, !tbaa !2447
  %447 = lshr i32 %439, 31
  %448 = trunc i32 %447 to i8
  store i8 %448, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  %449 = add i64 %434, -940
  %450 = load i32, i32* %EAX, align 4
  %451 = add i64 %436, 10
  store i64 %451, i64* %PC, align 8
  %452 = inttoptr i64 %449 to i32*
  store i32 %450, i32* %452, align 4
  %453 = load i64, i64* %PC, align 8
  %454 = load i8, i8* %24, align 1, !tbaa !2448
  %455 = icmp ne i8 %454, 0
  %456 = load i8, i8* %25, align 1, !tbaa !2449
  %457 = icmp ne i8 %456, 0
  %458 = xor i1 %455, %457
  %.v34 = select i1 %458, i64 6, i64 15
  %459 = add i64 %453, %.v34
  store i64 %459, i64* %PC, align 8, !tbaa !2428
  br i1 %458, label %block_400e3a, label %block_400e43

block_400f66:                                     ; preds = %block_400ee0
  %460 = add i64 %2502, -2470
  %461 = add i64 %2502, 5
  %462 = load i64, i64* %RSP, align 8, !tbaa !2428
  %463 = add i64 %462, -8
  %464 = inttoptr i64 %463 to i64*
  store i64 %461, i64* %464, align 8
  store i64 %463, i64* %RSP, align 8, !tbaa !2428
  store i64 %460, i64* %PC, align 8, !tbaa !2428
  %465 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %460, %struct.Memory* %MEMORY.13)
  %466 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2574, align 1, !tbaa !2451
  store i32 0, i32* %2575, align 1, !tbaa !2451
  store i32 0, i32* %2576, align 1, !tbaa !2451
  store i32 0, i32* %2577, align 1, !tbaa !2451
  %467 = load i64, i64* %RBP, align 8
  %468 = add i64 %467, -80
  %469 = add i64 %466, 18
  store i64 %469, i64* %PC, align 8
  %470 = load <2 x float>, <2 x float>* %60, align 1
  %471 = inttoptr i64 %468 to float*
  %472 = load float, float* %471, align 4
  %473 = extractelement <2 x float> %470, i32 0
  %474 = fsub float %473, %472
  store float %474, float* %28, align 1, !tbaa !2452
  %475 = bitcast <2 x float> %470 to <2 x i32>
  %476 = extractelement <2 x i32> %475, i32 1
  store i32 %476, i32* %245, align 1, !tbaa !2452
  %477 = add i64 %467, -84
  %478 = add i64 %466, 23
  store i64 %478, i64* %PC, align 8
  %479 = load <2 x float>, <2 x float>* %60, align 1
  %480 = extractelement <2 x float> %479, i32 0
  %481 = inttoptr i64 %477 to float*
  store float %480, float* %481, align 4
  %482 = load i64, i64* %PC, align 8
  %483 = load i64, i64* @stderr, align 64
  store i64 %483, i64* %RDI, align 8, !tbaa !2428
  %484 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %485 = zext i32 %484 to i64
  store i64 %485, i64* %RDX, align 8, !tbaa !2428
  %486 = load <2 x i32>, <2 x i32>* %1475, align 1
  %487 = load <2 x i32>, <2 x i32>* %1476, align 1
  %488 = extractelement <2 x i32> %486, i32 0
  store i32 %488, i32* %29, align 1, !tbaa !2452
  %489 = extractelement <2 x i32> %486, i32 1
  store i32 %489, i32* %245, align 1, !tbaa !2452
  %490 = extractelement <2 x i32> %487, i32 0
  store i32 %490, i32* %246, align 1, !tbaa !2452
  %491 = extractelement <2 x i32> %487, i32 1
  store i32 %491, i32* %247, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %492 = add i64 %482, -2754
  %493 = add i64 %482, 25
  %494 = load i64, i64* %RSP, align 8, !tbaa !2428
  %495 = add i64 %494, -8
  %496 = inttoptr i64 %495 to i64*
  store i64 %493, i64* %496, align 8
  store i64 %495, i64* %RSP, align 8, !tbaa !2428
  store i64 %492, i64* %PC, align 8, !tbaa !2428
  %497 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %465)
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -64
  %500 = load i64, i64* %PC, align 8
  %501 = add i64 %500, 4
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %499 to i32*
  %503 = load i32, i32* %502, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %504 = and i32 %503, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #8
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  %509 = icmp eq i32 %503, 0
  %510 = zext i1 %509 to i8
  store i8 %510, i8* %23, align 1, !tbaa !2447
  %511 = lshr i32 %503, 31
  %512 = trunc i32 %511 to i8
  store i8 %512, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  %513 = add i64 %498, -952
  %514 = load i32, i32* %EAX, align 4
  %515 = add i64 %500, 10
  store i64 %515, i64* %PC, align 8
  %516 = inttoptr i64 %513 to i32*
  store i32 %514, i32* %516, align 4
  %517 = load i64, i64* %PC, align 8
  %518 = load i8, i8* %24, align 1, !tbaa !2448
  %519 = icmp ne i8 %518, 0
  %520 = load i8, i8* %25, align 1, !tbaa !2449
  %521 = icmp ne i8 %520, 0
  %522 = xor i1 %519, %521
  %.v37 = select i1 %522, i64 6, i64 23
  %523 = add i64 %517, %.v37
  store i64 %523, i64* %PC, align 8, !tbaa !2428
  br i1 %522, label %block_400fab, label %block_400fbc

block_4014e5:                                     ; preds = %block_4014d7
  %524 = add i64 %699, -3877
  %525 = add i64 %699, 5
  %526 = load i64, i64* %RSP, align 8, !tbaa !2428
  %527 = add i64 %526, -8
  %528 = inttoptr i64 %527 to i64*
  store i64 %525, i64* %528, align 8
  store i64 %527, i64* %RSP, align 8, !tbaa !2428
  store i64 %524, i64* %PC, align 8, !tbaa !2428
  %529 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %524, %struct.Memory* %MEMORY.1)
  %530 = load i64, i64* %RBP, align 8
  %531 = add i64 %530, -40
  %532 = load i64, i64* %PC, align 8
  %533 = add i64 %532, 5
  store i64 %533, i64* %PC, align 8
  %534 = load <2 x float>, <2 x float>* %60, align 1
  %535 = extractelement <2 x float> %534, i32 0
  %536 = inttoptr i64 %531 to float*
  store float %535, float* %536, align 4
  %537 = load i64, i64* %PC, align 8
  %538 = add i64 %537, 11
  store i64 %538, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4014fa

block_4015d8:                                     ; preds = %block_4015c4
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %539 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %540 = zext i32 %539 to i64
  store i64 %540, i64* %RSI, align 8, !tbaa !2428
  %541 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %542 = zext i32 %541 to i64
  store i64 %542, i64* %RDX, align 8, !tbaa !2428
  %543 = add i64 %1338, 1720
  %544 = add i64 %1338, 52
  %545 = load i64, i64* %RSP, align 8, !tbaa !2428
  %546 = add i64 %545, -8
  %547 = inttoptr i64 %546 to i64*
  store i64 %544, i64* %547, align 8
  store i64 %546, i64* %RSP, align 8, !tbaa !2428
  store i64 %543, i64* %PC, align 8, !tbaa !2428
  %548 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %543, %struct.Memory* %MEMORY.2)
  %549 = load i64, i64* %PC, align 8
  %550 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %551 = add i32 %550, 1
  %552 = zext i32 %551 to i64
  store i64 %552, i64* %RAX, align 8, !tbaa !2428
  %553 = icmp eq i32 %550, -1
  %554 = icmp eq i32 %551, 0
  %555 = or i1 %553, %554
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %20, align 1, !tbaa !2432
  %557 = and i32 %551, 255
  %558 = tail call i32 @llvm.ctpop.i32(i32 %557) #8
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  %561 = xor i8 %560, 1
  store i8 %561, i8* %21, align 1, !tbaa !2446
  %562 = xor i32 %550, %551
  %563 = lshr i32 %562, 4
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  store i8 %565, i8* %22, align 1, !tbaa !2450
  %566 = zext i1 %554 to i8
  store i8 %566, i8* %23, align 1, !tbaa !2447
  %567 = lshr i32 %551, 31
  %568 = trunc i32 %567 to i8
  store i8 %568, i8* %24, align 1, !tbaa !2448
  %569 = lshr i32 %550, 31
  %570 = xor i32 %567, %569
  %571 = add nuw nsw i32 %570, %567
  %572 = icmp eq i32 %571, 2
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %25, align 1, !tbaa !2449
  store i32 %551, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %574 = add i64 %549, -72
  store i64 %574, i64* %PC, align 8, !tbaa !2428
  br label %block_4015c4

block_401756:                                     ; preds = %block_4014d7
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %575 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 48) to double*), align 16
  %576 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  store i32 %576, i32* %2252, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2568, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2572, align 1, !tbaa !2452
  %577 = load <2 x float>, <2 x float>* %2084, align 1
  %578 = extractelement <2 x float> %577, i32 0
  %579 = fpext float %578 to double
  %580 = fdiv double %579, %575
  store double %580, double* %210, align 1, !tbaa !2454
  %581 = bitcast double %575 to <2 x i32>
  %582 = fptrunc double %580 to float
  store float %582, float* %2559, align 1, !tbaa !2452
  %583 = extractelement <2 x i32> %581, i32 1
  store i32 %583, i32* %2575, align 1, !tbaa !2452
  store i32 0, i32* %2576, align 1, !tbaa !2452
  store i32 0, i32* %2577, align 1, !tbaa !2452
  %584 = load <2 x float>, <2 x float>* %2565, align 1
  %585 = extractelement <2 x float> %584, i32 0
  store float %585, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %586 = load i64, i64* @stderr, align 64
  store i64 %586, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %587 = add i64 %699, -4758
  %588 = add i64 %699, 66
  %589 = load i64, i64* %RSP, align 8, !tbaa !2428
  %590 = add i64 %589, -8
  %591 = inttoptr i64 %590 to i64*
  store i64 %588, i64* %591, align 8
  store i64 %590, i64* %RSP, align 8, !tbaa !2428
  store i64 %587, i64* %PC, align 8, !tbaa !2428
  %592 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %593 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %594 = load i64, i64* %RBP, align 8
  %595 = add i64 %594, -996
  %596 = load i32, i32* %EAX, align 4
  %597 = add i64 %593, 8
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %595 to i32*
  store i32 %596, i32* %598, align 4
  %599 = load i32, i32* %ECX, align 4
  %600 = zext i32 %599 to i64
  %601 = load i64, i64* %PC, align 8
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %602 = load i64, i64* %RSP, align 8
  %603 = add i64 %602, 1008
  store i64 %603, i64* %RSP, align 8, !tbaa !2428
  %604 = icmp ugt i64 %602, -1009
  %605 = zext i1 %604 to i8
  store i8 %605, i8* %20, align 1, !tbaa !2432
  %606 = trunc i64 %603 to i32
  %607 = and i32 %606, 255
  %608 = tail call i32 @llvm.ctpop.i32(i32 %607) #8
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = xor i8 %610, 1
  store i8 %611, i8* %21, align 1, !tbaa !2446
  %612 = xor i64 %602, 16
  %613 = xor i64 %612, %603
  %614 = lshr i64 %613, 4
  %615 = trunc i64 %614 to i8
  %616 = and i8 %615, 1
  store i8 %616, i8* %22, align 1, !tbaa !2450
  %617 = icmp eq i64 %603, 0
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %23, align 1, !tbaa !2447
  %619 = lshr i64 %603, 63
  %620 = trunc i64 %619 to i8
  store i8 %620, i8* %24, align 1, !tbaa !2448
  %621 = lshr i64 %602, 63
  %622 = xor i64 %619, %621
  %623 = add nuw nsw i64 %622, %619
  %624 = icmp eq i64 %623, 2
  %625 = zext i1 %624 to i8
  store i8 %625, i8* %25, align 1, !tbaa !2449
  %626 = add i64 %601, 10
  store i64 %626, i64* %PC, align 8
  %627 = add i64 %602, 1016
  %628 = inttoptr i64 %603 to i64*
  %629 = load i64, i64* %628, align 8
  store i64 %629, i64* %RBP, align 8, !tbaa !2428
  store i64 %627, i64* %RSP, align 8, !tbaa !2428
  %630 = add i64 %601, 11
  store i64 %630, i64* %PC, align 8
  %631 = inttoptr i64 %627 to i64*
  %632 = load i64, i64* %631, align 8
  store i64 %632, i64* %PC, align 8, !tbaa !2428
  %633 = add i64 %602, 1024
  store i64 %633, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %592

block_400aee:                                     ; preds = %block_400ab0, %block_400ac6
  %634 = phi i64 [ %1489, %block_400ab0 ], [ %.pre16, %block_400ac6 ]
  %635 = load i64, i64* %RBP, align 8
  %636 = add i64 %635, -904
  %637 = add i64 %634, 8
  store i64 %637, i64* %PC, align 8
  %638 = inttoptr i64 %636 to double*
  %639 = load double, double* %638, align 8
  %640 = bitcast double %639 to <2 x i32>
  %641 = fptrunc double %639 to float
  store float %641, float* %28, align 1, !tbaa !2452
  %642 = extractelement <2 x i32> %640, i32 1
  store i32 %642, i32* %245, align 1, !tbaa !2452
  store i32 0, i32* %246, align 1, !tbaa !2452
  store i32 0, i32* %247, align 1, !tbaa !2452
  %643 = add i64 %635, -24
  %644 = add i64 %634, 17
  store i64 %644, i64* %PC, align 8
  %645 = load <2 x float>, <2 x float>* %60, align 1
  %646 = extractelement <2 x float> %645, i32 0
  %647 = inttoptr i64 %643 to float*
  store float %646, float* %647, align 4
  %648 = load i64, i64* %PC, align 8
  %649 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %650 = add i32 %649, 1
  %651 = zext i32 %650 to i64
  store i64 %651, i64* %RAX, align 8, !tbaa !2428
  %652 = icmp eq i32 %649, -1
  %653 = icmp eq i32 %650, 0
  %654 = or i1 %652, %653
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %20, align 1, !tbaa !2432
  %656 = and i32 %650, 255
  %657 = tail call i32 @llvm.ctpop.i32(i32 %656) #8
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  store i8 %660, i8* %21, align 1, !tbaa !2446
  %661 = xor i32 %649, %650
  %662 = lshr i32 %661, 4
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  store i8 %664, i8* %22, align 1, !tbaa !2450
  %665 = zext i1 %653 to i8
  store i8 %665, i8* %23, align 1, !tbaa !2447
  %666 = lshr i32 %650, 31
  %667 = trunc i32 %666 to i8
  store i8 %667, i8* %24, align 1, !tbaa !2448
  %668 = lshr i32 %649, 31
  %669 = xor i32 %666, %668
  %670 = add nuw nsw i32 %669, %666
  %671 = icmp eq i32 %670, 2
  %672 = zext i1 %671 to i8
  store i8 %672, i8* %25, align 1, !tbaa !2449
  store i32 %650, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %673 = add i64 %648, -280
  store i64 %673, i64* %PC, align 8, !tbaa !2428
  br label %block_4009e7

block_4014d7:                                     ; preds = %block_401622, %block_4013ec
  %674 = phi i32 [ %.pre27, %block_4013ec ], [ %1786, %block_401622 ]
  %675 = phi i64 [ %.pre26, %block_4013ec ], [ %1809, %block_401622 ]
  %MEMORY.1 = phi %struct.Memory* [ %1272, %block_4013ec ], [ %1783, %block_401622 ]
  %676 = add i32 %674, -12
  %677 = icmp ult i32 %674, 12
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %20, align 1, !tbaa !2432
  %679 = and i32 %676, 255
  %680 = tail call i32 @llvm.ctpop.i32(i32 %679) #8
  %681 = trunc i32 %680 to i8
  %682 = and i8 %681, 1
  %683 = xor i8 %682, 1
  store i8 %683, i8* %21, align 1, !tbaa !2446
  %684 = xor i32 %674, %676
  %685 = lshr i32 %684, 4
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  store i8 %687, i8* %22, align 1, !tbaa !2450
  %688 = icmp eq i32 %676, 0
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %23, align 1, !tbaa !2447
  %690 = lshr i32 %676, 31
  %691 = trunc i32 %690 to i8
  store i8 %691, i8* %24, align 1, !tbaa !2448
  %692 = lshr i32 %674, 31
  %693 = xor i32 %690, %692
  %694 = add nuw nsw i32 %693, %692
  %695 = icmp eq i32 %694, 2
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %25, align 1, !tbaa !2449
  %697 = icmp ne i8 %691, 0
  %698 = xor i1 %697, %695
  %.v44 = select i1 %698, i64 14, i64 639
  %699 = add i64 %675, %.v44
  store i64 %699, i64* %PC, align 8, !tbaa !2428
  br i1 %698, label %block_4014e5, label %block_401756

block_400951:                                     ; preds = %block_40093d
  %700 = sext i32 %2406 to i64
  store i64 %700, i64* %RAX, align 8, !tbaa !2428
  %701 = shl nsw i64 %700, 2
  %702 = add i64 %701, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %703 = add i64 %2436, 17
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %702 to float*
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705, align 4
  store i32 %706, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  %707 = load i64, i64* %3089, align 1
  %708 = trunc i64 %707 to i32
  store i32 %708, i32* %ECX, align 1, !tbaa !2451
  store i32 0, i32* %3091, align 1, !tbaa !2451
  %709 = load i64, i64* %RCX, align 8
  %710 = and i64 %709, 4294967295
  %711 = xor i64 %710, 2147483648
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = trunc i64 %711 to i32
  store i32 %712, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %713 = add i64 %2436, 48
  store i64 %713, i64* %PC, align 8
  %714 = load <2 x float>, <2 x float>* %60, align 1
  %715 = extractelement <2 x float> %714, i32 0
  store float %715, float* %704, align 4
  %716 = load i64, i64* %PC, align 8
  %717 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %718 = add i32 %717, 1
  %719 = zext i32 %718 to i64
  store i64 %719, i64* %RAX, align 8, !tbaa !2428
  %720 = icmp eq i32 %717, -1
  %721 = icmp eq i32 %718, 0
  %722 = or i1 %720, %721
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %20, align 1, !tbaa !2432
  %724 = and i32 %718, 255
  %725 = tail call i32 @llvm.ctpop.i32(i32 %724) #8
  %726 = trunc i32 %725 to i8
  %727 = and i8 %726, 1
  %728 = xor i8 %727, 1
  store i8 %728, i8* %21, align 1, !tbaa !2446
  %729 = xor i32 %717, %718
  %730 = lshr i32 %729, 4
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  store i8 %732, i8* %22, align 1, !tbaa !2450
  %733 = zext i1 %721 to i8
  store i8 %733, i8* %23, align 1, !tbaa !2447
  %734 = lshr i32 %718, 31
  %735 = trunc i32 %734 to i8
  store i8 %735, i8* %24, align 1, !tbaa !2448
  %736 = lshr i32 %717, 31
  %737 = xor i32 %734, %736
  %738 = add nuw nsw i32 %737, %734
  %739 = icmp eq i32 %738, 2
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %25, align 1, !tbaa !2449
  store i32 %718, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %741 = add i64 %716, -68
  store i64 %741, i64* %PC, align 8, !tbaa !2428
  br label %block_40093d

block_400fcb:                                     ; preds = %block_400fbc
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %.pre23 = load i64, i64* @stderr, align 64
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i64 %.pre23, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %742 = add i64 %1355, -2827
  %743 = add i64 %1355, 63
  %744 = load i64, i64* %RSP, align 8, !tbaa !2428
  %745 = add i64 %744, -8
  %746 = inttoptr i64 %745 to i64*
  store i64 %743, i64* %746, align 8
  store i64 %745, i64* %RSP, align 8, !tbaa !2428
  store i64 %742, i64* %PC, align 8, !tbaa !2428
  %747 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %497)
  %748 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %749 = load i64, i64* @stderr, align 64
  store i64 %749, i64* %RDI, align 8, !tbaa !2428
  %750 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %751 = zext i32 %750 to i64
  store i64 %751, i64* %RDX, align 8, !tbaa !2428
  %752 = load i64, i64* %RBP, align 8
  %753 = add i64 %752, -956
  %754 = load i32, i32* %EAX, align 4
  %755 = add i64 %748, 31
  store i64 %755, i64* %PC, align 8
  %756 = inttoptr i64 %753 to i32*
  store i32 %754, i32* %756, align 4
  %757 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %758 = add i64 %757, -2921
  %759 = add i64 %757, 7
  %760 = load i64, i64* %RSP, align 8, !tbaa !2428
  %761 = add i64 %760, -8
  %762 = inttoptr i64 %761 to i64*
  store i64 %759, i64* %762, align 8
  store i64 %761, i64* %RSP, align 8, !tbaa !2428
  store i64 %758, i64* %PC, align 8, !tbaa !2428
  %763 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %747)
  %764 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %765 = load i64, i64* @stderr, align 64
  store i64 %765, i64* %RDI, align 8, !tbaa !2428
  %766 = load i64, i64* %RBP, align 8
  %767 = add i64 %766, -960
  %768 = load i32, i32* %EAX, align 4
  %769 = add i64 %764, 24
  store i64 %769, i64* %PC, align 8
  %770 = inttoptr i64 %767 to i32*
  store i32 %768, i32* %770, align 4
  %771 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %772 = add i64 %771, -2952
  %773 = add i64 %771, 7
  %774 = load i64, i64* %RSP, align 8, !tbaa !2428
  %775 = add i64 %774, -8
  %776 = inttoptr i64 %775 to i64*
  store i64 %773, i64* %776, align 8
  store i64 %775, i64* %RSP, align 8, !tbaa !2428
  store i64 %772, i64* %PC, align 8, !tbaa !2428
  %777 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %763)
  %778 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %779 = load i64, i64* @stderr, align 64
  store i64 %779, i64* %RDI, align 8, !tbaa !2428
  %780 = load i64, i64* %RBP, align 8
  %781 = add i64 %780, -964
  %782 = load i32, i32* %EAX, align 4
  %783 = add i64 %778, 24
  store i64 %783, i64* %PC, align 8
  %784 = inttoptr i64 %781 to i32*
  store i32 %782, i32* %784, align 4
  %785 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %786 = add i64 %785, -2983
  %787 = add i64 %785, 7
  %788 = load i64, i64* %RSP, align 8, !tbaa !2428
  %789 = add i64 %788, -8
  %790 = inttoptr i64 %789 to i64*
  store i64 %787, i64* %790, align 8
  store i64 %789, i64* %RSP, align 8, !tbaa !2428
  store i64 %786, i64* %PC, align 8, !tbaa !2428
  %791 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %777)
  %792 = load i64, i64* %PC, align 8
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %793 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %794 = zext i32 %793 to i64
  store i64 %794, i64* %RDX, align 8, !tbaa !2428
  %795 = load <2 x i32>, <2 x i32>* %1475, align 1
  %796 = load <2 x i32>, <2 x i32>* %1476, align 1
  %797 = sitofp i32 %793 to float
  store float %797, float* %2559, align 1, !tbaa !2452
  %798 = extractelement <2 x i32> %795, i32 1
  store i32 %798, i32* %2575, align 1, !tbaa !2452
  %799 = extractelement <2 x i32> %796, i32 0
  store i32 %799, i32* %2576, align 1, !tbaa !2452
  %800 = extractelement <2 x i32> %796, i32 1
  store i32 %800, i32* %2577, align 1, !tbaa !2452
  %801 = load i64, i64* %RBP, align 8
  %802 = add i64 %801, -72
  %803 = add i64 %792, 19
  store i64 %803, i64* %PC, align 8
  %804 = load <2 x float>, <2 x float>* %2565, align 1
  %805 = load <2 x i32>, <2 x i32>* %1476, align 1
  %806 = inttoptr i64 %802 to float*
  %807 = load float, float* %806, align 4
  %808 = extractelement <2 x float> %804, i32 0
  %809 = fmul float %808, %807
  store float %809, float* %2559, align 1, !tbaa !2452
  %810 = bitcast <2 x float> %804 to <2 x i32>
  %811 = extractelement <2 x i32> %810, i32 1
  store i32 %811, i32* %2575, align 1, !tbaa !2452
  %812 = extractelement <2 x i32> %805, i32 0
  store i32 %812, i32* %2576, align 1, !tbaa !2452
  %813 = extractelement <2 x i32> %805, i32 1
  store i32 %813, i32* %2577, align 1, !tbaa !2452
  %814 = add i64 %801, -44
  %815 = add i64 %792, 24
  store i64 %815, i64* %PC, align 8
  %816 = load <2 x float>, <2 x float>* %2565, align 1
  %817 = extractelement <2 x float> %816, i32 0
  %818 = inttoptr i64 %814 to float*
  store float %817, float* %818, align 4
  %819 = load i64, i64* %PC, align 8
  %820 = load <2 x float>, <2 x float>* %60, align 1
  %821 = extractelement <2 x float> %820, i32 0
  store float %821, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %822 = load i64, i64* %RBP, align 8
  %823 = add i64 %822, -968
  %824 = load i32, i32* %EAX, align 4
  %825 = add i64 %819, 26
  store i64 %825, i64* %PC, align 8
  %826 = inttoptr i64 %823 to i32*
  store i32 %824, i32* %826, align 4
  %827 = bitcast i64* %2569 to double*
  %828 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %829 = bitcast i64* %218 to <2 x i32>*
  %.pre24 = load i64, i64* %PC, align 8
  %.pre25 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  br label %block_4010a0

block_401149:                                     ; preds = %block_4010c3
  %830 = add i64 %1386, -2953
  %831 = add i64 %1386, 5
  %832 = load i64, i64* %RSP, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %831, i64* %834, align 8
  store i64 %833, i64* %RSP, align 8, !tbaa !2428
  store i64 %830, i64* %PC, align 8, !tbaa !2428
  %835 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %830, %struct.Memory* %MEMORY.4)
  %836 = load i64, i64* %RBP, align 8
  %837 = add i64 %836, -40
  %838 = load i64, i64* %PC, align 8
  %839 = add i64 %838, 5
  store i64 %839, i64* %PC, align 8
  %840 = load <2 x float>, <2 x float>* %60, align 1
  %841 = load <2 x i32>, <2 x i32>* %239, align 1
  %842 = inttoptr i64 %837 to float*
  %843 = load float, float* %842, align 4
  %844 = extractelement <2 x float> %840, i32 0
  %845 = fsub float %844, %843
  store float %845, float* %28, align 1, !tbaa !2452
  %846 = bitcast <2 x float> %840 to <2 x i32>
  %847 = extractelement <2 x i32> %846, i32 1
  store i32 %847, i32* %245, align 1, !tbaa !2452
  %848 = extractelement <2 x i32> %841, i32 0
  store i32 %848, i32* %246, align 1, !tbaa !2452
  %849 = extractelement <2 x i32> %841, i32 1
  store i32 %849, i32* %247, align 1, !tbaa !2452
  %850 = add i64 %836, -44
  %851 = add i64 %838, 10
  store i64 %851, i64* %PC, align 8
  %852 = load <2 x float>, <2 x float>* %60, align 1
  %853 = load <2 x i32>, <2 x i32>* %239, align 1
  %854 = inttoptr i64 %850 to float*
  %855 = load float, float* %854, align 4
  %856 = extractelement <2 x float> %852, i32 0
  %857 = fsub float %856, %855
  store float %857, float* %28, align 1, !tbaa !2452
  %858 = bitcast <2 x float> %852 to <2 x i32>
  %859 = extractelement <2 x i32> %858, i32 1
  store i32 %859, i32* %245, align 1, !tbaa !2452
  %860 = extractelement <2 x i32> %853, i32 0
  store i32 %860, i32* %246, align 1, !tbaa !2452
  %861 = extractelement <2 x i32> %853, i32 1
  store i32 %861, i32* %247, align 1, !tbaa !2452
  %862 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %863 = zext i32 %862 to i64
  store i64 %863, i64* %RAX, align 8, !tbaa !2428
  %864 = load <2 x i32>, <2 x i32>* %1475, align 1
  %865 = load <2 x i32>, <2 x i32>* %1476, align 1
  %866 = sitofp i32 %862 to float
  store float %866, float* %2559, align 1, !tbaa !2452
  %867 = extractelement <2 x i32> %864, i32 1
  store i32 %867, i32* %2575, align 1, !tbaa !2452
  %868 = extractelement <2 x i32> %865, i32 0
  store i32 %868, i32* %2576, align 1, !tbaa !2452
  %869 = extractelement <2 x i32> %865, i32 1
  store i32 %869, i32* %2577, align 1, !tbaa !2452
  %870 = load <2 x float>, <2 x float>* %60, align 1
  %871 = load <2 x i32>, <2 x i32>* %239, align 1
  %872 = load <2 x float>, <2 x float>* %2565, align 1
  %873 = extractelement <2 x float> %870, i32 0
  %874 = extractelement <2 x float> %872, i32 0
  %875 = fdiv float %873, %874
  store float %875, float* %28, align 1, !tbaa !2452
  %876 = bitcast <2 x float> %870 to <2 x i32>
  %877 = extractelement <2 x i32> %876, i32 1
  store i32 %877, i32* %245, align 1, !tbaa !2452
  %878 = extractelement <2 x i32> %871, i32 0
  store i32 %878, i32* %246, align 1, !tbaa !2452
  %879 = extractelement <2 x i32> %871, i32 1
  store i32 %879, i32* %247, align 1, !tbaa !2452
  %880 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %881 = sext i32 %880 to i64
  store i64 %881, i64* %RCX, align 8, !tbaa !2428
  %882 = shl nsw i64 %881, 2
  %883 = add i64 %882, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %884 = add i64 %838, 42
  store i64 %884, i64* %PC, align 8
  %885 = load <2 x float>, <2 x float>* %60, align 1
  %886 = extractelement <2 x float> %885, i32 0
  %887 = inttoptr i64 %883 to float*
  store float %886, float* %887, align 4
  %888 = load i64, i64* %PC, align 8
  %889 = add i64 %888, -3000
  %890 = add i64 %888, 5
  %891 = load i64, i64* %RSP, align 8, !tbaa !2428
  %892 = add i64 %891, -8
  %893 = inttoptr i64 %892 to i64*
  store i64 %890, i64* %893, align 8
  store i64 %892, i64* %RSP, align 8, !tbaa !2428
  store i64 %889, i64* %PC, align 8, !tbaa !2428
  %894 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %889, %struct.Memory* %835)
  %895 = load i64, i64* %RBP, align 8
  %896 = add i64 %895, -40
  %897 = load i64, i64* %PC, align 8
  %898 = add i64 %897, 5
  store i64 %898, i64* %PC, align 8
  %899 = load <2 x float>, <2 x float>* %60, align 1
  %900 = extractelement <2 x float> %899, i32 0
  %901 = inttoptr i64 %896 to float*
  store float %900, float* %901, align 4
  %902 = load i64, i64* %PC, align 8
  %903 = add i64 %902, 11
  store i64 %903, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40118d

block_4011eb:                                     ; preds = %block_40118d
  %904 = add i64 %2861, -3115
  %905 = add i64 %2861, 5
  %906 = load i64, i64* %RSP, align 8, !tbaa !2428
  %907 = add i64 %906, -8
  %908 = inttoptr i64 %907 to i64*
  store i64 %905, i64* %908, align 8
  store i64 %907, i64* %RSP, align 8, !tbaa !2428
  store i64 %904, i64* %PC, align 8, !tbaa !2428
  %909 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %904, %struct.Memory* %MEMORY.16)
  %910 = load i64, i64* %PC, align 8
  %911 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to i64*), align 8
  store i64 %911, i64* %197, align 1, !tbaa !2454
  store double 0.000000e+00, double* %199, align 1, !tbaa !2454
  %912 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to i64*), align 8
  store i64 %912, i64* %2573, align 1, !tbaa !2454
  store double 0.000000e+00, double* %827, align 1, !tbaa !2454
  %913 = load i64, i64* %RBP, align 8
  %914 = add i64 %913, -40
  %915 = add i64 %910, 21
  store i64 %915, i64* %PC, align 8
  %916 = load <2 x float>, <2 x float>* %60, align 1
  %917 = load <2 x i32>, <2 x i32>* %239, align 1
  %918 = inttoptr i64 %914 to float*
  %919 = load float, float* %918, align 4
  %920 = extractelement <2 x float> %916, i32 0
  %921 = fsub float %920, %919
  store float %921, float* %28, align 1, !tbaa !2452
  %922 = bitcast <2 x float> %916 to <2 x i32>
  %923 = extractelement <2 x i32> %922, i32 1
  store i32 %923, i32* %245, align 1, !tbaa !2452
  %924 = extractelement <2 x i32> %917, i32 0
  store i32 %924, i32* %246, align 1, !tbaa !2452
  %925 = extractelement <2 x i32> %917, i32 1
  store i32 %925, i32* %247, align 1, !tbaa !2452
  %926 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %927 = zext i32 %926 to i64
  store i64 %927, i64* %RAX, align 8, !tbaa !2428
  %928 = load <2 x i32>, <2 x i32>* %828, align 1
  %929 = load <2 x i32>, <2 x i32>* %829, align 1
  %930 = sitofp i32 %926 to float
  store float %930, float* %2260, align 1, !tbaa !2452
  %931 = extractelement <2 x i32> %928, i32 1
  store i32 %931, i32* %217, align 1, !tbaa !2452
  %932 = extractelement <2 x i32> %929, i32 0
  store i32 %932, i32* %219, align 1, !tbaa !2452
  %933 = extractelement <2 x i32> %929, i32 1
  store i32 %933, i32* %221, align 1, !tbaa !2452
  %934 = load <2 x float>, <2 x float>* %60, align 1
  %935 = load <2 x i32>, <2 x i32>* %239, align 1
  %936 = load <2 x float>, <2 x float>* %2264, align 1
  %937 = extractelement <2 x float> %934, i32 0
  %938 = extractelement <2 x float> %936, i32 0
  %939 = fdiv float %937, %938
  store float %939, float* %28, align 1, !tbaa !2452
  %940 = bitcast <2 x float> %934 to <2 x i32>
  %941 = extractelement <2 x i32> %940, i32 1
  store i32 %941, i32* %245, align 1, !tbaa !2452
  %942 = extractelement <2 x i32> %935, i32 0
  store i32 %942, i32* %246, align 1, !tbaa !2452
  %943 = extractelement <2 x i32> %935, i32 1
  store i32 %943, i32* %247, align 1, !tbaa !2452
  %944 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %945 = sext i32 %944 to i64
  %946 = shl nsw i64 %945, 2
  %947 = add i64 %946, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %948 = add i64 %910, 53
  store i64 %948, i64* %PC, align 8
  %949 = load <2 x float>, <2 x float>* %60, align 1
  %950 = extractelement <2 x float> %949, i32 0
  %951 = inttoptr i64 %947 to float*
  store float %950, float* %951, align 4
  %952 = load i64, i64* %PC, align 8
  %953 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %954 = sext i32 %953 to i64
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %955 = shl nsw i64 %954, 2
  %956 = add i64 %955, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %957 = add i64 %952, 17
  store i64 %957, i64* %PC, align 8
  %958 = inttoptr i64 %956 to i32*
  %959 = load i32, i32* %958, align 4
  store i32 %959, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %960 = add i64 %955, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %961 = add i64 %952, 34
  store i64 %961, i64* %PC, align 8
  %962 = load <2 x float>, <2 x float>* %60, align 1
  %963 = load <2 x i32>, <2 x i32>* %239, align 1
  %964 = inttoptr i64 %960 to float*
  %965 = load float, float* %964, align 4
  %966 = extractelement <2 x float> %962, i32 0
  %967 = fadd float %966, %965
  store float %967, float* %28, align 1, !tbaa !2452
  %968 = bitcast <2 x float> %962 to <2 x i32>
  %969 = extractelement <2 x i32> %968, i32 1
  store i32 %969, i32* %245, align 1, !tbaa !2452
  %970 = extractelement <2 x i32> %963, i32 0
  store i32 %970, i32* %246, align 1, !tbaa !2452
  %971 = extractelement <2 x i32> %963, i32 1
  store i32 %971, i32* %247, align 1, !tbaa !2452
  %972 = load i64, i64* %RBP, align 8
  %973 = add i64 %972, -16
  %974 = add i64 %952, 39
  store i64 %974, i64* %PC, align 8
  %975 = load <2 x float>, <2 x float>* %60, align 1
  %976 = extractelement <2 x float> %975, i32 0
  %977 = inttoptr i64 %973 to float*
  store float %976, float* %977, align 4
  %978 = load i64, i64* %RBP, align 8
  %979 = add i64 %978, -16
  %980 = load i64, i64* %PC, align 8
  %981 = add i64 %980, 5
  store i64 %981, i64* %PC, align 8
  %982 = inttoptr i64 %979 to i32*
  %983 = load i32, i32* %982, align 4
  store i32 %983, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %984 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %985 = sext i32 %984 to i64
  store i64 %985, i64* %RCX, align 8, !tbaa !2428
  %986 = shl nsw i64 %985, 2
  %987 = add i64 %986, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %988 = add i64 %980, 22
  store i64 %988, i64* %PC, align 8
  %989 = load <2 x float>, <2 x float>* %60, align 1
  %990 = extractelement <2 x float> %989, i32 0
  %991 = inttoptr i64 %987 to float*
  store float %990, float* %991, align 4
  %992 = load i64, i64* %RBP, align 8
  %993 = add i64 %992, -12
  %994 = load i64, i64* %PC, align 8
  %995 = add i64 %994, 5
  store i64 %995, i64* %PC, align 8
  %996 = inttoptr i64 %993 to i32*
  %997 = load i32, i32* %996, align 4
  store i32 %997, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %998 = load <2 x float>, <2 x float>* %60, align 1
  %999 = extractelement <2 x float> %998, i32 0
  %1000 = fpext float %999 to double
  store double %1000, double* %192, align 1, !tbaa !2454
  %1001 = add i64 %992, -16
  %1002 = add i64 %994, 14
  store i64 %1002, i64* %PC, align 8
  %1003 = inttoptr i64 %1001 to i32*
  %1004 = load i32, i32* %1003, align 4
  store i32 %1004, i32* %214, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2261, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2262, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2263, align 1, !tbaa !2452
  %1005 = load <2 x float>, <2 x float>* %2264, align 1
  %1006 = extractelement <2 x float> %1005, i32 0
  %1007 = fpext float %1006 to double
  store double %1007, double* %222, align 1, !tbaa !2454
  %1008 = load double, double* %210, align 1
  %1009 = fmul double %1008, %1007
  store double %1009, double* %210, align 1, !tbaa !2454
  %1010 = load <2 x i32>, <2 x i32>* %239, align 1
  %1011 = fdiv double %1000, %1009
  %1012 = bitcast double %1011 to <2 x i32>
  %1013 = fptrunc double %1011 to float
  store float %1013, float* %28, align 1, !tbaa !2452
  %1014 = extractelement <2 x i32> %1012, i32 1
  store i32 %1014, i32* %245, align 1, !tbaa !2452
  %1015 = extractelement <2 x i32> %1010, i32 0
  store i32 %1015, i32* %246, align 1, !tbaa !2452
  %1016 = extractelement <2 x i32> %1010, i32 1
  store i32 %1016, i32* %247, align 1, !tbaa !2452
  %1017 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1018 = sext i32 %1017 to i64
  %1019 = shl nsw i64 %1018, 2
  %1020 = add i64 %1019, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1021 = add i64 %994, 47
  store i64 %1021, i64* %PC, align 8
  %1022 = load <2 x float>, <2 x float>* %60, align 1
  %1023 = extractelement <2 x float> %1022, i32 0
  %1024 = inttoptr i64 %1020 to float*
  store float %1023, float* %1024, align 4
  %1025 = load i64, i64* %PC, align 8
  %1026 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1027 = sext i32 %1026 to i64
  store i64 %1027, i64* %RCX, align 8, !tbaa !2428
  %1028 = shl nsw i64 %1027, 2
  %1029 = add i64 %1028, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1030 = add i64 %1025, 17
  store i64 %1030, i64* %PC, align 8
  %1031 = inttoptr i64 %1029 to i32*
  %1032 = load i32, i32* %1031, align 4
  store i32 %1032, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1033 = load <2 x float>, <2 x float>* %60, align 1
  %1034 = extractelement <2 x float> %1033, i32 0
  %1035 = fpext float %1034 to double
  %1036 = load double, double* %196, align 1
  %1037 = fdiv double %1036, %1035
  store double %1037, double* %196, align 1, !tbaa !2454
  %1038 = bitcast double %1035 to <2 x i32>
  %1039 = load <2 x i32>, <2 x i32>* %239, align 1
  %1040 = fptrunc double %1037 to float
  store float %1040, float* %28, align 1, !tbaa !2452
  %1041 = extractelement <2 x i32> %1038, i32 1
  store i32 %1041, i32* %245, align 1, !tbaa !2452
  %1042 = extractelement <2 x i32> %1039, i32 0
  store i32 %1042, i32* %246, align 1, !tbaa !2452
  %1043 = extractelement <2 x i32> %1039, i32 1
  store i32 %1043, i32* %247, align 1, !tbaa !2452
  store i64 %1027, i64* %RCX, align 8, !tbaa !2428
  %1044 = add i64 %1028, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1045 = add i64 %1025, 46
  store i64 %1045, i64* %PC, align 8
  %1046 = load <2 x float>, <2 x float>* %60, align 1
  %1047 = extractelement <2 x float> %1046, i32 0
  %1048 = inttoptr i64 %1044 to float*
  store float %1047, float* %1048, align 4
  %1049 = load i64, i64* %RBP, align 8
  %1050 = add i64 %1049, -16
  %1051 = load i64, i64* %PC, align 8
  %1052 = add i64 %1051, 5
  store i64 %1052, i64* %PC, align 8
  %1053 = inttoptr i64 %1050 to i32*
  %1054 = load i32, i32* %1053, align 4
  store i32 %1054, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1055 = add i64 %1049, -8
  %1056 = add i64 %1051, 10
  store i64 %1056, i64* %PC, align 8
  %1057 = load <2 x float>, <2 x float>* %60, align 1
  %1058 = inttoptr i64 %1055 to float*
  %1059 = load float, float* %1058, align 4
  %1060 = extractelement <2 x float> %1057, i32 0
  %1061 = fdiv float %1060, %1059
  store float %1061, float* %28, align 1, !tbaa !2452
  %1062 = bitcast <2 x float> %1057 to <2 x i32>
  %1063 = extractelement <2 x i32> %1062, i32 1
  store i32 %1063, i32* %245, align 1, !tbaa !2452
  %1064 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1065 = sext i32 %1064 to i64
  %1066 = shl nsw i64 %1065, 2
  %1067 = add i64 %1066, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1068 = add i64 %1051, 27
  store i64 %1068, i64* %PC, align 8
  %1069 = load <2 x float>, <2 x float>* %60, align 1
  %1070 = extractelement <2 x float> %1069, i32 0
  %1071 = inttoptr i64 %1067 to float*
  store float %1070, float* %1071, align 4
  %1072 = load i64, i64* %PC, align 8
  %1073 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  store i32 %1073, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1074 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1075 = sext i32 %1074 to i64
  store i64 %1075, i64* %RCX, align 8, !tbaa !2428
  %1076 = shl nsw i64 %1075, 2
  %1077 = add i64 %1076, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1078 = add i64 %1072, 26
  store i64 %1078, i64* %PC, align 8
  %1079 = load <2 x float>, <2 x float>* %60, align 1
  %1080 = load <2 x i32>, <2 x i32>* %239, align 1
  %1081 = inttoptr i64 %1077 to float*
  %1082 = load float, float* %1081, align 4
  %1083 = extractelement <2 x float> %1079, i32 0
  %1084 = fadd float %1083, %1082
  store float %1084, float* %28, align 1, !tbaa !2452
  %1085 = bitcast <2 x float> %1079 to <2 x i32>
  %1086 = extractelement <2 x i32> %1085, i32 1
  store i32 %1086, i32* %245, align 1, !tbaa !2452
  %1087 = extractelement <2 x i32> %1080, i32 0
  store i32 %1087, i32* %246, align 1, !tbaa !2452
  %1088 = extractelement <2 x i32> %1080, i32 1
  store i32 %1088, i32* %247, align 1, !tbaa !2452
  %1089 = load <2 x float>, <2 x float>* %60, align 1
  %1090 = extractelement <2 x float> %1089, i32 0
  store float %1090, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %1091 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %RDI, align 8, !tbaa !2428
  %1093 = add i64 %1072, 5622
  %1094 = add i64 %1072, 47
  %1095 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1096 = add i64 %1095, -8
  %1097 = inttoptr i64 %1096 to i64*
  store i64 %1094, i64* %1097, align 8
  store i64 %1096, i64* %RSP, align 8, !tbaa !2428
  store i64 %1093, i64* %PC, align 8, !tbaa !2428
  %1098 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1093, %struct.Memory* %909)
  %1099 = load i64, i64* %PC, align 8
  %1100 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1101 = add i32 %1100, 1
  %1102 = zext i32 %1101 to i64
  store i64 %1102, i64* %RAX, align 8, !tbaa !2428
  %1103 = icmp eq i32 %1100, -1
  %1104 = icmp eq i32 %1101, 0
  %1105 = or i1 %1103, %1104
  %1106 = zext i1 %1105 to i8
  store i8 %1106, i8* %20, align 1, !tbaa !2432
  %1107 = and i32 %1101, 255
  %1108 = tail call i32 @llvm.ctpop.i32(i32 %1107) #8
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  store i8 %1111, i8* %21, align 1, !tbaa !2446
  %1112 = xor i32 %1100, %1101
  %1113 = lshr i32 %1112, 4
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  store i8 %1115, i8* %22, align 1, !tbaa !2450
  %1116 = zext i1 %1104 to i8
  store i8 %1116, i8* %23, align 1, !tbaa !2447
  %1117 = lshr i32 %1101, 31
  %1118 = trunc i32 %1117 to i8
  store i8 %1118, i8* %24, align 1, !tbaa !2448
  %1119 = lshr i32 %1100, 31
  %1120 = xor i32 %1117, %1119
  %1121 = add nuw nsw i32 %1120, %1117
  %1122 = icmp eq i32 %1121, 2
  %1123 = zext i1 %1122 to i8
  store i8 %1123, i8* %25, align 1, !tbaa !2449
  store i32 %1101, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1124 = add i64 %1099, -617
  store i64 %1124, i64* %PC, align 8, !tbaa !2428
  br label %block_4010a0

block_400ac6:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1125 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1126 = sext i32 %1125 to i64
  store i64 %1126, i64* %RAX, align 8, !tbaa !2428
  %1127 = shl nsw i64 %1126, 2
  %1128 = add i64 %1127, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %1129 = add i64 %3062, 17
  store i64 %1129, i64* %PC, align 8
  %1130 = inttoptr i64 %1128 to i32*
  %1131 = load i32, i32* %1130, align 4
  store i32 %1131, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1132 = load <2 x float>, <2 x float>* %60, align 1
  %1133 = extractelement <2 x float> %1132, i32 0
  %1134 = fpext float %1133 to double
  %1135 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %1136 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %1137 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %1138 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %1135, i32* %2574, align 1, !tbaa !2452
  store i32 %1136, i32* %2575, align 1, !tbaa !2452
  store i32 %1137, i32* %2576, align 1, !tbaa !2452
  store i32 %1138, i32* %2577, align 1, !tbaa !2452
  %1139 = bitcast double %1134 to i64
  %1140 = load i64, i64* %32, align 1
  %1141 = load i64, i64* %197, align 1
  %1142 = load i64, i64* %198, align 1
  %1143 = and i64 %1141, %1139
  %1144 = and i64 %1142, %1140
  %1145 = trunc i64 %1143 to i32
  %1146 = lshr i64 %1143, 32
  %1147 = trunc i64 %1146 to i32
  store i32 %1145, i32* %29, align 1, !tbaa !2451
  store i32 %1147, i32* %245, align 1, !tbaa !2451
  %1148 = trunc i64 %1144 to i32
  store i32 %1148, i32* %246, align 1, !tbaa !2451
  %1149 = lshr i64 %1144, 32
  %1150 = trunc i64 %1149 to i32
  store i32 %1150, i32* %247, align 1, !tbaa !2451
  %1151 = load i64, i64* %RBP, align 8
  %1152 = add i64 %1151, -904
  %1153 = add i64 %3062, 40
  store i64 %1153, i64* %PC, align 8
  %1154 = load i64, i64* %3089, align 1
  %1155 = inttoptr i64 %1152 to i64*
  store i64 %1154, i64* %1155, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %block_400aee

block_4013ec:                                     ; preds = %block_40139b
  %1156 = add i64 %2896, -3628
  %1157 = add i64 %2896, 5
  %1158 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1159 = add i64 %1158, -8
  %1160 = inttoptr i64 %1159 to i64*
  store i64 %1157, i64* %1160, align 8
  store i64 %1159, i64* %RSP, align 8, !tbaa !2428
  store i64 %1156, i64* %PC, align 8, !tbaa !2428
  %1161 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1156, %struct.Memory* %MEMORY.17)
  %1162 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2574, align 1, !tbaa !2451
  store i32 0, i32* %2575, align 1, !tbaa !2451
  store i32 0, i32* %2576, align 1, !tbaa !2451
  store i32 0, i32* %2577, align 1, !tbaa !2451
  %1163 = load i64, i64* %RBP, align 8
  %1164 = add i64 %1163, -84
  %1165 = add i64 %1162, 18
  store i64 %1165, i64* %PC, align 8
  %1166 = load <2 x float>, <2 x float>* %60, align 1
  %1167 = extractelement <2 x float> %1166, i32 0
  %1168 = inttoptr i64 %1164 to float*
  store float %1167, float* %1168, align 4
  %1169 = load i64, i64* %RBP, align 8
  %1170 = add i64 %1169, -84
  %1171 = load i64, i64* %PC, align 8
  %1172 = add i64 %1171, 5
  store i64 %1172, i64* %PC, align 8
  %1173 = inttoptr i64 %1170 to i32*
  %1174 = load i32, i32* %1173, align 4
  store i32 %1174, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1175 = add i64 %1169, -80
  %1176 = add i64 %1171, 10
  store i64 %1176, i64* %PC, align 8
  %1177 = load <2 x float>, <2 x float>* %60, align 1
  %1178 = load <2 x i32>, <2 x i32>* %239, align 1
  %1179 = inttoptr i64 %1175 to float*
  %1180 = load float, float* %1179, align 4
  %1181 = extractelement <2 x float> %1177, i32 0
  %1182 = fsub float %1181, %1180
  store float %1182, float* %28, align 1, !tbaa !2452
  %1183 = bitcast <2 x float> %1177 to <2 x i32>
  %1184 = extractelement <2 x i32> %1183, i32 1
  store i32 %1184, i32* %245, align 1, !tbaa !2452
  %1185 = extractelement <2 x i32> %1178, i32 0
  store i32 %1185, i32* %246, align 1, !tbaa !2452
  %1186 = extractelement <2 x i32> %1178, i32 1
  store i32 %1186, i32* %247, align 1, !tbaa !2452
  %1187 = add i64 %1169, -76
  %1188 = add i64 %1171, 15
  store i64 %1188, i64* %PC, align 8
  %1189 = load <2 x float>, <2 x float>* %60, align 1
  %1190 = extractelement <2 x float> %1189, i32 0
  %1191 = inttoptr i64 %1187 to float*
  store float %1190, float* %1191, align 4
  %1192 = load i64, i64* %RBP, align 8
  %1193 = add i64 %1192, -76
  %1194 = load i64, i64* %PC, align 8
  %1195 = add i64 %1194, 5
  store i64 %1195, i64* %PC, align 8
  %1196 = inttoptr i64 %1193 to float*
  %1197 = inttoptr i64 %1193 to i32*
  %1198 = load i32, i32* %1197, align 4
  store i32 %1198, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1199 = load <2 x float>, <2 x float>* %60, align 1
  %1200 = extractelement <2 x float> %1199, i32 0
  %1201 = fpext float %1200 to double
  store double %1201, double* %192, align 1, !tbaa !2454
  %1202 = add i64 %1192, -68
  %1203 = add i64 %1194, 12
  store i64 %1203, i64* %PC, align 8
  %1204 = inttoptr i64 %1202 to i32*
  %1205 = load i32, i32* %1204, align 4
  %1206 = zext i32 %1205 to i64
  store i64 %1206, i64* %RAX, align 8, !tbaa !2428
  %1207 = sitofp i32 %1205 to double
  store double %1207, double* %210, align 1, !tbaa !2454
  %1208 = fdiv double %1201, %1207
  %1209 = bitcast double %1208 to <2 x i32>
  %1210 = fptrunc double %1208 to float
  store float %1210, float* %28, align 1, !tbaa !2452
  %1211 = extractelement <2 x i32> %1209, i32 1
  store i32 %1211, i32* %245, align 1, !tbaa !2452
  %1212 = add i64 %1194, 29
  store i64 %1212, i64* %PC, align 8
  %1213 = load <2 x float>, <2 x float>* %60, align 1
  %1214 = extractelement <2 x float> %1213, i32 0
  store float %1214, float* %1196, align 4
  %1215 = load i64, i64* %PC, align 8
  %1216 = load i64, i64* @stderr, align 64
  store i64 %1216, i64* %RDI, align 8, !tbaa !2428
  %1217 = load <2 x i32>, <2 x i32>* %1475, align 1
  %1218 = load <2 x i32>, <2 x i32>* %1476, align 1
  %1219 = extractelement <2 x i32> %1217, i32 0
  store i32 %1219, i32* %29, align 1, !tbaa !2452
  %1220 = extractelement <2 x i32> %1217, i32 1
  store i32 %1220, i32* %245, align 1, !tbaa !2452
  %1221 = extractelement <2 x i32> %1218, i32 0
  store i32 %1221, i32* %246, align 1, !tbaa !2452
  %1222 = extractelement <2 x i32> %1218, i32 1
  store i32 %1222, i32* %247, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1223 = add i64 %1215, -3951
  %1224 = add i64 %1215, 18
  %1225 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1226 = add i64 %1225, -8
  %1227 = inttoptr i64 %1226 to i64*
  store i64 %1224, i64* %1227, align 8
  store i64 %1226, i64* %RSP, align 8, !tbaa !2428
  store i64 %1223, i64* %PC, align 8, !tbaa !2428
  %1228 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1161)
  %1229 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1230 = load i64, i64* @stderr, align 64
  store i64 %1230, i64* %RDI, align 8, !tbaa !2428
  %1231 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1232 = zext i32 %1231 to i64
  store i64 %1232, i64* %RDX, align 8, !tbaa !2428
  %1233 = load i64, i64* %RBP, align 8
  %1234 = add i64 %1233, -980
  %1235 = load i32, i32* %EAX, align 4
  %1236 = add i64 %1229, 31
  store i64 %1236, i64* %PC, align 8
  %1237 = inttoptr i64 %1234 to i32*
  store i32 %1235, i32* %1237, align 4
  %1238 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1239 = add i64 %1238, -4000
  %1240 = add i64 %1238, 7
  %1241 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1242 = add i64 %1241, -8
  %1243 = inttoptr i64 %1242 to i64*
  store i64 %1240, i64* %1243, align 8
  store i64 %1242, i64* %RSP, align 8, !tbaa !2428
  store i64 %1239, i64* %PC, align 8, !tbaa !2428
  %1244 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1228)
  %1245 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1246 = load i64, i64* @stderr, align 64
  store i64 %1246, i64* %RDI, align 8, !tbaa !2428
  %1247 = load i64, i64* %RBP, align 8
  %1248 = add i64 %1247, -984
  %1249 = load i32, i32* %EAX, align 4
  %1250 = add i64 %1245, 24
  store i64 %1250, i64* %PC, align 8
  %1251 = inttoptr i64 %1248 to i32*
  store i32 %1249, i32* %1251, align 4
  %1252 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1253 = add i64 %1252, -4031
  %1254 = add i64 %1252, 7
  %1255 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1256 = add i64 %1255, -8
  %1257 = inttoptr i64 %1256 to i64*
  store i64 %1254, i64* %1257, align 8
  store i64 %1256, i64* %RSP, align 8, !tbaa !2428
  store i64 %1253, i64* %PC, align 8, !tbaa !2428
  %1258 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1244)
  %1259 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1260 = load i64, i64* @stderr, align 64
  store i64 %1260, i64* %RDI, align 8, !tbaa !2428
  %1261 = load i64, i64* %RBP, align 8
  %1262 = add i64 %1261, -988
  %1263 = load i32, i32* %EAX, align 4
  %1264 = add i64 %1259, 24
  store i64 %1264, i64* %PC, align 8
  %1265 = inttoptr i64 %1262 to i32*
  store i32 %1263, i32* %1265, align 4
  %1266 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1267 = add i64 %1266, -4062
  %1268 = add i64 %1266, 7
  %1269 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1270 = add i64 %1269, -8
  %1271 = inttoptr i64 %1270 to i64*
  store i64 %1268, i64* %1271, align 8
  store i64 %1270, i64* %RSP, align 8, !tbaa !2428
  store i64 %1267, i64* %PC, align 8, !tbaa !2428
  %1272 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1258)
  %1273 = load i64, i64* %PC, align 8
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %1274 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1275 = zext i32 %1274 to i64
  store i64 %1275, i64* %RDX, align 8, !tbaa !2428
  %1276 = load <2 x i32>, <2 x i32>* %1475, align 1
  %1277 = load <2 x i32>, <2 x i32>* %1476, align 1
  %1278 = sitofp i32 %1274 to float
  store float %1278, float* %2559, align 1, !tbaa !2452
  %1279 = extractelement <2 x i32> %1276, i32 1
  store i32 %1279, i32* %2575, align 1, !tbaa !2452
  %1280 = extractelement <2 x i32> %1277, i32 0
  store i32 %1280, i32* %2576, align 1, !tbaa !2452
  %1281 = extractelement <2 x i32> %1277, i32 1
  store i32 %1281, i32* %2577, align 1, !tbaa !2452
  %1282 = load i64, i64* %RBP, align 8
  %1283 = add i64 %1282, -76
  %1284 = add i64 %1273, 19
  store i64 %1284, i64* %PC, align 8
  %1285 = load <2 x float>, <2 x float>* %2565, align 1
  %1286 = load <2 x i32>, <2 x i32>* %1476, align 1
  %1287 = inttoptr i64 %1283 to float*
  %1288 = load float, float* %1287, align 4
  %1289 = extractelement <2 x float> %1285, i32 0
  %1290 = fmul float %1289, %1288
  store float %1290, float* %2559, align 1, !tbaa !2452
  %1291 = bitcast <2 x float> %1285 to <2 x i32>
  %1292 = extractelement <2 x i32> %1291, i32 1
  store i32 %1292, i32* %2575, align 1, !tbaa !2452
  %1293 = extractelement <2 x i32> %1286, i32 0
  store i32 %1293, i32* %2576, align 1, !tbaa !2452
  %1294 = extractelement <2 x i32> %1286, i32 1
  store i32 %1294, i32* %2577, align 1, !tbaa !2452
  %1295 = add i64 %1282, -44
  %1296 = add i64 %1273, 24
  store i64 %1296, i64* %PC, align 8
  %1297 = load <2 x float>, <2 x float>* %2565, align 1
  %1298 = extractelement <2 x float> %1297, i32 0
  %1299 = inttoptr i64 %1295 to float*
  store float %1298, float* %1299, align 4
  %1300 = load i64, i64* %PC, align 8
  %1301 = load <2 x float>, <2 x float>* %60, align 1
  %1302 = extractelement <2 x float> %1301, i32 0
  store float %1302, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1303 = load i64, i64* %RBP, align 8
  %1304 = add i64 %1303, -992
  %1305 = load i32, i32* %EAX, align 4
  %1306 = add i64 %1300, 26
  store i64 %1306, i64* %PC, align 8
  %1307 = inttoptr i64 %1304 to i32*
  store i32 %1305, i32* %1307, align 4
  %.pre26 = load i64, i64* %PC, align 8
  %.pre27 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  br label %block_4014d7

block_4015c4:                                     ; preds = %block_401580, %block_4015d8
  %1308 = phi i32 [ 0, %block_401580 ], [ %551, %block_4015d8 ]
  %1309 = phi i64 [ %3202, %block_401580 ], [ %574, %block_4015d8 ]
  %MEMORY.2 = phi %struct.Memory* [ %3193, %block_401580 ], [ %548, %block_4015d8 ]
  %1310 = zext i32 %1308 to i64
  store i64 %1310, i64* %RAX, align 8, !tbaa !2428
  %1311 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1312 = sub i32 %1308, %1311
  %1313 = icmp ult i32 %1308, %1311
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* %20, align 1, !tbaa !2432
  %1315 = and i32 %1312, 255
  %1316 = tail call i32 @llvm.ctpop.i32(i32 %1315) #8
  %1317 = trunc i32 %1316 to i8
  %1318 = and i8 %1317, 1
  %1319 = xor i8 %1318, 1
  store i8 %1319, i8* %21, align 1, !tbaa !2446
  %1320 = xor i32 %1311, %1308
  %1321 = xor i32 %1320, %1312
  %1322 = lshr i32 %1321, 4
  %1323 = trunc i32 %1322 to i8
  %1324 = and i8 %1323, 1
  store i8 %1324, i8* %22, align 1, !tbaa !2450
  %1325 = icmp eq i32 %1312, 0
  %1326 = zext i1 %1325 to i8
  store i8 %1326, i8* %23, align 1, !tbaa !2447
  %1327 = lshr i32 %1312, 31
  %1328 = trunc i32 %1327 to i8
  store i8 %1328, i8* %24, align 1, !tbaa !2448
  %1329 = lshr i32 %1308, 31
  %1330 = lshr i32 %1311, 31
  %1331 = xor i32 %1330, %1329
  %1332 = xor i32 %1327, %1329
  %1333 = add nuw nsw i32 %1332, %1331
  %1334 = icmp eq i32 %1333, 2
  %1335 = zext i1 %1334 to i8
  store i8 %1335, i8* %25, align 1, !tbaa !2449
  %1336 = icmp ne i8 %1328, 0
  %1337 = xor i1 %1336, %1334
  %.v46 = select i1 %1337, i64 20, i64 94
  %1338 = add i64 %1309, %.v46
  store i64 %1338, i64* %PC, align 8, !tbaa !2428
  br i1 %1337, label %block_4015d8, label %block_401622

block_400fbc:                                     ; preds = %block_400f66, %block_400fab
  %1339 = phi i64 [ %1508, %block_400fab ], [ %523, %block_400f66 ]
  %1340 = load i64, i64* %RBP, align 8
  %1341 = add i64 %1340, -64
  %1342 = add i64 %1339, 9
  store i64 %1342, i64* %PC, align 8
  %1343 = inttoptr i64 %1341 to i32*
  %1344 = load i32, i32* %1343, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %1345 = and i32 %1344, 255
  %1346 = tail call i32 @llvm.ctpop.i32(i32 %1345) #8
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = xor i8 %1348, 1
  store i8 %1349, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1350 = icmp eq i32 %1344, 0
  %1351 = zext i1 %1350 to i8
  store i8 %1351, i8* %23, align 1, !tbaa !2447
  %1352 = lshr i32 %1344, 31
  %1353 = trunc i32 %1352 to i8
  store i8 %1353, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  %1354 = icmp ne i8 %1353, 0
  %.v39 = select i1 %1354, i64 -250, i64 15
  %1355 = add i64 %1339, %.v39
  store i64 %1355, i64* %PC, align 8, !tbaa !2428
  br i1 %1354, label %block_400ec2, label %block_400fcb

block_4010c3:                                     ; preds = %block_4010d7, %block_4010ae
  %1356 = phi i32 [ 0, %block_4010ae ], [ %2922, %block_4010d7 ]
  %1357 = phi i64 [ %1424, %block_4010ae ], [ %2945, %block_4010d7 ]
  %MEMORY.4 = phi %struct.Memory* [ %1415, %block_4010ae ], [ %2919, %block_4010d7 ]
  %1358 = zext i32 %1356 to i64
  store i64 %1358, i64* %RAX, align 8, !tbaa !2428
  %1359 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1360 = sub i32 %1356, %1359
  %1361 = icmp ult i32 %1356, %1359
  %1362 = zext i1 %1361 to i8
  store i8 %1362, i8* %20, align 1, !tbaa !2432
  %1363 = and i32 %1360, 255
  %1364 = tail call i32 @llvm.ctpop.i32(i32 %1363) #8
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  store i8 %1367, i8* %21, align 1, !tbaa !2446
  %1368 = xor i32 %1359, %1356
  %1369 = xor i32 %1368, %1360
  %1370 = lshr i32 %1369, 4
  %1371 = trunc i32 %1370 to i8
  %1372 = and i8 %1371, 1
  store i8 %1372, i8* %22, align 1, !tbaa !2450
  %1373 = icmp eq i32 %1360, 0
  %1374 = zext i1 %1373 to i8
  store i8 %1374, i8* %23, align 1, !tbaa !2447
  %1375 = lshr i32 %1360, 31
  %1376 = trunc i32 %1375 to i8
  store i8 %1376, i8* %24, align 1, !tbaa !2448
  %1377 = lshr i32 %1356, 31
  %1378 = lshr i32 %1359, 31
  %1379 = xor i32 %1378, %1377
  %1380 = xor i32 %1375, %1377
  %1381 = add nuw nsw i32 %1380, %1379
  %1382 = icmp eq i32 %1381, 2
  %1383 = zext i1 %1382 to i8
  store i8 %1383, i8* %25, align 1, !tbaa !2449
  %1384 = icmp ne i8 %1376, 0
  %1385 = xor i1 %1384, %1382
  %.v41 = select i1 %1385, i64 20, i64 134
  %1386 = add i64 %1357, %.v41
  store i64 %1386, i64* %PC, align 8, !tbaa !2428
  br i1 %1385, label %block_4010d7, label %block_401149

block_400e3a:                                     ; preds = %block_400def
  %1387 = load i64, i64* %RBP, align 8
  %1388 = add i64 %1387, -68
  %1389 = add i64 %459, 3
  store i64 %1389, i64* %PC, align 8
  %1390 = inttoptr i64 %1388 to i32*
  %1391 = load i32, i32* %1390, align 4
  %1392 = shl i32 %1391, 1
  %1393 = icmp slt i32 %1391, 0
  %1394 = icmp slt i32 %1392, 0
  %1395 = xor i1 %1393, %1394
  %1396 = zext i32 %1392 to i64
  store i64 %1396, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %1391, 31
  %1397 = trunc i32 %.lobit to i8
  store i8 %1397, i8* %20, align 1, !tbaa !2456
  %1398 = and i32 %1392, 254
  %1399 = tail call i32 @llvm.ctpop.i32(i32 %1398) #8
  %1400 = trunc i32 %1399 to i8
  %1401 = and i8 %1400, 1
  %1402 = xor i8 %1401, 1
  store i8 %1402, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  %1403 = icmp eq i32 %1392, 0
  %1404 = zext i1 %1403 to i8
  store i8 %1404, i8* %23, align 1, !tbaa !2456
  %1405 = lshr i32 %1391, 30
  %1406 = trunc i32 %1405 to i8
  %1407 = and i8 %1406, 1
  store i8 %1407, i8* %24, align 1, !tbaa !2456
  %1408 = zext i1 %1395 to i8
  store i8 %1408, i8* %25, align 1, !tbaa !2456
  %1409 = add i64 %459, 9
  store i64 %1409, i64* %PC, align 8
  store i32 %1392, i32* %1390, align 4
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_400e43

block_4010ae:                                     ; preds = %block_4010a0
  %1410 = add i64 %1962, -2798
  %1411 = add i64 %1962, 5
  %1412 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1413 = add i64 %1412, -8
  %1414 = inttoptr i64 %1413 to i64*
  store i64 %1411, i64* %1414, align 8
  store i64 %1413, i64* %RSP, align 8, !tbaa !2428
  store i64 %1410, i64* %PC, align 8, !tbaa !2428
  %1415 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1410, %struct.Memory* %MEMORY.9)
  %1416 = load i64, i64* %RBP, align 8
  %1417 = add i64 %1416, -40
  %1418 = load i64, i64* %PC, align 8
  %1419 = add i64 %1418, 5
  store i64 %1419, i64* %PC, align 8
  %1420 = load <2 x float>, <2 x float>* %60, align 1
  %1421 = extractelement <2 x float> %1420, i32 0
  %1422 = inttoptr i64 %1417 to float*
  store float %1421, float* %1422, align 4
  %1423 = load i64, i64* %PC, align 8
  %1424 = add i64 %1423, 11
  store i64 %1424, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4010c3

block_400d39:                                     ; preds = %block_400cca, %block_400d24
  %1425 = phi i64 [ %1812, %block_400cca ], [ %.pre19, %block_400d24 ]
  %1426 = phi i64 [ %1843, %block_400cca ], [ %1542, %block_400d24 ]
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1427 = add i64 %1425, -16
  %1428 = add i64 %1426, 7
  store i64 %1428, i64* %PC, align 8
  %1429 = inttoptr i64 %1427 to i32*
  %1430 = load i32, i32* %1429, align 4
  store i32 %1430, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1431 = add i64 %1425, -8
  %1432 = add i64 %1426, 12
  store i64 %1432, i64* %PC, align 8
  %1433 = load <2 x float>, <2 x float>* %60, align 1
  %1434 = load <2 x i32>, <2 x i32>* %239, align 1
  %1435 = inttoptr i64 %1431 to float*
  %1436 = load float, float* %1435, align 4
  %1437 = extractelement <2 x float> %1433, i32 0
  %1438 = fdiv float %1437, %1436
  store float %1438, float* %28, align 1, !tbaa !2452
  %1439 = bitcast <2 x float> %1433 to <2 x i32>
  %1440 = extractelement <2 x i32> %1439, i32 1
  store i32 %1440, i32* %245, align 1, !tbaa !2452
  %1441 = extractelement <2 x i32> %1434, i32 0
  store i32 %1441, i32* %246, align 1, !tbaa !2452
  %1442 = extractelement <2 x i32> %1434, i32 1
  store i32 %1442, i32* %247, align 1, !tbaa !2452
  %1443 = load <2 x float>, <2 x float>* %60, align 1
  %1444 = extractelement <2 x float> %1443, i32 0
  store float %1444, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*), align 4
  %1445 = add i64 %1426, 7063
  %1446 = add i64 %1426, 26
  %1447 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1448 = add i64 %1447, -8
  %1449 = inttoptr i64 %1448 to i64*
  store i64 %1446, i64* %1449, align 8
  store i64 %1448, i64* %RSP, align 8, !tbaa !2428
  store i64 %1445, i64* %PC, align 8, !tbaa !2428
  %1450 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1445, %struct.Memory* %2395)
  %1451 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %1452 = load i64, i64* @stderr, align 64
  store i64 %1452, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1453 = add i64 %1451, -2195
  %1454 = add i64 %1451, 25
  %1455 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1456 = add i64 %1455, -8
  %1457 = inttoptr i64 %1456 to i64*
  store i64 %1454, i64* %1457, align 8
  store i64 %1456, i64* %RSP, align 8, !tbaa !2428
  store i64 %1453, i64* %PC, align 8, !tbaa !2428
  %1458 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1450)
  %1459 = load i64, i64* %RBP, align 8
  %1460 = add i64 %1459, -64
  %1461 = load i64, i64* %PC, align 8
  %1462 = add i64 %1461, 7
  store i64 %1462, i64* %PC, align 8
  %1463 = inttoptr i64 %1460 to i32*
  store i32 -3, i32* %1463, align 4
  %1464 = load i64, i64* %RBP, align 8
  %1465 = add i64 %1464, -68
  %1466 = load i64, i64* %PC, align 8
  %1467 = add i64 %1466, 7
  store i64 %1467, i64* %PC, align 8
  %1468 = inttoptr i64 %1465 to i32*
  store i32 100, i32* %1468, align 4
  %1469 = load i64, i64* %RBP, align 8
  %1470 = add i64 %1469, -936
  %1471 = load i32, i32* %EAX, align 4
  %1472 = load i64, i64* %PC, align 8
  %1473 = add i64 %1472, 6
  store i64 %1473, i64* %PC, align 8
  %1474 = inttoptr i64 %1470 to i32*
  store i32 %1471, i32* %1474, align 4
  %1475 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %1476 = bitcast i64* %198 to <2 x i32>*
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_400d80

block_400ab0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1477 = load i64, i64* %RBP, align 8
  %1478 = add i64 %1477, -24
  %1479 = add i64 %3062, 5
  store i64 %1479, i64* %PC, align 8
  %1480 = inttoptr i64 %1478 to i32*
  %1481 = load i32, i32* %1480, align 4
  store i32 %1481, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1482 = load <2 x float>, <2 x float>* %60, align 1
  %1483 = extractelement <2 x float> %1482, i32 0
  %1484 = fpext float %1483 to double
  store double %1484, double* %192, align 1, !tbaa !2454
  %1485 = add i64 %1477, -904
  %1486 = add i64 %3062, 17
  store i64 %1486, i64* %PC, align 8
  %1487 = inttoptr i64 %1485 to double*
  store double %1484, double* %1487, align 8
  %1488 = load i64, i64* %PC, align 8
  %1489 = add i64 %1488, 45
  store i64 %1489, i64* %PC, align 8, !tbaa !2428
  br label %block_400aee

block_400fab:                                     ; preds = %block_400f66
  %1490 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1491 = shl i32 %1490, 1
  %1492 = icmp slt i32 %1490, 0
  %1493 = icmp slt i32 %1491, 0
  %1494 = xor i1 %1492, %1493
  %1495 = zext i32 %1491 to i64
  store i64 %1495, i64* %RAX, align 8, !tbaa !2428
  %.lobit38 = lshr i32 %1490, 31
  %1496 = trunc i32 %.lobit38 to i8
  store i8 %1496, i8* %20, align 1, !tbaa !2456
  %1497 = and i32 %1491, 254
  %1498 = tail call i32 @llvm.ctpop.i32(i32 %1497) #8
  %1499 = trunc i32 %1498 to i8
  %1500 = and i8 %1499, 1
  %1501 = xor i8 %1500, 1
  store i8 %1501, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  %1502 = icmp eq i32 %1491, 0
  %1503 = zext i1 %1502 to i8
  store i8 %1503, i8* %23, align 1, !tbaa !2456
  %1504 = lshr i32 %1490, 30
  %1505 = trunc i32 %1504 to i8
  %1506 = and i8 %1505, 1
  store i8 %1506, i8* %24, align 1, !tbaa !2456
  %1507 = zext i1 %1494 to i8
  store i8 %1507, i8* %25, align 1, !tbaa !2456
  %1508 = add i64 %523, 17
  store i64 %1508, i64* %PC, align 8
  store i32 %1491, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  br label %block_400fbc

block_4014fa:                                     ; preds = %block_40150e, %block_4014e5
  %1509 = phi i32 [ 0, %block_4014e5 ], [ %2807, %block_40150e ]
  %1510 = phi i64 [ %538, %block_4014e5 ], [ %2830, %block_40150e ]
  %MEMORY.6 = phi %struct.Memory* [ %529, %block_4014e5 ], [ %2804, %block_40150e ]
  %1511 = zext i32 %1509 to i64
  store i64 %1511, i64* %RAX, align 8, !tbaa !2428
  %1512 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1513 = sub i32 %1509, %1512
  %1514 = icmp ult i32 %1509, %1512
  %1515 = zext i1 %1514 to i8
  store i8 %1515, i8* %20, align 1, !tbaa !2432
  %1516 = and i32 %1513, 255
  %1517 = tail call i32 @llvm.ctpop.i32(i32 %1516) #8
  %1518 = trunc i32 %1517 to i8
  %1519 = and i8 %1518, 1
  %1520 = xor i8 %1519, 1
  store i8 %1520, i8* %21, align 1, !tbaa !2446
  %1521 = xor i32 %1512, %1509
  %1522 = xor i32 %1521, %1513
  %1523 = lshr i32 %1522, 4
  %1524 = trunc i32 %1523 to i8
  %1525 = and i8 %1524, 1
  store i8 %1525, i8* %22, align 1, !tbaa !2450
  %1526 = icmp eq i32 %1513, 0
  %1527 = zext i1 %1526 to i8
  store i8 %1527, i8* %23, align 1, !tbaa !2447
  %1528 = lshr i32 %1513, 31
  %1529 = trunc i32 %1528 to i8
  store i8 %1529, i8* %24, align 1, !tbaa !2448
  %1530 = lshr i32 %1509, 31
  %1531 = lshr i32 %1512, 31
  %1532 = xor i32 %1531, %1530
  %1533 = xor i32 %1528, %1530
  %1534 = add nuw nsw i32 %1533, %1532
  %1535 = icmp eq i32 %1534, 2
  %1536 = zext i1 %1535 to i8
  store i8 %1536, i8* %25, align 1, !tbaa !2449
  %1537 = icmp ne i8 %1529, 0
  %1538 = xor i1 %1537, %1535
  %.v45 = select i1 %1538, i64 20, i64 134
  %1539 = add i64 %1510, %.v45
  store i64 %1539, i64* %PC, align 8, !tbaa !2428
  br i1 %1538, label %block_40150e, label %block_401580

block_400d24:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %1540 = load <2 x float>, <2 x float>* %60, align 1
  %1541 = extractelement <2 x float> %1540, i32 0
  store float %1541, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %1542 = add i64 %2405, 21
  store i64 %1542, i64* %PC, align 8
  store float %1541, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %.pre19 = load i64, i64* %RBP, align 8
  br label %block_400d39

block_400ec2:                                     ; preds = %block_400e52, %block_400fbc
  %1543 = phi i64 [ %.pre22, %block_400e52 ], [ %1355, %block_400fbc ]
  %MEMORY.7 = phi %struct.Memory* [ %1925, %block_400e52 ], [ %497, %block_400fbc ]
  %1544 = add i64 %1543, -2306
  %1545 = add i64 %1543, 5
  %1546 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1547 = add i64 %1546, -8
  %1548 = inttoptr i64 %1547 to i64*
  store i64 %1545, i64* %1548, align 8
  store i64 %1547, i64* %RSP, align 8, !tbaa !2428
  store i64 %1544, i64* %PC, align 8, !tbaa !2428
  %1549 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1544, %struct.Memory* %MEMORY.7)
  %1550 = load i64, i64* %RBP, align 8
  %1551 = add i64 %1550, -80
  %1552 = load i64, i64* %PC, align 8
  %1553 = add i64 %1552, 5
  store i64 %1553, i64* %PC, align 8
  %1554 = load <2 x float>, <2 x float>* %60, align 1
  %1555 = extractelement <2 x float> %1554, i32 0
  %1556 = inttoptr i64 %1551 to float*
  store float %1555, float* %1556, align 4
  %1557 = load i64, i64* %RBP, align 8
  %1558 = add i64 %1557, -64
  %1559 = load i64, i64* %PC, align 8
  %1560 = add i64 %1559, 3
  store i64 %1560, i64* %PC, align 8
  %1561 = inttoptr i64 %1558 to i32*
  %1562 = load i32, i32* %1561, align 4
  %1563 = add i32 %1562, 1
  %1564 = zext i32 %1563 to i64
  store i64 %1564, i64* %RAX, align 8, !tbaa !2428
  %1565 = icmp eq i32 %1562, -1
  %1566 = icmp eq i32 %1563, 0
  %1567 = or i1 %1565, %1566
  %1568 = zext i1 %1567 to i8
  store i8 %1568, i8* %20, align 1, !tbaa !2432
  %1569 = and i32 %1563, 255
  %1570 = tail call i32 @llvm.ctpop.i32(i32 %1569) #8
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  %1573 = xor i8 %1572, 1
  store i8 %1573, i8* %21, align 1, !tbaa !2446
  %1574 = xor i32 %1562, %1563
  %1575 = lshr i32 %1574, 4
  %1576 = trunc i32 %1575 to i8
  %1577 = and i8 %1576, 1
  store i8 %1577, i8* %22, align 1, !tbaa !2450
  %1578 = zext i1 %1566 to i8
  store i8 %1578, i8* %23, align 1, !tbaa !2447
  %1579 = lshr i32 %1563, 31
  %1580 = trunc i32 %1579 to i8
  store i8 %1580, i8* %24, align 1, !tbaa !2448
  %1581 = lshr i32 %1562, 31
  %1582 = xor i32 %1579, %1581
  %1583 = add nuw nsw i32 %1582, %1579
  %1584 = icmp eq i32 %1583, 2
  %1585 = zext i1 %1584 to i8
  store i8 %1585, i8* %25, align 1, !tbaa !2449
  %1586 = add i64 %1559, 9
  store i64 %1586, i64* %PC, align 8
  store i32 %1563, i32* %1561, align 4
  %1587 = load i64, i64* %PC, align 8
  %1588 = add i64 %1587, 11
  store i64 %1588, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400ee0

block_401622:                                     ; preds = %block_4015c4
  %1589 = add i64 %1338, -4194
  %1590 = add i64 %1338, 5
  %1591 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1592 = add i64 %1591, -8
  %1593 = inttoptr i64 %1592 to i64*
  store i64 %1590, i64* %1593, align 8
  store i64 %1592, i64* %RSP, align 8, !tbaa !2428
  store i64 %1589, i64* %PC, align 8, !tbaa !2428
  %1594 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1589, %struct.Memory* %MEMORY.2)
  %1595 = load i64, i64* %PC, align 8
  %1596 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to i64*), align 8
  store i64 %1596, i64* %197, align 1, !tbaa !2454
  store double 0.000000e+00, double* %199, align 1, !tbaa !2454
  %1597 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to i64*), align 8
  store i64 %1597, i64* %2573, align 1, !tbaa !2454
  store double 0.000000e+00, double* %827, align 1, !tbaa !2454
  %1598 = load i64, i64* %RBP, align 8
  %1599 = add i64 %1598, -40
  %1600 = add i64 %1595, 21
  store i64 %1600, i64* %PC, align 8
  %1601 = load <2 x float>, <2 x float>* %60, align 1
  %1602 = load <2 x i32>, <2 x i32>* %239, align 1
  %1603 = inttoptr i64 %1599 to float*
  %1604 = load float, float* %1603, align 4
  %1605 = extractelement <2 x float> %1601, i32 0
  %1606 = fsub float %1605, %1604
  store float %1606, float* %28, align 1, !tbaa !2452
  %1607 = bitcast <2 x float> %1601 to <2 x i32>
  %1608 = extractelement <2 x i32> %1607, i32 1
  store i32 %1608, i32* %245, align 1, !tbaa !2452
  %1609 = extractelement <2 x i32> %1602, i32 0
  store i32 %1609, i32* %246, align 1, !tbaa !2452
  %1610 = extractelement <2 x i32> %1602, i32 1
  store i32 %1610, i32* %247, align 1, !tbaa !2452
  %1611 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1612 = zext i32 %1611 to i64
  store i64 %1612, i64* %RAX, align 8, !tbaa !2428
  %1613 = load <2 x i32>, <2 x i32>* %828, align 1
  %1614 = load <2 x i32>, <2 x i32>* %829, align 1
  %1615 = sitofp i32 %1611 to float
  store float %1615, float* %2260, align 1, !tbaa !2452
  %1616 = extractelement <2 x i32> %1613, i32 1
  store i32 %1616, i32* %217, align 1, !tbaa !2452
  %1617 = extractelement <2 x i32> %1614, i32 0
  store i32 %1617, i32* %219, align 1, !tbaa !2452
  %1618 = extractelement <2 x i32> %1614, i32 1
  store i32 %1618, i32* %221, align 1, !tbaa !2452
  %1619 = load <2 x float>, <2 x float>* %60, align 1
  %1620 = load <2 x i32>, <2 x i32>* %239, align 1
  %1621 = load <2 x float>, <2 x float>* %2264, align 1
  %1622 = extractelement <2 x float> %1619, i32 0
  %1623 = extractelement <2 x float> %1621, i32 0
  %1624 = fdiv float %1622, %1623
  store float %1624, float* %28, align 1, !tbaa !2452
  %1625 = bitcast <2 x float> %1619 to <2 x i32>
  %1626 = extractelement <2 x i32> %1625, i32 1
  store i32 %1626, i32* %245, align 1, !tbaa !2452
  %1627 = extractelement <2 x i32> %1620, i32 0
  store i32 %1627, i32* %246, align 1, !tbaa !2452
  %1628 = extractelement <2 x i32> %1620, i32 1
  store i32 %1628, i32* %247, align 1, !tbaa !2452
  %1629 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1630 = sext i32 %1629 to i64
  %1631 = shl nsw i64 %1630, 2
  %1632 = add i64 %1631, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1633 = add i64 %1595, 53
  store i64 %1633, i64* %PC, align 8
  %1634 = load <2 x float>, <2 x float>* %60, align 1
  %1635 = extractelement <2 x float> %1634, i32 0
  %1636 = inttoptr i64 %1632 to float*
  store float %1635, float* %1636, align 4
  %1637 = load i64, i64* %PC, align 8
  %1638 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1639 = sext i32 %1638 to i64
  store i64 %1639, i64* %RCX, align 8, !tbaa !2428
  %1640 = shl nsw i64 %1639, 2
  %1641 = add i64 %1640, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1642 = add i64 %1637, 17
  store i64 %1642, i64* %PC, align 8
  %1643 = inttoptr i64 %1641 to i32*
  %1644 = load i32, i32* %1643, align 4
  store i32 %1644, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  store i64 %1639, i64* %RCX, align 8, !tbaa !2428
  %1645 = add i64 %1640, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1646 = add i64 %1637, 34
  store i64 %1646, i64* %PC, align 8
  %1647 = load <2 x float>, <2 x float>* %60, align 1
  %1648 = load <2 x i32>, <2 x i32>* %239, align 1
  %1649 = inttoptr i64 %1645 to float*
  %1650 = load float, float* %1649, align 4
  %1651 = extractelement <2 x float> %1647, i32 0
  %1652 = fadd float %1651, %1650
  store float %1652, float* %28, align 1, !tbaa !2452
  %1653 = bitcast <2 x float> %1647 to <2 x i32>
  %1654 = extractelement <2 x i32> %1653, i32 1
  store i32 %1654, i32* %245, align 1, !tbaa !2452
  %1655 = extractelement <2 x i32> %1648, i32 0
  store i32 %1655, i32* %246, align 1, !tbaa !2452
  %1656 = extractelement <2 x i32> %1648, i32 1
  store i32 %1656, i32* %247, align 1, !tbaa !2452
  %1657 = load i64, i64* %RBP, align 8
  %1658 = add i64 %1657, -16
  %1659 = add i64 %1637, 39
  store i64 %1659, i64* %PC, align 8
  %1660 = load <2 x float>, <2 x float>* %60, align 1
  %1661 = extractelement <2 x float> %1660, i32 0
  %1662 = inttoptr i64 %1658 to float*
  store float %1661, float* %1662, align 4
  %1663 = load i64, i64* %RBP, align 8
  %1664 = add i64 %1663, -16
  %1665 = load i64, i64* %PC, align 8
  %1666 = add i64 %1665, 5
  store i64 %1666, i64* %PC, align 8
  %1667 = inttoptr i64 %1664 to i32*
  %1668 = load i32, i32* %1667, align 4
  store i32 %1668, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1669 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1670 = sext i32 %1669 to i64
  store i64 %1670, i64* %RCX, align 8, !tbaa !2428
  %1671 = shl nsw i64 %1670, 2
  %1672 = add i64 %1671, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1673 = add i64 %1665, 22
  store i64 %1673, i64* %PC, align 8
  %1674 = load <2 x float>, <2 x float>* %60, align 1
  %1675 = extractelement <2 x float> %1674, i32 0
  %1676 = inttoptr i64 %1672 to float*
  store float %1675, float* %1676, align 4
  %1677 = load i64, i64* %RBP, align 8
  %1678 = add i64 %1677, -12
  %1679 = load i64, i64* %PC, align 8
  %1680 = add i64 %1679, 5
  store i64 %1680, i64* %PC, align 8
  %1681 = inttoptr i64 %1678 to i32*
  %1682 = load i32, i32* %1681, align 4
  store i32 %1682, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1683 = load <2 x float>, <2 x float>* %60, align 1
  %1684 = extractelement <2 x float> %1683, i32 0
  %1685 = fpext float %1684 to double
  store double %1685, double* %192, align 1, !tbaa !2454
  %1686 = add i64 %1677, -16
  %1687 = add i64 %1679, 14
  store i64 %1687, i64* %PC, align 8
  %1688 = inttoptr i64 %1686 to i32*
  %1689 = load i32, i32* %1688, align 4
  store i32 %1689, i32* %214, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2261, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2262, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2263, align 1, !tbaa !2452
  %1690 = load <2 x float>, <2 x float>* %2264, align 1
  %1691 = extractelement <2 x float> %1690, i32 0
  %1692 = fpext float %1691 to double
  store double %1692, double* %222, align 1, !tbaa !2454
  %1693 = load double, double* %210, align 1
  %1694 = fmul double %1693, %1692
  store double %1694, double* %210, align 1, !tbaa !2454
  %1695 = load <2 x i32>, <2 x i32>* %239, align 1
  %1696 = fdiv double %1685, %1694
  %1697 = bitcast double %1696 to <2 x i32>
  %1698 = fptrunc double %1696 to float
  store float %1698, float* %28, align 1, !tbaa !2452
  %1699 = extractelement <2 x i32> %1697, i32 1
  store i32 %1699, i32* %245, align 1, !tbaa !2452
  %1700 = extractelement <2 x i32> %1695, i32 0
  store i32 %1700, i32* %246, align 1, !tbaa !2452
  %1701 = extractelement <2 x i32> %1695, i32 1
  store i32 %1701, i32* %247, align 1, !tbaa !2452
  %1702 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1703 = sext i32 %1702 to i64
  %1704 = shl nsw i64 %1703, 2
  %1705 = add i64 %1704, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1706 = add i64 %1679, 47
  store i64 %1706, i64* %PC, align 8
  %1707 = load <2 x float>, <2 x float>* %60, align 1
  %1708 = extractelement <2 x float> %1707, i32 0
  %1709 = inttoptr i64 %1705 to float*
  store float %1708, float* %1709, align 4
  %1710 = load i64, i64* %PC, align 8
  %1711 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1712 = sext i32 %1711 to i64
  store i64 %1712, i64* %RCX, align 8, !tbaa !2428
  %1713 = shl nsw i64 %1712, 2
  %1714 = add i64 %1713, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1715 = add i64 %1710, 17
  store i64 %1715, i64* %PC, align 8
  %1716 = inttoptr i64 %1714 to i32*
  %1717 = load i32, i32* %1716, align 4
  store i32 %1717, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1718 = load <2 x float>, <2 x float>* %60, align 1
  %1719 = extractelement <2 x float> %1718, i32 0
  %1720 = fpext float %1719 to double
  %1721 = load double, double* %196, align 1
  %1722 = fdiv double %1721, %1720
  store double %1722, double* %196, align 1, !tbaa !2454
  %1723 = bitcast double %1720 to <2 x i32>
  %1724 = load <2 x i32>, <2 x i32>* %239, align 1
  %1725 = fptrunc double %1722 to float
  store float %1725, float* %28, align 1, !tbaa !2452
  %1726 = extractelement <2 x i32> %1723, i32 1
  store i32 %1726, i32* %245, align 1, !tbaa !2452
  %1727 = extractelement <2 x i32> %1724, i32 0
  store i32 %1727, i32* %246, align 1, !tbaa !2452
  %1728 = extractelement <2 x i32> %1724, i32 1
  store i32 %1728, i32* %247, align 1, !tbaa !2452
  store i64 %1712, i64* %RCX, align 8, !tbaa !2428
  %1729 = add i64 %1713, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1730 = add i64 %1710, 46
  store i64 %1730, i64* %PC, align 8
  %1731 = load <2 x float>, <2 x float>* %60, align 1
  %1732 = extractelement <2 x float> %1731, i32 0
  %1733 = inttoptr i64 %1729 to float*
  store float %1732, float* %1733, align 4
  %1734 = load i64, i64* %RBP, align 8
  %1735 = add i64 %1734, -16
  %1736 = load i64, i64* %PC, align 8
  %1737 = add i64 %1736, 5
  store i64 %1737, i64* %PC, align 8
  %1738 = inttoptr i64 %1735 to i32*
  %1739 = load i32, i32* %1738, align 4
  store i32 %1739, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1740 = add i64 %1734, -8
  %1741 = add i64 %1736, 10
  store i64 %1741, i64* %PC, align 8
  %1742 = load <2 x float>, <2 x float>* %60, align 1
  %1743 = inttoptr i64 %1740 to float*
  %1744 = load float, float* %1743, align 4
  %1745 = extractelement <2 x float> %1742, i32 0
  %1746 = fdiv float %1745, %1744
  store float %1746, float* %28, align 1, !tbaa !2452
  %1747 = bitcast <2 x float> %1742 to <2 x i32>
  %1748 = extractelement <2 x i32> %1747, i32 1
  store i32 %1748, i32* %245, align 1, !tbaa !2452
  %1749 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1750 = sext i32 %1749 to i64
  %1751 = shl nsw i64 %1750, 2
  %1752 = add i64 %1751, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1753 = add i64 %1736, 27
  store i64 %1753, i64* %PC, align 8
  %1754 = load <2 x float>, <2 x float>* %60, align 1
  %1755 = extractelement <2 x float> %1754, i32 0
  %1756 = inttoptr i64 %1752 to float*
  store float %1755, float* %1756, align 4
  %1757 = load i64, i64* %PC, align 8
  %1758 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  store i32 %1758, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1759 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1760 = sext i32 %1759 to i64
  store i64 %1760, i64* %RCX, align 8, !tbaa !2428
  %1761 = shl nsw i64 %1760, 2
  %1762 = add i64 %1761, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1763 = add i64 %1757, 26
  store i64 %1763, i64* %PC, align 8
  %1764 = load <2 x float>, <2 x float>* %60, align 1
  %1765 = load <2 x i32>, <2 x i32>* %239, align 1
  %1766 = inttoptr i64 %1762 to float*
  %1767 = load float, float* %1766, align 4
  %1768 = extractelement <2 x float> %1764, i32 0
  %1769 = fadd float %1768, %1767
  store float %1769, float* %28, align 1, !tbaa !2452
  %1770 = bitcast <2 x float> %1764 to <2 x i32>
  %1771 = extractelement <2 x i32> %1770, i32 1
  store i32 %1771, i32* %245, align 1, !tbaa !2452
  %1772 = extractelement <2 x i32> %1765, i32 0
  store i32 %1772, i32* %246, align 1, !tbaa !2452
  %1773 = extractelement <2 x i32> %1765, i32 1
  store i32 %1773, i32* %247, align 1, !tbaa !2452
  %1774 = load <2 x float>, <2 x float>* %60, align 1
  %1775 = extractelement <2 x float> %1774, i32 0
  store float %1775, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %1776 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1777 = zext i32 %1776 to i64
  store i64 %1777, i64* %RDI, align 8, !tbaa !2428
  %1778 = add i64 %1757, 4543
  %1779 = add i64 %1757, 47
  %1780 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1781 = add i64 %1780, -8
  %1782 = inttoptr i64 %1781 to i64*
  store i64 %1779, i64* %1782, align 8
  store i64 %1781, i64* %RSP, align 8, !tbaa !2428
  store i64 %1778, i64* %PC, align 8, !tbaa !2428
  %1783 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1778, %struct.Memory* %1594)
  %1784 = load i64, i64* %PC, align 8
  %1785 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1786 = add i32 %1785, 1
  %1787 = zext i32 %1786 to i64
  store i64 %1787, i64* %RAX, align 8, !tbaa !2428
  %1788 = icmp eq i32 %1785, -1
  %1789 = icmp eq i32 %1786, 0
  %1790 = or i1 %1788, %1789
  %1791 = zext i1 %1790 to i8
  store i8 %1791, i8* %20, align 1, !tbaa !2432
  %1792 = and i32 %1786, 255
  %1793 = tail call i32 @llvm.ctpop.i32(i32 %1792) #8
  %1794 = trunc i32 %1793 to i8
  %1795 = and i8 %1794, 1
  %1796 = xor i8 %1795, 1
  store i8 %1796, i8* %21, align 1, !tbaa !2446
  %1797 = xor i32 %1785, %1786
  %1798 = lshr i32 %1797, 4
  %1799 = trunc i32 %1798 to i8
  %1800 = and i8 %1799, 1
  store i8 %1800, i8* %22, align 1, !tbaa !2450
  %1801 = zext i1 %1789 to i8
  store i8 %1801, i8* %23, align 1, !tbaa !2447
  %1802 = lshr i32 %1786, 31
  %1803 = trunc i32 %1802 to i8
  store i8 %1803, i8* %24, align 1, !tbaa !2448
  %1804 = lshr i32 %1785, 31
  %1805 = xor i32 %1802, %1804
  %1806 = add nuw nsw i32 %1805, %1802
  %1807 = icmp eq i32 %1806, 2
  %1808 = zext i1 %1807 to i8
  store i8 %1808, i8* %25, align 1, !tbaa !2449
  store i32 %1786, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1809 = add i64 %1784, -617
  store i64 %1809, i64* %PC, align 8, !tbaa !2428
  br label %block_4014d7

block_400cca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1810 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*), align 8
  store double %1810, double* %192, align 1, !tbaa !2454
  store double 0.000000e+00, double* %193, align 1, !tbaa !2454
  %1811 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to double*), align 8
  store double %1811, double* %196, align 1, !tbaa !2454
  store double 0.000000e+00, double* %199, align 1, !tbaa !2454
  %1812 = load i64, i64* %RBP, align 8
  %1813 = add i64 %1812, -12
  %1814 = add i64 %2405, 21
  store i64 %1814, i64* %PC, align 8
  %1815 = inttoptr i64 %1813 to i32*
  %1816 = load i32, i32* %1815, align 4
  store i32 %1816, i32* %2252, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2568, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2572, align 1, !tbaa !2452
  %1817 = load <2 x float>, <2 x float>* %2084, align 1
  %1818 = extractelement <2 x float> %1817, i32 0
  %1819 = fpext float %1818 to double
  store double %1819, double* %210, align 1, !tbaa !2454
  %1820 = add i64 %1812, -16
  %1821 = add i64 %2405, 30
  store i64 %1821, i64* %PC, align 8
  %1822 = inttoptr i64 %1820 to i32*
  %1823 = load i32, i32* %1822, align 4
  store i32 %1823, i32* %214, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2261, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2262, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2263, align 1, !tbaa !2452
  %1824 = load <2 x float>, <2 x float>* %2264, align 1
  %1825 = extractelement <2 x float> %1824, i32 0
  %1826 = fpext float %1825 to double
  store double %1826, double* %222, align 1, !tbaa !2454
  %1827 = fmul double %1811, %1826
  %1828 = fdiv double %1819, %1827
  store double %1828, double* %210, align 1, !tbaa !2454
  %1829 = bitcast double %1827 to <2 x i32>
  %1830 = fptrunc double %1828 to float
  store float %1830, float* %2559, align 1, !tbaa !2452
  %1831 = extractelement <2 x i32> %1829, i32 1
  store i32 %1831, i32* %2575, align 1, !tbaa !2452
  %1832 = load <2 x float>, <2 x float>* %2565, align 1
  %1833 = extractelement <2 x float> %1832, i32 0
  store float %1833, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  store float %1833, float* %2559, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2564, align 1, !tbaa !2452
  %1834 = load <2 x float>, <2 x float>* %2565, align 1
  %1835 = extractelement <2 x float> %1834, i32 0
  %1836 = fpext float %1835 to double
  store double %1836, double* %196, align 1, !tbaa !2454
  %1837 = fdiv double %1810, %1836
  %1838 = bitcast double %1837 to <2 x i32>
  %1839 = fptrunc double %1837 to float
  store float %1839, float* %28, align 1, !tbaa !2452
  %1840 = extractelement <2 x i32> %1838, i32 1
  store i32 %1840, i32* %245, align 1, !tbaa !2452
  store i32 0, i32* %246, align 1, !tbaa !2452
  store i32 0, i32* %247, align 1, !tbaa !2452
  %1841 = load <2 x float>, <2 x float>* %60, align 1
  %1842 = extractelement <2 x float> %1841, i32 0
  store float %1842, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %1843 = add i64 %2405, 111
  store i64 %1843, i64* %PC, align 8, !tbaa !2428
  br label %block_400d39

block_4011a1:                                     ; preds = %block_40118d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1844 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1845 = zext i32 %1844 to i64
  store i64 %1845, i64* %RSI, align 8, !tbaa !2428
  %1846 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1847 = zext i32 %1846 to i64
  store i64 %1847, i64* %RDX, align 8, !tbaa !2428
  %1848 = add i64 %2861, 2799
  %1849 = add i64 %2861, 52
  %1850 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1851 = add i64 %1850, -8
  %1852 = inttoptr i64 %1851 to i64*
  store i64 %1849, i64* %1852, align 8
  store i64 %1851, i64* %RSP, align 8, !tbaa !2428
  store i64 %1848, i64* %PC, align 8, !tbaa !2428
  %1853 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %1848, %struct.Memory* %MEMORY.16)
  %1854 = load i64, i64* %PC, align 8
  %1855 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1856 = add i32 %1855, 1
  %1857 = zext i32 %1856 to i64
  store i64 %1857, i64* %RAX, align 8, !tbaa !2428
  %1858 = icmp eq i32 %1855, -1
  %1859 = icmp eq i32 %1856, 0
  %1860 = or i1 %1858, %1859
  %1861 = zext i1 %1860 to i8
  store i8 %1861, i8* %20, align 1, !tbaa !2432
  %1862 = and i32 %1856, 255
  %1863 = tail call i32 @llvm.ctpop.i32(i32 %1862) #8
  %1864 = trunc i32 %1863 to i8
  %1865 = and i8 %1864, 1
  %1866 = xor i8 %1865, 1
  store i8 %1866, i8* %21, align 1, !tbaa !2446
  %1867 = xor i32 %1855, %1856
  %1868 = lshr i32 %1867, 4
  %1869 = trunc i32 %1868 to i8
  %1870 = and i8 %1869, 1
  store i8 %1870, i8* %22, align 1, !tbaa !2450
  %1871 = zext i1 %1859 to i8
  store i8 %1871, i8* %23, align 1, !tbaa !2447
  %1872 = lshr i32 %1856, 31
  %1873 = trunc i32 %1872 to i8
  store i8 %1873, i8* %24, align 1, !tbaa !2448
  %1874 = lshr i32 %1855, 31
  %1875 = xor i32 %1872, %1874
  %1876 = add nuw nsw i32 %1875, %1872
  %1877 = icmp eq i32 %1876, 2
  %1878 = zext i1 %1877 to i8
  store i8 %1878, i8* %25, align 1, !tbaa !2449
  store i32 %1856, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1879 = add i64 %1854, -72
  store i64 %1879, i64* %PC, align 8, !tbaa !2428
  br label %block_40118d

block_400e52:                                     ; preds = %block_400e43
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %1880 = add i64 %2659, -72
  %1881 = add i64 %2674, 18
  store i64 %1881, i64* %PC, align 8
  %1882 = inttoptr i64 %1880 to float*
  %1883 = inttoptr i64 %1880 to i32*
  %1884 = load i32, i32* %1883, align 4
  store i32 %1884, i32* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2564, align 1, !tbaa !2452
  %1885 = load <2 x float>, <2 x float>* %2565, align 1
  %1886 = extractelement <2 x float> %1885, i32 0
  %1887 = fpext float %1886 to double
  store double %1887, double* %196, align 1, !tbaa !2454
  %1888 = add i64 %2659, -68
  %1889 = add i64 %2674, 25
  store i64 %1889, i64* %PC, align 8
  %1890 = inttoptr i64 %1888 to i32*
  %1891 = load i32, i32* %1890, align 4
  %1892 = zext i32 %1891 to i64
  store i64 %1892, i64* %RAX, align 8, !tbaa !2428
  %1893 = sitofp i32 %1891 to double
  store double %1893, double* %210, align 1, !tbaa !2454
  %1894 = load <2 x i32>, <2 x i32>* %1476, align 1
  %1895 = fdiv double %1887, %1893
  %1896 = bitcast double %1895 to <2 x i32>
  %1897 = fptrunc double %1895 to float
  store float %1897, float* %2559, align 1, !tbaa !2452
  %1898 = extractelement <2 x i32> %1896, i32 1
  store i32 %1898, i32* %2575, align 1, !tbaa !2452
  %1899 = extractelement <2 x i32> %1894, i32 0
  store i32 %1899, i32* %2576, align 1, !tbaa !2452
  %1900 = extractelement <2 x i32> %1894, i32 1
  store i32 %1900, i32* %2577, align 1, !tbaa !2452
  %1901 = add i64 %2674, 42
  store i64 %1901, i64* %PC, align 8
  %1902 = load <2 x float>, <2 x float>* %2565, align 1
  %1903 = extractelement <2 x float> %1902, i32 0
  store float %1903, float* %1882, align 4
  %1904 = load i64, i64* %PC, align 8
  %1905 = load i64, i64* @stderr, align 64
  store i64 %1905, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1906 = add i64 %1904, -2492
  %1907 = add i64 %1904, 15
  %1908 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1909 = add i64 %1908, -8
  %1910 = inttoptr i64 %1909 to i64*
  store i64 %1907, i64* %1910, align 8
  store i64 %1909, i64* %RSP, align 8, !tbaa !2428
  store i64 %1906, i64* %PC, align 8, !tbaa !2428
  %1911 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %433)
  %1912 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %1913 = load i64, i64* @stderr, align 64
  store i64 %1913, i64* %RDI, align 8, !tbaa !2428
  %1914 = load i64, i64* %RBP, align 8
  %1915 = add i64 %1914, -944
  %1916 = load i32, i32* %EAX, align 4
  %1917 = add i64 %1912, 24
  store i64 %1917, i64* %PC, align 8
  %1918 = inttoptr i64 %1915 to i32*
  store i32 %1916, i32* %1918, align 4
  %1919 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1920 = add i64 %1919, -2531
  %1921 = add i64 %1919, 7
  %1922 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1923 = add i64 %1922, -8
  %1924 = inttoptr i64 %1923 to i64*
  store i64 %1921, i64* %1924, align 8
  store i64 %1923, i64* %RSP, align 8, !tbaa !2428
  store i64 %1920, i64* %PC, align 8, !tbaa !2428
  %1925 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1911)
  %1926 = load i64, i64* %RBP, align 8
  %1927 = add i64 %1926, -64
  %1928 = load i64, i64* %PC, align 8
  %1929 = add i64 %1928, 7
  store i64 %1929, i64* %PC, align 8
  %1930 = inttoptr i64 %1927 to i32*
  store i32 -3, i32* %1930, align 4
  %1931 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1932 = load i64, i64* %RBP, align 8
  %1933 = add i64 %1932, -948
  %1934 = load i32, i32* %EAX, align 4
  %1935 = add i64 %1931, 17
  store i64 %1935, i64* %PC, align 8
  %1936 = inttoptr i64 %1933 to i32*
  store i32 %1934, i32* %1936, align 4
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_400ec2

block_4010a0:                                     ; preds = %block_400fcb, %block_4011eb
  %1937 = phi i32 [ %.pre25, %block_400fcb ], [ %1101, %block_4011eb ]
  %1938 = phi i64 [ %.pre24, %block_400fcb ], [ %1124, %block_4011eb ]
  %MEMORY.9 = phi %struct.Memory* [ %791, %block_400fcb ], [ %1098, %block_4011eb ]
  %1939 = add i32 %1937, -6
  %1940 = icmp ult i32 %1937, 6
  %1941 = zext i1 %1940 to i8
  store i8 %1941, i8* %20, align 1, !tbaa !2432
  %1942 = and i32 %1939, 255
  %1943 = tail call i32 @llvm.ctpop.i32(i32 %1942) #8
  %1944 = trunc i32 %1943 to i8
  %1945 = and i8 %1944, 1
  %1946 = xor i8 %1945, 1
  store i8 %1946, i8* %21, align 1, !tbaa !2446
  %1947 = xor i32 %1937, %1939
  %1948 = lshr i32 %1947, 4
  %1949 = trunc i32 %1948 to i8
  %1950 = and i8 %1949, 1
  store i8 %1950, i8* %22, align 1, !tbaa !2450
  %1951 = icmp eq i32 %1939, 0
  %1952 = zext i1 %1951 to i8
  store i8 %1952, i8* %23, align 1, !tbaa !2447
  %1953 = lshr i32 %1939, 31
  %1954 = trunc i32 %1953 to i8
  store i8 %1954, i8* %24, align 1, !tbaa !2448
  %1955 = lshr i32 %1937, 31
  %1956 = xor i32 %1953, %1955
  %1957 = add nuw nsw i32 %1956, %1955
  %1958 = icmp eq i32 %1957, 2
  %1959 = zext i1 %1958 to i8
  store i8 %1959, i8* %25, align 1, !tbaa !2449
  %1960 = icmp ne i8 %1954, 0
  %1961 = xor i1 %1960, %1958
  %.v40 = select i1 %1961, i64 14, i64 639
  %1962 = add i64 %1938, %.v40
  store i64 %1962, i64* %PC, align 8, !tbaa !2428
  br i1 %1961, label %block_4010ae, label %block_40131f

block_4009e7:                                     ; preds = %block_400997, %block_400aee
  %1963 = phi i32 [ 0, %block_400997 ], [ %650, %block_400aee ]
  %1964 = phi i64 [ %2558, %block_400997 ], [ %673, %block_400aee ]
  %MEMORY.10 = phi %struct.Memory* [ %2542, %block_400997 ], [ %3057, %block_400aee ]
  %1965 = zext i32 %1963 to i64
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1967 = sub i32 %1963, %1966
  %1968 = icmp ult i32 %1963, %1966
  %1969 = zext i1 %1968 to i8
  store i8 %1969, i8* %20, align 1, !tbaa !2432
  %1970 = and i32 %1967, 255
  %1971 = tail call i32 @llvm.ctpop.i32(i32 %1970) #8
  %1972 = trunc i32 %1971 to i8
  %1973 = and i8 %1972, 1
  %1974 = xor i8 %1973, 1
  store i8 %1974, i8* %21, align 1, !tbaa !2446
  %1975 = xor i32 %1966, %1963
  %1976 = xor i32 %1975, %1967
  %1977 = lshr i32 %1976, 4
  %1978 = trunc i32 %1977 to i8
  %1979 = and i8 %1978, 1
  store i8 %1979, i8* %22, align 1, !tbaa !2450
  %1980 = icmp eq i32 %1967, 0
  %1981 = zext i1 %1980 to i8
  store i8 %1981, i8* %23, align 1, !tbaa !2447
  %1982 = lshr i32 %1967, 31
  %1983 = trunc i32 %1982 to i8
  store i8 %1983, i8* %24, align 1, !tbaa !2448
  %1984 = lshr i32 %1963, 31
  %1985 = lshr i32 %1966, 31
  %1986 = xor i32 %1985, %1984
  %1987 = xor i32 %1982, %1984
  %1988 = add nuw nsw i32 %1987, %1986
  %1989 = icmp eq i32 %1988, 2
  %1990 = zext i1 %1989 to i8
  store i8 %1990, i8* %25, align 1, !tbaa !2449
  %1991 = icmp ne i8 %1983, 0
  %1992 = xor i1 %1991, %1989
  %.v29 = select i1 %1992, i64 20, i64 302
  %1993 = add i64 %1964, %.v29
  store i64 %1993, i64* %PC, align 8, !tbaa !2428
  br i1 %1992, label %block_4009fb, label %block_400b15

block_40131f:                                     ; preds = %block_4010a0
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %1994 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 48) to double*), align 16
  %1995 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  store i32 %1995, i32* %2252, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2568, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2572, align 1, !tbaa !2452
  %1996 = load <2 x float>, <2 x float>* %2084, align 1
  %1997 = extractelement <2 x float> %1996, i32 0
  %1998 = fpext float %1997 to double
  %1999 = fdiv double %1998, %1994
  store double %1999, double* %210, align 1, !tbaa !2454
  %2000 = bitcast double %1994 to <2 x i32>
  %2001 = fptrunc double %1999 to float
  store float %2001, float* %2559, align 1, !tbaa !2452
  %2002 = extractelement <2 x i32> %2000, i32 1
  store i32 %2002, i32* %2575, align 1, !tbaa !2452
  store i32 0, i32* %2576, align 1, !tbaa !2452
  store i32 0, i32* %2577, align 1, !tbaa !2452
  %2003 = load <2 x float>, <2 x float>* %2565, align 1
  %2004 = extractelement <2 x float> %2003, i32 0
  store float %2004, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %2005 = load i64, i64* @stderr, align 64
  store i64 %2005, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %2006 = add i64 %1962, -3679
  %2007 = add i64 %1962, 66
  %2008 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2009 = add i64 %2008, -8
  %2010 = inttoptr i64 %2009 to i64*
  store i64 %2007, i64* %2010, align 8
  store i64 %2009, i64* %RSP, align 8, !tbaa !2428
  store i64 %2006, i64* %PC, align 8, !tbaa !2428
  %2011 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.9)
  %2012 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %2013 = load i64, i64* @stderr, align 64
  store i64 %2013, i64* %RDI, align 8, !tbaa !2428
  %2014 = load i64, i64* %RBP, align 8
  %2015 = add i64 %2014, -972
  %2016 = load i32, i32* %EAX, align 4
  %2017 = add i64 %2012, 24
  store i64 %2017, i64* %PC, align 8
  %2018 = inttoptr i64 %2015 to i32*
  store i32 %2016, i32* %2018, align 4
  %2019 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2020 = add i64 %2019, -3769
  %2021 = add i64 %2019, 7
  %2022 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2023 = add i64 %2022, -8
  %2024 = inttoptr i64 %2023 to i64*
  store i64 %2021, i64* %2024, align 8
  store i64 %2023, i64* %RSP, align 8, !tbaa !2428
  store i64 %2020, i64* %PC, align 8, !tbaa !2428
  %2025 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2011)
  %2026 = load i64, i64* %RBP, align 8
  %2027 = add i64 %2026, -976
  %2028 = load i32, i32* %EAX, align 4
  %2029 = load i64, i64* %PC, align 8
  %2030 = add i64 %2029, 6
  store i64 %2030, i64* %PC, align 8
  %2031 = inttoptr i64 %2027 to i32*
  store i32 %2028, i32* %2031, align 4
  %2032 = load i64, i64* %PC, align 8
  %2033 = add i64 %2032, -3526
  %2034 = add i64 %2032, 5
  %2035 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2036 = add i64 %2035, -8
  %2037 = inttoptr i64 %2036 to i64*
  store i64 %2034, i64* %2037, align 8
  store i64 %2036, i64* %RSP, align 8, !tbaa !2428
  store i64 %2033, i64* %PC, align 8, !tbaa !2428
  %2038 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %2033, %struct.Memory* %2025)
  %2039 = load i64, i64* %RBP, align 8
  %2040 = add i64 %2039, -80
  %2041 = load i64, i64* %PC, align 8
  %2042 = add i64 %2041, 5
  store i64 %2042, i64* %PC, align 8
  %2043 = load <2 x float>, <2 x float>* %60, align 1
  %2044 = extractelement <2 x float> %2043, i32 0
  %2045 = inttoptr i64 %2040 to float*
  store float %2044, float* %2045, align 4
  %2046 = load i64, i64* %PC, align 8
  %2047 = add i64 %2046, 11
  store i64 %2047, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40139b

block_400b15:                                     ; preds = %block_4009e7
  %2048 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 12) to i32*), align 4
  store i32 %2048, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2049 = add i64 %1993, 7419
  %2050 = add i64 %1993, 13
  %2051 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2052 = add i64 %2051, -8
  %2053 = inttoptr i64 %2052 to i64*
  store i64 %2050, i64* %2053, align 8
  store i64 %2052, i64* %RSP, align 8, !tbaa !2428
  store i64 %2049, i64* %PC, align 8, !tbaa !2428
  %2054 = tail call %struct.Memory* @sub_402810_epslon_renamed_(%struct.State* nonnull %0, i64 %2049, %struct.Memory* %MEMORY.10)
  %2055 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %2056 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 12) to i32*), align 4
  store i32 %2056, i32* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2564, align 1, !tbaa !2452
  %2057 = load i64, i64* %RBP, align 8
  %2058 = add i64 %2057, -36
  %2059 = add i64 %2055, 23
  store i64 %2059, i64* %PC, align 8
  %2060 = load <2 x float>, <2 x float>* %60, align 1
  %2061 = extractelement <2 x float> %2060, i32 0
  %2062 = inttoptr i64 %2058 to float*
  store float %2061, float* %2062, align 4
  %2063 = load i64, i64* %RBP, align 8
  %2064 = add i64 %2063, -28
  %2065 = load i64, i64* %PC, align 8
  %2066 = add i64 %2065, 5
  store i64 %2066, i64* %PC, align 8
  %2067 = inttoptr i64 %2064 to i32*
  %2068 = load i32, i32* %2067, align 4
  store i32 %2068, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2069 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2070 = zext i32 %2069 to i64
  store i64 %2070, i64* %RAX, align 8, !tbaa !2428
  %2071 = bitcast %union.VectorReg* %10 to <2 x i32>*
  %2072 = load <2 x i32>, <2 x i32>* %2071, align 1
  %2073 = bitcast i64* %2569 to <2 x i32>*
  %2074 = load <2 x i32>, <2 x i32>* %2073, align 1
  %2075 = sitofp i32 %2069 to float
  store float %2075, float* %2566, align 1, !tbaa !2452
  %2076 = extractelement <2 x i32> %2072, i32 1
  %2077 = bitcast i8* %2567 to i32*
  store i32 %2076, i32* %2077, align 1, !tbaa !2452
  %2078 = extractelement <2 x i32> %2074, i32 0
  %2079 = bitcast i64* %2569 to i32*
  store i32 %2078, i32* %2079, align 1, !tbaa !2452
  %2080 = extractelement <2 x i32> %2074, i32 1
  %2081 = bitcast i8* %2571 to i32*
  store i32 %2080, i32* %2081, align 1, !tbaa !2452
  %2082 = add i64 %2063, -20
  %2083 = add i64 %2065, 21
  store i64 %2083, i64* %PC, align 8
  %2084 = bitcast %union.VectorReg* %10 to <2 x float>*
  %2085 = load <2 x float>, <2 x float>* %2084, align 1
  %2086 = load <2 x i32>, <2 x i32>* %2073, align 1
  %2087 = inttoptr i64 %2082 to float*
  %2088 = load float, float* %2087, align 4
  %2089 = extractelement <2 x float> %2085, i32 0
  %2090 = fmul float %2089, %2088
  store float %2090, float* %2566, align 1, !tbaa !2452
  %2091 = bitcast <2 x float> %2085 to <2 x i32>
  %2092 = extractelement <2 x i32> %2091, i32 1
  store i32 %2092, i32* %2077, align 1, !tbaa !2452
  %2093 = extractelement <2 x i32> %2086, i32 0
  store i32 %2093, i32* %2079, align 1, !tbaa !2452
  %2094 = extractelement <2 x i32> %2086, i32 1
  store i32 %2094, i32* %2081, align 1, !tbaa !2452
  %2095 = add i64 %2063, -24
  %2096 = add i64 %2065, 26
  store i64 %2096, i64* %PC, align 8
  %2097 = load <2 x float>, <2 x float>* %2084, align 1
  %2098 = load <2 x i32>, <2 x i32>* %2073, align 1
  %2099 = inttoptr i64 %2095 to float*
  %2100 = load float, float* %2099, align 4
  %2101 = extractelement <2 x float> %2097, i32 0
  %2102 = fmul float %2101, %2100
  store float %2102, float* %2566, align 1, !tbaa !2452
  %2103 = bitcast <2 x float> %2097 to <2 x i32>
  %2104 = extractelement <2 x i32> %2103, i32 1
  store i32 %2104, i32* %2077, align 1, !tbaa !2452
  %2105 = extractelement <2 x i32> %2098, i32 0
  store i32 %2105, i32* %2079, align 1, !tbaa !2452
  %2106 = extractelement <2 x i32> %2098, i32 1
  store i32 %2106, i32* %2081, align 1, !tbaa !2452
  %2107 = add i64 %2063, -36
  %2108 = add i64 %2065, 31
  store i64 %2108, i64* %PC, align 8
  %2109 = load <2 x float>, <2 x float>* %2084, align 1
  %2110 = load <2 x i32>, <2 x i32>* %2073, align 1
  %2111 = inttoptr i64 %2107 to float*
  %2112 = load float, float* %2111, align 4
  %2113 = extractelement <2 x float> %2109, i32 0
  %2114 = fmul float %2113, %2112
  store float %2114, float* %2566, align 1, !tbaa !2452
  %2115 = bitcast <2 x float> %2109 to <2 x i32>
  %2116 = extractelement <2 x i32> %2115, i32 1
  store i32 %2116, i32* %2077, align 1, !tbaa !2452
  %2117 = extractelement <2 x i32> %2110, i32 0
  store i32 %2117, i32* %2079, align 1, !tbaa !2452
  %2118 = extractelement <2 x i32> %2110, i32 1
  store i32 %2118, i32* %2081, align 1, !tbaa !2452
  %2119 = load <2 x float>, <2 x float>* %60, align 1
  %2120 = load <2 x i32>, <2 x i32>* %239, align 1
  %2121 = load <2 x float>, <2 x float>* %2084, align 1
  %2122 = extractelement <2 x float> %2119, i32 0
  %2123 = extractelement <2 x float> %2121, i32 0
  %2124 = fdiv float %2122, %2123
  store float %2124, float* %28, align 1, !tbaa !2452
  %2125 = bitcast <2 x float> %2119 to <2 x i32>
  %2126 = extractelement <2 x i32> %2125, i32 1
  store i32 %2126, i32* %245, align 1, !tbaa !2452
  %2127 = extractelement <2 x i32> %2120, i32 0
  store i32 %2127, i32* %246, align 1, !tbaa !2452
  %2128 = extractelement <2 x i32> %2120, i32 1
  store i32 %2128, i32* %247, align 1, !tbaa !2452
  %2129 = add i64 %2063, -32
  %2130 = add i64 %2065, 40
  store i64 %2130, i64* %PC, align 8
  %2131 = load <2 x float>, <2 x float>* %60, align 1
  %2132 = extractelement <2 x float> %2131, i32 0
  %2133 = inttoptr i64 %2129 to float*
  store float %2132, float* %2133, align 4
  %2134 = load i64, i64* %RBP, align 8
  %2135 = add i64 %2134, -36
  %2136 = load i64, i64* %PC, align 8
  %2137 = add i64 %2136, 5
  store i64 %2137, i64* %PC, align 8
  %2138 = inttoptr i64 %2135 to i32*
  %2139 = load i32, i32* %2138, align 4
  store i32 %2139, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  %2140 = add i64 %2134, -48
  %2141 = add i64 %2136, 10
  store i64 %2141, i64* %PC, align 8
  %2142 = load <2 x float>, <2 x float>* %60, align 1
  %2143 = extractelement <2 x float> %2142, i32 0
  %2144 = inttoptr i64 %2140 to float*
  store float %2143, float* %2144, align 4
  %2145 = load i64, i64* %PC, align 8
  %2146 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to i32*), align 16
  store i32 %2146, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2147 = load <2 x float>, <2 x float>* %60, align 1
  %2148 = load <2 x i32>, <2 x i32>* %239, align 1
  %2149 = load <2 x float>, <2 x float>* %2565, align 1
  %2150 = extractelement <2 x float> %2147, i32 0
  %2151 = extractelement <2 x float> %2149, i32 0
  %2152 = fsub float %2150, %2151
  store float %2152, float* %28, align 1, !tbaa !2452
  %2153 = bitcast <2 x float> %2147 to <2 x i32>
  %2154 = extractelement <2 x i32> %2153, i32 1
  store i32 %2154, i32* %245, align 1, !tbaa !2452
  %2155 = extractelement <2 x i32> %2148, i32 0
  store i32 %2155, i32* %246, align 1, !tbaa !2452
  %2156 = extractelement <2 x i32> %2148, i32 1
  store i32 %2156, i32* %247, align 1, !tbaa !2452
  %2157 = load i64, i64* %RBP, align 8
  %2158 = add i64 %2157, -52
  %2159 = add i64 %2145, 18
  store i64 %2159, i64* %PC, align 8
  %2160 = load <2 x float>, <2 x float>* %60, align 1
  %2161 = extractelement <2 x float> %2160, i32 0
  %2162 = inttoptr i64 %2158 to float*
  store float %2161, float* %2162, align 4
  %2163 = load i64, i64* %PC, align 8
  %2164 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2165 = add i32 %2164, -1
  %2166 = zext i32 %2165 to i64
  store i64 %2166, i64* %RAX, align 8, !tbaa !2428
  %2167 = icmp eq i32 %2164, 0
  %2168 = zext i1 %2167 to i8
  store i8 %2168, i8* %20, align 1, !tbaa !2432
  %2169 = and i32 %2165, 255
  %2170 = tail call i32 @llvm.ctpop.i32(i32 %2169) #8
  %2171 = trunc i32 %2170 to i8
  %2172 = and i8 %2171, 1
  %2173 = xor i8 %2172, 1
  store i8 %2173, i8* %21, align 1, !tbaa !2446
  %2174 = xor i32 %2164, %2165
  %2175 = lshr i32 %2174, 4
  %2176 = trunc i32 %2175 to i8
  %2177 = and i8 %2176, 1
  store i8 %2177, i8* %22, align 1, !tbaa !2450
  %2178 = icmp eq i32 %2165, 0
  %2179 = zext i1 %2178 to i8
  store i8 %2179, i8* %23, align 1, !tbaa !2447
  %2180 = lshr i32 %2165, 31
  %2181 = trunc i32 %2180 to i8
  store i8 %2181, i8* %24, align 1, !tbaa !2448
  %2182 = lshr i32 %2164, 31
  %2183 = xor i32 %2180, %2182
  %2184 = add nuw nsw i32 %2183, %2182
  %2185 = icmp eq i32 %2184, 2
  %2186 = zext i1 %2185 to i8
  store i8 %2186, i8* %25, align 1, !tbaa !2449
  %2187 = sext i32 %2165 to i64
  store i64 %2187, i64* %RCX, align 8, !tbaa !2428
  %2188 = shl nsw i64 %2187, 2
  %2189 = add i64 %2188, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2190 = add i64 %2163, 22
  store i64 %2190, i64* %PC, align 8
  %2191 = inttoptr i64 %2189 to i32*
  %2192 = load i32, i32* %2191, align 4
  store i32 %2192, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2193 = load <2 x float>, <2 x float>* %60, align 1
  %2194 = load <2 x i32>, <2 x i32>* %239, align 1
  %2195 = load <2 x float>, <2 x float>* %2565, align 1
  %2196 = extractelement <2 x float> %2193, i32 0
  %2197 = extractelement <2 x float> %2195, i32 0
  %2198 = fsub float %2196, %2197
  store float %2198, float* %28, align 1, !tbaa !2452
  %2199 = bitcast <2 x float> %2193 to <2 x i32>
  %2200 = extractelement <2 x i32> %2199, i32 1
  store i32 %2200, i32* %245, align 1, !tbaa !2452
  %2201 = extractelement <2 x i32> %2194, i32 0
  store i32 %2201, i32* %246, align 1, !tbaa !2452
  %2202 = extractelement <2 x i32> %2194, i32 1
  store i32 %2202, i32* %247, align 1, !tbaa !2452
  %2203 = load i64, i64* %RBP, align 8
  %2204 = add i64 %2203, -56
  %2205 = add i64 %2163, 31
  store i64 %2205, i64* %PC, align 8
  %2206 = load <2 x float>, <2 x float>* %60, align 1
  %2207 = extractelement <2 x float> %2206, i32 0
  %2208 = inttoptr i64 %2204 to float*
  store float %2207, float* %2208, align 4
  %2209 = load i64, i64* %PC, align 8
  %2210 = load i64, i64* @stderr, align 64
  store i64 %2210, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2211 = add i64 %2209, -1756
  %2212 = add i64 %2209, 15
  %2213 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2214 = add i64 %2213, -8
  %2215 = inttoptr i64 %2214 to i64*
  store i64 %2212, i64* %2215, align 8
  store i64 %2214, i64* %RSP, align 8, !tbaa !2428
  store i64 %2211, i64* %PC, align 8, !tbaa !2428
  %2216 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2054)
  %2217 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %2218 = load i64, i64* @stderr, align 64
  store i64 %2218, i64* %RDI, align 8, !tbaa !2428
  %2219 = load i64, i64* %RBP, align 8
  %2220 = add i64 %2219, -908
  %2221 = load i32, i32* %EAX, align 4
  %2222 = add i64 %2217, 24
  store i64 %2222, i64* %PC, align 8
  %2223 = inttoptr i64 %2220 to i32*
  store i32 %2221, i32* %2223, align 4
  %2224 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2225 = add i64 %2224, -1795
  %2226 = add i64 %2224, 7
  %2227 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2228 = add i64 %2227, -8
  %2229 = inttoptr i64 %2228 to i64*
  store i64 %2226, i64* %2229, align 8
  store i64 %2228, i64* %RSP, align 8, !tbaa !2428
  store i64 %2225, i64* %PC, align 8, !tbaa !2428
  %2230 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2216)
  %2231 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %2232 = load i64, i64* @stderr, align 64
  store i64 %2232, i64* %RDI, align 8, !tbaa !2428
  %2233 = load i64, i64* %RBP, align 8
  %2234 = add i64 %2233, -32
  %2235 = add i64 %2231, 23
  store i64 %2235, i64* %PC, align 8
  %2236 = inttoptr i64 %2234 to i32*
  %2237 = load i32, i32* %2236, align 4
  store i32 %2237, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2238 = load <2 x float>, <2 x float>* %60, align 1
  %2239 = extractelement <2 x float> %2238, i32 0
  %2240 = fpext float %2239 to double
  store double %2240, double* %192, align 1, !tbaa !2454
  %2241 = add i64 %2233, -28
  %2242 = add i64 %2231, 32
  store i64 %2242, i64* %PC, align 8
  %2243 = inttoptr i64 %2241 to i32*
  %2244 = load i32, i32* %2243, align 4
  store i32 %2244, i32* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2564, align 1, !tbaa !2452
  %2245 = load <2 x float>, <2 x float>* %2565, align 1
  %2246 = extractelement <2 x float> %2245, i32 0
  %2247 = fpext float %2246 to double
  store double %2247, double* %196, align 1, !tbaa !2454
  %2248 = add i64 %2233, -48
  %2249 = add i64 %2231, 41
  store i64 %2249, i64* %PC, align 8
  %2250 = inttoptr i64 %2248 to i32*
  %2251 = load i32, i32* %2250, align 4
  %2252 = bitcast %union.VectorReg* %10 to i32*
  store i32 %2251, i32* %2252, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2568, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2572, align 1, !tbaa !2452
  %2253 = load <2 x float>, <2 x float>* %2084, align 1
  %2254 = extractelement <2 x float> %2253, i32 0
  %2255 = fpext float %2254 to double
  store double %2255, double* %210, align 1, !tbaa !2454
  %2256 = add i64 %2233, -52
  %2257 = add i64 %2231, 50
  store i64 %2257, i64* %PC, align 8
  %2258 = inttoptr i64 %2256 to i32*
  %2259 = load i32, i32* %2258, align 4
  %2260 = bitcast %union.VectorReg* %11 to float*
  store i32 %2259, i32* %214, align 1, !tbaa !2452
  %2261 = bitcast i8* %216 to float*
  store float 0.000000e+00, float* %2261, align 1, !tbaa !2452
  %2262 = bitcast i64* %218 to float*
  store float 0.000000e+00, float* %2262, align 1, !tbaa !2452
  %2263 = bitcast i8* %220 to float*
  store float 0.000000e+00, float* %2263, align 1, !tbaa !2452
  %2264 = bitcast %union.VectorReg* %11 to <2 x float>*
  %2265 = load <2 x float>, <2 x float>* %2264, align 1
  %2266 = extractelement <2 x float> %2265, i32 0
  %2267 = fpext float %2266 to double
  store double %2267, double* %222, align 1, !tbaa !2454
  %2268 = bitcast %union.VectorReg* %12 to i8*
  %2269 = add i64 %2233, -56
  %2270 = add i64 %2231, 59
  store i64 %2270, i64* %PC, align 8
  %2271 = inttoptr i64 %2269 to i32*
  %2272 = load i32, i32* %2271, align 4
  %2273 = bitcast %union.VectorReg* %12 to i32*
  store i32 %2272, i32* %2273, align 1, !tbaa !2452
  %2274 = getelementptr inbounds i8, i8* %2268, i64 4
  %2275 = bitcast i8* %2274 to float*
  store float 0.000000e+00, float* %2275, align 1, !tbaa !2452
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %2277 = bitcast i64* %2276 to float*
  store float 0.000000e+00, float* %2277, align 1, !tbaa !2452
  %2278 = getelementptr inbounds i8, i8* %2268, i64 12
  %2279 = bitcast i8* %2278 to float*
  store float 0.000000e+00, float* %2279, align 1, !tbaa !2452
  %2280 = bitcast %union.VectorReg* %12 to <2 x float>*
  %2281 = load <2 x float>, <2 x float>* %2280, align 1
  %2282 = extractelement <2 x float> %2281, i32 0
  %2283 = fpext float %2282 to double
  %2284 = bitcast %union.VectorReg* %12 to double*
  store double %2283, double* %2284, align 1, !tbaa !2454
  %2285 = add i64 %2233, -912
  %2286 = load i32, i32* %EAX, align 4
  %2287 = add i64 %2231, 69
  store i64 %2287, i64* %PC, align 8
  %2288 = inttoptr i64 %2285 to i32*
  store i32 %2286, i32* %2288, align 4
  %2289 = load i64, i64* %PC, align 8
  store i8 5, i8* %AL, align 1, !tbaa !2456
  %2290 = add i64 %2289, -1871
  %2291 = add i64 %2289, 7
  %2292 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2293 = add i64 %2292, -8
  %2294 = inttoptr i64 %2293 to i64*
  store i64 %2291, i64* %2294, align 8
  store i64 %2293, i64* %RSP, align 8, !tbaa !2428
  store i64 %2290, i64* %PC, align 8, !tbaa !2428
  %2295 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2230)
  %2296 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %2297 = load i64, i64* @stderr, align 64
  store i64 %2297, i64* %RDI, align 8, !tbaa !2428
  %2298 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2299 = zext i32 %2298 to i64
  store i64 %2299, i64* %RDX, align 8, !tbaa !2428
  %2300 = load i64, i64* %RBP, align 8
  %2301 = add i64 %2300, -916
  %2302 = load i32, i32* %EAX, align 4
  %2303 = add i64 %2296, 31
  store i64 %2303, i64* %PC, align 8
  %2304 = inttoptr i64 %2301 to i32*
  store i32 %2302, i32* %2304, align 4
  %2305 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2306 = add i64 %2305, -1909
  %2307 = add i64 %2305, 7
  %2308 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2309 = add i64 %2308, -8
  %2310 = inttoptr i64 %2309 to i64*
  store i64 %2307, i64* %2310, align 8
  store i64 %2309, i64* %RSP, align 8, !tbaa !2428
  store i64 %2306, i64* %PC, align 8, !tbaa !2428
  %2311 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2295)
  %2312 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %2313 = load i64, i64* @stderr, align 64
  store i64 %2313, i64* %RDI, align 8, !tbaa !2428
  %2314 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2315 = zext i32 %2314 to i64
  store i64 %2315, i64* %RDX, align 8, !tbaa !2428
  %2316 = load i64, i64* %RBP, align 8
  %2317 = add i64 %2316, -920
  %2318 = load i32, i32* %EAX, align 4
  %2319 = add i64 %2312, 31
  store i64 %2319, i64* %PC, align 8
  %2320 = inttoptr i64 %2317 to i32*
  store i32 %2318, i32* %2320, align 4
  %2321 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2322 = add i64 %2321, -1947
  %2323 = add i64 %2321, 7
  %2324 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2325 = add i64 %2324, -8
  %2326 = inttoptr i64 %2325 to i64*
  store i64 %2323, i64* %2326, align 8
  store i64 %2325, i64* %RSP, align 8, !tbaa !2428
  store i64 %2322, i64* %PC, align 8, !tbaa !2428
  %2327 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2311)
  %2328 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %2329 = load i64, i64* @stderr, align 64
  store i64 %2329, i64* %RDI, align 8, !tbaa !2428
  %2330 = load i64, i64* %RBP, align 8
  %2331 = add i64 %2330, -924
  %2332 = load i32, i32* %EAX, align 4
  %2333 = add i64 %2328, 24
  store i64 %2333, i64* %PC, align 8
  %2334 = inttoptr i64 %2331 to i32*
  store i32 %2332, i32* %2334, align 4
  %2335 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2336 = add i64 %2335, -1978
  %2337 = add i64 %2335, 7
  %2338 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2339 = add i64 %2338, -8
  %2340 = inttoptr i64 %2339 to i64*
  store i64 %2337, i64* %2340, align 8
  store i64 %2339, i64* %RSP, align 8, !tbaa !2428
  store i64 %2336, i64* %PC, align 8, !tbaa !2428
  %2341 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2327)
  %2342 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %2343 = load i64, i64* @stderr, align 64
  store i64 %2343, i64* %RDI, align 8, !tbaa !2428
  %2344 = load i64, i64* %RBP, align 8
  %2345 = add i64 %2344, -928
  %2346 = load i32, i32* %EAX, align 4
  %2347 = add i64 %2342, 24
  store i64 %2347, i64* %PC, align 8
  %2348 = inttoptr i64 %2345 to i32*
  store i32 %2346, i32* %2348, align 4
  %2349 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2350 = add i64 %2349, -2009
  %2351 = add i64 %2349, 7
  %2352 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2353 = add i64 %2352, -8
  %2354 = inttoptr i64 %2353 to i64*
  store i64 %2351, i64* %2354, align 8
  store i64 %2353, i64* %RSP, align 8, !tbaa !2428
  store i64 %2350, i64* %PC, align 8, !tbaa !2428
  %2355 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2341)
  %2356 = load i64, i64* %PC, align 8
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %2357 = load i64, i64* %RBP, align 8
  %2358 = add i64 %2357, -16
  %2359 = add i64 %2356, 8
  store i64 %2359, i64* %PC, align 8
  %2360 = inttoptr i64 %2358 to i32*
  %2361 = load i32, i32* %2360, align 4
  store i32 %2361, i32* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2564, align 1, !tbaa !2452
  %2362 = load <2 x float>, <2 x float>* %2565, align 1
  %2363 = extractelement <2 x float> %2362, i32 0
  store float %2363, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*), align 8
  %2364 = add i64 %2356, 22
  store i64 %2364, i64* %PC, align 8
  %2365 = load i32, i32* %2360, align 4
  store i32 %2365, i32* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2564, align 1, !tbaa !2452
  %2366 = load <2 x float>, <2 x float>* %2565, align 1
  %2367 = extractelement <2 x float> %2366, i32 0
  %2368 = fpext float %2367 to double
  store double %2368, double* %196, align 1, !tbaa !2454
  %2369 = add i64 %2356, 30
  store i64 %2369, i64* %PC, align 8
  %2370 = load double, double* %192, align 1
  %2371 = fcmp uno double %2368, %2370
  br i1 %2371, label %2372, label %2382

; <label>:2372:                                   ; preds = %block_400b15
  %2373 = fadd double %2368, %2370
  %2374 = bitcast double %2373 to i64
  %2375 = and i64 %2374, 9221120237041090560
  %2376 = icmp eq i64 %2375, 9218868437227405312
  %2377 = and i64 %2374, 2251799813685247
  %2378 = icmp ne i64 %2377, 0
  %2379 = and i1 %2376, %2378
  br i1 %2379, label %2380, label %2388

; <label>:2380:                                   ; preds = %2372
  %2381 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2369, %struct.Memory* %2355) #9
  %.pre17 = load i64, i64* %RBP, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:2382:                                   ; preds = %block_400b15
  %2383 = fcmp ogt double %2368, %2370
  br i1 %2383, label %2388, label %2384

; <label>:2384:                                   ; preds = %2382
  %2385 = fcmp olt double %2368, %2370
  br i1 %2385, label %2388, label %2386

; <label>:2386:                                   ; preds = %2384
  %2387 = fcmp oeq double %2368, %2370
  br i1 %2387, label %2388, label %2392

; <label>:2388:                                   ; preds = %2386, %2384, %2382, %2372
  %2389 = phi i8 [ 0, %2382 ], [ 0, %2384 ], [ 1, %2386 ], [ 1, %2372 ]
  %2390 = phi i8 [ 0, %2382 ], [ 0, %2384 ], [ 0, %2386 ], [ 1, %2372 ]
  %2391 = phi i8 [ 0, %2382 ], [ 1, %2384 ], [ 0, %2386 ], [ 1, %2372 ]
  store i8 %2389, i8* %23, align 1, !tbaa !2456
  store i8 %2390, i8* %21, align 1, !tbaa !2456
  store i8 %2391, i8* %20, align 1, !tbaa !2456
  br label %2392

; <label>:2392:                                   ; preds = %2388, %2386
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %24, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %2392, %2380
  %2393 = phi i64 [ %.pre18, %2380 ], [ %2369, %2392 ]
  %2394 = phi i64 [ %.pre17, %2380 ], [ %2357, %2392 ]
  %2395 = phi %struct.Memory* [ %2381, %2380 ], [ %2355, %2392 ]
  %2396 = add i64 %2394, -932
  %2397 = load i32, i32* %EAX, align 4
  %2398 = add i64 %2393, 6
  store i64 %2398, i64* %PC, align 8
  %2399 = inttoptr i64 %2396 to i32*
  store i32 %2397, i32* %2399, align 4
  %2400 = load i64, i64* %PC, align 8
  %2401 = load i8, i8* %20, align 1, !tbaa !2432
  %2402 = load i8, i8* %23, align 1, !tbaa !2447
  %2403 = or i8 %2402, %2401
  %2404 = icmp ne i8 %2403, 0
  %.v32 = select i1 %2404, i64 96, i64 6
  %2405 = add i64 %2400, %.v32
  store i64 %2405, i64* %PC, align 8, !tbaa !2428
  br i1 %2404, label %block_400d24, label %block_400cca

block_40093d:                                     ; preds = %block_400907, %block_400951
  %2406 = phi i32 [ 0, %block_400907 ], [ %718, %block_400951 ]
  %2407 = phi i64 [ %3088, %block_400907 ], [ %741, %block_400951 ]
  %2408 = zext i32 %2406 to i64
  store i64 %2408, i64* %RAX, align 8, !tbaa !2428
  %2409 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2410 = sub i32 %2406, %2409
  %2411 = icmp ult i32 %2406, %2409
  %2412 = zext i1 %2411 to i8
  store i8 %2412, i8* %20, align 1, !tbaa !2432
  %2413 = and i32 %2410, 255
  %2414 = tail call i32 @llvm.ctpop.i32(i32 %2413) #8
  %2415 = trunc i32 %2414 to i8
  %2416 = and i8 %2415, 1
  %2417 = xor i8 %2416, 1
  store i8 %2417, i8* %21, align 1, !tbaa !2446
  %2418 = xor i32 %2409, %2406
  %2419 = xor i32 %2418, %2410
  %2420 = lshr i32 %2419, 4
  %2421 = trunc i32 %2420 to i8
  %2422 = and i8 %2421, 1
  store i8 %2422, i8* %22, align 1, !tbaa !2450
  %2423 = icmp eq i32 %2410, 0
  %2424 = zext i1 %2423 to i8
  store i8 %2424, i8* %23, align 1, !tbaa !2447
  %2425 = lshr i32 %2410, 31
  %2426 = trunc i32 %2425 to i8
  store i8 %2426, i8* %24, align 1, !tbaa !2448
  %2427 = lshr i32 %2406, 31
  %2428 = lshr i32 %2409, 31
  %2429 = xor i32 %2428, %2427
  %2430 = xor i32 %2425, %2427
  %2431 = add nuw nsw i32 %2430, %2429
  %2432 = icmp eq i32 %2431, 2
  %2433 = zext i1 %2432 to i8
  store i8 %2433, i8* %25, align 1, !tbaa !2449
  %2434 = icmp ne i8 %2426, 0
  %2435 = xor i1 %2434, %2432
  %.v28 = select i1 %2435, i64 20, i64 90
  %2436 = add i64 %2407, %.v28
  store i64 %2436, i64* %PC, align 8, !tbaa !2428
  br i1 %2435, label %block_400951, label %block_400997

block_400d9e:                                     ; preds = %block_400d80, %block_400dae
  %2437 = phi i32 [ 0, %block_400d80 ], [ %2758, %block_400dae ]
  %2438 = phi i64 [ %3248, %block_400d80 ], [ %2781, %block_400dae ]
  %MEMORY.12 = phi %struct.Memory* [ %3209, %block_400d80 ], [ %2755, %block_400dae ]
  %2439 = zext i32 %2437 to i64
  store i64 %2439, i64* %RAX, align 8, !tbaa !2428
  %2440 = load i64, i64* %RBP, align 8
  %2441 = add i64 %2440, -68
  %2442 = add i64 %2438, 10
  store i64 %2442, i64* %PC, align 8
  %2443 = inttoptr i64 %2441 to i32*
  %2444 = load i32, i32* %2443, align 4
  %2445 = sub i32 %2437, %2444
  %2446 = icmp ult i32 %2437, %2444
  %2447 = zext i1 %2446 to i8
  store i8 %2447, i8* %20, align 1, !tbaa !2432
  %2448 = and i32 %2445, 255
  %2449 = tail call i32 @llvm.ctpop.i32(i32 %2448) #8
  %2450 = trunc i32 %2449 to i8
  %2451 = and i8 %2450, 1
  %2452 = xor i8 %2451, 1
  store i8 %2452, i8* %21, align 1, !tbaa !2446
  %2453 = xor i32 %2444, %2437
  %2454 = xor i32 %2453, %2445
  %2455 = lshr i32 %2454, 4
  %2456 = trunc i32 %2455 to i8
  %2457 = and i8 %2456, 1
  store i8 %2457, i8* %22, align 1, !tbaa !2450
  %2458 = icmp eq i32 %2445, 0
  %2459 = zext i1 %2458 to i8
  store i8 %2459, i8* %23, align 1, !tbaa !2447
  %2460 = lshr i32 %2445, 31
  %2461 = trunc i32 %2460 to i8
  store i8 %2461, i8* %24, align 1, !tbaa !2448
  %2462 = lshr i32 %2437, 31
  %2463 = lshr i32 %2444, 31
  %2464 = xor i32 %2463, %2462
  %2465 = xor i32 %2460, %2462
  %2466 = add nuw nsw i32 %2465, %2464
  %2467 = icmp eq i32 %2466, 2
  %2468 = zext i1 %2467 to i8
  store i8 %2468, i8* %25, align 1, !tbaa !2449
  %2469 = icmp ne i8 %2461, 0
  %2470 = xor i1 %2469, %2467
  %.v33 = select i1 %2470, i64 16, i64 81
  %2471 = add i64 %2438, %.v33
  store i64 %2471, i64* %PC, align 8, !tbaa !2428
  br i1 %2470, label %block_400dae, label %block_400def

block_400ee0:                                     ; preds = %block_400ef4, %block_400ec2
  %2472 = phi i32 [ 0, %block_400ec2 ], [ %2603, %block_400ef4 ]
  %2473 = phi i64 [ %1588, %block_400ec2 ], [ %2626, %block_400ef4 ]
  %MEMORY.13 = phi %struct.Memory* [ %1549, %block_400ec2 ], [ %2600, %block_400ef4 ]
  %2474 = zext i32 %2472 to i64
  store i64 %2474, i64* %RAX, align 8, !tbaa !2428
  %2475 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2476 = sub i32 %2472, %2475
  %2477 = icmp ult i32 %2472, %2475
  %2478 = zext i1 %2477 to i8
  store i8 %2478, i8* %20, align 1, !tbaa !2432
  %2479 = and i32 %2476, 255
  %2480 = tail call i32 @llvm.ctpop.i32(i32 %2479) #8
  %2481 = trunc i32 %2480 to i8
  %2482 = and i8 %2481, 1
  %2483 = xor i8 %2482, 1
  store i8 %2483, i8* %21, align 1, !tbaa !2446
  %2484 = xor i32 %2475, %2472
  %2485 = xor i32 %2484, %2476
  %2486 = lshr i32 %2485, 4
  %2487 = trunc i32 %2486 to i8
  %2488 = and i8 %2487, 1
  store i8 %2488, i8* %22, align 1, !tbaa !2450
  %2489 = icmp eq i32 %2476, 0
  %2490 = zext i1 %2489 to i8
  store i8 %2490, i8* %23, align 1, !tbaa !2447
  %2491 = lshr i32 %2476, 31
  %2492 = trunc i32 %2491 to i8
  store i8 %2492, i8* %24, align 1, !tbaa !2448
  %2493 = lshr i32 %2472, 31
  %2494 = lshr i32 %2475, 31
  %2495 = xor i32 %2494, %2493
  %2496 = xor i32 %2491, %2493
  %2497 = add nuw nsw i32 %2496, %2495
  %2498 = icmp eq i32 %2497, 2
  %2499 = zext i1 %2498 to i8
  store i8 %2499, i8* %25, align 1, !tbaa !2449
  %2500 = icmp ne i8 %2492, 0
  %2501 = xor i1 %2500, %2498
  %.v36 = select i1 %2501, i64 20, i64 134
  %2502 = add i64 %2473, %.v36
  store i64 %2502, i64* %PC, align 8, !tbaa !2428
  br i1 %2501, label %block_400ef4, label %block_400f66

block_400a44:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %2503 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2504 = sext i32 %2503 to i64
  store i64 %2504, i64* %RAX, align 8, !tbaa !2428
  %2505 = shl nsw i64 %2504, 2
  %2506 = add i64 %2505, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2507 = add i64 %2744, 17
  store i64 %2507, i64* %PC, align 8
  %2508 = inttoptr i64 %2506 to i32*
  %2509 = load i32, i32* %2508, align 4
  store i32 %2509, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2510 = load <2 x float>, <2 x float>* %60, align 1
  %2511 = extractelement <2 x float> %2510, i32 0
  %2512 = fpext float %2511 to double
  %2513 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %2514 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %2515 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %2516 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %2513, i32* %2574, align 1, !tbaa !2452
  store i32 %2514, i32* %2575, align 1, !tbaa !2452
  store i32 %2515, i32* %2576, align 1, !tbaa !2452
  store i32 %2516, i32* %2577, align 1, !tbaa !2452
  %2517 = bitcast double %2512 to i64
  %2518 = load i64, i64* %32, align 1
  %2519 = load i64, i64* %197, align 1
  %2520 = load i64, i64* %198, align 1
  %2521 = and i64 %2519, %2517
  %2522 = and i64 %2520, %2518
  %2523 = trunc i64 %2521 to i32
  %2524 = lshr i64 %2521, 32
  %2525 = trunc i64 %2524 to i32
  store i32 %2523, i32* %29, align 1, !tbaa !2451
  store i32 %2525, i32* %245, align 1, !tbaa !2451
  %2526 = trunc i64 %2522 to i32
  store i32 %2526, i32* %246, align 1, !tbaa !2451
  %2527 = lshr i64 %2522, 32
  %2528 = trunc i64 %2527 to i32
  store i32 %2528, i32* %247, align 1, !tbaa !2451
  %2529 = load i64, i64* %RBP, align 8
  %2530 = add i64 %2529, -896
  %2531 = add i64 %2744, 40
  store i64 %2531, i64* %PC, align 8
  %2532 = load i64, i64* %3089, align 1
  %2533 = inttoptr i64 %2530 to i64*
  store i64 %2532, i64* %2533, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_400a6c

block_400997:                                     ; preds = %block_40093d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %2534 = zext i32 %2409 to i64
  store i64 %2534, i64* %RDI, align 8, !tbaa !2428
  store i64 %2534, i64* %RDX, align 8, !tbaa !2428
  %2535 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2536 = zext i32 %2535 to i64
  store i64 %2536, i64* %RCX, align 8, !tbaa !2428
  %2537 = add i64 %2436, 5753
  %2538 = add i64 %2436, 56
  %2539 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2540 = add i64 %2539, -8
  %2541 = inttoptr i64 %2540 to i64*
  store i64 %2538, i64* %2541, align 8
  store i64 %2540, i64* %RSP, align 8, !tbaa !2428
  store i64 %2537, i64* %PC, align 8, !tbaa !2428
  %2542 = tail call %struct.Memory* @sub_402010_dmxpy_renamed_(%struct.State* nonnull %0, i64 %2537, %struct.Memory* %3086)
  %2543 = load i64, i64* %PC, align 8
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %246, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  %2544 = load i64, i64* %RBP, align 8
  %2545 = add i64 %2544, -28
  %2546 = add i64 %2543, 8
  store i64 %2546, i64* %PC, align 8
  %2547 = load <2 x float>, <2 x float>* %60, align 1
  %2548 = extractelement <2 x float> %2547, i32 0
  %2549 = inttoptr i64 %2545 to float*
  store float %2548, float* %2549, align 4
  %2550 = load i64, i64* %RBP, align 8
  %2551 = add i64 %2550, -24
  %2552 = load i64, i64* %PC, align 8
  %2553 = add i64 %2552, 5
  store i64 %2553, i64* %PC, align 8
  %2554 = load <2 x float>, <2 x float>* %60, align 1
  %2555 = extractelement <2 x float> %2554, i32 0
  %2556 = inttoptr i64 %2551 to float*
  store float %2555, float* %2556, align 4
  %2557 = load i64, i64* %PC, align 8
  %2558 = add i64 %2557, 11
  store i64 %2558, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2559 = bitcast %union.VectorReg* %9 to float*
  %2560 = getelementptr inbounds i8, i8* %194, i64 4
  %2561 = bitcast i8* %2560 to float*
  %2562 = bitcast i64* %198 to float*
  %2563 = getelementptr inbounds i8, i8* %194, i64 12
  %2564 = bitcast i8* %2563 to float*
  %2565 = bitcast %union.VectorReg* %9 to <2 x float>*
  %2566 = bitcast %union.VectorReg* %10 to float*
  %2567 = getelementptr inbounds i8, i8* %207, i64 4
  %2568 = bitcast i8* %2567 to float*
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %2570 = bitcast i64* %2569 to float*
  %2571 = getelementptr inbounds i8, i8* %207, i64 12
  %2572 = bitcast i8* %2571 to float*
  %2573 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  %2574 = bitcast %union.VectorReg* %9 to i32*
  %2575 = bitcast i8* %2560 to i32*
  %2576 = bitcast i64* %198 to i32*
  %2577 = bitcast i8* %2563 to i32*
  br label %block_4009e7

block_400ef4:                                     ; preds = %block_400ee0
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2578 = load i64, i64* %RBP, align 8
  %2579 = add i64 %2578, -20
  store i64 %2579, i64* %R8, align 8, !tbaa !2428
  %2580 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2581 = zext i32 %2580 to i64
  store i64 %2581, i64* %RSI, align 8, !tbaa !2428
  %2582 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2583 = zext i32 %2582 to i64
  store i64 %2583, i64* %RDX, align 8, !tbaa !2428
  %2584 = add i64 %2502, 2236
  %2585 = add i64 %2502, 43
  %2586 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2587 = add i64 %2586, -8
  %2588 = inttoptr i64 %2587 to i64*
  store i64 %2585, i64* %2588, align 8
  store i64 %2587, i64* %RSP, align 8, !tbaa !2428
  store i64 %2584, i64* %PC, align 8, !tbaa !2428
  %2589 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2584, %struct.Memory* %MEMORY.13)
  %2590 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2591 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2592 = zext i32 %2591 to i64
  store i64 %2592, i64* %RSI, align 8, !tbaa !2428
  %2593 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2594 = zext i32 %2593 to i64
  store i64 %2594, i64* %RDX, align 8, !tbaa !2428
  %2595 = add i64 %2590, 2657
  %2596 = add i64 %2590, 49
  %2597 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2598 = add i64 %2597, -8
  %2599 = inttoptr i64 %2598 to i64*
  store i64 %2596, i64* %2599, align 8
  store i64 %2598, i64* %RSP, align 8, !tbaa !2428
  store i64 %2595, i64* %PC, align 8, !tbaa !2428
  %2600 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %2595, %struct.Memory* %2589)
  %2601 = load i64, i64* %PC, align 8
  %2602 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2603 = add i32 %2602, 1
  %2604 = zext i32 %2603 to i64
  store i64 %2604, i64* %RAX, align 8, !tbaa !2428
  %2605 = icmp eq i32 %2602, -1
  %2606 = icmp eq i32 %2603, 0
  %2607 = or i1 %2605, %2606
  %2608 = zext i1 %2607 to i8
  store i8 %2608, i8* %20, align 1, !tbaa !2432
  %2609 = and i32 %2603, 255
  %2610 = tail call i32 @llvm.ctpop.i32(i32 %2609) #8
  %2611 = trunc i32 %2610 to i8
  %2612 = and i8 %2611, 1
  %2613 = xor i8 %2612, 1
  store i8 %2613, i8* %21, align 1, !tbaa !2446
  %2614 = xor i32 %2602, %2603
  %2615 = lshr i32 %2614, 4
  %2616 = trunc i32 %2615 to i8
  %2617 = and i8 %2616, 1
  store i8 %2617, i8* %22, align 1, !tbaa !2450
  %2618 = zext i1 %2606 to i8
  store i8 %2618, i8* %23, align 1, !tbaa !2447
  %2619 = lshr i32 %2603, 31
  %2620 = trunc i32 %2619 to i8
  store i8 %2620, i8* %24, align 1, !tbaa !2448
  %2621 = lshr i32 %2602, 31
  %2622 = xor i32 %2619, %2621
  %2623 = add nuw nsw i32 %2622, %2619
  %2624 = icmp eq i32 %2623, 2
  %2625 = zext i1 %2624 to i8
  store i8 %2625, i8* %25, align 1, !tbaa !2449
  store i32 %2603, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2626 = add i64 %2601, -112
  store i64 %2626, i64* %PC, align 8, !tbaa !2428
  br label %block_400ee0

block_4008bb:                                     ; preds = %block_4008cf, %block_400610
  %2627 = phi i32 [ %2959, %block_4008cf ], [ 0, %block_400610 ]
  %2628 = phi i64 [ %2982, %block_4008cf ], [ %377, %block_400610 ]
  %2629 = zext i32 %2627 to i64
  store i64 %2629, i64* %RAX, align 8, !tbaa !2428
  %2630 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2631 = sub i32 %2627, %2630
  %2632 = icmp ult i32 %2627, %2630
  %2633 = zext i1 %2632 to i8
  store i8 %2633, i8* %20, align 1, !tbaa !2432
  %2634 = and i32 %2631, 255
  %2635 = tail call i32 @llvm.ctpop.i32(i32 %2634) #8
  %2636 = trunc i32 %2635 to i8
  %2637 = and i8 %2636, 1
  %2638 = xor i8 %2637, 1
  store i8 %2638, i8* %21, align 1, !tbaa !2446
  %2639 = xor i32 %2630, %2627
  %2640 = xor i32 %2639, %2631
  %2641 = lshr i32 %2640, 4
  %2642 = trunc i32 %2641 to i8
  %2643 = and i8 %2642, 1
  store i8 %2643, i8* %22, align 1, !tbaa !2450
  %2644 = icmp eq i32 %2631, 0
  %2645 = zext i1 %2644 to i8
  store i8 %2645, i8* %23, align 1, !tbaa !2447
  %2646 = lshr i32 %2631, 31
  %2647 = trunc i32 %2646 to i8
  store i8 %2647, i8* %24, align 1, !tbaa !2448
  %2648 = lshr i32 %2627, 31
  %2649 = lshr i32 %2630, 31
  %2650 = xor i32 %2649, %2648
  %2651 = xor i32 %2646, %2648
  %2652 = add nuw nsw i32 %2651, %2650
  %2653 = icmp eq i32 %2652, 2
  %2654 = zext i1 %2653 to i8
  store i8 %2654, i8* %25, align 1, !tbaa !2449
  %2655 = icmp ne i8 %2647, 0
  %2656 = xor i1 %2655, %2653
  %.v = select i1 %2656, i64 20, i64 76
  %2657 = add i64 %2628, %.v
  store i64 %2657, i64* %PC, align 8, !tbaa !2428
  br i1 %2656, label %block_4008cf, label %block_400907

block_400e43:                                     ; preds = %block_400def, %block_400e3a
  %2658 = phi i64 [ %.pre21, %block_400e3a ], [ %459, %block_400def ]
  %2659 = load i64, i64* %RBP, align 8
  %2660 = add i64 %2659, -64
  %2661 = add i64 %2658, 9
  store i64 %2661, i64* %PC, align 8
  %2662 = inttoptr i64 %2660 to i32*
  %2663 = load i32, i32* %2662, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %2664 = and i32 %2663, 255
  %2665 = tail call i32 @llvm.ctpop.i32(i32 %2664) #8
  %2666 = trunc i32 %2665 to i8
  %2667 = and i8 %2666, 1
  %2668 = xor i8 %2667, 1
  store i8 %2668, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  %2669 = icmp eq i32 %2663, 0
  %2670 = zext i1 %2669 to i8
  store i8 %2670, i8* %23, align 1, !tbaa !2447
  %2671 = lshr i32 %2663, 31
  %2672 = trunc i32 %2671 to i8
  store i8 %2672, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  %2673 = icmp ne i8 %2672, 0
  %.v35 = select i1 %2673, i64 -195, i64 15
  %2674 = add i64 %2658, %.v35
  store i64 %2674, i64* %PC, align 8, !tbaa !2428
  br i1 %2673, label %block_400d80, label %block_400e52

block_4009fb:                                     ; preds = %block_4009e7
  %2675 = load i64, i64* %RBP, align 8
  %2676 = add i64 %2675, -28
  %2677 = add i64 %1993, 5
  store i64 %2677, i64* %PC, align 8
  %2678 = inttoptr i64 %2676 to i32*
  %2679 = load i32, i32* %2678, align 4
  store i32 %2679, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2680 = load <2 x float>, <2 x float>* %60, align 1
  %2681 = extractelement <2 x float> %2680, i32 0
  %2682 = fpext float %2681 to double
  store double %2682, double* %192, align 1, !tbaa !2454
  %2683 = sext i32 %1963 to i64
  store i64 %2683, i64* %RAX, align 8, !tbaa !2428
  %2684 = shl nsw i64 %2683, 2
  %2685 = add i64 %2684, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2686 = add i64 %1993, 26
  store i64 %2686, i64* %PC, align 8
  %2687 = inttoptr i64 %2685 to i32*
  %2688 = load i32, i32* %2687, align 4
  store i32 %2688, i32* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2564, align 1, !tbaa !2452
  %2689 = load <2 x float>, <2 x float>* %2565, align 1
  %2690 = extractelement <2 x float> %2689, i32 0
  %2691 = fpext float %2690 to double
  %2692 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %2693 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %2694 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %2695 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %2696 = bitcast %union.VectorReg* %10 to i32*
  store i32 %2692, i32* %2696, align 1, !tbaa !2452
  %2697 = bitcast i8* %2567 to i32*
  store i32 %2693, i32* %2697, align 1, !tbaa !2452
  %2698 = bitcast i64* %2569 to i32*
  store i32 %2694, i32* %2698, align 1, !tbaa !2452
  %2699 = bitcast i8* %2571 to i32*
  store i32 %2695, i32* %2699, align 1, !tbaa !2452
  %2700 = bitcast double %2691 to i64
  %2701 = load i64, i64* %198, align 1
  %2702 = load i64, i64* %2573, align 1
  %2703 = load i64, i64* %2569, align 1
  %2704 = and i64 %2702, %2700
  %2705 = and i64 %2703, %2701
  %2706 = trunc i64 %2704 to i32
  %2707 = lshr i64 %2704, 32
  %2708 = trunc i64 %2707 to i32
  store i32 %2706, i32* %2574, align 1, !tbaa !2451
  store i32 %2708, i32* %2575, align 1, !tbaa !2451
  %2709 = trunc i64 %2705 to i32
  store i32 %2709, i32* %2576, align 1, !tbaa !2451
  %2710 = lshr i64 %2705, 32
  %2711 = trunc i64 %2710 to i32
  store i32 %2711, i32* %2577, align 1, !tbaa !2451
  %2712 = add i64 %1993, 45
  store i64 %2712, i64* %PC, align 8
  %2713 = load double, double* %196, align 1
  %2714 = fcmp uno double %2682, %2713
  br i1 %2714, label %2715, label %2725

; <label>:2715:                                   ; preds = %block_4009fb
  %2716 = fadd double %2682, %2713
  %2717 = bitcast double %2716 to i64
  %2718 = and i64 %2717, 9221120237041090560
  %2719 = icmp eq i64 %2718, 9218868437227405312
  %2720 = and i64 %2717, 2251799813685247
  %2721 = icmp ne i64 %2720, 0
  %2722 = and i1 %2719, %2721
  br i1 %2722, label %2723, label %2731

; <label>:2723:                                   ; preds = %2715
  %2724 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2712, %struct.Memory* %MEMORY.10) #9
  %.pre = load i64, i64* %PC, align 8
  %.pre12 = load i8, i8* %20, align 1, !tbaa !2432
  %.pre13 = load i8, i8* %23, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:2725:                                   ; preds = %block_4009fb
  %2726 = fcmp ogt double %2682, %2713
  br i1 %2726, label %2731, label %2727

; <label>:2727:                                   ; preds = %2725
  %2728 = fcmp olt double %2682, %2713
  br i1 %2728, label %2731, label %2729

; <label>:2729:                                   ; preds = %2727
  %2730 = fcmp oeq double %2682, %2713
  br i1 %2730, label %2731, label %2735

; <label>:2731:                                   ; preds = %2729, %2727, %2725, %2715
  %2732 = phi i8 [ 0, %2725 ], [ 0, %2727 ], [ 1, %2729 ], [ 1, %2715 ]
  %2733 = phi i8 [ 0, %2725 ], [ 0, %2727 ], [ 0, %2729 ], [ 1, %2715 ]
  %2734 = phi i8 [ 0, %2725 ], [ 1, %2727 ], [ 0, %2729 ], [ 1, %2715 ]
  store i8 %2732, i8* %23, align 1, !tbaa !2456
  store i8 %2733, i8* %21, align 1, !tbaa !2456
  store i8 %2734, i8* %20, align 1, !tbaa !2456
  br label %2735

; <label>:2735:                                   ; preds = %2731, %2729
  %2736 = phi i8 [ %2732, %2731 ], [ %1981, %2729 ]
  %2737 = phi i8 [ %2734, %2731 ], [ %1969, %2729 ]
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %24, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %2735, %2723
  %2738 = phi i8 [ %.pre13, %2723 ], [ %2736, %2735 ]
  %2739 = phi i8 [ %.pre12, %2723 ], [ %2737, %2735 ]
  %2740 = phi i64 [ %.pre, %2723 ], [ %2712, %2735 ]
  %2741 = phi %struct.Memory* [ %2724, %2723 ], [ %MEMORY.10, %2735 ]
  %2742 = or i8 %2738, %2739
  %2743 = icmp ne i8 %2742, 0
  %.v30 = select i1 %2743, i64 28, i64 6
  %2744 = add i64 %2740, %.v30
  store i64 %2744, i64* %PC, align 8, !tbaa !2428
  br i1 %2743, label %block_400a44, label %block_400a2e

block_400dae:                                     ; preds = %block_400d9e
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2745 = add i64 %2440, -20
  store i64 %2745, i64* %R8, align 8, !tbaa !2428
  %2746 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2747 = zext i32 %2746 to i64
  store i64 %2747, i64* %RSI, align 8, !tbaa !2428
  %2748 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2749 = zext i32 %2748 to i64
  store i64 %2749, i64* %RDX, align 8, !tbaa !2428
  %2750 = add i64 %2471, 2562
  %2751 = add i64 %2471, 43
  %2752 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2753 = add i64 %2752, -8
  %2754 = inttoptr i64 %2753 to i64*
  store i64 %2751, i64* %2754, align 8
  store i64 %2753, i64* %RSP, align 8, !tbaa !2428
  store i64 %2750, i64* %PC, align 8, !tbaa !2428
  %2755 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2750, %struct.Memory* %MEMORY.12)
  %2756 = load i64, i64* %PC, align 8
  %2757 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2758 = add i32 %2757, 1
  %2759 = zext i32 %2758 to i64
  store i64 %2759, i64* %RAX, align 8, !tbaa !2428
  %2760 = icmp eq i32 %2757, -1
  %2761 = icmp eq i32 %2758, 0
  %2762 = or i1 %2760, %2761
  %2763 = zext i1 %2762 to i8
  store i8 %2763, i8* %20, align 1, !tbaa !2432
  %2764 = and i32 %2758, 255
  %2765 = tail call i32 @llvm.ctpop.i32(i32 %2764) #8
  %2766 = trunc i32 %2765 to i8
  %2767 = and i8 %2766, 1
  %2768 = xor i8 %2767, 1
  store i8 %2768, i8* %21, align 1, !tbaa !2446
  %2769 = xor i32 %2757, %2758
  %2770 = lshr i32 %2769, 4
  %2771 = trunc i32 %2770 to i8
  %2772 = and i8 %2771, 1
  store i8 %2772, i8* %22, align 1, !tbaa !2450
  %2773 = zext i1 %2761 to i8
  store i8 %2773, i8* %23, align 1, !tbaa !2447
  %2774 = lshr i32 %2758, 31
  %2775 = trunc i32 %2774 to i8
  store i8 %2775, i8* %24, align 1, !tbaa !2448
  %2776 = lshr i32 %2757, 31
  %2777 = xor i32 %2774, %2776
  %2778 = add nuw nsw i32 %2777, %2774
  %2779 = icmp eq i32 %2778, 2
  %2780 = zext i1 %2779 to i8
  store i8 %2780, i8* %25, align 1, !tbaa !2449
  store i32 %2758, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2781 = add i64 %2756, -59
  store i64 %2781, i64* %PC, align 8, !tbaa !2428
  br label %block_400d9e

block_40150e:                                     ; preds = %block_4014fa
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2782 = load i64, i64* %RBP, align 8
  %2783 = add i64 %2782, -20
  store i64 %2783, i64* %R8, align 8, !tbaa !2428
  %2784 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2785 = zext i32 %2784 to i64
  store i64 %2785, i64* %RSI, align 8, !tbaa !2428
  %2786 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2787 = zext i32 %2786 to i64
  store i64 %2787, i64* %RDX, align 8, !tbaa !2428
  %2788 = add i64 %1539, 674
  %2789 = add i64 %1539, 43
  %2790 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2791 = add i64 %2790, -8
  %2792 = inttoptr i64 %2791 to i64*
  store i64 %2789, i64* %2792, align 8
  store i64 %2791, i64* %RSP, align 8, !tbaa !2428
  store i64 %2788, i64* %PC, align 8, !tbaa !2428
  %2793 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2788, %struct.Memory* %MEMORY.6)
  %2794 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2795 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2796 = zext i32 %2795 to i64
  store i64 %2796, i64* %RSI, align 8, !tbaa !2428
  %2797 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2798 = zext i32 %2797 to i64
  store i64 %2798, i64* %RDX, align 8, !tbaa !2428
  %2799 = add i64 %2794, 1095
  %2800 = add i64 %2794, 49
  %2801 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2802 = add i64 %2801, -8
  %2803 = inttoptr i64 %2802 to i64*
  store i64 %2800, i64* %2803, align 8
  store i64 %2802, i64* %RSP, align 8, !tbaa !2428
  store i64 %2799, i64* %PC, align 8, !tbaa !2428
  %2804 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %2799, %struct.Memory* %2793)
  %2805 = load i64, i64* %PC, align 8
  %2806 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2807 = add i32 %2806, 1
  %2808 = zext i32 %2807 to i64
  store i64 %2808, i64* %RAX, align 8, !tbaa !2428
  %2809 = icmp eq i32 %2806, -1
  %2810 = icmp eq i32 %2807, 0
  %2811 = or i1 %2809, %2810
  %2812 = zext i1 %2811 to i8
  store i8 %2812, i8* %20, align 1, !tbaa !2432
  %2813 = and i32 %2807, 255
  %2814 = tail call i32 @llvm.ctpop.i32(i32 %2813) #8
  %2815 = trunc i32 %2814 to i8
  %2816 = and i8 %2815, 1
  %2817 = xor i8 %2816, 1
  store i8 %2817, i8* %21, align 1, !tbaa !2446
  %2818 = xor i32 %2806, %2807
  %2819 = lshr i32 %2818, 4
  %2820 = trunc i32 %2819 to i8
  %2821 = and i8 %2820, 1
  store i8 %2821, i8* %22, align 1, !tbaa !2450
  %2822 = zext i1 %2810 to i8
  store i8 %2822, i8* %23, align 1, !tbaa !2447
  %2823 = lshr i32 %2807, 31
  %2824 = trunc i32 %2823 to i8
  store i8 %2824, i8* %24, align 1, !tbaa !2448
  %2825 = lshr i32 %2806, 31
  %2826 = xor i32 %2823, %2825
  %2827 = add nuw nsw i32 %2826, %2823
  %2828 = icmp eq i32 %2827, 2
  %2829 = zext i1 %2828 to i8
  store i8 %2829, i8* %25, align 1, !tbaa !2449
  store i32 %2807, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2830 = add i64 %2805, -112
  store i64 %2830, i64* %PC, align 8, !tbaa !2428
  br label %block_4014fa

block_40118d:                                     ; preds = %block_4011a1, %block_401149
  %2831 = phi i32 [ 0, %block_401149 ], [ %1856, %block_4011a1 ]
  %2832 = phi i64 [ %903, %block_401149 ], [ %1879, %block_4011a1 ]
  %MEMORY.16 = phi %struct.Memory* [ %894, %block_401149 ], [ %1853, %block_4011a1 ]
  %2833 = zext i32 %2831 to i64
  store i64 %2833, i64* %RAX, align 8, !tbaa !2428
  %2834 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2835 = sub i32 %2831, %2834
  %2836 = icmp ult i32 %2831, %2834
  %2837 = zext i1 %2836 to i8
  store i8 %2837, i8* %20, align 1, !tbaa !2432
  %2838 = and i32 %2835, 255
  %2839 = tail call i32 @llvm.ctpop.i32(i32 %2838) #8
  %2840 = trunc i32 %2839 to i8
  %2841 = and i8 %2840, 1
  %2842 = xor i8 %2841, 1
  store i8 %2842, i8* %21, align 1, !tbaa !2446
  %2843 = xor i32 %2834, %2831
  %2844 = xor i32 %2843, %2835
  %2845 = lshr i32 %2844, 4
  %2846 = trunc i32 %2845 to i8
  %2847 = and i8 %2846, 1
  store i8 %2847, i8* %22, align 1, !tbaa !2450
  %2848 = icmp eq i32 %2835, 0
  %2849 = zext i1 %2848 to i8
  store i8 %2849, i8* %23, align 1, !tbaa !2447
  %2850 = lshr i32 %2835, 31
  %2851 = trunc i32 %2850 to i8
  store i8 %2851, i8* %24, align 1, !tbaa !2448
  %2852 = lshr i32 %2831, 31
  %2853 = lshr i32 %2834, 31
  %2854 = xor i32 %2853, %2852
  %2855 = xor i32 %2850, %2852
  %2856 = add nuw nsw i32 %2855, %2854
  %2857 = icmp eq i32 %2856, 2
  %2858 = zext i1 %2857 to i8
  store i8 %2858, i8* %25, align 1, !tbaa !2449
  %2859 = icmp ne i8 %2851, 0
  %2860 = xor i1 %2859, %2857
  %.v42 = select i1 %2860, i64 20, i64 94
  %2861 = add i64 %2832, %.v42
  store i64 %2861, i64* %PC, align 8, !tbaa !2428
  br i1 %2860, label %block_4011a1, label %block_4011eb

block_40139b:                                     ; preds = %block_4013ab, %block_40131f
  %2862 = phi i32 [ 0, %block_40131f ], [ %3105, %block_4013ab ]
  %2863 = phi i64 [ %2047, %block_40131f ], [ %3128, %block_4013ab ]
  %MEMORY.17 = phi %struct.Memory* [ %2038, %block_40131f ], [ %3102, %block_4013ab ]
  %2864 = zext i32 %2862 to i64
  store i64 %2864, i64* %RAX, align 8, !tbaa !2428
  %2865 = load i64, i64* %RBP, align 8
  %2866 = add i64 %2865, -68
  %2867 = add i64 %2863, 10
  store i64 %2867, i64* %PC, align 8
  %2868 = inttoptr i64 %2866 to i32*
  %2869 = load i32, i32* %2868, align 4
  %2870 = sub i32 %2862, %2869
  %2871 = icmp ult i32 %2862, %2869
  %2872 = zext i1 %2871 to i8
  store i8 %2872, i8* %20, align 1, !tbaa !2432
  %2873 = and i32 %2870, 255
  %2874 = tail call i32 @llvm.ctpop.i32(i32 %2873) #8
  %2875 = trunc i32 %2874 to i8
  %2876 = and i8 %2875, 1
  %2877 = xor i8 %2876, 1
  store i8 %2877, i8* %21, align 1, !tbaa !2446
  %2878 = xor i32 %2869, %2862
  %2879 = xor i32 %2878, %2870
  %2880 = lshr i32 %2879, 4
  %2881 = trunc i32 %2880 to i8
  %2882 = and i8 %2881, 1
  store i8 %2882, i8* %22, align 1, !tbaa !2450
  %2883 = icmp eq i32 %2870, 0
  %2884 = zext i1 %2883 to i8
  store i8 %2884, i8* %23, align 1, !tbaa !2447
  %2885 = lshr i32 %2870, 31
  %2886 = trunc i32 %2885 to i8
  store i8 %2886, i8* %24, align 1, !tbaa !2448
  %2887 = lshr i32 %2862, 31
  %2888 = lshr i32 %2869, 31
  %2889 = xor i32 %2888, %2887
  %2890 = xor i32 %2885, %2887
  %2891 = add nuw nsw i32 %2890, %2889
  %2892 = icmp eq i32 %2891, 2
  %2893 = zext i1 %2892 to i8
  store i8 %2893, i8* %25, align 1, !tbaa !2449
  %2894 = icmp ne i8 %2886, 0
  %2895 = xor i1 %2894, %2892
  %.v43 = select i1 %2895, i64 16, i64 81
  %2896 = add i64 %2863, %.v43
  store i64 %2896, i64* %PC, align 8, !tbaa !2428
  br i1 %2895, label %block_4013ab, label %block_4013ec

block_4010d7:                                     ; preds = %block_4010c3
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2897 = load i64, i64* %RBP, align 8
  %2898 = add i64 %2897, -20
  store i64 %2898, i64* %R8, align 8, !tbaa !2428
  %2899 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2900 = zext i32 %2899 to i64
  store i64 %2900, i64* %RSI, align 8, !tbaa !2428
  %2901 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2902 = zext i32 %2901 to i64
  store i64 %2902, i64* %RDX, align 8, !tbaa !2428
  %2903 = add i64 %1386, 1753
  %2904 = add i64 %1386, 43
  %2905 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2906 = add i64 %2905, -8
  %2907 = inttoptr i64 %2906 to i64*
  store i64 %2904, i64* %2907, align 8
  store i64 %2906, i64* %RSP, align 8, !tbaa !2428
  store i64 %2903, i64* %PC, align 8, !tbaa !2428
  %2908 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2903, %struct.Memory* %MEMORY.4)
  %2909 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2910 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2911 = zext i32 %2910 to i64
  store i64 %2911, i64* %RSI, align 8, !tbaa !2428
  %2912 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2913 = zext i32 %2912 to i64
  store i64 %2913, i64* %RDX, align 8, !tbaa !2428
  %2914 = add i64 %2909, 2174
  %2915 = add i64 %2909, 49
  %2916 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2917 = add i64 %2916, -8
  %2918 = inttoptr i64 %2917 to i64*
  store i64 %2915, i64* %2918, align 8
  store i64 %2917, i64* %RSP, align 8, !tbaa !2428
  store i64 %2914, i64* %PC, align 8, !tbaa !2428
  %2919 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %2914, %struct.Memory* %2908)
  %2920 = load i64, i64* %PC, align 8
  %2921 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2922 = add i32 %2921, 1
  %2923 = zext i32 %2922 to i64
  store i64 %2923, i64* %RAX, align 8, !tbaa !2428
  %2924 = icmp eq i32 %2921, -1
  %2925 = icmp eq i32 %2922, 0
  %2926 = or i1 %2924, %2925
  %2927 = zext i1 %2926 to i8
  store i8 %2927, i8* %20, align 1, !tbaa !2432
  %2928 = and i32 %2922, 255
  %2929 = tail call i32 @llvm.ctpop.i32(i32 %2928) #8
  %2930 = trunc i32 %2929 to i8
  %2931 = and i8 %2930, 1
  %2932 = xor i8 %2931, 1
  store i8 %2932, i8* %21, align 1, !tbaa !2446
  %2933 = xor i32 %2921, %2922
  %2934 = lshr i32 %2933, 4
  %2935 = trunc i32 %2934 to i8
  %2936 = and i8 %2935, 1
  store i8 %2936, i8* %22, align 1, !tbaa !2450
  %2937 = zext i1 %2925 to i8
  store i8 %2937, i8* %23, align 1, !tbaa !2447
  %2938 = lshr i32 %2922, 31
  %2939 = trunc i32 %2938 to i8
  store i8 %2939, i8* %24, align 1, !tbaa !2448
  %2940 = lshr i32 %2921, 31
  %2941 = xor i32 %2938, %2940
  %2942 = add nuw nsw i32 %2941, %2938
  %2943 = icmp eq i32 %2942, 2
  %2944 = zext i1 %2943 to i8
  store i8 %2944, i8* %25, align 1, !tbaa !2449
  store i32 %2922, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2945 = add i64 %2920, -112
  store i64 %2945, i64* %PC, align 8, !tbaa !2428
  br label %block_4010c3

block_4008cf:                                     ; preds = %block_4008bb
  %2946 = sext i32 %2627 to i64
  store i64 %2946, i64* %RAX, align 8, !tbaa !2428
  %2947 = shl nsw i64 %2946, 2
  %2948 = add i64 %2947, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2949 = add i64 %2657, 17
  store i64 %2949, i64* %PC, align 8
  %2950 = inttoptr i64 %2948 to i32*
  %2951 = load i32, i32* %2950, align 4
  store i32 %2951, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2952 = add i64 %2947, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2953 = add i64 %2657, 34
  store i64 %2953, i64* %PC, align 8
  %2954 = load <2 x float>, <2 x float>* %60, align 1
  %2955 = extractelement <2 x float> %2954, i32 0
  %2956 = inttoptr i64 %2952 to float*
  store float %2955, float* %2956, align 4
  %2957 = load i64, i64* %PC, align 8
  %2958 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2959 = add i32 %2958, 1
  %2960 = zext i32 %2959 to i64
  store i64 %2960, i64* %RAX, align 8, !tbaa !2428
  %2961 = icmp eq i32 %2958, -1
  %2962 = icmp eq i32 %2959, 0
  %2963 = or i1 %2961, %2962
  %2964 = zext i1 %2963 to i8
  store i8 %2964, i8* %20, align 1, !tbaa !2432
  %2965 = and i32 %2959, 255
  %2966 = tail call i32 @llvm.ctpop.i32(i32 %2965) #8
  %2967 = trunc i32 %2966 to i8
  %2968 = and i8 %2967, 1
  %2969 = xor i8 %2968, 1
  store i8 %2969, i8* %21, align 1, !tbaa !2446
  %2970 = xor i32 %2958, %2959
  %2971 = lshr i32 %2970, 4
  %2972 = trunc i32 %2971 to i8
  %2973 = and i8 %2972, 1
  store i8 %2973, i8* %22, align 1, !tbaa !2450
  %2974 = zext i1 %2962 to i8
  store i8 %2974, i8* %23, align 1, !tbaa !2447
  %2975 = lshr i32 %2959, 31
  %2976 = trunc i32 %2975 to i8
  store i8 %2976, i8* %24, align 1, !tbaa !2448
  %2977 = lshr i32 %2958, 31
  %2978 = xor i32 %2975, %2977
  %2979 = add nuw nsw i32 %2978, %2975
  %2980 = icmp eq i32 %2979, 2
  %2981 = zext i1 %2980 to i8
  store i8 %2981, i8* %25, align 1, !tbaa !2449
  store i32 %2959, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2982 = add i64 %2957, -54
  store i64 %2982, i64* %PC, align 8, !tbaa !2428
  br label %block_4008bb

block_400a6c:                                     ; preds = %block_400a2e, %block_400a44
  %2983 = phi i64 [ %3075, %block_400a2e ], [ %.pre14, %block_400a44 ]
  %2984 = load i64, i64* %RBP, align 8
  %2985 = add i64 %2984, -896
  %2986 = add i64 %2983, 8
  store i64 %2986, i64* %PC, align 8
  %2987 = inttoptr i64 %2985 to double*
  %2988 = load double, double* %2987, align 8
  %2989 = bitcast double %2988 to <2 x i32>
  %2990 = fptrunc double %2988 to float
  store float %2990, float* %28, align 1, !tbaa !2452
  %2991 = extractelement <2 x i32> %2989, i32 1
  store i32 %2991, i32* %245, align 1, !tbaa !2452
  store i32 0, i32* %246, align 1, !tbaa !2452
  store i32 0, i32* %247, align 1, !tbaa !2452
  %2992 = add i64 %2984, -28
  %2993 = add i64 %2983, 17
  store i64 %2993, i64* %PC, align 8
  %2994 = load <2 x float>, <2 x float>* %60, align 1
  %2995 = extractelement <2 x float> %2994, i32 0
  %2996 = inttoptr i64 %2992 to float*
  store float %2995, float* %2996, align 4
  %2997 = load i64, i64* %RBP, align 8
  %2998 = add i64 %2997, -24
  %2999 = load i64, i64* %PC, align 8
  %3000 = add i64 %2999, 5
  store i64 %3000, i64* %PC, align 8
  %3001 = inttoptr i64 %2998 to i32*
  %3002 = load i32, i32* %3001, align 4
  store i32 %3002, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %3003 = load <2 x float>, <2 x float>* %60, align 1
  %3004 = extractelement <2 x float> %3003, i32 0
  %3005 = fpext float %3004 to double
  store double %3005, double* %192, align 1, !tbaa !2454
  %3006 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3007 = sext i32 %3006 to i64
  store i64 %3007, i64* %RAX, align 8, !tbaa !2428
  %3008 = shl nsw i64 %3007, 2
  %3009 = add i64 %3008, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %3010 = add i64 %2999, 26
  store i64 %3010, i64* %PC, align 8
  %3011 = inttoptr i64 %3009 to i32*
  %3012 = load i32, i32* %3011, align 4
  store i32 %3012, i32* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2564, align 1, !tbaa !2452
  %3013 = load <2 x float>, <2 x float>* %2565, align 1
  %3014 = extractelement <2 x float> %3013, i32 0
  %3015 = fpext float %3014 to double
  %3016 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %3017 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %3018 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %3019 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %3016, i32* %2696, align 1, !tbaa !2452
  store i32 %3017, i32* %2697, align 1, !tbaa !2452
  store i32 %3018, i32* %2698, align 1, !tbaa !2452
  store i32 %3019, i32* %2699, align 1, !tbaa !2452
  %3020 = bitcast double %3015 to i64
  %3021 = load i64, i64* %198, align 1
  %3022 = load i64, i64* %2573, align 1
  %3023 = load i64, i64* %2569, align 1
  %3024 = and i64 %3022, %3020
  %3025 = and i64 %3023, %3021
  %3026 = trunc i64 %3024 to i32
  %3027 = lshr i64 %3024, 32
  %3028 = trunc i64 %3027 to i32
  store i32 %3026, i32* %2574, align 1, !tbaa !2451
  store i32 %3028, i32* %2575, align 1, !tbaa !2451
  %3029 = trunc i64 %3025 to i32
  store i32 %3029, i32* %2576, align 1, !tbaa !2451
  %3030 = lshr i64 %3025, 32
  %3031 = trunc i64 %3030 to i32
  store i32 %3031, i32* %2577, align 1, !tbaa !2451
  %3032 = add i64 %2999, 45
  store i64 %3032, i64* %PC, align 8
  %3033 = load double, double* %196, align 1
  %3034 = fcmp uno double %3005, %3033
  br i1 %3034, label %3035, label %3045

; <label>:3035:                                   ; preds = %block_400a6c
  %3036 = fadd double %3005, %3033
  %3037 = bitcast double %3036 to i64
  %3038 = and i64 %3037, 9221120237041090560
  %3039 = icmp eq i64 %3038, 9218868437227405312
  %3040 = and i64 %3037, 2251799813685247
  %3041 = icmp ne i64 %3040, 0
  %3042 = and i1 %3039, %3041
  br i1 %3042, label %3043, label %3051

; <label>:3043:                                   ; preds = %3035
  %3044 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3032, %struct.Memory* %2741) #9
  %.pre15 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:3045:                                   ; preds = %block_400a6c
  %3046 = fcmp ogt double %3005, %3033
  br i1 %3046, label %3051, label %3047

; <label>:3047:                                   ; preds = %3045
  %3048 = fcmp olt double %3005, %3033
  br i1 %3048, label %3051, label %3049

; <label>:3049:                                   ; preds = %3047
  %3050 = fcmp oeq double %3005, %3033
  br i1 %3050, label %3051, label %3055

; <label>:3051:                                   ; preds = %3049, %3047, %3045, %3035
  %3052 = phi i8 [ 0, %3045 ], [ 0, %3047 ], [ 1, %3049 ], [ 1, %3035 ]
  %3053 = phi i8 [ 0, %3045 ], [ 0, %3047 ], [ 0, %3049 ], [ 1, %3035 ]
  %3054 = phi i8 [ 0, %3045 ], [ 1, %3047 ], [ 0, %3049 ], [ 1, %3035 ]
  store i8 %3052, i8* %23, align 1, !tbaa !2456
  store i8 %3053, i8* %21, align 1, !tbaa !2456
  store i8 %3054, i8* %20, align 1, !tbaa !2456
  br label %3055

; <label>:3055:                                   ; preds = %3051, %3049
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %24, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %3055, %3043
  %3056 = phi i64 [ %.pre15, %3043 ], [ %3032, %3055 ]
  %3057 = phi %struct.Memory* [ %3044, %3043 ], [ %2741, %3055 ]
  %3058 = load i8, i8* %20, align 1, !tbaa !2432
  %3059 = load i8, i8* %23, align 1, !tbaa !2447
  %3060 = or i8 %3059, %3058
  %3061 = icmp ne i8 %3060, 0
  %.v31 = select i1 %3061, i64 28, i64 6
  %3062 = add i64 %3056, %.v31
  store i64 %3062, i64* %PC, align 8, !tbaa !2428
  br i1 %3061, label %block_400ac6, label %block_400ab0

block_400a2e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %3063 = load i64, i64* %RBP, align 8
  %3064 = add i64 %3063, -28
  %3065 = add i64 %2744, 5
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3064 to i32*
  %3067 = load i32, i32* %3066, align 4
  store i32 %3067, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %3068 = load <2 x float>, <2 x float>* %60, align 1
  %3069 = extractelement <2 x float> %3068, i32 0
  %3070 = fpext float %3069 to double
  store double %3070, double* %192, align 1, !tbaa !2454
  %3071 = add i64 %3063, -896
  %3072 = add i64 %2744, 17
  store i64 %3072, i64* %PC, align 8
  %3073 = inttoptr i64 %3071 to double*
  store double %3070, double* %3073, align 8
  %3074 = load i64, i64* %PC, align 8
  %3075 = add i64 %3074, 45
  store i64 %3075, i64* %PC, align 8, !tbaa !2428
  br label %block_400a6c

block_400907:                                     ; preds = %block_4008bb
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3076 = load i64, i64* %RBP, align 8
  %3077 = add i64 %3076, -20
  store i64 %3077, i64* %R8, align 8, !tbaa !2428
  %3078 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %3079 = zext i32 %3078 to i64
  store i64 %3079, i64* %RSI, align 8, !tbaa !2428
  %3080 = zext i32 %2630 to i64
  store i64 %3080, i64* %RDX, align 8, !tbaa !2428
  %3081 = add i64 %2657, 3753
  %3082 = add i64 %2657, 43
  %3083 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3084 = add i64 %3083, -8
  %3085 = inttoptr i64 %3084 to i64*
  store i64 %3082, i64* %3085, align 8
  store i64 %3084, i64* %RSP, align 8, !tbaa !2428
  store i64 %3081, i64* %PC, align 8, !tbaa !2428
  %3086 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %3081, %struct.Memory* %348)
  %3087 = load i64, i64* %PC, align 8
  %3088 = add i64 %3087, 11
  store i64 %3088, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3089 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3090 = bitcast %union.anon* %4 to [2 x i32]*
  %3091 = getelementptr inbounds [2 x i32], [2 x i32]* %3090, i64 0, i64 1
  br label %block_40093d

block_4013ab:                                     ; preds = %block_40139b
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3092 = add i64 %2865, -20
  store i64 %3092, i64* %R8, align 8, !tbaa !2428
  %3093 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %3094 = zext i32 %3093 to i64
  store i64 %3094, i64* %RSI, align 8, !tbaa !2428
  %3095 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3096 = zext i32 %3095 to i64
  store i64 %3096, i64* %RDX, align 8, !tbaa !2428
  %3097 = add i64 %2896, 1029
  %3098 = add i64 %2896, 43
  %3099 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3100 = add i64 %3099, -8
  %3101 = inttoptr i64 %3100 to i64*
  store i64 %3098, i64* %3101, align 8
  store i64 %3100, i64* %RSP, align 8, !tbaa !2428
  store i64 %3097, i64* %PC, align 8, !tbaa !2428
  %3102 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %3097, %struct.Memory* %MEMORY.17)
  %3103 = load i64, i64* %PC, align 8
  %3104 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3105 = add i32 %3104, 1
  %3106 = zext i32 %3105 to i64
  store i64 %3106, i64* %RAX, align 8, !tbaa !2428
  %3107 = icmp eq i32 %3104, -1
  %3108 = icmp eq i32 %3105, 0
  %3109 = or i1 %3107, %3108
  %3110 = zext i1 %3109 to i8
  store i8 %3110, i8* %20, align 1, !tbaa !2432
  %3111 = and i32 %3105, 255
  %3112 = tail call i32 @llvm.ctpop.i32(i32 %3111) #8
  %3113 = trunc i32 %3112 to i8
  %3114 = and i8 %3113, 1
  %3115 = xor i8 %3114, 1
  store i8 %3115, i8* %21, align 1, !tbaa !2446
  %3116 = xor i32 %3104, %3105
  %3117 = lshr i32 %3116, 4
  %3118 = trunc i32 %3117 to i8
  %3119 = and i8 %3118, 1
  store i8 %3119, i8* %22, align 1, !tbaa !2450
  %3120 = zext i1 %3108 to i8
  store i8 %3120, i8* %23, align 1, !tbaa !2447
  %3121 = lshr i32 %3105, 31
  %3122 = trunc i32 %3121 to i8
  store i8 %3122, i8* %24, align 1, !tbaa !2448
  %3123 = lshr i32 %3104, 31
  %3124 = xor i32 %3121, %3123
  %3125 = add nuw nsw i32 %3124, %3121
  %3126 = icmp eq i32 %3125, 2
  %3127 = zext i1 %3126 to i8
  store i8 %3127, i8* %25, align 1, !tbaa !2449
  store i32 %3105, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3128 = add i64 %3103, -59
  store i64 %3128, i64* %PC, align 8, !tbaa !2428
  br label %block_40139b

block_401580:                                     ; preds = %block_4014fa
  %3129 = add i64 %1539, -4032
  %3130 = add i64 %1539, 5
  %3131 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3132 = add i64 %3131, -8
  %3133 = inttoptr i64 %3132 to i64*
  store i64 %3130, i64* %3133, align 8
  store i64 %3132, i64* %RSP, align 8, !tbaa !2428
  store i64 %3129, i64* %PC, align 8, !tbaa !2428
  %3134 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3129, %struct.Memory* %MEMORY.6)
  %3135 = load i64, i64* %RBP, align 8
  %3136 = add i64 %3135, -40
  %3137 = load i64, i64* %PC, align 8
  %3138 = add i64 %3137, 5
  store i64 %3138, i64* %PC, align 8
  %3139 = load <2 x float>, <2 x float>* %60, align 1
  %3140 = load <2 x i32>, <2 x i32>* %239, align 1
  %3141 = inttoptr i64 %3136 to float*
  %3142 = load float, float* %3141, align 4
  %3143 = extractelement <2 x float> %3139, i32 0
  %3144 = fsub float %3143, %3142
  store float %3144, float* %28, align 1, !tbaa !2452
  %3145 = bitcast <2 x float> %3139 to <2 x i32>
  %3146 = extractelement <2 x i32> %3145, i32 1
  store i32 %3146, i32* %245, align 1, !tbaa !2452
  %3147 = extractelement <2 x i32> %3140, i32 0
  store i32 %3147, i32* %246, align 1, !tbaa !2452
  %3148 = extractelement <2 x i32> %3140, i32 1
  store i32 %3148, i32* %247, align 1, !tbaa !2452
  %3149 = add i64 %3135, -44
  %3150 = add i64 %3137, 10
  store i64 %3150, i64* %PC, align 8
  %3151 = load <2 x float>, <2 x float>* %60, align 1
  %3152 = load <2 x i32>, <2 x i32>* %239, align 1
  %3153 = inttoptr i64 %3149 to float*
  %3154 = load float, float* %3153, align 4
  %3155 = extractelement <2 x float> %3151, i32 0
  %3156 = fsub float %3155, %3154
  store float %3156, float* %28, align 1, !tbaa !2452
  %3157 = bitcast <2 x float> %3151 to <2 x i32>
  %3158 = extractelement <2 x i32> %3157, i32 1
  store i32 %3158, i32* %245, align 1, !tbaa !2452
  %3159 = extractelement <2 x i32> %3152, i32 0
  store i32 %3159, i32* %246, align 1, !tbaa !2452
  %3160 = extractelement <2 x i32> %3152, i32 1
  store i32 %3160, i32* %247, align 1, !tbaa !2452
  %3161 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %3162 = zext i32 %3161 to i64
  store i64 %3162, i64* %RAX, align 8, !tbaa !2428
  %3163 = load <2 x i32>, <2 x i32>* %1475, align 1
  %3164 = load <2 x i32>, <2 x i32>* %1476, align 1
  %3165 = sitofp i32 %3161 to float
  store float %3165, float* %2559, align 1, !tbaa !2452
  %3166 = extractelement <2 x i32> %3163, i32 1
  store i32 %3166, i32* %2575, align 1, !tbaa !2452
  %3167 = extractelement <2 x i32> %3164, i32 0
  store i32 %3167, i32* %2576, align 1, !tbaa !2452
  %3168 = extractelement <2 x i32> %3164, i32 1
  store i32 %3168, i32* %2577, align 1, !tbaa !2452
  %3169 = load <2 x float>, <2 x float>* %60, align 1
  %3170 = load <2 x i32>, <2 x i32>* %239, align 1
  %3171 = load <2 x float>, <2 x float>* %2565, align 1
  %3172 = extractelement <2 x float> %3169, i32 0
  %3173 = extractelement <2 x float> %3171, i32 0
  %3174 = fdiv float %3172, %3173
  store float %3174, float* %28, align 1, !tbaa !2452
  %3175 = bitcast <2 x float> %3169 to <2 x i32>
  %3176 = extractelement <2 x i32> %3175, i32 1
  store i32 %3176, i32* %245, align 1, !tbaa !2452
  %3177 = extractelement <2 x i32> %3170, i32 0
  store i32 %3177, i32* %246, align 1, !tbaa !2452
  %3178 = extractelement <2 x i32> %3170, i32 1
  store i32 %3178, i32* %247, align 1, !tbaa !2452
  %3179 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %3180 = sext i32 %3179 to i64
  store i64 %3180, i64* %RCX, align 8, !tbaa !2428
  %3181 = shl nsw i64 %3180, 2
  %3182 = add i64 %3181, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3183 = add i64 %3137, 42
  store i64 %3183, i64* %PC, align 8
  %3184 = load <2 x float>, <2 x float>* %60, align 1
  %3185 = extractelement <2 x float> %3184, i32 0
  %3186 = inttoptr i64 %3182 to float*
  store float %3185, float* %3186, align 4
  %3187 = load i64, i64* %PC, align 8
  %3188 = add i64 %3187, -4079
  %3189 = add i64 %3187, 5
  %3190 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3191 = add i64 %3190, -8
  %3192 = inttoptr i64 %3191 to i64*
  store i64 %3189, i64* %3192, align 8
  store i64 %3191, i64* %RSP, align 8, !tbaa !2428
  store i64 %3188, i64* %PC, align 8, !tbaa !2428
  %3193 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3188, %struct.Memory* %3134)
  %3194 = load i64, i64* %RBP, align 8
  %3195 = add i64 %3194, -40
  %3196 = load i64, i64* %PC, align 8
  %3197 = add i64 %3196, 5
  store i64 %3197, i64* %PC, align 8
  %3198 = load <2 x float>, <2 x float>* %60, align 1
  %3199 = extractelement <2 x float> %3198, i32 0
  %3200 = inttoptr i64 %3195 to float*
  store float %3199, float* %3200, align 4
  %3201 = load i64, i64* %PC, align 8
  %3202 = add i64 %3201, 11
  store i64 %3202, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4015c4

block_400d80:                                     ; preds = %block_400e43, %block_400d39
  %3203 = phi i64 [ %.pre20, %block_400d39 ], [ %2674, %block_400e43 ]
  %MEMORY.19 = phi %struct.Memory* [ %1458, %block_400d39 ], [ %433, %block_400e43 ]
  %3204 = add i64 %3203, -1984
  %3205 = add i64 %3203, 5
  %3206 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3207 = add i64 %3206, -8
  %3208 = inttoptr i64 %3207 to i64*
  store i64 %3205, i64* %3208, align 8
  store i64 %3207, i64* %RSP, align 8, !tbaa !2428
  store i64 %3204, i64* %PC, align 8, !tbaa !2428
  %3209 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3204, %struct.Memory* %MEMORY.19)
  %3210 = load i64, i64* %RBP, align 8
  %3211 = add i64 %3210, -80
  %3212 = load i64, i64* %PC, align 8
  %3213 = add i64 %3212, 5
  store i64 %3213, i64* %PC, align 8
  %3214 = load <2 x float>, <2 x float>* %60, align 1
  %3215 = extractelement <2 x float> %3214, i32 0
  %3216 = inttoptr i64 %3211 to float*
  store float %3215, float* %3216, align 4
  %3217 = load i64, i64* %RBP, align 8
  %3218 = add i64 %3217, -64
  %3219 = load i64, i64* %PC, align 8
  %3220 = add i64 %3219, 3
  store i64 %3220, i64* %PC, align 8
  %3221 = inttoptr i64 %3218 to i32*
  %3222 = load i32, i32* %3221, align 4
  %3223 = add i32 %3222, 1
  %3224 = zext i32 %3223 to i64
  store i64 %3224, i64* %RAX, align 8, !tbaa !2428
  %3225 = icmp eq i32 %3222, -1
  %3226 = icmp eq i32 %3223, 0
  %3227 = or i1 %3225, %3226
  %3228 = zext i1 %3227 to i8
  store i8 %3228, i8* %20, align 1, !tbaa !2432
  %3229 = and i32 %3223, 255
  %3230 = tail call i32 @llvm.ctpop.i32(i32 %3229) #8
  %3231 = trunc i32 %3230 to i8
  %3232 = and i8 %3231, 1
  %3233 = xor i8 %3232, 1
  store i8 %3233, i8* %21, align 1, !tbaa !2446
  %3234 = xor i32 %3222, %3223
  %3235 = lshr i32 %3234, 4
  %3236 = trunc i32 %3235 to i8
  %3237 = and i8 %3236, 1
  store i8 %3237, i8* %22, align 1, !tbaa !2450
  %3238 = zext i1 %3226 to i8
  store i8 %3238, i8* %23, align 1, !tbaa !2447
  %3239 = lshr i32 %3223, 31
  %3240 = trunc i32 %3239 to i8
  store i8 %3240, i8* %24, align 1, !tbaa !2448
  %3241 = lshr i32 %3222, 31
  %3242 = xor i32 %3239, %3241
  %3243 = add nuw nsw i32 %3242, %3239
  %3244 = icmp eq i32 %3243, 2
  %3245 = zext i1 %3244 to i8
  store i8 %3245, i8* %25, align 1, !tbaa !2449
  %3246 = add i64 %3219, 9
  store i64 %3246, i64* %PC, align 8
  store i32 %3223, i32* %3221, align 4
  %3247 = load i64, i64* %PC, align 8
  %3248 = add i64 %3247, 11
  store i64 %3248, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400d9e
}

; Function Attrs: noinline
define %struct.Memory* @sub_402d70_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402d70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -12
  %14 = load i32, i32* %EDI, align 4
  %15 = add i64 %12, 6
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 5
  store i64 %20, i64* %PC, align 8
  %21 = bitcast %union.VectorReg* %5 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 1
  %23 = extractelement <2 x float> %22, i32 0
  %24 = inttoptr i64 %18 to float*
  store float %23, float* %24, align 4
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -16
  %27 = load i64, i64* %RSI, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -20
  %33 = load i32, i32* %EDX, align 4
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -32
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  store i32 0, i32* %41, align 4
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -28
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %53, align 1, !tbaa !2432
  %54 = and i32 %52, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #8
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %60, align 1, !tbaa !2450
  %61 = icmp eq i32 %52, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2447
  %64 = lshr i32 %52, 31
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %67, align 1, !tbaa !2449
  %68 = xor i1 %61, true
  %69 = icmp eq i8 %65, 0
  %70 = and i1 %69, %68
  %.v = select i1 %70, i64 15, i64 10
  %71 = add i64 %49, %.v
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  br i1 %70, label %block_402da0, label %block_402d9b

block_402d9b:                                     ; preds = %block_402d70
  %72 = add i64 %71, 158
  br label %block_402e39.sink.split

block_402dbb:                                     ; preds = %block_402dc7, %block_402daa
  %73 = phi i64 [ %360, %block_402dc7 ], [ %.pre, %block_402daa ]
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -24
  %76 = add i64 %73, 3
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %74, -36
  %81 = add i64 %73, 6
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = sub i32 %78, %83
  %85 = icmp ult i32 %78, %83
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %53, align 1, !tbaa !2432
  %87 = and i32 %84, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %59, align 1, !tbaa !2446
  %92 = xor i32 %83, %78
  %93 = xor i32 %92, %84
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  store i8 %96, i8* %60, align 1, !tbaa !2450
  %97 = icmp eq i32 %84, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %63, align 1, !tbaa !2447
  %99 = lshr i32 %84, 31
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %66, align 1, !tbaa !2448
  %101 = lshr i32 %78, 31
  %102 = lshr i32 %83, 31
  %103 = xor i32 %102, %101
  %104 = xor i32 %99, %101
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %67, align 1, !tbaa !2449
  %108 = icmp ne i8 %100, 0
  %109 = xor i1 %108, %106
  %.v5 = select i1 %109, i64 12, i64 57
  %110 = add i64 %73, %.v5
  store i64 %110, i64* %PC, align 8, !tbaa !2428
  br i1 %109, label %block_402dc7, label %block_402df4

block_402df9:                                     ; preds = %block_402da0
  %111 = add i64 %47, -24
  %112 = add i64 %386, 7
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i32*
  store i32 0, i32* %113, align 4
  %114 = bitcast %union.VectorReg* %5 to i8*
  %115 = bitcast %union.VectorReg* %5 to float*
  %116 = getelementptr inbounds i8, i8* %114, i64 4
  %117 = bitcast i8* %116 to float*
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %119 = bitcast i64* %118 to float*
  %120 = getelementptr inbounds i8, i8* %114, i64 12
  %121 = bitcast i8* %120 to float*
  %122 = bitcast i64* %118 to <2 x i32>*
  %123 = bitcast i8* %116 to i32*
  %124 = bitcast i64* %118 to i32*
  %125 = bitcast i8* %120 to i32*
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_402e00

block_402df4:                                     ; preds = %block_402dbb
  %126 = add i64 %110, 69
  br label %block_402e39.sink.split

block_402e0c:                                     ; preds = %block_402e00
  %127 = add i64 %247, -8
  %128 = add i64 %283, 5
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = bitcast %union.VectorReg* %5 to i32*
  store i32 %130, i32* %131, align 1, !tbaa !2452
  store float 0.000000e+00, float* %117, align 1, !tbaa !2452
  store float 0.000000e+00, float* %119, align 1, !tbaa !2452
  store float 0.000000e+00, float* %121, align 1, !tbaa !2452
  %132 = add i64 %247, -16
  %133 = add i64 %283, 9
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RAX, align 8, !tbaa !2428
  %136 = add i64 %283, 13
  store i64 %136, i64* %PC, align 8
  %137 = load i32, i32* %250, align 4
  %138 = sext i32 %137 to i64
  store i64 %138, i64* %RCX, align 8, !tbaa !2428
  %139 = shl nsw i64 %138, 2
  %140 = add i64 %139, %135
  %141 = add i64 %283, 18
  store i64 %141, i64* %PC, align 8
  %142 = load <2 x float>, <2 x float>* %21, align 1
  %143 = load <2 x i32>, <2 x i32>* %122, align 1
  %144 = inttoptr i64 %140 to float*
  %145 = load float, float* %144, align 4
  %146 = extractelement <2 x float> %142, i32 0
  %147 = fmul float %146, %145
  store float %147, float* %115, align 1, !tbaa !2452
  %148 = bitcast <2 x float> %142 to <2 x i32>
  %149 = extractelement <2 x i32> %148, i32 1
  store i32 %149, i32* %123, align 1, !tbaa !2452
  %150 = extractelement <2 x i32> %143, i32 0
  store i32 %150, i32* %124, align 1, !tbaa !2452
  %151 = extractelement <2 x i32> %143, i32 1
  store i32 %151, i32* %125, align 1, !tbaa !2452
  %152 = add i64 %283, 22
  store i64 %152, i64* %PC, align 8
  %153 = load i64, i64* %134, align 8
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = add i64 %283, 26
  store i64 %154, i64* %PC, align 8
  %155 = load i32, i32* %250, align 4
  %156 = sext i32 %155 to i64
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %157 = shl nsw i64 %156, 2
  %158 = add i64 %157, %153
  %159 = add i64 %283, 31
  store i64 %159, i64* %PC, align 8
  %160 = load <2 x float>, <2 x float>* %21, align 1
  %161 = extractelement <2 x float> %160, i32 0
  %162 = inttoptr i64 %158 to float*
  store float %161, float* %162, align 4
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -24
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, 3
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %164 to i32*
  %168 = load i32, i32* %167, align 4
  %169 = add i32 %168, 1
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RAX, align 8, !tbaa !2428
  %171 = icmp eq i32 %168, -1
  %172 = icmp eq i32 %169, 0
  %173 = or i1 %171, %172
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %53, align 1, !tbaa !2432
  %175 = and i32 %169, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #8
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %59, align 1, !tbaa !2446
  %180 = xor i32 %168, %169
  %181 = lshr i32 %180, 4
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  store i8 %183, i8* %60, align 1, !tbaa !2450
  %184 = zext i1 %172 to i8
  store i8 %184, i8* %63, align 1, !tbaa !2447
  %185 = lshr i32 %169, 31
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %66, align 1, !tbaa !2448
  %187 = lshr i32 %168, 31
  %188 = xor i32 %185, %187
  %189 = add nuw nsw i32 %188, %185
  %190 = icmp eq i32 %189, 2
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %67, align 1, !tbaa !2449
  %192 = add i64 %165, 9
  store i64 %192, i64* %PC, align 8
  store i32 %169, i32* %167, align 4
  %193 = load i64, i64* %PC, align 8
  %194 = add i64 %193, -52
  store i64 %194, i64* %PC, align 8, !tbaa !2428
  br label %block_402e00

block_402e39.sink.split:                          ; preds = %block_402d9b, %block_402df4
  %.sink = phi i64 [ %126, %block_402df4 ], [ %72, %block_402d9b ]
  store i64 %.sink, i64* %PC, align 8, !tbaa !2428
  br label %block_402e39

block_402e39:                                     ; preds = %block_402e00, %block_402e39.sink.split
  %195 = phi i64 [ %283, %block_402e00 ], [ %.sink, %block_402e39.sink.split ]
  %196 = add i64 %195, 1
  store i64 %196, i64* %PC, align 8
  %197 = load i64, i64* %8, align 8, !tbaa !2428
  %198 = add i64 %197, 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RBP, align 8, !tbaa !2428
  store i64 %198, i64* %8, align 8, !tbaa !2428
  %201 = add i64 %195, 2
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %198 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %PC, align 8, !tbaa !2428
  %204 = add i64 %197, 16
  store i64 %204, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402daa:                                     ; preds = %block_402da0
  %205 = add i64 %386, 3
  store i64 %205, i64* %PC, align 8
  %206 = load i32, i32* %51, align 4
  %207 = zext i32 %206 to i64
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %386, 7
  store i64 %208, i64* %PC, align 8
  %209 = load i32, i32* %363, align 4
  %210 = sext i32 %206 to i64
  %211 = sext i32 %209 to i64
  %212 = mul nsw i64 %211, %210
  %213 = trunc i64 %212 to i32
  %214 = and i64 %212, 4294967295
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = shl i64 %212, 32
  %216 = ashr exact i64 %215, 32
  %217 = icmp ne i64 %216, %212
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %53, align 1, !tbaa !2432
  %219 = and i32 %213, 255
  %220 = tail call i32 @llvm.ctpop.i32(i32 %219) #8
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  store i8 %223, i8* %59, align 1, !tbaa !2446
  store i8 0, i8* %60, align 1, !tbaa !2450
  store i8 0, i8* %63, align 1, !tbaa !2447
  %224 = lshr i32 %213, 31
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %66, align 1, !tbaa !2448
  store i8 %218, i8* %67, align 1, !tbaa !2449
  %226 = add i64 %47, -36
  %227 = add i64 %386, 10
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i32*
  store i32 %213, i32* %228, align 4
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -24
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %230 to i32*
  store i32 0, i32* %233, align 4
  %234 = bitcast %union.VectorReg* %5 to i8*
  %235 = bitcast %union.VectorReg* %5 to float*
  %236 = getelementptr inbounds i8, i8* %234, i64 4
  %237 = bitcast i8* %236 to float*
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %239 = bitcast i64* %238 to float*
  %240 = getelementptr inbounds i8, i8* %234, i64 12
  %241 = bitcast i8* %240 to float*
  %242 = bitcast i64* %238 to <2 x i32>*
  %243 = bitcast i8* %236 to i32*
  %244 = bitcast i64* %238 to i32*
  %245 = bitcast i8* %240 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402dbb

block_402e00:                                     ; preds = %block_402e0c, %block_402df9
  %246 = phi i64 [ %194, %block_402e0c ], [ %.pre1, %block_402df9 ]
  %247 = load i64, i64* %RBP, align 8
  %248 = add i64 %247, -24
  %249 = add i64 %246, 3
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = zext i32 %251 to i64
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  %253 = add i64 %247, -4
  %254 = add i64 %246, 6
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = sub i32 %251, %256
  %258 = icmp ult i32 %251, %256
  %259 = zext i1 %258 to i8
  store i8 %259, i8* %53, align 1, !tbaa !2432
  %260 = and i32 %257, 255
  %261 = tail call i32 @llvm.ctpop.i32(i32 %260) #8
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  store i8 %264, i8* %59, align 1, !tbaa !2446
  %265 = xor i32 %256, %251
  %266 = xor i32 %265, %257
  %267 = lshr i32 %266, 4
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  store i8 %269, i8* %60, align 1, !tbaa !2450
  %270 = icmp eq i32 %257, 0
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %63, align 1, !tbaa !2447
  %272 = lshr i32 %257, 31
  %273 = trunc i32 %272 to i8
  store i8 %273, i8* %66, align 1, !tbaa !2448
  %274 = lshr i32 %251, 31
  %275 = lshr i32 %256, 31
  %276 = xor i32 %275, %274
  %277 = xor i32 %272, %274
  %278 = add nuw nsw i32 %277, %276
  %279 = icmp eq i32 %278, 2
  %280 = zext i1 %279 to i8
  store i8 %280, i8* %67, align 1, !tbaa !2449
  %281 = icmp ne i8 %273, 0
  %282 = xor i1 %281, %279
  %.v6 = select i1 %282, i64 12, i64 57
  %283 = add i64 %246, %.v6
  store i64 %283, i64* %PC, align 8, !tbaa !2428
  br i1 %282, label %block_402e0c, label %block_402e39

block_402dc7:                                     ; preds = %block_402dbb
  %284 = add i64 %74, -8
  %285 = add i64 %110, 5
  store i64 %285, i64* %PC, align 8
  %286 = inttoptr i64 %284 to i32*
  %287 = load i32, i32* %286, align 4
  %288 = bitcast %union.VectorReg* %5 to i32*
  store i32 %287, i32* %288, align 1, !tbaa !2452
  store float 0.000000e+00, float* %237, align 1, !tbaa !2452
  store float 0.000000e+00, float* %239, align 1, !tbaa !2452
  store float 0.000000e+00, float* %241, align 1, !tbaa !2452
  %289 = add i64 %74, -16
  %290 = add i64 %110, 9
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  %293 = add i64 %110, 13
  store i64 %293, i64* %PC, align 8
  %294 = load i32, i32* %77, align 4
  %295 = sext i32 %294 to i64
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = shl nsw i64 %295, 2
  %297 = add i64 %296, %292
  %298 = add i64 %110, 18
  store i64 %298, i64* %PC, align 8
  %299 = load <2 x float>, <2 x float>* %21, align 1
  %300 = load <2 x i32>, <2 x i32>* %242, align 1
  %301 = inttoptr i64 %297 to float*
  %302 = load float, float* %301, align 4
  %303 = extractelement <2 x float> %299, i32 0
  %304 = fmul float %303, %302
  store float %304, float* %235, align 1, !tbaa !2452
  %305 = bitcast <2 x float> %299 to <2 x i32>
  %306 = extractelement <2 x i32> %305, i32 1
  store i32 %306, i32* %243, align 1, !tbaa !2452
  %307 = extractelement <2 x i32> %300, i32 0
  store i32 %307, i32* %244, align 1, !tbaa !2452
  %308 = extractelement <2 x i32> %300, i32 1
  store i32 %308, i32* %245, align 1, !tbaa !2452
  %309 = add i64 %110, 22
  store i64 %309, i64* %PC, align 8
  %310 = load i64, i64* %291, align 8
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = add i64 %110, 26
  store i64 %311, i64* %PC, align 8
  %312 = load i32, i32* %77, align 4
  %313 = sext i32 %312 to i64
  store i64 %313, i64* %RCX, align 8, !tbaa !2428
  %314 = shl nsw i64 %313, 2
  %315 = add i64 %314, %310
  %316 = add i64 %110, 31
  store i64 %316, i64* %PC, align 8
  %317 = load <2 x float>, <2 x float>* %21, align 1
  %318 = extractelement <2 x float> %317, i32 0
  %319 = inttoptr i64 %315 to float*
  store float %318, float* %319, align 4
  %320 = load i64, i64* %RBP, align 8
  %321 = add i64 %320, -24
  %322 = load i64, i64* %PC, align 8
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %321 to i32*
  %325 = load i32, i32* %324, align 4
  %326 = zext i32 %325 to i64
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = add i64 %320, -20
  %328 = add i64 %322, 6
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = add i32 %330, %325
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = icmp ult i32 %331, %325
  %334 = icmp ult i32 %331, %330
  %335 = or i1 %333, %334
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %53, align 1, !tbaa !2432
  %337 = and i32 %331, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #8
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %59, align 1, !tbaa !2446
  %342 = xor i32 %330, %325
  %343 = xor i32 %342, %331
  %344 = lshr i32 %343, 4
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  store i8 %346, i8* %60, align 1, !tbaa !2450
  %347 = icmp eq i32 %331, 0
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %63, align 1, !tbaa !2447
  %349 = lshr i32 %331, 31
  %350 = trunc i32 %349 to i8
  store i8 %350, i8* %66, align 1, !tbaa !2448
  %351 = lshr i32 %325, 31
  %352 = lshr i32 %330, 31
  %353 = xor i32 %349, %351
  %354 = xor i32 %349, %352
  %355 = add nuw nsw i32 %353, %354
  %356 = icmp eq i32 %355, 2
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %67, align 1, !tbaa !2449
  %358 = add i64 %322, 9
  store i64 %358, i64* %PC, align 8
  store i32 %331, i32* %324, align 4
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, -52
  store i64 %360, i64* %PC, align 8, !tbaa !2428
  br label %block_402dbb

block_402da0:                                     ; preds = %block_402d70
  %361 = add i64 %47, -20
  %362 = add i64 %71, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i32*
  %364 = load i32, i32* %363, align 4
  %365 = add i32 %364, -1
  %366 = icmp eq i32 %364, 0
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %53, align 1, !tbaa !2432
  %368 = and i32 %365, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #8
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %59, align 1, !tbaa !2446
  %373 = xor i32 %364, %365
  %374 = lshr i32 %373, 4
  %375 = trunc i32 %374 to i8
  %376 = and i8 %375, 1
  store i8 %376, i8* %60, align 1, !tbaa !2450
  %377 = icmp eq i32 %365, 0
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %63, align 1, !tbaa !2447
  %379 = lshr i32 %365, 31
  %380 = trunc i32 %379 to i8
  store i8 %380, i8* %66, align 1, !tbaa !2448
  %381 = lshr i32 %364, 31
  %382 = xor i32 %379, %381
  %383 = add nuw nsw i32 %382, %381
  %384 = icmp eq i32 %383, 2
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %67, align 1, !tbaa !2449
  %.v4 = select i1 %377, i64 89, i64 10
  %386 = add i64 %71, %.v4
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  br i1 %377, label %block_402df9, label %block_402daa
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028d0_print_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4028d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -12
  %12 = load i32, i32* %EDI, align 4
  %13 = add i64 %10, 6
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i32*
  store i32 %12, i32* %14, align 4
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %6, align 8, !tbaa !2428
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %18, i64* %6, align 8, !tbaa !2428
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %17, 16
  store i64 %24, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400510:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i8), i8* %10, align 1, !tbaa !2432
  %11 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i32), i32 255)) #8
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !2446
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (i64* @stderr to i64), i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64))), i64 4) to i8), i8 1), i8* %16, align 1, !tbaa !2450
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0) to i8), i8* %17, align 1, !tbaa !2447
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63) to i8), i8* %18, align 1, !tbaa !2448
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %19, align 1, !tbaa !2449
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %20 = add i64 %9, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16)
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), label %block_400538, label %block_400521

block_400538:                                     ; preds = %block_400521, %block_400510
  %21 = phi i64 [ %28, %block_400521 ], [ %20, %block_400510 ]
  %22 = add i64 %21, 1
  store i64 %22, i64* %PC, align 8
  %23 = load i64, i64* %8, align 8
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %24 = add i64 %21, 2
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %6 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %PC, align 8, !tbaa !2428
  %27 = add i64 %6, 8
  store i64 %27, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400521:                                     ; preds = %block_400510
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %10, align 1, !tbaa !2432
  store i8 1, i8* %15, align 1, !tbaa !2446
  store i8 1, i8* %17, align 1, !tbaa !2447
  store i8 0, i8* %18, align 1, !tbaa !2448
  store i8 0, i8* %19, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %28 = add i64 %9, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %28, i64* %PC, align 8, !tbaa !2428
  br label %block_400538
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402eb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402eb4:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = icmp ult i64 %3, 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = lshr i64 %4, 63
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12 = lshr i64 %3, 63
  %13 = xor i64 %10, %12
  %14 = add nuw nsw i64 %13, %12
  %15 = icmp eq i64 %14, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = zext i1 %5 to i8
  store i8 %18, i8* %6, align 1, !tbaa !2432
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #8
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %7, align 1, !tbaa !2446
  %25 = xor i64 %4, %3
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %8, align 1, !tbaa !2450
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %9, align 1, !tbaa !2447
  %31 = trunc i64 %12 to i8
  store i8 %31, i8* %11, align 1, !tbaa !2448
  store i8 %16, i8* %17, align 1, !tbaa !2449
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400500__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400500:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e40___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2456
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #8
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2456
  store i8 0, i8* %45, align 1, !tbaa !2456
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2456
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2456
  store i8 0, i8* %48, align 1, !tbaa !2456
  %63 = add i64 %38, -10723
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400478__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #8
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2447
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2448
  store i8 0, i8* %48, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2450
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_402e96, label %block_402e76

block_402e96:                                     ; preds = %block_402e80, %block_402e40
  %81 = phi i64 [ %80, %block_402e40 ], [ %179, %block_402e80 ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_402e40 ], [ %149, %block_402e80 ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %82, %83
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2450
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2447
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2448
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2449
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402e76:                                     ; preds = %block_402e40
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2447
  store i8 0, i8* %47, align 1, !tbaa !2448
  store i8 0, i8* %48, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2450
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_402e80

block_402e80:                                     ; preds = %block_402e80, %block_402e76
  %134 = phi i64 [ 0, %block_402e76 ], [ %152, %block_402e80 ]
  %135 = phi i64 [ %133, %block_402e76 ], [ %179, %block_402e80 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_402e76 ], [ %149, %block_402e80 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #8
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2450
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2447
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2448
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2449
  %.v1 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v1
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_402e96, label %block_402e80
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c90_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401c90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %11 = load i64, i64* %RBP, align 8
  %12 = add i64 %1, 1
  store i64 %12, i64* %PC, align 8
  %13 = load i64, i64* %RSP, align 8, !tbaa !2428
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %11, i64* %15, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %14, i64* %RBP, align 8, !tbaa !2428
  %17 = add i64 %13, -104
  store i64 %17, i64* %RSP, align 8, !tbaa !2428
  %18 = icmp ult i64 %14, 96
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !2432
  %21 = trunc i64 %17 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #8
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !2446
  %28 = xor i64 %14, %17
  %29 = lshr i64 %28, 4
  %30 = trunc i64 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = icmp eq i64 %17, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1, !tbaa !2447
  %36 = lshr i64 %17, 63
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !2448
  %39 = lshr i64 %14, 63
  %40 = xor i64 %36, %39
  %41 = add nuw nsw i64 %40, %39
  %42 = icmp eq i64 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = add i64 %13, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = add i64 %16, 11
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -12
  %51 = load i32, i32* %ESI, align 4
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %54, align 4
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i32, i32* %EDX, align 4
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i32*
  store i32 %57, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -24
  %63 = load i64, i64* %RCX, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -32
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -36
  %75 = load i32, i32* %R9D, align 4
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %74 to i32*
  store i32 %75, i32* %78, align 4
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %84, -1
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = icmp eq i32 %84, 0
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %20, align 1, !tbaa !2432
  %89 = and i32 %85, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #8
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %27, align 1, !tbaa !2446
  %94 = xor i32 %84, %85
  %95 = lshr i32 %94, 4
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %32, align 1, !tbaa !2450
  %98 = icmp eq i32 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %35, align 1, !tbaa !2447
  %100 = lshr i32 %85, 31
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %38, align 1, !tbaa !2448
  %102 = lshr i32 %84, 31
  %103 = xor i32 %100, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %44, align 1, !tbaa !2449
  %107 = add i64 %79, -56
  %108 = add i64 %81, 9
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  store i32 %85, i32* %109, align 4
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -36
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i32*
  %115 = load i32, i32* %114, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %116 = and i32 %115, 255
  %117 = tail call i32 @llvm.ctpop.i32(i32 %116) #8
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  store i8 %120, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  %121 = icmp eq i32 %115, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %35, align 1, !tbaa !2447
  %123 = lshr i32 %115, 31
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %38, align 1, !tbaa !2448
  store i8 0, i8* %44, align 1, !tbaa !2449
  %.v = select i1 %121, i64 10, i64 417
  %125 = add i64 %112, %.v
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  br i1 %121, label %block_401cc1, label %block_401e58

block_401ef6:                                     ; preds = %block_401eec
  %126 = add i64 %365, -48
  %127 = add i64 %1214, 7
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i32*
  store i32 1, i32* %128, align 4
  %129 = bitcast %union.VectorReg* %10 to i8*
  %130 = bitcast %union.VectorReg* %10 to float*
  %131 = getelementptr inbounds i8, i8* %129, i64 4
  %132 = bitcast i8* %131 to float*
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %134 = bitcast i64* %133 to float*
  %135 = getelementptr inbounds i8, i8* %129, i64 12
  %136 = bitcast i8* %135 to float*
  %137 = bitcast %union.VectorReg* %10 to <2 x float>*
  %138 = bitcast i64* %133 to <2 x i32>*
  %139 = bitcast i8* %131 to i32*
  %140 = bitcast i64* %133 to i32*
  %141 = bitcast i8* %135 to i32*
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_401efd

block_401e6b:                                     ; preds = %block_401e5f
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %142 = add i64 %401, 8
  store i64 %142, i64* %PC, align 8
  %143 = load i32, i32* %368, align 4
  %144 = zext i32 %143 to i64
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %145 = add i64 %365, -8
  %146 = add i64 %401, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %149 = add i64 %365, -12
  %150 = add i64 %401, 15
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %149 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %RDX, align 8, !tbaa !2428
  %154 = add i64 %401, 19
  store i64 %154, i64* %PC, align 8
  %155 = load i32, i32* %368, align 4
  %156 = sext i32 %152 to i64
  %157 = sext i32 %155 to i64
  %158 = mul nsw i64 %157, %156
  %159 = and i64 %158, 4294967295
  store i64 %159, i64* %RDX, align 8, !tbaa !2428
  %160 = shl i64 %158, 32
  %161 = ashr exact i64 %160, 30
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = lshr i64 %161, 63
  %163 = add i64 %161, %148
  store i64 %163, i64* %RCX, align 8, !tbaa !2428
  %164 = icmp ult i64 %163, %148
  %165 = icmp ult i64 %163, %161
  %166 = or i1 %164, %165
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %20, align 1, !tbaa !2432
  %168 = trunc i64 %163 to i32
  %169 = and i32 %168, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #8
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %27, align 1, !tbaa !2446
  %174 = xor i64 %161, %148
  %175 = xor i64 %174, %163
  %176 = lshr i64 %175, 4
  %177 = trunc i64 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %32, align 1, !tbaa !2450
  %179 = icmp eq i64 %163, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %35, align 1, !tbaa !2447
  %181 = lshr i64 %163, 63
  %182 = trunc i64 %181 to i8
  store i8 %182, i8* %38, align 1, !tbaa !2448
  %183 = lshr i64 %148, 63
  %184 = xor i64 %181, %183
  %185 = xor i64 %181, %162
  %186 = add nuw nsw i64 %184, %185
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %44, align 1, !tbaa !2449
  %189 = add i64 %365, -32
  %190 = add i64 %401, 36
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = add i64 %365, -72
  %194 = add i64 %401, 40
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %193 to i64*
  store i64 %192, i64* %195, align 8
  %196 = load i64, i64* %RCX, align 8
  %197 = load i64, i64* %PC, align 8
  store i64 %196, i64* %RSI, align 8, !tbaa !2428
  %198 = load i32, i32* %EAX, align 4
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %RDX, align 8, !tbaa !2428
  %200 = load i64, i64* %RBP, align 8
  %201 = add i64 %200, -72
  %202 = add i64 %197, 9
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %RCX, align 8, !tbaa !2428
  store i64 %199, i64* %R8, align 8, !tbaa !2428
  %205 = add i64 %197, 3005
  %206 = add i64 %197, 17
  %207 = load i64, i64* %RSP, align 8, !tbaa !2428
  %208 = add i64 %207, -8
  %209 = inttoptr i64 %208 to i64*
  store i64 %206, i64* %209, align 8
  store i64 %208, i64* %RSP, align 8, !tbaa !2428
  store i64 %205, i64* %PC, align 8, !tbaa !2428
  %210 = tail call %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* nonnull %0, i64 %205, %struct.Memory* %MEMORY.0)
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -40
  %213 = load i64, i64* %PC, align 8
  %214 = add i64 %213, 5
  store i64 %214, i64* %PC, align 8
  %215 = load <2 x float>, <2 x float>* %557, align 1
  %216 = extractelement <2 x float> %215, i32 0
  %217 = inttoptr i64 %212 to float*
  store float %216, float* %217, align 4
  %218 = load i64, i64* %RBP, align 8
  %219 = add i64 %218, -32
  %220 = load i64, i64* %PC, align 8
  %221 = add i64 %220, 4
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %219 to i64*
  %223 = load i64, i64* %222, align 8
  store i64 %223, i64* %RCX, align 8, !tbaa !2428
  %224 = add i64 %218, -44
  %225 = add i64 %220, 8
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %224 to i32*
  %227 = load i32, i32* %226, align 4
  %228 = sext i32 %227 to i64
  store i64 %228, i64* %RSI, align 8, !tbaa !2428
  %229 = shl nsw i64 %228, 2
  %230 = add i64 %229, %223
  %231 = add i64 %220, 13
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i32*
  %233 = load i32, i32* %232, align 4
  %234 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %233, i32* %234, align 1, !tbaa !2452
  store float 0.000000e+00, float* %561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %563, align 1, !tbaa !2452
  store float 0.000000e+00, float* %565, align 1, !tbaa !2452
  %235 = add i64 %218, -40
  %236 = add i64 %220, 18
  store i64 %236, i64* %PC, align 8
  %237 = load <2 x float>, <2 x float>* %557, align 1
  %238 = load <2 x i32>, <2 x i32>* %566, align 1
  %239 = inttoptr i64 %235 to float*
  %240 = load float, float* %239, align 4
  %241 = extractelement <2 x float> %237, i32 0
  %242 = fsub float %241, %240
  store float %242, float* %559, align 1, !tbaa !2452
  %243 = bitcast <2 x float> %237 to <2 x i32>
  %244 = extractelement <2 x i32> %243, i32 1
  store i32 %244, i32* %567, align 1, !tbaa !2452
  %245 = extractelement <2 x i32> %238, i32 0
  store i32 %245, i32* %568, align 1, !tbaa !2452
  %246 = extractelement <2 x i32> %238, i32 1
  store i32 %246, i32* %569, align 1, !tbaa !2452
  %247 = add i64 %218, -8
  %248 = add i64 %220, 22
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RCX, align 8, !tbaa !2428
  %251 = add i64 %218, -12
  %252 = add i64 %220, 25
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = zext i32 %254 to i64
  store i64 %255, i64* %RAX, align 8, !tbaa !2428
  %256 = add i64 %220, 29
  store i64 %256, i64* %PC, align 8
  %257 = load i32, i32* %226, align 4
  %258 = sext i32 %254 to i64
  %259 = sext i32 %257 to i64
  %260 = mul nsw i64 %259, %258
  %261 = trunc i64 %260 to i32
  %262 = and i64 %260, 4294967295
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = shl i64 %260, 32
  %264 = ashr exact i64 %263, 32
  %265 = icmp ne i64 %264, %260
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %20, align 1, !tbaa !2432
  %267 = and i32 %261, 255
  %268 = tail call i32 @llvm.ctpop.i32(i32 %267) #8
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  store i8 %271, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %272 = lshr i32 %261, 31
  %273 = trunc i32 %272 to i8
  store i8 %273, i8* %38, align 1, !tbaa !2448
  store i8 %266, i8* %44, align 1, !tbaa !2449
  %274 = add i64 %220, 32
  store i64 %274, i64* %PC, align 8
  %275 = load i32, i32* %226, align 4
  %276 = add i32 %275, %261
  %277 = zext i32 %276 to i64
  store i64 %277, i64* %RAX, align 8, !tbaa !2428
  %278 = icmp ult i32 %276, %261
  %279 = icmp ult i32 %276, %275
  %280 = or i1 %278, %279
  %281 = zext i1 %280 to i8
  store i8 %281, i8* %20, align 1, !tbaa !2432
  %282 = and i32 %276, 255
  %283 = tail call i32 @llvm.ctpop.i32(i32 %282) #8
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  store i8 %286, i8* %27, align 1, !tbaa !2446
  %287 = xor i32 %275, %261
  %288 = xor i32 %287, %276
  %289 = lshr i32 %288, 4
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  store i8 %291, i8* %32, align 1, !tbaa !2450
  %292 = icmp eq i32 %276, 0
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %35, align 1, !tbaa !2447
  %294 = lshr i32 %276, 31
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %38, align 1, !tbaa !2448
  %296 = lshr i32 %275, 31
  %297 = xor i32 %294, %272
  %298 = xor i32 %294, %296
  %299 = add nuw nsw i32 %297, %298
  %300 = icmp eq i32 %299, 2
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %44, align 1, !tbaa !2449
  %302 = sext i32 %276 to i64
  store i64 %302, i64* %RSI, align 8, !tbaa !2428
  %303 = shl nsw i64 %302, 2
  %304 = add i64 %303, %250
  %305 = add i64 %220, 40
  store i64 %305, i64* %PC, align 8
  %306 = load <2 x float>, <2 x float>* %557, align 1
  %307 = load <2 x i32>, <2 x i32>* %566, align 1
  %308 = inttoptr i64 %304 to float*
  %309 = load float, float* %308, align 4
  %310 = extractelement <2 x float> %306, i32 0
  %311 = fdiv float %310, %309
  store float %311, float* %559, align 1, !tbaa !2452
  %312 = bitcast <2 x float> %306 to <2 x i32>
  %313 = extractelement <2 x i32> %312, i32 1
  store i32 %313, i32* %567, align 1, !tbaa !2452
  %314 = extractelement <2 x i32> %307, i32 0
  store i32 %314, i32* %568, align 1, !tbaa !2452
  %315 = extractelement <2 x i32> %307, i32 1
  store i32 %315, i32* %569, align 1, !tbaa !2452
  %316 = load i64, i64* %RBP, align 8
  %317 = add i64 %316, -32
  %318 = add i64 %220, 44
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RCX, align 8, !tbaa !2428
  %321 = add i64 %316, -44
  %322 = add i64 %220, 48
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %321 to i32*
  %324 = load i32, i32* %323, align 4
  %325 = sext i32 %324 to i64
  store i64 %325, i64* %RSI, align 8, !tbaa !2428
  %326 = shl nsw i64 %325, 2
  %327 = add i64 %326, %320
  %328 = add i64 %220, 53
  store i64 %328, i64* %PC, align 8
  %329 = load <2 x float>, <2 x float>* %557, align 1
  %330 = extractelement <2 x float> %329, i32 0
  %331 = inttoptr i64 %327 to float*
  store float %330, float* %331, align 4
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -44
  %334 = load i64, i64* %PC, align 8
  %335 = add i64 %334, 3
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %333 to i32*
  %337 = load i32, i32* %336, align 4
  %338 = add i32 %337, 1
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = icmp eq i32 %337, -1
  %341 = icmp eq i32 %338, 0
  %342 = or i1 %340, %341
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %20, align 1, !tbaa !2432
  %344 = and i32 %338, 255
  %345 = tail call i32 @llvm.ctpop.i32(i32 %344) #8
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  store i8 %348, i8* %27, align 1, !tbaa !2446
  %349 = xor i32 %337, %338
  %350 = lshr i32 %349, 4
  %351 = trunc i32 %350 to i8
  %352 = and i8 %351, 1
  store i8 %352, i8* %32, align 1, !tbaa !2450
  %353 = zext i1 %341 to i8
  store i8 %353, i8* %35, align 1, !tbaa !2447
  %354 = lshr i32 %338, 31
  %355 = trunc i32 %354 to i8
  store i8 %355, i8* %38, align 1, !tbaa !2448
  %356 = lshr i32 %337, 31
  %357 = xor i32 %354, %356
  %358 = add nuw nsw i32 %357, %354
  %359 = icmp eq i32 %358, 2
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %44, align 1, !tbaa !2449
  %361 = add i64 %334, 9
  store i64 %361, i64* %PC, align 8
  store i32 %338, i32* %336, align 4
  %362 = load i64, i64* %PC, align 8
  %363 = add i64 %362, -136
  store i64 %363, i64* %PC, align 8, !tbaa !2428
  br label %block_401e5f

block_401e5f:                                     ; preds = %block_401e58, %block_401e6b
  %364 = phi i64 [ %.pre5, %block_401e58 ], [ %363, %block_401e6b ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e58 ], [ %210, %block_401e6b ]
  %365 = load i64, i64* %RBP, align 8
  %366 = add i64 %365, -44
  %367 = add i64 %364, 3
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = zext i32 %369 to i64
  store i64 %370, i64* %RAX, align 8, !tbaa !2428
  %371 = add i64 %365, -16
  %372 = add i64 %364, 6
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = sub i32 %369, %374
  %376 = icmp ult i32 %369, %374
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %20, align 1, !tbaa !2432
  %378 = and i32 %375, 255
  %379 = tail call i32 @llvm.ctpop.i32(i32 %378) #8
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  store i8 %382, i8* %27, align 1, !tbaa !2446
  %383 = xor i32 %374, %369
  %384 = xor i32 %383, %375
  %385 = lshr i32 %384, 4
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %32, align 1, !tbaa !2450
  %388 = icmp eq i32 %375, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %35, align 1, !tbaa !2447
  %390 = lshr i32 %375, 31
  %391 = trunc i32 %390 to i8
  store i8 %391, i8* %38, align 1, !tbaa !2448
  %392 = lshr i32 %369, 31
  %393 = lshr i32 %374, 31
  %394 = xor i32 %393, %392
  %395 = xor i32 %390, %392
  %396 = add nuw nsw i32 %395, %394
  %397 = icmp eq i32 %396, 2
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %44, align 1, !tbaa !2449
  %399 = icmp ne i8 %391, 0
  %400 = xor i1 %399, %397
  %.v35 = select i1 %400, i64 12, i64 141
  %401 = add i64 %364, %.v35
  store i64 %401, i64* %PC, align 8, !tbaa !2428
  br i1 %400, label %block_401e6b, label %block_401eec

block_401e53:                                     ; preds = %block_401da8
  %402 = add i64 %1141, 436
  br label %block_402007

block_401cd2:                                     ; preds = %block_401d36, %block_401ccb
  %403 = phi i64 [ %.pre, %block_401ccb ], [ %764, %block_401d36 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401ccb ], [ %732, %block_401d36 ]
  %404 = load i64, i64* %RBP, align 8
  %405 = add i64 %404, -44
  %406 = add i64 %403, 3
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %405 to i32*
  %408 = load i32, i32* %407, align 4
  %409 = zext i32 %408 to i64
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = add i64 %404, -56
  %411 = add i64 %403, 6
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %410 to i32*
  %413 = load i32, i32* %412, align 4
  %414 = sub i32 %408, %413
  %415 = icmp ult i32 %408, %413
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %20, align 1, !tbaa !2432
  %417 = and i32 %414, 255
  %418 = tail call i32 @llvm.ctpop.i32(i32 %417) #8
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  %421 = xor i8 %420, 1
  store i8 %421, i8* %27, align 1, !tbaa !2446
  %422 = xor i32 %413, %408
  %423 = xor i32 %422, %414
  %424 = lshr i32 %423, 4
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  store i8 %426, i8* %32, align 1, !tbaa !2450
  %427 = icmp eq i32 %414, 0
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %35, align 1, !tbaa !2447
  %429 = lshr i32 %414, 31
  %430 = trunc i32 %429 to i8
  store i8 %430, i8* %38, align 1, !tbaa !2448
  %431 = lshr i32 %408, 31
  %432 = lshr i32 %413, 31
  %433 = xor i32 %432, %431
  %434 = xor i32 %429, %431
  %435 = add nuw nsw i32 %434, %433
  %436 = icmp eq i32 %435, 2
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %44, align 1, !tbaa !2449
  %438 = icmp ne i8 %430, 0
  %439 = xor i1 %438, %436
  %.v32 = select i1 %439, i64 12, i64 202
  %440 = add i64 %403, %.v32
  store i64 %440, i64* %PC, align 8, !tbaa !2428
  br i1 %439, label %block_401cde, label %block_401d9c

block_401ccb:                                     ; preds = %block_401cc1
  %441 = add i64 %110, -44
  %442 = add i64 %553, 7
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i32*
  store i32 0, i32* %443, align 4
  %444 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %445 = getelementptr inbounds i8, i8* %444, i64 4
  %446 = bitcast i8* %445 to float*
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %448 = bitcast i64* %447 to float*
  %449 = getelementptr inbounds i8, i8* %444, i64 12
  %450 = bitcast i8* %449 to float*
  %451 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401cd2

block_401cde:                                     ; preds = %block_401cd2
  %452 = add i64 %404, -24
  %453 = add i64 %440, 4
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %452 to i64*
  %455 = load i64, i64* %454, align 8
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %456 = add i64 %440, 8
  store i64 %456, i64* %PC, align 8
  %457 = load i32, i32* %407, align 4
  %458 = sext i32 %457 to i64
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = shl nsw i64 %458, 2
  %460 = add i64 %459, %455
  %461 = add i64 %440, 11
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %460 to i32*
  %463 = load i32, i32* %462, align 4
  %464 = zext i32 %463 to i64
  store i64 %464, i64* %RDX, align 8, !tbaa !2428
  %465 = add i64 %404, -52
  %466 = add i64 %440, 14
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %465 to i32*
  store i32 %463, i32* %467, align 4
  %468 = load i64, i64* %RBP, align 8
  %469 = add i64 %468, -32
  %470 = load i64, i64* %PC, align 8
  %471 = add i64 %470, 4
  store i64 %471, i64* %PC, align 8
  %472 = inttoptr i64 %469 to i64*
  %473 = load i64, i64* %472, align 8
  store i64 %473, i64* %RAX, align 8, !tbaa !2428
  %474 = add i64 %468, -52
  %475 = add i64 %470, 8
  store i64 %475, i64* %PC, align 8
  %476 = inttoptr i64 %474 to i32*
  %477 = load i32, i32* %476, align 4
  %478 = sext i32 %477 to i64
  store i64 %478, i64* %RCX, align 8, !tbaa !2428
  %479 = shl nsw i64 %478, 2
  %480 = add i64 %479, %473
  %481 = add i64 %470, 13
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i32*
  %483 = load i32, i32* %482, align 4
  %484 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %483, i32* %484, align 1, !tbaa !2452
  store float 0.000000e+00, float* %446, align 1, !tbaa !2452
  store float 0.000000e+00, float* %448, align 1, !tbaa !2452
  store float 0.000000e+00, float* %450, align 1, !tbaa !2452
  %485 = add i64 %468, -40
  %486 = add i64 %470, 18
  store i64 %486, i64* %PC, align 8
  %487 = load <2 x float>, <2 x float>* %451, align 1
  %488 = extractelement <2 x float> %487, i32 0
  %489 = inttoptr i64 %485 to float*
  store float %488, float* %489, align 4
  %490 = load i64, i64* %RBP, align 8
  %491 = add i64 %490, -52
  %492 = load i64, i64* %PC, align 8
  %493 = add i64 %492, 3
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %491 to i32*
  %495 = load i32, i32* %494, align 4
  %496 = zext i32 %495 to i64
  store i64 %496, i64* %RDX, align 8, !tbaa !2428
  %497 = add i64 %490, -44
  %498 = add i64 %492, 6
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = sub i32 %495, %500
  %502 = icmp ult i32 %495, %500
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %20, align 1, !tbaa !2432
  %504 = and i32 %501, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #8
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %27, align 1, !tbaa !2446
  %509 = xor i32 %500, %495
  %510 = xor i32 %509, %501
  %511 = lshr i32 %510, 4
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  store i8 %513, i8* %32, align 1, !tbaa !2450
  %514 = icmp eq i32 %501, 0
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %35, align 1, !tbaa !2447
  %516 = lshr i32 %501, 31
  %517 = trunc i32 %516 to i8
  store i8 %517, i8* %38, align 1, !tbaa !2448
  %518 = lshr i32 %495, 31
  %519 = lshr i32 %500, 31
  %520 = xor i32 %519, %518
  %521 = xor i32 %516, %518
  %522 = add nuw nsw i32 %521, %520
  %523 = icmp eq i32 %522, 2
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %44, align 1, !tbaa !2449
  %.v33 = select i1 %514, i64 56, i64 12
  %525 = add i64 %492, %.v33
  store i64 %525, i64* %PC, align 8, !tbaa !2428
  br i1 %514, label %block_401d36, label %block_401d0a

block_401cc1:                                     ; preds = %block_401c90
  %526 = add i64 %110, -56
  %527 = add i64 %125, 4
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %526 to i32*
  %529 = load i32, i32* %528, align 4
  %530 = add i32 %529, -1
  %531 = icmp eq i32 %529, 0
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %20, align 1, !tbaa !2432
  %533 = and i32 %530, 255
  %534 = tail call i32 @llvm.ctpop.i32(i32 %533) #8
  %535 = trunc i32 %534 to i8
  %536 = and i8 %535, 1
  %537 = xor i8 %536, 1
  store i8 %537, i8* %27, align 1, !tbaa !2446
  %538 = xor i32 %529, %530
  %539 = lshr i32 %538, 4
  %540 = trunc i32 %539 to i8
  %541 = and i8 %540, 1
  store i8 %541, i8* %32, align 1, !tbaa !2450
  %542 = icmp eq i32 %530, 0
  %543 = zext i1 %542 to i8
  store i8 %543, i8* %35, align 1, !tbaa !2447
  %544 = lshr i32 %530, 31
  %545 = trunc i32 %544 to i8
  store i8 %545, i8* %38, align 1, !tbaa !2448
  %546 = lshr i32 %529, 31
  %547 = xor i32 %544, %546
  %548 = add nuw nsw i32 %547, %546
  %549 = icmp eq i32 %548, 2
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %44, align 1, !tbaa !2449
  %551 = icmp ne i8 %545, 0
  %552 = xor i1 %551, %549
  %.v31 = select i1 %552, i64 224, i64 10
  %553 = add i64 %125, %.v31
  store i64 %553, i64* %PC, align 8, !tbaa !2428
  br i1 %552, label %block_401cc1.block_401da1_crit_edge, label %block_401ccb

block_401cc1.block_401da1_crit_edge:              ; preds = %block_401cc1
  %.pre9 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %.pre12 = getelementptr inbounds i8, i8* %.pre9, i64 4
  %.pre14 = bitcast i8* %.pre12 to float*
  %.pre16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre18 = bitcast i64* %.pre16 to float*
  %.pre20 = getelementptr inbounds i8, i8* %.pre9, i64 12
  %.pre22 = bitcast i8* %.pre20 to float*
  %.pre26 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  br label %block_401da1

block_401e58:                                     ; preds = %block_401c90
  %554 = add i64 %110, -44
  %555 = add i64 %125, 7
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %554 to i32*
  store i32 0, i32* %556, align 4
  %557 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  %558 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %559 = bitcast [32 x %union.VectorReg]* %9 to float*
  %560 = getelementptr inbounds i8, i8* %558, i64 4
  %561 = bitcast i8* %560 to float*
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %563 = bitcast i64* %562 to float*
  %564 = getelementptr inbounds i8, i8* %558, i64 12
  %565 = bitcast i8* %564 to float*
  %566 = bitcast i64* %562 to <2 x i32>*
  %567 = bitcast i8* %560 to i32*
  %568 = bitcast i64* %562 to i32*
  %569 = bitcast i8* %564 to i32*
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401e5f

block_401d36:                                     ; preds = %block_401d0a, %block_401cde
  %570 = phi i64 [ %.pre3, %block_401d0a ], [ %490, %block_401cde ]
  %571 = phi i64 [ %.pre2, %block_401d0a ], [ %525, %block_401cde ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %572 = add i64 %570, -16
  %573 = add i64 %571, 8
  store i64 %573, i64* %PC, align 8
  %574 = inttoptr i64 %572 to i32*
  %575 = load i32, i32* %574, align 4
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %RCX, align 8, !tbaa !2428
  %577 = add i64 %570, -44
  %578 = add i64 %571, 11
  store i64 %578, i64* %PC, align 8
  %579 = inttoptr i64 %577 to i32*
  %580 = load i32, i32* %579, align 4
  %581 = add i32 %580, 1
  %582 = zext i32 %581 to i64
  store i64 %582, i64* %RDX, align 8, !tbaa !2428
  %583 = lshr i32 %581, 31
  %584 = sub i32 %575, %581
  %585 = zext i32 %584 to i64
  store i64 %585, i64* %RCX, align 8, !tbaa !2428
  %586 = icmp ult i32 %575, %581
  %587 = zext i1 %586 to i8
  store i8 %587, i8* %20, align 1, !tbaa !2432
  %588 = and i32 %584, 255
  %589 = tail call i32 @llvm.ctpop.i32(i32 %588) #8
  %590 = trunc i32 %589 to i8
  %591 = and i8 %590, 1
  %592 = xor i8 %591, 1
  store i8 %592, i8* %27, align 1, !tbaa !2446
  %593 = xor i32 %581, %575
  %594 = xor i32 %593, %584
  %595 = lshr i32 %594, 4
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  store i8 %597, i8* %32, align 1, !tbaa !2450
  %598 = icmp eq i32 %584, 0
  %599 = zext i1 %598 to i8
  store i8 %599, i8* %35, align 1, !tbaa !2447
  %600 = lshr i32 %584, 31
  %601 = trunc i32 %600 to i8
  store i8 %601, i8* %38, align 1, !tbaa !2448
  %602 = lshr i32 %575, 31
  %603 = xor i32 %583, %602
  %604 = xor i32 %600, %602
  %605 = add nuw nsw i32 %604, %603
  %606 = icmp eq i32 %605, 2
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %44, align 1, !tbaa !2449
  %608 = add i64 %570, -40
  %609 = add i64 %571, 21
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %608 to i32*
  %611 = load i32, i32* %610, align 4
  store i32 %611, i32* %484, align 1, !tbaa !2452
  store float 0.000000e+00, float* %446, align 1, !tbaa !2452
  store float 0.000000e+00, float* %448, align 1, !tbaa !2452
  store float 0.000000e+00, float* %450, align 1, !tbaa !2452
  %612 = add i64 %570, -8
  %613 = add i64 %571, 25
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i64*
  %615 = load i64, i64* %614, align 8
  store i64 %615, i64* %RSI, align 8, !tbaa !2428
  %616 = add i64 %570, -12
  %617 = add i64 %571, 28
  store i64 %617, i64* %PC, align 8
  %618 = inttoptr i64 %616 to i32*
  %619 = load i32, i32* %618, align 4
  %620 = zext i32 %619 to i64
  store i64 %620, i64* %RDX, align 8, !tbaa !2428
  %621 = add i64 %571, 32
  store i64 %621, i64* %PC, align 8
  %622 = load i32, i32* %579, align 4
  %623 = sext i32 %619 to i64
  %624 = sext i32 %622 to i64
  %625 = mul nsw i64 %624, %623
  %626 = trunc i64 %625 to i32
  %627 = and i64 %625, 4294967295
  store i64 %627, i64* %RDX, align 8, !tbaa !2428
  %628 = shl i64 %625, 32
  %629 = ashr exact i64 %628, 32
  %630 = icmp ne i64 %629, %625
  %631 = zext i1 %630 to i8
  store i8 %631, i8* %20, align 1, !tbaa !2432
  %632 = and i32 %626, 255
  %633 = tail call i32 @llvm.ctpop.i32(i32 %632) #8
  %634 = trunc i32 %633 to i8
  %635 = and i8 %634, 1
  %636 = xor i8 %635, 1
  store i8 %636, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %637 = lshr i32 %626, 31
  %638 = trunc i32 %637 to i8
  store i8 %638, i8* %38, align 1, !tbaa !2448
  store i8 %631, i8* %44, align 1, !tbaa !2449
  %639 = add i64 %571, 35
  store i64 %639, i64* %PC, align 8
  %640 = load i32, i32* %579, align 4
  %641 = add i32 %640, %626
  %642 = add i32 %641, 1
  %643 = zext i32 %642 to i64
  store i64 %643, i64* %RDX, align 8, !tbaa !2428
  %644 = sext i32 %642 to i64
  %645 = shl nsw i64 %644, 2
  store i64 %645, i64* %RDI, align 8, !tbaa !2428
  %646 = lshr i64 %644, 61
  %647 = and i64 %646, 1
  %648 = add i64 %645, %615
  store i64 %648, i64* %RSI, align 8, !tbaa !2428
  %649 = icmp ult i64 %648, %615
  %650 = icmp ult i64 %648, %645
  %651 = or i1 %649, %650
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %20, align 1, !tbaa !2432
  %653 = trunc i64 %648 to i32
  %654 = and i32 %653, 255
  %655 = tail call i32 @llvm.ctpop.i32(i32 %654) #8
  %656 = trunc i32 %655 to i8
  %657 = and i8 %656, 1
  %658 = xor i8 %657, 1
  store i8 %658, i8* %27, align 1, !tbaa !2446
  %659 = xor i64 %645, %615
  %660 = xor i64 %659, %648
  %661 = lshr i64 %660, 4
  %662 = trunc i64 %661 to i8
  %663 = and i8 %662, 1
  store i8 %663, i8* %32, align 1, !tbaa !2450
  %664 = icmp eq i64 %648, 0
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %35, align 1, !tbaa !2447
  %666 = lshr i64 %648, 63
  %667 = trunc i64 %666 to i8
  store i8 %667, i8* %38, align 1, !tbaa !2448
  %668 = lshr i64 %615, 63
  %669 = xor i64 %666, %668
  %670 = xor i64 %666, %647
  %671 = add nuw nsw i64 %669, %670
  %672 = icmp eq i64 %671, 2
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %44, align 1, !tbaa !2449
  %674 = load i64, i64* %RBP, align 8
  %675 = add i64 %674, -32
  %676 = add i64 %571, 52
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i64*
  %678 = load i64, i64* %677, align 8
  store i64 %678, i64* %RDI, align 8, !tbaa !2428
  %679 = add i64 %674, -44
  %680 = add i64 %571, 55
  store i64 %680, i64* %PC, align 8
  %681 = inttoptr i64 %679 to i32*
  %682 = load i32, i32* %681, align 4
  %683 = add i32 %682, 1
  %684 = sext i32 %683 to i64
  %685 = shl nsw i64 %684, 2
  store i64 %685, i64* %R8, align 8, !tbaa !2428
  %686 = lshr i64 %684, 61
  %687 = and i64 %686, 1
  %688 = add i64 %685, %678
  %689 = icmp ult i64 %688, %678
  %690 = icmp ult i64 %688, %685
  %691 = or i1 %689, %690
  %692 = zext i1 %691 to i8
  store i8 %692, i8* %20, align 1, !tbaa !2432
  %693 = trunc i64 %688 to i32
  %694 = and i32 %693, 255
  %695 = tail call i32 @llvm.ctpop.i32(i32 %694) #8
  %696 = trunc i32 %695 to i8
  %697 = and i8 %696, 1
  %698 = xor i8 %697, 1
  store i8 %698, i8* %27, align 1, !tbaa !2446
  %699 = xor i64 %685, %678
  %700 = xor i64 %699, %688
  %701 = lshr i64 %700, 4
  %702 = trunc i64 %701 to i8
  %703 = and i8 %702, 1
  store i8 %703, i8* %32, align 1, !tbaa !2450
  %704 = icmp eq i64 %688, 0
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %35, align 1, !tbaa !2447
  %706 = lshr i64 %688, 63
  %707 = trunc i64 %706 to i8
  store i8 %707, i8* %38, align 1, !tbaa !2448
  %708 = lshr i64 %678, 63
  %709 = xor i64 %706, %708
  %710 = xor i64 %706, %687
  %711 = add nuw nsw i64 %709, %710
  %712 = icmp eq i64 %711, 2
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %44, align 1, !tbaa !2449
  %714 = add i64 %674, -64
  %715 = add i64 %571, 72
  store i64 %715, i64* %PC, align 8
  %716 = inttoptr i64 %714 to i64*
  store i64 %688, i64* %716, align 8
  %717 = load i32, i32* %ECX, align 4
  %718 = zext i32 %717 to i64
  %719 = load i64, i64* %PC, align 8
  store i64 %718, i64* %RDI, align 8, !tbaa !2428
  %720 = load i32, i32* %EAX, align 4
  %721 = zext i32 %720 to i64
  store i64 %721, i64* %RDX, align 8, !tbaa !2428
  %722 = load i64, i64* %RBP, align 8
  %723 = add i64 %722, -64
  %724 = add i64 %719, 8
  store i64 %724, i64* %PC, align 8
  %725 = inttoptr i64 %723 to i64*
  %726 = load i64, i64* %725, align 8
  store i64 %726, i64* %RCX, align 8, !tbaa !2428
  store i64 %721, i64* %R8, align 8, !tbaa !2428
  %727 = add i64 %719, 2914
  %728 = add i64 %719, 16
  %729 = load i64, i64* %RSP, align 8, !tbaa !2428
  %730 = add i64 %729, -8
  %731 = inttoptr i64 %730 to i64*
  store i64 %728, i64* %731, align 8
  store i64 %730, i64* %RSP, align 8, !tbaa !2428
  store i64 %727, i64* %PC, align 8, !tbaa !2428
  %732 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %727, %struct.Memory* %MEMORY.1)
  %733 = load i64, i64* %RBP, align 8
  %734 = add i64 %733, -44
  %735 = load i64, i64* %PC, align 8
  %736 = add i64 %735, 3
  store i64 %736, i64* %PC, align 8
  %737 = inttoptr i64 %734 to i32*
  %738 = load i32, i32* %737, align 4
  %739 = add i32 %738, 1
  %740 = zext i32 %739 to i64
  store i64 %740, i64* %RAX, align 8, !tbaa !2428
  %741 = icmp eq i32 %738, -1
  %742 = icmp eq i32 %739, 0
  %743 = or i1 %741, %742
  %744 = zext i1 %743 to i8
  store i8 %744, i8* %20, align 1, !tbaa !2432
  %745 = and i32 %739, 255
  %746 = tail call i32 @llvm.ctpop.i32(i32 %745) #8
  %747 = trunc i32 %746 to i8
  %748 = and i8 %747, 1
  %749 = xor i8 %748, 1
  store i8 %749, i8* %27, align 1, !tbaa !2446
  %750 = xor i32 %738, %739
  %751 = lshr i32 %750, 4
  %752 = trunc i32 %751 to i8
  %753 = and i8 %752, 1
  store i8 %753, i8* %32, align 1, !tbaa !2450
  %754 = zext i1 %742 to i8
  store i8 %754, i8* %35, align 1, !tbaa !2447
  %755 = lshr i32 %739, 31
  %756 = trunc i32 %755 to i8
  store i8 %756, i8* %38, align 1, !tbaa !2448
  %757 = lshr i32 %738, 31
  %758 = xor i32 %755, %757
  %759 = add nuw nsw i32 %758, %755
  %760 = icmp eq i32 %759, 2
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %44, align 1, !tbaa !2449
  %762 = add i64 %735, 9
  store i64 %762, i64* %PC, align 8
  store i32 %739, i32* %737, align 4
  %763 = load i64, i64* %PC, align 8
  %764 = add i64 %763, -197
  store i64 %764, i64* %PC, align 8, !tbaa !2428
  br label %block_401cd2

block_401db4:                                     ; preds = %block_401da8
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %765 = add i64 %1141, 8
  store i64 %765, i64* %PC, align 8
  %766 = load i32, i32* %1113, align 4
  %767 = zext i32 %766 to i64
  store i64 %767, i64* %RCX, align 8, !tbaa !2428
  %768 = add i64 %1141, 11
  store i64 %768, i64* %PC, align 8
  %769 = load i32, i32* %1108, align 4
  %770 = add i32 %769, 1
  %771 = zext i32 %770 to i64
  store i64 %771, i64* %RDX, align 8, !tbaa !2428
  %772 = lshr i32 %770, 31
  %773 = sub i32 %766, %770
  %774 = zext i32 %773 to i64
  store i64 %774, i64* %RCX, align 8, !tbaa !2428
  %775 = icmp ult i32 %766, %770
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %20, align 1, !tbaa !2432
  %777 = and i32 %773, 255
  %778 = tail call i32 @llvm.ctpop.i32(i32 %777) #8
  %779 = trunc i32 %778 to i8
  %780 = and i8 %779, 1
  %781 = xor i8 %780, 1
  store i8 %781, i8* %27, align 1, !tbaa !2446
  %782 = xor i32 %770, %766
  %783 = xor i32 %782, %773
  %784 = lshr i32 %783, 4
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  store i8 %786, i8* %32, align 1, !tbaa !2450
  %787 = icmp eq i32 %773, 0
  %788 = zext i1 %787 to i8
  store i8 %788, i8* %35, align 1, !tbaa !2447
  %789 = lshr i32 %773, 31
  %790 = trunc i32 %789 to i8
  store i8 %790, i8* %38, align 1, !tbaa !2448
  %791 = lshr i32 %766, 31
  %792 = xor i32 %772, %791
  %793 = xor i32 %789, %791
  %794 = add nuw nsw i32 %793, %792
  %795 = icmp eq i32 %794, 2
  %796 = zext i1 %795 to i8
  store i8 %796, i8* %44, align 1, !tbaa !2449
  %797 = add i64 %1105, -44
  %798 = add i64 %1141, 19
  store i64 %798, i64* %PC, align 8
  %799 = inttoptr i64 %797 to i32*
  store i32 %773, i32* %799, align 4
  %800 = load i64, i64* %RBP, align 8
  %801 = add i64 %800, -32
  %802 = load i64, i64* %PC, align 8
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC, align 8
  %804 = inttoptr i64 %801 to i64*
  %805 = load i64, i64* %804, align 8
  store i64 %805, i64* %RSI, align 8, !tbaa !2428
  %806 = add i64 %800, -44
  %807 = add i64 %802, 8
  store i64 %807, i64* %PC, align 8
  %808 = inttoptr i64 %806 to i32*
  %809 = load i32, i32* %808, align 4
  %810 = sext i32 %809 to i64
  store i64 %810, i64* %RDI, align 8, !tbaa !2428
  %811 = shl nsw i64 %810, 2
  %812 = add i64 %811, %805
  %813 = add i64 %802, 13
  store i64 %813, i64* %PC, align 8
  %814 = inttoptr i64 %812 to i32*
  %815 = load i32, i32* %814, align 4
  %816 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %815, i32* %816, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %817 = add i64 %800, -8
  %818 = add i64 %802, 17
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %817 to i64*
  %820 = load i64, i64* %819, align 8
  store i64 %820, i64* %RSI, align 8, !tbaa !2428
  %821 = add i64 %800, -12
  %822 = add i64 %802, 20
  store i64 %822, i64* %PC, align 8
  %823 = inttoptr i64 %821 to i32*
  %824 = load i32, i32* %823, align 4
  %825 = zext i32 %824 to i64
  store i64 %825, i64* %RCX, align 8, !tbaa !2428
  %826 = add i64 %802, 24
  store i64 %826, i64* %PC, align 8
  %827 = load i32, i32* %808, align 4
  %828 = sext i32 %824 to i64
  %829 = sext i32 %827 to i64
  %830 = mul nsw i64 %829, %828
  %831 = trunc i64 %830 to i32
  %832 = and i64 %830, 4294967295
  store i64 %832, i64* %RCX, align 8, !tbaa !2428
  %833 = shl i64 %830, 32
  %834 = ashr exact i64 %833, 32
  %835 = icmp ne i64 %834, %830
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %20, align 1, !tbaa !2432
  %837 = and i32 %831, 255
  %838 = tail call i32 @llvm.ctpop.i32(i32 %837) #8
  %839 = trunc i32 %838 to i8
  %840 = and i8 %839, 1
  %841 = xor i8 %840, 1
  store i8 %841, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %842 = lshr i32 %831, 31
  %843 = trunc i32 %842 to i8
  store i8 %843, i8* %38, align 1, !tbaa !2448
  store i8 %836, i8* %44, align 1, !tbaa !2449
  %844 = add i64 %802, 27
  store i64 %844, i64* %PC, align 8
  %845 = load i32, i32* %808, align 4
  %846 = add i32 %845, %831
  %847 = zext i32 %846 to i64
  store i64 %847, i64* %RCX, align 8, !tbaa !2428
  %848 = icmp ult i32 %846, %831
  %849 = icmp ult i32 %846, %845
  %850 = or i1 %848, %849
  %851 = zext i1 %850 to i8
  store i8 %851, i8* %20, align 1, !tbaa !2432
  %852 = and i32 %846, 255
  %853 = tail call i32 @llvm.ctpop.i32(i32 %852) #8
  %854 = trunc i32 %853 to i8
  %855 = and i8 %854, 1
  %856 = xor i8 %855, 1
  store i8 %856, i8* %27, align 1, !tbaa !2446
  %857 = xor i32 %845, %831
  %858 = xor i32 %857, %846
  %859 = lshr i32 %858, 4
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  store i8 %861, i8* %32, align 1, !tbaa !2450
  %862 = icmp eq i32 %846, 0
  %863 = zext i1 %862 to i8
  store i8 %863, i8* %35, align 1, !tbaa !2447
  %864 = lshr i32 %846, 31
  %865 = trunc i32 %864 to i8
  store i8 %865, i8* %38, align 1, !tbaa !2448
  %866 = lshr i32 %845, 31
  %867 = xor i32 %864, %842
  %868 = xor i32 %864, %866
  %869 = add nuw nsw i32 %867, %868
  %870 = icmp eq i32 %869, 2
  %871 = zext i1 %870 to i8
  store i8 %871, i8* %44, align 1, !tbaa !2449
  %872 = sext i32 %846 to i64
  store i64 %872, i64* %RDI, align 8, !tbaa !2428
  %873 = shl nsw i64 %872, 2
  %874 = add i64 %873, %820
  %875 = add i64 %802, 35
  store i64 %875, i64* %PC, align 8
  %876 = load <2 x float>, <2 x float>* %1625, align 1
  %877 = load <2 x i32>, <2 x i32>* %1626, align 1
  %878 = inttoptr i64 %874 to float*
  %879 = load float, float* %878, align 4
  %880 = extractelement <2 x float> %876, i32 0
  %881 = fdiv float %880, %879
  store float %881, float* %.pre-phi11, align 1, !tbaa !2452
  %882 = bitcast <2 x float> %876 to <2 x i32>
  %883 = extractelement <2 x i32> %882, i32 1
  store i32 %883, i32* %1627, align 1, !tbaa !2452
  %884 = extractelement <2 x i32> %877, i32 0
  store i32 %884, i32* %1628, align 1, !tbaa !2452
  %885 = extractelement <2 x i32> %877, i32 1
  store i32 %885, i32* %1629, align 1, !tbaa !2452
  %886 = load i64, i64* %RBP, align 8
  %887 = add i64 %886, -32
  %888 = add i64 %802, 39
  store i64 %888, i64* %PC, align 8
  %889 = inttoptr i64 %887 to i64*
  %890 = load i64, i64* %889, align 8
  store i64 %890, i64* %RSI, align 8, !tbaa !2428
  %891 = add i64 %886, -44
  %892 = add i64 %802, 43
  store i64 %892, i64* %PC, align 8
  %893 = inttoptr i64 %891 to i32*
  %894 = load i32, i32* %893, align 4
  %895 = sext i32 %894 to i64
  store i64 %895, i64* %RDI, align 8, !tbaa !2428
  %896 = shl nsw i64 %895, 2
  %897 = add i64 %896, %890
  %898 = add i64 %802, 48
  store i64 %898, i64* %PC, align 8
  %899 = load <2 x float>, <2 x float>* %.pre-phi27, align 1
  %900 = extractelement <2 x float> %899, i32 0
  %901 = inttoptr i64 %897 to float*
  store float %900, float* %901, align 4
  %902 = load i64, i64* %RBP, align 8
  %903 = add i64 %902, -32
  %904 = load i64, i64* %PC, align 8
  %905 = add i64 %904, 4
  store i64 %905, i64* %PC, align 8
  %906 = inttoptr i64 %903 to i64*
  %907 = load i64, i64* %906, align 8
  store i64 %907, i64* %RSI, align 8, !tbaa !2428
  %908 = add i64 %902, -44
  %909 = add i64 %904, 8
  store i64 %909, i64* %PC, align 8
  %910 = inttoptr i64 %908 to i32*
  %911 = load i32, i32* %910, align 4
  %912 = sext i32 %911 to i64
  store i64 %912, i64* %RDI, align 8, !tbaa !2428
  %913 = shl nsw i64 %912, 2
  %914 = add i64 %913, %907
  %915 = add i64 %904, 13
  store i64 %915, i64* %PC, align 8
  %916 = inttoptr i64 %914 to i32*
  %917 = load i32, i32* %916, align 4
  store i32 %917, i32* %816, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %918 = load i64, i64* %1630, align 1
  %919 = trunc i64 %918 to i32
  store i32 %919, i32* %ECX, align 1, !tbaa !2451
  store i32 0, i32* %1632, align 1, !tbaa !2451
  %920 = load i64, i64* %RCX, align 8
  %921 = xor i64 %920, -2147483648
  %922 = trunc i64 %921 to i32
  %923 = and i64 %921, 4294967295
  store i64 %923, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  %924 = and i32 %922, 255
  %925 = tail call i32 @llvm.ctpop.i32(i32 %924) #8
  %926 = trunc i32 %925 to i8
  %927 = and i8 %926, 1
  %928 = xor i8 %927, 1
  store i8 %928, i8* %27, align 1, !tbaa !2446
  %929 = icmp eq i32 %922, 0
  %930 = zext i1 %929 to i8
  store i8 %930, i8* %35, align 1, !tbaa !2447
  %931 = lshr i32 %922, 31
  %932 = trunc i32 %931 to i8
  store i8 %932, i8* %38, align 1, !tbaa !2448
  store i8 0, i8* %44, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i32 %922, i32* %1633, align 1, !tbaa !2451
  store i32 0, i32* %1627, align 1, !tbaa !2451
  store i32 0, i32* %1628, align 1, !tbaa !2451
  store i32 0, i32* %1629, align 1, !tbaa !2451
  %933 = add i64 %902, -40
  %934 = add i64 %904, 32
  store i64 %934, i64* %PC, align 8
  %935 = load <2 x float>, <2 x float>* %.pre-phi27, align 1
  %936 = extractelement <2 x float> %935, i32 0
  %937 = inttoptr i64 %933 to float*
  store float %936, float* %937, align 4
  %938 = load i64, i64* %RBP, align 8
  %939 = add i64 %938, -44
  %940 = load i64, i64* %PC, align 8
  %941 = add i64 %940, 3
  store i64 %941, i64* %PC, align 8
  %942 = inttoptr i64 %939 to i32*
  %943 = load i32, i32* %942, align 4
  %944 = zext i32 %943 to i64
  store i64 %944, i64* %RDI, align 8, !tbaa !2428
  %945 = add i64 %938, -40
  %946 = add i64 %940, 8
  store i64 %946, i64* %PC, align 8
  %947 = inttoptr i64 %945 to i32*
  %948 = load i32, i32* %947, align 4
  store i32 %948, i32* %816, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %949 = add i64 %938, -8
  %950 = add i64 %940, 12
  store i64 %950, i64* %PC, align 8
  %951 = inttoptr i64 %949 to i64*
  %952 = load i64, i64* %951, align 8
  store i64 %952, i64* %RSI, align 8, !tbaa !2428
  %953 = add i64 %938, -12
  %954 = add i64 %940, 15
  store i64 %954, i64* %PC, align 8
  %955 = inttoptr i64 %953 to i32*
  %956 = load i32, i32* %955, align 4
  %957 = zext i32 %956 to i64
  store i64 %957, i64* %RCX, align 8, !tbaa !2428
  %958 = add i64 %940, 19
  store i64 %958, i64* %PC, align 8
  %959 = load i32, i32* %942, align 4
  %960 = sext i32 %956 to i64
  %961 = sext i32 %959 to i64
  %962 = mul nsw i64 %961, %960
  %963 = and i64 %962, 4294967295
  store i64 %963, i64* %RCX, align 8, !tbaa !2428
  %964 = shl i64 %962, 32
  %965 = ashr exact i64 %964, 30
  store i64 %965, i64* %R8, align 8, !tbaa !2428
  %966 = lshr i64 %965, 63
  %967 = add i64 %965, %952
  store i64 %967, i64* %RSI, align 8, !tbaa !2428
  %968 = icmp ult i64 %967, %952
  %969 = icmp ult i64 %967, %965
  %970 = or i1 %968, %969
  %971 = zext i1 %970 to i8
  store i8 %971, i8* %20, align 1, !tbaa !2432
  %972 = trunc i64 %967 to i32
  %973 = and i32 %972, 255
  %974 = tail call i32 @llvm.ctpop.i32(i32 %973) #8
  %975 = trunc i32 %974 to i8
  %976 = and i8 %975, 1
  %977 = xor i8 %976, 1
  store i8 %977, i8* %27, align 1, !tbaa !2446
  %978 = xor i64 %965, %952
  %979 = xor i64 %978, %967
  %980 = lshr i64 %979, 4
  %981 = trunc i64 %980 to i8
  %982 = and i8 %981, 1
  store i8 %982, i8* %32, align 1, !tbaa !2450
  %983 = icmp eq i64 %967, 0
  %984 = zext i1 %983 to i8
  store i8 %984, i8* %35, align 1, !tbaa !2447
  %985 = lshr i64 %967, 63
  %986 = trunc i64 %985 to i8
  store i8 %986, i8* %38, align 1, !tbaa !2448
  %987 = lshr i64 %952, 63
  %988 = xor i64 %985, %987
  %989 = xor i64 %985, %966
  %990 = add nuw nsw i64 %988, %989
  %991 = icmp eq i64 %990, 2
  %992 = zext i1 %991 to i8
  store i8 %992, i8* %44, align 1, !tbaa !2449
  %993 = add i64 %938, -32
  %994 = add i64 %940, 36
  store i64 %994, i64* %PC, align 8
  %995 = inttoptr i64 %993 to i64*
  %996 = load i64, i64* %995, align 8
  store i64 %996, i64* %RCX, align 8, !tbaa !2428
  %997 = load i32, i32* %EAX, align 4
  %998 = zext i32 %997 to i64
  store i64 %998, i64* %RDX, align 8, !tbaa !2428
  store i64 %998, i64* %R8, align 8, !tbaa !2428
  %999 = add i64 %940, 2761
  %1000 = add i64 %940, 46
  %1001 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1002 = add i64 %1001, -8
  %1003 = inttoptr i64 %1002 to i64*
  store i64 %1000, i64* %1003, align 8
  store i64 %1002, i64* %RSP, align 8, !tbaa !2428
  store i64 %999, i64* %PC, align 8, !tbaa !2428
  %1004 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %999, %struct.Memory* %MEMORY.3)
  %1005 = load i64, i64* %RBP, align 8
  %1006 = add i64 %1005, -48
  %1007 = load i64, i64* %PC, align 8
  %1008 = add i64 %1007, 3
  store i64 %1008, i64* %PC, align 8
  %1009 = inttoptr i64 %1006 to i32*
  %1010 = load i32, i32* %1009, align 4
  %1011 = add i32 %1010, 1
  %1012 = zext i32 %1011 to i64
  store i64 %1012, i64* %RAX, align 8, !tbaa !2428
  %1013 = icmp eq i32 %1010, -1
  %1014 = icmp eq i32 %1011, 0
  %1015 = or i1 %1013, %1014
  %1016 = zext i1 %1015 to i8
  store i8 %1016, i8* %20, align 1, !tbaa !2432
  %1017 = and i32 %1011, 255
  %1018 = tail call i32 @llvm.ctpop.i32(i32 %1017) #8
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = xor i8 %1020, 1
  store i8 %1021, i8* %27, align 1, !tbaa !2446
  %1022 = xor i32 %1010, %1011
  %1023 = lshr i32 %1022, 4
  %1024 = trunc i32 %1023 to i8
  %1025 = and i8 %1024, 1
  store i8 %1025, i8* %32, align 1, !tbaa !2450
  %1026 = zext i1 %1014 to i8
  store i8 %1026, i8* %35, align 1, !tbaa !2447
  %1027 = lshr i32 %1011, 31
  %1028 = trunc i32 %1027 to i8
  store i8 %1028, i8* %38, align 1, !tbaa !2448
  %1029 = lshr i32 %1010, 31
  %1030 = xor i32 %1027, %1029
  %1031 = add nuw nsw i32 %1030, %1027
  %1032 = icmp eq i32 %1031, 2
  %1033 = zext i1 %1032 to i8
  store i8 %1033, i8* %44, align 1, !tbaa !2449
  %1034 = add i64 %1007, 9
  store i64 %1034, i64* %PC, align 8
  store i32 %1011, i32* %1009, align 4
  %1035 = load i64, i64* %PC, align 8
  %1036 = add i64 %1035, -166
  store i64 %1036, i64* %PC, align 8, !tbaa !2428
  br label %block_401da8

block_401fac:                                     ; preds = %block_401f09
  %1037 = add i64 %1482, -32
  %1038 = add i64 %1517, 4
  store i64 %1038, i64* %PC, align 8
  %1039 = inttoptr i64 %1037 to i64*
  %1040 = load i64, i64* %1039, align 8
  store i64 %1040, i64* %RAX, align 8, !tbaa !2428
  %1041 = add i64 %1517, 8
  store i64 %1041, i64* %PC, align 8
  %1042 = load i32, i32* %1486, align 4
  %1043 = sext i32 %1042 to i64
  store i64 %1043, i64* %RCX, align 8, !tbaa !2428
  %1044 = shl nsw i64 %1043, 2
  %1045 = add i64 %1044, %1040
  %1046 = add i64 %1517, 13
  store i64 %1046, i64* %PC, align 8
  %1047 = inttoptr i64 %1045 to i32*
  %1048 = load i32, i32* %1047, align 4
  store i32 %1048, i32* %1268, align 1, !tbaa !2452
  store float 0.000000e+00, float* %561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %563, align 1, !tbaa !2452
  store float 0.000000e+00, float* %565, align 1, !tbaa !2452
  %1049 = add i64 %1482, -40
  %1050 = add i64 %1517, 18
  store i64 %1050, i64* %PC, align 8
  %1051 = load <2 x float>, <2 x float>* %557, align 1
  %1052 = extractelement <2 x float> %1051, i32 0
  %1053 = inttoptr i64 %1049 to float*
  store float %1052, float* %1053, align 4
  %1054 = load i64, i64* %RBP, align 8
  %1055 = add i64 %1054, -32
  %1056 = load i64, i64* %PC, align 8
  %1057 = add i64 %1056, 4
  store i64 %1057, i64* %PC, align 8
  %1058 = inttoptr i64 %1055 to i64*
  %1059 = load i64, i64* %1058, align 8
  store i64 %1059, i64* %RAX, align 8, !tbaa !2428
  %1060 = add i64 %1054, -44
  %1061 = add i64 %1056, 8
  store i64 %1061, i64* %PC, align 8
  %1062 = inttoptr i64 %1060 to i32*
  %1063 = load i32, i32* %1062, align 4
  %1064 = sext i32 %1063 to i64
  store i64 %1064, i64* %RCX, align 8, !tbaa !2428
  %1065 = shl nsw i64 %1064, 2
  %1066 = add i64 %1065, %1059
  %1067 = add i64 %1056, 13
  store i64 %1067, i64* %PC, align 8
  %1068 = inttoptr i64 %1066 to i32*
  %1069 = load i32, i32* %1068, align 4
  store i32 %1069, i32* %1268, align 1, !tbaa !2452
  store float 0.000000e+00, float* %561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %563, align 1, !tbaa !2452
  store float 0.000000e+00, float* %565, align 1, !tbaa !2452
  %1070 = add i64 %1056, 17
  store i64 %1070, i64* %PC, align 8
  %1071 = load i64, i64* %1058, align 8
  store i64 %1071, i64* %RAX, align 8, !tbaa !2428
  %1072 = add i64 %1054, -52
  %1073 = add i64 %1056, 21
  store i64 %1073, i64* %PC, align 8
  %1074 = inttoptr i64 %1072 to i32*
  %1075 = load i32, i32* %1074, align 4
  %1076 = sext i32 %1075 to i64
  store i64 %1076, i64* %RCX, align 8, !tbaa !2428
  %1077 = shl nsw i64 %1076, 2
  %1078 = add i64 %1077, %1071
  %1079 = add i64 %1056, 26
  store i64 %1079, i64* %PC, align 8
  %1080 = load <2 x float>, <2 x float>* %557, align 1
  %1081 = extractelement <2 x float> %1080, i32 0
  %1082 = inttoptr i64 %1078 to float*
  store float %1081, float* %1082, align 4
  %1083 = load i64, i64* %RBP, align 8
  %1084 = add i64 %1083, -40
  %1085 = load i64, i64* %PC, align 8
  %1086 = add i64 %1085, 5
  store i64 %1086, i64* %PC, align 8
  %1087 = inttoptr i64 %1084 to i32*
  %1088 = load i32, i32* %1087, align 4
  store i32 %1088, i32* %1268, align 1, !tbaa !2452
  store float 0.000000e+00, float* %561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %563, align 1, !tbaa !2452
  store float 0.000000e+00, float* %565, align 1, !tbaa !2452
  %1089 = add i64 %1083, -32
  %1090 = add i64 %1085, 9
  store i64 %1090, i64* %PC, align 8
  %1091 = inttoptr i64 %1089 to i64*
  %1092 = load i64, i64* %1091, align 8
  store i64 %1092, i64* %RAX, align 8, !tbaa !2428
  %1093 = add i64 %1083, -44
  %1094 = add i64 %1085, 13
  store i64 %1094, i64* %PC, align 8
  %1095 = inttoptr i64 %1093 to i32*
  %1096 = load i32, i32* %1095, align 4
  %1097 = sext i32 %1096 to i64
  store i64 %1097, i64* %RCX, align 8, !tbaa !2428
  %1098 = shl nsw i64 %1097, 2
  %1099 = add i64 %1098, %1092
  %1100 = add i64 %1085, 18
  store i64 %1100, i64* %PC, align 8
  %1101 = load <2 x float>, <2 x float>* %557, align 1
  %1102 = extractelement <2 x float> %1101, i32 0
  %1103 = inttoptr i64 %1099 to float*
  store float %1102, float* %1103, align 4
  %.pre7 = load i64, i64* %PC, align 8
  %.pre8 = load i64, i64* %RBP, align 8
  br label %block_401fea

block_401da8:                                     ; preds = %block_401da1, %block_401db4
  %1104 = phi i64 [ %.pre4, %block_401da1 ], [ %1036, %block_401db4 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.7, %block_401da1 ], [ %1004, %block_401db4 ]
  %1105 = load i64, i64* %RBP, align 8
  %1106 = add i64 %1105, -48
  %1107 = add i64 %1104, 3
  store i64 %1107, i64* %PC, align 8
  %1108 = inttoptr i64 %1106 to i32*
  %1109 = load i32, i32* %1108, align 4
  %1110 = zext i32 %1109 to i64
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = add i64 %1105, -16
  %1112 = add i64 %1104, 6
  store i64 %1112, i64* %PC, align 8
  %1113 = inttoptr i64 %1111 to i32*
  %1114 = load i32, i32* %1113, align 4
  %1115 = sub i32 %1109, %1114
  %1116 = icmp ult i32 %1109, %1114
  %1117 = zext i1 %1116 to i8
  store i8 %1117, i8* %20, align 1, !tbaa !2432
  %1118 = and i32 %1115, 255
  %1119 = tail call i32 @llvm.ctpop.i32(i32 %1118) #8
  %1120 = trunc i32 %1119 to i8
  %1121 = and i8 %1120, 1
  %1122 = xor i8 %1121, 1
  store i8 %1122, i8* %27, align 1, !tbaa !2446
  %1123 = xor i32 %1114, %1109
  %1124 = xor i32 %1123, %1115
  %1125 = lshr i32 %1124, 4
  %1126 = trunc i32 %1125 to i8
  %1127 = and i8 %1126, 1
  store i8 %1127, i8* %32, align 1, !tbaa !2450
  %1128 = icmp eq i32 %1115, 0
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %35, align 1, !tbaa !2447
  %1130 = lshr i32 %1115, 31
  %1131 = trunc i32 %1130 to i8
  store i8 %1131, i8* %38, align 1, !tbaa !2448
  %1132 = lshr i32 %1109, 31
  %1133 = lshr i32 %1114, 31
  %1134 = xor i32 %1133, %1132
  %1135 = xor i32 %1130, %1132
  %1136 = add nuw nsw i32 %1135, %1134
  %1137 = icmp eq i32 %1136, 2
  %1138 = zext i1 %1137 to i8
  store i8 %1138, i8* %44, align 1, !tbaa !2449
  %1139 = icmp ne i8 %1131, 0
  %1140 = xor i1 %1139, %1137
  %.v34 = select i1 %1140, i64 12, i64 171
  %1141 = add i64 %1104, %.v34
  store i64 %1141, i64* %PC, align 8, !tbaa !2428
  br i1 %1140, label %block_401db4, label %block_401e53

block_401ffd:                                     ; preds = %block_401efd
  store i64 %1619, i64* %PC, align 8, !tbaa !2428
  br label %block_402002

block_401d9c:                                     ; preds = %block_401cd2
  %1142 = add i64 %440, 5
  store i64 %1142, i64* %PC, align 8, !tbaa !2428
  br label %block_401da1

block_401d0a:                                     ; preds = %block_401cde
  %1143 = add i64 %490, -32
  %1144 = add i64 %525, 4
  store i64 %1144, i64* %PC, align 8
  %1145 = inttoptr i64 %1143 to i64*
  %1146 = load i64, i64* %1145, align 8
  store i64 %1146, i64* %RAX, align 8, !tbaa !2428
  %1147 = add i64 %525, 8
  store i64 %1147, i64* %PC, align 8
  %1148 = load i32, i32* %499, align 4
  %1149 = sext i32 %1148 to i64
  store i64 %1149, i64* %RCX, align 8, !tbaa !2428
  %1150 = shl nsw i64 %1149, 2
  %1151 = add i64 %1150, %1146
  %1152 = add i64 %525, 13
  store i64 %1152, i64* %PC, align 8
  %1153 = inttoptr i64 %1151 to i32*
  %1154 = load i32, i32* %1153, align 4
  store i32 %1154, i32* %484, align 1, !tbaa !2452
  store float 0.000000e+00, float* %446, align 1, !tbaa !2452
  store float 0.000000e+00, float* %448, align 1, !tbaa !2452
  store float 0.000000e+00, float* %450, align 1, !tbaa !2452
  %1155 = add i64 %525, 17
  store i64 %1155, i64* %PC, align 8
  %1156 = load i64, i64* %1145, align 8
  store i64 %1156, i64* %RAX, align 8, !tbaa !2428
  %1157 = add i64 %525, 21
  store i64 %1157, i64* %PC, align 8
  %1158 = load i32, i32* %494, align 4
  %1159 = sext i32 %1158 to i64
  store i64 %1159, i64* %RCX, align 8, !tbaa !2428
  %1160 = shl nsw i64 %1159, 2
  %1161 = add i64 %1160, %1156
  %1162 = add i64 %525, 26
  store i64 %1162, i64* %PC, align 8
  %1163 = load <2 x float>, <2 x float>* %451, align 1
  %1164 = extractelement <2 x float> %1163, i32 0
  %1165 = inttoptr i64 %1161 to float*
  store float %1164, float* %1165, align 4
  %1166 = load i64, i64* %RBP, align 8
  %1167 = add i64 %1166, -40
  %1168 = load i64, i64* %PC, align 8
  %1169 = add i64 %1168, 5
  store i64 %1169, i64* %PC, align 8
  %1170 = inttoptr i64 %1167 to i32*
  %1171 = load i32, i32* %1170, align 4
  store i32 %1171, i32* %484, align 1, !tbaa !2452
  store float 0.000000e+00, float* %446, align 1, !tbaa !2452
  store float 0.000000e+00, float* %448, align 1, !tbaa !2452
  store float 0.000000e+00, float* %450, align 1, !tbaa !2452
  %1172 = add i64 %1166, -32
  %1173 = add i64 %1168, 9
  store i64 %1173, i64* %PC, align 8
  %1174 = inttoptr i64 %1172 to i64*
  %1175 = load i64, i64* %1174, align 8
  store i64 %1175, i64* %RAX, align 8, !tbaa !2428
  %1176 = add i64 %1166, -44
  %1177 = add i64 %1168, 13
  store i64 %1177, i64* %PC, align 8
  %1178 = inttoptr i64 %1176 to i32*
  %1179 = load i32, i32* %1178, align 4
  %1180 = sext i32 %1179 to i64
  store i64 %1180, i64* %RCX, align 8, !tbaa !2428
  %1181 = shl nsw i64 %1180, 2
  %1182 = add i64 %1181, %1175
  %1183 = add i64 %1168, 18
  store i64 %1183, i64* %PC, align 8
  %1184 = load <2 x float>, <2 x float>* %451, align 1
  %1185 = extractelement <2 x float> %1184, i32 0
  %1186 = inttoptr i64 %1182 to float*
  store float %1185, float* %1186, align 4
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %block_401d36

block_401eec:                                     ; preds = %block_401e5f
  %1187 = add i64 %365, -56
  %1188 = add i64 %401, 4
  store i64 %1188, i64* %PC, align 8
  %1189 = inttoptr i64 %1187 to i32*
  %1190 = load i32, i32* %1189, align 4
  %1191 = add i32 %1190, -1
  %1192 = icmp eq i32 %1190, 0
  %1193 = zext i1 %1192 to i8
  store i8 %1193, i8* %20, align 1, !tbaa !2432
  %1194 = and i32 %1191, 255
  %1195 = tail call i32 @llvm.ctpop.i32(i32 %1194) #8
  %1196 = trunc i32 %1195 to i8
  %1197 = and i8 %1196, 1
  %1198 = xor i8 %1197, 1
  store i8 %1198, i8* %27, align 1, !tbaa !2446
  %1199 = xor i32 %1190, %1191
  %1200 = lshr i32 %1199, 4
  %1201 = trunc i32 %1200 to i8
  %1202 = and i8 %1201, 1
  store i8 %1202, i8* %32, align 1, !tbaa !2450
  %1203 = icmp eq i32 %1191, 0
  %1204 = zext i1 %1203 to i8
  store i8 %1204, i8* %35, align 1, !tbaa !2447
  %1205 = lshr i32 %1191, 31
  %1206 = trunc i32 %1205 to i8
  store i8 %1206, i8* %38, align 1, !tbaa !2448
  %1207 = lshr i32 %1190, 31
  %1208 = xor i32 %1205, %1207
  %1209 = add nuw nsw i32 %1208, %1207
  %1210 = icmp eq i32 %1209, 2
  %1211 = zext i1 %1210 to i8
  store i8 %1211, i8* %44, align 1, !tbaa !2449
  %1212 = icmp ne i8 %1206, 0
  %1213 = xor i1 %1212, %1210
  %.v36 = select i1 %1213, i64 278, i64 10
  %1214 = add i64 %401, %.v36
  store i64 %1214, i64* %PC, align 8, !tbaa !2428
  br i1 %1213, label %block_402002, label %block_401ef6

block_401f09:                                     ; preds = %block_401efd
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1215 = add i64 %1582, -16
  %1216 = add i64 %1618, 8
  store i64 %1216, i64* %PC, align 8
  %1217 = inttoptr i64 %1215 to i32*
  %1218 = load i32, i32* %1217, align 4
  %1219 = zext i32 %1218 to i64
  store i64 %1219, i64* %RCX, align 8, !tbaa !2428
  %1220 = add i64 %1618, 11
  store i64 %1220, i64* %PC, align 8
  %1221 = load i32, i32* %1585, align 4
  %1222 = add i32 %1221, 1
  %1223 = zext i32 %1222 to i64
  store i64 %1223, i64* %RDX, align 8, !tbaa !2428
  %1224 = lshr i32 %1222, 31
  %1225 = sub i32 %1218, %1222
  %1226 = zext i32 %1225 to i64
  store i64 %1226, i64* %RCX, align 8, !tbaa !2428
  %1227 = icmp ult i32 %1218, %1222
  %1228 = zext i1 %1227 to i8
  store i8 %1228, i8* %20, align 1, !tbaa !2432
  %1229 = and i32 %1225, 255
  %1230 = tail call i32 @llvm.ctpop.i32(i32 %1229) #8
  %1231 = trunc i32 %1230 to i8
  %1232 = and i8 %1231, 1
  %1233 = xor i8 %1232, 1
  store i8 %1233, i8* %27, align 1, !tbaa !2446
  %1234 = xor i32 %1222, %1218
  %1235 = xor i32 %1234, %1225
  %1236 = lshr i32 %1235, 4
  %1237 = trunc i32 %1236 to i8
  %1238 = and i8 %1237, 1
  store i8 %1238, i8* %32, align 1, !tbaa !2450
  %1239 = icmp eq i32 %1225, 0
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %35, align 1, !tbaa !2447
  %1241 = lshr i32 %1225, 31
  %1242 = trunc i32 %1241 to i8
  store i8 %1242, i8* %38, align 1, !tbaa !2448
  %1243 = lshr i32 %1218, 31
  %1244 = xor i32 %1224, %1243
  %1245 = xor i32 %1241, %1243
  %1246 = add nuw nsw i32 %1245, %1244
  %1247 = icmp eq i32 %1246, 2
  %1248 = zext i1 %1247 to i8
  store i8 %1248, i8* %44, align 1, !tbaa !2449
  %1249 = add i64 %1582, -44
  %1250 = add i64 %1618, 19
  store i64 %1250, i64* %PC, align 8
  %1251 = inttoptr i64 %1249 to i32*
  store i32 %1225, i32* %1251, align 4
  %1252 = load i64, i64* %RBP, align 8
  %1253 = add i64 %1252, -32
  %1254 = load i64, i64* %PC, align 8
  %1255 = add i64 %1254, 4
  store i64 %1255, i64* %PC, align 8
  %1256 = inttoptr i64 %1253 to i64*
  %1257 = load i64, i64* %1256, align 8
  store i64 %1257, i64* %RSI, align 8, !tbaa !2428
  %1258 = add i64 %1252, -44
  %1259 = add i64 %1254, 8
  store i64 %1259, i64* %PC, align 8
  %1260 = inttoptr i64 %1258 to i32*
  %1261 = load i32, i32* %1260, align 4
  %1262 = sext i32 %1261 to i64
  store i64 %1262, i64* %RDI, align 8, !tbaa !2428
  %1263 = shl nsw i64 %1262, 2
  %1264 = add i64 %1263, %1257
  %1265 = add i64 %1254, 13
  store i64 %1265, i64* %PC, align 8
  %1266 = inttoptr i64 %1264 to i32*
  %1267 = load i32, i32* %1266, align 4
  %1268 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %1267, i32* %1268, align 1, !tbaa !2452
  store float 0.000000e+00, float* %561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %563, align 1, !tbaa !2452
  store float 0.000000e+00, float* %565, align 1, !tbaa !2452
  %1269 = add i64 %1252, -16
  %1270 = add i64 %1254, 16
  store i64 %1270, i64* %PC, align 8
  %1271 = inttoptr i64 %1269 to i32*
  %1272 = load i32, i32* %1271, align 4
  %1273 = zext i32 %1272 to i64
  store i64 %1273, i64* %RCX, align 8, !tbaa !2428
  %1274 = add i64 %1254, 19
  store i64 %1274, i64* %PC, align 8
  %1275 = load i32, i32* %1260, align 4
  %1276 = add i32 %1275, 1
  %1277 = zext i32 %1276 to i64
  store i64 %1277, i64* %RDX, align 8, !tbaa !2428
  %1278 = lshr i32 %1276, 31
  %1279 = sub i32 %1272, %1276
  %1280 = zext i32 %1279 to i64
  store i64 %1280, i64* %RCX, align 8, !tbaa !2428
  %1281 = icmp ult i32 %1272, %1276
  %1282 = zext i1 %1281 to i8
  store i8 %1282, i8* %20, align 1, !tbaa !2432
  %1283 = and i32 %1279, 255
  %1284 = tail call i32 @llvm.ctpop.i32(i32 %1283) #8
  %1285 = trunc i32 %1284 to i8
  %1286 = and i8 %1285, 1
  %1287 = xor i8 %1286, 1
  store i8 %1287, i8* %27, align 1, !tbaa !2446
  %1288 = xor i32 %1276, %1272
  %1289 = xor i32 %1288, %1279
  %1290 = lshr i32 %1289, 4
  %1291 = trunc i32 %1290 to i8
  %1292 = and i8 %1291, 1
  store i8 %1292, i8* %32, align 1, !tbaa !2450
  %1293 = icmp eq i32 %1279, 0
  %1294 = zext i1 %1293 to i8
  store i8 %1294, i8* %35, align 1, !tbaa !2447
  %1295 = lshr i32 %1279, 31
  %1296 = trunc i32 %1295 to i8
  store i8 %1296, i8* %38, align 1, !tbaa !2448
  %1297 = lshr i32 %1272, 31
  %1298 = xor i32 %1278, %1297
  %1299 = xor i32 %1295, %1297
  %1300 = add nuw nsw i32 %1299, %1298
  %1301 = icmp eq i32 %1300, 2
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %44, align 1, !tbaa !2449
  %1303 = add i64 %1252, -8
  %1304 = add i64 %1254, 28
  store i64 %1304, i64* %PC, align 8
  %1305 = inttoptr i64 %1303 to i64*
  %1306 = load i64, i64* %1305, align 8
  store i64 %1306, i64* %RSI, align 8, !tbaa !2428
  %1307 = add i64 %1252, -12
  %1308 = add i64 %1254, 31
  store i64 %1308, i64* %PC, align 8
  %1309 = inttoptr i64 %1307 to i32*
  %1310 = load i32, i32* %1309, align 4
  %1311 = zext i32 %1310 to i64
  store i64 %1311, i64* %RDX, align 8, !tbaa !2428
  %1312 = add i64 %1254, 35
  store i64 %1312, i64* %PC, align 8
  %1313 = load i32, i32* %1260, align 4
  %1314 = sext i32 %1310 to i64
  %1315 = sext i32 %1313 to i64
  %1316 = mul nsw i64 %1315, %1314
  %1317 = trunc i64 %1316 to i32
  %1318 = and i64 %1316, 4294967295
  store i64 %1318, i64* %RDX, align 8, !tbaa !2428
  %1319 = shl i64 %1316, 32
  %1320 = ashr exact i64 %1319, 32
  %1321 = icmp ne i64 %1320, %1316
  %1322 = zext i1 %1321 to i8
  store i8 %1322, i8* %20, align 1, !tbaa !2432
  %1323 = and i32 %1317, 255
  %1324 = tail call i32 @llvm.ctpop.i32(i32 %1323) #8
  %1325 = trunc i32 %1324 to i8
  %1326 = and i8 %1325, 1
  %1327 = xor i8 %1326, 1
  store i8 %1327, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %1328 = lshr i32 %1317, 31
  %1329 = trunc i32 %1328 to i8
  store i8 %1329, i8* %38, align 1, !tbaa !2448
  store i8 %1322, i8* %44, align 1, !tbaa !2449
  %1330 = add i64 %1254, 38
  store i64 %1330, i64* %PC, align 8
  %1331 = load i32, i32* %1260, align 4
  %1332 = add i32 %1331, %1317
  %1333 = add i32 %1332, 1
  %1334 = zext i32 %1333 to i64
  store i64 %1334, i64* %RDX, align 8, !tbaa !2428
  %1335 = sext i32 %1333 to i64
  %1336 = shl nsw i64 %1335, 2
  store i64 %1336, i64* %RDI, align 8, !tbaa !2428
  %1337 = lshr i64 %1335, 61
  %1338 = and i64 %1337, 1
  %1339 = add i64 %1336, %1306
  store i64 %1339, i64* %RSI, align 8, !tbaa !2428
  %1340 = icmp ult i64 %1339, %1306
  %1341 = icmp ult i64 %1339, %1336
  %1342 = or i1 %1340, %1341
  %1343 = zext i1 %1342 to i8
  store i8 %1343, i8* %20, align 1, !tbaa !2432
  %1344 = trunc i64 %1339 to i32
  %1345 = and i32 %1344, 255
  %1346 = tail call i32 @llvm.ctpop.i32(i32 %1345) #8
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = xor i8 %1348, 1
  store i8 %1349, i8* %27, align 1, !tbaa !2446
  %1350 = xor i64 %1336, %1306
  %1351 = xor i64 %1350, %1339
  %1352 = lshr i64 %1351, 4
  %1353 = trunc i64 %1352 to i8
  %1354 = and i8 %1353, 1
  store i8 %1354, i8* %32, align 1, !tbaa !2450
  %1355 = icmp eq i64 %1339, 0
  %1356 = zext i1 %1355 to i8
  store i8 %1356, i8* %35, align 1, !tbaa !2447
  %1357 = lshr i64 %1339, 63
  %1358 = trunc i64 %1357 to i8
  store i8 %1358, i8* %38, align 1, !tbaa !2448
  %1359 = lshr i64 %1306, 63
  %1360 = xor i64 %1357, %1359
  %1361 = xor i64 %1357, %1338
  %1362 = add nuw nsw i64 %1360, %1361
  %1363 = icmp eq i64 %1362, 2
  %1364 = zext i1 %1363 to i8
  store i8 %1364, i8* %44, align 1, !tbaa !2449
  %1365 = load i64, i64* %RBP, align 8
  %1366 = add i64 %1365, -32
  %1367 = add i64 %1254, 55
  store i64 %1367, i64* %PC, align 8
  %1368 = inttoptr i64 %1366 to i64*
  %1369 = load i64, i64* %1368, align 8
  store i64 %1369, i64* %RDI, align 8, !tbaa !2428
  %1370 = add i64 %1365, -44
  %1371 = add i64 %1254, 58
  store i64 %1371, i64* %PC, align 8
  %1372 = inttoptr i64 %1370 to i32*
  %1373 = load i32, i32* %1372, align 4
  %1374 = add i32 %1373, 1
  %1375 = sext i32 %1374 to i64
  %1376 = shl nsw i64 %1375, 2
  store i64 %1376, i64* %R8, align 8, !tbaa !2428
  %1377 = lshr i64 %1375, 61
  %1378 = and i64 %1377, 1
  %1379 = add i64 %1376, %1369
  %1380 = icmp ult i64 %1379, %1369
  %1381 = icmp ult i64 %1379, %1376
  %1382 = or i1 %1380, %1381
  %1383 = zext i1 %1382 to i8
  store i8 %1383, i8* %20, align 1, !tbaa !2432
  %1384 = trunc i64 %1379 to i32
  %1385 = and i32 %1384, 255
  %1386 = tail call i32 @llvm.ctpop.i32(i32 %1385) #8
  %1387 = trunc i32 %1386 to i8
  %1388 = and i8 %1387, 1
  %1389 = xor i8 %1388, 1
  store i8 %1389, i8* %27, align 1, !tbaa !2446
  %1390 = xor i64 %1376, %1369
  %1391 = xor i64 %1390, %1379
  %1392 = lshr i64 %1391, 4
  %1393 = trunc i64 %1392 to i8
  %1394 = and i8 %1393, 1
  store i8 %1394, i8* %32, align 1, !tbaa !2450
  %1395 = icmp eq i64 %1379, 0
  %1396 = zext i1 %1395 to i8
  store i8 %1396, i8* %35, align 1, !tbaa !2447
  %1397 = lshr i64 %1379, 63
  %1398 = trunc i64 %1397 to i8
  store i8 %1398, i8* %38, align 1, !tbaa !2448
  %1399 = lshr i64 %1369, 63
  %1400 = xor i64 %1397, %1399
  %1401 = xor i64 %1397, %1378
  %1402 = add nuw nsw i64 %1400, %1401
  %1403 = icmp eq i64 %1402, 2
  %1404 = zext i1 %1403 to i8
  store i8 %1404, i8* %44, align 1, !tbaa !2449
  %1405 = add i64 %1365, -80
  %1406 = add i64 %1254, 75
  store i64 %1406, i64* %PC, align 8
  %1407 = inttoptr i64 %1405 to i64*
  store i64 %1379, i64* %1407, align 8
  %1408 = load i32, i32* %ECX, align 4
  %1409 = zext i32 %1408 to i64
  %1410 = load i64, i64* %PC, align 8
  store i64 %1409, i64* %RDI, align 8, !tbaa !2428
  %1411 = load i32, i32* %EAX, align 4
  %1412 = zext i32 %1411 to i64
  store i64 %1412, i64* %RDX, align 8, !tbaa !2428
  %1413 = load i64, i64* %RBP, align 8
  %1414 = add i64 %1413, -80
  %1415 = add i64 %1410, 8
  store i64 %1415, i64* %PC, align 8
  %1416 = inttoptr i64 %1414 to i64*
  %1417 = load i64, i64* %1416, align 8
  store i64 %1417, i64* %RCX, align 8, !tbaa !2428
  store i64 %1412, i64* %R8, align 8, !tbaa !2428
  %1418 = add i64 %1413, -84
  %1419 = add i64 %1410, 16
  store i64 %1419, i64* %PC, align 8
  %1420 = load <2 x float>, <2 x float>* %557, align 1
  %1421 = extractelement <2 x float> %1420, i32 0
  %1422 = inttoptr i64 %1418 to float*
  store float %1421, float* %1422, align 4
  %1423 = load i64, i64* %PC, align 8
  %1424 = add i64 %1423, 2777
  %1425 = add i64 %1423, 5
  %1426 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1427 = add i64 %1426, -8
  %1428 = inttoptr i64 %1427 to i64*
  store i64 %1425, i64* %1428, align 8
  store i64 %1427, i64* %RSP, align 8, !tbaa !2428
  store i64 %1424, i64* %PC, align 8, !tbaa !2428
  %1429 = tail call %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* nonnull %0, i64 %1424, %struct.Memory* %MEMORY.6)
  %1430 = load i64, i64* %RBP, align 8
  %1431 = add i64 %1430, -84
  %1432 = load i64, i64* %PC, align 8
  %1433 = add i64 %1432, 5
  store i64 %1433, i64* %PC, align 8
  %1434 = inttoptr i64 %1431 to i32*
  %1435 = load i32, i32* %1434, align 4
  %1436 = bitcast %union.VectorReg* %10 to i32*
  store i32 %1435, i32* %1436, align 1, !tbaa !2452
  store float 0.000000e+00, float* %132, align 1, !tbaa !2452
  store float 0.000000e+00, float* %134, align 1, !tbaa !2452
  store float 0.000000e+00, float* %136, align 1, !tbaa !2452
  %1437 = load <2 x float>, <2 x float>* %137, align 1
  %1438 = load <2 x i32>, <2 x i32>* %138, align 1
  %1439 = load <2 x float>, <2 x float>* %557, align 1
  %1440 = extractelement <2 x float> %1437, i32 0
  %1441 = extractelement <2 x float> %1439, i32 0
  %1442 = fadd float %1440, %1441
  store float %1442, float* %130, align 1, !tbaa !2452
  %1443 = bitcast <2 x float> %1437 to <2 x i32>
  %1444 = extractelement <2 x i32> %1443, i32 1
  store i32 %1444, i32* %139, align 1, !tbaa !2452
  %1445 = extractelement <2 x i32> %1438, i32 0
  store i32 %1445, i32* %140, align 1, !tbaa !2452
  %1446 = extractelement <2 x i32> %1438, i32 1
  store i32 %1446, i32* %141, align 1, !tbaa !2452
  %1447 = add i64 %1430, -32
  %1448 = add i64 %1432, 13
  store i64 %1448, i64* %PC, align 8
  %1449 = inttoptr i64 %1447 to i64*
  %1450 = load i64, i64* %1449, align 8
  store i64 %1450, i64* %RCX, align 8, !tbaa !2428
  %1451 = add i64 %1430, -44
  %1452 = add i64 %1432, 17
  store i64 %1452, i64* %PC, align 8
  %1453 = inttoptr i64 %1451 to i32*
  %1454 = load i32, i32* %1453, align 4
  %1455 = sext i32 %1454 to i64
  store i64 %1455, i64* %RSI, align 8, !tbaa !2428
  %1456 = shl nsw i64 %1455, 2
  %1457 = add i64 %1456, %1450
  %1458 = add i64 %1432, 22
  store i64 %1458, i64* %PC, align 8
  %1459 = load <2 x float>, <2 x float>* %137, align 1
  %1460 = extractelement <2 x float> %1459, i32 0
  %1461 = inttoptr i64 %1457 to float*
  store float %1460, float* %1461, align 4
  %1462 = load i64, i64* %RBP, align 8
  %1463 = add i64 %1462, -24
  %1464 = load i64, i64* %PC, align 8
  %1465 = add i64 %1464, 4
  store i64 %1465, i64* %PC, align 8
  %1466 = inttoptr i64 %1463 to i64*
  %1467 = load i64, i64* %1466, align 8
  store i64 %1467, i64* %RCX, align 8, !tbaa !2428
  %1468 = add i64 %1462, -44
  %1469 = add i64 %1464, 8
  store i64 %1469, i64* %PC, align 8
  %1470 = inttoptr i64 %1468 to i32*
  %1471 = load i32, i32* %1470, align 4
  %1472 = sext i32 %1471 to i64
  store i64 %1472, i64* %RSI, align 8, !tbaa !2428
  %1473 = shl nsw i64 %1472, 2
  %1474 = add i64 %1473, %1467
  %1475 = add i64 %1464, 11
  store i64 %1475, i64* %PC, align 8
  %1476 = inttoptr i64 %1474 to i32*
  %1477 = load i32, i32* %1476, align 4
  %1478 = zext i32 %1477 to i64
  store i64 %1478, i64* %RAX, align 8, !tbaa !2428
  %1479 = add i64 %1462, -52
  %1480 = add i64 %1464, 14
  store i64 %1480, i64* %PC, align 8
  %1481 = inttoptr i64 %1479 to i32*
  store i32 %1477, i32* %1481, align 4
  %1482 = load i64, i64* %RBP, align 8
  %1483 = add i64 %1482, -52
  %1484 = load i64, i64* %PC, align 8
  %1485 = add i64 %1484, 3
  store i64 %1485, i64* %PC, align 8
  %1486 = inttoptr i64 %1483 to i32*
  %1487 = load i32, i32* %1486, align 4
  %1488 = zext i32 %1487 to i64
  store i64 %1488, i64* %RAX, align 8, !tbaa !2428
  %1489 = add i64 %1482, -44
  %1490 = add i64 %1484, 6
  store i64 %1490, i64* %PC, align 8
  %1491 = inttoptr i64 %1489 to i32*
  %1492 = load i32, i32* %1491, align 4
  %1493 = sub i32 %1487, %1492
  %1494 = icmp ult i32 %1487, %1492
  %1495 = zext i1 %1494 to i8
  store i8 %1495, i8* %20, align 1, !tbaa !2432
  %1496 = and i32 %1493, 255
  %1497 = tail call i32 @llvm.ctpop.i32(i32 %1496) #8
  %1498 = trunc i32 %1497 to i8
  %1499 = and i8 %1498, 1
  %1500 = xor i8 %1499, 1
  store i8 %1500, i8* %27, align 1, !tbaa !2446
  %1501 = xor i32 %1492, %1487
  %1502 = xor i32 %1501, %1493
  %1503 = lshr i32 %1502, 4
  %1504 = trunc i32 %1503 to i8
  %1505 = and i8 %1504, 1
  store i8 %1505, i8* %32, align 1, !tbaa !2450
  %1506 = icmp eq i32 %1493, 0
  %1507 = zext i1 %1506 to i8
  store i8 %1507, i8* %35, align 1, !tbaa !2447
  %1508 = lshr i32 %1493, 31
  %1509 = trunc i32 %1508 to i8
  store i8 %1509, i8* %38, align 1, !tbaa !2448
  %1510 = lshr i32 %1487, 31
  %1511 = lshr i32 %1492, 31
  %1512 = xor i32 %1511, %1510
  %1513 = xor i32 %1508, %1510
  %1514 = add nuw nsw i32 %1513, %1512
  %1515 = icmp eq i32 %1514, 2
  %1516 = zext i1 %1515 to i8
  store i8 %1516, i8* %44, align 1, !tbaa !2449
  %.v38 = select i1 %1506, i64 74, i64 12
  %1517 = add i64 %1484, %.v38
  store i64 %1517, i64* %PC, align 8, !tbaa !2428
  br i1 %1506, label %block_401fea, label %block_401fac

block_401fea:                                     ; preds = %block_401f09, %block_401fac
  %1518 = phi i64 [ %1482, %block_401f09 ], [ %.pre8, %block_401fac ]
  %1519 = phi i64 [ %1517, %block_401f09 ], [ %.pre7, %block_401fac ]
  %1520 = add i64 %1518, -48
  %1521 = add i64 %1519, 8
  store i64 %1521, i64* %PC, align 8
  %1522 = inttoptr i64 %1520 to i32*
  %1523 = load i32, i32* %1522, align 4
  %1524 = add i32 %1523, 1
  %1525 = zext i32 %1524 to i64
  store i64 %1525, i64* %RAX, align 8, !tbaa !2428
  %1526 = icmp eq i32 %1523, -1
  %1527 = icmp eq i32 %1524, 0
  %1528 = or i1 %1526, %1527
  %1529 = zext i1 %1528 to i8
  store i8 %1529, i8* %20, align 1, !tbaa !2432
  %1530 = and i32 %1524, 255
  %1531 = tail call i32 @llvm.ctpop.i32(i32 %1530) #8
  %1532 = trunc i32 %1531 to i8
  %1533 = and i8 %1532, 1
  %1534 = xor i8 %1533, 1
  store i8 %1534, i8* %27, align 1, !tbaa !2446
  %1535 = xor i32 %1523, %1524
  %1536 = lshr i32 %1535, 4
  %1537 = trunc i32 %1536 to i8
  %1538 = and i8 %1537, 1
  store i8 %1538, i8* %32, align 1, !tbaa !2450
  %1539 = zext i1 %1527 to i8
  store i8 %1539, i8* %35, align 1, !tbaa !2447
  %1540 = lshr i32 %1524, 31
  %1541 = trunc i32 %1540 to i8
  store i8 %1541, i8* %38, align 1, !tbaa !2448
  %1542 = lshr i32 %1523, 31
  %1543 = xor i32 %1540, %1542
  %1544 = add nuw nsw i32 %1543, %1540
  %1545 = icmp eq i32 %1544, 2
  %1546 = zext i1 %1545 to i8
  store i8 %1546, i8* %44, align 1, !tbaa !2449
  %1547 = add i64 %1519, 14
  store i64 %1547, i64* %PC, align 8
  store i32 %1524, i32* %1522, align 4
  %1548 = load i64, i64* %PC, align 8
  %1549 = add i64 %1548, -251
  store i64 %1549, i64* %PC, align 8, !tbaa !2428
  br label %block_401efd

block_402007:                                     ; preds = %block_402002, %block_401e53
  %.sink = phi i64 [ %1635, %block_402002 ], [ %402, %block_401e53 ]
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.8, %block_402002 ], [ %MEMORY.3, %block_401e53 ]
  %1550 = load i64, i64* %RSP, align 8
  %1551 = add i64 %1550, 96
  store i64 %1551, i64* %RSP, align 8, !tbaa !2428
  %1552 = icmp ugt i64 %1550, -97
  %1553 = zext i1 %1552 to i8
  store i8 %1553, i8* %20, align 1, !tbaa !2432
  %1554 = trunc i64 %1551 to i32
  %1555 = and i32 %1554, 255
  %1556 = tail call i32 @llvm.ctpop.i32(i32 %1555) #8
  %1557 = trunc i32 %1556 to i8
  %1558 = and i8 %1557, 1
  %1559 = xor i8 %1558, 1
  store i8 %1559, i8* %27, align 1, !tbaa !2446
  %1560 = xor i64 %1550, %1551
  %1561 = lshr i64 %1560, 4
  %1562 = trunc i64 %1561 to i8
  %1563 = and i8 %1562, 1
  store i8 %1563, i8* %32, align 1, !tbaa !2450
  %1564 = icmp eq i64 %1551, 0
  %1565 = zext i1 %1564 to i8
  store i8 %1565, i8* %35, align 1, !tbaa !2447
  %1566 = lshr i64 %1551, 63
  %1567 = trunc i64 %1566 to i8
  store i8 %1567, i8* %38, align 1, !tbaa !2448
  %1568 = lshr i64 %1550, 63
  %1569 = xor i64 %1566, %1568
  %1570 = add nuw nsw i64 %1569, %1566
  %1571 = icmp eq i64 %1570, 2
  %1572 = zext i1 %1571 to i8
  store i8 %1572, i8* %44, align 1, !tbaa !2449
  %1573 = add i64 %.sink, 5
  store i64 %1573, i64* %PC, align 8
  %1574 = add i64 %1550, 104
  %1575 = inttoptr i64 %1551 to i64*
  %1576 = load i64, i64* %1575, align 8
  store i64 %1576, i64* %RBP, align 8, !tbaa !2428
  store i64 %1574, i64* %RSP, align 8, !tbaa !2428
  %1577 = add i64 %.sink, 6
  store i64 %1577, i64* %PC, align 8
  %1578 = inttoptr i64 %1574 to i64*
  %1579 = load i64, i64* %1578, align 8
  store i64 %1579, i64* %PC, align 8, !tbaa !2428
  %1580 = add i64 %1550, 112
  store i64 %1580, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_401efd:                                     ; preds = %block_401fea, %block_401ef6
  %1581 = phi i64 [ %.pre6, %block_401ef6 ], [ %1549, %block_401fea ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.0, %block_401ef6 ], [ %1429, %block_401fea ]
  %1582 = load i64, i64* %RBP, align 8
  %1583 = add i64 %1582, -48
  %1584 = add i64 %1581, 3
  store i64 %1584, i64* %PC, align 8
  %1585 = inttoptr i64 %1583 to i32*
  %1586 = load i32, i32* %1585, align 4
  %1587 = zext i32 %1586 to i64
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = add i64 %1582, -56
  %1589 = add i64 %1581, 6
  store i64 %1589, i64* %PC, align 8
  %1590 = inttoptr i64 %1588 to i32*
  %1591 = load i32, i32* %1590, align 4
  %1592 = sub i32 %1586, %1591
  %1593 = icmp ult i32 %1586, %1591
  %1594 = zext i1 %1593 to i8
  store i8 %1594, i8* %20, align 1, !tbaa !2432
  %1595 = and i32 %1592, 255
  %1596 = tail call i32 @llvm.ctpop.i32(i32 %1595) #8
  %1597 = trunc i32 %1596 to i8
  %1598 = and i8 %1597, 1
  %1599 = xor i8 %1598, 1
  store i8 %1599, i8* %27, align 1, !tbaa !2446
  %1600 = xor i32 %1591, %1586
  %1601 = xor i32 %1600, %1592
  %1602 = lshr i32 %1601, 4
  %1603 = trunc i32 %1602 to i8
  %1604 = and i8 %1603, 1
  store i8 %1604, i8* %32, align 1, !tbaa !2450
  %1605 = icmp eq i32 %1592, 0
  %1606 = zext i1 %1605 to i8
  store i8 %1606, i8* %35, align 1, !tbaa !2447
  %1607 = lshr i32 %1592, 31
  %1608 = trunc i32 %1607 to i8
  store i8 %1608, i8* %38, align 1, !tbaa !2448
  %1609 = lshr i32 %1586, 31
  %1610 = lshr i32 %1591, 31
  %1611 = xor i32 %1610, %1609
  %1612 = xor i32 %1607, %1609
  %1613 = add nuw nsw i32 %1612, %1611
  %1614 = icmp eq i32 %1613, 2
  %1615 = zext i1 %1614 to i8
  store i8 %1615, i8* %44, align 1, !tbaa !2449
  %1616 = icmp ne i8 %1608, 0
  %1617 = xor i1 %1616, %1614
  %.v37 = select i1 %1617, i64 12, i64 256
  %1618 = add i64 %1581, %.v37
  %1619 = add i64 %1618, 5
  store i64 %1619, i64* %PC, align 8
  br i1 %1617, label %block_401f09, label %block_401ffd

block_401da1:                                     ; preds = %block_401cc1.block_401da1_crit_edge, %block_401d9c
  %.pre-phi27 = phi <2 x float>* [ %.pre26, %block_401cc1.block_401da1_crit_edge ], [ %451, %block_401d9c ]
  %.pre-phi23 = phi float* [ %.pre22, %block_401cc1.block_401da1_crit_edge ], [ %450, %block_401d9c ]
  %.pre-phi21 = phi i8* [ %.pre20, %block_401cc1.block_401da1_crit_edge ], [ %449, %block_401d9c ]
  %.pre-phi19 = phi float* [ %.pre18, %block_401cc1.block_401da1_crit_edge ], [ %448, %block_401d9c ]
  %.pre-phi17.in = phi i64* [ %.pre16, %block_401cc1.block_401da1_crit_edge ], [ %447, %block_401d9c ]
  %.pre-phi15 = phi float* [ %.pre14, %block_401cc1.block_401da1_crit_edge ], [ %446, %block_401d9c ]
  %.pre-phi13 = phi i8* [ %.pre12, %block_401cc1.block_401da1_crit_edge ], [ %445, %block_401d9c ]
  %.pre-phi = phi i8* [ %.pre9, %block_401cc1.block_401da1_crit_edge ], [ %444, %block_401d9c ]
  %1620 = phi i64 [ %553, %block_401cc1.block_401da1_crit_edge ], [ %1142, %block_401d9c ]
  %1621 = phi i64 [ %110, %block_401cc1.block_401da1_crit_edge ], [ %404, %block_401d9c ]
  %MEMORY.7 = phi %struct.Memory* [ %2, %block_401cc1.block_401da1_crit_edge ], [ %MEMORY.1, %block_401d9c ]
  %.pre-phi11 = bitcast [32 x %union.VectorReg]* %9 to float*
  %1622 = add i64 %1621, -48
  %1623 = add i64 %1620, 7
  store i64 %1623, i64* %PC, align 8
  %1624 = inttoptr i64 %1622 to i32*
  store i32 0, i32* %1624, align 4
  %1625 = bitcast i8* %.pre-phi to <2 x float>*
  %1626 = bitcast i64* %.pre-phi17.in to <2 x i32>*
  %1627 = bitcast i8* %.pre-phi13 to i32*
  %1628 = bitcast i64* %.pre-phi17.in to i32*
  %1629 = bitcast i8* %.pre-phi21 to i32*
  %1630 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1631 = bitcast %union.anon* %4 to [2 x i32]*
  %1632 = getelementptr inbounds [2 x i32], [2 x i32]* %1631, i64 0, i64 1
  %1633 = bitcast i8* %.pre-phi to i32*
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_401da8

block_402002:                                     ; preds = %block_401eec, %block_401ffd
  %1634 = phi i64 [ %1214, %block_401eec ], [ %1619, %block_401ffd ]
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.0, %block_401eec ], [ %MEMORY.6, %block_401ffd ]
  %1635 = add i64 %1634, 5
  br label %block_402007
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400540:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %RSI, align 8
  %10 = load i64, i64* %PC, align 8
  %11 = sub i64 %9, ptrtoint (i64* @stderr to i64)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %18 = ashr i64 %11, 3
  %19 = lshr i64 %18, 63
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  %20 = add nsw i64 %19, %18
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = ashr i64 %20, 1
  store i64 %23, i64* %RSI, align 8, !tbaa !2428
  store i8 %22, i8* %12, align 1, !tbaa !2456
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #8
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %13, align 1, !tbaa !2456
  store i8 0, i8* %14, align 1, !tbaa !2456
  %30 = icmp eq i64 %23, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %15, align 1, !tbaa !2456
  %32 = lshr i64 %23, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %16, align 1, !tbaa !2456
  store i8 0, i8* %17, align 1, !tbaa !2456
  %.v = select i1 %30, i64 50, i64 29
  %34 = add i64 %10, %.v
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br i1 %30, label %block_400578, label %block_400563

block_400578:                                     ; preds = %block_400563, %block_400540
  %35 = phi i64 [ %42, %block_400563 ], [ %34, %block_400540 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %8, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %35, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %6 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %7, 16
  store i64 %41, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400563:                                     ; preds = %block_400540
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2447
  store i8 0, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %14, align 1, !tbaa !2450
  %42 = add i64 %34, 21
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  br label %block_400578
}

; Function Attrs: noinline
define %struct.Memory* @sub_401980_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401980:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -72
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = icmp ult i64 %13, 64
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2432
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #8
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2446
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2447
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2448
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2449
  %44 = add i64 %12, -16
  %45 = load i64, i64* %RDI, align 8
  %46 = add i64 %15, 11
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -12
  %50 = load i32, i32* %ESI, align 4
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  %56 = load i32, i32* %EDX, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -24
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -32
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -32
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RCX, align 8, !tbaa !2428
  %78 = add i64 %74, 10
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i32*
  store i32 0, i32* %79, align 4
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -16
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %81 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = add i32 %85, -1
  %87 = zext i32 %86 to i64
  store i64 %87, i64* %RDX, align 8, !tbaa !2428
  %88 = icmp eq i32 %85, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %19, align 1, !tbaa !2432
  %90 = and i32 %86, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #8
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %26, align 1, !tbaa !2446
  %95 = xor i32 %85, %86
  %96 = lshr i32 %95, 4
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %31, align 1, !tbaa !2450
  %99 = icmp eq i32 %86, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %34, align 1, !tbaa !2447
  %101 = lshr i32 %86, 31
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %37, align 1, !tbaa !2448
  %103 = lshr i32 %85, 31
  %104 = xor i32 %101, %103
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %43, align 1, !tbaa !2449
  %108 = add i64 %80, -56
  %109 = add i64 %82, 9
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i32*
  store i32 %86, i32* %110, align 4
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -56
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %112 to i32*
  %116 = load i32, i32* %115, align 4
  store i8 0, i8* %19, align 1, !tbaa !2432
  %117 = and i32 %116, 255
  %118 = tail call i32 @llvm.ctpop.i32(i32 %117) #8
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  store i8 %121, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  %122 = icmp eq i32 %116, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %34, align 1, !tbaa !2447
  %124 = lshr i32 %116, 31
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %37, align 1, !tbaa !2448
  store i8 0, i8* %43, align 1, !tbaa !2449
  %126 = icmp ne i8 %125, 0
  %.v = select i1 %126, i64 643, i64 10
  %127 = add i64 %113, %.v
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  br i1 %126, label %block_401980.block_401c30_crit_edge, label %block_4019b7

block_401980.block_401c30_crit_edge:              ; preds = %block_401980
  %.pre13 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %.pre18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre28 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %.pre30 = getelementptr inbounds i8, i8* %.pre13, i64 4
  %.pre32 = bitcast i8* %.pre30 to i32*
  %.pre34 = bitcast i64* %.pre18 to i32*
  %.pre36 = getelementptr inbounds i8, i8* %.pre13, i64 12
  %.pre38 = bitcast i8* %.pre36 to i32*
  %.pre40 = bitcast %union.VectorReg* %9 to i8*
  %.pre44 = getelementptr inbounds i8, i8* %.pre40, i64 4
  %.pre46 = bitcast i8* %.pre44 to float*
  %.pre48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %.pre50 = bitcast i64* %.pre48 to float*
  %.pre52 = getelementptr inbounds i8, i8* %.pre40, i64 12
  %.pre54 = bitcast i8* %.pre52 to float*
  %.pre58 = bitcast %union.VectorReg* %9 to <2 x float>*
  %.pre60 = bitcast %union.VectorReg* %9 to double*
  %.pre64 = bitcast [32 x %union.VectorReg]* %8 to double*
  br label %block_401c30

block_401b56:                                     ; preds = %block_401b2f
  %128 = add i64 %1097, -8
  %129 = add i64 %1132, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %1097, -12
  %133 = add i64 %1132, 7
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i32*
  %135 = load i32, i32* %134, align 4
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = add i64 %1097, -40
  %138 = add i64 %1132, 11
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = sext i32 %135 to i64
  %142 = sext i32 %140 to i64
  %143 = mul nsw i64 %142, %141
  %144 = trunc i64 %143 to i32
  %145 = and i64 %143, 4294967295
  store i64 %145, i64* %RCX, align 8, !tbaa !2428
  %146 = shl i64 %143, 32
  %147 = ashr exact i64 %146, 32
  %148 = icmp ne i64 %147, %143
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %19, align 1, !tbaa !2432
  %150 = and i32 %144, 255
  %151 = tail call i32 @llvm.ctpop.i32(i32 %150) #8
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  store i8 %154, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %155 = lshr i32 %144, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %37, align 1, !tbaa !2448
  store i8 %149, i8* %43, align 1, !tbaa !2449
  %157 = add i64 %1132, 14
  store i64 %157, i64* %PC, align 8
  %158 = load i32, i32* %1106, align 4
  %159 = add i32 %158, %144
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %RCX, align 8, !tbaa !2428
  %161 = icmp ult i32 %159, %144
  %162 = icmp ult i32 %159, %158
  %163 = or i1 %161, %162
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %19, align 1, !tbaa !2432
  %165 = and i32 %159, 255
  %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #8
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %26, align 1, !tbaa !2446
  %170 = xor i32 %158, %144
  %171 = xor i32 %170, %159
  %172 = lshr i32 %171, 4
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  store i8 %174, i8* %31, align 1, !tbaa !2450
  %175 = icmp eq i32 %159, 0
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %34, align 1, !tbaa !2447
  %177 = lshr i32 %159, 31
  %178 = trunc i32 %177 to i8
  store i8 %178, i8* %37, align 1, !tbaa !2448
  %179 = lshr i32 %158, 31
  %180 = xor i32 %177, %155
  %181 = xor i32 %177, %179
  %182 = add nuw nsw i32 %180, %181
  %183 = icmp eq i32 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %43, align 1, !tbaa !2449
  %185 = sext i32 %159 to i64
  store i64 %185, i64* %RDX, align 8, !tbaa !2428
  %186 = shl nsw i64 %185, 2
  %187 = add i64 %186, %131
  %188 = add i64 %1132, 22
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i32*
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %639, align 1, !tbaa !2452
  store float 0.000000e+00, float* %658, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %660, align 1, !tbaa !2452
  %191 = add i64 %1132, 26
  store i64 %191, i64* %PC, align 8
  %192 = load i64, i64* %130, align 8
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = add i64 %1132, 29
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %134, align 4
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %RCX, align 8, !tbaa !2428
  %196 = add i64 %1132, 33
  store i64 %196, i64* %PC, align 8
  %197 = load i32, i32* %139, align 4
  %198 = sext i32 %194 to i64
  %199 = sext i32 %197 to i64
  %200 = mul nsw i64 %199, %198
  %201 = trunc i64 %200 to i32
  %202 = and i64 %200, 4294967295
  store i64 %202, i64* %RCX, align 8, !tbaa !2428
  %203 = shl i64 %200, 32
  %204 = ashr exact i64 %203, 32
  %205 = icmp ne i64 %204, %200
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %19, align 1, !tbaa !2432
  %207 = and i32 %201, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207) #8
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  store i8 %211, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %212 = lshr i32 %201, 31
  %213 = trunc i32 %212 to i8
  store i8 %213, i8* %37, align 1, !tbaa !2448
  store i8 %206, i8* %43, align 1, !tbaa !2449
  %214 = add i64 %1132, 36
  store i64 %214, i64* %PC, align 8
  %215 = load i32, i32* %1101, align 4
  %216 = add i32 %215, %201
  %217 = zext i32 %216 to i64
  store i64 %217, i64* %RCX, align 8, !tbaa !2428
  %218 = icmp ult i32 %216, %201
  %219 = icmp ult i32 %216, %215
  %220 = or i1 %218, %219
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %19, align 1, !tbaa !2432
  %222 = and i32 %216, 255
  %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #8
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  store i8 %226, i8* %26, align 1, !tbaa !2446
  %227 = xor i32 %215, %201
  %228 = xor i32 %227, %216
  %229 = lshr i32 %228, 4
  %230 = trunc i32 %229 to i8
  %231 = and i8 %230, 1
  store i8 %231, i8* %31, align 1, !tbaa !2450
  %232 = icmp eq i32 %216, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %34, align 1, !tbaa !2447
  %234 = lshr i32 %216, 31
  %235 = trunc i32 %234 to i8
  store i8 %235, i8* %37, align 1, !tbaa !2448
  %236 = lshr i32 %215, 31
  %237 = xor i32 %234, %212
  %238 = xor i32 %234, %236
  %239 = add nuw nsw i32 %237, %238
  %240 = icmp eq i32 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %43, align 1, !tbaa !2449
  %242 = sext i32 %216 to i64
  store i64 %242, i64* %RDX, align 8, !tbaa !2428
  %243 = shl nsw i64 %242, 2
  %244 = add i64 %243, %192
  %245 = add i64 %1132, 44
  store i64 %245, i64* %PC, align 8
  %246 = load <2 x float>, <2 x float>* %657, align 1
  %247 = extractelement <2 x float> %246, i32 0
  %248 = inttoptr i64 %244 to float*
  store float %247, float* %248, align 4
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -36
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 5
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i32*
  %254 = load i32, i32* %253, align 4
  store i32 %254, i32* %639, align 1, !tbaa !2452
  store float 0.000000e+00, float* %658, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %660, align 1, !tbaa !2452
  %255 = add i64 %249, -8
  %256 = add i64 %251, 9
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %255 to i64*
  %258 = load i64, i64* %257, align 8
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = add i64 %249, -12
  %260 = add i64 %251, 12
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i32*
  %262 = load i32, i32* %261, align 4
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RCX, align 8, !tbaa !2428
  %264 = add i64 %249, -40
  %265 = add i64 %251, 16
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = sext i32 %262 to i64
  %269 = sext i32 %267 to i64
  %270 = mul nsw i64 %269, %268
  %271 = trunc i64 %270 to i32
  %272 = and i64 %270, 4294967295
  store i64 %272, i64* %RCX, align 8, !tbaa !2428
  %273 = shl i64 %270, 32
  %274 = ashr exact i64 %273, 32
  %275 = icmp ne i64 %274, %270
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %19, align 1, !tbaa !2432
  %277 = and i32 %271, 255
  %278 = tail call i32 @llvm.ctpop.i32(i32 %277) #8
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  store i8 %281, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %282 = lshr i32 %271, 31
  %283 = trunc i32 %282 to i8
  store i8 %283, i8* %37, align 1, !tbaa !2448
  store i8 %276, i8* %43, align 1, !tbaa !2449
  %284 = add i64 %249, -44
  %285 = add i64 %251, 19
  store i64 %285, i64* %PC, align 8
  %286 = inttoptr i64 %284 to i32*
  %287 = load i32, i32* %286, align 4
  %288 = add i32 %287, %271
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %RCX, align 8, !tbaa !2428
  %290 = icmp ult i32 %288, %271
  %291 = icmp ult i32 %288, %287
  %292 = or i1 %290, %291
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %19, align 1, !tbaa !2432
  %294 = and i32 %288, 255
  %295 = tail call i32 @llvm.ctpop.i32(i32 %294) #8
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  store i8 %298, i8* %26, align 1, !tbaa !2446
  %299 = xor i32 %287, %271
  %300 = xor i32 %299, %288
  %301 = lshr i32 %300, 4
  %302 = trunc i32 %301 to i8
  %303 = and i8 %302, 1
  store i8 %303, i8* %31, align 1, !tbaa !2450
  %304 = icmp eq i32 %288, 0
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %34, align 1, !tbaa !2447
  %306 = lshr i32 %288, 31
  %307 = trunc i32 %306 to i8
  store i8 %307, i8* %37, align 1, !tbaa !2448
  %308 = lshr i32 %287, 31
  %309 = xor i32 %306, %282
  %310 = xor i32 %306, %308
  %311 = add nuw nsw i32 %309, %310
  %312 = icmp eq i32 %311, 2
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %43, align 1, !tbaa !2449
  %314 = sext i32 %288 to i64
  store i64 %314, i64* %RDX, align 8, !tbaa !2428
  %315 = shl nsw i64 %314, 2
  %316 = add i64 %315, %258
  %317 = add i64 %251, 27
  store i64 %317, i64* %PC, align 8
  %318 = load <2 x float>, <2 x float>* %657, align 1
  %319 = extractelement <2 x float> %318, i32 0
  %320 = inttoptr i64 %316 to float*
  store float %319, float* %320, align 4
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %block_401b9d

block_401a46:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_401a3b
  %321 = phi i64 [ %1462, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %620, %block_401a3b ]
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -52
  %324 = add i64 %321, 3
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i32*
  %326 = load i32, i32* %325, align 4
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RAX, align 8, !tbaa !2428
  %328 = add i64 %322, -44
  %329 = add i64 %321, 6
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = sub i32 %326, %331
  %333 = icmp ult i32 %326, %331
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %19, align 1, !tbaa !2432
  %335 = and i32 %332, 255
  %336 = tail call i32 @llvm.ctpop.i32(i32 %335) #8
  %337 = trunc i32 %336 to i8
  %338 = and i8 %337, 1
  %339 = xor i8 %338, 1
  store i8 %339, i8* %26, align 1, !tbaa !2446
  %340 = xor i32 %331, %326
  %341 = xor i32 %340, %332
  %342 = lshr i32 %341, 4
  %343 = trunc i32 %342 to i8
  %344 = and i8 %343, 1
  store i8 %344, i8* %31, align 1, !tbaa !2450
  %345 = icmp eq i32 %332, 0
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %34, align 1, !tbaa !2447
  %347 = lshr i32 %332, 31
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %37, align 1, !tbaa !2448
  %349 = lshr i32 %326, 31
  %350 = lshr i32 %331, 31
  %351 = xor i32 %350, %349
  %352 = xor i32 %347, %349
  %353 = add nuw nsw i32 %352, %351
  %354 = icmp eq i32 %353, 2
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %43, align 1, !tbaa !2449
  %.v69 = select i1 %345, i64 110, i64 12
  %356 = add i64 %321, %.v69
  store i64 %356, i64* %PC, align 8, !tbaa !2428
  br i1 %345, label %block_401ab4, label %block_401a52

block_401a52:                                     ; preds = %block_401a46
  %357 = add i64 %322, -8
  %358 = add i64 %356, 4
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %357 to i64*
  %360 = load i64, i64* %359, align 8
  store i64 %360, i64* %RAX, align 8, !tbaa !2428
  %361 = add i64 %322, -12
  %362 = add i64 %356, 7
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i32*
  %364 = load i32, i32* %363, align 4
  %365 = zext i32 %364 to i64
  store i64 %365, i64* %RCX, align 8, !tbaa !2428
  %366 = add i64 %356, 11
  store i64 %366, i64* %PC, align 8
  %367 = load i32, i32* %330, align 4
  %368 = sext i32 %364 to i64
  %369 = sext i32 %367 to i64
  %370 = mul nsw i64 %369, %368
  %371 = trunc i64 %370 to i32
  %372 = and i64 %370, 4294967295
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = shl i64 %370, 32
  %374 = ashr exact i64 %373, 32
  %375 = icmp ne i64 %374, %370
  %376 = zext i1 %375 to i8
  store i8 %376, i8* %19, align 1, !tbaa !2432
  %377 = and i32 %371, 255
  %378 = tail call i32 @llvm.ctpop.i32(i32 %377) #8
  %379 = trunc i32 %378 to i8
  %380 = and i8 %379, 1
  %381 = xor i8 %380, 1
  store i8 %381, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %382 = lshr i32 %371, 31
  %383 = trunc i32 %382 to i8
  store i8 %383, i8* %37, align 1, !tbaa !2448
  store i8 %376, i8* %43, align 1, !tbaa !2449
  %384 = add i64 %356, 14
  store i64 %384, i64* %PC, align 8
  %385 = load i32, i32* %325, align 4
  %386 = add i32 %385, %371
  %387 = zext i32 %386 to i64
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ult i32 %386, %371
  %389 = icmp ult i32 %386, %385
  %390 = or i1 %388, %389
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %19, align 1, !tbaa !2432
  %392 = and i32 %386, 255
  %393 = tail call i32 @llvm.ctpop.i32(i32 %392) #8
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = xor i8 %395, 1
  store i8 %396, i8* %26, align 1, !tbaa !2446
  %397 = xor i32 %385, %371
  %398 = xor i32 %397, %386
  %399 = lshr i32 %398, 4
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  store i8 %401, i8* %31, align 1, !tbaa !2450
  %402 = icmp eq i32 %386, 0
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %34, align 1, !tbaa !2447
  %404 = lshr i32 %386, 31
  %405 = trunc i32 %404 to i8
  store i8 %405, i8* %37, align 1, !tbaa !2448
  %406 = lshr i32 %385, 31
  %407 = xor i32 %404, %382
  %408 = xor i32 %404, %406
  %409 = add nuw nsw i32 %407, %408
  %410 = icmp eq i32 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %43, align 1, !tbaa !2449
  %412 = sext i32 %386 to i64
  store i64 %412, i64* %RDX, align 8, !tbaa !2428
  %413 = shl nsw i64 %412, 2
  %414 = add i64 %413, %360
  %415 = add i64 %356, 22
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i32*
  %417 = load i32, i32* %416, align 4
  store i32 %417, i32* %639, align 1, !tbaa !2452
  store float 0.000000e+00, float* %658, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %660, align 1, !tbaa !2452
  %418 = add i64 %322, -36
  %419 = add i64 %356, 27
  store i64 %419, i64* %PC, align 8
  %420 = load <2 x float>, <2 x float>* %657, align 1
  %421 = extractelement <2 x float> %420, i32 0
  %422 = inttoptr i64 %418 to float*
  store float %421, float* %422, align 4
  %423 = load i64, i64* %RBP, align 8
  %424 = add i64 %423, -8
  %425 = load i64, i64* %PC, align 8
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %424 to i64*
  %428 = load i64, i64* %427, align 8
  store i64 %428, i64* %RAX, align 8, !tbaa !2428
  %429 = add i64 %423, -12
  %430 = add i64 %425, 7
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %429 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = zext i32 %432 to i64
  store i64 %433, i64* %RCX, align 8, !tbaa !2428
  %434 = add i64 %423, -44
  %435 = add i64 %425, 11
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %434 to i32*
  %437 = load i32, i32* %436, align 4
  %438 = sext i32 %432 to i64
  %439 = sext i32 %437 to i64
  %440 = mul nsw i64 %439, %438
  %441 = trunc i64 %440 to i32
  %442 = and i64 %440, 4294967295
  store i64 %442, i64* %RCX, align 8, !tbaa !2428
  %443 = shl i64 %440, 32
  %444 = ashr exact i64 %443, 32
  %445 = icmp ne i64 %444, %440
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %19, align 1, !tbaa !2432
  %447 = and i32 %441, 255
  %448 = tail call i32 @llvm.ctpop.i32(i32 %447) #8
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  store i8 %451, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %452 = lshr i32 %441, 31
  %453 = trunc i32 %452 to i8
  store i8 %453, i8* %37, align 1, !tbaa !2448
  store i8 %446, i8* %43, align 1, !tbaa !2449
  %454 = add i64 %425, 14
  store i64 %454, i64* %PC, align 8
  %455 = load i32, i32* %436, align 4
  %456 = add i32 %455, %441
  %457 = zext i32 %456 to i64
  store i64 %457, i64* %RCX, align 8, !tbaa !2428
  %458 = icmp ult i32 %456, %441
  %459 = icmp ult i32 %456, %455
  %460 = or i1 %458, %459
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %19, align 1, !tbaa !2432
  %462 = and i32 %456, 255
  %463 = tail call i32 @llvm.ctpop.i32(i32 %462) #8
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  store i8 %466, i8* %26, align 1, !tbaa !2446
  %467 = xor i32 %455, %441
  %468 = xor i32 %467, %456
  %469 = lshr i32 %468, 4
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  store i8 %471, i8* %31, align 1, !tbaa !2450
  %472 = icmp eq i32 %456, 0
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %34, align 1, !tbaa !2447
  %474 = lshr i32 %456, 31
  %475 = trunc i32 %474 to i8
  store i8 %475, i8* %37, align 1, !tbaa !2448
  %476 = lshr i32 %455, 31
  %477 = xor i32 %474, %452
  %478 = xor i32 %474, %476
  %479 = add nuw nsw i32 %477, %478
  %480 = icmp eq i32 %479, 2
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %43, align 1, !tbaa !2449
  %482 = sext i32 %456 to i64
  store i64 %482, i64* %RDX, align 8, !tbaa !2428
  %483 = shl nsw i64 %482, 2
  %484 = add i64 %483, %428
  %485 = add i64 %425, 22
  store i64 %485, i64* %PC, align 8
  %486 = inttoptr i64 %484 to i32*
  %487 = load i32, i32* %486, align 4
  store i32 %487, i32* %639, align 1, !tbaa !2452
  store float 0.000000e+00, float* %658, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %660, align 1, !tbaa !2452
  %488 = add i64 %425, 26
  store i64 %488, i64* %PC, align 8
  %489 = load i64, i64* %427, align 8
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = add i64 %425, 29
  store i64 %490, i64* %PC, align 8
  %491 = load i32, i32* %431, align 4
  %492 = zext i32 %491 to i64
  store i64 %492, i64* %RCX, align 8, !tbaa !2428
  %493 = add i64 %425, 33
  store i64 %493, i64* %PC, align 8
  %494 = load i32, i32* %436, align 4
  %495 = sext i32 %491 to i64
  %496 = sext i32 %494 to i64
  %497 = mul nsw i64 %496, %495
  %498 = trunc i64 %497 to i32
  %499 = and i64 %497, 4294967295
  store i64 %499, i64* %RCX, align 8, !tbaa !2428
  %500 = shl i64 %497, 32
  %501 = ashr exact i64 %500, 32
  %502 = icmp ne i64 %501, %497
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %19, align 1, !tbaa !2432
  %504 = and i32 %498, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #8
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %509 = lshr i32 %498, 31
  %510 = trunc i32 %509 to i8
  store i8 %510, i8* %37, align 1, !tbaa !2448
  store i8 %503, i8* %43, align 1, !tbaa !2449
  %511 = add i64 %423, -52
  %512 = add i64 %425, 36
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = add i32 %514, %498
  %516 = zext i32 %515 to i64
  store i64 %516, i64* %RCX, align 8, !tbaa !2428
  %517 = icmp ult i32 %515, %498
  %518 = icmp ult i32 %515, %514
  %519 = or i1 %517, %518
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %19, align 1, !tbaa !2432
  %521 = and i32 %515, 255
  %522 = tail call i32 @llvm.ctpop.i32(i32 %521) #8
  %523 = trunc i32 %522 to i8
  %524 = and i8 %523, 1
  %525 = xor i8 %524, 1
  store i8 %525, i8* %26, align 1, !tbaa !2446
  %526 = xor i32 %514, %498
  %527 = xor i32 %526, %515
  %528 = lshr i32 %527, 4
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  store i8 %530, i8* %31, align 1, !tbaa !2450
  %531 = icmp eq i32 %515, 0
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %34, align 1, !tbaa !2447
  %533 = lshr i32 %515, 31
  %534 = trunc i32 %533 to i8
  store i8 %534, i8* %37, align 1, !tbaa !2448
  %535 = lshr i32 %514, 31
  %536 = xor i32 %533, %509
  %537 = xor i32 %533, %535
  %538 = add nuw nsw i32 %536, %537
  %539 = icmp eq i32 %538, 2
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %43, align 1, !tbaa !2449
  %541 = sext i32 %515 to i64
  store i64 %541, i64* %RDX, align 8, !tbaa !2428
  %542 = shl nsw i64 %541, 2
  %543 = add i64 %542, %489
  %544 = add i64 %425, 44
  store i64 %544, i64* %PC, align 8
  %545 = load <2 x float>, <2 x float>* %657, align 1
  %546 = extractelement <2 x float> %545, i32 0
  %547 = inttoptr i64 %543 to float*
  store float %546, float* %547, align 4
  %548 = load i64, i64* %RBP, align 8
  %549 = add i64 %548, -36
  %550 = load i64, i64* %PC, align 8
  %551 = add i64 %550, 5
  store i64 %551, i64* %PC, align 8
  %552 = inttoptr i64 %549 to i32*
  %553 = load i32, i32* %552, align 4
  store i32 %553, i32* %639, align 1, !tbaa !2452
  store float 0.000000e+00, float* %658, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %660, align 1, !tbaa !2452
  %554 = add i64 %548, -8
  %555 = add i64 %550, 9
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %554 to i64*
  %557 = load i64, i64* %556, align 8
  store i64 %557, i64* %RAX, align 8, !tbaa !2428
  %558 = add i64 %548, -12
  %559 = add i64 %550, 12
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i32*
  %561 = load i32, i32* %560, align 4
  %562 = zext i32 %561 to i64
  store i64 %562, i64* %RCX, align 8, !tbaa !2428
  %563 = add i64 %548, -44
  %564 = add i64 %550, 16
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %563 to i32*
  %566 = load i32, i32* %565, align 4
  %567 = sext i32 %561 to i64
  %568 = sext i32 %566 to i64
  %569 = mul nsw i64 %568, %567
  %570 = trunc i64 %569 to i32
  %571 = and i64 %569, 4294967295
  store i64 %571, i64* %RCX, align 8, !tbaa !2428
  %572 = shl i64 %569, 32
  %573 = ashr exact i64 %572, 32
  %574 = icmp ne i64 %573, %569
  %575 = zext i1 %574 to i8
  store i8 %575, i8* %19, align 1, !tbaa !2432
  %576 = and i32 %570, 255
  %577 = tail call i32 @llvm.ctpop.i32(i32 %576) #8
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  store i8 %580, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %581 = lshr i32 %570, 31
  %582 = trunc i32 %581 to i8
  store i8 %582, i8* %37, align 1, !tbaa !2448
  store i8 %575, i8* %43, align 1, !tbaa !2449
  %583 = add i64 %550, 19
  store i64 %583, i64* %PC, align 8
  %584 = load i32, i32* %565, align 4
  %585 = add i32 %584, %570
  %586 = zext i32 %585 to i64
  store i64 %586, i64* %RCX, align 8, !tbaa !2428
  %587 = icmp ult i32 %585, %570
  %588 = icmp ult i32 %585, %584
  %589 = or i1 %587, %588
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %19, align 1, !tbaa !2432
  %591 = and i32 %585, 255
  %592 = tail call i32 @llvm.ctpop.i32(i32 %591) #8
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  %595 = xor i8 %594, 1
  store i8 %595, i8* %26, align 1, !tbaa !2446
  %596 = xor i32 %584, %570
  %597 = xor i32 %596, %585
  %598 = lshr i32 %597, 4
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  store i8 %600, i8* %31, align 1, !tbaa !2450
  %601 = icmp eq i32 %585, 0
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %34, align 1, !tbaa !2447
  %603 = lshr i32 %585, 31
  %604 = trunc i32 %603 to i8
  store i8 %604, i8* %37, align 1, !tbaa !2448
  %605 = lshr i32 %584, 31
  %606 = xor i32 %603, %581
  %607 = xor i32 %603, %605
  %608 = add nuw nsw i32 %606, %607
  %609 = icmp eq i32 %608, 2
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %43, align 1, !tbaa !2449
  %611 = sext i32 %585 to i64
  store i64 %611, i64* %RDX, align 8, !tbaa !2428
  %612 = shl nsw i64 %611, 2
  %613 = add i64 %612, %557
  %614 = add i64 %550, 27
  store i64 %614, i64* %PC, align 8
  %615 = load <2 x float>, <2 x float>* %657, align 1
  %616 = extractelement <2 x float> %615, i32 0
  %617 = inttoptr i64 %613 to float*
  store float %616, float* %617, align 4
  %.pre3 = load i64, i64* %PC, align 8
  %.pre4 = load i64, i64* %RBP, align 8
  br label %block_401ab4

block_401a3b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %618 = load i8, i8* %26, align 1, !tbaa !2446
  %619 = icmp ne i8 %618, 0
  %.v68 = select i1 %619, i64 11, i64 6
  %620 = add i64 %1462, %.v68
  store i64 %620, i64* %PC, align 8, !tbaa !2428
  %621 = icmp eq i8 %618, 1
  br i1 %621, label %block_401a46, label %block_401a41

block_401a41:                                     ; preds = %block_401a3b
  %622 = load i64, i64* %RBP, align 8
  %623 = add i64 %622, -44
  %624 = add i64 %620, 465
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %623 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = zext i32 %626 to i64
  store i64 %627, i64* %RAX, align 8, !tbaa !2428
  %628 = add i64 %622, -32
  %629 = add i64 %620, 469
  store i64 %629, i64* %PC, align 8
  %630 = inttoptr i64 %628 to i64*
  %631 = load i64, i64* %630, align 8
  store i64 %631, i64* %RCX, align 8, !tbaa !2428
  %632 = add i64 %620, 471
  store i64 %632, i64* %PC, align 8
  %633 = inttoptr i64 %631 to i32*
  store i32 %626, i32* %633, align 4
  %.pre8 = load i64, i64* %PC, align 8
  %.pre9 = load i64, i64* %RBP, align 8
  br label %block_401c18

block_4019b7:                                     ; preds = %block_401980
  %634 = add i64 %111, -44
  %635 = add i64 %127, 7
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %634 to i32*
  store i32 0, i32* %636, align 4
  %637 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %639 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %640 = getelementptr inbounds i8, i8* %637, i64 4
  %641 = bitcast i8* %640 to i32*
  %642 = bitcast i64* %638 to i32*
  %643 = getelementptr inbounds i8, i8* %637, i64 12
  %644 = bitcast i8* %643 to i32*
  %645 = bitcast %union.VectorReg* %9 to i8*
  %646 = getelementptr inbounds i8, i8* %645, i64 4
  %647 = bitcast i8* %646 to float*
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %649 = bitcast i64* %648 to float*
  %650 = getelementptr inbounds i8, i8* %645, i64 12
  %651 = bitcast i8* %650 to float*
  %652 = bitcast %union.VectorReg* %9 to <2 x float>*
  %653 = bitcast %union.VectorReg* %9 to double*
  %654 = bitcast [32 x %union.VectorReg]* %8 to double*
  %655 = bitcast i64* %638 to double*
  %656 = bitcast [32 x %union.VectorReg]* %8 to float*
  %657 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %658 = bitcast i8* %640 to float*
  %659 = bitcast i64* %638 to float*
  %660 = bitcast i8* %643 to float*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4019be

block_401ab4:                                     ; preds = %block_401a52, %block_401a46
  %661 = phi i64 [ %.pre4, %block_401a52 ], [ %322, %block_401a46 ]
  %662 = phi i64 [ %.pre3, %block_401a52 ], [ %356, %block_401a46 ]
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %663 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 72) to i64*), align 8
  %664 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %663, i64* %664, align 1, !tbaa !2454
  store double 0.000000e+00, double* %655, align 1, !tbaa !2454
  %665 = add i64 %661, -8
  %666 = add i64 %662, 17
  store i64 %666, i64* %PC, align 8
  %667 = inttoptr i64 %665 to i64*
  %668 = load i64, i64* %667, align 8
  store i64 %668, i64* %RAX, align 8, !tbaa !2428
  %669 = add i64 %661, -12
  %670 = add i64 %662, 20
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %669 to i32*
  %672 = load i32, i32* %671, align 4
  %673 = zext i32 %672 to i64
  store i64 %673, i64* %RCX, align 8, !tbaa !2428
  %674 = add i64 %661, -44
  %675 = add i64 %662, 24
  store i64 %675, i64* %PC, align 8
  %676 = inttoptr i64 %674 to i32*
  %677 = load i32, i32* %676, align 4
  %678 = sext i32 %672 to i64
  %679 = sext i32 %677 to i64
  %680 = mul nsw i64 %679, %678
  %681 = trunc i64 %680 to i32
  %682 = and i64 %680, 4294967295
  store i64 %682, i64* %RCX, align 8, !tbaa !2428
  %683 = shl i64 %680, 32
  %684 = ashr exact i64 %683, 32
  %685 = icmp ne i64 %684, %680
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %19, align 1, !tbaa !2432
  %687 = and i32 %681, 255
  %688 = tail call i32 @llvm.ctpop.i32(i32 %687) #8
  %689 = trunc i32 %688 to i8
  %690 = and i8 %689, 1
  %691 = xor i8 %690, 1
  store i8 %691, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %692 = lshr i32 %681, 31
  %693 = trunc i32 %692 to i8
  store i8 %693, i8* %37, align 1, !tbaa !2448
  store i8 %686, i8* %43, align 1, !tbaa !2449
  %694 = add i64 %662, 27
  store i64 %694, i64* %PC, align 8
  %695 = load i32, i32* %676, align 4
  %696 = add i32 %695, %681
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RCX, align 8, !tbaa !2428
  %698 = icmp ult i32 %696, %681
  %699 = icmp ult i32 %696, %695
  %700 = or i1 %698, %699
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %19, align 1, !tbaa !2432
  %702 = and i32 %696, 255
  %703 = tail call i32 @llvm.ctpop.i32(i32 %702) #8
  %704 = trunc i32 %703 to i8
  %705 = and i8 %704, 1
  %706 = xor i8 %705, 1
  store i8 %706, i8* %26, align 1, !tbaa !2446
  %707 = xor i32 %695, %681
  %708 = xor i32 %707, %696
  %709 = lshr i32 %708, 4
  %710 = trunc i32 %709 to i8
  %711 = and i8 %710, 1
  store i8 %711, i8* %31, align 1, !tbaa !2450
  %712 = icmp eq i32 %696, 0
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %34, align 1, !tbaa !2447
  %714 = lshr i32 %696, 31
  %715 = trunc i32 %714 to i8
  store i8 %715, i8* %37, align 1, !tbaa !2448
  %716 = lshr i32 %695, 31
  %717 = xor i32 %714, %692
  %718 = xor i32 %714, %716
  %719 = add nuw nsw i32 %717, %718
  %720 = icmp eq i32 %719, 2
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %43, align 1, !tbaa !2449
  %722 = sext i32 %696 to i64
  store i64 %722, i64* %RSI, align 8, !tbaa !2428
  %723 = shl nsw i64 %722, 2
  %724 = add i64 %723, %668
  %725 = add i64 %662, 35
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to i32*
  %727 = load i32, i32* %726, align 4
  store i32 %727, i32* %1429, align 1, !tbaa !2452
  store float 0.000000e+00, float* %647, align 1, !tbaa !2452
  store float 0.000000e+00, float* %649, align 1, !tbaa !2452
  store float 0.000000e+00, float* %651, align 1, !tbaa !2452
  %728 = load <2 x float>, <2 x float>* %652, align 1
  %729 = extractelement <2 x float> %728, i32 0
  %730 = fpext float %729 to double
  store double %730, double* %653, align 1, !tbaa !2454
  %731 = bitcast i64 %663 to double
  %732 = bitcast i64* %638 to <2 x i32>*
  %733 = fdiv double %731, %730
  %734 = bitcast double %733 to <2 x i32>
  %735 = fptrunc double %733 to float
  store float %735, float* %656, align 1, !tbaa !2452
  %736 = extractelement <2 x i32> %734, i32 1
  store i32 %736, i32* %641, align 1, !tbaa !2452
  store i32 0, i32* %642, align 1, !tbaa !2452
  store i32 0, i32* %644, align 1, !tbaa !2452
  %737 = load i64, i64* %RBP, align 8
  %738 = add i64 %737, -36
  %739 = add i64 %662, 52
  store i64 %739, i64* %PC, align 8
  %740 = load <2 x float>, <2 x float>* %657, align 1
  %741 = extractelement <2 x float> %740, i32 0
  %742 = inttoptr i64 %738 to float*
  store float %741, float* %742, align 4
  %743 = load i64, i64* %RBP, align 8
  %744 = add i64 %743, -16
  %745 = load i64, i64* %PC, align 8
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %744 to i32*
  %748 = load i32, i32* %747, align 4
  %749 = zext i32 %748 to i64
  store i64 %749, i64* %RCX, align 8, !tbaa !2428
  %750 = add i64 %743, -44
  %751 = add i64 %745, 6
  store i64 %751, i64* %PC, align 8
  %752 = inttoptr i64 %750 to i32*
  %753 = load i32, i32* %752, align 4
  %754 = add i32 %753, 1
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RDI, align 8, !tbaa !2428
  %756 = lshr i32 %754, 31
  %757 = sub i32 %748, %754
  %758 = zext i32 %757 to i64
  store i64 %758, i64* %RCX, align 8, !tbaa !2428
  %759 = icmp ult i32 %748, %754
  %760 = zext i1 %759 to i8
  store i8 %760, i8* %19, align 1, !tbaa !2432
  %761 = and i32 %757, 255
  %762 = tail call i32 @llvm.ctpop.i32(i32 %761) #8
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  store i8 %765, i8* %26, align 1, !tbaa !2446
  %766 = xor i32 %754, %748
  %767 = xor i32 %766, %757
  %768 = lshr i32 %767, 4
  %769 = trunc i32 %768 to i8
  %770 = and i8 %769, 1
  store i8 %770, i8* %31, align 1, !tbaa !2450
  %771 = icmp eq i32 %757, 0
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %34, align 1, !tbaa !2447
  %773 = lshr i32 %757, 31
  %774 = trunc i32 %773 to i8
  store i8 %774, i8* %37, align 1, !tbaa !2448
  %775 = lshr i32 %748, 31
  %776 = xor i32 %756, %775
  %777 = xor i32 %773, %775
  %778 = add nuw nsw i32 %777, %776
  %779 = icmp eq i32 %778, 2
  %780 = zext i1 %779 to i8
  store i8 %780, i8* %43, align 1, !tbaa !2449
  %781 = add i64 %743, -36
  %782 = add i64 %745, 16
  store i64 %782, i64* %PC, align 8
  %783 = inttoptr i64 %781 to i32*
  %784 = load i32, i32* %783, align 4
  store i32 %784, i32* %639, align 1, !tbaa !2452
  store float 0.000000e+00, float* %658, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %660, align 1, !tbaa !2452
  %785 = add i64 %743, -8
  %786 = add i64 %745, 20
  store i64 %786, i64* %PC, align 8
  %787 = inttoptr i64 %785 to i64*
  %788 = load i64, i64* %787, align 8
  store i64 %788, i64* %RAX, align 8, !tbaa !2428
  %789 = add i64 %743, -12
  %790 = add i64 %745, 23
  store i64 %790, i64* %PC, align 8
  %791 = inttoptr i64 %789 to i32*
  %792 = load i32, i32* %791, align 4
  %793 = zext i32 %792 to i64
  store i64 %793, i64* %RDI, align 8, !tbaa !2428
  %794 = add i64 %745, 27
  store i64 %794, i64* %PC, align 8
  %795 = load i32, i32* %752, align 4
  %796 = sext i32 %792 to i64
  %797 = sext i32 %795 to i64
  %798 = mul nsw i64 %797, %796
  %799 = trunc i64 %798 to i32
  %800 = and i64 %798, 4294967295
  store i64 %800, i64* %RDI, align 8, !tbaa !2428
  %801 = shl i64 %798, 32
  %802 = ashr exact i64 %801, 32
  %803 = icmp ne i64 %802, %798
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %19, align 1, !tbaa !2432
  %805 = and i32 %799, 255
  %806 = tail call i32 @llvm.ctpop.i32(i32 %805) #8
  %807 = trunc i32 %806 to i8
  %808 = and i8 %807, 1
  %809 = xor i8 %808, 1
  store i8 %809, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %810 = lshr i32 %799, 31
  %811 = trunc i32 %810 to i8
  store i8 %811, i8* %37, align 1, !tbaa !2448
  store i8 %804, i8* %43, align 1, !tbaa !2449
  %812 = add i64 %745, 30
  store i64 %812, i64* %PC, align 8
  %813 = load i32, i32* %752, align 4
  %814 = add i32 %813, %799
  %815 = add i32 %814, 1
  %816 = sext i32 %815 to i64
  %817 = shl nsw i64 %816, 2
  %818 = lshr i64 %816, 61
  %819 = and i64 %818, 1
  %820 = add i64 %817, %788
  store i64 %820, i64* %RAX, align 8, !tbaa !2428
  %821 = icmp ult i64 %820, %788
  %822 = icmp ult i64 %820, %817
  %823 = or i1 %821, %822
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %19, align 1, !tbaa !2432
  %825 = trunc i64 %820 to i32
  %826 = and i32 %825, 255
  %827 = tail call i32 @llvm.ctpop.i32(i32 %826) #8
  %828 = trunc i32 %827 to i8
  %829 = and i8 %828, 1
  %830 = xor i8 %829, 1
  store i8 %830, i8* %26, align 1, !tbaa !2446
  %831 = xor i64 %817, %788
  %832 = xor i64 %831, %820
  %833 = lshr i64 %832, 4
  %834 = trunc i64 %833 to i8
  %835 = and i8 %834, 1
  store i8 %835, i8* %31, align 1, !tbaa !2450
  %836 = icmp eq i64 %820, 0
  %837 = zext i1 %836 to i8
  store i8 %837, i8* %34, align 1, !tbaa !2447
  %838 = lshr i64 %820, 63
  %839 = trunc i64 %838 to i8
  store i8 %839, i8* %37, align 1, !tbaa !2448
  %840 = lshr i64 %788, 63
  %841 = xor i64 %838, %840
  %842 = xor i64 %838, %819
  %843 = add nuw nsw i64 %841, %842
  %844 = icmp eq i64 %843, 2
  %845 = zext i1 %844 to i8
  store i8 %845, i8* %43, align 1, !tbaa !2449
  %846 = load i32, i32* %ECX, align 4
  %847 = zext i32 %846 to i64
  store i64 %847, i64* %RDI, align 8, !tbaa !2428
  store i64 %820, i64* %RSI, align 8, !tbaa !2428
  %848 = add i64 %745, 4744
  %849 = add i64 %745, 53
  %850 = load i64, i64* %RSP, align 8, !tbaa !2428
  %851 = add i64 %850, -8
  %852 = inttoptr i64 %851 to i64*
  store i64 %849, i64* %852, align 8
  store i64 %851, i64* %RSP, align 8, !tbaa !2428
  store i64 %848, i64* %PC, align 8, !tbaa !2428
  %853 = tail call %struct.Memory* @sub_402d70_dscal_renamed_(%struct.State* nonnull %0, i64 %848, %struct.Memory* %1460)
  %854 = load i64, i64* %RBP, align 8
  %855 = add i64 %854, -48
  %856 = load i64, i64* %PC, align 8
  %857 = add i64 %856, 3
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %855 to i32*
  %859 = load i32, i32* %858, align 4
  %860 = zext i32 %859 to i64
  store i64 %860, i64* %RCX, align 8, !tbaa !2428
  %861 = add i64 %854, -40
  %862 = add i64 %856, 6
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i32*
  store i32 %859, i32* %863, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401b23

block_401c30:                                     ; preds = %block_401980.block_401c30_crit_edge, %block_401c2b
  %.pre-phi65 = phi double* [ %.pre64, %block_401980.block_401c30_crit_edge ], [ %654, %block_401c2b ]
  %.pre-phi61 = phi double* [ %.pre60, %block_401980.block_401c30_crit_edge ], [ %653, %block_401c2b ]
  %.pre-phi59 = phi <2 x float>* [ %.pre58, %block_401980.block_401c30_crit_edge ], [ %652, %block_401c2b ]
  %.pre-phi55 = phi float* [ %.pre54, %block_401980.block_401c30_crit_edge ], [ %651, %block_401c2b ]
  %.pre-phi51 = phi float* [ %.pre50, %block_401980.block_401c30_crit_edge ], [ %649, %block_401c2b ]
  %.pre-phi47 = phi float* [ %.pre46, %block_401980.block_401c30_crit_edge ], [ %647, %block_401c2b ]
  %.pre-phi39 = phi i32* [ %.pre38, %block_401980.block_401c30_crit_edge ], [ %644, %block_401c2b ]
  %.pre-phi35 = phi i32* [ %.pre34, %block_401980.block_401c30_crit_edge ], [ %642, %block_401c2b ]
  %.pre-phi33 = phi i32* [ %.pre32, %block_401980.block_401c30_crit_edge ], [ %641, %block_401c2b ]
  %.pre-phi29 = phi i32* [ %.pre28, %block_401980.block_401c30_crit_edge ], [ %639, %block_401c2b ]
  %864 = phi i64 [ %111, %block_401980.block_401c30_crit_edge ], [ %1134, %block_401c2b ]
  %865 = phi i64 [ %127, %block_401980.block_401c30_crit_edge ], [ %1171, %block_401c2b ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_401980.block_401c30_crit_edge ], [ %MEMORY.3, %block_401c2b ]
  store i32 0, i32* %.pre-phi29, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi33, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi35, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi39, align 1, !tbaa !2451
  %866 = add i64 %864, -16
  %867 = add i64 %865, 6
  store i64 %867, i64* %PC, align 8
  %868 = inttoptr i64 %866 to i32*
  %869 = load i32, i32* %868, align 4
  %870 = add i32 %869, -1
  %871 = zext i32 %870 to i64
  store i64 %871, i64* %RAX, align 8, !tbaa !2428
  %872 = icmp eq i32 %869, 0
  %873 = zext i1 %872 to i8
  store i8 %873, i8* %19, align 1, !tbaa !2432
  %874 = and i32 %870, 255
  %875 = tail call i32 @llvm.ctpop.i32(i32 %874) #8
  %876 = trunc i32 %875 to i8
  %877 = and i8 %876, 1
  %878 = xor i8 %877, 1
  store i8 %878, i8* %26, align 1, !tbaa !2446
  %879 = xor i32 %869, %870
  %880 = lshr i32 %879, 4
  %881 = trunc i32 %880 to i8
  %882 = and i8 %881, 1
  store i8 %882, i8* %31, align 1, !tbaa !2450
  %883 = icmp eq i32 %870, 0
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %34, align 1, !tbaa !2447
  %885 = lshr i32 %870, 31
  %886 = trunc i32 %885 to i8
  store i8 %886, i8* %37, align 1, !tbaa !2448
  %887 = lshr i32 %869, 31
  %888 = xor i32 %885, %887
  %889 = add nuw nsw i32 %888, %887
  %890 = icmp eq i32 %889, 2
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %43, align 1, !tbaa !2449
  %892 = add i64 %864, -24
  %893 = add i64 %865, 13
  store i64 %893, i64* %PC, align 8
  %894 = inttoptr i64 %892 to i64*
  %895 = load i64, i64* %894, align 8
  store i64 %895, i64* %RCX, align 8, !tbaa !2428
  %896 = add i64 %865, 16
  store i64 %896, i64* %PC, align 8
  %897 = load i32, i32* %868, align 4
  %898 = add i32 %897, -1
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RDX, align 8, !tbaa !2428
  %900 = icmp eq i32 %897, 0
  %901 = zext i1 %900 to i8
  store i8 %901, i8* %19, align 1, !tbaa !2432
  %902 = and i32 %898, 255
  %903 = tail call i32 @llvm.ctpop.i32(i32 %902) #8
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = xor i8 %905, 1
  store i8 %906, i8* %26, align 1, !tbaa !2446
  %907 = xor i32 %897, %898
  %908 = lshr i32 %907, 4
  %909 = trunc i32 %908 to i8
  %910 = and i8 %909, 1
  store i8 %910, i8* %31, align 1, !tbaa !2450
  %911 = icmp eq i32 %898, 0
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %34, align 1, !tbaa !2447
  %913 = lshr i32 %898, 31
  %914 = trunc i32 %913 to i8
  store i8 %914, i8* %37, align 1, !tbaa !2448
  %915 = lshr i32 %897, 31
  %916 = xor i32 %913, %915
  %917 = add nuw nsw i32 %916, %915
  %918 = icmp eq i32 %917, 2
  %919 = zext i1 %918 to i8
  store i8 %919, i8* %43, align 1, !tbaa !2449
  %920 = sext i32 %898 to i64
  store i64 %920, i64* %RSI, align 8, !tbaa !2428
  %921 = shl nsw i64 %920, 2
  %922 = add i64 %921, %895
  %923 = add i64 %865, 25
  store i64 %923, i64* %PC, align 8
  %924 = inttoptr i64 %922 to i32*
  store i32 %870, i32* %924, align 4
  %925 = load i64, i64* %RBP, align 8
  %926 = add i64 %925, -8
  %927 = load i64, i64* %PC, align 8
  %928 = add i64 %927, 4
  store i64 %928, i64* %PC, align 8
  %929 = inttoptr i64 %926 to i64*
  %930 = load i64, i64* %929, align 8
  store i64 %930, i64* %RCX, align 8, !tbaa !2428
  %931 = add i64 %925, -12
  %932 = add i64 %927, 7
  store i64 %932, i64* %PC, align 8
  %933 = inttoptr i64 %931 to i32*
  %934 = load i32, i32* %933, align 4
  %935 = zext i32 %934 to i64
  store i64 %935, i64* %RAX, align 8, !tbaa !2428
  %936 = add i64 %925, -16
  %937 = add i64 %927, 10
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %936 to i32*
  %939 = load i32, i32* %938, align 4
  %940 = add i32 %939, -1
  %941 = zext i32 %940 to i64
  store i64 %941, i64* %RDX, align 8, !tbaa !2428
  %942 = sext i32 %934 to i64
  %943 = sext i32 %940 to i64
  %944 = mul nsw i64 %943, %942
  %945 = trunc i64 %944 to i32
  %946 = and i64 %944, 4294967295
  store i64 %946, i64* %RAX, align 8, !tbaa !2428
  %947 = shl i64 %944, 32
  %948 = ashr exact i64 %947, 32
  %949 = icmp ne i64 %948, %944
  %950 = zext i1 %949 to i8
  store i8 %950, i8* %19, align 1, !tbaa !2432
  %951 = and i32 %945, 255
  %952 = tail call i32 @llvm.ctpop.i32(i32 %951) #8
  %953 = trunc i32 %952 to i8
  %954 = and i8 %953, 1
  %955 = xor i8 %954, 1
  store i8 %955, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %956 = lshr i32 %945, 31
  %957 = trunc i32 %956 to i8
  store i8 %957, i8* %37, align 1, !tbaa !2448
  store i8 %950, i8* %43, align 1, !tbaa !2449
  %958 = add i64 %927, 19
  store i64 %958, i64* %PC, align 8
  %959 = load i32, i32* %938, align 4
  %960 = add i32 %959, -1
  %961 = zext i32 %960 to i64
  store i64 %961, i64* %RDX, align 8, !tbaa !2428
  %962 = lshr i32 %960, 31
  %963 = add i32 %960, %945
  %964 = zext i32 %963 to i64
  store i64 %964, i64* %RAX, align 8, !tbaa !2428
  %965 = icmp ult i32 %963, %945
  %966 = icmp ult i32 %963, %960
  %967 = or i1 %965, %966
  %968 = zext i1 %967 to i8
  store i8 %968, i8* %19, align 1, !tbaa !2432
  %969 = and i32 %963, 255
  %970 = tail call i32 @llvm.ctpop.i32(i32 %969) #8
  %971 = trunc i32 %970 to i8
  %972 = and i8 %971, 1
  %973 = xor i8 %972, 1
  store i8 %973, i8* %26, align 1, !tbaa !2446
  %974 = xor i64 %961, %944
  %975 = trunc i64 %974 to i32
  %976 = xor i32 %975, %963
  %977 = lshr i32 %976, 4
  %978 = trunc i32 %977 to i8
  %979 = and i8 %978, 1
  store i8 %979, i8* %31, align 1, !tbaa !2450
  %980 = icmp eq i32 %963, 0
  %981 = zext i1 %980 to i8
  store i8 %981, i8* %34, align 1, !tbaa !2447
  %982 = lshr i32 %963, 31
  %983 = trunc i32 %982 to i8
  store i8 %983, i8* %37, align 1, !tbaa !2448
  %984 = xor i32 %982, %956
  %985 = xor i32 %982, %962
  %986 = add nuw nsw i32 %984, %985
  %987 = icmp eq i32 %986, 2
  %988 = zext i1 %987 to i8
  store i8 %988, i8* %43, align 1, !tbaa !2449
  %989 = sext i32 %963 to i64
  store i64 %989, i64* %RSI, align 8, !tbaa !2428
  %990 = shl nsw i64 %989, 2
  %991 = add i64 %990, %930
  %992 = add i64 %927, 32
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to i32*
  %994 = load i32, i32* %993, align 4
  %995 = bitcast %union.VectorReg* %9 to i32*
  store i32 %994, i32* %995, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi47, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi51, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi55, align 1, !tbaa !2452
  %996 = load <2 x float>, <2 x float>* %.pre-phi59, align 1
  %997 = extractelement <2 x float> %996, i32 0
  %998 = fpext float %997 to double
  store double %998, double* %.pre-phi61, align 1, !tbaa !2454
  %999 = add i64 %927, 40
  store i64 %999, i64* %PC, align 8
  %1000 = load double, double* %.pre-phi65, align 1
  %1001 = fcmp uno double %998, %1000
  br i1 %1001, label %1002, label %1012

; <label>:1002:                                   ; preds = %block_401c30
  %1003 = fadd double %998, %1000
  %1004 = bitcast double %1003 to i64
  %1005 = and i64 %1004, 9221120237041090560
  %1006 = icmp eq i64 %1005, 9218868437227405312
  %1007 = and i64 %1004, 2251799813685247
  %1008 = icmp ne i64 %1007, 0
  %1009 = and i1 %1006, %1008
  br i1 %1009, label %1010, label %1018

; <label>:1010:                                   ; preds = %1002
  %1011 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %999, %struct.Memory* %MEMORY.2) #9
  %.pre10 = load i64, i64* %PC, align 8
  %.pre11 = load i8, i8* %34, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:1012:                                   ; preds = %block_401c30
  %1013 = fcmp ogt double %998, %1000
  br i1 %1013, label %1018, label %1014

; <label>:1014:                                   ; preds = %1012
  %1015 = fcmp olt double %998, %1000
  br i1 %1015, label %1018, label %1016

; <label>:1016:                                   ; preds = %1014
  %1017 = fcmp oeq double %998, %1000
  br i1 %1017, label %1018, label %1022

; <label>:1018:                                   ; preds = %1016, %1014, %1012, %1002
  %1019 = phi i8 [ 0, %1012 ], [ 0, %1014 ], [ 1, %1016 ], [ 1, %1002 ]
  %1020 = phi i8 [ 0, %1012 ], [ 0, %1014 ], [ 0, %1016 ], [ 1, %1002 ]
  %1021 = phi i8 [ 0, %1012 ], [ 1, %1014 ], [ 0, %1016 ], [ 1, %1002 ]
  store i8 %1019, i8* %34, align 1, !tbaa !2456
  store i8 %1020, i8* %26, align 1, !tbaa !2456
  store i8 %1021, i8* %19, align 1, !tbaa !2456
  br label %1022

; <label>:1022:                                   ; preds = %1018, %1016
  %1023 = phi i8 [ %1019, %1018 ], [ %981, %1016 ]
  store i8 0, i8* %43, align 1, !tbaa !2456
  store i8 0, i8* %37, align 1, !tbaa !2456
  store i8 0, i8* %31, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %1022, %1010
  %1024 = phi i8 [ %.pre11, %1010 ], [ %1023, %1022 ]
  %1025 = phi i64 [ %.pre10, %1010 ], [ %999, %1022 ]
  %1026 = phi %struct.Memory* [ %1011, %1010 ], [ %MEMORY.2, %1022 ]
  %1027 = icmp eq i8 %1024, 0
  %.v72 = select i1 %1027, i64 24, i64 6
  %1028 = add i64 %1025, %.v72
  store i64 %1028, i64* %PC, align 8, !tbaa !2428
  br i1 %1027, label %block_401c89, label %block_401c77

block_401b2f:                                     ; preds = %block_401b23
  %1029 = add i64 %1464, -8
  %1030 = add i64 %1500, 4
  store i64 %1030, i64* %PC, align 8
  %1031 = inttoptr i64 %1029 to i64*
  %1032 = load i64, i64* %1031, align 8
  store i64 %1032, i64* %RAX, align 8, !tbaa !2428
  %1033 = add i64 %1464, -12
  %1034 = add i64 %1500, 7
  store i64 %1034, i64* %PC, align 8
  %1035 = inttoptr i64 %1033 to i32*
  %1036 = load i32, i32* %1035, align 4
  %1037 = zext i32 %1036 to i64
  store i64 %1037, i64* %RCX, align 8, !tbaa !2428
  %1038 = add i64 %1500, 11
  store i64 %1038, i64* %PC, align 8
  %1039 = load i32, i32* %1467, align 4
  %1040 = sext i32 %1036 to i64
  %1041 = sext i32 %1039 to i64
  %1042 = mul nsw i64 %1041, %1040
  %1043 = trunc i64 %1042 to i32
  %1044 = and i64 %1042, 4294967295
  store i64 %1044, i64* %RCX, align 8, !tbaa !2428
  %1045 = shl i64 %1042, 32
  %1046 = ashr exact i64 %1045, 32
  %1047 = icmp ne i64 %1046, %1042
  %1048 = zext i1 %1047 to i8
  store i8 %1048, i8* %19, align 1, !tbaa !2432
  %1049 = and i32 %1043, 255
  %1050 = tail call i32 @llvm.ctpop.i32(i32 %1049) #8
  %1051 = trunc i32 %1050 to i8
  %1052 = and i8 %1051, 1
  %1053 = xor i8 %1052, 1
  store i8 %1053, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1054 = lshr i32 %1043, 31
  %1055 = trunc i32 %1054 to i8
  store i8 %1055, i8* %37, align 1, !tbaa !2448
  store i8 %1048, i8* %43, align 1, !tbaa !2449
  %1056 = add i64 %1464, -52
  %1057 = add i64 %1500, 14
  store i64 %1057, i64* %PC, align 8
  %1058 = inttoptr i64 %1056 to i32*
  %1059 = load i32, i32* %1058, align 4
  %1060 = add i32 %1059, %1043
  %1061 = zext i32 %1060 to i64
  store i64 %1061, i64* %RCX, align 8, !tbaa !2428
  %1062 = icmp ult i32 %1060, %1043
  %1063 = icmp ult i32 %1060, %1059
  %1064 = or i1 %1062, %1063
  %1065 = zext i1 %1064 to i8
  store i8 %1065, i8* %19, align 1, !tbaa !2432
  %1066 = and i32 %1060, 255
  %1067 = tail call i32 @llvm.ctpop.i32(i32 %1066) #8
  %1068 = trunc i32 %1067 to i8
  %1069 = and i8 %1068, 1
  %1070 = xor i8 %1069, 1
  store i8 %1070, i8* %26, align 1, !tbaa !2446
  %1071 = xor i32 %1059, %1043
  %1072 = xor i32 %1071, %1060
  %1073 = lshr i32 %1072, 4
  %1074 = trunc i32 %1073 to i8
  %1075 = and i8 %1074, 1
  store i8 %1075, i8* %31, align 1, !tbaa !2450
  %1076 = icmp eq i32 %1060, 0
  %1077 = zext i1 %1076 to i8
  store i8 %1077, i8* %34, align 1, !tbaa !2447
  %1078 = lshr i32 %1060, 31
  %1079 = trunc i32 %1078 to i8
  store i8 %1079, i8* %37, align 1, !tbaa !2448
  %1080 = lshr i32 %1059, 31
  %1081 = xor i32 %1078, %1054
  %1082 = xor i32 %1078, %1080
  %1083 = add nuw nsw i32 %1081, %1082
  %1084 = icmp eq i32 %1083, 2
  %1085 = zext i1 %1084 to i8
  store i8 %1085, i8* %43, align 1, !tbaa !2449
  %1086 = sext i32 %1060 to i64
  store i64 %1086, i64* %RDX, align 8, !tbaa !2428
  %1087 = shl nsw i64 %1086, 2
  %1088 = add i64 %1087, %1032
  %1089 = add i64 %1500, 22
  store i64 %1089, i64* %PC, align 8
  %1090 = inttoptr i64 %1088 to i32*
  %1091 = load i32, i32* %1090, align 4
  store i32 %1091, i32* %639, align 1, !tbaa !2452
  store float 0.000000e+00, float* %658, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %660, align 1, !tbaa !2452
  %1092 = add i64 %1464, -36
  %1093 = add i64 %1500, 27
  store i64 %1093, i64* %PC, align 8
  %1094 = load <2 x float>, <2 x float>* %657, align 1
  %1095 = extractelement <2 x float> %1094, i32 0
  %1096 = inttoptr i64 %1092 to float*
  store float %1095, float* %1096, align 4
  %1097 = load i64, i64* %RBP, align 8
  %1098 = add i64 %1097, -52
  %1099 = load i64, i64* %PC, align 8
  %1100 = add i64 %1099, 3
  store i64 %1100, i64* %PC, align 8
  %1101 = inttoptr i64 %1098 to i32*
  %1102 = load i32, i32* %1101, align 4
  %1103 = zext i32 %1102 to i64
  store i64 %1103, i64* %RCX, align 8, !tbaa !2428
  %1104 = add i64 %1097, -44
  %1105 = add i64 %1099, 6
  store i64 %1105, i64* %PC, align 8
  %1106 = inttoptr i64 %1104 to i32*
  %1107 = load i32, i32* %1106, align 4
  %1108 = sub i32 %1102, %1107
  %1109 = icmp ult i32 %1102, %1107
  %1110 = zext i1 %1109 to i8
  store i8 %1110, i8* %19, align 1, !tbaa !2432
  %1111 = and i32 %1108, 255
  %1112 = tail call i32 @llvm.ctpop.i32(i32 %1111) #8
  %1113 = trunc i32 %1112 to i8
  %1114 = and i8 %1113, 1
  %1115 = xor i8 %1114, 1
  store i8 %1115, i8* %26, align 1, !tbaa !2446
  %1116 = xor i32 %1107, %1102
  %1117 = xor i32 %1116, %1108
  %1118 = lshr i32 %1117, 4
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  store i8 %1120, i8* %31, align 1, !tbaa !2450
  %1121 = icmp eq i32 %1108, 0
  %1122 = zext i1 %1121 to i8
  store i8 %1122, i8* %34, align 1, !tbaa !2447
  %1123 = lshr i32 %1108, 31
  %1124 = trunc i32 %1123 to i8
  store i8 %1124, i8* %37, align 1, !tbaa !2448
  %1125 = lshr i32 %1102, 31
  %1126 = lshr i32 %1107, 31
  %1127 = xor i32 %1126, %1125
  %1128 = xor i32 %1123, %1125
  %1129 = add nuw nsw i32 %1128, %1127
  %1130 = icmp eq i32 %1129, 2
  %1131 = zext i1 %1130 to i8
  store i8 %1131, i8* %43, align 1, !tbaa !2449
  %.v71 = select i1 %1121, i64 83, i64 12
  %1132 = add i64 %1099, %.v71
  store i64 %1132, i64* %PC, align 8, !tbaa !2428
  br i1 %1121, label %block_401b9d, label %block_401b56

block_4019be:                                     ; preds = %block_401c18, %block_4019b7
  %1133 = phi i64 [ %.pre, %block_4019b7 ], [ %1753, %block_401c18 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4019b7 ], [ %MEMORY.6, %block_401c18 ]
  %1134 = load i64, i64* %RBP, align 8
  %1135 = add i64 %1134, -44
  %1136 = add i64 %1133, 3
  store i64 %1136, i64* %PC, align 8
  %1137 = inttoptr i64 %1135 to i32*
  %1138 = load i32, i32* %1137, align 4
  %1139 = zext i32 %1138 to i64
  store i64 %1139, i64* %RAX, align 8, !tbaa !2428
  %1140 = add i64 %1134, -56
  %1141 = add i64 %1133, 6
  store i64 %1141, i64* %PC, align 8
  %1142 = inttoptr i64 %1140 to i32*
  %1143 = load i32, i32* %1142, align 4
  %1144 = sub i32 %1138, %1143
  %1145 = icmp ult i32 %1138, %1143
  %1146 = zext i1 %1145 to i8
  store i8 %1146, i8* %19, align 1, !tbaa !2432
  %1147 = and i32 %1144, 255
  %1148 = tail call i32 @llvm.ctpop.i32(i32 %1147) #8
  %1149 = trunc i32 %1148 to i8
  %1150 = and i8 %1149, 1
  %1151 = xor i8 %1150, 1
  store i8 %1151, i8* %26, align 1, !tbaa !2446
  %1152 = xor i32 %1143, %1138
  %1153 = xor i32 %1152, %1144
  %1154 = lshr i32 %1153, 4
  %1155 = trunc i32 %1154 to i8
  %1156 = and i8 %1155, 1
  store i8 %1156, i8* %31, align 1, !tbaa !2450
  %1157 = icmp eq i32 %1144, 0
  %1158 = zext i1 %1157 to i8
  store i8 %1158, i8* %34, align 1, !tbaa !2447
  %1159 = lshr i32 %1144, 31
  %1160 = trunc i32 %1159 to i8
  store i8 %1160, i8* %37, align 1, !tbaa !2448
  %1161 = lshr i32 %1138, 31
  %1162 = lshr i32 %1143, 31
  %1163 = xor i32 %1162, %1161
  %1164 = xor i32 %1159, %1161
  %1165 = add nuw nsw i32 %1164, %1163
  %1166 = icmp eq i32 %1165, 2
  %1167 = zext i1 %1166 to i8
  store i8 %1167, i8* %43, align 1, !tbaa !2449
  %1168 = icmp ne i8 %1160, 0
  %1169 = xor i1 %1168, %1166
  %.v66 = select i1 %1169, i64 12, i64 621
  %1170 = add i64 %1133, %.v66
  %1171 = add i64 %1170, 5
  store i64 %1171, i64* %PC, align 8
  br i1 %1169, label %block_4019ca, label %block_401c2b

block_401c2b:                                     ; preds = %block_4019be
  store i64 %1171, i64* %PC, align 8, !tbaa !2428
  br label %block_401c30

block_4019ca:                                     ; preds = %block_4019be
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %1172 = add i64 %1170, 8
  store i64 %1172, i64* %PC, align 8
  %1173 = load i32, i32* %1137, align 4
  %1174 = add i32 %1173, 1
  %1175 = zext i32 %1174 to i64
  store i64 %1175, i64* %RAX, align 8, !tbaa !2428
  %1176 = icmp eq i32 %1173, -1
  %1177 = icmp eq i32 %1174, 0
  %1178 = or i1 %1176, %1177
  %1179 = zext i1 %1178 to i8
  store i8 %1179, i8* %19, align 1, !tbaa !2432
  %1180 = and i32 %1174, 255
  %1181 = tail call i32 @llvm.ctpop.i32(i32 %1180) #8
  %1182 = trunc i32 %1181 to i8
  %1183 = and i8 %1182, 1
  %1184 = xor i8 %1183, 1
  store i8 %1184, i8* %26, align 1, !tbaa !2446
  %1185 = xor i32 %1173, %1174
  %1186 = lshr i32 %1185, 4
  %1187 = trunc i32 %1186 to i8
  %1188 = and i8 %1187, 1
  store i8 %1188, i8* %31, align 1, !tbaa !2450
  %1189 = zext i1 %1177 to i8
  store i8 %1189, i8* %34, align 1, !tbaa !2447
  %1190 = lshr i32 %1174, 31
  %1191 = trunc i32 %1190 to i8
  store i8 %1191, i8* %37, align 1, !tbaa !2448
  %1192 = lshr i32 %1173, 31
  %1193 = xor i32 %1190, %1192
  %1194 = add nuw nsw i32 %1193, %1190
  %1195 = icmp eq i32 %1194, 2
  %1196 = zext i1 %1195 to i8
  store i8 %1196, i8* %43, align 1, !tbaa !2449
  %1197 = add i64 %1134, -48
  %1198 = add i64 %1170, 14
  store i64 %1198, i64* %PC, align 8
  %1199 = inttoptr i64 %1197 to i32*
  store i32 %1174, i32* %1199, align 4
  %1200 = load i64, i64* %RBP, align 8
  %1201 = add i64 %1200, -16
  %1202 = load i64, i64* %PC, align 8
  %1203 = add i64 %1202, 3
  store i64 %1203, i64* %PC, align 8
  %1204 = inttoptr i64 %1201 to i32*
  %1205 = load i32, i32* %1204, align 4
  %1206 = zext i32 %1205 to i64
  store i64 %1206, i64* %RAX, align 8, !tbaa !2428
  %1207 = add i64 %1200, -44
  %1208 = add i64 %1202, 6
  store i64 %1208, i64* %PC, align 8
  %1209 = inttoptr i64 %1207 to i32*
  %1210 = load i32, i32* %1209, align 4
  %1211 = sub i32 %1205, %1210
  %1212 = zext i32 %1211 to i64
  store i64 %1212, i64* %RAX, align 8, !tbaa !2428
  %1213 = icmp ult i32 %1205, %1210
  %1214 = zext i1 %1213 to i8
  store i8 %1214, i8* %19, align 1, !tbaa !2432
  %1215 = and i32 %1211, 255
  %1216 = tail call i32 @llvm.ctpop.i32(i32 %1215) #8
  %1217 = trunc i32 %1216 to i8
  %1218 = and i8 %1217, 1
  %1219 = xor i8 %1218, 1
  store i8 %1219, i8* %26, align 1, !tbaa !2446
  %1220 = xor i32 %1210, %1205
  %1221 = xor i32 %1220, %1211
  %1222 = lshr i32 %1221, 4
  %1223 = trunc i32 %1222 to i8
  %1224 = and i8 %1223, 1
  store i8 %1224, i8* %31, align 1, !tbaa !2450
  %1225 = icmp eq i32 %1211, 0
  %1226 = zext i1 %1225 to i8
  store i8 %1226, i8* %34, align 1, !tbaa !2447
  %1227 = lshr i32 %1211, 31
  %1228 = trunc i32 %1227 to i8
  store i8 %1228, i8* %37, align 1, !tbaa !2448
  %1229 = lshr i32 %1205, 31
  %1230 = lshr i32 %1210, 31
  %1231 = xor i32 %1230, %1229
  %1232 = xor i32 %1227, %1229
  %1233 = add nuw nsw i32 %1232, %1231
  %1234 = icmp eq i32 %1233, 2
  %1235 = zext i1 %1234 to i8
  store i8 %1235, i8* %43, align 1, !tbaa !2449
  %1236 = add i64 %1200, -8
  %1237 = add i64 %1202, 10
  store i64 %1237, i64* %PC, align 8
  %1238 = inttoptr i64 %1236 to i64*
  %1239 = load i64, i64* %1238, align 8
  store i64 %1239, i64* %RCX, align 8, !tbaa !2428
  %1240 = add i64 %1200, -12
  %1241 = add i64 %1202, 13
  store i64 %1241, i64* %PC, align 8
  %1242 = inttoptr i64 %1240 to i32*
  %1243 = load i32, i32* %1242, align 4
  %1244 = zext i32 %1243 to i64
  store i64 %1244, i64* %RSI, align 8, !tbaa !2428
  %1245 = add i64 %1202, 17
  store i64 %1245, i64* %PC, align 8
  %1246 = load i32, i32* %1209, align 4
  %1247 = sext i32 %1243 to i64
  %1248 = sext i32 %1246 to i64
  %1249 = mul nsw i64 %1248, %1247
  %1250 = trunc i64 %1249 to i32
  %1251 = and i64 %1249, 4294967295
  store i64 %1251, i64* %RSI, align 8, !tbaa !2428
  %1252 = shl i64 %1249, 32
  %1253 = ashr exact i64 %1252, 32
  %1254 = icmp ne i64 %1253, %1249
  %1255 = zext i1 %1254 to i8
  store i8 %1255, i8* %19, align 1, !tbaa !2432
  %1256 = and i32 %1250, 255
  %1257 = tail call i32 @llvm.ctpop.i32(i32 %1256) #8
  %1258 = trunc i32 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = xor i8 %1259, 1
  store i8 %1260, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1261 = lshr i32 %1250, 31
  %1262 = trunc i32 %1261 to i8
  store i8 %1262, i8* %37, align 1, !tbaa !2448
  store i8 %1255, i8* %43, align 1, !tbaa !2449
  %1263 = add i64 %1202, 20
  store i64 %1263, i64* %PC, align 8
  %1264 = load i32, i32* %1209, align 4
  %1265 = add i32 %1264, %1250
  %1266 = sext i32 %1265 to i64
  %1267 = shl nsw i64 %1266, 2
  %1268 = lshr i64 %1266, 61
  %1269 = and i64 %1268, 1
  %1270 = add i64 %1267, %1239
  store i64 %1270, i64* %RCX, align 8, !tbaa !2428
  %1271 = icmp ult i64 %1270, %1239
  %1272 = icmp ult i64 %1270, %1267
  %1273 = or i1 %1271, %1272
  %1274 = zext i1 %1273 to i8
  store i8 %1274, i8* %19, align 1, !tbaa !2432
  %1275 = trunc i64 %1270 to i32
  %1276 = and i32 %1275, 255
  %1277 = tail call i32 @llvm.ctpop.i32(i32 %1276) #8
  %1278 = trunc i32 %1277 to i8
  %1279 = and i8 %1278, 1
  %1280 = xor i8 %1279, 1
  store i8 %1280, i8* %26, align 1, !tbaa !2446
  %1281 = xor i64 %1267, %1239
  %1282 = xor i64 %1281, %1270
  %1283 = lshr i64 %1282, 4
  %1284 = trunc i64 %1283 to i8
  %1285 = and i8 %1284, 1
  store i8 %1285, i8* %31, align 1, !tbaa !2450
  %1286 = icmp eq i64 %1270, 0
  %1287 = zext i1 %1286 to i8
  store i8 %1287, i8* %34, align 1, !tbaa !2447
  %1288 = lshr i64 %1270, 63
  %1289 = trunc i64 %1288 to i8
  store i8 %1289, i8* %37, align 1, !tbaa !2448
  %1290 = lshr i64 %1239, 63
  %1291 = xor i64 %1288, %1290
  %1292 = xor i64 %1288, %1269
  %1293 = add nuw nsw i64 %1291, %1292
  %1294 = icmp eq i64 %1293, 2
  %1295 = zext i1 %1294 to i8
  store i8 %1295, i8* %43, align 1, !tbaa !2449
  %1296 = load i32, i32* %EAX, align 4
  %1297 = zext i32 %1296 to i64
  store i64 %1297, i64* %RDI, align 8, !tbaa !2428
  store i64 %1270, i64* %RSI, align 8, !tbaa !2428
  %1298 = add i64 %1202, 4568
  %1299 = add i64 %1202, 40
  %1300 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1301 = add i64 %1300, -8
  %1302 = inttoptr i64 %1301 to i64*
  store i64 %1299, i64* %1302, align 8
  store i64 %1301, i64* %RSP, align 8, !tbaa !2428
  store i64 %1298, i64* %PC, align 8, !tbaa !2428
  %1303 = tail call %struct.Memory* @sub_402bb0_idamax_renamed_(%struct.State* nonnull %0, i64 %1298, %struct.Memory* %MEMORY.3)
  %1304 = load i64, i64* %PC, align 8
  store i32 0, i32* %639, align 1, !tbaa !2451
  store i32 0, i32* %641, align 1, !tbaa !2451
  store i32 0, i32* %642, align 1, !tbaa !2451
  store i32 0, i32* %644, align 1, !tbaa !2451
  %1305 = load i64, i64* %RAX, align 8
  %1306 = load i64, i64* %RBP, align 8
  %1307 = add i64 %1306, -44
  %1308 = add i64 %1304, 6
  store i64 %1308, i64* %PC, align 8
  %1309 = trunc i64 %1305 to i32
  %1310 = inttoptr i64 %1307 to i32*
  %1311 = load i32, i32* %1310, align 4
  %1312 = add i32 %1311, %1309
  %1313 = zext i32 %1312 to i64
  store i64 %1313, i64* %RAX, align 8, !tbaa !2428
  %1314 = icmp ult i32 %1312, %1309
  %1315 = icmp ult i32 %1312, %1311
  %1316 = or i1 %1314, %1315
  %1317 = zext i1 %1316 to i8
  store i8 %1317, i8* %19, align 1, !tbaa !2432
  %1318 = and i32 %1312, 255
  %1319 = tail call i32 @llvm.ctpop.i32(i32 %1318) #8
  %1320 = trunc i32 %1319 to i8
  %1321 = and i8 %1320, 1
  %1322 = xor i8 %1321, 1
  store i8 %1322, i8* %26, align 1, !tbaa !2446
  %1323 = xor i32 %1311, %1309
  %1324 = xor i32 %1323, %1312
  %1325 = lshr i32 %1324, 4
  %1326 = trunc i32 %1325 to i8
  %1327 = and i8 %1326, 1
  store i8 %1327, i8* %31, align 1, !tbaa !2450
  %1328 = icmp eq i32 %1312, 0
  %1329 = zext i1 %1328 to i8
  store i8 %1329, i8* %34, align 1, !tbaa !2447
  %1330 = lshr i32 %1312, 31
  %1331 = trunc i32 %1330 to i8
  store i8 %1331, i8* %37, align 1, !tbaa !2448
  %1332 = lshr i32 %1309, 31
  %1333 = lshr i32 %1311, 31
  %1334 = xor i32 %1330, %1332
  %1335 = xor i32 %1330, %1333
  %1336 = add nuw nsw i32 %1334, %1335
  %1337 = icmp eq i32 %1336, 2
  %1338 = zext i1 %1337 to i8
  store i8 %1338, i8* %43, align 1, !tbaa !2449
  %1339 = add i64 %1306, -52
  %1340 = add i64 %1304, 9
  store i64 %1340, i64* %PC, align 8
  %1341 = inttoptr i64 %1339 to i32*
  store i32 %1312, i32* %1341, align 4
  %1342 = load i64, i64* %RBP, align 8
  %1343 = add i64 %1342, -52
  %1344 = load i64, i64* %PC, align 8
  %1345 = add i64 %1344, 3
  store i64 %1345, i64* %PC, align 8
  %1346 = inttoptr i64 %1343 to i32*
  %1347 = load i32, i32* %1346, align 4
  %1348 = zext i32 %1347 to i64
  store i64 %1348, i64* %RAX, align 8, !tbaa !2428
  %1349 = add i64 %1342, -24
  %1350 = add i64 %1344, 7
  store i64 %1350, i64* %PC, align 8
  %1351 = inttoptr i64 %1349 to i64*
  %1352 = load i64, i64* %1351, align 8
  store i64 %1352, i64* %RCX, align 8, !tbaa !2428
  %1353 = add i64 %1342, -44
  %1354 = add i64 %1344, 11
  store i64 %1354, i64* %PC, align 8
  %1355 = inttoptr i64 %1353 to i32*
  %1356 = load i32, i32* %1355, align 4
  %1357 = sext i32 %1356 to i64
  store i64 %1357, i64* %RSI, align 8, !tbaa !2428
  %1358 = shl nsw i64 %1357, 2
  %1359 = add i64 %1358, %1352
  %1360 = add i64 %1344, 14
  store i64 %1360, i64* %PC, align 8
  %1361 = inttoptr i64 %1359 to i32*
  store i32 %1347, i32* %1361, align 4
  %1362 = load i64, i64* %RBP, align 8
  %1363 = add i64 %1362, -8
  %1364 = load i64, i64* %PC, align 8
  %1365 = add i64 %1364, 4
  store i64 %1365, i64* %PC, align 8
  %1366 = inttoptr i64 %1363 to i64*
  %1367 = load i64, i64* %1366, align 8
  store i64 %1367, i64* %RCX, align 8, !tbaa !2428
  %1368 = add i64 %1362, -12
  %1369 = add i64 %1364, 7
  store i64 %1369, i64* %PC, align 8
  %1370 = inttoptr i64 %1368 to i32*
  %1371 = load i32, i32* %1370, align 4
  %1372 = zext i32 %1371 to i64
  store i64 %1372, i64* %RAX, align 8, !tbaa !2428
  %1373 = add i64 %1362, -44
  %1374 = add i64 %1364, 11
  store i64 %1374, i64* %PC, align 8
  %1375 = inttoptr i64 %1373 to i32*
  %1376 = load i32, i32* %1375, align 4
  %1377 = sext i32 %1371 to i64
  %1378 = sext i32 %1376 to i64
  %1379 = mul nsw i64 %1378, %1377
  %1380 = trunc i64 %1379 to i32
  %1381 = and i64 %1379, 4294967295
  store i64 %1381, i64* %RAX, align 8, !tbaa !2428
  %1382 = shl i64 %1379, 32
  %1383 = ashr exact i64 %1382, 32
  %1384 = icmp ne i64 %1383, %1379
  %1385 = zext i1 %1384 to i8
  store i8 %1385, i8* %19, align 1, !tbaa !2432
  %1386 = and i32 %1380, 255
  %1387 = tail call i32 @llvm.ctpop.i32(i32 %1386) #8
  %1388 = trunc i32 %1387 to i8
  %1389 = and i8 %1388, 1
  %1390 = xor i8 %1389, 1
  store i8 %1390, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1391 = lshr i32 %1380, 31
  %1392 = trunc i32 %1391 to i8
  store i8 %1392, i8* %37, align 1, !tbaa !2448
  store i8 %1385, i8* %43, align 1, !tbaa !2449
  %1393 = add i64 %1362, -52
  %1394 = add i64 %1364, 14
  store i64 %1394, i64* %PC, align 8
  %1395 = inttoptr i64 %1393 to i32*
  %1396 = load i32, i32* %1395, align 4
  %1397 = add i32 %1396, %1380
  %1398 = zext i32 %1397 to i64
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = icmp ult i32 %1397, %1380
  %1400 = icmp ult i32 %1397, %1396
  %1401 = or i1 %1399, %1400
  %1402 = zext i1 %1401 to i8
  store i8 %1402, i8* %19, align 1, !tbaa !2432
  %1403 = and i32 %1397, 255
  %1404 = tail call i32 @llvm.ctpop.i32(i32 %1403) #8
  %1405 = trunc i32 %1404 to i8
  %1406 = and i8 %1405, 1
  %1407 = xor i8 %1406, 1
  store i8 %1407, i8* %26, align 1, !tbaa !2446
  %1408 = xor i32 %1396, %1380
  %1409 = xor i32 %1408, %1397
  %1410 = lshr i32 %1409, 4
  %1411 = trunc i32 %1410 to i8
  %1412 = and i8 %1411, 1
  store i8 %1412, i8* %31, align 1, !tbaa !2450
  %1413 = icmp eq i32 %1397, 0
  %1414 = zext i1 %1413 to i8
  store i8 %1414, i8* %34, align 1, !tbaa !2447
  %1415 = lshr i32 %1397, 31
  %1416 = trunc i32 %1415 to i8
  store i8 %1416, i8* %37, align 1, !tbaa !2448
  %1417 = lshr i32 %1396, 31
  %1418 = xor i32 %1415, %1391
  %1419 = xor i32 %1415, %1417
  %1420 = add nuw nsw i32 %1418, %1419
  %1421 = icmp eq i32 %1420, 2
  %1422 = zext i1 %1421 to i8
  store i8 %1422, i8* %43, align 1, !tbaa !2449
  %1423 = sext i32 %1397 to i64
  store i64 %1423, i64* %RSI, align 8, !tbaa !2428
  %1424 = shl nsw i64 %1423, 2
  %1425 = add i64 %1424, %1367
  %1426 = add i64 %1364, 22
  store i64 %1426, i64* %PC, align 8
  %1427 = inttoptr i64 %1425 to i32*
  %1428 = load i32, i32* %1427, align 4
  %1429 = bitcast %union.VectorReg* %9 to i32*
  store i32 %1428, i32* %1429, align 1, !tbaa !2452
  store float 0.000000e+00, float* %647, align 1, !tbaa !2452
  store float 0.000000e+00, float* %649, align 1, !tbaa !2452
  store float 0.000000e+00, float* %651, align 1, !tbaa !2452
  %1430 = load <2 x float>, <2 x float>* %652, align 1
  %1431 = extractelement <2 x float> %1430, i32 0
  %1432 = fpext float %1431 to double
  store double %1432, double* %653, align 1, !tbaa !2454
  %1433 = add i64 %1364, 30
  store i64 %1433, i64* %PC, align 8
  %1434 = load double, double* %654, align 1
  %1435 = fcmp uno double %1432, %1434
  br i1 %1435, label %1436, label %1446

; <label>:1436:                                   ; preds = %block_4019ca
  %1437 = fadd double %1432, %1434
  %1438 = bitcast double %1437 to i64
  %1439 = and i64 %1438, 9221120237041090560
  %1440 = icmp eq i64 %1439, 9218868437227405312
  %1441 = and i64 %1438, 2251799813685247
  %1442 = icmp ne i64 %1441, 0
  %1443 = and i1 %1440, %1442
  br i1 %1443, label %1444, label %1452

; <label>:1444:                                   ; preds = %1436
  %1445 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1433, %struct.Memory* %1303) #9
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i8, i8* %34, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1446:                                   ; preds = %block_4019ca
  %1447 = fcmp ogt double %1432, %1434
  br i1 %1447, label %1452, label %1448

; <label>:1448:                                   ; preds = %1446
  %1449 = fcmp olt double %1432, %1434
  br i1 %1449, label %1452, label %1450

; <label>:1450:                                   ; preds = %1448
  %1451 = fcmp oeq double %1432, %1434
  br i1 %1451, label %1452, label %1456

; <label>:1452:                                   ; preds = %1450, %1448, %1446, %1436
  %1453 = phi i8 [ 0, %1446 ], [ 0, %1448 ], [ 1, %1450 ], [ 1, %1436 ]
  %1454 = phi i8 [ 0, %1446 ], [ 0, %1448 ], [ 0, %1450 ], [ 1, %1436 ]
  %1455 = phi i8 [ 0, %1446 ], [ 1, %1448 ], [ 0, %1450 ], [ 1, %1436 ]
  store i8 %1453, i8* %34, align 1, !tbaa !2456
  store i8 %1454, i8* %26, align 1, !tbaa !2456
  store i8 %1455, i8* %19, align 1, !tbaa !2456
  br label %1456

; <label>:1456:                                   ; preds = %1452, %1450
  %1457 = phi i8 [ %1453, %1452 ], [ %1414, %1450 ]
  store i8 0, i8* %43, align 1, !tbaa !2456
  store i8 0, i8* %37, align 1, !tbaa !2456
  store i8 0, i8* %31, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1456, %1444
  %1458 = phi i8 [ %.pre2, %1444 ], [ %1457, %1456 ]
  %1459 = phi i64 [ %.pre1, %1444 ], [ %1433, %1456 ]
  %1460 = phi %struct.Memory* [ %1445, %1444 ], [ %1303, %1456 ]
  %1461 = icmp eq i8 %1458, 0
  %.v67 = select i1 %1461, i64 17, i64 6
  %1462 = add i64 %1459, %.v67
  store i64 %1462, i64* %PC, align 8, !tbaa !2428
  br i1 %1461, label %block_401a46, label %block_401a3b

block_401b23:                                     ; preds = %block_401b9d, %block_401ab4
  %1463 = phi i64 [ %.pre5, %block_401ab4 ], [ %1721, %block_401b9d ]
  %MEMORY.4 = phi %struct.Memory* [ %853, %block_401ab4 ], [ %1689, %block_401b9d ]
  %1464 = load i64, i64* %RBP, align 8
  %1465 = add i64 %1464, -40
  %1466 = add i64 %1463, 3
  store i64 %1466, i64* %PC, align 8
  %1467 = inttoptr i64 %1465 to i32*
  %1468 = load i32, i32* %1467, align 4
  %1469 = zext i32 %1468 to i64
  store i64 %1469, i64* %RAX, align 8, !tbaa !2428
  %1470 = add i64 %1464, -16
  %1471 = add i64 %1463, 6
  store i64 %1471, i64* %PC, align 8
  %1472 = inttoptr i64 %1470 to i32*
  %1473 = load i32, i32* %1472, align 4
  %1474 = sub i32 %1468, %1473
  %1475 = icmp ult i32 %1468, %1473
  %1476 = zext i1 %1475 to i8
  store i8 %1476, i8* %19, align 1, !tbaa !2432
  %1477 = and i32 %1474, 255
  %1478 = tail call i32 @llvm.ctpop.i32(i32 %1477) #8
  %1479 = trunc i32 %1478 to i8
  %1480 = and i8 %1479, 1
  %1481 = xor i8 %1480, 1
  store i8 %1481, i8* %26, align 1, !tbaa !2446
  %1482 = xor i32 %1473, %1468
  %1483 = xor i32 %1482, %1474
  %1484 = lshr i32 %1483, 4
  %1485 = trunc i32 %1484 to i8
  %1486 = and i8 %1485, 1
  store i8 %1486, i8* %31, align 1, !tbaa !2450
  %1487 = icmp eq i32 %1474, 0
  %1488 = zext i1 %1487 to i8
  store i8 %1488, i8* %34, align 1, !tbaa !2447
  %1489 = lshr i32 %1474, 31
  %1490 = trunc i32 %1489 to i8
  store i8 %1490, i8* %37, align 1, !tbaa !2448
  %1491 = lshr i32 %1468, 31
  %1492 = lshr i32 %1473, 31
  %1493 = xor i32 %1492, %1491
  %1494 = xor i32 %1489, %1491
  %1495 = add nuw nsw i32 %1494, %1493
  %1496 = icmp eq i32 %1495, 2
  %1497 = zext i1 %1496 to i8
  store i8 %1497, i8* %43, align 1, !tbaa !2449
  %1498 = icmp ne i8 %1490, 0
  %1499 = xor i1 %1498, %1496
  %.v70 = select i1 %1499, i64 12, i64 231
  %1500 = add i64 %1463, %.v70
  store i64 %1500, i64* %PC, align 8, !tbaa !2428
  br i1 %1499, label %block_401b2f, label %block_401c0a

block_401b9d:                                     ; preds = %block_401b2f, %block_401b56
  %1501 = phi i64 [ %1097, %block_401b2f ], [ %.pre7, %block_401b56 ]
  %1502 = phi i64 [ %1132, %block_401b2f ], [ %.pre6, %block_401b56 ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1503 = add i64 %1501, -16
  %1504 = add i64 %1502, 8
  store i64 %1504, i64* %PC, align 8
  %1505 = inttoptr i64 %1503 to i32*
  %1506 = load i32, i32* %1505, align 4
  %1507 = zext i32 %1506 to i64
  store i64 %1507, i64* %RCX, align 8, !tbaa !2428
  %1508 = add i64 %1501, -44
  %1509 = add i64 %1502, 11
  store i64 %1509, i64* %PC, align 8
  %1510 = inttoptr i64 %1508 to i32*
  %1511 = load i32, i32* %1510, align 4
  %1512 = add i32 %1511, 1
  %1513 = zext i32 %1512 to i64
  store i64 %1513, i64* %RDX, align 8, !tbaa !2428
  %1514 = lshr i32 %1512, 31
  %1515 = sub i32 %1506, %1512
  %1516 = zext i32 %1515 to i64
  store i64 %1516, i64* %RCX, align 8, !tbaa !2428
  %1517 = icmp ult i32 %1506, %1512
  %1518 = zext i1 %1517 to i8
  store i8 %1518, i8* %19, align 1, !tbaa !2432
  %1519 = and i32 %1515, 255
  %1520 = tail call i32 @llvm.ctpop.i32(i32 %1519) #8
  %1521 = trunc i32 %1520 to i8
  %1522 = and i8 %1521, 1
  %1523 = xor i8 %1522, 1
  store i8 %1523, i8* %26, align 1, !tbaa !2446
  %1524 = xor i32 %1512, %1506
  %1525 = xor i32 %1524, %1515
  %1526 = lshr i32 %1525, 4
  %1527 = trunc i32 %1526 to i8
  %1528 = and i8 %1527, 1
  store i8 %1528, i8* %31, align 1, !tbaa !2450
  %1529 = icmp eq i32 %1515, 0
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %34, align 1, !tbaa !2447
  %1531 = lshr i32 %1515, 31
  %1532 = trunc i32 %1531 to i8
  store i8 %1532, i8* %37, align 1, !tbaa !2448
  %1533 = lshr i32 %1506, 31
  %1534 = xor i32 %1514, %1533
  %1535 = xor i32 %1531, %1533
  %1536 = add nuw nsw i32 %1535, %1534
  %1537 = icmp eq i32 %1536, 2
  %1538 = zext i1 %1537 to i8
  store i8 %1538, i8* %43, align 1, !tbaa !2449
  %1539 = add i64 %1501, -36
  %1540 = add i64 %1502, 21
  store i64 %1540, i64* %PC, align 8
  %1541 = inttoptr i64 %1539 to i32*
  %1542 = load i32, i32* %1541, align 4
  store i32 %1542, i32* %639, align 1, !tbaa !2452
  store float 0.000000e+00, float* %658, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %660, align 1, !tbaa !2452
  %1543 = add i64 %1501, -8
  %1544 = add i64 %1502, 25
  store i64 %1544, i64* %PC, align 8
  %1545 = inttoptr i64 %1543 to i64*
  %1546 = load i64, i64* %1545, align 8
  store i64 %1546, i64* %RSI, align 8, !tbaa !2428
  %1547 = add i64 %1501, -12
  %1548 = add i64 %1502, 28
  store i64 %1548, i64* %PC, align 8
  %1549 = inttoptr i64 %1547 to i32*
  %1550 = load i32, i32* %1549, align 4
  %1551 = zext i32 %1550 to i64
  store i64 %1551, i64* %RDX, align 8, !tbaa !2428
  %1552 = add i64 %1502, 32
  store i64 %1552, i64* %PC, align 8
  %1553 = load i32, i32* %1510, align 4
  %1554 = sext i32 %1550 to i64
  %1555 = sext i32 %1553 to i64
  %1556 = mul nsw i64 %1555, %1554
  %1557 = trunc i64 %1556 to i32
  %1558 = and i64 %1556, 4294967295
  store i64 %1558, i64* %RDX, align 8, !tbaa !2428
  %1559 = shl i64 %1556, 32
  %1560 = ashr exact i64 %1559, 32
  %1561 = icmp ne i64 %1560, %1556
  %1562 = zext i1 %1561 to i8
  store i8 %1562, i8* %19, align 1, !tbaa !2432
  %1563 = and i32 %1557, 255
  %1564 = tail call i32 @llvm.ctpop.i32(i32 %1563) #8
  %1565 = trunc i32 %1564 to i8
  %1566 = and i8 %1565, 1
  %1567 = xor i8 %1566, 1
  store i8 %1567, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1568 = lshr i32 %1557, 31
  %1569 = trunc i32 %1568 to i8
  store i8 %1569, i8* %37, align 1, !tbaa !2448
  store i8 %1562, i8* %43, align 1, !tbaa !2449
  %1570 = add i64 %1502, 35
  store i64 %1570, i64* %PC, align 8
  %1571 = load i32, i32* %1510, align 4
  %1572 = add i32 %1571, %1557
  %1573 = add i32 %1572, 1
  %1574 = zext i32 %1573 to i64
  store i64 %1574, i64* %RDX, align 8, !tbaa !2428
  %1575 = sext i32 %1573 to i64
  %1576 = shl nsw i64 %1575, 2
  store i64 %1576, i64* %RDI, align 8, !tbaa !2428
  %1577 = lshr i64 %1575, 61
  %1578 = and i64 %1577, 1
  %1579 = add i64 %1576, %1546
  store i64 %1579, i64* %RSI, align 8, !tbaa !2428
  %1580 = icmp ult i64 %1579, %1546
  %1581 = icmp ult i64 %1579, %1576
  %1582 = or i1 %1580, %1581
  %1583 = zext i1 %1582 to i8
  store i8 %1583, i8* %19, align 1, !tbaa !2432
  %1584 = trunc i64 %1579 to i32
  %1585 = and i32 %1584, 255
  %1586 = tail call i32 @llvm.ctpop.i32(i32 %1585) #8
  %1587 = trunc i32 %1586 to i8
  %1588 = and i8 %1587, 1
  %1589 = xor i8 %1588, 1
  store i8 %1589, i8* %26, align 1, !tbaa !2446
  %1590 = xor i64 %1576, %1546
  %1591 = xor i64 %1590, %1579
  %1592 = lshr i64 %1591, 4
  %1593 = trunc i64 %1592 to i8
  %1594 = and i8 %1593, 1
  store i8 %1594, i8* %31, align 1, !tbaa !2450
  %1595 = icmp eq i64 %1579, 0
  %1596 = zext i1 %1595 to i8
  store i8 %1596, i8* %34, align 1, !tbaa !2447
  %1597 = lshr i64 %1579, 63
  %1598 = trunc i64 %1597 to i8
  store i8 %1598, i8* %37, align 1, !tbaa !2448
  %1599 = lshr i64 %1546, 63
  %1600 = xor i64 %1597, %1599
  %1601 = xor i64 %1597, %1578
  %1602 = add nuw nsw i64 %1600, %1601
  %1603 = icmp eq i64 %1602, 2
  %1604 = zext i1 %1603 to i8
  store i8 %1604, i8* %43, align 1, !tbaa !2449
  %1605 = load i64, i64* %RBP, align 8
  %1606 = add i64 %1605, -8
  %1607 = add i64 %1502, 52
  store i64 %1607, i64* %PC, align 8
  %1608 = inttoptr i64 %1606 to i64*
  %1609 = load i64, i64* %1608, align 8
  store i64 %1609, i64* %RDI, align 8, !tbaa !2428
  %1610 = add i64 %1605, -12
  %1611 = add i64 %1502, 55
  store i64 %1611, i64* %PC, align 8
  %1612 = inttoptr i64 %1610 to i32*
  %1613 = load i32, i32* %1612, align 4
  %1614 = zext i32 %1613 to i64
  store i64 %1614, i64* %RDX, align 8, !tbaa !2428
  %1615 = add i64 %1605, -40
  %1616 = add i64 %1502, 59
  store i64 %1616, i64* %PC, align 8
  %1617 = inttoptr i64 %1615 to i32*
  %1618 = load i32, i32* %1617, align 4
  %1619 = sext i32 %1613 to i64
  %1620 = sext i32 %1618 to i64
  %1621 = mul nsw i64 %1620, %1619
  %1622 = trunc i64 %1621 to i32
  %1623 = and i64 %1621, 4294967295
  store i64 %1623, i64* %RDX, align 8, !tbaa !2428
  %1624 = shl i64 %1621, 32
  %1625 = ashr exact i64 %1624, 32
  %1626 = icmp ne i64 %1625, %1621
  %1627 = zext i1 %1626 to i8
  store i8 %1627, i8* %19, align 1, !tbaa !2432
  %1628 = and i32 %1622, 255
  %1629 = tail call i32 @llvm.ctpop.i32(i32 %1628) #8
  %1630 = trunc i32 %1629 to i8
  %1631 = and i8 %1630, 1
  %1632 = xor i8 %1631, 1
  store i8 %1632, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1633 = lshr i32 %1622, 31
  %1634 = trunc i32 %1633 to i8
  store i8 %1634, i8* %37, align 1, !tbaa !2448
  store i8 %1627, i8* %43, align 1, !tbaa !2449
  %1635 = add i64 %1605, -44
  %1636 = add i64 %1502, 62
  store i64 %1636, i64* %PC, align 8
  %1637 = inttoptr i64 %1635 to i32*
  %1638 = load i32, i32* %1637, align 4
  %1639 = add i32 %1638, %1622
  %1640 = add i32 %1639, 1
  %1641 = sext i32 %1640 to i64
  %1642 = shl nsw i64 %1641, 2
  store i64 %1642, i64* %R8, align 8, !tbaa !2428
  %1643 = lshr i64 %1641, 61
  %1644 = and i64 %1643, 1
  %1645 = add i64 %1642, %1609
  %1646 = icmp ult i64 %1645, %1609
  %1647 = icmp ult i64 %1645, %1642
  %1648 = or i1 %1646, %1647
  %1649 = zext i1 %1648 to i8
  store i8 %1649, i8* %19, align 1, !tbaa !2432
  %1650 = trunc i64 %1645 to i32
  %1651 = and i32 %1650, 255
  %1652 = tail call i32 @llvm.ctpop.i32(i32 %1651) #8
  %1653 = trunc i32 %1652 to i8
  %1654 = and i8 %1653, 1
  %1655 = xor i8 %1654, 1
  store i8 %1655, i8* %26, align 1, !tbaa !2446
  %1656 = xor i64 %1642, %1609
  %1657 = xor i64 %1656, %1645
  %1658 = lshr i64 %1657, 4
  %1659 = trunc i64 %1658 to i8
  %1660 = and i8 %1659, 1
  store i8 %1660, i8* %31, align 1, !tbaa !2450
  %1661 = icmp eq i64 %1645, 0
  %1662 = zext i1 %1661 to i8
  store i8 %1662, i8* %34, align 1, !tbaa !2447
  %1663 = lshr i64 %1645, 63
  %1664 = trunc i64 %1663 to i8
  store i8 %1664, i8* %37, align 1, !tbaa !2448
  %1665 = lshr i64 %1609, 63
  %1666 = xor i64 %1663, %1665
  %1667 = xor i64 %1663, %1644
  %1668 = add nuw nsw i64 %1666, %1667
  %1669 = icmp eq i64 %1668, 2
  %1670 = zext i1 %1669 to i8
  store i8 %1670, i8* %43, align 1, !tbaa !2449
  %1671 = add i64 %1605, -64
  %1672 = add i64 %1502, 79
  store i64 %1672, i64* %PC, align 8
  %1673 = inttoptr i64 %1671 to i64*
  store i64 %1645, i64* %1673, align 8
  %1674 = load i32, i32* %ECX, align 4
  %1675 = zext i32 %1674 to i64
  %1676 = load i64, i64* %PC, align 8
  store i64 %1675, i64* %RDI, align 8, !tbaa !2428
  %1677 = load i32, i32* %EAX, align 4
  %1678 = zext i32 %1677 to i64
  store i64 %1678, i64* %RDX, align 8, !tbaa !2428
  %1679 = load i64, i64* %RBP, align 8
  %1680 = add i64 %1679, -64
  %1681 = add i64 %1676, 8
  store i64 %1681, i64* %PC, align 8
  %1682 = inttoptr i64 %1680 to i64*
  %1683 = load i64, i64* %1682, align 8
  store i64 %1683, i64* %RCX, align 8, !tbaa !2428
  store i64 %1678, i64* %R8, align 8, !tbaa !2428
  %1684 = add i64 %1676, 3316
  %1685 = add i64 %1676, 16
  %1686 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1687 = add i64 %1686, -8
  %1688 = inttoptr i64 %1687 to i64*
  store i64 %1685, i64* %1688, align 8
  store i64 %1687, i64* %RSP, align 8, !tbaa !2428
  store i64 %1684, i64* %PC, align 8, !tbaa !2428
  %1689 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %1684, %struct.Memory* %MEMORY.4)
  %1690 = load i64, i64* %RBP, align 8
  %1691 = add i64 %1690, -40
  %1692 = load i64, i64* %PC, align 8
  %1693 = add i64 %1692, 3
  store i64 %1693, i64* %PC, align 8
  %1694 = inttoptr i64 %1691 to i32*
  %1695 = load i32, i32* %1694, align 4
  %1696 = add i32 %1695, 1
  %1697 = zext i32 %1696 to i64
  store i64 %1697, i64* %RAX, align 8, !tbaa !2428
  %1698 = icmp eq i32 %1695, -1
  %1699 = icmp eq i32 %1696, 0
  %1700 = or i1 %1698, %1699
  %1701 = zext i1 %1700 to i8
  store i8 %1701, i8* %19, align 1, !tbaa !2432
  %1702 = and i32 %1696, 255
  %1703 = tail call i32 @llvm.ctpop.i32(i32 %1702) #8
  %1704 = trunc i32 %1703 to i8
  %1705 = and i8 %1704, 1
  %1706 = xor i8 %1705, 1
  store i8 %1706, i8* %26, align 1, !tbaa !2446
  %1707 = xor i32 %1695, %1696
  %1708 = lshr i32 %1707, 4
  %1709 = trunc i32 %1708 to i8
  %1710 = and i8 %1709, 1
  store i8 %1710, i8* %31, align 1, !tbaa !2450
  %1711 = zext i1 %1699 to i8
  store i8 %1711, i8* %34, align 1, !tbaa !2447
  %1712 = lshr i32 %1696, 31
  %1713 = trunc i32 %1712 to i8
  store i8 %1713, i8* %37, align 1, !tbaa !2448
  %1714 = lshr i32 %1695, 31
  %1715 = xor i32 %1712, %1714
  %1716 = add nuw nsw i32 %1715, %1712
  %1717 = icmp eq i32 %1716, 2
  %1718 = zext i1 %1717 to i8
  store i8 %1718, i8* %43, align 1, !tbaa !2449
  %1719 = add i64 %1692, 9
  store i64 %1719, i64* %PC, align 8
  store i32 %1696, i32* %1694, align 4
  %1720 = load i64, i64* %PC, align 8
  %1721 = add i64 %1720, -226
  store i64 %1721, i64* %PC, align 8, !tbaa !2428
  br label %block_401b23

block_401c18:                                     ; preds = %block_401c0a, %block_401a41
  %1722 = phi i64 [ %1464, %block_401c0a ], [ %.pre9, %block_401a41 ]
  %1723 = phi i64 [ %1787, %block_401c0a ], [ %.pre8, %block_401a41 ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.4, %block_401c0a ], [ %1460, %block_401a41 ]
  %1724 = add i64 %1722, -44
  %1725 = add i64 %1723, 8
  store i64 %1725, i64* %PC, align 8
  %1726 = inttoptr i64 %1724 to i32*
  %1727 = load i32, i32* %1726, align 4
  %1728 = add i32 %1727, 1
  %1729 = zext i32 %1728 to i64
  store i64 %1729, i64* %RAX, align 8, !tbaa !2428
  %1730 = icmp eq i32 %1727, -1
  %1731 = icmp eq i32 %1728, 0
  %1732 = or i1 %1730, %1731
  %1733 = zext i1 %1732 to i8
  store i8 %1733, i8* %19, align 1, !tbaa !2432
  %1734 = and i32 %1728, 255
  %1735 = tail call i32 @llvm.ctpop.i32(i32 %1734) #8
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = xor i8 %1737, 1
  store i8 %1738, i8* %26, align 1, !tbaa !2446
  %1739 = xor i32 %1727, %1728
  %1740 = lshr i32 %1739, 4
  %1741 = trunc i32 %1740 to i8
  %1742 = and i8 %1741, 1
  store i8 %1742, i8* %31, align 1, !tbaa !2450
  %1743 = zext i1 %1731 to i8
  store i8 %1743, i8* %34, align 1, !tbaa !2447
  %1744 = lshr i32 %1728, 31
  %1745 = trunc i32 %1744 to i8
  store i8 %1745, i8* %37, align 1, !tbaa !2448
  %1746 = lshr i32 %1727, 31
  %1747 = xor i32 %1744, %1746
  %1748 = add nuw nsw i32 %1747, %1744
  %1749 = icmp eq i32 %1748, 2
  %1750 = zext i1 %1749 to i8
  store i8 %1750, i8* %43, align 1, !tbaa !2449
  %1751 = add i64 %1723, 14
  store i64 %1751, i64* %PC, align 8
  store i32 %1728, i32* %1726, align 4
  %1752 = load i64, i64* %PC, align 8
  %1753 = add i64 %1752, -616
  store i64 %1753, i64* %PC, align 8, !tbaa !2428
  br label %block_4019be

block_401c7d:                                     ; preds = %block_401c77
  %1754 = load i64, i64* %RBP, align 8
  %1755 = add i64 %1754, -16
  %1756 = add i64 %1822, 3
  store i64 %1756, i64* %PC, align 8
  %1757 = inttoptr i64 %1755 to i32*
  %1758 = load i32, i32* %1757, align 4
  %1759 = add i32 %1758, -1
  %1760 = zext i32 %1759 to i64
  store i64 %1760, i64* %RAX, align 8, !tbaa !2428
  %1761 = icmp eq i32 %1758, 0
  %1762 = zext i1 %1761 to i8
  store i8 %1762, i8* %19, align 1, !tbaa !2432
  %1763 = and i32 %1759, 255
  %1764 = tail call i32 @llvm.ctpop.i32(i32 %1763) #8
  %1765 = trunc i32 %1764 to i8
  %1766 = and i8 %1765, 1
  %1767 = xor i8 %1766, 1
  store i8 %1767, i8* %26, align 1, !tbaa !2446
  %1768 = xor i32 %1758, %1759
  %1769 = lshr i32 %1768, 4
  %1770 = trunc i32 %1769 to i8
  %1771 = and i8 %1770, 1
  store i8 %1771, i8* %31, align 1, !tbaa !2450
  %1772 = icmp eq i32 %1759, 0
  %1773 = zext i1 %1772 to i8
  store i8 %1773, i8* %34, align 1, !tbaa !2447
  %1774 = lshr i32 %1759, 31
  %1775 = trunc i32 %1774 to i8
  store i8 %1775, i8* %37, align 1, !tbaa !2448
  %1776 = lshr i32 %1758, 31
  %1777 = xor i32 %1774, %1776
  %1778 = add nuw nsw i32 %1777, %1776
  %1779 = icmp eq i32 %1778, 2
  %1780 = zext i1 %1779 to i8
  store i8 %1780, i8* %43, align 1, !tbaa !2449
  %1781 = add i64 %1754, -32
  %1782 = add i64 %1822, 10
  store i64 %1782, i64* %PC, align 8
  %1783 = inttoptr i64 %1781 to i64*
  %1784 = load i64, i64* %1783, align 8
  store i64 %1784, i64* %RCX, align 8, !tbaa !2428
  %1785 = add i64 %1822, 12
  store i64 %1785, i64* %PC, align 8
  %1786 = inttoptr i64 %1784 to i32*
  store i32 %1759, i32* %1786, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_401c89

block_401c0a:                                     ; preds = %block_401b23
  %1787 = add i64 %1500, 14
  store i64 %1787, i64* %PC, align 8, !tbaa !2428
  br label %block_401c18

block_401c89:                                     ; preds = %block_401c77, %block_401c7d, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1788 = phi i64 [ %1822, %block_401c77 ], [ %.pre12, %block_401c7d ], [ %1028, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %1789 = load i64, i64* %RSP, align 8
  %1790 = add i64 %1789, 64
  store i64 %1790, i64* %RSP, align 8, !tbaa !2428
  %1791 = icmp ugt i64 %1789, -65
  %1792 = zext i1 %1791 to i8
  store i8 %1792, i8* %19, align 1, !tbaa !2432
  %1793 = trunc i64 %1790 to i32
  %1794 = and i32 %1793, 255
  %1795 = tail call i32 @llvm.ctpop.i32(i32 %1794) #8
  %1796 = trunc i32 %1795 to i8
  %1797 = and i8 %1796, 1
  %1798 = xor i8 %1797, 1
  store i8 %1798, i8* %26, align 1, !tbaa !2446
  %1799 = xor i64 %1789, %1790
  %1800 = lshr i64 %1799, 4
  %1801 = trunc i64 %1800 to i8
  %1802 = and i8 %1801, 1
  store i8 %1802, i8* %31, align 1, !tbaa !2450
  %1803 = icmp eq i64 %1790, 0
  %1804 = zext i1 %1803 to i8
  store i8 %1804, i8* %34, align 1, !tbaa !2447
  %1805 = lshr i64 %1790, 63
  %1806 = trunc i64 %1805 to i8
  store i8 %1806, i8* %37, align 1, !tbaa !2448
  %1807 = lshr i64 %1789, 63
  %1808 = xor i64 %1805, %1807
  %1809 = add nuw nsw i64 %1808, %1805
  %1810 = icmp eq i64 %1809, 2
  %1811 = zext i1 %1810 to i8
  store i8 %1811, i8* %43, align 1, !tbaa !2449
  %1812 = add i64 %1788, 5
  store i64 %1812, i64* %PC, align 8
  %1813 = add i64 %1789, 72
  %1814 = inttoptr i64 %1790 to i64*
  %1815 = load i64, i64* %1814, align 8
  store i64 %1815, i64* %RBP, align 8, !tbaa !2428
  store i64 %1813, i64* %RSP, align 8, !tbaa !2428
  %1816 = add i64 %1788, 6
  store i64 %1816, i64* %PC, align 8
  %1817 = inttoptr i64 %1813 to i64*
  %1818 = load i64, i64* %1817, align 8
  store i64 %1818, i64* %PC, align 8, !tbaa !2428
  %1819 = add i64 %1789, 80
  store i64 %1819, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1026

block_401c77:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1820 = load i8, i8* %26, align 1, !tbaa !2446
  %1821 = icmp ne i8 %1820, 0
  %.v73 = select i1 %1821, i64 18, i64 6
  %1822 = add i64 %1028, %.v73
  store i64 %1822, i64* %PC, align 8, !tbaa !2428
  %1823 = icmp eq i8 %1820, 1
  br i1 %1823, label %block_401c89, label %block_401c7d
}

; Function Attrs: noinline
define %struct.Memory* @sub_4017b0_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4017b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %18, align 1, !tbaa !2451
  %19 = getelementptr inbounds i8, i8* %16, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = bitcast i64* %17 to i32*
  store i32 0, i32* %21, align 1, !tbaa !2451
  %22 = getelementptr inbounds i8, i8* %16, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 1, !tbaa !2451
  %24 = add i64 %12, -16
  %25 = load i64, i64* %RDI, align 8
  %26 = add i64 %15, 10
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -12
  %30 = load i32, i32* %ESI, align 4
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 3
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %33, align 4
  %34 = load i64, i64* %RBP, align 8
  %35 = add i64 %34, -16
  %36 = load i32, i32* %EDX, align 4
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %39, align 4
  %40 = load i64, i64* %RBP, align 8
  %41 = add i64 %40, -24
  %42 = load i64, i64* %RCX, align 8
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %45, align 8
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -32
  %48 = load i64, i64* %R8, align 8
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -36
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i32*
  store i32 1325, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -32
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RCX, align 8, !tbaa !2428
  %63 = add i64 %59, 8
  store i64 %63, i64* %PC, align 8
  %64 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %65 = load <2 x float>, <2 x float>* %64, align 1
  %66 = extractelement <2 x float> %65, i32 0
  %67 = inttoptr i64 %62 to float*
  store float %66, float* %67, align 4
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -44
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 7
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %69 to i32*
  store i32 0, i32* %72, align 4
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %79 = bitcast i64* %17 to double*
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %81 = bitcast i64* %80 to double*
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %83 = bitcast %union.VectorReg* %8 to double*
  %84 = bitcast %union.VectorReg* %7 to double*
  %85 = bitcast [32 x %union.VectorReg]* %6 to double*
  %86 = bitcast i64* %17 to <2 x i32>*
  %87 = bitcast [32 x %union.VectorReg]* %6 to float*
  %88 = bitcast i8* %19 to float*
  %89 = bitcast i64* %17 to float*
  %90 = bitcast i8* %22 to float*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4017df

block_4017fe:                                     ; preds = %block_4017f2
  %91 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 56) to i64*), align 8
  %92 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %91, i64* %92, align 1, !tbaa !2454
  store double 0.000000e+00, double* %79, align 1, !tbaa !2454
  %93 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 64) to i64*), align 16
  %94 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %93, i64* %94, align 1, !tbaa !2454
  store double 0.000000e+00, double* %81, align 1, !tbaa !2454
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %95 = add i64 %578, -36
  %96 = add i64 %614, 28
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  %100 = mul nsw i64 %99, 3125
  %101 = trunc i64 %100 to i32
  %102 = and i64 %100, 4294967295
  store i64 %102, i64* %RCX, align 8, !tbaa !2428
  %103 = mul i64 %99, 13421772800000
  %104 = ashr exact i64 %103, 32
  %105 = icmp ne i64 %104, %100
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %73, align 1, !tbaa !2432
  %107 = and i32 %101, 255
  %108 = tail call i32 @llvm.ctpop.i32(i32 %107) #8
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %112 = lshr i32 %101, 31
  %113 = trunc i32 %112 to i8
  store i8 %113, i8* %77, align 1, !tbaa !2448
  store i8 %106, i8* %78, align 1, !tbaa !2449
  %114 = add i64 %578, -48
  %115 = add i64 %614, 31
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i32*
  store i32 65536, i32* %116, align 4
  %117 = load i32, i32* %ECX, align 4
  %118 = zext i32 %117 to i64
  %119 = load i64, i64* %PC, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2428
  %120 = sext i32 %117 to i64
  %121 = lshr i64 %120, 32
  store i64 %121, i64* %82, align 8, !tbaa !2428
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, -48
  %124 = add i64 %119, 6
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  store i64 %127, i64* %RCX, align 8, !tbaa !2428
  %128 = add i64 %119, 8
  store i64 %128, i64* %PC, align 8
  %129 = sext i32 %126 to i64
  %130 = shl nuw i64 %121, 32
  %131 = or i64 %130, %118
  %132 = sdiv i64 %131, %129
  %133 = shl i64 %132, 32
  %134 = ashr exact i64 %133, 32
  %135 = icmp eq i64 %132, %134
  br i1 %135, label %138, label %136

; <label>:136:                                    ; preds = %block_4017fe
  %137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %128, %struct.Memory* %MEMORY.2) #9
  %.pre2 = load i64, i64* %RBP, align 8
  %.pre3 = load i32, i32* %EDX, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:138:                                    ; preds = %block_4017fe
  %139 = srem i64 %131, %129
  %140 = and i64 %132, 4294967295
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = and i64 %139, 4294967295
  store i64 %141, i64* %82, align 8, !tbaa !2428
  store i8 0, i8* %73, align 1, !tbaa !2432
  store i8 0, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %78, align 1, !tbaa !2449
  %142 = trunc i64 %139 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %138, %136
  %143 = phi i64 [ %.pre4, %136 ], [ %128, %138 ]
  %144 = phi i32 [ %.pre3, %136 ], [ %142, %138 ]
  %145 = phi i64 [ %.pre2, %136 ], [ %122, %138 ]
  %146 = phi %struct.Memory* [ %137, %136 ], [ %MEMORY.2, %138 ]
  %147 = add i64 %145, -36
  %148 = add i64 %143, 3
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %147 to i32*
  store i32 %144, i32* %149, align 4
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -36
  %152 = load i64, i64* %PC, align 8
  %153 = add i64 %152, 3
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %151 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RDX, align 8, !tbaa !2428
  %157 = sitofp i32 %155 to double
  %158 = load double, double* %84, align 1
  %159 = fsub double %157, %158
  %160 = load double, double* %85, align 1
  %161 = fdiv double %159, %160
  store double %161, double* %83, align 1, !tbaa !2454
  %162 = bitcast double %160 to <2 x i32>
  %163 = load <2 x i32>, <2 x i32>* %86, align 1
  %164 = fptrunc double %161 to float
  store float %164, float* %87, align 1, !tbaa !2452
  %165 = extractelement <2 x i32> %162, i32 1
  store i32 %165, i32* %20, align 1, !tbaa !2452
  %166 = extractelement <2 x i32> %163, i32 0
  store i32 %166, i32* %21, align 1, !tbaa !2452
  %167 = extractelement <2 x i32> %163, i32 1
  store i32 %167, i32* %23, align 1, !tbaa !2452
  %168 = add i64 %150, -8
  %169 = add i64 %152, 23
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %RSI, align 8, !tbaa !2428
  %172 = add i64 %150, -12
  %173 = add i64 %152, 26
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  store i64 %176, i64* %RDX, align 8, !tbaa !2428
  %177 = add i64 %150, -44
  %178 = add i64 %152, 30
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %177 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %175 to i64
  %182 = sext i32 %180 to i64
  %183 = mul nsw i64 %182, %181
  %184 = trunc i64 %183 to i32
  %185 = and i64 %183, 4294967295
  store i64 %185, i64* %RDX, align 8, !tbaa !2428
  %186 = shl i64 %183, 32
  %187 = ashr exact i64 %186, 32
  %188 = icmp ne i64 %187, %183
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %73, align 1, !tbaa !2432
  %190 = and i32 %184, 255
  %191 = tail call i32 @llvm.ctpop.i32(i32 %190) #8
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = xor i8 %193, 1
  store i8 %194, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %195 = lshr i32 %184, 31
  %196 = trunc i32 %195 to i8
  store i8 %196, i8* %77, align 1, !tbaa !2448
  store i8 %189, i8* %78, align 1, !tbaa !2449
  %197 = add i64 %150, -40
  %198 = add i64 %152, 33
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i32*
  %200 = load i32, i32* %199, align 4
  %201 = add i32 %200, %184
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %RDX, align 8, !tbaa !2428
  %203 = icmp ult i32 %201, %184
  %204 = icmp ult i32 %201, %200
  %205 = or i1 %203, %204
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %73, align 1, !tbaa !2432
  %207 = and i32 %201, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207) #8
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  store i8 %211, i8* %74, align 1, !tbaa !2446
  %212 = xor i32 %200, %184
  %213 = xor i32 %212, %201
  %214 = lshr i32 %213, 4
  %215 = trunc i32 %214 to i8
  %216 = and i8 %215, 1
  store i8 %216, i8* %75, align 1, !tbaa !2450
  %217 = icmp eq i32 %201, 0
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %76, align 1, !tbaa !2447
  %219 = lshr i32 %201, 31
  %220 = trunc i32 %219 to i8
  store i8 %220, i8* %77, align 1, !tbaa !2448
  %221 = lshr i32 %200, 31
  %222 = xor i32 %219, %195
  %223 = xor i32 %219, %221
  %224 = add nuw nsw i32 %222, %223
  %225 = icmp eq i32 %224, 2
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %78, align 1, !tbaa !2449
  %227 = sext i32 %201 to i64
  store i64 %227, i64* %RDI, align 8, !tbaa !2428
  %228 = shl nsw i64 %227, 2
  %229 = add i64 %228, %171
  %230 = add i64 %152, 41
  store i64 %230, i64* %PC, align 8
  %231 = load <2 x float>, <2 x float>* %64, align 1
  %232 = extractelement <2 x float> %231, i32 0
  %233 = inttoptr i64 %229 to float*
  store float %232, float* %233, align 4
  %234 = load i64, i64* %RBP, align 8
  %235 = add i64 %234, -8
  %236 = load i64, i64* %PC, align 8
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %235 to i64*
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %RSI, align 8, !tbaa !2428
  %240 = add i64 %234, -12
  %241 = add i64 %236, 7
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %240 to i32*
  %243 = load i32, i32* %242, align 4
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RDX, align 8, !tbaa !2428
  %245 = add i64 %234, -44
  %246 = add i64 %236, 11
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247, align 4
  %249 = sext i32 %243 to i64
  %250 = sext i32 %248 to i64
  %251 = mul nsw i64 %250, %249
  %252 = trunc i64 %251 to i32
  %253 = and i64 %251, 4294967295
  store i64 %253, i64* %RDX, align 8, !tbaa !2428
  %254 = shl i64 %251, 32
  %255 = ashr exact i64 %254, 32
  %256 = icmp ne i64 %255, %251
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %73, align 1, !tbaa !2432
  %258 = and i32 %252, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #8
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %263 = lshr i32 %252, 31
  %264 = trunc i32 %263 to i8
  store i8 %264, i8* %77, align 1, !tbaa !2448
  store i8 %257, i8* %78, align 1, !tbaa !2449
  %265 = add i64 %234, -40
  %266 = add i64 %236, 14
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i32*
  %268 = load i32, i32* %267, align 4
  %269 = add i32 %268, %252
  %270 = zext i32 %269 to i64
  store i64 %270, i64* %RDX, align 8, !tbaa !2428
  %271 = icmp ult i32 %269, %252
  %272 = icmp ult i32 %269, %268
  %273 = or i1 %271, %272
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %73, align 1, !tbaa !2432
  %275 = and i32 %269, 255
  %276 = tail call i32 @llvm.ctpop.i32(i32 %275) #8
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = xor i8 %278, 1
  store i8 %279, i8* %74, align 1, !tbaa !2446
  %280 = xor i32 %268, %252
  %281 = xor i32 %280, %269
  %282 = lshr i32 %281, 4
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  store i8 %284, i8* %75, align 1, !tbaa !2450
  %285 = icmp eq i32 %269, 0
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %76, align 1, !tbaa !2447
  %287 = lshr i32 %269, 31
  %288 = trunc i32 %287 to i8
  store i8 %288, i8* %77, align 1, !tbaa !2448
  %289 = lshr i32 %268, 31
  %290 = xor i32 %287, %263
  %291 = xor i32 %287, %289
  %292 = add nuw nsw i32 %290, %291
  %293 = icmp eq i32 %292, 2
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %78, align 1, !tbaa !2449
  %295 = sext i32 %269 to i64
  store i64 %295, i64* %RDI, align 8, !tbaa !2428
  %296 = shl nsw i64 %295, 2
  %297 = add i64 %296, %239
  %298 = add i64 %236, 22
  store i64 %298, i64* %PC, align 8
  %299 = inttoptr i64 %297 to i32*
  %300 = load i32, i32* %299, align 4
  store i32 %300, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %301 = add i64 %234, -32
  %302 = add i64 %236, 26
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %301 to i64*
  %304 = load i64, i64* %303, align 8
  store i64 %304, i64* %RSI, align 8, !tbaa !2428
  %305 = add i64 %236, 29
  store i64 %305, i64* %PC, align 8
  %306 = load <2 x float>, <2 x float>* %64, align 1
  %307 = extractelement <2 x float> %306, i32 0
  %308 = inttoptr i64 %304 to float*
  %309 = load float, float* %308, align 4
  %310 = fcmp uno float %307, %309
  br i1 %310, label %311, label %321

; <label>:311:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %312 = fadd float %307, %309
  %313 = bitcast float %312 to i32
  %314 = and i32 %313, 2143289344
  %315 = icmp eq i32 %314, 2139095040
  %316 = and i32 %313, 4194303
  %317 = icmp ne i32 %316, 0
  %318 = and i1 %315, %317
  br i1 %318, label %319, label %327

; <label>:319:                                    ; preds = %311
  %320 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %305, %struct.Memory* %146) #9
  %.pre5 = load i64, i64* %PC, align 8
  %.pre6 = load i8, i8* %73, align 1, !tbaa !2432
  %.pre7 = load i8, i8* %76, align 1, !tbaa !2447
  %.pre8 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:321:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %322 = fcmp ogt float %307, %309
  br i1 %322, label %327, label %323

; <label>:323:                                    ; preds = %321
  %324 = fcmp olt float %307, %309
  br i1 %324, label %327, label %325

; <label>:325:                                    ; preds = %323
  %326 = fcmp oeq float %307, %309
  br i1 %326, label %327, label %331

; <label>:327:                                    ; preds = %325, %323, %321, %311
  %328 = phi i8 [ 0, %321 ], [ 0, %323 ], [ 1, %325 ], [ 1, %311 ]
  %329 = phi i8 [ 0, %321 ], [ 0, %323 ], [ 0, %325 ], [ 1, %311 ]
  %330 = phi i8 [ 0, %321 ], [ 1, %323 ], [ 0, %325 ], [ 1, %311 ]
  store i8 %328, i8* %76, align 1, !tbaa !2456
  store i8 %329, i8* %74, align 1, !tbaa !2456
  store i8 %330, i8* %73, align 1, !tbaa !2456
  br label %331

; <label>:331:                                    ; preds = %327, %325
  %332 = phi i8 [ %328, %327 ], [ %286, %325 ]
  %333 = phi i8 [ %330, %327 ], [ %274, %325 ]
  store i8 0, i8* %78, align 1, !tbaa !2456
  store i8 0, i8* %77, align 1, !tbaa !2456
  store i8 0, i8* %75, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %331, %319
  %334 = phi i64 [ %.pre8, %319 ], [ %234, %331 ]
  %335 = phi i8 [ %.pre7, %319 ], [ %332, %331 ]
  %336 = phi i8 [ %.pre6, %319 ], [ %333, %331 ]
  %337 = phi i64 [ %.pre5, %319 ], [ %305, %331 ]
  %338 = phi %struct.Memory* [ %320, %319 ], [ %146, %331 ]
  %339 = or i8 %335, %336
  %340 = icmp ne i8 %339, 0
  %.v14 = select i1 %340, i64 38, i64 6
  %341 = add i64 %337, %.v14
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  br i1 %340, label %block_401894, label %block_401874

block_401874:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %342 = add i64 %334, -8
  %343 = add i64 %341, 4
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = add i64 %334, -12
  %347 = add i64 %341, 7
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %346 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RCX, align 8, !tbaa !2428
  %351 = add i64 %334, -44
  %352 = add i64 %341, 11
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i32*
  %354 = load i32, i32* %353, align 4
  %355 = sext i32 %349 to i64
  %356 = sext i32 %354 to i64
  %357 = mul nsw i64 %356, %355
  %358 = trunc i64 %357 to i32
  %359 = and i64 %357, 4294967295
  store i64 %359, i64* %RCX, align 8, !tbaa !2428
  %360 = shl i64 %357, 32
  %361 = ashr exact i64 %360, 32
  %362 = icmp ne i64 %361, %357
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %73, align 1, !tbaa !2432
  %364 = and i32 %358, 255
  %365 = tail call i32 @llvm.ctpop.i32(i32 %364) #8
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  store i8 %368, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %369 = lshr i32 %358, 31
  %370 = trunc i32 %369 to i8
  store i8 %370, i8* %77, align 1, !tbaa !2448
  store i8 %363, i8* %78, align 1, !tbaa !2449
  %371 = add i64 %334, -40
  %372 = add i64 %341, 14
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = add i32 %374, %358
  %376 = zext i32 %375 to i64
  store i64 %376, i64* %RCX, align 8, !tbaa !2428
  %377 = icmp ult i32 %375, %358
  %378 = icmp ult i32 %375, %374
  %379 = or i1 %377, %378
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %73, align 1, !tbaa !2432
  %381 = and i32 %375, 255
  %382 = tail call i32 @llvm.ctpop.i32(i32 %381) #8
  %383 = trunc i32 %382 to i8
  %384 = and i8 %383, 1
  %385 = xor i8 %384, 1
  store i8 %385, i8* %74, align 1, !tbaa !2446
  %386 = xor i32 %374, %358
  %387 = xor i32 %386, %375
  %388 = lshr i32 %387, 4
  %389 = trunc i32 %388 to i8
  %390 = and i8 %389, 1
  store i8 %390, i8* %75, align 1, !tbaa !2450
  %391 = icmp eq i32 %375, 0
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %76, align 1, !tbaa !2447
  %393 = lshr i32 %375, 31
  %394 = trunc i32 %393 to i8
  store i8 %394, i8* %77, align 1, !tbaa !2448
  %395 = lshr i32 %374, 31
  %396 = xor i32 %393, %369
  %397 = xor i32 %393, %395
  %398 = add nuw nsw i32 %396, %397
  %399 = icmp eq i32 %398, 2
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %78, align 1, !tbaa !2449
  %401 = sext i32 %375 to i64
  store i64 %401, i64* %RDX, align 8, !tbaa !2428
  %402 = shl nsw i64 %401, 2
  %403 = add i64 %402, %345
  %404 = add i64 %341, 22
  store i64 %404, i64* %PC, align 8
  %405 = inttoptr i64 %403 to i32*
  %406 = load i32, i32* %405, align 4
  store i32 %406, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %407 = add i64 %334, -52
  %408 = add i64 %341, 27
  store i64 %408, i64* %PC, align 8
  %409 = load <2 x float>, <2 x float>* %64, align 1
  %410 = extractelement <2 x float> %409, i32 0
  %411 = inttoptr i64 %407 to float*
  store float %410, float* %411, align 4
  %412 = load i64, i64* %PC, align 8
  %413 = add i64 %412, 18
  store i64 %413, i64* %PC, align 8, !tbaa !2428
  br label %block_4018a1

block_401964:                                     ; preds = %block_40191a
  %414 = add i64 %823, -44
  %415 = add i64 %859, 8
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = add i32 %417, 1
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %RAX, align 8, !tbaa !2428
  %420 = icmp eq i32 %417, -1
  %421 = icmp eq i32 %418, 0
  %422 = or i1 %420, %421
  %423 = zext i1 %422 to i8
  store i8 %423, i8* %73, align 1, !tbaa !2432
  %424 = and i32 %418, 255
  %425 = tail call i32 @llvm.ctpop.i32(i32 %424) #8
  %426 = trunc i32 %425 to i8
  %427 = and i8 %426, 1
  %428 = xor i8 %427, 1
  store i8 %428, i8* %74, align 1, !tbaa !2446
  %429 = xor i32 %417, %418
  %430 = lshr i32 %429, 4
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  store i8 %432, i8* %75, align 1, !tbaa !2450
  %433 = zext i1 %421 to i8
  store i8 %433, i8* %76, align 1, !tbaa !2447
  %434 = lshr i32 %418, 31
  %435 = trunc i32 %434 to i8
  store i8 %435, i8* %77, align 1, !tbaa !2448
  %436 = lshr i32 %417, 31
  %437 = xor i32 %434, %436
  %438 = add nuw nsw i32 %437, %434
  %439 = icmp eq i32 %438, 2
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %78, align 1, !tbaa !2449
  %441 = add i64 %859, 14
  store i64 %441, i64* %PC, align 8
  store i32 %418, i32* %416, align 4
  %442 = load i64, i64* %PC, align 8
  %443 = add i64 %442, -107
  store i64 %443, i64* %PC, align 8, !tbaa !2428
  br label %block_401907

block_4018e2:                                     ; preds = %block_4018d6
  store i32 0, i32* %18, align 1, !tbaa !2451
  store i32 0, i32* %20, align 1, !tbaa !2451
  store i32 0, i32* %21, align 1, !tbaa !2451
  store i32 0, i32* %23, align 1, !tbaa !2451
  %444 = add i64 %540, -24
  %445 = add i64 %576, 7
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %444 to i64*
  %447 = load i64, i64* %446, align 8
  store i64 %447, i64* %RAX, align 8, !tbaa !2428
  %448 = add i64 %576, 11
  store i64 %448, i64* %PC, align 8
  %449 = load i32, i32* %543, align 4
  %450 = sext i32 %449 to i64
  store i64 %450, i64* %RCX, align 8, !tbaa !2428
  %451 = shl nsw i64 %450, 2
  %452 = add i64 %451, %447
  %453 = add i64 %576, 16
  store i64 %453, i64* %PC, align 8
  %454 = load <2 x float>, <2 x float>* %64, align 1
  %455 = extractelement <2 x float> %454, i32 0
  %456 = inttoptr i64 %452 to float*
  store float %455, float* %456, align 4
  %457 = load i64, i64* %RBP, align 8
  %458 = add i64 %457, -40
  %459 = load i64, i64* %PC, align 8
  %460 = add i64 %459, 3
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %458 to i32*
  %462 = load i32, i32* %461, align 4
  %463 = add i32 %462, 1
  %464 = zext i32 %463 to i64
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = icmp eq i32 %462, -1
  %466 = icmp eq i32 %463, 0
  %467 = or i1 %465, %466
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %73, align 1, !tbaa !2432
  %469 = and i32 %463, 255
  %470 = tail call i32 @llvm.ctpop.i32(i32 %469) #8
  %471 = trunc i32 %470 to i8
  %472 = and i8 %471, 1
  %473 = xor i8 %472, 1
  store i8 %473, i8* %74, align 1, !tbaa !2446
  %474 = xor i32 %462, %463
  %475 = lshr i32 %474, 4
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  store i8 %477, i8* %75, align 1, !tbaa !2450
  %478 = zext i1 %466 to i8
  store i8 %478, i8* %76, align 1, !tbaa !2447
  %479 = lshr i32 %463, 31
  %480 = trunc i32 %479 to i8
  store i8 %480, i8* %77, align 1, !tbaa !2448
  %481 = lshr i32 %462, 31
  %482 = xor i32 %479, %481
  %483 = add nuw nsw i32 %482, %479
  %484 = icmp eq i32 %483, 2
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %78, align 1, !tbaa !2449
  %486 = add i64 %459, 9
  store i64 %486, i64* %PC, align 8
  store i32 %463, i32* %461, align 4
  %487 = load i64, i64* %PC, align 8
  %488 = add i64 %487, -37
  store i64 %488, i64* %PC, align 8, !tbaa !2428
  br label %block_4018d6

block_4017df:                                     ; preds = %block_4018bc, %block_4017b0
  %489 = phi i64 [ %.pre, %block_4017b0 ], [ %644, %block_4018bc ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4017b0 ], [ %MEMORY.2, %block_4018bc ]
  %490 = load i64, i64* %RBP, align 8
  %491 = add i64 %490, -44
  %492 = add i64 %489, 3
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %491 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RAX, align 8, !tbaa !2428
  %496 = add i64 %490, -16
  %497 = add i64 %489, 6
  store i64 %497, i64* %PC, align 8
  %498 = inttoptr i64 %496 to i32*
  %499 = load i32, i32* %498, align 4
  %500 = sub i32 %494, %499
  %501 = icmp ult i32 %494, %499
  %502 = zext i1 %501 to i8
  store i8 %502, i8* %73, align 1, !tbaa !2432
  %503 = and i32 %500, 255
  %504 = tail call i32 @llvm.ctpop.i32(i32 %503) #8
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  store i8 %507, i8* %74, align 1, !tbaa !2446
  %508 = xor i32 %499, %494
  %509 = xor i32 %508, %500
  %510 = lshr i32 %509, 4
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  store i8 %512, i8* %75, align 1, !tbaa !2450
  %513 = icmp eq i32 %500, 0
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %76, align 1, !tbaa !2447
  %515 = lshr i32 %500, 31
  %516 = trunc i32 %515 to i8
  store i8 %516, i8* %77, align 1, !tbaa !2448
  %517 = lshr i32 %494, 31
  %518 = lshr i32 %499, 31
  %519 = xor i32 %518, %517
  %520 = xor i32 %515, %517
  %521 = add nuw nsw i32 %520, %519
  %522 = icmp eq i32 %521, 2
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %78, align 1, !tbaa !2449
  %524 = icmp ne i8 %516, 0
  %525 = xor i1 %524, %522
  %.v = select i1 %525, i64 12, i64 240
  %526 = add i64 %489, %.v
  %527 = add i64 %490, -40
  %528 = add i64 %526, 7
  store i64 %528, i64* %PC, align 8
  %529 = inttoptr i64 %527 to i32*
  store i32 0, i32* %529, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br i1 %525, label %block_4017df.block_4017f2_crit_edge, label %block_4017df.block_4018d6_crit_edge

block_4017df.block_4017f2_crit_edge:              ; preds = %block_4017df
  br label %block_4017f2

block_4017df.block_4018d6_crit_edge:              ; preds = %block_4017df
  br label %block_4018d6

block_401977:                                     ; preds = %block_401907
  %530 = add i64 %912, 1
  store i64 %530, i64* %PC, align 8
  %531 = load i64, i64* %11, align 8, !tbaa !2428
  %532 = add i64 %531, 8
  %533 = inttoptr i64 %531 to i64*
  %534 = load i64, i64* %533, align 8
  store i64 %534, i64* %RBP, align 8, !tbaa !2428
  store i64 %532, i64* %11, align 8, !tbaa !2428
  %535 = add i64 %912, 2
  store i64 %535, i64* %PC, align 8
  %536 = inttoptr i64 %532 to i64*
  %537 = load i64, i64* %536, align 8
  store i64 %537, i64* %PC, align 8, !tbaa !2428
  %538 = add i64 %531, 16
  store i64 %538, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4018d6:                                     ; preds = %block_4017df.block_4018d6_crit_edge, %block_4018e2
  %539 = phi i64 [ %488, %block_4018e2 ], [ %.pre10, %block_4017df.block_4018d6_crit_edge ]
  %540 = load i64, i64* %RBP, align 8
  %541 = add i64 %540, -40
  %542 = add i64 %539, 3
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %541 to i32*
  %544 = load i32, i32* %543, align 4
  %545 = zext i32 %544 to i64
  store i64 %545, i64* %RAX, align 8, !tbaa !2428
  %546 = add i64 %540, -16
  %547 = add i64 %539, 6
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = sub i32 %544, %549
  %551 = icmp ult i32 %544, %549
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %73, align 1, !tbaa !2432
  %553 = and i32 %550, 255
  %554 = tail call i32 @llvm.ctpop.i32(i32 %553) #8
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = xor i8 %556, 1
  store i8 %557, i8* %74, align 1, !tbaa !2446
  %558 = xor i32 %549, %544
  %559 = xor i32 %558, %550
  %560 = lshr i32 %559, 4
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  store i8 %562, i8* %75, align 1, !tbaa !2450
  %563 = icmp eq i32 %550, 0
  %564 = zext i1 %563 to i8
  store i8 %564, i8* %76, align 1, !tbaa !2447
  %565 = lshr i32 %550, 31
  %566 = trunc i32 %565 to i8
  store i8 %566, i8* %77, align 1, !tbaa !2448
  %567 = lshr i32 %544, 31
  %568 = lshr i32 %549, 31
  %569 = xor i32 %568, %567
  %570 = xor i32 %565, %567
  %571 = add nuw nsw i32 %570, %569
  %572 = icmp eq i32 %571, 2
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %78, align 1, !tbaa !2449
  %574 = icmp ne i8 %566, 0
  %575 = xor i1 %574, %572
  %.v15 = select i1 %575, i64 12, i64 42
  %576 = add i64 %539, %.v15
  store i64 %576, i64* %PC, align 8, !tbaa !2428
  br i1 %575, label %block_4018e2, label %block_401900

block_4017f2:                                     ; preds = %block_4017df.block_4017f2_crit_edge, %block_4018a1
  %577 = phi i64 [ %821, %block_4018a1 ], [ %.pre10, %block_4017df.block_4017f2_crit_edge ]
  %MEMORY.2 = phi %struct.Memory* [ %338, %block_4018a1 ], [ %MEMORY.0, %block_4017df.block_4017f2_crit_edge ]
  %578 = load i64, i64* %RBP, align 8
  %579 = add i64 %578, -40
  %580 = add i64 %577, 3
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %579 to i32*
  %582 = load i32, i32* %581, align 4
  %583 = zext i32 %582 to i64
  store i64 %583, i64* %RAX, align 8, !tbaa !2428
  %584 = add i64 %578, -16
  %585 = add i64 %577, 6
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i32*
  %587 = load i32, i32* %586, align 4
  %588 = sub i32 %582, %587
  %589 = icmp ult i32 %582, %587
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %73, align 1, !tbaa !2432
  %591 = and i32 %588, 255
  %592 = tail call i32 @llvm.ctpop.i32(i32 %591) #8
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  %595 = xor i8 %594, 1
  store i8 %595, i8* %74, align 1, !tbaa !2446
  %596 = xor i32 %587, %582
  %597 = xor i32 %596, %588
  %598 = lshr i32 %597, 4
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  store i8 %600, i8* %75, align 1, !tbaa !2450
  %601 = icmp eq i32 %588, 0
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %76, align 1, !tbaa !2447
  %603 = lshr i32 %588, 31
  %604 = trunc i32 %603 to i8
  store i8 %604, i8* %77, align 1, !tbaa !2448
  %605 = lshr i32 %582, 31
  %606 = lshr i32 %587, 31
  %607 = xor i32 %606, %605
  %608 = xor i32 %603, %605
  %609 = add nuw nsw i32 %608, %607
  %610 = icmp eq i32 %609, 2
  %611 = zext i1 %610 to i8
  store i8 %611, i8* %78, align 1, !tbaa !2449
  %612 = icmp ne i8 %604, 0
  %613 = xor i1 %612, %610
  %.v13 = select i1 %613, i64 12, i64 202
  %614 = add i64 %577, %.v13
  store i64 %614, i64* %PC, align 8, !tbaa !2428
  br i1 %613, label %block_4017fe, label %block_4018bc

block_4018bc:                                     ; preds = %block_4017f2
  %615 = add i64 %578, -44
  %616 = add i64 %614, 8
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i32*
  %618 = load i32, i32* %617, align 4
  %619 = add i32 %618, 1
  %620 = zext i32 %619 to i64
  store i64 %620, i64* %RAX, align 8, !tbaa !2428
  %621 = icmp eq i32 %618, -1
  %622 = icmp eq i32 %619, 0
  %623 = or i1 %621, %622
  %624 = zext i1 %623 to i8
  store i8 %624, i8* %73, align 1, !tbaa !2432
  %625 = and i32 %619, 255
  %626 = tail call i32 @llvm.ctpop.i32(i32 %625) #8
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  %629 = xor i8 %628, 1
  store i8 %629, i8* %74, align 1, !tbaa !2446
  %630 = xor i32 %618, %619
  %631 = lshr i32 %630, 4
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  store i8 %633, i8* %75, align 1, !tbaa !2450
  %634 = zext i1 %622 to i8
  store i8 %634, i8* %76, align 1, !tbaa !2447
  %635 = lshr i32 %619, 31
  %636 = trunc i32 %635 to i8
  store i8 %636, i8* %77, align 1, !tbaa !2448
  %637 = lshr i32 %618, 31
  %638 = xor i32 %635, %637
  %639 = add nuw nsw i32 %638, %635
  %640 = icmp eq i32 %639, 2
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %78, align 1, !tbaa !2449
  %642 = add i64 %614, 14
  store i64 %642, i64* %PC, align 8
  store i32 %619, i32* %617, align 4
  %643 = load i64, i64* %PC, align 8
  %644 = add i64 %643, -235
  store i64 %644, i64* %PC, align 8, !tbaa !2428
  br label %block_4017df

block_401926:                                     ; preds = %block_40191a
  %645 = add i64 %823, -24
  %646 = add i64 %859, 4
  store i64 %646, i64* %PC, align 8
  %647 = inttoptr i64 %645 to i64*
  %648 = load i64, i64* %647, align 8
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = add i64 %859, 8
  store i64 %649, i64* %PC, align 8
  %650 = load i32, i32* %826, align 4
  %651 = sext i32 %650 to i64
  store i64 %651, i64* %RCX, align 8, !tbaa !2428
  %652 = shl nsw i64 %651, 2
  %653 = add i64 %652, %648
  %654 = add i64 %859, 13
  store i64 %654, i64* %PC, align 8
  %655 = inttoptr i64 %653 to i32*
  %656 = load i32, i32* %655, align 4
  store i32 %656, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %657 = add i64 %823, -8
  %658 = add i64 %859, 17
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %657 to i64*
  %660 = load i64, i64* %659, align 8
  store i64 %660, i64* %RAX, align 8, !tbaa !2428
  %661 = add i64 %823, -12
  %662 = add i64 %859, 20
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i32*
  %664 = load i32, i32* %663, align 4
  %665 = zext i32 %664 to i64
  store i64 %665, i64* %RDX, align 8, !tbaa !2428
  %666 = add i64 %823, -44
  %667 = add i64 %859, 24
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i32*
  %669 = load i32, i32* %668, align 4
  %670 = sext i32 %664 to i64
  %671 = sext i32 %669 to i64
  %672 = mul nsw i64 %671, %670
  %673 = trunc i64 %672 to i32
  %674 = and i64 %672, 4294967295
  store i64 %674, i64* %RDX, align 8, !tbaa !2428
  %675 = shl i64 %672, 32
  %676 = ashr exact i64 %675, 32
  %677 = icmp ne i64 %676, %672
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %73, align 1, !tbaa !2432
  %679 = and i32 %673, 255
  %680 = tail call i32 @llvm.ctpop.i32(i32 %679) #8
  %681 = trunc i32 %680 to i8
  %682 = and i8 %681, 1
  %683 = xor i8 %682, 1
  store i8 %683, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %684 = lshr i32 %673, 31
  %685 = trunc i32 %684 to i8
  store i8 %685, i8* %77, align 1, !tbaa !2448
  store i8 %678, i8* %78, align 1, !tbaa !2449
  %686 = add i64 %859, 27
  store i64 %686, i64* %PC, align 8
  %687 = load i32, i32* %826, align 4
  %688 = add i32 %687, %673
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %RDX, align 8, !tbaa !2428
  %690 = icmp ult i32 %688, %673
  %691 = icmp ult i32 %688, %687
  %692 = or i1 %690, %691
  %693 = zext i1 %692 to i8
  store i8 %693, i8* %73, align 1, !tbaa !2432
  %694 = and i32 %688, 255
  %695 = tail call i32 @llvm.ctpop.i32(i32 %694) #8
  %696 = trunc i32 %695 to i8
  %697 = and i8 %696, 1
  %698 = xor i8 %697, 1
  store i8 %698, i8* %74, align 1, !tbaa !2446
  %699 = xor i32 %687, %673
  %700 = xor i32 %699, %688
  %701 = lshr i32 %700, 4
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  store i8 %703, i8* %75, align 1, !tbaa !2450
  %704 = icmp eq i32 %688, 0
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %76, align 1, !tbaa !2447
  %706 = lshr i32 %688, 31
  %707 = trunc i32 %706 to i8
  store i8 %707, i8* %77, align 1, !tbaa !2448
  %708 = lshr i32 %687, 31
  %709 = xor i32 %706, %684
  %710 = xor i32 %706, %708
  %711 = add nuw nsw i32 %709, %710
  %712 = icmp eq i32 %711, 2
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %78, align 1, !tbaa !2449
  %714 = sext i32 %688 to i64
  store i64 %714, i64* %RCX, align 8, !tbaa !2428
  %715 = shl nsw i64 %714, 2
  %716 = add i64 %715, %660
  %717 = add i64 %859, 35
  store i64 %717, i64* %PC, align 8
  %718 = load <2 x float>, <2 x float>* %64, align 1
  %719 = load <2 x i32>, <2 x i32>* %86, align 1
  %720 = inttoptr i64 %716 to float*
  %721 = load float, float* %720, align 4
  %722 = extractelement <2 x float> %718, i32 0
  %723 = fadd float %722, %721
  store float %723, float* %87, align 1, !tbaa !2452
  %724 = bitcast <2 x float> %718 to <2 x i32>
  %725 = extractelement <2 x i32> %724, i32 1
  store i32 %725, i32* %20, align 1, !tbaa !2452
  %726 = extractelement <2 x i32> %719, i32 0
  store i32 %726, i32* %21, align 1, !tbaa !2452
  %727 = extractelement <2 x i32> %719, i32 1
  store i32 %727, i32* %23, align 1, !tbaa !2452
  %728 = load i64, i64* %RBP, align 8
  %729 = add i64 %728, -24
  %730 = add i64 %859, 39
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %729 to i64*
  %732 = load i64, i64* %731, align 8
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = add i64 %728, -40
  %734 = add i64 %859, 43
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %733 to i32*
  %736 = load i32, i32* %735, align 4
  %737 = sext i32 %736 to i64
  store i64 %737, i64* %RCX, align 8, !tbaa !2428
  %738 = shl nsw i64 %737, 2
  %739 = add i64 %738, %732
  %740 = add i64 %859, 48
  store i64 %740, i64* %PC, align 8
  %741 = load <2 x float>, <2 x float>* %64, align 1
  %742 = extractelement <2 x float> %741, i32 0
  %743 = inttoptr i64 %739 to float*
  store float %742, float* %743, align 4
  %744 = load i64, i64* %RBP, align 8
  %745 = add i64 %744, -40
  %746 = load i64, i64* %PC, align 8
  %747 = add i64 %746, 3
  store i64 %747, i64* %PC, align 8
  %748 = inttoptr i64 %745 to i32*
  %749 = load i32, i32* %748, align 4
  %750 = add i32 %749, 1
  %751 = zext i32 %750 to i64
  store i64 %751, i64* %RAX, align 8, !tbaa !2428
  %752 = icmp eq i32 %749, -1
  %753 = icmp eq i32 %750, 0
  %754 = or i1 %752, %753
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %73, align 1, !tbaa !2432
  %756 = and i32 %750, 255
  %757 = tail call i32 @llvm.ctpop.i32(i32 %756) #8
  %758 = trunc i32 %757 to i8
  %759 = and i8 %758, 1
  %760 = xor i8 %759, 1
  store i8 %760, i8* %74, align 1, !tbaa !2446
  %761 = xor i32 %749, %750
  %762 = lshr i32 %761, 4
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %75, align 1, !tbaa !2450
  %765 = zext i1 %753 to i8
  store i8 %765, i8* %76, align 1, !tbaa !2447
  %766 = lshr i32 %750, 31
  %767 = trunc i32 %766 to i8
  store i8 %767, i8* %77, align 1, !tbaa !2448
  %768 = lshr i32 %749, 31
  %769 = xor i32 %766, %768
  %770 = add nuw nsw i32 %769, %766
  %771 = icmp eq i32 %770, 2
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %78, align 1, !tbaa !2449
  %773 = add i64 %746, 9
  store i64 %773, i64* %PC, align 8
  store i32 %750, i32* %748, align 4
  %774 = load i64, i64* %PC, align 8
  %775 = add i64 %774, -69
  store i64 %775, i64* %PC, align 8, !tbaa !2428
  br label %block_40191a

block_4018a1:                                     ; preds = %block_401894, %block_401874
  %776 = phi i64 [ %.pre9, %block_401894 ], [ %413, %block_401874 ]
  %777 = load i64, i64* %RBP, align 8
  %778 = add i64 %777, -52
  %779 = add i64 %776, 5
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %778 to i32*
  %781 = load i32, i32* %780, align 4
  store i32 %781, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %782 = add i64 %777, -32
  %783 = add i64 %776, 9
  store i64 %783, i64* %PC, align 8
  %784 = inttoptr i64 %782 to i64*
  %785 = load i64, i64* %784, align 8
  store i64 %785, i64* %RAX, align 8, !tbaa !2428
  %786 = add i64 %776, 13
  store i64 %786, i64* %PC, align 8
  %787 = load <2 x float>, <2 x float>* %64, align 1
  %788 = extractelement <2 x float> %787, i32 0
  %789 = inttoptr i64 %785 to float*
  store float %788, float* %789, align 4
  %790 = load i64, i64* %RBP, align 8
  %791 = add i64 %790, -40
  %792 = load i64, i64* %PC, align 8
  %793 = add i64 %792, 3
  store i64 %793, i64* %PC, align 8
  %794 = inttoptr i64 %791 to i32*
  %795 = load i32, i32* %794, align 4
  %796 = add i32 %795, 1
  %797 = zext i32 %796 to i64
  store i64 %797, i64* %RAX, align 8, !tbaa !2428
  %798 = icmp eq i32 %795, -1
  %799 = icmp eq i32 %796, 0
  %800 = or i1 %798, %799
  %801 = zext i1 %800 to i8
  store i8 %801, i8* %73, align 1, !tbaa !2432
  %802 = and i32 %796, 255
  %803 = tail call i32 @llvm.ctpop.i32(i32 %802) #8
  %804 = trunc i32 %803 to i8
  %805 = and i8 %804, 1
  %806 = xor i8 %805, 1
  store i8 %806, i8* %74, align 1, !tbaa !2446
  %807 = xor i32 %795, %796
  %808 = lshr i32 %807, 4
  %809 = trunc i32 %808 to i8
  %810 = and i8 %809, 1
  store i8 %810, i8* %75, align 1, !tbaa !2450
  %811 = zext i1 %799 to i8
  store i8 %811, i8* %76, align 1, !tbaa !2447
  %812 = lshr i32 %796, 31
  %813 = trunc i32 %812 to i8
  store i8 %813, i8* %77, align 1, !tbaa !2448
  %814 = lshr i32 %795, 31
  %815 = xor i32 %812, %814
  %816 = add nuw nsw i32 %815, %812
  %817 = icmp eq i32 %816, 2
  %818 = zext i1 %817 to i8
  store i8 %818, i8* %78, align 1, !tbaa !2449
  %819 = add i64 %792, 9
  store i64 %819, i64* %PC, align 8
  store i32 %796, i32* %794, align 4
  %820 = load i64, i64* %PC, align 8
  %821 = add i64 %820, -197
  store i64 %821, i64* %PC, align 8, !tbaa !2428
  br label %block_4017f2

block_40191a:                                     ; preds = %block_401913, %block_401926
  %822 = phi i64 [ %.pre12, %block_401913 ], [ %775, %block_401926 ]
  %823 = load i64, i64* %RBP, align 8
  %824 = add i64 %823, -40
  %825 = add i64 %822, 3
  store i64 %825, i64* %PC, align 8
  %826 = inttoptr i64 %824 to i32*
  %827 = load i32, i32* %826, align 4
  %828 = zext i32 %827 to i64
  store i64 %828, i64* %RAX, align 8, !tbaa !2428
  %829 = add i64 %823, -16
  %830 = add i64 %822, 6
  store i64 %830, i64* %PC, align 8
  %831 = inttoptr i64 %829 to i32*
  %832 = load i32, i32* %831, align 4
  %833 = sub i32 %827, %832
  %834 = icmp ult i32 %827, %832
  %835 = zext i1 %834 to i8
  store i8 %835, i8* %73, align 1, !tbaa !2432
  %836 = and i32 %833, 255
  %837 = tail call i32 @llvm.ctpop.i32(i32 %836) #8
  %838 = trunc i32 %837 to i8
  %839 = and i8 %838, 1
  %840 = xor i8 %839, 1
  store i8 %840, i8* %74, align 1, !tbaa !2446
  %841 = xor i32 %832, %827
  %842 = xor i32 %841, %833
  %843 = lshr i32 %842, 4
  %844 = trunc i32 %843 to i8
  %845 = and i8 %844, 1
  store i8 %845, i8* %75, align 1, !tbaa !2450
  %846 = icmp eq i32 %833, 0
  %847 = zext i1 %846 to i8
  store i8 %847, i8* %76, align 1, !tbaa !2447
  %848 = lshr i32 %833, 31
  %849 = trunc i32 %848 to i8
  store i8 %849, i8* %77, align 1, !tbaa !2448
  %850 = lshr i32 %827, 31
  %851 = lshr i32 %832, 31
  %852 = xor i32 %851, %850
  %853 = xor i32 %848, %850
  %854 = add nuw nsw i32 %853, %852
  %855 = icmp eq i32 %854, 2
  %856 = zext i1 %855 to i8
  store i8 %856, i8* %78, align 1, !tbaa !2449
  %857 = icmp ne i8 %849, 0
  %858 = xor i1 %857, %855
  %.v17 = select i1 %858, i64 12, i64 74
  %859 = add i64 %822, %.v17
  store i64 %859, i64* %PC, align 8, !tbaa !2428
  br i1 %858, label %block_401926, label %block_401964

block_401913:                                     ; preds = %block_401907
  %860 = add i64 %876, -40
  %861 = add i64 %912, 7
  store i64 %861, i64* %PC, align 8
  %862 = inttoptr i64 %860 to i32*
  store i32 0, i32* %862, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_40191a

block_401894:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %863 = add i64 %334, -32
  %864 = add i64 %341, 4
  store i64 %864, i64* %PC, align 8
  %865 = inttoptr i64 %863 to i64*
  %866 = load i64, i64* %865, align 8
  store i64 %866, i64* %RAX, align 8, !tbaa !2428
  %867 = add i64 %341, 8
  store i64 %867, i64* %PC, align 8
  %868 = inttoptr i64 %866 to i32*
  %869 = load i32, i32* %868, align 4
  store i32 %869, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %870 = add i64 %334, -52
  %871 = add i64 %341, 13
  store i64 %871, i64* %PC, align 8
  %872 = load <2 x float>, <2 x float>* %64, align 1
  %873 = extractelement <2 x float> %872, i32 0
  %874 = inttoptr i64 %870 to float*
  store float %873, float* %874, align 4
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_4018a1

block_401907:                                     ; preds = %block_401900, %block_401964
  %875 = phi i64 [ %.pre11, %block_401900 ], [ %443, %block_401964 ]
  %876 = load i64, i64* %RBP, align 8
  %877 = add i64 %876, -44
  %878 = add i64 %875, 3
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %877 to i32*
  %880 = load i32, i32* %879, align 4
  %881 = zext i32 %880 to i64
  store i64 %881, i64* %RAX, align 8, !tbaa !2428
  %882 = add i64 %876, -16
  %883 = add i64 %875, 6
  store i64 %883, i64* %PC, align 8
  %884 = inttoptr i64 %882 to i32*
  %885 = load i32, i32* %884, align 4
  %886 = sub i32 %880, %885
  %887 = icmp ult i32 %880, %885
  %888 = zext i1 %887 to i8
  store i8 %888, i8* %73, align 1, !tbaa !2432
  %889 = and i32 %886, 255
  %890 = tail call i32 @llvm.ctpop.i32(i32 %889) #8
  %891 = trunc i32 %890 to i8
  %892 = and i8 %891, 1
  %893 = xor i8 %892, 1
  store i8 %893, i8* %74, align 1, !tbaa !2446
  %894 = xor i32 %885, %880
  %895 = xor i32 %894, %886
  %896 = lshr i32 %895, 4
  %897 = trunc i32 %896 to i8
  %898 = and i8 %897, 1
  store i8 %898, i8* %75, align 1, !tbaa !2450
  %899 = icmp eq i32 %886, 0
  %900 = zext i1 %899 to i8
  store i8 %900, i8* %76, align 1, !tbaa !2447
  %901 = lshr i32 %886, 31
  %902 = trunc i32 %901 to i8
  store i8 %902, i8* %77, align 1, !tbaa !2448
  %903 = lshr i32 %880, 31
  %904 = lshr i32 %885, 31
  %905 = xor i32 %904, %903
  %906 = xor i32 %901, %903
  %907 = add nuw nsw i32 %906, %905
  %908 = icmp eq i32 %907, 2
  %909 = zext i1 %908 to i8
  store i8 %909, i8* %78, align 1, !tbaa !2449
  %910 = icmp ne i8 %902, 0
  %911 = xor i1 %910, %908
  %.v16 = select i1 %911, i64 12, i64 112
  %912 = add i64 %875, %.v16
  store i64 %912, i64* %PC, align 8, !tbaa !2428
  br i1 %911, label %block_401913, label %block_401977

block_401900:                                     ; preds = %block_4018d6
  %913 = add i64 %540, -44
  %914 = add i64 %576, 7
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to i32*
  store i32 0, i32* %915, align 4
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_401907
}

; Function Attrs: noinline
define %struct.Memory* @sub_402810_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402810:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = bitcast %union.VectorReg* %4 to i8*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast %union.VectorReg* %4 to i32*
  store i32 0, i32* %15, align 1, !tbaa !2451
  %16 = getelementptr inbounds i8, i8* %13, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 1, !tbaa !2451
  %18 = bitcast i64* %14 to i32*
  store i32 0, i32* %18, align 1, !tbaa !2451
  %19 = getelementptr inbounds i8, i8* %13, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = bitcast %union.VectorReg* %5 to i8*
  %22 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 16) to i32*), align 16
  %23 = bitcast %union.VectorReg* %5 to i32*
  store i32 %22, i32* %23, align 1, !tbaa !2452
  %24 = getelementptr inbounds i8, i8* %21, i64 4
  %25 = bitcast i8* %24 to float*
  store float 0.000000e+00, float* %25, align 1, !tbaa !2452
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %27 = bitcast i64* %26 to float*
  store float 0.000000e+00, float* %27, align 1, !tbaa !2452
  %28 = getelementptr inbounds i8, i8* %21, i64 12
  %29 = bitcast i8* %28 to float*
  store float 0.000000e+00, float* %29, align 1, !tbaa !2452
  %30 = add i64 %9, -12
  %31 = add i64 %12, 19
  store i64 %31, i64* %PC, align 8
  %32 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 1
  %34 = extractelement <2 x float> %33, i32 0
  %35 = inttoptr i64 %30 to float*
  store float %34, float* %35, align 4
  %36 = load i64, i64* %RBP, align 8
  %37 = add i64 %36, -8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 5
  store i64 %39, i64* %PC, align 8
  %40 = bitcast %union.VectorReg* %5 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 1
  %42 = extractelement <2 x float> %41, i32 0
  %43 = inttoptr i64 %37 to float*
  store float %42, float* %43, align 4
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -20
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 5
  store i64 %47, i64* %PC, align 8
  %48 = bitcast %union.VectorReg* %4 to <2 x float>*
  %49 = load <2 x float>, <2 x float>* %48, align 1
  %50 = extractelement <2 x float> %49, i32 0
  %51 = inttoptr i64 %45 to float*
  store float %50, float* %51, align 4
  %52 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %54 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = bitcast [32 x %union.VectorReg]* %3 to i32*
  %56 = getelementptr inbounds i8, i8* %52, i64 4
  %57 = bitcast i8* %56 to i32*
  %58 = bitcast i64* %53 to i32*
  %59 = getelementptr inbounds i8, i8* %52, i64 12
  %60 = bitcast i8* %59 to i32*
  %61 = bitcast %union.VectorReg* %4 to float*
  %62 = bitcast i8* %16 to float*
  %63 = bitcast i64* %14 to float*
  %64 = bitcast i8* %19 to float*
  %65 = bitcast %union.VectorReg* %4 to double*
  %66 = bitcast [32 x %union.VectorReg]* %3 to double*
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %69 = bitcast i64* %53 to double*
  %70 = bitcast i64* %14 to <2 x i32>*
  %71 = bitcast [32 x %union.VectorReg]* %3 to float*
  %72 = bitcast i8* %56 to float*
  %73 = bitcast i64* %53 to float*
  %74 = bitcast i8* %59 to float*
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre = load i64, i64* %PC, align 8
  br label %block_40282e

block_40282e:                                     ; preds = %block_40284a, %block_402810
  %79 = phi i64 [ %.pre, %block_402810 ], [ %210, %block_40284a ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402810 ], [ %113, %block_40284a ]
  store i32 0, i32* %55, align 1, !tbaa !2451
  store i32 0, i32* %57, align 1, !tbaa !2451
  store i32 0, i32* %58, align 1, !tbaa !2451
  store i32 0, i32* %60, align 1, !tbaa !2451
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -20
  %82 = add i64 %79, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i32*
  %84 = load i32, i32* %83, align 4
  store i32 %84, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %85 = load <2 x float>, <2 x float>* %48, align 1
  %86 = extractelement <2 x float> %85, i32 0
  %87 = fpext float %86 to double
  store double %87, double* %65, align 1, !tbaa !2454
  %88 = add i64 %79, 16
  store i64 %88, i64* %PC, align 8
  %89 = load double, double* %66, align 1
  %90 = fcmp uno double %87, %89
  br i1 %90, label %91, label %101

; <label>:91:                                     ; preds = %block_40282e
  %92 = fadd double %87, %89
  %93 = bitcast double %92 to i64
  %94 = and i64 %93, 9221120237041090560
  %95 = icmp eq i64 %94, 9218868437227405312
  %96 = and i64 %93, 2251799813685247
  %97 = icmp ne i64 %96, 0
  %98 = and i1 %95, %97
  br i1 %98, label %99, label %107

; <label>:99:                                     ; preds = %91
  %100 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %88, %struct.Memory* %MEMORY.0) #9
  %.pre1 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:101:                                    ; preds = %block_40282e
  %102 = fcmp ogt double %87, %89
  br i1 %102, label %107, label %103

; <label>:103:                                    ; preds = %101
  %104 = fcmp olt double %87, %89
  br i1 %104, label %107, label %105

; <label>:105:                                    ; preds = %103
  %106 = fcmp oeq double %87, %89
  br i1 %106, label %107, label %111

; <label>:107:                                    ; preds = %105, %103, %101, %91
  %108 = phi i8 [ 0, %101 ], [ 0, %103 ], [ 1, %105 ], [ 1, %91 ]
  %109 = phi i8 [ 0, %101 ], [ 0, %103 ], [ 0, %105 ], [ 1, %91 ]
  %110 = phi i8 [ 0, %101 ], [ 1, %103 ], [ 0, %105 ], [ 1, %91 ]
  store i8 %108, i8* %67, align 1, !tbaa !2456
  store i8 %109, i8* %68, align 1, !tbaa !2456
  store i8 %110, i8* %75, align 1, !tbaa !2456
  br label %111

; <label>:111:                                    ; preds = %107, %105
  store i8 0, i8* %76, align 1, !tbaa !2456
  store i8 0, i8* %77, align 1, !tbaa !2456
  store i8 0, i8* %78, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %111, %99
  %112 = phi i64 [ %.pre1, %99 ], [ %88, %111 ]
  %113 = phi %struct.Memory* [ %100, %99 ], [ %MEMORY.0, %111 ]
  %114 = load i8, i8* %67, align 1, !tbaa !2447
  %115 = icmp eq i8 %114, 0
  %.v = select i1 %115, i64 100, i64 6
  %116 = add i64 %112, %.v
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br i1 %115, label %block_4028a2, label %block_402844

block_40284a:                                     ; preds = %block_402844
  %117 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 80) to double*), align 16
  store double %117, double* %66, align 1, !tbaa !2454
  store double 0.000000e+00, double* %69, align 1, !tbaa !2454
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -8
  %120 = add i64 %213, 13
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i32*
  %122 = load i32, i32* %121, align 4
  store i32 %122, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %123 = load <2 x float>, <2 x float>* %48, align 1
  %124 = extractelement <2 x float> %123, i32 0
  %125 = fpext float %124 to double
  %126 = load <2 x i32>, <2 x i32>* %70, align 1
  %127 = fsub double %125, %117
  %128 = bitcast double %127 to <2 x i32>
  %129 = fptrunc double %127 to float
  store float %129, float* %61, align 1, !tbaa !2452
  %130 = extractelement <2 x i32> %128, i32 1
  store i32 %130, i32* %17, align 1, !tbaa !2452
  %131 = extractelement <2 x i32> %126, i32 0
  store i32 %131, i32* %18, align 1, !tbaa !2452
  %132 = extractelement <2 x i32> %126, i32 1
  store i32 %132, i32* %20, align 1, !tbaa !2452
  %133 = add i64 %118, -12
  %134 = add i64 %213, 30
  store i64 %134, i64* %PC, align 8
  %135 = load <2 x float>, <2 x float>* %48, align 1
  %136 = extractelement <2 x float> %135, i32 0
  %137 = inttoptr i64 %133 to float*
  store float %136, float* %137, align 4
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -12
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, 5
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %139 to float*
  %143 = inttoptr i64 %139 to i32*
  %144 = load i32, i32* %143, align 4
  store i32 %144, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %145 = add i64 %140, 10
  store i64 %145, i64* %PC, align 8
  %146 = load <2 x float>, <2 x float>* %48, align 1
  %147 = load <2 x i32>, <2 x i32>* %70, align 1
  %148 = load float, float* %142, align 4
  %149 = extractelement <2 x float> %146, i32 0
  %150 = fadd float %149, %148
  store float %150, float* %61, align 1, !tbaa !2452
  %151 = bitcast <2 x float> %146 to <2 x i32>
  %152 = extractelement <2 x i32> %151, i32 1
  store i32 %152, i32* %17, align 1, !tbaa !2452
  %153 = extractelement <2 x i32> %147, i32 0
  store i32 %153, i32* %18, align 1, !tbaa !2452
  %154 = extractelement <2 x i32> %147, i32 1
  store i32 %154, i32* %20, align 1, !tbaa !2452
  %155 = add i64 %140, 15
  store i64 %155, i64* %PC, align 8
  %156 = load <2 x float>, <2 x float>* %48, align 1
  %157 = load <2 x i32>, <2 x i32>* %70, align 1
  %158 = load float, float* %142, align 4
  %159 = extractelement <2 x float> %156, i32 0
  %160 = fadd float %159, %158
  store float %160, float* %61, align 1, !tbaa !2452
  %161 = bitcast <2 x float> %156 to <2 x i32>
  %162 = extractelement <2 x i32> %161, i32 1
  store i32 %162, i32* %17, align 1, !tbaa !2452
  %163 = extractelement <2 x i32> %157, i32 0
  store i32 %163, i32* %18, align 1, !tbaa !2452
  %164 = extractelement <2 x i32> %157, i32 1
  store i32 %164, i32* %20, align 1, !tbaa !2452
  %165 = add i64 %138, -16
  %166 = add i64 %140, 20
  store i64 %166, i64* %PC, align 8
  %167 = load <2 x float>, <2 x float>* %48, align 1
  %168 = extractelement <2 x float> %167, i32 0
  %169 = inttoptr i64 %165 to float*
  store float %168, float* %169, align 4
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -16
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, 5
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %171 to i32*
  %175 = load i32, i32* %174, align 4
  store i32 %175, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %176 = load <2 x float>, <2 x float>* %48, align 1
  %177 = extractelement <2 x float> %176, i32 0
  %178 = fpext float %177 to double
  %179 = load i64, i64* %14, align 1
  %180 = load double, double* %66, align 1
  %181 = fsub double %178, %180
  %182 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %183 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %184 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %185 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %182, i32* %55, align 1, !tbaa !2452
  store i32 %183, i32* %57, align 1, !tbaa !2452
  store i32 %184, i32* %58, align 1, !tbaa !2452
  store i32 %185, i32* %60, align 1, !tbaa !2452
  %186 = bitcast double %181 to i64
  %187 = load i64, i64* %54, align 1
  %188 = load i64, i64* %53, align 1
  %189 = and i64 %187, %186
  %190 = and i64 %188, %179
  %191 = trunc i64 %189 to i32
  %192 = lshr i64 %189, 32
  %193 = trunc i64 %192 to i32
  store i32 %191, i32* %15, align 1, !tbaa !2451
  store i32 %193, i32* %17, align 1, !tbaa !2451
  %194 = trunc i64 %190 to i32
  store i32 %194, i32* %18, align 1, !tbaa !2451
  %195 = lshr i64 %190, 32
  %196 = trunc i64 %195 to i32
  store i32 %196, i32* %20, align 1, !tbaa !2451
  %197 = bitcast i64 %187 to <2 x i32>
  %198 = bitcast i64 %188 to <2 x i32>
  %199 = load double, double* %65, align 1
  %200 = fptrunc double %199 to float
  store float %200, float* %71, align 1, !tbaa !2452
  %201 = extractelement <2 x i32> %197, i32 1
  store i32 %201, i32* %57, align 1, !tbaa !2452
  %202 = extractelement <2 x i32> %198, i32 0
  store i32 %202, i32* %58, align 1, !tbaa !2452
  %203 = extractelement <2 x i32> %198, i32 1
  store i32 %203, i32* %60, align 1, !tbaa !2452
  %204 = add i64 %170, -20
  %205 = add i64 %172, 33
  store i64 %205, i64* %PC, align 8
  %206 = load <2 x float>, <2 x float>* %32, align 1
  %207 = extractelement <2 x float> %206, i32 0
  %208 = inttoptr i64 %204 to float*
  store float %207, float* %208, align 4
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, -111
  store i64 %210, i64* %PC, align 8, !tbaa !2428
  br label %block_40282e

block_402844:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %211 = load i8, i8* %68, align 1, !tbaa !2446
  %212 = icmp ne i8 %211, 0
  %.v2 = select i1 %212, i64 94, i64 6
  %213 = add i64 %116, %.v2
  store i64 %213, i64* %PC, align 8, !tbaa !2428
  %214 = icmp eq i8 %211, 1
  br i1 %214, label %block_4028a2, label %block_40284a

block_4028a2:                                     ; preds = %block_402844, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %215 = phi i64 [ %213, %block_402844 ], [ %116, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -20
  %218 = add i64 %215, 5
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i32*
  %220 = load i32, i32* %219, align 4
  store i32 %220, i32* %55, align 1, !tbaa !2452
  store float 0.000000e+00, float* %72, align 1, !tbaa !2452
  store float 0.000000e+00, float* %73, align 1, !tbaa !2452
  store float 0.000000e+00, float* %74, align 1, !tbaa !2452
  %221 = load <2 x float>, <2 x float>* %32, align 1
  %222 = extractelement <2 x float> %221, i32 0
  %223 = fpext float %222 to double
  store double %223, double* %66, align 1, !tbaa !2454
  %224 = add i64 %216, -4
  %225 = add i64 %215, 14
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %224 to i32*
  %227 = load i32, i32* %226, align 4
  store i32 %227, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %228 = load <2 x float>, <2 x float>* %48, align 1
  %229 = extractelement <2 x float> %228, i32 0
  %230 = fpext float %229 to double
  %231 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %232 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %233 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %234 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %231, i32* %23, align 1, !tbaa !2452
  %235 = bitcast i8* %24 to i32*
  store i32 %232, i32* %235, align 1, !tbaa !2452
  %236 = bitcast i64* %26 to i32*
  store i32 %233, i32* %236, align 1, !tbaa !2452
  %237 = bitcast i8* %28 to i32*
  store i32 %234, i32* %237, align 1, !tbaa !2452
  %238 = bitcast double %230 to i64
  %239 = load i64, i64* %14, align 1
  %240 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  %241 = load i64, i64* %240, align 1
  %242 = load i64, i64* %26, align 1
  %243 = and i64 %241, %238
  %244 = and i64 %242, %239
  %245 = trunc i64 %243 to i32
  %246 = lshr i64 %243, 32
  %247 = trunc i64 %246 to i32
  store i32 %245, i32* %15, align 1, !tbaa !2451
  store i32 %247, i32* %17, align 1, !tbaa !2451
  %248 = trunc i64 %244 to i32
  store i32 %248, i32* %18, align 1, !tbaa !2451
  %249 = lshr i64 %244, 32
  %250 = trunc i64 %249 to i32
  store i32 %250, i32* %20, align 1, !tbaa !2451
  %251 = bitcast i64* %53 to <2 x i32>*
  %252 = load <2 x i32>, <2 x i32>* %251, align 1
  %253 = load double, double* %65, align 1
  %254 = fmul double %223, %253
  %255 = bitcast double %254 to <2 x i32>
  %256 = fptrunc double %254 to float
  store float %256, float* %71, align 1, !tbaa !2452
  %257 = extractelement <2 x i32> %255, i32 1
  store i32 %257, i32* %57, align 1, !tbaa !2452
  %258 = extractelement <2 x i32> %252, i32 0
  store i32 %258, i32* %58, align 1, !tbaa !2452
  %259 = extractelement <2 x i32> %252, i32 1
  store i32 %259, i32* %60, align 1, !tbaa !2452
  %260 = add i64 %215, 38
  store i64 %260, i64* %PC, align 8
  %261 = load i64, i64* %8, align 8, !tbaa !2428
  %262 = add i64 %261, 8
  %263 = inttoptr i64 %261 to i64*
  %264 = load i64, i64* %263, align 8
  store i64 %264, i64* %RBP, align 8, !tbaa !2428
  store i64 %262, i64* %8, align 8, !tbaa !2428
  %265 = add i64 %215, 39
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %262 to i64*
  %267 = load i64, i64* %266, align 8
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %268 = add i64 %261, 16
  store i64 %268, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %113
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a50_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402a50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %17 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %17, align 1, !tbaa !2451
  %18 = getelementptr inbounds i8, i8* %15, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 0, i32* %19, align 1, !tbaa !2451
  %20 = bitcast i64* %16 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = getelementptr inbounds i8, i8* %15, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 0, i32* %22, align 1, !tbaa !2451
  %23 = add i64 %11, -16
  %24 = load i32, i32* %EDI, align 4
  %25 = add i64 %14, 9
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -60
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -56
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -40
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 5
  store i64 %64, i64* %PC, align 8
  %65 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 1
  %67 = extractelement <2 x float> %66, i32 0
  %68 = inttoptr i64 %62 to float*
  store float %67, float* %68, align 4
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 4
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %75, align 1, !tbaa !2432
  %76 = and i32 %74, 255
  %77 = tail call i32 @llvm.ctpop.i32(i32 %76) #8
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %80, i8* %81, align 1, !tbaa !2446
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %82, align 1, !tbaa !2450
  %83 = icmp eq i32 %74, 0
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = lshr i32 %74, 31
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %89, align 1, !tbaa !2449
  %90 = xor i1 %83, true
  %91 = icmp eq i8 %87, 0
  %92 = and i1 %91, %90
  %.v = select i1 %92, i64 23, i64 10
  %93 = add i64 %71, %.v
  store i64 %93, i64* %PC, align 8, !tbaa !2428
  br i1 %92, label %block_402a93, label %block_402a86

block_402b9a:                                     ; preds = %block_402b58
  %94 = add i64 %100, -4
  %95 = add i64 %136, 10
  store i64 %95, i64* %PC, align 8
  %96 = load <2 x float>, <2 x float>* %65, align 1
  %97 = extractelement <2 x float> %96, i32 0
  %98 = inttoptr i64 %94 to float*
  store float %97, float* %98, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_402ba4

block_402b58:                                     ; preds = %block_402b64, %block_402b51
  %99 = phi i64 [ %682, %block_402b64 ], [ %.pre, %block_402b51 ]
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -44
  %102 = add i64 %99, 3
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = add i64 %100, -8
  %107 = add i64 %99, 6
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = sub i32 %104, %109
  %111 = icmp ult i32 %104, %109
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %75, align 1, !tbaa !2432
  %113 = and i32 %110, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %81, align 1, !tbaa !2446
  %118 = xor i32 %109, %104
  %119 = xor i32 %118, %110
  %120 = lshr i32 %119, 4
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %82, align 1, !tbaa !2450
  %123 = icmp eq i32 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %85, align 1, !tbaa !2447
  %125 = lshr i32 %110, 31
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %88, align 1, !tbaa !2448
  %127 = lshr i32 %104, 31
  %128 = lshr i32 %109, 31
  %129 = xor i32 %128, %127
  %130 = xor i32 %125, %127
  %131 = add nuw nsw i32 %130, %129
  %132 = icmp eq i32 %131, 2
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %89, align 1, !tbaa !2449
  %134 = icmp ne i8 %126, 0
  %135 = xor i1 %134, %132
  %.v20 = select i1 %135, i64 12, i64 66
  %136 = add i64 %99, %.v20
  %137 = add i64 %100, -40
  %138 = add i64 %136, 5
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  store i32 %140, i32* %17, align 1, !tbaa !2452
  store float 0.000000e+00, float* %587, align 1, !tbaa !2452
  store float 0.000000e+00, float* %588, align 1, !tbaa !2452
  store float 0.000000e+00, float* %589, align 1, !tbaa !2452
  br i1 %135, label %block_402b64, label %block_402b9a

block_402ba4:                                     ; preds = %block_402b42, %block_402a86, %block_402b9a
  %.pre-phi14 = phi float* [ %486, %block_402b42 ], [ %.pre13, %block_402a86 ], [ %589, %block_402b9a ]
  %.pre-phi12 = phi float* [ %485, %block_402b42 ], [ %.pre11, %block_402a86 ], [ %588, %block_402b9a ]
  %.pre-phi10 = phi float* [ %484, %block_402b42 ], [ %.pre9, %block_402a86 ], [ %587, %block_402b9a ]
  %.pre-phi = phi float* [ %483, %block_402b42 ], [ %.pre8, %block_402a86 ], [ %586, %block_402b9a ]
  %141 = phi i64 [ %689, %block_402b42 ], [ %556, %block_402a86 ], [ %.pre7, %block_402b9a ]
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -4
  %144 = add i64 %141, 5
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = bitcast float* %.pre-phi to i32*
  store i32 %146, i32* %147, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi10, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi12, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi14, align 1, !tbaa !2452
  %148 = add i64 %141, 6
  store i64 %148, i64* %PC, align 8
  %149 = load i64, i64* %10, align 8, !tbaa !2428
  %150 = add i64 %149, 8
  %151 = inttoptr i64 %149 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %RBP, align 8, !tbaa !2428
  store i64 %150, i64* %10, align 8, !tbaa !2428
  %153 = add i64 %141, 7
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %150 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %156 = add i64 %149, 16
  store i64 %156, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402ad8:                                     ; preds = %block_402ace
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %75, align 1, !tbaa !2432
  store i8 1, i8* %81, align 1, !tbaa !2446
  store i8 1, i8* %85, align 1, !tbaa !2447
  store i8 0, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %82, align 1, !tbaa !2450
  %157 = add i64 %275, -8
  %158 = add i64 %290, 5
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i32*
  %160 = load i32, i32* %159, align 4
  %161 = sub i32 0, %160
  %162 = lshr i32 %161, 31
  %163 = sub i32 1, %160
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = icmp ult i32 %163, %161
  %166 = icmp eq i32 %163, 0
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %75, align 1, !tbaa !2432
  %169 = and i32 %163, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #8
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %81, align 1, !tbaa !2446
  %174 = xor i32 %163, %161
  %175 = lshr i32 %174, 4
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  store i8 %177, i8* %82, align 1, !tbaa !2450
  %178 = zext i1 %166 to i8
  store i8 %178, i8* %85, align 1, !tbaa !2447
  %179 = lshr i32 %163, 31
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %88, align 1, !tbaa !2448
  %181 = xor i32 %179, %162
  %182 = add nuw nsw i32 %181, %179
  %183 = icmp eq i32 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %89, align 1, !tbaa !2449
  %185 = add i64 %290, 12
  store i64 %185, i64* %PC, align 8
  %186 = load i32, i32* %278, align 4
  %187 = sext i32 %163 to i64
  %188 = sext i32 %186 to i64
  %189 = mul nsw i64 %188, %187
  %190 = trunc i64 %189 to i32
  %191 = and i64 %189, 4294967295
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = shl i64 %189, 32
  %193 = ashr exact i64 %192, 32
  %194 = icmp ne i64 %193, %189
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %75, align 1, !tbaa !2432
  %196 = and i32 %190, 255
  %197 = tail call i32 @llvm.ctpop.i32(i32 %196) #8
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  store i8 %200, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  store i8 0, i8* %85, align 1, !tbaa !2447
  %201 = lshr i32 %190, 31
  %202 = trunc i32 %201 to i8
  store i8 %202, i8* %88, align 1, !tbaa !2448
  store i8 %195, i8* %89, align 1, !tbaa !2449
  %203 = add i64 %275, -52
  %204 = add i64 %290, 15
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i32*
  store i32 %190, i32* %205, align 4
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_402ae7

block_402aee:                                     ; preds = %block_402ae7, %block_402afa
  %206 = phi i64 [ %.pre6, %block_402ae7 ], [ %477, %block_402afa ]
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -44
  %209 = add i64 %206, 3
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i32*
  %211 = load i32, i32* %210, align 4
  %212 = zext i32 %211 to i64
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = add i64 %207, -8
  %214 = add i64 %206, 6
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = sub i32 %211, %216
  %218 = icmp ult i32 %211, %216
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %75, align 1, !tbaa !2432
  %220 = and i32 %217, 255
  %221 = tail call i32 @llvm.ctpop.i32(i32 %220) #8
  %222 = trunc i32 %221 to i8
  %223 = and i8 %222, 1
  %224 = xor i8 %223, 1
  store i8 %224, i8* %81, align 1, !tbaa !2446
  %225 = xor i32 %216, %211
  %226 = xor i32 %225, %217
  %227 = lshr i32 %226, 4
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  store i8 %229, i8* %82, align 1, !tbaa !2450
  %230 = icmp eq i32 %217, 0
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %85, align 1, !tbaa !2447
  %232 = lshr i32 %217, 31
  %233 = trunc i32 %232 to i8
  store i8 %233, i8* %88, align 1, !tbaa !2448
  %234 = lshr i32 %211, 31
  %235 = lshr i32 %216, 31
  %236 = xor i32 %235, %234
  %237 = xor i32 %232, %234
  %238 = add nuw nsw i32 %237, %236
  %239 = icmp eq i32 %238, 2
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %89, align 1, !tbaa !2449
  %241 = icmp ne i8 %233, 0
  %242 = xor i1 %241, %239
  %.v19 = select i1 %242, i64 12, i64 84
  %243 = add i64 %206, %.v19
  %244 = add i64 %207, -40
  %245 = add i64 %243, 5
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i32*
  %247 = load i32, i32* %246, align 4
  store i32 %247, i32* %17, align 1, !tbaa !2452
  store float 0.000000e+00, float* %484, align 1, !tbaa !2452
  store float 0.000000e+00, float* %485, align 1, !tbaa !2452
  store float 0.000000e+00, float* %486, align 1, !tbaa !2452
  br i1 %242, label %block_402afa, label %block_402b42

block_402a9d:                                     ; preds = %block_402a93
  %248 = add i64 %69, -36
  %249 = add i64 %582, 4
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = add i32 %251, -1
  %253 = icmp eq i32 %251, 0
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %75, align 1, !tbaa !2432
  %255 = and i32 %252, 255
  %256 = tail call i32 @llvm.ctpop.i32(i32 %255) #8
  %257 = trunc i32 %256 to i8
  %258 = and i8 %257, 1
  %259 = xor i8 %258, 1
  store i8 %259, i8* %81, align 1, !tbaa !2446
  %260 = xor i32 %251, %252
  %261 = lshr i32 %260, 4
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  store i8 %263, i8* %82, align 1, !tbaa !2450
  %264 = icmp eq i32 %252, 0
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %85, align 1, !tbaa !2447
  %266 = lshr i32 %252, 31
  %267 = trunc i32 %266 to i8
  store i8 %267, i8* %88, align 1, !tbaa !2448
  %268 = lshr i32 %251, 31
  %269 = xor i32 %266, %268
  %270 = add nuw nsw i32 %269, %268
  %271 = icmp eq i32 %270, 2
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %89, align 1, !tbaa !2449
  %.v16 = select i1 %264, i64 180, i64 10
  %273 = add i64 %582, %.v16
  store i64 %273, i64* %PC, align 8, !tbaa !2428
  br i1 %264, label %block_402b51, label %block_402aa7

block_402ace:                                     ; preds = %block_402aa7, %block_402abf
  %274 = phi i64 [ %.pre3, %block_402abf ], [ %316, %block_402aa7 ]
  %275 = phi i64 [ %.pre2, %block_402abf ], [ %300, %block_402aa7 ]
  %276 = add i64 %275, -36
  %277 = add i64 %274, 4
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i32*
  %279 = load i32, i32* %278, align 4
  store i8 0, i8* %75, align 1, !tbaa !2432
  %280 = and i32 %279, 255
  %281 = tail call i32 @llvm.ctpop.i32(i32 %280) #8
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  %284 = xor i8 %283, 1
  store i8 %284, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  %285 = icmp eq i32 %279, 0
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %85, align 1, !tbaa !2447
  %287 = lshr i32 %279, 31
  %288 = trunc i32 %287 to i8
  store i8 %288, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  %289 = icmp ne i8 %288, 0
  %.v18 = select i1 %289, i64 10, i64 25
  %290 = add i64 %274, %.v18
  store i64 %290, i64* %PC, align 8, !tbaa !2428
  br i1 %289, label %block_402ad8, label %block_402ae7

block_402aa7:                                     ; preds = %block_402a93, %block_402a9d
  %291 = phi i64 [ %582, %block_402a93 ], [ %273, %block_402a9d ]
  %292 = add i64 %69, -48
  %293 = add i64 %291, 7
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i32*
  store i32 0, i32* %294, align 4
  %295 = load i64, i64* %RBP, align 8
  %296 = add i64 %295, -52
  %297 = load i64, i64* %PC, align 8
  %298 = add i64 %297, 7
  store i64 %298, i64* %PC, align 8
  %299 = inttoptr i64 %296 to i32*
  store i32 0, i32* %299, align 4
  %300 = load i64, i64* %RBP, align 8
  %301 = add i64 %300, -20
  %302 = load i64, i64* %PC, align 8
  %303 = add i64 %302, 4
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %301 to i32*
  %305 = load i32, i32* %304, align 4
  store i8 0, i8* %75, align 1, !tbaa !2432
  %306 = and i32 %305, 255
  %307 = tail call i32 @llvm.ctpop.i32(i32 %306) #8
  %308 = trunc i32 %307 to i8
  %309 = and i8 %308, 1
  %310 = xor i8 %309, 1
  store i8 %310, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  %311 = icmp eq i32 %305, 0
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %85, align 1, !tbaa !2447
  %313 = lshr i32 %305, 31
  %314 = trunc i32 %313 to i8
  store i8 %314, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  %315 = icmp ne i8 %314, 0
  %.v17 = select i1 %315, i64 10, i64 25
  %316 = add i64 %302, %.v17
  store i64 %316, i64* %PC, align 8, !tbaa !2428
  br i1 %315, label %block_402abf, label %block_402ace

block_402afa:                                     ; preds = %block_402aee
  %317 = inttoptr i64 %244 to float*
  %318 = add i64 %207, -16
  %319 = add i64 %243, 9
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = add i64 %207, -48
  %323 = add i64 %243, 13
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i32*
  %325 = load i32, i32* %324, align 4
  %326 = sext i32 %325 to i64
  store i64 %326, i64* %RCX, align 8, !tbaa !2428
  %327 = shl nsw i64 %326, 2
  %328 = add i64 %327, %321
  %329 = add i64 %243, 18
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = bitcast %union.VectorReg* %7 to i32*
  store i32 %331, i32* %332, align 1, !tbaa !2452
  store float 0.000000e+00, float* %490, align 1, !tbaa !2452
  store float 0.000000e+00, float* %492, align 1, !tbaa !2452
  store float 0.000000e+00, float* %494, align 1, !tbaa !2452
  %333 = add i64 %207, -32
  %334 = add i64 %243, 22
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = add i64 %207, -52
  %338 = add i64 %243, 26
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = sext i32 %340 to i64
  store i64 %341, i64* %RCX, align 8, !tbaa !2428
  %342 = shl nsw i64 %341, 2
  %343 = add i64 %342, %336
  %344 = add i64 %243, 31
  store i64 %344, i64* %PC, align 8
  %345 = load <2 x float>, <2 x float>* %495, align 1
  %346 = load <2 x i32>, <2 x i32>* %496, align 1
  %347 = inttoptr i64 %343 to float*
  %348 = load float, float* %347, align 4
  %349 = extractelement <2 x float> %345, i32 0
  %350 = fmul float %349, %348
  store float %350, float* %488, align 1, !tbaa !2452
  %351 = bitcast <2 x float> %345 to <2 x i32>
  %352 = extractelement <2 x i32> %351, i32 1
  store i32 %352, i32* %497, align 1, !tbaa !2452
  %353 = extractelement <2 x i32> %346, i32 0
  store i32 %353, i32* %498, align 1, !tbaa !2452
  %354 = extractelement <2 x i32> %346, i32 1
  store i32 %354, i32* %499, align 1, !tbaa !2452
  %355 = load <2 x float>, <2 x float>* %65, align 1
  %356 = load <2 x i32>, <2 x i32>* %500, align 1
  %357 = load <2 x float>, <2 x float>* %495, align 1
  %358 = extractelement <2 x float> %355, i32 0
  %359 = extractelement <2 x float> %357, i32 0
  %360 = fadd float %358, %359
  store float %360, float* %483, align 1, !tbaa !2452
  %361 = bitcast <2 x float> %355 to <2 x i32>
  %362 = extractelement <2 x i32> %361, i32 1
  store i32 %362, i32* %19, align 1, !tbaa !2452
  %363 = extractelement <2 x i32> %356, i32 0
  store i32 %363, i32* %20, align 1, !tbaa !2452
  %364 = extractelement <2 x i32> %356, i32 1
  store i32 %364, i32* %22, align 1, !tbaa !2452
  %365 = add i64 %243, 40
  store i64 %365, i64* %PC, align 8
  %366 = load <2 x float>, <2 x float>* %65, align 1
  %367 = extractelement <2 x float> %366, i32 0
  store float %367, float* %317, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -48
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDX, align 8, !tbaa !2428
  %375 = add i64 %368, -20
  %376 = add i64 %370, 6
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i32*
  %378 = load i32, i32* %377, align 4
  %379 = add i32 %378, %373
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %RDX, align 8, !tbaa !2428
  %381 = icmp ult i32 %379, %373
  %382 = icmp ult i32 %379, %378
  %383 = or i1 %381, %382
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %75, align 1, !tbaa !2432
  %385 = and i32 %379, 255
  %386 = tail call i32 @llvm.ctpop.i32(i32 %385) #8
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  store i8 %389, i8* %81, align 1, !tbaa !2446
  %390 = xor i32 %378, %373
  %391 = xor i32 %390, %379
  %392 = lshr i32 %391, 4
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %82, align 1, !tbaa !2450
  %395 = icmp eq i32 %379, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %85, align 1, !tbaa !2447
  %397 = lshr i32 %379, 31
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %88, align 1, !tbaa !2448
  %399 = lshr i32 %373, 31
  %400 = lshr i32 %378, 31
  %401 = xor i32 %397, %399
  %402 = xor i32 %397, %400
  %403 = add nuw nsw i32 %401, %402
  %404 = icmp eq i32 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %89, align 1, !tbaa !2449
  %406 = add i64 %370, 9
  store i64 %406, i64* %PC, align 8
  store i32 %379, i32* %372, align 4
  %407 = load i64, i64* %RBP, align 8
  %408 = add i64 %407, -52
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC, align 8
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411, align 4
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %RDX, align 8, !tbaa !2428
  %414 = add i64 %407, -36
  %415 = add i64 %409, 6
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = add i32 %417, %412
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %RDX, align 8, !tbaa !2428
  %420 = icmp ult i32 %418, %412
  %421 = icmp ult i32 %418, %417
  %422 = or i1 %420, %421
  %423 = zext i1 %422 to i8
  store i8 %423, i8* %75, align 1, !tbaa !2432
  %424 = and i32 %418, 255
  %425 = tail call i32 @llvm.ctpop.i32(i32 %424) #8
  %426 = trunc i32 %425 to i8
  %427 = and i8 %426, 1
  %428 = xor i8 %427, 1
  store i8 %428, i8* %81, align 1, !tbaa !2446
  %429 = xor i32 %417, %412
  %430 = xor i32 %429, %418
  %431 = lshr i32 %430, 4
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  store i8 %433, i8* %82, align 1, !tbaa !2450
  %434 = icmp eq i32 %418, 0
  %435 = zext i1 %434 to i8
  store i8 %435, i8* %85, align 1, !tbaa !2447
  %436 = lshr i32 %418, 31
  %437 = trunc i32 %436 to i8
  store i8 %437, i8* %88, align 1, !tbaa !2448
  %438 = lshr i32 %412, 31
  %439 = lshr i32 %417, 31
  %440 = xor i32 %436, %438
  %441 = xor i32 %436, %439
  %442 = add nuw nsw i32 %440, %441
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %89, align 1, !tbaa !2449
  %445 = add i64 %409, 9
  store i64 %445, i64* %PC, align 8
  store i32 %418, i32* %411, align 4
  %446 = load i64, i64* %RBP, align 8
  %447 = add i64 %446, -44
  %448 = load i64, i64* %PC, align 8
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %447 to i32*
  %451 = load i32, i32* %450, align 4
  %452 = add i32 %451, 1
  %453 = zext i32 %452 to i64
  store i64 %453, i64* %RAX, align 8, !tbaa !2428
  %454 = icmp eq i32 %451, -1
  %455 = icmp eq i32 %452, 0
  %456 = or i1 %454, %455
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %75, align 1, !tbaa !2432
  %458 = and i32 %452, 255
  %459 = tail call i32 @llvm.ctpop.i32(i32 %458) #8
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* %81, align 1, !tbaa !2446
  %463 = xor i32 %451, %452
  %464 = lshr i32 %463, 4
  %465 = trunc i32 %464 to i8
  %466 = and i8 %465, 1
  store i8 %466, i8* %82, align 1, !tbaa !2450
  %467 = zext i1 %455 to i8
  store i8 %467, i8* %85, align 1, !tbaa !2447
  %468 = lshr i32 %452, 31
  %469 = trunc i32 %468 to i8
  store i8 %469, i8* %88, align 1, !tbaa !2448
  %470 = lshr i32 %451, 31
  %471 = xor i32 %468, %470
  %472 = add nuw nsw i32 %471, %468
  %473 = icmp eq i32 %472, 2
  %474 = zext i1 %473 to i8
  store i8 %474, i8* %89, align 1, !tbaa !2449
  %475 = add i64 %448, 9
  store i64 %475, i64* %PC, align 8
  store i32 %452, i32* %450, align 4
  %476 = load i64, i64* %PC, align 8
  %477 = add i64 %476, -79
  store i64 %477, i64* %PC, align 8, !tbaa !2428
  br label %block_402aee

block_402ae7:                                     ; preds = %block_402ace, %block_402ad8
  %478 = phi i64 [ %290, %block_402ace ], [ %.pre5, %block_402ad8 ]
  %479 = phi i64 [ %275, %block_402ace ], [ %.pre4, %block_402ad8 ]
  %480 = add i64 %479, -44
  %481 = add i64 %478, 7
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i32*
  store i32 0, i32* %482, align 4
  %483 = bitcast [32 x %union.VectorReg]* %6 to float*
  %484 = bitcast i8* %18 to float*
  %485 = bitcast i64* %16 to float*
  %486 = bitcast i8* %21 to float*
  %487 = bitcast %union.VectorReg* %7 to i8*
  %488 = bitcast %union.VectorReg* %7 to float*
  %489 = getelementptr inbounds i8, i8* %487, i64 4
  %490 = bitcast i8* %489 to float*
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %492 = bitcast i64* %491 to float*
  %493 = getelementptr inbounds i8, i8* %487, i64 12
  %494 = bitcast i8* %493 to float*
  %495 = bitcast %union.VectorReg* %7 to <2 x float>*
  %496 = bitcast i64* %491 to <2 x i32>*
  %497 = bitcast i8* %489 to i32*
  %498 = bitcast i64* %491 to i32*
  %499 = bitcast i8* %493 to i32*
  %500 = bitcast i64* %16 to <2 x i32>*
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_402aee

block_402abf:                                     ; preds = %block_402aa7
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %75, align 1, !tbaa !2432
  store i8 1, i8* %81, align 1, !tbaa !2446
  store i8 1, i8* %85, align 1, !tbaa !2447
  store i8 0, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %82, align 1, !tbaa !2450
  %501 = add i64 %300, -8
  %502 = add i64 %316, 5
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %501 to i32*
  %504 = load i32, i32* %503, align 4
  %505 = sub i32 0, %504
  %506 = lshr i32 %505, 31
  %507 = sub i32 1, %504
  %508 = zext i32 %507 to i64
  store i64 %508, i64* %RAX, align 8, !tbaa !2428
  %509 = icmp ult i32 %507, %505
  %510 = icmp eq i32 %507, 0
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %75, align 1, !tbaa !2432
  %513 = and i32 %507, 255
  %514 = tail call i32 @llvm.ctpop.i32(i32 %513) #8
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  %517 = xor i8 %516, 1
  store i8 %517, i8* %81, align 1, !tbaa !2446
  %518 = xor i32 %507, %505
  %519 = lshr i32 %518, 4
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  store i8 %521, i8* %82, align 1, !tbaa !2450
  %522 = zext i1 %510 to i8
  store i8 %522, i8* %85, align 1, !tbaa !2447
  %523 = lshr i32 %507, 31
  %524 = trunc i32 %523 to i8
  store i8 %524, i8* %88, align 1, !tbaa !2448
  %525 = xor i32 %523, %506
  %526 = add nuw nsw i32 %525, %523
  %527 = icmp eq i32 %526, 2
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %89, align 1, !tbaa !2449
  %529 = add i64 %316, 12
  store i64 %529, i64* %PC, align 8
  %530 = load i32, i32* %304, align 4
  %531 = sext i32 %507 to i64
  %532 = sext i32 %530 to i64
  %533 = mul nsw i64 %532, %531
  %534 = trunc i64 %533 to i32
  %535 = and i64 %533, 4294967295
  store i64 %535, i64* %RAX, align 8, !tbaa !2428
  %536 = shl i64 %533, 32
  %537 = ashr exact i64 %536, 32
  %538 = icmp ne i64 %537, %533
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %75, align 1, !tbaa !2432
  %540 = and i32 %534, 255
  %541 = tail call i32 @llvm.ctpop.i32(i32 %540) #8
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  %544 = xor i8 %543, 1
  store i8 %544, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  store i8 0, i8* %85, align 1, !tbaa !2447
  %545 = lshr i32 %534, 31
  %546 = trunc i32 %545 to i8
  store i8 %546, i8* %88, align 1, !tbaa !2448
  store i8 %539, i8* %89, align 1, !tbaa !2449
  %547 = add i64 %300, -48
  %548 = add i64 %316, 15
  store i64 %548, i64* %PC, align 8
  %549 = inttoptr i64 %547 to i32*
  store i32 %534, i32* %549, align 4
  %.pre2 = load i64, i64* %RBP, align 8
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_402ace

block_402a86:                                     ; preds = %block_402a50
  store i32 0, i32* %17, align 1, !tbaa !2451
  store i32 0, i32* %19, align 1, !tbaa !2451
  store i32 0, i32* %20, align 1, !tbaa !2451
  store i32 0, i32* %22, align 1, !tbaa !2451
  %550 = add i64 %69, -4
  %551 = add i64 %93, 8
  store i64 %551, i64* %PC, align 8
  %552 = load <2 x float>, <2 x float>* %65, align 1
  %553 = extractelement <2 x float> %552, i32 0
  %554 = inttoptr i64 %550 to float*
  store float %553, float* %554, align 4
  %555 = load i64, i64* %PC, align 8
  %556 = add i64 %555, 278
  store i64 %556, i64* %PC, align 8, !tbaa !2428
  %.pre8 = bitcast [32 x %union.VectorReg]* %6 to float*
  %.pre9 = bitcast i8* %18 to float*
  %.pre11 = bitcast i64* %16 to float*
  %.pre13 = bitcast i8* %21 to float*
  br label %block_402ba4

block_402a93:                                     ; preds = %block_402a50
  %557 = add i64 %69, -20
  %558 = add i64 %93, 4
  store i64 %558, i64* %PC, align 8
  %559 = inttoptr i64 %557 to i32*
  %560 = load i32, i32* %559, align 4
  %561 = add i32 %560, -1
  %562 = icmp eq i32 %560, 0
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %75, align 1, !tbaa !2432
  %564 = and i32 %561, 255
  %565 = tail call i32 @llvm.ctpop.i32(i32 %564) #8
  %566 = trunc i32 %565 to i8
  %567 = and i8 %566, 1
  %568 = xor i8 %567, 1
  store i8 %568, i8* %81, align 1, !tbaa !2446
  %569 = xor i32 %560, %561
  %570 = lshr i32 %569, 4
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  store i8 %572, i8* %82, align 1, !tbaa !2450
  %573 = icmp eq i32 %561, 0
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %85, align 1, !tbaa !2447
  %575 = lshr i32 %561, 31
  %576 = trunc i32 %575 to i8
  store i8 %576, i8* %88, align 1, !tbaa !2448
  %577 = lshr i32 %560, 31
  %578 = xor i32 %575, %577
  %579 = add nuw nsw i32 %578, %577
  %580 = icmp eq i32 %579, 2
  %581 = zext i1 %580 to i8
  store i8 %581, i8* %89, align 1, !tbaa !2449
  %.v15 = select i1 %573, i64 10, i64 20
  %582 = add i64 %93, %.v15
  store i64 %582, i64* %PC, align 8, !tbaa !2428
  br i1 %573, label %block_402a9d, label %block_402aa7

block_402b51:                                     ; preds = %block_402a9d
  %583 = add i64 %69, -44
  %584 = add i64 %273, 7
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %583 to i32*
  store i32 0, i32* %585, align 4
  %586 = bitcast [32 x %union.VectorReg]* %6 to float*
  %587 = bitcast i8* %18 to float*
  %588 = bitcast i64* %16 to float*
  %589 = bitcast i8* %21 to float*
  %590 = bitcast %union.VectorReg* %7 to i8*
  %591 = bitcast %union.VectorReg* %7 to float*
  %592 = getelementptr inbounds i8, i8* %590, i64 4
  %593 = bitcast i8* %592 to float*
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %595 = bitcast i64* %594 to float*
  %596 = getelementptr inbounds i8, i8* %590, i64 12
  %597 = bitcast i8* %596 to float*
  %598 = bitcast %union.VectorReg* %7 to <2 x float>*
  %599 = bitcast i64* %594 to <2 x i32>*
  %600 = bitcast i8* %592 to i32*
  %601 = bitcast i64* %594 to i32*
  %602 = bitcast i8* %596 to i32*
  %603 = bitcast i64* %16 to <2 x i32>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402b58

block_402b64:                                     ; preds = %block_402b58
  %604 = inttoptr i64 %137 to float*
  %605 = add i64 %100, -16
  %606 = add i64 %136, 9
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i64*
  %608 = load i64, i64* %607, align 8
  store i64 %608, i64* %RAX, align 8, !tbaa !2428
  %609 = add i64 %136, 13
  store i64 %609, i64* %PC, align 8
  %610 = load i32, i32* %103, align 4
  %611 = sext i32 %610 to i64
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = shl nsw i64 %611, 2
  %613 = add i64 %612, %608
  %614 = add i64 %136, 18
  store i64 %614, i64* %PC, align 8
  %615 = inttoptr i64 %613 to i32*
  %616 = load i32, i32* %615, align 4
  %617 = bitcast %union.VectorReg* %7 to i32*
  store i32 %616, i32* %617, align 1, !tbaa !2452
  store float 0.000000e+00, float* %593, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  %618 = add i64 %100, -32
  %619 = add i64 %136, 22
  store i64 %619, i64* %PC, align 8
  %620 = inttoptr i64 %618 to i64*
  %621 = load i64, i64* %620, align 8
  store i64 %621, i64* %RAX, align 8, !tbaa !2428
  %622 = add i64 %136, 26
  store i64 %622, i64* %PC, align 8
  %623 = load i32, i32* %103, align 4
  %624 = sext i32 %623 to i64
  store i64 %624, i64* %RCX, align 8, !tbaa !2428
  %625 = shl nsw i64 %624, 2
  %626 = add i64 %625, %621
  %627 = add i64 %136, 31
  store i64 %627, i64* %PC, align 8
  %628 = load <2 x float>, <2 x float>* %598, align 1
  %629 = load <2 x i32>, <2 x i32>* %599, align 1
  %630 = inttoptr i64 %626 to float*
  %631 = load float, float* %630, align 4
  %632 = extractelement <2 x float> %628, i32 0
  %633 = fmul float %632, %631
  store float %633, float* %591, align 1, !tbaa !2452
  %634 = bitcast <2 x float> %628 to <2 x i32>
  %635 = extractelement <2 x i32> %634, i32 1
  store i32 %635, i32* %600, align 1, !tbaa !2452
  %636 = extractelement <2 x i32> %629, i32 0
  store i32 %636, i32* %601, align 1, !tbaa !2452
  %637 = extractelement <2 x i32> %629, i32 1
  store i32 %637, i32* %602, align 1, !tbaa !2452
  %638 = load <2 x float>, <2 x float>* %65, align 1
  %639 = load <2 x i32>, <2 x i32>* %603, align 1
  %640 = load <2 x float>, <2 x float>* %598, align 1
  %641 = extractelement <2 x float> %638, i32 0
  %642 = extractelement <2 x float> %640, i32 0
  %643 = fadd float %641, %642
  store float %643, float* %586, align 1, !tbaa !2452
  %644 = bitcast <2 x float> %638 to <2 x i32>
  %645 = extractelement <2 x i32> %644, i32 1
  store i32 %645, i32* %19, align 1, !tbaa !2452
  %646 = extractelement <2 x i32> %639, i32 0
  store i32 %646, i32* %20, align 1, !tbaa !2452
  %647 = extractelement <2 x i32> %639, i32 1
  store i32 %647, i32* %22, align 1, !tbaa !2452
  %648 = add i64 %136, 40
  store i64 %648, i64* %PC, align 8
  %649 = load <2 x float>, <2 x float>* %65, align 1
  %650 = extractelement <2 x float> %649, i32 0
  store float %650, float* %604, align 4
  %651 = load i64, i64* %RBP, align 8
  %652 = add i64 %651, -44
  %653 = load i64, i64* %PC, align 8
  %654 = add i64 %653, 3
  store i64 %654, i64* %PC, align 8
  %655 = inttoptr i64 %652 to i32*
  %656 = load i32, i32* %655, align 4
  %657 = add i32 %656, 1
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = icmp eq i32 %656, -1
  %660 = icmp eq i32 %657, 0
  %661 = or i1 %659, %660
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %75, align 1, !tbaa !2432
  %663 = and i32 %657, 255
  %664 = tail call i32 @llvm.ctpop.i32(i32 %663) #8
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = xor i8 %666, 1
  store i8 %667, i8* %81, align 1, !tbaa !2446
  %668 = xor i32 %656, %657
  %669 = lshr i32 %668, 4
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* %82, align 1, !tbaa !2450
  %672 = zext i1 %660 to i8
  store i8 %672, i8* %85, align 1, !tbaa !2447
  %673 = lshr i32 %657, 31
  %674 = trunc i32 %673 to i8
  store i8 %674, i8* %88, align 1, !tbaa !2448
  %675 = lshr i32 %656, 31
  %676 = xor i32 %673, %675
  %677 = add nuw nsw i32 %676, %673
  %678 = icmp eq i32 %677, 2
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %89, align 1, !tbaa !2449
  %680 = add i64 %653, 9
  store i64 %680, i64* %PC, align 8
  store i32 %657, i32* %655, align 4
  %681 = load i64, i64* %PC, align 8
  %682 = add i64 %681, -61
  store i64 %682, i64* %PC, align 8, !tbaa !2428
  br label %block_402b58

block_402b42:                                     ; preds = %block_402aee
  %683 = add i64 %207, -4
  %684 = add i64 %243, 10
  store i64 %684, i64* %PC, align 8
  %685 = load <2 x float>, <2 x float>* %65, align 1
  %686 = extractelement <2 x float> %685, i32 0
  %687 = inttoptr i64 %683 to float*
  store float %686, float* %687, align 4
  %688 = load i64, i64* %PC, align 8
  %689 = add i64 %688, 88
  store i64 %689, i64* %PC, align 8, !tbaa !2428
  br label %block_402ba4
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005b0_frame_dummy() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_4005b0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005b0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400580___do_global_dtors_aux() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400580;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400580___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402eb0___libc_csu_fini() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402eb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402eb0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402eb0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e40___libc_csu_init() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402e40___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e40___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400610;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400610_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653140_clock(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653138_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4004b0_memset(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400478;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400478__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dscal() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402d70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402d70_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dmxpy() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402010_dmxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @matgen() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4017b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4017b0_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @daxpy() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4028e0_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @ddot() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402a50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402a50_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @epslon() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402810;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402810_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgesl() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c90_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005c0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @idamax() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402bb0_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @print_time() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @print_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4028d0_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @what_date() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @what_date_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400600_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgefa() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401980;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401980_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402eb4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402eb4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

define internal void @__mcsema_destructor() {
  tail call void @callback_sub_402eb0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_402e40___libc_csu_init()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { naked nobuiltin noinline }
attributes #8 = { nounwind }
attributes #9 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2071}
!2448 = !{!2433, !2430, i64 2073}
!2449 = !{!2433, !2430, i64 2077}
!2450 = !{!2433, !2430, i64 2069}
!2451 = !{!2445, !2445, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"float", !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"double", !2430, i64 0}
!2456 = !{!2430, !2430, i64 0}
