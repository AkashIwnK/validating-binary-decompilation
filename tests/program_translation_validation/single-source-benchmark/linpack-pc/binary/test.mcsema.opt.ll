; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_402ec0__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_402ec0__rodata = internal constant %seg_402ec0__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005b0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400580___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005b0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400580___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402eb0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e40___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402810_epslon_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402010_dmxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402d70_dscal_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400478__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402bb0_idamax_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400510_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_400478__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400478:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #8
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2447
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2448
  store i8 0, i8* %10, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %18, i64 18, i64 16
  %23 = add i64 %.v, %1
  store i64 %23, i64* %22, align 8, !tbaa !2428
  br i1 %18, label %block_400478.block_40048a_crit_edge, label %block_400488

block_400478.block_40048a_crit_edge:              ; preds = %block_400478
  %.pre2 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  br label %block_40048a

block_400488:                                     ; preds = %block_400478
  %24 = add i64 %23, 2
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %26 = add i64 %3, -16
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %25, align 8, !tbaa !2428
  store i64 %11, i64* %22, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_40048a

block_40048a:                                     ; preds = %block_400478.block_40048a_crit_edge, %block_400488
  %.pre-phi = phi i64* [ %.pre2, %block_400478.block_40048a_crit_edge ], [ %25, %block_400488 ]
  %29 = phi i64 [ %23, %block_400478.block_40048a_crit_edge ], [ %.pre1, %block_400488 ]
  %30 = phi i64 [ %4, %block_400478.block_40048a_crit_edge ], [ %.pre, %block_400488 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400478.block_40048a_crit_edge ], [ %28, %block_400488 ]
  %31 = add i64 %30, 8
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ugt i64 %30, -9
  %33 = zext i1 %32 to i8
  store i8 %33, i8* %5, align 1, !tbaa !2432
  %34 = trunc i64 %31 to i32
  %35 = and i32 %34, 255
  %36 = tail call i32 @llvm.ctpop.i32(i32 %35) #8
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  %39 = xor i8 %38, 1
  store i8 %39, i8* %6, align 1, !tbaa !2446
  %40 = xor i64 %30, %31
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  store i8 %43, i8* %7, align 1, !tbaa !2450
  %44 = icmp eq i64 %31, 0
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %8, align 1, !tbaa !2447
  %46 = lshr i64 %31, 63
  %47 = trunc i64 %46 to i8
  store i8 %47, i8* %9, align 1, !tbaa !2448
  %48 = lshr i64 %30, 63
  %49 = xor i64 %46, %48
  %50 = add nuw nsw i64 %49, %46
  %51 = icmp eq i64 %50, 2
  %52 = zext i1 %51 to i8
  store i8 %52, i8* %10, align 1, !tbaa !2449
  %53 = add i64 %29, 5
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %31 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %22, align 8, !tbaa !2428
  %56 = add i64 %30, 16
  store i64 %56, i64* %.pre-phi, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12, i64* %13, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_400540_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %14
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004d0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4004d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2447
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2448
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2449
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2450
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %12 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %RSI, align 8, !tbaa !2428
  store i64 %13, i64* %RDX, align 8, !tbaa !2428
  %16 = and i64 %13, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 240
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %4, align 1, !tbaa !2446
  %23 = icmp eq i64 %16, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !2447
  %25 = lshr i64 %13, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %6, align 1, !tbaa !2448
  store i8 0, i8* %7, align 1, !tbaa !2449
  store i8 0, i8* %8, align 1, !tbaa !2450
  %27 = load i64, i64* %RAX, align 8
  %28 = add i64 %1, 14
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %16, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %16, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %29, i64* %34, align 16
  %35 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_402eb0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_402e40___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %36 = add i64 %35, 27
  %37 = add i64 %16, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %11, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %40 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %40, i64* %39, align 8, !tbaa !2428
  %41 = tail call fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC, align 8
  %44 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %43, %struct.Memory* %41)
  ret %struct.Memory* %44
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028e0_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4028e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -12
  %16 = load i32, i32* %EDI, align 4
  %17 = add i64 %14, 6
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i32*
  store i32 %16, i32* %18, align 4
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 5
  store i64 %22, i64* %PC, align 8
  %23 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = extractelement <2 x float> %24, i32 0
  %26 = inttoptr i64 %20 to float*
  store float %25, float* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -56
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -52
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %67, align 1, !tbaa !2432
  %68 = and i32 %66, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #8
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !2446
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %74, align 1, !tbaa !2450
  %75 = icmp eq i32 %66, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2447
  %78 = lshr i32 %66, 31
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2448
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %81, align 1, !tbaa !2449
  %82 = xor i1 %75, true
  %83 = icmp eq i8 %79, 0
  %84 = and i1 %83, %82
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %84, i64 15, i64 10
  %86 = add i64 %63, %.v
  store i64 %86, i64* %85, align 8, !tbaa !2428
  br i1 %84, label %block_402918, label %block_402913

block_4029f5:                                     ; preds = %block_402943
  %87 = add i64 %314, -40
  %88 = add i64 %522, 7
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i32*
  store i32 0, i32* %89, align 4
  %90 = bitcast [32 x %union.VectorReg]* %6 to float*
  %91 = bitcast i8* %104 to float*
  %92 = bitcast i64* %102 to float*
  %93 = bitcast i8* %107 to float*
  %94 = bitcast %union.VectorReg* %7 to <2 x float>*
  %95 = bitcast i64* %118 to <2 x i32>*
  %96 = bitcast i8* %116 to i32*
  %97 = bitcast i64* %118 to i32*
  %98 = bitcast i8* %120 to i32*
  %99 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %100 = bitcast i64* %102 to <2 x i32>*
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_4029fc

block_402918:                                     ; preds = %block_4028e0
  %101 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %103 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %103, align 1, !tbaa !2451
  %104 = getelementptr inbounds i8, i8* %101, i64 4
  %105 = bitcast i8* %104 to i32*
  store i32 0, i32* %105, align 1, !tbaa !2451
  %106 = bitcast i64* %102 to i32*
  store i32 0, i32* %106, align 1, !tbaa !2451
  %107 = getelementptr inbounds i8, i8* %101, i64 12
  %108 = bitcast i8* %107 to i32*
  store i32 0, i32* %108, align 1, !tbaa !2451
  %109 = bitcast %union.VectorReg* %7 to i8*
  %110 = add i64 %61, -8
  %111 = add i64 %86, 8
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = bitcast %union.VectorReg* %7 to float*
  %115 = bitcast %union.VectorReg* %7 to i32*
  store i32 %113, i32* %115, align 1, !tbaa !2452
  %116 = getelementptr inbounds i8, i8* %109, i64 4
  %117 = bitcast i8* %116 to float*
  store float 0.000000e+00, float* %117, align 1, !tbaa !2452
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %119 = bitcast i64* %118 to float*
  store float 0.000000e+00, float* %119, align 1, !tbaa !2452
  %120 = getelementptr inbounds i8, i8* %109, i64 12
  %121 = bitcast i8* %120 to float*
  store float 0.000000e+00, float* %121, align 1, !tbaa !2452
  %122 = bitcast %union.VectorReg* %7 to <2 x float>*
  %123 = load <2 x float>, <2 x float>* %122, align 1
  %124 = extractelement <2 x float> %123, i32 0
  %125 = fpext float %124 to double
  %126 = bitcast %union.VectorReg* %7 to double*
  store double %125, double* %126, align 1, !tbaa !2454
  %127 = add i64 %86, 16
  store i64 %127, i64* %PC, align 8
  %128 = bitcast [32 x %union.VectorReg]* %6 to double*
  %129 = load double, double* %128, align 1
  %130 = fcmp uno double %125, %129
  br i1 %130, label %131, label %141

; <label>:131:                                    ; preds = %block_402918
  %132 = fadd double %125, %129
  %133 = bitcast double %132 to i64
  %134 = and i64 %133, 9221120237041090560
  %135 = icmp eq i64 %134, 9218868437227405312
  %136 = and i64 %133, 2251799813685247
  %137 = icmp ne i64 %136, 0
  %138 = and i1 %135, %137
  br i1 %138, label %139, label %147

; <label>:139:                                    ; preds = %131
  %140 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %127, %struct.Memory* %2) #9
  %.pre = load i64, i64* %PC, align 8
  %.pre1 = load i8, i8* %77, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:141:                                    ; preds = %block_402918
  %142 = fcmp ogt double %125, %129
  br i1 %142, label %147, label %143

; <label>:143:                                    ; preds = %141
  %144 = fcmp olt double %125, %129
  br i1 %144, label %147, label %145

; <label>:145:                                    ; preds = %143
  %146 = fcmp oeq double %125, %129
  br i1 %146, label %147, label %151

; <label>:147:                                    ; preds = %145, %143, %141, %131
  %148 = phi i8 [ 0, %141 ], [ 0, %143 ], [ 1, %145 ], [ 1, %131 ]
  %149 = phi i8 [ 0, %141 ], [ 0, %143 ], [ 0, %145 ], [ 1, %131 ]
  %150 = phi i8 [ 0, %141 ], [ 1, %143 ], [ 0, %145 ], [ 1, %131 ]
  store i8 %148, i8* %77, align 1, !tbaa !2456
  store i8 %149, i8* %73, align 1, !tbaa !2456
  store i8 %150, i8* %67, align 1, !tbaa !2456
  br label %151

; <label>:151:                                    ; preds = %147, %145
  %152 = phi i8 [ %148, %147 ], [ 0, %145 ]
  store i8 0, i8* %81, align 1, !tbaa !2456
  store i8 0, i8* %80, align 1, !tbaa !2456
  store i8 0, i8* %74, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %151, %139
  %153 = phi i8 [ %.pre1, %139 ], [ %152, %151 ]
  %154 = phi i64 [ %.pre, %139 ], [ %127, %151 ]
  %155 = phi %struct.Memory* [ %140, %139 ], [ %2, %151 ]
  %156 = icmp eq i8 %153, 0
  %.v9 = select i1 %156, i64 17, i64 6
  %157 = add i64 %154, %.v9
  store i64 %157, i64* %85, align 8, !tbaa !2428
  br i1 %156, label %block_402939, label %block_40292e

block_402974:                                     ; preds = %block_40294d, %block_402965
  %158 = phi i64 [ %.pre4, %block_402965 ], [ %260, %block_40294d ]
  %159 = phi i64 [ %.pre3, %block_402965 ], [ %244, %block_40294d ]
  %160 = add i64 %159, -36
  %161 = add i64 %158, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i32*
  %163 = load i32, i32* %162, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %164 = and i32 %163, 255
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #8
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  %169 = icmp eq i32 %163, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %77, align 1, !tbaa !2447
  %171 = lshr i32 %163, 31
  %172 = trunc i32 %171 to i8
  store i8 %172, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  %173 = icmp ne i8 %172, 0
  %.v14 = select i1 %173, i64 10, i64 25
  %174 = add i64 %158, %.v14
  store i64 %174, i64* %85, align 8, !tbaa !2428
  br i1 %173, label %block_40297e, label %block_40298d

block_402913:                                     ; preds = %block_4028e0
  %175 = add i64 %86, 312
  br label %block_402a4b

block_402994:                                     ; preds = %block_4029a0, %block_40298d
  %176 = phi i64 [ %734, %block_4029a0 ], [ %.pre7, %block_40298d ]
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -40
  %179 = add i64 %176, 3
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = zext i32 %181 to i64
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = add i64 %177, -4
  %184 = add i64 %176, 6
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = sub i32 %181, %186
  %188 = icmp ult i32 %181, %186
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %67, align 1, !tbaa !2432
  %190 = and i32 %187, 255
  %191 = tail call i32 @llvm.ctpop.i32(i32 %190) #8
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = xor i8 %193, 1
  store i8 %194, i8* %73, align 1, !tbaa !2446
  %195 = xor i32 %186, %181
  %196 = xor i32 %195, %187
  %197 = lshr i32 %196, 4
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  store i8 %199, i8* %74, align 1, !tbaa !2450
  %200 = icmp eq i32 %187, 0
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %77, align 1, !tbaa !2447
  %202 = lshr i32 %187, 31
  %203 = trunc i32 %202 to i8
  store i8 %203, i8* %80, align 1, !tbaa !2448
  %204 = lshr i32 %181, 31
  %205 = lshr i32 %186, 31
  %206 = xor i32 %205, %204
  %207 = xor i32 %202, %204
  %208 = add nuw nsw i32 %207, %206
  %209 = icmp eq i32 %208, 2
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %81, align 1, !tbaa !2449
  %211 = icmp ne i8 %203, 0
  %212 = xor i1 %211, %209
  %.v15 = select i1 %212, i64 12, i64 92
  %213 = add i64 %176, %.v15
  store i64 %213, i64* %85, align 8, !tbaa !2428
  br i1 %212, label %block_4029a0, label %block_4029f0

block_4029f0:                                     ; preds = %block_402994
  %214 = add i64 %213, 91
  br label %block_402a4b

block_40298d:                                     ; preds = %block_402974, %block_40297e
  %215 = phi i64 [ %.pre6, %block_40297e ], [ %174, %block_402974 ]
  %216 = phi i64 [ %.pre5, %block_40297e ], [ %159, %block_402974 ]
  %217 = add i64 %216, -40
  %218 = add i64 %215, 7
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i32*
  store i32 0, i32* %219, align 4
  %220 = bitcast [32 x %union.VectorReg]* %6 to float*
  %221 = bitcast i8* %104 to float*
  %222 = bitcast i64* %102 to float*
  %223 = bitcast i8* %107 to float*
  %224 = bitcast %union.VectorReg* %7 to <2 x float>*
  %225 = bitcast i64* %118 to <2 x i32>*
  %226 = bitcast i8* %116 to i32*
  %227 = bitcast i64* %118 to i32*
  %228 = bitcast i8* %120 to i32*
  %229 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %230 = bitcast i64* %102 to <2 x i32>*
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_402994

block_40292e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %231 = load i8, i8* %73, align 1, !tbaa !2446
  %232 = icmp ne i8 %231, 0
  %.v10 = select i1 %232, i64 11, i64 6
  %233 = add i64 %157, %.v10
  store i64 %233, i64* %85, align 8, !tbaa !2428
  %234 = icmp eq i8 %231, 1
  br i1 %234, label %block_402939, label %block_402934

block_40294d:                                     ; preds = %block_402939, %block_402943
  %235 = phi i64 [ %522, %block_402943 ], [ %340, %block_402939 ]
  %236 = add i64 %314, -44
  %237 = add i64 %235, 7
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i32*
  store i32 0, i32* %238, align 4
  %239 = load i64, i64* %RBP, align 8
  %240 = add i64 %239, -48
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, 7
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %240 to i32*
  store i32 0, i32* %243, align 4
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -20
  %246 = load i64, i64* %PC, align 8
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %245 to i32*
  %249 = load i32, i32* %248, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %250 = and i32 %249, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #8
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  %255 = icmp eq i32 %249, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %77, align 1, !tbaa !2447
  %257 = lshr i32 %249, 31
  %258 = trunc i32 %257 to i8
  store i8 %258, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  %259 = icmp ne i8 %258, 0
  %.v13 = select i1 %259, i64 10, i64 25
  %260 = add i64 %246, %.v13
  store i64 %260, i64* %85, align 8, !tbaa !2428
  br i1 %259, label %block_402965, label %block_402974

block_40297e:                                     ; preds = %block_402974
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2447
  store i8 0, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  store i8 0, i8* %74, align 1, !tbaa !2450
  %261 = add i64 %159, -4
  %262 = add i64 %174, 5
  store i64 %262, i64* %PC, align 8
  %263 = inttoptr i64 %261 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = sub i32 0, %264
  %266 = lshr i32 %265, 31
  %267 = sub i32 1, %264
  %268 = zext i32 %267 to i64
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = icmp ult i32 %267, %265
  %270 = icmp eq i32 %267, 0
  %271 = or i1 %269, %270
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %67, align 1, !tbaa !2432
  %273 = and i32 %267, 255
  %274 = tail call i32 @llvm.ctpop.i32(i32 %273) #8
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  %277 = xor i8 %276, 1
  store i8 %277, i8* %73, align 1, !tbaa !2446
  %278 = xor i32 %267, %265
  %279 = lshr i32 %278, 4
  %280 = trunc i32 %279 to i8
  %281 = and i8 %280, 1
  store i8 %281, i8* %74, align 1, !tbaa !2450
  %282 = icmp eq i32 %267, 0
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %77, align 1, !tbaa !2447
  %284 = lshr i32 %267, 31
  %285 = trunc i32 %284 to i8
  store i8 %285, i8* %80, align 1, !tbaa !2448
  %286 = xor i32 %284, %266
  %287 = add nuw nsw i32 %286, %284
  %288 = icmp eq i32 %287, 2
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %81, align 1, !tbaa !2449
  %290 = add i64 %174, 12
  store i64 %290, i64* %PC, align 8
  %291 = load i32, i32* %162, align 4
  %292 = sext i32 %267 to i64
  %293 = sext i32 %291 to i64
  %294 = mul nsw i64 %293, %292
  %295 = trunc i64 %294 to i32
  %296 = and i64 %294, 4294967295
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = shl i64 %294, 32
  %298 = ashr exact i64 %297, 32
  %299 = icmp ne i64 %298, %294
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %67, align 1, !tbaa !2432
  %301 = and i32 %295, 255
  %302 = tail call i32 @llvm.ctpop.i32(i32 %301) #8
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  store i8 %305, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  store i8 0, i8* %77, align 1, !tbaa !2447
  %306 = lshr i32 %295, 31
  %307 = trunc i32 %306 to i8
  store i8 %307, i8* %80, align 1, !tbaa !2448
  store i8 %300, i8* %81, align 1, !tbaa !2449
  %308 = load i64, i64* %RBP, align 8
  %309 = add i64 %308, -48
  %310 = trunc i64 %294 to i32
  %311 = add i64 %174, 15
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %309 to i32*
  store i32 %310, i32* %312, align 4
  %.pre5 = load i64, i64* %RBP, align 8
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_40298d

block_402939:                                     ; preds = %block_40292e, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %313 = phi i64 [ %233, %block_40292e ], [ %157, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %314 = load i64, i64* %RBP, align 8
  %315 = add i64 %314, -20
  %316 = add i64 %313, 4
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %315 to i32*
  %318 = load i32, i32* %317, align 4
  %319 = add i32 %318, -1
  %320 = icmp eq i32 %318, 0
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %67, align 1, !tbaa !2432
  %322 = and i32 %319, 255
  %323 = tail call i32 @llvm.ctpop.i32(i32 %322) #8
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = xor i8 %325, 1
  store i8 %326, i8* %73, align 1, !tbaa !2446
  %327 = xor i32 %318, %319
  %328 = lshr i32 %327, 4
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  store i8 %330, i8* %74, align 1, !tbaa !2450
  %331 = icmp eq i32 %319, 0
  %332 = zext i1 %331 to i8
  store i8 %332, i8* %77, align 1, !tbaa !2447
  %333 = lshr i32 %319, 31
  %334 = trunc i32 %333 to i8
  store i8 %334, i8* %80, align 1, !tbaa !2448
  %335 = lshr i32 %318, 31
  %336 = xor i32 %333, %335
  %337 = add nuw nsw i32 %336, %335
  %338 = icmp eq i32 %337, 2
  %339 = zext i1 %338 to i8
  store i8 %339, i8* %81, align 1, !tbaa !2449
  %.v11 = select i1 %331, i64 10, i64 20
  %340 = add i64 %313, %.v11
  store i64 %340, i64* %85, align 8, !tbaa !2428
  br i1 %331, label %block_402943, label %block_40294d

block_402a08:                                     ; preds = %block_4029fc
  %341 = add i64 %524, -32
  %342 = add i64 %560, 4
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i64*
  %344 = load i64, i64* %343, align 8
  store i64 %344, i64* %RAX, align 8, !tbaa !2428
  %345 = add i64 %560, 8
  store i64 %345, i64* %PC, align 8
  %346 = load i32, i32* %527, align 4
  %347 = sext i32 %346 to i64
  store i64 %347, i64* %RCX, align 8, !tbaa !2428
  %348 = shl nsw i64 %347, 2
  %349 = add i64 %348, %344
  %350 = add i64 %560, 13
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %349 to i32*
  %352 = load i32, i32* %351, align 4
  %353 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %352, i32* %353, align 1, !tbaa !2452
  store float 0.000000e+00, float* %91, align 1, !tbaa !2452
  store float 0.000000e+00, float* %92, align 1, !tbaa !2452
  store float 0.000000e+00, float* %93, align 1, !tbaa !2452
  %354 = add i64 %524, -8
  %355 = add i64 %560, 18
  store i64 %355, i64* %PC, align 8
  %356 = inttoptr i64 %354 to i32*
  %357 = load i32, i32* %356, align 4
  %358 = bitcast %union.VectorReg* %7 to i32*
  store i32 %357, i32* %358, align 1, !tbaa !2452
  store float 0.000000e+00, float* %117, align 1, !tbaa !2452
  store float 0.000000e+00, float* %119, align 1, !tbaa !2452
  store float 0.000000e+00, float* %121, align 1, !tbaa !2452
  %359 = add i64 %524, -16
  %360 = add i64 %560, 22
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = add i64 %560, 26
  store i64 %363, i64* %PC, align 8
  %364 = load i32, i32* %527, align 4
  %365 = sext i32 %364 to i64
  store i64 %365, i64* %RCX, align 8, !tbaa !2428
  %366 = shl nsw i64 %365, 2
  %367 = add i64 %366, %362
  %368 = add i64 %560, 31
  store i64 %368, i64* %PC, align 8
  %369 = load <2 x float>, <2 x float>* %94, align 1
  %370 = load <2 x i32>, <2 x i32>* %95, align 1
  %371 = inttoptr i64 %367 to float*
  %372 = load float, float* %371, align 4
  %373 = extractelement <2 x float> %369, i32 0
  %374 = fmul float %373, %372
  store float %374, float* %114, align 1, !tbaa !2452
  %375 = bitcast <2 x float> %369 to <2 x i32>
  %376 = extractelement <2 x i32> %375, i32 1
  store i32 %376, i32* %96, align 1, !tbaa !2452
  %377 = extractelement <2 x i32> %370, i32 0
  store i32 %377, i32* %97, align 1, !tbaa !2452
  %378 = extractelement <2 x i32> %370, i32 1
  store i32 %378, i32* %98, align 1, !tbaa !2452
  %379 = load <2 x float>, <2 x float>* %99, align 1
  %380 = load <2 x i32>, <2 x i32>* %100, align 1
  %381 = load <2 x float>, <2 x float>* %122, align 1
  %382 = extractelement <2 x float> %379, i32 0
  %383 = extractelement <2 x float> %381, i32 0
  %384 = fadd float %382, %383
  store float %384, float* %90, align 1, !tbaa !2452
  %385 = bitcast <2 x float> %379 to <2 x i32>
  %386 = extractelement <2 x i32> %385, i32 1
  store i32 %386, i32* %105, align 1, !tbaa !2452
  %387 = extractelement <2 x i32> %380, i32 0
  store i32 %387, i32* %106, align 1, !tbaa !2452
  %388 = extractelement <2 x i32> %380, i32 1
  store i32 %388, i32* %108, align 1, !tbaa !2452
  %389 = add i64 %560, 39
  store i64 %389, i64* %PC, align 8
  %390 = load i64, i64* %343, align 8
  store i64 %390, i64* %RAX, align 8, !tbaa !2428
  %391 = add i64 %560, 43
  store i64 %391, i64* %PC, align 8
  %392 = load i32, i32* %527, align 4
  %393 = sext i32 %392 to i64
  store i64 %393, i64* %RCX, align 8, !tbaa !2428
  %394 = shl nsw i64 %393, 2
  %395 = add i64 %394, %390
  %396 = add i64 %560, 48
  store i64 %396, i64* %PC, align 8
  %397 = load <2 x float>, <2 x float>* %23, align 1
  %398 = extractelement <2 x float> %397, i32 0
  %399 = inttoptr i64 %395 to float*
  store float %398, float* %399, align 4
  %400 = load i64, i64* %RBP, align 8
  %401 = add i64 %400, -40
  %402 = load i64, i64* %PC, align 8
  %403 = add i64 %402, 3
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %401 to i32*
  %405 = load i32, i32* %404, align 4
  %406 = add i32 %405, 1
  %407 = zext i32 %406 to i64
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = icmp eq i32 %405, -1
  %409 = icmp eq i32 %406, 0
  %410 = or i1 %408, %409
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %67, align 1, !tbaa !2432
  %412 = and i32 %406, 255
  %413 = tail call i32 @llvm.ctpop.i32(i32 %412) #8
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = xor i8 %415, 1
  store i8 %416, i8* %73, align 1, !tbaa !2446
  %417 = xor i32 %405, %406
  %418 = lshr i32 %417, 4
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  store i8 %420, i8* %74, align 1, !tbaa !2450
  %421 = icmp eq i32 %406, 0
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %77, align 1, !tbaa !2447
  %423 = lshr i32 %406, 31
  %424 = trunc i32 %423 to i8
  store i8 %424, i8* %80, align 1, !tbaa !2448
  %425 = lshr i32 %405, 31
  %426 = xor i32 %423, %425
  %427 = add nuw nsw i32 %426, %423
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  store i8 %429, i8* %81, align 1, !tbaa !2449
  %430 = add i64 %402, 9
  store i64 %430, i64* %PC, align 8
  store i32 %406, i32* %404, align 4
  %431 = load i64, i64* %PC, align 8
  %432 = add i64 %431, -69
  store i64 %432, i64* %85, align 8, !tbaa !2428
  br label %block_4029fc

block_402934:                                     ; preds = %block_40292e
  %433 = add i64 %233, 279
  br label %block_402a4b

block_402a46:                                     ; preds = %block_4029fc
  %434 = add i64 %560, 5
  br label %block_402a4b

block_402a4b:                                     ; preds = %block_402a46, %block_402934, %block_4029f0, %block_402913
  %435 = phi i64 [ %214, %block_4029f0 ], [ %434, %block_402a46 ], [ %433, %block_402934 ], [ %175, %block_402913 ]
  %MEMORY.5 = phi %struct.Memory* [ %155, %block_4029f0 ], [ %155, %block_402a46 ], [ %155, %block_402934 ], [ %2, %block_402913 ]
  %436 = add i64 %435, 1
  store i64 %436, i64* %PC, align 8
  %437 = load i64, i64* %10, align 8, !tbaa !2428
  %438 = add i64 %437, 8
  %439 = inttoptr i64 %437 to i64*
  %440 = load i64, i64* %439, align 8
  store i64 %440, i64* %RBP, align 8, !tbaa !2428
  store i64 %438, i64* %10, align 8, !tbaa !2428
  %441 = add i64 %435, 2
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %438 to i64*
  %443 = load i64, i64* %442, align 8
  store i64 %443, i64* %85, align 8, !tbaa !2428
  %444 = add i64 %437, 16
  store i64 %444, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_402965:                                     ; preds = %block_40294d
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2447
  store i8 0, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  store i8 0, i8* %74, align 1, !tbaa !2450
  %445 = add i64 %244, -4
  %446 = add i64 %260, 5
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %445 to i32*
  %448 = load i32, i32* %447, align 4
  %449 = sub i32 0, %448
  %450 = lshr i32 %449, 31
  %451 = sub i32 1, %448
  %452 = zext i32 %451 to i64
  store i64 %452, i64* %RAX, align 8, !tbaa !2428
  %453 = icmp ult i32 %451, %449
  %454 = icmp eq i32 %451, 0
  %455 = or i1 %453, %454
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %67, align 1, !tbaa !2432
  %457 = and i32 %451, 255
  %458 = tail call i32 @llvm.ctpop.i32(i32 %457) #8
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  store i8 %461, i8* %73, align 1, !tbaa !2446
  %462 = xor i32 %451, %449
  %463 = lshr i32 %462, 4
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  store i8 %465, i8* %74, align 1, !tbaa !2450
  %466 = icmp eq i32 %451, 0
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %77, align 1, !tbaa !2447
  %468 = lshr i32 %451, 31
  %469 = trunc i32 %468 to i8
  store i8 %469, i8* %80, align 1, !tbaa !2448
  %470 = xor i32 %468, %450
  %471 = add nuw nsw i32 %470, %468
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %81, align 1, !tbaa !2449
  %474 = add i64 %260, 12
  store i64 %474, i64* %PC, align 8
  %475 = load i32, i32* %248, align 4
  %476 = sext i32 %451 to i64
  %477 = sext i32 %475 to i64
  %478 = mul nsw i64 %477, %476
  %479 = trunc i64 %478 to i32
  %480 = and i64 %478, 4294967295
  store i64 %480, i64* %RAX, align 8, !tbaa !2428
  %481 = shl i64 %478, 32
  %482 = ashr exact i64 %481, 32
  %483 = icmp ne i64 %482, %478
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %67, align 1, !tbaa !2432
  %485 = and i32 %479, 255
  %486 = tail call i32 @llvm.ctpop.i32(i32 %485) #8
  %487 = trunc i32 %486 to i8
  %488 = and i8 %487, 1
  %489 = xor i8 %488, 1
  store i8 %489, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  store i8 0, i8* %77, align 1, !tbaa !2447
  %490 = lshr i32 %479, 31
  %491 = trunc i32 %490 to i8
  store i8 %491, i8* %80, align 1, !tbaa !2448
  store i8 %484, i8* %81, align 1, !tbaa !2449
  %492 = load i64, i64* %RBP, align 8
  %493 = add i64 %492, -44
  %494 = trunc i64 %478 to i32
  %495 = add i64 %260, 15
  store i64 %495, i64* %PC, align 8
  %496 = inttoptr i64 %493 to i32*
  store i32 %494, i32* %496, align 4
  %.pre3 = load i64, i64* %RBP, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402974

block_402943:                                     ; preds = %block_402939
  %497 = add i64 %314, -36
  %498 = add i64 %340, 4
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = add i32 %500, -1
  %502 = icmp eq i32 %500, 0
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %67, align 1, !tbaa !2432
  %504 = and i32 %501, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #8
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %73, align 1, !tbaa !2446
  %509 = xor i32 %500, %501
  %510 = lshr i32 %509, 4
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  store i8 %512, i8* %74, align 1, !tbaa !2450
  %513 = icmp eq i32 %501, 0
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %77, align 1, !tbaa !2447
  %515 = lshr i32 %501, 31
  %516 = trunc i32 %515 to i8
  store i8 %516, i8* %80, align 1, !tbaa !2448
  %517 = lshr i32 %500, 31
  %518 = xor i32 %515, %517
  %519 = add nuw nsw i32 %518, %517
  %520 = icmp eq i32 %519, 2
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %81, align 1, !tbaa !2449
  %.v12 = select i1 %513, i64 178, i64 10
  %522 = add i64 %340, %.v12
  store i64 %522, i64* %85, align 8, !tbaa !2428
  br i1 %513, label %block_4029f5, label %block_40294d

block_4029fc:                                     ; preds = %block_402a08, %block_4029f5
  %523 = phi i64 [ %432, %block_402a08 ], [ %.pre2, %block_4029f5 ]
  %524 = load i64, i64* %RBP, align 8
  %525 = add i64 %524, -40
  %526 = add i64 %523, 3
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i32*
  %528 = load i32, i32* %527, align 4
  %529 = zext i32 %528 to i64
  store i64 %529, i64* %RAX, align 8, !tbaa !2428
  %530 = add i64 %524, -4
  %531 = add i64 %523, 6
  store i64 %531, i64* %PC, align 8
  %532 = inttoptr i64 %530 to i32*
  %533 = load i32, i32* %532, align 4
  %534 = sub i32 %528, %533
  %535 = icmp ult i32 %528, %533
  %536 = zext i1 %535 to i8
  store i8 %536, i8* %67, align 1, !tbaa !2432
  %537 = and i32 %534, 255
  %538 = tail call i32 @llvm.ctpop.i32(i32 %537) #8
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  store i8 %541, i8* %73, align 1, !tbaa !2446
  %542 = xor i32 %533, %528
  %543 = xor i32 %542, %534
  %544 = lshr i32 %543, 4
  %545 = trunc i32 %544 to i8
  %546 = and i8 %545, 1
  store i8 %546, i8* %74, align 1, !tbaa !2450
  %547 = icmp eq i32 %534, 0
  %548 = zext i1 %547 to i8
  store i8 %548, i8* %77, align 1, !tbaa !2447
  %549 = lshr i32 %534, 31
  %550 = trunc i32 %549 to i8
  store i8 %550, i8* %80, align 1, !tbaa !2448
  %551 = lshr i32 %528, 31
  %552 = lshr i32 %533, 31
  %553 = xor i32 %552, %551
  %554 = xor i32 %549, %551
  %555 = add nuw nsw i32 %554, %553
  %556 = icmp eq i32 %555, 2
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %81, align 1, !tbaa !2449
  %558 = icmp ne i8 %550, 0
  %559 = xor i1 %558, %556
  %.v16 = select i1 %559, i64 12, i64 74
  %560 = add i64 %523, %.v16
  store i64 %560, i64* %85, align 8, !tbaa !2428
  br i1 %559, label %block_402a08, label %block_402a46

block_4029a0:                                     ; preds = %block_402994
  %561 = add i64 %177, -32
  %562 = add i64 %213, 4
  store i64 %562, i64* %PC, align 8
  %563 = inttoptr i64 %561 to i64*
  %564 = load i64, i64* %563, align 8
  store i64 %564, i64* %RAX, align 8, !tbaa !2428
  %565 = add i64 %177, -48
  %566 = add i64 %213, 8
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i32*
  %568 = load i32, i32* %567, align 4
  %569 = sext i32 %568 to i64
  store i64 %569, i64* %RCX, align 8, !tbaa !2428
  %570 = shl nsw i64 %569, 2
  %571 = add i64 %570, %564
  %572 = add i64 %213, 13
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %571 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %574, i32* %575, align 1, !tbaa !2452
  store float 0.000000e+00, float* %221, align 1, !tbaa !2452
  store float 0.000000e+00, float* %222, align 1, !tbaa !2452
  store float 0.000000e+00, float* %223, align 1, !tbaa !2452
  %576 = add i64 %177, -8
  %577 = add i64 %213, 18
  store i64 %577, i64* %PC, align 8
  %578 = inttoptr i64 %576 to i32*
  %579 = load i32, i32* %578, align 4
  %580 = bitcast %union.VectorReg* %7 to i32*
  store i32 %579, i32* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %117, align 1, !tbaa !2452
  store float 0.000000e+00, float* %119, align 1, !tbaa !2452
  store float 0.000000e+00, float* %121, align 1, !tbaa !2452
  %581 = add i64 %177, -16
  %582 = add i64 %213, 22
  store i64 %582, i64* %PC, align 8
  %583 = inttoptr i64 %581 to i64*
  %584 = load i64, i64* %583, align 8
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = add i64 %177, -44
  %586 = add i64 %213, 26
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %585 to i32*
  %588 = load i32, i32* %587, align 4
  %589 = sext i32 %588 to i64
  store i64 %589, i64* %RCX, align 8, !tbaa !2428
  %590 = shl nsw i64 %589, 2
  %591 = add i64 %590, %584
  %592 = add i64 %213, 31
  store i64 %592, i64* %PC, align 8
  %593 = load <2 x float>, <2 x float>* %224, align 1
  %594 = load <2 x i32>, <2 x i32>* %225, align 1
  %595 = inttoptr i64 %591 to float*
  %596 = load float, float* %595, align 4
  %597 = extractelement <2 x float> %593, i32 0
  %598 = fmul float %597, %596
  store float %598, float* %114, align 1, !tbaa !2452
  %599 = bitcast <2 x float> %593 to <2 x i32>
  %600 = extractelement <2 x i32> %599, i32 1
  store i32 %600, i32* %226, align 1, !tbaa !2452
  %601 = extractelement <2 x i32> %594, i32 0
  store i32 %601, i32* %227, align 1, !tbaa !2452
  %602 = extractelement <2 x i32> %594, i32 1
  store i32 %602, i32* %228, align 1, !tbaa !2452
  %603 = load <2 x float>, <2 x float>* %229, align 1
  %604 = load <2 x i32>, <2 x i32>* %230, align 1
  %605 = load <2 x float>, <2 x float>* %122, align 1
  %606 = extractelement <2 x float> %603, i32 0
  %607 = extractelement <2 x float> %605, i32 0
  %608 = fadd float %606, %607
  store float %608, float* %220, align 1, !tbaa !2452
  %609 = bitcast <2 x float> %603 to <2 x i32>
  %610 = extractelement <2 x i32> %609, i32 1
  store i32 %610, i32* %105, align 1, !tbaa !2452
  %611 = extractelement <2 x i32> %604, i32 0
  store i32 %611, i32* %106, align 1, !tbaa !2452
  %612 = extractelement <2 x i32> %604, i32 1
  store i32 %612, i32* %108, align 1, !tbaa !2452
  %613 = add i64 %213, 39
  store i64 %613, i64* %PC, align 8
  %614 = load i64, i64* %563, align 8
  store i64 %614, i64* %RAX, align 8, !tbaa !2428
  %615 = add i64 %213, 43
  store i64 %615, i64* %PC, align 8
  %616 = load i32, i32* %567, align 4
  %617 = sext i32 %616 to i64
  store i64 %617, i64* %RCX, align 8, !tbaa !2428
  %618 = shl nsw i64 %617, 2
  %619 = add i64 %618, %614
  %620 = add i64 %213, 48
  store i64 %620, i64* %PC, align 8
  %621 = load <2 x float>, <2 x float>* %23, align 1
  %622 = extractelement <2 x float> %621, i32 0
  %623 = inttoptr i64 %619 to float*
  store float %622, float* %623, align 4
  %624 = load i64, i64* %RBP, align 8
  %625 = add i64 %624, -44
  %626 = load i64, i64* %PC, align 8
  %627 = add i64 %626, 3
  store i64 %627, i64* %PC, align 8
  %628 = inttoptr i64 %625 to i32*
  %629 = load i32, i32* %628, align 4
  %630 = zext i32 %629 to i64
  store i64 %630, i64* %RDX, align 8, !tbaa !2428
  %631 = add i64 %624, -20
  %632 = add i64 %626, 6
  store i64 %632, i64* %PC, align 8
  %633 = inttoptr i64 %631 to i32*
  %634 = load i32, i32* %633, align 4
  %635 = add i32 %634, %629
  %636 = zext i32 %635 to i64
  store i64 %636, i64* %RDX, align 8, !tbaa !2428
  %637 = icmp ult i32 %635, %629
  %638 = icmp ult i32 %635, %634
  %639 = or i1 %637, %638
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %67, align 1, !tbaa !2432
  %641 = and i32 %635, 255
  %642 = tail call i32 @llvm.ctpop.i32(i32 %641) #8
  %643 = trunc i32 %642 to i8
  %644 = and i8 %643, 1
  %645 = xor i8 %644, 1
  store i8 %645, i8* %73, align 1, !tbaa !2446
  %646 = xor i32 %634, %629
  %647 = xor i32 %646, %635
  %648 = lshr i32 %647, 4
  %649 = trunc i32 %648 to i8
  %650 = and i8 %649, 1
  store i8 %650, i8* %74, align 1, !tbaa !2450
  %651 = icmp eq i32 %635, 0
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %77, align 1, !tbaa !2447
  %653 = lshr i32 %635, 31
  %654 = trunc i32 %653 to i8
  store i8 %654, i8* %80, align 1, !tbaa !2448
  %655 = lshr i32 %629, 31
  %656 = lshr i32 %634, 31
  %657 = xor i32 %653, %655
  %658 = xor i32 %653, %656
  %659 = add nuw nsw i32 %657, %658
  %660 = icmp eq i32 %659, 2
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %81, align 1, !tbaa !2449
  %662 = add i64 %626, 9
  store i64 %662, i64* %PC, align 8
  store i32 %635, i32* %628, align 4
  %663 = load i64, i64* %RBP, align 8
  %664 = add i64 %663, -48
  %665 = load i64, i64* %PC, align 8
  %666 = add i64 %665, 3
  store i64 %666, i64* %PC, align 8
  %667 = inttoptr i64 %664 to i32*
  %668 = load i32, i32* %667, align 4
  %669 = zext i32 %668 to i64
  store i64 %669, i64* %RDX, align 8, !tbaa !2428
  %670 = add i64 %663, -36
  %671 = add i64 %665, 6
  store i64 %671, i64* %PC, align 8
  %672 = inttoptr i64 %670 to i32*
  %673 = load i32, i32* %672, align 4
  %674 = add i32 %673, %668
  %675 = zext i32 %674 to i64
  store i64 %675, i64* %RDX, align 8, !tbaa !2428
  %676 = icmp ult i32 %674, %668
  %677 = icmp ult i32 %674, %673
  %678 = or i1 %676, %677
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %67, align 1, !tbaa !2432
  %680 = and i32 %674, 255
  %681 = tail call i32 @llvm.ctpop.i32(i32 %680) #8
  %682 = trunc i32 %681 to i8
  %683 = and i8 %682, 1
  %684 = xor i8 %683, 1
  store i8 %684, i8* %73, align 1, !tbaa !2446
  %685 = xor i32 %673, %668
  %686 = xor i32 %685, %674
  %687 = lshr i32 %686, 4
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  store i8 %689, i8* %74, align 1, !tbaa !2450
  %690 = icmp eq i32 %674, 0
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %77, align 1, !tbaa !2447
  %692 = lshr i32 %674, 31
  %693 = trunc i32 %692 to i8
  store i8 %693, i8* %80, align 1, !tbaa !2448
  %694 = lshr i32 %668, 31
  %695 = lshr i32 %673, 31
  %696 = xor i32 %692, %694
  %697 = xor i32 %692, %695
  %698 = add nuw nsw i32 %696, %697
  %699 = icmp eq i32 %698, 2
  %700 = zext i1 %699 to i8
  store i8 %700, i8* %81, align 1, !tbaa !2449
  %701 = add i64 %665, 9
  store i64 %701, i64* %PC, align 8
  store i32 %674, i32* %667, align 4
  %702 = load i64, i64* %RBP, align 8
  %703 = add i64 %702, -40
  %704 = load i64, i64* %PC, align 8
  %705 = add i64 %704, 3
  store i64 %705, i64* %PC, align 8
  %706 = inttoptr i64 %703 to i32*
  %707 = load i32, i32* %706, align 4
  %708 = add i32 %707, 1
  %709 = zext i32 %708 to i64
  store i64 %709, i64* %RAX, align 8, !tbaa !2428
  %710 = icmp eq i32 %707, -1
  %711 = icmp eq i32 %708, 0
  %712 = or i1 %710, %711
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %67, align 1, !tbaa !2432
  %714 = and i32 %708, 255
  %715 = tail call i32 @llvm.ctpop.i32(i32 %714) #8
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  store i8 %718, i8* %73, align 1, !tbaa !2446
  %719 = xor i32 %707, %708
  %720 = lshr i32 %719, 4
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  store i8 %722, i8* %74, align 1, !tbaa !2450
  %723 = icmp eq i32 %708, 0
  %724 = zext i1 %723 to i8
  store i8 %724, i8* %77, align 1, !tbaa !2447
  %725 = lshr i32 %708, 31
  %726 = trunc i32 %725 to i8
  store i8 %726, i8* %80, align 1, !tbaa !2448
  %727 = lshr i32 %707, 31
  %728 = xor i32 %725, %727
  %729 = add nuw nsw i32 %728, %725
  %730 = icmp eq i32 %729, 2
  %731 = zext i1 %730 to i8
  store i8 %731, i8* %81, align 1, !tbaa !2449
  %732 = add i64 %704, 9
  store i64 %732, i64* %PC, align 8
  store i32 %708, i32* %706, align 4
  %733 = load i64, i64* %PC, align 8
  %734 = add i64 %733, -87
  store i64 %734, i64* %85, align 8, !tbaa !2428
  br label %block_402994
}

; Function Attrs: noinline
define %struct.Memory* @sub_402010_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %16 = add i64 %12, -12
  %17 = load i32, i32* %EDI, align 4
  %18 = add i64 %15, 11
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i32*
  store i32 %17, i32* %19, align 4
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %RSI, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -20
  %28 = load i32, i32* %EDX, align 4
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %31, align 4
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i32, i32* %ECX, align 4
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i32*
  store i32 %34, i32* %37, align 4
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -32
  %40 = load i64, i64* %R8, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -40
  %46 = load i64, i64* %R9, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -20
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = add i64 %50, -56
  %58 = load i32, i32* %EAX, align 4
  %59 = add i64 %52, 6
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %60, align 4
  %61 = load i32, i32* %ECX, align 4
  %62 = zext i32 %61 to i64
  %63 = load i64, i64* %PC, align 8
  store i64 %62, i64* %RAX, align 8, !tbaa !2428
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %66 = sext i32 %61 to i64
  %67 = lshr i64 %66, 32
  store i64 %67, i64* %64, align 8, !tbaa !2428
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -56
  %70 = add i64 %63, 6
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %RCX, align 8, !tbaa !2428
  %74 = add i64 %63, 8
  store i64 %74, i64* %PC, align 8
  %75 = zext i32 %61 to i64
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %77 = sext i32 %72 to i64
  %78 = shl nuw i64 %67, 32
  %79 = or i64 %78, %75
  %80 = sdiv i64 %79, %77
  %81 = shl i64 %80, 32
  %82 = ashr exact i64 %81, 32
  %83 = icmp eq i64 %80, %82
  br i1 %83, label %86, label %84

; <label>:84:                                     ; preds = %block_402010
  %85 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %74, %struct.Memory* %2) #9
  %.pre = load i64, i64* %RBP, align 8
  %.pre1 = load i32, i32* %EDX, align 4
  %.pre2 = load i64, i64* %PC, align 8
  %.pre21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.pre22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %.pre24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %.pre28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %.pre30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:86:                                     ; preds = %block_402010
  %87 = srem i64 %79, %77
  %88 = getelementptr inbounds %union.anon, %union.anon* %65, i64 0, i32 0
  %89 = and i64 %80, 4294967295
  store i64 %89, i64* %88, align 8, !tbaa !2428
  %90 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %91 = and i64 %87, 4294967295
  store i64 %91, i64* %90, align 8, !tbaa !2428
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %92, align 1, !tbaa !2432
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %93, align 1, !tbaa !2446
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %94, align 1, !tbaa !2450
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %95, align 1, !tbaa !2447
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %96, align 1, !tbaa !2448
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %97, align 1, !tbaa !2449
  %98 = trunc i64 %87 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %86, %84
  %.pre-phi31 = phi i8* [ %97, %86 ], [ %.pre30, %84 ]
  %.pre-phi29 = phi i8* [ %96, %86 ], [ %.pre28, %84 ]
  %.pre-phi27 = phi i8* [ %95, %86 ], [ %.pre26, %84 ]
  %.pre-phi25 = phi i8* [ %94, %86 ], [ %.pre24, %84 ]
  %.pre-phi23 = phi i8* [ %93, %86 ], [ %.pre22, %84 ]
  %.pre-phi = phi i8* [ %92, %86 ], [ %.pre21, %84 ]
  %99 = phi i64 [ %74, %86 ], [ %.pre2, %84 ]
  %100 = phi i32 [ %98, %86 ], [ %.pre1, %84 ]
  %101 = phi i64 [ %68, %86 ], [ %.pre, %84 ]
  %102 = phi %struct.Memory* [ %2, %86 ], [ %85, %84 ]
  %.pre-phi33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %103 = add i64 %101, -44
  %104 = add i64 %99, 3
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i32*
  store i32 %100, i32* %105, align 4
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -44
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %107 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = add i32 %111, -1
  %113 = icmp eq i32 %111, 0
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %.pre-phi, align 1, !tbaa !2432
  %115 = and i32 %112, 255
  %116 = tail call i32 @llvm.ctpop.i32(i32 %115) #8
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  store i8 %119, i8* %.pre-phi23, align 1, !tbaa !2446
  %120 = xor i32 %111, %112
  %121 = lshr i32 %120, 4
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  store i8 %123, i8* %.pre-phi25, align 1, !tbaa !2450
  %124 = icmp eq i32 %112, 0
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %.pre-phi27, align 1, !tbaa !2447
  %126 = lshr i32 %112, 31
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %.pre-phi29, align 1, !tbaa !2448
  %128 = lshr i32 %111, 31
  %129 = xor i32 %126, %128
  %130 = add nuw nsw i32 %129, %128
  %131 = icmp eq i32 %130, 2
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %.pre-phi31, align 1, !tbaa !2449
  %133 = icmp ne i8 %127, 0
  %134 = xor i1 %133, %131
  %.v34 = select i1 %134, i64 122, i64 10
  %135 = add i64 %108, %.v34
  store i64 %135, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %134, label %block_4020b9, label %block_402049

block_4020d9:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %136 = add i64 %427, 3
  store i64 %136, i64* %PC, align 8
  %137 = load i32, i32* %402, align 4
  %138 = add i32 %137, -1
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = icmp eq i32 %137, 0
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %.pre-phi, align 1, !tbaa !2432
  %142 = and i32 %138, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #8
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %.pre-phi23, align 1, !tbaa !2446
  %147 = xor i32 %137, %138
  %148 = lshr i32 %147, 4
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* %.pre-phi25, align 1, !tbaa !2450
  %151 = icmp eq i32 %138, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %.pre-phi27, align 1, !tbaa !2447
  %153 = lshr i32 %138, 31
  %154 = trunc i32 %153 to i8
  store i8 %154, i8* %.pre-phi29, align 1, !tbaa !2448
  %155 = lshr i32 %137, 31
  %156 = xor i32 %153, %155
  %157 = add nuw nsw i32 %156, %155
  %158 = icmp eq i32 %157, 2
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %.pre-phi31, align 1, !tbaa !2449
  %160 = add i64 %427, 9
  store i64 %160, i64* %PC, align 8
  store i32 %138, i32* %402, align 4
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -48
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 7
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i32*
  store i32 0, i32* %165, align 4
  %166 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %167 = bitcast [32 x %union.VectorReg]* %7 to float*
  %168 = getelementptr inbounds i8, i8* %166, i64 4
  %169 = bitcast i8* %168 to float*
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %171 = bitcast i64* %170 to float*
  %172 = getelementptr inbounds i8, i8* %166, i64 12
  %173 = bitcast i8* %172 to float*
  %174 = bitcast %union.VectorReg* %8 to i8*
  %175 = bitcast %union.VectorReg* %8 to float*
  %176 = getelementptr inbounds i8, i8* %174, i64 4
  %177 = bitcast i8* %176 to float*
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %179 = bitcast i64* %178 to float*
  %180 = getelementptr inbounds i8, i8* %174, i64 12
  %181 = bitcast i8* %180 to float*
  %182 = bitcast %union.VectorReg* %8 to <2 x float>*
  %183 = bitcast i64* %178 to <2 x i32>*
  %184 = bitcast i8* %176 to i32*
  %185 = bitcast i64* %178 to i32*
  %186 = bitcast i8* %180 to i32*
  %187 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %188 = bitcast i64* %170 to <2 x i32>*
  %189 = bitcast %union.VectorReg* %8 to <2 x float>*
  %190 = bitcast i8* %168 to i32*
  %191 = bitcast i64* %170 to i32*
  %192 = bitcast i8* %172 to i32*
  %193 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4020e9

block_402065:                                     ; preds = %block_402059
  %194 = add i64 %3715, -16
  %195 = add i64 %3751, 4
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = add i64 %3751, 8
  store i64 %198, i64* %PC, align 8
  %199 = load i32, i32* %3718, align 4
  %200 = sext i32 %199 to i64
  store i64 %200, i64* %RCX, align 8, !tbaa !2428
  %201 = shl nsw i64 %200, 2
  %202 = add i64 %201, %197
  %203 = add i64 %3751, 13
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %205, i32* %206, align 1, !tbaa !2452
  store float 0.000000e+00, float* %499, align 1, !tbaa !2452
  store float 0.000000e+00, float* %501, align 1, !tbaa !2452
  store float 0.000000e+00, float* %503, align 1, !tbaa !2452
  %207 = add i64 %3715, -32
  %208 = add i64 %3751, 17
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %3715, -44
  %212 = add i64 %3751, 21
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to i32*
  %214 = load i32, i32* %213, align 4
  %215 = sext i32 %214 to i64
  store i64 %215, i64* %RCX, align 8, !tbaa !2428
  %216 = shl nsw i64 %215, 2
  %217 = add i64 %216, %210
  %218 = add i64 %3751, 26
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i32*
  %220 = load i32, i32* %219, align 4
  %221 = bitcast %union.VectorReg* %8 to i32*
  store i32 %220, i32* %221, align 1, !tbaa !2452
  store float 0.000000e+00, float* %507, align 1, !tbaa !2452
  store float 0.000000e+00, float* %509, align 1, !tbaa !2452
  store float 0.000000e+00, float* %511, align 1, !tbaa !2452
  %222 = add i64 %3715, -40
  %223 = add i64 %3751, 30
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224, align 8
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = add i64 %3715, -24
  %227 = add i64 %3751, 33
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i32*
  %229 = load i32, i32* %228, align 4
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RDX, align 8, !tbaa !2428
  %231 = add i64 %3751, 37
  store i64 %231, i64* %PC, align 8
  %232 = load i32, i32* %213, align 4
  %233 = sext i32 %229 to i64
  %234 = sext i32 %232 to i64
  %235 = mul nsw i64 %234, %233
  %236 = trunc i64 %235 to i32
  %237 = and i64 %235, 4294967295
  store i64 %237, i64* %RDX, align 8, !tbaa !2428
  %238 = shl i64 %235, 32
  %239 = ashr exact i64 %238, 32
  %240 = icmp ne i64 %239, %235
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %.pre-phi, align 1, !tbaa !2432
  %242 = and i32 %236, 255
  %243 = tail call i32 @llvm.ctpop.i32(i32 %242) #8
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  store i8 %246, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %247 = lshr i32 %236, 31
  %248 = trunc i32 %247 to i8
  store i8 %248, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %241, i8* %.pre-phi31, align 1, !tbaa !2449
  %249 = add i64 %3751, 40
  store i64 %249, i64* %PC, align 8
  %250 = trunc i64 %235 to i32
  %251 = load i32, i32* %3718, align 4
  %252 = add i32 %251, %250
  %253 = zext i32 %252 to i64
  store i64 %253, i64* %RDX, align 8, !tbaa !2428
  %254 = icmp ult i32 %252, %250
  %255 = icmp ult i32 %252, %251
  %256 = or i1 %254, %255
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %.pre-phi, align 1, !tbaa !2432
  %258 = and i32 %252, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #8
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %.pre-phi23, align 1, !tbaa !2446
  %263 = xor i32 %251, %250
  %264 = xor i32 %263, %252
  %265 = lshr i32 %264, 4
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %.pre-phi25, align 1, !tbaa !2450
  %268 = icmp eq i32 %252, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %.pre-phi27, align 1, !tbaa !2447
  %270 = lshr i32 %252, 31
  %271 = trunc i32 %270 to i8
  store i8 %271, i8* %.pre-phi29, align 1, !tbaa !2448
  %272 = lshr i32 %250, 31
  %273 = lshr i32 %251, 31
  %274 = xor i32 %270, %272
  %275 = xor i32 %270, %273
  %276 = add nuw nsw i32 %274, %275
  %277 = icmp eq i32 %276, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %.pre-phi31, align 1, !tbaa !2449
  %279 = sext i32 %252 to i64
  store i64 %279, i64* %RCX, align 8, !tbaa !2428
  %280 = shl nsw i64 %279, 2
  %281 = add i64 %280, %225
  %282 = add i64 %3751, 48
  store i64 %282, i64* %PC, align 8
  %283 = load <2 x float>, <2 x float>* %512, align 1
  %284 = load <2 x i32>, <2 x i32>* %513, align 1
  %285 = inttoptr i64 %281 to float*
  %286 = load float, float* %285, align 4
  %287 = extractelement <2 x float> %283, i32 0
  %288 = fmul float %287, %286
  store float %288, float* %505, align 1, !tbaa !2452
  %289 = bitcast <2 x float> %283 to <2 x i32>
  %290 = extractelement <2 x i32> %289, i32 1
  store i32 %290, i32* %514, align 1, !tbaa !2452
  %291 = extractelement <2 x i32> %284, i32 0
  store i32 %291, i32* %515, align 1, !tbaa !2452
  %292 = extractelement <2 x i32> %284, i32 1
  store i32 %292, i32* %516, align 1, !tbaa !2452
  %293 = load <2 x float>, <2 x float>* %517, align 1
  %294 = load <2 x i32>, <2 x i32>* %518, align 1
  %295 = load <2 x float>, <2 x float>* %519, align 1
  %296 = extractelement <2 x float> %293, i32 0
  %297 = extractelement <2 x float> %295, i32 0
  %298 = fadd float %296, %297
  store float %298, float* %497, align 1, !tbaa !2452
  %299 = bitcast <2 x float> %293 to <2 x i32>
  %300 = extractelement <2 x i32> %299, i32 1
  store i32 %300, i32* %520, align 1, !tbaa !2452
  %301 = extractelement <2 x i32> %294, i32 0
  store i32 %301, i32* %521, align 1, !tbaa !2452
  %302 = extractelement <2 x i32> %294, i32 1
  store i32 %302, i32* %522, align 1, !tbaa !2452
  %303 = load i64, i64* %RBP, align 8
  %304 = add i64 %303, -16
  %305 = add i64 %3751, 56
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %RAX, align 8, !tbaa !2428
  %308 = add i64 %303, -48
  %309 = add i64 %3751, 60
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %308 to i32*
  %311 = load i32, i32* %310, align 4
  %312 = sext i32 %311 to i64
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = shl nsw i64 %312, 2
  %314 = add i64 %313, %307
  %315 = add i64 %3751, 65
  store i64 %315, i64* %PC, align 8
  %316 = load <2 x float>, <2 x float>* %523, align 1
  %317 = extractelement <2 x float> %316, i32 0
  %318 = inttoptr i64 %314 to float*
  store float %317, float* %318, align 4
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -48
  %321 = load i64, i64* %PC, align 8
  %322 = add i64 %321, 3
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %320 to i32*
  %324 = load i32, i32* %323, align 4
  %325 = add i32 %324, 1
  %326 = zext i32 %325 to i64
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = icmp eq i32 %324, -1
  %328 = icmp eq i32 %325, 0
  %329 = or i1 %327, %328
  %330 = zext i1 %329 to i8
  store i8 %330, i8* %.pre-phi, align 1, !tbaa !2432
  %331 = and i32 %325, 255
  %332 = tail call i32 @llvm.ctpop.i32(i32 %331) #8
  %333 = trunc i32 %332 to i8
  %334 = and i8 %333, 1
  %335 = xor i8 %334, 1
  store i8 %335, i8* %.pre-phi23, align 1, !tbaa !2446
  %336 = xor i32 %324, %325
  %337 = lshr i32 %336, 4
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  store i8 %339, i8* %.pre-phi25, align 1, !tbaa !2450
  %340 = icmp eq i32 %325, 0
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %.pre-phi27, align 1, !tbaa !2447
  %342 = lshr i32 %325, 31
  %343 = trunc i32 %342 to i8
  store i8 %343, i8* %.pre-phi29, align 1, !tbaa !2448
  %344 = lshr i32 %324, 31
  %345 = xor i32 %342, %344
  %346 = add nuw nsw i32 %345, %342
  %347 = icmp eq i32 %346, 2
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %.pre-phi31, align 1, !tbaa !2449
  %349 = add i64 %321, 9
  store i64 %349, i64* %PC, align 8
  store i32 %325, i32* %323, align 4
  %350 = load i64, i64* %PC, align 8
  %351 = add i64 %350, -86
  store i64 %351, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_402059

block_4020b9:                                     ; preds = %block_4020b4, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %352 = phi i64 [ %3715, %block_4020b4 ], [ %106, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  %353 = phi i64 [ %3194, %block_4020b4 ], [ %135, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %354 = add i64 %352, -20
  %355 = add i64 %353, 8
  store i64 %355, i64* %PC, align 8
  %356 = inttoptr i64 %354 to i32*
  %357 = load i32, i32* %356, align 4
  %358 = zext i32 %357 to i64
  store i64 %358, i64* %RCX, align 8, !tbaa !2428
  %359 = add i64 %352, -60
  %360 = add i64 %353, 11
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i32*
  store i32 4, i32* %361, align 4
  %362 = load i32, i32* %ECX, align 4
  %363 = zext i32 %362 to i64
  %364 = load i64, i64* %PC, align 8
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %365 = sext i32 %362 to i64
  %366 = lshr i64 %365, 32
  store i64 %366, i64* %64, align 8, !tbaa !2428
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -60
  %369 = add i64 %364, 6
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i32*
  %371 = load i32, i32* %370, align 4
  %372 = zext i32 %371 to i64
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = add i64 %364, 8
  store i64 %373, i64* %PC, align 8
  %374 = zext i32 %362 to i64
  %375 = sext i32 %371 to i64
  %376 = shl nuw i64 %366, 32
  %377 = or i64 %376, %374
  %378 = sdiv i64 %377, %375
  %379 = shl i64 %378, 32
  %380 = ashr exact i64 %379, 32
  %381 = icmp eq i64 %378, %380
  br i1 %381, label %384, label %382

; <label>:382:                                    ; preds = %block_4020b9
  %383 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %373, %struct.Memory* %102) #9
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i32, i32* %EDX, align 4
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:384:                                    ; preds = %block_4020b9
  %385 = srem i64 %377, %375
  %386 = getelementptr inbounds %union.anon, %union.anon* %65, i64 0, i32 0
  %387 = and i64 %378, 4294967295
  store i64 %387, i64* %386, align 8, !tbaa !2428
  %388 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %389 = and i64 %385, 4294967295
  store i64 %389, i64* %388, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %390 = trunc i64 %385 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %384, %382
  %391 = phi i64 [ %.pre6, %382 ], [ %373, %384 ]
  %392 = phi i32 [ %.pre5, %382 ], [ %390, %384 ]
  %393 = phi i64 [ %.pre4, %382 ], [ %367, %384 ]
  %394 = phi %struct.Memory* [ %383, %382 ], [ %102, %384 ]
  %395 = add i64 %393, -44
  %396 = add i64 %391, 3
  store i64 %396, i64* %PC, align 8
  %397 = inttoptr i64 %395 to i32*
  store i32 %392, i32* %397, align 4
  %398 = load i64, i64* %RBP, align 8
  %399 = add i64 %398, -44
  %400 = load i64, i64* %PC, align 8
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC, align 8
  %402 = inttoptr i64 %399 to i32*
  %403 = load i32, i32* %402, align 4
  %404 = add i32 %403, -2
  %405 = icmp ult i32 %403, 2
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %.pre-phi, align 1, !tbaa !2432
  %407 = and i32 %404, 255
  %408 = tail call i32 @llvm.ctpop.i32(i32 %407) #8
  %409 = trunc i32 %408 to i8
  %410 = and i8 %409, 1
  %411 = xor i8 %410, 1
  store i8 %411, i8* %.pre-phi23, align 1, !tbaa !2446
  %412 = xor i32 %403, %404
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  store i8 %415, i8* %.pre-phi25, align 1, !tbaa !2450
  %416 = icmp eq i32 %404, 0
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %.pre-phi27, align 1, !tbaa !2447
  %418 = lshr i32 %404, 31
  %419 = trunc i32 %418 to i8
  store i8 %419, i8* %.pre-phi29, align 1, !tbaa !2448
  %420 = lshr i32 %403, 31
  %421 = xor i32 %418, %420
  %422 = add nuw nsw i32 %421, %420
  %423 = icmp eq i32 %422, 2
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %.pre-phi31, align 1, !tbaa !2449
  %425 = icmp ne i8 %419, 0
  %426 = xor i1 %425, %423
  %.v36 = select i1 %426, i64 171, i64 10
  %427 = add i64 %400, %.v36
  store i64 %427, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %426, label %block_40217a, label %block_4020d9

block_4022cd:                                     ; preds = %block_4022d9, %block_4022bd
  %428 = phi i64 [ %4925, %block_4022d9 ], [ %.pre15, %block_4022bd ]
  %429 = load i64, i64* %RBP, align 8
  %430 = add i64 %429, -48
  %431 = add i64 %428, 3
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %430 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = zext i32 %433 to i64
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = add i64 %429, -4
  %436 = add i64 %428, 6
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %435 to i32*
  %438 = load i32, i32* %437, align 4
  %439 = sub i32 %433, %438
  %440 = icmp ult i32 %433, %438
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %.pre-phi, align 1, !tbaa !2432
  %442 = and i32 %439, 255
  %443 = tail call i32 @llvm.ctpop.i32(i32 %442) #8
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  store i8 %446, i8* %.pre-phi23, align 1, !tbaa !2446
  %447 = xor i32 %438, %433
  %448 = xor i32 %447, %439
  %449 = lshr i32 %448, 4
  %450 = trunc i32 %449 to i8
  %451 = and i8 %450, 1
  store i8 %451, i8* %.pre-phi25, align 1, !tbaa !2450
  %452 = icmp eq i32 %439, 0
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %.pre-phi27, align 1, !tbaa !2447
  %454 = lshr i32 %439, 31
  %455 = trunc i32 %454 to i8
  store i8 %455, i8* %.pre-phi29, align 1, !tbaa !2448
  %456 = lshr i32 %433, 31
  %457 = lshr i32 %438, 31
  %458 = xor i32 %457, %456
  %459 = xor i32 %454, %456
  %460 = add nuw nsw i32 %459, %458
  %461 = icmp eq i32 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %.pre-phi31, align 1, !tbaa !2449
  %463 = icmp ne i8 %455, 0
  %464 = xor i1 %463, %461
  %.v41 = select i1 %464, i64 12, i64 434
  %465 = add i64 %428, %.v41
  store i64 %465, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %464, label %block_4022d9, label %block_40247f

block_402049:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %466 = add i64 %135, 3
  store i64 %466, i64* %PC, align 8
  %467 = load i32, i32* %110, align 4
  %468 = add i32 %467, -1
  %469 = zext i32 %468 to i64
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = icmp eq i32 %467, 0
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %.pre-phi, align 1, !tbaa !2432
  %472 = and i32 %468, 255
  %473 = tail call i32 @llvm.ctpop.i32(i32 %472) #8
  %474 = trunc i32 %473 to i8
  %475 = and i8 %474, 1
  %476 = xor i8 %475, 1
  store i8 %476, i8* %.pre-phi23, align 1, !tbaa !2446
  %477 = xor i32 %467, %468
  %478 = lshr i32 %477, 4
  %479 = trunc i32 %478 to i8
  %480 = and i8 %479, 1
  store i8 %480, i8* %.pre-phi25, align 1, !tbaa !2450
  %481 = icmp eq i32 %468, 0
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %.pre-phi27, align 1, !tbaa !2447
  %483 = lshr i32 %468, 31
  %484 = trunc i32 %483 to i8
  store i8 %484, i8* %.pre-phi29, align 1, !tbaa !2448
  %485 = lshr i32 %467, 31
  %486 = xor i32 %483, %485
  %487 = add nuw nsw i32 %486, %485
  %488 = icmp eq i32 %487, 2
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %.pre-phi31, align 1, !tbaa !2449
  %490 = add i64 %135, 9
  store i64 %490, i64* %PC, align 8
  store i32 %468, i32* %110, align 4
  %491 = load i64, i64* %RBP, align 8
  %492 = add i64 %491, -48
  %493 = load i64, i64* %PC, align 8
  %494 = add i64 %493, 7
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %492 to i32*
  store i32 0, i32* %495, align 4
  %496 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %497 = bitcast [32 x %union.VectorReg]* %7 to float*
  %498 = getelementptr inbounds i8, i8* %496, i64 4
  %499 = bitcast i8* %498 to float*
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %501 = bitcast i64* %500 to float*
  %502 = getelementptr inbounds i8, i8* %496, i64 12
  %503 = bitcast i8* %502 to float*
  %504 = bitcast %union.VectorReg* %8 to i8*
  %505 = bitcast %union.VectorReg* %8 to float*
  %506 = getelementptr inbounds i8, i8* %504, i64 4
  %507 = bitcast i8* %506 to float*
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %509 = bitcast i64* %508 to float*
  %510 = getelementptr inbounds i8, i8* %504, i64 12
  %511 = bitcast i8* %510 to float*
  %512 = bitcast %union.VectorReg* %8 to <2 x float>*
  %513 = bitcast i64* %508 to <2 x i32>*
  %514 = bitcast i8* %506 to i32*
  %515 = bitcast i64* %508 to i32*
  %516 = bitcast i8* %510 to i32*
  %517 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %518 = bitcast i64* %500 to <2 x i32>*
  %519 = bitcast %union.VectorReg* %8 to <2 x float>*
  %520 = bitcast i8* %498 to i32*
  %521 = bitcast i64* %500 to i32*
  %522 = bitcast i8* %502 to i32*
  %523 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_402059

block_4027f3:                                     ; preds = %block_4024b9
  %524 = add i64 %3487, -44
  %525 = add i64 %3523, 8
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %524 to i32*
  %527 = load i32, i32* %526, align 4
  %528 = add i32 %527, 16
  %529 = zext i32 %528 to i64
  store i64 %529, i64* %RAX, align 8, !tbaa !2428
  %530 = icmp ugt i32 %527, -17
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %.pre-phi, align 1, !tbaa !2432
  %532 = and i32 %528, 255
  %533 = tail call i32 @llvm.ctpop.i32(i32 %532) #8
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  %536 = xor i8 %535, 1
  store i8 %536, i8* %.pre-phi23, align 1, !tbaa !2446
  %537 = xor i32 %527, 16
  %538 = xor i32 %537, %528
  %539 = lshr i32 %538, 4
  %540 = trunc i32 %539 to i8
  %541 = and i8 %540, 1
  store i8 %541, i8* %.pre-phi25, align 1, !tbaa !2450
  %542 = icmp eq i32 %528, 0
  %543 = zext i1 %542 to i8
  store i8 %543, i8* %.pre-phi27, align 1, !tbaa !2447
  %544 = lshr i32 %528, 31
  %545 = trunc i32 %544 to i8
  store i8 %545, i8* %.pre-phi29, align 1, !tbaa !2448
  %546 = lshr i32 %527, 31
  %547 = xor i32 %544, %546
  %548 = add nuw nsw i32 %547, %544
  %549 = icmp eq i32 %548, 2
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %.pre-phi31, align 1, !tbaa !2449
  %551 = add i64 %3523, 14
  store i64 %551, i64* %PC, align 8
  store i32 %528, i32* %526, align 4
  %552 = load i64, i64* %PC, align 8
  %553 = add i64 %552, -859
  store i64 %553, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_4024a6

block_4022bd:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %554 = add i64 %3827, 3
  store i64 %554, i64* %PC, align 8
  %555 = load i32, i32* %3802, align 4
  %556 = add i32 %555, -1
  %557 = zext i32 %556 to i64
  store i64 %557, i64* %RAX, align 8, !tbaa !2428
  %558 = icmp eq i32 %555, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %.pre-phi, align 1, !tbaa !2432
  %560 = and i32 %556, 255
  %561 = tail call i32 @llvm.ctpop.i32(i32 %560) #8
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  store i8 %564, i8* %.pre-phi23, align 1, !tbaa !2446
  %565 = xor i32 %555, %556
  %566 = lshr i32 %565, 4
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  store i8 %568, i8* %.pre-phi25, align 1, !tbaa !2450
  %569 = icmp eq i32 %556, 0
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %.pre-phi27, align 1, !tbaa !2447
  %571 = lshr i32 %556, 31
  %572 = trunc i32 %571 to i8
  store i8 %572, i8* %.pre-phi29, align 1, !tbaa !2448
  %573 = lshr i32 %555, 31
  %574 = xor i32 %571, %573
  %575 = add nuw nsw i32 %574, %573
  %576 = icmp eq i32 %575, 2
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %.pre-phi31, align 1, !tbaa !2449
  %578 = add i64 %3827, 9
  store i64 %578, i64* %PC, align 8
  store i32 %556, i32* %3802, align 4
  %579 = load i64, i64* %RBP, align 8
  %580 = add i64 %579, -48
  %581 = load i64, i64* %PC, align 8
  %582 = add i64 %581, 7
  store i64 %582, i64* %PC, align 8
  %583 = inttoptr i64 %580 to i32*
  store i32 0, i32* %583, align 4
  %584 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %585 = bitcast [32 x %union.VectorReg]* %7 to float*
  %586 = getelementptr inbounds i8, i8* %584, i64 4
  %587 = bitcast i8* %586 to float*
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %589 = bitcast i64* %588 to float*
  %590 = getelementptr inbounds i8, i8* %584, i64 12
  %591 = bitcast i8* %590 to float*
  %592 = bitcast %union.VectorReg* %8 to i8*
  %593 = bitcast %union.VectorReg* %8 to float*
  %594 = getelementptr inbounds i8, i8* %592, i64 4
  %595 = bitcast i8* %594 to float*
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %597 = bitcast i64* %596 to float*
  %598 = getelementptr inbounds i8, i8* %592, i64 12
  %599 = bitcast i8* %598 to float*
  %600 = bitcast %union.VectorReg* %8 to <2 x float>*
  %601 = bitcast i64* %596 to <2 x i32>*
  %602 = bitcast i8* %594 to i32*
  %603 = bitcast i64* %596 to i32*
  %604 = bitcast i8* %598 to i32*
  %605 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %606 = bitcast i64* %588 to <2 x i32>*
  %607 = bitcast %union.VectorReg* %8 to <2 x float>*
  %608 = bitcast i8* %586 to i32*
  %609 = bitcast i64* %588 to i32*
  %610 = bitcast i8* %590 to i32*
  %611 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_4022cd

block_4024c5:                                     ; preds = %block_4024b9
  %612 = add i64 %3487, -16
  %613 = add i64 %3523, 4
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i64*
  %615 = load i64, i64* %614, align 8
  store i64 %615, i64* %RAX, align 8, !tbaa !2428
  %616 = add i64 %3523, 8
  store i64 %616, i64* %PC, align 8
  %617 = load i32, i32* %3490, align 4
  %618 = sext i32 %617 to i64
  store i64 %618, i64* %RCX, align 8, !tbaa !2428
  %619 = shl nsw i64 %618, 2
  %620 = add i64 %619, %615
  %621 = add i64 %3523, 13
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %620 to i32*
  %623 = load i32, i32* %622, align 4
  %624 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %623, i32* %624, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5041, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5043, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5045, align 1, !tbaa !2452
  %625 = add i64 %3487, -32
  %626 = add i64 %3523, 17
  store i64 %626, i64* %PC, align 8
  %627 = inttoptr i64 %625 to i64*
  %628 = load i64, i64* %627, align 8
  store i64 %628, i64* %RAX, align 8, !tbaa !2428
  %629 = add i64 %3487, -44
  %630 = add i64 %3523, 20
  store i64 %630, i64* %PC, align 8
  %631 = inttoptr i64 %629 to i32*
  %632 = load i32, i32* %631, align 4
  %633 = add i32 %632, -15
  %634 = zext i32 %633 to i64
  store i64 %634, i64* %RDX, align 8, !tbaa !2428
  %635 = icmp ult i32 %632, 15
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %.pre-phi, align 1, !tbaa !2432
  %637 = and i32 %633, 255
  %638 = tail call i32 @llvm.ctpop.i32(i32 %637) #8
  %639 = trunc i32 %638 to i8
  %640 = and i8 %639, 1
  %641 = xor i8 %640, 1
  store i8 %641, i8* %.pre-phi23, align 1, !tbaa !2446
  %642 = xor i32 %632, %633
  %643 = lshr i32 %642, 4
  %644 = trunc i32 %643 to i8
  %645 = and i8 %644, 1
  store i8 %645, i8* %.pre-phi25, align 1, !tbaa !2450
  %646 = icmp eq i32 %633, 0
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %.pre-phi27, align 1, !tbaa !2447
  %648 = lshr i32 %633, 31
  %649 = trunc i32 %648 to i8
  store i8 %649, i8* %.pre-phi29, align 1, !tbaa !2448
  %650 = lshr i32 %632, 31
  %651 = xor i32 %648, %650
  %652 = add nuw nsw i32 %651, %650
  %653 = icmp eq i32 %652, 2
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %.pre-phi31, align 1, !tbaa !2449
  %655 = sext i32 %633 to i64
  store i64 %655, i64* %RCX, align 8, !tbaa !2428
  %656 = shl nsw i64 %655, 2
  %657 = add i64 %656, %628
  %658 = add i64 %3523, 31
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %657 to i32*
  %660 = load i32, i32* %659, align 4
  %661 = bitcast %union.VectorReg* %8 to i32*
  store i32 %660, i32* %661, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %662 = add i64 %3487, -40
  %663 = add i64 %3523, 35
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to i64*
  %665 = load i64, i64* %664, align 8
  store i64 %665, i64* %RAX, align 8, !tbaa !2428
  %666 = add i64 %3487, -24
  %667 = add i64 %3523, 38
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i32*
  %669 = load i32, i32* %668, align 4
  %670 = zext i32 %669 to i64
  store i64 %670, i64* %RDX, align 8, !tbaa !2428
  %671 = add i64 %3523, 41
  store i64 %671, i64* %PC, align 8
  %672 = load i32, i32* %631, align 4
  %673 = add i32 %672, -15
  %674 = zext i32 %673 to i64
  store i64 %674, i64* %RSI, align 8, !tbaa !2428
  %675 = sext i32 %669 to i64
  %676 = sext i32 %673 to i64
  %677 = mul nsw i64 %676, %675
  %678 = trunc i64 %677 to i32
  %679 = and i64 %677, 4294967295
  store i64 %679, i64* %RDX, align 8, !tbaa !2428
  %680 = shl i64 %677, 32
  %681 = ashr exact i64 %680, 32
  %682 = icmp ne i64 %681, %677
  %683 = zext i1 %682 to i8
  store i8 %683, i8* %.pre-phi, align 1, !tbaa !2432
  %684 = and i32 %678, 255
  %685 = tail call i32 @llvm.ctpop.i32(i32 %684) #8
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  %688 = xor i8 %687, 1
  store i8 %688, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %689 = lshr i32 %678, 31
  %690 = trunc i32 %689 to i8
  store i8 %690, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %683, i8* %.pre-phi31, align 1, !tbaa !2449
  %691 = load i64, i64* %RBP, align 8
  %692 = add i64 %691, -48
  %693 = add i64 %3523, 50
  store i64 %693, i64* %PC, align 8
  %694 = trunc i64 %677 to i32
  %695 = inttoptr i64 %692 to i32*
  %696 = load i32, i32* %695, align 4
  %697 = add i32 %696, %694
  %698 = zext i32 %697 to i64
  store i64 %698, i64* %RDX, align 8, !tbaa !2428
  %699 = icmp ult i32 %697, %694
  %700 = icmp ult i32 %697, %696
  %701 = or i1 %699, %700
  %702 = zext i1 %701 to i8
  store i8 %702, i8* %.pre-phi, align 1, !tbaa !2432
  %703 = and i32 %697, 255
  %704 = tail call i32 @llvm.ctpop.i32(i32 %703) #8
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  %707 = xor i8 %706, 1
  store i8 %707, i8* %.pre-phi23, align 1, !tbaa !2446
  %708 = xor i32 %696, %694
  %709 = xor i32 %708, %697
  %710 = lshr i32 %709, 4
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  store i8 %712, i8* %.pre-phi25, align 1, !tbaa !2450
  %713 = icmp eq i32 %697, 0
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %.pre-phi27, align 1, !tbaa !2447
  %715 = lshr i32 %697, 31
  %716 = trunc i32 %715 to i8
  store i8 %716, i8* %.pre-phi29, align 1, !tbaa !2448
  %717 = lshr i32 %694, 31
  %718 = lshr i32 %696, 31
  %719 = xor i32 %715, %717
  %720 = xor i32 %715, %718
  %721 = add nuw nsw i32 %719, %720
  %722 = icmp eq i32 %721, 2
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %.pre-phi31, align 1, !tbaa !2449
  %724 = sext i32 %697 to i64
  store i64 %724, i64* %RCX, align 8, !tbaa !2428
  %725 = load i64, i64* %RAX, align 8
  %726 = shl nsw i64 %724, 2
  %727 = add i64 %726, %725
  %728 = add i64 %3523, 58
  store i64 %728, i64* %PC, align 8
  %729 = load <2 x float>, <2 x float>* %5054, align 1
  %730 = load <2 x i32>, <2 x i32>* %5055, align 1
  %731 = inttoptr i64 %727 to float*
  %732 = load float, float* %731, align 4
  %733 = extractelement <2 x float> %729, i32 0
  %734 = fmul float %733, %732
  store float %734, float* %5047, align 1, !tbaa !2452
  %735 = bitcast <2 x float> %729 to <2 x i32>
  %736 = extractelement <2 x i32> %735, i32 1
  store i32 %736, i32* %5056, align 1, !tbaa !2452
  %737 = extractelement <2 x i32> %730, i32 0
  store i32 %737, i32* %5057, align 1, !tbaa !2452
  %738 = extractelement <2 x i32> %730, i32 1
  store i32 %738, i32* %5058, align 1, !tbaa !2452
  %739 = load <2 x float>, <2 x float>* %5059, align 1
  %740 = load <2 x i32>, <2 x i32>* %5060, align 1
  %741 = load <2 x float>, <2 x float>* %5061, align 1
  %742 = extractelement <2 x float> %739, i32 0
  %743 = extractelement <2 x float> %741, i32 0
  %744 = fadd float %742, %743
  store float %744, float* %5039, align 1, !tbaa !2452
  %745 = bitcast <2 x float> %739 to <2 x i32>
  %746 = extractelement <2 x i32> %745, i32 1
  store i32 %746, i32* %5062, align 1, !tbaa !2452
  %747 = extractelement <2 x i32> %740, i32 0
  store i32 %747, i32* %5063, align 1, !tbaa !2452
  %748 = extractelement <2 x i32> %740, i32 1
  store i32 %748, i32* %5064, align 1, !tbaa !2452
  %749 = add i64 %691, -32
  %750 = add i64 %3523, 66
  store i64 %750, i64* %PC, align 8
  %751 = inttoptr i64 %749 to i64*
  %752 = load i64, i64* %751, align 8
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = add i64 %691, -44
  %754 = add i64 %3523, 69
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %753 to i32*
  %756 = load i32, i32* %755, align 4
  %757 = add i32 %756, -14
  %758 = zext i32 %757 to i64
  store i64 %758, i64* %RDX, align 8, !tbaa !2428
  %759 = icmp ult i32 %756, 14
  %760 = zext i1 %759 to i8
  store i8 %760, i8* %.pre-phi, align 1, !tbaa !2432
  %761 = and i32 %757, 255
  %762 = tail call i32 @llvm.ctpop.i32(i32 %761) #8
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  store i8 %765, i8* %.pre-phi23, align 1, !tbaa !2446
  %766 = xor i32 %756, %757
  %767 = lshr i32 %766, 4
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  store i8 %769, i8* %.pre-phi25, align 1, !tbaa !2450
  %770 = icmp eq i32 %757, 0
  %771 = zext i1 %770 to i8
  store i8 %771, i8* %.pre-phi27, align 1, !tbaa !2447
  %772 = lshr i32 %757, 31
  %773 = trunc i32 %772 to i8
  store i8 %773, i8* %.pre-phi29, align 1, !tbaa !2448
  %774 = lshr i32 %756, 31
  %775 = xor i32 %772, %774
  %776 = add nuw nsw i32 %775, %774
  %777 = icmp eq i32 %776, 2
  %778 = zext i1 %777 to i8
  store i8 %778, i8* %.pre-phi31, align 1, !tbaa !2449
  %779 = sext i32 %757 to i64
  store i64 %779, i64* %RCX, align 8, !tbaa !2428
  %780 = shl nsw i64 %779, 2
  %781 = add i64 %780, %752
  %782 = add i64 %3523, 80
  store i64 %782, i64* %PC, align 8
  %783 = inttoptr i64 %781 to i32*
  %784 = load i32, i32* %783, align 4
  %785 = bitcast %union.VectorReg* %8 to i32*
  store i32 %784, i32* %785, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %786 = load i64, i64* %RBP, align 8
  %787 = add i64 %786, -40
  %788 = add i64 %3523, 84
  store i64 %788, i64* %PC, align 8
  %789 = inttoptr i64 %787 to i64*
  %790 = load i64, i64* %789, align 8
  store i64 %790, i64* %RAX, align 8, !tbaa !2428
  %791 = add i64 %786, -24
  %792 = add i64 %3523, 87
  store i64 %792, i64* %PC, align 8
  %793 = inttoptr i64 %791 to i32*
  %794 = load i32, i32* %793, align 4
  %795 = zext i32 %794 to i64
  store i64 %795, i64* %RDX, align 8, !tbaa !2428
  %796 = add i64 %786, -44
  %797 = add i64 %3523, 90
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %796 to i32*
  %799 = load i32, i32* %798, align 4
  %800 = add i32 %799, -14
  %801 = zext i32 %800 to i64
  store i64 %801, i64* %RSI, align 8, !tbaa !2428
  %802 = sext i32 %794 to i64
  %803 = sext i32 %800 to i64
  %804 = mul nsw i64 %803, %802
  %805 = trunc i64 %804 to i32
  %806 = and i64 %804, 4294967295
  store i64 %806, i64* %RDX, align 8, !tbaa !2428
  %807 = shl i64 %804, 32
  %808 = ashr exact i64 %807, 32
  %809 = icmp ne i64 %808, %804
  %810 = zext i1 %809 to i8
  store i8 %810, i8* %.pre-phi, align 1, !tbaa !2432
  %811 = and i32 %805, 255
  %812 = tail call i32 @llvm.ctpop.i32(i32 %811) #8
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  store i8 %815, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %816 = lshr i32 %805, 31
  %817 = trunc i32 %816 to i8
  store i8 %817, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %810, i8* %.pre-phi31, align 1, !tbaa !2449
  %818 = add i64 %786, -48
  %819 = add i64 %3523, 99
  store i64 %819, i64* %PC, align 8
  %820 = trunc i64 %804 to i32
  %821 = inttoptr i64 %818 to i32*
  %822 = load i32, i32* %821, align 4
  %823 = add i32 %822, %820
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDX, align 8, !tbaa !2428
  %825 = icmp ult i32 %823, %820
  %826 = icmp ult i32 %823, %822
  %827 = or i1 %825, %826
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %.pre-phi, align 1, !tbaa !2432
  %829 = and i32 %823, 255
  %830 = tail call i32 @llvm.ctpop.i32(i32 %829) #8
  %831 = trunc i32 %830 to i8
  %832 = and i8 %831, 1
  %833 = xor i8 %832, 1
  store i8 %833, i8* %.pre-phi23, align 1, !tbaa !2446
  %834 = xor i32 %822, %820
  %835 = xor i32 %834, %823
  %836 = lshr i32 %835, 4
  %837 = trunc i32 %836 to i8
  %838 = and i8 %837, 1
  store i8 %838, i8* %.pre-phi25, align 1, !tbaa !2450
  %839 = icmp eq i32 %823, 0
  %840 = zext i1 %839 to i8
  store i8 %840, i8* %.pre-phi27, align 1, !tbaa !2447
  %841 = lshr i32 %823, 31
  %842 = trunc i32 %841 to i8
  store i8 %842, i8* %.pre-phi29, align 1, !tbaa !2448
  %843 = lshr i32 %820, 31
  %844 = lshr i32 %822, 31
  %845 = xor i32 %841, %843
  %846 = xor i32 %841, %844
  %847 = add nuw nsw i32 %845, %846
  %848 = icmp eq i32 %847, 2
  %849 = zext i1 %848 to i8
  store i8 %849, i8* %.pre-phi31, align 1, !tbaa !2449
  %850 = sext i32 %823 to i64
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = load i64, i64* %RAX, align 8
  %852 = shl nsw i64 %850, 2
  %853 = add i64 %852, %851
  %854 = add i64 %3523, 107
  store i64 %854, i64* %PC, align 8
  %855 = load <2 x float>, <2 x float>* %5054, align 1
  %856 = load <2 x i32>, <2 x i32>* %5055, align 1
  %857 = inttoptr i64 %853 to float*
  %858 = load float, float* %857, align 4
  %859 = extractelement <2 x float> %855, i32 0
  %860 = fmul float %859, %858
  store float %860, float* %5047, align 1, !tbaa !2452
  %861 = bitcast <2 x float> %855 to <2 x i32>
  %862 = extractelement <2 x i32> %861, i32 1
  store i32 %862, i32* %5056, align 1, !tbaa !2452
  %863 = extractelement <2 x i32> %856, i32 0
  store i32 %863, i32* %5057, align 1, !tbaa !2452
  %864 = extractelement <2 x i32> %856, i32 1
  store i32 %864, i32* %5058, align 1, !tbaa !2452
  %865 = load <2 x float>, <2 x float>* %5059, align 1
  %866 = load <2 x i32>, <2 x i32>* %5060, align 1
  %867 = load <2 x float>, <2 x float>* %5061, align 1
  %868 = extractelement <2 x float> %865, i32 0
  %869 = extractelement <2 x float> %867, i32 0
  %870 = fadd float %868, %869
  store float %870, float* %5039, align 1, !tbaa !2452
  %871 = bitcast <2 x float> %865 to <2 x i32>
  %872 = extractelement <2 x i32> %871, i32 1
  store i32 %872, i32* %5062, align 1, !tbaa !2452
  %873 = extractelement <2 x i32> %866, i32 0
  store i32 %873, i32* %5063, align 1, !tbaa !2452
  %874 = extractelement <2 x i32> %866, i32 1
  store i32 %874, i32* %5064, align 1, !tbaa !2452
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -32
  %877 = add i64 %3523, 115
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  %879 = load i64, i64* %878, align 8
  store i64 %879, i64* %RAX, align 8, !tbaa !2428
  %880 = add i64 %875, -44
  %881 = add i64 %3523, 118
  store i64 %881, i64* %PC, align 8
  %882 = inttoptr i64 %880 to i32*
  %883 = load i32, i32* %882, align 4
  %884 = add i32 %883, -13
  %885 = zext i32 %884 to i64
  store i64 %885, i64* %RDX, align 8, !tbaa !2428
  %886 = icmp ult i32 %883, 13
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %.pre-phi, align 1, !tbaa !2432
  %888 = and i32 %884, 255
  %889 = tail call i32 @llvm.ctpop.i32(i32 %888) #8
  %890 = trunc i32 %889 to i8
  %891 = and i8 %890, 1
  %892 = xor i8 %891, 1
  store i8 %892, i8* %.pre-phi23, align 1, !tbaa !2446
  %893 = xor i32 %883, %884
  %894 = lshr i32 %893, 4
  %895 = trunc i32 %894 to i8
  %896 = and i8 %895, 1
  store i8 %896, i8* %.pre-phi25, align 1, !tbaa !2450
  %897 = icmp eq i32 %884, 0
  %898 = zext i1 %897 to i8
  store i8 %898, i8* %.pre-phi27, align 1, !tbaa !2447
  %899 = lshr i32 %884, 31
  %900 = trunc i32 %899 to i8
  store i8 %900, i8* %.pre-phi29, align 1, !tbaa !2448
  %901 = lshr i32 %883, 31
  %902 = xor i32 %899, %901
  %903 = add nuw nsw i32 %902, %901
  %904 = icmp eq i32 %903, 2
  %905 = zext i1 %904 to i8
  store i8 %905, i8* %.pre-phi31, align 1, !tbaa !2449
  %906 = sext i32 %884 to i64
  store i64 %906, i64* %RCX, align 8, !tbaa !2428
  %907 = shl nsw i64 %906, 2
  %908 = add i64 %907, %879
  %909 = add i64 %3523, 129
  store i64 %909, i64* %PC, align 8
  %910 = inttoptr i64 %908 to i32*
  %911 = load i32, i32* %910, align 4
  %912 = bitcast %union.VectorReg* %8 to i32*
  store i32 %911, i32* %912, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %913 = add i64 %875, -40
  %914 = add i64 %3523, 133
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to i64*
  %916 = load i64, i64* %915, align 8
  store i64 %916, i64* %RAX, align 8, !tbaa !2428
  %917 = add i64 %875, -24
  %918 = add i64 %3523, 136
  store i64 %918, i64* %PC, align 8
  %919 = inttoptr i64 %917 to i32*
  %920 = load i32, i32* %919, align 4
  %921 = zext i32 %920 to i64
  store i64 %921, i64* %RDX, align 8, !tbaa !2428
  %922 = add i64 %3523, 139
  store i64 %922, i64* %PC, align 8
  %923 = load i32, i32* %882, align 4
  %924 = add i32 %923, -13
  %925 = zext i32 %924 to i64
  store i64 %925, i64* %RSI, align 8, !tbaa !2428
  %926 = sext i32 %920 to i64
  %927 = sext i32 %924 to i64
  %928 = mul nsw i64 %927, %926
  %929 = trunc i64 %928 to i32
  %930 = and i64 %928, 4294967295
  store i64 %930, i64* %RDX, align 8, !tbaa !2428
  %931 = shl i64 %928, 32
  %932 = ashr exact i64 %931, 32
  %933 = icmp ne i64 %932, %928
  %934 = zext i1 %933 to i8
  store i8 %934, i8* %.pre-phi, align 1, !tbaa !2432
  %935 = and i32 %929, 255
  %936 = tail call i32 @llvm.ctpop.i32(i32 %935) #8
  %937 = trunc i32 %936 to i8
  %938 = and i8 %937, 1
  %939 = xor i8 %938, 1
  store i8 %939, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %940 = lshr i32 %929, 31
  %941 = trunc i32 %940 to i8
  store i8 %941, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %934, i8* %.pre-phi31, align 1, !tbaa !2449
  %942 = load i64, i64* %RBP, align 8
  %943 = add i64 %942, -48
  %944 = add i64 %3523, 148
  store i64 %944, i64* %PC, align 8
  %945 = trunc i64 %928 to i32
  %946 = inttoptr i64 %943 to i32*
  %947 = load i32, i32* %946, align 4
  %948 = add i32 %947, %945
  %949 = zext i32 %948 to i64
  store i64 %949, i64* %RDX, align 8, !tbaa !2428
  %950 = icmp ult i32 %948, %945
  %951 = icmp ult i32 %948, %947
  %952 = or i1 %950, %951
  %953 = zext i1 %952 to i8
  store i8 %953, i8* %.pre-phi, align 1, !tbaa !2432
  %954 = and i32 %948, 255
  %955 = tail call i32 @llvm.ctpop.i32(i32 %954) #8
  %956 = trunc i32 %955 to i8
  %957 = and i8 %956, 1
  %958 = xor i8 %957, 1
  store i8 %958, i8* %.pre-phi23, align 1, !tbaa !2446
  %959 = xor i32 %947, %945
  %960 = xor i32 %959, %948
  %961 = lshr i32 %960, 4
  %962 = trunc i32 %961 to i8
  %963 = and i8 %962, 1
  store i8 %963, i8* %.pre-phi25, align 1, !tbaa !2450
  %964 = icmp eq i32 %948, 0
  %965 = zext i1 %964 to i8
  store i8 %965, i8* %.pre-phi27, align 1, !tbaa !2447
  %966 = lshr i32 %948, 31
  %967 = trunc i32 %966 to i8
  store i8 %967, i8* %.pre-phi29, align 1, !tbaa !2448
  %968 = lshr i32 %945, 31
  %969 = lshr i32 %947, 31
  %970 = xor i32 %966, %968
  %971 = xor i32 %966, %969
  %972 = add nuw nsw i32 %970, %971
  %973 = icmp eq i32 %972, 2
  %974 = zext i1 %973 to i8
  store i8 %974, i8* %.pre-phi31, align 1, !tbaa !2449
  %975 = sext i32 %948 to i64
  store i64 %975, i64* %RCX, align 8, !tbaa !2428
  %976 = load i64, i64* %RAX, align 8
  %977 = shl nsw i64 %975, 2
  %978 = add i64 %977, %976
  %979 = add i64 %3523, 156
  store i64 %979, i64* %PC, align 8
  %980 = load <2 x float>, <2 x float>* %5054, align 1
  %981 = load <2 x i32>, <2 x i32>* %5055, align 1
  %982 = inttoptr i64 %978 to float*
  %983 = load float, float* %982, align 4
  %984 = extractelement <2 x float> %980, i32 0
  %985 = fmul float %984, %983
  store float %985, float* %5047, align 1, !tbaa !2452
  %986 = bitcast <2 x float> %980 to <2 x i32>
  %987 = extractelement <2 x i32> %986, i32 1
  store i32 %987, i32* %5056, align 1, !tbaa !2452
  %988 = extractelement <2 x i32> %981, i32 0
  store i32 %988, i32* %5057, align 1, !tbaa !2452
  %989 = extractelement <2 x i32> %981, i32 1
  store i32 %989, i32* %5058, align 1, !tbaa !2452
  %990 = load <2 x float>, <2 x float>* %5059, align 1
  %991 = load <2 x i32>, <2 x i32>* %5060, align 1
  %992 = load <2 x float>, <2 x float>* %5061, align 1
  %993 = extractelement <2 x float> %990, i32 0
  %994 = extractelement <2 x float> %992, i32 0
  %995 = fadd float %993, %994
  store float %995, float* %5039, align 1, !tbaa !2452
  %996 = bitcast <2 x float> %990 to <2 x i32>
  %997 = extractelement <2 x i32> %996, i32 1
  store i32 %997, i32* %5062, align 1, !tbaa !2452
  %998 = extractelement <2 x i32> %991, i32 0
  store i32 %998, i32* %5063, align 1, !tbaa !2452
  %999 = extractelement <2 x i32> %991, i32 1
  store i32 %999, i32* %5064, align 1, !tbaa !2452
  %1000 = add i64 %942, -32
  %1001 = add i64 %3523, 164
  store i64 %1001, i64* %PC, align 8
  %1002 = inttoptr i64 %1000 to i64*
  %1003 = load i64, i64* %1002, align 8
  store i64 %1003, i64* %RAX, align 8, !tbaa !2428
  %1004 = add i64 %942, -44
  %1005 = add i64 %3523, 167
  store i64 %1005, i64* %PC, align 8
  %1006 = inttoptr i64 %1004 to i32*
  %1007 = load i32, i32* %1006, align 4
  %1008 = add i32 %1007, -12
  %1009 = zext i32 %1008 to i64
  store i64 %1009, i64* %RDX, align 8, !tbaa !2428
  %1010 = icmp ult i32 %1007, 12
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %.pre-phi, align 1, !tbaa !2432
  %1012 = and i32 %1008, 255
  %1013 = tail call i32 @llvm.ctpop.i32(i32 %1012) #8
  %1014 = trunc i32 %1013 to i8
  %1015 = and i8 %1014, 1
  %1016 = xor i8 %1015, 1
  store i8 %1016, i8* %.pre-phi23, align 1, !tbaa !2446
  %1017 = xor i32 %1007, %1008
  %1018 = lshr i32 %1017, 4
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  store i8 %1020, i8* %.pre-phi25, align 1, !tbaa !2450
  %1021 = icmp eq i32 %1008, 0
  %1022 = zext i1 %1021 to i8
  store i8 %1022, i8* %.pre-phi27, align 1, !tbaa !2447
  %1023 = lshr i32 %1008, 31
  %1024 = trunc i32 %1023 to i8
  store i8 %1024, i8* %.pre-phi29, align 1, !tbaa !2448
  %1025 = lshr i32 %1007, 31
  %1026 = xor i32 %1023, %1025
  %1027 = add nuw nsw i32 %1026, %1025
  %1028 = icmp eq i32 %1027, 2
  %1029 = zext i1 %1028 to i8
  store i8 %1029, i8* %.pre-phi31, align 1, !tbaa !2449
  %1030 = sext i32 %1008 to i64
  store i64 %1030, i64* %RCX, align 8, !tbaa !2428
  %1031 = shl nsw i64 %1030, 2
  %1032 = add i64 %1031, %1003
  %1033 = add i64 %3523, 178
  store i64 %1033, i64* %PC, align 8
  %1034 = inttoptr i64 %1032 to i32*
  %1035 = load i32, i32* %1034, align 4
  %1036 = bitcast %union.VectorReg* %8 to i32*
  store i32 %1035, i32* %1036, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %1037 = load i64, i64* %RBP, align 8
  %1038 = add i64 %1037, -40
  %1039 = add i64 %3523, 182
  store i64 %1039, i64* %PC, align 8
  %1040 = inttoptr i64 %1038 to i64*
  %1041 = load i64, i64* %1040, align 8
  store i64 %1041, i64* %RAX, align 8, !tbaa !2428
  %1042 = add i64 %1037, -24
  %1043 = add i64 %3523, 185
  store i64 %1043, i64* %PC, align 8
  %1044 = inttoptr i64 %1042 to i32*
  %1045 = load i32, i32* %1044, align 4
  %1046 = zext i32 %1045 to i64
  store i64 %1046, i64* %RDX, align 8, !tbaa !2428
  %1047 = add i64 %1037, -44
  %1048 = add i64 %3523, 188
  store i64 %1048, i64* %PC, align 8
  %1049 = inttoptr i64 %1047 to i32*
  %1050 = load i32, i32* %1049, align 4
  %1051 = add i32 %1050, -12
  %1052 = zext i32 %1051 to i64
  store i64 %1052, i64* %RSI, align 8, !tbaa !2428
  %1053 = sext i32 %1045 to i64
  %1054 = sext i32 %1051 to i64
  %1055 = mul nsw i64 %1054, %1053
  %1056 = trunc i64 %1055 to i32
  %1057 = and i64 %1055, 4294967295
  store i64 %1057, i64* %RDX, align 8, !tbaa !2428
  %1058 = shl i64 %1055, 32
  %1059 = ashr exact i64 %1058, 32
  %1060 = icmp ne i64 %1059, %1055
  %1061 = zext i1 %1060 to i8
  store i8 %1061, i8* %.pre-phi, align 1, !tbaa !2432
  %1062 = and i32 %1056, 255
  %1063 = tail call i32 @llvm.ctpop.i32(i32 %1062) #8
  %1064 = trunc i32 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = xor i8 %1065, 1
  store i8 %1066, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1067 = lshr i32 %1056, 31
  %1068 = trunc i32 %1067 to i8
  store i8 %1068, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1061, i8* %.pre-phi31, align 1, !tbaa !2449
  %1069 = add i64 %1037, -48
  %1070 = add i64 %3523, 197
  store i64 %1070, i64* %PC, align 8
  %1071 = trunc i64 %1055 to i32
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072, align 4
  %1074 = add i32 %1073, %1071
  %1075 = zext i32 %1074 to i64
  store i64 %1075, i64* %RDX, align 8, !tbaa !2428
  %1076 = icmp ult i32 %1074, %1071
  %1077 = icmp ult i32 %1074, %1073
  %1078 = or i1 %1076, %1077
  %1079 = zext i1 %1078 to i8
  store i8 %1079, i8* %.pre-phi, align 1, !tbaa !2432
  %1080 = and i32 %1074, 255
  %1081 = tail call i32 @llvm.ctpop.i32(i32 %1080) #8
  %1082 = trunc i32 %1081 to i8
  %1083 = and i8 %1082, 1
  %1084 = xor i8 %1083, 1
  store i8 %1084, i8* %.pre-phi23, align 1, !tbaa !2446
  %1085 = xor i32 %1073, %1071
  %1086 = xor i32 %1085, %1074
  %1087 = lshr i32 %1086, 4
  %1088 = trunc i32 %1087 to i8
  %1089 = and i8 %1088, 1
  store i8 %1089, i8* %.pre-phi25, align 1, !tbaa !2450
  %1090 = icmp eq i32 %1074, 0
  %1091 = zext i1 %1090 to i8
  store i8 %1091, i8* %.pre-phi27, align 1, !tbaa !2447
  %1092 = lshr i32 %1074, 31
  %1093 = trunc i32 %1092 to i8
  store i8 %1093, i8* %.pre-phi29, align 1, !tbaa !2448
  %1094 = lshr i32 %1071, 31
  %1095 = lshr i32 %1073, 31
  %1096 = xor i32 %1092, %1094
  %1097 = xor i32 %1092, %1095
  %1098 = add nuw nsw i32 %1096, %1097
  %1099 = icmp eq i32 %1098, 2
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %.pre-phi31, align 1, !tbaa !2449
  %1101 = sext i32 %1074 to i64
  store i64 %1101, i64* %RCX, align 8, !tbaa !2428
  %1102 = load i64, i64* %RAX, align 8
  %1103 = shl nsw i64 %1101, 2
  %1104 = add i64 %1103, %1102
  %1105 = add i64 %3523, 205
  store i64 %1105, i64* %PC, align 8
  %1106 = load <2 x float>, <2 x float>* %5054, align 1
  %1107 = load <2 x i32>, <2 x i32>* %5055, align 1
  %1108 = inttoptr i64 %1104 to float*
  %1109 = load float, float* %1108, align 4
  %1110 = extractelement <2 x float> %1106, i32 0
  %1111 = fmul float %1110, %1109
  store float %1111, float* %5047, align 1, !tbaa !2452
  %1112 = bitcast <2 x float> %1106 to <2 x i32>
  %1113 = extractelement <2 x i32> %1112, i32 1
  store i32 %1113, i32* %5056, align 1, !tbaa !2452
  %1114 = extractelement <2 x i32> %1107, i32 0
  store i32 %1114, i32* %5057, align 1, !tbaa !2452
  %1115 = extractelement <2 x i32> %1107, i32 1
  store i32 %1115, i32* %5058, align 1, !tbaa !2452
  %1116 = load <2 x float>, <2 x float>* %5059, align 1
  %1117 = load <2 x i32>, <2 x i32>* %5060, align 1
  %1118 = load <2 x float>, <2 x float>* %5061, align 1
  %1119 = extractelement <2 x float> %1116, i32 0
  %1120 = extractelement <2 x float> %1118, i32 0
  %1121 = fadd float %1119, %1120
  store float %1121, float* %5039, align 1, !tbaa !2452
  %1122 = bitcast <2 x float> %1116 to <2 x i32>
  %1123 = extractelement <2 x i32> %1122, i32 1
  store i32 %1123, i32* %5062, align 1, !tbaa !2452
  %1124 = extractelement <2 x i32> %1117, i32 0
  store i32 %1124, i32* %5063, align 1, !tbaa !2452
  %1125 = extractelement <2 x i32> %1117, i32 1
  store i32 %1125, i32* %5064, align 1, !tbaa !2452
  %1126 = load i64, i64* %RBP, align 8
  %1127 = add i64 %1126, -32
  %1128 = add i64 %3523, 213
  store i64 %1128, i64* %PC, align 8
  %1129 = inttoptr i64 %1127 to i64*
  %1130 = load i64, i64* %1129, align 8
  store i64 %1130, i64* %RAX, align 8, !tbaa !2428
  %1131 = add i64 %1126, -44
  %1132 = add i64 %3523, 216
  store i64 %1132, i64* %PC, align 8
  %1133 = inttoptr i64 %1131 to i32*
  %1134 = load i32, i32* %1133, align 4
  %1135 = add i32 %1134, -11
  %1136 = zext i32 %1135 to i64
  store i64 %1136, i64* %RDX, align 8, !tbaa !2428
  %1137 = icmp ult i32 %1134, 11
  %1138 = zext i1 %1137 to i8
  store i8 %1138, i8* %.pre-phi, align 1, !tbaa !2432
  %1139 = and i32 %1135, 255
  %1140 = tail call i32 @llvm.ctpop.i32(i32 %1139) #8
  %1141 = trunc i32 %1140 to i8
  %1142 = and i8 %1141, 1
  %1143 = xor i8 %1142, 1
  store i8 %1143, i8* %.pre-phi23, align 1, !tbaa !2446
  %1144 = xor i32 %1134, %1135
  %1145 = lshr i32 %1144, 4
  %1146 = trunc i32 %1145 to i8
  %1147 = and i8 %1146, 1
  store i8 %1147, i8* %.pre-phi25, align 1, !tbaa !2450
  %1148 = icmp eq i32 %1135, 0
  %1149 = zext i1 %1148 to i8
  store i8 %1149, i8* %.pre-phi27, align 1, !tbaa !2447
  %1150 = lshr i32 %1135, 31
  %1151 = trunc i32 %1150 to i8
  store i8 %1151, i8* %.pre-phi29, align 1, !tbaa !2448
  %1152 = lshr i32 %1134, 31
  %1153 = xor i32 %1150, %1152
  %1154 = add nuw nsw i32 %1153, %1152
  %1155 = icmp eq i32 %1154, 2
  %1156 = zext i1 %1155 to i8
  store i8 %1156, i8* %.pre-phi31, align 1, !tbaa !2449
  %1157 = sext i32 %1135 to i64
  store i64 %1157, i64* %RCX, align 8, !tbaa !2428
  %1158 = shl nsw i64 %1157, 2
  %1159 = add i64 %1158, %1130
  %1160 = add i64 %3523, 227
  store i64 %1160, i64* %PC, align 8
  %1161 = inttoptr i64 %1159 to i32*
  %1162 = load i32, i32* %1161, align 4
  %1163 = bitcast %union.VectorReg* %8 to i32*
  store i32 %1162, i32* %1163, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %1164 = add i64 %1126, -40
  %1165 = add i64 %3523, 231
  store i64 %1165, i64* %PC, align 8
  %1166 = inttoptr i64 %1164 to i64*
  %1167 = load i64, i64* %1166, align 8
  store i64 %1167, i64* %RAX, align 8, !tbaa !2428
  %1168 = add i64 %1126, -24
  %1169 = add i64 %3523, 234
  store i64 %1169, i64* %PC, align 8
  %1170 = inttoptr i64 %1168 to i32*
  %1171 = load i32, i32* %1170, align 4
  %1172 = zext i32 %1171 to i64
  store i64 %1172, i64* %RDX, align 8, !tbaa !2428
  %1173 = add i64 %3523, 237
  store i64 %1173, i64* %PC, align 8
  %1174 = load i32, i32* %1133, align 4
  %1175 = add i32 %1174, -11
  %1176 = zext i32 %1175 to i64
  store i64 %1176, i64* %RSI, align 8, !tbaa !2428
  %1177 = sext i32 %1171 to i64
  %1178 = sext i32 %1175 to i64
  %1179 = mul nsw i64 %1178, %1177
  %1180 = trunc i64 %1179 to i32
  %1181 = and i64 %1179, 4294967295
  store i64 %1181, i64* %RDX, align 8, !tbaa !2428
  %1182 = shl i64 %1179, 32
  %1183 = ashr exact i64 %1182, 32
  %1184 = icmp ne i64 %1183, %1179
  %1185 = zext i1 %1184 to i8
  store i8 %1185, i8* %.pre-phi, align 1, !tbaa !2432
  %1186 = and i32 %1180, 255
  %1187 = tail call i32 @llvm.ctpop.i32(i32 %1186) #8
  %1188 = trunc i32 %1187 to i8
  %1189 = and i8 %1188, 1
  %1190 = xor i8 %1189, 1
  store i8 %1190, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1191 = lshr i32 %1180, 31
  %1192 = trunc i32 %1191 to i8
  store i8 %1192, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1185, i8* %.pre-phi31, align 1, !tbaa !2449
  %1193 = load i64, i64* %RBP, align 8
  %1194 = add i64 %1193, -48
  %1195 = add i64 %3523, 246
  store i64 %1195, i64* %PC, align 8
  %1196 = trunc i64 %1179 to i32
  %1197 = inttoptr i64 %1194 to i32*
  %1198 = load i32, i32* %1197, align 4
  %1199 = add i32 %1198, %1196
  %1200 = zext i32 %1199 to i64
  store i64 %1200, i64* %RDX, align 8, !tbaa !2428
  %1201 = icmp ult i32 %1199, %1196
  %1202 = icmp ult i32 %1199, %1198
  %1203 = or i1 %1201, %1202
  %1204 = zext i1 %1203 to i8
  store i8 %1204, i8* %.pre-phi, align 1, !tbaa !2432
  %1205 = and i32 %1199, 255
  %1206 = tail call i32 @llvm.ctpop.i32(i32 %1205) #8
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  %1209 = xor i8 %1208, 1
  store i8 %1209, i8* %.pre-phi23, align 1, !tbaa !2446
  %1210 = xor i32 %1198, %1196
  %1211 = xor i32 %1210, %1199
  %1212 = lshr i32 %1211, 4
  %1213 = trunc i32 %1212 to i8
  %1214 = and i8 %1213, 1
  store i8 %1214, i8* %.pre-phi25, align 1, !tbaa !2450
  %1215 = icmp eq i32 %1199, 0
  %1216 = zext i1 %1215 to i8
  store i8 %1216, i8* %.pre-phi27, align 1, !tbaa !2447
  %1217 = lshr i32 %1199, 31
  %1218 = trunc i32 %1217 to i8
  store i8 %1218, i8* %.pre-phi29, align 1, !tbaa !2448
  %1219 = lshr i32 %1196, 31
  %1220 = lshr i32 %1198, 31
  %1221 = xor i32 %1217, %1219
  %1222 = xor i32 %1217, %1220
  %1223 = add nuw nsw i32 %1221, %1222
  %1224 = icmp eq i32 %1223, 2
  %1225 = zext i1 %1224 to i8
  store i8 %1225, i8* %.pre-phi31, align 1, !tbaa !2449
  %1226 = sext i32 %1199 to i64
  store i64 %1226, i64* %RCX, align 8, !tbaa !2428
  %1227 = load i64, i64* %RAX, align 8
  %1228 = shl nsw i64 %1226, 2
  %1229 = add i64 %1228, %1227
  %1230 = add i64 %3523, 254
  store i64 %1230, i64* %PC, align 8
  %1231 = load <2 x float>, <2 x float>* %5054, align 1
  %1232 = load <2 x i32>, <2 x i32>* %5055, align 1
  %1233 = inttoptr i64 %1229 to float*
  %1234 = load float, float* %1233, align 4
  %1235 = extractelement <2 x float> %1231, i32 0
  %1236 = fmul float %1235, %1234
  store float %1236, float* %5047, align 1, !tbaa !2452
  %1237 = bitcast <2 x float> %1231 to <2 x i32>
  %1238 = extractelement <2 x i32> %1237, i32 1
  store i32 %1238, i32* %5056, align 1, !tbaa !2452
  %1239 = extractelement <2 x i32> %1232, i32 0
  store i32 %1239, i32* %5057, align 1, !tbaa !2452
  %1240 = extractelement <2 x i32> %1232, i32 1
  store i32 %1240, i32* %5058, align 1, !tbaa !2452
  %1241 = load <2 x float>, <2 x float>* %5059, align 1
  %1242 = load <2 x i32>, <2 x i32>* %5060, align 1
  %1243 = load <2 x float>, <2 x float>* %5061, align 1
  %1244 = extractelement <2 x float> %1241, i32 0
  %1245 = extractelement <2 x float> %1243, i32 0
  %1246 = fadd float %1244, %1245
  store float %1246, float* %5039, align 1, !tbaa !2452
  %1247 = bitcast <2 x float> %1241 to <2 x i32>
  %1248 = extractelement <2 x i32> %1247, i32 1
  store i32 %1248, i32* %5062, align 1, !tbaa !2452
  %1249 = extractelement <2 x i32> %1242, i32 0
  store i32 %1249, i32* %5063, align 1, !tbaa !2452
  %1250 = extractelement <2 x i32> %1242, i32 1
  store i32 %1250, i32* %5064, align 1, !tbaa !2452
  %1251 = add i64 %1193, -32
  %1252 = add i64 %3523, 262
  store i64 %1252, i64* %PC, align 8
  %1253 = inttoptr i64 %1251 to i64*
  %1254 = load i64, i64* %1253, align 8
  store i64 %1254, i64* %RAX, align 8, !tbaa !2428
  %1255 = add i64 %1193, -44
  %1256 = add i64 %3523, 265
  store i64 %1256, i64* %PC, align 8
  %1257 = inttoptr i64 %1255 to i32*
  %1258 = load i32, i32* %1257, align 4
  %1259 = add i32 %1258, -10
  %1260 = zext i32 %1259 to i64
  store i64 %1260, i64* %RDX, align 8, !tbaa !2428
  %1261 = icmp ult i32 %1258, 10
  %1262 = zext i1 %1261 to i8
  store i8 %1262, i8* %.pre-phi, align 1, !tbaa !2432
  %1263 = and i32 %1259, 255
  %1264 = tail call i32 @llvm.ctpop.i32(i32 %1263) #8
  %1265 = trunc i32 %1264 to i8
  %1266 = and i8 %1265, 1
  %1267 = xor i8 %1266, 1
  store i8 %1267, i8* %.pre-phi23, align 1, !tbaa !2446
  %1268 = xor i32 %1258, %1259
  %1269 = lshr i32 %1268, 4
  %1270 = trunc i32 %1269 to i8
  %1271 = and i8 %1270, 1
  store i8 %1271, i8* %.pre-phi25, align 1, !tbaa !2450
  %1272 = icmp eq i32 %1259, 0
  %1273 = zext i1 %1272 to i8
  store i8 %1273, i8* %.pre-phi27, align 1, !tbaa !2447
  %1274 = lshr i32 %1259, 31
  %1275 = trunc i32 %1274 to i8
  store i8 %1275, i8* %.pre-phi29, align 1, !tbaa !2448
  %1276 = lshr i32 %1258, 31
  %1277 = xor i32 %1274, %1276
  %1278 = add nuw nsw i32 %1277, %1276
  %1279 = icmp eq i32 %1278, 2
  %1280 = zext i1 %1279 to i8
  store i8 %1280, i8* %.pre-phi31, align 1, !tbaa !2449
  %1281 = sext i32 %1259 to i64
  store i64 %1281, i64* %RCX, align 8, !tbaa !2428
  %1282 = shl nsw i64 %1281, 2
  %1283 = add i64 %1282, %1254
  %1284 = add i64 %3523, 276
  store i64 %1284, i64* %PC, align 8
  %1285 = inttoptr i64 %1283 to i32*
  %1286 = load i32, i32* %1285, align 4
  %1287 = bitcast %union.VectorReg* %8 to i32*
  store i32 %1286, i32* %1287, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %1288 = load i64, i64* %RBP, align 8
  %1289 = add i64 %1288, -40
  %1290 = add i64 %3523, 280
  store i64 %1290, i64* %PC, align 8
  %1291 = inttoptr i64 %1289 to i64*
  %1292 = load i64, i64* %1291, align 8
  store i64 %1292, i64* %RAX, align 8, !tbaa !2428
  %1293 = add i64 %1288, -24
  %1294 = add i64 %3523, 283
  store i64 %1294, i64* %PC, align 8
  %1295 = inttoptr i64 %1293 to i32*
  %1296 = load i32, i32* %1295, align 4
  %1297 = zext i32 %1296 to i64
  store i64 %1297, i64* %RDX, align 8, !tbaa !2428
  %1298 = add i64 %1288, -44
  %1299 = add i64 %3523, 286
  store i64 %1299, i64* %PC, align 8
  %1300 = inttoptr i64 %1298 to i32*
  %1301 = load i32, i32* %1300, align 4
  %1302 = add i32 %1301, -10
  %1303 = zext i32 %1302 to i64
  store i64 %1303, i64* %RSI, align 8, !tbaa !2428
  %1304 = sext i32 %1296 to i64
  %1305 = sext i32 %1302 to i64
  %1306 = mul nsw i64 %1305, %1304
  %1307 = trunc i64 %1306 to i32
  %1308 = and i64 %1306, 4294967295
  store i64 %1308, i64* %RDX, align 8, !tbaa !2428
  %1309 = shl i64 %1306, 32
  %1310 = ashr exact i64 %1309, 32
  %1311 = icmp ne i64 %1310, %1306
  %1312 = zext i1 %1311 to i8
  store i8 %1312, i8* %.pre-phi, align 1, !tbaa !2432
  %1313 = and i32 %1307, 255
  %1314 = tail call i32 @llvm.ctpop.i32(i32 %1313) #8
  %1315 = trunc i32 %1314 to i8
  %1316 = and i8 %1315, 1
  %1317 = xor i8 %1316, 1
  store i8 %1317, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1318 = lshr i32 %1307, 31
  %1319 = trunc i32 %1318 to i8
  store i8 %1319, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1312, i8* %.pre-phi31, align 1, !tbaa !2449
  %1320 = add i64 %1288, -48
  %1321 = add i64 %3523, 295
  store i64 %1321, i64* %PC, align 8
  %1322 = trunc i64 %1306 to i32
  %1323 = inttoptr i64 %1320 to i32*
  %1324 = load i32, i32* %1323, align 4
  %1325 = add i32 %1324, %1322
  %1326 = zext i32 %1325 to i64
  store i64 %1326, i64* %RDX, align 8, !tbaa !2428
  %1327 = icmp ult i32 %1325, %1322
  %1328 = icmp ult i32 %1325, %1324
  %1329 = or i1 %1327, %1328
  %1330 = zext i1 %1329 to i8
  store i8 %1330, i8* %.pre-phi, align 1, !tbaa !2432
  %1331 = and i32 %1325, 255
  %1332 = tail call i32 @llvm.ctpop.i32(i32 %1331) #8
  %1333 = trunc i32 %1332 to i8
  %1334 = and i8 %1333, 1
  %1335 = xor i8 %1334, 1
  store i8 %1335, i8* %.pre-phi23, align 1, !tbaa !2446
  %1336 = xor i32 %1324, %1322
  %1337 = xor i32 %1336, %1325
  %1338 = lshr i32 %1337, 4
  %1339 = trunc i32 %1338 to i8
  %1340 = and i8 %1339, 1
  store i8 %1340, i8* %.pre-phi25, align 1, !tbaa !2450
  %1341 = icmp eq i32 %1325, 0
  %1342 = zext i1 %1341 to i8
  store i8 %1342, i8* %.pre-phi27, align 1, !tbaa !2447
  %1343 = lshr i32 %1325, 31
  %1344 = trunc i32 %1343 to i8
  store i8 %1344, i8* %.pre-phi29, align 1, !tbaa !2448
  %1345 = lshr i32 %1322, 31
  %1346 = lshr i32 %1324, 31
  %1347 = xor i32 %1343, %1345
  %1348 = xor i32 %1343, %1346
  %1349 = add nuw nsw i32 %1347, %1348
  %1350 = icmp eq i32 %1349, 2
  %1351 = zext i1 %1350 to i8
  store i8 %1351, i8* %.pre-phi31, align 1, !tbaa !2449
  %1352 = sext i32 %1325 to i64
  store i64 %1352, i64* %RCX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RAX, align 8
  %1354 = shl nsw i64 %1352, 2
  %1355 = add i64 %1354, %1353
  %1356 = add i64 %3523, 303
  store i64 %1356, i64* %PC, align 8
  %1357 = load <2 x float>, <2 x float>* %5054, align 1
  %1358 = load <2 x i32>, <2 x i32>* %5055, align 1
  %1359 = inttoptr i64 %1355 to float*
  %1360 = load float, float* %1359, align 4
  %1361 = extractelement <2 x float> %1357, i32 0
  %1362 = fmul float %1361, %1360
  store float %1362, float* %5047, align 1, !tbaa !2452
  %1363 = bitcast <2 x float> %1357 to <2 x i32>
  %1364 = extractelement <2 x i32> %1363, i32 1
  store i32 %1364, i32* %5056, align 1, !tbaa !2452
  %1365 = extractelement <2 x i32> %1358, i32 0
  store i32 %1365, i32* %5057, align 1, !tbaa !2452
  %1366 = extractelement <2 x i32> %1358, i32 1
  store i32 %1366, i32* %5058, align 1, !tbaa !2452
  %1367 = load <2 x float>, <2 x float>* %5059, align 1
  %1368 = load <2 x i32>, <2 x i32>* %5060, align 1
  %1369 = load <2 x float>, <2 x float>* %5061, align 1
  %1370 = extractelement <2 x float> %1367, i32 0
  %1371 = extractelement <2 x float> %1369, i32 0
  %1372 = fadd float %1370, %1371
  store float %1372, float* %5039, align 1, !tbaa !2452
  %1373 = bitcast <2 x float> %1367 to <2 x i32>
  %1374 = extractelement <2 x i32> %1373, i32 1
  store i32 %1374, i32* %5062, align 1, !tbaa !2452
  %1375 = extractelement <2 x i32> %1368, i32 0
  store i32 %1375, i32* %5063, align 1, !tbaa !2452
  %1376 = extractelement <2 x i32> %1368, i32 1
  store i32 %1376, i32* %5064, align 1, !tbaa !2452
  %1377 = load i64, i64* %RBP, align 8
  %1378 = add i64 %1377, -32
  %1379 = add i64 %3523, 311
  store i64 %1379, i64* %PC, align 8
  %1380 = inttoptr i64 %1378 to i64*
  %1381 = load i64, i64* %1380, align 8
  store i64 %1381, i64* %RAX, align 8, !tbaa !2428
  %1382 = add i64 %1377, -44
  %1383 = add i64 %3523, 314
  store i64 %1383, i64* %PC, align 8
  %1384 = inttoptr i64 %1382 to i32*
  %1385 = load i32, i32* %1384, align 4
  %1386 = add i32 %1385, -9
  %1387 = zext i32 %1386 to i64
  store i64 %1387, i64* %RDX, align 8, !tbaa !2428
  %1388 = icmp ult i32 %1385, 9
  %1389 = zext i1 %1388 to i8
  store i8 %1389, i8* %.pre-phi, align 1, !tbaa !2432
  %1390 = and i32 %1386, 255
  %1391 = tail call i32 @llvm.ctpop.i32(i32 %1390) #8
  %1392 = trunc i32 %1391 to i8
  %1393 = and i8 %1392, 1
  %1394 = xor i8 %1393, 1
  store i8 %1394, i8* %.pre-phi23, align 1, !tbaa !2446
  %1395 = xor i32 %1385, %1386
  %1396 = lshr i32 %1395, 4
  %1397 = trunc i32 %1396 to i8
  %1398 = and i8 %1397, 1
  store i8 %1398, i8* %.pre-phi25, align 1, !tbaa !2450
  %1399 = icmp eq i32 %1386, 0
  %1400 = zext i1 %1399 to i8
  store i8 %1400, i8* %.pre-phi27, align 1, !tbaa !2447
  %1401 = lshr i32 %1386, 31
  %1402 = trunc i32 %1401 to i8
  store i8 %1402, i8* %.pre-phi29, align 1, !tbaa !2448
  %1403 = lshr i32 %1385, 31
  %1404 = xor i32 %1401, %1403
  %1405 = add nuw nsw i32 %1404, %1403
  %1406 = icmp eq i32 %1405, 2
  %1407 = zext i1 %1406 to i8
  store i8 %1407, i8* %.pre-phi31, align 1, !tbaa !2449
  %1408 = sext i32 %1386 to i64
  store i64 %1408, i64* %RCX, align 8, !tbaa !2428
  %1409 = shl nsw i64 %1408, 2
  %1410 = add i64 %1409, %1381
  %1411 = add i64 %3523, 325
  store i64 %1411, i64* %PC, align 8
  %1412 = inttoptr i64 %1410 to i32*
  %1413 = load i32, i32* %1412, align 4
  %1414 = bitcast %union.VectorReg* %8 to i32*
  store i32 %1413, i32* %1414, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %1415 = add i64 %1377, -40
  %1416 = add i64 %3523, 329
  store i64 %1416, i64* %PC, align 8
  %1417 = inttoptr i64 %1415 to i64*
  %1418 = load i64, i64* %1417, align 8
  store i64 %1418, i64* %RAX, align 8, !tbaa !2428
  %1419 = add i64 %1377, -24
  %1420 = add i64 %3523, 332
  store i64 %1420, i64* %PC, align 8
  %1421 = inttoptr i64 %1419 to i32*
  %1422 = load i32, i32* %1421, align 4
  %1423 = zext i32 %1422 to i64
  store i64 %1423, i64* %RDX, align 8, !tbaa !2428
  %1424 = add i64 %3523, 335
  store i64 %1424, i64* %PC, align 8
  %1425 = load i32, i32* %1384, align 4
  %1426 = add i32 %1425, -9
  %1427 = zext i32 %1426 to i64
  store i64 %1427, i64* %RSI, align 8, !tbaa !2428
  %1428 = sext i32 %1422 to i64
  %1429 = sext i32 %1426 to i64
  %1430 = mul nsw i64 %1429, %1428
  %1431 = trunc i64 %1430 to i32
  %1432 = and i64 %1430, 4294967295
  store i64 %1432, i64* %RDX, align 8, !tbaa !2428
  %1433 = shl i64 %1430, 32
  %1434 = ashr exact i64 %1433, 32
  %1435 = icmp ne i64 %1434, %1430
  %1436 = zext i1 %1435 to i8
  store i8 %1436, i8* %.pre-phi, align 1, !tbaa !2432
  %1437 = and i32 %1431, 255
  %1438 = tail call i32 @llvm.ctpop.i32(i32 %1437) #8
  %1439 = trunc i32 %1438 to i8
  %1440 = and i8 %1439, 1
  %1441 = xor i8 %1440, 1
  store i8 %1441, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1442 = lshr i32 %1431, 31
  %1443 = trunc i32 %1442 to i8
  store i8 %1443, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1436, i8* %.pre-phi31, align 1, !tbaa !2449
  %1444 = load i64, i64* %RBP, align 8
  %1445 = add i64 %1444, -48
  %1446 = add i64 %3523, 344
  store i64 %1446, i64* %PC, align 8
  %1447 = trunc i64 %1430 to i32
  %1448 = inttoptr i64 %1445 to i32*
  %1449 = load i32, i32* %1448, align 4
  %1450 = add i32 %1449, %1447
  %1451 = zext i32 %1450 to i64
  store i64 %1451, i64* %RDX, align 8, !tbaa !2428
  %1452 = icmp ult i32 %1450, %1447
  %1453 = icmp ult i32 %1450, %1449
  %1454 = or i1 %1452, %1453
  %1455 = zext i1 %1454 to i8
  store i8 %1455, i8* %.pre-phi, align 1, !tbaa !2432
  %1456 = and i32 %1450, 255
  %1457 = tail call i32 @llvm.ctpop.i32(i32 %1456) #8
  %1458 = trunc i32 %1457 to i8
  %1459 = and i8 %1458, 1
  %1460 = xor i8 %1459, 1
  store i8 %1460, i8* %.pre-phi23, align 1, !tbaa !2446
  %1461 = xor i32 %1449, %1447
  %1462 = xor i32 %1461, %1450
  %1463 = lshr i32 %1462, 4
  %1464 = trunc i32 %1463 to i8
  %1465 = and i8 %1464, 1
  store i8 %1465, i8* %.pre-phi25, align 1, !tbaa !2450
  %1466 = icmp eq i32 %1450, 0
  %1467 = zext i1 %1466 to i8
  store i8 %1467, i8* %.pre-phi27, align 1, !tbaa !2447
  %1468 = lshr i32 %1450, 31
  %1469 = trunc i32 %1468 to i8
  store i8 %1469, i8* %.pre-phi29, align 1, !tbaa !2448
  %1470 = lshr i32 %1447, 31
  %1471 = lshr i32 %1449, 31
  %1472 = xor i32 %1468, %1470
  %1473 = xor i32 %1468, %1471
  %1474 = add nuw nsw i32 %1472, %1473
  %1475 = icmp eq i32 %1474, 2
  %1476 = zext i1 %1475 to i8
  store i8 %1476, i8* %.pre-phi31, align 1, !tbaa !2449
  %1477 = sext i32 %1450 to i64
  store i64 %1477, i64* %RCX, align 8, !tbaa !2428
  %1478 = load i64, i64* %RAX, align 8
  %1479 = shl nsw i64 %1477, 2
  %1480 = add i64 %1479, %1478
  %1481 = add i64 %3523, 352
  store i64 %1481, i64* %PC, align 8
  %1482 = load <2 x float>, <2 x float>* %5054, align 1
  %1483 = load <2 x i32>, <2 x i32>* %5055, align 1
  %1484 = inttoptr i64 %1480 to float*
  %1485 = load float, float* %1484, align 4
  %1486 = extractelement <2 x float> %1482, i32 0
  %1487 = fmul float %1486, %1485
  store float %1487, float* %5047, align 1, !tbaa !2452
  %1488 = bitcast <2 x float> %1482 to <2 x i32>
  %1489 = extractelement <2 x i32> %1488, i32 1
  store i32 %1489, i32* %5056, align 1, !tbaa !2452
  %1490 = extractelement <2 x i32> %1483, i32 0
  store i32 %1490, i32* %5057, align 1, !tbaa !2452
  %1491 = extractelement <2 x i32> %1483, i32 1
  store i32 %1491, i32* %5058, align 1, !tbaa !2452
  %1492 = load <2 x float>, <2 x float>* %5059, align 1
  %1493 = load <2 x i32>, <2 x i32>* %5060, align 1
  %1494 = load <2 x float>, <2 x float>* %5061, align 1
  %1495 = extractelement <2 x float> %1492, i32 0
  %1496 = extractelement <2 x float> %1494, i32 0
  %1497 = fadd float %1495, %1496
  store float %1497, float* %5039, align 1, !tbaa !2452
  %1498 = bitcast <2 x float> %1492 to <2 x i32>
  %1499 = extractelement <2 x i32> %1498, i32 1
  store i32 %1499, i32* %5062, align 1, !tbaa !2452
  %1500 = extractelement <2 x i32> %1493, i32 0
  store i32 %1500, i32* %5063, align 1, !tbaa !2452
  %1501 = extractelement <2 x i32> %1493, i32 1
  store i32 %1501, i32* %5064, align 1, !tbaa !2452
  %1502 = add i64 %1444, -32
  %1503 = add i64 %3523, 360
  store i64 %1503, i64* %PC, align 8
  %1504 = inttoptr i64 %1502 to i64*
  %1505 = load i64, i64* %1504, align 8
  store i64 %1505, i64* %RAX, align 8, !tbaa !2428
  %1506 = add i64 %1444, -44
  %1507 = add i64 %3523, 363
  store i64 %1507, i64* %PC, align 8
  %1508 = inttoptr i64 %1506 to i32*
  %1509 = load i32, i32* %1508, align 4
  %1510 = add i32 %1509, -8
  %1511 = zext i32 %1510 to i64
  store i64 %1511, i64* %RDX, align 8, !tbaa !2428
  %1512 = icmp ult i32 %1509, 8
  %1513 = zext i1 %1512 to i8
  store i8 %1513, i8* %.pre-phi, align 1, !tbaa !2432
  %1514 = and i32 %1510, 255
  %1515 = tail call i32 @llvm.ctpop.i32(i32 %1514) #8
  %1516 = trunc i32 %1515 to i8
  %1517 = and i8 %1516, 1
  %1518 = xor i8 %1517, 1
  store i8 %1518, i8* %.pre-phi23, align 1, !tbaa !2446
  %1519 = xor i32 %1509, %1510
  %1520 = lshr i32 %1519, 4
  %1521 = trunc i32 %1520 to i8
  %1522 = and i8 %1521, 1
  store i8 %1522, i8* %.pre-phi25, align 1, !tbaa !2450
  %1523 = icmp eq i32 %1510, 0
  %1524 = zext i1 %1523 to i8
  store i8 %1524, i8* %.pre-phi27, align 1, !tbaa !2447
  %1525 = lshr i32 %1510, 31
  %1526 = trunc i32 %1525 to i8
  store i8 %1526, i8* %.pre-phi29, align 1, !tbaa !2448
  %1527 = lshr i32 %1509, 31
  %1528 = xor i32 %1525, %1527
  %1529 = add nuw nsw i32 %1528, %1527
  %1530 = icmp eq i32 %1529, 2
  %1531 = zext i1 %1530 to i8
  store i8 %1531, i8* %.pre-phi31, align 1, !tbaa !2449
  %1532 = sext i32 %1510 to i64
  store i64 %1532, i64* %RCX, align 8, !tbaa !2428
  %1533 = shl nsw i64 %1532, 2
  %1534 = add i64 %1533, %1505
  %1535 = add i64 %3523, 374
  store i64 %1535, i64* %PC, align 8
  %1536 = inttoptr i64 %1534 to i32*
  %1537 = load i32, i32* %1536, align 4
  %1538 = bitcast %union.VectorReg* %8 to i32*
  store i32 %1537, i32* %1538, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %1539 = load i64, i64* %RBP, align 8
  %1540 = add i64 %1539, -40
  %1541 = add i64 %3523, 378
  store i64 %1541, i64* %PC, align 8
  %1542 = inttoptr i64 %1540 to i64*
  %1543 = load i64, i64* %1542, align 8
  store i64 %1543, i64* %RAX, align 8, !tbaa !2428
  %1544 = add i64 %1539, -24
  %1545 = add i64 %3523, 381
  store i64 %1545, i64* %PC, align 8
  %1546 = inttoptr i64 %1544 to i32*
  %1547 = load i32, i32* %1546, align 4
  %1548 = zext i32 %1547 to i64
  store i64 %1548, i64* %RDX, align 8, !tbaa !2428
  %1549 = add i64 %1539, -44
  %1550 = add i64 %3523, 384
  store i64 %1550, i64* %PC, align 8
  %1551 = inttoptr i64 %1549 to i32*
  %1552 = load i32, i32* %1551, align 4
  %1553 = add i32 %1552, -8
  %1554 = zext i32 %1553 to i64
  store i64 %1554, i64* %RSI, align 8, !tbaa !2428
  %1555 = sext i32 %1547 to i64
  %1556 = sext i32 %1553 to i64
  %1557 = mul nsw i64 %1556, %1555
  %1558 = trunc i64 %1557 to i32
  %1559 = and i64 %1557, 4294967295
  store i64 %1559, i64* %RDX, align 8, !tbaa !2428
  %1560 = shl i64 %1557, 32
  %1561 = ashr exact i64 %1560, 32
  %1562 = icmp ne i64 %1561, %1557
  %1563 = zext i1 %1562 to i8
  store i8 %1563, i8* %.pre-phi, align 1, !tbaa !2432
  %1564 = and i32 %1558, 255
  %1565 = tail call i32 @llvm.ctpop.i32(i32 %1564) #8
  %1566 = trunc i32 %1565 to i8
  %1567 = and i8 %1566, 1
  %1568 = xor i8 %1567, 1
  store i8 %1568, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1569 = lshr i32 %1558, 31
  %1570 = trunc i32 %1569 to i8
  store i8 %1570, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1563, i8* %.pre-phi31, align 1, !tbaa !2449
  %1571 = add i64 %1539, -48
  %1572 = add i64 %3523, 393
  store i64 %1572, i64* %PC, align 8
  %1573 = trunc i64 %1557 to i32
  %1574 = inttoptr i64 %1571 to i32*
  %1575 = load i32, i32* %1574, align 4
  %1576 = add i32 %1575, %1573
  %1577 = zext i32 %1576 to i64
  store i64 %1577, i64* %RDX, align 8, !tbaa !2428
  %1578 = icmp ult i32 %1576, %1573
  %1579 = icmp ult i32 %1576, %1575
  %1580 = or i1 %1578, %1579
  %1581 = zext i1 %1580 to i8
  store i8 %1581, i8* %.pre-phi, align 1, !tbaa !2432
  %1582 = and i32 %1576, 255
  %1583 = tail call i32 @llvm.ctpop.i32(i32 %1582) #8
  %1584 = trunc i32 %1583 to i8
  %1585 = and i8 %1584, 1
  %1586 = xor i8 %1585, 1
  store i8 %1586, i8* %.pre-phi23, align 1, !tbaa !2446
  %1587 = xor i32 %1575, %1573
  %1588 = xor i32 %1587, %1576
  %1589 = lshr i32 %1588, 4
  %1590 = trunc i32 %1589 to i8
  %1591 = and i8 %1590, 1
  store i8 %1591, i8* %.pre-phi25, align 1, !tbaa !2450
  %1592 = icmp eq i32 %1576, 0
  %1593 = zext i1 %1592 to i8
  store i8 %1593, i8* %.pre-phi27, align 1, !tbaa !2447
  %1594 = lshr i32 %1576, 31
  %1595 = trunc i32 %1594 to i8
  store i8 %1595, i8* %.pre-phi29, align 1, !tbaa !2448
  %1596 = lshr i32 %1573, 31
  %1597 = lshr i32 %1575, 31
  %1598 = xor i32 %1594, %1596
  %1599 = xor i32 %1594, %1597
  %1600 = add nuw nsw i32 %1598, %1599
  %1601 = icmp eq i32 %1600, 2
  %1602 = zext i1 %1601 to i8
  store i8 %1602, i8* %.pre-phi31, align 1, !tbaa !2449
  %1603 = sext i32 %1576 to i64
  store i64 %1603, i64* %RCX, align 8, !tbaa !2428
  %1604 = load i64, i64* %RAX, align 8
  %1605 = shl nsw i64 %1603, 2
  %1606 = add i64 %1605, %1604
  %1607 = add i64 %3523, 401
  store i64 %1607, i64* %PC, align 8
  %1608 = load <2 x float>, <2 x float>* %5054, align 1
  %1609 = load <2 x i32>, <2 x i32>* %5055, align 1
  %1610 = inttoptr i64 %1606 to float*
  %1611 = load float, float* %1610, align 4
  %1612 = extractelement <2 x float> %1608, i32 0
  %1613 = fmul float %1612, %1611
  store float %1613, float* %5047, align 1, !tbaa !2452
  %1614 = bitcast <2 x float> %1608 to <2 x i32>
  %1615 = extractelement <2 x i32> %1614, i32 1
  store i32 %1615, i32* %5056, align 1, !tbaa !2452
  %1616 = extractelement <2 x i32> %1609, i32 0
  store i32 %1616, i32* %5057, align 1, !tbaa !2452
  %1617 = extractelement <2 x i32> %1609, i32 1
  store i32 %1617, i32* %5058, align 1, !tbaa !2452
  %1618 = load <2 x float>, <2 x float>* %5059, align 1
  %1619 = load <2 x i32>, <2 x i32>* %5060, align 1
  %1620 = load <2 x float>, <2 x float>* %5061, align 1
  %1621 = extractelement <2 x float> %1618, i32 0
  %1622 = extractelement <2 x float> %1620, i32 0
  %1623 = fadd float %1621, %1622
  store float %1623, float* %5039, align 1, !tbaa !2452
  %1624 = bitcast <2 x float> %1618 to <2 x i32>
  %1625 = extractelement <2 x i32> %1624, i32 1
  store i32 %1625, i32* %5062, align 1, !tbaa !2452
  %1626 = extractelement <2 x i32> %1619, i32 0
  store i32 %1626, i32* %5063, align 1, !tbaa !2452
  %1627 = extractelement <2 x i32> %1619, i32 1
  store i32 %1627, i32* %5064, align 1, !tbaa !2452
  %1628 = load i64, i64* %RBP, align 8
  %1629 = add i64 %1628, -32
  %1630 = add i64 %3523, 409
  store i64 %1630, i64* %PC, align 8
  %1631 = inttoptr i64 %1629 to i64*
  %1632 = load i64, i64* %1631, align 8
  store i64 %1632, i64* %RAX, align 8, !tbaa !2428
  %1633 = add i64 %1628, -44
  %1634 = add i64 %3523, 412
  store i64 %1634, i64* %PC, align 8
  %1635 = inttoptr i64 %1633 to i32*
  %1636 = load i32, i32* %1635, align 4
  %1637 = add i32 %1636, -7
  %1638 = zext i32 %1637 to i64
  store i64 %1638, i64* %RDX, align 8, !tbaa !2428
  %1639 = icmp ult i32 %1636, 7
  %1640 = zext i1 %1639 to i8
  store i8 %1640, i8* %.pre-phi, align 1, !tbaa !2432
  %1641 = and i32 %1637, 255
  %1642 = tail call i32 @llvm.ctpop.i32(i32 %1641) #8
  %1643 = trunc i32 %1642 to i8
  %1644 = and i8 %1643, 1
  %1645 = xor i8 %1644, 1
  store i8 %1645, i8* %.pre-phi23, align 1, !tbaa !2446
  %1646 = xor i32 %1636, %1637
  %1647 = lshr i32 %1646, 4
  %1648 = trunc i32 %1647 to i8
  %1649 = and i8 %1648, 1
  store i8 %1649, i8* %.pre-phi25, align 1, !tbaa !2450
  %1650 = icmp eq i32 %1637, 0
  %1651 = zext i1 %1650 to i8
  store i8 %1651, i8* %.pre-phi27, align 1, !tbaa !2447
  %1652 = lshr i32 %1637, 31
  %1653 = trunc i32 %1652 to i8
  store i8 %1653, i8* %.pre-phi29, align 1, !tbaa !2448
  %1654 = lshr i32 %1636, 31
  %1655 = xor i32 %1652, %1654
  %1656 = add nuw nsw i32 %1655, %1654
  %1657 = icmp eq i32 %1656, 2
  %1658 = zext i1 %1657 to i8
  store i8 %1658, i8* %.pre-phi31, align 1, !tbaa !2449
  %1659 = sext i32 %1637 to i64
  store i64 %1659, i64* %RCX, align 8, !tbaa !2428
  %1660 = shl nsw i64 %1659, 2
  %1661 = add i64 %1660, %1632
  %1662 = add i64 %3523, 423
  store i64 %1662, i64* %PC, align 8
  %1663 = inttoptr i64 %1661 to i32*
  %1664 = load i32, i32* %1663, align 4
  %1665 = bitcast %union.VectorReg* %8 to i32*
  store i32 %1664, i32* %1665, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %1666 = add i64 %1628, -40
  %1667 = add i64 %3523, 427
  store i64 %1667, i64* %PC, align 8
  %1668 = inttoptr i64 %1666 to i64*
  %1669 = load i64, i64* %1668, align 8
  store i64 %1669, i64* %RAX, align 8, !tbaa !2428
  %1670 = add i64 %1628, -24
  %1671 = add i64 %3523, 430
  store i64 %1671, i64* %PC, align 8
  %1672 = inttoptr i64 %1670 to i32*
  %1673 = load i32, i32* %1672, align 4
  %1674 = zext i32 %1673 to i64
  store i64 %1674, i64* %RDX, align 8, !tbaa !2428
  %1675 = add i64 %3523, 433
  store i64 %1675, i64* %PC, align 8
  %1676 = load i32, i32* %1635, align 4
  %1677 = add i32 %1676, -7
  %1678 = zext i32 %1677 to i64
  store i64 %1678, i64* %RSI, align 8, !tbaa !2428
  %1679 = sext i32 %1673 to i64
  %1680 = sext i32 %1677 to i64
  %1681 = mul nsw i64 %1680, %1679
  %1682 = trunc i64 %1681 to i32
  %1683 = and i64 %1681, 4294967295
  store i64 %1683, i64* %RDX, align 8, !tbaa !2428
  %1684 = shl i64 %1681, 32
  %1685 = ashr exact i64 %1684, 32
  %1686 = icmp ne i64 %1685, %1681
  %1687 = zext i1 %1686 to i8
  store i8 %1687, i8* %.pre-phi, align 1, !tbaa !2432
  %1688 = and i32 %1682, 255
  %1689 = tail call i32 @llvm.ctpop.i32(i32 %1688) #8
  %1690 = trunc i32 %1689 to i8
  %1691 = and i8 %1690, 1
  %1692 = xor i8 %1691, 1
  store i8 %1692, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1693 = lshr i32 %1682, 31
  %1694 = trunc i32 %1693 to i8
  store i8 %1694, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1687, i8* %.pre-phi31, align 1, !tbaa !2449
  %1695 = load i64, i64* %RBP, align 8
  %1696 = add i64 %1695, -48
  %1697 = add i64 %3523, 442
  store i64 %1697, i64* %PC, align 8
  %1698 = trunc i64 %1681 to i32
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699, align 4
  %1701 = add i32 %1700, %1698
  %1702 = zext i32 %1701 to i64
  store i64 %1702, i64* %RDX, align 8, !tbaa !2428
  %1703 = icmp ult i32 %1701, %1698
  %1704 = icmp ult i32 %1701, %1700
  %1705 = or i1 %1703, %1704
  %1706 = zext i1 %1705 to i8
  store i8 %1706, i8* %.pre-phi, align 1, !tbaa !2432
  %1707 = and i32 %1701, 255
  %1708 = tail call i32 @llvm.ctpop.i32(i32 %1707) #8
  %1709 = trunc i32 %1708 to i8
  %1710 = and i8 %1709, 1
  %1711 = xor i8 %1710, 1
  store i8 %1711, i8* %.pre-phi23, align 1, !tbaa !2446
  %1712 = xor i32 %1700, %1698
  %1713 = xor i32 %1712, %1701
  %1714 = lshr i32 %1713, 4
  %1715 = trunc i32 %1714 to i8
  %1716 = and i8 %1715, 1
  store i8 %1716, i8* %.pre-phi25, align 1, !tbaa !2450
  %1717 = icmp eq i32 %1701, 0
  %1718 = zext i1 %1717 to i8
  store i8 %1718, i8* %.pre-phi27, align 1, !tbaa !2447
  %1719 = lshr i32 %1701, 31
  %1720 = trunc i32 %1719 to i8
  store i8 %1720, i8* %.pre-phi29, align 1, !tbaa !2448
  %1721 = lshr i32 %1698, 31
  %1722 = lshr i32 %1700, 31
  %1723 = xor i32 %1719, %1721
  %1724 = xor i32 %1719, %1722
  %1725 = add nuw nsw i32 %1723, %1724
  %1726 = icmp eq i32 %1725, 2
  %1727 = zext i1 %1726 to i8
  store i8 %1727, i8* %.pre-phi31, align 1, !tbaa !2449
  %1728 = sext i32 %1701 to i64
  store i64 %1728, i64* %RCX, align 8, !tbaa !2428
  %1729 = load i64, i64* %RAX, align 8
  %1730 = shl nsw i64 %1728, 2
  %1731 = add i64 %1730, %1729
  %1732 = add i64 %3523, 450
  store i64 %1732, i64* %PC, align 8
  %1733 = load <2 x float>, <2 x float>* %5054, align 1
  %1734 = load <2 x i32>, <2 x i32>* %5055, align 1
  %1735 = inttoptr i64 %1731 to float*
  %1736 = load float, float* %1735, align 4
  %1737 = extractelement <2 x float> %1733, i32 0
  %1738 = fmul float %1737, %1736
  store float %1738, float* %5047, align 1, !tbaa !2452
  %1739 = bitcast <2 x float> %1733 to <2 x i32>
  %1740 = extractelement <2 x i32> %1739, i32 1
  store i32 %1740, i32* %5056, align 1, !tbaa !2452
  %1741 = extractelement <2 x i32> %1734, i32 0
  store i32 %1741, i32* %5057, align 1, !tbaa !2452
  %1742 = extractelement <2 x i32> %1734, i32 1
  store i32 %1742, i32* %5058, align 1, !tbaa !2452
  %1743 = load <2 x float>, <2 x float>* %5059, align 1
  %1744 = load <2 x i32>, <2 x i32>* %5060, align 1
  %1745 = load <2 x float>, <2 x float>* %5061, align 1
  %1746 = extractelement <2 x float> %1743, i32 0
  %1747 = extractelement <2 x float> %1745, i32 0
  %1748 = fadd float %1746, %1747
  store float %1748, float* %5039, align 1, !tbaa !2452
  %1749 = bitcast <2 x float> %1743 to <2 x i32>
  %1750 = extractelement <2 x i32> %1749, i32 1
  store i32 %1750, i32* %5062, align 1, !tbaa !2452
  %1751 = extractelement <2 x i32> %1744, i32 0
  store i32 %1751, i32* %5063, align 1, !tbaa !2452
  %1752 = extractelement <2 x i32> %1744, i32 1
  store i32 %1752, i32* %5064, align 1, !tbaa !2452
  %1753 = add i64 %1695, -32
  %1754 = add i64 %3523, 458
  store i64 %1754, i64* %PC, align 8
  %1755 = inttoptr i64 %1753 to i64*
  %1756 = load i64, i64* %1755, align 8
  store i64 %1756, i64* %RAX, align 8, !tbaa !2428
  %1757 = add i64 %1695, -44
  %1758 = add i64 %3523, 461
  store i64 %1758, i64* %PC, align 8
  %1759 = inttoptr i64 %1757 to i32*
  %1760 = load i32, i32* %1759, align 4
  %1761 = add i32 %1760, -6
  %1762 = zext i32 %1761 to i64
  store i64 %1762, i64* %RDX, align 8, !tbaa !2428
  %1763 = icmp ult i32 %1760, 6
  %1764 = zext i1 %1763 to i8
  store i8 %1764, i8* %.pre-phi, align 1, !tbaa !2432
  %1765 = and i32 %1761, 255
  %1766 = tail call i32 @llvm.ctpop.i32(i32 %1765) #8
  %1767 = trunc i32 %1766 to i8
  %1768 = and i8 %1767, 1
  %1769 = xor i8 %1768, 1
  store i8 %1769, i8* %.pre-phi23, align 1, !tbaa !2446
  %1770 = xor i32 %1760, %1761
  %1771 = lshr i32 %1770, 4
  %1772 = trunc i32 %1771 to i8
  %1773 = and i8 %1772, 1
  store i8 %1773, i8* %.pre-phi25, align 1, !tbaa !2450
  %1774 = icmp eq i32 %1761, 0
  %1775 = zext i1 %1774 to i8
  store i8 %1775, i8* %.pre-phi27, align 1, !tbaa !2447
  %1776 = lshr i32 %1761, 31
  %1777 = trunc i32 %1776 to i8
  store i8 %1777, i8* %.pre-phi29, align 1, !tbaa !2448
  %1778 = lshr i32 %1760, 31
  %1779 = xor i32 %1776, %1778
  %1780 = add nuw nsw i32 %1779, %1778
  %1781 = icmp eq i32 %1780, 2
  %1782 = zext i1 %1781 to i8
  store i8 %1782, i8* %.pre-phi31, align 1, !tbaa !2449
  %1783 = sext i32 %1761 to i64
  store i64 %1783, i64* %RCX, align 8, !tbaa !2428
  %1784 = shl nsw i64 %1783, 2
  %1785 = add i64 %1784, %1756
  %1786 = add i64 %3523, 472
  store i64 %1786, i64* %PC, align 8
  %1787 = inttoptr i64 %1785 to i32*
  %1788 = load i32, i32* %1787, align 4
  %1789 = bitcast %union.VectorReg* %8 to i32*
  store i32 %1788, i32* %1789, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %1790 = load i64, i64* %RBP, align 8
  %1791 = add i64 %1790, -40
  %1792 = add i64 %3523, 476
  store i64 %1792, i64* %PC, align 8
  %1793 = inttoptr i64 %1791 to i64*
  %1794 = load i64, i64* %1793, align 8
  store i64 %1794, i64* %RAX, align 8, !tbaa !2428
  %1795 = add i64 %1790, -24
  %1796 = add i64 %3523, 479
  store i64 %1796, i64* %PC, align 8
  %1797 = inttoptr i64 %1795 to i32*
  %1798 = load i32, i32* %1797, align 4
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RDX, align 8, !tbaa !2428
  %1800 = add i64 %1790, -44
  %1801 = add i64 %3523, 482
  store i64 %1801, i64* %PC, align 8
  %1802 = inttoptr i64 %1800 to i32*
  %1803 = load i32, i32* %1802, align 4
  %1804 = add i32 %1803, -6
  %1805 = zext i32 %1804 to i64
  store i64 %1805, i64* %RSI, align 8, !tbaa !2428
  %1806 = sext i32 %1798 to i64
  %1807 = sext i32 %1804 to i64
  %1808 = mul nsw i64 %1807, %1806
  %1809 = trunc i64 %1808 to i32
  %1810 = and i64 %1808, 4294967295
  store i64 %1810, i64* %RDX, align 8, !tbaa !2428
  %1811 = shl i64 %1808, 32
  %1812 = ashr exact i64 %1811, 32
  %1813 = icmp ne i64 %1812, %1808
  %1814 = zext i1 %1813 to i8
  store i8 %1814, i8* %.pre-phi, align 1, !tbaa !2432
  %1815 = and i32 %1809, 255
  %1816 = tail call i32 @llvm.ctpop.i32(i32 %1815) #8
  %1817 = trunc i32 %1816 to i8
  %1818 = and i8 %1817, 1
  %1819 = xor i8 %1818, 1
  store i8 %1819, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1820 = lshr i32 %1809, 31
  %1821 = trunc i32 %1820 to i8
  store i8 %1821, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1814, i8* %.pre-phi31, align 1, !tbaa !2449
  %1822 = add i64 %1790, -48
  %1823 = add i64 %3523, 491
  store i64 %1823, i64* %PC, align 8
  %1824 = trunc i64 %1808 to i32
  %1825 = inttoptr i64 %1822 to i32*
  %1826 = load i32, i32* %1825, align 4
  %1827 = add i32 %1826, %1824
  %1828 = zext i32 %1827 to i64
  store i64 %1828, i64* %RDX, align 8, !tbaa !2428
  %1829 = icmp ult i32 %1827, %1824
  %1830 = icmp ult i32 %1827, %1826
  %1831 = or i1 %1829, %1830
  %1832 = zext i1 %1831 to i8
  store i8 %1832, i8* %.pre-phi, align 1, !tbaa !2432
  %1833 = and i32 %1827, 255
  %1834 = tail call i32 @llvm.ctpop.i32(i32 %1833) #8
  %1835 = trunc i32 %1834 to i8
  %1836 = and i8 %1835, 1
  %1837 = xor i8 %1836, 1
  store i8 %1837, i8* %.pre-phi23, align 1, !tbaa !2446
  %1838 = xor i32 %1826, %1824
  %1839 = xor i32 %1838, %1827
  %1840 = lshr i32 %1839, 4
  %1841 = trunc i32 %1840 to i8
  %1842 = and i8 %1841, 1
  store i8 %1842, i8* %.pre-phi25, align 1, !tbaa !2450
  %1843 = icmp eq i32 %1827, 0
  %1844 = zext i1 %1843 to i8
  store i8 %1844, i8* %.pre-phi27, align 1, !tbaa !2447
  %1845 = lshr i32 %1827, 31
  %1846 = trunc i32 %1845 to i8
  store i8 %1846, i8* %.pre-phi29, align 1, !tbaa !2448
  %1847 = lshr i32 %1824, 31
  %1848 = lshr i32 %1826, 31
  %1849 = xor i32 %1845, %1847
  %1850 = xor i32 %1845, %1848
  %1851 = add nuw nsw i32 %1849, %1850
  %1852 = icmp eq i32 %1851, 2
  %1853 = zext i1 %1852 to i8
  store i8 %1853, i8* %.pre-phi31, align 1, !tbaa !2449
  %1854 = sext i32 %1827 to i64
  store i64 %1854, i64* %RCX, align 8, !tbaa !2428
  %1855 = load i64, i64* %RAX, align 8
  %1856 = shl nsw i64 %1854, 2
  %1857 = add i64 %1856, %1855
  %1858 = add i64 %3523, 499
  store i64 %1858, i64* %PC, align 8
  %1859 = load <2 x float>, <2 x float>* %5054, align 1
  %1860 = load <2 x i32>, <2 x i32>* %5055, align 1
  %1861 = inttoptr i64 %1857 to float*
  %1862 = load float, float* %1861, align 4
  %1863 = extractelement <2 x float> %1859, i32 0
  %1864 = fmul float %1863, %1862
  store float %1864, float* %5047, align 1, !tbaa !2452
  %1865 = bitcast <2 x float> %1859 to <2 x i32>
  %1866 = extractelement <2 x i32> %1865, i32 1
  store i32 %1866, i32* %5056, align 1, !tbaa !2452
  %1867 = extractelement <2 x i32> %1860, i32 0
  store i32 %1867, i32* %5057, align 1, !tbaa !2452
  %1868 = extractelement <2 x i32> %1860, i32 1
  store i32 %1868, i32* %5058, align 1, !tbaa !2452
  %1869 = load <2 x float>, <2 x float>* %5059, align 1
  %1870 = load <2 x i32>, <2 x i32>* %5060, align 1
  %1871 = load <2 x float>, <2 x float>* %5061, align 1
  %1872 = extractelement <2 x float> %1869, i32 0
  %1873 = extractelement <2 x float> %1871, i32 0
  %1874 = fadd float %1872, %1873
  store float %1874, float* %5039, align 1, !tbaa !2452
  %1875 = bitcast <2 x float> %1869 to <2 x i32>
  %1876 = extractelement <2 x i32> %1875, i32 1
  store i32 %1876, i32* %5062, align 1, !tbaa !2452
  %1877 = extractelement <2 x i32> %1870, i32 0
  store i32 %1877, i32* %5063, align 1, !tbaa !2452
  %1878 = extractelement <2 x i32> %1870, i32 1
  store i32 %1878, i32* %5064, align 1, !tbaa !2452
  %1879 = load i64, i64* %RBP, align 8
  %1880 = add i64 %1879, -32
  %1881 = add i64 %3523, 507
  store i64 %1881, i64* %PC, align 8
  %1882 = inttoptr i64 %1880 to i64*
  %1883 = load i64, i64* %1882, align 8
  store i64 %1883, i64* %RAX, align 8, !tbaa !2428
  %1884 = add i64 %1879, -44
  %1885 = add i64 %3523, 510
  store i64 %1885, i64* %PC, align 8
  %1886 = inttoptr i64 %1884 to i32*
  %1887 = load i32, i32* %1886, align 4
  %1888 = add i32 %1887, -5
  %1889 = zext i32 %1888 to i64
  store i64 %1889, i64* %RDX, align 8, !tbaa !2428
  %1890 = icmp ult i32 %1887, 5
  %1891 = zext i1 %1890 to i8
  store i8 %1891, i8* %.pre-phi, align 1, !tbaa !2432
  %1892 = and i32 %1888, 255
  %1893 = tail call i32 @llvm.ctpop.i32(i32 %1892) #8
  %1894 = trunc i32 %1893 to i8
  %1895 = and i8 %1894, 1
  %1896 = xor i8 %1895, 1
  store i8 %1896, i8* %.pre-phi23, align 1, !tbaa !2446
  %1897 = xor i32 %1887, %1888
  %1898 = lshr i32 %1897, 4
  %1899 = trunc i32 %1898 to i8
  %1900 = and i8 %1899, 1
  store i8 %1900, i8* %.pre-phi25, align 1, !tbaa !2450
  %1901 = icmp eq i32 %1888, 0
  %1902 = zext i1 %1901 to i8
  store i8 %1902, i8* %.pre-phi27, align 1, !tbaa !2447
  %1903 = lshr i32 %1888, 31
  %1904 = trunc i32 %1903 to i8
  store i8 %1904, i8* %.pre-phi29, align 1, !tbaa !2448
  %1905 = lshr i32 %1887, 31
  %1906 = xor i32 %1903, %1905
  %1907 = add nuw nsw i32 %1906, %1905
  %1908 = icmp eq i32 %1907, 2
  %1909 = zext i1 %1908 to i8
  store i8 %1909, i8* %.pre-phi31, align 1, !tbaa !2449
  %1910 = sext i32 %1888 to i64
  store i64 %1910, i64* %RCX, align 8, !tbaa !2428
  %1911 = shl nsw i64 %1910, 2
  %1912 = add i64 %1911, %1883
  %1913 = add i64 %3523, 521
  store i64 %1913, i64* %PC, align 8
  %1914 = inttoptr i64 %1912 to i32*
  %1915 = load i32, i32* %1914, align 4
  %1916 = bitcast %union.VectorReg* %8 to i32*
  store i32 %1915, i32* %1916, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %1917 = add i64 %1879, -40
  %1918 = add i64 %3523, 525
  store i64 %1918, i64* %PC, align 8
  %1919 = inttoptr i64 %1917 to i64*
  %1920 = load i64, i64* %1919, align 8
  store i64 %1920, i64* %RAX, align 8, !tbaa !2428
  %1921 = add i64 %1879, -24
  %1922 = add i64 %3523, 528
  store i64 %1922, i64* %PC, align 8
  %1923 = inttoptr i64 %1921 to i32*
  %1924 = load i32, i32* %1923, align 4
  %1925 = zext i32 %1924 to i64
  store i64 %1925, i64* %RDX, align 8, !tbaa !2428
  %1926 = add i64 %3523, 531
  store i64 %1926, i64* %PC, align 8
  %1927 = load i32, i32* %1886, align 4
  %1928 = add i32 %1927, -5
  %1929 = zext i32 %1928 to i64
  store i64 %1929, i64* %RSI, align 8, !tbaa !2428
  %1930 = sext i32 %1924 to i64
  %1931 = sext i32 %1928 to i64
  %1932 = mul nsw i64 %1931, %1930
  %1933 = trunc i64 %1932 to i32
  %1934 = and i64 %1932, 4294967295
  store i64 %1934, i64* %RDX, align 8, !tbaa !2428
  %1935 = shl i64 %1932, 32
  %1936 = ashr exact i64 %1935, 32
  %1937 = icmp ne i64 %1936, %1932
  %1938 = zext i1 %1937 to i8
  store i8 %1938, i8* %.pre-phi, align 1, !tbaa !2432
  %1939 = and i32 %1933, 255
  %1940 = tail call i32 @llvm.ctpop.i32(i32 %1939) #8
  %1941 = trunc i32 %1940 to i8
  %1942 = and i8 %1941, 1
  %1943 = xor i8 %1942, 1
  store i8 %1943, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1944 = lshr i32 %1933, 31
  %1945 = trunc i32 %1944 to i8
  store i8 %1945, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1938, i8* %.pre-phi31, align 1, !tbaa !2449
  %1946 = load i64, i64* %RBP, align 8
  %1947 = add i64 %1946, -48
  %1948 = add i64 %3523, 540
  store i64 %1948, i64* %PC, align 8
  %1949 = trunc i64 %1932 to i32
  %1950 = inttoptr i64 %1947 to i32*
  %1951 = load i32, i32* %1950, align 4
  %1952 = add i32 %1951, %1949
  %1953 = zext i32 %1952 to i64
  store i64 %1953, i64* %RDX, align 8, !tbaa !2428
  %1954 = icmp ult i32 %1952, %1949
  %1955 = icmp ult i32 %1952, %1951
  %1956 = or i1 %1954, %1955
  %1957 = zext i1 %1956 to i8
  store i8 %1957, i8* %.pre-phi, align 1, !tbaa !2432
  %1958 = and i32 %1952, 255
  %1959 = tail call i32 @llvm.ctpop.i32(i32 %1958) #8
  %1960 = trunc i32 %1959 to i8
  %1961 = and i8 %1960, 1
  %1962 = xor i8 %1961, 1
  store i8 %1962, i8* %.pre-phi23, align 1, !tbaa !2446
  %1963 = xor i32 %1951, %1949
  %1964 = xor i32 %1963, %1952
  %1965 = lshr i32 %1964, 4
  %1966 = trunc i32 %1965 to i8
  %1967 = and i8 %1966, 1
  store i8 %1967, i8* %.pre-phi25, align 1, !tbaa !2450
  %1968 = icmp eq i32 %1952, 0
  %1969 = zext i1 %1968 to i8
  store i8 %1969, i8* %.pre-phi27, align 1, !tbaa !2447
  %1970 = lshr i32 %1952, 31
  %1971 = trunc i32 %1970 to i8
  store i8 %1971, i8* %.pre-phi29, align 1, !tbaa !2448
  %1972 = lshr i32 %1949, 31
  %1973 = lshr i32 %1951, 31
  %1974 = xor i32 %1970, %1972
  %1975 = xor i32 %1970, %1973
  %1976 = add nuw nsw i32 %1974, %1975
  %1977 = icmp eq i32 %1976, 2
  %1978 = zext i1 %1977 to i8
  store i8 %1978, i8* %.pre-phi31, align 1, !tbaa !2449
  %1979 = sext i32 %1952 to i64
  store i64 %1979, i64* %RCX, align 8, !tbaa !2428
  %1980 = load i64, i64* %RAX, align 8
  %1981 = shl nsw i64 %1979, 2
  %1982 = add i64 %1981, %1980
  %1983 = add i64 %3523, 548
  store i64 %1983, i64* %PC, align 8
  %1984 = load <2 x float>, <2 x float>* %5054, align 1
  %1985 = load <2 x i32>, <2 x i32>* %5055, align 1
  %1986 = inttoptr i64 %1982 to float*
  %1987 = load float, float* %1986, align 4
  %1988 = extractelement <2 x float> %1984, i32 0
  %1989 = fmul float %1988, %1987
  store float %1989, float* %5047, align 1, !tbaa !2452
  %1990 = bitcast <2 x float> %1984 to <2 x i32>
  %1991 = extractelement <2 x i32> %1990, i32 1
  store i32 %1991, i32* %5056, align 1, !tbaa !2452
  %1992 = extractelement <2 x i32> %1985, i32 0
  store i32 %1992, i32* %5057, align 1, !tbaa !2452
  %1993 = extractelement <2 x i32> %1985, i32 1
  store i32 %1993, i32* %5058, align 1, !tbaa !2452
  %1994 = load <2 x float>, <2 x float>* %5059, align 1
  %1995 = load <2 x i32>, <2 x i32>* %5060, align 1
  %1996 = load <2 x float>, <2 x float>* %5061, align 1
  %1997 = extractelement <2 x float> %1994, i32 0
  %1998 = extractelement <2 x float> %1996, i32 0
  %1999 = fadd float %1997, %1998
  store float %1999, float* %5039, align 1, !tbaa !2452
  %2000 = bitcast <2 x float> %1994 to <2 x i32>
  %2001 = extractelement <2 x i32> %2000, i32 1
  store i32 %2001, i32* %5062, align 1, !tbaa !2452
  %2002 = extractelement <2 x i32> %1995, i32 0
  store i32 %2002, i32* %5063, align 1, !tbaa !2452
  %2003 = extractelement <2 x i32> %1995, i32 1
  store i32 %2003, i32* %5064, align 1, !tbaa !2452
  %2004 = add i64 %1946, -32
  %2005 = add i64 %3523, 556
  store i64 %2005, i64* %PC, align 8
  %2006 = inttoptr i64 %2004 to i64*
  %2007 = load i64, i64* %2006, align 8
  store i64 %2007, i64* %RAX, align 8, !tbaa !2428
  %2008 = add i64 %1946, -44
  %2009 = add i64 %3523, 559
  store i64 %2009, i64* %PC, align 8
  %2010 = inttoptr i64 %2008 to i32*
  %2011 = load i32, i32* %2010, align 4
  %2012 = add i32 %2011, -4
  %2013 = zext i32 %2012 to i64
  store i64 %2013, i64* %RDX, align 8, !tbaa !2428
  %2014 = icmp ult i32 %2011, 4
  %2015 = zext i1 %2014 to i8
  store i8 %2015, i8* %.pre-phi, align 1, !tbaa !2432
  %2016 = and i32 %2012, 255
  %2017 = tail call i32 @llvm.ctpop.i32(i32 %2016) #8
  %2018 = trunc i32 %2017 to i8
  %2019 = and i8 %2018, 1
  %2020 = xor i8 %2019, 1
  store i8 %2020, i8* %.pre-phi23, align 1, !tbaa !2446
  %2021 = xor i32 %2011, %2012
  %2022 = lshr i32 %2021, 4
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  store i8 %2024, i8* %.pre-phi25, align 1, !tbaa !2450
  %2025 = icmp eq i32 %2012, 0
  %2026 = zext i1 %2025 to i8
  store i8 %2026, i8* %.pre-phi27, align 1, !tbaa !2447
  %2027 = lshr i32 %2012, 31
  %2028 = trunc i32 %2027 to i8
  store i8 %2028, i8* %.pre-phi29, align 1, !tbaa !2448
  %2029 = lshr i32 %2011, 31
  %2030 = xor i32 %2027, %2029
  %2031 = add nuw nsw i32 %2030, %2029
  %2032 = icmp eq i32 %2031, 2
  %2033 = zext i1 %2032 to i8
  store i8 %2033, i8* %.pre-phi31, align 1, !tbaa !2449
  %2034 = sext i32 %2012 to i64
  store i64 %2034, i64* %RCX, align 8, !tbaa !2428
  %2035 = shl nsw i64 %2034, 2
  %2036 = add i64 %2035, %2007
  %2037 = add i64 %3523, 570
  store i64 %2037, i64* %PC, align 8
  %2038 = inttoptr i64 %2036 to i32*
  %2039 = load i32, i32* %2038, align 4
  %2040 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2039, i32* %2040, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %2041 = load i64, i64* %RBP, align 8
  %2042 = add i64 %2041, -40
  %2043 = add i64 %3523, 574
  store i64 %2043, i64* %PC, align 8
  %2044 = inttoptr i64 %2042 to i64*
  %2045 = load i64, i64* %2044, align 8
  store i64 %2045, i64* %RAX, align 8, !tbaa !2428
  %2046 = add i64 %2041, -24
  %2047 = add i64 %3523, 577
  store i64 %2047, i64* %PC, align 8
  %2048 = inttoptr i64 %2046 to i32*
  %2049 = load i32, i32* %2048, align 4
  %2050 = zext i32 %2049 to i64
  store i64 %2050, i64* %RDX, align 8, !tbaa !2428
  %2051 = add i64 %2041, -44
  %2052 = add i64 %3523, 580
  store i64 %2052, i64* %PC, align 8
  %2053 = inttoptr i64 %2051 to i32*
  %2054 = load i32, i32* %2053, align 4
  %2055 = add i32 %2054, -4
  %2056 = zext i32 %2055 to i64
  store i64 %2056, i64* %RSI, align 8, !tbaa !2428
  %2057 = sext i32 %2049 to i64
  %2058 = sext i32 %2055 to i64
  %2059 = mul nsw i64 %2058, %2057
  %2060 = trunc i64 %2059 to i32
  %2061 = and i64 %2059, 4294967295
  store i64 %2061, i64* %RDX, align 8, !tbaa !2428
  %2062 = shl i64 %2059, 32
  %2063 = ashr exact i64 %2062, 32
  %2064 = icmp ne i64 %2063, %2059
  %2065 = zext i1 %2064 to i8
  store i8 %2065, i8* %.pre-phi, align 1, !tbaa !2432
  %2066 = and i32 %2060, 255
  %2067 = tail call i32 @llvm.ctpop.i32(i32 %2066) #8
  %2068 = trunc i32 %2067 to i8
  %2069 = and i8 %2068, 1
  %2070 = xor i8 %2069, 1
  store i8 %2070, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2071 = lshr i32 %2060, 31
  %2072 = trunc i32 %2071 to i8
  store i8 %2072, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2065, i8* %.pre-phi31, align 1, !tbaa !2449
  %2073 = add i64 %2041, -48
  %2074 = add i64 %3523, 589
  store i64 %2074, i64* %PC, align 8
  %2075 = trunc i64 %2059 to i32
  %2076 = inttoptr i64 %2073 to i32*
  %2077 = load i32, i32* %2076, align 4
  %2078 = add i32 %2077, %2075
  %2079 = zext i32 %2078 to i64
  store i64 %2079, i64* %RDX, align 8, !tbaa !2428
  %2080 = icmp ult i32 %2078, %2075
  %2081 = icmp ult i32 %2078, %2077
  %2082 = or i1 %2080, %2081
  %2083 = zext i1 %2082 to i8
  store i8 %2083, i8* %.pre-phi, align 1, !tbaa !2432
  %2084 = and i32 %2078, 255
  %2085 = tail call i32 @llvm.ctpop.i32(i32 %2084) #8
  %2086 = trunc i32 %2085 to i8
  %2087 = and i8 %2086, 1
  %2088 = xor i8 %2087, 1
  store i8 %2088, i8* %.pre-phi23, align 1, !tbaa !2446
  %2089 = xor i32 %2077, %2075
  %2090 = xor i32 %2089, %2078
  %2091 = lshr i32 %2090, 4
  %2092 = trunc i32 %2091 to i8
  %2093 = and i8 %2092, 1
  store i8 %2093, i8* %.pre-phi25, align 1, !tbaa !2450
  %2094 = icmp eq i32 %2078, 0
  %2095 = zext i1 %2094 to i8
  store i8 %2095, i8* %.pre-phi27, align 1, !tbaa !2447
  %2096 = lshr i32 %2078, 31
  %2097 = trunc i32 %2096 to i8
  store i8 %2097, i8* %.pre-phi29, align 1, !tbaa !2448
  %2098 = lshr i32 %2075, 31
  %2099 = lshr i32 %2077, 31
  %2100 = xor i32 %2096, %2098
  %2101 = xor i32 %2096, %2099
  %2102 = add nuw nsw i32 %2100, %2101
  %2103 = icmp eq i32 %2102, 2
  %2104 = zext i1 %2103 to i8
  store i8 %2104, i8* %.pre-phi31, align 1, !tbaa !2449
  %2105 = sext i32 %2078 to i64
  store i64 %2105, i64* %RCX, align 8, !tbaa !2428
  %2106 = load i64, i64* %RAX, align 8
  %2107 = shl nsw i64 %2105, 2
  %2108 = add i64 %2107, %2106
  %2109 = add i64 %3523, 597
  store i64 %2109, i64* %PC, align 8
  %2110 = load <2 x float>, <2 x float>* %5054, align 1
  %2111 = load <2 x i32>, <2 x i32>* %5055, align 1
  %2112 = inttoptr i64 %2108 to float*
  %2113 = load float, float* %2112, align 4
  %2114 = extractelement <2 x float> %2110, i32 0
  %2115 = fmul float %2114, %2113
  store float %2115, float* %5047, align 1, !tbaa !2452
  %2116 = bitcast <2 x float> %2110 to <2 x i32>
  %2117 = extractelement <2 x i32> %2116, i32 1
  store i32 %2117, i32* %5056, align 1, !tbaa !2452
  %2118 = extractelement <2 x i32> %2111, i32 0
  store i32 %2118, i32* %5057, align 1, !tbaa !2452
  %2119 = extractelement <2 x i32> %2111, i32 1
  store i32 %2119, i32* %5058, align 1, !tbaa !2452
  %2120 = load <2 x float>, <2 x float>* %5059, align 1
  %2121 = load <2 x i32>, <2 x i32>* %5060, align 1
  %2122 = load <2 x float>, <2 x float>* %5061, align 1
  %2123 = extractelement <2 x float> %2120, i32 0
  %2124 = extractelement <2 x float> %2122, i32 0
  %2125 = fadd float %2123, %2124
  store float %2125, float* %5039, align 1, !tbaa !2452
  %2126 = bitcast <2 x float> %2120 to <2 x i32>
  %2127 = extractelement <2 x i32> %2126, i32 1
  store i32 %2127, i32* %5062, align 1, !tbaa !2452
  %2128 = extractelement <2 x i32> %2121, i32 0
  store i32 %2128, i32* %5063, align 1, !tbaa !2452
  %2129 = extractelement <2 x i32> %2121, i32 1
  store i32 %2129, i32* %5064, align 1, !tbaa !2452
  %2130 = load i64, i64* %RBP, align 8
  %2131 = add i64 %2130, -32
  %2132 = add i64 %3523, 605
  store i64 %2132, i64* %PC, align 8
  %2133 = inttoptr i64 %2131 to i64*
  %2134 = load i64, i64* %2133, align 8
  store i64 %2134, i64* %RAX, align 8, !tbaa !2428
  %2135 = add i64 %2130, -44
  %2136 = add i64 %3523, 608
  store i64 %2136, i64* %PC, align 8
  %2137 = inttoptr i64 %2135 to i32*
  %2138 = load i32, i32* %2137, align 4
  %2139 = add i32 %2138, -3
  %2140 = zext i32 %2139 to i64
  store i64 %2140, i64* %RDX, align 8, !tbaa !2428
  %2141 = icmp ult i32 %2138, 3
  %2142 = zext i1 %2141 to i8
  store i8 %2142, i8* %.pre-phi, align 1, !tbaa !2432
  %2143 = and i32 %2139, 255
  %2144 = tail call i32 @llvm.ctpop.i32(i32 %2143) #8
  %2145 = trunc i32 %2144 to i8
  %2146 = and i8 %2145, 1
  %2147 = xor i8 %2146, 1
  store i8 %2147, i8* %.pre-phi23, align 1, !tbaa !2446
  %2148 = xor i32 %2138, %2139
  %2149 = lshr i32 %2148, 4
  %2150 = trunc i32 %2149 to i8
  %2151 = and i8 %2150, 1
  store i8 %2151, i8* %.pre-phi25, align 1, !tbaa !2450
  %2152 = icmp eq i32 %2139, 0
  %2153 = zext i1 %2152 to i8
  store i8 %2153, i8* %.pre-phi27, align 1, !tbaa !2447
  %2154 = lshr i32 %2139, 31
  %2155 = trunc i32 %2154 to i8
  store i8 %2155, i8* %.pre-phi29, align 1, !tbaa !2448
  %2156 = lshr i32 %2138, 31
  %2157 = xor i32 %2154, %2156
  %2158 = add nuw nsw i32 %2157, %2156
  %2159 = icmp eq i32 %2158, 2
  %2160 = zext i1 %2159 to i8
  store i8 %2160, i8* %.pre-phi31, align 1, !tbaa !2449
  %2161 = sext i32 %2139 to i64
  store i64 %2161, i64* %RCX, align 8, !tbaa !2428
  %2162 = shl nsw i64 %2161, 2
  %2163 = add i64 %2162, %2134
  %2164 = add i64 %3523, 619
  store i64 %2164, i64* %PC, align 8
  %2165 = inttoptr i64 %2163 to i32*
  %2166 = load i32, i32* %2165, align 4
  %2167 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2166, i32* %2167, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %2168 = add i64 %2130, -40
  %2169 = add i64 %3523, 623
  store i64 %2169, i64* %PC, align 8
  %2170 = inttoptr i64 %2168 to i64*
  %2171 = load i64, i64* %2170, align 8
  store i64 %2171, i64* %RAX, align 8, !tbaa !2428
  %2172 = add i64 %2130, -24
  %2173 = add i64 %3523, 626
  store i64 %2173, i64* %PC, align 8
  %2174 = inttoptr i64 %2172 to i32*
  %2175 = load i32, i32* %2174, align 4
  %2176 = zext i32 %2175 to i64
  store i64 %2176, i64* %RDX, align 8, !tbaa !2428
  %2177 = add i64 %3523, 629
  store i64 %2177, i64* %PC, align 8
  %2178 = load i32, i32* %2137, align 4
  %2179 = add i32 %2178, -3
  %2180 = zext i32 %2179 to i64
  store i64 %2180, i64* %RSI, align 8, !tbaa !2428
  %2181 = sext i32 %2175 to i64
  %2182 = sext i32 %2179 to i64
  %2183 = mul nsw i64 %2182, %2181
  %2184 = trunc i64 %2183 to i32
  %2185 = and i64 %2183, 4294967295
  store i64 %2185, i64* %RDX, align 8, !tbaa !2428
  %2186 = shl i64 %2183, 32
  %2187 = ashr exact i64 %2186, 32
  %2188 = icmp ne i64 %2187, %2183
  %2189 = zext i1 %2188 to i8
  store i8 %2189, i8* %.pre-phi, align 1, !tbaa !2432
  %2190 = and i32 %2184, 255
  %2191 = tail call i32 @llvm.ctpop.i32(i32 %2190) #8
  %2192 = trunc i32 %2191 to i8
  %2193 = and i8 %2192, 1
  %2194 = xor i8 %2193, 1
  store i8 %2194, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2195 = lshr i32 %2184, 31
  %2196 = trunc i32 %2195 to i8
  store i8 %2196, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2189, i8* %.pre-phi31, align 1, !tbaa !2449
  %2197 = load i64, i64* %RBP, align 8
  %2198 = add i64 %2197, -48
  %2199 = add i64 %3523, 638
  store i64 %2199, i64* %PC, align 8
  %2200 = trunc i64 %2183 to i32
  %2201 = inttoptr i64 %2198 to i32*
  %2202 = load i32, i32* %2201, align 4
  %2203 = add i32 %2202, %2200
  %2204 = zext i32 %2203 to i64
  store i64 %2204, i64* %RDX, align 8, !tbaa !2428
  %2205 = icmp ult i32 %2203, %2200
  %2206 = icmp ult i32 %2203, %2202
  %2207 = or i1 %2205, %2206
  %2208 = zext i1 %2207 to i8
  store i8 %2208, i8* %.pre-phi, align 1, !tbaa !2432
  %2209 = and i32 %2203, 255
  %2210 = tail call i32 @llvm.ctpop.i32(i32 %2209) #8
  %2211 = trunc i32 %2210 to i8
  %2212 = and i8 %2211, 1
  %2213 = xor i8 %2212, 1
  store i8 %2213, i8* %.pre-phi23, align 1, !tbaa !2446
  %2214 = xor i32 %2202, %2200
  %2215 = xor i32 %2214, %2203
  %2216 = lshr i32 %2215, 4
  %2217 = trunc i32 %2216 to i8
  %2218 = and i8 %2217, 1
  store i8 %2218, i8* %.pre-phi25, align 1, !tbaa !2450
  %2219 = icmp eq i32 %2203, 0
  %2220 = zext i1 %2219 to i8
  store i8 %2220, i8* %.pre-phi27, align 1, !tbaa !2447
  %2221 = lshr i32 %2203, 31
  %2222 = trunc i32 %2221 to i8
  store i8 %2222, i8* %.pre-phi29, align 1, !tbaa !2448
  %2223 = lshr i32 %2200, 31
  %2224 = lshr i32 %2202, 31
  %2225 = xor i32 %2221, %2223
  %2226 = xor i32 %2221, %2224
  %2227 = add nuw nsw i32 %2225, %2226
  %2228 = icmp eq i32 %2227, 2
  %2229 = zext i1 %2228 to i8
  store i8 %2229, i8* %.pre-phi31, align 1, !tbaa !2449
  %2230 = sext i32 %2203 to i64
  store i64 %2230, i64* %RCX, align 8, !tbaa !2428
  %2231 = load i64, i64* %RAX, align 8
  %2232 = shl nsw i64 %2230, 2
  %2233 = add i64 %2232, %2231
  %2234 = add i64 %3523, 646
  store i64 %2234, i64* %PC, align 8
  %2235 = load <2 x float>, <2 x float>* %5054, align 1
  %2236 = load <2 x i32>, <2 x i32>* %5055, align 1
  %2237 = inttoptr i64 %2233 to float*
  %2238 = load float, float* %2237, align 4
  %2239 = extractelement <2 x float> %2235, i32 0
  %2240 = fmul float %2239, %2238
  store float %2240, float* %5047, align 1, !tbaa !2452
  %2241 = bitcast <2 x float> %2235 to <2 x i32>
  %2242 = extractelement <2 x i32> %2241, i32 1
  store i32 %2242, i32* %5056, align 1, !tbaa !2452
  %2243 = extractelement <2 x i32> %2236, i32 0
  store i32 %2243, i32* %5057, align 1, !tbaa !2452
  %2244 = extractelement <2 x i32> %2236, i32 1
  store i32 %2244, i32* %5058, align 1, !tbaa !2452
  %2245 = load <2 x float>, <2 x float>* %5059, align 1
  %2246 = load <2 x i32>, <2 x i32>* %5060, align 1
  %2247 = load <2 x float>, <2 x float>* %5061, align 1
  %2248 = extractelement <2 x float> %2245, i32 0
  %2249 = extractelement <2 x float> %2247, i32 0
  %2250 = fadd float %2248, %2249
  store float %2250, float* %5039, align 1, !tbaa !2452
  %2251 = bitcast <2 x float> %2245 to <2 x i32>
  %2252 = extractelement <2 x i32> %2251, i32 1
  store i32 %2252, i32* %5062, align 1, !tbaa !2452
  %2253 = extractelement <2 x i32> %2246, i32 0
  store i32 %2253, i32* %5063, align 1, !tbaa !2452
  %2254 = extractelement <2 x i32> %2246, i32 1
  store i32 %2254, i32* %5064, align 1, !tbaa !2452
  %2255 = add i64 %2197, -32
  %2256 = add i64 %3523, 654
  store i64 %2256, i64* %PC, align 8
  %2257 = inttoptr i64 %2255 to i64*
  %2258 = load i64, i64* %2257, align 8
  store i64 %2258, i64* %RAX, align 8, !tbaa !2428
  %2259 = add i64 %2197, -44
  %2260 = add i64 %3523, 657
  store i64 %2260, i64* %PC, align 8
  %2261 = inttoptr i64 %2259 to i32*
  %2262 = load i32, i32* %2261, align 4
  %2263 = add i32 %2262, -2
  %2264 = zext i32 %2263 to i64
  store i64 %2264, i64* %RDX, align 8, !tbaa !2428
  %2265 = icmp ult i32 %2262, 2
  %2266 = zext i1 %2265 to i8
  store i8 %2266, i8* %.pre-phi, align 1, !tbaa !2432
  %2267 = and i32 %2263, 255
  %2268 = tail call i32 @llvm.ctpop.i32(i32 %2267) #8
  %2269 = trunc i32 %2268 to i8
  %2270 = and i8 %2269, 1
  %2271 = xor i8 %2270, 1
  store i8 %2271, i8* %.pre-phi23, align 1, !tbaa !2446
  %2272 = xor i32 %2262, %2263
  %2273 = lshr i32 %2272, 4
  %2274 = trunc i32 %2273 to i8
  %2275 = and i8 %2274, 1
  store i8 %2275, i8* %.pre-phi25, align 1, !tbaa !2450
  %2276 = icmp eq i32 %2263, 0
  %2277 = zext i1 %2276 to i8
  store i8 %2277, i8* %.pre-phi27, align 1, !tbaa !2447
  %2278 = lshr i32 %2263, 31
  %2279 = trunc i32 %2278 to i8
  store i8 %2279, i8* %.pre-phi29, align 1, !tbaa !2448
  %2280 = lshr i32 %2262, 31
  %2281 = xor i32 %2278, %2280
  %2282 = add nuw nsw i32 %2281, %2280
  %2283 = icmp eq i32 %2282, 2
  %2284 = zext i1 %2283 to i8
  store i8 %2284, i8* %.pre-phi31, align 1, !tbaa !2449
  %2285 = sext i32 %2263 to i64
  store i64 %2285, i64* %RCX, align 8, !tbaa !2428
  %2286 = shl nsw i64 %2285, 2
  %2287 = add i64 %2286, %2258
  %2288 = add i64 %3523, 668
  store i64 %2288, i64* %PC, align 8
  %2289 = inttoptr i64 %2287 to i32*
  %2290 = load i32, i32* %2289, align 4
  %2291 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2290, i32* %2291, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %2292 = load i64, i64* %RBP, align 8
  %2293 = add i64 %2292, -40
  %2294 = add i64 %3523, 672
  store i64 %2294, i64* %PC, align 8
  %2295 = inttoptr i64 %2293 to i64*
  %2296 = load i64, i64* %2295, align 8
  store i64 %2296, i64* %RAX, align 8, !tbaa !2428
  %2297 = add i64 %2292, -24
  %2298 = add i64 %3523, 675
  store i64 %2298, i64* %PC, align 8
  %2299 = inttoptr i64 %2297 to i32*
  %2300 = load i32, i32* %2299, align 4
  %2301 = zext i32 %2300 to i64
  store i64 %2301, i64* %RDX, align 8, !tbaa !2428
  %2302 = add i64 %2292, -44
  %2303 = add i64 %3523, 678
  store i64 %2303, i64* %PC, align 8
  %2304 = inttoptr i64 %2302 to i32*
  %2305 = load i32, i32* %2304, align 4
  %2306 = add i32 %2305, -2
  %2307 = zext i32 %2306 to i64
  store i64 %2307, i64* %RSI, align 8, !tbaa !2428
  %2308 = sext i32 %2300 to i64
  %2309 = sext i32 %2306 to i64
  %2310 = mul nsw i64 %2309, %2308
  %2311 = trunc i64 %2310 to i32
  %2312 = and i64 %2310, 4294967295
  store i64 %2312, i64* %RDX, align 8, !tbaa !2428
  %2313 = shl i64 %2310, 32
  %2314 = ashr exact i64 %2313, 32
  %2315 = icmp ne i64 %2314, %2310
  %2316 = zext i1 %2315 to i8
  store i8 %2316, i8* %.pre-phi, align 1, !tbaa !2432
  %2317 = and i32 %2311, 255
  %2318 = tail call i32 @llvm.ctpop.i32(i32 %2317) #8
  %2319 = trunc i32 %2318 to i8
  %2320 = and i8 %2319, 1
  %2321 = xor i8 %2320, 1
  store i8 %2321, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2322 = lshr i32 %2311, 31
  %2323 = trunc i32 %2322 to i8
  store i8 %2323, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2316, i8* %.pre-phi31, align 1, !tbaa !2449
  %2324 = add i64 %2292, -48
  %2325 = add i64 %3523, 687
  store i64 %2325, i64* %PC, align 8
  %2326 = trunc i64 %2310 to i32
  %2327 = inttoptr i64 %2324 to i32*
  %2328 = load i32, i32* %2327, align 4
  %2329 = add i32 %2328, %2326
  %2330 = zext i32 %2329 to i64
  store i64 %2330, i64* %RDX, align 8, !tbaa !2428
  %2331 = icmp ult i32 %2329, %2326
  %2332 = icmp ult i32 %2329, %2328
  %2333 = or i1 %2331, %2332
  %2334 = zext i1 %2333 to i8
  store i8 %2334, i8* %.pre-phi, align 1, !tbaa !2432
  %2335 = and i32 %2329, 255
  %2336 = tail call i32 @llvm.ctpop.i32(i32 %2335) #8
  %2337 = trunc i32 %2336 to i8
  %2338 = and i8 %2337, 1
  %2339 = xor i8 %2338, 1
  store i8 %2339, i8* %.pre-phi23, align 1, !tbaa !2446
  %2340 = xor i32 %2328, %2326
  %2341 = xor i32 %2340, %2329
  %2342 = lshr i32 %2341, 4
  %2343 = trunc i32 %2342 to i8
  %2344 = and i8 %2343, 1
  store i8 %2344, i8* %.pre-phi25, align 1, !tbaa !2450
  %2345 = icmp eq i32 %2329, 0
  %2346 = zext i1 %2345 to i8
  store i8 %2346, i8* %.pre-phi27, align 1, !tbaa !2447
  %2347 = lshr i32 %2329, 31
  %2348 = trunc i32 %2347 to i8
  store i8 %2348, i8* %.pre-phi29, align 1, !tbaa !2448
  %2349 = lshr i32 %2326, 31
  %2350 = lshr i32 %2328, 31
  %2351 = xor i32 %2347, %2349
  %2352 = xor i32 %2347, %2350
  %2353 = add nuw nsw i32 %2351, %2352
  %2354 = icmp eq i32 %2353, 2
  %2355 = zext i1 %2354 to i8
  store i8 %2355, i8* %.pre-phi31, align 1, !tbaa !2449
  %2356 = sext i32 %2329 to i64
  store i64 %2356, i64* %RCX, align 8, !tbaa !2428
  %2357 = load i64, i64* %RAX, align 8
  %2358 = shl nsw i64 %2356, 2
  %2359 = add i64 %2358, %2357
  %2360 = add i64 %3523, 695
  store i64 %2360, i64* %PC, align 8
  %2361 = load <2 x float>, <2 x float>* %5054, align 1
  %2362 = load <2 x i32>, <2 x i32>* %5055, align 1
  %2363 = inttoptr i64 %2359 to float*
  %2364 = load float, float* %2363, align 4
  %2365 = extractelement <2 x float> %2361, i32 0
  %2366 = fmul float %2365, %2364
  store float %2366, float* %5047, align 1, !tbaa !2452
  %2367 = bitcast <2 x float> %2361 to <2 x i32>
  %2368 = extractelement <2 x i32> %2367, i32 1
  store i32 %2368, i32* %5056, align 1, !tbaa !2452
  %2369 = extractelement <2 x i32> %2362, i32 0
  store i32 %2369, i32* %5057, align 1, !tbaa !2452
  %2370 = extractelement <2 x i32> %2362, i32 1
  store i32 %2370, i32* %5058, align 1, !tbaa !2452
  %2371 = load <2 x float>, <2 x float>* %5059, align 1
  %2372 = load <2 x i32>, <2 x i32>* %5060, align 1
  %2373 = load <2 x float>, <2 x float>* %5061, align 1
  %2374 = extractelement <2 x float> %2371, i32 0
  %2375 = extractelement <2 x float> %2373, i32 0
  %2376 = fadd float %2374, %2375
  store float %2376, float* %5039, align 1, !tbaa !2452
  %2377 = bitcast <2 x float> %2371 to <2 x i32>
  %2378 = extractelement <2 x i32> %2377, i32 1
  store i32 %2378, i32* %5062, align 1, !tbaa !2452
  %2379 = extractelement <2 x i32> %2372, i32 0
  store i32 %2379, i32* %5063, align 1, !tbaa !2452
  %2380 = extractelement <2 x i32> %2372, i32 1
  store i32 %2380, i32* %5064, align 1, !tbaa !2452
  %2381 = load i64, i64* %RBP, align 8
  %2382 = add i64 %2381, -32
  %2383 = add i64 %3523, 703
  store i64 %2383, i64* %PC, align 8
  %2384 = inttoptr i64 %2382 to i64*
  %2385 = load i64, i64* %2384, align 8
  store i64 %2385, i64* %RAX, align 8, !tbaa !2428
  %2386 = add i64 %2381, -44
  %2387 = add i64 %3523, 706
  store i64 %2387, i64* %PC, align 8
  %2388 = inttoptr i64 %2386 to i32*
  %2389 = load i32, i32* %2388, align 4
  %2390 = add i32 %2389, -1
  %2391 = zext i32 %2390 to i64
  store i64 %2391, i64* %RDX, align 8, !tbaa !2428
  %2392 = icmp eq i32 %2389, 0
  %2393 = zext i1 %2392 to i8
  store i8 %2393, i8* %.pre-phi, align 1, !tbaa !2432
  %2394 = and i32 %2390, 255
  %2395 = tail call i32 @llvm.ctpop.i32(i32 %2394) #8
  %2396 = trunc i32 %2395 to i8
  %2397 = and i8 %2396, 1
  %2398 = xor i8 %2397, 1
  store i8 %2398, i8* %.pre-phi23, align 1, !tbaa !2446
  %2399 = xor i32 %2389, %2390
  %2400 = lshr i32 %2399, 4
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  store i8 %2402, i8* %.pre-phi25, align 1, !tbaa !2450
  %2403 = icmp eq i32 %2390, 0
  %2404 = zext i1 %2403 to i8
  store i8 %2404, i8* %.pre-phi27, align 1, !tbaa !2447
  %2405 = lshr i32 %2390, 31
  %2406 = trunc i32 %2405 to i8
  store i8 %2406, i8* %.pre-phi29, align 1, !tbaa !2448
  %2407 = lshr i32 %2389, 31
  %2408 = xor i32 %2405, %2407
  %2409 = add nuw nsw i32 %2408, %2407
  %2410 = icmp eq i32 %2409, 2
  %2411 = zext i1 %2410 to i8
  store i8 %2411, i8* %.pre-phi31, align 1, !tbaa !2449
  %2412 = sext i32 %2390 to i64
  store i64 %2412, i64* %RCX, align 8, !tbaa !2428
  %2413 = shl nsw i64 %2412, 2
  %2414 = add i64 %2413, %2385
  %2415 = add i64 %3523, 717
  store i64 %2415, i64* %PC, align 8
  %2416 = inttoptr i64 %2414 to i32*
  %2417 = load i32, i32* %2416, align 4
  %2418 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2417, i32* %2418, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %2419 = add i64 %2381, -40
  %2420 = add i64 %3523, 721
  store i64 %2420, i64* %PC, align 8
  %2421 = inttoptr i64 %2419 to i64*
  %2422 = load i64, i64* %2421, align 8
  store i64 %2422, i64* %RAX, align 8, !tbaa !2428
  %2423 = add i64 %2381, -24
  %2424 = add i64 %3523, 724
  store i64 %2424, i64* %PC, align 8
  %2425 = inttoptr i64 %2423 to i32*
  %2426 = load i32, i32* %2425, align 4
  %2427 = zext i32 %2426 to i64
  store i64 %2427, i64* %RDX, align 8, !tbaa !2428
  %2428 = add i64 %3523, 727
  store i64 %2428, i64* %PC, align 8
  %2429 = load i32, i32* %2388, align 4
  %2430 = add i32 %2429, -1
  %2431 = zext i32 %2430 to i64
  store i64 %2431, i64* %RSI, align 8, !tbaa !2428
  %2432 = sext i32 %2426 to i64
  %2433 = sext i32 %2430 to i64
  %2434 = mul nsw i64 %2433, %2432
  %2435 = trunc i64 %2434 to i32
  %2436 = and i64 %2434, 4294967295
  store i64 %2436, i64* %RDX, align 8, !tbaa !2428
  %2437 = shl i64 %2434, 32
  %2438 = ashr exact i64 %2437, 32
  %2439 = icmp ne i64 %2438, %2434
  %2440 = zext i1 %2439 to i8
  store i8 %2440, i8* %.pre-phi, align 1, !tbaa !2432
  %2441 = and i32 %2435, 255
  %2442 = tail call i32 @llvm.ctpop.i32(i32 %2441) #8
  %2443 = trunc i32 %2442 to i8
  %2444 = and i8 %2443, 1
  %2445 = xor i8 %2444, 1
  store i8 %2445, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2446 = lshr i32 %2435, 31
  %2447 = trunc i32 %2446 to i8
  store i8 %2447, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2440, i8* %.pre-phi31, align 1, !tbaa !2449
  %2448 = load i64, i64* %RBP, align 8
  %2449 = add i64 %2448, -48
  %2450 = add i64 %3523, 736
  store i64 %2450, i64* %PC, align 8
  %2451 = trunc i64 %2434 to i32
  %2452 = inttoptr i64 %2449 to i32*
  %2453 = load i32, i32* %2452, align 4
  %2454 = add i32 %2453, %2451
  %2455 = zext i32 %2454 to i64
  store i64 %2455, i64* %RDX, align 8, !tbaa !2428
  %2456 = icmp ult i32 %2454, %2451
  %2457 = icmp ult i32 %2454, %2453
  %2458 = or i1 %2456, %2457
  %2459 = zext i1 %2458 to i8
  store i8 %2459, i8* %.pre-phi, align 1, !tbaa !2432
  %2460 = and i32 %2454, 255
  %2461 = tail call i32 @llvm.ctpop.i32(i32 %2460) #8
  %2462 = trunc i32 %2461 to i8
  %2463 = and i8 %2462, 1
  %2464 = xor i8 %2463, 1
  store i8 %2464, i8* %.pre-phi23, align 1, !tbaa !2446
  %2465 = xor i32 %2453, %2451
  %2466 = xor i32 %2465, %2454
  %2467 = lshr i32 %2466, 4
  %2468 = trunc i32 %2467 to i8
  %2469 = and i8 %2468, 1
  store i8 %2469, i8* %.pre-phi25, align 1, !tbaa !2450
  %2470 = icmp eq i32 %2454, 0
  %2471 = zext i1 %2470 to i8
  store i8 %2471, i8* %.pre-phi27, align 1, !tbaa !2447
  %2472 = lshr i32 %2454, 31
  %2473 = trunc i32 %2472 to i8
  store i8 %2473, i8* %.pre-phi29, align 1, !tbaa !2448
  %2474 = lshr i32 %2451, 31
  %2475 = lshr i32 %2453, 31
  %2476 = xor i32 %2472, %2474
  %2477 = xor i32 %2472, %2475
  %2478 = add nuw nsw i32 %2476, %2477
  %2479 = icmp eq i32 %2478, 2
  %2480 = zext i1 %2479 to i8
  store i8 %2480, i8* %.pre-phi31, align 1, !tbaa !2449
  %2481 = sext i32 %2454 to i64
  store i64 %2481, i64* %RCX, align 8, !tbaa !2428
  %2482 = load i64, i64* %RAX, align 8
  %2483 = shl nsw i64 %2481, 2
  %2484 = add i64 %2483, %2482
  %2485 = add i64 %3523, 744
  store i64 %2485, i64* %PC, align 8
  %2486 = load <2 x float>, <2 x float>* %5054, align 1
  %2487 = load <2 x i32>, <2 x i32>* %5055, align 1
  %2488 = inttoptr i64 %2484 to float*
  %2489 = load float, float* %2488, align 4
  %2490 = extractelement <2 x float> %2486, i32 0
  %2491 = fmul float %2490, %2489
  store float %2491, float* %5047, align 1, !tbaa !2452
  %2492 = bitcast <2 x float> %2486 to <2 x i32>
  %2493 = extractelement <2 x i32> %2492, i32 1
  store i32 %2493, i32* %5056, align 1, !tbaa !2452
  %2494 = extractelement <2 x i32> %2487, i32 0
  store i32 %2494, i32* %5057, align 1, !tbaa !2452
  %2495 = extractelement <2 x i32> %2487, i32 1
  store i32 %2495, i32* %5058, align 1, !tbaa !2452
  %2496 = load <2 x float>, <2 x float>* %5059, align 1
  %2497 = load <2 x i32>, <2 x i32>* %5060, align 1
  %2498 = load <2 x float>, <2 x float>* %5061, align 1
  %2499 = extractelement <2 x float> %2496, i32 0
  %2500 = extractelement <2 x float> %2498, i32 0
  %2501 = fadd float %2499, %2500
  store float %2501, float* %5039, align 1, !tbaa !2452
  %2502 = bitcast <2 x float> %2496 to <2 x i32>
  %2503 = extractelement <2 x i32> %2502, i32 1
  store i32 %2503, i32* %5062, align 1, !tbaa !2452
  %2504 = extractelement <2 x i32> %2497, i32 0
  store i32 %2504, i32* %5063, align 1, !tbaa !2452
  %2505 = extractelement <2 x i32> %2497, i32 1
  store i32 %2505, i32* %5064, align 1, !tbaa !2452
  %2506 = add i64 %2448, -32
  %2507 = add i64 %3523, 752
  store i64 %2507, i64* %PC, align 8
  %2508 = inttoptr i64 %2506 to i64*
  %2509 = load i64, i64* %2508, align 8
  store i64 %2509, i64* %RAX, align 8, !tbaa !2428
  %2510 = add i64 %2448, -44
  %2511 = add i64 %3523, 756
  store i64 %2511, i64* %PC, align 8
  %2512 = inttoptr i64 %2510 to i32*
  %2513 = load i32, i32* %2512, align 4
  %2514 = sext i32 %2513 to i64
  store i64 %2514, i64* %RCX, align 8, !tbaa !2428
  %2515 = shl nsw i64 %2514, 2
  %2516 = add i64 %2515, %2509
  %2517 = add i64 %3523, 761
  store i64 %2517, i64* %PC, align 8
  %2518 = inttoptr i64 %2516 to i32*
  %2519 = load i32, i32* %2518, align 4
  %2520 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2519, i32* %2520, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5049, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5051, align 1, !tbaa !2452
  store float 0.000000e+00, float* %5053, align 1, !tbaa !2452
  %2521 = load i64, i64* %RBP, align 8
  %2522 = add i64 %2521, -40
  %2523 = add i64 %3523, 765
  store i64 %2523, i64* %PC, align 8
  %2524 = inttoptr i64 %2522 to i64*
  %2525 = load i64, i64* %2524, align 8
  store i64 %2525, i64* %RAX, align 8, !tbaa !2428
  %2526 = add i64 %2521, -24
  %2527 = add i64 %3523, 768
  store i64 %2527, i64* %PC, align 8
  %2528 = inttoptr i64 %2526 to i32*
  %2529 = load i32, i32* %2528, align 4
  %2530 = zext i32 %2529 to i64
  store i64 %2530, i64* %RDX, align 8, !tbaa !2428
  %2531 = add i64 %2521, -44
  %2532 = add i64 %3523, 772
  store i64 %2532, i64* %PC, align 8
  %2533 = inttoptr i64 %2531 to i32*
  %2534 = load i32, i32* %2533, align 4
  %2535 = sext i32 %2529 to i64
  %2536 = sext i32 %2534 to i64
  %2537 = mul nsw i64 %2536, %2535
  %2538 = trunc i64 %2537 to i32
  %2539 = and i64 %2537, 4294967295
  store i64 %2539, i64* %RDX, align 8, !tbaa !2428
  %2540 = shl i64 %2537, 32
  %2541 = ashr exact i64 %2540, 32
  %2542 = icmp ne i64 %2541, %2537
  %2543 = zext i1 %2542 to i8
  store i8 %2543, i8* %.pre-phi, align 1, !tbaa !2432
  %2544 = and i32 %2538, 255
  %2545 = tail call i32 @llvm.ctpop.i32(i32 %2544) #8
  %2546 = trunc i32 %2545 to i8
  %2547 = and i8 %2546, 1
  %2548 = xor i8 %2547, 1
  store i8 %2548, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2549 = lshr i32 %2538, 31
  %2550 = trunc i32 %2549 to i8
  store i8 %2550, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2543, i8* %.pre-phi31, align 1, !tbaa !2449
  %2551 = add i64 %2521, -48
  %2552 = add i64 %3523, 775
  store i64 %2552, i64* %PC, align 8
  %2553 = trunc i64 %2537 to i32
  %2554 = inttoptr i64 %2551 to i32*
  %2555 = load i32, i32* %2554, align 4
  %2556 = add i32 %2555, %2553
  %2557 = zext i32 %2556 to i64
  store i64 %2557, i64* %RDX, align 8, !tbaa !2428
  %2558 = icmp ult i32 %2556, %2553
  %2559 = icmp ult i32 %2556, %2555
  %2560 = or i1 %2558, %2559
  %2561 = zext i1 %2560 to i8
  store i8 %2561, i8* %.pre-phi, align 1, !tbaa !2432
  %2562 = and i32 %2556, 255
  %2563 = tail call i32 @llvm.ctpop.i32(i32 %2562) #8
  %2564 = trunc i32 %2563 to i8
  %2565 = and i8 %2564, 1
  %2566 = xor i8 %2565, 1
  store i8 %2566, i8* %.pre-phi23, align 1, !tbaa !2446
  %2567 = xor i32 %2555, %2553
  %2568 = xor i32 %2567, %2556
  %2569 = lshr i32 %2568, 4
  %2570 = trunc i32 %2569 to i8
  %2571 = and i8 %2570, 1
  store i8 %2571, i8* %.pre-phi25, align 1, !tbaa !2450
  %2572 = icmp eq i32 %2556, 0
  %2573 = zext i1 %2572 to i8
  store i8 %2573, i8* %.pre-phi27, align 1, !tbaa !2447
  %2574 = lshr i32 %2556, 31
  %2575 = trunc i32 %2574 to i8
  store i8 %2575, i8* %.pre-phi29, align 1, !tbaa !2448
  %2576 = lshr i32 %2553, 31
  %2577 = lshr i32 %2555, 31
  %2578 = xor i32 %2574, %2576
  %2579 = xor i32 %2574, %2577
  %2580 = add nuw nsw i32 %2578, %2579
  %2581 = icmp eq i32 %2580, 2
  %2582 = zext i1 %2581 to i8
  store i8 %2582, i8* %.pre-phi31, align 1, !tbaa !2449
  %2583 = sext i32 %2556 to i64
  store i64 %2583, i64* %RCX, align 8, !tbaa !2428
  %2584 = shl nsw i64 %2583, 2
  %2585 = add i64 %2584, %2525
  %2586 = add i64 %3523, 783
  store i64 %2586, i64* %PC, align 8
  %2587 = load <2 x float>, <2 x float>* %5054, align 1
  %2588 = load <2 x i32>, <2 x i32>* %5055, align 1
  %2589 = inttoptr i64 %2585 to float*
  %2590 = load float, float* %2589, align 4
  %2591 = extractelement <2 x float> %2587, i32 0
  %2592 = fmul float %2591, %2590
  store float %2592, float* %5047, align 1, !tbaa !2452
  %2593 = bitcast <2 x float> %2587 to <2 x i32>
  %2594 = extractelement <2 x i32> %2593, i32 1
  store i32 %2594, i32* %5056, align 1, !tbaa !2452
  %2595 = extractelement <2 x i32> %2588, i32 0
  store i32 %2595, i32* %5057, align 1, !tbaa !2452
  %2596 = extractelement <2 x i32> %2588, i32 1
  store i32 %2596, i32* %5058, align 1, !tbaa !2452
  %2597 = load <2 x float>, <2 x float>* %5059, align 1
  %2598 = load <2 x i32>, <2 x i32>* %5060, align 1
  %2599 = load <2 x float>, <2 x float>* %5061, align 1
  %2600 = extractelement <2 x float> %2597, i32 0
  %2601 = extractelement <2 x float> %2599, i32 0
  %2602 = fadd float %2600, %2601
  store float %2602, float* %5039, align 1, !tbaa !2452
  %2603 = bitcast <2 x float> %2597 to <2 x i32>
  %2604 = extractelement <2 x i32> %2603, i32 1
  store i32 %2604, i32* %5062, align 1, !tbaa !2452
  %2605 = extractelement <2 x i32> %2598, i32 0
  store i32 %2605, i32* %5063, align 1, !tbaa !2452
  %2606 = extractelement <2 x i32> %2598, i32 1
  store i32 %2606, i32* %5064, align 1, !tbaa !2452
  %2607 = load i64, i64* %RBP, align 8
  %2608 = add i64 %2607, -16
  %2609 = add i64 %3523, 791
  store i64 %2609, i64* %PC, align 8
  %2610 = inttoptr i64 %2608 to i64*
  %2611 = load i64, i64* %2610, align 8
  store i64 %2611, i64* %RAX, align 8, !tbaa !2428
  %2612 = add i64 %2607, -48
  %2613 = add i64 %3523, 795
  store i64 %2613, i64* %PC, align 8
  %2614 = inttoptr i64 %2612 to i32*
  %2615 = load i32, i32* %2614, align 4
  %2616 = sext i32 %2615 to i64
  store i64 %2616, i64* %RCX, align 8, !tbaa !2428
  %2617 = shl nsw i64 %2616, 2
  %2618 = add i64 %2617, %2611
  %2619 = add i64 %3523, 800
  store i64 %2619, i64* %PC, align 8
  %2620 = load <2 x float>, <2 x float>* %5065, align 1
  %2621 = extractelement <2 x float> %2620, i32 0
  %2622 = inttoptr i64 %2618 to float*
  store float %2621, float* %2622, align 4
  %2623 = load i64, i64* %RBP, align 8
  %2624 = add i64 %2623, -48
  %2625 = load i64, i64* %PC, align 8
  %2626 = add i64 %2625, 3
  store i64 %2626, i64* %PC, align 8
  %2627 = inttoptr i64 %2624 to i32*
  %2628 = load i32, i32* %2627, align 4
  %2629 = add i32 %2628, 1
  %2630 = zext i32 %2629 to i64
  store i64 %2630, i64* %RAX, align 8, !tbaa !2428
  %2631 = icmp eq i32 %2628, -1
  %2632 = icmp eq i32 %2629, 0
  %2633 = or i1 %2631, %2632
  %2634 = zext i1 %2633 to i8
  store i8 %2634, i8* %.pre-phi, align 1, !tbaa !2432
  %2635 = and i32 %2629, 255
  %2636 = tail call i32 @llvm.ctpop.i32(i32 %2635) #8
  %2637 = trunc i32 %2636 to i8
  %2638 = and i8 %2637, 1
  %2639 = xor i8 %2638, 1
  store i8 %2639, i8* %.pre-phi23, align 1, !tbaa !2446
  %2640 = xor i32 %2628, %2629
  %2641 = lshr i32 %2640, 4
  %2642 = trunc i32 %2641 to i8
  %2643 = and i8 %2642, 1
  store i8 %2643, i8* %.pre-phi25, align 1, !tbaa !2450
  %2644 = icmp eq i32 %2629, 0
  %2645 = zext i1 %2644 to i8
  store i8 %2645, i8* %.pre-phi27, align 1, !tbaa !2447
  %2646 = lshr i32 %2629, 31
  %2647 = trunc i32 %2646 to i8
  store i8 %2647, i8* %.pre-phi29, align 1, !tbaa !2448
  %2648 = lshr i32 %2628, 31
  %2649 = xor i32 %2646, %2648
  %2650 = add nuw nsw i32 %2649, %2646
  %2651 = icmp eq i32 %2650, 2
  %2652 = zext i1 %2651 to i8
  store i8 %2652, i8* %.pre-phi31, align 1, !tbaa !2449
  %2653 = add i64 %2625, 9
  store i64 %2653, i64* %PC, align 8
  store i32 %2629, i32* %2627, align 4
  %2654 = load i64, i64* %PC, align 8
  %2655 = add i64 %2654, -821
  store i64 %2655, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_4024b9

block_4021b6:                                     ; preds = %block_4021aa
  %2656 = add i64 %3525, -16
  %2657 = add i64 %3561, 4
  store i64 %2657, i64* %PC, align 8
  %2658 = inttoptr i64 %2656 to i64*
  %2659 = load i64, i64* %2658, align 8
  store i64 %2659, i64* %RAX, align 8, !tbaa !2428
  %2660 = add i64 %3561, 8
  store i64 %2660, i64* %PC, align 8
  %2661 = load i32, i32* %3528, align 4
  %2662 = sext i32 %2661 to i64
  store i64 %2662, i64* %RCX, align 8, !tbaa !2428
  %2663 = shl nsw i64 %2662, 2
  %2664 = add i64 %2663, %2659
  %2665 = add i64 %3561, 13
  store i64 %2665, i64* %PC, align 8
  %2666 = inttoptr i64 %2664 to i32*
  %2667 = load i32, i32* %2666, align 4
  %2668 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %2667, i32* %2668, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3861, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3863, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3865, align 1, !tbaa !2452
  %2669 = add i64 %3525, -32
  %2670 = add i64 %3561, 17
  store i64 %2670, i64* %PC, align 8
  %2671 = inttoptr i64 %2669 to i64*
  %2672 = load i64, i64* %2671, align 8
  store i64 %2672, i64* %RAX, align 8, !tbaa !2428
  %2673 = add i64 %3525, -44
  %2674 = add i64 %3561, 20
  store i64 %2674, i64* %PC, align 8
  %2675 = inttoptr i64 %2673 to i32*
  %2676 = load i32, i32* %2675, align 4
  %2677 = add i32 %2676, -3
  %2678 = zext i32 %2677 to i64
  store i64 %2678, i64* %RDX, align 8, !tbaa !2428
  %2679 = icmp ult i32 %2676, 3
  %2680 = zext i1 %2679 to i8
  store i8 %2680, i8* %.pre-phi, align 1, !tbaa !2432
  %2681 = and i32 %2677, 255
  %2682 = tail call i32 @llvm.ctpop.i32(i32 %2681) #8
  %2683 = trunc i32 %2682 to i8
  %2684 = and i8 %2683, 1
  %2685 = xor i8 %2684, 1
  store i8 %2685, i8* %.pre-phi23, align 1, !tbaa !2446
  %2686 = xor i32 %2676, %2677
  %2687 = lshr i32 %2686, 4
  %2688 = trunc i32 %2687 to i8
  %2689 = and i8 %2688, 1
  store i8 %2689, i8* %.pre-phi25, align 1, !tbaa !2450
  %2690 = icmp eq i32 %2677, 0
  %2691 = zext i1 %2690 to i8
  store i8 %2691, i8* %.pre-phi27, align 1, !tbaa !2447
  %2692 = lshr i32 %2677, 31
  %2693 = trunc i32 %2692 to i8
  store i8 %2693, i8* %.pre-phi29, align 1, !tbaa !2448
  %2694 = lshr i32 %2676, 31
  %2695 = xor i32 %2692, %2694
  %2696 = add nuw nsw i32 %2695, %2694
  %2697 = icmp eq i32 %2696, 2
  %2698 = zext i1 %2697 to i8
  store i8 %2698, i8* %.pre-phi31, align 1, !tbaa !2449
  %2699 = sext i32 %2677 to i64
  store i64 %2699, i64* %RCX, align 8, !tbaa !2428
  %2700 = shl nsw i64 %2699, 2
  %2701 = add i64 %2700, %2672
  %2702 = add i64 %3561, 31
  store i64 %2702, i64* %PC, align 8
  %2703 = inttoptr i64 %2701 to i32*
  %2704 = load i32, i32* %2703, align 4
  %2705 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2704, i32* %2705, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3869, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3871, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3873, align 1, !tbaa !2452
  %2706 = add i64 %3525, -40
  %2707 = add i64 %3561, 35
  store i64 %2707, i64* %PC, align 8
  %2708 = inttoptr i64 %2706 to i64*
  %2709 = load i64, i64* %2708, align 8
  store i64 %2709, i64* %RAX, align 8, !tbaa !2428
  %2710 = add i64 %3525, -24
  %2711 = add i64 %3561, 38
  store i64 %2711, i64* %PC, align 8
  %2712 = inttoptr i64 %2710 to i32*
  %2713 = load i32, i32* %2712, align 4
  %2714 = zext i32 %2713 to i64
  store i64 %2714, i64* %RDX, align 8, !tbaa !2428
  %2715 = add i64 %3561, 41
  store i64 %2715, i64* %PC, align 8
  %2716 = load i32, i32* %2675, align 4
  %2717 = add i32 %2716, -3
  %2718 = zext i32 %2717 to i64
  store i64 %2718, i64* %RSI, align 8, !tbaa !2428
  %2719 = sext i32 %2713 to i64
  %2720 = sext i32 %2717 to i64
  %2721 = mul nsw i64 %2720, %2719
  %2722 = trunc i64 %2721 to i32
  %2723 = and i64 %2721, 4294967295
  store i64 %2723, i64* %RDX, align 8, !tbaa !2428
  %2724 = shl i64 %2721, 32
  %2725 = ashr exact i64 %2724, 32
  %2726 = icmp ne i64 %2725, %2721
  %2727 = zext i1 %2726 to i8
  store i8 %2727, i8* %.pre-phi, align 1, !tbaa !2432
  %2728 = and i32 %2722, 255
  %2729 = tail call i32 @llvm.ctpop.i32(i32 %2728) #8
  %2730 = trunc i32 %2729 to i8
  %2731 = and i8 %2730, 1
  %2732 = xor i8 %2731, 1
  store i8 %2732, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2733 = lshr i32 %2722, 31
  %2734 = trunc i32 %2733 to i8
  store i8 %2734, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2727, i8* %.pre-phi31, align 1, !tbaa !2449
  %2735 = load i64, i64* %RBP, align 8
  %2736 = add i64 %2735, -48
  %2737 = add i64 %3561, 50
  store i64 %2737, i64* %PC, align 8
  %2738 = trunc i64 %2721 to i32
  %2739 = inttoptr i64 %2736 to i32*
  %2740 = load i32, i32* %2739, align 4
  %2741 = add i32 %2740, %2738
  %2742 = zext i32 %2741 to i64
  store i64 %2742, i64* %RDX, align 8, !tbaa !2428
  %2743 = icmp ult i32 %2741, %2738
  %2744 = icmp ult i32 %2741, %2740
  %2745 = or i1 %2743, %2744
  %2746 = zext i1 %2745 to i8
  store i8 %2746, i8* %.pre-phi, align 1, !tbaa !2432
  %2747 = and i32 %2741, 255
  %2748 = tail call i32 @llvm.ctpop.i32(i32 %2747) #8
  %2749 = trunc i32 %2748 to i8
  %2750 = and i8 %2749, 1
  %2751 = xor i8 %2750, 1
  store i8 %2751, i8* %.pre-phi23, align 1, !tbaa !2446
  %2752 = xor i32 %2740, %2738
  %2753 = xor i32 %2752, %2741
  %2754 = lshr i32 %2753, 4
  %2755 = trunc i32 %2754 to i8
  %2756 = and i8 %2755, 1
  store i8 %2756, i8* %.pre-phi25, align 1, !tbaa !2450
  %2757 = icmp eq i32 %2741, 0
  %2758 = zext i1 %2757 to i8
  store i8 %2758, i8* %.pre-phi27, align 1, !tbaa !2447
  %2759 = lshr i32 %2741, 31
  %2760 = trunc i32 %2759 to i8
  store i8 %2760, i8* %.pre-phi29, align 1, !tbaa !2448
  %2761 = lshr i32 %2738, 31
  %2762 = lshr i32 %2740, 31
  %2763 = xor i32 %2759, %2761
  %2764 = xor i32 %2759, %2762
  %2765 = add nuw nsw i32 %2763, %2764
  %2766 = icmp eq i32 %2765, 2
  %2767 = zext i1 %2766 to i8
  store i8 %2767, i8* %.pre-phi31, align 1, !tbaa !2449
  %2768 = sext i32 %2741 to i64
  store i64 %2768, i64* %RCX, align 8, !tbaa !2428
  %2769 = load i64, i64* %RAX, align 8
  %2770 = shl nsw i64 %2768, 2
  %2771 = add i64 %2770, %2769
  %2772 = add i64 %3561, 58
  store i64 %2772, i64* %PC, align 8
  %2773 = load <2 x float>, <2 x float>* %3874, align 1
  %2774 = load <2 x i32>, <2 x i32>* %3875, align 1
  %2775 = inttoptr i64 %2771 to float*
  %2776 = load float, float* %2775, align 4
  %2777 = extractelement <2 x float> %2773, i32 0
  %2778 = fmul float %2777, %2776
  store float %2778, float* %3867, align 1, !tbaa !2452
  %2779 = bitcast <2 x float> %2773 to <2 x i32>
  %2780 = extractelement <2 x i32> %2779, i32 1
  store i32 %2780, i32* %3876, align 1, !tbaa !2452
  %2781 = extractelement <2 x i32> %2774, i32 0
  store i32 %2781, i32* %3877, align 1, !tbaa !2452
  %2782 = extractelement <2 x i32> %2774, i32 1
  store i32 %2782, i32* %3878, align 1, !tbaa !2452
  %2783 = load <2 x float>, <2 x float>* %3879, align 1
  %2784 = load <2 x i32>, <2 x i32>* %3880, align 1
  %2785 = load <2 x float>, <2 x float>* %3881, align 1
  %2786 = extractelement <2 x float> %2783, i32 0
  %2787 = extractelement <2 x float> %2785, i32 0
  %2788 = fadd float %2786, %2787
  store float %2788, float* %3859, align 1, !tbaa !2452
  %2789 = bitcast <2 x float> %2783 to <2 x i32>
  %2790 = extractelement <2 x i32> %2789, i32 1
  store i32 %2790, i32* %3882, align 1, !tbaa !2452
  %2791 = extractelement <2 x i32> %2784, i32 0
  store i32 %2791, i32* %3883, align 1, !tbaa !2452
  %2792 = extractelement <2 x i32> %2784, i32 1
  store i32 %2792, i32* %3884, align 1, !tbaa !2452
  %2793 = add i64 %2735, -32
  %2794 = add i64 %3561, 66
  store i64 %2794, i64* %PC, align 8
  %2795 = inttoptr i64 %2793 to i64*
  %2796 = load i64, i64* %2795, align 8
  store i64 %2796, i64* %RAX, align 8, !tbaa !2428
  %2797 = add i64 %2735, -44
  %2798 = add i64 %3561, 69
  store i64 %2798, i64* %PC, align 8
  %2799 = inttoptr i64 %2797 to i32*
  %2800 = load i32, i32* %2799, align 4
  %2801 = add i32 %2800, -2
  %2802 = zext i32 %2801 to i64
  store i64 %2802, i64* %RDX, align 8, !tbaa !2428
  %2803 = icmp ult i32 %2800, 2
  %2804 = zext i1 %2803 to i8
  store i8 %2804, i8* %.pre-phi, align 1, !tbaa !2432
  %2805 = and i32 %2801, 255
  %2806 = tail call i32 @llvm.ctpop.i32(i32 %2805) #8
  %2807 = trunc i32 %2806 to i8
  %2808 = and i8 %2807, 1
  %2809 = xor i8 %2808, 1
  store i8 %2809, i8* %.pre-phi23, align 1, !tbaa !2446
  %2810 = xor i32 %2800, %2801
  %2811 = lshr i32 %2810, 4
  %2812 = trunc i32 %2811 to i8
  %2813 = and i8 %2812, 1
  store i8 %2813, i8* %.pre-phi25, align 1, !tbaa !2450
  %2814 = icmp eq i32 %2801, 0
  %2815 = zext i1 %2814 to i8
  store i8 %2815, i8* %.pre-phi27, align 1, !tbaa !2447
  %2816 = lshr i32 %2801, 31
  %2817 = trunc i32 %2816 to i8
  store i8 %2817, i8* %.pre-phi29, align 1, !tbaa !2448
  %2818 = lshr i32 %2800, 31
  %2819 = xor i32 %2816, %2818
  %2820 = add nuw nsw i32 %2819, %2818
  %2821 = icmp eq i32 %2820, 2
  %2822 = zext i1 %2821 to i8
  store i8 %2822, i8* %.pre-phi31, align 1, !tbaa !2449
  %2823 = sext i32 %2801 to i64
  store i64 %2823, i64* %RCX, align 8, !tbaa !2428
  %2824 = shl nsw i64 %2823, 2
  %2825 = add i64 %2824, %2796
  %2826 = add i64 %3561, 80
  store i64 %2826, i64* %PC, align 8
  %2827 = inttoptr i64 %2825 to i32*
  %2828 = load i32, i32* %2827, align 4
  %2829 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2828, i32* %2829, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3869, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3871, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3873, align 1, !tbaa !2452
  %2830 = load i64, i64* %RBP, align 8
  %2831 = add i64 %2830, -40
  %2832 = add i64 %3561, 84
  store i64 %2832, i64* %PC, align 8
  %2833 = inttoptr i64 %2831 to i64*
  %2834 = load i64, i64* %2833, align 8
  store i64 %2834, i64* %RAX, align 8, !tbaa !2428
  %2835 = add i64 %2830, -24
  %2836 = add i64 %3561, 87
  store i64 %2836, i64* %PC, align 8
  %2837 = inttoptr i64 %2835 to i32*
  %2838 = load i32, i32* %2837, align 4
  %2839 = zext i32 %2838 to i64
  store i64 %2839, i64* %RDX, align 8, !tbaa !2428
  %2840 = add i64 %2830, -44
  %2841 = add i64 %3561, 90
  store i64 %2841, i64* %PC, align 8
  %2842 = inttoptr i64 %2840 to i32*
  %2843 = load i32, i32* %2842, align 4
  %2844 = add i32 %2843, -2
  %2845 = zext i32 %2844 to i64
  store i64 %2845, i64* %RSI, align 8, !tbaa !2428
  %2846 = sext i32 %2838 to i64
  %2847 = sext i32 %2844 to i64
  %2848 = mul nsw i64 %2847, %2846
  %2849 = trunc i64 %2848 to i32
  %2850 = and i64 %2848, 4294967295
  store i64 %2850, i64* %RDX, align 8, !tbaa !2428
  %2851 = shl i64 %2848, 32
  %2852 = ashr exact i64 %2851, 32
  %2853 = icmp ne i64 %2852, %2848
  %2854 = zext i1 %2853 to i8
  store i8 %2854, i8* %.pre-phi, align 1, !tbaa !2432
  %2855 = and i32 %2849, 255
  %2856 = tail call i32 @llvm.ctpop.i32(i32 %2855) #8
  %2857 = trunc i32 %2856 to i8
  %2858 = and i8 %2857, 1
  %2859 = xor i8 %2858, 1
  store i8 %2859, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2860 = lshr i32 %2849, 31
  %2861 = trunc i32 %2860 to i8
  store i8 %2861, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2854, i8* %.pre-phi31, align 1, !tbaa !2449
  %2862 = add i64 %2830, -48
  %2863 = add i64 %3561, 99
  store i64 %2863, i64* %PC, align 8
  %2864 = trunc i64 %2848 to i32
  %2865 = inttoptr i64 %2862 to i32*
  %2866 = load i32, i32* %2865, align 4
  %2867 = add i32 %2866, %2864
  %2868 = zext i32 %2867 to i64
  store i64 %2868, i64* %RDX, align 8, !tbaa !2428
  %2869 = icmp ult i32 %2867, %2864
  %2870 = icmp ult i32 %2867, %2866
  %2871 = or i1 %2869, %2870
  %2872 = zext i1 %2871 to i8
  store i8 %2872, i8* %.pre-phi, align 1, !tbaa !2432
  %2873 = and i32 %2867, 255
  %2874 = tail call i32 @llvm.ctpop.i32(i32 %2873) #8
  %2875 = trunc i32 %2874 to i8
  %2876 = and i8 %2875, 1
  %2877 = xor i8 %2876, 1
  store i8 %2877, i8* %.pre-phi23, align 1, !tbaa !2446
  %2878 = xor i32 %2866, %2864
  %2879 = xor i32 %2878, %2867
  %2880 = lshr i32 %2879, 4
  %2881 = trunc i32 %2880 to i8
  %2882 = and i8 %2881, 1
  store i8 %2882, i8* %.pre-phi25, align 1, !tbaa !2450
  %2883 = icmp eq i32 %2867, 0
  %2884 = zext i1 %2883 to i8
  store i8 %2884, i8* %.pre-phi27, align 1, !tbaa !2447
  %2885 = lshr i32 %2867, 31
  %2886 = trunc i32 %2885 to i8
  store i8 %2886, i8* %.pre-phi29, align 1, !tbaa !2448
  %2887 = lshr i32 %2864, 31
  %2888 = lshr i32 %2866, 31
  %2889 = xor i32 %2885, %2887
  %2890 = xor i32 %2885, %2888
  %2891 = add nuw nsw i32 %2889, %2890
  %2892 = icmp eq i32 %2891, 2
  %2893 = zext i1 %2892 to i8
  store i8 %2893, i8* %.pre-phi31, align 1, !tbaa !2449
  %2894 = sext i32 %2867 to i64
  store i64 %2894, i64* %RCX, align 8, !tbaa !2428
  %2895 = load i64, i64* %RAX, align 8
  %2896 = shl nsw i64 %2894, 2
  %2897 = add i64 %2896, %2895
  %2898 = add i64 %3561, 107
  store i64 %2898, i64* %PC, align 8
  %2899 = load <2 x float>, <2 x float>* %3874, align 1
  %2900 = load <2 x i32>, <2 x i32>* %3875, align 1
  %2901 = inttoptr i64 %2897 to float*
  %2902 = load float, float* %2901, align 4
  %2903 = extractelement <2 x float> %2899, i32 0
  %2904 = fmul float %2903, %2902
  store float %2904, float* %3867, align 1, !tbaa !2452
  %2905 = bitcast <2 x float> %2899 to <2 x i32>
  %2906 = extractelement <2 x i32> %2905, i32 1
  store i32 %2906, i32* %3876, align 1, !tbaa !2452
  %2907 = extractelement <2 x i32> %2900, i32 0
  store i32 %2907, i32* %3877, align 1, !tbaa !2452
  %2908 = extractelement <2 x i32> %2900, i32 1
  store i32 %2908, i32* %3878, align 1, !tbaa !2452
  %2909 = load <2 x float>, <2 x float>* %3879, align 1
  %2910 = load <2 x i32>, <2 x i32>* %3880, align 1
  %2911 = load <2 x float>, <2 x float>* %3881, align 1
  %2912 = extractelement <2 x float> %2909, i32 0
  %2913 = extractelement <2 x float> %2911, i32 0
  %2914 = fadd float %2912, %2913
  store float %2914, float* %3859, align 1, !tbaa !2452
  %2915 = bitcast <2 x float> %2909 to <2 x i32>
  %2916 = extractelement <2 x i32> %2915, i32 1
  store i32 %2916, i32* %3882, align 1, !tbaa !2452
  %2917 = extractelement <2 x i32> %2910, i32 0
  store i32 %2917, i32* %3883, align 1, !tbaa !2452
  %2918 = extractelement <2 x i32> %2910, i32 1
  store i32 %2918, i32* %3884, align 1, !tbaa !2452
  %2919 = load i64, i64* %RBP, align 8
  %2920 = add i64 %2919, -32
  %2921 = add i64 %3561, 115
  store i64 %2921, i64* %PC, align 8
  %2922 = inttoptr i64 %2920 to i64*
  %2923 = load i64, i64* %2922, align 8
  store i64 %2923, i64* %RAX, align 8, !tbaa !2428
  %2924 = add i64 %2919, -44
  %2925 = add i64 %3561, 118
  store i64 %2925, i64* %PC, align 8
  %2926 = inttoptr i64 %2924 to i32*
  %2927 = load i32, i32* %2926, align 4
  %2928 = add i32 %2927, -1
  %2929 = zext i32 %2928 to i64
  store i64 %2929, i64* %RDX, align 8, !tbaa !2428
  %2930 = icmp eq i32 %2927, 0
  %2931 = zext i1 %2930 to i8
  store i8 %2931, i8* %.pre-phi, align 1, !tbaa !2432
  %2932 = and i32 %2928, 255
  %2933 = tail call i32 @llvm.ctpop.i32(i32 %2932) #8
  %2934 = trunc i32 %2933 to i8
  %2935 = and i8 %2934, 1
  %2936 = xor i8 %2935, 1
  store i8 %2936, i8* %.pre-phi23, align 1, !tbaa !2446
  %2937 = xor i32 %2927, %2928
  %2938 = lshr i32 %2937, 4
  %2939 = trunc i32 %2938 to i8
  %2940 = and i8 %2939, 1
  store i8 %2940, i8* %.pre-phi25, align 1, !tbaa !2450
  %2941 = icmp eq i32 %2928, 0
  %2942 = zext i1 %2941 to i8
  store i8 %2942, i8* %.pre-phi27, align 1, !tbaa !2447
  %2943 = lshr i32 %2928, 31
  %2944 = trunc i32 %2943 to i8
  store i8 %2944, i8* %.pre-phi29, align 1, !tbaa !2448
  %2945 = lshr i32 %2927, 31
  %2946 = xor i32 %2943, %2945
  %2947 = add nuw nsw i32 %2946, %2945
  %2948 = icmp eq i32 %2947, 2
  %2949 = zext i1 %2948 to i8
  store i8 %2949, i8* %.pre-phi31, align 1, !tbaa !2449
  %2950 = sext i32 %2928 to i64
  store i64 %2950, i64* %RCX, align 8, !tbaa !2428
  %2951 = shl nsw i64 %2950, 2
  %2952 = add i64 %2951, %2923
  %2953 = add i64 %3561, 129
  store i64 %2953, i64* %PC, align 8
  %2954 = inttoptr i64 %2952 to i32*
  %2955 = load i32, i32* %2954, align 4
  %2956 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2955, i32* %2956, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3869, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3871, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3873, align 1, !tbaa !2452
  %2957 = add i64 %2919, -40
  %2958 = add i64 %3561, 133
  store i64 %2958, i64* %PC, align 8
  %2959 = inttoptr i64 %2957 to i64*
  %2960 = load i64, i64* %2959, align 8
  store i64 %2960, i64* %RAX, align 8, !tbaa !2428
  %2961 = add i64 %2919, -24
  %2962 = add i64 %3561, 136
  store i64 %2962, i64* %PC, align 8
  %2963 = inttoptr i64 %2961 to i32*
  %2964 = load i32, i32* %2963, align 4
  %2965 = zext i32 %2964 to i64
  store i64 %2965, i64* %RDX, align 8, !tbaa !2428
  %2966 = add i64 %3561, 139
  store i64 %2966, i64* %PC, align 8
  %2967 = load i32, i32* %2926, align 4
  %2968 = add i32 %2967, -1
  %2969 = zext i32 %2968 to i64
  store i64 %2969, i64* %RSI, align 8, !tbaa !2428
  %2970 = sext i32 %2964 to i64
  %2971 = sext i32 %2968 to i64
  %2972 = mul nsw i64 %2971, %2970
  %2973 = trunc i64 %2972 to i32
  %2974 = and i64 %2972, 4294967295
  store i64 %2974, i64* %RDX, align 8, !tbaa !2428
  %2975 = shl i64 %2972, 32
  %2976 = ashr exact i64 %2975, 32
  %2977 = icmp ne i64 %2976, %2972
  %2978 = zext i1 %2977 to i8
  store i8 %2978, i8* %.pre-phi, align 1, !tbaa !2432
  %2979 = and i32 %2973, 255
  %2980 = tail call i32 @llvm.ctpop.i32(i32 %2979) #8
  %2981 = trunc i32 %2980 to i8
  %2982 = and i8 %2981, 1
  %2983 = xor i8 %2982, 1
  store i8 %2983, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2984 = lshr i32 %2973, 31
  %2985 = trunc i32 %2984 to i8
  store i8 %2985, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2978, i8* %.pre-phi31, align 1, !tbaa !2449
  %2986 = load i64, i64* %RBP, align 8
  %2987 = add i64 %2986, -48
  %2988 = add i64 %3561, 148
  store i64 %2988, i64* %PC, align 8
  %2989 = trunc i64 %2972 to i32
  %2990 = inttoptr i64 %2987 to i32*
  %2991 = load i32, i32* %2990, align 4
  %2992 = add i32 %2991, %2989
  %2993 = zext i32 %2992 to i64
  store i64 %2993, i64* %RDX, align 8, !tbaa !2428
  %2994 = icmp ult i32 %2992, %2989
  %2995 = icmp ult i32 %2992, %2991
  %2996 = or i1 %2994, %2995
  %2997 = zext i1 %2996 to i8
  store i8 %2997, i8* %.pre-phi, align 1, !tbaa !2432
  %2998 = and i32 %2992, 255
  %2999 = tail call i32 @llvm.ctpop.i32(i32 %2998) #8
  %3000 = trunc i32 %2999 to i8
  %3001 = and i8 %3000, 1
  %3002 = xor i8 %3001, 1
  store i8 %3002, i8* %.pre-phi23, align 1, !tbaa !2446
  %3003 = xor i32 %2991, %2989
  %3004 = xor i32 %3003, %2992
  %3005 = lshr i32 %3004, 4
  %3006 = trunc i32 %3005 to i8
  %3007 = and i8 %3006, 1
  store i8 %3007, i8* %.pre-phi25, align 1, !tbaa !2450
  %3008 = icmp eq i32 %2992, 0
  %3009 = zext i1 %3008 to i8
  store i8 %3009, i8* %.pre-phi27, align 1, !tbaa !2447
  %3010 = lshr i32 %2992, 31
  %3011 = trunc i32 %3010 to i8
  store i8 %3011, i8* %.pre-phi29, align 1, !tbaa !2448
  %3012 = lshr i32 %2989, 31
  %3013 = lshr i32 %2991, 31
  %3014 = xor i32 %3010, %3012
  %3015 = xor i32 %3010, %3013
  %3016 = add nuw nsw i32 %3014, %3015
  %3017 = icmp eq i32 %3016, 2
  %3018 = zext i1 %3017 to i8
  store i8 %3018, i8* %.pre-phi31, align 1, !tbaa !2449
  %3019 = sext i32 %2992 to i64
  store i64 %3019, i64* %RCX, align 8, !tbaa !2428
  %3020 = load i64, i64* %RAX, align 8
  %3021 = shl nsw i64 %3019, 2
  %3022 = add i64 %3021, %3020
  %3023 = add i64 %3561, 156
  store i64 %3023, i64* %PC, align 8
  %3024 = load <2 x float>, <2 x float>* %3874, align 1
  %3025 = load <2 x i32>, <2 x i32>* %3875, align 1
  %3026 = inttoptr i64 %3022 to float*
  %3027 = load float, float* %3026, align 4
  %3028 = extractelement <2 x float> %3024, i32 0
  %3029 = fmul float %3028, %3027
  store float %3029, float* %3867, align 1, !tbaa !2452
  %3030 = bitcast <2 x float> %3024 to <2 x i32>
  %3031 = extractelement <2 x i32> %3030, i32 1
  store i32 %3031, i32* %3876, align 1, !tbaa !2452
  %3032 = extractelement <2 x i32> %3025, i32 0
  store i32 %3032, i32* %3877, align 1, !tbaa !2452
  %3033 = extractelement <2 x i32> %3025, i32 1
  store i32 %3033, i32* %3878, align 1, !tbaa !2452
  %3034 = load <2 x float>, <2 x float>* %3879, align 1
  %3035 = load <2 x i32>, <2 x i32>* %3880, align 1
  %3036 = load <2 x float>, <2 x float>* %3881, align 1
  %3037 = extractelement <2 x float> %3034, i32 0
  %3038 = extractelement <2 x float> %3036, i32 0
  %3039 = fadd float %3037, %3038
  store float %3039, float* %3859, align 1, !tbaa !2452
  %3040 = bitcast <2 x float> %3034 to <2 x i32>
  %3041 = extractelement <2 x i32> %3040, i32 1
  store i32 %3041, i32* %3882, align 1, !tbaa !2452
  %3042 = extractelement <2 x i32> %3035, i32 0
  store i32 %3042, i32* %3883, align 1, !tbaa !2452
  %3043 = extractelement <2 x i32> %3035, i32 1
  store i32 %3043, i32* %3884, align 1, !tbaa !2452
  %3044 = add i64 %2986, -32
  %3045 = add i64 %3561, 164
  store i64 %3045, i64* %PC, align 8
  %3046 = inttoptr i64 %3044 to i64*
  %3047 = load i64, i64* %3046, align 8
  store i64 %3047, i64* %RAX, align 8, !tbaa !2428
  %3048 = add i64 %2986, -44
  %3049 = add i64 %3561, 168
  store i64 %3049, i64* %PC, align 8
  %3050 = inttoptr i64 %3048 to i32*
  %3051 = load i32, i32* %3050, align 4
  %3052 = sext i32 %3051 to i64
  store i64 %3052, i64* %RCX, align 8, !tbaa !2428
  %3053 = shl nsw i64 %3052, 2
  %3054 = add i64 %3053, %3047
  %3055 = add i64 %3561, 173
  store i64 %3055, i64* %PC, align 8
  %3056 = inttoptr i64 %3054 to i32*
  %3057 = load i32, i32* %3056, align 4
  %3058 = bitcast %union.VectorReg* %8 to i32*
  store i32 %3057, i32* %3058, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3869, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3871, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3873, align 1, !tbaa !2452
  %3059 = load i64, i64* %RBP, align 8
  %3060 = add i64 %3059, -40
  %3061 = add i64 %3561, 177
  store i64 %3061, i64* %PC, align 8
  %3062 = inttoptr i64 %3060 to i64*
  %3063 = load i64, i64* %3062, align 8
  store i64 %3063, i64* %RAX, align 8, !tbaa !2428
  %3064 = add i64 %3059, -24
  %3065 = add i64 %3561, 180
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3064 to i32*
  %3067 = load i32, i32* %3066, align 4
  %3068 = zext i32 %3067 to i64
  store i64 %3068, i64* %RDX, align 8, !tbaa !2428
  %3069 = add i64 %3059, -44
  %3070 = add i64 %3561, 184
  store i64 %3070, i64* %PC, align 8
  %3071 = inttoptr i64 %3069 to i32*
  %3072 = load i32, i32* %3071, align 4
  %3073 = sext i32 %3067 to i64
  %3074 = sext i32 %3072 to i64
  %3075 = mul nsw i64 %3074, %3073
  %3076 = trunc i64 %3075 to i32
  %3077 = and i64 %3075, 4294967295
  store i64 %3077, i64* %RDX, align 8, !tbaa !2428
  %3078 = shl i64 %3075, 32
  %3079 = ashr exact i64 %3078, 32
  %3080 = icmp ne i64 %3079, %3075
  %3081 = zext i1 %3080 to i8
  store i8 %3081, i8* %.pre-phi, align 1, !tbaa !2432
  %3082 = and i32 %3076, 255
  %3083 = tail call i32 @llvm.ctpop.i32(i32 %3082) #8
  %3084 = trunc i32 %3083 to i8
  %3085 = and i8 %3084, 1
  %3086 = xor i8 %3085, 1
  store i8 %3086, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3087 = lshr i32 %3076, 31
  %3088 = trunc i32 %3087 to i8
  store i8 %3088, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3081, i8* %.pre-phi31, align 1, !tbaa !2449
  %3089 = add i64 %3059, -48
  %3090 = add i64 %3561, 187
  store i64 %3090, i64* %PC, align 8
  %3091 = trunc i64 %3075 to i32
  %3092 = inttoptr i64 %3089 to i32*
  %3093 = load i32, i32* %3092, align 4
  %3094 = add i32 %3093, %3091
  %3095 = zext i32 %3094 to i64
  store i64 %3095, i64* %RDX, align 8, !tbaa !2428
  %3096 = icmp ult i32 %3094, %3091
  %3097 = icmp ult i32 %3094, %3093
  %3098 = or i1 %3096, %3097
  %3099 = zext i1 %3098 to i8
  store i8 %3099, i8* %.pre-phi, align 1, !tbaa !2432
  %3100 = and i32 %3094, 255
  %3101 = tail call i32 @llvm.ctpop.i32(i32 %3100) #8
  %3102 = trunc i32 %3101 to i8
  %3103 = and i8 %3102, 1
  %3104 = xor i8 %3103, 1
  store i8 %3104, i8* %.pre-phi23, align 1, !tbaa !2446
  %3105 = xor i32 %3093, %3091
  %3106 = xor i32 %3105, %3094
  %3107 = lshr i32 %3106, 4
  %3108 = trunc i32 %3107 to i8
  %3109 = and i8 %3108, 1
  store i8 %3109, i8* %.pre-phi25, align 1, !tbaa !2450
  %3110 = icmp eq i32 %3094, 0
  %3111 = zext i1 %3110 to i8
  store i8 %3111, i8* %.pre-phi27, align 1, !tbaa !2447
  %3112 = lshr i32 %3094, 31
  %3113 = trunc i32 %3112 to i8
  store i8 %3113, i8* %.pre-phi29, align 1, !tbaa !2448
  %3114 = lshr i32 %3091, 31
  %3115 = lshr i32 %3093, 31
  %3116 = xor i32 %3112, %3114
  %3117 = xor i32 %3112, %3115
  %3118 = add nuw nsw i32 %3116, %3117
  %3119 = icmp eq i32 %3118, 2
  %3120 = zext i1 %3119 to i8
  store i8 %3120, i8* %.pre-phi31, align 1, !tbaa !2449
  %3121 = sext i32 %3094 to i64
  store i64 %3121, i64* %RCX, align 8, !tbaa !2428
  %3122 = shl nsw i64 %3121, 2
  %3123 = add i64 %3122, %3063
  %3124 = add i64 %3561, 195
  store i64 %3124, i64* %PC, align 8
  %3125 = load <2 x float>, <2 x float>* %3874, align 1
  %3126 = load <2 x i32>, <2 x i32>* %3875, align 1
  %3127 = inttoptr i64 %3123 to float*
  %3128 = load float, float* %3127, align 4
  %3129 = extractelement <2 x float> %3125, i32 0
  %3130 = fmul float %3129, %3128
  store float %3130, float* %3867, align 1, !tbaa !2452
  %3131 = bitcast <2 x float> %3125 to <2 x i32>
  %3132 = extractelement <2 x i32> %3131, i32 1
  store i32 %3132, i32* %3876, align 1, !tbaa !2452
  %3133 = extractelement <2 x i32> %3126, i32 0
  store i32 %3133, i32* %3877, align 1, !tbaa !2452
  %3134 = extractelement <2 x i32> %3126, i32 1
  store i32 %3134, i32* %3878, align 1, !tbaa !2452
  %3135 = load <2 x float>, <2 x float>* %3879, align 1
  %3136 = load <2 x i32>, <2 x i32>* %3880, align 1
  %3137 = load <2 x float>, <2 x float>* %3881, align 1
  %3138 = extractelement <2 x float> %3135, i32 0
  %3139 = extractelement <2 x float> %3137, i32 0
  %3140 = fadd float %3138, %3139
  store float %3140, float* %3859, align 1, !tbaa !2452
  %3141 = bitcast <2 x float> %3135 to <2 x i32>
  %3142 = extractelement <2 x i32> %3141, i32 1
  store i32 %3142, i32* %3882, align 1, !tbaa !2452
  %3143 = extractelement <2 x i32> %3136, i32 0
  store i32 %3143, i32* %3883, align 1, !tbaa !2452
  %3144 = extractelement <2 x i32> %3136, i32 1
  store i32 %3144, i32* %3884, align 1, !tbaa !2452
  %3145 = load i64, i64* %RBP, align 8
  %3146 = add i64 %3145, -16
  %3147 = add i64 %3561, 203
  store i64 %3147, i64* %PC, align 8
  %3148 = inttoptr i64 %3146 to i64*
  %3149 = load i64, i64* %3148, align 8
  store i64 %3149, i64* %RAX, align 8, !tbaa !2428
  %3150 = add i64 %3145, -48
  %3151 = add i64 %3561, 207
  store i64 %3151, i64* %PC, align 8
  %3152 = inttoptr i64 %3150 to i32*
  %3153 = load i32, i32* %3152, align 4
  %3154 = sext i32 %3153 to i64
  store i64 %3154, i64* %RCX, align 8, !tbaa !2428
  %3155 = shl nsw i64 %3154, 2
  %3156 = add i64 %3155, %3149
  %3157 = add i64 %3561, 212
  store i64 %3157, i64* %PC, align 8
  %3158 = load <2 x float>, <2 x float>* %3885, align 1
  %3159 = extractelement <2 x float> %3158, i32 0
  %3160 = inttoptr i64 %3156 to float*
  store float %3159, float* %3160, align 4
  %3161 = load i64, i64* %RBP, align 8
  %3162 = add i64 %3161, -48
  %3163 = load i64, i64* %PC, align 8
  %3164 = add i64 %3163, 3
  store i64 %3164, i64* %PC, align 8
  %3165 = inttoptr i64 %3162 to i32*
  %3166 = load i32, i32* %3165, align 4
  %3167 = add i32 %3166, 1
  %3168 = zext i32 %3167 to i64
  store i64 %3168, i64* %RAX, align 8, !tbaa !2428
  %3169 = icmp eq i32 %3166, -1
  %3170 = icmp eq i32 %3167, 0
  %3171 = or i1 %3169, %3170
  %3172 = zext i1 %3171 to i8
  store i8 %3172, i8* %.pre-phi, align 1, !tbaa !2432
  %3173 = and i32 %3167, 255
  %3174 = tail call i32 @llvm.ctpop.i32(i32 %3173) #8
  %3175 = trunc i32 %3174 to i8
  %3176 = and i8 %3175, 1
  %3177 = xor i8 %3176, 1
  store i8 %3177, i8* %.pre-phi23, align 1, !tbaa !2446
  %3178 = xor i32 %3166, %3167
  %3179 = lshr i32 %3178, 4
  %3180 = trunc i32 %3179 to i8
  %3181 = and i8 %3180, 1
  store i8 %3181, i8* %.pre-phi25, align 1, !tbaa !2450
  %3182 = icmp eq i32 %3167, 0
  %3183 = zext i1 %3182 to i8
  store i8 %3183, i8* %.pre-phi27, align 1, !tbaa !2447
  %3184 = lshr i32 %3167, 31
  %3185 = trunc i32 %3184 to i8
  store i8 %3185, i8* %.pre-phi29, align 1, !tbaa !2448
  %3186 = lshr i32 %3166, 31
  %3187 = xor i32 %3184, %3186
  %3188 = add nuw nsw i32 %3187, %3184
  %3189 = icmp eq i32 %3188, 2
  %3190 = zext i1 %3189 to i8
  store i8 %3190, i8* %.pre-phi31, align 1, !tbaa !2449
  %3191 = add i64 %3163, 9
  store i64 %3191, i64* %PC, align 8
  store i32 %3167, i32* %3165, align 4
  %3192 = load i64, i64* %PC, align 8
  %3193 = add i64 %3192, -233
  store i64 %3193, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_4021aa

block_4020b4:                                     ; preds = %block_402059
  %3194 = add i64 %3751, 5
  store i64 %3194, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_4020b9

block_4020f5:                                     ; preds = %block_4020e9
  %3195 = add i64 %3639, -16
  %3196 = add i64 %3675, 4
  store i64 %3196, i64* %PC, align 8
  %3197 = inttoptr i64 %3195 to i64*
  %3198 = load i64, i64* %3197, align 8
  store i64 %3198, i64* %RAX, align 8, !tbaa !2428
  %3199 = add i64 %3675, 8
  store i64 %3199, i64* %PC, align 8
  %3200 = load i32, i32* %3642, align 4
  %3201 = sext i32 %3200 to i64
  store i64 %3201, i64* %RCX, align 8, !tbaa !2428
  %3202 = shl nsw i64 %3201, 2
  %3203 = add i64 %3202, %3198
  %3204 = add i64 %3675, 13
  store i64 %3204, i64* %PC, align 8
  %3205 = inttoptr i64 %3203 to i32*
  %3206 = load i32, i32* %3205, align 4
  %3207 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %3206, i32* %3207, align 1, !tbaa !2452
  store float 0.000000e+00, float* %169, align 1, !tbaa !2452
  store float 0.000000e+00, float* %171, align 1, !tbaa !2452
  store float 0.000000e+00, float* %173, align 1, !tbaa !2452
  %3208 = add i64 %3639, -32
  %3209 = add i64 %3675, 17
  store i64 %3209, i64* %PC, align 8
  %3210 = inttoptr i64 %3208 to i64*
  %3211 = load i64, i64* %3210, align 8
  store i64 %3211, i64* %RAX, align 8, !tbaa !2428
  %3212 = add i64 %3639, -44
  %3213 = add i64 %3675, 20
  store i64 %3213, i64* %PC, align 8
  %3214 = inttoptr i64 %3212 to i32*
  %3215 = load i32, i32* %3214, align 4
  %3216 = add i32 %3215, -1
  %3217 = zext i32 %3216 to i64
  store i64 %3217, i64* %RDX, align 8, !tbaa !2428
  %3218 = icmp eq i32 %3215, 0
  %3219 = zext i1 %3218 to i8
  store i8 %3219, i8* %.pre-phi, align 1, !tbaa !2432
  %3220 = and i32 %3216, 255
  %3221 = tail call i32 @llvm.ctpop.i32(i32 %3220) #8
  %3222 = trunc i32 %3221 to i8
  %3223 = and i8 %3222, 1
  %3224 = xor i8 %3223, 1
  store i8 %3224, i8* %.pre-phi23, align 1, !tbaa !2446
  %3225 = xor i32 %3215, %3216
  %3226 = lshr i32 %3225, 4
  %3227 = trunc i32 %3226 to i8
  %3228 = and i8 %3227, 1
  store i8 %3228, i8* %.pre-phi25, align 1, !tbaa !2450
  %3229 = icmp eq i32 %3216, 0
  %3230 = zext i1 %3229 to i8
  store i8 %3230, i8* %.pre-phi27, align 1, !tbaa !2447
  %3231 = lshr i32 %3216, 31
  %3232 = trunc i32 %3231 to i8
  store i8 %3232, i8* %.pre-phi29, align 1, !tbaa !2448
  %3233 = lshr i32 %3215, 31
  %3234 = xor i32 %3231, %3233
  %3235 = add nuw nsw i32 %3234, %3233
  %3236 = icmp eq i32 %3235, 2
  %3237 = zext i1 %3236 to i8
  store i8 %3237, i8* %.pre-phi31, align 1, !tbaa !2449
  %3238 = sext i32 %3216 to i64
  store i64 %3238, i64* %RCX, align 8, !tbaa !2428
  %3239 = shl nsw i64 %3238, 2
  %3240 = add i64 %3239, %3211
  %3241 = add i64 %3675, 31
  store i64 %3241, i64* %PC, align 8
  %3242 = inttoptr i64 %3240 to i32*
  %3243 = load i32, i32* %3242, align 4
  %3244 = bitcast %union.VectorReg* %8 to i32*
  store i32 %3243, i32* %3244, align 1, !tbaa !2452
  store float 0.000000e+00, float* %177, align 1, !tbaa !2452
  store float 0.000000e+00, float* %179, align 1, !tbaa !2452
  store float 0.000000e+00, float* %181, align 1, !tbaa !2452
  %3245 = add i64 %3639, -40
  %3246 = add i64 %3675, 35
  store i64 %3246, i64* %PC, align 8
  %3247 = inttoptr i64 %3245 to i64*
  %3248 = load i64, i64* %3247, align 8
  store i64 %3248, i64* %RAX, align 8, !tbaa !2428
  %3249 = add i64 %3639, -24
  %3250 = add i64 %3675, 38
  store i64 %3250, i64* %PC, align 8
  %3251 = inttoptr i64 %3249 to i32*
  %3252 = load i32, i32* %3251, align 4
  %3253 = zext i32 %3252 to i64
  store i64 %3253, i64* %RDX, align 8, !tbaa !2428
  %3254 = add i64 %3675, 41
  store i64 %3254, i64* %PC, align 8
  %3255 = load i32, i32* %3214, align 4
  %3256 = add i32 %3255, -1
  %3257 = zext i32 %3256 to i64
  store i64 %3257, i64* %RSI, align 8, !tbaa !2428
  %3258 = sext i32 %3252 to i64
  %3259 = sext i32 %3256 to i64
  %3260 = mul nsw i64 %3259, %3258
  %3261 = trunc i64 %3260 to i32
  %3262 = and i64 %3260, 4294967295
  store i64 %3262, i64* %RDX, align 8, !tbaa !2428
  %3263 = shl i64 %3260, 32
  %3264 = ashr exact i64 %3263, 32
  %3265 = icmp ne i64 %3264, %3260
  %3266 = zext i1 %3265 to i8
  store i8 %3266, i8* %.pre-phi, align 1, !tbaa !2432
  %3267 = and i32 %3261, 255
  %3268 = tail call i32 @llvm.ctpop.i32(i32 %3267) #8
  %3269 = trunc i32 %3268 to i8
  %3270 = and i8 %3269, 1
  %3271 = xor i8 %3270, 1
  store i8 %3271, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3272 = lshr i32 %3261, 31
  %3273 = trunc i32 %3272 to i8
  store i8 %3273, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3266, i8* %.pre-phi31, align 1, !tbaa !2449
  %3274 = load i64, i64* %RBP, align 8
  %3275 = add i64 %3274, -48
  %3276 = add i64 %3675, 50
  store i64 %3276, i64* %PC, align 8
  %3277 = trunc i64 %3260 to i32
  %3278 = inttoptr i64 %3275 to i32*
  %3279 = load i32, i32* %3278, align 4
  %3280 = add i32 %3279, %3277
  %3281 = zext i32 %3280 to i64
  store i64 %3281, i64* %RDX, align 8, !tbaa !2428
  %3282 = icmp ult i32 %3280, %3277
  %3283 = icmp ult i32 %3280, %3279
  %3284 = or i1 %3282, %3283
  %3285 = zext i1 %3284 to i8
  store i8 %3285, i8* %.pre-phi, align 1, !tbaa !2432
  %3286 = and i32 %3280, 255
  %3287 = tail call i32 @llvm.ctpop.i32(i32 %3286) #8
  %3288 = trunc i32 %3287 to i8
  %3289 = and i8 %3288, 1
  %3290 = xor i8 %3289, 1
  store i8 %3290, i8* %.pre-phi23, align 1, !tbaa !2446
  %3291 = xor i32 %3279, %3277
  %3292 = xor i32 %3291, %3280
  %3293 = lshr i32 %3292, 4
  %3294 = trunc i32 %3293 to i8
  %3295 = and i8 %3294, 1
  store i8 %3295, i8* %.pre-phi25, align 1, !tbaa !2450
  %3296 = icmp eq i32 %3280, 0
  %3297 = zext i1 %3296 to i8
  store i8 %3297, i8* %.pre-phi27, align 1, !tbaa !2447
  %3298 = lshr i32 %3280, 31
  %3299 = trunc i32 %3298 to i8
  store i8 %3299, i8* %.pre-phi29, align 1, !tbaa !2448
  %3300 = lshr i32 %3277, 31
  %3301 = lshr i32 %3279, 31
  %3302 = xor i32 %3298, %3300
  %3303 = xor i32 %3298, %3301
  %3304 = add nuw nsw i32 %3302, %3303
  %3305 = icmp eq i32 %3304, 2
  %3306 = zext i1 %3305 to i8
  store i8 %3306, i8* %.pre-phi31, align 1, !tbaa !2449
  %3307 = sext i32 %3280 to i64
  store i64 %3307, i64* %RCX, align 8, !tbaa !2428
  %3308 = load i64, i64* %RAX, align 8
  %3309 = shl nsw i64 %3307, 2
  %3310 = add i64 %3309, %3308
  %3311 = add i64 %3675, 58
  store i64 %3311, i64* %PC, align 8
  %3312 = load <2 x float>, <2 x float>* %182, align 1
  %3313 = load <2 x i32>, <2 x i32>* %183, align 1
  %3314 = inttoptr i64 %3310 to float*
  %3315 = load float, float* %3314, align 4
  %3316 = extractelement <2 x float> %3312, i32 0
  %3317 = fmul float %3316, %3315
  store float %3317, float* %175, align 1, !tbaa !2452
  %3318 = bitcast <2 x float> %3312 to <2 x i32>
  %3319 = extractelement <2 x i32> %3318, i32 1
  store i32 %3319, i32* %184, align 1, !tbaa !2452
  %3320 = extractelement <2 x i32> %3313, i32 0
  store i32 %3320, i32* %185, align 1, !tbaa !2452
  %3321 = extractelement <2 x i32> %3313, i32 1
  store i32 %3321, i32* %186, align 1, !tbaa !2452
  %3322 = load <2 x float>, <2 x float>* %187, align 1
  %3323 = load <2 x i32>, <2 x i32>* %188, align 1
  %3324 = load <2 x float>, <2 x float>* %189, align 1
  %3325 = extractelement <2 x float> %3322, i32 0
  %3326 = extractelement <2 x float> %3324, i32 0
  %3327 = fadd float %3325, %3326
  store float %3327, float* %167, align 1, !tbaa !2452
  %3328 = bitcast <2 x float> %3322 to <2 x i32>
  %3329 = extractelement <2 x i32> %3328, i32 1
  store i32 %3329, i32* %190, align 1, !tbaa !2452
  %3330 = extractelement <2 x i32> %3323, i32 0
  store i32 %3330, i32* %191, align 1, !tbaa !2452
  %3331 = extractelement <2 x i32> %3323, i32 1
  store i32 %3331, i32* %192, align 1, !tbaa !2452
  %3332 = add i64 %3274, -32
  %3333 = add i64 %3675, 66
  store i64 %3333, i64* %PC, align 8
  %3334 = inttoptr i64 %3332 to i64*
  %3335 = load i64, i64* %3334, align 8
  store i64 %3335, i64* %RAX, align 8, !tbaa !2428
  %3336 = add i64 %3274, -44
  %3337 = add i64 %3675, 70
  store i64 %3337, i64* %PC, align 8
  %3338 = inttoptr i64 %3336 to i32*
  %3339 = load i32, i32* %3338, align 4
  %3340 = sext i32 %3339 to i64
  store i64 %3340, i64* %RCX, align 8, !tbaa !2428
  %3341 = shl nsw i64 %3340, 2
  %3342 = add i64 %3341, %3335
  %3343 = add i64 %3675, 75
  store i64 %3343, i64* %PC, align 8
  %3344 = inttoptr i64 %3342 to i32*
  %3345 = load i32, i32* %3344, align 4
  %3346 = bitcast %union.VectorReg* %8 to i32*
  store i32 %3345, i32* %3346, align 1, !tbaa !2452
  store float 0.000000e+00, float* %177, align 1, !tbaa !2452
  store float 0.000000e+00, float* %179, align 1, !tbaa !2452
  store float 0.000000e+00, float* %181, align 1, !tbaa !2452
  %3347 = load i64, i64* %RBP, align 8
  %3348 = add i64 %3347, -40
  %3349 = add i64 %3675, 79
  store i64 %3349, i64* %PC, align 8
  %3350 = inttoptr i64 %3348 to i64*
  %3351 = load i64, i64* %3350, align 8
  store i64 %3351, i64* %RAX, align 8, !tbaa !2428
  %3352 = add i64 %3347, -24
  %3353 = add i64 %3675, 82
  store i64 %3353, i64* %PC, align 8
  %3354 = inttoptr i64 %3352 to i32*
  %3355 = load i32, i32* %3354, align 4
  %3356 = zext i32 %3355 to i64
  store i64 %3356, i64* %RDX, align 8, !tbaa !2428
  %3357 = add i64 %3347, -44
  %3358 = add i64 %3675, 86
  store i64 %3358, i64* %PC, align 8
  %3359 = inttoptr i64 %3357 to i32*
  %3360 = load i32, i32* %3359, align 4
  %3361 = sext i32 %3355 to i64
  %3362 = sext i32 %3360 to i64
  %3363 = mul nsw i64 %3362, %3361
  %3364 = trunc i64 %3363 to i32
  %3365 = and i64 %3363, 4294967295
  store i64 %3365, i64* %RDX, align 8, !tbaa !2428
  %3366 = shl i64 %3363, 32
  %3367 = ashr exact i64 %3366, 32
  %3368 = icmp ne i64 %3367, %3363
  %3369 = zext i1 %3368 to i8
  store i8 %3369, i8* %.pre-phi, align 1, !tbaa !2432
  %3370 = and i32 %3364, 255
  %3371 = tail call i32 @llvm.ctpop.i32(i32 %3370) #8
  %3372 = trunc i32 %3371 to i8
  %3373 = and i8 %3372, 1
  %3374 = xor i8 %3373, 1
  store i8 %3374, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3375 = lshr i32 %3364, 31
  %3376 = trunc i32 %3375 to i8
  store i8 %3376, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3369, i8* %.pre-phi31, align 1, !tbaa !2449
  %3377 = add i64 %3347, -48
  %3378 = add i64 %3675, 89
  store i64 %3378, i64* %PC, align 8
  %3379 = trunc i64 %3363 to i32
  %3380 = inttoptr i64 %3377 to i32*
  %3381 = load i32, i32* %3380, align 4
  %3382 = add i32 %3381, %3379
  %3383 = zext i32 %3382 to i64
  store i64 %3383, i64* %RDX, align 8, !tbaa !2428
  %3384 = icmp ult i32 %3382, %3379
  %3385 = icmp ult i32 %3382, %3381
  %3386 = or i1 %3384, %3385
  %3387 = zext i1 %3386 to i8
  store i8 %3387, i8* %.pre-phi, align 1, !tbaa !2432
  %3388 = and i32 %3382, 255
  %3389 = tail call i32 @llvm.ctpop.i32(i32 %3388) #8
  %3390 = trunc i32 %3389 to i8
  %3391 = and i8 %3390, 1
  %3392 = xor i8 %3391, 1
  store i8 %3392, i8* %.pre-phi23, align 1, !tbaa !2446
  %3393 = xor i32 %3381, %3379
  %3394 = xor i32 %3393, %3382
  %3395 = lshr i32 %3394, 4
  %3396 = trunc i32 %3395 to i8
  %3397 = and i8 %3396, 1
  store i8 %3397, i8* %.pre-phi25, align 1, !tbaa !2450
  %3398 = icmp eq i32 %3382, 0
  %3399 = zext i1 %3398 to i8
  store i8 %3399, i8* %.pre-phi27, align 1, !tbaa !2447
  %3400 = lshr i32 %3382, 31
  %3401 = trunc i32 %3400 to i8
  store i8 %3401, i8* %.pre-phi29, align 1, !tbaa !2448
  %3402 = lshr i32 %3379, 31
  %3403 = lshr i32 %3381, 31
  %3404 = xor i32 %3400, %3402
  %3405 = xor i32 %3400, %3403
  %3406 = add nuw nsw i32 %3404, %3405
  %3407 = icmp eq i32 %3406, 2
  %3408 = zext i1 %3407 to i8
  store i8 %3408, i8* %.pre-phi31, align 1, !tbaa !2449
  %3409 = sext i32 %3382 to i64
  store i64 %3409, i64* %RCX, align 8, !tbaa !2428
  %3410 = shl nsw i64 %3409, 2
  %3411 = add i64 %3410, %3351
  %3412 = add i64 %3675, 97
  store i64 %3412, i64* %PC, align 8
  %3413 = load <2 x float>, <2 x float>* %182, align 1
  %3414 = load <2 x i32>, <2 x i32>* %183, align 1
  %3415 = inttoptr i64 %3411 to float*
  %3416 = load float, float* %3415, align 4
  %3417 = extractelement <2 x float> %3413, i32 0
  %3418 = fmul float %3417, %3416
  store float %3418, float* %175, align 1, !tbaa !2452
  %3419 = bitcast <2 x float> %3413 to <2 x i32>
  %3420 = extractelement <2 x i32> %3419, i32 1
  store i32 %3420, i32* %184, align 1, !tbaa !2452
  %3421 = extractelement <2 x i32> %3414, i32 0
  store i32 %3421, i32* %185, align 1, !tbaa !2452
  %3422 = extractelement <2 x i32> %3414, i32 1
  store i32 %3422, i32* %186, align 1, !tbaa !2452
  %3423 = load <2 x float>, <2 x float>* %187, align 1
  %3424 = load <2 x i32>, <2 x i32>* %188, align 1
  %3425 = load <2 x float>, <2 x float>* %189, align 1
  %3426 = extractelement <2 x float> %3423, i32 0
  %3427 = extractelement <2 x float> %3425, i32 0
  %3428 = fadd float %3426, %3427
  store float %3428, float* %167, align 1, !tbaa !2452
  %3429 = bitcast <2 x float> %3423 to <2 x i32>
  %3430 = extractelement <2 x i32> %3429, i32 1
  store i32 %3430, i32* %190, align 1, !tbaa !2452
  %3431 = extractelement <2 x i32> %3424, i32 0
  store i32 %3431, i32* %191, align 1, !tbaa !2452
  %3432 = extractelement <2 x i32> %3424, i32 1
  store i32 %3432, i32* %192, align 1, !tbaa !2452
  %3433 = load i64, i64* %RBP, align 8
  %3434 = add i64 %3433, -16
  %3435 = add i64 %3675, 105
  store i64 %3435, i64* %PC, align 8
  %3436 = inttoptr i64 %3434 to i64*
  %3437 = load i64, i64* %3436, align 8
  store i64 %3437, i64* %RAX, align 8, !tbaa !2428
  %3438 = add i64 %3433, -48
  %3439 = add i64 %3675, 109
  store i64 %3439, i64* %PC, align 8
  %3440 = inttoptr i64 %3438 to i32*
  %3441 = load i32, i32* %3440, align 4
  %3442 = sext i32 %3441 to i64
  store i64 %3442, i64* %RCX, align 8, !tbaa !2428
  %3443 = shl nsw i64 %3442, 2
  %3444 = add i64 %3443, %3437
  %3445 = add i64 %3675, 114
  store i64 %3445, i64* %PC, align 8
  %3446 = load <2 x float>, <2 x float>* %193, align 1
  %3447 = extractelement <2 x float> %3446, i32 0
  %3448 = inttoptr i64 %3444 to float*
  store float %3447, float* %3448, align 4
  %3449 = load i64, i64* %RBP, align 8
  %3450 = add i64 %3449, -48
  %3451 = load i64, i64* %PC, align 8
  %3452 = add i64 %3451, 3
  store i64 %3452, i64* %PC, align 8
  %3453 = inttoptr i64 %3450 to i32*
  %3454 = load i32, i32* %3453, align 4
  %3455 = add i32 %3454, 1
  %3456 = zext i32 %3455 to i64
  store i64 %3456, i64* %RAX, align 8, !tbaa !2428
  %3457 = icmp eq i32 %3454, -1
  %3458 = icmp eq i32 %3455, 0
  %3459 = or i1 %3457, %3458
  %3460 = zext i1 %3459 to i8
  store i8 %3460, i8* %.pre-phi, align 1, !tbaa !2432
  %3461 = and i32 %3455, 255
  %3462 = tail call i32 @llvm.ctpop.i32(i32 %3461) #8
  %3463 = trunc i32 %3462 to i8
  %3464 = and i8 %3463, 1
  %3465 = xor i8 %3464, 1
  store i8 %3465, i8* %.pre-phi23, align 1, !tbaa !2446
  %3466 = xor i32 %3454, %3455
  %3467 = lshr i32 %3466, 4
  %3468 = trunc i32 %3467 to i8
  %3469 = and i8 %3468, 1
  store i8 %3469, i8* %.pre-phi25, align 1, !tbaa !2450
  %3470 = icmp eq i32 %3455, 0
  %3471 = zext i1 %3470 to i8
  store i8 %3471, i8* %.pre-phi27, align 1, !tbaa !2447
  %3472 = lshr i32 %3455, 31
  %3473 = trunc i32 %3472 to i8
  store i8 %3473, i8* %.pre-phi29, align 1, !tbaa !2448
  %3474 = lshr i32 %3454, 31
  %3475 = xor i32 %3472, %3474
  %3476 = add nuw nsw i32 %3475, %3472
  %3477 = icmp eq i32 %3476, 2
  %3478 = zext i1 %3477 to i8
  store i8 %3478, i8* %.pre-phi31, align 1, !tbaa !2449
  %3479 = add i64 %3451, 9
  store i64 %3479, i64* %PC, align 8
  store i32 %3455, i32* %3453, align 4
  %3480 = load i64, i64* %PC, align 8
  %3481 = add i64 %3480, -135
  store i64 %3481, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_4020e9

block_4024b2:                                     ; preds = %block_4024a6
  %3482 = add i64 %3677, -48
  %3483 = add i64 %3713, 7
  store i64 %3483, i64* %PC, align 8
  %3484 = inttoptr i64 %3482 to i32*
  store i32 0, i32* %3484, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_4024b9

block_40247f:                                     ; preds = %block_4022cd
  %3485 = add i64 %465, 5
  store i64 %3485, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_402484

block_4024b9:                                     ; preds = %block_4024b2, %block_4024c5
  %3486 = phi i64 [ %.pre20, %block_4024b2 ], [ %2655, %block_4024c5 ]
  %3487 = load i64, i64* %RBP, align 8
  %3488 = add i64 %3487, -48
  %3489 = add i64 %3486, 3
  store i64 %3489, i64* %PC, align 8
  %3490 = inttoptr i64 %3488 to i32*
  %3491 = load i32, i32* %3490, align 4
  %3492 = zext i32 %3491 to i64
  store i64 %3492, i64* %RAX, align 8, !tbaa !2428
  %3493 = add i64 %3487, -4
  %3494 = add i64 %3486, 6
  store i64 %3494, i64* %PC, align 8
  %3495 = inttoptr i64 %3493 to i32*
  %3496 = load i32, i32* %3495, align 4
  %3497 = sub i32 %3491, %3496
  %3498 = icmp ult i32 %3491, %3496
  %3499 = zext i1 %3498 to i8
  store i8 %3499, i8* %.pre-phi, align 1, !tbaa !2432
  %3500 = and i32 %3497, 255
  %3501 = tail call i32 @llvm.ctpop.i32(i32 %3500) #8
  %3502 = trunc i32 %3501 to i8
  %3503 = and i8 %3502, 1
  %3504 = xor i8 %3503, 1
  store i8 %3504, i8* %.pre-phi23, align 1, !tbaa !2446
  %3505 = xor i32 %3496, %3491
  %3506 = xor i32 %3505, %3497
  %3507 = lshr i32 %3506, 4
  %3508 = trunc i32 %3507 to i8
  %3509 = and i8 %3508, 1
  store i8 %3509, i8* %.pre-phi25, align 1, !tbaa !2450
  %3510 = icmp eq i32 %3497, 0
  %3511 = zext i1 %3510 to i8
  store i8 %3511, i8* %.pre-phi27, align 1, !tbaa !2447
  %3512 = lshr i32 %3497, 31
  %3513 = trunc i32 %3512 to i8
  store i8 %3513, i8* %.pre-phi29, align 1, !tbaa !2448
  %3514 = lshr i32 %3491, 31
  %3515 = lshr i32 %3496, 31
  %3516 = xor i32 %3515, %3514
  %3517 = xor i32 %3512, %3514
  %3518 = add nuw nsw i32 %3517, %3516
  %3519 = icmp eq i32 %3518, 2
  %3520 = zext i1 %3519 to i8
  store i8 %3520, i8* %.pre-phi31, align 1, !tbaa !2449
  %3521 = icmp ne i8 %3513, 0
  %3522 = xor i1 %3521, %3519
  %.v = select i1 %3522, i64 12, i64 826
  %3523 = add i64 %3486, %.v
  store i64 %3523, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %3522, label %block_4024c5, label %block_4027f3

block_4021aa:                                     ; preds = %block_40219a, %block_4021b6
  %3524 = phi i64 [ %.pre11, %block_40219a ], [ %3193, %block_4021b6 ]
  %3525 = load i64, i64* %RBP, align 8
  %3526 = add i64 %3525, -48
  %3527 = add i64 %3524, 3
  store i64 %3527, i64* %PC, align 8
  %3528 = inttoptr i64 %3526 to i32*
  %3529 = load i32, i32* %3528, align 4
  %3530 = zext i32 %3529 to i64
  store i64 %3530, i64* %RAX, align 8, !tbaa !2428
  %3531 = add i64 %3525, -4
  %3532 = add i64 %3524, 6
  store i64 %3532, i64* %PC, align 8
  %3533 = inttoptr i64 %3531 to i32*
  %3534 = load i32, i32* %3533, align 4
  %3535 = sub i32 %3529, %3534
  %3536 = icmp ult i32 %3529, %3534
  %3537 = zext i1 %3536 to i8
  store i8 %3537, i8* %.pre-phi, align 1, !tbaa !2432
  %3538 = and i32 %3535, 255
  %3539 = tail call i32 @llvm.ctpop.i32(i32 %3538) #8
  %3540 = trunc i32 %3539 to i8
  %3541 = and i8 %3540, 1
  %3542 = xor i8 %3541, 1
  store i8 %3542, i8* %.pre-phi23, align 1, !tbaa !2446
  %3543 = xor i32 %3534, %3529
  %3544 = xor i32 %3543, %3535
  %3545 = lshr i32 %3544, 4
  %3546 = trunc i32 %3545 to i8
  %3547 = and i8 %3546, 1
  store i8 %3547, i8* %.pre-phi25, align 1, !tbaa !2450
  %3548 = icmp eq i32 %3535, 0
  %3549 = zext i1 %3548 to i8
  store i8 %3549, i8* %.pre-phi27, align 1, !tbaa !2447
  %3550 = lshr i32 %3535, 31
  %3551 = trunc i32 %3550 to i8
  store i8 %3551, i8* %.pre-phi29, align 1, !tbaa !2448
  %3552 = lshr i32 %3529, 31
  %3553 = lshr i32 %3534, 31
  %3554 = xor i32 %3553, %3552
  %3555 = xor i32 %3550, %3552
  %3556 = add nuw nsw i32 %3555, %3554
  %3557 = icmp eq i32 %3556, 2
  %3558 = zext i1 %3557 to i8
  store i8 %3558, i8* %.pre-phi31, align 1, !tbaa !2449
  %3559 = icmp ne i8 %3551, 0
  %3560 = xor i1 %3559, %3557
  %.v39 = select i1 %3560, i64 12, i64 238
  %3561 = add i64 %3524, %.v39
  store i64 %3561, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %3560, label %block_4021b6, label %block_402298

block_40217a:                                     ; preds = %block_402175, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %3562 = phi i64 [ %3639, %block_402175 ], [ %398, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  %3563 = phi i64 [ %4936, %block_402175 ], [ %427, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %3564 = add i64 %3562, -20
  %3565 = add i64 %3563, 8
  store i64 %3565, i64* %PC, align 8
  %3566 = inttoptr i64 %3564 to i32*
  %3567 = load i32, i32* %3566, align 4
  %3568 = zext i32 %3567 to i64
  store i64 %3568, i64* %RCX, align 8, !tbaa !2428
  %3569 = add i64 %3562, -64
  %3570 = add i64 %3563, 11
  store i64 %3570, i64* %PC, align 8
  %3571 = inttoptr i64 %3569 to i32*
  store i32 8, i32* %3571, align 4
  %3572 = load i32, i32* %ECX, align 4
  %3573 = zext i32 %3572 to i64
  %3574 = load i64, i64* %PC, align 8
  store i64 %3573, i64* %RAX, align 8, !tbaa !2428
  %3575 = sext i32 %3572 to i64
  %3576 = lshr i64 %3575, 32
  store i64 %3576, i64* %64, align 8, !tbaa !2428
  %3577 = load i64, i64* %RBP, align 8
  %3578 = add i64 %3577, -64
  %3579 = add i64 %3574, 6
  store i64 %3579, i64* %PC, align 8
  %3580 = inttoptr i64 %3578 to i32*
  %3581 = load i32, i32* %3580, align 4
  %3582 = zext i32 %3581 to i64
  store i64 %3582, i64* %RCX, align 8, !tbaa !2428
  %3583 = add i64 %3574, 8
  store i64 %3583, i64* %PC, align 8
  %3584 = zext i32 %3572 to i64
  %3585 = sext i32 %3581 to i64
  %3586 = shl nuw i64 %3576, 32
  %3587 = or i64 %3586, %3584
  %3588 = sdiv i64 %3587, %3585
  %3589 = shl i64 %3588, 32
  %3590 = ashr exact i64 %3589, 32
  %3591 = icmp eq i64 %3588, %3590
  br i1 %3591, label %3594, label %3592

; <label>:3592:                                   ; preds = %block_40217a
  %3593 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3583, %struct.Memory* %394) #9
  %.pre8 = load i64, i64* %RBP, align 8
  %.pre9 = load i32, i32* %EDX, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:3594:                                   ; preds = %block_40217a
  %3595 = srem i64 %3587, %3585
  %3596 = getelementptr inbounds %union.anon, %union.anon* %65, i64 0, i32 0
  %3597 = and i64 %3588, 4294967295
  store i64 %3597, i64* %3596, align 8, !tbaa !2428
  %3598 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %3599 = and i64 %3595, 4294967295
  store i64 %3599, i64* %3598, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %3600 = trunc i64 %3595 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %3594, %3592
  %3601 = phi i64 [ %.pre10, %3592 ], [ %3583, %3594 ]
  %3602 = phi i32 [ %.pre9, %3592 ], [ %3600, %3594 ]
  %3603 = phi i64 [ %.pre8, %3592 ], [ %3577, %3594 ]
  %3604 = phi %struct.Memory* [ %3593, %3592 ], [ %394, %3594 ]
  %3605 = add i64 %3603, -44
  %3606 = add i64 %3601, 3
  store i64 %3606, i64* %PC, align 8
  %3607 = inttoptr i64 %3605 to i32*
  store i32 %3602, i32* %3607, align 4
  %3608 = load i64, i64* %RBP, align 8
  %3609 = add i64 %3608, -44
  %3610 = load i64, i64* %PC, align 8
  %3611 = add i64 %3610, 4
  store i64 %3611, i64* %PC, align 8
  %3612 = inttoptr i64 %3609 to i32*
  %3613 = load i32, i32* %3612, align 4
  %3614 = add i32 %3613, -4
  %3615 = icmp ult i32 %3613, 4
  %3616 = zext i1 %3615 to i8
  store i8 %3616, i8* %.pre-phi, align 1, !tbaa !2432
  %3617 = and i32 %3614, 255
  %3618 = tail call i32 @llvm.ctpop.i32(i32 %3617) #8
  %3619 = trunc i32 %3618 to i8
  %3620 = and i8 %3619, 1
  %3621 = xor i8 %3620, 1
  store i8 %3621, i8* %.pre-phi23, align 1, !tbaa !2446
  %3622 = xor i32 %3613, %3614
  %3623 = lshr i32 %3622, 4
  %3624 = trunc i32 %3623 to i8
  %3625 = and i8 %3624, 1
  store i8 %3625, i8* %.pre-phi25, align 1, !tbaa !2450
  %3626 = icmp eq i32 %3614, 0
  %3627 = zext i1 %3626 to i8
  store i8 %3627, i8* %.pre-phi27, align 1, !tbaa !2447
  %3628 = lshr i32 %3614, 31
  %3629 = trunc i32 %3628 to i8
  store i8 %3629, i8* %.pre-phi29, align 1, !tbaa !2448
  %3630 = lshr i32 %3613, 31
  %3631 = xor i32 %3628, %3630
  %3632 = add nuw nsw i32 %3631, %3630
  %3633 = icmp eq i32 %3632, 2
  %3634 = zext i1 %3633 to i8
  store i8 %3634, i8* %.pre-phi31, align 1, !tbaa !2449
  %3635 = icmp ne i8 %3629, 0
  %3636 = xor i1 %3635, %3633
  %.v38 = select i1 %3636, i64 269, i64 10
  %3637 = add i64 %3610, %.v38
  store i64 %3637, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %3636, label %block_40229d, label %block_40219a

block_4020e9:                                     ; preds = %block_4020f5, %block_4020d9
  %3638 = phi i64 [ %3481, %block_4020f5 ], [ %.pre7, %block_4020d9 ]
  %3639 = load i64, i64* %RBP, align 8
  %3640 = add i64 %3639, -48
  %3641 = add i64 %3638, 3
  store i64 %3641, i64* %PC, align 8
  %3642 = inttoptr i64 %3640 to i32*
  %3643 = load i32, i32* %3642, align 4
  %3644 = zext i32 %3643 to i64
  store i64 %3644, i64* %RAX, align 8, !tbaa !2428
  %3645 = add i64 %3639, -4
  %3646 = add i64 %3638, 6
  store i64 %3646, i64* %PC, align 8
  %3647 = inttoptr i64 %3645 to i32*
  %3648 = load i32, i32* %3647, align 4
  %3649 = sub i32 %3643, %3648
  %3650 = icmp ult i32 %3643, %3648
  %3651 = zext i1 %3650 to i8
  store i8 %3651, i8* %.pre-phi, align 1, !tbaa !2432
  %3652 = and i32 %3649, 255
  %3653 = tail call i32 @llvm.ctpop.i32(i32 %3652) #8
  %3654 = trunc i32 %3653 to i8
  %3655 = and i8 %3654, 1
  %3656 = xor i8 %3655, 1
  store i8 %3656, i8* %.pre-phi23, align 1, !tbaa !2446
  %3657 = xor i32 %3648, %3643
  %3658 = xor i32 %3657, %3649
  %3659 = lshr i32 %3658, 4
  %3660 = trunc i32 %3659 to i8
  %3661 = and i8 %3660, 1
  store i8 %3661, i8* %.pre-phi25, align 1, !tbaa !2450
  %3662 = icmp eq i32 %3649, 0
  %3663 = zext i1 %3662 to i8
  store i8 %3663, i8* %.pre-phi27, align 1, !tbaa !2447
  %3664 = lshr i32 %3649, 31
  %3665 = trunc i32 %3664 to i8
  store i8 %3665, i8* %.pre-phi29, align 1, !tbaa !2448
  %3666 = lshr i32 %3643, 31
  %3667 = lshr i32 %3648, 31
  %3668 = xor i32 %3667, %3666
  %3669 = xor i32 %3664, %3666
  %3670 = add nuw nsw i32 %3669, %3668
  %3671 = icmp eq i32 %3670, 2
  %3672 = zext i1 %3671 to i8
  store i8 %3672, i8* %.pre-phi31, align 1, !tbaa !2449
  %3673 = icmp ne i8 %3665, 0
  %3674 = xor i1 %3673, %3671
  %.v37 = select i1 %3674, i64 12, i64 140
  %3675 = add i64 %3638, %.v37
  store i64 %3675, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %3674, label %block_4020f5, label %block_402175

block_4024a6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4027f3
  %3676 = phi i64 [ %.pre19, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %553, %block_4027f3 ]
  %3677 = load i64, i64* %RBP, align 8
  %3678 = add i64 %3677, -44
  %3679 = add i64 %3676, 3
  store i64 %3679, i64* %PC, align 8
  %3680 = inttoptr i64 %3678 to i32*
  %3681 = load i32, i32* %3680, align 4
  %3682 = zext i32 %3681 to i64
  store i64 %3682, i64* %RAX, align 8, !tbaa !2428
  %3683 = add i64 %3677, -20
  %3684 = add i64 %3676, 6
  store i64 %3684, i64* %PC, align 8
  %3685 = inttoptr i64 %3683 to i32*
  %3686 = load i32, i32* %3685, align 4
  %3687 = sub i32 %3681, %3686
  %3688 = icmp ult i32 %3681, %3686
  %3689 = zext i1 %3688 to i8
  store i8 %3689, i8* %.pre-phi, align 1, !tbaa !2432
  %3690 = and i32 %3687, 255
  %3691 = tail call i32 @llvm.ctpop.i32(i32 %3690) #8
  %3692 = trunc i32 %3691 to i8
  %3693 = and i8 %3692, 1
  %3694 = xor i8 %3693, 1
  store i8 %3694, i8* %.pre-phi23, align 1, !tbaa !2446
  %3695 = xor i32 %3686, %3681
  %3696 = xor i32 %3695, %3687
  %3697 = lshr i32 %3696, 4
  %3698 = trunc i32 %3697 to i8
  %3699 = and i8 %3698, 1
  store i8 %3699, i8* %.pre-phi25, align 1, !tbaa !2450
  %3700 = icmp eq i32 %3687, 0
  %3701 = zext i1 %3700 to i8
  store i8 %3701, i8* %.pre-phi27, align 1, !tbaa !2447
  %3702 = lshr i32 %3687, 31
  %3703 = trunc i32 %3702 to i8
  store i8 %3703, i8* %.pre-phi29, align 1, !tbaa !2448
  %3704 = lshr i32 %3681, 31
  %3705 = lshr i32 %3686, 31
  %3706 = xor i32 %3705, %3704
  %3707 = xor i32 %3702, %3704
  %3708 = add nuw nsw i32 %3707, %3706
  %3709 = icmp eq i32 %3708, 2
  %3710 = zext i1 %3709 to i8
  store i8 %3710, i8* %.pre-phi31, align 1, !tbaa !2449
  %3711 = icmp ne i8 %3703, 0
  %3712 = xor i1 %3711, %3709
  %.v42 = select i1 %3712, i64 12, i64 864
  %3713 = add i64 %3676, %.v42
  store i64 %3713, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %3712, label %block_4024b2, label %block_402806

block_402059:                                     ; preds = %block_402049, %block_402065
  %3714 = phi i64 [ %.pre3, %block_402049 ], [ %351, %block_402065 ]
  %3715 = load i64, i64* %RBP, align 8
  %3716 = add i64 %3715, -48
  %3717 = add i64 %3714, 3
  store i64 %3717, i64* %PC, align 8
  %3718 = inttoptr i64 %3716 to i32*
  %3719 = load i32, i32* %3718, align 4
  %3720 = zext i32 %3719 to i64
  store i64 %3720, i64* %RAX, align 8, !tbaa !2428
  %3721 = add i64 %3715, -4
  %3722 = add i64 %3714, 6
  store i64 %3722, i64* %PC, align 8
  %3723 = inttoptr i64 %3721 to i32*
  %3724 = load i32, i32* %3723, align 4
  %3725 = sub i32 %3719, %3724
  %3726 = icmp ult i32 %3719, %3724
  %3727 = zext i1 %3726 to i8
  store i8 %3727, i8* %.pre-phi, align 1, !tbaa !2432
  %3728 = and i32 %3725, 255
  %3729 = tail call i32 @llvm.ctpop.i32(i32 %3728) #8
  %3730 = trunc i32 %3729 to i8
  %3731 = and i8 %3730, 1
  %3732 = xor i8 %3731, 1
  store i8 %3732, i8* %.pre-phi23, align 1, !tbaa !2446
  %3733 = xor i32 %3724, %3719
  %3734 = xor i32 %3733, %3725
  %3735 = lshr i32 %3734, 4
  %3736 = trunc i32 %3735 to i8
  %3737 = and i8 %3736, 1
  store i8 %3737, i8* %.pre-phi25, align 1, !tbaa !2450
  %3738 = icmp eq i32 %3725, 0
  %3739 = zext i1 %3738 to i8
  store i8 %3739, i8* %.pre-phi27, align 1, !tbaa !2447
  %3740 = lshr i32 %3725, 31
  %3741 = trunc i32 %3740 to i8
  store i8 %3741, i8* %.pre-phi29, align 1, !tbaa !2448
  %3742 = lshr i32 %3719, 31
  %3743 = lshr i32 %3724, 31
  %3744 = xor i32 %3743, %3742
  %3745 = xor i32 %3740, %3742
  %3746 = add nuw nsw i32 %3745, %3744
  %3747 = icmp eq i32 %3746, 2
  %3748 = zext i1 %3747 to i8
  store i8 %3748, i8* %.pre-phi31, align 1, !tbaa !2449
  %3749 = icmp ne i8 %3741, 0
  %3750 = xor i1 %3749, %3747
  %.v35 = select i1 %3750, i64 12, i64 91
  %3751 = add i64 %3714, %.v35
  store i64 %3751, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %3750, label %block_402065, label %block_4020b4

block_40229d:                                     ; preds = %block_402298, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %3752 = phi i64 [ %3525, %block_402298 ], [ %3608, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  %3753 = phi i64 [ %4926, %block_402298 ], [ %3637, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %3754 = add i64 %3752, -20
  %3755 = add i64 %3753, 8
  store i64 %3755, i64* %PC, align 8
  %3756 = inttoptr i64 %3754 to i32*
  %3757 = load i32, i32* %3756, align 4
  %3758 = zext i32 %3757 to i64
  store i64 %3758, i64* %RCX, align 8, !tbaa !2428
  %3759 = add i64 %3752, -68
  %3760 = add i64 %3753, 11
  store i64 %3760, i64* %PC, align 8
  %3761 = inttoptr i64 %3759 to i32*
  store i32 16, i32* %3761, align 4
  %3762 = load i32, i32* %ECX, align 4
  %3763 = zext i32 %3762 to i64
  %3764 = load i64, i64* %PC, align 8
  store i64 %3763, i64* %RAX, align 8, !tbaa !2428
  %3765 = sext i32 %3762 to i64
  %3766 = lshr i64 %3765, 32
  store i64 %3766, i64* %64, align 8, !tbaa !2428
  %3767 = load i64, i64* %RBP, align 8
  %3768 = add i64 %3767, -68
  %3769 = add i64 %3764, 6
  store i64 %3769, i64* %PC, align 8
  %3770 = inttoptr i64 %3768 to i32*
  %3771 = load i32, i32* %3770, align 4
  %3772 = zext i32 %3771 to i64
  store i64 %3772, i64* %RCX, align 8, !tbaa !2428
  %3773 = add i64 %3764, 8
  store i64 %3773, i64* %PC, align 8
  %3774 = zext i32 %3762 to i64
  %3775 = sext i32 %3771 to i64
  %3776 = shl nuw i64 %3766, 32
  %3777 = or i64 %3776, %3774
  %3778 = sdiv i64 %3777, %3775
  %3779 = shl i64 %3778, 32
  %3780 = ashr exact i64 %3779, 32
  %3781 = icmp eq i64 %3778, %3780
  br i1 %3781, label %3784, label %3782

; <label>:3782:                                   ; preds = %block_40229d
  %3783 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3773, %struct.Memory* %3604) #9
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i32, i32* %EDX, align 4
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:3784:                                   ; preds = %block_40229d
  %3785 = srem i64 %3777, %3775
  %3786 = getelementptr inbounds %union.anon, %union.anon* %65, i64 0, i32 0
  %3787 = and i64 %3778, 4294967295
  store i64 %3787, i64* %3786, align 8, !tbaa !2428
  %3788 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %3789 = and i64 %3785, 4294967295
  store i64 %3789, i64* %3788, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %3790 = trunc i64 %3785 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %3784, %3782
  %3791 = phi i64 [ %.pre14, %3782 ], [ %3773, %3784 ]
  %3792 = phi i32 [ %.pre13, %3782 ], [ %3790, %3784 ]
  %3793 = phi i64 [ %.pre12, %3782 ], [ %3767, %3784 ]
  %3794 = phi %struct.Memory* [ %3783, %3782 ], [ %3604, %3784 ]
  %3795 = add i64 %3793, -44
  %3796 = add i64 %3791, 3
  store i64 %3796, i64* %PC, align 8
  %3797 = inttoptr i64 %3795 to i32*
  store i32 %3792, i32* %3797, align 4
  %3798 = load i64, i64* %RBP, align 8
  %3799 = add i64 %3798, -44
  %3800 = load i64, i64* %PC, align 8
  %3801 = add i64 %3800, 4
  store i64 %3801, i64* %PC, align 8
  %3802 = inttoptr i64 %3799 to i32*
  %3803 = load i32, i32* %3802, align 4
  %3804 = add i32 %3803, -8
  %3805 = icmp ult i32 %3803, 8
  %3806 = zext i1 %3805 to i8
  store i8 %3806, i8* %.pre-phi, align 1, !tbaa !2432
  %3807 = and i32 %3804, 255
  %3808 = tail call i32 @llvm.ctpop.i32(i32 %3807) #8
  %3809 = trunc i32 %3808 to i8
  %3810 = and i8 %3809, 1
  %3811 = xor i8 %3810, 1
  store i8 %3811, i8* %.pre-phi23, align 1, !tbaa !2446
  %3812 = xor i32 %3803, %3804
  %3813 = lshr i32 %3812, 4
  %3814 = trunc i32 %3813 to i8
  %3815 = and i8 %3814, 1
  store i8 %3815, i8* %.pre-phi25, align 1, !tbaa !2450
  %3816 = icmp eq i32 %3804, 0
  %3817 = zext i1 %3816 to i8
  store i8 %3817, i8* %.pre-phi27, align 1, !tbaa !2447
  %3818 = lshr i32 %3804, 31
  %3819 = trunc i32 %3818 to i8
  store i8 %3819, i8* %.pre-phi29, align 1, !tbaa !2448
  %3820 = lshr i32 %3803, 31
  %3821 = xor i32 %3818, %3820
  %3822 = add nuw nsw i32 %3821, %3820
  %3823 = icmp eq i32 %3822, 2
  %3824 = zext i1 %3823 to i8
  store i8 %3824, i8* %.pre-phi31, align 1, !tbaa !2449
  %3825 = icmp ne i8 %3819, 0
  %3826 = xor i1 %3825, %3823
  %.v40 = select i1 %3826, i64 465, i64 10
  %3827 = add i64 %3800, %.v40
  store i64 %3827, i64* %.pre-phi33, align 8, !tbaa !2428
  br i1 %3826, label %block_402484, label %block_4022bd

block_40219a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %3828 = add i64 %3637, 3
  store i64 %3828, i64* %PC, align 8
  %3829 = load i32, i32* %3612, align 4
  %3830 = add i32 %3829, -1
  %3831 = zext i32 %3830 to i64
  store i64 %3831, i64* %RAX, align 8, !tbaa !2428
  %3832 = icmp eq i32 %3829, 0
  %3833 = zext i1 %3832 to i8
  store i8 %3833, i8* %.pre-phi, align 1, !tbaa !2432
  %3834 = and i32 %3830, 255
  %3835 = tail call i32 @llvm.ctpop.i32(i32 %3834) #8
  %3836 = trunc i32 %3835 to i8
  %3837 = and i8 %3836, 1
  %3838 = xor i8 %3837, 1
  store i8 %3838, i8* %.pre-phi23, align 1, !tbaa !2446
  %3839 = xor i32 %3829, %3830
  %3840 = lshr i32 %3839, 4
  %3841 = trunc i32 %3840 to i8
  %3842 = and i8 %3841, 1
  store i8 %3842, i8* %.pre-phi25, align 1, !tbaa !2450
  %3843 = icmp eq i32 %3830, 0
  %3844 = zext i1 %3843 to i8
  store i8 %3844, i8* %.pre-phi27, align 1, !tbaa !2447
  %3845 = lshr i32 %3830, 31
  %3846 = trunc i32 %3845 to i8
  store i8 %3846, i8* %.pre-phi29, align 1, !tbaa !2448
  %3847 = lshr i32 %3829, 31
  %3848 = xor i32 %3845, %3847
  %3849 = add nuw nsw i32 %3848, %3847
  %3850 = icmp eq i32 %3849, 2
  %3851 = zext i1 %3850 to i8
  store i8 %3851, i8* %.pre-phi31, align 1, !tbaa !2449
  %3852 = add i64 %3637, 9
  store i64 %3852, i64* %PC, align 8
  store i32 %3830, i32* %3612, align 4
  %3853 = load i64, i64* %RBP, align 8
  %3854 = add i64 %3853, -48
  %3855 = load i64, i64* %PC, align 8
  %3856 = add i64 %3855, 7
  store i64 %3856, i64* %PC, align 8
  %3857 = inttoptr i64 %3854 to i32*
  store i32 0, i32* %3857, align 4
  %3858 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %3859 = bitcast [32 x %union.VectorReg]* %7 to float*
  %3860 = getelementptr inbounds i8, i8* %3858, i64 4
  %3861 = bitcast i8* %3860 to float*
  %3862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3863 = bitcast i64* %3862 to float*
  %3864 = getelementptr inbounds i8, i8* %3858, i64 12
  %3865 = bitcast i8* %3864 to float*
  %3866 = bitcast %union.VectorReg* %8 to i8*
  %3867 = bitcast %union.VectorReg* %8 to float*
  %3868 = getelementptr inbounds i8, i8* %3866, i64 4
  %3869 = bitcast i8* %3868 to float*
  %3870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %3871 = bitcast i64* %3870 to float*
  %3872 = getelementptr inbounds i8, i8* %3866, i64 12
  %3873 = bitcast i8* %3872 to float*
  %3874 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3875 = bitcast i64* %3870 to <2 x i32>*
  %3876 = bitcast i8* %3868 to i32*
  %3877 = bitcast i64* %3870 to i32*
  %3878 = bitcast i8* %3872 to i32*
  %3879 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %3880 = bitcast i64* %3862 to <2 x i32>*
  %3881 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3882 = bitcast i8* %3860 to i32*
  %3883 = bitcast i64* %3862 to i32*
  %3884 = bitcast i8* %3864 to i32*
  %3885 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_4021aa

block_4022d9:                                     ; preds = %block_4022cd
  %3886 = add i64 %429, -16
  %3887 = add i64 %465, 4
  store i64 %3887, i64* %PC, align 8
  %3888 = inttoptr i64 %3886 to i64*
  %3889 = load i64, i64* %3888, align 8
  store i64 %3889, i64* %RAX, align 8, !tbaa !2428
  %3890 = add i64 %465, 8
  store i64 %3890, i64* %PC, align 8
  %3891 = load i32, i32* %432, align 4
  %3892 = sext i32 %3891 to i64
  store i64 %3892, i64* %RCX, align 8, !tbaa !2428
  %3893 = shl nsw i64 %3892, 2
  %3894 = add i64 %3893, %3889
  %3895 = add i64 %465, 13
  store i64 %3895, i64* %PC, align 8
  %3896 = inttoptr i64 %3894 to i32*
  %3897 = load i32, i32* %3896, align 4
  %3898 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %3897, i32* %3898, align 1, !tbaa !2452
  store float 0.000000e+00, float* %587, align 1, !tbaa !2452
  store float 0.000000e+00, float* %589, align 1, !tbaa !2452
  store float 0.000000e+00, float* %591, align 1, !tbaa !2452
  %3899 = add i64 %429, -32
  %3900 = add i64 %465, 17
  store i64 %3900, i64* %PC, align 8
  %3901 = inttoptr i64 %3899 to i64*
  %3902 = load i64, i64* %3901, align 8
  store i64 %3902, i64* %RAX, align 8, !tbaa !2428
  %3903 = add i64 %429, -44
  %3904 = add i64 %465, 20
  store i64 %3904, i64* %PC, align 8
  %3905 = inttoptr i64 %3903 to i32*
  %3906 = load i32, i32* %3905, align 4
  %3907 = add i32 %3906, -7
  %3908 = zext i32 %3907 to i64
  store i64 %3908, i64* %RDX, align 8, !tbaa !2428
  %3909 = icmp ult i32 %3906, 7
  %3910 = zext i1 %3909 to i8
  store i8 %3910, i8* %.pre-phi, align 1, !tbaa !2432
  %3911 = and i32 %3907, 255
  %3912 = tail call i32 @llvm.ctpop.i32(i32 %3911) #8
  %3913 = trunc i32 %3912 to i8
  %3914 = and i8 %3913, 1
  %3915 = xor i8 %3914, 1
  store i8 %3915, i8* %.pre-phi23, align 1, !tbaa !2446
  %3916 = xor i32 %3906, %3907
  %3917 = lshr i32 %3916, 4
  %3918 = trunc i32 %3917 to i8
  %3919 = and i8 %3918, 1
  store i8 %3919, i8* %.pre-phi25, align 1, !tbaa !2450
  %3920 = icmp eq i32 %3907, 0
  %3921 = zext i1 %3920 to i8
  store i8 %3921, i8* %.pre-phi27, align 1, !tbaa !2447
  %3922 = lshr i32 %3907, 31
  %3923 = trunc i32 %3922 to i8
  store i8 %3923, i8* %.pre-phi29, align 1, !tbaa !2448
  %3924 = lshr i32 %3906, 31
  %3925 = xor i32 %3922, %3924
  %3926 = add nuw nsw i32 %3925, %3924
  %3927 = icmp eq i32 %3926, 2
  %3928 = zext i1 %3927 to i8
  store i8 %3928, i8* %.pre-phi31, align 1, !tbaa !2449
  %3929 = sext i32 %3907 to i64
  store i64 %3929, i64* %RCX, align 8, !tbaa !2428
  %3930 = shl nsw i64 %3929, 2
  %3931 = add i64 %3930, %3902
  %3932 = add i64 %465, 31
  store i64 %3932, i64* %PC, align 8
  %3933 = inttoptr i64 %3931 to i32*
  %3934 = load i32, i32* %3933, align 4
  %3935 = bitcast %union.VectorReg* %8 to i32*
  store i32 %3934, i32* %3935, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %3936 = add i64 %429, -40
  %3937 = add i64 %465, 35
  store i64 %3937, i64* %PC, align 8
  %3938 = inttoptr i64 %3936 to i64*
  %3939 = load i64, i64* %3938, align 8
  store i64 %3939, i64* %RAX, align 8, !tbaa !2428
  %3940 = add i64 %429, -24
  %3941 = add i64 %465, 38
  store i64 %3941, i64* %PC, align 8
  %3942 = inttoptr i64 %3940 to i32*
  %3943 = load i32, i32* %3942, align 4
  %3944 = zext i32 %3943 to i64
  store i64 %3944, i64* %RDX, align 8, !tbaa !2428
  %3945 = add i64 %465, 41
  store i64 %3945, i64* %PC, align 8
  %3946 = load i32, i32* %3905, align 4
  %3947 = add i32 %3946, -7
  %3948 = zext i32 %3947 to i64
  store i64 %3948, i64* %RSI, align 8, !tbaa !2428
  %3949 = sext i32 %3943 to i64
  %3950 = sext i32 %3947 to i64
  %3951 = mul nsw i64 %3950, %3949
  %3952 = trunc i64 %3951 to i32
  %3953 = and i64 %3951, 4294967295
  store i64 %3953, i64* %RDX, align 8, !tbaa !2428
  %3954 = shl i64 %3951, 32
  %3955 = ashr exact i64 %3954, 32
  %3956 = icmp ne i64 %3955, %3951
  %3957 = zext i1 %3956 to i8
  store i8 %3957, i8* %.pre-phi, align 1, !tbaa !2432
  %3958 = and i32 %3952, 255
  %3959 = tail call i32 @llvm.ctpop.i32(i32 %3958) #8
  %3960 = trunc i32 %3959 to i8
  %3961 = and i8 %3960, 1
  %3962 = xor i8 %3961, 1
  store i8 %3962, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3963 = lshr i32 %3952, 31
  %3964 = trunc i32 %3963 to i8
  store i8 %3964, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3957, i8* %.pre-phi31, align 1, !tbaa !2449
  %3965 = load i64, i64* %RBP, align 8
  %3966 = add i64 %3965, -48
  %3967 = add i64 %465, 50
  store i64 %3967, i64* %PC, align 8
  %3968 = trunc i64 %3951 to i32
  %3969 = inttoptr i64 %3966 to i32*
  %3970 = load i32, i32* %3969, align 4
  %3971 = add i32 %3970, %3968
  %3972 = zext i32 %3971 to i64
  store i64 %3972, i64* %RDX, align 8, !tbaa !2428
  %3973 = icmp ult i32 %3971, %3968
  %3974 = icmp ult i32 %3971, %3970
  %3975 = or i1 %3973, %3974
  %3976 = zext i1 %3975 to i8
  store i8 %3976, i8* %.pre-phi, align 1, !tbaa !2432
  %3977 = and i32 %3971, 255
  %3978 = tail call i32 @llvm.ctpop.i32(i32 %3977) #8
  %3979 = trunc i32 %3978 to i8
  %3980 = and i8 %3979, 1
  %3981 = xor i8 %3980, 1
  store i8 %3981, i8* %.pre-phi23, align 1, !tbaa !2446
  %3982 = xor i32 %3970, %3968
  %3983 = xor i32 %3982, %3971
  %3984 = lshr i32 %3983, 4
  %3985 = trunc i32 %3984 to i8
  %3986 = and i8 %3985, 1
  store i8 %3986, i8* %.pre-phi25, align 1, !tbaa !2450
  %3987 = icmp eq i32 %3971, 0
  %3988 = zext i1 %3987 to i8
  store i8 %3988, i8* %.pre-phi27, align 1, !tbaa !2447
  %3989 = lshr i32 %3971, 31
  %3990 = trunc i32 %3989 to i8
  store i8 %3990, i8* %.pre-phi29, align 1, !tbaa !2448
  %3991 = lshr i32 %3968, 31
  %3992 = lshr i32 %3970, 31
  %3993 = xor i32 %3989, %3991
  %3994 = xor i32 %3989, %3992
  %3995 = add nuw nsw i32 %3993, %3994
  %3996 = icmp eq i32 %3995, 2
  %3997 = zext i1 %3996 to i8
  store i8 %3997, i8* %.pre-phi31, align 1, !tbaa !2449
  %3998 = sext i32 %3971 to i64
  store i64 %3998, i64* %RCX, align 8, !tbaa !2428
  %3999 = load i64, i64* %RAX, align 8
  %4000 = shl nsw i64 %3998, 2
  %4001 = add i64 %4000, %3999
  %4002 = add i64 %465, 58
  store i64 %4002, i64* %PC, align 8
  %4003 = load <2 x float>, <2 x float>* %600, align 1
  %4004 = load <2 x i32>, <2 x i32>* %601, align 1
  %4005 = inttoptr i64 %4001 to float*
  %4006 = load float, float* %4005, align 4
  %4007 = extractelement <2 x float> %4003, i32 0
  %4008 = fmul float %4007, %4006
  store float %4008, float* %593, align 1, !tbaa !2452
  %4009 = bitcast <2 x float> %4003 to <2 x i32>
  %4010 = extractelement <2 x i32> %4009, i32 1
  store i32 %4010, i32* %602, align 1, !tbaa !2452
  %4011 = extractelement <2 x i32> %4004, i32 0
  store i32 %4011, i32* %603, align 1, !tbaa !2452
  %4012 = extractelement <2 x i32> %4004, i32 1
  store i32 %4012, i32* %604, align 1, !tbaa !2452
  %4013 = load <2 x float>, <2 x float>* %605, align 1
  %4014 = load <2 x i32>, <2 x i32>* %606, align 1
  %4015 = load <2 x float>, <2 x float>* %607, align 1
  %4016 = extractelement <2 x float> %4013, i32 0
  %4017 = extractelement <2 x float> %4015, i32 0
  %4018 = fadd float %4016, %4017
  store float %4018, float* %585, align 1, !tbaa !2452
  %4019 = bitcast <2 x float> %4013 to <2 x i32>
  %4020 = extractelement <2 x i32> %4019, i32 1
  store i32 %4020, i32* %608, align 1, !tbaa !2452
  %4021 = extractelement <2 x i32> %4014, i32 0
  store i32 %4021, i32* %609, align 1, !tbaa !2452
  %4022 = extractelement <2 x i32> %4014, i32 1
  store i32 %4022, i32* %610, align 1, !tbaa !2452
  %4023 = add i64 %3965, -32
  %4024 = add i64 %465, 66
  store i64 %4024, i64* %PC, align 8
  %4025 = inttoptr i64 %4023 to i64*
  %4026 = load i64, i64* %4025, align 8
  store i64 %4026, i64* %RAX, align 8, !tbaa !2428
  %4027 = add i64 %3965, -44
  %4028 = add i64 %465, 69
  store i64 %4028, i64* %PC, align 8
  %4029 = inttoptr i64 %4027 to i32*
  %4030 = load i32, i32* %4029, align 4
  %4031 = add i32 %4030, -6
  %4032 = zext i32 %4031 to i64
  store i64 %4032, i64* %RDX, align 8, !tbaa !2428
  %4033 = icmp ult i32 %4030, 6
  %4034 = zext i1 %4033 to i8
  store i8 %4034, i8* %.pre-phi, align 1, !tbaa !2432
  %4035 = and i32 %4031, 255
  %4036 = tail call i32 @llvm.ctpop.i32(i32 %4035) #8
  %4037 = trunc i32 %4036 to i8
  %4038 = and i8 %4037, 1
  %4039 = xor i8 %4038, 1
  store i8 %4039, i8* %.pre-phi23, align 1, !tbaa !2446
  %4040 = xor i32 %4030, %4031
  %4041 = lshr i32 %4040, 4
  %4042 = trunc i32 %4041 to i8
  %4043 = and i8 %4042, 1
  store i8 %4043, i8* %.pre-phi25, align 1, !tbaa !2450
  %4044 = icmp eq i32 %4031, 0
  %4045 = zext i1 %4044 to i8
  store i8 %4045, i8* %.pre-phi27, align 1, !tbaa !2447
  %4046 = lshr i32 %4031, 31
  %4047 = trunc i32 %4046 to i8
  store i8 %4047, i8* %.pre-phi29, align 1, !tbaa !2448
  %4048 = lshr i32 %4030, 31
  %4049 = xor i32 %4046, %4048
  %4050 = add nuw nsw i32 %4049, %4048
  %4051 = icmp eq i32 %4050, 2
  %4052 = zext i1 %4051 to i8
  store i8 %4052, i8* %.pre-phi31, align 1, !tbaa !2449
  %4053 = sext i32 %4031 to i64
  store i64 %4053, i64* %RCX, align 8, !tbaa !2428
  %4054 = shl nsw i64 %4053, 2
  %4055 = add i64 %4054, %4026
  %4056 = add i64 %465, 80
  store i64 %4056, i64* %PC, align 8
  %4057 = inttoptr i64 %4055 to i32*
  %4058 = load i32, i32* %4057, align 4
  %4059 = bitcast %union.VectorReg* %8 to i32*
  store i32 %4058, i32* %4059, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %4060 = load i64, i64* %RBP, align 8
  %4061 = add i64 %4060, -40
  %4062 = add i64 %465, 84
  store i64 %4062, i64* %PC, align 8
  %4063 = inttoptr i64 %4061 to i64*
  %4064 = load i64, i64* %4063, align 8
  store i64 %4064, i64* %RAX, align 8, !tbaa !2428
  %4065 = add i64 %4060, -24
  %4066 = add i64 %465, 87
  store i64 %4066, i64* %PC, align 8
  %4067 = inttoptr i64 %4065 to i32*
  %4068 = load i32, i32* %4067, align 4
  %4069 = zext i32 %4068 to i64
  store i64 %4069, i64* %RDX, align 8, !tbaa !2428
  %4070 = add i64 %4060, -44
  %4071 = add i64 %465, 90
  store i64 %4071, i64* %PC, align 8
  %4072 = inttoptr i64 %4070 to i32*
  %4073 = load i32, i32* %4072, align 4
  %4074 = add i32 %4073, -6
  %4075 = zext i32 %4074 to i64
  store i64 %4075, i64* %RSI, align 8, !tbaa !2428
  %4076 = sext i32 %4068 to i64
  %4077 = sext i32 %4074 to i64
  %4078 = mul nsw i64 %4077, %4076
  %4079 = trunc i64 %4078 to i32
  %4080 = and i64 %4078, 4294967295
  store i64 %4080, i64* %RDX, align 8, !tbaa !2428
  %4081 = shl i64 %4078, 32
  %4082 = ashr exact i64 %4081, 32
  %4083 = icmp ne i64 %4082, %4078
  %4084 = zext i1 %4083 to i8
  store i8 %4084, i8* %.pre-phi, align 1, !tbaa !2432
  %4085 = and i32 %4079, 255
  %4086 = tail call i32 @llvm.ctpop.i32(i32 %4085) #8
  %4087 = trunc i32 %4086 to i8
  %4088 = and i8 %4087, 1
  %4089 = xor i8 %4088, 1
  store i8 %4089, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4090 = lshr i32 %4079, 31
  %4091 = trunc i32 %4090 to i8
  store i8 %4091, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4084, i8* %.pre-phi31, align 1, !tbaa !2449
  %4092 = add i64 %4060, -48
  %4093 = add i64 %465, 99
  store i64 %4093, i64* %PC, align 8
  %4094 = trunc i64 %4078 to i32
  %4095 = inttoptr i64 %4092 to i32*
  %4096 = load i32, i32* %4095, align 4
  %4097 = add i32 %4096, %4094
  %4098 = zext i32 %4097 to i64
  store i64 %4098, i64* %RDX, align 8, !tbaa !2428
  %4099 = icmp ult i32 %4097, %4094
  %4100 = icmp ult i32 %4097, %4096
  %4101 = or i1 %4099, %4100
  %4102 = zext i1 %4101 to i8
  store i8 %4102, i8* %.pre-phi, align 1, !tbaa !2432
  %4103 = and i32 %4097, 255
  %4104 = tail call i32 @llvm.ctpop.i32(i32 %4103) #8
  %4105 = trunc i32 %4104 to i8
  %4106 = and i8 %4105, 1
  %4107 = xor i8 %4106, 1
  store i8 %4107, i8* %.pre-phi23, align 1, !tbaa !2446
  %4108 = xor i32 %4096, %4094
  %4109 = xor i32 %4108, %4097
  %4110 = lshr i32 %4109, 4
  %4111 = trunc i32 %4110 to i8
  %4112 = and i8 %4111, 1
  store i8 %4112, i8* %.pre-phi25, align 1, !tbaa !2450
  %4113 = icmp eq i32 %4097, 0
  %4114 = zext i1 %4113 to i8
  store i8 %4114, i8* %.pre-phi27, align 1, !tbaa !2447
  %4115 = lshr i32 %4097, 31
  %4116 = trunc i32 %4115 to i8
  store i8 %4116, i8* %.pre-phi29, align 1, !tbaa !2448
  %4117 = lshr i32 %4094, 31
  %4118 = lshr i32 %4096, 31
  %4119 = xor i32 %4115, %4117
  %4120 = xor i32 %4115, %4118
  %4121 = add nuw nsw i32 %4119, %4120
  %4122 = icmp eq i32 %4121, 2
  %4123 = zext i1 %4122 to i8
  store i8 %4123, i8* %.pre-phi31, align 1, !tbaa !2449
  %4124 = sext i32 %4097 to i64
  store i64 %4124, i64* %RCX, align 8, !tbaa !2428
  %4125 = load i64, i64* %RAX, align 8
  %4126 = shl nsw i64 %4124, 2
  %4127 = add i64 %4126, %4125
  %4128 = add i64 %465, 107
  store i64 %4128, i64* %PC, align 8
  %4129 = load <2 x float>, <2 x float>* %600, align 1
  %4130 = load <2 x i32>, <2 x i32>* %601, align 1
  %4131 = inttoptr i64 %4127 to float*
  %4132 = load float, float* %4131, align 4
  %4133 = extractelement <2 x float> %4129, i32 0
  %4134 = fmul float %4133, %4132
  store float %4134, float* %593, align 1, !tbaa !2452
  %4135 = bitcast <2 x float> %4129 to <2 x i32>
  %4136 = extractelement <2 x i32> %4135, i32 1
  store i32 %4136, i32* %602, align 1, !tbaa !2452
  %4137 = extractelement <2 x i32> %4130, i32 0
  store i32 %4137, i32* %603, align 1, !tbaa !2452
  %4138 = extractelement <2 x i32> %4130, i32 1
  store i32 %4138, i32* %604, align 1, !tbaa !2452
  %4139 = load <2 x float>, <2 x float>* %605, align 1
  %4140 = load <2 x i32>, <2 x i32>* %606, align 1
  %4141 = load <2 x float>, <2 x float>* %607, align 1
  %4142 = extractelement <2 x float> %4139, i32 0
  %4143 = extractelement <2 x float> %4141, i32 0
  %4144 = fadd float %4142, %4143
  store float %4144, float* %585, align 1, !tbaa !2452
  %4145 = bitcast <2 x float> %4139 to <2 x i32>
  %4146 = extractelement <2 x i32> %4145, i32 1
  store i32 %4146, i32* %608, align 1, !tbaa !2452
  %4147 = extractelement <2 x i32> %4140, i32 0
  store i32 %4147, i32* %609, align 1, !tbaa !2452
  %4148 = extractelement <2 x i32> %4140, i32 1
  store i32 %4148, i32* %610, align 1, !tbaa !2452
  %4149 = load i64, i64* %RBP, align 8
  %4150 = add i64 %4149, -32
  %4151 = add i64 %465, 115
  store i64 %4151, i64* %PC, align 8
  %4152 = inttoptr i64 %4150 to i64*
  %4153 = load i64, i64* %4152, align 8
  store i64 %4153, i64* %RAX, align 8, !tbaa !2428
  %4154 = add i64 %4149, -44
  %4155 = add i64 %465, 118
  store i64 %4155, i64* %PC, align 8
  %4156 = inttoptr i64 %4154 to i32*
  %4157 = load i32, i32* %4156, align 4
  %4158 = add i32 %4157, -5
  %4159 = zext i32 %4158 to i64
  store i64 %4159, i64* %RDX, align 8, !tbaa !2428
  %4160 = icmp ult i32 %4157, 5
  %4161 = zext i1 %4160 to i8
  store i8 %4161, i8* %.pre-phi, align 1, !tbaa !2432
  %4162 = and i32 %4158, 255
  %4163 = tail call i32 @llvm.ctpop.i32(i32 %4162) #8
  %4164 = trunc i32 %4163 to i8
  %4165 = and i8 %4164, 1
  %4166 = xor i8 %4165, 1
  store i8 %4166, i8* %.pre-phi23, align 1, !tbaa !2446
  %4167 = xor i32 %4157, %4158
  %4168 = lshr i32 %4167, 4
  %4169 = trunc i32 %4168 to i8
  %4170 = and i8 %4169, 1
  store i8 %4170, i8* %.pre-phi25, align 1, !tbaa !2450
  %4171 = icmp eq i32 %4158, 0
  %4172 = zext i1 %4171 to i8
  store i8 %4172, i8* %.pre-phi27, align 1, !tbaa !2447
  %4173 = lshr i32 %4158, 31
  %4174 = trunc i32 %4173 to i8
  store i8 %4174, i8* %.pre-phi29, align 1, !tbaa !2448
  %4175 = lshr i32 %4157, 31
  %4176 = xor i32 %4173, %4175
  %4177 = add nuw nsw i32 %4176, %4175
  %4178 = icmp eq i32 %4177, 2
  %4179 = zext i1 %4178 to i8
  store i8 %4179, i8* %.pre-phi31, align 1, !tbaa !2449
  %4180 = sext i32 %4158 to i64
  store i64 %4180, i64* %RCX, align 8, !tbaa !2428
  %4181 = shl nsw i64 %4180, 2
  %4182 = add i64 %4181, %4153
  %4183 = add i64 %465, 129
  store i64 %4183, i64* %PC, align 8
  %4184 = inttoptr i64 %4182 to i32*
  %4185 = load i32, i32* %4184, align 4
  %4186 = bitcast %union.VectorReg* %8 to i32*
  store i32 %4185, i32* %4186, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %4187 = add i64 %4149, -40
  %4188 = add i64 %465, 133
  store i64 %4188, i64* %PC, align 8
  %4189 = inttoptr i64 %4187 to i64*
  %4190 = load i64, i64* %4189, align 8
  store i64 %4190, i64* %RAX, align 8, !tbaa !2428
  %4191 = add i64 %4149, -24
  %4192 = add i64 %465, 136
  store i64 %4192, i64* %PC, align 8
  %4193 = inttoptr i64 %4191 to i32*
  %4194 = load i32, i32* %4193, align 4
  %4195 = zext i32 %4194 to i64
  store i64 %4195, i64* %RDX, align 8, !tbaa !2428
  %4196 = add i64 %465, 139
  store i64 %4196, i64* %PC, align 8
  %4197 = load i32, i32* %4156, align 4
  %4198 = add i32 %4197, -5
  %4199 = zext i32 %4198 to i64
  store i64 %4199, i64* %RSI, align 8, !tbaa !2428
  %4200 = sext i32 %4194 to i64
  %4201 = sext i32 %4198 to i64
  %4202 = mul nsw i64 %4201, %4200
  %4203 = trunc i64 %4202 to i32
  %4204 = and i64 %4202, 4294967295
  store i64 %4204, i64* %RDX, align 8, !tbaa !2428
  %4205 = shl i64 %4202, 32
  %4206 = ashr exact i64 %4205, 32
  %4207 = icmp ne i64 %4206, %4202
  %4208 = zext i1 %4207 to i8
  store i8 %4208, i8* %.pre-phi, align 1, !tbaa !2432
  %4209 = and i32 %4203, 255
  %4210 = tail call i32 @llvm.ctpop.i32(i32 %4209) #8
  %4211 = trunc i32 %4210 to i8
  %4212 = and i8 %4211, 1
  %4213 = xor i8 %4212, 1
  store i8 %4213, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4214 = lshr i32 %4203, 31
  %4215 = trunc i32 %4214 to i8
  store i8 %4215, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4208, i8* %.pre-phi31, align 1, !tbaa !2449
  %4216 = load i64, i64* %RBP, align 8
  %4217 = add i64 %4216, -48
  %4218 = add i64 %465, 148
  store i64 %4218, i64* %PC, align 8
  %4219 = trunc i64 %4202 to i32
  %4220 = inttoptr i64 %4217 to i32*
  %4221 = load i32, i32* %4220, align 4
  %4222 = add i32 %4221, %4219
  %4223 = zext i32 %4222 to i64
  store i64 %4223, i64* %RDX, align 8, !tbaa !2428
  %4224 = icmp ult i32 %4222, %4219
  %4225 = icmp ult i32 %4222, %4221
  %4226 = or i1 %4224, %4225
  %4227 = zext i1 %4226 to i8
  store i8 %4227, i8* %.pre-phi, align 1, !tbaa !2432
  %4228 = and i32 %4222, 255
  %4229 = tail call i32 @llvm.ctpop.i32(i32 %4228) #8
  %4230 = trunc i32 %4229 to i8
  %4231 = and i8 %4230, 1
  %4232 = xor i8 %4231, 1
  store i8 %4232, i8* %.pre-phi23, align 1, !tbaa !2446
  %4233 = xor i32 %4221, %4219
  %4234 = xor i32 %4233, %4222
  %4235 = lshr i32 %4234, 4
  %4236 = trunc i32 %4235 to i8
  %4237 = and i8 %4236, 1
  store i8 %4237, i8* %.pre-phi25, align 1, !tbaa !2450
  %4238 = icmp eq i32 %4222, 0
  %4239 = zext i1 %4238 to i8
  store i8 %4239, i8* %.pre-phi27, align 1, !tbaa !2447
  %4240 = lshr i32 %4222, 31
  %4241 = trunc i32 %4240 to i8
  store i8 %4241, i8* %.pre-phi29, align 1, !tbaa !2448
  %4242 = lshr i32 %4219, 31
  %4243 = lshr i32 %4221, 31
  %4244 = xor i32 %4240, %4242
  %4245 = xor i32 %4240, %4243
  %4246 = add nuw nsw i32 %4244, %4245
  %4247 = icmp eq i32 %4246, 2
  %4248 = zext i1 %4247 to i8
  store i8 %4248, i8* %.pre-phi31, align 1, !tbaa !2449
  %4249 = sext i32 %4222 to i64
  store i64 %4249, i64* %RCX, align 8, !tbaa !2428
  %4250 = load i64, i64* %RAX, align 8
  %4251 = shl nsw i64 %4249, 2
  %4252 = add i64 %4251, %4250
  %4253 = add i64 %465, 156
  store i64 %4253, i64* %PC, align 8
  %4254 = load <2 x float>, <2 x float>* %600, align 1
  %4255 = load <2 x i32>, <2 x i32>* %601, align 1
  %4256 = inttoptr i64 %4252 to float*
  %4257 = load float, float* %4256, align 4
  %4258 = extractelement <2 x float> %4254, i32 0
  %4259 = fmul float %4258, %4257
  store float %4259, float* %593, align 1, !tbaa !2452
  %4260 = bitcast <2 x float> %4254 to <2 x i32>
  %4261 = extractelement <2 x i32> %4260, i32 1
  store i32 %4261, i32* %602, align 1, !tbaa !2452
  %4262 = extractelement <2 x i32> %4255, i32 0
  store i32 %4262, i32* %603, align 1, !tbaa !2452
  %4263 = extractelement <2 x i32> %4255, i32 1
  store i32 %4263, i32* %604, align 1, !tbaa !2452
  %4264 = load <2 x float>, <2 x float>* %605, align 1
  %4265 = load <2 x i32>, <2 x i32>* %606, align 1
  %4266 = load <2 x float>, <2 x float>* %607, align 1
  %4267 = extractelement <2 x float> %4264, i32 0
  %4268 = extractelement <2 x float> %4266, i32 0
  %4269 = fadd float %4267, %4268
  store float %4269, float* %585, align 1, !tbaa !2452
  %4270 = bitcast <2 x float> %4264 to <2 x i32>
  %4271 = extractelement <2 x i32> %4270, i32 1
  store i32 %4271, i32* %608, align 1, !tbaa !2452
  %4272 = extractelement <2 x i32> %4265, i32 0
  store i32 %4272, i32* %609, align 1, !tbaa !2452
  %4273 = extractelement <2 x i32> %4265, i32 1
  store i32 %4273, i32* %610, align 1, !tbaa !2452
  %4274 = add i64 %4216, -32
  %4275 = add i64 %465, 164
  store i64 %4275, i64* %PC, align 8
  %4276 = inttoptr i64 %4274 to i64*
  %4277 = load i64, i64* %4276, align 8
  store i64 %4277, i64* %RAX, align 8, !tbaa !2428
  %4278 = add i64 %4216, -44
  %4279 = add i64 %465, 167
  store i64 %4279, i64* %PC, align 8
  %4280 = inttoptr i64 %4278 to i32*
  %4281 = load i32, i32* %4280, align 4
  %4282 = add i32 %4281, -4
  %4283 = zext i32 %4282 to i64
  store i64 %4283, i64* %RDX, align 8, !tbaa !2428
  %4284 = icmp ult i32 %4281, 4
  %4285 = zext i1 %4284 to i8
  store i8 %4285, i8* %.pre-phi, align 1, !tbaa !2432
  %4286 = and i32 %4282, 255
  %4287 = tail call i32 @llvm.ctpop.i32(i32 %4286) #8
  %4288 = trunc i32 %4287 to i8
  %4289 = and i8 %4288, 1
  %4290 = xor i8 %4289, 1
  store i8 %4290, i8* %.pre-phi23, align 1, !tbaa !2446
  %4291 = xor i32 %4281, %4282
  %4292 = lshr i32 %4291, 4
  %4293 = trunc i32 %4292 to i8
  %4294 = and i8 %4293, 1
  store i8 %4294, i8* %.pre-phi25, align 1, !tbaa !2450
  %4295 = icmp eq i32 %4282, 0
  %4296 = zext i1 %4295 to i8
  store i8 %4296, i8* %.pre-phi27, align 1, !tbaa !2447
  %4297 = lshr i32 %4282, 31
  %4298 = trunc i32 %4297 to i8
  store i8 %4298, i8* %.pre-phi29, align 1, !tbaa !2448
  %4299 = lshr i32 %4281, 31
  %4300 = xor i32 %4297, %4299
  %4301 = add nuw nsw i32 %4300, %4299
  %4302 = icmp eq i32 %4301, 2
  %4303 = zext i1 %4302 to i8
  store i8 %4303, i8* %.pre-phi31, align 1, !tbaa !2449
  %4304 = sext i32 %4282 to i64
  store i64 %4304, i64* %RCX, align 8, !tbaa !2428
  %4305 = shl nsw i64 %4304, 2
  %4306 = add i64 %4305, %4277
  %4307 = add i64 %465, 178
  store i64 %4307, i64* %PC, align 8
  %4308 = inttoptr i64 %4306 to i32*
  %4309 = load i32, i32* %4308, align 4
  %4310 = bitcast %union.VectorReg* %8 to i32*
  store i32 %4309, i32* %4310, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %4311 = load i64, i64* %RBP, align 8
  %4312 = add i64 %4311, -40
  %4313 = add i64 %465, 182
  store i64 %4313, i64* %PC, align 8
  %4314 = inttoptr i64 %4312 to i64*
  %4315 = load i64, i64* %4314, align 8
  store i64 %4315, i64* %RAX, align 8, !tbaa !2428
  %4316 = add i64 %4311, -24
  %4317 = add i64 %465, 185
  store i64 %4317, i64* %PC, align 8
  %4318 = inttoptr i64 %4316 to i32*
  %4319 = load i32, i32* %4318, align 4
  %4320 = zext i32 %4319 to i64
  store i64 %4320, i64* %RDX, align 8, !tbaa !2428
  %4321 = add i64 %4311, -44
  %4322 = add i64 %465, 188
  store i64 %4322, i64* %PC, align 8
  %4323 = inttoptr i64 %4321 to i32*
  %4324 = load i32, i32* %4323, align 4
  %4325 = add i32 %4324, -4
  %4326 = zext i32 %4325 to i64
  store i64 %4326, i64* %RSI, align 8, !tbaa !2428
  %4327 = sext i32 %4319 to i64
  %4328 = sext i32 %4325 to i64
  %4329 = mul nsw i64 %4328, %4327
  %4330 = trunc i64 %4329 to i32
  %4331 = and i64 %4329, 4294967295
  store i64 %4331, i64* %RDX, align 8, !tbaa !2428
  %4332 = shl i64 %4329, 32
  %4333 = ashr exact i64 %4332, 32
  %4334 = icmp ne i64 %4333, %4329
  %4335 = zext i1 %4334 to i8
  store i8 %4335, i8* %.pre-phi, align 1, !tbaa !2432
  %4336 = and i32 %4330, 255
  %4337 = tail call i32 @llvm.ctpop.i32(i32 %4336) #8
  %4338 = trunc i32 %4337 to i8
  %4339 = and i8 %4338, 1
  %4340 = xor i8 %4339, 1
  store i8 %4340, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4341 = lshr i32 %4330, 31
  %4342 = trunc i32 %4341 to i8
  store i8 %4342, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4335, i8* %.pre-phi31, align 1, !tbaa !2449
  %4343 = add i64 %4311, -48
  %4344 = add i64 %465, 197
  store i64 %4344, i64* %PC, align 8
  %4345 = trunc i64 %4329 to i32
  %4346 = inttoptr i64 %4343 to i32*
  %4347 = load i32, i32* %4346, align 4
  %4348 = add i32 %4347, %4345
  %4349 = zext i32 %4348 to i64
  store i64 %4349, i64* %RDX, align 8, !tbaa !2428
  %4350 = icmp ult i32 %4348, %4345
  %4351 = icmp ult i32 %4348, %4347
  %4352 = or i1 %4350, %4351
  %4353 = zext i1 %4352 to i8
  store i8 %4353, i8* %.pre-phi, align 1, !tbaa !2432
  %4354 = and i32 %4348, 255
  %4355 = tail call i32 @llvm.ctpop.i32(i32 %4354) #8
  %4356 = trunc i32 %4355 to i8
  %4357 = and i8 %4356, 1
  %4358 = xor i8 %4357, 1
  store i8 %4358, i8* %.pre-phi23, align 1, !tbaa !2446
  %4359 = xor i32 %4347, %4345
  %4360 = xor i32 %4359, %4348
  %4361 = lshr i32 %4360, 4
  %4362 = trunc i32 %4361 to i8
  %4363 = and i8 %4362, 1
  store i8 %4363, i8* %.pre-phi25, align 1, !tbaa !2450
  %4364 = icmp eq i32 %4348, 0
  %4365 = zext i1 %4364 to i8
  store i8 %4365, i8* %.pre-phi27, align 1, !tbaa !2447
  %4366 = lshr i32 %4348, 31
  %4367 = trunc i32 %4366 to i8
  store i8 %4367, i8* %.pre-phi29, align 1, !tbaa !2448
  %4368 = lshr i32 %4345, 31
  %4369 = lshr i32 %4347, 31
  %4370 = xor i32 %4366, %4368
  %4371 = xor i32 %4366, %4369
  %4372 = add nuw nsw i32 %4370, %4371
  %4373 = icmp eq i32 %4372, 2
  %4374 = zext i1 %4373 to i8
  store i8 %4374, i8* %.pre-phi31, align 1, !tbaa !2449
  %4375 = sext i32 %4348 to i64
  store i64 %4375, i64* %RCX, align 8, !tbaa !2428
  %4376 = load i64, i64* %RAX, align 8
  %4377 = shl nsw i64 %4375, 2
  %4378 = add i64 %4377, %4376
  %4379 = add i64 %465, 205
  store i64 %4379, i64* %PC, align 8
  %4380 = load <2 x float>, <2 x float>* %600, align 1
  %4381 = load <2 x i32>, <2 x i32>* %601, align 1
  %4382 = inttoptr i64 %4378 to float*
  %4383 = load float, float* %4382, align 4
  %4384 = extractelement <2 x float> %4380, i32 0
  %4385 = fmul float %4384, %4383
  store float %4385, float* %593, align 1, !tbaa !2452
  %4386 = bitcast <2 x float> %4380 to <2 x i32>
  %4387 = extractelement <2 x i32> %4386, i32 1
  store i32 %4387, i32* %602, align 1, !tbaa !2452
  %4388 = extractelement <2 x i32> %4381, i32 0
  store i32 %4388, i32* %603, align 1, !tbaa !2452
  %4389 = extractelement <2 x i32> %4381, i32 1
  store i32 %4389, i32* %604, align 1, !tbaa !2452
  %4390 = load <2 x float>, <2 x float>* %605, align 1
  %4391 = load <2 x i32>, <2 x i32>* %606, align 1
  %4392 = load <2 x float>, <2 x float>* %607, align 1
  %4393 = extractelement <2 x float> %4390, i32 0
  %4394 = extractelement <2 x float> %4392, i32 0
  %4395 = fadd float %4393, %4394
  store float %4395, float* %585, align 1, !tbaa !2452
  %4396 = bitcast <2 x float> %4390 to <2 x i32>
  %4397 = extractelement <2 x i32> %4396, i32 1
  store i32 %4397, i32* %608, align 1, !tbaa !2452
  %4398 = extractelement <2 x i32> %4391, i32 0
  store i32 %4398, i32* %609, align 1, !tbaa !2452
  %4399 = extractelement <2 x i32> %4391, i32 1
  store i32 %4399, i32* %610, align 1, !tbaa !2452
  %4400 = load i64, i64* %RBP, align 8
  %4401 = add i64 %4400, -32
  %4402 = add i64 %465, 213
  store i64 %4402, i64* %PC, align 8
  %4403 = inttoptr i64 %4401 to i64*
  %4404 = load i64, i64* %4403, align 8
  store i64 %4404, i64* %RAX, align 8, !tbaa !2428
  %4405 = add i64 %4400, -44
  %4406 = add i64 %465, 216
  store i64 %4406, i64* %PC, align 8
  %4407 = inttoptr i64 %4405 to i32*
  %4408 = load i32, i32* %4407, align 4
  %4409 = add i32 %4408, -3
  %4410 = zext i32 %4409 to i64
  store i64 %4410, i64* %RDX, align 8, !tbaa !2428
  %4411 = icmp ult i32 %4408, 3
  %4412 = zext i1 %4411 to i8
  store i8 %4412, i8* %.pre-phi, align 1, !tbaa !2432
  %4413 = and i32 %4409, 255
  %4414 = tail call i32 @llvm.ctpop.i32(i32 %4413) #8
  %4415 = trunc i32 %4414 to i8
  %4416 = and i8 %4415, 1
  %4417 = xor i8 %4416, 1
  store i8 %4417, i8* %.pre-phi23, align 1, !tbaa !2446
  %4418 = xor i32 %4408, %4409
  %4419 = lshr i32 %4418, 4
  %4420 = trunc i32 %4419 to i8
  %4421 = and i8 %4420, 1
  store i8 %4421, i8* %.pre-phi25, align 1, !tbaa !2450
  %4422 = icmp eq i32 %4409, 0
  %4423 = zext i1 %4422 to i8
  store i8 %4423, i8* %.pre-phi27, align 1, !tbaa !2447
  %4424 = lshr i32 %4409, 31
  %4425 = trunc i32 %4424 to i8
  store i8 %4425, i8* %.pre-phi29, align 1, !tbaa !2448
  %4426 = lshr i32 %4408, 31
  %4427 = xor i32 %4424, %4426
  %4428 = add nuw nsw i32 %4427, %4426
  %4429 = icmp eq i32 %4428, 2
  %4430 = zext i1 %4429 to i8
  store i8 %4430, i8* %.pre-phi31, align 1, !tbaa !2449
  %4431 = sext i32 %4409 to i64
  store i64 %4431, i64* %RCX, align 8, !tbaa !2428
  %4432 = shl nsw i64 %4431, 2
  %4433 = add i64 %4432, %4404
  %4434 = add i64 %465, 227
  store i64 %4434, i64* %PC, align 8
  %4435 = inttoptr i64 %4433 to i32*
  %4436 = load i32, i32* %4435, align 4
  %4437 = bitcast %union.VectorReg* %8 to i32*
  store i32 %4436, i32* %4437, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %4438 = add i64 %4400, -40
  %4439 = add i64 %465, 231
  store i64 %4439, i64* %PC, align 8
  %4440 = inttoptr i64 %4438 to i64*
  %4441 = load i64, i64* %4440, align 8
  store i64 %4441, i64* %RAX, align 8, !tbaa !2428
  %4442 = add i64 %4400, -24
  %4443 = add i64 %465, 234
  store i64 %4443, i64* %PC, align 8
  %4444 = inttoptr i64 %4442 to i32*
  %4445 = load i32, i32* %4444, align 4
  %4446 = zext i32 %4445 to i64
  store i64 %4446, i64* %RDX, align 8, !tbaa !2428
  %4447 = add i64 %465, 237
  store i64 %4447, i64* %PC, align 8
  %4448 = load i32, i32* %4407, align 4
  %4449 = add i32 %4448, -3
  %4450 = zext i32 %4449 to i64
  store i64 %4450, i64* %RSI, align 8, !tbaa !2428
  %4451 = sext i32 %4445 to i64
  %4452 = sext i32 %4449 to i64
  %4453 = mul nsw i64 %4452, %4451
  %4454 = trunc i64 %4453 to i32
  %4455 = and i64 %4453, 4294967295
  store i64 %4455, i64* %RDX, align 8, !tbaa !2428
  %4456 = shl i64 %4453, 32
  %4457 = ashr exact i64 %4456, 32
  %4458 = icmp ne i64 %4457, %4453
  %4459 = zext i1 %4458 to i8
  store i8 %4459, i8* %.pre-phi, align 1, !tbaa !2432
  %4460 = and i32 %4454, 255
  %4461 = tail call i32 @llvm.ctpop.i32(i32 %4460) #8
  %4462 = trunc i32 %4461 to i8
  %4463 = and i8 %4462, 1
  %4464 = xor i8 %4463, 1
  store i8 %4464, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4465 = lshr i32 %4454, 31
  %4466 = trunc i32 %4465 to i8
  store i8 %4466, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4459, i8* %.pre-phi31, align 1, !tbaa !2449
  %4467 = load i64, i64* %RBP, align 8
  %4468 = add i64 %4467, -48
  %4469 = add i64 %465, 246
  store i64 %4469, i64* %PC, align 8
  %4470 = trunc i64 %4453 to i32
  %4471 = inttoptr i64 %4468 to i32*
  %4472 = load i32, i32* %4471, align 4
  %4473 = add i32 %4472, %4470
  %4474 = zext i32 %4473 to i64
  store i64 %4474, i64* %RDX, align 8, !tbaa !2428
  %4475 = icmp ult i32 %4473, %4470
  %4476 = icmp ult i32 %4473, %4472
  %4477 = or i1 %4475, %4476
  %4478 = zext i1 %4477 to i8
  store i8 %4478, i8* %.pre-phi, align 1, !tbaa !2432
  %4479 = and i32 %4473, 255
  %4480 = tail call i32 @llvm.ctpop.i32(i32 %4479) #8
  %4481 = trunc i32 %4480 to i8
  %4482 = and i8 %4481, 1
  %4483 = xor i8 %4482, 1
  store i8 %4483, i8* %.pre-phi23, align 1, !tbaa !2446
  %4484 = xor i32 %4472, %4470
  %4485 = xor i32 %4484, %4473
  %4486 = lshr i32 %4485, 4
  %4487 = trunc i32 %4486 to i8
  %4488 = and i8 %4487, 1
  store i8 %4488, i8* %.pre-phi25, align 1, !tbaa !2450
  %4489 = icmp eq i32 %4473, 0
  %4490 = zext i1 %4489 to i8
  store i8 %4490, i8* %.pre-phi27, align 1, !tbaa !2447
  %4491 = lshr i32 %4473, 31
  %4492 = trunc i32 %4491 to i8
  store i8 %4492, i8* %.pre-phi29, align 1, !tbaa !2448
  %4493 = lshr i32 %4470, 31
  %4494 = lshr i32 %4472, 31
  %4495 = xor i32 %4491, %4493
  %4496 = xor i32 %4491, %4494
  %4497 = add nuw nsw i32 %4495, %4496
  %4498 = icmp eq i32 %4497, 2
  %4499 = zext i1 %4498 to i8
  store i8 %4499, i8* %.pre-phi31, align 1, !tbaa !2449
  %4500 = sext i32 %4473 to i64
  store i64 %4500, i64* %RCX, align 8, !tbaa !2428
  %4501 = load i64, i64* %RAX, align 8
  %4502 = shl nsw i64 %4500, 2
  %4503 = add i64 %4502, %4501
  %4504 = add i64 %465, 254
  store i64 %4504, i64* %PC, align 8
  %4505 = load <2 x float>, <2 x float>* %600, align 1
  %4506 = load <2 x i32>, <2 x i32>* %601, align 1
  %4507 = inttoptr i64 %4503 to float*
  %4508 = load float, float* %4507, align 4
  %4509 = extractelement <2 x float> %4505, i32 0
  %4510 = fmul float %4509, %4508
  store float %4510, float* %593, align 1, !tbaa !2452
  %4511 = bitcast <2 x float> %4505 to <2 x i32>
  %4512 = extractelement <2 x i32> %4511, i32 1
  store i32 %4512, i32* %602, align 1, !tbaa !2452
  %4513 = extractelement <2 x i32> %4506, i32 0
  store i32 %4513, i32* %603, align 1, !tbaa !2452
  %4514 = extractelement <2 x i32> %4506, i32 1
  store i32 %4514, i32* %604, align 1, !tbaa !2452
  %4515 = load <2 x float>, <2 x float>* %605, align 1
  %4516 = load <2 x i32>, <2 x i32>* %606, align 1
  %4517 = load <2 x float>, <2 x float>* %607, align 1
  %4518 = extractelement <2 x float> %4515, i32 0
  %4519 = extractelement <2 x float> %4517, i32 0
  %4520 = fadd float %4518, %4519
  store float %4520, float* %585, align 1, !tbaa !2452
  %4521 = bitcast <2 x float> %4515 to <2 x i32>
  %4522 = extractelement <2 x i32> %4521, i32 1
  store i32 %4522, i32* %608, align 1, !tbaa !2452
  %4523 = extractelement <2 x i32> %4516, i32 0
  store i32 %4523, i32* %609, align 1, !tbaa !2452
  %4524 = extractelement <2 x i32> %4516, i32 1
  store i32 %4524, i32* %610, align 1, !tbaa !2452
  %4525 = add i64 %4467, -32
  %4526 = add i64 %465, 262
  store i64 %4526, i64* %PC, align 8
  %4527 = inttoptr i64 %4525 to i64*
  %4528 = load i64, i64* %4527, align 8
  store i64 %4528, i64* %RAX, align 8, !tbaa !2428
  %4529 = add i64 %4467, -44
  %4530 = add i64 %465, 265
  store i64 %4530, i64* %PC, align 8
  %4531 = inttoptr i64 %4529 to i32*
  %4532 = load i32, i32* %4531, align 4
  %4533 = add i32 %4532, -2
  %4534 = zext i32 %4533 to i64
  store i64 %4534, i64* %RDX, align 8, !tbaa !2428
  %4535 = icmp ult i32 %4532, 2
  %4536 = zext i1 %4535 to i8
  store i8 %4536, i8* %.pre-phi, align 1, !tbaa !2432
  %4537 = and i32 %4533, 255
  %4538 = tail call i32 @llvm.ctpop.i32(i32 %4537) #8
  %4539 = trunc i32 %4538 to i8
  %4540 = and i8 %4539, 1
  %4541 = xor i8 %4540, 1
  store i8 %4541, i8* %.pre-phi23, align 1, !tbaa !2446
  %4542 = xor i32 %4532, %4533
  %4543 = lshr i32 %4542, 4
  %4544 = trunc i32 %4543 to i8
  %4545 = and i8 %4544, 1
  store i8 %4545, i8* %.pre-phi25, align 1, !tbaa !2450
  %4546 = icmp eq i32 %4533, 0
  %4547 = zext i1 %4546 to i8
  store i8 %4547, i8* %.pre-phi27, align 1, !tbaa !2447
  %4548 = lshr i32 %4533, 31
  %4549 = trunc i32 %4548 to i8
  store i8 %4549, i8* %.pre-phi29, align 1, !tbaa !2448
  %4550 = lshr i32 %4532, 31
  %4551 = xor i32 %4548, %4550
  %4552 = add nuw nsw i32 %4551, %4550
  %4553 = icmp eq i32 %4552, 2
  %4554 = zext i1 %4553 to i8
  store i8 %4554, i8* %.pre-phi31, align 1, !tbaa !2449
  %4555 = sext i32 %4533 to i64
  store i64 %4555, i64* %RCX, align 8, !tbaa !2428
  %4556 = shl nsw i64 %4555, 2
  %4557 = add i64 %4556, %4528
  %4558 = add i64 %465, 276
  store i64 %4558, i64* %PC, align 8
  %4559 = inttoptr i64 %4557 to i32*
  %4560 = load i32, i32* %4559, align 4
  %4561 = bitcast %union.VectorReg* %8 to i32*
  store i32 %4560, i32* %4561, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %4562 = load i64, i64* %RBP, align 8
  %4563 = add i64 %4562, -40
  %4564 = add i64 %465, 280
  store i64 %4564, i64* %PC, align 8
  %4565 = inttoptr i64 %4563 to i64*
  %4566 = load i64, i64* %4565, align 8
  store i64 %4566, i64* %RAX, align 8, !tbaa !2428
  %4567 = add i64 %4562, -24
  %4568 = add i64 %465, 283
  store i64 %4568, i64* %PC, align 8
  %4569 = inttoptr i64 %4567 to i32*
  %4570 = load i32, i32* %4569, align 4
  %4571 = zext i32 %4570 to i64
  store i64 %4571, i64* %RDX, align 8, !tbaa !2428
  %4572 = add i64 %4562, -44
  %4573 = add i64 %465, 286
  store i64 %4573, i64* %PC, align 8
  %4574 = inttoptr i64 %4572 to i32*
  %4575 = load i32, i32* %4574, align 4
  %4576 = add i32 %4575, -2
  %4577 = zext i32 %4576 to i64
  store i64 %4577, i64* %RSI, align 8, !tbaa !2428
  %4578 = sext i32 %4570 to i64
  %4579 = sext i32 %4576 to i64
  %4580 = mul nsw i64 %4579, %4578
  %4581 = trunc i64 %4580 to i32
  %4582 = and i64 %4580, 4294967295
  store i64 %4582, i64* %RDX, align 8, !tbaa !2428
  %4583 = shl i64 %4580, 32
  %4584 = ashr exact i64 %4583, 32
  %4585 = icmp ne i64 %4584, %4580
  %4586 = zext i1 %4585 to i8
  store i8 %4586, i8* %.pre-phi, align 1, !tbaa !2432
  %4587 = and i32 %4581, 255
  %4588 = tail call i32 @llvm.ctpop.i32(i32 %4587) #8
  %4589 = trunc i32 %4588 to i8
  %4590 = and i8 %4589, 1
  %4591 = xor i8 %4590, 1
  store i8 %4591, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4592 = lshr i32 %4581, 31
  %4593 = trunc i32 %4592 to i8
  store i8 %4593, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4586, i8* %.pre-phi31, align 1, !tbaa !2449
  %4594 = add i64 %4562, -48
  %4595 = add i64 %465, 295
  store i64 %4595, i64* %PC, align 8
  %4596 = trunc i64 %4580 to i32
  %4597 = inttoptr i64 %4594 to i32*
  %4598 = load i32, i32* %4597, align 4
  %4599 = add i32 %4598, %4596
  %4600 = zext i32 %4599 to i64
  store i64 %4600, i64* %RDX, align 8, !tbaa !2428
  %4601 = icmp ult i32 %4599, %4596
  %4602 = icmp ult i32 %4599, %4598
  %4603 = or i1 %4601, %4602
  %4604 = zext i1 %4603 to i8
  store i8 %4604, i8* %.pre-phi, align 1, !tbaa !2432
  %4605 = and i32 %4599, 255
  %4606 = tail call i32 @llvm.ctpop.i32(i32 %4605) #8
  %4607 = trunc i32 %4606 to i8
  %4608 = and i8 %4607, 1
  %4609 = xor i8 %4608, 1
  store i8 %4609, i8* %.pre-phi23, align 1, !tbaa !2446
  %4610 = xor i32 %4598, %4596
  %4611 = xor i32 %4610, %4599
  %4612 = lshr i32 %4611, 4
  %4613 = trunc i32 %4612 to i8
  %4614 = and i8 %4613, 1
  store i8 %4614, i8* %.pre-phi25, align 1, !tbaa !2450
  %4615 = icmp eq i32 %4599, 0
  %4616 = zext i1 %4615 to i8
  store i8 %4616, i8* %.pre-phi27, align 1, !tbaa !2447
  %4617 = lshr i32 %4599, 31
  %4618 = trunc i32 %4617 to i8
  store i8 %4618, i8* %.pre-phi29, align 1, !tbaa !2448
  %4619 = lshr i32 %4596, 31
  %4620 = lshr i32 %4598, 31
  %4621 = xor i32 %4617, %4619
  %4622 = xor i32 %4617, %4620
  %4623 = add nuw nsw i32 %4621, %4622
  %4624 = icmp eq i32 %4623, 2
  %4625 = zext i1 %4624 to i8
  store i8 %4625, i8* %.pre-phi31, align 1, !tbaa !2449
  %4626 = sext i32 %4599 to i64
  store i64 %4626, i64* %RCX, align 8, !tbaa !2428
  %4627 = load i64, i64* %RAX, align 8
  %4628 = shl nsw i64 %4626, 2
  %4629 = add i64 %4628, %4627
  %4630 = add i64 %465, 303
  store i64 %4630, i64* %PC, align 8
  %4631 = load <2 x float>, <2 x float>* %600, align 1
  %4632 = load <2 x i32>, <2 x i32>* %601, align 1
  %4633 = inttoptr i64 %4629 to float*
  %4634 = load float, float* %4633, align 4
  %4635 = extractelement <2 x float> %4631, i32 0
  %4636 = fmul float %4635, %4634
  store float %4636, float* %593, align 1, !tbaa !2452
  %4637 = bitcast <2 x float> %4631 to <2 x i32>
  %4638 = extractelement <2 x i32> %4637, i32 1
  store i32 %4638, i32* %602, align 1, !tbaa !2452
  %4639 = extractelement <2 x i32> %4632, i32 0
  store i32 %4639, i32* %603, align 1, !tbaa !2452
  %4640 = extractelement <2 x i32> %4632, i32 1
  store i32 %4640, i32* %604, align 1, !tbaa !2452
  %4641 = load <2 x float>, <2 x float>* %605, align 1
  %4642 = load <2 x i32>, <2 x i32>* %606, align 1
  %4643 = load <2 x float>, <2 x float>* %607, align 1
  %4644 = extractelement <2 x float> %4641, i32 0
  %4645 = extractelement <2 x float> %4643, i32 0
  %4646 = fadd float %4644, %4645
  store float %4646, float* %585, align 1, !tbaa !2452
  %4647 = bitcast <2 x float> %4641 to <2 x i32>
  %4648 = extractelement <2 x i32> %4647, i32 1
  store i32 %4648, i32* %608, align 1, !tbaa !2452
  %4649 = extractelement <2 x i32> %4642, i32 0
  store i32 %4649, i32* %609, align 1, !tbaa !2452
  %4650 = extractelement <2 x i32> %4642, i32 1
  store i32 %4650, i32* %610, align 1, !tbaa !2452
  %4651 = load i64, i64* %RBP, align 8
  %4652 = add i64 %4651, -32
  %4653 = add i64 %465, 311
  store i64 %4653, i64* %PC, align 8
  %4654 = inttoptr i64 %4652 to i64*
  %4655 = load i64, i64* %4654, align 8
  store i64 %4655, i64* %RAX, align 8, !tbaa !2428
  %4656 = add i64 %4651, -44
  %4657 = add i64 %465, 314
  store i64 %4657, i64* %PC, align 8
  %4658 = inttoptr i64 %4656 to i32*
  %4659 = load i32, i32* %4658, align 4
  %4660 = add i32 %4659, -1
  %4661 = zext i32 %4660 to i64
  store i64 %4661, i64* %RDX, align 8, !tbaa !2428
  %4662 = icmp eq i32 %4659, 0
  %4663 = zext i1 %4662 to i8
  store i8 %4663, i8* %.pre-phi, align 1, !tbaa !2432
  %4664 = and i32 %4660, 255
  %4665 = tail call i32 @llvm.ctpop.i32(i32 %4664) #8
  %4666 = trunc i32 %4665 to i8
  %4667 = and i8 %4666, 1
  %4668 = xor i8 %4667, 1
  store i8 %4668, i8* %.pre-phi23, align 1, !tbaa !2446
  %4669 = xor i32 %4659, %4660
  %4670 = lshr i32 %4669, 4
  %4671 = trunc i32 %4670 to i8
  %4672 = and i8 %4671, 1
  store i8 %4672, i8* %.pre-phi25, align 1, !tbaa !2450
  %4673 = icmp eq i32 %4660, 0
  %4674 = zext i1 %4673 to i8
  store i8 %4674, i8* %.pre-phi27, align 1, !tbaa !2447
  %4675 = lshr i32 %4660, 31
  %4676 = trunc i32 %4675 to i8
  store i8 %4676, i8* %.pre-phi29, align 1, !tbaa !2448
  %4677 = lshr i32 %4659, 31
  %4678 = xor i32 %4675, %4677
  %4679 = add nuw nsw i32 %4678, %4677
  %4680 = icmp eq i32 %4679, 2
  %4681 = zext i1 %4680 to i8
  store i8 %4681, i8* %.pre-phi31, align 1, !tbaa !2449
  %4682 = sext i32 %4660 to i64
  store i64 %4682, i64* %RCX, align 8, !tbaa !2428
  %4683 = shl nsw i64 %4682, 2
  %4684 = add i64 %4683, %4655
  %4685 = add i64 %465, 325
  store i64 %4685, i64* %PC, align 8
  %4686 = inttoptr i64 %4684 to i32*
  %4687 = load i32, i32* %4686, align 4
  %4688 = bitcast %union.VectorReg* %8 to i32*
  store i32 %4687, i32* %4688, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %4689 = add i64 %4651, -40
  %4690 = add i64 %465, 329
  store i64 %4690, i64* %PC, align 8
  %4691 = inttoptr i64 %4689 to i64*
  %4692 = load i64, i64* %4691, align 8
  store i64 %4692, i64* %RAX, align 8, !tbaa !2428
  %4693 = add i64 %4651, -24
  %4694 = add i64 %465, 332
  store i64 %4694, i64* %PC, align 8
  %4695 = inttoptr i64 %4693 to i32*
  %4696 = load i32, i32* %4695, align 4
  %4697 = zext i32 %4696 to i64
  store i64 %4697, i64* %RDX, align 8, !tbaa !2428
  %4698 = add i64 %465, 335
  store i64 %4698, i64* %PC, align 8
  %4699 = load i32, i32* %4658, align 4
  %4700 = add i32 %4699, -1
  %4701 = zext i32 %4700 to i64
  store i64 %4701, i64* %RSI, align 8, !tbaa !2428
  %4702 = sext i32 %4696 to i64
  %4703 = sext i32 %4700 to i64
  %4704 = mul nsw i64 %4703, %4702
  %4705 = trunc i64 %4704 to i32
  %4706 = and i64 %4704, 4294967295
  store i64 %4706, i64* %RDX, align 8, !tbaa !2428
  %4707 = shl i64 %4704, 32
  %4708 = ashr exact i64 %4707, 32
  %4709 = icmp ne i64 %4708, %4704
  %4710 = zext i1 %4709 to i8
  store i8 %4710, i8* %.pre-phi, align 1, !tbaa !2432
  %4711 = and i32 %4705, 255
  %4712 = tail call i32 @llvm.ctpop.i32(i32 %4711) #8
  %4713 = trunc i32 %4712 to i8
  %4714 = and i8 %4713, 1
  %4715 = xor i8 %4714, 1
  store i8 %4715, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4716 = lshr i32 %4705, 31
  %4717 = trunc i32 %4716 to i8
  store i8 %4717, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4710, i8* %.pre-phi31, align 1, !tbaa !2449
  %4718 = load i64, i64* %RBP, align 8
  %4719 = add i64 %4718, -48
  %4720 = add i64 %465, 344
  store i64 %4720, i64* %PC, align 8
  %4721 = trunc i64 %4704 to i32
  %4722 = inttoptr i64 %4719 to i32*
  %4723 = load i32, i32* %4722, align 4
  %4724 = add i32 %4723, %4721
  %4725 = zext i32 %4724 to i64
  store i64 %4725, i64* %RDX, align 8, !tbaa !2428
  %4726 = icmp ult i32 %4724, %4721
  %4727 = icmp ult i32 %4724, %4723
  %4728 = or i1 %4726, %4727
  %4729 = zext i1 %4728 to i8
  store i8 %4729, i8* %.pre-phi, align 1, !tbaa !2432
  %4730 = and i32 %4724, 255
  %4731 = tail call i32 @llvm.ctpop.i32(i32 %4730) #8
  %4732 = trunc i32 %4731 to i8
  %4733 = and i8 %4732, 1
  %4734 = xor i8 %4733, 1
  store i8 %4734, i8* %.pre-phi23, align 1, !tbaa !2446
  %4735 = xor i32 %4723, %4721
  %4736 = xor i32 %4735, %4724
  %4737 = lshr i32 %4736, 4
  %4738 = trunc i32 %4737 to i8
  %4739 = and i8 %4738, 1
  store i8 %4739, i8* %.pre-phi25, align 1, !tbaa !2450
  %4740 = icmp eq i32 %4724, 0
  %4741 = zext i1 %4740 to i8
  store i8 %4741, i8* %.pre-phi27, align 1, !tbaa !2447
  %4742 = lshr i32 %4724, 31
  %4743 = trunc i32 %4742 to i8
  store i8 %4743, i8* %.pre-phi29, align 1, !tbaa !2448
  %4744 = lshr i32 %4721, 31
  %4745 = lshr i32 %4723, 31
  %4746 = xor i32 %4742, %4744
  %4747 = xor i32 %4742, %4745
  %4748 = add nuw nsw i32 %4746, %4747
  %4749 = icmp eq i32 %4748, 2
  %4750 = zext i1 %4749 to i8
  store i8 %4750, i8* %.pre-phi31, align 1, !tbaa !2449
  %4751 = sext i32 %4724 to i64
  store i64 %4751, i64* %RCX, align 8, !tbaa !2428
  %4752 = load i64, i64* %RAX, align 8
  %4753 = shl nsw i64 %4751, 2
  %4754 = add i64 %4753, %4752
  %4755 = add i64 %465, 352
  store i64 %4755, i64* %PC, align 8
  %4756 = load <2 x float>, <2 x float>* %600, align 1
  %4757 = load <2 x i32>, <2 x i32>* %601, align 1
  %4758 = inttoptr i64 %4754 to float*
  %4759 = load float, float* %4758, align 4
  %4760 = extractelement <2 x float> %4756, i32 0
  %4761 = fmul float %4760, %4759
  store float %4761, float* %593, align 1, !tbaa !2452
  %4762 = bitcast <2 x float> %4756 to <2 x i32>
  %4763 = extractelement <2 x i32> %4762, i32 1
  store i32 %4763, i32* %602, align 1, !tbaa !2452
  %4764 = extractelement <2 x i32> %4757, i32 0
  store i32 %4764, i32* %603, align 1, !tbaa !2452
  %4765 = extractelement <2 x i32> %4757, i32 1
  store i32 %4765, i32* %604, align 1, !tbaa !2452
  %4766 = load <2 x float>, <2 x float>* %605, align 1
  %4767 = load <2 x i32>, <2 x i32>* %606, align 1
  %4768 = load <2 x float>, <2 x float>* %607, align 1
  %4769 = extractelement <2 x float> %4766, i32 0
  %4770 = extractelement <2 x float> %4768, i32 0
  %4771 = fadd float %4769, %4770
  store float %4771, float* %585, align 1, !tbaa !2452
  %4772 = bitcast <2 x float> %4766 to <2 x i32>
  %4773 = extractelement <2 x i32> %4772, i32 1
  store i32 %4773, i32* %608, align 1, !tbaa !2452
  %4774 = extractelement <2 x i32> %4767, i32 0
  store i32 %4774, i32* %609, align 1, !tbaa !2452
  %4775 = extractelement <2 x i32> %4767, i32 1
  store i32 %4775, i32* %610, align 1, !tbaa !2452
  %4776 = add i64 %4718, -32
  %4777 = add i64 %465, 360
  store i64 %4777, i64* %PC, align 8
  %4778 = inttoptr i64 %4776 to i64*
  %4779 = load i64, i64* %4778, align 8
  store i64 %4779, i64* %RAX, align 8, !tbaa !2428
  %4780 = add i64 %4718, -44
  %4781 = add i64 %465, 364
  store i64 %4781, i64* %PC, align 8
  %4782 = inttoptr i64 %4780 to i32*
  %4783 = load i32, i32* %4782, align 4
  %4784 = sext i32 %4783 to i64
  store i64 %4784, i64* %RCX, align 8, !tbaa !2428
  %4785 = shl nsw i64 %4784, 2
  %4786 = add i64 %4785, %4779
  %4787 = add i64 %465, 369
  store i64 %4787, i64* %PC, align 8
  %4788 = inttoptr i64 %4786 to i32*
  %4789 = load i32, i32* %4788, align 4
  %4790 = bitcast %union.VectorReg* %8 to i32*
  store i32 %4789, i32* %4790, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %4791 = load i64, i64* %RBP, align 8
  %4792 = add i64 %4791, -40
  %4793 = add i64 %465, 373
  store i64 %4793, i64* %PC, align 8
  %4794 = inttoptr i64 %4792 to i64*
  %4795 = load i64, i64* %4794, align 8
  store i64 %4795, i64* %RAX, align 8, !tbaa !2428
  %4796 = add i64 %4791, -24
  %4797 = add i64 %465, 376
  store i64 %4797, i64* %PC, align 8
  %4798 = inttoptr i64 %4796 to i32*
  %4799 = load i32, i32* %4798, align 4
  %4800 = zext i32 %4799 to i64
  store i64 %4800, i64* %RDX, align 8, !tbaa !2428
  %4801 = add i64 %4791, -44
  %4802 = add i64 %465, 380
  store i64 %4802, i64* %PC, align 8
  %4803 = inttoptr i64 %4801 to i32*
  %4804 = load i32, i32* %4803, align 4
  %4805 = sext i32 %4799 to i64
  %4806 = sext i32 %4804 to i64
  %4807 = mul nsw i64 %4806, %4805
  %4808 = trunc i64 %4807 to i32
  %4809 = and i64 %4807, 4294967295
  store i64 %4809, i64* %RDX, align 8, !tbaa !2428
  %4810 = shl i64 %4807, 32
  %4811 = ashr exact i64 %4810, 32
  %4812 = icmp ne i64 %4811, %4807
  %4813 = zext i1 %4812 to i8
  store i8 %4813, i8* %.pre-phi, align 1, !tbaa !2432
  %4814 = and i32 %4808, 255
  %4815 = tail call i32 @llvm.ctpop.i32(i32 %4814) #8
  %4816 = trunc i32 %4815 to i8
  %4817 = and i8 %4816, 1
  %4818 = xor i8 %4817, 1
  store i8 %4818, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4819 = lshr i32 %4808, 31
  %4820 = trunc i32 %4819 to i8
  store i8 %4820, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4813, i8* %.pre-phi31, align 1, !tbaa !2449
  %4821 = add i64 %4791, -48
  %4822 = add i64 %465, 383
  store i64 %4822, i64* %PC, align 8
  %4823 = trunc i64 %4807 to i32
  %4824 = inttoptr i64 %4821 to i32*
  %4825 = load i32, i32* %4824, align 4
  %4826 = add i32 %4825, %4823
  %4827 = zext i32 %4826 to i64
  store i64 %4827, i64* %RDX, align 8, !tbaa !2428
  %4828 = icmp ult i32 %4826, %4823
  %4829 = icmp ult i32 %4826, %4825
  %4830 = or i1 %4828, %4829
  %4831 = zext i1 %4830 to i8
  store i8 %4831, i8* %.pre-phi, align 1, !tbaa !2432
  %4832 = and i32 %4826, 255
  %4833 = tail call i32 @llvm.ctpop.i32(i32 %4832) #8
  %4834 = trunc i32 %4833 to i8
  %4835 = and i8 %4834, 1
  %4836 = xor i8 %4835, 1
  store i8 %4836, i8* %.pre-phi23, align 1, !tbaa !2446
  %4837 = xor i32 %4825, %4823
  %4838 = xor i32 %4837, %4826
  %4839 = lshr i32 %4838, 4
  %4840 = trunc i32 %4839 to i8
  %4841 = and i8 %4840, 1
  store i8 %4841, i8* %.pre-phi25, align 1, !tbaa !2450
  %4842 = icmp eq i32 %4826, 0
  %4843 = zext i1 %4842 to i8
  store i8 %4843, i8* %.pre-phi27, align 1, !tbaa !2447
  %4844 = lshr i32 %4826, 31
  %4845 = trunc i32 %4844 to i8
  store i8 %4845, i8* %.pre-phi29, align 1, !tbaa !2448
  %4846 = lshr i32 %4823, 31
  %4847 = lshr i32 %4825, 31
  %4848 = xor i32 %4844, %4846
  %4849 = xor i32 %4844, %4847
  %4850 = add nuw nsw i32 %4848, %4849
  %4851 = icmp eq i32 %4850, 2
  %4852 = zext i1 %4851 to i8
  store i8 %4852, i8* %.pre-phi31, align 1, !tbaa !2449
  %4853 = sext i32 %4826 to i64
  store i64 %4853, i64* %RCX, align 8, !tbaa !2428
  %4854 = shl nsw i64 %4853, 2
  %4855 = add i64 %4854, %4795
  %4856 = add i64 %465, 391
  store i64 %4856, i64* %PC, align 8
  %4857 = load <2 x float>, <2 x float>* %600, align 1
  %4858 = load <2 x i32>, <2 x i32>* %601, align 1
  %4859 = inttoptr i64 %4855 to float*
  %4860 = load float, float* %4859, align 4
  %4861 = extractelement <2 x float> %4857, i32 0
  %4862 = fmul float %4861, %4860
  store float %4862, float* %593, align 1, !tbaa !2452
  %4863 = bitcast <2 x float> %4857 to <2 x i32>
  %4864 = extractelement <2 x i32> %4863, i32 1
  store i32 %4864, i32* %602, align 1, !tbaa !2452
  %4865 = extractelement <2 x i32> %4858, i32 0
  store i32 %4865, i32* %603, align 1, !tbaa !2452
  %4866 = extractelement <2 x i32> %4858, i32 1
  store i32 %4866, i32* %604, align 1, !tbaa !2452
  %4867 = load <2 x float>, <2 x float>* %605, align 1
  %4868 = load <2 x i32>, <2 x i32>* %606, align 1
  %4869 = load <2 x float>, <2 x float>* %607, align 1
  %4870 = extractelement <2 x float> %4867, i32 0
  %4871 = extractelement <2 x float> %4869, i32 0
  %4872 = fadd float %4870, %4871
  store float %4872, float* %585, align 1, !tbaa !2452
  %4873 = bitcast <2 x float> %4867 to <2 x i32>
  %4874 = extractelement <2 x i32> %4873, i32 1
  store i32 %4874, i32* %608, align 1, !tbaa !2452
  %4875 = extractelement <2 x i32> %4868, i32 0
  store i32 %4875, i32* %609, align 1, !tbaa !2452
  %4876 = extractelement <2 x i32> %4868, i32 1
  store i32 %4876, i32* %610, align 1, !tbaa !2452
  %4877 = load i64, i64* %RBP, align 8
  %4878 = add i64 %4877, -16
  %4879 = add i64 %465, 399
  store i64 %4879, i64* %PC, align 8
  %4880 = inttoptr i64 %4878 to i64*
  %4881 = load i64, i64* %4880, align 8
  store i64 %4881, i64* %RAX, align 8, !tbaa !2428
  %4882 = add i64 %4877, -48
  %4883 = add i64 %465, 403
  store i64 %4883, i64* %PC, align 8
  %4884 = inttoptr i64 %4882 to i32*
  %4885 = load i32, i32* %4884, align 4
  %4886 = sext i32 %4885 to i64
  store i64 %4886, i64* %RCX, align 8, !tbaa !2428
  %4887 = shl nsw i64 %4886, 2
  %4888 = add i64 %4887, %4881
  %4889 = add i64 %465, 408
  store i64 %4889, i64* %PC, align 8
  %4890 = load <2 x float>, <2 x float>* %611, align 1
  %4891 = extractelement <2 x float> %4890, i32 0
  %4892 = inttoptr i64 %4888 to float*
  store float %4891, float* %4892, align 4
  %4893 = load i64, i64* %RBP, align 8
  %4894 = add i64 %4893, -48
  %4895 = load i64, i64* %PC, align 8
  %4896 = add i64 %4895, 3
  store i64 %4896, i64* %PC, align 8
  %4897 = inttoptr i64 %4894 to i32*
  %4898 = load i32, i32* %4897, align 4
  %4899 = add i32 %4898, 1
  %4900 = zext i32 %4899 to i64
  store i64 %4900, i64* %RAX, align 8, !tbaa !2428
  %4901 = icmp eq i32 %4898, -1
  %4902 = icmp eq i32 %4899, 0
  %4903 = or i1 %4901, %4902
  %4904 = zext i1 %4903 to i8
  store i8 %4904, i8* %.pre-phi, align 1, !tbaa !2432
  %4905 = and i32 %4899, 255
  %4906 = tail call i32 @llvm.ctpop.i32(i32 %4905) #8
  %4907 = trunc i32 %4906 to i8
  %4908 = and i8 %4907, 1
  %4909 = xor i8 %4908, 1
  store i8 %4909, i8* %.pre-phi23, align 1, !tbaa !2446
  %4910 = xor i32 %4898, %4899
  %4911 = lshr i32 %4910, 4
  %4912 = trunc i32 %4911 to i8
  %4913 = and i8 %4912, 1
  store i8 %4913, i8* %.pre-phi25, align 1, !tbaa !2450
  %4914 = icmp eq i32 %4899, 0
  %4915 = zext i1 %4914 to i8
  store i8 %4915, i8* %.pre-phi27, align 1, !tbaa !2447
  %4916 = lshr i32 %4899, 31
  %4917 = trunc i32 %4916 to i8
  store i8 %4917, i8* %.pre-phi29, align 1, !tbaa !2448
  %4918 = lshr i32 %4898, 31
  %4919 = xor i32 %4916, %4918
  %4920 = add nuw nsw i32 %4919, %4916
  %4921 = icmp eq i32 %4920, 2
  %4922 = zext i1 %4921 to i8
  store i8 %4922, i8* %.pre-phi31, align 1, !tbaa !2449
  %4923 = add i64 %4895, 9
  store i64 %4923, i64* %PC, align 8
  store i32 %4899, i32* %4897, align 4
  %4924 = load i64, i64* %PC, align 8
  %4925 = add i64 %4924, -429
  store i64 %4925, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_4022cd

block_402298:                                     ; preds = %block_4021aa
  %4926 = add i64 %3561, 5
  store i64 %4926, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_40229d

block_402806:                                     ; preds = %block_4024a6
  %4927 = add i64 %3713, 1
  store i64 %4927, i64* %PC, align 8
  %4928 = load i64, i64* %11, align 8, !tbaa !2428
  %4929 = add i64 %4928, 8
  %4930 = inttoptr i64 %4928 to i64*
  %4931 = load i64, i64* %4930, align 8
  store i64 %4931, i64* %RBP, align 8, !tbaa !2428
  store i64 %4929, i64* %11, align 8, !tbaa !2428
  %4932 = add i64 %3713, 2
  store i64 %4932, i64* %PC, align 8
  %4933 = inttoptr i64 %4929 to i64*
  %4934 = load i64, i64* %4933, align 8
  store i64 %4934, i64* %.pre-phi33, align 8, !tbaa !2428
  %4935 = add i64 %4928, 16
  store i64 %4935, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %4978

block_402175:                                     ; preds = %block_4020e9
  %4936 = add i64 %3675, 5
  store i64 %4936, i64* %.pre-phi33, align 8, !tbaa !2428
  br label %block_40217a

block_402484:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_40247f
  %4937 = phi i64 [ %3798, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %429, %block_40247f ]
  %4938 = phi i64 [ %3827, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %3485, %block_40247f ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %4939 = add i64 %4937, -20
  %4940 = add i64 %4938, 8
  store i64 %4940, i64* %PC, align 8
  %4941 = inttoptr i64 %4939 to i32*
  %4942 = load i32, i32* %4941, align 4
  %4943 = zext i32 %4942 to i64
  store i64 %4943, i64* %RCX, align 8, !tbaa !2428
  %4944 = add i64 %4937, -72
  %4945 = add i64 %4938, 11
  store i64 %4945, i64* %PC, align 8
  %4946 = inttoptr i64 %4944 to i32*
  store i32 16, i32* %4946, align 4
  %4947 = load i32, i32* %ECX, align 4
  %4948 = zext i32 %4947 to i64
  %4949 = load i64, i64* %PC, align 8
  store i64 %4948, i64* %RAX, align 8, !tbaa !2428
  %4950 = sext i32 %4947 to i64
  %4951 = lshr i64 %4950, 32
  store i64 %4951, i64* %64, align 8, !tbaa !2428
  %4952 = load i64, i64* %RBP, align 8
  %4953 = add i64 %4952, -72
  %4954 = add i64 %4949, 6
  store i64 %4954, i64* %PC, align 8
  %4955 = inttoptr i64 %4953 to i32*
  %4956 = load i32, i32* %4955, align 4
  %4957 = zext i32 %4956 to i64
  store i64 %4957, i64* %RCX, align 8, !tbaa !2428
  %4958 = add i64 %4949, 8
  store i64 %4958, i64* %PC, align 8
  %4959 = zext i32 %4947 to i64
  %4960 = sext i32 %4956 to i64
  %4961 = shl nuw i64 %4951, 32
  %4962 = or i64 %4961, %4959
  %4963 = sdiv i64 %4962, %4960
  %4964 = shl i64 %4963, 32
  %4965 = ashr exact i64 %4964, 32
  %4966 = icmp eq i64 %4963, %4965
  br i1 %4966, label %4969, label %4967

; <label>:4967:                                   ; preds = %block_402484
  %4968 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4958, %struct.Memory* %3794) #9
  %.pre16 = load i64, i64* %RDX, align 8
  %.pre17 = load i64, i64* %PC, align 8
  %.pre18 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:4969:                                   ; preds = %block_402484
  %4970 = srem i64 %4962, %4960
  %4971 = getelementptr inbounds %union.anon, %union.anon* %65, i64 0, i32 0
  %4972 = and i64 %4963, 4294967295
  store i64 %4972, i64* %4971, align 8, !tbaa !2428
  %4973 = getelementptr inbounds %union.anon, %union.anon* %76, i64 0, i32 0
  %4974 = and i64 %4970, 4294967295
  store i64 %4974, i64* %4973, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %4969, %4967
  %4975 = phi i64 [ %.pre18, %4967 ], [ %4952, %4969 ]
  %4976 = phi i64 [ %.pre17, %4967 ], [ %4958, %4969 ]
  %4977 = phi i64 [ %.pre16, %4967 ], [ %4974, %4969 ]
  %4978 = phi %struct.Memory* [ %4968, %4967 ], [ %3794, %4969 ]
  %4979 = trunc i64 %4977 to i32
  %4980 = add i32 %4979, 16
  %4981 = zext i32 %4980 to i64
  store i64 %4981, i64* %RDX, align 8, !tbaa !2428
  %4982 = icmp ugt i32 %4979, -17
  %4983 = zext i1 %4982 to i8
  store i8 %4983, i8* %.pre-phi, align 1, !tbaa !2432
  %4984 = and i32 %4980, 255
  %4985 = tail call i32 @llvm.ctpop.i32(i32 %4984) #8
  %4986 = trunc i32 %4985 to i8
  %4987 = and i8 %4986, 1
  %4988 = xor i8 %4987, 1
  store i8 %4988, i8* %.pre-phi23, align 1, !tbaa !2446
  %4989 = trunc i64 %4977 to i32
  %4990 = xor i32 %4989, 16
  %4991 = xor i32 %4990, %4980
  %4992 = lshr i32 %4991, 4
  %4993 = trunc i32 %4992 to i8
  %4994 = and i8 %4993, 1
  store i8 %4994, i8* %.pre-phi25, align 1, !tbaa !2450
  %4995 = icmp eq i32 %4980, 0
  %4996 = zext i1 %4995 to i8
  store i8 %4996, i8* %.pre-phi27, align 1, !tbaa !2447
  %4997 = lshr i32 %4980, 31
  %4998 = trunc i32 %4997 to i8
  store i8 %4998, i8* %.pre-phi29, align 1, !tbaa !2448
  %4999 = lshr i32 %4979, 31
  %5000 = xor i32 %4997, %4999
  %5001 = add nuw nsw i32 %5000, %4997
  %5002 = icmp eq i32 %5001, 2
  %5003 = zext i1 %5002 to i8
  store i8 %5003, i8* %.pre-phi31, align 1, !tbaa !2449
  %5004 = add i64 %4975, -52
  %5005 = add i64 %4976, 6
  store i64 %5005, i64* %PC, align 8
  %5006 = inttoptr i64 %5004 to i32*
  store i32 %4980, i32* %5006, align 4
  %5007 = load i64, i64* %RBP, align 8
  %5008 = add i64 %5007, -52
  %5009 = load i64, i64* %PC, align 8
  %5010 = add i64 %5009, 3
  store i64 %5010, i64* %PC, align 8
  %5011 = inttoptr i64 %5008 to i32*
  %5012 = load i32, i32* %5011, align 4
  %5013 = add i32 %5012, -1
  %5014 = zext i32 %5013 to i64
  store i64 %5014, i64* %RDX, align 8, !tbaa !2428
  %5015 = icmp eq i32 %5012, 0
  %5016 = zext i1 %5015 to i8
  store i8 %5016, i8* %.pre-phi, align 1, !tbaa !2432
  %5017 = and i32 %5013, 255
  %5018 = tail call i32 @llvm.ctpop.i32(i32 %5017) #8
  %5019 = trunc i32 %5018 to i8
  %5020 = and i8 %5019, 1
  %5021 = xor i8 %5020, 1
  store i8 %5021, i8* %.pre-phi23, align 1, !tbaa !2446
  %5022 = xor i32 %5012, %5013
  %5023 = lshr i32 %5022, 4
  %5024 = trunc i32 %5023 to i8
  %5025 = and i8 %5024, 1
  store i8 %5025, i8* %.pre-phi25, align 1, !tbaa !2450
  %5026 = icmp eq i32 %5013, 0
  %5027 = zext i1 %5026 to i8
  store i8 %5027, i8* %.pre-phi27, align 1, !tbaa !2447
  %5028 = lshr i32 %5013, 31
  %5029 = trunc i32 %5028 to i8
  store i8 %5029, i8* %.pre-phi29, align 1, !tbaa !2448
  %5030 = lshr i32 %5012, 31
  %5031 = xor i32 %5028, %5030
  %5032 = add nuw nsw i32 %5031, %5030
  %5033 = icmp eq i32 %5032, 2
  %5034 = zext i1 %5033 to i8
  store i8 %5034, i8* %.pre-phi31, align 1, !tbaa !2449
  %5035 = add i64 %5007, -44
  %5036 = add i64 %5009, 9
  store i64 %5036, i64* %PC, align 8
  %5037 = inttoptr i64 %5035 to i32*
  store i32 %5013, i32* %5037, align 4
  %5038 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %5039 = bitcast [32 x %union.VectorReg]* %7 to float*
  %5040 = getelementptr inbounds i8, i8* %5038, i64 4
  %5041 = bitcast i8* %5040 to float*
  %5042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %5043 = bitcast i64* %5042 to float*
  %5044 = getelementptr inbounds i8, i8* %5038, i64 12
  %5045 = bitcast i8* %5044 to float*
  %5046 = bitcast %union.VectorReg* %8 to i8*
  %5047 = bitcast %union.VectorReg* %8 to float*
  %5048 = getelementptr inbounds i8, i8* %5046, i64 4
  %5049 = bitcast i8* %5048 to float*
  %5050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %5051 = bitcast i64* %5050 to float*
  %5052 = getelementptr inbounds i8, i8* %5046, i64 12
  %5053 = bitcast i8* %5052 to float*
  %5054 = bitcast %union.VectorReg* %8 to <2 x float>*
  %5055 = bitcast i64* %5050 to <2 x i32>*
  %5056 = bitcast i8* %5048 to i32*
  %5057 = bitcast i64* %5050 to i32*
  %5058 = bitcast i8* %5052 to i32*
  %5059 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %5060 = bitcast i64* %5042 to <2 x i32>*
  %5061 = bitcast %union.VectorReg* %8 to <2 x float>*
  %5062 = bitcast i8* %5040 to i32*
  %5063 = bitcast i64* %5042 to i32*
  %5064 = bitcast i8* %5044 to i32*
  %5065 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4024a6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400600_what_date(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400600:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, 5
  store i64 %12, i64* %PC, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14 = inttoptr i64 %6 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %13, align 8, !tbaa !2428
  %16 = add i64 %6, 8
  store i64 %16, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005c0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -24
  %13 = icmp ult i64 %9, 16
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #8
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 %9, 16
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2450
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2449
  %41 = add i64 %11, -289
  %42 = add i64 %11, 12
  %43 = add i64 %8, -32
  %44 = inttoptr i64 %43 to i64*
  store i64 %42, i64* %44, align 8
  store i64 %43, i64* %7, align 8, !tbaa !2428
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %41, i64* %45, align 8, !tbaa !2428
  %46 = tail call fastcc %struct.Memory* @ext_653140_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %47 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %48 = load i64, i64* %PC, align 8
  %49 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 4) to i32*), align 4
  %50 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %49, i32* %50, align 1, !tbaa !2452
  %51 = getelementptr inbounds i8, i8* %47, i64 4
  %52 = bitcast i8* %51 to float*
  store float 0.000000e+00, float* %52, align 1, !tbaa !2452
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %54 = bitcast i64* %53 to float*
  store float 0.000000e+00, float* %54, align 1, !tbaa !2452
  %55 = getelementptr inbounds i8, i8* %47, i64 12
  %56 = bitcast i8* %55 to float*
  store float 0.000000e+00, float* %56, align 1, !tbaa !2452
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %RAX, align 8
  %60 = add i64 %48, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -16
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RAX, align 8, !tbaa !2428
  %68 = bitcast %union.VectorReg* %4 to i8*
  %69 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %70 = load <2 x i32>, <2 x i32>* %69, align 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %72 = bitcast i64* %71 to <2 x i32>*
  %73 = load <2 x i32>, <2 x i32>* %72, align 1
  %74 = sitofp i64 %67 to float
  %75 = bitcast %union.VectorReg* %4 to float*
  store float %74, float* %75, align 1, !tbaa !2452
  %76 = extractelement <2 x i32> %70, i32 1
  %77 = getelementptr inbounds i8, i8* %68, i64 4
  %78 = bitcast i8* %77 to i32*
  store i32 %76, i32* %78, align 1, !tbaa !2452
  %79 = extractelement <2 x i32> %73, i32 0
  %80 = bitcast i64* %71 to i32*
  store i32 %79, i32* %80, align 1, !tbaa !2452
  %81 = extractelement <2 x i32> %73, i32 1
  %82 = getelementptr inbounds i8, i8* %68, i64 12
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 1, !tbaa !2452
  %84 = bitcast %union.VectorReg* %4 to <2 x float>*
  %85 = load <2 x float>, <2 x float>* %84, align 1
  %86 = load <2 x i32>, <2 x i32>* %72, align 1
  %87 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %88 = load <2 x float>, <2 x float>* %87, align 1
  %89 = extractelement <2 x float> %85, i32 0
  %90 = extractelement <2 x float> %88, i32 0
  %91 = fdiv float %89, %90
  store float %91, float* %75, align 1, !tbaa !2452
  %92 = bitcast <2 x float> %85 to <2 x i32>
  %93 = extractelement <2 x i32> %92, i32 1
  store i32 %93, i32* %78, align 1, !tbaa !2452
  %94 = extractelement <2 x i32> %86, i32 0
  store i32 %94, i32* %80, align 1, !tbaa !2452
  %95 = extractelement <2 x i32> %86, i32 1
  store i32 %95, i32* %83, align 1, !tbaa !2452
  %96 = add i64 %62, -4
  %97 = add i64 %64, 18
  store i64 %97, i64* %PC, align 8
  %98 = bitcast %union.VectorReg* %4 to <2 x float>*
  %99 = load <2 x float>, <2 x float>* %98, align 1
  %100 = extractelement <2 x float> %99, i32 0
  %101 = inttoptr i64 %96 to float*
  store float %100, float* %101, align 4
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 5
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %103 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %107, i32* %108, align 1, !tbaa !2452
  store float 0.000000e+00, float* %52, align 1, !tbaa !2452
  store float 0.000000e+00, float* %54, align 1, !tbaa !2452
  store float 0.000000e+00, float* %56, align 1, !tbaa !2452
  %109 = load i64, i64* %RSP, align 8
  %110 = add i64 %109, 16
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %111 = icmp ugt i64 %109, -17
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %15, align 1, !tbaa !2432
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #8
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %22, align 1, !tbaa !2446
  %119 = xor i64 %109, 16
  %120 = xor i64 %119, %110
  %121 = lshr i64 %120, 4
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 1
  store i8 %123, i8* %28, align 1, !tbaa !2450
  %124 = icmp eq i64 %110, 0
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %31, align 1, !tbaa !2447
  %126 = lshr i64 %110, 63
  %127 = trunc i64 %126 to i8
  store i8 %127, i8* %34, align 1, !tbaa !2448
  %128 = lshr i64 %109, 63
  %129 = xor i64 %126, %128
  %130 = add nuw nsw i64 %129, %126
  %131 = icmp eq i64 %130, 2
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %40, align 1, !tbaa !2449
  %133 = add i64 %104, 10
  store i64 %133, i64* %PC, align 8
  %134 = add i64 %109, 24
  %135 = inttoptr i64 %110 to i64*
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %RBP, align 8, !tbaa !2428
  store i64 %134, i64* %7, align 8, !tbaa !2428
  %137 = add i64 %104, 11
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %134 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %45, align 8, !tbaa !2428
  %140 = add i64 %109, 32
  store i64 %140, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %46
}

; Function Attrs: noinline
define %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400580:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #8
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2450
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2447
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2449
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %12, i64 9, i64 32
  %19 = add i64 %.v, %1
  store i64 %19, i64* %18, align 8, !tbaa !2428
  br i1 %12, label %block_400589, label %block_4005a0

block_4005a0:                                     ; preds = %block_400580
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = inttoptr i64 %22 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %18, align 8, !tbaa !2428
  %25 = add i64 %22, 8
  store i64 %25, i64* %21, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400589:                                     ; preds = %block_400580
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %19, 1
  store i64 %27, i64* %PC, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %26, i64* %31, align 8
  %32 = load i64, i64* %PC, align 8
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  %33 = add i64 %32, -122
  %34 = add i64 %32, 8
  %35 = add i64 %29, -16
  %36 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %36, align 8
  store i64 %35, i64* %28, align 8, !tbaa !2428
  store i64 %33, i64* %18, align 8, !tbaa !2428
  %37 = tail call %struct.Memory* @sub_400510_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %33, %struct.Memory* %2)
  %38 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %39 = add i64 %38, 8
  store i64 %39, i64* %PC, align 8
  %40 = load i64, i64* %28, align 8, !tbaa !2428
  %41 = add i64 %40, 8
  %42 = inttoptr i64 %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  store i64 %41, i64* %28, align 8, !tbaa !2428
  %44 = add i64 %38, 9
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %18, align 8, !tbaa !2428
  %47 = add i64 %40, 16
  store i64 %47, i64* %28, align 8, !tbaa !2428
  ret %struct.Memory* %37
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bb0_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402bb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -16
  %15 = load i32, i32* %EDI, align 4
  %16 = add i64 %13, 6
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %17, align 4
  %18 = load i64, i64* %RBP, align 8
  %19 = add i64 %18, -16
  %20 = load i64, i64* %RSI, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -20
  %26 = load i32, i32* %EDX, align 4
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 3
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %29, align 4
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = icmp eq i32 %35, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = and i32 %36, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #8
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2446
  %46 = xor i32 %35, %36
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = icmp eq i32 %36, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = lshr i32 %36, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = lshr i32 %35, 31
  %58 = xor i32 %54, %57
  %59 = add nuw nsw i32 %58, %57
  %60 = icmp eq i32 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = icmp ne i8 %55, 0
  %64 = xor i1 %63, %60
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %64, i64 10, i64 22
  %66 = add i64 %32, %.v
  store i64 %66, i64* %65, align 8, !tbaa !2428
  br i1 %64, label %block_402bc8, label %block_402bd4

block_402d5f:                                     ; preds = %block_402bc8, %block_402bde, %block_402d59
  %67 = phi i64 [ %.pre10, %block_402d59 ], [ %373, %block_402bde ], [ %496, %block_402bc8 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_402d59 ], [ %2, %block_402bde ], [ %2, %block_402bc8 ]
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -4
  %70 = add i64 %67, 3
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  %74 = add i64 %67, 4
  store i64 %74, i64* %PC, align 8
  %75 = load i64, i64* %9, align 8, !tbaa !2428
  %76 = add i64 %75, 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RBP, align 8, !tbaa !2428
  store i64 %76, i64* %9, align 8, !tbaa !2428
  %79 = add i64 %67, 5
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %76 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %65, align 8, !tbaa !2428
  %82 = add i64 %75, 16
  store i64 %82, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402d54:                                     ; preds = %block_402cdb
  %83 = add i64 %368, 5
  br label %block_402d59

block_402d59:                                     ; preds = %block_402ca8, %block_402d54
  %84 = phi i64 [ %83, %block_402d54 ], [ %258, %block_402ca8 ]
  %85 = phi i64 [ %332, %block_402d54 ], [ %455, %block_402ca8 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402d54 ], [ %MEMORY.4, %block_402ca8 ]
  %86 = add i64 %85, -36
  %87 = add i64 %84, 3
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %85, -4
  %92 = add i64 %84, 6
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i32*
  store i32 %89, i32* %93, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_402d5f

block_402c37:                                     ; preds = %block_402c2b
  %94 = add i64 %455, -16
  %95 = add i64 %491, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %455, -32
  %99 = add i64 %491, 8
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %101 to i64
  store i64 %102, i64* %RCX, align 8, !tbaa !2428
  %103 = shl nsw i64 %102, 2
  %104 = add i64 %103, %97
  %105 = add i64 %491, 13
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %107, i32* %108, align 1, !tbaa !2452
  store float 0.000000e+00, float* %677, align 1, !tbaa !2452
  store float 0.000000e+00, float* %679, align 1, !tbaa !2452
  store float 0.000000e+00, float* %681, align 1, !tbaa !2452
  %109 = load <2 x float>, <2 x float>* %682, align 1
  %110 = extractelement <2 x float> %109, i32 0
  %111 = fpext float %110 to double
  %112 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %113 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %114 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %115 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %116 = bitcast %union.VectorReg* %6 to i32*
  store i32 %112, i32* %116, align 1, !tbaa !2452
  %117 = bitcast i8* %692 to i32*
  store i32 %113, i32* %117, align 1, !tbaa !2452
  %118 = bitcast i64* %695 to i32*
  store i32 %114, i32* %118, align 1, !tbaa !2452
  %119 = bitcast i8* %698 to i32*
  store i32 %115, i32* %119, align 1, !tbaa !2452
  %120 = bitcast double %111 to i64
  %121 = load i64, i64* %678, align 1
  %122 = load i64, i64* %703, align 1
  %123 = load i64, i64* %705, align 1
  %124 = and i64 %122, %120
  %125 = and i64 %123, %121
  %126 = trunc i64 %124 to i32
  %127 = lshr i64 %124, 32
  %128 = trunc i64 %127 to i32
  store i32 %126, i32* %712, align 1, !tbaa !2451
  store i32 %128, i32* %713, align 1, !tbaa !2451
  %129 = trunc i64 %125 to i32
  store i32 %129, i32* %715, align 1, !tbaa !2451
  %130 = lshr i64 %125, 32
  %131 = trunc i64 %130 to i32
  store i32 %131, i32* %718, align 1, !tbaa !2451
  %132 = add i64 %455, -24
  %133 = add i64 %491, 33
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i32*
  %135 = load i32, i32* %134, align 4
  %136 = bitcast %union.VectorReg* %6 to i32*
  store i32 %135, i32* %136, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %696, align 1, !tbaa !2452
  store float 0.000000e+00, float* %699, align 1, !tbaa !2452
  %137 = load <2 x float>, <2 x float>* %778, align 1
  %138 = extractelement <2 x float> %137, i32 0
  %139 = fpext float %138 to double
  store double %139, double* %779, align 1, !tbaa !2454
  %140 = add i64 %491, 41
  store i64 %140, i64* %PC, align 8
  %141 = load double, double* %723, align 1
  %142 = fcmp uno double %141, %139
  br i1 %142, label %143, label %153

; <label>:143:                                    ; preds = %block_402c37
  %144 = fadd double %141, %139
  %145 = bitcast double %144 to i64
  %146 = and i64 %145, 9221120237041090560
  %147 = icmp eq i64 %146, 9218868437227405312
  %148 = and i64 %145, 2251799813685247
  %149 = icmp ne i64 %148, 0
  %150 = and i1 %147, %149
  br i1 %150, label %151, label %159

; <label>:151:                                    ; preds = %143
  %152 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %140, %struct.Memory* %MEMORY.4) #9
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre3 = load i8, i8* %53, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:153:                                    ; preds = %block_402c37
  %154 = fcmp ogt double %141, %139
  br i1 %154, label %159, label %155

; <label>:155:                                    ; preds = %153
  %156 = fcmp olt double %141, %139
  br i1 %156, label %159, label %157

; <label>:157:                                    ; preds = %155
  %158 = fcmp oeq double %141, %139
  br i1 %158, label %159, label %163

; <label>:159:                                    ; preds = %157, %155, %153, %143
  %160 = phi i8 [ 0, %153 ], [ 0, %155 ], [ 1, %157 ], [ 1, %143 ]
  %161 = phi i8 [ 0, %153 ], [ 0, %155 ], [ 0, %157 ], [ 1, %143 ]
  %162 = phi i8 [ 0, %153 ], [ 1, %155 ], [ 0, %157 ], [ 1, %143 ]
  store i8 %160, i8* %53, align 1, !tbaa !2456
  store i8 %161, i8* %45, align 1, !tbaa !2456
  store i8 %162, i8* %39, align 1, !tbaa !2456
  br label %163

; <label>:163:                                    ; preds = %159, %157
  %164 = phi i8 [ %160, %159 ], [ %479, %157 ]
  %165 = phi i8 [ %162, %159 ], [ %467, %157 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %163, %151
  %166 = phi i8 [ %.pre3, %151 ], [ %164, %163 ]
  %167 = phi i8 [ %.pre2, %151 ], [ %165, %163 ]
  %168 = phi i64 [ %.pre1, %151 ], [ %140, %163 ]
  %169 = phi %struct.Memory* [ %152, %151 ], [ %MEMORY.4, %163 ]
  %170 = or i8 %166, %167
  %171 = icmp ne i8 %170, 0
  %.v15 = select i1 %171, i64 49, i64 6
  %172 = add i64 %168, %.v15
  store i64 %172, i64* %65, align 8, !tbaa !2428
  br i1 %171, label %block_402c91, label %block_402c66

block_402d16:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -28
  %175 = add i64 %599, 3
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %174 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = add i64 %173, -36
  %180 = add i64 %599, 6
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i32*
  store i32 %177, i32* %181, align 4
  %182 = load i64, i64* %RBP, align 8
  %183 = add i64 %182, -16
  %184 = load i64, i64* %PC, align 8
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %183 to i64*
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %RCX, align 8, !tbaa !2428
  %188 = add i64 %182, -28
  %189 = add i64 %184, 8
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i32*
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  store i64 %192, i64* %RDX, align 8, !tbaa !2428
  %193 = shl nsw i64 %192, 2
  %194 = add i64 %193, %187
  %195 = add i64 %184, 13
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %197, i32* %198, align 1, !tbaa !2452
  store float 0.000000e+00, float* %390, align 1, !tbaa !2452
  store float 0.000000e+00, float* %392, align 1, !tbaa !2452
  store float 0.000000e+00, float* %394, align 1, !tbaa !2452
  %199 = load <2 x float>, <2 x float>* %395, align 1
  %200 = extractelement <2 x float> %199, i32 0
  %201 = fpext float %200 to double
  %202 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %203 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %204 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %205 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %206 = bitcast %union.VectorReg* %6 to i32*
  store i32 %202, i32* %206, align 1, !tbaa !2452
  %207 = bitcast i8* %405 to i32*
  store i32 %203, i32* %207, align 1, !tbaa !2452
  %208 = bitcast i64* %408 to i32*
  store i32 %204, i32* %208, align 1, !tbaa !2452
  %209 = bitcast i8* %411 to i32*
  store i32 %205, i32* %209, align 1, !tbaa !2452
  %210 = bitcast double %201 to i64
  %211 = load i64, i64* %391, align 1
  %212 = load i64, i64* %416, align 1
  %213 = load i64, i64* %418, align 1
  %214 = and i64 %212, %210
  %215 = and i64 %213, %211
  %216 = trunc i64 %214 to i32
  %217 = lshr i64 %214, 32
  %218 = trunc i64 %217 to i32
  store i32 %216, i32* %425, align 1, !tbaa !2451
  store i32 %218, i32* %426, align 1, !tbaa !2451
  %219 = trunc i64 %215 to i32
  store i32 %219, i32* %428, align 1, !tbaa !2451
  %220 = lshr i64 %215, 32
  %221 = trunc i64 %220 to i32
  store i32 %221, i32* %431, align 1, !tbaa !2451
  %222 = load <2 x i32>, <2 x i32>* %432, align 1
  %223 = load <2 x i32>, <2 x i32>* %434, align 1
  %224 = bitcast <2 x i32> %222 to double
  %225 = fptrunc double %224 to float
  store float %225, float* %387, align 1, !tbaa !2452
  %226 = extractelement <2 x i32> %222, i32 1
  store i32 %226, i32* %426, align 1, !tbaa !2452
  %227 = extractelement <2 x i32> %223, i32 0
  store i32 %227, i32* %428, align 1, !tbaa !2452
  %228 = extractelement <2 x i32> %223, i32 1
  store i32 %228, i32* %431, align 1, !tbaa !2452
  %229 = add i64 %182, -24
  %230 = add i64 %184, 37
  store i64 %230, i64* %PC, align 8
  %231 = load <2 x float>, <2 x float>* %395, align 1
  %232 = extractelement <2 x float> %231, i32 0
  %233 = inttoptr i64 %229 to float*
  store float %232, float* %233, align 4
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_402d41

block_402bd4:                                     ; preds = %block_402bb0
  %234 = add i64 %66, 4
  store i64 %234, i64* %PC, align 8
  %235 = load i32, i32* %34, align 4
  %236 = add i32 %235, -1
  %237 = icmp eq i32 %235, 0
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %39, align 1, !tbaa !2432
  %239 = and i32 %236, 255
  %240 = tail call i32 @llvm.ctpop.i32(i32 %239) #8
  %241 = trunc i32 %240 to i8
  %242 = and i8 %241, 1
  %243 = xor i8 %242, 1
  store i8 %243, i8* %45, align 1, !tbaa !2446
  %244 = xor i32 %235, %236
  %245 = lshr i32 %244, 4
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  store i8 %247, i8* %50, align 1, !tbaa !2450
  %248 = icmp eq i32 %236, 0
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %53, align 1, !tbaa !2447
  %250 = lshr i32 %236, 31
  %251 = trunc i32 %250 to i8
  store i8 %251, i8* %56, align 1, !tbaa !2448
  %252 = lshr i32 %235, 31
  %253 = xor i32 %250, %252
  %254 = add nuw nsw i32 %253, %252
  %255 = icmp eq i32 %254, 2
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %62, align 1, !tbaa !2449
  %.v12 = select i1 %248, i64 10, i64 22
  %257 = add i64 %66, %.v12
  store i64 %257, i64* %65, align 8, !tbaa !2428
  br i1 %248, label %block_402bde, label %block_402bea

block_402ca8:                                     ; preds = %block_402c2b
  %258 = add i64 %491, 177
  br label %block_402d59

block_402c91:                                     ; preds = %block_402c66, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %259 = phi i64 [ %.pre4, %block_402c66 ], [ %172, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %260 = load i64, i64* %RBP, align 8
  %261 = add i64 %260, -32
  %262 = add i64 %259, 3
  store i64 %262, i64* %PC, align 8
  %263 = inttoptr i64 %261 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = add i64 %260, -20
  %267 = add i64 %259, 6
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i32*
  %269 = load i32, i32* %268, align 4
  %270 = add i32 %269, %264
  %271 = zext i32 %270 to i64
  store i64 %271, i64* %RAX, align 8, !tbaa !2428
  %272 = icmp ult i32 %270, %264
  %273 = icmp ult i32 %270, %269
  %274 = or i1 %272, %273
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %39, align 1, !tbaa !2432
  %276 = and i32 %270, 255
  %277 = tail call i32 @llvm.ctpop.i32(i32 %276) #8
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  store i8 %280, i8* %45, align 1, !tbaa !2446
  %281 = xor i32 %269, %264
  %282 = xor i32 %281, %270
  %283 = lshr i32 %282, 4
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  store i8 %285, i8* %50, align 1, !tbaa !2450
  %286 = icmp eq i32 %270, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %53, align 1, !tbaa !2447
  %288 = lshr i32 %270, 31
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %56, align 1, !tbaa !2448
  %290 = lshr i32 %264, 31
  %291 = lshr i32 %269, 31
  %292 = xor i32 %288, %290
  %293 = xor i32 %288, %291
  %294 = add nuw nsw i32 %292, %293
  %295 = icmp eq i32 %294, 2
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %62, align 1, !tbaa !2449
  %297 = add i64 %259, 9
  store i64 %297, i64* %PC, align 8
  store i32 %270, i32* %263, align 4
  %298 = load i64, i64* %RBP, align 8
  %299 = add i64 %298, -28
  %300 = load i64, i64* %PC, align 8
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = add i32 %303, 1
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %RAX, align 8, !tbaa !2428
  %306 = icmp eq i32 %303, -1
  %307 = icmp eq i32 %304, 0
  %308 = or i1 %306, %307
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %39, align 1, !tbaa !2432
  %310 = and i32 %304, 255
  %311 = tail call i32 @llvm.ctpop.i32(i32 %310) #8
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  store i8 %314, i8* %45, align 1, !tbaa !2446
  %315 = xor i32 %303, %304
  %316 = lshr i32 %315, 4
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  store i8 %318, i8* %50, align 1, !tbaa !2450
  %319 = icmp eq i32 %304, 0
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %53, align 1, !tbaa !2447
  %321 = lshr i32 %304, 31
  %322 = trunc i32 %321 to i8
  store i8 %322, i8* %56, align 1, !tbaa !2448
  %323 = lshr i32 %303, 31
  %324 = xor i32 %321, %323
  %325 = add nuw nsw i32 %324, %321
  %326 = icmp eq i32 %325, 2
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %62, align 1, !tbaa !2449
  %328 = add i64 %300, 9
  store i64 %328, i64* %PC, align 8
  store i32 %304, i32* %302, align 4
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, -120
  store i64 %330, i64* %65, align 8, !tbaa !2428
  br label %block_402c2b

block_402cdb:                                     ; preds = %block_402d41, %block_402cad
  %331 = phi i64 [ %.pre5, %block_402cad ], [ %812, %block_402d41 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402cad ], [ %596, %block_402d41 ]
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -28
  %334 = add i64 %331, 3
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i32*
  %336 = load i32, i32* %335, align 4
  %337 = zext i32 %336 to i64
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = add i64 %332, -8
  %339 = add i64 %331, 6
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %338 to i32*
  %341 = load i32, i32* %340, align 4
  %342 = sub i32 %336, %341
  %343 = icmp ult i32 %336, %341
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %39, align 1, !tbaa !2432
  %345 = and i32 %342, 255
  %346 = tail call i32 @llvm.ctpop.i32(i32 %345) #8
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  store i8 %349, i8* %45, align 1, !tbaa !2446
  %350 = xor i32 %341, %336
  %351 = xor i32 %350, %342
  %352 = lshr i32 %351, 4
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  store i8 %354, i8* %50, align 1, !tbaa !2450
  %355 = icmp eq i32 %342, 0
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %53, align 1, !tbaa !2447
  %357 = lshr i32 %342, 31
  %358 = trunc i32 %357 to i8
  store i8 %358, i8* %56, align 1, !tbaa !2448
  %359 = lshr i32 %336, 31
  %360 = lshr i32 %341, 31
  %361 = xor i32 %360, %359
  %362 = xor i32 %357, %359
  %363 = add nuw nsw i32 %362, %361
  %364 = icmp eq i32 %363, 2
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %62, align 1, !tbaa !2449
  %366 = icmp ne i8 %358, 0
  %367 = xor i1 %366, %364
  %.v16 = select i1 %367, i64 12, i64 121
  %368 = add i64 %331, %.v16
  store i64 %368, i64* %65, align 8, !tbaa !2428
  br i1 %367, label %block_402ce7, label %block_402d54

block_402bde:                                     ; preds = %block_402bd4
  %369 = add i64 %30, -4
  %370 = add i64 %257, 7
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i32*
  store i32 0, i32* %371, align 4
  %372 = load i64, i64* %PC, align 8
  %373 = add i64 %372, 378
  store i64 %373, i64* %65, align 8, !tbaa !2428
  br label %block_402d5f

block_402cad:                                     ; preds = %block_402bea
  %374 = add i64 %30, -36
  %375 = add i64 %522, 7
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i32*
  store i32 0, i32* %376, align 4
  %377 = load i64, i64* %RBP, align 8
  %378 = add i64 %377, -16
  %379 = load i64, i64* %PC, align 8
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %378 to i64*
  %382 = load i64, i64* %381, align 8
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %384 = add i64 %379, 8
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %382 to i32*
  %386 = load i32, i32* %385, align 4
  %387 = bitcast [32 x %union.VectorReg]* %5 to float*
  %388 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %386, i32* %388, align 1, !tbaa !2452
  %389 = getelementptr inbounds i8, i8* %383, i64 4
  %390 = bitcast i8* %389 to float*
  store float 0.000000e+00, float* %390, align 1, !tbaa !2452
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %392 = bitcast i64* %391 to float*
  store float 0.000000e+00, float* %392, align 1, !tbaa !2452
  %393 = getelementptr inbounds i8, i8* %383, i64 12
  %394 = bitcast i8* %393 to float*
  store float 0.000000e+00, float* %394, align 1, !tbaa !2452
  %395 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %396 = load <2 x float>, <2 x float>* %395, align 1
  %397 = extractelement <2 x float> %396, i32 0
  %398 = fpext float %397 to double
  %399 = bitcast %union.VectorReg* %6 to i8*
  %400 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %401 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %402 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %403 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %404 = bitcast %union.VectorReg* %6 to i32*
  store i32 %400, i32* %404, align 1, !tbaa !2452
  %405 = getelementptr inbounds i8, i8* %399, i64 4
  %406 = bitcast i8* %405 to float*
  %407 = bitcast i8* %405 to i32*
  store i32 %401, i32* %407, align 1, !tbaa !2452
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %409 = bitcast i64* %408 to float*
  %410 = bitcast i64* %408 to i32*
  store i32 %402, i32* %410, align 1, !tbaa !2452
  %411 = getelementptr inbounds i8, i8* %399, i64 12
  %412 = bitcast i8* %411 to float*
  %413 = bitcast i8* %411 to i32*
  store i32 %403, i32* %413, align 1, !tbaa !2452
  %414 = bitcast double %398 to i64
  %415 = load i64, i64* %391, align 1
  %416 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %417 = load i64, i64* %416, align 1
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %419 = load i64, i64* %418, align 1
  %420 = and i64 %417, %414
  %421 = and i64 %419, %415
  %422 = trunc i64 %420 to i32
  %423 = lshr i64 %420, 32
  %424 = trunc i64 %423 to i32
  %425 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %422, i32* %425, align 1, !tbaa !2451
  %426 = bitcast i8* %389 to i32*
  store i32 %424, i32* %426, align 1, !tbaa !2451
  %427 = trunc i64 %421 to i32
  %428 = bitcast i64* %391 to i32*
  store i32 %427, i32* %428, align 1, !tbaa !2451
  %429 = lshr i64 %421, 32
  %430 = trunc i64 %429 to i32
  %431 = bitcast i8* %393 to i32*
  store i32 %430, i32* %431, align 1, !tbaa !2451
  %432 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %433 = load <2 x i32>, <2 x i32>* %432, align 1
  %434 = bitcast i64* %391 to <2 x i32>*
  %435 = load <2 x i32>, <2 x i32>* %434, align 1
  %436 = bitcast [32 x %union.VectorReg]* %5 to double*
  %437 = bitcast <2 x i32> %433 to double
  %438 = fptrunc double %437 to float
  store float %438, float* %387, align 1, !tbaa !2452
  %439 = extractelement <2 x i32> %433, i32 1
  store i32 %439, i32* %426, align 1, !tbaa !2452
  %440 = extractelement <2 x i32> %435, i32 0
  store i32 %440, i32* %428, align 1, !tbaa !2452
  %441 = extractelement <2 x i32> %435, i32 1
  store i32 %441, i32* %431, align 1, !tbaa !2452
  %442 = add i64 %377, -24
  %443 = add i64 %379, 32
  store i64 %443, i64* %PC, align 8
  %444 = load <2 x float>, <2 x float>* %395, align 1
  %445 = extractelement <2 x float> %444, i32 0
  %446 = inttoptr i64 %442 to float*
  store float %445, float* %446, align 4
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -28
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, 7
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %448 to i32*
  store i32 1, i32* %451, align 4
  %452 = bitcast %union.VectorReg* %6 to <2 x float>*
  %453 = bitcast %union.VectorReg* %6 to double*
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_402cdb

block_402c2b:                                     ; preds = %block_402bf4, %block_402c91
  %454 = phi i64 [ %.pre, %block_402bf4 ], [ %330, %block_402c91 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402bf4 ], [ %169, %block_402c91 ]
  %455 = load i64, i64* %RBP, align 8
  %456 = add i64 %455, -28
  %457 = add i64 %454, 3
  store i64 %457, i64* %PC, align 8
  %458 = inttoptr i64 %456 to i32*
  %459 = load i32, i32* %458, align 4
  %460 = zext i32 %459 to i64
  store i64 %460, i64* %RAX, align 8, !tbaa !2428
  %461 = add i64 %455, -8
  %462 = add i64 %454, 6
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %461 to i32*
  %464 = load i32, i32* %463, align 4
  %465 = sub i32 %459, %464
  %466 = icmp ult i32 %459, %464
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %39, align 1, !tbaa !2432
  %468 = and i32 %465, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468) #8
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %45, align 1, !tbaa !2446
  %473 = xor i32 %464, %459
  %474 = xor i32 %473, %465
  %475 = lshr i32 %474, 4
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  store i8 %477, i8* %50, align 1, !tbaa !2450
  %478 = icmp eq i32 %465, 0
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %53, align 1, !tbaa !2447
  %480 = lshr i32 %465, 31
  %481 = trunc i32 %480 to i8
  store i8 %481, i8* %56, align 1, !tbaa !2448
  %482 = lshr i32 %459, 31
  %483 = lshr i32 %464, 31
  %484 = xor i32 %483, %482
  %485 = xor i32 %480, %482
  %486 = add nuw nsw i32 %485, %484
  %487 = icmp eq i32 %486, 2
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %62, align 1, !tbaa !2449
  %489 = icmp ne i8 %481, 0
  %490 = xor i1 %489, %487
  %.v14 = select i1 %490, i64 12, i64 125
  %491 = add i64 %454, %.v14
  store i64 %491, i64* %65, align 8, !tbaa !2428
  br i1 %490, label %block_402c37, label %block_402ca8

block_402bc8:                                     ; preds = %block_402bb0
  %492 = add i64 %30, -4
  %493 = add i64 %66, 7
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to i32*
  store i32 -1, i32* %494, align 4
  %495 = load i64, i64* %PC, align 8
  %496 = add i64 %495, 400
  store i64 %496, i64* %65, align 8, !tbaa !2428
  br label %block_402d5f

block_402bea:                                     ; preds = %block_402bd4
  %497 = add i64 %30, -20
  %498 = add i64 %257, 4
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = add i32 %500, -1
  %502 = icmp eq i32 %500, 0
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %39, align 1, !tbaa !2432
  %504 = and i32 %501, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #8
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %45, align 1, !tbaa !2446
  %509 = xor i32 %500, %501
  %510 = lshr i32 %509, 4
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  store i8 %512, i8* %50, align 1, !tbaa !2450
  %513 = icmp eq i32 %501, 0
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %53, align 1, !tbaa !2447
  %515 = lshr i32 %501, 31
  %516 = trunc i32 %515 to i8
  store i8 %516, i8* %56, align 1, !tbaa !2448
  %517 = lshr i32 %500, 31
  %518 = xor i32 %515, %517
  %519 = add nuw nsw i32 %518, %517
  %520 = icmp eq i32 %519, 2
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %62, align 1, !tbaa !2449
  %.v13 = select i1 %513, i64 195, i64 10
  %522 = add i64 %257, %.v13
  store i64 %522, i64* %65, align 8, !tbaa !2428
  br i1 %513, label %block_402cad, label %block_402bf4

block_402ce7:                                     ; preds = %block_402cdb
  %523 = add i64 %332, -16
  %524 = add i64 %368, 4
  store i64 %524, i64* %PC, align 8
  %525 = inttoptr i64 %523 to i64*
  %526 = load i64, i64* %525, align 8
  store i64 %526, i64* %RAX, align 8, !tbaa !2428
  %527 = add i64 %368, 8
  store i64 %527, i64* %PC, align 8
  %528 = load i32, i32* %335, align 4
  %529 = sext i32 %528 to i64
  store i64 %529, i64* %RCX, align 8, !tbaa !2428
  %530 = shl nsw i64 %529, 2
  %531 = add i64 %530, %526
  %532 = add i64 %368, 13
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %531 to i32*
  %534 = load i32, i32* %533, align 4
  %535 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %534, i32* %535, align 1, !tbaa !2452
  store float 0.000000e+00, float* %390, align 1, !tbaa !2452
  store float 0.000000e+00, float* %392, align 1, !tbaa !2452
  store float 0.000000e+00, float* %394, align 1, !tbaa !2452
  %536 = load <2 x float>, <2 x float>* %395, align 1
  %537 = extractelement <2 x float> %536, i32 0
  %538 = fpext float %537 to double
  %539 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %540 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %541 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %542 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %543 = bitcast %union.VectorReg* %6 to i32*
  store i32 %539, i32* %543, align 1, !tbaa !2452
  %544 = bitcast i8* %405 to i32*
  store i32 %540, i32* %544, align 1, !tbaa !2452
  %545 = bitcast i64* %408 to i32*
  store i32 %541, i32* %545, align 1, !tbaa !2452
  %546 = bitcast i8* %411 to i32*
  store i32 %542, i32* %546, align 1, !tbaa !2452
  %547 = bitcast double %538 to i64
  %548 = load i64, i64* %391, align 1
  %549 = load i64, i64* %416, align 1
  %550 = load i64, i64* %418, align 1
  %551 = and i64 %549, %547
  %552 = and i64 %550, %548
  %553 = trunc i64 %551 to i32
  %554 = lshr i64 %551, 32
  %555 = trunc i64 %554 to i32
  store i32 %553, i32* %425, align 1, !tbaa !2451
  store i32 %555, i32* %426, align 1, !tbaa !2451
  %556 = trunc i64 %552 to i32
  store i32 %556, i32* %428, align 1, !tbaa !2451
  %557 = lshr i64 %552, 32
  %558 = trunc i64 %557 to i32
  store i32 %558, i32* %431, align 1, !tbaa !2451
  %559 = add i64 %332, -24
  %560 = add i64 %368, 33
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %559 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = bitcast %union.VectorReg* %6 to i32*
  store i32 %562, i32* %563, align 1, !tbaa !2452
  store float 0.000000e+00, float* %406, align 1, !tbaa !2452
  store float 0.000000e+00, float* %409, align 1, !tbaa !2452
  store float 0.000000e+00, float* %412, align 1, !tbaa !2452
  %564 = load <2 x float>, <2 x float>* %452, align 1
  %565 = extractelement <2 x float> %564, i32 0
  %566 = fpext float %565 to double
  store double %566, double* %453, align 1, !tbaa !2454
  %567 = add i64 %368, 41
  store i64 %567, i64* %PC, align 8
  %568 = load double, double* %436, align 1
  %569 = fcmp uno double %568, %566
  br i1 %569, label %570, label %580

; <label>:570:                                    ; preds = %block_402ce7
  %571 = fadd double %568, %566
  %572 = bitcast double %571 to i64
  %573 = and i64 %572, 9221120237041090560
  %574 = icmp eq i64 %573, 9218868437227405312
  %575 = and i64 %572, 2251799813685247
  %576 = icmp ne i64 %575, 0
  %577 = and i1 %574, %576
  br i1 %577, label %578, label %586

; <label>:578:                                    ; preds = %570
  %579 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %567, %struct.Memory* %MEMORY.3) #9
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre8 = load i8, i8* %53, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:580:                                    ; preds = %block_402ce7
  %581 = fcmp ogt double %568, %566
  br i1 %581, label %586, label %582

; <label>:582:                                    ; preds = %580
  %583 = fcmp olt double %568, %566
  br i1 %583, label %586, label %584

; <label>:584:                                    ; preds = %582
  %585 = fcmp oeq double %568, %566
  br i1 %585, label %586, label %590

; <label>:586:                                    ; preds = %584, %582, %580, %570
  %587 = phi i8 [ 0, %580 ], [ 0, %582 ], [ 1, %584 ], [ 1, %570 ]
  %588 = phi i8 [ 0, %580 ], [ 0, %582 ], [ 0, %584 ], [ 1, %570 ]
  %589 = phi i8 [ 0, %580 ], [ 1, %582 ], [ 0, %584 ], [ 1, %570 ]
  store i8 %587, i8* %53, align 1, !tbaa !2456
  store i8 %588, i8* %45, align 1, !tbaa !2456
  store i8 %589, i8* %39, align 1, !tbaa !2456
  br label %590

; <label>:590:                                    ; preds = %586, %584
  %591 = phi i8 [ %587, %586 ], [ %356, %584 ]
  %592 = phi i8 [ %589, %586 ], [ %344, %584 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %590, %578
  %593 = phi i8 [ %.pre8, %578 ], [ %591, %590 ]
  %594 = phi i8 [ %.pre7, %578 ], [ %592, %590 ]
  %595 = phi i64 [ %.pre6, %578 ], [ %567, %590 ]
  %596 = phi %struct.Memory* [ %579, %578 ], [ %MEMORY.3, %590 ]
  %597 = or i8 %593, %594
  %598 = icmp ne i8 %597, 0
  %.v17 = select i1 %598, i64 49, i64 6
  %599 = add i64 %595, %.v17
  store i64 %599, i64* %65, align 8, !tbaa !2428
  br i1 %598, label %block_402d41, label %block_402d16

block_402c66:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %600 = load i64, i64* %RBP, align 8
  %601 = add i64 %600, -28
  %602 = add i64 %172, 3
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to i32*
  %604 = load i32, i32* %603, align 4
  %605 = zext i32 %604 to i64
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = add i64 %600, -36
  %607 = add i64 %172, 6
  store i64 %607, i64* %PC, align 8
  %608 = inttoptr i64 %606 to i32*
  store i32 %604, i32* %608, align 4
  %609 = load i64, i64* %RBP, align 8
  %610 = add i64 %609, -16
  %611 = load i64, i64* %PC, align 8
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC, align 8
  %613 = inttoptr i64 %610 to i64*
  %614 = load i64, i64* %613, align 8
  store i64 %614, i64* %RCX, align 8, !tbaa !2428
  %615 = add i64 %609, -32
  %616 = add i64 %611, 8
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i32*
  %618 = load i32, i32* %617, align 4
  %619 = sext i32 %618 to i64
  store i64 %619, i64* %RDX, align 8, !tbaa !2428
  %620 = shl nsw i64 %619, 2
  %621 = add i64 %620, %614
  %622 = add i64 %611, 13
  store i64 %622, i64* %PC, align 8
  %623 = inttoptr i64 %621 to i32*
  %624 = load i32, i32* %623, align 4
  %625 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %624, i32* %625, align 1, !tbaa !2452
  store float 0.000000e+00, float* %677, align 1, !tbaa !2452
  store float 0.000000e+00, float* %679, align 1, !tbaa !2452
  store float 0.000000e+00, float* %681, align 1, !tbaa !2452
  %626 = load <2 x float>, <2 x float>* %682, align 1
  %627 = extractelement <2 x float> %626, i32 0
  %628 = fpext float %627 to double
  %629 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %630 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %631 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %632 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %633 = bitcast %union.VectorReg* %6 to i32*
  store i32 %629, i32* %633, align 1, !tbaa !2452
  %634 = bitcast i8* %692 to i32*
  store i32 %630, i32* %634, align 1, !tbaa !2452
  %635 = bitcast i64* %695 to i32*
  store i32 %631, i32* %635, align 1, !tbaa !2452
  %636 = bitcast i8* %698 to i32*
  store i32 %632, i32* %636, align 1, !tbaa !2452
  %637 = bitcast double %628 to i64
  %638 = load i64, i64* %678, align 1
  %639 = load i64, i64* %703, align 1
  %640 = load i64, i64* %705, align 1
  %641 = and i64 %639, %637
  %642 = and i64 %640, %638
  %643 = trunc i64 %641 to i32
  %644 = lshr i64 %641, 32
  %645 = trunc i64 %644 to i32
  store i32 %643, i32* %712, align 1, !tbaa !2451
  store i32 %645, i32* %713, align 1, !tbaa !2451
  %646 = trunc i64 %642 to i32
  store i32 %646, i32* %715, align 1, !tbaa !2451
  %647 = lshr i64 %642, 32
  %648 = trunc i64 %647 to i32
  store i32 %648, i32* %718, align 1, !tbaa !2451
  %649 = load <2 x i32>, <2 x i32>* %719, align 1
  %650 = load <2 x i32>, <2 x i32>* %721, align 1
  %651 = bitcast <2 x i32> %649 to double
  %652 = fptrunc double %651 to float
  store float %652, float* %674, align 1, !tbaa !2452
  %653 = extractelement <2 x i32> %649, i32 1
  store i32 %653, i32* %713, align 1, !tbaa !2452
  %654 = extractelement <2 x i32> %650, i32 0
  store i32 %654, i32* %715, align 1, !tbaa !2452
  %655 = extractelement <2 x i32> %650, i32 1
  store i32 %655, i32* %718, align 1, !tbaa !2452
  %656 = add i64 %609, -24
  %657 = add i64 %611, 37
  store i64 %657, i64* %PC, align 8
  %658 = load <2 x float>, <2 x float>* %682, align 1
  %659 = extractelement <2 x float> %658, i32 0
  %660 = inttoptr i64 %656 to float*
  store float %659, float* %660, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402c91

block_402bf4:                                     ; preds = %block_402bea
  %661 = add i64 %30, -32
  %662 = add i64 %522, 7
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i32*
  store i32 1, i32* %663, align 4
  %664 = load i64, i64* %RBP, align 8
  %665 = add i64 %664, -16
  %666 = load i64, i64* %PC, align 8
  %667 = add i64 %666, 4
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %665 to i64*
  %669 = load i64, i64* %668, align 8
  store i64 %669, i64* %RAX, align 8, !tbaa !2428
  %670 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %671 = add i64 %666, 8
  store i64 %671, i64* %PC, align 8
  %672 = inttoptr i64 %669 to i32*
  %673 = load i32, i32* %672, align 4
  %674 = bitcast [32 x %union.VectorReg]* %5 to float*
  %675 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %673, i32* %675, align 1, !tbaa !2452
  %676 = getelementptr inbounds i8, i8* %670, i64 4
  %677 = bitcast i8* %676 to float*
  store float 0.000000e+00, float* %677, align 1, !tbaa !2452
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %679 = bitcast i64* %678 to float*
  store float 0.000000e+00, float* %679, align 1, !tbaa !2452
  %680 = getelementptr inbounds i8, i8* %670, i64 12
  %681 = bitcast i8* %680 to float*
  store float 0.000000e+00, float* %681, align 1, !tbaa !2452
  %682 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %683 = load <2 x float>, <2 x float>* %682, align 1
  %684 = extractelement <2 x float> %683, i32 0
  %685 = fpext float %684 to double
  %686 = bitcast %union.VectorReg* %6 to i8*
  %687 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %688 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %689 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %690 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %691 = bitcast %union.VectorReg* %6 to i32*
  store i32 %687, i32* %691, align 1, !tbaa !2452
  %692 = getelementptr inbounds i8, i8* %686, i64 4
  %693 = bitcast i8* %692 to float*
  %694 = bitcast i8* %692 to i32*
  store i32 %688, i32* %694, align 1, !tbaa !2452
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %696 = bitcast i64* %695 to float*
  %697 = bitcast i64* %695 to i32*
  store i32 %689, i32* %697, align 1, !tbaa !2452
  %698 = getelementptr inbounds i8, i8* %686, i64 12
  %699 = bitcast i8* %698 to float*
  %700 = bitcast i8* %698 to i32*
  store i32 %690, i32* %700, align 1, !tbaa !2452
  %701 = bitcast double %685 to i64
  %702 = load i64, i64* %678, align 1
  %703 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %704 = load i64, i64* %703, align 1
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %706 = load i64, i64* %705, align 1
  %707 = and i64 %704, %701
  %708 = and i64 %706, %702
  %709 = trunc i64 %707 to i32
  %710 = lshr i64 %707, 32
  %711 = trunc i64 %710 to i32
  %712 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %709, i32* %712, align 1, !tbaa !2451
  %713 = bitcast i8* %676 to i32*
  store i32 %711, i32* %713, align 1, !tbaa !2451
  %714 = trunc i64 %708 to i32
  %715 = bitcast i64* %678 to i32*
  store i32 %714, i32* %715, align 1, !tbaa !2451
  %716 = lshr i64 %708, 32
  %717 = trunc i64 %716 to i32
  %718 = bitcast i8* %680 to i32*
  store i32 %717, i32* %718, align 1, !tbaa !2451
  %719 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %720 = load <2 x i32>, <2 x i32>* %719, align 1
  %721 = bitcast i64* %678 to <2 x i32>*
  %722 = load <2 x i32>, <2 x i32>* %721, align 1
  %723 = bitcast [32 x %union.VectorReg]* %5 to double*
  %724 = bitcast <2 x i32> %720 to double
  %725 = fptrunc double %724 to float
  store float %725, float* %674, align 1, !tbaa !2452
  %726 = extractelement <2 x i32> %720, i32 1
  store i32 %726, i32* %713, align 1, !tbaa !2452
  %727 = extractelement <2 x i32> %722, i32 0
  store i32 %727, i32* %715, align 1, !tbaa !2452
  %728 = extractelement <2 x i32> %722, i32 1
  store i32 %728, i32* %718, align 1, !tbaa !2452
  %729 = add i64 %664, -24
  %730 = add i64 %666, 32
  store i64 %730, i64* %PC, align 8
  %731 = load <2 x float>, <2 x float>* %682, align 1
  %732 = extractelement <2 x float> %731, i32 0
  %733 = inttoptr i64 %729 to float*
  store float %732, float* %733, align 4
  %734 = load i64, i64* %RBP, align 8
  %735 = add i64 %734, -32
  %736 = load i64, i64* %PC, align 8
  %737 = add i64 %736, 3
  store i64 %737, i64* %PC, align 8
  %738 = inttoptr i64 %735 to i32*
  %739 = load i32, i32* %738, align 4
  %740 = zext i32 %739 to i64
  store i64 %740, i64* %RCX, align 8, !tbaa !2428
  %741 = add i64 %734, -20
  %742 = add i64 %736, 6
  store i64 %742, i64* %PC, align 8
  %743 = inttoptr i64 %741 to i32*
  %744 = load i32, i32* %743, align 4
  %745 = add i32 %744, %739
  %746 = zext i32 %745 to i64
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %747 = icmp ult i32 %745, %739
  %748 = icmp ult i32 %745, %744
  %749 = or i1 %747, %748
  %750 = zext i1 %749 to i8
  store i8 %750, i8* %39, align 1, !tbaa !2432
  %751 = and i32 %745, 255
  %752 = tail call i32 @llvm.ctpop.i32(i32 %751) #8
  %753 = trunc i32 %752 to i8
  %754 = and i8 %753, 1
  %755 = xor i8 %754, 1
  store i8 %755, i8* %45, align 1, !tbaa !2446
  %756 = xor i32 %744, %739
  %757 = xor i32 %756, %745
  %758 = lshr i32 %757, 4
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  store i8 %760, i8* %50, align 1, !tbaa !2450
  %761 = icmp eq i32 %745, 0
  %762 = zext i1 %761 to i8
  store i8 %762, i8* %53, align 1, !tbaa !2447
  %763 = lshr i32 %745, 31
  %764 = trunc i32 %763 to i8
  store i8 %764, i8* %56, align 1, !tbaa !2448
  %765 = lshr i32 %739, 31
  %766 = lshr i32 %744, 31
  %767 = xor i32 %763, %765
  %768 = xor i32 %763, %766
  %769 = add nuw nsw i32 %767, %768
  %770 = icmp eq i32 %769, 2
  %771 = zext i1 %770 to i8
  store i8 %771, i8* %62, align 1, !tbaa !2449
  %772 = add i64 %736, 9
  store i64 %772, i64* %PC, align 8
  store i32 %745, i32* %738, align 4
  %773 = load i64, i64* %RBP, align 8
  %774 = add i64 %773, -28
  %775 = load i64, i64* %PC, align 8
  %776 = add i64 %775, 7
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %774 to i32*
  store i32 1, i32* %777, align 4
  %778 = bitcast %union.VectorReg* %6 to <2 x float>*
  %779 = bitcast %union.VectorReg* %6 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c2b

block_402d41:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402d16
  %780 = phi i64 [ %599, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %.pre9, %block_402d16 ]
  %781 = load i64, i64* %RBP, align 8
  %782 = add i64 %781, -28
  %783 = add i64 %780, 8
  store i64 %783, i64* %PC, align 8
  %784 = inttoptr i64 %782 to i32*
  %785 = load i32, i32* %784, align 4
  %786 = add i32 %785, 1
  %787 = zext i32 %786 to i64
  store i64 %787, i64* %RAX, align 8, !tbaa !2428
  %788 = icmp eq i32 %785, -1
  %789 = icmp eq i32 %786, 0
  %790 = or i1 %788, %789
  %791 = zext i1 %790 to i8
  store i8 %791, i8* %39, align 1, !tbaa !2432
  %792 = and i32 %786, 255
  %793 = tail call i32 @llvm.ctpop.i32(i32 %792) #8
  %794 = trunc i32 %793 to i8
  %795 = and i8 %794, 1
  %796 = xor i8 %795, 1
  store i8 %796, i8* %45, align 1, !tbaa !2446
  %797 = xor i32 %785, %786
  %798 = lshr i32 %797, 4
  %799 = trunc i32 %798 to i8
  %800 = and i8 %799, 1
  store i8 %800, i8* %50, align 1, !tbaa !2450
  %801 = icmp eq i32 %786, 0
  %802 = zext i1 %801 to i8
  store i8 %802, i8* %53, align 1, !tbaa !2447
  %803 = lshr i32 %786, 31
  %804 = trunc i32 %803 to i8
  store i8 %804, i8* %56, align 1, !tbaa !2448
  %805 = lshr i32 %785, 31
  %806 = xor i32 %803, %805
  %807 = add nuw nsw i32 %806, %803
  %808 = icmp eq i32 %807, 2
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %62, align 1, !tbaa !2449
  %810 = add i64 %780, 14
  store i64 %810, i64* %PC, align 8
  store i32 %786, i32* %784, align 4
  %811 = load i64, i64* %PC, align 8
  %812 = add i64 %811, -116
  store i64 %812, i64* %65, align 8, !tbaa !2428
  br label %block_402cdb
}

; Function Attrs: noinline
define %struct.Memory* @sub_400610_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400610:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %R9 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %1, 1
  store i64 %14, i64* %PC, align 8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %13, i64* %18, align 8
  %19 = load i64, i64* %PC, align 8
  store i64 %17, i64* %RBP, align 8, !tbaa !2428
  %20 = add i64 %16, -1016
  store i64 %20, i64* %RSP, align 8, !tbaa !2428
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %27 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %28 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 8) to i32*), align 8
  %29 = bitcast [32 x %union.VectorReg]* %8 to float*
  %30 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %28, i32* %30, align 1, !tbaa !2452
  %31 = getelementptr inbounds i8, i8* %27, i64 4
  %32 = bitcast i8* %31 to float*
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to float*
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  %35 = getelementptr inbounds i8, i8* %27, i64 12
  %36 = bitcast i8* %35 to float*
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %21, align 1, !tbaa !2432
  store i8 1, i8* %22, align 1, !tbaa !2446
  store i8 1, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  store i8 0, i8* %23, align 1, !tbaa !2450
  %37 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  store i64 720, i64* %37, align 8, !tbaa !2428
  %38 = add i64 %16, -840
  store i64 %38, i64* %R9, align 8, !tbaa !2428
  %39 = add i64 %16, -12
  %40 = add i64 %19, 72
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %39 to i32*
  store i32 0, i32* %41, align 4
  %42 = load i64, i64* %R9, align 8
  %43 = load i64, i64* %PC, align 8
  store i64 %42, i64* %RDI, align 8, !tbaa !2428
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -840
  %46 = load i64, i64* %RSI, align 8
  %47 = add i64 %43, 10
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %48, align 8
  %49 = load i32, i32* %EDX, align 4
  %50 = zext i32 %49 to i64
  %51 = load i64, i64* %PC, align 8
  store i64 %50, i64* %RSI, align 8, !tbaa !2428
  %52 = load i64, i64* %R8, align 8
  store i64 %52, i64* %RDX, align 8, !tbaa !2428
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -848
  %55 = load i64, i64* %RCX, align 8
  %56 = add i64 %51, 12
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -852
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 8
  store i64 %61, i64* %PC, align 8
  %62 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %63 = load <2 x float>, <2 x float>* %62, align 1
  %64 = extractelement <2 x float> %63, i32 0
  %65 = inttoptr i64 %59 to float*
  store float %64, float* %65, align 4
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -864
  %68 = load i64, i64* %RAX, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 7
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, -462
  %74 = add i64 %72, 5
  %75 = load i64, i64* %15, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %15, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %73, i64* %78, align 8, !tbaa !2428
  %79 = tail call fastcc %struct.Memory* @ext_4004b0_memset(%struct.State* nonnull %0, %struct.Memory* %2)
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -832
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %81 to i8*
  store i8 32, i8* %84, align 1
  %85 = load i64, i64* %RBP, align 8
  %86 = add i64 %85, -848
  %87 = load i64, i64* %PC, align 8
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %85, -96
  %92 = add i64 %87, 11
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %90, i64* %93, align 8
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -864
  %96 = load i64, i64* %PC, align 8
  %97 = add i64 %96, 7
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %95 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %RCX, align 8, !tbaa !2428
  %100 = add i64 %94, -104
  %101 = add i64 %96, 11
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %100 to i64*
  store i64 %99, i64* %102, align 8
  %103 = load i64, i64* %PC, align 8
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -852
  %106 = add i64 %103, 30
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %105 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %108, i32* %109, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %110 = add i64 %104, -8
  %111 = add i64 %103, 35
  store i64 %111, i64* %PC, align 8
  %112 = load <2 x float>, <2 x float>* %62, align 1
  %113 = extractelement <2 x float> %112, i32 0
  %114 = inttoptr i64 %110 to float*
  store float %113, float* %114, align 4
  %115 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %116 = load i64, i64* @stderr, align 64
  store i64 %116, i64* %RDI, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -840
  %119 = add i64 %115, 26
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %118 to i64*
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %122 = add i64 %115, -515
  %123 = add i64 %115, 33
  %124 = load i64, i64* %15, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %123, i64* %126, align 8
  store i64 %125, i64* %15, align 8, !tbaa !2428
  store i64 %122, i64* %78, align 8, !tbaa !2428
  %127 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %79)
  %128 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %129 = load i64, i64* @stderr, align 64
  store i64 %129, i64* %RDI, align 8, !tbaa !2428
  %130 = load i64, i64* %RBP, align 8
  %131 = add i64 %130, -868
  %132 = load i32, i32* %EAX, align 4
  %133 = add i64 %128, 24
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %131 to i32*
  store i32 %132, i32* %134, align 4
  %135 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %136 = add i64 %135, -572
  %137 = add i64 %135, 7
  %138 = load i64, i64* %15, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %15, align 8, !tbaa !2428
  store i64 %136, i64* %78, align 8, !tbaa !2428
  %141 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %127)
  %142 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %143 = load i64, i64* @stderr, align 64
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -872
  %146 = load i32, i32* %EAX, align 4
  %147 = add i64 %142, 24
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %145 to i32*
  store i32 %146, i32* %148, align 4
  %149 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %150 = add i64 %149, -603
  %151 = add i64 %149, 7
  %152 = load i64, i64* %15, align 8, !tbaa !2428
  %153 = add i64 %152, -8
  %154 = inttoptr i64 %153 to i64*
  store i64 %151, i64* %154, align 8
  store i64 %153, i64* %15, align 8, !tbaa !2428
  store i64 %150, i64* %78, align 8, !tbaa !2428
  %155 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %141)
  %156 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %157 = load i64, i64* @stderr, align 64
  store i64 %157, i64* %RDI, align 8, !tbaa !2428
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -96
  %160 = add i64 %156, 22
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %159 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RDX, align 8, !tbaa !2428
  %163 = add i64 %158, -876
  %164 = load i32, i32* %EAX, align 4
  %165 = add i64 %156, 28
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %163 to i32*
  store i32 %164, i32* %166, align 4
  %167 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %168 = add i64 %167, -638
  %169 = add i64 %167, 7
  %170 = load i64, i64* %15, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %169, i64* %172, align 8
  store i64 %171, i64* %15, align 8, !tbaa !2428
  store i64 %168, i64* %78, align 8, !tbaa !2428
  %173 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %155)
  %174 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %175 = load i64, i64* @stderr, align 64
  store i64 %175, i64* %RDI, align 8, !tbaa !2428
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -104
  %178 = add i64 %174, 22
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179, align 8
  store i64 %180, i64* %RDX, align 8, !tbaa !2428
  %181 = add i64 %176, -880
  %182 = load i32, i32* %EAX, align 4
  %183 = add i64 %174, 28
  store i64 %183, i64* %PC, align 8
  %184 = inttoptr i64 %181 to i32*
  store i32 %182, i32* %184, align 4
  %185 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %186 = add i64 %185, -673
  %187 = add i64 %185, 7
  %188 = load i64, i64* %15, align 8, !tbaa !2428
  %189 = add i64 %188, -8
  %190 = inttoptr i64 %189 to i64*
  store i64 %187, i64* %190, align 8
  store i64 %189, i64* %15, align 8, !tbaa !2428
  store i64 %186, i64* %78, align 8, !tbaa !2428
  %191 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %173)
  %192 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -20
  store i64 %194, i64* %R8, align 8, !tbaa !2428
  %195 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*), align 8
  %196 = bitcast [32 x %union.VectorReg]* %8 to double*
  store double %195, double* %196, align 1, !tbaa !2454
  %197 = bitcast i64* %33 to double*
  store double 0.000000e+00, double* %197, align 1, !tbaa !2454
  %198 = bitcast %union.VectorReg* %9 to i8*
  %199 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 32) to i64*), align 16
  %200 = bitcast %union.VectorReg* %9 to double*
  %201 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %199, i64* %201, align 1, !tbaa !2454
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %203 = bitcast i64* %202 to double*
  store double 0.000000e+00, double* %203, align 1, !tbaa !2454
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %205 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %206 = sext i32 %205 to i64
  %207 = sext i32 %205 to i64
  %208 = mul nsw i64 %207, %206
  %209 = shl i64 %208, 32
  %210 = ashr exact i64 %209, 32
  %211 = mul nsw i64 %207, %210
  %212 = bitcast %union.VectorReg* %10 to i8*
  %213 = trunc i64 %211 to i32
  %214 = sitofp i32 %213 to double
  %215 = bitcast %union.VectorReg* %10 to double*
  store double %214, double* %215, align 1, !tbaa !2454
  %216 = bitcast %union.VectorReg* %11 to i8*
  %217 = bitcast double %195 to <2 x i32>
  %218 = extractelement <2 x i32> %217, i32 0
  %219 = bitcast %union.VectorReg* %11 to i32*
  store i32 %218, i32* %219, align 1, !tbaa !2452
  %220 = extractelement <2 x i32> %217, i32 1
  %221 = getelementptr inbounds i8, i8* %216, i64 4
  %222 = bitcast i8* %221 to i32*
  store i32 %220, i32* %222, align 1, !tbaa !2452
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %224 = bitcast i64* %223 to i32*
  store i32 0, i32* %224, align 1, !tbaa !2452
  %225 = getelementptr inbounds i8, i8* %216, i64 12
  %226 = bitcast i8* %225 to i32*
  store i32 0, i32* %226, align 1, !tbaa !2452
  %227 = bitcast %union.VectorReg* %11 to double*
  %228 = load double, double* %227, align 1
  %229 = fmul double %228, %214
  %230 = bitcast %union.VectorReg* %9 to double*
  %231 = load double, double* %230, align 1
  %232 = fdiv double %229, %231
  %233 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %234 = sext i32 %233 to i64
  %235 = sext i32 %233 to i64
  %236 = mul nsw i64 %235, %234
  %237 = trunc i64 %236 to i32
  %238 = and i64 %236, 4294967295
  store i64 %238, i64* %204, align 8, !tbaa !2428
  %239 = shl i64 %236, 32
  %240 = ashr exact i64 %239, 32
  %241 = icmp ne i64 %240, %236
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %21, align 1, !tbaa !2432
  %243 = and i32 %237, 255
  %244 = tail call i32 @llvm.ctpop.i32(i32 %243) #8
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  store i8 %247, i8* %22, align 1, !tbaa !2446
  store i8 0, i8* %23, align 1, !tbaa !2450
  store i8 0, i8* %24, align 1, !tbaa !2447
  %248 = lshr i32 %237, 31
  %249 = trunc i32 %248 to i8
  store i8 %249, i8* %25, align 1, !tbaa !2448
  store i8 %242, i8* %26, align 1, !tbaa !2449
  %250 = trunc i64 %236 to i32
  %251 = sitofp i32 %250 to double
  store double %251, double* %200, align 1, !tbaa !2454
  %252 = load double, double* %196, align 1
  %253 = bitcast i64* %33 to <2 x i32>*
  %254 = load <2 x i32>, <2 x i32>* %253, align 1
  %255 = fmul double %252, %251
  %256 = bitcast [32 x %union.VectorReg]* %8 to double*
  %257 = fadd double %232, %255
  store double %257, double* %227, align 1, !tbaa !2454
  %258 = bitcast double %255 to <2 x i32>
  %259 = bitcast i64* %33 to <2 x i32>*
  %260 = fptrunc double %257 to float
  store float %260, float* %29, align 1, !tbaa !2452
  %261 = extractelement <2 x i32> %258, i32 1
  %262 = bitcast i8* %31 to i32*
  store i32 %261, i32* %262, align 1, !tbaa !2452
  %263 = extractelement <2 x i32> %254, i32 0
  %264 = bitcast i64* %33 to i32*
  store i32 %263, i32* %264, align 1, !tbaa !2452
  %265 = extractelement <2 x i32> %254, i32 1
  %266 = bitcast i8* %35 to i32*
  store i32 %265, i32* %266, align 1, !tbaa !2452
  %267 = load i64, i64* %RBP, align 8
  %268 = add i64 %267, -12
  %269 = add i64 %192, 121
  store i64 %269, i64* %PC, align 8
  %270 = load <2 x float>, <2 x float>* %62, align 1
  %271 = extractelement <2 x float> %270, i32 0
  %272 = inttoptr i64 %268 to float*
  store float %271, float* %272, align 4
  %273 = load i64, i64* %PC, align 8
  %274 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RSI, align 8, !tbaa !2428
  %276 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %277 = zext i32 %276 to i64
  store i64 %277, i64* %RDX, align 8, !tbaa !2428
  %278 = load i64, i64* %RBP, align 8
  %279 = add i64 %278, -884
  %280 = load i32, i32* %EAX, align 4
  %281 = add i64 %273, 20
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %279 to i32*
  store i32 %280, i32* %282, align 4
  %283 = load i64, i64* %PC, align 8
  %284 = add i64 %283, 4027
  %285 = add i64 %283, 5
  %286 = load i64, i64* %15, align 8, !tbaa !2428
  %287 = add i64 %286, -8
  %288 = inttoptr i64 %287 to i64*
  store i64 %285, i64* %288, align 8
  store i64 %287, i64* %15, align 8, !tbaa !2428
  store i64 %284, i64* %78, align 8, !tbaa !2428
  %289 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %284, %struct.Memory* %191)
  %290 = load i64, i64* %PC, align 8
  %291 = add i64 %290, -570
  %292 = add i64 %290, 5
  %293 = load i64, i64* %15, align 8, !tbaa !2428
  %294 = add i64 %293, -8
  %295 = inttoptr i64 %294 to i64*
  store i64 %292, i64* %295, align 8
  store i64 %294, i64* %15, align 8, !tbaa !2428
  store i64 %291, i64* %78, align 8, !tbaa !2428
  %296 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %291, %struct.Memory* %289)
  %297 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %298 = load i64, i64* %RBP, align 8
  %299 = add i64 %298, -40
  %300 = add i64 %297, 35
  store i64 %300, i64* %PC, align 8
  %301 = load <2 x float>, <2 x float>* %62, align 1
  %302 = extractelement <2 x float> %301, i32 0
  %303 = inttoptr i64 %299 to float*
  store float %302, float* %303, align 4
  %304 = load i64, i64* %PC, align 8
  %305 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %306 = zext i32 %305 to i64
  store i64 %306, i64* %RSI, align 8, !tbaa !2428
  %307 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RDX, align 8, !tbaa !2428
  %309 = add i64 %304, 4446
  %310 = add i64 %304, 19
  %311 = load i64, i64* %15, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %15, align 8, !tbaa !2428
  store i64 %309, i64* %78, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %309, %struct.Memory* %296)
  %315 = load i64, i64* %PC, align 8
  %316 = add i64 %315, -629
  %317 = add i64 %315, 5
  %318 = load i64, i64* %15, align 8, !tbaa !2428
  %319 = add i64 %318, -8
  %320 = inttoptr i64 %319 to i64*
  store i64 %317, i64* %320, align 8
  store i64 %319, i64* %15, align 8, !tbaa !2428
  store i64 %316, i64* %78, align 8, !tbaa !2428
  %321 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %316, %struct.Memory* %314)
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -40
  %324 = load i64, i64* %PC, align 8
  %325 = add i64 %324, 5
  store i64 %325, i64* %PC, align 8
  %326 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %327 = load <2 x float>, <2 x float>* %326, align 1
  %328 = load <2 x i32>, <2 x i32>* %259, align 1
  %329 = inttoptr i64 %323 to float*
  %330 = load float, float* %329, align 4
  %331 = extractelement <2 x float> %327, i32 0
  %332 = fsub float %331, %330
  store float %332, float* %29, align 1, !tbaa !2452
  %333 = bitcast <2 x float> %327 to <2 x i32>
  %334 = extractelement <2 x i32> %333, i32 1
  store i32 %334, i32* %262, align 1, !tbaa !2452
  %335 = extractelement <2 x i32> %328, i32 0
  store i32 %335, i32* %264, align 1, !tbaa !2452
  %336 = extractelement <2 x i32> %328, i32 1
  store i32 %336, i32* %266, align 1, !tbaa !2452
  %337 = load <2 x float>, <2 x float>* %62, align 1
  %338 = extractelement <2 x float> %337, i32 0
  store float %338, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*), align 16
  %339 = add i64 %324, -634
  %340 = add i64 %324, 19
  %341 = load i64, i64* %15, align 8, !tbaa !2428
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %340, i64* %343, align 8
  store i64 %342, i64* %15, align 8, !tbaa !2428
  store i64 %339, i64* %78, align 8, !tbaa !2428
  %344 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %339, %struct.Memory* %321)
  %345 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %346 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  store i64 0, i64* %346, align 8, !tbaa !2428
  store i8 0, i8* %21, align 1, !tbaa !2432
  store i8 1, i8* %22, align 1, !tbaa !2446
  store i8 1, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  store i8 0, i8* %23, align 1, !tbaa !2450
  %347 = load i64, i64* %RBP, align 8
  %348 = add i64 %347, -40
  %349 = add i64 %345, 38
  store i64 %349, i64* %PC, align 8
  %350 = load <2 x float>, <2 x float>* %62, align 1
  %351 = extractelement <2 x float> %350, i32 0
  %352 = inttoptr i64 %348 to float*
  store float %351, float* %352, align 4
  %353 = load i64, i64* %PC, align 8
  %354 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %355 = zext i32 %354 to i64
  store i64 %355, i64* %RSI, align 8, !tbaa !2428
  %356 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %357 = zext i32 %356 to i64
  store i64 %357, i64* %RDX, align 8, !tbaa !2428
  %358 = add i64 %353, 5149
  %359 = add i64 %353, 19
  %360 = load i64, i64* %15, align 8, !tbaa !2428
  %361 = add i64 %360, -8
  %362 = inttoptr i64 %361 to i64*
  store i64 %359, i64* %362, align 8
  store i64 %361, i64* %15, align 8, !tbaa !2428
  store i64 %358, i64* %78, align 8, !tbaa !2428
  %363 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %358, %struct.Memory* %344)
  %364 = load i64, i64* %PC, align 8
  %365 = add i64 %364, -710
  %366 = add i64 %364, 5
  %367 = load i64, i64* %15, align 8, !tbaa !2428
  %368 = add i64 %367, -8
  %369 = inttoptr i64 %368 to i64*
  store i64 %366, i64* %369, align 8
  store i64 %368, i64* %15, align 8, !tbaa !2428
  store i64 %365, i64* %78, align 8, !tbaa !2428
  %370 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %365, %struct.Memory* %363)
  %371 = load i64, i64* %RBP, align 8
  %372 = add i64 %371, -40
  %373 = load i64, i64* %PC, align 8
  %374 = add i64 %373, 5
  store i64 %374, i64* %PC, align 8
  %375 = load <2 x float>, <2 x float>* %326, align 1
  %376 = inttoptr i64 %372 to float*
  %377 = load float, float* %376, align 4
  %378 = extractelement <2 x float> %375, i32 0
  %379 = fsub float %378, %377
  store float %379, float* %29, align 1, !tbaa !2452
  %380 = bitcast <2 x float> %375 to <2 x i32>
  %381 = extractelement <2 x i32> %380, i32 1
  store i32 %381, i32* %262, align 1, !tbaa !2452
  %382 = load <2 x float>, <2 x float>* %62, align 1
  %383 = extractelement <2 x float> %382, i32 0
  store float %383, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*), align 4
  %384 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to i32*), align 16
  %385 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %384, i32* %385, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %386 = load <2 x float>, <2 x float>* %326, align 1
  %387 = load <2 x i32>, <2 x i32>* %259, align 1
  %388 = extractelement <2 x float> %386, i32 0
  %389 = fadd float %388, %383
  store float %389, float* %29, align 1, !tbaa !2452
  %390 = bitcast <2 x float> %386 to <2 x i32>
  %391 = extractelement <2 x i32> %390, i32 1
  store i32 %391, i32* %262, align 1, !tbaa !2452
  %392 = extractelement <2 x i32> %387, i32 0
  store i32 %392, i32* %264, align 1, !tbaa !2452
  %393 = extractelement <2 x i32> %387, i32 1
  store i32 %393, i32* %266, align 1, !tbaa !2452
  %394 = add i64 %371, -16
  %395 = add i64 %373, 37
  store i64 %395, i64* %PC, align 8
  %396 = load <2 x float>, <2 x float>* %62, align 1
  %397 = extractelement <2 x float> %396, i32 0
  %398 = inttoptr i64 %394 to float*
  store float %397, float* %398, align 4
  %399 = load i64, i64* %PC, align 8
  %400 = add i64 %399, 11
  store i64 %400, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4008bb

block_400def:                                     ; preds = %block_400d9e
  %401 = add i64 %2557, -2095
  %402 = add i64 %2557, 5
  %403 = load i64, i64* %15, align 8, !tbaa !2428
  %404 = add i64 %403, -8
  %405 = inttoptr i64 %404 to i64*
  store i64 %402, i64* %405, align 8
  store i64 %404, i64* %15, align 8, !tbaa !2428
  store i64 %401, i64* %78, align 8, !tbaa !2428
  %406 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %401, %struct.Memory* %MEMORY.12)
  %407 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2667, align 1, !tbaa !2451
  store i32 0, i32* %2668, align 1, !tbaa !2451
  store i32 0, i32* %2669, align 1, !tbaa !2451
  store i32 0, i32* %2670, align 1, !tbaa !2451
  %408 = load i64, i64* %RBP, align 8
  %409 = add i64 %408, -84
  %410 = add i64 %407, 18
  store i64 %410, i64* %PC, align 8
  %411 = load <2 x float>, <2 x float>* %62, align 1
  %412 = extractelement <2 x float> %411, i32 0
  %413 = inttoptr i64 %409 to float*
  store float %412, float* %413, align 4
  %414 = load i64, i64* %RBP, align 8
  %415 = add i64 %414, -84
  %416 = load i64, i64* %PC, align 8
  %417 = add i64 %416, 5
  store i64 %417, i64* %PC, align 8
  %418 = inttoptr i64 %415 to i32*
  %419 = load i32, i32* %418, align 4
  %420 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %419, i32* %420, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %421 = add i64 %414, -80
  %422 = add i64 %416, 10
  store i64 %422, i64* %PC, align 8
  %423 = load <2 x float>, <2 x float>* %326, align 1
  %424 = load <2 x i32>, <2 x i32>* %259, align 1
  %425 = inttoptr i64 %421 to float*
  %426 = load float, float* %425, align 4
  %427 = extractelement <2 x float> %423, i32 0
  %428 = fsub float %427, %426
  store float %428, float* %29, align 1, !tbaa !2452
  %429 = bitcast <2 x float> %423 to <2 x i32>
  %430 = extractelement <2 x i32> %429, i32 1
  store i32 %430, i32* %262, align 1, !tbaa !2452
  %431 = extractelement <2 x i32> %424, i32 0
  store i32 %431, i32* %264, align 1, !tbaa !2452
  %432 = extractelement <2 x i32> %424, i32 1
  store i32 %432, i32* %266, align 1, !tbaa !2452
  %433 = add i64 %414, -72
  %434 = add i64 %416, 15
  store i64 %434, i64* %PC, align 8
  %435 = load <2 x float>, <2 x float>* %62, align 1
  %436 = extractelement <2 x float> %435, i32 0
  %437 = inttoptr i64 %433 to float*
  store float %436, float* %437, align 4
  %438 = load i64, i64* %PC, align 8
  %439 = load i64, i64* @stderr, align 64
  store i64 %439, i64* %RDI, align 8, !tbaa !2428
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -68
  %442 = add i64 %438, 11
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i32*
  %444 = load i32, i32* %443, align 4
  %445 = zext i32 %444 to i64
  store i64 %445, i64* %RDX, align 8, !tbaa !2428
  %446 = load <2 x i32>, <2 x i32>* %1526, align 1
  %447 = load <2 x i32>, <2 x i32>* %1527, align 1
  %448 = extractelement <2 x i32> %446, i32 0
  store i32 %448, i32* %3203, align 1, !tbaa !2452
  %449 = extractelement <2 x i32> %446, i32 1
  store i32 %449, i32* %262, align 1, !tbaa !2452
  %450 = extractelement <2 x i32> %447, i32 0
  store i32 %450, i32* %264, align 1, !tbaa !2452
  %451 = extractelement <2 x i32> %447, i32 1
  store i32 %451, i32* %266, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %452 = add i64 %438, -2389
  %453 = add i64 %438, 21
  %454 = load i64, i64* %15, align 8, !tbaa !2428
  %455 = add i64 %454, -8
  %456 = inttoptr i64 %455 to i64*
  store i64 %453, i64* %456, align 8
  store i64 %455, i64* %15, align 8, !tbaa !2428
  store i64 %452, i64* %78, align 8, !tbaa !2428
  %457 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %406)
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -64
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i32*
  %463 = load i32, i32* %462, align 4
  store i8 0, i8* %21, align 1, !tbaa !2432
  %464 = and i32 %463, 255
  %465 = tail call i32 @llvm.ctpop.i32(i32 %464) #8
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  store i8 %468, i8* %22, align 1, !tbaa !2446
  store i8 0, i8* %23, align 1, !tbaa !2450
  %469 = icmp eq i32 %463, 0
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %24, align 1, !tbaa !2447
  %471 = lshr i32 %463, 31
  %472 = trunc i32 %471 to i8
  store i8 %472, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  %473 = add i64 %458, -940
  %474 = load i32, i32* %EAX, align 4
  %475 = add i64 %460, 10
  store i64 %475, i64* %PC, align 8
  %476 = inttoptr i64 %473 to i32*
  store i32 %474, i32* %476, align 4
  %477 = load i64, i64* %PC, align 8
  %478 = load i8, i8* %25, align 1, !tbaa !2448
  %479 = icmp ne i8 %478, 0
  %480 = load i8, i8* %26, align 1, !tbaa !2449
  %481 = icmp ne i8 %480, 0
  %482 = xor i1 %479, %481
  %.v34 = select i1 %482, i64 6, i64 15
  %483 = add i64 %477, %.v34
  store i64 %483, i64* %78, align 8, !tbaa !2428
  br i1 %482, label %block_400e3a, label %block_400e43

block_400f66:                                     ; preds = %block_400ee0
  %484 = add i64 %2588, -2470
  %485 = add i64 %2588, 5
  %486 = load i64, i64* %15, align 8, !tbaa !2428
  %487 = add i64 %486, -8
  %488 = inttoptr i64 %487 to i64*
  store i64 %485, i64* %488, align 8
  store i64 %487, i64* %15, align 8, !tbaa !2428
  store i64 %484, i64* %78, align 8, !tbaa !2428
  %489 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %484, %struct.Memory* %MEMORY.13)
  %490 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2667, align 1, !tbaa !2451
  store i32 0, i32* %2668, align 1, !tbaa !2451
  store i32 0, i32* %2669, align 1, !tbaa !2451
  store i32 0, i32* %2670, align 1, !tbaa !2451
  %491 = load i64, i64* %RBP, align 8
  %492 = add i64 %491, -80
  %493 = add i64 %490, 18
  store i64 %493, i64* %PC, align 8
  %494 = load <2 x float>, <2 x float>* %326, align 1
  %495 = inttoptr i64 %492 to float*
  %496 = load float, float* %495, align 4
  %497 = extractelement <2 x float> %494, i32 0
  %498 = fsub float %497, %496
  store float %498, float* %29, align 1, !tbaa !2452
  %499 = bitcast <2 x float> %494 to <2 x i32>
  %500 = extractelement <2 x i32> %499, i32 1
  store i32 %500, i32* %262, align 1, !tbaa !2452
  %501 = add i64 %491, -84
  %502 = add i64 %490, 23
  store i64 %502, i64* %PC, align 8
  %503 = load <2 x float>, <2 x float>* %62, align 1
  %504 = extractelement <2 x float> %503, i32 0
  %505 = inttoptr i64 %501 to float*
  store float %504, float* %505, align 4
  %506 = load i64, i64* %PC, align 8
  %507 = load i64, i64* @stderr, align 64
  store i64 %507, i64* %RDI, align 8, !tbaa !2428
  %508 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %509 = zext i32 %508 to i64
  store i64 %509, i64* %RDX, align 8, !tbaa !2428
  %510 = load <2 x i32>, <2 x i32>* %1526, align 1
  %511 = load <2 x i32>, <2 x i32>* %1527, align 1
  %512 = extractelement <2 x i32> %510, i32 0
  store i32 %512, i32* %3203, align 1, !tbaa !2452
  %513 = extractelement <2 x i32> %510, i32 1
  store i32 %513, i32* %262, align 1, !tbaa !2452
  %514 = extractelement <2 x i32> %511, i32 0
  store i32 %514, i32* %264, align 1, !tbaa !2452
  %515 = extractelement <2 x i32> %511, i32 1
  store i32 %515, i32* %266, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %516 = add i64 %506, -2754
  %517 = add i64 %506, 25
  %518 = load i64, i64* %15, align 8, !tbaa !2428
  %519 = add i64 %518, -8
  %520 = inttoptr i64 %519 to i64*
  store i64 %517, i64* %520, align 8
  store i64 %519, i64* %15, align 8, !tbaa !2428
  store i64 %516, i64* %78, align 8, !tbaa !2428
  %521 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %489)
  %522 = load i64, i64* %RBP, align 8
  %523 = add i64 %522, -64
  %524 = load i64, i64* %PC, align 8
  %525 = add i64 %524, 4
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %523 to i32*
  %527 = load i32, i32* %526, align 4
  store i8 0, i8* %21, align 1, !tbaa !2432
  %528 = and i32 %527, 255
  %529 = tail call i32 @llvm.ctpop.i32(i32 %528) #8
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  store i8 %532, i8* %22, align 1, !tbaa !2446
  store i8 0, i8* %23, align 1, !tbaa !2450
  %533 = icmp eq i32 %527, 0
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %24, align 1, !tbaa !2447
  %535 = lshr i32 %527, 31
  %536 = trunc i32 %535 to i8
  store i8 %536, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  %537 = add i64 %522, -952
  %538 = load i32, i32* %EAX, align 4
  %539 = add i64 %524, 10
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %537 to i32*
  store i32 %538, i32* %540, align 4
  %541 = load i64, i64* %PC, align 8
  %542 = load i8, i8* %25, align 1, !tbaa !2448
  %543 = icmp ne i8 %542, 0
  %544 = load i8, i8* %26, align 1, !tbaa !2449
  %545 = icmp ne i8 %544, 0
  %546 = xor i1 %543, %545
  %.v37 = select i1 %546, i64 6, i64 23
  %547 = add i64 %541, %.v37
  store i64 %547, i64* %78, align 8, !tbaa !2428
  br i1 %546, label %block_400fab, label %block_400fbc

block_4014e5:                                     ; preds = %block_4014d7
  %548 = add i64 %726, -3877
  %549 = add i64 %726, 5
  %550 = load i64, i64* %15, align 8, !tbaa !2428
  %551 = add i64 %550, -8
  %552 = inttoptr i64 %551 to i64*
  store i64 %549, i64* %552, align 8
  store i64 %551, i64* %15, align 8, !tbaa !2428
  store i64 %548, i64* %78, align 8, !tbaa !2428
  %553 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %548, %struct.Memory* %MEMORY.1)
  %554 = load i64, i64* %RBP, align 8
  %555 = add i64 %554, -40
  %556 = load i64, i64* %PC, align 8
  %557 = add i64 %556, 5
  store i64 %557, i64* %PC, align 8
  %558 = load <2 x float>, <2 x float>* %62, align 1
  %559 = extractelement <2 x float> %558, i32 0
  %560 = inttoptr i64 %555 to float*
  store float %559, float* %560, align 4
  %561 = load i64, i64* %PC, align 8
  %562 = add i64 %561, 11
  store i64 %562, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4014fa

block_4015d8:                                     ; preds = %block_4015c4
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %346, align 8, !tbaa !2428
  store i8 0, i8* %21, align 1, !tbaa !2432
  store i8 1, i8* %22, align 1, !tbaa !2446
  store i8 1, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  store i8 0, i8* %23, align 1, !tbaa !2450
  %563 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %564 = zext i32 %563 to i64
  store i64 %564, i64* %RSI, align 8, !tbaa !2428
  %565 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %566 = zext i32 %565 to i64
  store i64 %566, i64* %RDX, align 8, !tbaa !2428
  %567 = add i64 %1388, 1720
  %568 = add i64 %1388, 52
  %569 = load i64, i64* %15, align 8, !tbaa !2428
  %570 = add i64 %569, -8
  %571 = inttoptr i64 %570 to i64*
  store i64 %568, i64* %571, align 8
  store i64 %570, i64* %15, align 8, !tbaa !2428
  store i64 %567, i64* %78, align 8, !tbaa !2428
  %572 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %567, %struct.Memory* %MEMORY.2)
  %573 = load i64, i64* %PC, align 8
  %574 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %575 = add i32 %574, 1
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %RAX, align 8, !tbaa !2428
  %577 = icmp eq i32 %574, -1
  %578 = icmp eq i32 %575, 0
  %579 = or i1 %577, %578
  %580 = zext i1 %579 to i8
  store i8 %580, i8* %21, align 1, !tbaa !2432
  %581 = and i32 %575, 255
  %582 = tail call i32 @llvm.ctpop.i32(i32 %581) #8
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  %585 = xor i8 %584, 1
  store i8 %585, i8* %22, align 1, !tbaa !2446
  %586 = xor i32 %574, %575
  %587 = lshr i32 %586, 4
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  store i8 %589, i8* %23, align 1, !tbaa !2450
  %590 = icmp eq i32 %575, 0
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %24, align 1, !tbaa !2447
  %592 = lshr i32 %575, 31
  %593 = trunc i32 %592 to i8
  store i8 %593, i8* %25, align 1, !tbaa !2448
  %594 = lshr i32 %574, 31
  %595 = xor i32 %592, %594
  %596 = add nuw nsw i32 %595, %592
  %597 = icmp eq i32 %596, 2
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %26, align 1, !tbaa !2449
  store i32 %575, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %599 = add i64 %573, -72
  store i64 %599, i64* %78, align 8, !tbaa !2428
  br label %block_4015c4

block_401756:                                     ; preds = %block_4014d7
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %600 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 48) to double*), align 16
  %601 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  %602 = bitcast %union.VectorReg* %10 to i32*
  store i32 %601, i32* %602, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2660, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2662, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2664, align 1, !tbaa !2452
  %603 = load <2 x float>, <2 x float>* %2196, align 1
  %604 = extractelement <2 x float> %603, i32 0
  %605 = fpext float %604 to double
  %606 = fdiv double %605, %600
  store double %606, double* %215, align 1, !tbaa !2454
  %607 = bitcast double %600 to <2 x i32>
  %608 = fptrunc double %606 to float
  store float %608, float* %2651, align 1, !tbaa !2452
  %609 = extractelement <2 x i32> %607, i32 1
  store i32 %609, i32* %2668, align 1, !tbaa !2452
  store i32 0, i32* %2669, align 1, !tbaa !2452
  store i32 0, i32* %2670, align 1, !tbaa !2452
  %610 = load <2 x float>, <2 x float>* %2657, align 1
  %611 = extractelement <2 x float> %610, i32 0
  store float %611, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %612 = load i64, i64* @stderr, align 64
  store i64 %612, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %613 = add i64 %726, -4758
  %614 = add i64 %726, 66
  %615 = load i64, i64* %15, align 8, !tbaa !2428
  %616 = add i64 %615, -8
  %617 = inttoptr i64 %616 to i64*
  store i64 %614, i64* %617, align 8
  store i64 %616, i64* %15, align 8, !tbaa !2428
  store i64 %613, i64* %78, align 8, !tbaa !2428
  %618 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %619 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %620 = load i64, i64* %RBP, align 8
  %621 = add i64 %620, -996
  %622 = load i32, i32* %EAX, align 4
  %623 = add i64 %619, 8
  store i64 %623, i64* %PC, align 8
  %624 = inttoptr i64 %621 to i32*
  store i32 %622, i32* %624, align 4
  %625 = load i32, i32* %ECX, align 4
  %626 = zext i32 %625 to i64
  %627 = load i64, i64* %PC, align 8
  store i64 %626, i64* %RAX, align 8, !tbaa !2428
  %628 = load i64, i64* %RSP, align 8
  %629 = add i64 %628, 1008
  store i64 %629, i64* %RSP, align 8, !tbaa !2428
  %630 = icmp ugt i64 %628, -1009
  %631 = zext i1 %630 to i8
  store i8 %631, i8* %21, align 1, !tbaa !2432
  %632 = trunc i64 %629 to i32
  %633 = and i32 %632, 255
  %634 = tail call i32 @llvm.ctpop.i32(i32 %633) #8
  %635 = trunc i32 %634 to i8
  %636 = and i8 %635, 1
  %637 = xor i8 %636, 1
  store i8 %637, i8* %22, align 1, !tbaa !2446
  %638 = xor i64 %628, 16
  %639 = xor i64 %638, %629
  %640 = lshr i64 %639, 4
  %641 = trunc i64 %640 to i8
  %642 = and i8 %641, 1
  store i8 %642, i8* %23, align 1, !tbaa !2450
  %643 = icmp eq i64 %629, 0
  %644 = zext i1 %643 to i8
  store i8 %644, i8* %24, align 1, !tbaa !2447
  %645 = lshr i64 %629, 63
  %646 = trunc i64 %645 to i8
  store i8 %646, i8* %25, align 1, !tbaa !2448
  %647 = lshr i64 %628, 63
  %648 = xor i64 %645, %647
  %649 = add nuw nsw i64 %648, %645
  %650 = icmp eq i64 %649, 2
  %651 = zext i1 %650 to i8
  store i8 %651, i8* %26, align 1, !tbaa !2449
  %652 = add i64 %627, 10
  store i64 %652, i64* %PC, align 8
  %653 = add i64 %628, 1016
  %654 = inttoptr i64 %629 to i64*
  %655 = load i64, i64* %654, align 8
  store i64 %655, i64* %RBP, align 8, !tbaa !2428
  store i64 %653, i64* %15, align 8, !tbaa !2428
  %656 = add i64 %627, 11
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %653 to i64*
  %658 = load i64, i64* %657, align 8
  store i64 %658, i64* %78, align 8, !tbaa !2428
  %659 = add i64 %628, 1024
  store i64 %659, i64* %15, align 8, !tbaa !2428
  ret %struct.Memory* %618

block_400aee:                                     ; preds = %block_400ab0, %block_400ac6
  %660 = phi i64 [ %1541, %block_400ab0 ], [ %.pre16, %block_400ac6 ]
  %661 = load i64, i64* %RBP, align 8
  %662 = add i64 %661, -904
  %663 = add i64 %660, 8
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to double*
  %665 = load double, double* %664, align 8
  %666 = bitcast double %665 to <2 x i32>
  %667 = fptrunc double %665 to float
  store float %667, float* %29, align 1, !tbaa !2452
  %668 = extractelement <2 x i32> %666, i32 1
  store i32 %668, i32* %262, align 1, !tbaa !2452
  store i32 0, i32* %264, align 1, !tbaa !2452
  store i32 0, i32* %266, align 1, !tbaa !2452
  %669 = add i64 %661, -24
  %670 = add i64 %660, 17
  store i64 %670, i64* %PC, align 8
  %671 = load <2 x float>, <2 x float>* %62, align 1
  %672 = extractelement <2 x float> %671, i32 0
  %673 = inttoptr i64 %669 to float*
  store float %672, float* %673, align 4
  %674 = load i64, i64* %PC, align 8
  %675 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %676 = add i32 %675, 1
  %677 = zext i32 %676 to i64
  store i64 %677, i64* %RAX, align 8, !tbaa !2428
  %678 = icmp eq i32 %675, -1
  %679 = icmp eq i32 %676, 0
  %680 = or i1 %678, %679
  %681 = zext i1 %680 to i8
  store i8 %681, i8* %21, align 1, !tbaa !2432
  %682 = and i32 %676, 255
  %683 = tail call i32 @llvm.ctpop.i32(i32 %682) #8
  %684 = trunc i32 %683 to i8
  %685 = and i8 %684, 1
  %686 = xor i8 %685, 1
  store i8 %686, i8* %22, align 1, !tbaa !2446
  %687 = xor i32 %675, %676
  %688 = lshr i32 %687, 4
  %689 = trunc i32 %688 to i8
  %690 = and i8 %689, 1
  store i8 %690, i8* %23, align 1, !tbaa !2450
  %691 = icmp eq i32 %676, 0
  %692 = zext i1 %691 to i8
  store i8 %692, i8* %24, align 1, !tbaa !2447
  %693 = lshr i32 %676, 31
  %694 = trunc i32 %693 to i8
  store i8 %694, i8* %25, align 1, !tbaa !2448
  %695 = lshr i32 %675, 31
  %696 = xor i32 %693, %695
  %697 = add nuw nsw i32 %696, %693
  %698 = icmp eq i32 %697, 2
  %699 = zext i1 %698 to i8
  store i8 %699, i8* %26, align 1, !tbaa !2449
  store i32 %676, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %700 = add i64 %674, -280
  store i64 %700, i64* %78, align 8, !tbaa !2428
  br label %block_4009e7

block_4014d7:                                     ; preds = %block_401622, %block_4013ec
  %701 = phi i32 [ %.pre27, %block_4013ec ], [ %1849, %block_401622 ]
  %702 = phi i64 [ %.pre26, %block_4013ec ], [ %1873, %block_401622 ]
  %MEMORY.1 = phi %struct.Memory* [ %1322, %block_4013ec ], [ %1846, %block_401622 ]
  %703 = add i32 %701, -12
  %704 = icmp ult i32 %701, 12
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %21, align 1, !tbaa !2432
  %706 = and i32 %703, 255
  %707 = tail call i32 @llvm.ctpop.i32(i32 %706) #8
  %708 = trunc i32 %707 to i8
  %709 = and i8 %708, 1
  %710 = xor i8 %709, 1
  store i8 %710, i8* %22, align 1, !tbaa !2446
  %711 = xor i32 %701, %703
  %712 = lshr i32 %711, 4
  %713 = trunc i32 %712 to i8
  %714 = and i8 %713, 1
  store i8 %714, i8* %23, align 1, !tbaa !2450
  %715 = icmp eq i32 %703, 0
  %716 = zext i1 %715 to i8
  store i8 %716, i8* %24, align 1, !tbaa !2447
  %717 = lshr i32 %703, 31
  %718 = trunc i32 %717 to i8
  store i8 %718, i8* %25, align 1, !tbaa !2448
  %719 = lshr i32 %701, 31
  %720 = xor i32 %717, %719
  %721 = add nuw nsw i32 %720, %719
  %722 = icmp eq i32 %721, 2
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %26, align 1, !tbaa !2449
  %724 = icmp ne i8 %718, 0
  %725 = xor i1 %724, %722
  %.v44 = select i1 %725, i64 14, i64 639
  %726 = add i64 %702, %.v44
  store i64 %726, i64* %78, align 8, !tbaa !2428
  br i1 %725, label %block_4014e5, label %block_401756

block_400951:                                     ; preds = %block_40093d
  %727 = sext i32 %2492 to i64
  store i64 %727, i64* %RAX, align 8, !tbaa !2428
  %728 = shl nsw i64 %727, 2
  %729 = add i64 %728, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %730 = add i64 %2522, 17
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %729 to float*
  %732 = inttoptr i64 %729 to i32*
  %733 = load i32, i32* %732, align 4
  %734 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %733, i32* %734, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  %735 = add i64 %2522, 21
  store i64 %735, i64* %PC, align 8
  %736 = load i64, i64* %3199, align 1
  %737 = trunc i64 %736 to i32
  store i32 %737, i32* %3201, align 1, !tbaa !2451
  store i32 0, i32* %3202, align 1, !tbaa !2451
  %738 = load i64, i64* %RCX, align 8
  %739 = and i64 %738, 4294967295
  %740 = xor i64 %739, 2147483648
  store i64 %740, i64* %RCX, align 8, !tbaa !2428
  %741 = trunc i64 %740 to i32
  store i32 %741, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %742 = add i64 %2522, 48
  store i64 %742, i64* %PC, align 8
  %743 = load <2 x float>, <2 x float>* %62, align 1
  %744 = extractelement <2 x float> %743, i32 0
  store float %744, float* %731, align 4
  %745 = load i64, i64* %PC, align 8
  %746 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %747 = add i32 %746, 1
  %748 = zext i32 %747 to i64
  store i64 %748, i64* %RAX, align 8, !tbaa !2428
  %749 = icmp eq i32 %746, -1
  %750 = icmp eq i32 %747, 0
  %751 = or i1 %749, %750
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %21, align 1, !tbaa !2432
  %753 = and i32 %747, 255
  %754 = tail call i32 @llvm.ctpop.i32(i32 %753) #8
  %755 = trunc i32 %754 to i8
  %756 = and i8 %755, 1
  %757 = xor i8 %756, 1
  store i8 %757, i8* %22, align 1, !tbaa !2446
  %758 = xor i32 %746, %747
  %759 = lshr i32 %758, 4
  %760 = trunc i32 %759 to i8
  %761 = and i8 %760, 1
  store i8 %761, i8* %23, align 1, !tbaa !2450
  %762 = icmp eq i32 %747, 0
  %763 = zext i1 %762 to i8
  store i8 %763, i8* %24, align 1, !tbaa !2447
  %764 = lshr i32 %747, 31
  %765 = trunc i32 %764 to i8
  store i8 %765, i8* %25, align 1, !tbaa !2448
  %766 = lshr i32 %746, 31
  %767 = xor i32 %764, %766
  %768 = add nuw nsw i32 %767, %764
  %769 = icmp eq i32 %768, 2
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %26, align 1, !tbaa !2449
  store i32 %747, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %771 = add i64 %745, -68
  store i64 %771, i64* %78, align 8, !tbaa !2428
  br label %block_40093d

block_400fcb:                                     ; preds = %block_400fbc
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %.pre23 = load i64, i64* @stderr, align 64
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %21, align 1, !tbaa !2432
  store i8 1, i8* %22, align 1, !tbaa !2446
  store i8 1, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  store i8 0, i8* %23, align 1, !tbaa !2450
  store i64 %.pre23, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %772 = add i64 %1405, -2827
  %773 = add i64 %1405, 63
  %774 = load i64, i64* %15, align 8, !tbaa !2428
  %775 = add i64 %774, -8
  %776 = inttoptr i64 %775 to i64*
  store i64 %773, i64* %776, align 8
  store i64 %775, i64* %15, align 8, !tbaa !2428
  store i64 %772, i64* %78, align 8, !tbaa !2428
  %777 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %521)
  %778 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %779 = load i64, i64* @stderr, align 64
  store i64 %779, i64* %RDI, align 8, !tbaa !2428
  %780 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %781 = zext i32 %780 to i64
  store i64 %781, i64* %RDX, align 8, !tbaa !2428
  %782 = load i64, i64* %RBP, align 8
  %783 = add i64 %782, -956
  %784 = load i32, i32* %EAX, align 4
  %785 = add i64 %778, 31
  store i64 %785, i64* %PC, align 8
  %786 = inttoptr i64 %783 to i32*
  store i32 %784, i32* %786, align 4
  %787 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %788 = add i64 %787, -2921
  %789 = add i64 %787, 7
  %790 = load i64, i64* %15, align 8, !tbaa !2428
  %791 = add i64 %790, -8
  %792 = inttoptr i64 %791 to i64*
  store i64 %789, i64* %792, align 8
  store i64 %791, i64* %15, align 8, !tbaa !2428
  store i64 %788, i64* %78, align 8, !tbaa !2428
  %793 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %777)
  %794 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %795 = load i64, i64* @stderr, align 64
  store i64 %795, i64* %RDI, align 8, !tbaa !2428
  %796 = load i64, i64* %RBP, align 8
  %797 = add i64 %796, -960
  %798 = load i32, i32* %EAX, align 4
  %799 = add i64 %794, 24
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %797 to i32*
  store i32 %798, i32* %800, align 4
  %801 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %802 = add i64 %801, -2952
  %803 = add i64 %801, 7
  %804 = load i64, i64* %15, align 8, !tbaa !2428
  %805 = add i64 %804, -8
  %806 = inttoptr i64 %805 to i64*
  store i64 %803, i64* %806, align 8
  store i64 %805, i64* %15, align 8, !tbaa !2428
  store i64 %802, i64* %78, align 8, !tbaa !2428
  %807 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %793)
  %808 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %809 = load i64, i64* @stderr, align 64
  store i64 %809, i64* %RDI, align 8, !tbaa !2428
  %810 = load i64, i64* %RBP, align 8
  %811 = add i64 %810, -964
  %812 = load i32, i32* %EAX, align 4
  %813 = add i64 %808, 24
  store i64 %813, i64* %PC, align 8
  %814 = inttoptr i64 %811 to i32*
  store i32 %812, i32* %814, align 4
  %815 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %816 = add i64 %815, -2983
  %817 = add i64 %815, 7
  %818 = load i64, i64* %15, align 8, !tbaa !2428
  %819 = add i64 %818, -8
  %820 = inttoptr i64 %819 to i64*
  store i64 %817, i64* %820, align 8
  store i64 %819, i64* %15, align 8, !tbaa !2428
  store i64 %816, i64* %78, align 8, !tbaa !2428
  %821 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %807)
  %822 = load i64, i64* %PC, align 8
  store i32 0, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %823 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDX, align 8, !tbaa !2428
  %825 = load <2 x i32>, <2 x i32>* %1965, align 1
  %826 = load <2 x i32>, <2 x i32>* %1967, align 1
  %827 = sitofp i32 %823 to float
  store float %827, float* %2651, align 1, !tbaa !2452
  %828 = extractelement <2 x i32> %825, i32 1
  store i32 %828, i32* %2668, align 1, !tbaa !2452
  %829 = extractelement <2 x i32> %826, i32 0
  store i32 %829, i32* %2669, align 1, !tbaa !2452
  %830 = extractelement <2 x i32> %826, i32 1
  store i32 %830, i32* %2670, align 1, !tbaa !2452
  %831 = load i64, i64* %RBP, align 8
  %832 = add i64 %831, -72
  %833 = add i64 %822, 19
  store i64 %833, i64* %PC, align 8
  %834 = bitcast %union.VectorReg* %9 to <2 x float>*
  %835 = load <2 x float>, <2 x float>* %834, align 1
  %836 = load <2 x i32>, <2 x i32>* %1967, align 1
  %837 = inttoptr i64 %832 to float*
  %838 = load float, float* %837, align 4
  %839 = extractelement <2 x float> %835, i32 0
  %840 = fmul float %839, %838
  store float %840, float* %2651, align 1, !tbaa !2452
  %841 = bitcast <2 x float> %835 to <2 x i32>
  %842 = extractelement <2 x i32> %841, i32 1
  store i32 %842, i32* %2668, align 1, !tbaa !2452
  %843 = extractelement <2 x i32> %836, i32 0
  store i32 %843, i32* %2669, align 1, !tbaa !2452
  %844 = extractelement <2 x i32> %836, i32 1
  store i32 %844, i32* %2670, align 1, !tbaa !2452
  %845 = add i64 %831, -44
  %846 = add i64 %822, 24
  store i64 %846, i64* %PC, align 8
  %847 = load <2 x float>, <2 x float>* %2657, align 1
  %848 = extractelement <2 x float> %847, i32 0
  %849 = inttoptr i64 %845 to float*
  store float %848, float* %849, align 4
  %850 = load i64, i64* %PC, align 8
  %851 = load <2 x float>, <2 x float>* %62, align 1
  %852 = extractelement <2 x float> %851, i32 0
  store float %852, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %853 = load i64, i64* %RBP, align 8
  %854 = add i64 %853, -968
  %855 = load i32, i32* %EAX, align 4
  %856 = add i64 %850, 26
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %854 to i32*
  store i32 %855, i32* %857, align 4
  %858 = bitcast i64* %2661 to double*
  %859 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %860 = bitcast i64* %223 to <2 x i32>*
  %.pre24 = load i64, i64* %PC, align 8
  %.pre25 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  br label %block_4010a0

block_401149:                                     ; preds = %block_4010c3
  %861 = add i64 %1436, -2953
  %862 = add i64 %1436, 5
  %863 = load i64, i64* %15, align 8, !tbaa !2428
  %864 = add i64 %863, -8
  %865 = inttoptr i64 %864 to i64*
  store i64 %862, i64* %865, align 8
  store i64 %864, i64* %15, align 8, !tbaa !2428
  store i64 %861, i64* %78, align 8, !tbaa !2428
  %866 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %861, %struct.Memory* %MEMORY.4)
  %867 = load i64, i64* %RBP, align 8
  %868 = add i64 %867, -40
  %869 = load i64, i64* %PC, align 8
  %870 = add i64 %869, 5
  store i64 %870, i64* %PC, align 8
  %871 = load <2 x float>, <2 x float>* %326, align 1
  %872 = load <2 x i32>, <2 x i32>* %259, align 1
  %873 = inttoptr i64 %868 to float*
  %874 = load float, float* %873, align 4
  %875 = extractelement <2 x float> %871, i32 0
  %876 = fsub float %875, %874
  store float %876, float* %29, align 1, !tbaa !2452
  %877 = bitcast <2 x float> %871 to <2 x i32>
  %878 = extractelement <2 x i32> %877, i32 1
  store i32 %878, i32* %262, align 1, !tbaa !2452
  %879 = extractelement <2 x i32> %872, i32 0
  store i32 %879, i32* %264, align 1, !tbaa !2452
  %880 = extractelement <2 x i32> %872, i32 1
  store i32 %880, i32* %266, align 1, !tbaa !2452
  %881 = add i64 %867, -44
  %882 = add i64 %869, 10
  store i64 %882, i64* %PC, align 8
  %883 = load <2 x float>, <2 x float>* %326, align 1
  %884 = load <2 x i32>, <2 x i32>* %259, align 1
  %885 = inttoptr i64 %881 to float*
  %886 = load float, float* %885, align 4
  %887 = extractelement <2 x float> %883, i32 0
  %888 = fsub float %887, %886
  store float %888, float* %29, align 1, !tbaa !2452
  %889 = bitcast <2 x float> %883 to <2 x i32>
  %890 = extractelement <2 x i32> %889, i32 1
  store i32 %890, i32* %262, align 1, !tbaa !2452
  %891 = extractelement <2 x i32> %884, i32 0
  store i32 %891, i32* %264, align 1, !tbaa !2452
  %892 = extractelement <2 x i32> %884, i32 1
  store i32 %892, i32* %266, align 1, !tbaa !2452
  %893 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %894 = zext i32 %893 to i64
  store i64 %894, i64* %RAX, align 8, !tbaa !2428
  %895 = load <2 x i32>, <2 x i32>* %1965, align 1
  %896 = load <2 x i32>, <2 x i32>* %1967, align 1
  %897 = sitofp i32 %893 to float
  store float %897, float* %2651, align 1, !tbaa !2452
  %898 = extractelement <2 x i32> %895, i32 1
  store i32 %898, i32* %2668, align 1, !tbaa !2452
  %899 = extractelement <2 x i32> %896, i32 0
  store i32 %899, i32* %2669, align 1, !tbaa !2452
  %900 = extractelement <2 x i32> %896, i32 1
  store i32 %900, i32* %2670, align 1, !tbaa !2452
  %901 = load <2 x float>, <2 x float>* %326, align 1
  %902 = load <2 x i32>, <2 x i32>* %259, align 1
  %903 = load <2 x float>, <2 x float>* %2657, align 1
  %904 = extractelement <2 x float> %901, i32 0
  %905 = extractelement <2 x float> %903, i32 0
  %906 = fdiv float %904, %905
  store float %906, float* %29, align 1, !tbaa !2452
  %907 = bitcast <2 x float> %901 to <2 x i32>
  %908 = extractelement <2 x i32> %907, i32 1
  store i32 %908, i32* %262, align 1, !tbaa !2452
  %909 = extractelement <2 x i32> %902, i32 0
  store i32 %909, i32* %264, align 1, !tbaa !2452
  %910 = extractelement <2 x i32> %902, i32 1
  store i32 %910, i32* %266, align 1, !tbaa !2452
  %911 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %912 = sext i32 %911 to i64
  store i64 %912, i64* %RCX, align 8, !tbaa !2428
  %913 = shl nsw i64 %912, 2
  %914 = add i64 %913, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %915 = add i64 %869, 42
  store i64 %915, i64* %PC, align 8
  %916 = load <2 x float>, <2 x float>* %62, align 1
  %917 = extractelement <2 x float> %916, i32 0
  %918 = inttoptr i64 %914 to float*
  store float %917, float* %918, align 4
  %919 = load i64, i64* %PC, align 8
  %920 = add i64 %919, -3000
  %921 = add i64 %919, 5
  %922 = load i64, i64* %15, align 8, !tbaa !2428
  %923 = add i64 %922, -8
  %924 = inttoptr i64 %923 to i64*
  store i64 %921, i64* %924, align 8
  store i64 %923, i64* %15, align 8, !tbaa !2428
  store i64 %920, i64* %78, align 8, !tbaa !2428
  %925 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %920, %struct.Memory* %866)
  %926 = load i64, i64* %RBP, align 8
  %927 = add i64 %926, -40
  %928 = load i64, i64* %PC, align 8
  %929 = add i64 %928, 5
  store i64 %929, i64* %PC, align 8
  %930 = load <2 x float>, <2 x float>* %62, align 1
  %931 = extractelement <2 x float> %930, i32 0
  %932 = inttoptr i64 %927 to float*
  store float %931, float* %932, align 4
  %933 = load i64, i64* %PC, align 8
  %934 = add i64 %933, 11
  store i64 %934, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40118d

block_4011eb:                                     ; preds = %block_40118d
  %935 = add i64 %2961, -3115
  %936 = add i64 %2961, 5
  %937 = load i64, i64* %15, align 8, !tbaa !2428
  %938 = add i64 %937, -8
  %939 = inttoptr i64 %938 to i64*
  store i64 %936, i64* %939, align 8
  store i64 %938, i64* %15, align 8, !tbaa !2428
  store i64 %935, i64* %78, align 8, !tbaa !2428
  %940 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %935, %struct.Memory* %MEMORY.16)
  %941 = load i64, i64* %PC, align 8
  %942 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to i64*), align 8
  %943 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %942, i64* %943, align 1, !tbaa !2454
  store double 0.000000e+00, double* %203, align 1, !tbaa !2454
  %944 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to i64*), align 8
  %945 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %944, i64* %945, align 1, !tbaa !2454
  store double 0.000000e+00, double* %858, align 1, !tbaa !2454
  %946 = load i64, i64* %RBP, align 8
  %947 = add i64 %946, -40
  %948 = add i64 %941, 21
  store i64 %948, i64* %PC, align 8
  %949 = load <2 x float>, <2 x float>* %326, align 1
  %950 = load <2 x i32>, <2 x i32>* %259, align 1
  %951 = inttoptr i64 %947 to float*
  %952 = load float, float* %951, align 4
  %953 = extractelement <2 x float> %949, i32 0
  %954 = fsub float %953, %952
  store float %954, float* %29, align 1, !tbaa !2452
  %955 = bitcast <2 x float> %949 to <2 x i32>
  %956 = extractelement <2 x i32> %955, i32 1
  store i32 %956, i32* %262, align 1, !tbaa !2452
  %957 = extractelement <2 x i32> %950, i32 0
  store i32 %957, i32* %264, align 1, !tbaa !2452
  %958 = extractelement <2 x i32> %950, i32 1
  store i32 %958, i32* %266, align 1, !tbaa !2452
  %959 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %960 = zext i32 %959 to i64
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = load <2 x i32>, <2 x i32>* %859, align 1
  %962 = load <2 x i32>, <2 x i32>* %860, align 1
  %963 = sitofp i32 %959 to float
  store float %963, float* %2342, align 1, !tbaa !2452
  %964 = extractelement <2 x i32> %961, i32 1
  store i32 %964, i32* %222, align 1, !tbaa !2452
  %965 = extractelement <2 x i32> %962, i32 0
  store i32 %965, i32* %224, align 1, !tbaa !2452
  %966 = extractelement <2 x i32> %962, i32 1
  store i32 %966, i32* %226, align 1, !tbaa !2452
  %967 = load <2 x float>, <2 x float>* %326, align 1
  %968 = load <2 x i32>, <2 x i32>* %259, align 1
  %969 = load <2 x float>, <2 x float>* %2347, align 1
  %970 = extractelement <2 x float> %967, i32 0
  %971 = extractelement <2 x float> %969, i32 0
  %972 = fdiv float %970, %971
  store float %972, float* %29, align 1, !tbaa !2452
  %973 = bitcast <2 x float> %967 to <2 x i32>
  %974 = extractelement <2 x i32> %973, i32 1
  store i32 %974, i32* %262, align 1, !tbaa !2452
  %975 = extractelement <2 x i32> %968, i32 0
  store i32 %975, i32* %264, align 1, !tbaa !2452
  %976 = extractelement <2 x i32> %968, i32 1
  store i32 %976, i32* %266, align 1, !tbaa !2452
  %977 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %978 = sext i32 %977 to i64
  %979 = shl nsw i64 %978, 2
  %980 = add i64 %979, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %981 = add i64 %941, 53
  store i64 %981, i64* %PC, align 8
  %982 = load <2 x float>, <2 x float>* %62, align 1
  %983 = extractelement <2 x float> %982, i32 0
  %984 = inttoptr i64 %980 to float*
  store float %983, float* %984, align 4
  %985 = load i64, i64* %PC, align 8
  %986 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %987 = sext i32 %986 to i64
  store i64 %987, i64* %RCX, align 8, !tbaa !2428
  %988 = shl nsw i64 %987, 2
  %989 = add i64 %988, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %990 = add i64 %985, 17
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i32*
  %992 = load i32, i32* %991, align 4
  %993 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %992, i32* %993, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  store i64 %987, i64* %RCX, align 8, !tbaa !2428
  %994 = add i64 %988, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %995 = add i64 %985, 34
  store i64 %995, i64* %PC, align 8
  %996 = load <2 x float>, <2 x float>* %326, align 1
  %997 = load <2 x i32>, <2 x i32>* %259, align 1
  %998 = inttoptr i64 %994 to float*
  %999 = load float, float* %998, align 4
  %1000 = extractelement <2 x float> %996, i32 0
  %1001 = fadd float %1000, %999
  store float %1001, float* %29, align 1, !tbaa !2452
  %1002 = bitcast <2 x float> %996 to <2 x i32>
  %1003 = extractelement <2 x i32> %1002, i32 1
  store i32 %1003, i32* %262, align 1, !tbaa !2452
  %1004 = extractelement <2 x i32> %997, i32 0
  store i32 %1004, i32* %264, align 1, !tbaa !2452
  %1005 = extractelement <2 x i32> %997, i32 1
  store i32 %1005, i32* %266, align 1, !tbaa !2452
  %1006 = load i64, i64* %RBP, align 8
  %1007 = add i64 %1006, -16
  %1008 = add i64 %985, 39
  store i64 %1008, i64* %PC, align 8
  %1009 = load <2 x float>, <2 x float>* %62, align 1
  %1010 = extractelement <2 x float> %1009, i32 0
  %1011 = inttoptr i64 %1007 to float*
  store float %1010, float* %1011, align 4
  %1012 = load i64, i64* %RBP, align 8
  %1013 = add i64 %1012, -16
  %1014 = load i64, i64* %PC, align 8
  %1015 = add i64 %1014, 5
  store i64 %1015, i64* %PC, align 8
  %1016 = inttoptr i64 %1013 to i32*
  %1017 = load i32, i32* %1016, align 4
  %1018 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1017, i32* %1018, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1019 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1020 = sext i32 %1019 to i64
  store i64 %1020, i64* %RCX, align 8, !tbaa !2428
  %1021 = shl nsw i64 %1020, 2
  %1022 = add i64 %1021, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1023 = add i64 %1014, 22
  store i64 %1023, i64* %PC, align 8
  %1024 = load <2 x float>, <2 x float>* %62, align 1
  %1025 = extractelement <2 x float> %1024, i32 0
  %1026 = inttoptr i64 %1022 to float*
  store float %1025, float* %1026, align 4
  %1027 = load i64, i64* %RBP, align 8
  %1028 = add i64 %1027, -12
  %1029 = load i64, i64* %PC, align 8
  %1030 = add i64 %1029, 5
  store i64 %1030, i64* %PC, align 8
  %1031 = inttoptr i64 %1028 to i32*
  %1032 = load i32, i32* %1031, align 4
  %1033 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1032, i32* %1033, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1034 = load <2 x float>, <2 x float>* %62, align 1
  %1035 = extractelement <2 x float> %1034, i32 0
  %1036 = fpext float %1035 to double
  store double %1036, double* %196, align 1, !tbaa !2454
  %1037 = add i64 %1027, -16
  %1038 = add i64 %1029, 14
  store i64 %1038, i64* %PC, align 8
  %1039 = inttoptr i64 %1037 to i32*
  %1040 = load i32, i32* %1039, align 4
  %1041 = bitcast %union.VectorReg* %11 to i32*
  store i32 %1040, i32* %1041, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2344, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2345, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2346, align 1, !tbaa !2452
  %1042 = load <2 x float>, <2 x float>* %2347, align 1
  %1043 = extractelement <2 x float> %1042, i32 0
  %1044 = fpext float %1043 to double
  store double %1044, double* %227, align 1, !tbaa !2454
  %1045 = load double, double* %215, align 1
  %1046 = fmul double %1045, %1044
  store double %1046, double* %215, align 1, !tbaa !2454
  %1047 = bitcast i64* %33 to <2 x i32>*
  %1048 = load <2 x i32>, <2 x i32>* %1047, align 1
  %1049 = fdiv double %1036, %1046
  %1050 = bitcast double %1049 to <2 x i32>
  %1051 = fptrunc double %1049 to float
  store float %1051, float* %29, align 1, !tbaa !2452
  %1052 = extractelement <2 x i32> %1050, i32 1
  store i32 %1052, i32* %262, align 1, !tbaa !2452
  %1053 = extractelement <2 x i32> %1048, i32 0
  store i32 %1053, i32* %264, align 1, !tbaa !2452
  %1054 = extractelement <2 x i32> %1048, i32 1
  store i32 %1054, i32* %266, align 1, !tbaa !2452
  %1055 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1056 = sext i32 %1055 to i64
  %1057 = shl nsw i64 %1056, 2
  %1058 = add i64 %1057, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1059 = add i64 %1029, 47
  store i64 %1059, i64* %PC, align 8
  %1060 = load <2 x float>, <2 x float>* %62, align 1
  %1061 = extractelement <2 x float> %1060, i32 0
  %1062 = inttoptr i64 %1058 to float*
  store float %1061, float* %1062, align 4
  %1063 = load i64, i64* %PC, align 8
  %1064 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1065 = sext i32 %1064 to i64
  store i64 %1065, i64* %RCX, align 8, !tbaa !2428
  %1066 = shl nsw i64 %1065, 2
  %1067 = add i64 %1066, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1068 = add i64 %1063, 17
  store i64 %1068, i64* %PC, align 8
  %1069 = inttoptr i64 %1067 to i32*
  %1070 = load i32, i32* %1069, align 4
  %1071 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1070, i32* %1071, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1072 = load <2 x float>, <2 x float>* %62, align 1
  %1073 = extractelement <2 x float> %1072, i32 0
  %1074 = fpext float %1073 to double
  %1075 = load double, double* %200, align 1
  %1076 = fdiv double %1075, %1074
  store double %1076, double* %200, align 1, !tbaa !2454
  %1077 = bitcast double %1074 to <2 x i32>
  %1078 = load <2 x i32>, <2 x i32>* %259, align 1
  %1079 = fptrunc double %1076 to float
  store float %1079, float* %29, align 1, !tbaa !2452
  %1080 = extractelement <2 x i32> %1077, i32 1
  store i32 %1080, i32* %262, align 1, !tbaa !2452
  %1081 = extractelement <2 x i32> %1078, i32 0
  store i32 %1081, i32* %264, align 1, !tbaa !2452
  %1082 = extractelement <2 x i32> %1078, i32 1
  store i32 %1082, i32* %266, align 1, !tbaa !2452
  store i64 %1065, i64* %RCX, align 8, !tbaa !2428
  %1083 = add i64 %1066, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1084 = add i64 %1063, 46
  store i64 %1084, i64* %PC, align 8
  %1085 = load <2 x float>, <2 x float>* %62, align 1
  %1086 = extractelement <2 x float> %1085, i32 0
  %1087 = inttoptr i64 %1083 to float*
  store float %1086, float* %1087, align 4
  %1088 = load i64, i64* %RBP, align 8
  %1089 = add i64 %1088, -16
  %1090 = load i64, i64* %PC, align 8
  %1091 = add i64 %1090, 5
  store i64 %1091, i64* %PC, align 8
  %1092 = inttoptr i64 %1089 to i32*
  %1093 = load i32, i32* %1092, align 4
  %1094 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1093, i32* %1094, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1095 = add i64 %1088, -8
  %1096 = add i64 %1090, 10
  store i64 %1096, i64* %PC, align 8
  %1097 = load <2 x float>, <2 x float>* %326, align 1
  %1098 = inttoptr i64 %1095 to float*
  %1099 = load float, float* %1098, align 4
  %1100 = extractelement <2 x float> %1097, i32 0
  %1101 = fdiv float %1100, %1099
  store float %1101, float* %29, align 1, !tbaa !2452
  %1102 = bitcast <2 x float> %1097 to <2 x i32>
  %1103 = extractelement <2 x i32> %1102, i32 1
  store i32 %1103, i32* %262, align 1, !tbaa !2452
  %1104 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1105 = sext i32 %1104 to i64
  %1106 = shl nsw i64 %1105, 2
  %1107 = add i64 %1106, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1108 = add i64 %1090, 27
  store i64 %1108, i64* %PC, align 8
  %1109 = load <2 x float>, <2 x float>* %62, align 1
  %1110 = extractelement <2 x float> %1109, i32 0
  %1111 = inttoptr i64 %1107 to float*
  store float %1110, float* %1111, align 4
  %1112 = load i64, i64* %PC, align 8
  %1113 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  %1114 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1113, i32* %1114, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1115 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1116 = sext i32 %1115 to i64
  store i64 %1116, i64* %RCX, align 8, !tbaa !2428
  %1117 = shl nsw i64 %1116, 2
  %1118 = add i64 %1117, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1119 = add i64 %1112, 26
  store i64 %1119, i64* %PC, align 8
  %1120 = load <2 x float>, <2 x float>* %326, align 1
  %1121 = load <2 x i32>, <2 x i32>* %259, align 1
  %1122 = inttoptr i64 %1118 to float*
  %1123 = load float, float* %1122, align 4
  %1124 = extractelement <2 x float> %1120, i32 0
  %1125 = fadd float %1124, %1123
  store float %1125, float* %29, align 1, !tbaa !2452
  %1126 = bitcast <2 x float> %1120 to <2 x i32>
  %1127 = extractelement <2 x i32> %1126, i32 1
  store i32 %1127, i32* %262, align 1, !tbaa !2452
  %1128 = extractelement <2 x i32> %1121, i32 0
  store i32 %1128, i32* %264, align 1, !tbaa !2452
  %1129 = extractelement <2 x i32> %1121, i32 1
  store i32 %1129, i32* %266, align 1, !tbaa !2452
  %1130 = load <2 x float>, <2 x float>* %62, align 1
  %1131 = extractelement <2 x float> %1130, i32 0
  store float %1131, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %1132 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1133 = zext i32 %1132 to i64
  store i64 %1133, i64* %RDI, align 8, !tbaa !2428
  %1134 = add i64 %1112, 5622
  %1135 = add i64 %1112, 47
  %1136 = load i64, i64* %15, align 8, !tbaa !2428
  %1137 = add i64 %1136, -8
  %1138 = inttoptr i64 %1137 to i64*
  store i64 %1135, i64* %1138, align 8
  store i64 %1137, i64* %15, align 8, !tbaa !2428
  store i64 %1134, i64* %78, align 8, !tbaa !2428
  %1139 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1134, %struct.Memory* %940)
  %1140 = load i64, i64* %PC, align 8
  %1141 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1142 = add i32 %1141, 1
  %1143 = zext i32 %1142 to i64
  store i64 %1143, i64* %RAX, align 8, !tbaa !2428
  %1144 = icmp eq i32 %1141, -1
  %1145 = icmp eq i32 %1142, 0
  %1146 = or i1 %1144, %1145
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %21, align 1, !tbaa !2432
  %1148 = and i32 %1142, 255
  %1149 = tail call i32 @llvm.ctpop.i32(i32 %1148) #8
  %1150 = trunc i32 %1149 to i8
  %1151 = and i8 %1150, 1
  %1152 = xor i8 %1151, 1
  store i8 %1152, i8* %22, align 1, !tbaa !2446
  %1153 = xor i32 %1141, %1142
  %1154 = lshr i32 %1153, 4
  %1155 = trunc i32 %1154 to i8
  %1156 = and i8 %1155, 1
  store i8 %1156, i8* %23, align 1, !tbaa !2450
  %1157 = icmp eq i32 %1142, 0
  %1158 = zext i1 %1157 to i8
  store i8 %1158, i8* %24, align 1, !tbaa !2447
  %1159 = lshr i32 %1142, 31
  %1160 = trunc i32 %1159 to i8
  store i8 %1160, i8* %25, align 1, !tbaa !2448
  %1161 = lshr i32 %1141, 31
  %1162 = xor i32 %1159, %1161
  %1163 = add nuw nsw i32 %1162, %1159
  %1164 = icmp eq i32 %1163, 2
  %1165 = zext i1 %1164 to i8
  store i8 %1165, i8* %26, align 1, !tbaa !2449
  store i32 %1142, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1166 = add i64 %1140, -617
  store i64 %1166, i64* %78, align 8, !tbaa !2428
  br label %block_4010a0

block_400ac6:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1167 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1168 = sext i32 %1167 to i64
  store i64 %1168, i64* %RAX, align 8, !tbaa !2428
  %1169 = shl nsw i64 %1168, 2
  %1170 = add i64 %1169, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %1171 = add i64 %3171, 17
  store i64 %1171, i64* %PC, align 8
  %1172 = inttoptr i64 %1170 to i32*
  %1173 = load i32, i32* %1172, align 4
  %1174 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1173, i32* %1174, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1175 = load <2 x float>, <2 x float>* %62, align 1
  %1176 = extractelement <2 x float> %1175, i32 0
  %1177 = fpext float %1176 to double
  %1178 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %1179 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %1180 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %1181 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %1182 = bitcast %union.VectorReg* %9 to i32*
  store i32 %1178, i32* %1182, align 1, !tbaa !2452
  %1183 = bitcast i8* %2652 to i32*
  store i32 %1179, i32* %1183, align 1, !tbaa !2452
  %1184 = bitcast i64* %202 to i32*
  store i32 %1180, i32* %1184, align 1, !tbaa !2452
  %1185 = bitcast i8* %2655 to i32*
  store i32 %1181, i32* %1185, align 1, !tbaa !2452
  %1186 = bitcast double %1177 to i64
  %1187 = load i64, i64* %33, align 1
  %1188 = load i64, i64* %2671, align 1
  %1189 = load i64, i64* %2672, align 1
  %1190 = and i64 %1188, %1186
  %1191 = and i64 %1189, %1187
  %1192 = trunc i64 %1190 to i32
  %1193 = lshr i64 %1190, 32
  %1194 = trunc i64 %1193 to i32
  store i32 %1192, i32* %3203, align 1, !tbaa !2451
  store i32 %1194, i32* %262, align 1, !tbaa !2451
  %1195 = trunc i64 %1191 to i32
  store i32 %1195, i32* %264, align 1, !tbaa !2451
  %1196 = lshr i64 %1191, 32
  %1197 = trunc i64 %1196 to i32
  store i32 %1197, i32* %266, align 1, !tbaa !2451
  %1198 = load i64, i64* %RBP, align 8
  %1199 = add i64 %1198, -904
  %1200 = add i64 %3171, 40
  store i64 %1200, i64* %PC, align 8
  %1201 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1202 = load i64, i64* %1201, align 1
  %1203 = inttoptr i64 %1199 to i64*
  store i64 %1202, i64* %1203, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %block_400aee

block_4013ec:                                     ; preds = %block_40139b
  %1204 = add i64 %2996, -3628
  %1205 = add i64 %2996, 5
  %1206 = load i64, i64* %15, align 8, !tbaa !2428
  %1207 = add i64 %1206, -8
  %1208 = inttoptr i64 %1207 to i64*
  store i64 %1205, i64* %1208, align 8
  store i64 %1207, i64* %15, align 8, !tbaa !2428
  store i64 %1204, i64* %78, align 8, !tbaa !2428
  %1209 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1204, %struct.Memory* %MEMORY.17)
  %1210 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2667, align 1, !tbaa !2451
  store i32 0, i32* %2668, align 1, !tbaa !2451
  store i32 0, i32* %2669, align 1, !tbaa !2451
  store i32 0, i32* %2670, align 1, !tbaa !2451
  %1211 = load i64, i64* %RBP, align 8
  %1212 = add i64 %1211, -84
  %1213 = add i64 %1210, 18
  store i64 %1213, i64* %PC, align 8
  %1214 = load <2 x float>, <2 x float>* %62, align 1
  %1215 = extractelement <2 x float> %1214, i32 0
  %1216 = inttoptr i64 %1212 to float*
  store float %1215, float* %1216, align 4
  %1217 = load i64, i64* %RBP, align 8
  %1218 = add i64 %1217, -84
  %1219 = load i64, i64* %PC, align 8
  %1220 = add i64 %1219, 5
  store i64 %1220, i64* %PC, align 8
  %1221 = inttoptr i64 %1218 to i32*
  %1222 = load i32, i32* %1221, align 4
  %1223 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1222, i32* %1223, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1224 = add i64 %1217, -80
  %1225 = add i64 %1219, 10
  store i64 %1225, i64* %PC, align 8
  %1226 = load <2 x float>, <2 x float>* %326, align 1
  %1227 = load <2 x i32>, <2 x i32>* %259, align 1
  %1228 = inttoptr i64 %1224 to float*
  %1229 = load float, float* %1228, align 4
  %1230 = extractelement <2 x float> %1226, i32 0
  %1231 = fsub float %1230, %1229
  store float %1231, float* %29, align 1, !tbaa !2452
  %1232 = bitcast <2 x float> %1226 to <2 x i32>
  %1233 = extractelement <2 x i32> %1232, i32 1
  store i32 %1233, i32* %262, align 1, !tbaa !2452
  %1234 = extractelement <2 x i32> %1227, i32 0
  store i32 %1234, i32* %264, align 1, !tbaa !2452
  %1235 = extractelement <2 x i32> %1227, i32 1
  store i32 %1235, i32* %266, align 1, !tbaa !2452
  %1236 = add i64 %1217, -76
  %1237 = add i64 %1219, 15
  store i64 %1237, i64* %PC, align 8
  %1238 = load <2 x float>, <2 x float>* %62, align 1
  %1239 = extractelement <2 x float> %1238, i32 0
  %1240 = inttoptr i64 %1236 to float*
  store float %1239, float* %1240, align 4
  %1241 = load i64, i64* %RBP, align 8
  %1242 = add i64 %1241, -76
  %1243 = load i64, i64* %PC, align 8
  %1244 = add i64 %1243, 5
  store i64 %1244, i64* %PC, align 8
  %1245 = inttoptr i64 %1242 to float*
  %1246 = inttoptr i64 %1242 to i32*
  %1247 = load i32, i32* %1246, align 4
  %1248 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1247, i32* %1248, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1249 = load <2 x float>, <2 x float>* %62, align 1
  %1250 = extractelement <2 x float> %1249, i32 0
  %1251 = fpext float %1250 to double
  store double %1251, double* %196, align 1, !tbaa !2454
  %1252 = add i64 %1241, -68
  %1253 = add i64 %1243, 12
  store i64 %1253, i64* %PC, align 8
  %1254 = inttoptr i64 %1252 to i32*
  %1255 = load i32, i32* %1254, align 4
  %1256 = zext i32 %1255 to i64
  store i64 %1256, i64* %RAX, align 8, !tbaa !2428
  %1257 = sitofp i32 %1255 to double
  store double %1257, double* %215, align 1, !tbaa !2454
  %1258 = fdiv double %1251, %1257
  %1259 = bitcast double %1258 to <2 x i32>
  %1260 = fptrunc double %1258 to float
  store float %1260, float* %29, align 1, !tbaa !2452
  %1261 = extractelement <2 x i32> %1259, i32 1
  store i32 %1261, i32* %262, align 1, !tbaa !2452
  %1262 = add i64 %1243, 29
  store i64 %1262, i64* %PC, align 8
  %1263 = load <2 x float>, <2 x float>* %62, align 1
  %1264 = extractelement <2 x float> %1263, i32 0
  store float %1264, float* %1245, align 4
  %1265 = load i64, i64* %PC, align 8
  %1266 = load i64, i64* @stderr, align 64
  store i64 %1266, i64* %RDI, align 8, !tbaa !2428
  %1267 = load <2 x i32>, <2 x i32>* %1526, align 1
  %1268 = load <2 x i32>, <2 x i32>* %1527, align 1
  %1269 = extractelement <2 x i32> %1267, i32 0
  store i32 %1269, i32* %3203, align 1, !tbaa !2452
  %1270 = extractelement <2 x i32> %1267, i32 1
  store i32 %1270, i32* %262, align 1, !tbaa !2452
  %1271 = extractelement <2 x i32> %1268, i32 0
  store i32 %1271, i32* %264, align 1, !tbaa !2452
  %1272 = extractelement <2 x i32> %1268, i32 1
  store i32 %1272, i32* %266, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1273 = add i64 %1265, -3951
  %1274 = add i64 %1265, 18
  %1275 = load i64, i64* %15, align 8, !tbaa !2428
  %1276 = add i64 %1275, -8
  %1277 = inttoptr i64 %1276 to i64*
  store i64 %1274, i64* %1277, align 8
  store i64 %1276, i64* %15, align 8, !tbaa !2428
  store i64 %1273, i64* %78, align 8, !tbaa !2428
  %1278 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1209)
  %1279 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1280 = load i64, i64* @stderr, align 64
  store i64 %1280, i64* %RDI, align 8, !tbaa !2428
  %1281 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1282 = zext i32 %1281 to i64
  store i64 %1282, i64* %RDX, align 8, !tbaa !2428
  %1283 = load i64, i64* %RBP, align 8
  %1284 = add i64 %1283, -980
  %1285 = load i32, i32* %EAX, align 4
  %1286 = add i64 %1279, 31
  store i64 %1286, i64* %PC, align 8
  %1287 = inttoptr i64 %1284 to i32*
  store i32 %1285, i32* %1287, align 4
  %1288 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1289 = add i64 %1288, -4000
  %1290 = add i64 %1288, 7
  %1291 = load i64, i64* %15, align 8, !tbaa !2428
  %1292 = add i64 %1291, -8
  %1293 = inttoptr i64 %1292 to i64*
  store i64 %1290, i64* %1293, align 8
  store i64 %1292, i64* %15, align 8, !tbaa !2428
  store i64 %1289, i64* %78, align 8, !tbaa !2428
  %1294 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1278)
  %1295 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1296 = load i64, i64* @stderr, align 64
  store i64 %1296, i64* %RDI, align 8, !tbaa !2428
  %1297 = load i64, i64* %RBP, align 8
  %1298 = add i64 %1297, -984
  %1299 = load i32, i32* %EAX, align 4
  %1300 = add i64 %1295, 24
  store i64 %1300, i64* %PC, align 8
  %1301 = inttoptr i64 %1298 to i32*
  store i32 %1299, i32* %1301, align 4
  %1302 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1303 = add i64 %1302, -4031
  %1304 = add i64 %1302, 7
  %1305 = load i64, i64* %15, align 8, !tbaa !2428
  %1306 = add i64 %1305, -8
  %1307 = inttoptr i64 %1306 to i64*
  store i64 %1304, i64* %1307, align 8
  store i64 %1306, i64* %15, align 8, !tbaa !2428
  store i64 %1303, i64* %78, align 8, !tbaa !2428
  %1308 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1294)
  %1309 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1310 = load i64, i64* @stderr, align 64
  store i64 %1310, i64* %RDI, align 8, !tbaa !2428
  %1311 = load i64, i64* %RBP, align 8
  %1312 = add i64 %1311, -988
  %1313 = load i32, i32* %EAX, align 4
  %1314 = add i64 %1309, 24
  store i64 %1314, i64* %PC, align 8
  %1315 = inttoptr i64 %1312 to i32*
  store i32 %1313, i32* %1315, align 4
  %1316 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1317 = add i64 %1316, -4062
  %1318 = add i64 %1316, 7
  %1319 = load i64, i64* %15, align 8, !tbaa !2428
  %1320 = add i64 %1319, -8
  %1321 = inttoptr i64 %1320 to i64*
  store i64 %1318, i64* %1321, align 8
  store i64 %1320, i64* %15, align 8, !tbaa !2428
  store i64 %1317, i64* %78, align 8, !tbaa !2428
  %1322 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1308)
  %1323 = load i64, i64* %PC, align 8
  store i32 0, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %1324 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1325 = zext i32 %1324 to i64
  store i64 %1325, i64* %RDX, align 8, !tbaa !2428
  %1326 = load <2 x i32>, <2 x i32>* %1965, align 1
  %1327 = load <2 x i32>, <2 x i32>* %1967, align 1
  %1328 = sitofp i32 %1324 to float
  store float %1328, float* %2651, align 1, !tbaa !2452
  %1329 = extractelement <2 x i32> %1326, i32 1
  store i32 %1329, i32* %2668, align 1, !tbaa !2452
  %1330 = extractelement <2 x i32> %1327, i32 0
  store i32 %1330, i32* %2669, align 1, !tbaa !2452
  %1331 = extractelement <2 x i32> %1327, i32 1
  store i32 %1331, i32* %2670, align 1, !tbaa !2452
  %1332 = load i64, i64* %RBP, align 8
  %1333 = add i64 %1332, -76
  %1334 = add i64 %1323, 19
  store i64 %1334, i64* %PC, align 8
  %1335 = load <2 x float>, <2 x float>* %834, align 1
  %1336 = load <2 x i32>, <2 x i32>* %1967, align 1
  %1337 = inttoptr i64 %1333 to float*
  %1338 = load float, float* %1337, align 4
  %1339 = extractelement <2 x float> %1335, i32 0
  %1340 = fmul float %1339, %1338
  store float %1340, float* %2651, align 1, !tbaa !2452
  %1341 = bitcast <2 x float> %1335 to <2 x i32>
  %1342 = extractelement <2 x i32> %1341, i32 1
  store i32 %1342, i32* %2668, align 1, !tbaa !2452
  %1343 = extractelement <2 x i32> %1336, i32 0
  store i32 %1343, i32* %2669, align 1, !tbaa !2452
  %1344 = extractelement <2 x i32> %1336, i32 1
  store i32 %1344, i32* %2670, align 1, !tbaa !2452
  %1345 = add i64 %1332, -44
  %1346 = add i64 %1323, 24
  store i64 %1346, i64* %PC, align 8
  %1347 = load <2 x float>, <2 x float>* %2657, align 1
  %1348 = extractelement <2 x float> %1347, i32 0
  %1349 = inttoptr i64 %1345 to float*
  store float %1348, float* %1349, align 4
  %1350 = load i64, i64* %PC, align 8
  %1351 = load <2 x float>, <2 x float>* %62, align 1
  %1352 = extractelement <2 x float> %1351, i32 0
  store float %1352, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1353 = load i64, i64* %RBP, align 8
  %1354 = add i64 %1353, -992
  %1355 = load i32, i32* %EAX, align 4
  %1356 = add i64 %1350, 26
  store i64 %1356, i64* %PC, align 8
  %1357 = inttoptr i64 %1354 to i32*
  store i32 %1355, i32* %1357, align 4
  %.pre26 = load i64, i64* %PC, align 8
  %.pre27 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  br label %block_4014d7

block_4015c4:                                     ; preds = %block_401580, %block_4015d8
  %1358 = phi i32 [ 0, %block_401580 ], [ %575, %block_4015d8 ]
  %1359 = phi i64 [ %3315, %block_401580 ], [ %599, %block_4015d8 ]
  %MEMORY.2 = phi %struct.Memory* [ %3306, %block_401580 ], [ %572, %block_4015d8 ]
  %1360 = zext i32 %1358 to i64
  store i64 %1360, i64* %RAX, align 8, !tbaa !2428
  %1361 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1362 = sub i32 %1358, %1361
  %1363 = icmp ult i32 %1358, %1361
  %1364 = zext i1 %1363 to i8
  store i8 %1364, i8* %21, align 1, !tbaa !2432
  %1365 = and i32 %1362, 255
  %1366 = tail call i32 @llvm.ctpop.i32(i32 %1365) #8
  %1367 = trunc i32 %1366 to i8
  %1368 = and i8 %1367, 1
  %1369 = xor i8 %1368, 1
  store i8 %1369, i8* %22, align 1, !tbaa !2446
  %1370 = xor i32 %1361, %1358
  %1371 = xor i32 %1370, %1362
  %1372 = lshr i32 %1371, 4
  %1373 = trunc i32 %1372 to i8
  %1374 = and i8 %1373, 1
  store i8 %1374, i8* %23, align 1, !tbaa !2450
  %1375 = icmp eq i32 %1362, 0
  %1376 = zext i1 %1375 to i8
  store i8 %1376, i8* %24, align 1, !tbaa !2447
  %1377 = lshr i32 %1362, 31
  %1378 = trunc i32 %1377 to i8
  store i8 %1378, i8* %25, align 1, !tbaa !2448
  %1379 = lshr i32 %1358, 31
  %1380 = lshr i32 %1361, 31
  %1381 = xor i32 %1380, %1379
  %1382 = xor i32 %1377, %1379
  %1383 = add nuw nsw i32 %1382, %1381
  %1384 = icmp eq i32 %1383, 2
  %1385 = zext i1 %1384 to i8
  store i8 %1385, i8* %26, align 1, !tbaa !2449
  %1386 = icmp ne i8 %1378, 0
  %1387 = xor i1 %1386, %1384
  %.v46 = select i1 %1387, i64 20, i64 94
  %1388 = add i64 %1359, %.v46
  store i64 %1388, i64* %78, align 8, !tbaa !2428
  br i1 %1387, label %block_4015d8, label %block_401622

block_400fbc:                                     ; preds = %block_400f66, %block_400fab
  %1389 = phi i64 [ %1560, %block_400fab ], [ %547, %block_400f66 ]
  %1390 = load i64, i64* %RBP, align 8
  %1391 = add i64 %1390, -64
  %1392 = add i64 %1389, 9
  store i64 %1392, i64* %PC, align 8
  %1393 = inttoptr i64 %1391 to i32*
  %1394 = load i32, i32* %1393, align 4
  store i8 0, i8* %21, align 1, !tbaa !2432
  %1395 = and i32 %1394, 255
  %1396 = tail call i32 @llvm.ctpop.i32(i32 %1395) #8
  %1397 = trunc i32 %1396 to i8
  %1398 = and i8 %1397, 1
  %1399 = xor i8 %1398, 1
  store i8 %1399, i8* %22, align 1, !tbaa !2446
  store i8 0, i8* %23, align 1, !tbaa !2450
  %1400 = icmp eq i32 %1394, 0
  %1401 = zext i1 %1400 to i8
  store i8 %1401, i8* %24, align 1, !tbaa !2447
  %1402 = lshr i32 %1394, 31
  %1403 = trunc i32 %1402 to i8
  store i8 %1403, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  %1404 = icmp ne i8 %1403, 0
  %.v39 = select i1 %1404, i64 -250, i64 15
  %1405 = add i64 %1389, %.v39
  store i64 %1405, i64* %78, align 8, !tbaa !2428
  br i1 %1404, label %block_400ec2, label %block_400fcb

block_4010c3:                                     ; preds = %block_4010d7, %block_4010ae
  %1406 = phi i32 [ 0, %block_4010ae ], [ %3022, %block_4010d7 ]
  %1407 = phi i64 [ %1474, %block_4010ae ], [ %3046, %block_4010d7 ]
  %MEMORY.4 = phi %struct.Memory* [ %1465, %block_4010ae ], [ %3019, %block_4010d7 ]
  %1408 = zext i32 %1406 to i64
  store i64 %1408, i64* %RAX, align 8, !tbaa !2428
  %1409 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1410 = sub i32 %1406, %1409
  %1411 = icmp ult i32 %1406, %1409
  %1412 = zext i1 %1411 to i8
  store i8 %1412, i8* %21, align 1, !tbaa !2432
  %1413 = and i32 %1410, 255
  %1414 = tail call i32 @llvm.ctpop.i32(i32 %1413) #8
  %1415 = trunc i32 %1414 to i8
  %1416 = and i8 %1415, 1
  %1417 = xor i8 %1416, 1
  store i8 %1417, i8* %22, align 1, !tbaa !2446
  %1418 = xor i32 %1409, %1406
  %1419 = xor i32 %1418, %1410
  %1420 = lshr i32 %1419, 4
  %1421 = trunc i32 %1420 to i8
  %1422 = and i8 %1421, 1
  store i8 %1422, i8* %23, align 1, !tbaa !2450
  %1423 = icmp eq i32 %1410, 0
  %1424 = zext i1 %1423 to i8
  store i8 %1424, i8* %24, align 1, !tbaa !2447
  %1425 = lshr i32 %1410, 31
  %1426 = trunc i32 %1425 to i8
  store i8 %1426, i8* %25, align 1, !tbaa !2448
  %1427 = lshr i32 %1406, 31
  %1428 = lshr i32 %1409, 31
  %1429 = xor i32 %1428, %1427
  %1430 = xor i32 %1425, %1427
  %1431 = add nuw nsw i32 %1430, %1429
  %1432 = icmp eq i32 %1431, 2
  %1433 = zext i1 %1432 to i8
  store i8 %1433, i8* %26, align 1, !tbaa !2449
  %1434 = icmp ne i8 %1426, 0
  %1435 = xor i1 %1434, %1432
  %.v41 = select i1 %1435, i64 20, i64 134
  %1436 = add i64 %1407, %.v41
  store i64 %1436, i64* %78, align 8, !tbaa !2428
  br i1 %1435, label %block_4010d7, label %block_401149

block_400e3a:                                     ; preds = %block_400def
  %1437 = load i64, i64* %RBP, align 8
  %1438 = add i64 %1437, -68
  %1439 = add i64 %483, 3
  store i64 %1439, i64* %PC, align 8
  %1440 = inttoptr i64 %1438 to i32*
  %1441 = load i32, i32* %1440, align 4
  %1442 = shl i32 %1441, 1
  %1443 = icmp slt i32 %1441, 0
  %1444 = icmp slt i32 %1442, 0
  %1445 = xor i1 %1443, %1444
  %1446 = zext i32 %1442 to i64
  store i64 %1446, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %1441, 31
  %1447 = trunc i32 %.lobit to i8
  store i8 %1447, i8* %21, align 1, !tbaa !2456
  %1448 = and i32 %1442, 254
  %1449 = tail call i32 @llvm.ctpop.i32(i32 %1448) #8
  %1450 = trunc i32 %1449 to i8
  %1451 = and i8 %1450, 1
  %1452 = xor i8 %1451, 1
  store i8 %1452, i8* %22, align 1, !tbaa !2456
  store i8 0, i8* %23, align 1, !tbaa !2456
  %1453 = icmp eq i32 %1442, 0
  %1454 = zext i1 %1453 to i8
  store i8 %1454, i8* %24, align 1, !tbaa !2456
  %1455 = lshr i32 %1441, 30
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  store i8 %1457, i8* %25, align 1, !tbaa !2456
  %1458 = zext i1 %1445 to i8
  store i8 %1458, i8* %26, align 1, !tbaa !2456
  %1459 = add i64 %483, 9
  store i64 %1459, i64* %PC, align 8
  store i32 %1442, i32* %1440, align 4
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_400e43

block_4010ae:                                     ; preds = %block_4010a0
  %1460 = add i64 %2033, -2798
  %1461 = add i64 %2033, 5
  %1462 = load i64, i64* %15, align 8, !tbaa !2428
  %1463 = add i64 %1462, -8
  %1464 = inttoptr i64 %1463 to i64*
  store i64 %1461, i64* %1464, align 8
  store i64 %1463, i64* %15, align 8, !tbaa !2428
  store i64 %1460, i64* %78, align 8, !tbaa !2428
  %1465 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1460, %struct.Memory* %MEMORY.9)
  %1466 = load i64, i64* %RBP, align 8
  %1467 = add i64 %1466, -40
  %1468 = load i64, i64* %PC, align 8
  %1469 = add i64 %1468, 5
  store i64 %1469, i64* %PC, align 8
  %1470 = load <2 x float>, <2 x float>* %62, align 1
  %1471 = extractelement <2 x float> %1470, i32 0
  %1472 = inttoptr i64 %1467 to float*
  store float %1471, float* %1472, align 4
  %1473 = load i64, i64* %PC, align 8
  %1474 = add i64 %1473, 11
  store i64 %1474, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4010c3

block_400d39:                                     ; preds = %block_400cca, %block_400d24
  %1475 = phi i64 [ %1876, %block_400cca ], [ %.pre19, %block_400d24 ]
  %1476 = phi i64 [ %1909, %block_400cca ], [ %1594, %block_400d24 ]
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %21, align 1, !tbaa !2432
  store i8 1, i8* %22, align 1, !tbaa !2446
  store i8 1, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  store i8 0, i8* %23, align 1, !tbaa !2450
  %1477 = add i64 %1475, -16
  %1478 = add i64 %1476, 7
  store i64 %1478, i64* %PC, align 8
  %1479 = inttoptr i64 %1477 to i32*
  %1480 = load i32, i32* %1479, align 4
  %1481 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1480, i32* %1481, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1482 = add i64 %1475, -8
  %1483 = add i64 %1476, 12
  store i64 %1483, i64* %PC, align 8
  %1484 = load <2 x float>, <2 x float>* %326, align 1
  %1485 = load <2 x i32>, <2 x i32>* %259, align 1
  %1486 = inttoptr i64 %1482 to float*
  %1487 = load float, float* %1486, align 4
  %1488 = extractelement <2 x float> %1484, i32 0
  %1489 = fdiv float %1488, %1487
  store float %1489, float* %29, align 1, !tbaa !2452
  %1490 = bitcast <2 x float> %1484 to <2 x i32>
  %1491 = extractelement <2 x i32> %1490, i32 1
  store i32 %1491, i32* %262, align 1, !tbaa !2452
  %1492 = extractelement <2 x i32> %1485, i32 0
  store i32 %1492, i32* %264, align 1, !tbaa !2452
  %1493 = extractelement <2 x i32> %1485, i32 1
  store i32 %1493, i32* %266, align 1, !tbaa !2452
  %1494 = load <2 x float>, <2 x float>* %62, align 1
  %1495 = extractelement <2 x float> %1494, i32 0
  store float %1495, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*), align 4
  %1496 = add i64 %1476, 7063
  %1497 = add i64 %1476, 26
  %1498 = load i64, i64* %15, align 8, !tbaa !2428
  %1499 = add i64 %1498, -8
  %1500 = inttoptr i64 %1499 to i64*
  store i64 %1497, i64* %1500, align 8
  store i64 %1499, i64* %15, align 8, !tbaa !2428
  store i64 %1496, i64* %78, align 8, !tbaa !2428
  %1501 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1496, %struct.Memory* %2481)
  %1502 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %1503 = load i64, i64* @stderr, align 64
  store i64 %1503, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1504 = add i64 %1502, -2195
  %1505 = add i64 %1502, 25
  %1506 = load i64, i64* %15, align 8, !tbaa !2428
  %1507 = add i64 %1506, -8
  %1508 = inttoptr i64 %1507 to i64*
  store i64 %1505, i64* %1508, align 8
  store i64 %1507, i64* %15, align 8, !tbaa !2428
  store i64 %1504, i64* %78, align 8, !tbaa !2428
  %1509 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1501)
  %1510 = load i64, i64* %RBP, align 8
  %1511 = add i64 %1510, -64
  %1512 = load i64, i64* %PC, align 8
  %1513 = add i64 %1512, 7
  store i64 %1513, i64* %PC, align 8
  %1514 = inttoptr i64 %1511 to i32*
  store i32 -3, i32* %1514, align 4
  %1515 = load i64, i64* %RBP, align 8
  %1516 = add i64 %1515, -68
  %1517 = load i64, i64* %PC, align 8
  %1518 = add i64 %1517, 7
  store i64 %1518, i64* %PC, align 8
  %1519 = inttoptr i64 %1516 to i32*
  store i32 100, i32* %1519, align 4
  %1520 = load i64, i64* %RBP, align 8
  %1521 = add i64 %1520, -936
  %1522 = load i32, i32* %EAX, align 4
  %1523 = load i64, i64* %PC, align 8
  %1524 = add i64 %1523, 6
  store i64 %1524, i64* %PC, align 8
  %1525 = inttoptr i64 %1521 to i32*
  store i32 %1522, i32* %1525, align 4
  %1526 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %1527 = bitcast i64* %2672 to <2 x i32>*
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_400d80

block_400ab0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1528 = load i64, i64* %RBP, align 8
  %1529 = add i64 %1528, -24
  %1530 = add i64 %3171, 5
  store i64 %1530, i64* %PC, align 8
  %1531 = inttoptr i64 %1529 to i32*
  %1532 = load i32, i32* %1531, align 4
  %1533 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1532, i32* %1533, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1534 = load <2 x float>, <2 x float>* %62, align 1
  %1535 = extractelement <2 x float> %1534, i32 0
  %1536 = fpext float %1535 to double
  store double %1536, double* %196, align 1, !tbaa !2454
  %1537 = add i64 %1528, -904
  %1538 = add i64 %3171, 17
  store i64 %1538, i64* %PC, align 8
  %1539 = inttoptr i64 %1537 to double*
  store double %1536, double* %1539, align 8
  %1540 = load i64, i64* %PC, align 8
  %1541 = add i64 %1540, 45
  store i64 %1541, i64* %78, align 8, !tbaa !2428
  br label %block_400aee

block_400fab:                                     ; preds = %block_400f66
  %1542 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1543 = shl i32 %1542, 1
  %1544 = icmp slt i32 %1542, 0
  %1545 = icmp slt i32 %1543, 0
  %1546 = xor i1 %1544, %1545
  %1547 = zext i32 %1543 to i64
  store i64 %1547, i64* %RAX, align 8, !tbaa !2428
  %.lobit38 = lshr i32 %1542, 31
  %1548 = trunc i32 %.lobit38 to i8
  store i8 %1548, i8* %21, align 1, !tbaa !2456
  %1549 = and i32 %1543, 254
  %1550 = tail call i32 @llvm.ctpop.i32(i32 %1549) #8
  %1551 = trunc i32 %1550 to i8
  %1552 = and i8 %1551, 1
  %1553 = xor i8 %1552, 1
  store i8 %1553, i8* %22, align 1, !tbaa !2456
  store i8 0, i8* %23, align 1, !tbaa !2456
  %1554 = icmp eq i32 %1543, 0
  %1555 = zext i1 %1554 to i8
  store i8 %1555, i8* %24, align 1, !tbaa !2456
  %1556 = lshr i32 %1542, 30
  %1557 = trunc i32 %1556 to i8
  %1558 = and i8 %1557, 1
  store i8 %1558, i8* %25, align 1, !tbaa !2456
  %1559 = zext i1 %1546 to i8
  store i8 %1559, i8* %26, align 1, !tbaa !2456
  %1560 = add i64 %547, 17
  store i64 %1560, i64* %PC, align 8
  store i32 %1543, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  br label %block_400fbc

block_4014fa:                                     ; preds = %block_40150e, %block_4014e5
  %1561 = phi i32 [ 0, %block_4014e5 ], [ %2906, %block_40150e ]
  %1562 = phi i64 [ %562, %block_4014e5 ], [ %2930, %block_40150e ]
  %MEMORY.6 = phi %struct.Memory* [ %553, %block_4014e5 ], [ %2903, %block_40150e ]
  %1563 = zext i32 %1561 to i64
  store i64 %1563, i64* %RAX, align 8, !tbaa !2428
  %1564 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1565 = sub i32 %1561, %1564
  %1566 = icmp ult i32 %1561, %1564
  %1567 = zext i1 %1566 to i8
  store i8 %1567, i8* %21, align 1, !tbaa !2432
  %1568 = and i32 %1565, 255
  %1569 = tail call i32 @llvm.ctpop.i32(i32 %1568) #8
  %1570 = trunc i32 %1569 to i8
  %1571 = and i8 %1570, 1
  %1572 = xor i8 %1571, 1
  store i8 %1572, i8* %22, align 1, !tbaa !2446
  %1573 = xor i32 %1564, %1561
  %1574 = xor i32 %1573, %1565
  %1575 = lshr i32 %1574, 4
  %1576 = trunc i32 %1575 to i8
  %1577 = and i8 %1576, 1
  store i8 %1577, i8* %23, align 1, !tbaa !2450
  %1578 = icmp eq i32 %1565, 0
  %1579 = zext i1 %1578 to i8
  store i8 %1579, i8* %24, align 1, !tbaa !2447
  %1580 = lshr i32 %1565, 31
  %1581 = trunc i32 %1580 to i8
  store i8 %1581, i8* %25, align 1, !tbaa !2448
  %1582 = lshr i32 %1561, 31
  %1583 = lshr i32 %1564, 31
  %1584 = xor i32 %1583, %1582
  %1585 = xor i32 %1580, %1582
  %1586 = add nuw nsw i32 %1585, %1584
  %1587 = icmp eq i32 %1586, 2
  %1588 = zext i1 %1587 to i8
  store i8 %1588, i8* %26, align 1, !tbaa !2449
  %1589 = icmp ne i8 %1581, 0
  %1590 = xor i1 %1589, %1587
  %.v45 = select i1 %1590, i64 20, i64 134
  %1591 = add i64 %1562, %.v45
  store i64 %1591, i64* %78, align 8, !tbaa !2428
  br i1 %1590, label %block_40150e, label %block_401580

block_400d24:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  store i32 0, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %1592 = load <2 x float>, <2 x float>* %62, align 1
  %1593 = extractelement <2 x float> %1592, i32 0
  store float %1593, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %1594 = add i64 %2491, 21
  store i64 %1594, i64* %PC, align 8
  store float %1593, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %.pre19 = load i64, i64* %RBP, align 8
  br label %block_400d39

block_400ec2:                                     ; preds = %block_400e52, %block_400fbc
  %1595 = phi i64 [ %.pre22, %block_400e52 ], [ %1405, %block_400fbc ]
  %MEMORY.7 = phi %struct.Memory* [ %1996, %block_400e52 ], [ %521, %block_400fbc ]
  %1596 = add i64 %1595, -2306
  %1597 = add i64 %1595, 5
  %1598 = load i64, i64* %15, align 8, !tbaa !2428
  %1599 = add i64 %1598, -8
  %1600 = inttoptr i64 %1599 to i64*
  store i64 %1597, i64* %1600, align 8
  store i64 %1599, i64* %15, align 8, !tbaa !2428
  store i64 %1596, i64* %78, align 8, !tbaa !2428
  %1601 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1596, %struct.Memory* %MEMORY.7)
  %1602 = load i64, i64* %RBP, align 8
  %1603 = add i64 %1602, -80
  %1604 = load i64, i64* %PC, align 8
  %1605 = add i64 %1604, 5
  store i64 %1605, i64* %PC, align 8
  %1606 = load <2 x float>, <2 x float>* %62, align 1
  %1607 = extractelement <2 x float> %1606, i32 0
  %1608 = inttoptr i64 %1603 to float*
  store float %1607, float* %1608, align 4
  %1609 = load i64, i64* %RBP, align 8
  %1610 = add i64 %1609, -64
  %1611 = load i64, i64* %PC, align 8
  %1612 = add i64 %1611, 3
  store i64 %1612, i64* %PC, align 8
  %1613 = inttoptr i64 %1610 to i32*
  %1614 = load i32, i32* %1613, align 4
  %1615 = add i32 %1614, 1
  %1616 = zext i32 %1615 to i64
  store i64 %1616, i64* %RAX, align 8, !tbaa !2428
  %1617 = icmp eq i32 %1614, -1
  %1618 = icmp eq i32 %1615, 0
  %1619 = or i1 %1617, %1618
  %1620 = zext i1 %1619 to i8
  store i8 %1620, i8* %21, align 1, !tbaa !2432
  %1621 = and i32 %1615, 255
  %1622 = tail call i32 @llvm.ctpop.i32(i32 %1621) #8
  %1623 = trunc i32 %1622 to i8
  %1624 = and i8 %1623, 1
  %1625 = xor i8 %1624, 1
  store i8 %1625, i8* %22, align 1, !tbaa !2446
  %1626 = xor i32 %1614, %1615
  %1627 = lshr i32 %1626, 4
  %1628 = trunc i32 %1627 to i8
  %1629 = and i8 %1628, 1
  store i8 %1629, i8* %23, align 1, !tbaa !2450
  %1630 = icmp eq i32 %1615, 0
  %1631 = zext i1 %1630 to i8
  store i8 %1631, i8* %24, align 1, !tbaa !2447
  %1632 = lshr i32 %1615, 31
  %1633 = trunc i32 %1632 to i8
  store i8 %1633, i8* %25, align 1, !tbaa !2448
  %1634 = lshr i32 %1614, 31
  %1635 = xor i32 %1632, %1634
  %1636 = add nuw nsw i32 %1635, %1632
  %1637 = icmp eq i32 %1636, 2
  %1638 = zext i1 %1637 to i8
  store i8 %1638, i8* %26, align 1, !tbaa !2449
  %1639 = add i64 %1611, 9
  store i64 %1639, i64* %PC, align 8
  store i32 %1615, i32* %1613, align 4
  %1640 = load i64, i64* %PC, align 8
  %1641 = add i64 %1640, 11
  store i64 %1641, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400ee0

block_401622:                                     ; preds = %block_4015c4
  %1642 = add i64 %1388, -4194
  %1643 = add i64 %1388, 5
  %1644 = load i64, i64* %15, align 8, !tbaa !2428
  %1645 = add i64 %1644, -8
  %1646 = inttoptr i64 %1645 to i64*
  store i64 %1643, i64* %1646, align 8
  store i64 %1645, i64* %15, align 8, !tbaa !2428
  store i64 %1642, i64* %78, align 8, !tbaa !2428
  %1647 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1642, %struct.Memory* %MEMORY.2)
  %1648 = load i64, i64* %PC, align 8
  %1649 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to i64*), align 8
  %1650 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1649, i64* %1650, align 1, !tbaa !2454
  store double 0.000000e+00, double* %203, align 1, !tbaa !2454
  %1651 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to i64*), align 8
  %1652 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1651, i64* %1652, align 1, !tbaa !2454
  store double 0.000000e+00, double* %858, align 1, !tbaa !2454
  %1653 = load i64, i64* %RBP, align 8
  %1654 = add i64 %1653, -40
  %1655 = add i64 %1648, 21
  store i64 %1655, i64* %PC, align 8
  %1656 = load <2 x float>, <2 x float>* %326, align 1
  %1657 = load <2 x i32>, <2 x i32>* %259, align 1
  %1658 = inttoptr i64 %1654 to float*
  %1659 = load float, float* %1658, align 4
  %1660 = extractelement <2 x float> %1656, i32 0
  %1661 = fsub float %1660, %1659
  store float %1661, float* %29, align 1, !tbaa !2452
  %1662 = bitcast <2 x float> %1656 to <2 x i32>
  %1663 = extractelement <2 x i32> %1662, i32 1
  store i32 %1663, i32* %262, align 1, !tbaa !2452
  %1664 = extractelement <2 x i32> %1657, i32 0
  store i32 %1664, i32* %264, align 1, !tbaa !2452
  %1665 = extractelement <2 x i32> %1657, i32 1
  store i32 %1665, i32* %266, align 1, !tbaa !2452
  %1666 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1667 = zext i32 %1666 to i64
  store i64 %1667, i64* %RAX, align 8, !tbaa !2428
  %1668 = load <2 x i32>, <2 x i32>* %859, align 1
  %1669 = load <2 x i32>, <2 x i32>* %860, align 1
  %1670 = sitofp i32 %1666 to float
  store float %1670, float* %2342, align 1, !tbaa !2452
  %1671 = extractelement <2 x i32> %1668, i32 1
  store i32 %1671, i32* %222, align 1, !tbaa !2452
  %1672 = extractelement <2 x i32> %1669, i32 0
  store i32 %1672, i32* %224, align 1, !tbaa !2452
  %1673 = extractelement <2 x i32> %1669, i32 1
  store i32 %1673, i32* %226, align 1, !tbaa !2452
  %1674 = load <2 x float>, <2 x float>* %326, align 1
  %1675 = load <2 x i32>, <2 x i32>* %259, align 1
  %1676 = load <2 x float>, <2 x float>* %2347, align 1
  %1677 = extractelement <2 x float> %1674, i32 0
  %1678 = extractelement <2 x float> %1676, i32 0
  %1679 = fdiv float %1677, %1678
  store float %1679, float* %29, align 1, !tbaa !2452
  %1680 = bitcast <2 x float> %1674 to <2 x i32>
  %1681 = extractelement <2 x i32> %1680, i32 1
  store i32 %1681, i32* %262, align 1, !tbaa !2452
  %1682 = extractelement <2 x i32> %1675, i32 0
  store i32 %1682, i32* %264, align 1, !tbaa !2452
  %1683 = extractelement <2 x i32> %1675, i32 1
  store i32 %1683, i32* %266, align 1, !tbaa !2452
  %1684 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1685 = sext i32 %1684 to i64
  %1686 = shl nsw i64 %1685, 2
  %1687 = add i64 %1686, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1688 = add i64 %1648, 53
  store i64 %1688, i64* %PC, align 8
  %1689 = load <2 x float>, <2 x float>* %62, align 1
  %1690 = extractelement <2 x float> %1689, i32 0
  %1691 = inttoptr i64 %1687 to float*
  store float %1690, float* %1691, align 4
  %1692 = load i64, i64* %PC, align 8
  %1693 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1694 = sext i32 %1693 to i64
  store i64 %1694, i64* %RCX, align 8, !tbaa !2428
  %1695 = shl nsw i64 %1694, 2
  %1696 = add i64 %1695, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1697 = add i64 %1692, 17
  store i64 %1697, i64* %PC, align 8
  %1698 = inttoptr i64 %1696 to i32*
  %1699 = load i32, i32* %1698, align 4
  %1700 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1699, i32* %1700, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  store i64 %1694, i64* %RCX, align 8, !tbaa !2428
  %1701 = add i64 %1695, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1702 = add i64 %1692, 34
  store i64 %1702, i64* %PC, align 8
  %1703 = load <2 x float>, <2 x float>* %326, align 1
  %1704 = load <2 x i32>, <2 x i32>* %259, align 1
  %1705 = inttoptr i64 %1701 to float*
  %1706 = load float, float* %1705, align 4
  %1707 = extractelement <2 x float> %1703, i32 0
  %1708 = fadd float %1707, %1706
  store float %1708, float* %29, align 1, !tbaa !2452
  %1709 = bitcast <2 x float> %1703 to <2 x i32>
  %1710 = extractelement <2 x i32> %1709, i32 1
  store i32 %1710, i32* %262, align 1, !tbaa !2452
  %1711 = extractelement <2 x i32> %1704, i32 0
  store i32 %1711, i32* %264, align 1, !tbaa !2452
  %1712 = extractelement <2 x i32> %1704, i32 1
  store i32 %1712, i32* %266, align 1, !tbaa !2452
  %1713 = load i64, i64* %RBP, align 8
  %1714 = add i64 %1713, -16
  %1715 = add i64 %1692, 39
  store i64 %1715, i64* %PC, align 8
  %1716 = load <2 x float>, <2 x float>* %62, align 1
  %1717 = extractelement <2 x float> %1716, i32 0
  %1718 = inttoptr i64 %1714 to float*
  store float %1717, float* %1718, align 4
  %1719 = load i64, i64* %RBP, align 8
  %1720 = add i64 %1719, -16
  %1721 = load i64, i64* %PC, align 8
  %1722 = add i64 %1721, 5
  store i64 %1722, i64* %PC, align 8
  %1723 = inttoptr i64 %1720 to i32*
  %1724 = load i32, i32* %1723, align 4
  %1725 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1724, i32* %1725, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1726 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1727 = sext i32 %1726 to i64
  store i64 %1727, i64* %RCX, align 8, !tbaa !2428
  %1728 = shl nsw i64 %1727, 2
  %1729 = add i64 %1728, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1730 = add i64 %1721, 22
  store i64 %1730, i64* %PC, align 8
  %1731 = load <2 x float>, <2 x float>* %62, align 1
  %1732 = extractelement <2 x float> %1731, i32 0
  %1733 = inttoptr i64 %1729 to float*
  store float %1732, float* %1733, align 4
  %1734 = load i64, i64* %RBP, align 8
  %1735 = add i64 %1734, -12
  %1736 = load i64, i64* %PC, align 8
  %1737 = add i64 %1736, 5
  store i64 %1737, i64* %PC, align 8
  %1738 = inttoptr i64 %1735 to i32*
  %1739 = load i32, i32* %1738, align 4
  %1740 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1739, i32* %1740, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1741 = load <2 x float>, <2 x float>* %62, align 1
  %1742 = extractelement <2 x float> %1741, i32 0
  %1743 = fpext float %1742 to double
  store double %1743, double* %196, align 1, !tbaa !2454
  %1744 = add i64 %1734, -16
  %1745 = add i64 %1736, 14
  store i64 %1745, i64* %PC, align 8
  %1746 = inttoptr i64 %1744 to i32*
  %1747 = load i32, i32* %1746, align 4
  %1748 = bitcast %union.VectorReg* %11 to i32*
  store i32 %1747, i32* %1748, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2344, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2345, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2346, align 1, !tbaa !2452
  %1749 = load <2 x float>, <2 x float>* %2347, align 1
  %1750 = extractelement <2 x float> %1749, i32 0
  %1751 = fpext float %1750 to double
  store double %1751, double* %227, align 1, !tbaa !2454
  %1752 = load double, double* %215, align 1
  %1753 = fmul double %1752, %1751
  store double %1753, double* %215, align 1, !tbaa !2454
  %1754 = bitcast i64* %33 to <2 x i32>*
  %1755 = load <2 x i32>, <2 x i32>* %1754, align 1
  %1756 = fdiv double %1743, %1753
  %1757 = bitcast double %1756 to <2 x i32>
  %1758 = fptrunc double %1756 to float
  store float %1758, float* %29, align 1, !tbaa !2452
  %1759 = extractelement <2 x i32> %1757, i32 1
  store i32 %1759, i32* %262, align 1, !tbaa !2452
  %1760 = extractelement <2 x i32> %1755, i32 0
  store i32 %1760, i32* %264, align 1, !tbaa !2452
  %1761 = extractelement <2 x i32> %1755, i32 1
  store i32 %1761, i32* %266, align 1, !tbaa !2452
  %1762 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1763 = sext i32 %1762 to i64
  %1764 = shl nsw i64 %1763, 2
  %1765 = add i64 %1764, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1766 = add i64 %1736, 47
  store i64 %1766, i64* %PC, align 8
  %1767 = load <2 x float>, <2 x float>* %62, align 1
  %1768 = extractelement <2 x float> %1767, i32 0
  %1769 = inttoptr i64 %1765 to float*
  store float %1768, float* %1769, align 4
  %1770 = load i64, i64* %PC, align 8
  %1771 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1772 = sext i32 %1771 to i64
  store i64 %1772, i64* %RCX, align 8, !tbaa !2428
  %1773 = shl nsw i64 %1772, 2
  %1774 = add i64 %1773, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1775 = add i64 %1770, 17
  store i64 %1775, i64* %PC, align 8
  %1776 = inttoptr i64 %1774 to i32*
  %1777 = load i32, i32* %1776, align 4
  %1778 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1777, i32* %1778, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1779 = load <2 x float>, <2 x float>* %62, align 1
  %1780 = extractelement <2 x float> %1779, i32 0
  %1781 = fpext float %1780 to double
  %1782 = load double, double* %200, align 1
  %1783 = fdiv double %1782, %1781
  store double %1783, double* %200, align 1, !tbaa !2454
  %1784 = bitcast double %1781 to <2 x i32>
  %1785 = load <2 x i32>, <2 x i32>* %259, align 1
  %1786 = fptrunc double %1783 to float
  store float %1786, float* %29, align 1, !tbaa !2452
  %1787 = extractelement <2 x i32> %1784, i32 1
  store i32 %1787, i32* %262, align 1, !tbaa !2452
  %1788 = extractelement <2 x i32> %1785, i32 0
  store i32 %1788, i32* %264, align 1, !tbaa !2452
  %1789 = extractelement <2 x i32> %1785, i32 1
  store i32 %1789, i32* %266, align 1, !tbaa !2452
  store i64 %1772, i64* %RCX, align 8, !tbaa !2428
  %1790 = add i64 %1773, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1791 = add i64 %1770, 46
  store i64 %1791, i64* %PC, align 8
  %1792 = load <2 x float>, <2 x float>* %62, align 1
  %1793 = extractelement <2 x float> %1792, i32 0
  %1794 = inttoptr i64 %1790 to float*
  store float %1793, float* %1794, align 4
  %1795 = load i64, i64* %RBP, align 8
  %1796 = add i64 %1795, -16
  %1797 = load i64, i64* %PC, align 8
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC, align 8
  %1799 = inttoptr i64 %1796 to i32*
  %1800 = load i32, i32* %1799, align 4
  %1801 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1800, i32* %1801, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1802 = add i64 %1795, -8
  %1803 = add i64 %1797, 10
  store i64 %1803, i64* %PC, align 8
  %1804 = load <2 x float>, <2 x float>* %326, align 1
  %1805 = inttoptr i64 %1802 to float*
  %1806 = load float, float* %1805, align 4
  %1807 = extractelement <2 x float> %1804, i32 0
  %1808 = fdiv float %1807, %1806
  store float %1808, float* %29, align 1, !tbaa !2452
  %1809 = bitcast <2 x float> %1804 to <2 x i32>
  %1810 = extractelement <2 x i32> %1809, i32 1
  store i32 %1810, i32* %262, align 1, !tbaa !2452
  %1811 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1812 = sext i32 %1811 to i64
  %1813 = shl nsw i64 %1812, 2
  %1814 = add i64 %1813, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1815 = add i64 %1797, 27
  store i64 %1815, i64* %PC, align 8
  %1816 = load <2 x float>, <2 x float>* %62, align 1
  %1817 = extractelement <2 x float> %1816, i32 0
  %1818 = inttoptr i64 %1814 to float*
  store float %1817, float* %1818, align 4
  %1819 = load i64, i64* %PC, align 8
  %1820 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  %1821 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1820, i32* %1821, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %1822 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1823 = sext i32 %1822 to i64
  store i64 %1823, i64* %RCX, align 8, !tbaa !2428
  %1824 = shl nsw i64 %1823, 2
  %1825 = add i64 %1824, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1826 = add i64 %1819, 26
  store i64 %1826, i64* %PC, align 8
  %1827 = load <2 x float>, <2 x float>* %326, align 1
  %1828 = load <2 x i32>, <2 x i32>* %259, align 1
  %1829 = inttoptr i64 %1825 to float*
  %1830 = load float, float* %1829, align 4
  %1831 = extractelement <2 x float> %1827, i32 0
  %1832 = fadd float %1831, %1830
  store float %1832, float* %29, align 1, !tbaa !2452
  %1833 = bitcast <2 x float> %1827 to <2 x i32>
  %1834 = extractelement <2 x i32> %1833, i32 1
  store i32 %1834, i32* %262, align 1, !tbaa !2452
  %1835 = extractelement <2 x i32> %1828, i32 0
  store i32 %1835, i32* %264, align 1, !tbaa !2452
  %1836 = extractelement <2 x i32> %1828, i32 1
  store i32 %1836, i32* %266, align 1, !tbaa !2452
  %1837 = load <2 x float>, <2 x float>* %62, align 1
  %1838 = extractelement <2 x float> %1837, i32 0
  store float %1838, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %1839 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1840 = zext i32 %1839 to i64
  store i64 %1840, i64* %RDI, align 8, !tbaa !2428
  %1841 = add i64 %1819, 4543
  %1842 = add i64 %1819, 47
  %1843 = load i64, i64* %15, align 8, !tbaa !2428
  %1844 = add i64 %1843, -8
  %1845 = inttoptr i64 %1844 to i64*
  store i64 %1842, i64* %1845, align 8
  store i64 %1844, i64* %15, align 8, !tbaa !2428
  store i64 %1841, i64* %78, align 8, !tbaa !2428
  %1846 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1841, %struct.Memory* %1647)
  %1847 = load i64, i64* %PC, align 8
  %1848 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1849 = add i32 %1848, 1
  %1850 = zext i32 %1849 to i64
  store i64 %1850, i64* %RAX, align 8, !tbaa !2428
  %1851 = icmp eq i32 %1848, -1
  %1852 = icmp eq i32 %1849, 0
  %1853 = or i1 %1851, %1852
  %1854 = zext i1 %1853 to i8
  store i8 %1854, i8* %21, align 1, !tbaa !2432
  %1855 = and i32 %1849, 255
  %1856 = tail call i32 @llvm.ctpop.i32(i32 %1855) #8
  %1857 = trunc i32 %1856 to i8
  %1858 = and i8 %1857, 1
  %1859 = xor i8 %1858, 1
  store i8 %1859, i8* %22, align 1, !tbaa !2446
  %1860 = xor i32 %1848, %1849
  %1861 = lshr i32 %1860, 4
  %1862 = trunc i32 %1861 to i8
  %1863 = and i8 %1862, 1
  store i8 %1863, i8* %23, align 1, !tbaa !2450
  %1864 = icmp eq i32 %1849, 0
  %1865 = zext i1 %1864 to i8
  store i8 %1865, i8* %24, align 1, !tbaa !2447
  %1866 = lshr i32 %1849, 31
  %1867 = trunc i32 %1866 to i8
  store i8 %1867, i8* %25, align 1, !tbaa !2448
  %1868 = lshr i32 %1848, 31
  %1869 = xor i32 %1866, %1868
  %1870 = add nuw nsw i32 %1869, %1866
  %1871 = icmp eq i32 %1870, 2
  %1872 = zext i1 %1871 to i8
  store i8 %1872, i8* %26, align 1, !tbaa !2449
  store i32 %1849, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1873 = add i64 %1847, -617
  store i64 %1873, i64* %78, align 8, !tbaa !2428
  br label %block_4014d7

block_400cca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1874 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*), align 8
  store double %1874, double* %196, align 1, !tbaa !2454
  store double 0.000000e+00, double* %197, align 1, !tbaa !2454
  %1875 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to double*), align 8
  store double %1875, double* %200, align 1, !tbaa !2454
  store double 0.000000e+00, double* %203, align 1, !tbaa !2454
  %1876 = load i64, i64* %RBP, align 8
  %1877 = add i64 %1876, -12
  %1878 = add i64 %2491, 21
  store i64 %1878, i64* %PC, align 8
  %1879 = inttoptr i64 %1877 to i32*
  %1880 = load i32, i32* %1879, align 4
  %1881 = bitcast %union.VectorReg* %10 to i32*
  store i32 %1880, i32* %1881, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2660, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2662, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2664, align 1, !tbaa !2452
  %1882 = load <2 x float>, <2 x float>* %2196, align 1
  %1883 = extractelement <2 x float> %1882, i32 0
  %1884 = fpext float %1883 to double
  store double %1884, double* %215, align 1, !tbaa !2454
  %1885 = add i64 %1876, -16
  %1886 = add i64 %2491, 30
  store i64 %1886, i64* %PC, align 8
  %1887 = inttoptr i64 %1885 to i32*
  %1888 = load i32, i32* %1887, align 4
  %1889 = bitcast %union.VectorReg* %11 to i32*
  store i32 %1888, i32* %1889, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2344, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2345, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2346, align 1, !tbaa !2452
  %1890 = load <2 x float>, <2 x float>* %2347, align 1
  %1891 = extractelement <2 x float> %1890, i32 0
  %1892 = fpext float %1891 to double
  store double %1892, double* %227, align 1, !tbaa !2454
  %1893 = fmul double %1875, %1892
  %1894 = fdiv double %1884, %1893
  store double %1894, double* %215, align 1, !tbaa !2454
  %1895 = bitcast double %1893 to <2 x i32>
  %1896 = fptrunc double %1894 to float
  store float %1896, float* %2651, align 1, !tbaa !2452
  %1897 = extractelement <2 x i32> %1895, i32 1
  store i32 %1897, i32* %2668, align 1, !tbaa !2452
  %1898 = load <2 x float>, <2 x float>* %2657, align 1
  %1899 = extractelement <2 x float> %1898, i32 0
  store float %1899, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  store float %1899, float* %2651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2654, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2656, align 1, !tbaa !2452
  %1900 = load <2 x float>, <2 x float>* %2657, align 1
  %1901 = extractelement <2 x float> %1900, i32 0
  %1902 = fpext float %1901 to double
  store double %1902, double* %200, align 1, !tbaa !2454
  %1903 = fdiv double %1874, %1902
  %1904 = bitcast double %1903 to <2 x i32>
  %1905 = fptrunc double %1903 to float
  store float %1905, float* %29, align 1, !tbaa !2452
  %1906 = extractelement <2 x i32> %1904, i32 1
  store i32 %1906, i32* %262, align 1, !tbaa !2452
  store i32 0, i32* %264, align 1, !tbaa !2452
  store i32 0, i32* %266, align 1, !tbaa !2452
  %1907 = load <2 x float>, <2 x float>* %62, align 1
  %1908 = extractelement <2 x float> %1907, i32 0
  store float %1908, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %1909 = add i64 %2491, 111
  store i64 %1909, i64* %78, align 8, !tbaa !2428
  br label %block_400d39

block_4011a1:                                     ; preds = %block_40118d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %346, align 8, !tbaa !2428
  store i8 0, i8* %21, align 1, !tbaa !2432
  store i8 1, i8* %22, align 1, !tbaa !2446
  store i8 1, i8* %24, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  store i8 0, i8* %23, align 1, !tbaa !2450
  %1910 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1911 = zext i32 %1910 to i64
  store i64 %1911, i64* %RSI, align 8, !tbaa !2428
  %1912 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1913 = zext i32 %1912 to i64
  store i64 %1913, i64* %RDX, align 8, !tbaa !2428
  %1914 = add i64 %2961, 2799
  %1915 = add i64 %2961, 52
  %1916 = load i64, i64* %15, align 8, !tbaa !2428
  %1917 = add i64 %1916, -8
  %1918 = inttoptr i64 %1917 to i64*
  store i64 %1915, i64* %1918, align 8
  store i64 %1917, i64* %15, align 8, !tbaa !2428
  store i64 %1914, i64* %78, align 8, !tbaa !2428
  %1919 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %1914, %struct.Memory* %MEMORY.16)
  %1920 = load i64, i64* %PC, align 8
  %1921 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1922 = add i32 %1921, 1
  %1923 = zext i32 %1922 to i64
  store i64 %1923, i64* %RAX, align 8, !tbaa !2428
  %1924 = icmp eq i32 %1921, -1
  %1925 = icmp eq i32 %1922, 0
  %1926 = or i1 %1924, %1925
  %1927 = zext i1 %1926 to i8
  store i8 %1927, i8* %21, align 1, !tbaa !2432
  %1928 = and i32 %1922, 255
  %1929 = tail call i32 @llvm.ctpop.i32(i32 %1928) #8
  %1930 = trunc i32 %1929 to i8
  %1931 = and i8 %1930, 1
  %1932 = xor i8 %1931, 1
  store i8 %1932, i8* %22, align 1, !tbaa !2446
  %1933 = xor i32 %1921, %1922
  %1934 = lshr i32 %1933, 4
  %1935 = trunc i32 %1934 to i8
  %1936 = and i8 %1935, 1
  store i8 %1936, i8* %23, align 1, !tbaa !2450
  %1937 = icmp eq i32 %1922, 0
  %1938 = zext i1 %1937 to i8
  store i8 %1938, i8* %24, align 1, !tbaa !2447
  %1939 = lshr i32 %1922, 31
  %1940 = trunc i32 %1939 to i8
  store i8 %1940, i8* %25, align 1, !tbaa !2448
  %1941 = lshr i32 %1921, 31
  %1942 = xor i32 %1939, %1941
  %1943 = add nuw nsw i32 %1942, %1939
  %1944 = icmp eq i32 %1943, 2
  %1945 = zext i1 %1944 to i8
  store i8 %1945, i8* %26, align 1, !tbaa !2449
  store i32 %1922, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1946 = add i64 %1920, -72
  store i64 %1946, i64* %78, align 8, !tbaa !2428
  br label %block_40118d

block_400e52:                                     ; preds = %block_400e43
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %1947 = add i64 %2755, -72
  %1948 = add i64 %2770, 18
  store i64 %1948, i64* %PC, align 8
  %1949 = inttoptr i64 %1947 to float*
  %1950 = inttoptr i64 %1947 to i32*
  %1951 = load i32, i32* %1950, align 4
  %1952 = bitcast %union.VectorReg* %9 to i32*
  store i32 %1951, i32* %1952, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2654, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2656, align 1, !tbaa !2452
  %1953 = load <2 x float>, <2 x float>* %2657, align 1
  %1954 = extractelement <2 x float> %1953, i32 0
  %1955 = fpext float %1954 to double
  store double %1955, double* %200, align 1, !tbaa !2454
  %1956 = add i64 %2755, -68
  %1957 = add i64 %2770, 25
  store i64 %1957, i64* %PC, align 8
  %1958 = inttoptr i64 %1956 to i32*
  %1959 = load i32, i32* %1958, align 4
  %1960 = zext i32 %1959 to i64
  store i64 %1960, i64* %RAX, align 8, !tbaa !2428
  %1961 = sitofp i32 %1959 to double
  store double %1961, double* %215, align 1, !tbaa !2454
  %1962 = bitcast i64* %202 to <2 x i32>*
  %1963 = load <2 x i32>, <2 x i32>* %1962, align 1
  %1964 = fdiv double %1955, %1961
  %1965 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %1966 = bitcast double %1964 to <2 x i32>
  %1967 = bitcast i64* %202 to <2 x i32>*
  %1968 = fptrunc double %1964 to float
  store float %1968, float* %2651, align 1, !tbaa !2452
  %1969 = extractelement <2 x i32> %1966, i32 1
  store i32 %1969, i32* %2668, align 1, !tbaa !2452
  %1970 = extractelement <2 x i32> %1963, i32 0
  store i32 %1970, i32* %2669, align 1, !tbaa !2452
  %1971 = extractelement <2 x i32> %1963, i32 1
  store i32 %1971, i32* %2670, align 1, !tbaa !2452
  %1972 = add i64 %2770, 42
  store i64 %1972, i64* %PC, align 8
  %1973 = load <2 x float>, <2 x float>* %2657, align 1
  %1974 = extractelement <2 x float> %1973, i32 0
  store float %1974, float* %1949, align 4
  %1975 = load i64, i64* %PC, align 8
  %1976 = load i64, i64* @stderr, align 64
  store i64 %1976, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1977 = add i64 %1975, -2492
  %1978 = add i64 %1975, 15
  %1979 = load i64, i64* %15, align 8, !tbaa !2428
  %1980 = add i64 %1979, -8
  %1981 = inttoptr i64 %1980 to i64*
  store i64 %1978, i64* %1981, align 8
  store i64 %1980, i64* %15, align 8, !tbaa !2428
  store i64 %1977, i64* %78, align 8, !tbaa !2428
  %1982 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %457)
  %1983 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %1984 = load i64, i64* @stderr, align 64
  store i64 %1984, i64* %RDI, align 8, !tbaa !2428
  %1985 = load i64, i64* %RBP, align 8
  %1986 = add i64 %1985, -944
  %1987 = load i32, i32* %EAX, align 4
  %1988 = add i64 %1983, 24
  store i64 %1988, i64* %PC, align 8
  %1989 = inttoptr i64 %1986 to i32*
  store i32 %1987, i32* %1989, align 4
  %1990 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1991 = add i64 %1990, -2531
  %1992 = add i64 %1990, 7
  %1993 = load i64, i64* %15, align 8, !tbaa !2428
  %1994 = add i64 %1993, -8
  %1995 = inttoptr i64 %1994 to i64*
  store i64 %1992, i64* %1995, align 8
  store i64 %1994, i64* %15, align 8, !tbaa !2428
  store i64 %1991, i64* %78, align 8, !tbaa !2428
  %1996 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1982)
  %1997 = load i64, i64* %RBP, align 8
  %1998 = add i64 %1997, -64
  %1999 = load i64, i64* %PC, align 8
  %2000 = add i64 %1999, 7
  store i64 %2000, i64* %PC, align 8
  %2001 = inttoptr i64 %1998 to i32*
  store i32 -3, i32* %2001, align 4
  %2002 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2003 = load i64, i64* %RBP, align 8
  %2004 = add i64 %2003, -948
  %2005 = load i32, i32* %EAX, align 4
  %2006 = add i64 %2002, 17
  store i64 %2006, i64* %PC, align 8
  %2007 = inttoptr i64 %2004 to i32*
  store i32 %2005, i32* %2007, align 4
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_400ec2

block_4010a0:                                     ; preds = %block_400fcb, %block_4011eb
  %2008 = phi i32 [ %.pre25, %block_400fcb ], [ %1142, %block_4011eb ]
  %2009 = phi i64 [ %.pre24, %block_400fcb ], [ %1166, %block_4011eb ]
  %MEMORY.9 = phi %struct.Memory* [ %821, %block_400fcb ], [ %1139, %block_4011eb ]
  %2010 = add i32 %2008, -6
  %2011 = icmp ult i32 %2008, 6
  %2012 = zext i1 %2011 to i8
  store i8 %2012, i8* %21, align 1, !tbaa !2432
  %2013 = and i32 %2010, 255
  %2014 = tail call i32 @llvm.ctpop.i32(i32 %2013) #8
  %2015 = trunc i32 %2014 to i8
  %2016 = and i8 %2015, 1
  %2017 = xor i8 %2016, 1
  store i8 %2017, i8* %22, align 1, !tbaa !2446
  %2018 = xor i32 %2008, %2010
  %2019 = lshr i32 %2018, 4
  %2020 = trunc i32 %2019 to i8
  %2021 = and i8 %2020, 1
  store i8 %2021, i8* %23, align 1, !tbaa !2450
  %2022 = icmp eq i32 %2010, 0
  %2023 = zext i1 %2022 to i8
  store i8 %2023, i8* %24, align 1, !tbaa !2447
  %2024 = lshr i32 %2010, 31
  %2025 = trunc i32 %2024 to i8
  store i8 %2025, i8* %25, align 1, !tbaa !2448
  %2026 = lshr i32 %2008, 31
  %2027 = xor i32 %2024, %2026
  %2028 = add nuw nsw i32 %2027, %2026
  %2029 = icmp eq i32 %2028, 2
  %2030 = zext i1 %2029 to i8
  store i8 %2030, i8* %26, align 1, !tbaa !2449
  %2031 = icmp ne i8 %2025, 0
  %2032 = xor i1 %2031, %2029
  %.v40 = select i1 %2032, i64 14, i64 639
  %2033 = add i64 %2009, %.v40
  store i64 %2033, i64* %78, align 8, !tbaa !2428
  br i1 %2032, label %block_4010ae, label %block_40131f

block_4009e7:                                     ; preds = %block_400997, %block_400aee
  %2034 = phi i32 [ 0, %block_400997 ], [ %676, %block_400aee ]
  %2035 = phi i64 [ %2650, %block_400997 ], [ %700, %block_400aee ]
  %MEMORY.10 = phi %struct.Memory* [ %2634, %block_400997 ], [ %3166, %block_400aee ]
  %2036 = zext i32 %2034 to i64
  store i64 %2036, i64* %RAX, align 8, !tbaa !2428
  %2037 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2038 = sub i32 %2034, %2037
  %2039 = icmp ult i32 %2034, %2037
  %2040 = zext i1 %2039 to i8
  store i8 %2040, i8* %21, align 1, !tbaa !2432
  %2041 = and i32 %2038, 255
  %2042 = tail call i32 @llvm.ctpop.i32(i32 %2041) #8
  %2043 = trunc i32 %2042 to i8
  %2044 = and i8 %2043, 1
  %2045 = xor i8 %2044, 1
  store i8 %2045, i8* %22, align 1, !tbaa !2446
  %2046 = xor i32 %2037, %2034
  %2047 = xor i32 %2046, %2038
  %2048 = lshr i32 %2047, 4
  %2049 = trunc i32 %2048 to i8
  %2050 = and i8 %2049, 1
  store i8 %2050, i8* %23, align 1, !tbaa !2450
  %2051 = icmp eq i32 %2038, 0
  %2052 = zext i1 %2051 to i8
  store i8 %2052, i8* %24, align 1, !tbaa !2447
  %2053 = lshr i32 %2038, 31
  %2054 = trunc i32 %2053 to i8
  store i8 %2054, i8* %25, align 1, !tbaa !2448
  %2055 = lshr i32 %2034, 31
  %2056 = lshr i32 %2037, 31
  %2057 = xor i32 %2056, %2055
  %2058 = xor i32 %2053, %2055
  %2059 = add nuw nsw i32 %2058, %2057
  %2060 = icmp eq i32 %2059, 2
  %2061 = zext i1 %2060 to i8
  store i8 %2061, i8* %26, align 1, !tbaa !2449
  %2062 = icmp ne i8 %2054, 0
  %2063 = xor i1 %2062, %2060
  %.v29 = select i1 %2063, i64 20, i64 302
  %2064 = add i64 %2035, %.v29
  store i64 %2064, i64* %78, align 8, !tbaa !2428
  br i1 %2063, label %block_4009fb, label %block_400b15

block_40131f:                                     ; preds = %block_4010a0
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %2065 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 48) to double*), align 16
  %2066 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  %2067 = bitcast %union.VectorReg* %10 to i32*
  store i32 %2066, i32* %2067, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2660, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2662, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2664, align 1, !tbaa !2452
  %2068 = load <2 x float>, <2 x float>* %2196, align 1
  %2069 = extractelement <2 x float> %2068, i32 0
  %2070 = fpext float %2069 to double
  %2071 = fdiv double %2070, %2065
  store double %2071, double* %215, align 1, !tbaa !2454
  %2072 = bitcast double %2065 to <2 x i32>
  %2073 = fptrunc double %2071 to float
  store float %2073, float* %2651, align 1, !tbaa !2452
  %2074 = extractelement <2 x i32> %2072, i32 1
  store i32 %2074, i32* %2668, align 1, !tbaa !2452
  store i32 0, i32* %2669, align 1, !tbaa !2452
  store i32 0, i32* %2670, align 1, !tbaa !2452
  %2075 = load <2 x float>, <2 x float>* %2657, align 1
  %2076 = extractelement <2 x float> %2075, i32 0
  store float %2076, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %2077 = load i64, i64* @stderr, align 64
  store i64 %2077, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %2078 = add i64 %2033, -3679
  %2079 = add i64 %2033, 66
  %2080 = load i64, i64* %15, align 8, !tbaa !2428
  %2081 = add i64 %2080, -8
  %2082 = inttoptr i64 %2081 to i64*
  store i64 %2079, i64* %2082, align 8
  store i64 %2081, i64* %15, align 8, !tbaa !2428
  store i64 %2078, i64* %78, align 8, !tbaa !2428
  %2083 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.9)
  %2084 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %2085 = load i64, i64* @stderr, align 64
  store i64 %2085, i64* %RDI, align 8, !tbaa !2428
  %2086 = load i64, i64* %RBP, align 8
  %2087 = add i64 %2086, -972
  %2088 = load i32, i32* %EAX, align 4
  %2089 = add i64 %2084, 24
  store i64 %2089, i64* %PC, align 8
  %2090 = inttoptr i64 %2087 to i32*
  store i32 %2088, i32* %2090, align 4
  %2091 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2092 = add i64 %2091, -3769
  %2093 = add i64 %2091, 7
  %2094 = load i64, i64* %15, align 8, !tbaa !2428
  %2095 = add i64 %2094, -8
  %2096 = inttoptr i64 %2095 to i64*
  store i64 %2093, i64* %2096, align 8
  store i64 %2095, i64* %15, align 8, !tbaa !2428
  store i64 %2092, i64* %78, align 8, !tbaa !2428
  %2097 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2083)
  %2098 = load i64, i64* %RBP, align 8
  %2099 = add i64 %2098, -976
  %2100 = load i32, i32* %EAX, align 4
  %2101 = load i64, i64* %PC, align 8
  %2102 = add i64 %2101, 6
  store i64 %2102, i64* %PC, align 8
  %2103 = inttoptr i64 %2099 to i32*
  store i32 %2100, i32* %2103, align 4
  %2104 = load i64, i64* %PC, align 8
  %2105 = add i64 %2104, -3526
  %2106 = add i64 %2104, 5
  %2107 = load i64, i64* %15, align 8, !tbaa !2428
  %2108 = add i64 %2107, -8
  %2109 = inttoptr i64 %2108 to i64*
  store i64 %2106, i64* %2109, align 8
  store i64 %2108, i64* %15, align 8, !tbaa !2428
  store i64 %2105, i64* %78, align 8, !tbaa !2428
  %2110 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %2105, %struct.Memory* %2097)
  %2111 = load i64, i64* %RBP, align 8
  %2112 = add i64 %2111, -80
  %2113 = load i64, i64* %PC, align 8
  %2114 = add i64 %2113, 5
  store i64 %2114, i64* %PC, align 8
  %2115 = load <2 x float>, <2 x float>* %62, align 1
  %2116 = extractelement <2 x float> %2115, i32 0
  %2117 = inttoptr i64 %2112 to float*
  store float %2116, float* %2117, align 4
  %2118 = load i64, i64* %PC, align 8
  %2119 = add i64 %2118, 11
  store i64 %2119, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40139b

block_400b15:                                     ; preds = %block_4009e7
  %2120 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 12) to i32*), align 4
  %2121 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %2120, i32* %2121, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %2122 = add i64 %2064, 7419
  %2123 = add i64 %2064, 13
  %2124 = load i64, i64* %15, align 8, !tbaa !2428
  %2125 = add i64 %2124, -8
  %2126 = inttoptr i64 %2125 to i64*
  store i64 %2123, i64* %2126, align 8
  store i64 %2125, i64* %15, align 8, !tbaa !2428
  store i64 %2122, i64* %78, align 8, !tbaa !2428
  %2127 = tail call %struct.Memory* @sub_402810_epslon_renamed_(%struct.State* nonnull %0, i64 %2122, %struct.Memory* %MEMORY.10)
  %2128 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %2129 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 12) to i32*), align 4
  %2130 = bitcast %union.VectorReg* %9 to i32*
  store i32 %2129, i32* %2130, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2654, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2656, align 1, !tbaa !2452
  %2131 = load i64, i64* %RBP, align 8
  %2132 = add i64 %2131, -36
  %2133 = add i64 %2128, 23
  store i64 %2133, i64* %PC, align 8
  %2134 = load <2 x float>, <2 x float>* %62, align 1
  %2135 = extractelement <2 x float> %2134, i32 0
  %2136 = inttoptr i64 %2132 to float*
  store float %2135, float* %2136, align 4
  %2137 = load i64, i64* %RBP, align 8
  %2138 = add i64 %2137, -28
  %2139 = load i64, i64* %PC, align 8
  %2140 = add i64 %2139, 5
  store i64 %2140, i64* %PC, align 8
  %2141 = inttoptr i64 %2138 to i32*
  %2142 = load i32, i32* %2141, align 4
  %2143 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %2142, i32* %2143, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %2144 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2145 = zext i32 %2144 to i64
  store i64 %2145, i64* %RAX, align 8, !tbaa !2428
  %2146 = bitcast %union.VectorReg* %10 to <2 x i32>*
  %2147 = load <2 x i32>, <2 x i32>* %2146, align 1
  %2148 = bitcast i64* %2661 to <2 x i32>*
  %2149 = load <2 x i32>, <2 x i32>* %2148, align 1
  %2150 = sitofp i32 %2144 to float
  store float %2150, float* %2658, align 1, !tbaa !2452
  %2151 = extractelement <2 x i32> %2147, i32 1
  %2152 = bitcast i8* %2659 to i32*
  store i32 %2151, i32* %2152, align 1, !tbaa !2452
  %2153 = extractelement <2 x i32> %2149, i32 0
  %2154 = bitcast i64* %2661 to i32*
  store i32 %2153, i32* %2154, align 1, !tbaa !2452
  %2155 = extractelement <2 x i32> %2149, i32 1
  %2156 = bitcast i8* %2663 to i32*
  store i32 %2155, i32* %2156, align 1, !tbaa !2452
  %2157 = add i64 %2137, -20
  %2158 = add i64 %2139, 21
  store i64 %2158, i64* %PC, align 8
  %2159 = bitcast %union.VectorReg* %10 to <2 x float>*
  %2160 = load <2 x float>, <2 x float>* %2159, align 1
  %2161 = load <2 x i32>, <2 x i32>* %2148, align 1
  %2162 = inttoptr i64 %2157 to float*
  %2163 = load float, float* %2162, align 4
  %2164 = extractelement <2 x float> %2160, i32 0
  %2165 = fmul float %2164, %2163
  store float %2165, float* %2658, align 1, !tbaa !2452
  %2166 = bitcast <2 x float> %2160 to <2 x i32>
  %2167 = extractelement <2 x i32> %2166, i32 1
  store i32 %2167, i32* %2152, align 1, !tbaa !2452
  %2168 = extractelement <2 x i32> %2161, i32 0
  store i32 %2168, i32* %2154, align 1, !tbaa !2452
  %2169 = extractelement <2 x i32> %2161, i32 1
  store i32 %2169, i32* %2156, align 1, !tbaa !2452
  %2170 = add i64 %2137, -24
  %2171 = add i64 %2139, 26
  store i64 %2171, i64* %PC, align 8
  %2172 = load <2 x float>, <2 x float>* %2159, align 1
  %2173 = load <2 x i32>, <2 x i32>* %2148, align 1
  %2174 = inttoptr i64 %2170 to float*
  %2175 = load float, float* %2174, align 4
  %2176 = extractelement <2 x float> %2172, i32 0
  %2177 = fmul float %2176, %2175
  store float %2177, float* %2658, align 1, !tbaa !2452
  %2178 = bitcast <2 x float> %2172 to <2 x i32>
  %2179 = extractelement <2 x i32> %2178, i32 1
  store i32 %2179, i32* %2152, align 1, !tbaa !2452
  %2180 = extractelement <2 x i32> %2173, i32 0
  store i32 %2180, i32* %2154, align 1, !tbaa !2452
  %2181 = extractelement <2 x i32> %2173, i32 1
  store i32 %2181, i32* %2156, align 1, !tbaa !2452
  %2182 = add i64 %2137, -36
  %2183 = add i64 %2139, 31
  store i64 %2183, i64* %PC, align 8
  %2184 = load <2 x float>, <2 x float>* %2159, align 1
  %2185 = load <2 x i32>, <2 x i32>* %2148, align 1
  %2186 = inttoptr i64 %2182 to float*
  %2187 = load float, float* %2186, align 4
  %2188 = extractelement <2 x float> %2184, i32 0
  %2189 = fmul float %2188, %2187
  store float %2189, float* %2658, align 1, !tbaa !2452
  %2190 = bitcast <2 x float> %2184 to <2 x i32>
  %2191 = extractelement <2 x i32> %2190, i32 1
  store i32 %2191, i32* %2152, align 1, !tbaa !2452
  %2192 = extractelement <2 x i32> %2185, i32 0
  store i32 %2192, i32* %2154, align 1, !tbaa !2452
  %2193 = extractelement <2 x i32> %2185, i32 1
  store i32 %2193, i32* %2156, align 1, !tbaa !2452
  %2194 = load <2 x float>, <2 x float>* %326, align 1
  %2195 = load <2 x i32>, <2 x i32>* %259, align 1
  %2196 = bitcast %union.VectorReg* %10 to <2 x float>*
  %2197 = load <2 x float>, <2 x float>* %2196, align 1
  %2198 = extractelement <2 x float> %2194, i32 0
  %2199 = extractelement <2 x float> %2197, i32 0
  %2200 = fdiv float %2198, %2199
  store float %2200, float* %29, align 1, !tbaa !2452
  %2201 = bitcast <2 x float> %2194 to <2 x i32>
  %2202 = extractelement <2 x i32> %2201, i32 1
  store i32 %2202, i32* %262, align 1, !tbaa !2452
  %2203 = extractelement <2 x i32> %2195, i32 0
  store i32 %2203, i32* %264, align 1, !tbaa !2452
  %2204 = extractelement <2 x i32> %2195, i32 1
  store i32 %2204, i32* %266, align 1, !tbaa !2452
  %2205 = load i64, i64* %RBP, align 8
  %2206 = add i64 %2205, -32
  %2207 = add i64 %2139, 40
  store i64 %2207, i64* %PC, align 8
  %2208 = load <2 x float>, <2 x float>* %62, align 1
  %2209 = extractelement <2 x float> %2208, i32 0
  %2210 = inttoptr i64 %2206 to float*
  store float %2209, float* %2210, align 4
  %2211 = load i64, i64* %RBP, align 8
  %2212 = add i64 %2211, -36
  %2213 = load i64, i64* %PC, align 8
  %2214 = add i64 %2213, 5
  store i64 %2214, i64* %PC, align 8
  %2215 = inttoptr i64 %2212 to i32*
  %2216 = load i32, i32* %2215, align 4
  %2217 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %2216, i32* %2217, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  %2218 = add i64 %2211, -48
  %2219 = add i64 %2213, 10
  store i64 %2219, i64* %PC, align 8
  %2220 = load <2 x float>, <2 x float>* %62, align 1
  %2221 = extractelement <2 x float> %2220, i32 0
  %2222 = inttoptr i64 %2218 to float*
  store float %2221, float* %2222, align 4
  %2223 = load i64, i64* %PC, align 8
  %2224 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to i32*), align 16
  %2225 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %2224, i32* %2225, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %2226 = load <2 x float>, <2 x float>* %326, align 1
  %2227 = load <2 x i32>, <2 x i32>* %259, align 1
  %2228 = load <2 x float>, <2 x float>* %2657, align 1
  %2229 = extractelement <2 x float> %2226, i32 0
  %2230 = extractelement <2 x float> %2228, i32 0
  %2231 = fsub float %2229, %2230
  store float %2231, float* %29, align 1, !tbaa !2452
  %2232 = bitcast <2 x float> %2226 to <2 x i32>
  %2233 = extractelement <2 x i32> %2232, i32 1
  store i32 %2233, i32* %262, align 1, !tbaa !2452
  %2234 = extractelement <2 x i32> %2227, i32 0
  store i32 %2234, i32* %264, align 1, !tbaa !2452
  %2235 = extractelement <2 x i32> %2227, i32 1
  store i32 %2235, i32* %266, align 1, !tbaa !2452
  %2236 = load i64, i64* %RBP, align 8
  %2237 = add i64 %2236, -52
  %2238 = add i64 %2223, 18
  store i64 %2238, i64* %PC, align 8
  %2239 = load <2 x float>, <2 x float>* %62, align 1
  %2240 = extractelement <2 x float> %2239, i32 0
  %2241 = inttoptr i64 %2237 to float*
  store float %2240, float* %2241, align 4
  %2242 = load i64, i64* %PC, align 8
  %2243 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2244 = add i32 %2243, -1
  %2245 = zext i32 %2244 to i64
  store i64 %2245, i64* %RAX, align 8, !tbaa !2428
  %2246 = icmp eq i32 %2243, 0
  %2247 = zext i1 %2246 to i8
  store i8 %2247, i8* %21, align 1, !tbaa !2432
  %2248 = and i32 %2244, 255
  %2249 = tail call i32 @llvm.ctpop.i32(i32 %2248) #8
  %2250 = trunc i32 %2249 to i8
  %2251 = and i8 %2250, 1
  %2252 = xor i8 %2251, 1
  store i8 %2252, i8* %22, align 1, !tbaa !2446
  %2253 = xor i32 %2243, %2244
  %2254 = lshr i32 %2253, 4
  %2255 = trunc i32 %2254 to i8
  %2256 = and i8 %2255, 1
  store i8 %2256, i8* %23, align 1, !tbaa !2450
  %2257 = icmp eq i32 %2244, 0
  %2258 = zext i1 %2257 to i8
  store i8 %2258, i8* %24, align 1, !tbaa !2447
  %2259 = lshr i32 %2244, 31
  %2260 = trunc i32 %2259 to i8
  store i8 %2260, i8* %25, align 1, !tbaa !2448
  %2261 = lshr i32 %2243, 31
  %2262 = xor i32 %2259, %2261
  %2263 = add nuw nsw i32 %2262, %2261
  %2264 = icmp eq i32 %2263, 2
  %2265 = zext i1 %2264 to i8
  store i8 %2265, i8* %26, align 1, !tbaa !2449
  %2266 = sext i32 %2244 to i64
  store i64 %2266, i64* %RCX, align 8, !tbaa !2428
  %2267 = shl nsw i64 %2266, 2
  %2268 = add i64 %2267, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2269 = add i64 %2242, 22
  store i64 %2269, i64* %PC, align 8
  %2270 = inttoptr i64 %2268 to i32*
  %2271 = load i32, i32* %2270, align 4
  %2272 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %2271, i32* %2272, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %2273 = load <2 x float>, <2 x float>* %326, align 1
  %2274 = load <2 x i32>, <2 x i32>* %259, align 1
  %2275 = load <2 x float>, <2 x float>* %2657, align 1
  %2276 = extractelement <2 x float> %2273, i32 0
  %2277 = extractelement <2 x float> %2275, i32 0
  %2278 = fsub float %2276, %2277
  store float %2278, float* %29, align 1, !tbaa !2452
  %2279 = bitcast <2 x float> %2273 to <2 x i32>
  %2280 = extractelement <2 x i32> %2279, i32 1
  store i32 %2280, i32* %262, align 1, !tbaa !2452
  %2281 = extractelement <2 x i32> %2274, i32 0
  store i32 %2281, i32* %264, align 1, !tbaa !2452
  %2282 = extractelement <2 x i32> %2274, i32 1
  store i32 %2282, i32* %266, align 1, !tbaa !2452
  %2283 = load i64, i64* %RBP, align 8
  %2284 = add i64 %2283, -56
  %2285 = add i64 %2242, 31
  store i64 %2285, i64* %PC, align 8
  %2286 = load <2 x float>, <2 x float>* %62, align 1
  %2287 = extractelement <2 x float> %2286, i32 0
  %2288 = inttoptr i64 %2284 to float*
  store float %2287, float* %2288, align 4
  %2289 = load i64, i64* %PC, align 8
  %2290 = load i64, i64* @stderr, align 64
  store i64 %2290, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2291 = add i64 %2289, -1756
  %2292 = add i64 %2289, 15
  %2293 = load i64, i64* %15, align 8, !tbaa !2428
  %2294 = add i64 %2293, -8
  %2295 = inttoptr i64 %2294 to i64*
  store i64 %2292, i64* %2295, align 8
  store i64 %2294, i64* %15, align 8, !tbaa !2428
  store i64 %2291, i64* %78, align 8, !tbaa !2428
  %2296 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2127)
  %2297 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %2298 = load i64, i64* @stderr, align 64
  store i64 %2298, i64* %RDI, align 8, !tbaa !2428
  %2299 = load i64, i64* %RBP, align 8
  %2300 = add i64 %2299, -908
  %2301 = load i32, i32* %EAX, align 4
  %2302 = add i64 %2297, 24
  store i64 %2302, i64* %PC, align 8
  %2303 = inttoptr i64 %2300 to i32*
  store i32 %2301, i32* %2303, align 4
  %2304 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2305 = add i64 %2304, -1795
  %2306 = add i64 %2304, 7
  %2307 = load i64, i64* %15, align 8, !tbaa !2428
  %2308 = add i64 %2307, -8
  %2309 = inttoptr i64 %2308 to i64*
  store i64 %2306, i64* %2309, align 8
  store i64 %2308, i64* %15, align 8, !tbaa !2428
  store i64 %2305, i64* %78, align 8, !tbaa !2428
  %2310 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2296)
  %2311 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %2312 = load i64, i64* @stderr, align 64
  store i64 %2312, i64* %RDI, align 8, !tbaa !2428
  %2313 = load i64, i64* %RBP, align 8
  %2314 = add i64 %2313, -32
  %2315 = add i64 %2311, 23
  store i64 %2315, i64* %PC, align 8
  %2316 = inttoptr i64 %2314 to i32*
  %2317 = load i32, i32* %2316, align 4
  %2318 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %2317, i32* %2318, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %2319 = load <2 x float>, <2 x float>* %62, align 1
  %2320 = extractelement <2 x float> %2319, i32 0
  %2321 = fpext float %2320 to double
  store double %2321, double* %196, align 1, !tbaa !2454
  %2322 = add i64 %2313, -28
  %2323 = add i64 %2311, 32
  store i64 %2323, i64* %PC, align 8
  %2324 = inttoptr i64 %2322 to i32*
  %2325 = load i32, i32* %2324, align 4
  %2326 = bitcast %union.VectorReg* %9 to i32*
  store i32 %2325, i32* %2326, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2654, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2656, align 1, !tbaa !2452
  %2327 = load <2 x float>, <2 x float>* %2657, align 1
  %2328 = extractelement <2 x float> %2327, i32 0
  %2329 = fpext float %2328 to double
  store double %2329, double* %200, align 1, !tbaa !2454
  %2330 = add i64 %2313, -48
  %2331 = add i64 %2311, 41
  store i64 %2331, i64* %PC, align 8
  %2332 = inttoptr i64 %2330 to i32*
  %2333 = load i32, i32* %2332, align 4
  %2334 = bitcast %union.VectorReg* %10 to i32*
  store i32 %2333, i32* %2334, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2660, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2662, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2664, align 1, !tbaa !2452
  %2335 = load <2 x float>, <2 x float>* %2196, align 1
  %2336 = extractelement <2 x float> %2335, i32 0
  %2337 = fpext float %2336 to double
  store double %2337, double* %215, align 1, !tbaa !2454
  %2338 = add i64 %2313, -52
  %2339 = add i64 %2311, 50
  store i64 %2339, i64* %PC, align 8
  %2340 = inttoptr i64 %2338 to i32*
  %2341 = load i32, i32* %2340, align 4
  %2342 = bitcast %union.VectorReg* %11 to float*
  %2343 = bitcast %union.VectorReg* %11 to i32*
  store i32 %2341, i32* %2343, align 1, !tbaa !2452
  %2344 = bitcast i8* %221 to float*
  store float 0.000000e+00, float* %2344, align 1, !tbaa !2452
  %2345 = bitcast i64* %223 to float*
  store float 0.000000e+00, float* %2345, align 1, !tbaa !2452
  %2346 = bitcast i8* %225 to float*
  store float 0.000000e+00, float* %2346, align 1, !tbaa !2452
  %2347 = bitcast %union.VectorReg* %11 to <2 x float>*
  %2348 = load <2 x float>, <2 x float>* %2347, align 1
  %2349 = extractelement <2 x float> %2348, i32 0
  %2350 = fpext float %2349 to double
  store double %2350, double* %227, align 1, !tbaa !2454
  %2351 = bitcast %union.VectorReg* %12 to i8*
  %2352 = add i64 %2313, -56
  %2353 = add i64 %2311, 59
  store i64 %2353, i64* %PC, align 8
  %2354 = inttoptr i64 %2352 to i32*
  %2355 = load i32, i32* %2354, align 4
  %2356 = bitcast %union.VectorReg* %12 to i32*
  store i32 %2355, i32* %2356, align 1, !tbaa !2452
  %2357 = getelementptr inbounds i8, i8* %2351, i64 4
  %2358 = bitcast i8* %2357 to float*
  store float 0.000000e+00, float* %2358, align 1, !tbaa !2452
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %2360 = bitcast i64* %2359 to float*
  store float 0.000000e+00, float* %2360, align 1, !tbaa !2452
  %2361 = getelementptr inbounds i8, i8* %2351, i64 12
  %2362 = bitcast i8* %2361 to float*
  store float 0.000000e+00, float* %2362, align 1, !tbaa !2452
  %2363 = bitcast %union.VectorReg* %12 to <2 x float>*
  %2364 = load <2 x float>, <2 x float>* %2363, align 1
  %2365 = extractelement <2 x float> %2364, i32 0
  %2366 = fpext float %2365 to double
  %2367 = bitcast %union.VectorReg* %12 to double*
  store double %2366, double* %2367, align 1, !tbaa !2454
  %2368 = add i64 %2313, -912
  %2369 = load i32, i32* %EAX, align 4
  %2370 = add i64 %2311, 69
  store i64 %2370, i64* %PC, align 8
  %2371 = inttoptr i64 %2368 to i32*
  store i32 %2369, i32* %2371, align 4
  %2372 = load i64, i64* %PC, align 8
  store i8 5, i8* %AL, align 1, !tbaa !2456
  %2373 = add i64 %2372, -1871
  %2374 = add i64 %2372, 7
  %2375 = load i64, i64* %15, align 8, !tbaa !2428
  %2376 = add i64 %2375, -8
  %2377 = inttoptr i64 %2376 to i64*
  store i64 %2374, i64* %2377, align 8
  store i64 %2376, i64* %15, align 8, !tbaa !2428
  store i64 %2373, i64* %78, align 8, !tbaa !2428
  %2378 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2310)
  %2379 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %2380 = load i64, i64* @stderr, align 64
  store i64 %2380, i64* %RDI, align 8, !tbaa !2428
  %2381 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2382 = zext i32 %2381 to i64
  store i64 %2382, i64* %RDX, align 8, !tbaa !2428
  %2383 = load i64, i64* %RBP, align 8
  %2384 = add i64 %2383, -916
  %2385 = load i32, i32* %EAX, align 4
  %2386 = add i64 %2379, 31
  store i64 %2386, i64* %PC, align 8
  %2387 = inttoptr i64 %2384 to i32*
  store i32 %2385, i32* %2387, align 4
  %2388 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2389 = add i64 %2388, -1909
  %2390 = add i64 %2388, 7
  %2391 = load i64, i64* %15, align 8, !tbaa !2428
  %2392 = add i64 %2391, -8
  %2393 = inttoptr i64 %2392 to i64*
  store i64 %2390, i64* %2393, align 8
  store i64 %2392, i64* %15, align 8, !tbaa !2428
  store i64 %2389, i64* %78, align 8, !tbaa !2428
  %2394 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2378)
  %2395 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %2396 = load i64, i64* @stderr, align 64
  store i64 %2396, i64* %RDI, align 8, !tbaa !2428
  %2397 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2398 = zext i32 %2397 to i64
  store i64 %2398, i64* %RDX, align 8, !tbaa !2428
  %2399 = load i64, i64* %RBP, align 8
  %2400 = add i64 %2399, -920
  %2401 = load i32, i32* %EAX, align 4
  %2402 = add i64 %2395, 31
  store i64 %2402, i64* %PC, align 8
  %2403 = inttoptr i64 %2400 to i32*
  store i32 %2401, i32* %2403, align 4
  %2404 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2405 = add i64 %2404, -1947
  %2406 = add i64 %2404, 7
  %2407 = load i64, i64* %15, align 8, !tbaa !2428
  %2408 = add i64 %2407, -8
  %2409 = inttoptr i64 %2408 to i64*
  store i64 %2406, i64* %2409, align 8
  store i64 %2408, i64* %15, align 8, !tbaa !2428
  store i64 %2405, i64* %78, align 8, !tbaa !2428
  %2410 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2394)
  %2411 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %2412 = load i64, i64* @stderr, align 64
  store i64 %2412, i64* %RDI, align 8, !tbaa !2428
  %2413 = load i64, i64* %RBP, align 8
  %2414 = add i64 %2413, -924
  %2415 = load i32, i32* %EAX, align 4
  %2416 = add i64 %2411, 24
  store i64 %2416, i64* %PC, align 8
  %2417 = inttoptr i64 %2414 to i32*
  store i32 %2415, i32* %2417, align 4
  %2418 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2419 = add i64 %2418, -1978
  %2420 = add i64 %2418, 7
  %2421 = load i64, i64* %15, align 8, !tbaa !2428
  %2422 = add i64 %2421, -8
  %2423 = inttoptr i64 %2422 to i64*
  store i64 %2420, i64* %2423, align 8
  store i64 %2422, i64* %15, align 8, !tbaa !2428
  store i64 %2419, i64* %78, align 8, !tbaa !2428
  %2424 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2410)
  %2425 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %2426 = load i64, i64* @stderr, align 64
  store i64 %2426, i64* %RDI, align 8, !tbaa !2428
  %2427 = load i64, i64* %RBP, align 8
  %2428 = add i64 %2427, -928
  %2429 = load i32, i32* %EAX, align 4
  %2430 = add i64 %2425, 24
  store i64 %2430, i64* %PC, align 8
  %2431 = inttoptr i64 %2428 to i32*
  store i32 %2429, i32* %2431, align 4
  %2432 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2433 = add i64 %2432, -2009
  %2434 = add i64 %2432, 7
  %2435 = load i64, i64* %15, align 8, !tbaa !2428
  %2436 = add i64 %2435, -8
  %2437 = inttoptr i64 %2436 to i64*
  store i64 %2434, i64* %2437, align 8
  store i64 %2436, i64* %15, align 8, !tbaa !2428
  store i64 %2433, i64* %78, align 8, !tbaa !2428
  %2438 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2424)
  %2439 = load i64, i64* %PC, align 8
  store i32 0, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %2440 = load i64, i64* %RBP, align 8
  %2441 = add i64 %2440, -16
  %2442 = add i64 %2439, 8
  store i64 %2442, i64* %PC, align 8
  %2443 = inttoptr i64 %2441 to i32*
  %2444 = load i32, i32* %2443, align 4
  %2445 = bitcast %union.VectorReg* %9 to i32*
  store i32 %2444, i32* %2445, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2654, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2656, align 1, !tbaa !2452
  %2446 = load <2 x float>, <2 x float>* %2657, align 1
  %2447 = extractelement <2 x float> %2446, i32 0
  store float %2447, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*), align 8
  %2448 = add i64 %2439, 22
  store i64 %2448, i64* %PC, align 8
  %2449 = inttoptr i64 %2441 to i32*
  %2450 = load i32, i32* %2449, align 4
  %2451 = bitcast %union.VectorReg* %9 to i32*
  store i32 %2450, i32* %2451, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2654, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2656, align 1, !tbaa !2452
  %2452 = load <2 x float>, <2 x float>* %2657, align 1
  %2453 = extractelement <2 x float> %2452, i32 0
  %2454 = fpext float %2453 to double
  store double %2454, double* %200, align 1, !tbaa !2454
  %2455 = add i64 %2439, 30
  store i64 %2455, i64* %PC, align 8
  %2456 = load double, double* %256, align 1
  %2457 = fcmp uno double %2454, %2456
  br i1 %2457, label %2458, label %2468

; <label>:2458:                                   ; preds = %block_400b15
  %2459 = fadd double %2454, %2456
  %2460 = bitcast double %2459 to i64
  %2461 = and i64 %2460, 9221120237041090560
  %2462 = icmp eq i64 %2461, 9218868437227405312
  %2463 = and i64 %2460, 2251799813685247
  %2464 = icmp ne i64 %2463, 0
  %2465 = and i1 %2462, %2464
  br i1 %2465, label %2466, label %2474

; <label>:2466:                                   ; preds = %2458
  %2467 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2455, %struct.Memory* %2438) #9
  %.pre17 = load i64, i64* %RBP, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:2468:                                   ; preds = %block_400b15
  %2469 = fcmp ogt double %2454, %2456
  br i1 %2469, label %2474, label %2470

; <label>:2470:                                   ; preds = %2468
  %2471 = fcmp olt double %2454, %2456
  br i1 %2471, label %2474, label %2472

; <label>:2472:                                   ; preds = %2470
  %2473 = fcmp oeq double %2454, %2456
  br i1 %2473, label %2474, label %2478

; <label>:2474:                                   ; preds = %2472, %2470, %2468, %2458
  %2475 = phi i8 [ 0, %2468 ], [ 0, %2470 ], [ 1, %2472 ], [ 1, %2458 ]
  %2476 = phi i8 [ 0, %2468 ], [ 0, %2470 ], [ 0, %2472 ], [ 1, %2458 ]
  %2477 = phi i8 [ 0, %2468 ], [ 1, %2470 ], [ 0, %2472 ], [ 1, %2458 ]
  store i8 %2475, i8* %24, align 1, !tbaa !2456
  store i8 %2476, i8* %22, align 1, !tbaa !2456
  store i8 %2477, i8* %21, align 1, !tbaa !2456
  br label %2478

; <label>:2478:                                   ; preds = %2474, %2472
  store i8 0, i8* %26, align 1, !tbaa !2456
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %23, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %2478, %2466
  %2479 = phi i64 [ %.pre18, %2466 ], [ %2455, %2478 ]
  %2480 = phi i64 [ %.pre17, %2466 ], [ %2440, %2478 ]
  %2481 = phi %struct.Memory* [ %2467, %2466 ], [ %2438, %2478 ]
  %2482 = add i64 %2480, -932
  %2483 = load i32, i32* %EAX, align 4
  %2484 = add i64 %2479, 6
  store i64 %2484, i64* %PC, align 8
  %2485 = inttoptr i64 %2482 to i32*
  store i32 %2483, i32* %2485, align 4
  %2486 = load i64, i64* %PC, align 8
  %2487 = load i8, i8* %21, align 1, !tbaa !2432
  %2488 = load i8, i8* %24, align 1, !tbaa !2447
  %2489 = or i8 %2488, %2487
  %2490 = icmp ne i8 %2489, 0
  %.v32 = select i1 %2490, i64 96, i64 6
  %2491 = add i64 %2486, %.v32
  store i64 %2491, i64* %78, align 8, !tbaa !2428
  br i1 %2490, label %block_400d24, label %block_400cca

block_40093d:                                     ; preds = %block_400907, %block_400951
  %2492 = phi i32 [ 0, %block_400907 ], [ %747, %block_400951 ]
  %2493 = phi i64 [ %3198, %block_400907 ], [ %771, %block_400951 ]
  %2494 = zext i32 %2492 to i64
  store i64 %2494, i64* %RAX, align 8, !tbaa !2428
  %2495 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2496 = sub i32 %2492, %2495
  %2497 = icmp ult i32 %2492, %2495
  %2498 = zext i1 %2497 to i8
  store i8 %2498, i8* %21, align 1, !tbaa !2432
  %2499 = and i32 %2496, 255
  %2500 = tail call i32 @llvm.ctpop.i32(i32 %2499) #8
  %2501 = trunc i32 %2500 to i8
  %2502 = and i8 %2501, 1
  %2503 = xor i8 %2502, 1
  store i8 %2503, i8* %22, align 1, !tbaa !2446
  %2504 = xor i32 %2495, %2492
  %2505 = xor i32 %2504, %2496
  %2506 = lshr i32 %2505, 4
  %2507 = trunc i32 %2506 to i8
  %2508 = and i8 %2507, 1
  store i8 %2508, i8* %23, align 1, !tbaa !2450
  %2509 = icmp eq i32 %2496, 0
  %2510 = zext i1 %2509 to i8
  store i8 %2510, i8* %24, align 1, !tbaa !2447
  %2511 = lshr i32 %2496, 31
  %2512 = trunc i32 %2511 to i8
  store i8 %2512, i8* %25, align 1, !tbaa !2448
  %2513 = lshr i32 %2492, 31
  %2514 = lshr i32 %2495, 31
  %2515 = xor i32 %2514, %2513
  %2516 = xor i32 %2511, %2513
  %2517 = add nuw nsw i32 %2516, %2515
  %2518 = icmp eq i32 %2517, 2
  %2519 = zext i1 %2518 to i8
  store i8 %2519, i8* %26, align 1, !tbaa !2449
  %2520 = icmp ne i8 %2512, 0
  %2521 = xor i1 %2520, %2518
  %.v28 = select i1 %2521, i64 20, i64 90
  %2522 = add i64 %2493, %.v28
  store i64 %2522, i64* %78, align 8, !tbaa !2428
  br i1 %2521, label %block_400951, label %block_400997

block_400d9e:                                     ; preds = %block_400d80, %block_400dae
  %2523 = phi i32 [ 0, %block_400d80 ], [ %2856, %block_400dae ]
  %2524 = phi i64 [ %3362, %block_400d80 ], [ %2880, %block_400dae ]
  %MEMORY.12 = phi %struct.Memory* [ %3322, %block_400d80 ], [ %2853, %block_400dae ]
  %2525 = zext i32 %2523 to i64
  store i64 %2525, i64* %RAX, align 8, !tbaa !2428
  %2526 = load i64, i64* %RBP, align 8
  %2527 = add i64 %2526, -68
  %2528 = add i64 %2524, 10
  store i64 %2528, i64* %PC, align 8
  %2529 = inttoptr i64 %2527 to i32*
  %2530 = load i32, i32* %2529, align 4
  %2531 = sub i32 %2523, %2530
  %2532 = icmp ult i32 %2523, %2530
  %2533 = zext i1 %2532 to i8
  store i8 %2533, i8* %21, align 1, !tbaa !2432
  %2534 = and i32 %2531, 255
  %2535 = tail call i32 @llvm.ctpop.i32(i32 %2534) #8
  %2536 = trunc i32 %2535 to i8
  %2537 = and i8 %2536, 1
  %2538 = xor i8 %2537, 1
  store i8 %2538, i8* %22, align 1, !tbaa !2446
  %2539 = xor i32 %2530, %2523
  %2540 = xor i32 %2539, %2531
  %2541 = lshr i32 %2540, 4
  %2542 = trunc i32 %2541 to i8
  %2543 = and i8 %2542, 1
  store i8 %2543, i8* %23, align 1, !tbaa !2450
  %2544 = icmp eq i32 %2531, 0
  %2545 = zext i1 %2544 to i8
  store i8 %2545, i8* %24, align 1, !tbaa !2447
  %2546 = lshr i32 %2531, 31
  %2547 = trunc i32 %2546 to i8
  store i8 %2547, i8* %25, align 1, !tbaa !2448
  %2548 = lshr i32 %2523, 31
  %2549 = lshr i32 %2530, 31
  %2550 = xor i32 %2549, %2548
  %2551 = xor i32 %2546, %2548
  %2552 = add nuw nsw i32 %2551, %2550
  %2553 = icmp eq i32 %2552, 2
  %2554 = zext i1 %2553 to i8
  store i8 %2554, i8* %26, align 1, !tbaa !2449
  %2555 = icmp ne i8 %2547, 0
  %2556 = xor i1 %2555, %2553
  %.v33 = select i1 %2556, i64 16, i64 81
  %2557 = add i64 %2524, %.v33
  store i64 %2557, i64* %78, align 8, !tbaa !2428
  br i1 %2556, label %block_400dae, label %block_400def

block_400ee0:                                     ; preds = %block_400ef4, %block_400ec2
  %2558 = phi i32 [ 0, %block_400ec2 ], [ %2698, %block_400ef4 ]
  %2559 = phi i64 [ %1641, %block_400ec2 ], [ %2722, %block_400ef4 ]
  %MEMORY.13 = phi %struct.Memory* [ %1601, %block_400ec2 ], [ %2695, %block_400ef4 ]
  %2560 = zext i32 %2558 to i64
  store i64 %2560, i64* %RAX, align 8, !tbaa !2428
  %2561 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2562 = sub i32 %2558, %2561
  %2563 = icmp ult i32 %2558, %2561
  %2564 = zext i1 %2563 to i8
  store i8 %2564, i8* %21, align 1, !tbaa !2432
  %2565 = and i32 %2562, 255
  %2566 = tail call i32 @llvm.ctpop.i32(i32 %2565) #8
  %2567 = trunc i32 %2566 to i8
  %2568 = and i8 %2567, 1
  %2569 = xor i8 %2568, 1
  store i8 %2569, i8* %22, align 1, !tbaa !2446
  %2570 = xor i32 %2561, %2558
  %2571 = xor i32 %2570, %2562
  %2572 = lshr i32 %2571, 4
  %2573 = trunc i32 %2572 to i8
  %2574 = and i8 %2573, 1
  store i8 %2574, i8* %23, align 1, !tbaa !2450
  %2575 = icmp eq i32 %2562, 0
  %2576 = zext i1 %2575 to i8
  store i8 %2576, i8* %24, align 1, !tbaa !2447
  %2577 = lshr i32 %2562, 31
  %2578 = trunc i32 %2577 to i8
  store i8 %2578, i8* %25, align 1, !tbaa !2448
  %2579 = lshr i32 %2558, 31
  %2580 = lshr i32 %2561, 31
  %2581 = xor i32 %2580, %2579
  %2582 = xor i32 %2577, %2579
  %2583 = add nuw nsw i32 %2582, %2581
  %2584 = icmp eq i32 %2583, 2
  %2585 = zext i1 %2584 to i8
  store i8 %2585, i8* %26, align 1, !tbaa !2449
  %2586 = icmp ne i8 %2578, 0
  %2587 = xor i1 %2586, %2584
  %.v36 = select i1 %2587, i64 20, i64 134
  %2588 = add i64 %2559, %.v36
  store i64 %2588, i64* %78, align 8, !tbaa !2428
  br i1 %2587, label %block_400ef4, label %block_400f66

block_400a44:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %2589 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2590 = sext i32 %2589 to i64
  store i64 %2590, i64* %RAX, align 8, !tbaa !2428
  %2591 = shl nsw i64 %2590, 2
  %2592 = add i64 %2591, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2593 = add i64 %2842, 17
  store i64 %2593, i64* %PC, align 8
  %2594 = inttoptr i64 %2592 to i32*
  %2595 = load i32, i32* %2594, align 4
  %2596 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %2595, i32* %2596, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %2597 = load <2 x float>, <2 x float>* %62, align 1
  %2598 = extractelement <2 x float> %2597, i32 0
  %2599 = fpext float %2598 to double
  %2600 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %2601 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %2602 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %2603 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %2604 = bitcast %union.VectorReg* %9 to i32*
  store i32 %2600, i32* %2604, align 1, !tbaa !2452
  %2605 = bitcast i8* %2652 to i32*
  store i32 %2601, i32* %2605, align 1, !tbaa !2452
  %2606 = bitcast i64* %202 to i32*
  store i32 %2602, i32* %2606, align 1, !tbaa !2452
  %2607 = bitcast i8* %2655 to i32*
  store i32 %2603, i32* %2607, align 1, !tbaa !2452
  %2608 = bitcast double %2599 to i64
  %2609 = load i64, i64* %33, align 1
  %2610 = load i64, i64* %2671, align 1
  %2611 = load i64, i64* %2672, align 1
  %2612 = and i64 %2610, %2608
  %2613 = and i64 %2611, %2609
  %2614 = trunc i64 %2612 to i32
  %2615 = lshr i64 %2612, 32
  %2616 = trunc i64 %2615 to i32
  store i32 %2614, i32* %3203, align 1, !tbaa !2451
  store i32 %2616, i32* %262, align 1, !tbaa !2451
  %2617 = trunc i64 %2613 to i32
  store i32 %2617, i32* %264, align 1, !tbaa !2451
  %2618 = lshr i64 %2613, 32
  %2619 = trunc i64 %2618 to i32
  store i32 %2619, i32* %266, align 1, !tbaa !2451
  %2620 = load i64, i64* %RBP, align 8
  %2621 = add i64 %2620, -896
  %2622 = add i64 %2842, 40
  store i64 %2622, i64* %PC, align 8
  %2623 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2624 = load i64, i64* %2623, align 1
  %2625 = inttoptr i64 %2621 to i64*
  store i64 %2624, i64* %2625, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_400a6c

block_400997:                                     ; preds = %block_40093d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %2626 = zext i32 %2495 to i64
  store i64 %2626, i64* %RDI, align 8, !tbaa !2428
  store i64 %2626, i64* %RDX, align 8, !tbaa !2428
  %2627 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2628 = zext i32 %2627 to i64
  store i64 %2628, i64* %RCX, align 8, !tbaa !2428
  %2629 = add i64 %2522, 5753
  %2630 = add i64 %2522, 56
  %2631 = load i64, i64* %15, align 8, !tbaa !2428
  %2632 = add i64 %2631, -8
  %2633 = inttoptr i64 %2632 to i64*
  store i64 %2630, i64* %2633, align 8
  store i64 %2632, i64* %15, align 8, !tbaa !2428
  store i64 %2629, i64* %78, align 8, !tbaa !2428
  %2634 = tail call %struct.Memory* @sub_402010_dmxpy_renamed_(%struct.State* nonnull %0, i64 %2629, %struct.Memory* %3196)
  %2635 = load i64, i64* %PC, align 8
  store i32 0, i32* %3203, align 1, !tbaa !2451
  store i32 0, i32* %262, align 1, !tbaa !2451
  store i32 0, i32* %264, align 1, !tbaa !2451
  store i32 0, i32* %266, align 1, !tbaa !2451
  %2636 = load i64, i64* %RBP, align 8
  %2637 = add i64 %2636, -28
  %2638 = add i64 %2635, 8
  store i64 %2638, i64* %PC, align 8
  %2639 = load <2 x float>, <2 x float>* %62, align 1
  %2640 = extractelement <2 x float> %2639, i32 0
  %2641 = inttoptr i64 %2637 to float*
  store float %2640, float* %2641, align 4
  %2642 = load i64, i64* %RBP, align 8
  %2643 = add i64 %2642, -24
  %2644 = load i64, i64* %PC, align 8
  %2645 = add i64 %2644, 5
  store i64 %2645, i64* %PC, align 8
  %2646 = load <2 x float>, <2 x float>* %62, align 1
  %2647 = extractelement <2 x float> %2646, i32 0
  %2648 = inttoptr i64 %2643 to float*
  store float %2647, float* %2648, align 4
  %2649 = load i64, i64* %PC, align 8
  %2650 = add i64 %2649, 11
  store i64 %2650, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2651 = bitcast %union.VectorReg* %9 to float*
  %2652 = getelementptr inbounds i8, i8* %198, i64 4
  %2653 = bitcast i8* %2652 to float*
  %2654 = bitcast i64* %202 to float*
  %2655 = getelementptr inbounds i8, i8* %198, i64 12
  %2656 = bitcast i8* %2655 to float*
  %2657 = bitcast %union.VectorReg* %9 to <2 x float>*
  %2658 = bitcast %union.VectorReg* %10 to float*
  %2659 = getelementptr inbounds i8, i8* %212, i64 4
  %2660 = bitcast i8* %2659 to float*
  %2661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %2662 = bitcast i64* %2661 to float*
  %2663 = getelementptr inbounds i8, i8* %212, i64 12
  %2664 = bitcast i8* %2663 to float*
  %2665 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  %2666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %2667 = bitcast %union.VectorReg* %9 to i32*
  %2668 = bitcast i8* %2652 to i32*
  %2669 = bitcast i64* %202 to i32*
  %2670 = bitcast i8* %2655 to i32*
  %2671 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %2672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  br label %block_4009e7

block_400ef4:                                     ; preds = %block_400ee0
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2673 = load i64, i64* %RBP, align 8
  %2674 = add i64 %2673, -20
  store i64 %2674, i64* %R8, align 8, !tbaa !2428
  %2675 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2676 = zext i32 %2675 to i64
  store i64 %2676, i64* %RSI, align 8, !tbaa !2428
  %2677 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2678 = zext i32 %2677 to i64
  store i64 %2678, i64* %RDX, align 8, !tbaa !2428
  %2679 = add i64 %2588, 2236
  %2680 = add i64 %2588, 43
  %2681 = load i64, i64* %15, align 8, !tbaa !2428
  %2682 = add i64 %2681, -8
  %2683 = inttoptr i64 %2682 to i64*
  store i64 %2680, i64* %2683, align 8
  store i64 %2682, i64* %15, align 8, !tbaa !2428
  store i64 %2679, i64* %78, align 8, !tbaa !2428
  %2684 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2679, %struct.Memory* %MEMORY.13)
  %2685 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2686 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2687 = zext i32 %2686 to i64
  store i64 %2687, i64* %RSI, align 8, !tbaa !2428
  %2688 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2689 = zext i32 %2688 to i64
  store i64 %2689, i64* %RDX, align 8, !tbaa !2428
  %2690 = add i64 %2685, 2657
  %2691 = add i64 %2685, 49
  %2692 = load i64, i64* %15, align 8, !tbaa !2428
  %2693 = add i64 %2692, -8
  %2694 = inttoptr i64 %2693 to i64*
  store i64 %2691, i64* %2694, align 8
  store i64 %2693, i64* %15, align 8, !tbaa !2428
  store i64 %2690, i64* %78, align 8, !tbaa !2428
  %2695 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %2690, %struct.Memory* %2684)
  %2696 = load i64, i64* %PC, align 8
  %2697 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2698 = add i32 %2697, 1
  %2699 = zext i32 %2698 to i64
  store i64 %2699, i64* %RAX, align 8, !tbaa !2428
  %2700 = icmp eq i32 %2697, -1
  %2701 = icmp eq i32 %2698, 0
  %2702 = or i1 %2700, %2701
  %2703 = zext i1 %2702 to i8
  store i8 %2703, i8* %21, align 1, !tbaa !2432
  %2704 = and i32 %2698, 255
  %2705 = tail call i32 @llvm.ctpop.i32(i32 %2704) #8
  %2706 = trunc i32 %2705 to i8
  %2707 = and i8 %2706, 1
  %2708 = xor i8 %2707, 1
  store i8 %2708, i8* %22, align 1, !tbaa !2446
  %2709 = xor i32 %2697, %2698
  %2710 = lshr i32 %2709, 4
  %2711 = trunc i32 %2710 to i8
  %2712 = and i8 %2711, 1
  store i8 %2712, i8* %23, align 1, !tbaa !2450
  %2713 = icmp eq i32 %2698, 0
  %2714 = zext i1 %2713 to i8
  store i8 %2714, i8* %24, align 1, !tbaa !2447
  %2715 = lshr i32 %2698, 31
  %2716 = trunc i32 %2715 to i8
  store i8 %2716, i8* %25, align 1, !tbaa !2448
  %2717 = lshr i32 %2697, 31
  %2718 = xor i32 %2715, %2717
  %2719 = add nuw nsw i32 %2718, %2715
  %2720 = icmp eq i32 %2719, 2
  %2721 = zext i1 %2720 to i8
  store i8 %2721, i8* %26, align 1, !tbaa !2449
  store i32 %2698, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2722 = add i64 %2696, -112
  store i64 %2722, i64* %78, align 8, !tbaa !2428
  br label %block_400ee0

block_4008bb:                                     ; preds = %block_4008cf, %block_400610
  %2723 = phi i32 [ %3061, %block_4008cf ], [ 0, %block_400610 ]
  %2724 = phi i64 [ %3085, %block_4008cf ], [ %400, %block_400610 ]
  %2725 = zext i32 %2723 to i64
  store i64 %2725, i64* %RAX, align 8, !tbaa !2428
  %2726 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2727 = sub i32 %2723, %2726
  %2728 = icmp ult i32 %2723, %2726
  %2729 = zext i1 %2728 to i8
  store i8 %2729, i8* %21, align 1, !tbaa !2432
  %2730 = and i32 %2727, 255
  %2731 = tail call i32 @llvm.ctpop.i32(i32 %2730) #8
  %2732 = trunc i32 %2731 to i8
  %2733 = and i8 %2732, 1
  %2734 = xor i8 %2733, 1
  store i8 %2734, i8* %22, align 1, !tbaa !2446
  %2735 = xor i32 %2726, %2723
  %2736 = xor i32 %2735, %2727
  %2737 = lshr i32 %2736, 4
  %2738 = trunc i32 %2737 to i8
  %2739 = and i8 %2738, 1
  store i8 %2739, i8* %23, align 1, !tbaa !2450
  %2740 = icmp eq i32 %2727, 0
  %2741 = zext i1 %2740 to i8
  store i8 %2741, i8* %24, align 1, !tbaa !2447
  %2742 = lshr i32 %2727, 31
  %2743 = trunc i32 %2742 to i8
  store i8 %2743, i8* %25, align 1, !tbaa !2448
  %2744 = lshr i32 %2723, 31
  %2745 = lshr i32 %2726, 31
  %2746 = xor i32 %2745, %2744
  %2747 = xor i32 %2742, %2744
  %2748 = add nuw nsw i32 %2747, %2746
  %2749 = icmp eq i32 %2748, 2
  %2750 = zext i1 %2749 to i8
  store i8 %2750, i8* %26, align 1, !tbaa !2449
  %2751 = icmp ne i8 %2743, 0
  %2752 = xor i1 %2751, %2749
  %.v = select i1 %2752, i64 20, i64 76
  %2753 = add i64 %2724, %.v
  store i64 %2753, i64* %78, align 8, !tbaa !2428
  br i1 %2752, label %block_4008cf, label %block_400907

block_400e43:                                     ; preds = %block_400def, %block_400e3a
  %2754 = phi i64 [ %.pre21, %block_400e3a ], [ %483, %block_400def ]
  %2755 = load i64, i64* %RBP, align 8
  %2756 = add i64 %2755, -64
  %2757 = add i64 %2754, 9
  store i64 %2757, i64* %PC, align 8
  %2758 = inttoptr i64 %2756 to i32*
  %2759 = load i32, i32* %2758, align 4
  store i8 0, i8* %21, align 1, !tbaa !2432
  %2760 = and i32 %2759, 255
  %2761 = tail call i32 @llvm.ctpop.i32(i32 %2760) #8
  %2762 = trunc i32 %2761 to i8
  %2763 = and i8 %2762, 1
  %2764 = xor i8 %2763, 1
  store i8 %2764, i8* %22, align 1, !tbaa !2446
  store i8 0, i8* %23, align 1, !tbaa !2450
  %2765 = icmp eq i32 %2759, 0
  %2766 = zext i1 %2765 to i8
  store i8 %2766, i8* %24, align 1, !tbaa !2447
  %2767 = lshr i32 %2759, 31
  %2768 = trunc i32 %2767 to i8
  store i8 %2768, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %26, align 1, !tbaa !2449
  %2769 = icmp ne i8 %2768, 0
  %.v35 = select i1 %2769, i64 -195, i64 15
  %2770 = add i64 %2754, %.v35
  store i64 %2770, i64* %78, align 8, !tbaa !2428
  br i1 %2769, label %block_400d80, label %block_400e52

block_4009fb:                                     ; preds = %block_4009e7
  %2771 = load i64, i64* %RBP, align 8
  %2772 = add i64 %2771, -28
  %2773 = add i64 %2064, 5
  store i64 %2773, i64* %PC, align 8
  %2774 = inttoptr i64 %2772 to i32*
  %2775 = load i32, i32* %2774, align 4
  %2776 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %2775, i32* %2776, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %2777 = load <2 x float>, <2 x float>* %62, align 1
  %2778 = extractelement <2 x float> %2777, i32 0
  %2779 = fpext float %2778 to double
  store double %2779, double* %196, align 1, !tbaa !2454
  %2780 = sext i32 %2034 to i64
  store i64 %2780, i64* %RAX, align 8, !tbaa !2428
  %2781 = shl nsw i64 %2780, 2
  %2782 = add i64 %2781, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2783 = add i64 %2064, 26
  store i64 %2783, i64* %PC, align 8
  %2784 = inttoptr i64 %2782 to i32*
  %2785 = load i32, i32* %2784, align 4
  %2786 = bitcast %union.VectorReg* %9 to i32*
  store i32 %2785, i32* %2786, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2654, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2656, align 1, !tbaa !2452
  %2787 = load <2 x float>, <2 x float>* %2657, align 1
  %2788 = extractelement <2 x float> %2787, i32 0
  %2789 = fpext float %2788 to double
  %2790 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %2791 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %2792 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %2793 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %2794 = bitcast %union.VectorReg* %10 to i32*
  store i32 %2790, i32* %2794, align 1, !tbaa !2452
  %2795 = bitcast i8* %2659 to i32*
  store i32 %2791, i32* %2795, align 1, !tbaa !2452
  %2796 = bitcast i64* %2661 to i32*
  store i32 %2792, i32* %2796, align 1, !tbaa !2452
  %2797 = bitcast i8* %2663 to i32*
  store i32 %2793, i32* %2797, align 1, !tbaa !2452
  %2798 = bitcast double %2789 to i64
  %2799 = load i64, i64* %202, align 1
  %2800 = load i64, i64* %2665, align 1
  %2801 = load i64, i64* %2666, align 1
  %2802 = and i64 %2800, %2798
  %2803 = and i64 %2801, %2799
  %2804 = trunc i64 %2802 to i32
  %2805 = lshr i64 %2802, 32
  %2806 = trunc i64 %2805 to i32
  store i32 %2804, i32* %2667, align 1, !tbaa !2451
  store i32 %2806, i32* %2668, align 1, !tbaa !2451
  %2807 = trunc i64 %2803 to i32
  store i32 %2807, i32* %2669, align 1, !tbaa !2451
  %2808 = lshr i64 %2803, 32
  %2809 = trunc i64 %2808 to i32
  store i32 %2809, i32* %2670, align 1, !tbaa !2451
  %2810 = add i64 %2064, 45
  store i64 %2810, i64* %PC, align 8
  %2811 = load double, double* %230, align 1
  %2812 = fcmp uno double %2779, %2811
  br i1 %2812, label %2813, label %2823

; <label>:2813:                                   ; preds = %block_4009fb
  %2814 = fadd double %2779, %2811
  %2815 = bitcast double %2814 to i64
  %2816 = and i64 %2815, 9221120237041090560
  %2817 = icmp eq i64 %2816, 9218868437227405312
  %2818 = and i64 %2815, 2251799813685247
  %2819 = icmp ne i64 %2818, 0
  %2820 = and i1 %2817, %2819
  br i1 %2820, label %2821, label %2829

; <label>:2821:                                   ; preds = %2813
  %2822 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2810, %struct.Memory* %MEMORY.10) #9
  %.pre = load i64, i64* %PC, align 8
  %.pre12 = load i8, i8* %21, align 1, !tbaa !2432
  %.pre13 = load i8, i8* %24, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:2823:                                   ; preds = %block_4009fb
  %2824 = fcmp ogt double %2779, %2811
  br i1 %2824, label %2829, label %2825

; <label>:2825:                                   ; preds = %2823
  %2826 = fcmp olt double %2779, %2811
  br i1 %2826, label %2829, label %2827

; <label>:2827:                                   ; preds = %2825
  %2828 = fcmp oeq double %2779, %2811
  br i1 %2828, label %2829, label %2833

; <label>:2829:                                   ; preds = %2827, %2825, %2823, %2813
  %2830 = phi i8 [ 0, %2823 ], [ 0, %2825 ], [ 1, %2827 ], [ 1, %2813 ]
  %2831 = phi i8 [ 0, %2823 ], [ 0, %2825 ], [ 0, %2827 ], [ 1, %2813 ]
  %2832 = phi i8 [ 0, %2823 ], [ 1, %2825 ], [ 0, %2827 ], [ 1, %2813 ]
  store i8 %2830, i8* %24, align 1, !tbaa !2456
  store i8 %2831, i8* %22, align 1, !tbaa !2456
  store i8 %2832, i8* %21, align 1, !tbaa !2456
  br label %2833

; <label>:2833:                                   ; preds = %2829, %2827
  %2834 = phi i8 [ %2830, %2829 ], [ %2052, %2827 ]
  %2835 = phi i8 [ %2832, %2829 ], [ %2040, %2827 ]
  store i8 0, i8* %26, align 1, !tbaa !2456
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %23, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %2833, %2821
  %2836 = phi i8 [ %.pre13, %2821 ], [ %2834, %2833 ]
  %2837 = phi i8 [ %.pre12, %2821 ], [ %2835, %2833 ]
  %2838 = phi i64 [ %.pre, %2821 ], [ %2810, %2833 ]
  %2839 = phi %struct.Memory* [ %2822, %2821 ], [ %MEMORY.10, %2833 ]
  %2840 = or i8 %2836, %2837
  %2841 = icmp ne i8 %2840, 0
  %.v30 = select i1 %2841, i64 28, i64 6
  %2842 = add i64 %2838, %.v30
  store i64 %2842, i64* %78, align 8, !tbaa !2428
  br i1 %2841, label %block_400a44, label %block_400a2e

block_400dae:                                     ; preds = %block_400d9e
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2843 = add i64 %2526, -20
  store i64 %2843, i64* %R8, align 8, !tbaa !2428
  %2844 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2845 = zext i32 %2844 to i64
  store i64 %2845, i64* %RSI, align 8, !tbaa !2428
  %2846 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2847 = zext i32 %2846 to i64
  store i64 %2847, i64* %RDX, align 8, !tbaa !2428
  %2848 = add i64 %2557, 2562
  %2849 = add i64 %2557, 43
  %2850 = load i64, i64* %15, align 8, !tbaa !2428
  %2851 = add i64 %2850, -8
  %2852 = inttoptr i64 %2851 to i64*
  store i64 %2849, i64* %2852, align 8
  store i64 %2851, i64* %15, align 8, !tbaa !2428
  store i64 %2848, i64* %78, align 8, !tbaa !2428
  %2853 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2848, %struct.Memory* %MEMORY.12)
  %2854 = load i64, i64* %PC, align 8
  %2855 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2856 = add i32 %2855, 1
  %2857 = zext i32 %2856 to i64
  store i64 %2857, i64* %RAX, align 8, !tbaa !2428
  %2858 = icmp eq i32 %2855, -1
  %2859 = icmp eq i32 %2856, 0
  %2860 = or i1 %2858, %2859
  %2861 = zext i1 %2860 to i8
  store i8 %2861, i8* %21, align 1, !tbaa !2432
  %2862 = and i32 %2856, 255
  %2863 = tail call i32 @llvm.ctpop.i32(i32 %2862) #8
  %2864 = trunc i32 %2863 to i8
  %2865 = and i8 %2864, 1
  %2866 = xor i8 %2865, 1
  store i8 %2866, i8* %22, align 1, !tbaa !2446
  %2867 = xor i32 %2855, %2856
  %2868 = lshr i32 %2867, 4
  %2869 = trunc i32 %2868 to i8
  %2870 = and i8 %2869, 1
  store i8 %2870, i8* %23, align 1, !tbaa !2450
  %2871 = icmp eq i32 %2856, 0
  %2872 = zext i1 %2871 to i8
  store i8 %2872, i8* %24, align 1, !tbaa !2447
  %2873 = lshr i32 %2856, 31
  %2874 = trunc i32 %2873 to i8
  store i8 %2874, i8* %25, align 1, !tbaa !2448
  %2875 = lshr i32 %2855, 31
  %2876 = xor i32 %2873, %2875
  %2877 = add nuw nsw i32 %2876, %2873
  %2878 = icmp eq i32 %2877, 2
  %2879 = zext i1 %2878 to i8
  store i8 %2879, i8* %26, align 1, !tbaa !2449
  store i32 %2856, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2880 = add i64 %2854, -59
  store i64 %2880, i64* %78, align 8, !tbaa !2428
  br label %block_400d9e

block_40150e:                                     ; preds = %block_4014fa
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2881 = load i64, i64* %RBP, align 8
  %2882 = add i64 %2881, -20
  store i64 %2882, i64* %R8, align 8, !tbaa !2428
  %2883 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2884 = zext i32 %2883 to i64
  store i64 %2884, i64* %RSI, align 8, !tbaa !2428
  %2885 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2886 = zext i32 %2885 to i64
  store i64 %2886, i64* %RDX, align 8, !tbaa !2428
  %2887 = add i64 %1591, 674
  %2888 = add i64 %1591, 43
  %2889 = load i64, i64* %15, align 8, !tbaa !2428
  %2890 = add i64 %2889, -8
  %2891 = inttoptr i64 %2890 to i64*
  store i64 %2888, i64* %2891, align 8
  store i64 %2890, i64* %15, align 8, !tbaa !2428
  store i64 %2887, i64* %78, align 8, !tbaa !2428
  %2892 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2887, %struct.Memory* %MEMORY.6)
  %2893 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2894 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2895 = zext i32 %2894 to i64
  store i64 %2895, i64* %RSI, align 8, !tbaa !2428
  %2896 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2897 = zext i32 %2896 to i64
  store i64 %2897, i64* %RDX, align 8, !tbaa !2428
  %2898 = add i64 %2893, 1095
  %2899 = add i64 %2893, 49
  %2900 = load i64, i64* %15, align 8, !tbaa !2428
  %2901 = add i64 %2900, -8
  %2902 = inttoptr i64 %2901 to i64*
  store i64 %2899, i64* %2902, align 8
  store i64 %2901, i64* %15, align 8, !tbaa !2428
  store i64 %2898, i64* %78, align 8, !tbaa !2428
  %2903 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %2898, %struct.Memory* %2892)
  %2904 = load i64, i64* %PC, align 8
  %2905 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2906 = add i32 %2905, 1
  %2907 = zext i32 %2906 to i64
  store i64 %2907, i64* %RAX, align 8, !tbaa !2428
  %2908 = icmp eq i32 %2905, -1
  %2909 = icmp eq i32 %2906, 0
  %2910 = or i1 %2908, %2909
  %2911 = zext i1 %2910 to i8
  store i8 %2911, i8* %21, align 1, !tbaa !2432
  %2912 = and i32 %2906, 255
  %2913 = tail call i32 @llvm.ctpop.i32(i32 %2912) #8
  %2914 = trunc i32 %2913 to i8
  %2915 = and i8 %2914, 1
  %2916 = xor i8 %2915, 1
  store i8 %2916, i8* %22, align 1, !tbaa !2446
  %2917 = xor i32 %2905, %2906
  %2918 = lshr i32 %2917, 4
  %2919 = trunc i32 %2918 to i8
  %2920 = and i8 %2919, 1
  store i8 %2920, i8* %23, align 1, !tbaa !2450
  %2921 = icmp eq i32 %2906, 0
  %2922 = zext i1 %2921 to i8
  store i8 %2922, i8* %24, align 1, !tbaa !2447
  %2923 = lshr i32 %2906, 31
  %2924 = trunc i32 %2923 to i8
  store i8 %2924, i8* %25, align 1, !tbaa !2448
  %2925 = lshr i32 %2905, 31
  %2926 = xor i32 %2923, %2925
  %2927 = add nuw nsw i32 %2926, %2923
  %2928 = icmp eq i32 %2927, 2
  %2929 = zext i1 %2928 to i8
  store i8 %2929, i8* %26, align 1, !tbaa !2449
  store i32 %2906, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2930 = add i64 %2904, -112
  store i64 %2930, i64* %78, align 8, !tbaa !2428
  br label %block_4014fa

block_40118d:                                     ; preds = %block_4011a1, %block_401149
  %2931 = phi i32 [ 0, %block_401149 ], [ %1922, %block_4011a1 ]
  %2932 = phi i64 [ %934, %block_401149 ], [ %1946, %block_4011a1 ]
  %MEMORY.16 = phi %struct.Memory* [ %925, %block_401149 ], [ %1919, %block_4011a1 ]
  %2933 = zext i32 %2931 to i64
  store i64 %2933, i64* %RAX, align 8, !tbaa !2428
  %2934 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2935 = sub i32 %2931, %2934
  %2936 = icmp ult i32 %2931, %2934
  %2937 = zext i1 %2936 to i8
  store i8 %2937, i8* %21, align 1, !tbaa !2432
  %2938 = and i32 %2935, 255
  %2939 = tail call i32 @llvm.ctpop.i32(i32 %2938) #8
  %2940 = trunc i32 %2939 to i8
  %2941 = and i8 %2940, 1
  %2942 = xor i8 %2941, 1
  store i8 %2942, i8* %22, align 1, !tbaa !2446
  %2943 = xor i32 %2934, %2931
  %2944 = xor i32 %2943, %2935
  %2945 = lshr i32 %2944, 4
  %2946 = trunc i32 %2945 to i8
  %2947 = and i8 %2946, 1
  store i8 %2947, i8* %23, align 1, !tbaa !2450
  %2948 = icmp eq i32 %2935, 0
  %2949 = zext i1 %2948 to i8
  store i8 %2949, i8* %24, align 1, !tbaa !2447
  %2950 = lshr i32 %2935, 31
  %2951 = trunc i32 %2950 to i8
  store i8 %2951, i8* %25, align 1, !tbaa !2448
  %2952 = lshr i32 %2931, 31
  %2953 = lshr i32 %2934, 31
  %2954 = xor i32 %2953, %2952
  %2955 = xor i32 %2950, %2952
  %2956 = add nuw nsw i32 %2955, %2954
  %2957 = icmp eq i32 %2956, 2
  %2958 = zext i1 %2957 to i8
  store i8 %2958, i8* %26, align 1, !tbaa !2449
  %2959 = icmp ne i8 %2951, 0
  %2960 = xor i1 %2959, %2957
  %.v42 = select i1 %2960, i64 20, i64 94
  %2961 = add i64 %2932, %.v42
  store i64 %2961, i64* %78, align 8, !tbaa !2428
  br i1 %2960, label %block_4011a1, label %block_4011eb

block_40139b:                                     ; preds = %block_4013ab, %block_40131f
  %2962 = phi i32 [ 0, %block_40131f ], [ %3217, %block_4013ab ]
  %2963 = phi i64 [ %2119, %block_40131f ], [ %3241, %block_4013ab ]
  %MEMORY.17 = phi %struct.Memory* [ %2110, %block_40131f ], [ %3214, %block_4013ab ]
  %2964 = zext i32 %2962 to i64
  store i64 %2964, i64* %RAX, align 8, !tbaa !2428
  %2965 = load i64, i64* %RBP, align 8
  %2966 = add i64 %2965, -68
  %2967 = add i64 %2963, 10
  store i64 %2967, i64* %PC, align 8
  %2968 = inttoptr i64 %2966 to i32*
  %2969 = load i32, i32* %2968, align 4
  %2970 = sub i32 %2962, %2969
  %2971 = icmp ult i32 %2962, %2969
  %2972 = zext i1 %2971 to i8
  store i8 %2972, i8* %21, align 1, !tbaa !2432
  %2973 = and i32 %2970, 255
  %2974 = tail call i32 @llvm.ctpop.i32(i32 %2973) #8
  %2975 = trunc i32 %2974 to i8
  %2976 = and i8 %2975, 1
  %2977 = xor i8 %2976, 1
  store i8 %2977, i8* %22, align 1, !tbaa !2446
  %2978 = xor i32 %2969, %2962
  %2979 = xor i32 %2978, %2970
  %2980 = lshr i32 %2979, 4
  %2981 = trunc i32 %2980 to i8
  %2982 = and i8 %2981, 1
  store i8 %2982, i8* %23, align 1, !tbaa !2450
  %2983 = icmp eq i32 %2970, 0
  %2984 = zext i1 %2983 to i8
  store i8 %2984, i8* %24, align 1, !tbaa !2447
  %2985 = lshr i32 %2970, 31
  %2986 = trunc i32 %2985 to i8
  store i8 %2986, i8* %25, align 1, !tbaa !2448
  %2987 = lshr i32 %2962, 31
  %2988 = lshr i32 %2969, 31
  %2989 = xor i32 %2988, %2987
  %2990 = xor i32 %2985, %2987
  %2991 = add nuw nsw i32 %2990, %2989
  %2992 = icmp eq i32 %2991, 2
  %2993 = zext i1 %2992 to i8
  store i8 %2993, i8* %26, align 1, !tbaa !2449
  %2994 = icmp ne i8 %2986, 0
  %2995 = xor i1 %2994, %2992
  %.v43 = select i1 %2995, i64 16, i64 81
  %2996 = add i64 %2963, %.v43
  store i64 %2996, i64* %78, align 8, !tbaa !2428
  br i1 %2995, label %block_4013ab, label %block_4013ec

block_4010d7:                                     ; preds = %block_4010c3
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2997 = load i64, i64* %RBP, align 8
  %2998 = add i64 %2997, -20
  store i64 %2998, i64* %R8, align 8, !tbaa !2428
  %2999 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %3000 = zext i32 %2999 to i64
  store i64 %3000, i64* %RSI, align 8, !tbaa !2428
  %3001 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3002 = zext i32 %3001 to i64
  store i64 %3002, i64* %RDX, align 8, !tbaa !2428
  %3003 = add i64 %1436, 1753
  %3004 = add i64 %1436, 43
  %3005 = load i64, i64* %15, align 8, !tbaa !2428
  %3006 = add i64 %3005, -8
  %3007 = inttoptr i64 %3006 to i64*
  store i64 %3004, i64* %3007, align 8
  store i64 %3006, i64* %15, align 8, !tbaa !2428
  store i64 %3003, i64* %78, align 8, !tbaa !2428
  %3008 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %3003, %struct.Memory* %MEMORY.4)
  %3009 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %3010 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %3011 = zext i32 %3010 to i64
  store i64 %3011, i64* %RSI, align 8, !tbaa !2428
  %3012 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3013 = zext i32 %3012 to i64
  store i64 %3013, i64* %RDX, align 8, !tbaa !2428
  %3014 = add i64 %3009, 2174
  %3015 = add i64 %3009, 49
  %3016 = load i64, i64* %15, align 8, !tbaa !2428
  %3017 = add i64 %3016, -8
  %3018 = inttoptr i64 %3017 to i64*
  store i64 %3015, i64* %3018, align 8
  store i64 %3017, i64* %15, align 8, !tbaa !2428
  store i64 %3014, i64* %78, align 8, !tbaa !2428
  %3019 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %3014, %struct.Memory* %3008)
  %3020 = load i64, i64* %PC, align 8
  %3021 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3022 = add i32 %3021, 1
  %3023 = zext i32 %3022 to i64
  store i64 %3023, i64* %RAX, align 8, !tbaa !2428
  %3024 = icmp eq i32 %3021, -1
  %3025 = icmp eq i32 %3022, 0
  %3026 = or i1 %3024, %3025
  %3027 = zext i1 %3026 to i8
  store i8 %3027, i8* %21, align 1, !tbaa !2432
  %3028 = and i32 %3022, 255
  %3029 = tail call i32 @llvm.ctpop.i32(i32 %3028) #8
  %3030 = trunc i32 %3029 to i8
  %3031 = and i8 %3030, 1
  %3032 = xor i8 %3031, 1
  store i8 %3032, i8* %22, align 1, !tbaa !2446
  %3033 = xor i32 %3021, %3022
  %3034 = lshr i32 %3033, 4
  %3035 = trunc i32 %3034 to i8
  %3036 = and i8 %3035, 1
  store i8 %3036, i8* %23, align 1, !tbaa !2450
  %3037 = icmp eq i32 %3022, 0
  %3038 = zext i1 %3037 to i8
  store i8 %3038, i8* %24, align 1, !tbaa !2447
  %3039 = lshr i32 %3022, 31
  %3040 = trunc i32 %3039 to i8
  store i8 %3040, i8* %25, align 1, !tbaa !2448
  %3041 = lshr i32 %3021, 31
  %3042 = xor i32 %3039, %3041
  %3043 = add nuw nsw i32 %3042, %3039
  %3044 = icmp eq i32 %3043, 2
  %3045 = zext i1 %3044 to i8
  store i8 %3045, i8* %26, align 1, !tbaa !2449
  store i32 %3022, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3046 = add i64 %3020, -112
  store i64 %3046, i64* %78, align 8, !tbaa !2428
  br label %block_4010c3

block_4008cf:                                     ; preds = %block_4008bb
  %3047 = sext i32 %2723 to i64
  store i64 %3047, i64* %RAX, align 8, !tbaa !2428
  %3048 = shl nsw i64 %3047, 2
  %3049 = add i64 %3048, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %3050 = add i64 %2753, 17
  store i64 %3050, i64* %PC, align 8
  %3051 = inttoptr i64 %3049 to i32*
  %3052 = load i32, i32* %3051, align 4
  %3053 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %3052, i32* %3053, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %3054 = add i64 %3048, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %3055 = add i64 %2753, 34
  store i64 %3055, i64* %PC, align 8
  %3056 = load <2 x float>, <2 x float>* %62, align 1
  %3057 = extractelement <2 x float> %3056, i32 0
  %3058 = inttoptr i64 %3054 to float*
  store float %3057, float* %3058, align 4
  %3059 = load i64, i64* %PC, align 8
  %3060 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3061 = add i32 %3060, 1
  %3062 = zext i32 %3061 to i64
  store i64 %3062, i64* %RAX, align 8, !tbaa !2428
  %3063 = icmp eq i32 %3060, -1
  %3064 = icmp eq i32 %3061, 0
  %3065 = or i1 %3063, %3064
  %3066 = zext i1 %3065 to i8
  store i8 %3066, i8* %21, align 1, !tbaa !2432
  %3067 = and i32 %3061, 255
  %3068 = tail call i32 @llvm.ctpop.i32(i32 %3067) #8
  %3069 = trunc i32 %3068 to i8
  %3070 = and i8 %3069, 1
  %3071 = xor i8 %3070, 1
  store i8 %3071, i8* %22, align 1, !tbaa !2446
  %3072 = xor i32 %3060, %3061
  %3073 = lshr i32 %3072, 4
  %3074 = trunc i32 %3073 to i8
  %3075 = and i8 %3074, 1
  store i8 %3075, i8* %23, align 1, !tbaa !2450
  %3076 = icmp eq i32 %3061, 0
  %3077 = zext i1 %3076 to i8
  store i8 %3077, i8* %24, align 1, !tbaa !2447
  %3078 = lshr i32 %3061, 31
  %3079 = trunc i32 %3078 to i8
  store i8 %3079, i8* %25, align 1, !tbaa !2448
  %3080 = lshr i32 %3060, 31
  %3081 = xor i32 %3078, %3080
  %3082 = add nuw nsw i32 %3081, %3078
  %3083 = icmp eq i32 %3082, 2
  %3084 = zext i1 %3083 to i8
  store i8 %3084, i8* %26, align 1, !tbaa !2449
  store i32 %3061, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3085 = add i64 %3059, -54
  store i64 %3085, i64* %78, align 8, !tbaa !2428
  br label %block_4008bb

block_400a6c:                                     ; preds = %block_400a2e, %block_400a44
  %3086 = phi i64 [ %3185, %block_400a2e ], [ %.pre14, %block_400a44 ]
  %3087 = load i64, i64* %RBP, align 8
  %3088 = add i64 %3087, -896
  %3089 = add i64 %3086, 8
  store i64 %3089, i64* %PC, align 8
  %3090 = inttoptr i64 %3088 to double*
  %3091 = load double, double* %3090, align 8
  %3092 = bitcast double %3091 to <2 x i32>
  %3093 = fptrunc double %3091 to float
  store float %3093, float* %29, align 1, !tbaa !2452
  %3094 = extractelement <2 x i32> %3092, i32 1
  store i32 %3094, i32* %262, align 1, !tbaa !2452
  store i32 0, i32* %264, align 1, !tbaa !2452
  store i32 0, i32* %266, align 1, !tbaa !2452
  %3095 = add i64 %3087, -28
  %3096 = add i64 %3086, 17
  store i64 %3096, i64* %PC, align 8
  %3097 = load <2 x float>, <2 x float>* %62, align 1
  %3098 = extractelement <2 x float> %3097, i32 0
  %3099 = inttoptr i64 %3095 to float*
  store float %3098, float* %3099, align 4
  %3100 = load i64, i64* %RBP, align 8
  %3101 = add i64 %3100, -24
  %3102 = load i64, i64* %PC, align 8
  %3103 = add i64 %3102, 5
  store i64 %3103, i64* %PC, align 8
  %3104 = inttoptr i64 %3101 to i32*
  %3105 = load i32, i32* %3104, align 4
  %3106 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %3105, i32* %3106, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %3107 = load <2 x float>, <2 x float>* %62, align 1
  %3108 = extractelement <2 x float> %3107, i32 0
  %3109 = fpext float %3108 to double
  store double %3109, double* %196, align 1, !tbaa !2454
  %3110 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3111 = sext i32 %3110 to i64
  store i64 %3111, i64* %RAX, align 8, !tbaa !2428
  %3112 = shl nsw i64 %3111, 2
  %3113 = add i64 %3112, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %3114 = add i64 %3102, 26
  store i64 %3114, i64* %PC, align 8
  %3115 = inttoptr i64 %3113 to i32*
  %3116 = load i32, i32* %3115, align 4
  %3117 = bitcast %union.VectorReg* %9 to i32*
  store i32 %3116, i32* %3117, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2654, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2656, align 1, !tbaa !2452
  %3118 = load <2 x float>, <2 x float>* %2657, align 1
  %3119 = extractelement <2 x float> %3118, i32 0
  %3120 = fpext float %3119 to double
  %3121 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %3122 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %3123 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %3124 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %3125 = bitcast %union.VectorReg* %10 to i32*
  store i32 %3121, i32* %3125, align 1, !tbaa !2452
  %3126 = bitcast i8* %2659 to i32*
  store i32 %3122, i32* %3126, align 1, !tbaa !2452
  %3127 = bitcast i64* %2661 to i32*
  store i32 %3123, i32* %3127, align 1, !tbaa !2452
  %3128 = bitcast i8* %2663 to i32*
  store i32 %3124, i32* %3128, align 1, !tbaa !2452
  %3129 = bitcast double %3120 to i64
  %3130 = load i64, i64* %202, align 1
  %3131 = load i64, i64* %2665, align 1
  %3132 = load i64, i64* %2666, align 1
  %3133 = and i64 %3131, %3129
  %3134 = and i64 %3132, %3130
  %3135 = trunc i64 %3133 to i32
  %3136 = lshr i64 %3133, 32
  %3137 = trunc i64 %3136 to i32
  store i32 %3135, i32* %2667, align 1, !tbaa !2451
  store i32 %3137, i32* %2668, align 1, !tbaa !2451
  %3138 = trunc i64 %3134 to i32
  store i32 %3138, i32* %2669, align 1, !tbaa !2451
  %3139 = lshr i64 %3134, 32
  %3140 = trunc i64 %3139 to i32
  store i32 %3140, i32* %2670, align 1, !tbaa !2451
  %3141 = add i64 %3102, 45
  store i64 %3141, i64* %PC, align 8
  %3142 = load double, double* %230, align 1
  %3143 = fcmp uno double %3109, %3142
  br i1 %3143, label %3144, label %3154

; <label>:3144:                                   ; preds = %block_400a6c
  %3145 = fadd double %3109, %3142
  %3146 = bitcast double %3145 to i64
  %3147 = and i64 %3146, 9221120237041090560
  %3148 = icmp eq i64 %3147, 9218868437227405312
  %3149 = and i64 %3146, 2251799813685247
  %3150 = icmp ne i64 %3149, 0
  %3151 = and i1 %3148, %3150
  br i1 %3151, label %3152, label %3160

; <label>:3152:                                   ; preds = %3144
  %3153 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3141, %struct.Memory* %2839) #9
  %.pre15 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:3154:                                   ; preds = %block_400a6c
  %3155 = fcmp ogt double %3109, %3142
  br i1 %3155, label %3160, label %3156

; <label>:3156:                                   ; preds = %3154
  %3157 = fcmp olt double %3109, %3142
  br i1 %3157, label %3160, label %3158

; <label>:3158:                                   ; preds = %3156
  %3159 = fcmp oeq double %3109, %3142
  br i1 %3159, label %3160, label %3164

; <label>:3160:                                   ; preds = %3158, %3156, %3154, %3144
  %3161 = phi i8 [ 0, %3154 ], [ 0, %3156 ], [ 1, %3158 ], [ 1, %3144 ]
  %3162 = phi i8 [ 0, %3154 ], [ 0, %3156 ], [ 0, %3158 ], [ 1, %3144 ]
  %3163 = phi i8 [ 0, %3154 ], [ 1, %3156 ], [ 0, %3158 ], [ 1, %3144 ]
  store i8 %3161, i8* %24, align 1, !tbaa !2456
  store i8 %3162, i8* %22, align 1, !tbaa !2456
  store i8 %3163, i8* %21, align 1, !tbaa !2456
  br label %3164

; <label>:3164:                                   ; preds = %3160, %3158
  store i8 0, i8* %26, align 1, !tbaa !2456
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %23, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %3164, %3152
  %3165 = phi i64 [ %.pre15, %3152 ], [ %3141, %3164 ]
  %3166 = phi %struct.Memory* [ %3153, %3152 ], [ %2839, %3164 ]
  %3167 = load i8, i8* %21, align 1, !tbaa !2432
  %3168 = load i8, i8* %24, align 1, !tbaa !2447
  %3169 = or i8 %3168, %3167
  %3170 = icmp ne i8 %3169, 0
  %.v31 = select i1 %3170, i64 28, i64 6
  %3171 = add i64 %3165, %.v31
  store i64 %3171, i64* %78, align 8, !tbaa !2428
  br i1 %3170, label %block_400ac6, label %block_400ab0

block_400a2e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %3172 = load i64, i64* %RBP, align 8
  %3173 = add i64 %3172, -28
  %3174 = add i64 %2842, 5
  store i64 %3174, i64* %PC, align 8
  %3175 = inttoptr i64 %3173 to i32*
  %3176 = load i32, i32* %3175, align 4
  %3177 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %3176, i32* %3177, align 1, !tbaa !2452
  store float 0.000000e+00, float* %32, align 1, !tbaa !2452
  store float 0.000000e+00, float* %34, align 1, !tbaa !2452
  store float 0.000000e+00, float* %36, align 1, !tbaa !2452
  %3178 = load <2 x float>, <2 x float>* %62, align 1
  %3179 = extractelement <2 x float> %3178, i32 0
  %3180 = fpext float %3179 to double
  store double %3180, double* %196, align 1, !tbaa !2454
  %3181 = add i64 %3172, -896
  %3182 = add i64 %2842, 17
  store i64 %3182, i64* %PC, align 8
  %3183 = inttoptr i64 %3181 to double*
  store double %3180, double* %3183, align 8
  %3184 = load i64, i64* %PC, align 8
  %3185 = add i64 %3184, 45
  store i64 %3185, i64* %78, align 8, !tbaa !2428
  br label %block_400a6c

block_400907:                                     ; preds = %block_4008bb
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3186 = load i64, i64* %RBP, align 8
  %3187 = add i64 %3186, -20
  store i64 %3187, i64* %R8, align 8, !tbaa !2428
  %3188 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %3189 = zext i32 %3188 to i64
  store i64 %3189, i64* %RSI, align 8, !tbaa !2428
  %3190 = zext i32 %2726 to i64
  store i64 %3190, i64* %RDX, align 8, !tbaa !2428
  %3191 = add i64 %2753, 3753
  %3192 = add i64 %2753, 43
  %3193 = load i64, i64* %15, align 8, !tbaa !2428
  %3194 = add i64 %3193, -8
  %3195 = inttoptr i64 %3194 to i64*
  store i64 %3192, i64* %3195, align 8
  store i64 %3194, i64* %15, align 8, !tbaa !2428
  store i64 %3191, i64* %78, align 8, !tbaa !2428
  %3196 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %3191, %struct.Memory* %370)
  %3197 = load i64, i64* %PC, align 8
  %3198 = add i64 %3197, 11
  store i64 %3198, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3199 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3200 = bitcast %union.anon* %4 to [2 x i32]*
  %3201 = bitcast %union.anon* %4 to i32*
  %3202 = getelementptr inbounds [2 x i32], [2 x i32]* %3200, i64 0, i64 1
  %3203 = bitcast [32 x %union.VectorReg]* %8 to i32*
  br label %block_40093d

block_4013ab:                                     ; preds = %block_40139b
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3204 = add i64 %2965, -20
  store i64 %3204, i64* %R8, align 8, !tbaa !2428
  %3205 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %3206 = zext i32 %3205 to i64
  store i64 %3206, i64* %RSI, align 8, !tbaa !2428
  %3207 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3208 = zext i32 %3207 to i64
  store i64 %3208, i64* %RDX, align 8, !tbaa !2428
  %3209 = add i64 %2996, 1029
  %3210 = add i64 %2996, 43
  %3211 = load i64, i64* %15, align 8, !tbaa !2428
  %3212 = add i64 %3211, -8
  %3213 = inttoptr i64 %3212 to i64*
  store i64 %3210, i64* %3213, align 8
  store i64 %3212, i64* %15, align 8, !tbaa !2428
  store i64 %3209, i64* %78, align 8, !tbaa !2428
  %3214 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %3209, %struct.Memory* %MEMORY.17)
  %3215 = load i64, i64* %PC, align 8
  %3216 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3217 = add i32 %3216, 1
  %3218 = zext i32 %3217 to i64
  store i64 %3218, i64* %RAX, align 8, !tbaa !2428
  %3219 = icmp eq i32 %3216, -1
  %3220 = icmp eq i32 %3217, 0
  %3221 = or i1 %3219, %3220
  %3222 = zext i1 %3221 to i8
  store i8 %3222, i8* %21, align 1, !tbaa !2432
  %3223 = and i32 %3217, 255
  %3224 = tail call i32 @llvm.ctpop.i32(i32 %3223) #8
  %3225 = trunc i32 %3224 to i8
  %3226 = and i8 %3225, 1
  %3227 = xor i8 %3226, 1
  store i8 %3227, i8* %22, align 1, !tbaa !2446
  %3228 = xor i32 %3216, %3217
  %3229 = lshr i32 %3228, 4
  %3230 = trunc i32 %3229 to i8
  %3231 = and i8 %3230, 1
  store i8 %3231, i8* %23, align 1, !tbaa !2450
  %3232 = icmp eq i32 %3217, 0
  %3233 = zext i1 %3232 to i8
  store i8 %3233, i8* %24, align 1, !tbaa !2447
  %3234 = lshr i32 %3217, 31
  %3235 = trunc i32 %3234 to i8
  store i8 %3235, i8* %25, align 1, !tbaa !2448
  %3236 = lshr i32 %3216, 31
  %3237 = xor i32 %3234, %3236
  %3238 = add nuw nsw i32 %3237, %3234
  %3239 = icmp eq i32 %3238, 2
  %3240 = zext i1 %3239 to i8
  store i8 %3240, i8* %26, align 1, !tbaa !2449
  store i32 %3217, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3241 = add i64 %3215, -59
  store i64 %3241, i64* %78, align 8, !tbaa !2428
  br label %block_40139b

block_401580:                                     ; preds = %block_4014fa
  %3242 = add i64 %1591, -4032
  %3243 = add i64 %1591, 5
  %3244 = load i64, i64* %15, align 8, !tbaa !2428
  %3245 = add i64 %3244, -8
  %3246 = inttoptr i64 %3245 to i64*
  store i64 %3243, i64* %3246, align 8
  store i64 %3245, i64* %15, align 8, !tbaa !2428
  store i64 %3242, i64* %78, align 8, !tbaa !2428
  %3247 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3242, %struct.Memory* %MEMORY.6)
  %3248 = load i64, i64* %RBP, align 8
  %3249 = add i64 %3248, -40
  %3250 = load i64, i64* %PC, align 8
  %3251 = add i64 %3250, 5
  store i64 %3251, i64* %PC, align 8
  %3252 = load <2 x float>, <2 x float>* %326, align 1
  %3253 = load <2 x i32>, <2 x i32>* %259, align 1
  %3254 = inttoptr i64 %3249 to float*
  %3255 = load float, float* %3254, align 4
  %3256 = extractelement <2 x float> %3252, i32 0
  %3257 = fsub float %3256, %3255
  store float %3257, float* %29, align 1, !tbaa !2452
  %3258 = bitcast <2 x float> %3252 to <2 x i32>
  %3259 = extractelement <2 x i32> %3258, i32 1
  store i32 %3259, i32* %262, align 1, !tbaa !2452
  %3260 = extractelement <2 x i32> %3253, i32 0
  store i32 %3260, i32* %264, align 1, !tbaa !2452
  %3261 = extractelement <2 x i32> %3253, i32 1
  store i32 %3261, i32* %266, align 1, !tbaa !2452
  %3262 = add i64 %3248, -44
  %3263 = add i64 %3250, 10
  store i64 %3263, i64* %PC, align 8
  %3264 = load <2 x float>, <2 x float>* %326, align 1
  %3265 = load <2 x i32>, <2 x i32>* %259, align 1
  %3266 = inttoptr i64 %3262 to float*
  %3267 = load float, float* %3266, align 4
  %3268 = extractelement <2 x float> %3264, i32 0
  %3269 = fsub float %3268, %3267
  store float %3269, float* %29, align 1, !tbaa !2452
  %3270 = bitcast <2 x float> %3264 to <2 x i32>
  %3271 = extractelement <2 x i32> %3270, i32 1
  store i32 %3271, i32* %262, align 1, !tbaa !2452
  %3272 = extractelement <2 x i32> %3265, i32 0
  store i32 %3272, i32* %264, align 1, !tbaa !2452
  %3273 = extractelement <2 x i32> %3265, i32 1
  store i32 %3273, i32* %266, align 1, !tbaa !2452
  %3274 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %3275 = zext i32 %3274 to i64
  store i64 %3275, i64* %RAX, align 8, !tbaa !2428
  %3276 = load <2 x i32>, <2 x i32>* %1965, align 1
  %3277 = load <2 x i32>, <2 x i32>* %1967, align 1
  %3278 = sitofp i32 %3274 to float
  store float %3278, float* %2651, align 1, !tbaa !2452
  %3279 = extractelement <2 x i32> %3276, i32 1
  store i32 %3279, i32* %2668, align 1, !tbaa !2452
  %3280 = extractelement <2 x i32> %3277, i32 0
  store i32 %3280, i32* %2669, align 1, !tbaa !2452
  %3281 = extractelement <2 x i32> %3277, i32 1
  store i32 %3281, i32* %2670, align 1, !tbaa !2452
  %3282 = load <2 x float>, <2 x float>* %326, align 1
  %3283 = load <2 x i32>, <2 x i32>* %259, align 1
  %3284 = load <2 x float>, <2 x float>* %2657, align 1
  %3285 = extractelement <2 x float> %3282, i32 0
  %3286 = extractelement <2 x float> %3284, i32 0
  %3287 = fdiv float %3285, %3286
  store float %3287, float* %29, align 1, !tbaa !2452
  %3288 = bitcast <2 x float> %3282 to <2 x i32>
  %3289 = extractelement <2 x i32> %3288, i32 1
  store i32 %3289, i32* %262, align 1, !tbaa !2452
  %3290 = extractelement <2 x i32> %3283, i32 0
  store i32 %3290, i32* %264, align 1, !tbaa !2452
  %3291 = extractelement <2 x i32> %3283, i32 1
  store i32 %3291, i32* %266, align 1, !tbaa !2452
  %3292 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %3293 = sext i32 %3292 to i64
  store i64 %3293, i64* %RCX, align 8, !tbaa !2428
  %3294 = shl nsw i64 %3293, 2
  %3295 = add i64 %3294, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3296 = add i64 %3250, 42
  store i64 %3296, i64* %PC, align 8
  %3297 = load <2 x float>, <2 x float>* %62, align 1
  %3298 = extractelement <2 x float> %3297, i32 0
  %3299 = inttoptr i64 %3295 to float*
  store float %3298, float* %3299, align 4
  %3300 = load i64, i64* %PC, align 8
  %3301 = add i64 %3300, -4079
  %3302 = add i64 %3300, 5
  %3303 = load i64, i64* %15, align 8, !tbaa !2428
  %3304 = add i64 %3303, -8
  %3305 = inttoptr i64 %3304 to i64*
  store i64 %3302, i64* %3305, align 8
  store i64 %3304, i64* %15, align 8, !tbaa !2428
  store i64 %3301, i64* %78, align 8, !tbaa !2428
  %3306 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3301, %struct.Memory* %3247)
  %3307 = load i64, i64* %RBP, align 8
  %3308 = add i64 %3307, -40
  %3309 = load i64, i64* %PC, align 8
  %3310 = add i64 %3309, 5
  store i64 %3310, i64* %PC, align 8
  %3311 = load <2 x float>, <2 x float>* %62, align 1
  %3312 = extractelement <2 x float> %3311, i32 0
  %3313 = inttoptr i64 %3308 to float*
  store float %3312, float* %3313, align 4
  %3314 = load i64, i64* %PC, align 8
  %3315 = add i64 %3314, 11
  store i64 %3315, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4015c4

block_400d80:                                     ; preds = %block_400e43, %block_400d39
  %3316 = phi i64 [ %.pre20, %block_400d39 ], [ %2770, %block_400e43 ]
  %MEMORY.19 = phi %struct.Memory* [ %1509, %block_400d39 ], [ %457, %block_400e43 ]
  %3317 = add i64 %3316, -1984
  %3318 = add i64 %3316, 5
  %3319 = load i64, i64* %15, align 8, !tbaa !2428
  %3320 = add i64 %3319, -8
  %3321 = inttoptr i64 %3320 to i64*
  store i64 %3318, i64* %3321, align 8
  store i64 %3320, i64* %15, align 8, !tbaa !2428
  store i64 %3317, i64* %78, align 8, !tbaa !2428
  %3322 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3317, %struct.Memory* %MEMORY.19)
  %3323 = load i64, i64* %RBP, align 8
  %3324 = add i64 %3323, -80
  %3325 = load i64, i64* %PC, align 8
  %3326 = add i64 %3325, 5
  store i64 %3326, i64* %PC, align 8
  %3327 = load <2 x float>, <2 x float>* %62, align 1
  %3328 = extractelement <2 x float> %3327, i32 0
  %3329 = inttoptr i64 %3324 to float*
  store float %3328, float* %3329, align 4
  %3330 = load i64, i64* %RBP, align 8
  %3331 = add i64 %3330, -64
  %3332 = load i64, i64* %PC, align 8
  %3333 = add i64 %3332, 3
  store i64 %3333, i64* %PC, align 8
  %3334 = inttoptr i64 %3331 to i32*
  %3335 = load i32, i32* %3334, align 4
  %3336 = add i32 %3335, 1
  %3337 = zext i32 %3336 to i64
  store i64 %3337, i64* %RAX, align 8, !tbaa !2428
  %3338 = icmp eq i32 %3335, -1
  %3339 = icmp eq i32 %3336, 0
  %3340 = or i1 %3338, %3339
  %3341 = zext i1 %3340 to i8
  store i8 %3341, i8* %21, align 1, !tbaa !2432
  %3342 = and i32 %3336, 255
  %3343 = tail call i32 @llvm.ctpop.i32(i32 %3342) #8
  %3344 = trunc i32 %3343 to i8
  %3345 = and i8 %3344, 1
  %3346 = xor i8 %3345, 1
  store i8 %3346, i8* %22, align 1, !tbaa !2446
  %3347 = xor i32 %3335, %3336
  %3348 = lshr i32 %3347, 4
  %3349 = trunc i32 %3348 to i8
  %3350 = and i8 %3349, 1
  store i8 %3350, i8* %23, align 1, !tbaa !2450
  %3351 = icmp eq i32 %3336, 0
  %3352 = zext i1 %3351 to i8
  store i8 %3352, i8* %24, align 1, !tbaa !2447
  %3353 = lshr i32 %3336, 31
  %3354 = trunc i32 %3353 to i8
  store i8 %3354, i8* %25, align 1, !tbaa !2448
  %3355 = lshr i32 %3335, 31
  %3356 = xor i32 %3353, %3355
  %3357 = add nuw nsw i32 %3356, %3353
  %3358 = icmp eq i32 %3357, 2
  %3359 = zext i1 %3358 to i8
  store i8 %3359, i8* %26, align 1, !tbaa !2449
  %3360 = add i64 %3332, 9
  store i64 %3360, i64* %PC, align 8
  store i32 %3336, i32* %3334, align 4
  %3361 = load i64, i64* %PC, align 8
  %3362 = add i64 %3361, 11
  store i64 %3362, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400d9e
}

; Function Attrs: noinline
define %struct.Memory* @sub_402d70_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402d70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -12
  %14 = load i32, i32* %EDI, align 4
  %15 = add i64 %12, 6
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 5
  store i64 %20, i64* %PC, align 8
  %21 = bitcast %union.VectorReg* %5 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 1
  %23 = extractelement <2 x float> %22, i32 0
  %24 = inttoptr i64 %18 to float*
  store float %23, float* %24, align 4
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -16
  %27 = load i64, i64* %RSI, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -20
  %33 = load i32, i32* %EDX, align 4
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -32
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  store i32 0, i32* %41, align 4
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -28
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %53, align 1, !tbaa !2432
  %54 = and i32 %52, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #8
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %60, align 1, !tbaa !2450
  %61 = icmp eq i32 %52, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2447
  %64 = lshr i32 %52, 31
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %67, align 1, !tbaa !2449
  %68 = xor i1 %61, true
  %69 = icmp eq i8 %65, 0
  %70 = and i1 %69, %68
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %70, i64 15, i64 10
  %72 = add i64 %49, %.v
  store i64 %72, i64* %71, align 8, !tbaa !2428
  br i1 %70, label %block_402da0, label %block_402d9b

block_402d9b:                                     ; preds = %block_402d70
  %73 = add i64 %72, 158
  br label %block_402e39.sink.split

block_402dbb:                                     ; preds = %block_402dc7, %block_402daa
  %74 = phi i64 [ %365, %block_402dc7 ], [ %.pre, %block_402daa ]
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -24
  %77 = add i64 %74, 3
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %75, -36
  %82 = add i64 %74, 6
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = sub i32 %79, %84
  %86 = icmp ult i32 %79, %84
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %53, align 1, !tbaa !2432
  %88 = and i32 %85, 255
  %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #8
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = xor i8 %91, 1
  store i8 %92, i8* %59, align 1, !tbaa !2446
  %93 = xor i32 %84, %79
  %94 = xor i32 %93, %85
  %95 = lshr i32 %94, 4
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %60, align 1, !tbaa !2450
  %98 = icmp eq i32 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %63, align 1, !tbaa !2447
  %100 = lshr i32 %85, 31
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %66, align 1, !tbaa !2448
  %102 = lshr i32 %79, 31
  %103 = lshr i32 %84, 31
  %104 = xor i32 %103, %102
  %105 = xor i32 %100, %102
  %106 = add nuw nsw i32 %105, %104
  %107 = icmp eq i32 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %67, align 1, !tbaa !2449
  %109 = icmp ne i8 %101, 0
  %110 = xor i1 %109, %107
  %.v5 = select i1 %110, i64 12, i64 57
  %111 = add i64 %74, %.v5
  store i64 %111, i64* %71, align 8, !tbaa !2428
  br i1 %110, label %block_402dc7, label %block_402df4

block_402df9:                                     ; preds = %block_402da0
  %112 = add i64 %47, -24
  %113 = add i64 %391, 7
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i32*
  store i32 0, i32* %114, align 4
  %115 = bitcast %union.VectorReg* %5 to i8*
  %116 = bitcast %union.VectorReg* %5 to float*
  %117 = getelementptr inbounds i8, i8* %115, i64 4
  %118 = bitcast i8* %117 to float*
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %120 = bitcast i64* %119 to float*
  %121 = getelementptr inbounds i8, i8* %115, i64 12
  %122 = bitcast i8* %121 to float*
  %123 = bitcast %union.VectorReg* %5 to <2 x float>*
  %124 = bitcast i64* %119 to <2 x i32>*
  %125 = bitcast i8* %117 to i32*
  %126 = bitcast i64* %119 to i32*
  %127 = bitcast i8* %121 to i32*
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_402e00

block_402df4:                                     ; preds = %block_402dbb
  %128 = add i64 %111, 69
  br label %block_402e39.sink.split

block_402e0c:                                     ; preds = %block_402e00
  %129 = add i64 %252, -8
  %130 = add i64 %288, 5
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i32*
  %132 = load i32, i32* %131, align 4
  %133 = bitcast %union.VectorReg* %5 to i32*
  store i32 %132, i32* %133, align 1, !tbaa !2452
  store float 0.000000e+00, float* %118, align 1, !tbaa !2452
  store float 0.000000e+00, float* %120, align 1, !tbaa !2452
  store float 0.000000e+00, float* %122, align 1, !tbaa !2452
  %134 = add i64 %252, -16
  %135 = add i64 %288, 9
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %288, 13
  store i64 %138, i64* %PC, align 8
  %139 = load i32, i32* %255, align 4
  %140 = sext i32 %139 to i64
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = shl nsw i64 %140, 2
  %142 = add i64 %141, %137
  %143 = add i64 %288, 18
  store i64 %143, i64* %PC, align 8
  %144 = load <2 x float>, <2 x float>* %123, align 1
  %145 = load <2 x i32>, <2 x i32>* %124, align 1
  %146 = inttoptr i64 %142 to float*
  %147 = load float, float* %146, align 4
  %148 = extractelement <2 x float> %144, i32 0
  %149 = fmul float %148, %147
  store float %149, float* %116, align 1, !tbaa !2452
  %150 = bitcast <2 x float> %144 to <2 x i32>
  %151 = extractelement <2 x i32> %150, i32 1
  store i32 %151, i32* %125, align 1, !tbaa !2452
  %152 = extractelement <2 x i32> %145, i32 0
  store i32 %152, i32* %126, align 1, !tbaa !2452
  %153 = extractelement <2 x i32> %145, i32 1
  store i32 %153, i32* %127, align 1, !tbaa !2452
  %154 = add i64 %288, 22
  store i64 %154, i64* %PC, align 8
  %155 = load i64, i64* %136, align 8
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = add i64 %288, 26
  store i64 %156, i64* %PC, align 8
  %157 = load i32, i32* %255, align 4
  %158 = sext i32 %157 to i64
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %159 = shl nsw i64 %158, 2
  %160 = add i64 %159, %155
  %161 = add i64 %288, 31
  store i64 %161, i64* %PC, align 8
  %162 = load <2 x float>, <2 x float>* %21, align 1
  %163 = extractelement <2 x float> %162, i32 0
  %164 = inttoptr i64 %160 to float*
  store float %163, float* %164, align 4
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -24
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, 3
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %166 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = add i32 %170, 1
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = icmp eq i32 %170, -1
  %174 = icmp eq i32 %171, 0
  %175 = or i1 %173, %174
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %53, align 1, !tbaa !2432
  %177 = and i32 %171, 255
  %178 = tail call i32 @llvm.ctpop.i32(i32 %177) #8
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  store i8 %181, i8* %59, align 1, !tbaa !2446
  %182 = xor i32 %170, %171
  %183 = lshr i32 %182, 4
  %184 = trunc i32 %183 to i8
  %185 = and i8 %184, 1
  store i8 %185, i8* %60, align 1, !tbaa !2450
  %186 = icmp eq i32 %171, 0
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %63, align 1, !tbaa !2447
  %188 = lshr i32 %171, 31
  %189 = trunc i32 %188 to i8
  store i8 %189, i8* %66, align 1, !tbaa !2448
  %190 = lshr i32 %170, 31
  %191 = xor i32 %188, %190
  %192 = add nuw nsw i32 %191, %188
  %193 = icmp eq i32 %192, 2
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %67, align 1, !tbaa !2449
  %195 = add i64 %167, 9
  store i64 %195, i64* %PC, align 8
  store i32 %171, i32* %169, align 4
  %196 = load i64, i64* %PC, align 8
  %197 = add i64 %196, -52
  store i64 %197, i64* %71, align 8, !tbaa !2428
  br label %block_402e00

block_402e39.sink.split:                          ; preds = %block_402d9b, %block_402df4
  %.sink = phi i64 [ %128, %block_402df4 ], [ %73, %block_402d9b ]
  store i64 %.sink, i64* %71, align 8, !tbaa !2428
  br label %block_402e39

block_402e39:                                     ; preds = %block_402e00, %block_402e39.sink.split
  %198 = phi i64 [ %288, %block_402e00 ], [ %.sink, %block_402e39.sink.split ]
  %199 = add i64 %198, 1
  store i64 %199, i64* %PC, align 8
  %200 = load i64, i64* %8, align 8, !tbaa !2428
  %201 = add i64 %200, 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RBP, align 8, !tbaa !2428
  store i64 %201, i64* %8, align 8, !tbaa !2428
  %204 = add i64 %198, 2
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %201 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %71, align 8, !tbaa !2428
  %207 = add i64 %200, 16
  store i64 %207, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402daa:                                     ; preds = %block_402da0
  %208 = add i64 %391, 3
  store i64 %208, i64* %PC, align 8
  %209 = load i32, i32* %51, align 4
  %210 = zext i32 %209 to i64
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %391, 7
  store i64 %211, i64* %PC, align 8
  %212 = load i32, i32* %368, align 4
  %213 = sext i32 %209 to i64
  %214 = sext i32 %212 to i64
  %215 = mul nsw i64 %214, %213
  %216 = trunc i64 %215 to i32
  %217 = and i64 %215, 4294967295
  store i64 %217, i64* %RAX, align 8, !tbaa !2428
  %218 = shl i64 %215, 32
  %219 = ashr exact i64 %218, 32
  %220 = icmp ne i64 %219, %215
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %53, align 1, !tbaa !2432
  %222 = and i32 %216, 255
  %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #8
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  store i8 %226, i8* %59, align 1, !tbaa !2446
  store i8 0, i8* %60, align 1, !tbaa !2450
  store i8 0, i8* %63, align 1, !tbaa !2447
  %227 = lshr i32 %216, 31
  %228 = trunc i32 %227 to i8
  store i8 %228, i8* %66, align 1, !tbaa !2448
  store i8 %221, i8* %67, align 1, !tbaa !2449
  %229 = add i64 %47, -36
  %230 = trunc i64 %215 to i32
  %231 = add i64 %391, 10
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %229 to i32*
  store i32 %230, i32* %232, align 4
  %233 = load i64, i64* %RBP, align 8
  %234 = add i64 %233, -24
  %235 = load i64, i64* %PC, align 8
  %236 = add i64 %235, 7
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %234 to i32*
  store i32 0, i32* %237, align 4
  %238 = bitcast %union.VectorReg* %5 to i8*
  %239 = bitcast %union.VectorReg* %5 to float*
  %240 = getelementptr inbounds i8, i8* %238, i64 4
  %241 = bitcast i8* %240 to float*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %243 = bitcast i64* %242 to float*
  %244 = getelementptr inbounds i8, i8* %238, i64 12
  %245 = bitcast i8* %244 to float*
  %246 = bitcast %union.VectorReg* %5 to <2 x float>*
  %247 = bitcast i64* %242 to <2 x i32>*
  %248 = bitcast i8* %240 to i32*
  %249 = bitcast i64* %242 to i32*
  %250 = bitcast i8* %244 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402dbb

block_402e00:                                     ; preds = %block_402e0c, %block_402df9
  %251 = phi i64 [ %197, %block_402e0c ], [ %.pre1, %block_402df9 ]
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -24
  %254 = add i64 %251, 3
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RAX, align 8, !tbaa !2428
  %258 = add i64 %252, -4
  %259 = add i64 %251, 6
  store i64 %259, i64* %PC, align 8
  %260 = inttoptr i64 %258 to i32*
  %261 = load i32, i32* %260, align 4
  %262 = sub i32 %256, %261
  %263 = icmp ult i32 %256, %261
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %53, align 1, !tbaa !2432
  %265 = and i32 %262, 255
  %266 = tail call i32 @llvm.ctpop.i32(i32 %265) #8
  %267 = trunc i32 %266 to i8
  %268 = and i8 %267, 1
  %269 = xor i8 %268, 1
  store i8 %269, i8* %59, align 1, !tbaa !2446
  %270 = xor i32 %261, %256
  %271 = xor i32 %270, %262
  %272 = lshr i32 %271, 4
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  store i8 %274, i8* %60, align 1, !tbaa !2450
  %275 = icmp eq i32 %262, 0
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %63, align 1, !tbaa !2447
  %277 = lshr i32 %262, 31
  %278 = trunc i32 %277 to i8
  store i8 %278, i8* %66, align 1, !tbaa !2448
  %279 = lshr i32 %256, 31
  %280 = lshr i32 %261, 31
  %281 = xor i32 %280, %279
  %282 = xor i32 %277, %279
  %283 = add nuw nsw i32 %282, %281
  %284 = icmp eq i32 %283, 2
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %67, align 1, !tbaa !2449
  %286 = icmp ne i8 %278, 0
  %287 = xor i1 %286, %284
  %.v6 = select i1 %287, i64 12, i64 57
  %288 = add i64 %251, %.v6
  store i64 %288, i64* %71, align 8, !tbaa !2428
  br i1 %287, label %block_402e0c, label %block_402e39

block_402dc7:                                     ; preds = %block_402dbb
  %289 = add i64 %75, -8
  %290 = add i64 %111, 5
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %289 to i32*
  %292 = load i32, i32* %291, align 4
  %293 = bitcast %union.VectorReg* %5 to i32*
  store i32 %292, i32* %293, align 1, !tbaa !2452
  store float 0.000000e+00, float* %241, align 1, !tbaa !2452
  store float 0.000000e+00, float* %243, align 1, !tbaa !2452
  store float 0.000000e+00, float* %245, align 1, !tbaa !2452
  %294 = add i64 %75, -16
  %295 = add i64 %111, 9
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %294 to i64*
  %297 = load i64, i64* %296, align 8
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %298 = add i64 %111, 13
  store i64 %298, i64* %PC, align 8
  %299 = load i32, i32* %78, align 4
  %300 = sext i32 %299 to i64
  store i64 %300, i64* %RCX, align 8, !tbaa !2428
  %301 = shl nsw i64 %300, 2
  %302 = add i64 %301, %297
  %303 = add i64 %111, 18
  store i64 %303, i64* %PC, align 8
  %304 = load <2 x float>, <2 x float>* %246, align 1
  %305 = load <2 x i32>, <2 x i32>* %247, align 1
  %306 = inttoptr i64 %302 to float*
  %307 = load float, float* %306, align 4
  %308 = extractelement <2 x float> %304, i32 0
  %309 = fmul float %308, %307
  store float %309, float* %239, align 1, !tbaa !2452
  %310 = bitcast <2 x float> %304 to <2 x i32>
  %311 = extractelement <2 x i32> %310, i32 1
  store i32 %311, i32* %248, align 1, !tbaa !2452
  %312 = extractelement <2 x i32> %305, i32 0
  store i32 %312, i32* %249, align 1, !tbaa !2452
  %313 = extractelement <2 x i32> %305, i32 1
  store i32 %313, i32* %250, align 1, !tbaa !2452
  %314 = add i64 %111, 22
  store i64 %314, i64* %PC, align 8
  %315 = load i64, i64* %296, align 8
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = add i64 %111, 26
  store i64 %316, i64* %PC, align 8
  %317 = load i32, i32* %78, align 4
  %318 = sext i32 %317 to i64
  store i64 %318, i64* %RCX, align 8, !tbaa !2428
  %319 = shl nsw i64 %318, 2
  %320 = add i64 %319, %315
  %321 = add i64 %111, 31
  store i64 %321, i64* %PC, align 8
  %322 = load <2 x float>, <2 x float>* %21, align 1
  %323 = extractelement <2 x float> %322, i32 0
  %324 = inttoptr i64 %320 to float*
  store float %323, float* %324, align 4
  %325 = load i64, i64* %RBP, align 8
  %326 = add i64 %325, -24
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = add i64 %325, -20
  %333 = add i64 %327, 6
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i32*
  %335 = load i32, i32* %334, align 4
  %336 = add i32 %335, %330
  %337 = zext i32 %336 to i64
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = icmp ult i32 %336, %330
  %339 = icmp ult i32 %336, %335
  %340 = or i1 %338, %339
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %53, align 1, !tbaa !2432
  %342 = and i32 %336, 255
  %343 = tail call i32 @llvm.ctpop.i32(i32 %342) #8
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %59, align 1, !tbaa !2446
  %347 = xor i32 %335, %330
  %348 = xor i32 %347, %336
  %349 = lshr i32 %348, 4
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  store i8 %351, i8* %60, align 1, !tbaa !2450
  %352 = icmp eq i32 %336, 0
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %63, align 1, !tbaa !2447
  %354 = lshr i32 %336, 31
  %355 = trunc i32 %354 to i8
  store i8 %355, i8* %66, align 1, !tbaa !2448
  %356 = lshr i32 %330, 31
  %357 = lshr i32 %335, 31
  %358 = xor i32 %354, %356
  %359 = xor i32 %354, %357
  %360 = add nuw nsw i32 %358, %359
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %67, align 1, !tbaa !2449
  %363 = add i64 %327, 9
  store i64 %363, i64* %PC, align 8
  store i32 %336, i32* %329, align 4
  %364 = load i64, i64* %PC, align 8
  %365 = add i64 %364, -52
  store i64 %365, i64* %71, align 8, !tbaa !2428
  br label %block_402dbb

block_402da0:                                     ; preds = %block_402d70
  %366 = add i64 %47, -20
  %367 = add i64 %72, 4
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = add i32 %369, -1
  %371 = icmp eq i32 %369, 0
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %53, align 1, !tbaa !2432
  %373 = and i32 %370, 255
  %374 = tail call i32 @llvm.ctpop.i32(i32 %373) #8
  %375 = trunc i32 %374 to i8
  %376 = and i8 %375, 1
  %377 = xor i8 %376, 1
  store i8 %377, i8* %59, align 1, !tbaa !2446
  %378 = xor i32 %369, %370
  %379 = lshr i32 %378, 4
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  store i8 %381, i8* %60, align 1, !tbaa !2450
  %382 = icmp eq i32 %370, 0
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %63, align 1, !tbaa !2447
  %384 = lshr i32 %370, 31
  %385 = trunc i32 %384 to i8
  store i8 %385, i8* %66, align 1, !tbaa !2448
  %386 = lshr i32 %369, 31
  %387 = xor i32 %384, %386
  %388 = add nuw nsw i32 %387, %386
  %389 = icmp eq i32 %388, 2
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %67, align 1, !tbaa !2449
  %.v4 = select i1 %382, i64 89, i64 10
  %391 = add i64 %72, %.v4
  store i64 %391, i64* %71, align 8, !tbaa !2428
  br i1 %382, label %block_402df9, label %block_402daa
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028d0_print_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4028d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -12
  %12 = load i32, i32* %EDI, align 4
  %13 = add i64 %10, 6
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i32*
  store i32 %12, i32* %14, align 4
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %6, align 8, !tbaa !2428
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %18, i64* %6, align 8, !tbaa !2428
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %23 = inttoptr i64 %18 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %22, align 8, !tbaa !2428
  %25 = add i64 %17, 16
  store i64 %25, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400510:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i8), i8* %10, align 1, !tbaa !2432
  %11 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i32), i32 255)) #8
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !2446
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (i64* @stderr to i64), i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64))), i64 4) to i8), i8 1), i8* %16, align 1, !tbaa !2450
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0) to i8), i8* %17, align 1, !tbaa !2447
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63) to i8), i8* %18, align 1, !tbaa !2448
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %19, align 1, !tbaa !2449
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %21 = add i64 %9, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16)
  store i64 %21, i64* %20, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), label %block_400538, label %block_400521

block_400538:                                     ; preds = %block_400521, %block_400510
  %22 = phi i64 [ %29, %block_400521 ], [ %21, %block_400510 ]
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %8, align 8
  store i64 %24, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %22, 2
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %6 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %20, align 8, !tbaa !2428
  %28 = add i64 %6, 8
  store i64 %28, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400521:                                     ; preds = %block_400510
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %10, align 1, !tbaa !2432
  store i8 1, i8* %15, align 1, !tbaa !2446
  store i8 1, i8* %17, align 1, !tbaa !2447
  store i8 0, i8* %18, align 1, !tbaa !2448
  store i8 0, i8* %19, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %29 = add i64 %9, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %29, i64* %20, align 8, !tbaa !2428
  br label %block_400538
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402eb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402eb4:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = icmp ult i64 %3, 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = lshr i64 %4, 63
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12 = lshr i64 %3, 63
  %13 = xor i64 %10, %12
  %14 = add nuw nsw i64 %13, %12
  %15 = icmp eq i64 %14, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %3, i64* %RSP, align 8, !tbaa !2428
  %18 = zext i1 %5 to i8
  store i8 %18, i8* %6, align 1, !tbaa !2432
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #8
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %7, align 1, !tbaa !2446
  %25 = xor i64 %4, %3
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %8, align 1, !tbaa !2450
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %9, align 1, !tbaa !2447
  %31 = trunc i64 %12 to i8
  store i8 %31, i8* %11, align 1, !tbaa !2448
  store i8 %16, i8* %17, align 1, !tbaa !2449
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = inttoptr i64 %3 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %33, align 8, !tbaa !2428
  %37 = add i64 %3, 8
  store i64 %37, i64* %34, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400500__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400500:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e40___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  %11 = load i64, i64* %R14, align 8
  %12 = load i64, i64* %PC, align 8
  %13 = add i64 %12, 2
  store i64 %13, i64* %PC, align 8
  %14 = add i64 %8, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %11, i64* %15, align 8
  %16 = load i64, i64* %RDX, align 8
  %17 = load i64, i64* %PC, align 8
  store i64 %16, i64* %R15, align 8, !tbaa !2428
  %18 = load i64, i64* %R13, align 8
  %19 = add i64 %17, 5
  store i64 %19, i64* %PC, align 8
  %20 = add i64 %8, -24
  %21 = inttoptr i64 %20 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %R12, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 2
  store i64 %24, i64* %PC, align 8
  %25 = add i64 %8, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %22, i64* %26, align 8
  %27 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %27, 8
  store i64 %29, i64* %PC, align 8
  %30 = add i64 %8, -40
  %31 = inttoptr i64 %30 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %33 = load i64, i64* %RBX, align 8
  %34 = add i64 %32, 8
  store i64 %34, i64* %PC, align 8
  %35 = add i64 %8, -48
  %36 = inttoptr i64 %35 to i64*
  store i64 %33, i64* %36, align 8
  %37 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %38 = load i32, i32* %EDI, align 4
  %39 = zext i32 %38 to i64
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSI, align 8
  store i64 %41, i64* %R14, align 8, !tbaa !2428
  %42 = load i64, i64* %RBP, align 8
  %43 = load i64, i64* %R12, align 8
  %44 = sub i64 %42, %43
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %51 = lshr i64 %44, 2
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = ashr i64 %44, 3
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i8 %53, i8* %45, align 1, !tbaa !2456
  %55 = trunc i64 %54 to i32
  %56 = and i32 %55, 255
  %57 = tail call i32 @llvm.ctpop.i32(i32 %56) #8
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  store i8 %60, i8* %46, align 1, !tbaa !2456
  store i8 0, i8* %47, align 1, !tbaa !2456
  %61 = icmp eq i64 %54, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %48, align 1, !tbaa !2456
  %63 = lshr i64 %54, 63
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* %49, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  %65 = add i64 %40, -10723
  %66 = add i64 %40, 22
  %67 = add i64 %8, -64
  %68 = inttoptr i64 %67 to i64*
  store i64 %66, i64* %68, align 8
  store i64 %67, i64* %7, align 8, !tbaa !2428
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %65, i64* %69, align 8, !tbaa !2428
  %70 = tail call %struct.Memory* @sub_400478__init_proc_renamed_(%struct.State* nonnull %0, i64 %65, %struct.Memory* %2)
  %71 = load i64, i64* %RBP, align 8
  %72 = load i64, i64* %PC, align 8
  store i8 0, i8* %45, align 1, !tbaa !2432
  %73 = trunc i64 %71 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #8
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %46, align 1, !tbaa !2446
  %79 = icmp eq i64 %71, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %48, align 1, !tbaa !2447
  %81 = lshr i64 %71, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %49, align 1, !tbaa !2448
  store i8 0, i8* %50, align 1, !tbaa !2449
  store i8 0, i8* %47, align 1, !tbaa !2450
  %.v = select i1 %79, i64 37, i64 5
  %83 = add i64 %72, %.v
  store i64 %83, i64* %69, align 8, !tbaa !2428
  br i1 %79, label %block_402e96, label %block_402e76

block_402e96:                                     ; preds = %block_402e80, %block_402e40
  %84 = phi i64 [ %83, %block_402e40 ], [ %182, %block_402e80 ]
  %MEMORY.0 = phi %struct.Memory* [ %70, %block_402e40 ], [ %152, %block_402e80 ]
  %85 = load i64, i64* %RSP, align 8
  %86 = add i64 %85, 8
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  %87 = icmp ugt i64 %85, -9
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %45, align 1, !tbaa !2432
  %89 = trunc i64 %86 to i32
  %90 = and i32 %89, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #8
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %46, align 1, !tbaa !2446
  %95 = xor i64 %85, %86
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %47, align 1, !tbaa !2450
  %99 = icmp eq i64 %86, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %48, align 1, !tbaa !2447
  %101 = lshr i64 %86, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %49, align 1, !tbaa !2448
  %103 = lshr i64 %85, 63
  %104 = xor i64 %101, %103
  %105 = add nuw nsw i64 %104, %101
  %106 = icmp eq i64 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %50, align 1, !tbaa !2449
  %108 = add i64 %84, 5
  store i64 %108, i64* %PC, align 8
  %109 = add i64 %85, 16
  %110 = inttoptr i64 %86 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RBX, align 8, !tbaa !2428
  store i64 %109, i64* %7, align 8, !tbaa !2428
  %112 = add i64 %84, 6
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %85, 24
  %114 = inttoptr i64 %109 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %7, align 8, !tbaa !2428
  %116 = add i64 %84, 8
  store i64 %116, i64* %PC, align 8
  %117 = add i64 %85, 32
  %118 = inttoptr i64 %113 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %R12, align 8, !tbaa !2428
  store i64 %117, i64* %7, align 8, !tbaa !2428
  %120 = add i64 %84, 10
  store i64 %120, i64* %PC, align 8
  %121 = add i64 %85, 40
  %122 = inttoptr i64 %117 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %R13, align 8, !tbaa !2428
  store i64 %121, i64* %7, align 8, !tbaa !2428
  %124 = add i64 %84, 12
  store i64 %124, i64* %PC, align 8
  %125 = add i64 %85, 48
  %126 = inttoptr i64 %121 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %R14, align 8, !tbaa !2428
  store i64 %125, i64* %7, align 8, !tbaa !2428
  %128 = add i64 %84, 14
  store i64 %128, i64* %PC, align 8
  %129 = add i64 %85, 56
  %130 = inttoptr i64 %125 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %R15, align 8, !tbaa !2428
  store i64 %129, i64* %7, align 8, !tbaa !2428
  %132 = add i64 %84, 15
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %129 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %69, align 8, !tbaa !2428
  %135 = add i64 %85, 64
  store i64 %135, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402e76:                                     ; preds = %block_402e40
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %45, align 1, !tbaa !2432
  store i8 1, i8* %46, align 1, !tbaa !2446
  store i8 1, i8* %48, align 1, !tbaa !2447
  store i8 0, i8* %49, align 1, !tbaa !2448
  store i8 0, i8* %50, align 1, !tbaa !2449
  store i8 0, i8* %47, align 1, !tbaa !2450
  %136 = add i64 %83, 10
  store i64 %136, i64* %PC, align 8
  br label %block_402e80

block_402e80:                                     ; preds = %block_402e80, %block_402e76
  %137 = phi i64 [ 0, %block_402e76 ], [ %155, %block_402e80 ]
  %138 = phi i64 [ %136, %block_402e76 ], [ %182, %block_402e80 ]
  %MEMORY.1 = phi %struct.Memory* [ %70, %block_402e76 ], [ %152, %block_402e80 ]
  %139 = load i64, i64* %R15, align 8
  store i64 %139, i64* %RDX, align 8, !tbaa !2428
  %140 = load i64, i64* %R14, align 8
  store i64 %140, i64* %RSI, align 8, !tbaa !2428
  %141 = load i32, i32* %R13D, align 4
  %142 = zext i32 %141 to i64
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %R12, align 8
  %144 = shl i64 %137, 3
  %145 = add i64 %144, %143
  %146 = add i64 %138, 13
  store i64 %146, i64* %PC, align 8
  %147 = load i64, i64* %7, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %7, align 8, !tbaa !2428
  %150 = inttoptr i64 %145 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %69, align 8, !tbaa !2428
  %152 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %151, %struct.Memory* %MEMORY.1)
  %153 = load i64, i64* %RBX, align 8
  %154 = load i64, i64* %PC, align 8
  %155 = add i64 %153, 1
  store i64 %155, i64* %RBX, align 8, !tbaa !2428
  %156 = lshr i64 %155, 63
  %157 = load i64, i64* %RBP, align 8
  %158 = sub i64 %157, %155
  %159 = icmp ult i64 %157, %155
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %45, align 1, !tbaa !2432
  %161 = trunc i64 %158 to i32
  %162 = and i32 %161, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #8
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %46, align 1, !tbaa !2446
  %167 = xor i64 %155, %157
  %168 = xor i64 %167, %158
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %47, align 1, !tbaa !2450
  %172 = icmp eq i64 %158, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %48, align 1, !tbaa !2447
  %174 = lshr i64 %158, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %49, align 1, !tbaa !2448
  %176 = lshr i64 %157, 63
  %177 = xor i64 %156, %176
  %178 = xor i64 %174, %176
  %179 = add nuw nsw i64 %178, %177
  %180 = icmp eq i64 %179, 2
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %50, align 1, !tbaa !2449
  %.v1 = select i1 %172, i64 9, i64 -13
  %182 = add i64 %154, %.v1
  store i64 %182, i64* %69, align 8, !tbaa !2428
  br i1 %172, label %block_402e96, label %block_402e80
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c90_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401c90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %11 = load i64, i64* %RBP, align 8
  %12 = add i64 %1, 1
  store i64 %12, i64* %PC, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14 = load i64, i64* %13, align 8, !tbaa !2428
  %15 = add i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64 %11, i64* %16, align 8
  %17 = load i64, i64* %PC, align 8
  store i64 %15, i64* %RBP, align 8, !tbaa !2428
  %18 = add i64 %14, -104
  store i64 %18, i64* %RSP, align 8, !tbaa !2428
  %19 = icmp ult i64 %15, 96
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %20, i8* %21, align 1, !tbaa !2432
  %22 = trunc i64 %18 to i32
  %23 = and i32 %22, 255
  %24 = tail call i32 @llvm.ctpop.i32(i32 %23) #8
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = xor i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %27, i8* %28, align 1, !tbaa !2446
  %29 = xor i64 %15, %18
  %30 = lshr i64 %29, 4
  %31 = trunc i64 %30 to i8
  %32 = and i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = icmp eq i64 %18, 0
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %35, i8* %36, align 1, !tbaa !2447
  %37 = lshr i64 %18, 63
  %38 = trunc i64 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %38, i8* %39, align 1, !tbaa !2448
  %40 = lshr i64 %15, 63
  %41 = xor i64 %37, %40
  %42 = add nuw nsw i64 %41, %40
  %43 = icmp eq i64 %42, 2
  %44 = zext i1 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %44, i8* %45, align 1, !tbaa !2449
  %46 = add i64 %14, -16
  %47 = load i64, i64* %RDI, align 8
  %48 = add i64 %17, 11
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %46 to i64*
  store i64 %47, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -12
  %52 = load i32, i32* %ESI, align 4
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i32*
  store i32 %52, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -16
  %58 = load i32, i32* %EDX, align 4
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %61, align 4
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -24
  %64 = load i64, i64* %RCX, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %63 to i64*
  store i64 %64, i64* %67, align 8
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -32
  %70 = load i64, i64* %R8, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 4
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %69 to i64*
  store i64 %70, i64* %73, align 8
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -36
  %76 = load i32, i32* %R9D, align 4
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %75 to i32*
  store i32 %76, i32* %79, align 4
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -16
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %81 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = add i32 %85, -1
  %87 = zext i32 %86 to i64
  store i64 %87, i64* %RDX, align 8, !tbaa !2428
  %88 = icmp eq i32 %85, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %21, align 1, !tbaa !2432
  %90 = and i32 %86, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #8
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %28, align 1, !tbaa !2446
  %95 = xor i32 %85, %86
  %96 = lshr i32 %95, 4
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %33, align 1, !tbaa !2450
  %99 = icmp eq i32 %86, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %36, align 1, !tbaa !2447
  %101 = lshr i32 %86, 31
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %39, align 1, !tbaa !2448
  %103 = lshr i32 %85, 31
  %104 = xor i32 %101, %103
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %45, align 1, !tbaa !2449
  %108 = add i64 %80, -56
  %109 = add i64 %82, 9
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i32*
  store i32 %86, i32* %110, align 4
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -36
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %112 to i32*
  %116 = load i32, i32* %115, align 4
  store i8 0, i8* %21, align 1, !tbaa !2432
  %117 = and i32 %116, 255
  %118 = tail call i32 @llvm.ctpop.i32(i32 %117) #8
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  store i8 %121, i8* %28, align 1, !tbaa !2446
  store i8 0, i8* %33, align 1, !tbaa !2450
  %122 = icmp eq i32 %116, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %36, align 1, !tbaa !2447
  %124 = lshr i32 %116, 31
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %39, align 1, !tbaa !2448
  store i8 0, i8* %45, align 1, !tbaa !2449
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %122, i64 10, i64 417
  %127 = add i64 %113, %.v
  store i64 %127, i64* %126, align 8, !tbaa !2428
  br i1 %122, label %block_401cc1, label %block_401e58

block_401ef6:                                     ; preds = %block_401eec
  %128 = add i64 %372, -48
  %129 = add i64 %1246, 7
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i32*
  store i32 1, i32* %130, align 4
  %131 = bitcast %union.VectorReg* %10 to i8*
  %132 = bitcast %union.VectorReg* %10 to float*
  %133 = getelementptr inbounds i8, i8* %131, i64 4
  %134 = bitcast i8* %133 to float*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %136 = bitcast i64* %135 to float*
  %137 = getelementptr inbounds i8, i8* %131, i64 12
  %138 = bitcast i8* %137 to float*
  %139 = bitcast %union.VectorReg* %10 to <2 x float>*
  %140 = bitcast i64* %135 to <2 x i32>*
  %141 = bitcast i8* %133 to i32*
  %142 = bitcast i64* %135 to i32*
  %143 = bitcast i8* %137 to i32*
  %144 = bitcast %union.VectorReg* %10 to <2 x float>*
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_401efd

block_401e6b:                                     ; preds = %block_401e5f
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %145 = add i64 %408, 8
  store i64 %145, i64* %PC, align 8
  %146 = load i32, i32* %375, align 4
  %147 = zext i32 %146 to i64
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %372, -8
  %149 = add i64 %408, 12
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RCX, align 8, !tbaa !2428
  %152 = add i64 %372, -12
  %153 = add i64 %408, 15
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RDX, align 8, !tbaa !2428
  %157 = add i64 %408, 19
  store i64 %157, i64* %PC, align 8
  %158 = load i32, i32* %375, align 4
  %159 = sext i32 %155 to i64
  %160 = sext i32 %158 to i64
  %161 = mul nsw i64 %160, %159
  %162 = and i64 %161, 4294967295
  store i64 %162, i64* %RDX, align 8, !tbaa !2428
  %163 = shl i64 %161, 32
  %164 = ashr exact i64 %163, 30
  store i64 %164, i64* %RSI, align 8, !tbaa !2428
  %165 = lshr i64 %164, 63
  %166 = add i64 %164, %151
  store i64 %166, i64* %RCX, align 8, !tbaa !2428
  %167 = icmp ult i64 %166, %151
  %168 = icmp ult i64 %166, %164
  %169 = or i1 %167, %168
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %21, align 1, !tbaa !2432
  %171 = trunc i64 %166 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #8
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %28, align 1, !tbaa !2446
  %177 = xor i64 %164, %151
  %178 = xor i64 %177, %166
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %33, align 1, !tbaa !2450
  %182 = icmp eq i64 %166, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %36, align 1, !tbaa !2447
  %184 = lshr i64 %166, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %39, align 1, !tbaa !2448
  %186 = lshr i64 %151, 63
  %187 = xor i64 %184, %186
  %188 = xor i64 %184, %165
  %189 = add nuw nsw i64 %187, %188
  %190 = icmp eq i64 %189, 2
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %45, align 1, !tbaa !2449
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -32
  %194 = add i64 %408, 36
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %192, -72
  %198 = add i64 %408, 40
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  store i64 %196, i64* %199, align 8
  %200 = load i64, i64* %RCX, align 8
  %201 = load i64, i64* %PC, align 8
  store i64 %200, i64* %RSI, align 8, !tbaa !2428
  %202 = load i32, i32* %EAX, align 4
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RDX, align 8, !tbaa !2428
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -72
  %206 = add i64 %201, 9
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %205 to i64*
  %208 = load i64, i64* %207, align 8
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  store i64 %203, i64* %565, align 8, !tbaa !2428
  %209 = add i64 %201, 3005
  %210 = add i64 %201, 17
  %211 = load i64, i64* %13, align 8, !tbaa !2428
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %210, i64* %213, align 8
  store i64 %212, i64* %13, align 8, !tbaa !2428
  store i64 %209, i64* %126, align 8, !tbaa !2428
  %214 = tail call %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* nonnull %0, i64 %209, %struct.Memory* %MEMORY.0)
  %215 = load i64, i64* %RBP, align 8
  %216 = add i64 %215, -40
  %217 = load i64, i64* %PC, align 8
  %218 = add i64 %217, 5
  store i64 %218, i64* %PC, align 8
  %219 = load <2 x float>, <2 x float>* %566, align 1
  %220 = extractelement <2 x float> %219, i32 0
  %221 = inttoptr i64 %216 to float*
  store float %220, float* %221, align 4
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -32
  %224 = load i64, i64* %PC, align 8
  %225 = add i64 %224, 4
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %223 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %RCX, align 8, !tbaa !2428
  %228 = add i64 %222, -44
  %229 = add i64 %224, 8
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to i32*
  %231 = load i32, i32* %230, align 4
  %232 = sext i32 %231 to i64
  store i64 %232, i64* %RSI, align 8, !tbaa !2428
  %233 = shl nsw i64 %232, 2
  %234 = add i64 %233, %227
  %235 = add i64 %224, 13
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i32*
  %237 = load i32, i32* %236, align 4
  %238 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %237, i32* %238, align 1, !tbaa !2452
  store float 0.000000e+00, float* %570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %572, align 1, !tbaa !2452
  store float 0.000000e+00, float* %574, align 1, !tbaa !2452
  %239 = add i64 %222, -40
  %240 = add i64 %224, 18
  store i64 %240, i64* %PC, align 8
  %241 = load <2 x float>, <2 x float>* %575, align 1
  %242 = load <2 x i32>, <2 x i32>* %576, align 1
  %243 = inttoptr i64 %239 to float*
  %244 = load float, float* %243, align 4
  %245 = extractelement <2 x float> %241, i32 0
  %246 = fsub float %245, %244
  store float %246, float* %568, align 1, !tbaa !2452
  %247 = bitcast <2 x float> %241 to <2 x i32>
  %248 = extractelement <2 x i32> %247, i32 1
  store i32 %248, i32* %577, align 1, !tbaa !2452
  %249 = extractelement <2 x i32> %242, i32 0
  store i32 %249, i32* %578, align 1, !tbaa !2452
  %250 = extractelement <2 x i32> %242, i32 1
  store i32 %250, i32* %579, align 1, !tbaa !2452
  %251 = add i64 %222, -8
  %252 = add i64 %224, 22
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RCX, align 8, !tbaa !2428
  %255 = add i64 %222, -12
  %256 = add i64 %224, 25
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %255 to i32*
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RAX, align 8, !tbaa !2428
  %260 = add i64 %224, 29
  store i64 %260, i64* %PC, align 8
  %261 = load i32, i32* %230, align 4
  %262 = sext i32 %258 to i64
  %263 = sext i32 %261 to i64
  %264 = mul nsw i64 %263, %262
  %265 = trunc i64 %264 to i32
  %266 = and i64 %264, 4294967295
  store i64 %266, i64* %RAX, align 8, !tbaa !2428
  %267 = shl i64 %264, 32
  %268 = ashr exact i64 %267, 32
  %269 = icmp ne i64 %268, %264
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %21, align 1, !tbaa !2432
  %271 = and i32 %265, 255
  %272 = tail call i32 @llvm.ctpop.i32(i32 %271) #8
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  store i8 %275, i8* %28, align 1, !tbaa !2446
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2447
  %276 = lshr i32 %265, 31
  %277 = trunc i32 %276 to i8
  store i8 %277, i8* %39, align 1, !tbaa !2448
  store i8 %270, i8* %45, align 1, !tbaa !2449
  %278 = add i64 %224, 32
  store i64 %278, i64* %PC, align 8
  %279 = trunc i64 %264 to i32
  %280 = load i32, i32* %230, align 4
  %281 = add i32 %280, %279
  %282 = zext i32 %281 to i64
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = icmp ult i32 %281, %279
  %284 = icmp ult i32 %281, %280
  %285 = or i1 %283, %284
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %21, align 1, !tbaa !2432
  %287 = and i32 %281, 255
  %288 = tail call i32 @llvm.ctpop.i32(i32 %287) #8
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  store i8 %291, i8* %28, align 1, !tbaa !2446
  %292 = xor i32 %280, %279
  %293 = xor i32 %292, %281
  %294 = lshr i32 %293, 4
  %295 = trunc i32 %294 to i8
  %296 = and i8 %295, 1
  store i8 %296, i8* %33, align 1, !tbaa !2450
  %297 = icmp eq i32 %281, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %36, align 1, !tbaa !2447
  %299 = lshr i32 %281, 31
  %300 = trunc i32 %299 to i8
  store i8 %300, i8* %39, align 1, !tbaa !2448
  %301 = lshr i32 %279, 31
  %302 = lshr i32 %280, 31
  %303 = xor i32 %299, %301
  %304 = xor i32 %299, %302
  %305 = add nuw nsw i32 %303, %304
  %306 = icmp eq i32 %305, 2
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %45, align 1, !tbaa !2449
  %308 = sext i32 %281 to i64
  store i64 %308, i64* %RSI, align 8, !tbaa !2428
  %309 = shl nsw i64 %308, 2
  %310 = add i64 %309, %254
  %311 = add i64 %224, 40
  store i64 %311, i64* %PC, align 8
  %312 = load <2 x float>, <2 x float>* %575, align 1
  %313 = load <2 x i32>, <2 x i32>* %576, align 1
  %314 = inttoptr i64 %310 to float*
  %315 = load float, float* %314, align 4
  %316 = extractelement <2 x float> %312, i32 0
  %317 = fdiv float %316, %315
  store float %317, float* %568, align 1, !tbaa !2452
  %318 = bitcast <2 x float> %312 to <2 x i32>
  %319 = extractelement <2 x i32> %318, i32 1
  store i32 %319, i32* %577, align 1, !tbaa !2452
  %320 = extractelement <2 x i32> %313, i32 0
  store i32 %320, i32* %578, align 1, !tbaa !2452
  %321 = extractelement <2 x i32> %313, i32 1
  store i32 %321, i32* %579, align 1, !tbaa !2452
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -32
  %324 = add i64 %224, 44
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %RCX, align 8, !tbaa !2428
  %327 = add i64 %322, -44
  %328 = add i64 %224, 48
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = sext i32 %330 to i64
  store i64 %331, i64* %RSI, align 8, !tbaa !2428
  %332 = shl nsw i64 %331, 2
  %333 = add i64 %332, %326
  %334 = add i64 %224, 53
  store i64 %334, i64* %PC, align 8
  %335 = load <2 x float>, <2 x float>* %566, align 1
  %336 = extractelement <2 x float> %335, i32 0
  %337 = inttoptr i64 %333 to float*
  store float %336, float* %337, align 4
  %338 = load i64, i64* %RBP, align 8
  %339 = add i64 %338, -44
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, 3
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %339 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = add i32 %343, 1
  %345 = zext i32 %344 to i64
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = icmp eq i32 %343, -1
  %347 = icmp eq i32 %344, 0
  %348 = or i1 %346, %347
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %21, align 1, !tbaa !2432
  %350 = and i32 %344, 255
  %351 = tail call i32 @llvm.ctpop.i32(i32 %350) #8
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  store i8 %354, i8* %28, align 1, !tbaa !2446
  %355 = xor i32 %343, %344
  %356 = lshr i32 %355, 4
  %357 = trunc i32 %356 to i8
  %358 = and i8 %357, 1
  store i8 %358, i8* %33, align 1, !tbaa !2450
  %359 = icmp eq i32 %344, 0
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %36, align 1, !tbaa !2447
  %361 = lshr i32 %344, 31
  %362 = trunc i32 %361 to i8
  store i8 %362, i8* %39, align 1, !tbaa !2448
  %363 = lshr i32 %343, 31
  %364 = xor i32 %361, %363
  %365 = add nuw nsw i32 %364, %361
  %366 = icmp eq i32 %365, 2
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %45, align 1, !tbaa !2449
  %368 = add i64 %340, 9
  store i64 %368, i64* %PC, align 8
  store i32 %344, i32* %342, align 4
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, -136
  store i64 %370, i64* %126, align 8, !tbaa !2428
  br label %block_401e5f

block_401e5f:                                     ; preds = %block_401e58, %block_401e6b
  %371 = phi i64 [ %.pre5, %block_401e58 ], [ %370, %block_401e6b ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e58 ], [ %214, %block_401e6b ]
  %372 = load i64, i64* %RBP, align 8
  %373 = add i64 %372, -44
  %374 = add i64 %371, 3
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = add i64 %372, -16
  %379 = add i64 %371, 6
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %378 to i32*
  %381 = load i32, i32* %380, align 4
  %382 = sub i32 %376, %381
  %383 = icmp ult i32 %376, %381
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %21, align 1, !tbaa !2432
  %385 = and i32 %382, 255
  %386 = tail call i32 @llvm.ctpop.i32(i32 %385) #8
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  store i8 %389, i8* %28, align 1, !tbaa !2446
  %390 = xor i32 %381, %376
  %391 = xor i32 %390, %382
  %392 = lshr i32 %391, 4
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %33, align 1, !tbaa !2450
  %395 = icmp eq i32 %382, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %36, align 1, !tbaa !2447
  %397 = lshr i32 %382, 31
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %39, align 1, !tbaa !2448
  %399 = lshr i32 %376, 31
  %400 = lshr i32 %381, 31
  %401 = xor i32 %400, %399
  %402 = xor i32 %397, %399
  %403 = add nuw nsw i32 %402, %401
  %404 = icmp eq i32 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %45, align 1, !tbaa !2449
  %406 = icmp ne i8 %398, 0
  %407 = xor i1 %406, %404
  %.v35 = select i1 %407, i64 12, i64 141
  %408 = add i64 %371, %.v35
  store i64 %408, i64* %126, align 8, !tbaa !2428
  br i1 %407, label %block_401e6b, label %block_401eec

block_401e53:                                     ; preds = %block_401da8
  %409 = add i64 %1171, 436
  br label %block_402007

block_401cd2:                                     ; preds = %block_401d36, %block_401ccb
  %410 = phi i64 [ %.pre, %block_401ccb ], [ %782, %block_401d36 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401ccb ], [ %749, %block_401d36 ]
  %411 = load i64, i64* %RBP, align 8
  %412 = add i64 %411, -44
  %413 = add i64 %410, 3
  store i64 %413, i64* %PC, align 8
  %414 = inttoptr i64 %412 to i32*
  %415 = load i32, i32* %414, align 4
  %416 = zext i32 %415 to i64
  store i64 %416, i64* %RAX, align 8, !tbaa !2428
  %417 = add i64 %411, -56
  %418 = add i64 %410, 6
  store i64 %418, i64* %PC, align 8
  %419 = inttoptr i64 %417 to i32*
  %420 = load i32, i32* %419, align 4
  %421 = sub i32 %415, %420
  %422 = icmp ult i32 %415, %420
  %423 = zext i1 %422 to i8
  store i8 %423, i8* %21, align 1, !tbaa !2432
  %424 = and i32 %421, 255
  %425 = tail call i32 @llvm.ctpop.i32(i32 %424) #8
  %426 = trunc i32 %425 to i8
  %427 = and i8 %426, 1
  %428 = xor i8 %427, 1
  store i8 %428, i8* %28, align 1, !tbaa !2446
  %429 = xor i32 %420, %415
  %430 = xor i32 %429, %421
  %431 = lshr i32 %430, 4
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  store i8 %433, i8* %33, align 1, !tbaa !2450
  %434 = icmp eq i32 %421, 0
  %435 = zext i1 %434 to i8
  store i8 %435, i8* %36, align 1, !tbaa !2447
  %436 = lshr i32 %421, 31
  %437 = trunc i32 %436 to i8
  store i8 %437, i8* %39, align 1, !tbaa !2448
  %438 = lshr i32 %415, 31
  %439 = lshr i32 %420, 31
  %440 = xor i32 %439, %438
  %441 = xor i32 %436, %438
  %442 = add nuw nsw i32 %441, %440
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %45, align 1, !tbaa !2449
  %445 = icmp ne i8 %437, 0
  %446 = xor i1 %445, %443
  %.v32 = select i1 %446, i64 12, i64 202
  %447 = add i64 %410, %.v32
  store i64 %447, i64* %126, align 8, !tbaa !2428
  br i1 %446, label %block_401cde, label %block_401d9c

block_401ccb:                                     ; preds = %block_401cc1
  %448 = add i64 %111, -44
  %449 = add i64 %561, 7
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i32*
  store i32 0, i32* %450, align 4
  %451 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %452 = getelementptr inbounds i8, i8* %451, i64 4
  %453 = bitcast i8* %452 to float*
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %455 = bitcast i64* %454 to float*
  %456 = getelementptr inbounds i8, i8* %451, i64 12
  %457 = bitcast i8* %456 to float*
  %458 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  %459 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_401cd2

block_401cde:                                     ; preds = %block_401cd2
  %460 = add i64 %411, -24
  %461 = add i64 %447, 4
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %460 to i64*
  %463 = load i64, i64* %462, align 8
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = add i64 %447, 8
  store i64 %464, i64* %PC, align 8
  %465 = load i32, i32* %414, align 4
  %466 = sext i32 %465 to i64
  store i64 %466, i64* %RCX, align 8, !tbaa !2428
  %467 = shl nsw i64 %466, 2
  %468 = add i64 %467, %463
  %469 = add i64 %447, 11
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to i32*
  %471 = load i32, i32* %470, align 4
  %472 = zext i32 %471 to i64
  store i64 %472, i64* %RDX, align 8, !tbaa !2428
  %473 = add i64 %411, -52
  %474 = add i64 %447, 14
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %473 to i32*
  store i32 %471, i32* %475, align 4
  %476 = load i64, i64* %RBP, align 8
  %477 = add i64 %476, -32
  %478 = load i64, i64* %PC, align 8
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480, align 8
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = add i64 %476, -52
  %483 = add i64 %478, 8
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i32*
  %485 = load i32, i32* %484, align 4
  %486 = sext i32 %485 to i64
  store i64 %486, i64* %RCX, align 8, !tbaa !2428
  %487 = shl nsw i64 %486, 2
  %488 = add i64 %487, %481
  %489 = add i64 %478, 13
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %488 to i32*
  %491 = load i32, i32* %490, align 4
  %492 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %491, i32* %492, align 1, !tbaa !2452
  store float 0.000000e+00, float* %453, align 1, !tbaa !2452
  store float 0.000000e+00, float* %455, align 1, !tbaa !2452
  store float 0.000000e+00, float* %457, align 1, !tbaa !2452
  %493 = add i64 %476, -40
  %494 = add i64 %478, 18
  store i64 %494, i64* %PC, align 8
  %495 = load <2 x float>, <2 x float>* %458, align 1
  %496 = extractelement <2 x float> %495, i32 0
  %497 = inttoptr i64 %493 to float*
  store float %496, float* %497, align 4
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -52
  %500 = load i64, i64* %PC, align 8
  %501 = add i64 %500, 3
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %499 to i32*
  %503 = load i32, i32* %502, align 4
  %504 = zext i32 %503 to i64
  store i64 %504, i64* %RDX, align 8, !tbaa !2428
  %505 = add i64 %498, -44
  %506 = add i64 %500, 6
  store i64 %506, i64* %PC, align 8
  %507 = inttoptr i64 %505 to i32*
  %508 = load i32, i32* %507, align 4
  %509 = sub i32 %503, %508
  %510 = icmp ult i32 %503, %508
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %21, align 1, !tbaa !2432
  %512 = and i32 %509, 255
  %513 = tail call i32 @llvm.ctpop.i32(i32 %512) #8
  %514 = trunc i32 %513 to i8
  %515 = and i8 %514, 1
  %516 = xor i8 %515, 1
  store i8 %516, i8* %28, align 1, !tbaa !2446
  %517 = xor i32 %508, %503
  %518 = xor i32 %517, %509
  %519 = lshr i32 %518, 4
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  store i8 %521, i8* %33, align 1, !tbaa !2450
  %522 = icmp eq i32 %509, 0
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %36, align 1, !tbaa !2447
  %524 = lshr i32 %509, 31
  %525 = trunc i32 %524 to i8
  store i8 %525, i8* %39, align 1, !tbaa !2448
  %526 = lshr i32 %503, 31
  %527 = lshr i32 %508, 31
  %528 = xor i32 %527, %526
  %529 = xor i32 %524, %526
  %530 = add nuw nsw i32 %529, %528
  %531 = icmp eq i32 %530, 2
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %45, align 1, !tbaa !2449
  %.v33 = select i1 %522, i64 56, i64 12
  %533 = add i64 %500, %.v33
  store i64 %533, i64* %126, align 8, !tbaa !2428
  br i1 %522, label %block_401d36, label %block_401d0a

block_401cc1:                                     ; preds = %block_401c90
  %534 = add i64 %111, -56
  %535 = add i64 %127, 4
  store i64 %535, i64* %PC, align 8
  %536 = inttoptr i64 %534 to i32*
  %537 = load i32, i32* %536, align 4
  %538 = add i32 %537, -1
  %539 = icmp eq i32 %537, 0
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %21, align 1, !tbaa !2432
  %541 = and i32 %538, 255
  %542 = tail call i32 @llvm.ctpop.i32(i32 %541) #8
  %543 = trunc i32 %542 to i8
  %544 = and i8 %543, 1
  %545 = xor i8 %544, 1
  store i8 %545, i8* %28, align 1, !tbaa !2446
  %546 = xor i32 %537, %538
  %547 = lshr i32 %546, 4
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  store i8 %549, i8* %33, align 1, !tbaa !2450
  %550 = icmp eq i32 %538, 0
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %36, align 1, !tbaa !2447
  %552 = lshr i32 %538, 31
  %553 = trunc i32 %552 to i8
  store i8 %553, i8* %39, align 1, !tbaa !2448
  %554 = lshr i32 %537, 31
  %555 = xor i32 %552, %554
  %556 = add nuw nsw i32 %555, %554
  %557 = icmp eq i32 %556, 2
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %45, align 1, !tbaa !2449
  %559 = icmp ne i8 %553, 0
  %560 = xor i1 %559, %557
  %.v31 = select i1 %560, i64 224, i64 10
  %561 = add i64 %127, %.v31
  store i64 %561, i64* %126, align 8, !tbaa !2428
  br i1 %560, label %block_401cc1.block_401da1_crit_edge, label %block_401ccb

block_401cc1.block_401da1_crit_edge:              ; preds = %block_401cc1
  %.pre9 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %.pre12 = getelementptr inbounds i8, i8* %.pre9, i64 4
  %.pre14 = bitcast i8* %.pre12 to float*
  %.pre16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre18 = bitcast i64* %.pre16 to float*
  %.pre20 = getelementptr inbounds i8, i8* %.pre9, i64 12
  %.pre22 = bitcast i8* %.pre20 to float*
  %.pre26 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  %.pre28 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  br label %block_401da1

block_401e58:                                     ; preds = %block_401c90
  %562 = add i64 %111, -44
  %563 = add i64 %127, 7
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i32*
  store i32 0, i32* %564, align 4
  %565 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %566 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  %567 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %568 = bitcast [32 x %union.VectorReg]* %9 to float*
  %569 = getelementptr inbounds i8, i8* %567, i64 4
  %570 = bitcast i8* %569 to float*
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %572 = bitcast i64* %571 to float*
  %573 = getelementptr inbounds i8, i8* %567, i64 12
  %574 = bitcast i8* %573 to float*
  %575 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  %576 = bitcast i64* %571 to <2 x i32>*
  %577 = bitcast i8* %569 to i32*
  %578 = bitcast i64* %571 to i32*
  %579 = bitcast i8* %573 to i32*
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401e5f

block_401d36:                                     ; preds = %block_401d0a, %block_401cde
  %580 = phi i64 [ %.pre3, %block_401d0a ], [ %498, %block_401cde ]
  %581 = phi i64 [ %.pre2, %block_401d0a ], [ %533, %block_401cde ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %582 = add i64 %580, -16
  %583 = add i64 %581, 8
  store i64 %583, i64* %PC, align 8
  %584 = inttoptr i64 %582 to i32*
  %585 = load i32, i32* %584, align 4
  %586 = zext i32 %585 to i64
  store i64 %586, i64* %RCX, align 8, !tbaa !2428
  %587 = add i64 %580, -44
  %588 = add i64 %581, 11
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to i32*
  %590 = load i32, i32* %589, align 4
  %591 = add i32 %590, 1
  %592 = zext i32 %591 to i64
  store i64 %592, i64* %RDX, align 8, !tbaa !2428
  %593 = lshr i32 %591, 31
  %594 = sub i32 %585, %591
  %595 = zext i32 %594 to i64
  store i64 %595, i64* %RCX, align 8, !tbaa !2428
  %596 = icmp ult i32 %585, %591
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %21, align 1, !tbaa !2432
  %598 = and i32 %594, 255
  %599 = tail call i32 @llvm.ctpop.i32(i32 %598) #8
  %600 = trunc i32 %599 to i8
  %601 = and i8 %600, 1
  %602 = xor i8 %601, 1
  store i8 %602, i8* %28, align 1, !tbaa !2446
  %603 = xor i32 %591, %585
  %604 = xor i32 %603, %594
  %605 = lshr i32 %604, 4
  %606 = trunc i32 %605 to i8
  %607 = and i8 %606, 1
  store i8 %607, i8* %33, align 1, !tbaa !2450
  %608 = icmp eq i32 %594, 0
  %609 = zext i1 %608 to i8
  store i8 %609, i8* %36, align 1, !tbaa !2447
  %610 = lshr i32 %594, 31
  %611 = trunc i32 %610 to i8
  store i8 %611, i8* %39, align 1, !tbaa !2448
  %612 = lshr i32 %585, 31
  %613 = xor i32 %593, %612
  %614 = xor i32 %610, %612
  %615 = add nuw nsw i32 %614, %613
  %616 = icmp eq i32 %615, 2
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %45, align 1, !tbaa !2449
  %618 = add i64 %580, -40
  %619 = add i64 %581, 21
  store i64 %619, i64* %PC, align 8
  %620 = inttoptr i64 %618 to i32*
  %621 = load i32, i32* %620, align 4
  %622 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %621, i32* %622, align 1, !tbaa !2452
  store float 0.000000e+00, float* %453, align 1, !tbaa !2452
  store float 0.000000e+00, float* %455, align 1, !tbaa !2452
  store float 0.000000e+00, float* %457, align 1, !tbaa !2452
  %623 = load i64, i64* %RBP, align 8
  %624 = add i64 %623, -8
  %625 = add i64 %581, 25
  store i64 %625, i64* %PC, align 8
  %626 = inttoptr i64 %624 to i64*
  %627 = load i64, i64* %626, align 8
  store i64 %627, i64* %RSI, align 8, !tbaa !2428
  %628 = add i64 %623, -12
  %629 = add i64 %581, 28
  store i64 %629, i64* %PC, align 8
  %630 = inttoptr i64 %628 to i32*
  %631 = load i32, i32* %630, align 4
  %632 = zext i32 %631 to i64
  store i64 %632, i64* %RDX, align 8, !tbaa !2428
  %633 = add i64 %623, -44
  %634 = add i64 %581, 32
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %633 to i32*
  %636 = load i32, i32* %635, align 4
  %637 = sext i32 %631 to i64
  %638 = sext i32 %636 to i64
  %639 = mul nsw i64 %638, %637
  %640 = trunc i64 %639 to i32
  %641 = and i64 %639, 4294967295
  store i64 %641, i64* %RDX, align 8, !tbaa !2428
  %642 = shl i64 %639, 32
  %643 = ashr exact i64 %642, 32
  %644 = icmp ne i64 %643, %639
  %645 = zext i1 %644 to i8
  store i8 %645, i8* %21, align 1, !tbaa !2432
  %646 = and i32 %640, 255
  %647 = tail call i32 @llvm.ctpop.i32(i32 %646) #8
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  %650 = xor i8 %649, 1
  store i8 %650, i8* %28, align 1, !tbaa !2446
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2447
  %651 = lshr i32 %640, 31
  %652 = trunc i32 %651 to i8
  store i8 %652, i8* %39, align 1, !tbaa !2448
  store i8 %645, i8* %45, align 1, !tbaa !2449
  %653 = add i64 %581, 35
  store i64 %653, i64* %PC, align 8
  %654 = trunc i64 %639 to i32
  %655 = load i32, i32* %635, align 4
  %656 = add i32 %655, %654
  %657 = add i32 %656, 1
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %RDX, align 8, !tbaa !2428
  %659 = sext i32 %657 to i64
  %660 = shl nsw i64 %659, 2
  store i64 %660, i64* %RDI, align 8, !tbaa !2428
  %661 = lshr i64 %659, 61
  %662 = and i64 %661, 1
  %663 = load i64, i64* %RSI, align 8
  %664 = add i64 %660, %663
  store i64 %664, i64* %RSI, align 8, !tbaa !2428
  %665 = icmp ult i64 %664, %663
  %666 = icmp ult i64 %664, %660
  %667 = or i1 %665, %666
  %668 = zext i1 %667 to i8
  store i8 %668, i8* %21, align 1, !tbaa !2432
  %669 = trunc i64 %664 to i32
  %670 = and i32 %669, 255
  %671 = tail call i32 @llvm.ctpop.i32(i32 %670) #8
  %672 = trunc i32 %671 to i8
  %673 = and i8 %672, 1
  %674 = xor i8 %673, 1
  store i8 %674, i8* %28, align 1, !tbaa !2446
  %675 = xor i64 %660, %663
  %676 = xor i64 %675, %664
  %677 = lshr i64 %676, 4
  %678 = trunc i64 %677 to i8
  %679 = and i8 %678, 1
  store i8 %679, i8* %33, align 1, !tbaa !2450
  %680 = icmp eq i64 %664, 0
  %681 = zext i1 %680 to i8
  store i8 %681, i8* %36, align 1, !tbaa !2447
  %682 = lshr i64 %664, 63
  %683 = trunc i64 %682 to i8
  store i8 %683, i8* %39, align 1, !tbaa !2448
  %684 = lshr i64 %663, 63
  %685 = xor i64 %682, %684
  %686 = xor i64 %682, %662
  %687 = add nuw nsw i64 %685, %686
  %688 = icmp eq i64 %687, 2
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %45, align 1, !tbaa !2449
  %690 = load i64, i64* %RBP, align 8
  %691 = add i64 %690, -32
  %692 = add i64 %581, 52
  store i64 %692, i64* %PC, align 8
  %693 = inttoptr i64 %691 to i64*
  %694 = load i64, i64* %693, align 8
  store i64 %694, i64* %RDI, align 8, !tbaa !2428
  %695 = add i64 %690, -44
  %696 = add i64 %581, 55
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %695 to i32*
  %698 = load i32, i32* %697, align 4
  %699 = add i32 %698, 1
  %700 = sext i32 %699 to i64
  %701 = shl nsw i64 %700, 2
  store i64 %701, i64* %R8, align 8, !tbaa !2428
  %702 = lshr i64 %700, 61
  %703 = and i64 %702, 1
  %704 = add i64 %701, %694
  %705 = icmp ult i64 %704, %694
  %706 = icmp ult i64 %704, %701
  %707 = or i1 %705, %706
  %708 = zext i1 %707 to i8
  store i8 %708, i8* %21, align 1, !tbaa !2432
  %709 = trunc i64 %704 to i32
  %710 = and i32 %709, 255
  %711 = tail call i32 @llvm.ctpop.i32(i32 %710) #8
  %712 = trunc i32 %711 to i8
  %713 = and i8 %712, 1
  %714 = xor i8 %713, 1
  store i8 %714, i8* %28, align 1, !tbaa !2446
  %715 = xor i64 %701, %694
  %716 = xor i64 %715, %704
  %717 = lshr i64 %716, 4
  %718 = trunc i64 %717 to i8
  %719 = and i8 %718, 1
  store i8 %719, i8* %33, align 1, !tbaa !2450
  %720 = icmp eq i64 %704, 0
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %36, align 1, !tbaa !2447
  %722 = lshr i64 %704, 63
  %723 = trunc i64 %722 to i8
  store i8 %723, i8* %39, align 1, !tbaa !2448
  %724 = lshr i64 %694, 63
  %725 = xor i64 %722, %724
  %726 = xor i64 %722, %703
  %727 = add nuw nsw i64 %725, %726
  %728 = icmp eq i64 %727, 2
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %45, align 1, !tbaa !2449
  %730 = load i64, i64* %RBP, align 8
  %731 = add i64 %730, -64
  %732 = add i64 %581, 72
  store i64 %732, i64* %PC, align 8
  %733 = inttoptr i64 %731 to i64*
  store i64 %704, i64* %733, align 8
  %734 = load i32, i32* %ECX, align 4
  %735 = zext i32 %734 to i64
  %736 = load i64, i64* %PC, align 8
  store i64 %735, i64* %RDI, align 8, !tbaa !2428
  %737 = load i32, i32* %EAX, align 4
  %738 = zext i32 %737 to i64
  store i64 %738, i64* %RDX, align 8, !tbaa !2428
  %739 = load i64, i64* %RBP, align 8
  %740 = add i64 %739, -64
  %741 = add i64 %736, 8
  store i64 %741, i64* %PC, align 8
  %742 = inttoptr i64 %740 to i64*
  %743 = load i64, i64* %742, align 8
  store i64 %743, i64* %RCX, align 8, !tbaa !2428
  store i64 %738, i64* %459, align 8, !tbaa !2428
  %744 = add i64 %736, 2914
  %745 = add i64 %736, 16
  %746 = load i64, i64* %13, align 8, !tbaa !2428
  %747 = add i64 %746, -8
  %748 = inttoptr i64 %747 to i64*
  store i64 %745, i64* %748, align 8
  store i64 %747, i64* %13, align 8, !tbaa !2428
  store i64 %744, i64* %126, align 8, !tbaa !2428
  %749 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %744, %struct.Memory* %MEMORY.1)
  %750 = load i64, i64* %RBP, align 8
  %751 = add i64 %750, -44
  %752 = load i64, i64* %PC, align 8
  %753 = add i64 %752, 3
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %751 to i32*
  %755 = load i32, i32* %754, align 4
  %756 = add i32 %755, 1
  %757 = zext i32 %756 to i64
  store i64 %757, i64* %RAX, align 8, !tbaa !2428
  %758 = icmp eq i32 %755, -1
  %759 = icmp eq i32 %756, 0
  %760 = or i1 %758, %759
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %21, align 1, !tbaa !2432
  %762 = and i32 %756, 255
  %763 = tail call i32 @llvm.ctpop.i32(i32 %762) #8
  %764 = trunc i32 %763 to i8
  %765 = and i8 %764, 1
  %766 = xor i8 %765, 1
  store i8 %766, i8* %28, align 1, !tbaa !2446
  %767 = xor i32 %755, %756
  %768 = lshr i32 %767, 4
  %769 = trunc i32 %768 to i8
  %770 = and i8 %769, 1
  store i8 %770, i8* %33, align 1, !tbaa !2450
  %771 = icmp eq i32 %756, 0
  %772 = zext i1 %771 to i8
  store i8 %772, i8* %36, align 1, !tbaa !2447
  %773 = lshr i32 %756, 31
  %774 = trunc i32 %773 to i8
  store i8 %774, i8* %39, align 1, !tbaa !2448
  %775 = lshr i32 %755, 31
  %776 = xor i32 %773, %775
  %777 = add nuw nsw i32 %776, %773
  %778 = icmp eq i32 %777, 2
  %779 = zext i1 %778 to i8
  store i8 %779, i8* %45, align 1, !tbaa !2449
  %780 = add i64 %752, 9
  store i64 %780, i64* %PC, align 8
  store i32 %756, i32* %754, align 4
  %781 = load i64, i64* %PC, align 8
  %782 = add i64 %781, -197
  store i64 %782, i64* %126, align 8, !tbaa !2428
  br label %block_401cd2

block_401db4:                                     ; preds = %block_401da8
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %783 = add i64 %1171, 8
  store i64 %783, i64* %PC, align 8
  %784 = load i32, i32* %1143, align 4
  %785 = zext i32 %784 to i64
  store i64 %785, i64* %RCX, align 8, !tbaa !2428
  %786 = add i64 %1171, 11
  store i64 %786, i64* %PC, align 8
  %787 = load i32, i32* %1138, align 4
  %788 = add i32 %787, 1
  %789 = zext i32 %788 to i64
  store i64 %789, i64* %RDX, align 8, !tbaa !2428
  %790 = lshr i32 %788, 31
  %791 = sub i32 %784, %788
  %792 = zext i32 %791 to i64
  store i64 %792, i64* %RCX, align 8, !tbaa !2428
  %793 = icmp ult i32 %784, %788
  %794 = zext i1 %793 to i8
  store i8 %794, i8* %21, align 1, !tbaa !2432
  %795 = and i32 %791, 255
  %796 = tail call i32 @llvm.ctpop.i32(i32 %795) #8
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = xor i8 %798, 1
  store i8 %799, i8* %28, align 1, !tbaa !2446
  %800 = xor i32 %788, %784
  %801 = xor i32 %800, %791
  %802 = lshr i32 %801, 4
  %803 = trunc i32 %802 to i8
  %804 = and i8 %803, 1
  store i8 %804, i8* %33, align 1, !tbaa !2450
  %805 = icmp eq i32 %791, 0
  %806 = zext i1 %805 to i8
  store i8 %806, i8* %36, align 1, !tbaa !2447
  %807 = lshr i32 %791, 31
  %808 = trunc i32 %807 to i8
  store i8 %808, i8* %39, align 1, !tbaa !2448
  %809 = lshr i32 %784, 31
  %810 = xor i32 %790, %809
  %811 = xor i32 %807, %809
  %812 = add nuw nsw i32 %811, %810
  %813 = icmp eq i32 %812, 2
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %45, align 1, !tbaa !2449
  %815 = add i64 %1135, -44
  %816 = add i64 %1171, 19
  store i64 %816, i64* %PC, align 8
  %817 = inttoptr i64 %815 to i32*
  store i32 %791, i32* %817, align 4
  %818 = load i64, i64* %RBP, align 8
  %819 = add i64 %818, -32
  %820 = load i64, i64* %PC, align 8
  %821 = add i64 %820, 4
  store i64 %821, i64* %PC, align 8
  %822 = inttoptr i64 %819 to i64*
  %823 = load i64, i64* %822, align 8
  store i64 %823, i64* %RSI, align 8, !tbaa !2428
  %824 = add i64 %818, -44
  %825 = add i64 %820, 8
  store i64 %825, i64* %PC, align 8
  %826 = inttoptr i64 %824 to i32*
  %827 = load i32, i32* %826, align 4
  %828 = sext i32 %827 to i64
  store i64 %828, i64* %RDI, align 8, !tbaa !2428
  %829 = shl nsw i64 %828, 2
  %830 = add i64 %829, %823
  %831 = add i64 %820, 13
  store i64 %831, i64* %PC, align 8
  %832 = inttoptr i64 %830 to i32*
  %833 = load i32, i32* %832, align 4
  %834 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %833, i32* %834, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %835 = add i64 %818, -8
  %836 = add i64 %820, 17
  store i64 %836, i64* %PC, align 8
  %837 = inttoptr i64 %835 to i64*
  %838 = load i64, i64* %837, align 8
  store i64 %838, i64* %RSI, align 8, !tbaa !2428
  %839 = add i64 %818, -12
  %840 = add i64 %820, 20
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %839 to i32*
  %842 = load i32, i32* %841, align 4
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RCX, align 8, !tbaa !2428
  %844 = add i64 %820, 24
  store i64 %844, i64* %PC, align 8
  %845 = load i32, i32* %826, align 4
  %846 = sext i32 %842 to i64
  %847 = sext i32 %845 to i64
  %848 = mul nsw i64 %847, %846
  %849 = trunc i64 %848 to i32
  %850 = and i64 %848, 4294967295
  store i64 %850, i64* %RCX, align 8, !tbaa !2428
  %851 = shl i64 %848, 32
  %852 = ashr exact i64 %851, 32
  %853 = icmp ne i64 %852, %848
  %854 = zext i1 %853 to i8
  store i8 %854, i8* %21, align 1, !tbaa !2432
  %855 = and i32 %849, 255
  %856 = tail call i32 @llvm.ctpop.i32(i32 %855) #8
  %857 = trunc i32 %856 to i8
  %858 = and i8 %857, 1
  %859 = xor i8 %858, 1
  store i8 %859, i8* %28, align 1, !tbaa !2446
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2447
  %860 = lshr i32 %849, 31
  %861 = trunc i32 %860 to i8
  store i8 %861, i8* %39, align 1, !tbaa !2448
  store i8 %854, i8* %45, align 1, !tbaa !2449
  %862 = add i64 %820, 27
  store i64 %862, i64* %PC, align 8
  %863 = trunc i64 %848 to i32
  %864 = load i32, i32* %826, align 4
  %865 = add i32 %864, %863
  %866 = zext i32 %865 to i64
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = icmp ult i32 %865, %863
  %868 = icmp ult i32 %865, %864
  %869 = or i1 %867, %868
  %870 = zext i1 %869 to i8
  store i8 %870, i8* %21, align 1, !tbaa !2432
  %871 = and i32 %865, 255
  %872 = tail call i32 @llvm.ctpop.i32(i32 %871) #8
  %873 = trunc i32 %872 to i8
  %874 = and i8 %873, 1
  %875 = xor i8 %874, 1
  store i8 %875, i8* %28, align 1, !tbaa !2446
  %876 = xor i32 %864, %863
  %877 = xor i32 %876, %865
  %878 = lshr i32 %877, 4
  %879 = trunc i32 %878 to i8
  %880 = and i8 %879, 1
  store i8 %880, i8* %33, align 1, !tbaa !2450
  %881 = icmp eq i32 %865, 0
  %882 = zext i1 %881 to i8
  store i8 %882, i8* %36, align 1, !tbaa !2447
  %883 = lshr i32 %865, 31
  %884 = trunc i32 %883 to i8
  store i8 %884, i8* %39, align 1, !tbaa !2448
  %885 = lshr i32 %863, 31
  %886 = lshr i32 %864, 31
  %887 = xor i32 %883, %885
  %888 = xor i32 %883, %886
  %889 = add nuw nsw i32 %887, %888
  %890 = icmp eq i32 %889, 2
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %45, align 1, !tbaa !2449
  %892 = sext i32 %865 to i64
  store i64 %892, i64* %RDI, align 8, !tbaa !2428
  %893 = shl nsw i64 %892, 2
  %894 = add i64 %893, %838
  %895 = add i64 %820, 35
  store i64 %895, i64* %PC, align 8
  %896 = load <2 x float>, <2 x float>* %1664, align 1
  %897 = load <2 x i32>, <2 x i32>* %1665, align 1
  %898 = inttoptr i64 %894 to float*
  %899 = load float, float* %898, align 4
  %900 = extractelement <2 x float> %896, i32 0
  %901 = fdiv float %900, %899
  store float %901, float* %.pre-phi11, align 1, !tbaa !2452
  %902 = bitcast <2 x float> %896 to <2 x i32>
  %903 = extractelement <2 x i32> %902, i32 1
  store i32 %903, i32* %1666, align 1, !tbaa !2452
  %904 = extractelement <2 x i32> %897, i32 0
  store i32 %904, i32* %1667, align 1, !tbaa !2452
  %905 = extractelement <2 x i32> %897, i32 1
  store i32 %905, i32* %1668, align 1, !tbaa !2452
  %906 = load i64, i64* %RBP, align 8
  %907 = add i64 %906, -32
  %908 = add i64 %820, 39
  store i64 %908, i64* %PC, align 8
  %909 = inttoptr i64 %907 to i64*
  %910 = load i64, i64* %909, align 8
  store i64 %910, i64* %RSI, align 8, !tbaa !2428
  %911 = add i64 %906, -44
  %912 = add i64 %820, 43
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %911 to i32*
  %914 = load i32, i32* %913, align 4
  %915 = sext i32 %914 to i64
  store i64 %915, i64* %RDI, align 8, !tbaa !2428
  %916 = shl nsw i64 %915, 2
  %917 = add i64 %916, %910
  %918 = add i64 %820, 48
  store i64 %918, i64* %PC, align 8
  %919 = load <2 x float>, <2 x float>* %.pre-phi27, align 1
  %920 = extractelement <2 x float> %919, i32 0
  %921 = inttoptr i64 %917 to float*
  store float %920, float* %921, align 4
  %922 = load i64, i64* %RBP, align 8
  %923 = add i64 %922, -32
  %924 = load i64, i64* %PC, align 8
  %925 = add i64 %924, 4
  store i64 %925, i64* %PC, align 8
  %926 = inttoptr i64 %923 to i64*
  %927 = load i64, i64* %926, align 8
  store i64 %927, i64* %RSI, align 8, !tbaa !2428
  %928 = add i64 %922, -44
  %929 = add i64 %924, 8
  store i64 %929, i64* %PC, align 8
  %930 = inttoptr i64 %928 to i32*
  %931 = load i32, i32* %930, align 4
  %932 = sext i32 %931 to i64
  store i64 %932, i64* %RDI, align 8, !tbaa !2428
  %933 = shl nsw i64 %932, 2
  %934 = add i64 %933, %927
  %935 = add i64 %924, 13
  store i64 %935, i64* %PC, align 8
  %936 = inttoptr i64 %934 to i32*
  %937 = load i32, i32* %936, align 4
  %938 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %937, i32* %938, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %939 = add i64 %924, 17
  store i64 %939, i64* %PC, align 8
  %940 = load i64, i64* %1669, align 1
  %941 = trunc i64 %940 to i32
  store i32 %941, i32* %1671, align 1, !tbaa !2451
  store i32 0, i32* %1672, align 1, !tbaa !2451
  %942 = load i64, i64* %RCX, align 8
  %943 = xor i64 %942, -2147483648
  %944 = trunc i64 %943 to i32
  %945 = and i64 %943, 4294967295
  store i64 %945, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %21, align 1, !tbaa !2432
  %946 = and i32 %944, 255
  %947 = tail call i32 @llvm.ctpop.i32(i32 %946) #8
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = xor i8 %949, 1
  store i8 %950, i8* %28, align 1, !tbaa !2446
  %951 = icmp eq i32 %944, 0
  %952 = zext i1 %951 to i8
  store i8 %952, i8* %36, align 1, !tbaa !2447
  %953 = lshr i32 %944, 31
  %954 = trunc i32 %953 to i8
  store i8 %954, i8* %39, align 1, !tbaa !2448
  store i8 0, i8* %45, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  %955 = trunc i64 %943 to i32
  store i32 %955, i32* %1673, align 1, !tbaa !2451
  store i32 0, i32* %1666, align 1, !tbaa !2451
  store i32 0, i32* %1667, align 1, !tbaa !2451
  store i32 0, i32* %1668, align 1, !tbaa !2451
  %956 = load i64, i64* %RBP, align 8
  %957 = add i64 %956, -40
  %958 = add i64 %924, 32
  store i64 %958, i64* %PC, align 8
  %959 = load <2 x float>, <2 x float>* %.pre-phi27, align 1
  %960 = extractelement <2 x float> %959, i32 0
  %961 = inttoptr i64 %957 to float*
  store float %960, float* %961, align 4
  %962 = load i64, i64* %RBP, align 8
  %963 = add i64 %962, -44
  %964 = load i64, i64* %PC, align 8
  %965 = add i64 %964, 3
  store i64 %965, i64* %PC, align 8
  %966 = inttoptr i64 %963 to i32*
  %967 = load i32, i32* %966, align 4
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RDI, align 8, !tbaa !2428
  %969 = add i64 %962, -40
  %970 = add i64 %964, 8
  store i64 %970, i64* %PC, align 8
  %971 = inttoptr i64 %969 to i32*
  %972 = load i32, i32* %971, align 4
  %973 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %972, i32* %973, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %974 = add i64 %962, -8
  %975 = add i64 %964, 12
  store i64 %975, i64* %PC, align 8
  %976 = inttoptr i64 %974 to i64*
  %977 = load i64, i64* %976, align 8
  store i64 %977, i64* %RSI, align 8, !tbaa !2428
  %978 = add i64 %962, -12
  %979 = add i64 %964, 15
  store i64 %979, i64* %PC, align 8
  %980 = inttoptr i64 %978 to i32*
  %981 = load i32, i32* %980, align 4
  %982 = zext i32 %981 to i64
  store i64 %982, i64* %RCX, align 8, !tbaa !2428
  %983 = add i64 %964, 19
  store i64 %983, i64* %PC, align 8
  %984 = load i32, i32* %966, align 4
  %985 = sext i32 %981 to i64
  %986 = sext i32 %984 to i64
  %987 = mul nsw i64 %986, %985
  %988 = and i64 %987, 4294967295
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %989 = shl i64 %987, 32
  %990 = ashr exact i64 %989, 30
  store i64 %990, i64* %R8, align 8, !tbaa !2428
  %991 = lshr i64 %990, 63
  %992 = add i64 %990, %977
  store i64 %992, i64* %RSI, align 8, !tbaa !2428
  %993 = icmp ult i64 %992, %977
  %994 = icmp ult i64 %992, %990
  %995 = or i1 %993, %994
  %996 = zext i1 %995 to i8
  store i8 %996, i8* %21, align 1, !tbaa !2432
  %997 = trunc i64 %992 to i32
  %998 = and i32 %997, 255
  %999 = tail call i32 @llvm.ctpop.i32(i32 %998) #8
  %1000 = trunc i32 %999 to i8
  %1001 = and i8 %1000, 1
  %1002 = xor i8 %1001, 1
  store i8 %1002, i8* %28, align 1, !tbaa !2446
  %1003 = xor i64 %990, %977
  %1004 = xor i64 %1003, %992
  %1005 = lshr i64 %1004, 4
  %1006 = trunc i64 %1005 to i8
  %1007 = and i8 %1006, 1
  store i8 %1007, i8* %33, align 1, !tbaa !2450
  %1008 = icmp eq i64 %992, 0
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %36, align 1, !tbaa !2447
  %1010 = lshr i64 %992, 63
  %1011 = trunc i64 %1010 to i8
  store i8 %1011, i8* %39, align 1, !tbaa !2448
  %1012 = lshr i64 %977, 63
  %1013 = xor i64 %1010, %1012
  %1014 = xor i64 %1010, %991
  %1015 = add nuw nsw i64 %1013, %1014
  %1016 = icmp eq i64 %1015, 2
  %1017 = zext i1 %1016 to i8
  store i8 %1017, i8* %45, align 1, !tbaa !2449
  %1018 = load i64, i64* %RBP, align 8
  %1019 = add i64 %1018, -32
  %1020 = add i64 %964, 36
  store i64 %1020, i64* %PC, align 8
  %1021 = inttoptr i64 %1019 to i64*
  %1022 = load i64, i64* %1021, align 8
  store i64 %1022, i64* %RCX, align 8, !tbaa !2428
  %1023 = load i32, i32* %EAX, align 4
  %1024 = zext i32 %1023 to i64
  store i64 %1024, i64* %RDX, align 8, !tbaa !2428
  store i64 %1024, i64* %.pre-phi29, align 8, !tbaa !2428
  %1025 = add i64 %964, 2761
  %1026 = add i64 %964, 46
  %1027 = load i64, i64* %13, align 8, !tbaa !2428
  %1028 = add i64 %1027, -8
  %1029 = inttoptr i64 %1028 to i64*
  store i64 %1026, i64* %1029, align 8
  store i64 %1028, i64* %13, align 8, !tbaa !2428
  store i64 %1025, i64* %126, align 8, !tbaa !2428
  %1030 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %1025, %struct.Memory* %MEMORY.3)
  %1031 = load i64, i64* %RBP, align 8
  %1032 = add i64 %1031, -48
  %1033 = load i64, i64* %PC, align 8
  %1034 = add i64 %1033, 3
  store i64 %1034, i64* %PC, align 8
  %1035 = inttoptr i64 %1032 to i32*
  %1036 = load i32, i32* %1035, align 4
  %1037 = add i32 %1036, 1
  %1038 = zext i32 %1037 to i64
  store i64 %1038, i64* %RAX, align 8, !tbaa !2428
  %1039 = icmp eq i32 %1036, -1
  %1040 = icmp eq i32 %1037, 0
  %1041 = or i1 %1039, %1040
  %1042 = zext i1 %1041 to i8
  store i8 %1042, i8* %21, align 1, !tbaa !2432
  %1043 = and i32 %1037, 255
  %1044 = tail call i32 @llvm.ctpop.i32(i32 %1043) #8
  %1045 = trunc i32 %1044 to i8
  %1046 = and i8 %1045, 1
  %1047 = xor i8 %1046, 1
  store i8 %1047, i8* %28, align 1, !tbaa !2446
  %1048 = xor i32 %1036, %1037
  %1049 = lshr i32 %1048, 4
  %1050 = trunc i32 %1049 to i8
  %1051 = and i8 %1050, 1
  store i8 %1051, i8* %33, align 1, !tbaa !2450
  %1052 = icmp eq i32 %1037, 0
  %1053 = zext i1 %1052 to i8
  store i8 %1053, i8* %36, align 1, !tbaa !2447
  %1054 = lshr i32 %1037, 31
  %1055 = trunc i32 %1054 to i8
  store i8 %1055, i8* %39, align 1, !tbaa !2448
  %1056 = lshr i32 %1036, 31
  %1057 = xor i32 %1054, %1056
  %1058 = add nuw nsw i32 %1057, %1054
  %1059 = icmp eq i32 %1058, 2
  %1060 = zext i1 %1059 to i8
  store i8 %1060, i8* %45, align 1, !tbaa !2449
  %1061 = add i64 %1033, 9
  store i64 %1061, i64* %PC, align 8
  store i32 %1037, i32* %1035, align 4
  %1062 = load i64, i64* %PC, align 8
  %1063 = add i64 %1062, -166
  store i64 %1063, i64* %126, align 8, !tbaa !2428
  br label %block_401da8

block_401fac:                                     ; preds = %block_401f09
  %1064 = add i64 %1520, -32
  %1065 = add i64 %1555, 4
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to i64*
  %1067 = load i64, i64* %1066, align 8
  store i64 %1067, i64* %RAX, align 8, !tbaa !2428
  %1068 = add i64 %1555, 8
  store i64 %1068, i64* %PC, align 8
  %1069 = load i32, i32* %1524, align 4
  %1070 = sext i32 %1069 to i64
  store i64 %1070, i64* %RCX, align 8, !tbaa !2428
  %1071 = shl nsw i64 %1070, 2
  %1072 = add i64 %1071, %1067
  %1073 = add i64 %1555, 13
  store i64 %1073, i64* %PC, align 8
  %1074 = inttoptr i64 %1072 to i32*
  %1075 = load i32, i32* %1074, align 4
  %1076 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %1075, i32* %1076, align 1, !tbaa !2452
  store float 0.000000e+00, float* %570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %572, align 1, !tbaa !2452
  store float 0.000000e+00, float* %574, align 1, !tbaa !2452
  %1077 = add i64 %1520, -40
  %1078 = add i64 %1555, 18
  store i64 %1078, i64* %PC, align 8
  %1079 = load <2 x float>, <2 x float>* %566, align 1
  %1080 = extractelement <2 x float> %1079, i32 0
  %1081 = inttoptr i64 %1077 to float*
  store float %1080, float* %1081, align 4
  %1082 = load i64, i64* %RBP, align 8
  %1083 = add i64 %1082, -32
  %1084 = load i64, i64* %PC, align 8
  %1085 = add i64 %1084, 4
  store i64 %1085, i64* %PC, align 8
  %1086 = inttoptr i64 %1083 to i64*
  %1087 = load i64, i64* %1086, align 8
  store i64 %1087, i64* %RAX, align 8, !tbaa !2428
  %1088 = add i64 %1082, -44
  %1089 = add i64 %1084, 8
  store i64 %1089, i64* %PC, align 8
  %1090 = inttoptr i64 %1088 to i32*
  %1091 = load i32, i32* %1090, align 4
  %1092 = sext i32 %1091 to i64
  store i64 %1092, i64* %RCX, align 8, !tbaa !2428
  %1093 = shl nsw i64 %1092, 2
  %1094 = add i64 %1093, %1087
  %1095 = add i64 %1084, 13
  store i64 %1095, i64* %PC, align 8
  %1096 = inttoptr i64 %1094 to i32*
  %1097 = load i32, i32* %1096, align 4
  %1098 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %1097, i32* %1098, align 1, !tbaa !2452
  store float 0.000000e+00, float* %570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %572, align 1, !tbaa !2452
  store float 0.000000e+00, float* %574, align 1, !tbaa !2452
  %1099 = add i64 %1084, 17
  store i64 %1099, i64* %PC, align 8
  %1100 = load i64, i64* %1086, align 8
  store i64 %1100, i64* %RAX, align 8, !tbaa !2428
  %1101 = add i64 %1082, -52
  %1102 = add i64 %1084, 21
  store i64 %1102, i64* %PC, align 8
  %1103 = inttoptr i64 %1101 to i32*
  %1104 = load i32, i32* %1103, align 4
  %1105 = sext i32 %1104 to i64
  store i64 %1105, i64* %RCX, align 8, !tbaa !2428
  %1106 = shl nsw i64 %1105, 2
  %1107 = add i64 %1106, %1100
  %1108 = add i64 %1084, 26
  store i64 %1108, i64* %PC, align 8
  %1109 = load <2 x float>, <2 x float>* %566, align 1
  %1110 = extractelement <2 x float> %1109, i32 0
  %1111 = inttoptr i64 %1107 to float*
  store float %1110, float* %1111, align 4
  %1112 = load i64, i64* %RBP, align 8
  %1113 = add i64 %1112, -40
  %1114 = load i64, i64* %PC, align 8
  %1115 = add i64 %1114, 5
  store i64 %1115, i64* %PC, align 8
  %1116 = inttoptr i64 %1113 to i32*
  %1117 = load i32, i32* %1116, align 4
  %1118 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %1117, i32* %1118, align 1, !tbaa !2452
  store float 0.000000e+00, float* %570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %572, align 1, !tbaa !2452
  store float 0.000000e+00, float* %574, align 1, !tbaa !2452
  %1119 = add i64 %1112, -32
  %1120 = add i64 %1114, 9
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i64*
  %1122 = load i64, i64* %1121, align 8
  store i64 %1122, i64* %RAX, align 8, !tbaa !2428
  %1123 = add i64 %1112, -44
  %1124 = add i64 %1114, 13
  store i64 %1124, i64* %PC, align 8
  %1125 = inttoptr i64 %1123 to i32*
  %1126 = load i32, i32* %1125, align 4
  %1127 = sext i32 %1126 to i64
  store i64 %1127, i64* %RCX, align 8, !tbaa !2428
  %1128 = shl nsw i64 %1127, 2
  %1129 = add i64 %1128, %1122
  %1130 = add i64 %1114, 18
  store i64 %1130, i64* %PC, align 8
  %1131 = load <2 x float>, <2 x float>* %566, align 1
  %1132 = extractelement <2 x float> %1131, i32 0
  %1133 = inttoptr i64 %1129 to float*
  store float %1132, float* %1133, align 4
  %.pre7 = load i64, i64* %PC, align 8
  %.pre8 = load i64, i64* %RBP, align 8
  br label %block_401fea

block_401da8:                                     ; preds = %block_401da1, %block_401db4
  %1134 = phi i64 [ %.pre4, %block_401da1 ], [ %1063, %block_401db4 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.7, %block_401da1 ], [ %1030, %block_401db4 ]
  %1135 = load i64, i64* %RBP, align 8
  %1136 = add i64 %1135, -48
  %1137 = add i64 %1134, 3
  store i64 %1137, i64* %PC, align 8
  %1138 = inttoptr i64 %1136 to i32*
  %1139 = load i32, i32* %1138, align 4
  %1140 = zext i32 %1139 to i64
  store i64 %1140, i64* %RAX, align 8, !tbaa !2428
  %1141 = add i64 %1135, -16
  %1142 = add i64 %1134, 6
  store i64 %1142, i64* %PC, align 8
  %1143 = inttoptr i64 %1141 to i32*
  %1144 = load i32, i32* %1143, align 4
  %1145 = sub i32 %1139, %1144
  %1146 = icmp ult i32 %1139, %1144
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %21, align 1, !tbaa !2432
  %1148 = and i32 %1145, 255
  %1149 = tail call i32 @llvm.ctpop.i32(i32 %1148) #8
  %1150 = trunc i32 %1149 to i8
  %1151 = and i8 %1150, 1
  %1152 = xor i8 %1151, 1
  store i8 %1152, i8* %28, align 1, !tbaa !2446
  %1153 = xor i32 %1144, %1139
  %1154 = xor i32 %1153, %1145
  %1155 = lshr i32 %1154, 4
  %1156 = trunc i32 %1155 to i8
  %1157 = and i8 %1156, 1
  store i8 %1157, i8* %33, align 1, !tbaa !2450
  %1158 = icmp eq i32 %1145, 0
  %1159 = zext i1 %1158 to i8
  store i8 %1159, i8* %36, align 1, !tbaa !2447
  %1160 = lshr i32 %1145, 31
  %1161 = trunc i32 %1160 to i8
  store i8 %1161, i8* %39, align 1, !tbaa !2448
  %1162 = lshr i32 %1139, 31
  %1163 = lshr i32 %1144, 31
  %1164 = xor i32 %1163, %1162
  %1165 = xor i32 %1160, %1162
  %1166 = add nuw nsw i32 %1165, %1164
  %1167 = icmp eq i32 %1166, 2
  %1168 = zext i1 %1167 to i8
  store i8 %1168, i8* %45, align 1, !tbaa !2449
  %1169 = icmp ne i8 %1161, 0
  %1170 = xor i1 %1169, %1167
  %.v34 = select i1 %1170, i64 12, i64 171
  %1171 = add i64 %1134, %.v34
  store i64 %1171, i64* %126, align 8, !tbaa !2428
  br i1 %1170, label %block_401db4, label %block_401e53

block_401ffd:                                     ; preds = %block_401efd
  store i64 %1658, i64* %126, align 8, !tbaa !2428
  br label %block_402002

block_401d9c:                                     ; preds = %block_401cd2
  %1172 = add i64 %447, 5
  store i64 %1172, i64* %126, align 8, !tbaa !2428
  br label %block_401da1

block_401d0a:                                     ; preds = %block_401cde
  %1173 = add i64 %498, -32
  %1174 = add i64 %533, 4
  store i64 %1174, i64* %PC, align 8
  %1175 = inttoptr i64 %1173 to i64*
  %1176 = load i64, i64* %1175, align 8
  store i64 %1176, i64* %RAX, align 8, !tbaa !2428
  %1177 = add i64 %533, 8
  store i64 %1177, i64* %PC, align 8
  %1178 = load i32, i32* %507, align 4
  %1179 = sext i32 %1178 to i64
  store i64 %1179, i64* %RCX, align 8, !tbaa !2428
  %1180 = shl nsw i64 %1179, 2
  %1181 = add i64 %1180, %1176
  %1182 = add i64 %533, 13
  store i64 %1182, i64* %PC, align 8
  %1183 = inttoptr i64 %1181 to i32*
  %1184 = load i32, i32* %1183, align 4
  %1185 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %1184, i32* %1185, align 1, !tbaa !2452
  store float 0.000000e+00, float* %453, align 1, !tbaa !2452
  store float 0.000000e+00, float* %455, align 1, !tbaa !2452
  store float 0.000000e+00, float* %457, align 1, !tbaa !2452
  %1186 = add i64 %533, 17
  store i64 %1186, i64* %PC, align 8
  %1187 = load i64, i64* %1175, align 8
  store i64 %1187, i64* %RAX, align 8, !tbaa !2428
  %1188 = add i64 %533, 21
  store i64 %1188, i64* %PC, align 8
  %1189 = load i32, i32* %502, align 4
  %1190 = sext i32 %1189 to i64
  store i64 %1190, i64* %RCX, align 8, !tbaa !2428
  %1191 = shl nsw i64 %1190, 2
  %1192 = add i64 %1191, %1187
  %1193 = add i64 %533, 26
  store i64 %1193, i64* %PC, align 8
  %1194 = load <2 x float>, <2 x float>* %458, align 1
  %1195 = extractelement <2 x float> %1194, i32 0
  %1196 = inttoptr i64 %1192 to float*
  store float %1195, float* %1196, align 4
  %1197 = load i64, i64* %RBP, align 8
  %1198 = add i64 %1197, -40
  %1199 = load i64, i64* %PC, align 8
  %1200 = add i64 %1199, 5
  store i64 %1200, i64* %PC, align 8
  %1201 = inttoptr i64 %1198 to i32*
  %1202 = load i32, i32* %1201, align 4
  %1203 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %1202, i32* %1203, align 1, !tbaa !2452
  store float 0.000000e+00, float* %453, align 1, !tbaa !2452
  store float 0.000000e+00, float* %455, align 1, !tbaa !2452
  store float 0.000000e+00, float* %457, align 1, !tbaa !2452
  %1204 = add i64 %1197, -32
  %1205 = add i64 %1199, 9
  store i64 %1205, i64* %PC, align 8
  %1206 = inttoptr i64 %1204 to i64*
  %1207 = load i64, i64* %1206, align 8
  store i64 %1207, i64* %RAX, align 8, !tbaa !2428
  %1208 = add i64 %1197, -44
  %1209 = add i64 %1199, 13
  store i64 %1209, i64* %PC, align 8
  %1210 = inttoptr i64 %1208 to i32*
  %1211 = load i32, i32* %1210, align 4
  %1212 = sext i32 %1211 to i64
  store i64 %1212, i64* %RCX, align 8, !tbaa !2428
  %1213 = shl nsw i64 %1212, 2
  %1214 = add i64 %1213, %1207
  %1215 = add i64 %1199, 18
  store i64 %1215, i64* %PC, align 8
  %1216 = load <2 x float>, <2 x float>* %458, align 1
  %1217 = extractelement <2 x float> %1216, i32 0
  %1218 = inttoptr i64 %1214 to float*
  store float %1217, float* %1218, align 4
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %block_401d36

block_401eec:                                     ; preds = %block_401e5f
  %1219 = add i64 %372, -56
  %1220 = add i64 %408, 4
  store i64 %1220, i64* %PC, align 8
  %1221 = inttoptr i64 %1219 to i32*
  %1222 = load i32, i32* %1221, align 4
  %1223 = add i32 %1222, -1
  %1224 = icmp eq i32 %1222, 0
  %1225 = zext i1 %1224 to i8
  store i8 %1225, i8* %21, align 1, !tbaa !2432
  %1226 = and i32 %1223, 255
  %1227 = tail call i32 @llvm.ctpop.i32(i32 %1226) #8
  %1228 = trunc i32 %1227 to i8
  %1229 = and i8 %1228, 1
  %1230 = xor i8 %1229, 1
  store i8 %1230, i8* %28, align 1, !tbaa !2446
  %1231 = xor i32 %1222, %1223
  %1232 = lshr i32 %1231, 4
  %1233 = trunc i32 %1232 to i8
  %1234 = and i8 %1233, 1
  store i8 %1234, i8* %33, align 1, !tbaa !2450
  %1235 = icmp eq i32 %1223, 0
  %1236 = zext i1 %1235 to i8
  store i8 %1236, i8* %36, align 1, !tbaa !2447
  %1237 = lshr i32 %1223, 31
  %1238 = trunc i32 %1237 to i8
  store i8 %1238, i8* %39, align 1, !tbaa !2448
  %1239 = lshr i32 %1222, 31
  %1240 = xor i32 %1237, %1239
  %1241 = add nuw nsw i32 %1240, %1239
  %1242 = icmp eq i32 %1241, 2
  %1243 = zext i1 %1242 to i8
  store i8 %1243, i8* %45, align 1, !tbaa !2449
  %1244 = icmp ne i8 %1238, 0
  %1245 = xor i1 %1244, %1242
  %.v36 = select i1 %1245, i64 278, i64 10
  %1246 = add i64 %408, %.v36
  store i64 %1246, i64* %126, align 8, !tbaa !2428
  br i1 %1245, label %block_402002, label %block_401ef6

block_401f09:                                     ; preds = %block_401efd
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1247 = add i64 %1621, -16
  %1248 = add i64 %1657, 8
  store i64 %1248, i64* %PC, align 8
  %1249 = inttoptr i64 %1247 to i32*
  %1250 = load i32, i32* %1249, align 4
  %1251 = zext i32 %1250 to i64
  store i64 %1251, i64* %RCX, align 8, !tbaa !2428
  %1252 = add i64 %1657, 11
  store i64 %1252, i64* %PC, align 8
  %1253 = load i32, i32* %1624, align 4
  %1254 = add i32 %1253, 1
  %1255 = zext i32 %1254 to i64
  store i64 %1255, i64* %RDX, align 8, !tbaa !2428
  %1256 = lshr i32 %1254, 31
  %1257 = sub i32 %1250, %1254
  %1258 = zext i32 %1257 to i64
  store i64 %1258, i64* %RCX, align 8, !tbaa !2428
  %1259 = icmp ult i32 %1250, %1254
  %1260 = zext i1 %1259 to i8
  store i8 %1260, i8* %21, align 1, !tbaa !2432
  %1261 = and i32 %1257, 255
  %1262 = tail call i32 @llvm.ctpop.i32(i32 %1261) #8
  %1263 = trunc i32 %1262 to i8
  %1264 = and i8 %1263, 1
  %1265 = xor i8 %1264, 1
  store i8 %1265, i8* %28, align 1, !tbaa !2446
  %1266 = xor i32 %1254, %1250
  %1267 = xor i32 %1266, %1257
  %1268 = lshr i32 %1267, 4
  %1269 = trunc i32 %1268 to i8
  %1270 = and i8 %1269, 1
  store i8 %1270, i8* %33, align 1, !tbaa !2450
  %1271 = icmp eq i32 %1257, 0
  %1272 = zext i1 %1271 to i8
  store i8 %1272, i8* %36, align 1, !tbaa !2447
  %1273 = lshr i32 %1257, 31
  %1274 = trunc i32 %1273 to i8
  store i8 %1274, i8* %39, align 1, !tbaa !2448
  %1275 = lshr i32 %1250, 31
  %1276 = xor i32 %1256, %1275
  %1277 = xor i32 %1273, %1275
  %1278 = add nuw nsw i32 %1277, %1276
  %1279 = icmp eq i32 %1278, 2
  %1280 = zext i1 %1279 to i8
  store i8 %1280, i8* %45, align 1, !tbaa !2449
  %1281 = add i64 %1621, -44
  %1282 = add i64 %1657, 19
  store i64 %1282, i64* %PC, align 8
  %1283 = inttoptr i64 %1281 to i32*
  store i32 %1257, i32* %1283, align 4
  %1284 = load i64, i64* %RBP, align 8
  %1285 = add i64 %1284, -32
  %1286 = load i64, i64* %PC, align 8
  %1287 = add i64 %1286, 4
  store i64 %1287, i64* %PC, align 8
  %1288 = inttoptr i64 %1285 to i64*
  %1289 = load i64, i64* %1288, align 8
  store i64 %1289, i64* %RSI, align 8, !tbaa !2428
  %1290 = add i64 %1284, -44
  %1291 = add i64 %1286, 8
  store i64 %1291, i64* %PC, align 8
  %1292 = inttoptr i64 %1290 to i32*
  %1293 = load i32, i32* %1292, align 4
  %1294 = sext i32 %1293 to i64
  store i64 %1294, i64* %RDI, align 8, !tbaa !2428
  %1295 = shl nsw i64 %1294, 2
  %1296 = add i64 %1295, %1289
  %1297 = add i64 %1286, 13
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1296 to i32*
  %1299 = load i32, i32* %1298, align 4
  %1300 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %1299, i32* %1300, align 1, !tbaa !2452
  store float 0.000000e+00, float* %570, align 1, !tbaa !2452
  store float 0.000000e+00, float* %572, align 1, !tbaa !2452
  store float 0.000000e+00, float* %574, align 1, !tbaa !2452
  %1301 = add i64 %1284, -16
  %1302 = add i64 %1286, 16
  store i64 %1302, i64* %PC, align 8
  %1303 = inttoptr i64 %1301 to i32*
  %1304 = load i32, i32* %1303, align 4
  %1305 = zext i32 %1304 to i64
  store i64 %1305, i64* %RCX, align 8, !tbaa !2428
  %1306 = add i64 %1286, 19
  store i64 %1306, i64* %PC, align 8
  %1307 = load i32, i32* %1292, align 4
  %1308 = add i32 %1307, 1
  %1309 = zext i32 %1308 to i64
  store i64 %1309, i64* %RDX, align 8, !tbaa !2428
  %1310 = lshr i32 %1308, 31
  %1311 = sub i32 %1304, %1308
  %1312 = zext i32 %1311 to i64
  store i64 %1312, i64* %RCX, align 8, !tbaa !2428
  %1313 = icmp ult i32 %1304, %1308
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* %21, align 1, !tbaa !2432
  %1315 = and i32 %1311, 255
  %1316 = tail call i32 @llvm.ctpop.i32(i32 %1315) #8
  %1317 = trunc i32 %1316 to i8
  %1318 = and i8 %1317, 1
  %1319 = xor i8 %1318, 1
  store i8 %1319, i8* %28, align 1, !tbaa !2446
  %1320 = xor i32 %1308, %1304
  %1321 = xor i32 %1320, %1311
  %1322 = lshr i32 %1321, 4
  %1323 = trunc i32 %1322 to i8
  %1324 = and i8 %1323, 1
  store i8 %1324, i8* %33, align 1, !tbaa !2450
  %1325 = icmp eq i32 %1311, 0
  %1326 = zext i1 %1325 to i8
  store i8 %1326, i8* %36, align 1, !tbaa !2447
  %1327 = lshr i32 %1311, 31
  %1328 = trunc i32 %1327 to i8
  store i8 %1328, i8* %39, align 1, !tbaa !2448
  %1329 = lshr i32 %1304, 31
  %1330 = xor i32 %1310, %1329
  %1331 = xor i32 %1327, %1329
  %1332 = add nuw nsw i32 %1331, %1330
  %1333 = icmp eq i32 %1332, 2
  %1334 = zext i1 %1333 to i8
  store i8 %1334, i8* %45, align 1, !tbaa !2449
  %1335 = load i64, i64* %RBP, align 8
  %1336 = add i64 %1335, -8
  %1337 = add i64 %1286, 28
  store i64 %1337, i64* %PC, align 8
  %1338 = inttoptr i64 %1336 to i64*
  %1339 = load i64, i64* %1338, align 8
  store i64 %1339, i64* %RSI, align 8, !tbaa !2428
  %1340 = add i64 %1335, -12
  %1341 = add i64 %1286, 31
  store i64 %1341, i64* %PC, align 8
  %1342 = inttoptr i64 %1340 to i32*
  %1343 = load i32, i32* %1342, align 4
  %1344 = zext i32 %1343 to i64
  store i64 %1344, i64* %RDX, align 8, !tbaa !2428
  %1345 = add i64 %1335, -44
  %1346 = add i64 %1286, 35
  store i64 %1346, i64* %PC, align 8
  %1347 = inttoptr i64 %1345 to i32*
  %1348 = load i32, i32* %1347, align 4
  %1349 = sext i32 %1343 to i64
  %1350 = sext i32 %1348 to i64
  %1351 = mul nsw i64 %1350, %1349
  %1352 = trunc i64 %1351 to i32
  %1353 = and i64 %1351, 4294967295
  store i64 %1353, i64* %RDX, align 8, !tbaa !2428
  %1354 = shl i64 %1351, 32
  %1355 = ashr exact i64 %1354, 32
  %1356 = icmp ne i64 %1355, %1351
  %1357 = zext i1 %1356 to i8
  store i8 %1357, i8* %21, align 1, !tbaa !2432
  %1358 = and i32 %1352, 255
  %1359 = tail call i32 @llvm.ctpop.i32(i32 %1358) #8
  %1360 = trunc i32 %1359 to i8
  %1361 = and i8 %1360, 1
  %1362 = xor i8 %1361, 1
  store i8 %1362, i8* %28, align 1, !tbaa !2446
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2447
  %1363 = lshr i32 %1352, 31
  %1364 = trunc i32 %1363 to i8
  store i8 %1364, i8* %39, align 1, !tbaa !2448
  store i8 %1357, i8* %45, align 1, !tbaa !2449
  %1365 = add i64 %1286, 38
  store i64 %1365, i64* %PC, align 8
  %1366 = trunc i64 %1351 to i32
  %1367 = load i32, i32* %1347, align 4
  %1368 = add i32 %1367, %1366
  %1369 = add i32 %1368, 1
  %1370 = zext i32 %1369 to i64
  store i64 %1370, i64* %RDX, align 8, !tbaa !2428
  %1371 = sext i32 %1369 to i64
  %1372 = shl nsw i64 %1371, 2
  store i64 %1372, i64* %RDI, align 8, !tbaa !2428
  %1373 = lshr i64 %1371, 61
  %1374 = and i64 %1373, 1
  %1375 = load i64, i64* %RSI, align 8
  %1376 = add i64 %1372, %1375
  store i64 %1376, i64* %RSI, align 8, !tbaa !2428
  %1377 = icmp ult i64 %1376, %1375
  %1378 = icmp ult i64 %1376, %1372
  %1379 = or i1 %1377, %1378
  %1380 = zext i1 %1379 to i8
  store i8 %1380, i8* %21, align 1, !tbaa !2432
  %1381 = trunc i64 %1376 to i32
  %1382 = and i32 %1381, 255
  %1383 = tail call i32 @llvm.ctpop.i32(i32 %1382) #8
  %1384 = trunc i32 %1383 to i8
  %1385 = and i8 %1384, 1
  %1386 = xor i8 %1385, 1
  store i8 %1386, i8* %28, align 1, !tbaa !2446
  %1387 = xor i64 %1372, %1375
  %1388 = xor i64 %1387, %1376
  %1389 = lshr i64 %1388, 4
  %1390 = trunc i64 %1389 to i8
  %1391 = and i8 %1390, 1
  store i8 %1391, i8* %33, align 1, !tbaa !2450
  %1392 = icmp eq i64 %1376, 0
  %1393 = zext i1 %1392 to i8
  store i8 %1393, i8* %36, align 1, !tbaa !2447
  %1394 = lshr i64 %1376, 63
  %1395 = trunc i64 %1394 to i8
  store i8 %1395, i8* %39, align 1, !tbaa !2448
  %1396 = lshr i64 %1375, 63
  %1397 = xor i64 %1394, %1396
  %1398 = xor i64 %1394, %1374
  %1399 = add nuw nsw i64 %1397, %1398
  %1400 = icmp eq i64 %1399, 2
  %1401 = zext i1 %1400 to i8
  store i8 %1401, i8* %45, align 1, !tbaa !2449
  %1402 = load i64, i64* %RBP, align 8
  %1403 = add i64 %1402, -32
  %1404 = add i64 %1286, 55
  store i64 %1404, i64* %PC, align 8
  %1405 = inttoptr i64 %1403 to i64*
  %1406 = load i64, i64* %1405, align 8
  store i64 %1406, i64* %RDI, align 8, !tbaa !2428
  %1407 = add i64 %1402, -44
  %1408 = add i64 %1286, 58
  store i64 %1408, i64* %PC, align 8
  %1409 = inttoptr i64 %1407 to i32*
  %1410 = load i32, i32* %1409, align 4
  %1411 = add i32 %1410, 1
  %1412 = sext i32 %1411 to i64
  %1413 = shl nsw i64 %1412, 2
  store i64 %1413, i64* %R8, align 8, !tbaa !2428
  %1414 = lshr i64 %1412, 61
  %1415 = and i64 %1414, 1
  %1416 = add i64 %1413, %1406
  %1417 = icmp ult i64 %1416, %1406
  %1418 = icmp ult i64 %1416, %1413
  %1419 = or i1 %1417, %1418
  %1420 = zext i1 %1419 to i8
  store i8 %1420, i8* %21, align 1, !tbaa !2432
  %1421 = trunc i64 %1416 to i32
  %1422 = and i32 %1421, 255
  %1423 = tail call i32 @llvm.ctpop.i32(i32 %1422) #8
  %1424 = trunc i32 %1423 to i8
  %1425 = and i8 %1424, 1
  %1426 = xor i8 %1425, 1
  store i8 %1426, i8* %28, align 1, !tbaa !2446
  %1427 = xor i64 %1413, %1406
  %1428 = xor i64 %1427, %1416
  %1429 = lshr i64 %1428, 4
  %1430 = trunc i64 %1429 to i8
  %1431 = and i8 %1430, 1
  store i8 %1431, i8* %33, align 1, !tbaa !2450
  %1432 = icmp eq i64 %1416, 0
  %1433 = zext i1 %1432 to i8
  store i8 %1433, i8* %36, align 1, !tbaa !2447
  %1434 = lshr i64 %1416, 63
  %1435 = trunc i64 %1434 to i8
  store i8 %1435, i8* %39, align 1, !tbaa !2448
  %1436 = lshr i64 %1406, 63
  %1437 = xor i64 %1434, %1436
  %1438 = xor i64 %1434, %1415
  %1439 = add nuw nsw i64 %1437, %1438
  %1440 = icmp eq i64 %1439, 2
  %1441 = zext i1 %1440 to i8
  store i8 %1441, i8* %45, align 1, !tbaa !2449
  %1442 = load i64, i64* %RBP, align 8
  %1443 = add i64 %1442, -80
  %1444 = add i64 %1286, 75
  store i64 %1444, i64* %PC, align 8
  %1445 = inttoptr i64 %1443 to i64*
  store i64 %1416, i64* %1445, align 8
  %1446 = load i32, i32* %ECX, align 4
  %1447 = zext i32 %1446 to i64
  %1448 = load i64, i64* %PC, align 8
  store i64 %1447, i64* %RDI, align 8, !tbaa !2428
  %1449 = load i32, i32* %EAX, align 4
  %1450 = zext i32 %1449 to i64
  store i64 %1450, i64* %RDX, align 8, !tbaa !2428
  %1451 = load i64, i64* %RBP, align 8
  %1452 = add i64 %1451, -80
  %1453 = add i64 %1448, 8
  store i64 %1453, i64* %PC, align 8
  %1454 = inttoptr i64 %1452 to i64*
  %1455 = load i64, i64* %1454, align 8
  store i64 %1455, i64* %RCX, align 8, !tbaa !2428
  store i64 %1450, i64* %565, align 8, !tbaa !2428
  %1456 = add i64 %1451, -84
  %1457 = add i64 %1448, 16
  store i64 %1457, i64* %PC, align 8
  %1458 = load <2 x float>, <2 x float>* %566, align 1
  %1459 = extractelement <2 x float> %1458, i32 0
  %1460 = inttoptr i64 %1456 to float*
  store float %1459, float* %1460, align 4
  %1461 = load i64, i64* %PC, align 8
  %1462 = add i64 %1461, 2777
  %1463 = add i64 %1461, 5
  %1464 = load i64, i64* %13, align 8, !tbaa !2428
  %1465 = add i64 %1464, -8
  %1466 = inttoptr i64 %1465 to i64*
  store i64 %1463, i64* %1466, align 8
  store i64 %1465, i64* %13, align 8, !tbaa !2428
  store i64 %1462, i64* %126, align 8, !tbaa !2428
  %1467 = tail call %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* nonnull %0, i64 %1462, %struct.Memory* %MEMORY.6)
  %1468 = load i64, i64* %RBP, align 8
  %1469 = add i64 %1468, -84
  %1470 = load i64, i64* %PC, align 8
  %1471 = add i64 %1470, 5
  store i64 %1471, i64* %PC, align 8
  %1472 = inttoptr i64 %1469 to i32*
  %1473 = load i32, i32* %1472, align 4
  %1474 = bitcast %union.VectorReg* %10 to i32*
  store i32 %1473, i32* %1474, align 1, !tbaa !2452
  store float 0.000000e+00, float* %134, align 1, !tbaa !2452
  store float 0.000000e+00, float* %136, align 1, !tbaa !2452
  store float 0.000000e+00, float* %138, align 1, !tbaa !2452
  %1475 = load <2 x float>, <2 x float>* %139, align 1
  %1476 = load <2 x i32>, <2 x i32>* %140, align 1
  %1477 = load <2 x float>, <2 x float>* %566, align 1
  %1478 = extractelement <2 x float> %1475, i32 0
  %1479 = extractelement <2 x float> %1477, i32 0
  %1480 = fadd float %1478, %1479
  store float %1480, float* %132, align 1, !tbaa !2452
  %1481 = bitcast <2 x float> %1475 to <2 x i32>
  %1482 = extractelement <2 x i32> %1481, i32 1
  store i32 %1482, i32* %141, align 1, !tbaa !2452
  %1483 = extractelement <2 x i32> %1476, i32 0
  store i32 %1483, i32* %142, align 1, !tbaa !2452
  %1484 = extractelement <2 x i32> %1476, i32 1
  store i32 %1484, i32* %143, align 1, !tbaa !2452
  %1485 = add i64 %1468, -32
  %1486 = add i64 %1470, 13
  store i64 %1486, i64* %PC, align 8
  %1487 = inttoptr i64 %1485 to i64*
  %1488 = load i64, i64* %1487, align 8
  store i64 %1488, i64* %RCX, align 8, !tbaa !2428
  %1489 = add i64 %1468, -44
  %1490 = add i64 %1470, 17
  store i64 %1490, i64* %PC, align 8
  %1491 = inttoptr i64 %1489 to i32*
  %1492 = load i32, i32* %1491, align 4
  %1493 = sext i32 %1492 to i64
  store i64 %1493, i64* %RSI, align 8, !tbaa !2428
  %1494 = shl nsw i64 %1493, 2
  %1495 = add i64 %1494, %1488
  %1496 = add i64 %1470, 22
  store i64 %1496, i64* %PC, align 8
  %1497 = load <2 x float>, <2 x float>* %144, align 1
  %1498 = extractelement <2 x float> %1497, i32 0
  %1499 = inttoptr i64 %1495 to float*
  store float %1498, float* %1499, align 4
  %1500 = load i64, i64* %RBP, align 8
  %1501 = add i64 %1500, -24
  %1502 = load i64, i64* %PC, align 8
  %1503 = add i64 %1502, 4
  store i64 %1503, i64* %PC, align 8
  %1504 = inttoptr i64 %1501 to i64*
  %1505 = load i64, i64* %1504, align 8
  store i64 %1505, i64* %RCX, align 8, !tbaa !2428
  %1506 = add i64 %1500, -44
  %1507 = add i64 %1502, 8
  store i64 %1507, i64* %PC, align 8
  %1508 = inttoptr i64 %1506 to i32*
  %1509 = load i32, i32* %1508, align 4
  %1510 = sext i32 %1509 to i64
  store i64 %1510, i64* %RSI, align 8, !tbaa !2428
  %1511 = shl nsw i64 %1510, 2
  %1512 = add i64 %1511, %1505
  %1513 = add i64 %1502, 11
  store i64 %1513, i64* %PC, align 8
  %1514 = inttoptr i64 %1512 to i32*
  %1515 = load i32, i32* %1514, align 4
  %1516 = zext i32 %1515 to i64
  store i64 %1516, i64* %RAX, align 8, !tbaa !2428
  %1517 = add i64 %1500, -52
  %1518 = add i64 %1502, 14
  store i64 %1518, i64* %PC, align 8
  %1519 = inttoptr i64 %1517 to i32*
  store i32 %1515, i32* %1519, align 4
  %1520 = load i64, i64* %RBP, align 8
  %1521 = add i64 %1520, -52
  %1522 = load i64, i64* %PC, align 8
  %1523 = add i64 %1522, 3
  store i64 %1523, i64* %PC, align 8
  %1524 = inttoptr i64 %1521 to i32*
  %1525 = load i32, i32* %1524, align 4
  %1526 = zext i32 %1525 to i64
  store i64 %1526, i64* %RAX, align 8, !tbaa !2428
  %1527 = add i64 %1520, -44
  %1528 = add i64 %1522, 6
  store i64 %1528, i64* %PC, align 8
  %1529 = inttoptr i64 %1527 to i32*
  %1530 = load i32, i32* %1529, align 4
  %1531 = sub i32 %1525, %1530
  %1532 = icmp ult i32 %1525, %1530
  %1533 = zext i1 %1532 to i8
  store i8 %1533, i8* %21, align 1, !tbaa !2432
  %1534 = and i32 %1531, 255
  %1535 = tail call i32 @llvm.ctpop.i32(i32 %1534) #8
  %1536 = trunc i32 %1535 to i8
  %1537 = and i8 %1536, 1
  %1538 = xor i8 %1537, 1
  store i8 %1538, i8* %28, align 1, !tbaa !2446
  %1539 = xor i32 %1530, %1525
  %1540 = xor i32 %1539, %1531
  %1541 = lshr i32 %1540, 4
  %1542 = trunc i32 %1541 to i8
  %1543 = and i8 %1542, 1
  store i8 %1543, i8* %33, align 1, !tbaa !2450
  %1544 = icmp eq i32 %1531, 0
  %1545 = zext i1 %1544 to i8
  store i8 %1545, i8* %36, align 1, !tbaa !2447
  %1546 = lshr i32 %1531, 31
  %1547 = trunc i32 %1546 to i8
  store i8 %1547, i8* %39, align 1, !tbaa !2448
  %1548 = lshr i32 %1525, 31
  %1549 = lshr i32 %1530, 31
  %1550 = xor i32 %1549, %1548
  %1551 = xor i32 %1546, %1548
  %1552 = add nuw nsw i32 %1551, %1550
  %1553 = icmp eq i32 %1552, 2
  %1554 = zext i1 %1553 to i8
  store i8 %1554, i8* %45, align 1, !tbaa !2449
  %.v38 = select i1 %1544, i64 74, i64 12
  %1555 = add i64 %1522, %.v38
  store i64 %1555, i64* %126, align 8, !tbaa !2428
  br i1 %1544, label %block_401fea, label %block_401fac

block_401fea:                                     ; preds = %block_401f09, %block_401fac
  %1556 = phi i64 [ %1520, %block_401f09 ], [ %.pre8, %block_401fac ]
  %1557 = phi i64 [ %1555, %block_401f09 ], [ %.pre7, %block_401fac ]
  %1558 = add i64 %1556, -48
  %1559 = add i64 %1557, 8
  store i64 %1559, i64* %PC, align 8
  %1560 = inttoptr i64 %1558 to i32*
  %1561 = load i32, i32* %1560, align 4
  %1562 = add i32 %1561, 1
  %1563 = zext i32 %1562 to i64
  store i64 %1563, i64* %RAX, align 8, !tbaa !2428
  %1564 = icmp eq i32 %1561, -1
  %1565 = icmp eq i32 %1562, 0
  %1566 = or i1 %1564, %1565
  %1567 = zext i1 %1566 to i8
  store i8 %1567, i8* %21, align 1, !tbaa !2432
  %1568 = and i32 %1562, 255
  %1569 = tail call i32 @llvm.ctpop.i32(i32 %1568) #8
  %1570 = trunc i32 %1569 to i8
  %1571 = and i8 %1570, 1
  %1572 = xor i8 %1571, 1
  store i8 %1572, i8* %28, align 1, !tbaa !2446
  %1573 = xor i32 %1561, %1562
  %1574 = lshr i32 %1573, 4
  %1575 = trunc i32 %1574 to i8
  %1576 = and i8 %1575, 1
  store i8 %1576, i8* %33, align 1, !tbaa !2450
  %1577 = icmp eq i32 %1562, 0
  %1578 = zext i1 %1577 to i8
  store i8 %1578, i8* %36, align 1, !tbaa !2447
  %1579 = lshr i32 %1562, 31
  %1580 = trunc i32 %1579 to i8
  store i8 %1580, i8* %39, align 1, !tbaa !2448
  %1581 = lshr i32 %1561, 31
  %1582 = xor i32 %1579, %1581
  %1583 = add nuw nsw i32 %1582, %1579
  %1584 = icmp eq i32 %1583, 2
  %1585 = zext i1 %1584 to i8
  store i8 %1585, i8* %45, align 1, !tbaa !2449
  %1586 = add i64 %1557, 14
  store i64 %1586, i64* %PC, align 8
  store i32 %1562, i32* %1560, align 4
  %1587 = load i64, i64* %PC, align 8
  %1588 = add i64 %1587, -251
  store i64 %1588, i64* %126, align 8, !tbaa !2428
  br label %block_401efd

block_402007:                                     ; preds = %block_402002, %block_401e53
  %.sink = phi i64 [ %1675, %block_402002 ], [ %409, %block_401e53 ]
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.8, %block_402002 ], [ %MEMORY.3, %block_401e53 ]
  %1589 = load i64, i64* %RSP, align 8
  %1590 = add i64 %1589, 96
  store i64 %1590, i64* %RSP, align 8, !tbaa !2428
  %1591 = icmp ugt i64 %1589, -97
  %1592 = zext i1 %1591 to i8
  store i8 %1592, i8* %21, align 1, !tbaa !2432
  %1593 = trunc i64 %1590 to i32
  %1594 = and i32 %1593, 255
  %1595 = tail call i32 @llvm.ctpop.i32(i32 %1594) #8
  %1596 = trunc i32 %1595 to i8
  %1597 = and i8 %1596, 1
  %1598 = xor i8 %1597, 1
  store i8 %1598, i8* %28, align 1, !tbaa !2446
  %1599 = xor i64 %1589, %1590
  %1600 = lshr i64 %1599, 4
  %1601 = trunc i64 %1600 to i8
  %1602 = and i8 %1601, 1
  store i8 %1602, i8* %33, align 1, !tbaa !2450
  %1603 = icmp eq i64 %1590, 0
  %1604 = zext i1 %1603 to i8
  store i8 %1604, i8* %36, align 1, !tbaa !2447
  %1605 = lshr i64 %1590, 63
  %1606 = trunc i64 %1605 to i8
  store i8 %1606, i8* %39, align 1, !tbaa !2448
  %1607 = lshr i64 %1589, 63
  %1608 = xor i64 %1605, %1607
  %1609 = add nuw nsw i64 %1608, %1605
  %1610 = icmp eq i64 %1609, 2
  %1611 = zext i1 %1610 to i8
  store i8 %1611, i8* %45, align 1, !tbaa !2449
  %1612 = add i64 %.sink, 5
  store i64 %1612, i64* %PC, align 8
  %1613 = add i64 %1589, 104
  %1614 = inttoptr i64 %1590 to i64*
  %1615 = load i64, i64* %1614, align 8
  store i64 %1615, i64* %RBP, align 8, !tbaa !2428
  store i64 %1613, i64* %13, align 8, !tbaa !2428
  %1616 = add i64 %.sink, 6
  store i64 %1616, i64* %PC, align 8
  %1617 = inttoptr i64 %1613 to i64*
  %1618 = load i64, i64* %1617, align 8
  store i64 %1618, i64* %126, align 8, !tbaa !2428
  %1619 = add i64 %1589, 112
  store i64 %1619, i64* %13, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_401efd:                                     ; preds = %block_401fea, %block_401ef6
  %1620 = phi i64 [ %.pre6, %block_401ef6 ], [ %1588, %block_401fea ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.0, %block_401ef6 ], [ %1467, %block_401fea ]
  %1621 = load i64, i64* %RBP, align 8
  %1622 = add i64 %1621, -48
  %1623 = add i64 %1620, 3
  store i64 %1623, i64* %PC, align 8
  %1624 = inttoptr i64 %1622 to i32*
  %1625 = load i32, i32* %1624, align 4
  %1626 = zext i32 %1625 to i64
  store i64 %1626, i64* %RAX, align 8, !tbaa !2428
  %1627 = add i64 %1621, -56
  %1628 = add i64 %1620, 6
  store i64 %1628, i64* %PC, align 8
  %1629 = inttoptr i64 %1627 to i32*
  %1630 = load i32, i32* %1629, align 4
  %1631 = sub i32 %1625, %1630
  %1632 = icmp ult i32 %1625, %1630
  %1633 = zext i1 %1632 to i8
  store i8 %1633, i8* %21, align 1, !tbaa !2432
  %1634 = and i32 %1631, 255
  %1635 = tail call i32 @llvm.ctpop.i32(i32 %1634) #8
  %1636 = trunc i32 %1635 to i8
  %1637 = and i8 %1636, 1
  %1638 = xor i8 %1637, 1
  store i8 %1638, i8* %28, align 1, !tbaa !2446
  %1639 = xor i32 %1630, %1625
  %1640 = xor i32 %1639, %1631
  %1641 = lshr i32 %1640, 4
  %1642 = trunc i32 %1641 to i8
  %1643 = and i8 %1642, 1
  store i8 %1643, i8* %33, align 1, !tbaa !2450
  %1644 = icmp eq i32 %1631, 0
  %1645 = zext i1 %1644 to i8
  store i8 %1645, i8* %36, align 1, !tbaa !2447
  %1646 = lshr i32 %1631, 31
  %1647 = trunc i32 %1646 to i8
  store i8 %1647, i8* %39, align 1, !tbaa !2448
  %1648 = lshr i32 %1625, 31
  %1649 = lshr i32 %1630, 31
  %1650 = xor i32 %1649, %1648
  %1651 = xor i32 %1646, %1648
  %1652 = add nuw nsw i32 %1651, %1650
  %1653 = icmp eq i32 %1652, 2
  %1654 = zext i1 %1653 to i8
  store i8 %1654, i8* %45, align 1, !tbaa !2449
  %1655 = icmp ne i8 %1647, 0
  %1656 = xor i1 %1655, %1653
  %.v37 = select i1 %1656, i64 12, i64 256
  %1657 = add i64 %1620, %.v37
  %1658 = add i64 %1657, 5
  store i64 %1658, i64* %PC, align 8
  br i1 %1656, label %block_401f09, label %block_401ffd

block_401da1:                                     ; preds = %block_401cc1.block_401da1_crit_edge, %block_401d9c
  %.pre-phi29 = phi i64* [ %.pre28, %block_401cc1.block_401da1_crit_edge ], [ %459, %block_401d9c ]
  %.pre-phi27 = phi <2 x float>* [ %.pre26, %block_401cc1.block_401da1_crit_edge ], [ %458, %block_401d9c ]
  %.pre-phi23 = phi float* [ %.pre22, %block_401cc1.block_401da1_crit_edge ], [ %457, %block_401d9c ]
  %.pre-phi21 = phi i8* [ %.pre20, %block_401cc1.block_401da1_crit_edge ], [ %456, %block_401d9c ]
  %.pre-phi19 = phi float* [ %.pre18, %block_401cc1.block_401da1_crit_edge ], [ %455, %block_401d9c ]
  %.pre-phi17.in = phi i64* [ %.pre16, %block_401cc1.block_401da1_crit_edge ], [ %454, %block_401d9c ]
  %.pre-phi15 = phi float* [ %.pre14, %block_401cc1.block_401da1_crit_edge ], [ %453, %block_401d9c ]
  %.pre-phi13 = phi i8* [ %.pre12, %block_401cc1.block_401da1_crit_edge ], [ %452, %block_401d9c ]
  %.pre-phi = phi i8* [ %.pre9, %block_401cc1.block_401da1_crit_edge ], [ %451, %block_401d9c ]
  %1659 = phi i64 [ %561, %block_401cc1.block_401da1_crit_edge ], [ %1172, %block_401d9c ]
  %1660 = phi i64 [ %111, %block_401cc1.block_401da1_crit_edge ], [ %411, %block_401d9c ]
  %MEMORY.7 = phi %struct.Memory* [ %2, %block_401cc1.block_401da1_crit_edge ], [ %MEMORY.1, %block_401d9c ]
  %.pre-phi11 = bitcast [32 x %union.VectorReg]* %9 to float*
  %1661 = add i64 %1660, -48
  %1662 = add i64 %1659, 7
  store i64 %1662, i64* %PC, align 8
  %1663 = inttoptr i64 %1661 to i32*
  store i32 0, i32* %1663, align 4
  %1664 = bitcast i8* %.pre-phi to <2 x float>*
  %1665 = bitcast i64* %.pre-phi17.in to <2 x i32>*
  %1666 = bitcast i8* %.pre-phi13 to i32*
  %1667 = bitcast i64* %.pre-phi17.in to i32*
  %1668 = bitcast i8* %.pre-phi21 to i32*
  %1669 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1670 = bitcast %union.anon* %4 to [2 x i32]*
  %1671 = bitcast %union.anon* %4 to i32*
  %1672 = getelementptr inbounds [2 x i32], [2 x i32]* %1670, i64 0, i64 1
  %1673 = bitcast i8* %.pre-phi to i32*
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_401da8

block_402002:                                     ; preds = %block_401eec, %block_401ffd
  %1674 = phi i64 [ %1246, %block_401eec ], [ %1658, %block_401ffd ]
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.0, %block_401eec ], [ %MEMORY.6, %block_401ffd ]
  %1675 = add i64 %1674, 5
  br label %block_402007
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400540:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %RSI, align 8
  %10 = load i64, i64* %PC, align 8
  %11 = sub i64 %9, ptrtoint (i64* @stderr to i64)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %18 = ashr i64 %11, 3
  %19 = lshr i64 %18, 63
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  %20 = add nsw i64 %19, %18
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = ashr i64 %20, 1
  store i64 %23, i64* %RSI, align 8, !tbaa !2428
  store i8 %22, i8* %12, align 1, !tbaa !2456
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #8
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %13, align 1, !tbaa !2456
  store i8 0, i8* %14, align 1, !tbaa !2456
  %30 = icmp eq i64 %23, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %15, align 1, !tbaa !2456
  %32 = lshr i64 %23, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %16, align 1, !tbaa !2456
  store i8 0, i8* %17, align 1, !tbaa !2456
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %30, i64 50, i64 29
  %35 = add i64 %10, %.v
  store i64 %35, i64* %34, align 8, !tbaa !2428
  br i1 %30, label %block_400578, label %block_400563

block_400578:                                     ; preds = %block_400563, %block_400540
  %36 = phi i64 [ %46, %block_400563 ], [ %35, %block_400540 ]
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC, align 8
  %38 = load i64, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  store i64 %39, i64* %5, align 8, !tbaa !2428
  %42 = add i64 %36, 2
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %34, align 8, !tbaa !2428
  %45 = add i64 %38, 16
  store i64 %45, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400563:                                     ; preds = %block_400540
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2447
  store i8 0, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %14, align 1, !tbaa !2450
  %46 = add i64 %35, 21
  store i64 %46, i64* %34, align 8, !tbaa !2428
  br label %block_400578
}

; Function Attrs: noinline
define %struct.Memory* @sub_401980_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401980:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = load i64, i64* %12, align 8, !tbaa !2428
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %10, i64* %15, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %14, i64* %RBP, align 8, !tbaa !2428
  %17 = add i64 %13, -72
  store i64 %17, i64* %RSP, align 8, !tbaa !2428
  %18 = icmp ult i64 %14, 64
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !2432
  %21 = trunc i64 %17 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #8
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !2446
  %28 = xor i64 %14, %17
  %29 = lshr i64 %28, 4
  %30 = trunc i64 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = icmp eq i64 %17, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1, !tbaa !2447
  %36 = lshr i64 %17, 63
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !2448
  %39 = lshr i64 %14, 63
  %40 = xor i64 %36, %39
  %41 = add nuw nsw i64 %40, %39
  %42 = icmp eq i64 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = add i64 %13, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = add i64 %16, 11
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -12
  %51 = load i32, i32* %ESI, align 4
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %54, align 4
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i32, i32* %EDX, align 4
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i32*
  store i32 %57, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -24
  %63 = load i64, i64* %RCX, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -32
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -32
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RCX, align 8, !tbaa !2428
  %79 = add i64 %75, 10
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %78 to i32*
  store i32 0, i32* %80, align 4
  %81 = load i64, i64* %RBP, align 8
  %82 = add i64 %81, -16
  %83 = load i64, i64* %PC, align 8
  %84 = add i64 %83, 3
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %82 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, -1
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %RDX, align 8, !tbaa !2428
  %89 = icmp eq i32 %86, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %20, align 1, !tbaa !2432
  %91 = and i32 %87, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #8
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %27, align 1, !tbaa !2446
  %96 = xor i32 %86, %87
  %97 = lshr i32 %96, 4
  %98 = trunc i32 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %32, align 1, !tbaa !2450
  %100 = icmp eq i32 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %35, align 1, !tbaa !2447
  %102 = lshr i32 %87, 31
  %103 = trunc i32 %102 to i8
  store i8 %103, i8* %38, align 1, !tbaa !2448
  %104 = lshr i32 %86, 31
  %105 = xor i32 %102, %104
  %106 = add nuw nsw i32 %105, %104
  %107 = icmp eq i32 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %44, align 1, !tbaa !2449
  %109 = add i64 %81, -56
  %110 = add i64 %83, 9
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %109 to i32*
  store i32 %87, i32* %111, align 4
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, -56
  %114 = load i64, i64* %PC, align 8
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %113 to i32*
  %117 = load i32, i32* %116, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %118 = and i32 %117, 255
  %119 = tail call i32 @llvm.ctpop.i32(i32 %118) #8
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  store i8 %122, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  %123 = icmp eq i32 %117, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %35, align 1, !tbaa !2447
  %125 = lshr i32 %117, 31
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %38, align 1, !tbaa !2448
  store i8 0, i8* %44, align 1, !tbaa !2449
  %127 = icmp ne i8 %126, 0
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %127, i64 643, i64 10
  %129 = add i64 %114, %.v
  store i64 %129, i64* %128, align 8, !tbaa !2428
  br i1 %127, label %block_401980.block_401c30_crit_edge, label %block_4019b7

block_401980.block_401c30_crit_edge:              ; preds = %block_401980
  %.pre13 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %.pre18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre28 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %.pre30 = getelementptr inbounds i8, i8* %.pre13, i64 4
  %.pre32 = bitcast i8* %.pre30 to i32*
  %.pre34 = bitcast i64* %.pre18 to i32*
  %.pre36 = getelementptr inbounds i8, i8* %.pre13, i64 12
  %.pre38 = bitcast i8* %.pre36 to i32*
  %.pre40 = bitcast %union.VectorReg* %9 to i8*
  %.pre44 = getelementptr inbounds i8, i8* %.pre40, i64 4
  %.pre46 = bitcast i8* %.pre44 to float*
  %.pre48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %.pre50 = bitcast i64* %.pre48 to float*
  %.pre52 = getelementptr inbounds i8, i8* %.pre40, i64 12
  %.pre54 = bitcast i8* %.pre52 to float*
  %.pre58 = bitcast %union.VectorReg* %9 to <2 x float>*
  %.pre60 = bitcast %union.VectorReg* %9 to double*
  %.pre64 = bitcast [32 x %union.VectorReg]* %8 to double*
  br label %block_401c30

block_401b56:                                     ; preds = %block_401b2f
  %130 = add i64 %1150, -8
  %131 = add i64 %1185, 4
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = add i64 %1150, -12
  %135 = add i64 %1185, 7
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RCX, align 8, !tbaa !2428
  %139 = add i64 %1150, -40
  %140 = add i64 %1185, 11
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i32*
  %142 = load i32, i32* %141, align 4
  %143 = sext i32 %137 to i64
  %144 = sext i32 %142 to i64
  %145 = mul nsw i64 %144, %143
  %146 = trunc i64 %145 to i32
  %147 = and i64 %145, 4294967295
  store i64 %147, i64* %RCX, align 8, !tbaa !2428
  %148 = shl i64 %145, 32
  %149 = ashr exact i64 %148, 32
  %150 = icmp ne i64 %149, %145
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %20, align 1, !tbaa !2432
  %152 = and i32 %146, 255
  %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #8
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  store i8 %156, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %157 = lshr i32 %146, 31
  %158 = trunc i32 %157 to i8
  store i8 %158, i8* %38, align 1, !tbaa !2448
  store i8 %151, i8* %44, align 1, !tbaa !2449
  %159 = add i64 %1185, 14
  store i64 %159, i64* %PC, align 8
  %160 = trunc i64 %145 to i32
  %161 = load i32, i32* %1159, align 4
  %162 = add i32 %161, %160
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %RCX, align 8, !tbaa !2428
  %164 = icmp ult i32 %162, %160
  %165 = icmp ult i32 %162, %161
  %166 = or i1 %164, %165
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %20, align 1, !tbaa !2432
  %168 = and i32 %162, 255
  %169 = tail call i32 @llvm.ctpop.i32(i32 %168) #8
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  store i8 %172, i8* %27, align 1, !tbaa !2446
  %173 = xor i32 %161, %160
  %174 = xor i32 %173, %162
  %175 = lshr i32 %174, 4
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  store i8 %177, i8* %32, align 1, !tbaa !2450
  %178 = icmp eq i32 %162, 0
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %35, align 1, !tbaa !2447
  %180 = lshr i32 %162, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %38, align 1, !tbaa !2448
  %182 = lshr i32 %160, 31
  %183 = lshr i32 %161, 31
  %184 = xor i32 %180, %182
  %185 = xor i32 %180, %183
  %186 = add nuw nsw i32 %184, %185
  %187 = icmp eq i32 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %44, align 1, !tbaa !2449
  %189 = sext i32 %162 to i64
  store i64 %189, i64* %RDX, align 8, !tbaa !2428
  %190 = shl nsw i64 %189, 2
  %191 = add i64 %190, %133
  %192 = add i64 %1185, 22
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %191 to i32*
  %194 = load i32, i32* %193, align 4
  %195 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %194, i32* %195, align 1, !tbaa !2452
  store float 0.000000e+00, float* %692, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %694, align 1, !tbaa !2452
  %196 = add i64 %1185, 26
  store i64 %196, i64* %PC, align 8
  %197 = load i64, i64* %132, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -12
  %200 = add i64 %1185, 29
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RCX, align 8, !tbaa !2428
  %204 = add i64 %198, -40
  %205 = add i64 %1185, 33
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = sext i32 %202 to i64
  %209 = sext i32 %207 to i64
  %210 = mul nsw i64 %209, %208
  %211 = trunc i64 %210 to i32
  %212 = and i64 %210, 4294967295
  store i64 %212, i64* %RCX, align 8, !tbaa !2428
  %213 = shl i64 %210, 32
  %214 = ashr exact i64 %213, 32
  %215 = icmp ne i64 %214, %210
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %20, align 1, !tbaa !2432
  %217 = and i32 %211, 255
  %218 = tail call i32 @llvm.ctpop.i32(i32 %217) #8
  %219 = trunc i32 %218 to i8
  %220 = and i8 %219, 1
  %221 = xor i8 %220, 1
  store i8 %221, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %222 = lshr i32 %211, 31
  %223 = trunc i32 %222 to i8
  store i8 %223, i8* %38, align 1, !tbaa !2448
  store i8 %216, i8* %44, align 1, !tbaa !2449
  %224 = add i64 %198, -52
  %225 = add i64 %1185, 36
  store i64 %225, i64* %PC, align 8
  %226 = trunc i64 %210 to i32
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, %226
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RCX, align 8, !tbaa !2428
  %231 = icmp ult i32 %229, %226
  %232 = icmp ult i32 %229, %228
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %20, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %27, align 1, !tbaa !2446
  %240 = xor i32 %228, %226
  %241 = xor i32 %240, %229
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  store i8 %244, i8* %32, align 1, !tbaa !2450
  %245 = icmp eq i32 %229, 0
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %35, align 1, !tbaa !2447
  %247 = lshr i32 %229, 31
  %248 = trunc i32 %247 to i8
  store i8 %248, i8* %38, align 1, !tbaa !2448
  %249 = lshr i32 %226, 31
  %250 = lshr i32 %228, 31
  %251 = xor i32 %247, %249
  %252 = xor i32 %247, %250
  %253 = add nuw nsw i32 %251, %252
  %254 = icmp eq i32 %253, 2
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %44, align 1, !tbaa !2449
  %256 = sext i32 %229 to i64
  store i64 %256, i64* %RDX, align 8, !tbaa !2428
  %257 = shl nsw i64 %256, 2
  %258 = add i64 %257, %197
  %259 = add i64 %1185, 44
  store i64 %259, i64* %PC, align 8
  %260 = load <2 x float>, <2 x float>* %691, align 1
  %261 = extractelement <2 x float> %260, i32 0
  %262 = inttoptr i64 %258 to float*
  store float %261, float* %262, align 4
  %263 = load i64, i64* %RBP, align 8
  %264 = add i64 %263, -36
  %265 = load i64, i64* %PC, align 8
  %266 = add i64 %265, 5
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %264 to i32*
  %268 = load i32, i32* %267, align 4
  %269 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %268, i32* %269, align 1, !tbaa !2452
  store float 0.000000e+00, float* %692, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %694, align 1, !tbaa !2452
  %270 = add i64 %263, -8
  %271 = add i64 %265, 9
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272, align 8
  store i64 %273, i64* %RAX, align 8, !tbaa !2428
  %274 = add i64 %263, -12
  %275 = add i64 %265, 12
  store i64 %275, i64* %PC, align 8
  %276 = inttoptr i64 %274 to i32*
  %277 = load i32, i32* %276, align 4
  %278 = zext i32 %277 to i64
  store i64 %278, i64* %RCX, align 8, !tbaa !2428
  %279 = add i64 %263, -40
  %280 = add i64 %265, 16
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %279 to i32*
  %282 = load i32, i32* %281, align 4
  %283 = sext i32 %277 to i64
  %284 = sext i32 %282 to i64
  %285 = mul nsw i64 %284, %283
  %286 = trunc i64 %285 to i32
  %287 = and i64 %285, 4294967295
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = shl i64 %285, 32
  %289 = ashr exact i64 %288, 32
  %290 = icmp ne i64 %289, %285
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %20, align 1, !tbaa !2432
  %292 = and i32 %286, 255
  %293 = tail call i32 @llvm.ctpop.i32(i32 %292) #8
  %294 = trunc i32 %293 to i8
  %295 = and i8 %294, 1
  %296 = xor i8 %295, 1
  store i8 %296, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %297 = lshr i32 %286, 31
  %298 = trunc i32 %297 to i8
  store i8 %298, i8* %38, align 1, !tbaa !2448
  store i8 %291, i8* %44, align 1, !tbaa !2449
  %299 = add i64 %263, -44
  %300 = add i64 %265, 19
  store i64 %300, i64* %PC, align 8
  %301 = trunc i64 %285 to i32
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = add i32 %303, %301
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %RCX, align 8, !tbaa !2428
  %306 = icmp ult i32 %304, %301
  %307 = icmp ult i32 %304, %303
  %308 = or i1 %306, %307
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %20, align 1, !tbaa !2432
  %310 = and i32 %304, 255
  %311 = tail call i32 @llvm.ctpop.i32(i32 %310) #8
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  store i8 %314, i8* %27, align 1, !tbaa !2446
  %315 = xor i32 %303, %301
  %316 = xor i32 %315, %304
  %317 = lshr i32 %316, 4
  %318 = trunc i32 %317 to i8
  %319 = and i8 %318, 1
  store i8 %319, i8* %32, align 1, !tbaa !2450
  %320 = icmp eq i32 %304, 0
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %35, align 1, !tbaa !2447
  %322 = lshr i32 %304, 31
  %323 = trunc i32 %322 to i8
  store i8 %323, i8* %38, align 1, !tbaa !2448
  %324 = lshr i32 %301, 31
  %325 = lshr i32 %303, 31
  %326 = xor i32 %322, %324
  %327 = xor i32 %322, %325
  %328 = add nuw nsw i32 %326, %327
  %329 = icmp eq i32 %328, 2
  %330 = zext i1 %329 to i8
  store i8 %330, i8* %44, align 1, !tbaa !2449
  %331 = sext i32 %304 to i64
  store i64 %331, i64* %RDX, align 8, !tbaa !2428
  %332 = shl nsw i64 %331, 2
  %333 = add i64 %332, %273
  %334 = add i64 %265, 27
  store i64 %334, i64* %PC, align 8
  %335 = load <2 x float>, <2 x float>* %691, align 1
  %336 = extractelement <2 x float> %335, i32 0
  %337 = inttoptr i64 %333 to float*
  store float %336, float* %337, align 4
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %block_401b9d

block_401a46:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_401a3b
  %338 = phi i64 [ %1520, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %653, %block_401a3b ]
  %339 = load i64, i64* %RBP, align 8
  %340 = add i64 %339, -52
  %341 = add i64 %338, 3
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = zext i32 %343 to i64
  store i64 %344, i64* %RAX, align 8, !tbaa !2428
  %345 = add i64 %339, -44
  %346 = add i64 %338, 6
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %345 to i32*
  %348 = load i32, i32* %347, align 4
  %349 = sub i32 %343, %348
  %350 = icmp ult i32 %343, %348
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %20, align 1, !tbaa !2432
  %352 = and i32 %349, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352) #8
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %27, align 1, !tbaa !2446
  %357 = xor i32 %348, %343
  %358 = xor i32 %357, %349
  %359 = lshr i32 %358, 4
  %360 = trunc i32 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %32, align 1, !tbaa !2450
  %362 = icmp eq i32 %349, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %35, align 1, !tbaa !2447
  %364 = lshr i32 %349, 31
  %365 = trunc i32 %364 to i8
  store i8 %365, i8* %38, align 1, !tbaa !2448
  %366 = lshr i32 %343, 31
  %367 = lshr i32 %348, 31
  %368 = xor i32 %367, %366
  %369 = xor i32 %364, %366
  %370 = add nuw nsw i32 %369, %368
  %371 = icmp eq i32 %370, 2
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %44, align 1, !tbaa !2449
  %.v69 = select i1 %362, i64 110, i64 12
  %373 = add i64 %338, %.v69
  store i64 %373, i64* %128, align 8, !tbaa !2428
  br i1 %362, label %block_401ab4, label %block_401a52

block_401a52:                                     ; preds = %block_401a46
  %374 = add i64 %339, -8
  %375 = add i64 %373, 4
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = add i64 %339, -12
  %379 = add i64 %373, 7
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %378 to i32*
  %381 = load i32, i32* %380, align 4
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %RCX, align 8, !tbaa !2428
  %383 = add i64 %373, 11
  store i64 %383, i64* %PC, align 8
  %384 = load i32, i32* %347, align 4
  %385 = sext i32 %381 to i64
  %386 = sext i32 %384 to i64
  %387 = mul nsw i64 %386, %385
  %388 = trunc i64 %387 to i32
  %389 = and i64 %387, 4294967295
  store i64 %389, i64* %RCX, align 8, !tbaa !2428
  %390 = shl i64 %387, 32
  %391 = ashr exact i64 %390, 32
  %392 = icmp ne i64 %391, %387
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %20, align 1, !tbaa !2432
  %394 = and i32 %388, 255
  %395 = tail call i32 @llvm.ctpop.i32(i32 %394) #8
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  %398 = xor i8 %397, 1
  store i8 %398, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %399 = lshr i32 %388, 31
  %400 = trunc i32 %399 to i8
  store i8 %400, i8* %38, align 1, !tbaa !2448
  store i8 %393, i8* %44, align 1, !tbaa !2449
  %401 = add i64 %373, 14
  store i64 %401, i64* %PC, align 8
  %402 = trunc i64 %387 to i32
  %403 = load i32, i32* %342, align 4
  %404 = add i32 %403, %402
  %405 = zext i32 %404 to i64
  store i64 %405, i64* %RCX, align 8, !tbaa !2428
  %406 = icmp ult i32 %404, %402
  %407 = icmp ult i32 %404, %403
  %408 = or i1 %406, %407
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %20, align 1, !tbaa !2432
  %410 = and i32 %404, 255
  %411 = tail call i32 @llvm.ctpop.i32(i32 %410) #8
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = xor i8 %413, 1
  store i8 %414, i8* %27, align 1, !tbaa !2446
  %415 = xor i32 %403, %402
  %416 = xor i32 %415, %404
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  store i8 %419, i8* %32, align 1, !tbaa !2450
  %420 = icmp eq i32 %404, 0
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %35, align 1, !tbaa !2447
  %422 = lshr i32 %404, 31
  %423 = trunc i32 %422 to i8
  store i8 %423, i8* %38, align 1, !tbaa !2448
  %424 = lshr i32 %402, 31
  %425 = lshr i32 %403, 31
  %426 = xor i32 %422, %424
  %427 = xor i32 %422, %425
  %428 = add nuw nsw i32 %426, %427
  %429 = icmp eq i32 %428, 2
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %44, align 1, !tbaa !2449
  %431 = sext i32 %404 to i64
  store i64 %431, i64* %RDX, align 8, !tbaa !2428
  %432 = shl nsw i64 %431, 2
  %433 = add i64 %432, %377
  %434 = add i64 %373, 22
  store i64 %434, i64* %PC, align 8
  %435 = inttoptr i64 %433 to i32*
  %436 = load i32, i32* %435, align 4
  %437 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %436, i32* %437, align 1, !tbaa !2452
  store float 0.000000e+00, float* %692, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %694, align 1, !tbaa !2452
  %438 = add i64 %339, -36
  %439 = add i64 %373, 27
  store i64 %439, i64* %PC, align 8
  %440 = load <2 x float>, <2 x float>* %691, align 1
  %441 = extractelement <2 x float> %440, i32 0
  %442 = inttoptr i64 %438 to float*
  store float %441, float* %442, align 4
  %443 = load i64, i64* %RBP, align 8
  %444 = add i64 %443, -8
  %445 = load i64, i64* %PC, align 8
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447, align 8
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = add i64 %443, -12
  %450 = add i64 %445, 7
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %449 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  store i64 %453, i64* %RCX, align 8, !tbaa !2428
  %454 = add i64 %443, -44
  %455 = add i64 %445, 11
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %454 to i32*
  %457 = load i32, i32* %456, align 4
  %458 = sext i32 %452 to i64
  %459 = sext i32 %457 to i64
  %460 = mul nsw i64 %459, %458
  %461 = trunc i64 %460 to i32
  %462 = and i64 %460, 4294967295
  store i64 %462, i64* %RCX, align 8, !tbaa !2428
  %463 = shl i64 %460, 32
  %464 = ashr exact i64 %463, 32
  %465 = icmp ne i64 %464, %460
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %20, align 1, !tbaa !2432
  %467 = and i32 %461, 255
  %468 = tail call i32 @llvm.ctpop.i32(i32 %467) #8
  %469 = trunc i32 %468 to i8
  %470 = and i8 %469, 1
  %471 = xor i8 %470, 1
  store i8 %471, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %472 = lshr i32 %461, 31
  %473 = trunc i32 %472 to i8
  store i8 %473, i8* %38, align 1, !tbaa !2448
  store i8 %466, i8* %44, align 1, !tbaa !2449
  %474 = add i64 %445, 14
  store i64 %474, i64* %PC, align 8
  %475 = trunc i64 %460 to i32
  %476 = load i32, i32* %456, align 4
  %477 = add i32 %476, %475
  %478 = zext i32 %477 to i64
  store i64 %478, i64* %RCX, align 8, !tbaa !2428
  %479 = icmp ult i32 %477, %475
  %480 = icmp ult i32 %477, %476
  %481 = or i1 %479, %480
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %20, align 1, !tbaa !2432
  %483 = and i32 %477, 255
  %484 = tail call i32 @llvm.ctpop.i32(i32 %483) #8
  %485 = trunc i32 %484 to i8
  %486 = and i8 %485, 1
  %487 = xor i8 %486, 1
  store i8 %487, i8* %27, align 1, !tbaa !2446
  %488 = xor i32 %476, %475
  %489 = xor i32 %488, %477
  %490 = lshr i32 %489, 4
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  store i8 %492, i8* %32, align 1, !tbaa !2450
  %493 = icmp eq i32 %477, 0
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %35, align 1, !tbaa !2447
  %495 = lshr i32 %477, 31
  %496 = trunc i32 %495 to i8
  store i8 %496, i8* %38, align 1, !tbaa !2448
  %497 = lshr i32 %475, 31
  %498 = lshr i32 %476, 31
  %499 = xor i32 %495, %497
  %500 = xor i32 %495, %498
  %501 = add nuw nsw i32 %499, %500
  %502 = icmp eq i32 %501, 2
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %44, align 1, !tbaa !2449
  %504 = sext i32 %477 to i64
  store i64 %504, i64* %RDX, align 8, !tbaa !2428
  %505 = shl nsw i64 %504, 2
  %506 = add i64 %505, %448
  %507 = add i64 %445, 22
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to i32*
  %509 = load i32, i32* %508, align 4
  %510 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %509, i32* %510, align 1, !tbaa !2452
  store float 0.000000e+00, float* %692, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %694, align 1, !tbaa !2452
  %511 = add i64 %445, 26
  store i64 %511, i64* %PC, align 8
  %512 = load i64, i64* %447, align 8
  store i64 %512, i64* %RAX, align 8, !tbaa !2428
  %513 = load i64, i64* %RBP, align 8
  %514 = add i64 %513, -12
  %515 = add i64 %445, 29
  store i64 %515, i64* %PC, align 8
  %516 = inttoptr i64 %514 to i32*
  %517 = load i32, i32* %516, align 4
  %518 = zext i32 %517 to i64
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = add i64 %513, -44
  %520 = add i64 %445, 33
  store i64 %520, i64* %PC, align 8
  %521 = inttoptr i64 %519 to i32*
  %522 = load i32, i32* %521, align 4
  %523 = sext i32 %517 to i64
  %524 = sext i32 %522 to i64
  %525 = mul nsw i64 %524, %523
  %526 = trunc i64 %525 to i32
  %527 = and i64 %525, 4294967295
  store i64 %527, i64* %RCX, align 8, !tbaa !2428
  %528 = shl i64 %525, 32
  %529 = ashr exact i64 %528, 32
  %530 = icmp ne i64 %529, %525
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %20, align 1, !tbaa !2432
  %532 = and i32 %526, 255
  %533 = tail call i32 @llvm.ctpop.i32(i32 %532) #8
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  %536 = xor i8 %535, 1
  store i8 %536, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %537 = lshr i32 %526, 31
  %538 = trunc i32 %537 to i8
  store i8 %538, i8* %38, align 1, !tbaa !2448
  store i8 %531, i8* %44, align 1, !tbaa !2449
  %539 = add i64 %513, -52
  %540 = add i64 %445, 36
  store i64 %540, i64* %PC, align 8
  %541 = trunc i64 %525 to i32
  %542 = inttoptr i64 %539 to i32*
  %543 = load i32, i32* %542, align 4
  %544 = add i32 %543, %541
  %545 = zext i32 %544 to i64
  store i64 %545, i64* %RCX, align 8, !tbaa !2428
  %546 = icmp ult i32 %544, %541
  %547 = icmp ult i32 %544, %543
  %548 = or i1 %546, %547
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %20, align 1, !tbaa !2432
  %550 = and i32 %544, 255
  %551 = tail call i32 @llvm.ctpop.i32(i32 %550) #8
  %552 = trunc i32 %551 to i8
  %553 = and i8 %552, 1
  %554 = xor i8 %553, 1
  store i8 %554, i8* %27, align 1, !tbaa !2446
  %555 = xor i32 %543, %541
  %556 = xor i32 %555, %544
  %557 = lshr i32 %556, 4
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  store i8 %559, i8* %32, align 1, !tbaa !2450
  %560 = icmp eq i32 %544, 0
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %35, align 1, !tbaa !2447
  %562 = lshr i32 %544, 31
  %563 = trunc i32 %562 to i8
  store i8 %563, i8* %38, align 1, !tbaa !2448
  %564 = lshr i32 %541, 31
  %565 = lshr i32 %543, 31
  %566 = xor i32 %562, %564
  %567 = xor i32 %562, %565
  %568 = add nuw nsw i32 %566, %567
  %569 = icmp eq i32 %568, 2
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %44, align 1, !tbaa !2449
  %571 = sext i32 %544 to i64
  store i64 %571, i64* %RDX, align 8, !tbaa !2428
  %572 = shl nsw i64 %571, 2
  %573 = add i64 %572, %512
  %574 = add i64 %445, 44
  store i64 %574, i64* %PC, align 8
  %575 = load <2 x float>, <2 x float>* %691, align 1
  %576 = extractelement <2 x float> %575, i32 0
  %577 = inttoptr i64 %573 to float*
  store float %576, float* %577, align 4
  %578 = load i64, i64* %RBP, align 8
  %579 = add i64 %578, -36
  %580 = load i64, i64* %PC, align 8
  %581 = add i64 %580, 5
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %579 to i32*
  %583 = load i32, i32* %582, align 4
  %584 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %583, i32* %584, align 1, !tbaa !2452
  store float 0.000000e+00, float* %692, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %694, align 1, !tbaa !2452
  %585 = add i64 %578, -8
  %586 = add i64 %580, 9
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %585 to i64*
  %588 = load i64, i64* %587, align 8
  store i64 %588, i64* %RAX, align 8, !tbaa !2428
  %589 = add i64 %578, -12
  %590 = add i64 %580, 12
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %589 to i32*
  %592 = load i32, i32* %591, align 4
  %593 = zext i32 %592 to i64
  store i64 %593, i64* %RCX, align 8, !tbaa !2428
  %594 = add i64 %578, -44
  %595 = add i64 %580, 16
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i32*
  %597 = load i32, i32* %596, align 4
  %598 = sext i32 %592 to i64
  %599 = sext i32 %597 to i64
  %600 = mul nsw i64 %599, %598
  %601 = trunc i64 %600 to i32
  %602 = and i64 %600, 4294967295
  store i64 %602, i64* %RCX, align 8, !tbaa !2428
  %603 = shl i64 %600, 32
  %604 = ashr exact i64 %603, 32
  %605 = icmp ne i64 %604, %600
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %20, align 1, !tbaa !2432
  %607 = and i32 %601, 255
  %608 = tail call i32 @llvm.ctpop.i32(i32 %607) #8
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = xor i8 %610, 1
  store i8 %611, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %612 = lshr i32 %601, 31
  %613 = trunc i32 %612 to i8
  store i8 %613, i8* %38, align 1, !tbaa !2448
  store i8 %606, i8* %44, align 1, !tbaa !2449
  %614 = add i64 %580, 19
  store i64 %614, i64* %PC, align 8
  %615 = trunc i64 %600 to i32
  %616 = load i32, i32* %596, align 4
  %617 = add i32 %616, %615
  %618 = zext i32 %617 to i64
  store i64 %618, i64* %RCX, align 8, !tbaa !2428
  %619 = icmp ult i32 %617, %615
  %620 = icmp ult i32 %617, %616
  %621 = or i1 %619, %620
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %20, align 1, !tbaa !2432
  %623 = and i32 %617, 255
  %624 = tail call i32 @llvm.ctpop.i32(i32 %623) #8
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = xor i8 %626, 1
  store i8 %627, i8* %27, align 1, !tbaa !2446
  %628 = xor i32 %616, %615
  %629 = xor i32 %628, %617
  %630 = lshr i32 %629, 4
  %631 = trunc i32 %630 to i8
  %632 = and i8 %631, 1
  store i8 %632, i8* %32, align 1, !tbaa !2450
  %633 = icmp eq i32 %617, 0
  %634 = zext i1 %633 to i8
  store i8 %634, i8* %35, align 1, !tbaa !2447
  %635 = lshr i32 %617, 31
  %636 = trunc i32 %635 to i8
  store i8 %636, i8* %38, align 1, !tbaa !2448
  %637 = lshr i32 %615, 31
  %638 = lshr i32 %616, 31
  %639 = xor i32 %635, %637
  %640 = xor i32 %635, %638
  %641 = add nuw nsw i32 %639, %640
  %642 = icmp eq i32 %641, 2
  %643 = zext i1 %642 to i8
  store i8 %643, i8* %44, align 1, !tbaa !2449
  %644 = sext i32 %617 to i64
  store i64 %644, i64* %RDX, align 8, !tbaa !2428
  %645 = shl nsw i64 %644, 2
  %646 = add i64 %645, %588
  %647 = add i64 %580, 27
  store i64 %647, i64* %PC, align 8
  %648 = load <2 x float>, <2 x float>* %691, align 1
  %649 = extractelement <2 x float> %648, i32 0
  %650 = inttoptr i64 %646 to float*
  store float %649, float* %650, align 4
  %.pre3 = load i64, i64* %PC, align 8
  %.pre4 = load i64, i64* %RBP, align 8
  br label %block_401ab4

block_401a3b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %651 = load i8, i8* %27, align 1, !tbaa !2446
  %652 = icmp ne i8 %651, 0
  %.v68 = select i1 %652, i64 11, i64 6
  %653 = add i64 %1520, %.v68
  store i64 %653, i64* %128, align 8, !tbaa !2428
  %654 = icmp eq i8 %651, 1
  br i1 %654, label %block_401a46, label %block_401a41

block_401a41:                                     ; preds = %block_401a3b
  %655 = load i64, i64* %RBP, align 8
  %656 = add i64 %655, -44
  %657 = add i64 %653, 465
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %656 to i32*
  %659 = load i32, i32* %658, align 4
  %660 = zext i32 %659 to i64
  store i64 %660, i64* %RAX, align 8, !tbaa !2428
  %661 = add i64 %655, -32
  %662 = add i64 %653, 469
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i64*
  %664 = load i64, i64* %663, align 8
  store i64 %664, i64* %RCX, align 8, !tbaa !2428
  %665 = add i64 %653, 471
  store i64 %665, i64* %PC, align 8
  %666 = inttoptr i64 %664 to i32*
  store i32 %659, i32* %666, align 4
  %.pre8 = load i64, i64* %PC, align 8
  %.pre9 = load i64, i64* %RBP, align 8
  br label %block_401c18

block_4019b7:                                     ; preds = %block_401980
  %667 = add i64 %112, -44
  %668 = add i64 %129, 7
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i32*
  store i32 0, i32* %669, align 4
  %670 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %672 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %673 = getelementptr inbounds i8, i8* %670, i64 4
  %674 = bitcast i8* %673 to i32*
  %675 = bitcast i64* %671 to i32*
  %676 = getelementptr inbounds i8, i8* %670, i64 12
  %677 = bitcast i8* %676 to i32*
  %678 = bitcast %union.VectorReg* %9 to i8*
  %679 = getelementptr inbounds i8, i8* %678, i64 4
  %680 = bitcast i8* %679 to float*
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %682 = bitcast i64* %681 to float*
  %683 = getelementptr inbounds i8, i8* %678, i64 12
  %684 = bitcast i8* %683 to float*
  %685 = bitcast %union.VectorReg* %9 to <2 x float>*
  %686 = bitcast %union.VectorReg* %9 to double*
  %687 = bitcast [32 x %union.VectorReg]* %8 to double*
  %688 = bitcast [32 x %union.VectorReg]* %8 to double*
  %689 = bitcast i64* %671 to double*
  %690 = bitcast [32 x %union.VectorReg]* %8 to float*
  %691 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %692 = bitcast i8* %673 to float*
  %693 = bitcast i64* %671 to float*
  %694 = bitcast i8* %676 to float*
  %695 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_4019be

block_401ab4:                                     ; preds = %block_401a52, %block_401a46
  %696 = phi i64 [ %.pre4, %block_401a52 ], [ %339, %block_401a46 ]
  %697 = phi i64 [ %.pre3, %block_401a52 ], [ %373, %block_401a46 ]
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %698 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 72) to i64*), align 8
  %699 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %698, i64* %699, align 1, !tbaa !2454
  store double 0.000000e+00, double* %689, align 1, !tbaa !2454
  %700 = add i64 %696, -8
  %701 = add i64 %697, 17
  store i64 %701, i64* %PC, align 8
  %702 = inttoptr i64 %700 to i64*
  %703 = load i64, i64* %702, align 8
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = add i64 %696, -12
  %705 = add i64 %697, 20
  store i64 %705, i64* %PC, align 8
  %706 = inttoptr i64 %704 to i32*
  %707 = load i32, i32* %706, align 4
  %708 = zext i32 %707 to i64
  store i64 %708, i64* %RCX, align 8, !tbaa !2428
  %709 = add i64 %696, -44
  %710 = add i64 %697, 24
  store i64 %710, i64* %PC, align 8
  %711 = inttoptr i64 %709 to i32*
  %712 = load i32, i32* %711, align 4
  %713 = sext i32 %707 to i64
  %714 = sext i32 %712 to i64
  %715 = mul nsw i64 %714, %713
  %716 = trunc i64 %715 to i32
  %717 = and i64 %715, 4294967295
  store i64 %717, i64* %RCX, align 8, !tbaa !2428
  %718 = shl i64 %715, 32
  %719 = ashr exact i64 %718, 32
  %720 = icmp ne i64 %719, %715
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %20, align 1, !tbaa !2432
  %722 = and i32 %716, 255
  %723 = tail call i32 @llvm.ctpop.i32(i32 %722) #8
  %724 = trunc i32 %723 to i8
  %725 = and i8 %724, 1
  %726 = xor i8 %725, 1
  store i8 %726, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %727 = lshr i32 %716, 31
  %728 = trunc i32 %727 to i8
  store i8 %728, i8* %38, align 1, !tbaa !2448
  store i8 %721, i8* %44, align 1, !tbaa !2449
  %729 = add i64 %697, 27
  store i64 %729, i64* %PC, align 8
  %730 = trunc i64 %715 to i32
  %731 = load i32, i32* %711, align 4
  %732 = add i32 %731, %730
  %733 = zext i32 %732 to i64
  store i64 %733, i64* %RCX, align 8, !tbaa !2428
  %734 = icmp ult i32 %732, %730
  %735 = icmp ult i32 %732, %731
  %736 = or i1 %734, %735
  %737 = zext i1 %736 to i8
  store i8 %737, i8* %20, align 1, !tbaa !2432
  %738 = and i32 %732, 255
  %739 = tail call i32 @llvm.ctpop.i32(i32 %738) #8
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  store i8 %742, i8* %27, align 1, !tbaa !2446
  %743 = xor i32 %731, %730
  %744 = xor i32 %743, %732
  %745 = lshr i32 %744, 4
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  store i8 %747, i8* %32, align 1, !tbaa !2450
  %748 = icmp eq i32 %732, 0
  %749 = zext i1 %748 to i8
  store i8 %749, i8* %35, align 1, !tbaa !2447
  %750 = lshr i32 %732, 31
  %751 = trunc i32 %750 to i8
  store i8 %751, i8* %38, align 1, !tbaa !2448
  %752 = lshr i32 %730, 31
  %753 = lshr i32 %731, 31
  %754 = xor i32 %750, %752
  %755 = xor i32 %750, %753
  %756 = add nuw nsw i32 %754, %755
  %757 = icmp eq i32 %756, 2
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %44, align 1, !tbaa !2449
  %759 = sext i32 %732 to i64
  store i64 %759, i64* %RSI, align 8, !tbaa !2428
  %760 = shl nsw i64 %759, 2
  %761 = add i64 %760, %703
  %762 = add i64 %697, 35
  store i64 %762, i64* %PC, align 8
  %763 = inttoptr i64 %761 to i32*
  %764 = load i32, i32* %763, align 4
  %765 = bitcast %union.VectorReg* %9 to i32*
  store i32 %764, i32* %765, align 1, !tbaa !2452
  store float 0.000000e+00, float* %680, align 1, !tbaa !2452
  store float 0.000000e+00, float* %682, align 1, !tbaa !2452
  store float 0.000000e+00, float* %684, align 1, !tbaa !2452
  %766 = load <2 x float>, <2 x float>* %685, align 1
  %767 = extractelement <2 x float> %766, i32 0
  %768 = fpext float %767 to double
  store double %768, double* %686, align 1, !tbaa !2454
  %769 = load double, double* %688, align 1
  %770 = bitcast i64* %671 to <2 x i32>*
  %771 = load <2 x i32>, <2 x i32>* %770, align 1
  %772 = fdiv double %769, %768
  %773 = bitcast double %772 to <2 x i32>
  %774 = fptrunc double %772 to float
  store float %774, float* %690, align 1, !tbaa !2452
  %775 = extractelement <2 x i32> %773, i32 1
  store i32 %775, i32* %674, align 1, !tbaa !2452
  %776 = extractelement <2 x i32> %771, i32 0
  store i32 %776, i32* %675, align 1, !tbaa !2452
  %777 = extractelement <2 x i32> %771, i32 1
  store i32 %777, i32* %677, align 1, !tbaa !2452
  %778 = load i64, i64* %RBP, align 8
  %779 = add i64 %778, -36
  %780 = add i64 %697, 52
  store i64 %780, i64* %PC, align 8
  %781 = load <2 x float>, <2 x float>* %691, align 1
  %782 = extractelement <2 x float> %781, i32 0
  %783 = inttoptr i64 %779 to float*
  store float %782, float* %783, align 4
  %784 = load i64, i64* %RBP, align 8
  %785 = add i64 %784, -16
  %786 = load i64, i64* %PC, align 8
  %787 = add i64 %786, 3
  store i64 %787, i64* %PC, align 8
  %788 = inttoptr i64 %785 to i32*
  %789 = load i32, i32* %788, align 4
  %790 = zext i32 %789 to i64
  store i64 %790, i64* %RCX, align 8, !tbaa !2428
  %791 = add i64 %784, -44
  %792 = add i64 %786, 6
  store i64 %792, i64* %PC, align 8
  %793 = inttoptr i64 %791 to i32*
  %794 = load i32, i32* %793, align 4
  %795 = add i32 %794, 1
  %796 = zext i32 %795 to i64
  store i64 %796, i64* %RDI, align 8, !tbaa !2428
  %797 = lshr i32 %795, 31
  %798 = sub i32 %789, %795
  %799 = zext i32 %798 to i64
  store i64 %799, i64* %RCX, align 8, !tbaa !2428
  %800 = icmp ult i32 %789, %795
  %801 = zext i1 %800 to i8
  store i8 %801, i8* %20, align 1, !tbaa !2432
  %802 = and i32 %798, 255
  %803 = tail call i32 @llvm.ctpop.i32(i32 %802) #8
  %804 = trunc i32 %803 to i8
  %805 = and i8 %804, 1
  %806 = xor i8 %805, 1
  store i8 %806, i8* %27, align 1, !tbaa !2446
  %807 = xor i32 %795, %789
  %808 = xor i32 %807, %798
  %809 = lshr i32 %808, 4
  %810 = trunc i32 %809 to i8
  %811 = and i8 %810, 1
  store i8 %811, i8* %32, align 1, !tbaa !2450
  %812 = icmp eq i32 %798, 0
  %813 = zext i1 %812 to i8
  store i8 %813, i8* %35, align 1, !tbaa !2447
  %814 = lshr i32 %798, 31
  %815 = trunc i32 %814 to i8
  store i8 %815, i8* %38, align 1, !tbaa !2448
  %816 = lshr i32 %789, 31
  %817 = xor i32 %797, %816
  %818 = xor i32 %814, %816
  %819 = add nuw nsw i32 %818, %817
  %820 = icmp eq i32 %819, 2
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %44, align 1, !tbaa !2449
  %822 = add i64 %784, -36
  %823 = add i64 %786, 16
  store i64 %823, i64* %PC, align 8
  %824 = inttoptr i64 %822 to i32*
  %825 = load i32, i32* %824, align 4
  %826 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %825, i32* %826, align 1, !tbaa !2452
  store float 0.000000e+00, float* %692, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %694, align 1, !tbaa !2452
  %827 = add i64 %784, -8
  %828 = add i64 %786, 20
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %827 to i64*
  %830 = load i64, i64* %829, align 8
  store i64 %830, i64* %RAX, align 8, !tbaa !2428
  %831 = load i64, i64* %RBP, align 8
  %832 = add i64 %831, -12
  %833 = add i64 %786, 23
  store i64 %833, i64* %PC, align 8
  %834 = inttoptr i64 %832 to i32*
  %835 = load i32, i32* %834, align 4
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RDI, align 8, !tbaa !2428
  %837 = add i64 %831, -44
  %838 = add i64 %786, 27
  store i64 %838, i64* %PC, align 8
  %839 = inttoptr i64 %837 to i32*
  %840 = load i32, i32* %839, align 4
  %841 = sext i32 %835 to i64
  %842 = sext i32 %840 to i64
  %843 = mul nsw i64 %842, %841
  %844 = trunc i64 %843 to i32
  %845 = and i64 %843, 4294967295
  store i64 %845, i64* %RDI, align 8, !tbaa !2428
  %846 = shl i64 %843, 32
  %847 = ashr exact i64 %846, 32
  %848 = icmp ne i64 %847, %843
  %849 = zext i1 %848 to i8
  store i8 %849, i8* %20, align 1, !tbaa !2432
  %850 = and i32 %844, 255
  %851 = tail call i32 @llvm.ctpop.i32(i32 %850) #8
  %852 = trunc i32 %851 to i8
  %853 = and i8 %852, 1
  %854 = xor i8 %853, 1
  store i8 %854, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %855 = lshr i32 %844, 31
  %856 = trunc i32 %855 to i8
  store i8 %856, i8* %38, align 1, !tbaa !2448
  store i8 %849, i8* %44, align 1, !tbaa !2449
  %857 = add i64 %786, 30
  store i64 %857, i64* %PC, align 8
  %858 = trunc i64 %843 to i32
  %859 = load i32, i32* %839, align 4
  %860 = add i32 %859, %858
  %861 = add i32 %860, 1
  %862 = sext i32 %861 to i64
  %863 = shl nsw i64 %862, 2
  %864 = lshr i64 %862, 61
  %865 = and i64 %864, 1
  %866 = load i64, i64* %RAX, align 8
  %867 = add i64 %863, %866
  store i64 %867, i64* %RAX, align 8, !tbaa !2428
  %868 = icmp ult i64 %867, %866
  %869 = icmp ult i64 %867, %863
  %870 = or i1 %868, %869
  %871 = zext i1 %870 to i8
  store i8 %871, i8* %20, align 1, !tbaa !2432
  %872 = trunc i64 %867 to i32
  %873 = and i32 %872, 255
  %874 = tail call i32 @llvm.ctpop.i32(i32 %873) #8
  %875 = trunc i32 %874 to i8
  %876 = and i8 %875, 1
  %877 = xor i8 %876, 1
  store i8 %877, i8* %27, align 1, !tbaa !2446
  %878 = xor i64 %863, %866
  %879 = xor i64 %878, %867
  %880 = lshr i64 %879, 4
  %881 = trunc i64 %880 to i8
  %882 = and i8 %881, 1
  store i8 %882, i8* %32, align 1, !tbaa !2450
  %883 = icmp eq i64 %867, 0
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %35, align 1, !tbaa !2447
  %885 = lshr i64 %867, 63
  %886 = trunc i64 %885 to i8
  store i8 %886, i8* %38, align 1, !tbaa !2448
  %887 = lshr i64 %866, 63
  %888 = xor i64 %885, %887
  %889 = xor i64 %885, %865
  %890 = add nuw nsw i64 %888, %889
  %891 = icmp eq i64 %890, 2
  %892 = zext i1 %891 to i8
  store i8 %892, i8* %44, align 1, !tbaa !2449
  %893 = load i32, i32* %ECX, align 4
  %894 = zext i32 %893 to i64
  store i64 %894, i64* %RDI, align 8, !tbaa !2428
  store i64 %867, i64* %RSI, align 8, !tbaa !2428
  %895 = add i64 %786, 4744
  %896 = add i64 %786, 53
  %897 = load i64, i64* %12, align 8, !tbaa !2428
  %898 = add i64 %897, -8
  %899 = inttoptr i64 %898 to i64*
  store i64 %896, i64* %899, align 8
  store i64 %898, i64* %12, align 8, !tbaa !2428
  store i64 %895, i64* %128, align 8, !tbaa !2428
  %900 = tail call %struct.Memory* @sub_402d70_dscal_renamed_(%struct.State* nonnull %0, i64 %895, %struct.Memory* %1518)
  %901 = load i64, i64* %RBP, align 8
  %902 = add i64 %901, -48
  %903 = load i64, i64* %PC, align 8
  %904 = add i64 %903, 3
  store i64 %904, i64* %PC, align 8
  %905 = inttoptr i64 %902 to i32*
  %906 = load i32, i32* %905, align 4
  %907 = zext i32 %906 to i64
  store i64 %907, i64* %RCX, align 8, !tbaa !2428
  %908 = add i64 %901, -40
  %909 = add i64 %903, 6
  store i64 %909, i64* %PC, align 8
  %910 = inttoptr i64 %908 to i32*
  store i32 %906, i32* %910, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401b23

block_401c30:                                     ; preds = %block_401980.block_401c30_crit_edge, %block_401c2b
  %.pre-phi65 = phi double* [ %.pre64, %block_401980.block_401c30_crit_edge ], [ %687, %block_401c2b ]
  %.pre-phi61 = phi double* [ %.pre60, %block_401980.block_401c30_crit_edge ], [ %686, %block_401c2b ]
  %.pre-phi59 = phi <2 x float>* [ %.pre58, %block_401980.block_401c30_crit_edge ], [ %685, %block_401c2b ]
  %.pre-phi55 = phi float* [ %.pre54, %block_401980.block_401c30_crit_edge ], [ %684, %block_401c2b ]
  %.pre-phi51 = phi float* [ %.pre50, %block_401980.block_401c30_crit_edge ], [ %682, %block_401c2b ]
  %.pre-phi47 = phi float* [ %.pre46, %block_401980.block_401c30_crit_edge ], [ %680, %block_401c2b ]
  %.pre-phi39 = phi i32* [ %.pre38, %block_401980.block_401c30_crit_edge ], [ %677, %block_401c2b ]
  %.pre-phi35 = phi i32* [ %.pre34, %block_401980.block_401c30_crit_edge ], [ %675, %block_401c2b ]
  %.pre-phi33 = phi i32* [ %.pre32, %block_401980.block_401c30_crit_edge ], [ %674, %block_401c2b ]
  %.pre-phi29 = phi i32* [ %.pre28, %block_401980.block_401c30_crit_edge ], [ %672, %block_401c2b ]
  %911 = phi i64 [ %112, %block_401980.block_401c30_crit_edge ], [ %1187, %block_401c2b ]
  %912 = phi i64 [ %129, %block_401980.block_401c30_crit_edge ], [ %1224, %block_401c2b ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_401980.block_401c30_crit_edge ], [ %MEMORY.3, %block_401c2b ]
  store i32 0, i32* %.pre-phi29, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi33, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi35, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi39, align 1, !tbaa !2451
  %913 = add i64 %911, -16
  %914 = add i64 %912, 6
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to i32*
  %916 = load i32, i32* %915, align 4
  %917 = add i32 %916, -1
  %918 = zext i32 %917 to i64
  store i64 %918, i64* %RAX, align 8, !tbaa !2428
  %919 = icmp eq i32 %916, 0
  %920 = zext i1 %919 to i8
  store i8 %920, i8* %20, align 1, !tbaa !2432
  %921 = and i32 %917, 255
  %922 = tail call i32 @llvm.ctpop.i32(i32 %921) #8
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  store i8 %925, i8* %27, align 1, !tbaa !2446
  %926 = xor i32 %916, %917
  %927 = lshr i32 %926, 4
  %928 = trunc i32 %927 to i8
  %929 = and i8 %928, 1
  store i8 %929, i8* %32, align 1, !tbaa !2450
  %930 = icmp eq i32 %917, 0
  %931 = zext i1 %930 to i8
  store i8 %931, i8* %35, align 1, !tbaa !2447
  %932 = lshr i32 %917, 31
  %933 = trunc i32 %932 to i8
  store i8 %933, i8* %38, align 1, !tbaa !2448
  %934 = lshr i32 %916, 31
  %935 = xor i32 %932, %934
  %936 = add nuw nsw i32 %935, %934
  %937 = icmp eq i32 %936, 2
  %938 = zext i1 %937 to i8
  store i8 %938, i8* %44, align 1, !tbaa !2449
  %939 = add i64 %911, -24
  %940 = add i64 %912, 13
  store i64 %940, i64* %PC, align 8
  %941 = inttoptr i64 %939 to i64*
  %942 = load i64, i64* %941, align 8
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %943 = add i64 %912, 16
  store i64 %943, i64* %PC, align 8
  %944 = load i32, i32* %915, align 4
  %945 = add i32 %944, -1
  %946 = zext i32 %945 to i64
  store i64 %946, i64* %RDX, align 8, !tbaa !2428
  %947 = icmp eq i32 %944, 0
  %948 = zext i1 %947 to i8
  store i8 %948, i8* %20, align 1, !tbaa !2432
  %949 = and i32 %945, 255
  %950 = tail call i32 @llvm.ctpop.i32(i32 %949) #8
  %951 = trunc i32 %950 to i8
  %952 = and i8 %951, 1
  %953 = xor i8 %952, 1
  store i8 %953, i8* %27, align 1, !tbaa !2446
  %954 = xor i32 %944, %945
  %955 = lshr i32 %954, 4
  %956 = trunc i32 %955 to i8
  %957 = and i8 %956, 1
  store i8 %957, i8* %32, align 1, !tbaa !2450
  %958 = icmp eq i32 %945, 0
  %959 = zext i1 %958 to i8
  store i8 %959, i8* %35, align 1, !tbaa !2447
  %960 = lshr i32 %945, 31
  %961 = trunc i32 %960 to i8
  store i8 %961, i8* %38, align 1, !tbaa !2448
  %962 = lshr i32 %944, 31
  %963 = xor i32 %960, %962
  %964 = add nuw nsw i32 %963, %962
  %965 = icmp eq i32 %964, 2
  %966 = zext i1 %965 to i8
  store i8 %966, i8* %44, align 1, !tbaa !2449
  %967 = sext i32 %945 to i64
  store i64 %967, i64* %RSI, align 8, !tbaa !2428
  %968 = shl nsw i64 %967, 2
  %969 = add i64 %968, %942
  %970 = add i64 %912, 25
  store i64 %970, i64* %PC, align 8
  %971 = inttoptr i64 %969 to i32*
  store i32 %917, i32* %971, align 4
  %972 = load i64, i64* %RBP, align 8
  %973 = add i64 %972, -8
  %974 = load i64, i64* %PC, align 8
  %975 = add i64 %974, 4
  store i64 %975, i64* %PC, align 8
  %976 = inttoptr i64 %973 to i64*
  %977 = load i64, i64* %976, align 8
  store i64 %977, i64* %RCX, align 8, !tbaa !2428
  %978 = add i64 %972, -12
  %979 = add i64 %974, 7
  store i64 %979, i64* %PC, align 8
  %980 = inttoptr i64 %978 to i32*
  %981 = load i32, i32* %980, align 4
  %982 = zext i32 %981 to i64
  store i64 %982, i64* %RAX, align 8, !tbaa !2428
  %983 = add i64 %972, -16
  %984 = add i64 %974, 10
  store i64 %984, i64* %PC, align 8
  %985 = inttoptr i64 %983 to i32*
  %986 = load i32, i32* %985, align 4
  %987 = add i32 %986, -1
  %988 = zext i32 %987 to i64
  store i64 %988, i64* %RDX, align 8, !tbaa !2428
  %989 = sext i32 %981 to i64
  %990 = sext i32 %987 to i64
  %991 = mul nsw i64 %990, %989
  %992 = trunc i64 %991 to i32
  %993 = and i64 %991, 4294967295
  store i64 %993, i64* %RAX, align 8, !tbaa !2428
  %994 = shl i64 %991, 32
  %995 = ashr exact i64 %994, 32
  %996 = icmp ne i64 %995, %991
  %997 = zext i1 %996 to i8
  store i8 %997, i8* %20, align 1, !tbaa !2432
  %998 = and i32 %992, 255
  %999 = tail call i32 @llvm.ctpop.i32(i32 %998) #8
  %1000 = trunc i32 %999 to i8
  %1001 = and i8 %1000, 1
  %1002 = xor i8 %1001, 1
  store i8 %1002, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %1003 = lshr i32 %992, 31
  %1004 = trunc i32 %1003 to i8
  store i8 %1004, i8* %38, align 1, !tbaa !2448
  store i8 %997, i8* %44, align 1, !tbaa !2449
  %1005 = add i64 %974, 19
  store i64 %1005, i64* %PC, align 8
  %1006 = load i32, i32* %985, align 4
  %1007 = add i32 %1006, -1
  %1008 = zext i32 %1007 to i64
  store i64 %1008, i64* %RDX, align 8, !tbaa !2428
  %1009 = lshr i32 %1007, 31
  %1010 = trunc i64 %991 to i32
  %1011 = add i32 %1007, %1010
  %1012 = zext i32 %1011 to i64
  store i64 %1012, i64* %RAX, align 8, !tbaa !2428
  %1013 = icmp ult i32 %1011, %1010
  %1014 = icmp ult i32 %1011, %1007
  %1015 = or i1 %1013, %1014
  %1016 = zext i1 %1015 to i8
  store i8 %1016, i8* %20, align 1, !tbaa !2432
  %1017 = and i32 %1011, 255
  %1018 = tail call i32 @llvm.ctpop.i32(i32 %1017) #8
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = xor i8 %1020, 1
  store i8 %1021, i8* %27, align 1, !tbaa !2446
  %1022 = xor i64 %1008, %991
  %1023 = trunc i64 %1022 to i32
  %1024 = xor i32 %1023, %1011
  %1025 = lshr i32 %1024, 4
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  store i8 %1027, i8* %32, align 1, !tbaa !2450
  %1028 = icmp eq i32 %1011, 0
  %1029 = zext i1 %1028 to i8
  store i8 %1029, i8* %35, align 1, !tbaa !2447
  %1030 = lshr i32 %1011, 31
  %1031 = trunc i32 %1030 to i8
  store i8 %1031, i8* %38, align 1, !tbaa !2448
  %1032 = lshr i32 %1010, 31
  %1033 = xor i32 %1030, %1032
  %1034 = xor i32 %1030, %1009
  %1035 = add nuw nsw i32 %1033, %1034
  %1036 = icmp eq i32 %1035, 2
  %1037 = zext i1 %1036 to i8
  store i8 %1037, i8* %44, align 1, !tbaa !2449
  %1038 = sext i32 %1011 to i64
  store i64 %1038, i64* %RSI, align 8, !tbaa !2428
  %1039 = load i64, i64* %RCX, align 8
  %1040 = shl nsw i64 %1038, 2
  %1041 = add i64 %1040, %1039
  %1042 = add i64 %974, 32
  store i64 %1042, i64* %PC, align 8
  %1043 = inttoptr i64 %1041 to i32*
  %1044 = load i32, i32* %1043, align 4
  %1045 = bitcast %union.VectorReg* %9 to i32*
  store i32 %1044, i32* %1045, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi47, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi51, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi55, align 1, !tbaa !2452
  %1046 = load <2 x float>, <2 x float>* %.pre-phi59, align 1
  %1047 = extractelement <2 x float> %1046, i32 0
  %1048 = fpext float %1047 to double
  store double %1048, double* %.pre-phi61, align 1, !tbaa !2454
  %1049 = add i64 %974, 40
  store i64 %1049, i64* %PC, align 8
  %1050 = load double, double* %.pre-phi65, align 1
  %1051 = fcmp uno double %1048, %1050
  br i1 %1051, label %1052, label %1062

; <label>:1052:                                   ; preds = %block_401c30
  %1053 = fadd double %1048, %1050
  %1054 = bitcast double %1053 to i64
  %1055 = and i64 %1054, 9221120237041090560
  %1056 = icmp eq i64 %1055, 9218868437227405312
  %1057 = and i64 %1054, 2251799813685247
  %1058 = icmp ne i64 %1057, 0
  %1059 = and i1 %1056, %1058
  br i1 %1059, label %1060, label %1068

; <label>:1060:                                   ; preds = %1052
  %1061 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1049, %struct.Memory* %MEMORY.2) #9
  %.pre10 = load i64, i64* %PC, align 8
  %.pre11 = load i8, i8* %35, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:1062:                                   ; preds = %block_401c30
  %1063 = fcmp ogt double %1048, %1050
  br i1 %1063, label %1068, label %1064

; <label>:1064:                                   ; preds = %1062
  %1065 = fcmp olt double %1048, %1050
  br i1 %1065, label %1068, label %1066

; <label>:1066:                                   ; preds = %1064
  %1067 = fcmp oeq double %1048, %1050
  br i1 %1067, label %1068, label %1072

; <label>:1068:                                   ; preds = %1066, %1064, %1062, %1052
  %1069 = phi i8 [ 0, %1062 ], [ 0, %1064 ], [ 1, %1066 ], [ 1, %1052 ]
  %1070 = phi i8 [ 0, %1062 ], [ 0, %1064 ], [ 0, %1066 ], [ 1, %1052 ]
  %1071 = phi i8 [ 0, %1062 ], [ 1, %1064 ], [ 0, %1066 ], [ 1, %1052 ]
  store i8 %1069, i8* %35, align 1, !tbaa !2456
  store i8 %1070, i8* %27, align 1, !tbaa !2456
  store i8 %1071, i8* %20, align 1, !tbaa !2456
  br label %1072

; <label>:1072:                                   ; preds = %1068, %1066
  %1073 = phi i8 [ %1069, %1068 ], [ %1029, %1066 ]
  store i8 0, i8* %44, align 1, !tbaa !2456
  store i8 0, i8* %38, align 1, !tbaa !2456
  store i8 0, i8* %32, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %1072, %1060
  %1074 = phi i8 [ %.pre11, %1060 ], [ %1073, %1072 ]
  %1075 = phi i64 [ %.pre10, %1060 ], [ %1049, %1072 ]
  %1076 = phi %struct.Memory* [ %1061, %1060 ], [ %MEMORY.2, %1072 ]
  %1077 = icmp eq i8 %1074, 0
  %.v72 = select i1 %1077, i64 24, i64 6
  %1078 = add i64 %1075, %.v72
  store i64 %1078, i64* %128, align 8, !tbaa !2428
  br i1 %1077, label %block_401c89, label %block_401c77

block_401b2f:                                     ; preds = %block_401b23
  %1079 = add i64 %1522, -8
  %1080 = add i64 %1558, 4
  store i64 %1080, i64* %PC, align 8
  %1081 = inttoptr i64 %1079 to i64*
  %1082 = load i64, i64* %1081, align 8
  store i64 %1082, i64* %RAX, align 8, !tbaa !2428
  %1083 = add i64 %1522, -12
  %1084 = add i64 %1558, 7
  store i64 %1084, i64* %PC, align 8
  %1085 = inttoptr i64 %1083 to i32*
  %1086 = load i32, i32* %1085, align 4
  %1087 = zext i32 %1086 to i64
  store i64 %1087, i64* %RCX, align 8, !tbaa !2428
  %1088 = add i64 %1558, 11
  store i64 %1088, i64* %PC, align 8
  %1089 = load i32, i32* %1525, align 4
  %1090 = sext i32 %1086 to i64
  %1091 = sext i32 %1089 to i64
  %1092 = mul nsw i64 %1091, %1090
  %1093 = trunc i64 %1092 to i32
  %1094 = and i64 %1092, 4294967295
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1095 = shl i64 %1092, 32
  %1096 = ashr exact i64 %1095, 32
  %1097 = icmp ne i64 %1096, %1092
  %1098 = zext i1 %1097 to i8
  store i8 %1098, i8* %20, align 1, !tbaa !2432
  %1099 = and i32 %1093, 255
  %1100 = tail call i32 @llvm.ctpop.i32(i32 %1099) #8
  %1101 = trunc i32 %1100 to i8
  %1102 = and i8 %1101, 1
  %1103 = xor i8 %1102, 1
  store i8 %1103, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %1104 = lshr i32 %1093, 31
  %1105 = trunc i32 %1104 to i8
  store i8 %1105, i8* %38, align 1, !tbaa !2448
  store i8 %1098, i8* %44, align 1, !tbaa !2449
  %1106 = add i64 %1522, -52
  %1107 = add i64 %1558, 14
  store i64 %1107, i64* %PC, align 8
  %1108 = trunc i64 %1092 to i32
  %1109 = inttoptr i64 %1106 to i32*
  %1110 = load i32, i32* %1109, align 4
  %1111 = add i32 %1110, %1108
  %1112 = zext i32 %1111 to i64
  store i64 %1112, i64* %RCX, align 8, !tbaa !2428
  %1113 = icmp ult i32 %1111, %1108
  %1114 = icmp ult i32 %1111, %1110
  %1115 = or i1 %1113, %1114
  %1116 = zext i1 %1115 to i8
  store i8 %1116, i8* %20, align 1, !tbaa !2432
  %1117 = and i32 %1111, 255
  %1118 = tail call i32 @llvm.ctpop.i32(i32 %1117) #8
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  store i8 %1121, i8* %27, align 1, !tbaa !2446
  %1122 = xor i32 %1110, %1108
  %1123 = xor i32 %1122, %1111
  %1124 = lshr i32 %1123, 4
  %1125 = trunc i32 %1124 to i8
  %1126 = and i8 %1125, 1
  store i8 %1126, i8* %32, align 1, !tbaa !2450
  %1127 = icmp eq i32 %1111, 0
  %1128 = zext i1 %1127 to i8
  store i8 %1128, i8* %35, align 1, !tbaa !2447
  %1129 = lshr i32 %1111, 31
  %1130 = trunc i32 %1129 to i8
  store i8 %1130, i8* %38, align 1, !tbaa !2448
  %1131 = lshr i32 %1108, 31
  %1132 = lshr i32 %1110, 31
  %1133 = xor i32 %1129, %1131
  %1134 = xor i32 %1129, %1132
  %1135 = add nuw nsw i32 %1133, %1134
  %1136 = icmp eq i32 %1135, 2
  %1137 = zext i1 %1136 to i8
  store i8 %1137, i8* %44, align 1, !tbaa !2449
  %1138 = sext i32 %1111 to i64
  store i64 %1138, i64* %RDX, align 8, !tbaa !2428
  %1139 = shl nsw i64 %1138, 2
  %1140 = add i64 %1139, %1082
  %1141 = add i64 %1558, 22
  store i64 %1141, i64* %PC, align 8
  %1142 = inttoptr i64 %1140 to i32*
  %1143 = load i32, i32* %1142, align 4
  %1144 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1143, i32* %1144, align 1, !tbaa !2452
  store float 0.000000e+00, float* %692, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %694, align 1, !tbaa !2452
  %1145 = add i64 %1522, -36
  %1146 = add i64 %1558, 27
  store i64 %1146, i64* %PC, align 8
  %1147 = load <2 x float>, <2 x float>* %691, align 1
  %1148 = extractelement <2 x float> %1147, i32 0
  %1149 = inttoptr i64 %1145 to float*
  store float %1148, float* %1149, align 4
  %1150 = load i64, i64* %RBP, align 8
  %1151 = add i64 %1150, -52
  %1152 = load i64, i64* %PC, align 8
  %1153 = add i64 %1152, 3
  store i64 %1153, i64* %PC, align 8
  %1154 = inttoptr i64 %1151 to i32*
  %1155 = load i32, i32* %1154, align 4
  %1156 = zext i32 %1155 to i64
  store i64 %1156, i64* %RCX, align 8, !tbaa !2428
  %1157 = add i64 %1150, -44
  %1158 = add i64 %1152, 6
  store i64 %1158, i64* %PC, align 8
  %1159 = inttoptr i64 %1157 to i32*
  %1160 = load i32, i32* %1159, align 4
  %1161 = sub i32 %1155, %1160
  %1162 = icmp ult i32 %1155, %1160
  %1163 = zext i1 %1162 to i8
  store i8 %1163, i8* %20, align 1, !tbaa !2432
  %1164 = and i32 %1161, 255
  %1165 = tail call i32 @llvm.ctpop.i32(i32 %1164) #8
  %1166 = trunc i32 %1165 to i8
  %1167 = and i8 %1166, 1
  %1168 = xor i8 %1167, 1
  store i8 %1168, i8* %27, align 1, !tbaa !2446
  %1169 = xor i32 %1160, %1155
  %1170 = xor i32 %1169, %1161
  %1171 = lshr i32 %1170, 4
  %1172 = trunc i32 %1171 to i8
  %1173 = and i8 %1172, 1
  store i8 %1173, i8* %32, align 1, !tbaa !2450
  %1174 = icmp eq i32 %1161, 0
  %1175 = zext i1 %1174 to i8
  store i8 %1175, i8* %35, align 1, !tbaa !2447
  %1176 = lshr i32 %1161, 31
  %1177 = trunc i32 %1176 to i8
  store i8 %1177, i8* %38, align 1, !tbaa !2448
  %1178 = lshr i32 %1155, 31
  %1179 = lshr i32 %1160, 31
  %1180 = xor i32 %1179, %1178
  %1181 = xor i32 %1176, %1178
  %1182 = add nuw nsw i32 %1181, %1180
  %1183 = icmp eq i32 %1182, 2
  %1184 = zext i1 %1183 to i8
  store i8 %1184, i8* %44, align 1, !tbaa !2449
  %.v71 = select i1 %1174, i64 83, i64 12
  %1185 = add i64 %1152, %.v71
  store i64 %1185, i64* %128, align 8, !tbaa !2428
  br i1 %1174, label %block_401b9d, label %block_401b56

block_4019be:                                     ; preds = %block_401c18, %block_4019b7
  %1186 = phi i64 [ %.pre, %block_4019b7 ], [ %1822, %block_401c18 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4019b7 ], [ %MEMORY.6, %block_401c18 ]
  %1187 = load i64, i64* %RBP, align 8
  %1188 = add i64 %1187, -44
  %1189 = add i64 %1186, 3
  store i64 %1189, i64* %PC, align 8
  %1190 = inttoptr i64 %1188 to i32*
  %1191 = load i32, i32* %1190, align 4
  %1192 = zext i32 %1191 to i64
  store i64 %1192, i64* %RAX, align 8, !tbaa !2428
  %1193 = add i64 %1187, -56
  %1194 = add i64 %1186, 6
  store i64 %1194, i64* %PC, align 8
  %1195 = inttoptr i64 %1193 to i32*
  %1196 = load i32, i32* %1195, align 4
  %1197 = sub i32 %1191, %1196
  %1198 = icmp ult i32 %1191, %1196
  %1199 = zext i1 %1198 to i8
  store i8 %1199, i8* %20, align 1, !tbaa !2432
  %1200 = and i32 %1197, 255
  %1201 = tail call i32 @llvm.ctpop.i32(i32 %1200) #8
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  store i8 %1204, i8* %27, align 1, !tbaa !2446
  %1205 = xor i32 %1196, %1191
  %1206 = xor i32 %1205, %1197
  %1207 = lshr i32 %1206, 4
  %1208 = trunc i32 %1207 to i8
  %1209 = and i8 %1208, 1
  store i8 %1209, i8* %32, align 1, !tbaa !2450
  %1210 = icmp eq i32 %1197, 0
  %1211 = zext i1 %1210 to i8
  store i8 %1211, i8* %35, align 1, !tbaa !2447
  %1212 = lshr i32 %1197, 31
  %1213 = trunc i32 %1212 to i8
  store i8 %1213, i8* %38, align 1, !tbaa !2448
  %1214 = lshr i32 %1191, 31
  %1215 = lshr i32 %1196, 31
  %1216 = xor i32 %1215, %1214
  %1217 = xor i32 %1212, %1214
  %1218 = add nuw nsw i32 %1217, %1216
  %1219 = icmp eq i32 %1218, 2
  %1220 = zext i1 %1219 to i8
  store i8 %1220, i8* %44, align 1, !tbaa !2449
  %1221 = icmp ne i8 %1213, 0
  %1222 = xor i1 %1221, %1219
  %.v66 = select i1 %1222, i64 12, i64 621
  %1223 = add i64 %1186, %.v66
  %1224 = add i64 %1223, 5
  store i64 %1224, i64* %PC, align 8
  br i1 %1222, label %block_4019ca, label %block_401c2b

block_401c2b:                                     ; preds = %block_4019be
  store i64 %1224, i64* %128, align 8, !tbaa !2428
  br label %block_401c30

block_4019ca:                                     ; preds = %block_4019be
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %1225 = add i64 %1223, 8
  store i64 %1225, i64* %PC, align 8
  %1226 = load i32, i32* %1190, align 4
  %1227 = add i32 %1226, 1
  %1228 = zext i32 %1227 to i64
  store i64 %1228, i64* %RAX, align 8, !tbaa !2428
  %1229 = icmp eq i32 %1226, -1
  %1230 = icmp eq i32 %1227, 0
  %1231 = or i1 %1229, %1230
  %1232 = zext i1 %1231 to i8
  store i8 %1232, i8* %20, align 1, !tbaa !2432
  %1233 = and i32 %1227, 255
  %1234 = tail call i32 @llvm.ctpop.i32(i32 %1233) #8
  %1235 = trunc i32 %1234 to i8
  %1236 = and i8 %1235, 1
  %1237 = xor i8 %1236, 1
  store i8 %1237, i8* %27, align 1, !tbaa !2446
  %1238 = xor i32 %1226, %1227
  %1239 = lshr i32 %1238, 4
  %1240 = trunc i32 %1239 to i8
  %1241 = and i8 %1240, 1
  store i8 %1241, i8* %32, align 1, !tbaa !2450
  %1242 = icmp eq i32 %1227, 0
  %1243 = zext i1 %1242 to i8
  store i8 %1243, i8* %35, align 1, !tbaa !2447
  %1244 = lshr i32 %1227, 31
  %1245 = trunc i32 %1244 to i8
  store i8 %1245, i8* %38, align 1, !tbaa !2448
  %1246 = lshr i32 %1226, 31
  %1247 = xor i32 %1244, %1246
  %1248 = add nuw nsw i32 %1247, %1244
  %1249 = icmp eq i32 %1248, 2
  %1250 = zext i1 %1249 to i8
  store i8 %1250, i8* %44, align 1, !tbaa !2449
  %1251 = add i64 %1187, -48
  %1252 = add i64 %1223, 14
  store i64 %1252, i64* %PC, align 8
  %1253 = inttoptr i64 %1251 to i32*
  store i32 %1227, i32* %1253, align 4
  %1254 = load i64, i64* %RBP, align 8
  %1255 = add i64 %1254, -16
  %1256 = load i64, i64* %PC, align 8
  %1257 = add i64 %1256, 3
  store i64 %1257, i64* %PC, align 8
  %1258 = inttoptr i64 %1255 to i32*
  %1259 = load i32, i32* %1258, align 4
  %1260 = zext i32 %1259 to i64
  store i64 %1260, i64* %RAX, align 8, !tbaa !2428
  %1261 = add i64 %1254, -44
  %1262 = add i64 %1256, 6
  store i64 %1262, i64* %PC, align 8
  %1263 = inttoptr i64 %1261 to i32*
  %1264 = load i32, i32* %1263, align 4
  %1265 = sub i32 %1259, %1264
  %1266 = zext i32 %1265 to i64
  store i64 %1266, i64* %RAX, align 8, !tbaa !2428
  %1267 = icmp ult i32 %1259, %1264
  %1268 = zext i1 %1267 to i8
  store i8 %1268, i8* %20, align 1, !tbaa !2432
  %1269 = and i32 %1265, 255
  %1270 = tail call i32 @llvm.ctpop.i32(i32 %1269) #8
  %1271 = trunc i32 %1270 to i8
  %1272 = and i8 %1271, 1
  %1273 = xor i8 %1272, 1
  store i8 %1273, i8* %27, align 1, !tbaa !2446
  %1274 = xor i32 %1264, %1259
  %1275 = xor i32 %1274, %1265
  %1276 = lshr i32 %1275, 4
  %1277 = trunc i32 %1276 to i8
  %1278 = and i8 %1277, 1
  store i8 %1278, i8* %32, align 1, !tbaa !2450
  %1279 = icmp eq i32 %1265, 0
  %1280 = zext i1 %1279 to i8
  store i8 %1280, i8* %35, align 1, !tbaa !2447
  %1281 = lshr i32 %1265, 31
  %1282 = trunc i32 %1281 to i8
  store i8 %1282, i8* %38, align 1, !tbaa !2448
  %1283 = lshr i32 %1259, 31
  %1284 = lshr i32 %1264, 31
  %1285 = xor i32 %1284, %1283
  %1286 = xor i32 %1281, %1283
  %1287 = add nuw nsw i32 %1286, %1285
  %1288 = icmp eq i32 %1287, 2
  %1289 = zext i1 %1288 to i8
  store i8 %1289, i8* %44, align 1, !tbaa !2449
  %1290 = add i64 %1254, -8
  %1291 = add i64 %1256, 10
  store i64 %1291, i64* %PC, align 8
  %1292 = inttoptr i64 %1290 to i64*
  %1293 = load i64, i64* %1292, align 8
  store i64 %1293, i64* %RCX, align 8, !tbaa !2428
  %1294 = add i64 %1254, -12
  %1295 = add i64 %1256, 13
  store i64 %1295, i64* %PC, align 8
  %1296 = inttoptr i64 %1294 to i32*
  %1297 = load i32, i32* %1296, align 4
  %1298 = zext i32 %1297 to i64
  store i64 %1298, i64* %RSI, align 8, !tbaa !2428
  %1299 = add i64 %1256, 17
  store i64 %1299, i64* %PC, align 8
  %1300 = load i32, i32* %1263, align 4
  %1301 = sext i32 %1297 to i64
  %1302 = sext i32 %1300 to i64
  %1303 = mul nsw i64 %1302, %1301
  %1304 = trunc i64 %1303 to i32
  %1305 = and i64 %1303, 4294967295
  store i64 %1305, i64* %RSI, align 8, !tbaa !2428
  %1306 = shl i64 %1303, 32
  %1307 = ashr exact i64 %1306, 32
  %1308 = icmp ne i64 %1307, %1303
  %1309 = zext i1 %1308 to i8
  store i8 %1309, i8* %20, align 1, !tbaa !2432
  %1310 = and i32 %1304, 255
  %1311 = tail call i32 @llvm.ctpop.i32(i32 %1310) #8
  %1312 = trunc i32 %1311 to i8
  %1313 = and i8 %1312, 1
  %1314 = xor i8 %1313, 1
  store i8 %1314, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %1315 = lshr i32 %1304, 31
  %1316 = trunc i32 %1315 to i8
  store i8 %1316, i8* %38, align 1, !tbaa !2448
  store i8 %1309, i8* %44, align 1, !tbaa !2449
  %1317 = add i64 %1256, 20
  store i64 %1317, i64* %PC, align 8
  %1318 = trunc i64 %1303 to i32
  %1319 = load i32, i32* %1263, align 4
  %1320 = add i32 %1319, %1318
  %1321 = sext i32 %1320 to i64
  %1322 = shl nsw i64 %1321, 2
  %1323 = lshr i64 %1321, 61
  %1324 = and i64 %1323, 1
  %1325 = load i64, i64* %RCX, align 8
  %1326 = add i64 %1322, %1325
  store i64 %1326, i64* %RCX, align 8, !tbaa !2428
  %1327 = icmp ult i64 %1326, %1325
  %1328 = icmp ult i64 %1326, %1322
  %1329 = or i1 %1327, %1328
  %1330 = zext i1 %1329 to i8
  store i8 %1330, i8* %20, align 1, !tbaa !2432
  %1331 = trunc i64 %1326 to i32
  %1332 = and i32 %1331, 255
  %1333 = tail call i32 @llvm.ctpop.i32(i32 %1332) #8
  %1334 = trunc i32 %1333 to i8
  %1335 = and i8 %1334, 1
  %1336 = xor i8 %1335, 1
  store i8 %1336, i8* %27, align 1, !tbaa !2446
  %1337 = xor i64 %1322, %1325
  %1338 = xor i64 %1337, %1326
  %1339 = lshr i64 %1338, 4
  %1340 = trunc i64 %1339 to i8
  %1341 = and i8 %1340, 1
  store i8 %1341, i8* %32, align 1, !tbaa !2450
  %1342 = icmp eq i64 %1326, 0
  %1343 = zext i1 %1342 to i8
  store i8 %1343, i8* %35, align 1, !tbaa !2447
  %1344 = lshr i64 %1326, 63
  %1345 = trunc i64 %1344 to i8
  store i8 %1345, i8* %38, align 1, !tbaa !2448
  %1346 = lshr i64 %1325, 63
  %1347 = xor i64 %1344, %1346
  %1348 = xor i64 %1344, %1324
  %1349 = add nuw nsw i64 %1347, %1348
  %1350 = icmp eq i64 %1349, 2
  %1351 = zext i1 %1350 to i8
  store i8 %1351, i8* %44, align 1, !tbaa !2449
  %1352 = load i32, i32* %EAX, align 4
  %1353 = zext i32 %1352 to i64
  store i64 %1353, i64* %RDI, align 8, !tbaa !2428
  store i64 %1326, i64* %RSI, align 8, !tbaa !2428
  %1354 = add i64 %1256, 4568
  %1355 = add i64 %1256, 40
  %1356 = load i64, i64* %12, align 8, !tbaa !2428
  %1357 = add i64 %1356, -8
  %1358 = inttoptr i64 %1357 to i64*
  store i64 %1355, i64* %1358, align 8
  store i64 %1357, i64* %12, align 8, !tbaa !2428
  store i64 %1354, i64* %128, align 8, !tbaa !2428
  %1359 = tail call %struct.Memory* @sub_402bb0_idamax_renamed_(%struct.State* nonnull %0, i64 %1354, %struct.Memory* %MEMORY.3)
  %1360 = load i64, i64* %PC, align 8
  store i32 0, i32* %672, align 1, !tbaa !2451
  store i32 0, i32* %674, align 1, !tbaa !2451
  store i32 0, i32* %675, align 1, !tbaa !2451
  store i32 0, i32* %677, align 1, !tbaa !2451
  %1361 = load i64, i64* %RAX, align 8
  %1362 = load i64, i64* %RBP, align 8
  %1363 = add i64 %1362, -44
  %1364 = add i64 %1360, 6
  store i64 %1364, i64* %PC, align 8
  %1365 = trunc i64 %1361 to i32
  %1366 = inttoptr i64 %1363 to i32*
  %1367 = load i32, i32* %1366, align 4
  %1368 = add i32 %1367, %1365
  %1369 = zext i32 %1368 to i64
  store i64 %1369, i64* %RAX, align 8, !tbaa !2428
  %1370 = icmp ult i32 %1368, %1365
  %1371 = icmp ult i32 %1368, %1367
  %1372 = or i1 %1370, %1371
  %1373 = zext i1 %1372 to i8
  store i8 %1373, i8* %20, align 1, !tbaa !2432
  %1374 = and i32 %1368, 255
  %1375 = tail call i32 @llvm.ctpop.i32(i32 %1374) #8
  %1376 = trunc i32 %1375 to i8
  %1377 = and i8 %1376, 1
  %1378 = xor i8 %1377, 1
  store i8 %1378, i8* %27, align 1, !tbaa !2446
  %1379 = xor i32 %1367, %1365
  %1380 = xor i32 %1379, %1368
  %1381 = lshr i32 %1380, 4
  %1382 = trunc i32 %1381 to i8
  %1383 = and i8 %1382, 1
  store i8 %1383, i8* %32, align 1, !tbaa !2450
  %1384 = icmp eq i32 %1368, 0
  %1385 = zext i1 %1384 to i8
  store i8 %1385, i8* %35, align 1, !tbaa !2447
  %1386 = lshr i32 %1368, 31
  %1387 = trunc i32 %1386 to i8
  store i8 %1387, i8* %38, align 1, !tbaa !2448
  %1388 = lshr i32 %1365, 31
  %1389 = lshr i32 %1367, 31
  %1390 = xor i32 %1386, %1388
  %1391 = xor i32 %1386, %1389
  %1392 = add nuw nsw i32 %1390, %1391
  %1393 = icmp eq i32 %1392, 2
  %1394 = zext i1 %1393 to i8
  store i8 %1394, i8* %44, align 1, !tbaa !2449
  %1395 = add i64 %1362, -52
  %1396 = add i64 %1360, 9
  store i64 %1396, i64* %PC, align 8
  %1397 = inttoptr i64 %1395 to i32*
  store i32 %1368, i32* %1397, align 4
  %1398 = load i64, i64* %RBP, align 8
  %1399 = add i64 %1398, -52
  %1400 = load i64, i64* %PC, align 8
  %1401 = add i64 %1400, 3
  store i64 %1401, i64* %PC, align 8
  %1402 = inttoptr i64 %1399 to i32*
  %1403 = load i32, i32* %1402, align 4
  %1404 = zext i32 %1403 to i64
  store i64 %1404, i64* %RAX, align 8, !tbaa !2428
  %1405 = add i64 %1398, -24
  %1406 = add i64 %1400, 7
  store i64 %1406, i64* %PC, align 8
  %1407 = inttoptr i64 %1405 to i64*
  %1408 = load i64, i64* %1407, align 8
  store i64 %1408, i64* %RCX, align 8, !tbaa !2428
  %1409 = add i64 %1398, -44
  %1410 = add i64 %1400, 11
  store i64 %1410, i64* %PC, align 8
  %1411 = inttoptr i64 %1409 to i32*
  %1412 = load i32, i32* %1411, align 4
  %1413 = sext i32 %1412 to i64
  store i64 %1413, i64* %RSI, align 8, !tbaa !2428
  %1414 = shl nsw i64 %1413, 2
  %1415 = add i64 %1414, %1408
  %1416 = add i64 %1400, 14
  store i64 %1416, i64* %PC, align 8
  %1417 = inttoptr i64 %1415 to i32*
  store i32 %1403, i32* %1417, align 4
  %1418 = load i64, i64* %RBP, align 8
  %1419 = add i64 %1418, -8
  %1420 = load i64, i64* %PC, align 8
  %1421 = add i64 %1420, 4
  store i64 %1421, i64* %PC, align 8
  %1422 = inttoptr i64 %1419 to i64*
  %1423 = load i64, i64* %1422, align 8
  store i64 %1423, i64* %RCX, align 8, !tbaa !2428
  %1424 = add i64 %1418, -12
  %1425 = add i64 %1420, 7
  store i64 %1425, i64* %PC, align 8
  %1426 = inttoptr i64 %1424 to i32*
  %1427 = load i32, i32* %1426, align 4
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RAX, align 8, !tbaa !2428
  %1429 = add i64 %1418, -44
  %1430 = add i64 %1420, 11
  store i64 %1430, i64* %PC, align 8
  %1431 = inttoptr i64 %1429 to i32*
  %1432 = load i32, i32* %1431, align 4
  %1433 = sext i32 %1427 to i64
  %1434 = sext i32 %1432 to i64
  %1435 = mul nsw i64 %1434, %1433
  %1436 = trunc i64 %1435 to i32
  %1437 = and i64 %1435, 4294967295
  store i64 %1437, i64* %RAX, align 8, !tbaa !2428
  %1438 = shl i64 %1435, 32
  %1439 = ashr exact i64 %1438, 32
  %1440 = icmp ne i64 %1439, %1435
  %1441 = zext i1 %1440 to i8
  store i8 %1441, i8* %20, align 1, !tbaa !2432
  %1442 = and i32 %1436, 255
  %1443 = tail call i32 @llvm.ctpop.i32(i32 %1442) #8
  %1444 = trunc i32 %1443 to i8
  %1445 = and i8 %1444, 1
  %1446 = xor i8 %1445, 1
  store i8 %1446, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %1447 = lshr i32 %1436, 31
  %1448 = trunc i32 %1447 to i8
  store i8 %1448, i8* %38, align 1, !tbaa !2448
  store i8 %1441, i8* %44, align 1, !tbaa !2449
  %1449 = add i64 %1418, -52
  %1450 = add i64 %1420, 14
  store i64 %1450, i64* %PC, align 8
  %1451 = trunc i64 %1435 to i32
  %1452 = inttoptr i64 %1449 to i32*
  %1453 = load i32, i32* %1452, align 4
  %1454 = add i32 %1453, %1451
  %1455 = zext i32 %1454 to i64
  store i64 %1455, i64* %RAX, align 8, !tbaa !2428
  %1456 = icmp ult i32 %1454, %1451
  %1457 = icmp ult i32 %1454, %1453
  %1458 = or i1 %1456, %1457
  %1459 = zext i1 %1458 to i8
  store i8 %1459, i8* %20, align 1, !tbaa !2432
  %1460 = and i32 %1454, 255
  %1461 = tail call i32 @llvm.ctpop.i32(i32 %1460) #8
  %1462 = trunc i32 %1461 to i8
  %1463 = and i8 %1462, 1
  %1464 = xor i8 %1463, 1
  store i8 %1464, i8* %27, align 1, !tbaa !2446
  %1465 = xor i32 %1453, %1451
  %1466 = xor i32 %1465, %1454
  %1467 = lshr i32 %1466, 4
  %1468 = trunc i32 %1467 to i8
  %1469 = and i8 %1468, 1
  store i8 %1469, i8* %32, align 1, !tbaa !2450
  %1470 = icmp eq i32 %1454, 0
  %1471 = zext i1 %1470 to i8
  store i8 %1471, i8* %35, align 1, !tbaa !2447
  %1472 = lshr i32 %1454, 31
  %1473 = trunc i32 %1472 to i8
  store i8 %1473, i8* %38, align 1, !tbaa !2448
  %1474 = lshr i32 %1451, 31
  %1475 = lshr i32 %1453, 31
  %1476 = xor i32 %1472, %1474
  %1477 = xor i32 %1472, %1475
  %1478 = add nuw nsw i32 %1476, %1477
  %1479 = icmp eq i32 %1478, 2
  %1480 = zext i1 %1479 to i8
  store i8 %1480, i8* %44, align 1, !tbaa !2449
  %1481 = sext i32 %1454 to i64
  store i64 %1481, i64* %RSI, align 8, !tbaa !2428
  %1482 = shl nsw i64 %1481, 2
  %1483 = add i64 %1482, %1423
  %1484 = add i64 %1420, 22
  store i64 %1484, i64* %PC, align 8
  %1485 = inttoptr i64 %1483 to i32*
  %1486 = load i32, i32* %1485, align 4
  %1487 = bitcast %union.VectorReg* %9 to i32*
  store i32 %1486, i32* %1487, align 1, !tbaa !2452
  store float 0.000000e+00, float* %680, align 1, !tbaa !2452
  store float 0.000000e+00, float* %682, align 1, !tbaa !2452
  store float 0.000000e+00, float* %684, align 1, !tbaa !2452
  %1488 = load <2 x float>, <2 x float>* %685, align 1
  %1489 = extractelement <2 x float> %1488, i32 0
  %1490 = fpext float %1489 to double
  store double %1490, double* %686, align 1, !tbaa !2454
  %1491 = add i64 %1420, 30
  store i64 %1491, i64* %PC, align 8
  %1492 = load double, double* %687, align 1
  %1493 = fcmp uno double %1490, %1492
  br i1 %1493, label %1494, label %1504

; <label>:1494:                                   ; preds = %block_4019ca
  %1495 = fadd double %1490, %1492
  %1496 = bitcast double %1495 to i64
  %1497 = and i64 %1496, 9221120237041090560
  %1498 = icmp eq i64 %1497, 9218868437227405312
  %1499 = and i64 %1496, 2251799813685247
  %1500 = icmp ne i64 %1499, 0
  %1501 = and i1 %1498, %1500
  br i1 %1501, label %1502, label %1510

; <label>:1502:                                   ; preds = %1494
  %1503 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1491, %struct.Memory* %1359) #9
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i8, i8* %35, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1504:                                   ; preds = %block_4019ca
  %1505 = fcmp ogt double %1490, %1492
  br i1 %1505, label %1510, label %1506

; <label>:1506:                                   ; preds = %1504
  %1507 = fcmp olt double %1490, %1492
  br i1 %1507, label %1510, label %1508

; <label>:1508:                                   ; preds = %1506
  %1509 = fcmp oeq double %1490, %1492
  br i1 %1509, label %1510, label %1514

; <label>:1510:                                   ; preds = %1508, %1506, %1504, %1494
  %1511 = phi i8 [ 0, %1504 ], [ 0, %1506 ], [ 1, %1508 ], [ 1, %1494 ]
  %1512 = phi i8 [ 0, %1504 ], [ 0, %1506 ], [ 0, %1508 ], [ 1, %1494 ]
  %1513 = phi i8 [ 0, %1504 ], [ 1, %1506 ], [ 0, %1508 ], [ 1, %1494 ]
  store i8 %1511, i8* %35, align 1, !tbaa !2456
  store i8 %1512, i8* %27, align 1, !tbaa !2456
  store i8 %1513, i8* %20, align 1, !tbaa !2456
  br label %1514

; <label>:1514:                                   ; preds = %1510, %1508
  %1515 = phi i8 [ %1511, %1510 ], [ %1471, %1508 ]
  store i8 0, i8* %44, align 1, !tbaa !2456
  store i8 0, i8* %38, align 1, !tbaa !2456
  store i8 0, i8* %32, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1514, %1502
  %1516 = phi i8 [ %.pre2, %1502 ], [ %1515, %1514 ]
  %1517 = phi i64 [ %.pre1, %1502 ], [ %1491, %1514 ]
  %1518 = phi %struct.Memory* [ %1503, %1502 ], [ %1359, %1514 ]
  %1519 = icmp eq i8 %1516, 0
  %.v67 = select i1 %1519, i64 17, i64 6
  %1520 = add i64 %1517, %.v67
  store i64 %1520, i64* %128, align 8, !tbaa !2428
  br i1 %1519, label %block_401a46, label %block_401a3b

block_401b23:                                     ; preds = %block_401b9d, %block_401ab4
  %1521 = phi i64 [ %.pre5, %block_401ab4 ], [ %1789, %block_401b9d ]
  %MEMORY.4 = phi %struct.Memory* [ %900, %block_401ab4 ], [ %1756, %block_401b9d ]
  %1522 = load i64, i64* %RBP, align 8
  %1523 = add i64 %1522, -40
  %1524 = add i64 %1521, 3
  store i64 %1524, i64* %PC, align 8
  %1525 = inttoptr i64 %1523 to i32*
  %1526 = load i32, i32* %1525, align 4
  %1527 = zext i32 %1526 to i64
  store i64 %1527, i64* %RAX, align 8, !tbaa !2428
  %1528 = add i64 %1522, -16
  %1529 = add i64 %1521, 6
  store i64 %1529, i64* %PC, align 8
  %1530 = inttoptr i64 %1528 to i32*
  %1531 = load i32, i32* %1530, align 4
  %1532 = sub i32 %1526, %1531
  %1533 = icmp ult i32 %1526, %1531
  %1534 = zext i1 %1533 to i8
  store i8 %1534, i8* %20, align 1, !tbaa !2432
  %1535 = and i32 %1532, 255
  %1536 = tail call i32 @llvm.ctpop.i32(i32 %1535) #8
  %1537 = trunc i32 %1536 to i8
  %1538 = and i8 %1537, 1
  %1539 = xor i8 %1538, 1
  store i8 %1539, i8* %27, align 1, !tbaa !2446
  %1540 = xor i32 %1531, %1526
  %1541 = xor i32 %1540, %1532
  %1542 = lshr i32 %1541, 4
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  store i8 %1544, i8* %32, align 1, !tbaa !2450
  %1545 = icmp eq i32 %1532, 0
  %1546 = zext i1 %1545 to i8
  store i8 %1546, i8* %35, align 1, !tbaa !2447
  %1547 = lshr i32 %1532, 31
  %1548 = trunc i32 %1547 to i8
  store i8 %1548, i8* %38, align 1, !tbaa !2448
  %1549 = lshr i32 %1526, 31
  %1550 = lshr i32 %1531, 31
  %1551 = xor i32 %1550, %1549
  %1552 = xor i32 %1547, %1549
  %1553 = add nuw nsw i32 %1552, %1551
  %1554 = icmp eq i32 %1553, 2
  %1555 = zext i1 %1554 to i8
  store i8 %1555, i8* %44, align 1, !tbaa !2449
  %1556 = icmp ne i8 %1548, 0
  %1557 = xor i1 %1556, %1554
  %.v70 = select i1 %1557, i64 12, i64 231
  %1558 = add i64 %1521, %.v70
  store i64 %1558, i64* %128, align 8, !tbaa !2428
  br i1 %1557, label %block_401b2f, label %block_401c0a

block_401b9d:                                     ; preds = %block_401b2f, %block_401b56
  %1559 = phi i64 [ %1150, %block_401b2f ], [ %.pre7, %block_401b56 ]
  %1560 = phi i64 [ %1185, %block_401b2f ], [ %.pre6, %block_401b56 ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1561 = add i64 %1559, -16
  %1562 = add i64 %1560, 8
  store i64 %1562, i64* %PC, align 8
  %1563 = inttoptr i64 %1561 to i32*
  %1564 = load i32, i32* %1563, align 4
  %1565 = zext i32 %1564 to i64
  store i64 %1565, i64* %RCX, align 8, !tbaa !2428
  %1566 = add i64 %1559, -44
  %1567 = add i64 %1560, 11
  store i64 %1567, i64* %PC, align 8
  %1568 = inttoptr i64 %1566 to i32*
  %1569 = load i32, i32* %1568, align 4
  %1570 = add i32 %1569, 1
  %1571 = zext i32 %1570 to i64
  store i64 %1571, i64* %RDX, align 8, !tbaa !2428
  %1572 = lshr i32 %1570, 31
  %1573 = sub i32 %1564, %1570
  %1574 = zext i32 %1573 to i64
  store i64 %1574, i64* %RCX, align 8, !tbaa !2428
  %1575 = icmp ult i32 %1564, %1570
  %1576 = zext i1 %1575 to i8
  store i8 %1576, i8* %20, align 1, !tbaa !2432
  %1577 = and i32 %1573, 255
  %1578 = tail call i32 @llvm.ctpop.i32(i32 %1577) #8
  %1579 = trunc i32 %1578 to i8
  %1580 = and i8 %1579, 1
  %1581 = xor i8 %1580, 1
  store i8 %1581, i8* %27, align 1, !tbaa !2446
  %1582 = xor i32 %1570, %1564
  %1583 = xor i32 %1582, %1573
  %1584 = lshr i32 %1583, 4
  %1585 = trunc i32 %1584 to i8
  %1586 = and i8 %1585, 1
  store i8 %1586, i8* %32, align 1, !tbaa !2450
  %1587 = icmp eq i32 %1573, 0
  %1588 = zext i1 %1587 to i8
  store i8 %1588, i8* %35, align 1, !tbaa !2447
  %1589 = lshr i32 %1573, 31
  %1590 = trunc i32 %1589 to i8
  store i8 %1590, i8* %38, align 1, !tbaa !2448
  %1591 = lshr i32 %1564, 31
  %1592 = xor i32 %1572, %1591
  %1593 = xor i32 %1589, %1591
  %1594 = add nuw nsw i32 %1593, %1592
  %1595 = icmp eq i32 %1594, 2
  %1596 = zext i1 %1595 to i8
  store i8 %1596, i8* %44, align 1, !tbaa !2449
  %1597 = add i64 %1559, -36
  %1598 = add i64 %1560, 21
  store i64 %1598, i64* %PC, align 8
  %1599 = inttoptr i64 %1597 to i32*
  %1600 = load i32, i32* %1599, align 4
  %1601 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %1600, i32* %1601, align 1, !tbaa !2452
  store float 0.000000e+00, float* %692, align 1, !tbaa !2452
  store float 0.000000e+00, float* %693, align 1, !tbaa !2452
  store float 0.000000e+00, float* %694, align 1, !tbaa !2452
  %1602 = load i64, i64* %RBP, align 8
  %1603 = add i64 %1602, -8
  %1604 = add i64 %1560, 25
  store i64 %1604, i64* %PC, align 8
  %1605 = inttoptr i64 %1603 to i64*
  %1606 = load i64, i64* %1605, align 8
  store i64 %1606, i64* %RSI, align 8, !tbaa !2428
  %1607 = add i64 %1602, -12
  %1608 = add i64 %1560, 28
  store i64 %1608, i64* %PC, align 8
  %1609 = inttoptr i64 %1607 to i32*
  %1610 = load i32, i32* %1609, align 4
  %1611 = zext i32 %1610 to i64
  store i64 %1611, i64* %RDX, align 8, !tbaa !2428
  %1612 = add i64 %1602, -44
  %1613 = add i64 %1560, 32
  store i64 %1613, i64* %PC, align 8
  %1614 = inttoptr i64 %1612 to i32*
  %1615 = load i32, i32* %1614, align 4
  %1616 = sext i32 %1610 to i64
  %1617 = sext i32 %1615 to i64
  %1618 = mul nsw i64 %1617, %1616
  %1619 = trunc i64 %1618 to i32
  %1620 = and i64 %1618, 4294967295
  store i64 %1620, i64* %RDX, align 8, !tbaa !2428
  %1621 = shl i64 %1618, 32
  %1622 = ashr exact i64 %1621, 32
  %1623 = icmp ne i64 %1622, %1618
  %1624 = zext i1 %1623 to i8
  store i8 %1624, i8* %20, align 1, !tbaa !2432
  %1625 = and i32 %1619, 255
  %1626 = tail call i32 @llvm.ctpop.i32(i32 %1625) #8
  %1627 = trunc i32 %1626 to i8
  %1628 = and i8 %1627, 1
  %1629 = xor i8 %1628, 1
  store i8 %1629, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %1630 = lshr i32 %1619, 31
  %1631 = trunc i32 %1630 to i8
  store i8 %1631, i8* %38, align 1, !tbaa !2448
  store i8 %1624, i8* %44, align 1, !tbaa !2449
  %1632 = add i64 %1560, 35
  store i64 %1632, i64* %PC, align 8
  %1633 = trunc i64 %1618 to i32
  %1634 = load i32, i32* %1614, align 4
  %1635 = add i32 %1634, %1633
  %1636 = add i32 %1635, 1
  %1637 = zext i32 %1636 to i64
  store i64 %1637, i64* %RDX, align 8, !tbaa !2428
  %1638 = sext i32 %1636 to i64
  %1639 = shl nsw i64 %1638, 2
  store i64 %1639, i64* %RDI, align 8, !tbaa !2428
  %1640 = lshr i64 %1638, 61
  %1641 = and i64 %1640, 1
  %1642 = load i64, i64* %RSI, align 8
  %1643 = add i64 %1639, %1642
  store i64 %1643, i64* %RSI, align 8, !tbaa !2428
  %1644 = icmp ult i64 %1643, %1642
  %1645 = icmp ult i64 %1643, %1639
  %1646 = or i1 %1644, %1645
  %1647 = zext i1 %1646 to i8
  store i8 %1647, i8* %20, align 1, !tbaa !2432
  %1648 = trunc i64 %1643 to i32
  %1649 = and i32 %1648, 255
  %1650 = tail call i32 @llvm.ctpop.i32(i32 %1649) #8
  %1651 = trunc i32 %1650 to i8
  %1652 = and i8 %1651, 1
  %1653 = xor i8 %1652, 1
  store i8 %1653, i8* %27, align 1, !tbaa !2446
  %1654 = xor i64 %1639, %1642
  %1655 = xor i64 %1654, %1643
  %1656 = lshr i64 %1655, 4
  %1657 = trunc i64 %1656 to i8
  %1658 = and i8 %1657, 1
  store i8 %1658, i8* %32, align 1, !tbaa !2450
  %1659 = icmp eq i64 %1643, 0
  %1660 = zext i1 %1659 to i8
  store i8 %1660, i8* %35, align 1, !tbaa !2447
  %1661 = lshr i64 %1643, 63
  %1662 = trunc i64 %1661 to i8
  store i8 %1662, i8* %38, align 1, !tbaa !2448
  %1663 = lshr i64 %1642, 63
  %1664 = xor i64 %1661, %1663
  %1665 = xor i64 %1661, %1641
  %1666 = add nuw nsw i64 %1664, %1665
  %1667 = icmp eq i64 %1666, 2
  %1668 = zext i1 %1667 to i8
  store i8 %1668, i8* %44, align 1, !tbaa !2449
  %1669 = load i64, i64* %RBP, align 8
  %1670 = add i64 %1669, -8
  %1671 = add i64 %1560, 52
  store i64 %1671, i64* %PC, align 8
  %1672 = inttoptr i64 %1670 to i64*
  %1673 = load i64, i64* %1672, align 8
  store i64 %1673, i64* %RDI, align 8, !tbaa !2428
  %1674 = add i64 %1669, -12
  %1675 = add i64 %1560, 55
  store i64 %1675, i64* %PC, align 8
  %1676 = inttoptr i64 %1674 to i32*
  %1677 = load i32, i32* %1676, align 4
  %1678 = zext i32 %1677 to i64
  store i64 %1678, i64* %RDX, align 8, !tbaa !2428
  %1679 = add i64 %1669, -40
  %1680 = add i64 %1560, 59
  store i64 %1680, i64* %PC, align 8
  %1681 = inttoptr i64 %1679 to i32*
  %1682 = load i32, i32* %1681, align 4
  %1683 = sext i32 %1677 to i64
  %1684 = sext i32 %1682 to i64
  %1685 = mul nsw i64 %1684, %1683
  %1686 = trunc i64 %1685 to i32
  %1687 = and i64 %1685, 4294967295
  store i64 %1687, i64* %RDX, align 8, !tbaa !2428
  %1688 = shl i64 %1685, 32
  %1689 = ashr exact i64 %1688, 32
  %1690 = icmp ne i64 %1689, %1685
  %1691 = zext i1 %1690 to i8
  store i8 %1691, i8* %20, align 1, !tbaa !2432
  %1692 = and i32 %1686, 255
  %1693 = tail call i32 @llvm.ctpop.i32(i32 %1692) #8
  %1694 = trunc i32 %1693 to i8
  %1695 = and i8 %1694, 1
  %1696 = xor i8 %1695, 1
  store i8 %1696, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %1697 = lshr i32 %1686, 31
  %1698 = trunc i32 %1697 to i8
  store i8 %1698, i8* %38, align 1, !tbaa !2448
  store i8 %1691, i8* %44, align 1, !tbaa !2449
  %1699 = add i64 %1669, -44
  %1700 = add i64 %1560, 62
  store i64 %1700, i64* %PC, align 8
  %1701 = trunc i64 %1685 to i32
  %1702 = inttoptr i64 %1699 to i32*
  %1703 = load i32, i32* %1702, align 4
  %1704 = add i32 %1703, %1701
  %1705 = add i32 %1704, 1
  %1706 = sext i32 %1705 to i64
  %1707 = shl nsw i64 %1706, 2
  store i64 %1707, i64* %R8, align 8, !tbaa !2428
  %1708 = lshr i64 %1706, 61
  %1709 = and i64 %1708, 1
  %1710 = load i64, i64* %RDI, align 8
  %1711 = add i64 %1707, %1710
  %1712 = icmp ult i64 %1711, %1710
  %1713 = icmp ult i64 %1711, %1707
  %1714 = or i1 %1712, %1713
  %1715 = zext i1 %1714 to i8
  store i8 %1715, i8* %20, align 1, !tbaa !2432
  %1716 = trunc i64 %1711 to i32
  %1717 = and i32 %1716, 255
  %1718 = tail call i32 @llvm.ctpop.i32(i32 %1717) #8
  %1719 = trunc i32 %1718 to i8
  %1720 = and i8 %1719, 1
  %1721 = xor i8 %1720, 1
  store i8 %1721, i8* %27, align 1, !tbaa !2446
  %1722 = xor i64 %1707, %1710
  %1723 = xor i64 %1722, %1711
  %1724 = lshr i64 %1723, 4
  %1725 = trunc i64 %1724 to i8
  %1726 = and i8 %1725, 1
  store i8 %1726, i8* %32, align 1, !tbaa !2450
  %1727 = icmp eq i64 %1711, 0
  %1728 = zext i1 %1727 to i8
  store i8 %1728, i8* %35, align 1, !tbaa !2447
  %1729 = lshr i64 %1711, 63
  %1730 = trunc i64 %1729 to i8
  store i8 %1730, i8* %38, align 1, !tbaa !2448
  %1731 = lshr i64 %1710, 63
  %1732 = xor i64 %1729, %1731
  %1733 = xor i64 %1729, %1709
  %1734 = add nuw nsw i64 %1732, %1733
  %1735 = icmp eq i64 %1734, 2
  %1736 = zext i1 %1735 to i8
  store i8 %1736, i8* %44, align 1, !tbaa !2449
  %1737 = load i64, i64* %RBP, align 8
  %1738 = add i64 %1737, -64
  %1739 = add i64 %1560, 79
  store i64 %1739, i64* %PC, align 8
  %1740 = inttoptr i64 %1738 to i64*
  store i64 %1711, i64* %1740, align 8
  %1741 = load i32, i32* %ECX, align 4
  %1742 = zext i32 %1741 to i64
  %1743 = load i64, i64* %PC, align 8
  store i64 %1742, i64* %RDI, align 8, !tbaa !2428
  %1744 = load i32, i32* %EAX, align 4
  %1745 = zext i32 %1744 to i64
  store i64 %1745, i64* %RDX, align 8, !tbaa !2428
  %1746 = load i64, i64* %RBP, align 8
  %1747 = add i64 %1746, -64
  %1748 = add i64 %1743, 8
  store i64 %1748, i64* %PC, align 8
  %1749 = inttoptr i64 %1747 to i64*
  %1750 = load i64, i64* %1749, align 8
  store i64 %1750, i64* %RCX, align 8, !tbaa !2428
  store i64 %1745, i64* %695, align 8, !tbaa !2428
  %1751 = add i64 %1743, 3316
  %1752 = add i64 %1743, 16
  %1753 = load i64, i64* %12, align 8, !tbaa !2428
  %1754 = add i64 %1753, -8
  %1755 = inttoptr i64 %1754 to i64*
  store i64 %1752, i64* %1755, align 8
  store i64 %1754, i64* %12, align 8, !tbaa !2428
  store i64 %1751, i64* %128, align 8, !tbaa !2428
  %1756 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %1751, %struct.Memory* %MEMORY.4)
  %1757 = load i64, i64* %RBP, align 8
  %1758 = add i64 %1757, -40
  %1759 = load i64, i64* %PC, align 8
  %1760 = add i64 %1759, 3
  store i64 %1760, i64* %PC, align 8
  %1761 = inttoptr i64 %1758 to i32*
  %1762 = load i32, i32* %1761, align 4
  %1763 = add i32 %1762, 1
  %1764 = zext i32 %1763 to i64
  store i64 %1764, i64* %RAX, align 8, !tbaa !2428
  %1765 = icmp eq i32 %1762, -1
  %1766 = icmp eq i32 %1763, 0
  %1767 = or i1 %1765, %1766
  %1768 = zext i1 %1767 to i8
  store i8 %1768, i8* %20, align 1, !tbaa !2432
  %1769 = and i32 %1763, 255
  %1770 = tail call i32 @llvm.ctpop.i32(i32 %1769) #8
  %1771 = trunc i32 %1770 to i8
  %1772 = and i8 %1771, 1
  %1773 = xor i8 %1772, 1
  store i8 %1773, i8* %27, align 1, !tbaa !2446
  %1774 = xor i32 %1762, %1763
  %1775 = lshr i32 %1774, 4
  %1776 = trunc i32 %1775 to i8
  %1777 = and i8 %1776, 1
  store i8 %1777, i8* %32, align 1, !tbaa !2450
  %1778 = icmp eq i32 %1763, 0
  %1779 = zext i1 %1778 to i8
  store i8 %1779, i8* %35, align 1, !tbaa !2447
  %1780 = lshr i32 %1763, 31
  %1781 = trunc i32 %1780 to i8
  store i8 %1781, i8* %38, align 1, !tbaa !2448
  %1782 = lshr i32 %1762, 31
  %1783 = xor i32 %1780, %1782
  %1784 = add nuw nsw i32 %1783, %1780
  %1785 = icmp eq i32 %1784, 2
  %1786 = zext i1 %1785 to i8
  store i8 %1786, i8* %44, align 1, !tbaa !2449
  %1787 = add i64 %1759, 9
  store i64 %1787, i64* %PC, align 8
  store i32 %1763, i32* %1761, align 4
  %1788 = load i64, i64* %PC, align 8
  %1789 = add i64 %1788, -226
  store i64 %1789, i64* %128, align 8, !tbaa !2428
  br label %block_401b23

block_401c18:                                     ; preds = %block_401c0a, %block_401a41
  %1790 = phi i64 [ %1522, %block_401c0a ], [ %.pre9, %block_401a41 ]
  %1791 = phi i64 [ %1856, %block_401c0a ], [ %.pre8, %block_401a41 ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.4, %block_401c0a ], [ %1518, %block_401a41 ]
  %1792 = add i64 %1790, -44
  %1793 = add i64 %1791, 8
  store i64 %1793, i64* %PC, align 8
  %1794 = inttoptr i64 %1792 to i32*
  %1795 = load i32, i32* %1794, align 4
  %1796 = add i32 %1795, 1
  %1797 = zext i32 %1796 to i64
  store i64 %1797, i64* %RAX, align 8, !tbaa !2428
  %1798 = icmp eq i32 %1795, -1
  %1799 = icmp eq i32 %1796, 0
  %1800 = or i1 %1798, %1799
  %1801 = zext i1 %1800 to i8
  store i8 %1801, i8* %20, align 1, !tbaa !2432
  %1802 = and i32 %1796, 255
  %1803 = tail call i32 @llvm.ctpop.i32(i32 %1802) #8
  %1804 = trunc i32 %1803 to i8
  %1805 = and i8 %1804, 1
  %1806 = xor i8 %1805, 1
  store i8 %1806, i8* %27, align 1, !tbaa !2446
  %1807 = xor i32 %1795, %1796
  %1808 = lshr i32 %1807, 4
  %1809 = trunc i32 %1808 to i8
  %1810 = and i8 %1809, 1
  store i8 %1810, i8* %32, align 1, !tbaa !2450
  %1811 = icmp eq i32 %1796, 0
  %1812 = zext i1 %1811 to i8
  store i8 %1812, i8* %35, align 1, !tbaa !2447
  %1813 = lshr i32 %1796, 31
  %1814 = trunc i32 %1813 to i8
  store i8 %1814, i8* %38, align 1, !tbaa !2448
  %1815 = lshr i32 %1795, 31
  %1816 = xor i32 %1813, %1815
  %1817 = add nuw nsw i32 %1816, %1813
  %1818 = icmp eq i32 %1817, 2
  %1819 = zext i1 %1818 to i8
  store i8 %1819, i8* %44, align 1, !tbaa !2449
  %1820 = add i64 %1791, 14
  store i64 %1820, i64* %PC, align 8
  store i32 %1796, i32* %1794, align 4
  %1821 = load i64, i64* %PC, align 8
  %1822 = add i64 %1821, -616
  store i64 %1822, i64* %128, align 8, !tbaa !2428
  br label %block_4019be

block_401c7d:                                     ; preds = %block_401c77
  %1823 = load i64, i64* %RBP, align 8
  %1824 = add i64 %1823, -16
  %1825 = add i64 %1891, 3
  store i64 %1825, i64* %PC, align 8
  %1826 = inttoptr i64 %1824 to i32*
  %1827 = load i32, i32* %1826, align 4
  %1828 = add i32 %1827, -1
  %1829 = zext i32 %1828 to i64
  store i64 %1829, i64* %RAX, align 8, !tbaa !2428
  %1830 = icmp eq i32 %1827, 0
  %1831 = zext i1 %1830 to i8
  store i8 %1831, i8* %20, align 1, !tbaa !2432
  %1832 = and i32 %1828, 255
  %1833 = tail call i32 @llvm.ctpop.i32(i32 %1832) #8
  %1834 = trunc i32 %1833 to i8
  %1835 = and i8 %1834, 1
  %1836 = xor i8 %1835, 1
  store i8 %1836, i8* %27, align 1, !tbaa !2446
  %1837 = xor i32 %1827, %1828
  %1838 = lshr i32 %1837, 4
  %1839 = trunc i32 %1838 to i8
  %1840 = and i8 %1839, 1
  store i8 %1840, i8* %32, align 1, !tbaa !2450
  %1841 = icmp eq i32 %1828, 0
  %1842 = zext i1 %1841 to i8
  store i8 %1842, i8* %35, align 1, !tbaa !2447
  %1843 = lshr i32 %1828, 31
  %1844 = trunc i32 %1843 to i8
  store i8 %1844, i8* %38, align 1, !tbaa !2448
  %1845 = lshr i32 %1827, 31
  %1846 = xor i32 %1843, %1845
  %1847 = add nuw nsw i32 %1846, %1845
  %1848 = icmp eq i32 %1847, 2
  %1849 = zext i1 %1848 to i8
  store i8 %1849, i8* %44, align 1, !tbaa !2449
  %1850 = add i64 %1823, -32
  %1851 = add i64 %1891, 10
  store i64 %1851, i64* %PC, align 8
  %1852 = inttoptr i64 %1850 to i64*
  %1853 = load i64, i64* %1852, align 8
  store i64 %1853, i64* %RCX, align 8, !tbaa !2428
  %1854 = add i64 %1891, 12
  store i64 %1854, i64* %PC, align 8
  %1855 = inttoptr i64 %1853 to i32*
  store i32 %1828, i32* %1855, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_401c89

block_401c0a:                                     ; preds = %block_401b23
  %1856 = add i64 %1558, 14
  store i64 %1856, i64* %128, align 8, !tbaa !2428
  br label %block_401c18

block_401c89:                                     ; preds = %block_401c77, %block_401c7d, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1857 = phi i64 [ %1891, %block_401c77 ], [ %.pre12, %block_401c7d ], [ %1078, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %1858 = load i64, i64* %RSP, align 8
  %1859 = add i64 %1858, 64
  store i64 %1859, i64* %RSP, align 8, !tbaa !2428
  %1860 = icmp ugt i64 %1858, -65
  %1861 = zext i1 %1860 to i8
  store i8 %1861, i8* %20, align 1, !tbaa !2432
  %1862 = trunc i64 %1859 to i32
  %1863 = and i32 %1862, 255
  %1864 = tail call i32 @llvm.ctpop.i32(i32 %1863) #8
  %1865 = trunc i32 %1864 to i8
  %1866 = and i8 %1865, 1
  %1867 = xor i8 %1866, 1
  store i8 %1867, i8* %27, align 1, !tbaa !2446
  %1868 = xor i64 %1858, %1859
  %1869 = lshr i64 %1868, 4
  %1870 = trunc i64 %1869 to i8
  %1871 = and i8 %1870, 1
  store i8 %1871, i8* %32, align 1, !tbaa !2450
  %1872 = icmp eq i64 %1859, 0
  %1873 = zext i1 %1872 to i8
  store i8 %1873, i8* %35, align 1, !tbaa !2447
  %1874 = lshr i64 %1859, 63
  %1875 = trunc i64 %1874 to i8
  store i8 %1875, i8* %38, align 1, !tbaa !2448
  %1876 = lshr i64 %1858, 63
  %1877 = xor i64 %1874, %1876
  %1878 = add nuw nsw i64 %1877, %1874
  %1879 = icmp eq i64 %1878, 2
  %1880 = zext i1 %1879 to i8
  store i8 %1880, i8* %44, align 1, !tbaa !2449
  %1881 = add i64 %1857, 5
  store i64 %1881, i64* %PC, align 8
  %1882 = add i64 %1858, 72
  %1883 = inttoptr i64 %1859 to i64*
  %1884 = load i64, i64* %1883, align 8
  store i64 %1884, i64* %RBP, align 8, !tbaa !2428
  store i64 %1882, i64* %12, align 8, !tbaa !2428
  %1885 = add i64 %1857, 6
  store i64 %1885, i64* %PC, align 8
  %1886 = inttoptr i64 %1882 to i64*
  %1887 = load i64, i64* %1886, align 8
  store i64 %1887, i64* %128, align 8, !tbaa !2428
  %1888 = add i64 %1858, 80
  store i64 %1888, i64* %12, align 8, !tbaa !2428
  ret %struct.Memory* %1076

block_401c77:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1889 = load i8, i8* %27, align 1, !tbaa !2446
  %1890 = icmp ne i8 %1889, 0
  %.v73 = select i1 %1890, i64 18, i64 6
  %1891 = add i64 %1078, %.v73
  store i64 %1891, i64* %128, align 8, !tbaa !2428
  %1892 = icmp eq i8 %1889, 1
  br i1 %1892, label %block_401c89, label %block_401c7d
}

; Function Attrs: noinline
define %struct.Memory* @sub_4017b0_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4017b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %18, align 1, !tbaa !2451
  %19 = getelementptr inbounds i8, i8* %16, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = bitcast i64* %17 to i32*
  store i32 0, i32* %21, align 1, !tbaa !2451
  %22 = getelementptr inbounds i8, i8* %16, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 1, !tbaa !2451
  %24 = add i64 %12, -16
  %25 = load i64, i64* %RDI, align 8
  %26 = add i64 %15, 10
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -12
  %30 = load i32, i32* %ESI, align 4
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 3
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %33, align 4
  %34 = load i64, i64* %RBP, align 8
  %35 = add i64 %34, -16
  %36 = load i32, i32* %EDX, align 4
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %39, align 4
  %40 = load i64, i64* %RBP, align 8
  %41 = add i64 %40, -24
  %42 = load i64, i64* %RCX, align 8
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %45, align 8
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -32
  %48 = load i64, i64* %R8, align 8
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -36
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i32*
  store i32 1325, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -32
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RCX, align 8, !tbaa !2428
  %63 = add i64 %59, 8
  store i64 %63, i64* %PC, align 8
  %64 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %65 = load <2 x float>, <2 x float>* %64, align 1
  %66 = extractelement <2 x float> %65, i32 0
  %67 = inttoptr i64 %62 to float*
  store float %66, float* %67, align 4
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -44
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 7
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %69 to i32*
  store i32 0, i32* %72, align 4
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %80 = bitcast i64* %17 to double*
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %82 = bitcast i64* %81 to double*
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %86 = bitcast %union.VectorReg* %8 to double*
  %87 = bitcast %union.VectorReg* %7 to double*
  %88 = bitcast [32 x %union.VectorReg]* %6 to double*
  %89 = bitcast i64* %17 to <2 x i32>*
  %90 = bitcast [32 x %union.VectorReg]* %6 to float*
  %91 = bitcast i8* %19 to float*
  %92 = bitcast i64* %17 to float*
  %93 = bitcast i8* %22 to float*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4017df

block_4017fe:                                     ; preds = %block_4017f2
  %94 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 56) to i64*), align 8
  %95 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %94, i64* %95, align 1, !tbaa !2454
  store double 0.000000e+00, double* %80, align 1, !tbaa !2454
  %96 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 64) to i64*), align 16
  %97 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %96, i64* %97, align 1, !tbaa !2454
  store double 0.000000e+00, double* %82, align 1, !tbaa !2454
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %593, -36
  %99 = add i64 %629, 28
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %101 to i64
  %103 = mul nsw i64 %102, 3125
  %104 = trunc i64 %103 to i32
  %105 = and i64 %103, 4294967295
  store i64 %105, i64* %RCX, align 8, !tbaa !2428
  %106 = mul i64 %102, 13421772800000
  %107 = ashr exact i64 %106, 32
  %108 = icmp ne i64 %107, %103
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %73, align 1, !tbaa !2432
  %110 = and i32 %104, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #8
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %115 = lshr i32 %104, 31
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %77, align 1, !tbaa !2448
  store i8 %109, i8* %78, align 1, !tbaa !2449
  %117 = add i64 %593, -48
  %118 = add i64 %629, 31
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to i32*
  store i32 65536, i32* %119, align 4
  %120 = load i32, i32* %ECX, align 4
  %121 = zext i32 %120 to i64
  %122 = load i64, i64* %PC, align 8
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %123 = sext i32 %120 to i64
  %124 = lshr i64 %123, 32
  store i64 %124, i64* %83, align 8, !tbaa !2428
  %125 = load i64, i64* %RBP, align 8
  %126 = add i64 %125, -48
  %127 = add i64 %122, 6
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = zext i32 %129 to i64
  store i64 %130, i64* %RCX, align 8, !tbaa !2428
  %131 = add i64 %122, 8
  store i64 %131, i64* %PC, align 8
  %132 = zext i32 %120 to i64
  %133 = sext i32 %129 to i64
  %134 = shl nuw i64 %124, 32
  %135 = or i64 %134, %132
  %136 = sdiv i64 %135, %133
  %137 = shl i64 %136, 32
  %138 = ashr exact i64 %137, 32
  %139 = icmp eq i64 %136, %138
  br i1 %139, label %142, label %140

; <label>:140:                                    ; preds = %block_4017fe
  %141 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %131, %struct.Memory* %MEMORY.2) #9
  %.pre2 = load i64, i64* %RBP, align 8
  %.pre3 = load i32, i32* %EDX, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:142:                                    ; preds = %block_4017fe
  %143 = srem i64 %135, %133
  %144 = and i64 %136, 4294967295
  store i64 %144, i64* %84, align 8, !tbaa !2428
  %145 = and i64 %143, 4294967295
  store i64 %145, i64* %85, align 8, !tbaa !2428
  store i8 0, i8* %73, align 1, !tbaa !2432
  store i8 0, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %78, align 1, !tbaa !2449
  %146 = trunc i64 %143 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %142, %140
  %147 = phi i64 [ %.pre4, %140 ], [ %131, %142 ]
  %148 = phi i32 [ %.pre3, %140 ], [ %146, %142 ]
  %149 = phi i64 [ %.pre2, %140 ], [ %125, %142 ]
  %150 = phi %struct.Memory* [ %141, %140 ], [ %MEMORY.2, %142 ]
  %151 = add i64 %149, -36
  %152 = add i64 %147, 3
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %151 to i32*
  store i32 %148, i32* %153, align 4
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -36
  %156 = load i64, i64* %PC, align 8
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %155 to i32*
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %RDX, align 8, !tbaa !2428
  %161 = sitofp i32 %159 to double
  %162 = load double, double* %87, align 1
  %163 = fsub double %161, %162
  %164 = load double, double* %88, align 1
  %165 = fdiv double %163, %164
  store double %165, double* %86, align 1, !tbaa !2454
  %166 = bitcast double %164 to <2 x i32>
  %167 = load <2 x i32>, <2 x i32>* %89, align 1
  %168 = fptrunc double %165 to float
  store float %168, float* %90, align 1, !tbaa !2452
  %169 = extractelement <2 x i32> %166, i32 1
  store i32 %169, i32* %20, align 1, !tbaa !2452
  %170 = extractelement <2 x i32> %167, i32 0
  store i32 %170, i32* %21, align 1, !tbaa !2452
  %171 = extractelement <2 x i32> %167, i32 1
  store i32 %171, i32* %23, align 1, !tbaa !2452
  %172 = add i64 %154, -8
  %173 = add i64 %156, 23
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %RSI, align 8, !tbaa !2428
  %176 = add i64 %154, -12
  %177 = add i64 %156, 26
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %RDX, align 8, !tbaa !2428
  %181 = add i64 %154, -44
  %182 = add i64 %156, 30
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %181 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %179 to i64
  %186 = sext i32 %184 to i64
  %187 = mul nsw i64 %186, %185
  %188 = trunc i64 %187 to i32
  %189 = and i64 %187, 4294967295
  store i64 %189, i64* %RDX, align 8, !tbaa !2428
  %190 = shl i64 %187, 32
  %191 = ashr exact i64 %190, 32
  %192 = icmp ne i64 %191, %187
  %193 = zext i1 %192 to i8
  store i8 %193, i8* %73, align 1, !tbaa !2432
  %194 = and i32 %188, 255
  %195 = tail call i32 @llvm.ctpop.i32(i32 %194) #8
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  store i8 %198, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %199 = lshr i32 %188, 31
  %200 = trunc i32 %199 to i8
  store i8 %200, i8* %77, align 1, !tbaa !2448
  store i8 %193, i8* %78, align 1, !tbaa !2449
  %201 = add i64 %154, -40
  %202 = add i64 %156, 33
  store i64 %202, i64* %PC, align 8
  %203 = trunc i64 %187 to i32
  %204 = inttoptr i64 %201 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = add i32 %205, %203
  %207 = zext i32 %206 to i64
  store i64 %207, i64* %RDX, align 8, !tbaa !2428
  %208 = icmp ult i32 %206, %203
  %209 = icmp ult i32 %206, %205
  %210 = or i1 %208, %209
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %73, align 1, !tbaa !2432
  %212 = and i32 %206, 255
  %213 = tail call i32 @llvm.ctpop.i32(i32 %212) #8
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  store i8 %216, i8* %74, align 1, !tbaa !2446
  %217 = xor i32 %205, %203
  %218 = xor i32 %217, %206
  %219 = lshr i32 %218, 4
  %220 = trunc i32 %219 to i8
  %221 = and i8 %220, 1
  store i8 %221, i8* %75, align 1, !tbaa !2450
  %222 = icmp eq i32 %206, 0
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %76, align 1, !tbaa !2447
  %224 = lshr i32 %206, 31
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %77, align 1, !tbaa !2448
  %226 = lshr i32 %203, 31
  %227 = lshr i32 %205, 31
  %228 = xor i32 %224, %226
  %229 = xor i32 %224, %227
  %230 = add nuw nsw i32 %228, %229
  %231 = icmp eq i32 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %78, align 1, !tbaa !2449
  %233 = sext i32 %206 to i64
  store i64 %233, i64* %RDI, align 8, !tbaa !2428
  %234 = shl nsw i64 %233, 2
  %235 = add i64 %234, %175
  %236 = add i64 %156, 41
  store i64 %236, i64* %PC, align 8
  %237 = load <2 x float>, <2 x float>* %64, align 1
  %238 = extractelement <2 x float> %237, i32 0
  %239 = inttoptr i64 %235 to float*
  store float %238, float* %239, align 4
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -8
  %242 = load i64, i64* %PC, align 8
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %RSI, align 8, !tbaa !2428
  %246 = add i64 %240, -12
  %247 = add i64 %242, 7
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i32*
  %249 = load i32, i32* %248, align 4
  %250 = zext i32 %249 to i64
  store i64 %250, i64* %RDX, align 8, !tbaa !2428
  %251 = add i64 %240, -44
  %252 = add i64 %242, 11
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = sext i32 %249 to i64
  %256 = sext i32 %254 to i64
  %257 = mul nsw i64 %256, %255
  %258 = trunc i64 %257 to i32
  %259 = and i64 %257, 4294967295
  store i64 %259, i64* %RDX, align 8, !tbaa !2428
  %260 = shl i64 %257, 32
  %261 = ashr exact i64 %260, 32
  %262 = icmp ne i64 %261, %257
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %73, align 1, !tbaa !2432
  %264 = and i32 %258, 255
  %265 = tail call i32 @llvm.ctpop.i32(i32 %264) #8
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  store i8 %268, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %269 = lshr i32 %258, 31
  %270 = trunc i32 %269 to i8
  store i8 %270, i8* %77, align 1, !tbaa !2448
  store i8 %263, i8* %78, align 1, !tbaa !2449
  %271 = add i64 %240, -40
  %272 = add i64 %242, 14
  store i64 %272, i64* %PC, align 8
  %273 = trunc i64 %257 to i32
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = add i32 %275, %273
  %277 = zext i32 %276 to i64
  store i64 %277, i64* %RDX, align 8, !tbaa !2428
  %278 = icmp ult i32 %276, %273
  %279 = icmp ult i32 %276, %275
  %280 = or i1 %278, %279
  %281 = zext i1 %280 to i8
  store i8 %281, i8* %73, align 1, !tbaa !2432
  %282 = and i32 %276, 255
  %283 = tail call i32 @llvm.ctpop.i32(i32 %282) #8
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  store i8 %286, i8* %74, align 1, !tbaa !2446
  %287 = xor i32 %275, %273
  %288 = xor i32 %287, %276
  %289 = lshr i32 %288, 4
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  store i8 %291, i8* %75, align 1, !tbaa !2450
  %292 = icmp eq i32 %276, 0
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %76, align 1, !tbaa !2447
  %294 = lshr i32 %276, 31
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %77, align 1, !tbaa !2448
  %296 = lshr i32 %273, 31
  %297 = lshr i32 %275, 31
  %298 = xor i32 %294, %296
  %299 = xor i32 %294, %297
  %300 = add nuw nsw i32 %298, %299
  %301 = icmp eq i32 %300, 2
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %78, align 1, !tbaa !2449
  %303 = sext i32 %276 to i64
  store i64 %303, i64* %RDI, align 8, !tbaa !2428
  %304 = shl nsw i64 %303, 2
  %305 = add i64 %304, %245
  %306 = add i64 %242, 22
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to i32*
  %308 = load i32, i32* %307, align 4
  %309 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %308, i32* %309, align 1, !tbaa !2452
  store float 0.000000e+00, float* %91, align 1, !tbaa !2452
  store float 0.000000e+00, float* %92, align 1, !tbaa !2452
  store float 0.000000e+00, float* %93, align 1, !tbaa !2452
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -32
  %312 = add i64 %242, 26
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  store i64 %314, i64* %RSI, align 8, !tbaa !2428
  %315 = add i64 %242, 29
  store i64 %315, i64* %PC, align 8
  %316 = load <2 x float>, <2 x float>* %64, align 1
  %317 = extractelement <2 x float> %316, i32 0
  %318 = inttoptr i64 %314 to float*
  %319 = load float, float* %318, align 4
  %320 = fcmp uno float %317, %319
  br i1 %320, label %321, label %331

; <label>:321:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %322 = fadd float %317, %319
  %323 = bitcast float %322 to i32
  %324 = and i32 %323, 2143289344
  %325 = icmp eq i32 %324, 2139095040
  %326 = and i32 %323, 4194303
  %327 = icmp ne i32 %326, 0
  %328 = and i1 %325, %327
  br i1 %328, label %329, label %337

; <label>:329:                                    ; preds = %321
  %330 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %315, %struct.Memory* %150) #9
  %.pre5 = load i64, i64* %PC, align 8
  %.pre6 = load i8, i8* %73, align 1, !tbaa !2432
  %.pre7 = load i8, i8* %76, align 1, !tbaa !2447
  %.pre8 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:331:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %332 = fcmp ogt float %317, %319
  br i1 %332, label %337, label %333

; <label>:333:                                    ; preds = %331
  %334 = fcmp olt float %317, %319
  br i1 %334, label %337, label %335

; <label>:335:                                    ; preds = %333
  %336 = fcmp oeq float %317, %319
  br i1 %336, label %337, label %341

; <label>:337:                                    ; preds = %335, %333, %331, %321
  %338 = phi i8 [ 0, %331 ], [ 0, %333 ], [ 1, %335 ], [ 1, %321 ]
  %339 = phi i8 [ 0, %331 ], [ 0, %333 ], [ 0, %335 ], [ 1, %321 ]
  %340 = phi i8 [ 0, %331 ], [ 1, %333 ], [ 0, %335 ], [ 1, %321 ]
  store i8 %338, i8* %76, align 1, !tbaa !2456
  store i8 %339, i8* %74, align 1, !tbaa !2456
  store i8 %340, i8* %73, align 1, !tbaa !2456
  br label %341

; <label>:341:                                    ; preds = %337, %335
  %342 = phi i8 [ %338, %337 ], [ %293, %335 ]
  %343 = phi i8 [ %340, %337 ], [ %281, %335 ]
  store i8 0, i8* %78, align 1, !tbaa !2456
  store i8 0, i8* %77, align 1, !tbaa !2456
  store i8 0, i8* %75, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %341, %329
  %344 = phi i64 [ %.pre8, %329 ], [ %310, %341 ]
  %345 = phi i8 [ %.pre7, %329 ], [ %342, %341 ]
  %346 = phi i8 [ %.pre6, %329 ], [ %343, %341 ]
  %347 = phi i64 [ %.pre5, %329 ], [ %315, %341 ]
  %348 = phi %struct.Memory* [ %330, %329 ], [ %150, %341 ]
  %349 = or i8 %345, %346
  %350 = icmp ne i8 %349, 0
  %.v14 = select i1 %350, i64 38, i64 6
  %351 = add i64 %347, %.v14
  store i64 %351, i64* %79, align 8, !tbaa !2428
  br i1 %350, label %block_401894, label %block_401874

block_401874:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %352 = add i64 %344, -8
  %353 = add i64 %351, 4
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %352 to i64*
  %355 = load i64, i64* %354, align 8
  store i64 %355, i64* %RAX, align 8, !tbaa !2428
  %356 = add i64 %344, -12
  %357 = add i64 %351, 7
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i32*
  %359 = load i32, i32* %358, align 4
  %360 = zext i32 %359 to i64
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = add i64 %344, -44
  %362 = add i64 %351, 11
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i32*
  %364 = load i32, i32* %363, align 4
  %365 = sext i32 %359 to i64
  %366 = sext i32 %364 to i64
  %367 = mul nsw i64 %366, %365
  %368 = trunc i64 %367 to i32
  %369 = and i64 %367, 4294967295
  store i64 %369, i64* %RCX, align 8, !tbaa !2428
  %370 = shl i64 %367, 32
  %371 = ashr exact i64 %370, 32
  %372 = icmp ne i64 %371, %367
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %73, align 1, !tbaa !2432
  %374 = and i32 %368, 255
  %375 = tail call i32 @llvm.ctpop.i32(i32 %374) #8
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  %378 = xor i8 %377, 1
  store i8 %378, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %379 = lshr i32 %368, 31
  %380 = trunc i32 %379 to i8
  store i8 %380, i8* %77, align 1, !tbaa !2448
  store i8 %373, i8* %78, align 1, !tbaa !2449
  %381 = add i64 %344, -40
  %382 = add i64 %351, 14
  store i64 %382, i64* %PC, align 8
  %383 = trunc i64 %367 to i32
  %384 = inttoptr i64 %381 to i32*
  %385 = load i32, i32* %384, align 4
  %386 = add i32 %385, %383
  %387 = zext i32 %386 to i64
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = icmp ult i32 %386, %383
  %389 = icmp ult i32 %386, %385
  %390 = or i1 %388, %389
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %73, align 1, !tbaa !2432
  %392 = and i32 %386, 255
  %393 = tail call i32 @llvm.ctpop.i32(i32 %392) #8
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = xor i8 %395, 1
  store i8 %396, i8* %74, align 1, !tbaa !2446
  %397 = xor i32 %385, %383
  %398 = xor i32 %397, %386
  %399 = lshr i32 %398, 4
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  store i8 %401, i8* %75, align 1, !tbaa !2450
  %402 = icmp eq i32 %386, 0
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %76, align 1, !tbaa !2447
  %404 = lshr i32 %386, 31
  %405 = trunc i32 %404 to i8
  store i8 %405, i8* %77, align 1, !tbaa !2448
  %406 = lshr i32 %383, 31
  %407 = lshr i32 %385, 31
  %408 = xor i32 %404, %406
  %409 = xor i32 %404, %407
  %410 = add nuw nsw i32 %408, %409
  %411 = icmp eq i32 %410, 2
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %78, align 1, !tbaa !2449
  %413 = sext i32 %386 to i64
  store i64 %413, i64* %RDX, align 8, !tbaa !2428
  %414 = shl nsw i64 %413, 2
  %415 = add i64 %414, %355
  %416 = add i64 %351, 22
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %418, i32* %419, align 1, !tbaa !2452
  store float 0.000000e+00, float* %91, align 1, !tbaa !2452
  store float 0.000000e+00, float* %92, align 1, !tbaa !2452
  store float 0.000000e+00, float* %93, align 1, !tbaa !2452
  %420 = add i64 %344, -52
  %421 = add i64 %351, 27
  store i64 %421, i64* %PC, align 8
  %422 = load <2 x float>, <2 x float>* %64, align 1
  %423 = extractelement <2 x float> %422, i32 0
  %424 = inttoptr i64 %420 to float*
  store float %423, float* %424, align 4
  %425 = load i64, i64* %PC, align 8
  %426 = add i64 %425, 18
  store i64 %426, i64* %79, align 8, !tbaa !2428
  br label %block_4018a1

block_401964:                                     ; preds = %block_40191a
  %427 = add i64 %845, -44
  %428 = add i64 %881, 8
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i32*
  %430 = load i32, i32* %429, align 4
  %431 = add i32 %430, 1
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RAX, align 8, !tbaa !2428
  %433 = icmp eq i32 %430, -1
  %434 = icmp eq i32 %431, 0
  %435 = or i1 %433, %434
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %73, align 1, !tbaa !2432
  %437 = and i32 %431, 255
  %438 = tail call i32 @llvm.ctpop.i32(i32 %437) #8
  %439 = trunc i32 %438 to i8
  %440 = and i8 %439, 1
  %441 = xor i8 %440, 1
  store i8 %441, i8* %74, align 1, !tbaa !2446
  %442 = xor i32 %430, %431
  %443 = lshr i32 %442, 4
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  store i8 %445, i8* %75, align 1, !tbaa !2450
  %446 = icmp eq i32 %431, 0
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %76, align 1, !tbaa !2447
  %448 = lshr i32 %431, 31
  %449 = trunc i32 %448 to i8
  store i8 %449, i8* %77, align 1, !tbaa !2448
  %450 = lshr i32 %430, 31
  %451 = xor i32 %448, %450
  %452 = add nuw nsw i32 %451, %448
  %453 = icmp eq i32 %452, 2
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %78, align 1, !tbaa !2449
  %455 = add i64 %881, 14
  store i64 %455, i64* %PC, align 8
  store i32 %431, i32* %429, align 4
  %456 = load i64, i64* %PC, align 8
  %457 = add i64 %456, -107
  store i64 %457, i64* %79, align 8, !tbaa !2428
  br label %block_401907

block_4018e2:                                     ; preds = %block_4018d6
  store i32 0, i32* %18, align 1, !tbaa !2451
  store i32 0, i32* %20, align 1, !tbaa !2451
  store i32 0, i32* %21, align 1, !tbaa !2451
  store i32 0, i32* %23, align 1, !tbaa !2451
  %458 = add i64 %555, -24
  %459 = add i64 %591, 7
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %458 to i64*
  %461 = load i64, i64* %460, align 8
  store i64 %461, i64* %RAX, align 8, !tbaa !2428
  %462 = add i64 %591, 11
  store i64 %462, i64* %PC, align 8
  %463 = load i32, i32* %558, align 4
  %464 = sext i32 %463 to i64
  store i64 %464, i64* %RCX, align 8, !tbaa !2428
  %465 = shl nsw i64 %464, 2
  %466 = add i64 %465, %461
  %467 = add i64 %591, 16
  store i64 %467, i64* %PC, align 8
  %468 = load <2 x float>, <2 x float>* %64, align 1
  %469 = extractelement <2 x float> %468, i32 0
  %470 = inttoptr i64 %466 to float*
  store float %469, float* %470, align 4
  %471 = load i64, i64* %RBP, align 8
  %472 = add i64 %471, -40
  %473 = load i64, i64* %PC, align 8
  %474 = add i64 %473, 3
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %472 to i32*
  %476 = load i32, i32* %475, align 4
  %477 = add i32 %476, 1
  %478 = zext i32 %477 to i64
  store i64 %478, i64* %RAX, align 8, !tbaa !2428
  %479 = icmp eq i32 %476, -1
  %480 = icmp eq i32 %477, 0
  %481 = or i1 %479, %480
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %73, align 1, !tbaa !2432
  %483 = and i32 %477, 255
  %484 = tail call i32 @llvm.ctpop.i32(i32 %483) #8
  %485 = trunc i32 %484 to i8
  %486 = and i8 %485, 1
  %487 = xor i8 %486, 1
  store i8 %487, i8* %74, align 1, !tbaa !2446
  %488 = xor i32 %476, %477
  %489 = lshr i32 %488, 4
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  store i8 %491, i8* %75, align 1, !tbaa !2450
  %492 = icmp eq i32 %477, 0
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %76, align 1, !tbaa !2447
  %494 = lshr i32 %477, 31
  %495 = trunc i32 %494 to i8
  store i8 %495, i8* %77, align 1, !tbaa !2448
  %496 = lshr i32 %476, 31
  %497 = xor i32 %494, %496
  %498 = add nuw nsw i32 %497, %494
  %499 = icmp eq i32 %498, 2
  %500 = zext i1 %499 to i8
  store i8 %500, i8* %78, align 1, !tbaa !2449
  %501 = add i64 %473, 9
  store i64 %501, i64* %PC, align 8
  store i32 %477, i32* %475, align 4
  %502 = load i64, i64* %PC, align 8
  %503 = add i64 %502, -37
  store i64 %503, i64* %79, align 8, !tbaa !2428
  br label %block_4018d6

block_4017df:                                     ; preds = %block_4018bc, %block_4017b0
  %504 = phi i64 [ %.pre, %block_4017b0 ], [ %660, %block_4018bc ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4017b0 ], [ %MEMORY.2, %block_4018bc ]
  %505 = load i64, i64* %RBP, align 8
  %506 = add i64 %505, -44
  %507 = add i64 %504, 3
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to i32*
  %509 = load i32, i32* %508, align 4
  %510 = zext i32 %509 to i64
  store i64 %510, i64* %RAX, align 8, !tbaa !2428
  %511 = add i64 %505, -16
  %512 = add i64 %504, 6
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = sub i32 %509, %514
  %516 = icmp ult i32 %509, %514
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %73, align 1, !tbaa !2432
  %518 = and i32 %515, 255
  %519 = tail call i32 @llvm.ctpop.i32(i32 %518) #8
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  store i8 %522, i8* %74, align 1, !tbaa !2446
  %523 = xor i32 %514, %509
  %524 = xor i32 %523, %515
  %525 = lshr i32 %524, 4
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  store i8 %527, i8* %75, align 1, !tbaa !2450
  %528 = icmp eq i32 %515, 0
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %76, align 1, !tbaa !2447
  %530 = lshr i32 %515, 31
  %531 = trunc i32 %530 to i8
  store i8 %531, i8* %77, align 1, !tbaa !2448
  %532 = lshr i32 %509, 31
  %533 = lshr i32 %514, 31
  %534 = xor i32 %533, %532
  %535 = xor i32 %530, %532
  %536 = add nuw nsw i32 %535, %534
  %537 = icmp eq i32 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %78, align 1, !tbaa !2449
  %539 = icmp ne i8 %531, 0
  %540 = xor i1 %539, %537
  %.v = select i1 %540, i64 12, i64 240
  %541 = add i64 %504, %.v
  %542 = add i64 %505, -40
  %543 = add i64 %541, 7
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i32*
  store i32 0, i32* %544, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br i1 %540, label %block_4017f2, label %block_4018d6

block_401977:                                     ; preds = %block_401907
  %545 = add i64 %935, 1
  store i64 %545, i64* %PC, align 8
  %546 = load i64, i64* %11, align 8, !tbaa !2428
  %547 = add i64 %546, 8
  %548 = inttoptr i64 %546 to i64*
  %549 = load i64, i64* %548, align 8
  store i64 %549, i64* %RBP, align 8, !tbaa !2428
  store i64 %547, i64* %11, align 8, !tbaa !2428
  %550 = add i64 %935, 2
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %547 to i64*
  %552 = load i64, i64* %551, align 8
  store i64 %552, i64* %79, align 8, !tbaa !2428
  %553 = add i64 %546, 16
  store i64 %553, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4018d6:                                     ; preds = %block_4017df, %block_4018e2
  %554 = phi i64 [ %503, %block_4018e2 ], [ %.pre10, %block_4017df ]
  %555 = load i64, i64* %RBP, align 8
  %556 = add i64 %555, -40
  %557 = add i64 %554, 3
  store i64 %557, i64* %PC, align 8
  %558 = inttoptr i64 %556 to i32*
  %559 = load i32, i32* %558, align 4
  %560 = zext i32 %559 to i64
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = add i64 %555, -16
  %562 = add i64 %554, 6
  store i64 %562, i64* %PC, align 8
  %563 = inttoptr i64 %561 to i32*
  %564 = load i32, i32* %563, align 4
  %565 = sub i32 %559, %564
  %566 = icmp ult i32 %559, %564
  %567 = zext i1 %566 to i8
  store i8 %567, i8* %73, align 1, !tbaa !2432
  %568 = and i32 %565, 255
  %569 = tail call i32 @llvm.ctpop.i32(i32 %568) #8
  %570 = trunc i32 %569 to i8
  %571 = and i8 %570, 1
  %572 = xor i8 %571, 1
  store i8 %572, i8* %74, align 1, !tbaa !2446
  %573 = xor i32 %564, %559
  %574 = xor i32 %573, %565
  %575 = lshr i32 %574, 4
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  store i8 %577, i8* %75, align 1, !tbaa !2450
  %578 = icmp eq i32 %565, 0
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %76, align 1, !tbaa !2447
  %580 = lshr i32 %565, 31
  %581 = trunc i32 %580 to i8
  store i8 %581, i8* %77, align 1, !tbaa !2448
  %582 = lshr i32 %559, 31
  %583 = lshr i32 %564, 31
  %584 = xor i32 %583, %582
  %585 = xor i32 %580, %582
  %586 = add nuw nsw i32 %585, %584
  %587 = icmp eq i32 %586, 2
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %78, align 1, !tbaa !2449
  %589 = icmp ne i8 %581, 0
  %590 = xor i1 %589, %587
  %.v15 = select i1 %590, i64 12, i64 42
  %591 = add i64 %554, %.v15
  store i64 %591, i64* %79, align 8, !tbaa !2428
  br i1 %590, label %block_4018e2, label %block_401900

block_4017f2:                                     ; preds = %block_4017df, %block_4018a1
  %592 = phi i64 [ %843, %block_4018a1 ], [ %.pre10, %block_4017df ]
  %MEMORY.2 = phi %struct.Memory* [ %348, %block_4018a1 ], [ %MEMORY.0, %block_4017df ]
  %593 = load i64, i64* %RBP, align 8
  %594 = add i64 %593, -40
  %595 = add i64 %592, 3
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i32*
  %597 = load i32, i32* %596, align 4
  %598 = zext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = add i64 %593, -16
  %600 = add i64 %592, 6
  store i64 %600, i64* %PC, align 8
  %601 = inttoptr i64 %599 to i32*
  %602 = load i32, i32* %601, align 4
  %603 = sub i32 %597, %602
  %604 = icmp ult i32 %597, %602
  %605 = zext i1 %604 to i8
  store i8 %605, i8* %73, align 1, !tbaa !2432
  %606 = and i32 %603, 255
  %607 = tail call i32 @llvm.ctpop.i32(i32 %606) #8
  %608 = trunc i32 %607 to i8
  %609 = and i8 %608, 1
  %610 = xor i8 %609, 1
  store i8 %610, i8* %74, align 1, !tbaa !2446
  %611 = xor i32 %602, %597
  %612 = xor i32 %611, %603
  %613 = lshr i32 %612, 4
  %614 = trunc i32 %613 to i8
  %615 = and i8 %614, 1
  store i8 %615, i8* %75, align 1, !tbaa !2450
  %616 = icmp eq i32 %603, 0
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %76, align 1, !tbaa !2447
  %618 = lshr i32 %603, 31
  %619 = trunc i32 %618 to i8
  store i8 %619, i8* %77, align 1, !tbaa !2448
  %620 = lshr i32 %597, 31
  %621 = lshr i32 %602, 31
  %622 = xor i32 %621, %620
  %623 = xor i32 %618, %620
  %624 = add nuw nsw i32 %623, %622
  %625 = icmp eq i32 %624, 2
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %78, align 1, !tbaa !2449
  %627 = icmp ne i8 %619, 0
  %628 = xor i1 %627, %625
  %.v13 = select i1 %628, i64 12, i64 202
  %629 = add i64 %592, %.v13
  store i64 %629, i64* %79, align 8, !tbaa !2428
  br i1 %628, label %block_4017fe, label %block_4018bc

block_4018bc:                                     ; preds = %block_4017f2
  %630 = add i64 %593, -44
  %631 = add i64 %629, 8
  store i64 %631, i64* %PC, align 8
  %632 = inttoptr i64 %630 to i32*
  %633 = load i32, i32* %632, align 4
  %634 = add i32 %633, 1
  %635 = zext i32 %634 to i64
  store i64 %635, i64* %RAX, align 8, !tbaa !2428
  %636 = icmp eq i32 %633, -1
  %637 = icmp eq i32 %634, 0
  %638 = or i1 %636, %637
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %73, align 1, !tbaa !2432
  %640 = and i32 %634, 255
  %641 = tail call i32 @llvm.ctpop.i32(i32 %640) #8
  %642 = trunc i32 %641 to i8
  %643 = and i8 %642, 1
  %644 = xor i8 %643, 1
  store i8 %644, i8* %74, align 1, !tbaa !2446
  %645 = xor i32 %633, %634
  %646 = lshr i32 %645, 4
  %647 = trunc i32 %646 to i8
  %648 = and i8 %647, 1
  store i8 %648, i8* %75, align 1, !tbaa !2450
  %649 = icmp eq i32 %634, 0
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %76, align 1, !tbaa !2447
  %651 = lshr i32 %634, 31
  %652 = trunc i32 %651 to i8
  store i8 %652, i8* %77, align 1, !tbaa !2448
  %653 = lshr i32 %633, 31
  %654 = xor i32 %651, %653
  %655 = add nuw nsw i32 %654, %651
  %656 = icmp eq i32 %655, 2
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %78, align 1, !tbaa !2449
  %658 = add i64 %629, 14
  store i64 %658, i64* %PC, align 8
  store i32 %634, i32* %632, align 4
  %659 = load i64, i64* %PC, align 8
  %660 = add i64 %659, -235
  store i64 %660, i64* %79, align 8, !tbaa !2428
  br label %block_4017df

block_401926:                                     ; preds = %block_40191a
  %661 = add i64 %845, -24
  %662 = add i64 %881, 4
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i64*
  %664 = load i64, i64* %663, align 8
  store i64 %664, i64* %RAX, align 8, !tbaa !2428
  %665 = add i64 %881, 8
  store i64 %665, i64* %PC, align 8
  %666 = load i32, i32* %848, align 4
  %667 = sext i32 %666 to i64
  store i64 %667, i64* %RCX, align 8, !tbaa !2428
  %668 = shl nsw i64 %667, 2
  %669 = add i64 %668, %664
  %670 = add i64 %881, 13
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %669 to i32*
  %672 = load i32, i32* %671, align 4
  %673 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %672, i32* %673, align 1, !tbaa !2452
  store float 0.000000e+00, float* %91, align 1, !tbaa !2452
  store float 0.000000e+00, float* %92, align 1, !tbaa !2452
  store float 0.000000e+00, float* %93, align 1, !tbaa !2452
  %674 = add i64 %845, -8
  %675 = add i64 %881, 17
  store i64 %675, i64* %PC, align 8
  %676 = inttoptr i64 %674 to i64*
  %677 = load i64, i64* %676, align 8
  store i64 %677, i64* %RAX, align 8, !tbaa !2428
  %678 = add i64 %845, -12
  %679 = add i64 %881, 20
  store i64 %679, i64* %PC, align 8
  %680 = inttoptr i64 %678 to i32*
  %681 = load i32, i32* %680, align 4
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RDX, align 8, !tbaa !2428
  %683 = add i64 %845, -44
  %684 = add i64 %881, 24
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i32*
  %686 = load i32, i32* %685, align 4
  %687 = sext i32 %681 to i64
  %688 = sext i32 %686 to i64
  %689 = mul nsw i64 %688, %687
  %690 = trunc i64 %689 to i32
  %691 = and i64 %689, 4294967295
  store i64 %691, i64* %RDX, align 8, !tbaa !2428
  %692 = shl i64 %689, 32
  %693 = ashr exact i64 %692, 32
  %694 = icmp ne i64 %693, %689
  %695 = zext i1 %694 to i8
  store i8 %695, i8* %73, align 1, !tbaa !2432
  %696 = and i32 %690, 255
  %697 = tail call i32 @llvm.ctpop.i32(i32 %696) #8
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  %700 = xor i8 %699, 1
  store i8 %700, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %701 = lshr i32 %690, 31
  %702 = trunc i32 %701 to i8
  store i8 %702, i8* %77, align 1, !tbaa !2448
  store i8 %695, i8* %78, align 1, !tbaa !2449
  %703 = add i64 %881, 27
  store i64 %703, i64* %PC, align 8
  %704 = trunc i64 %689 to i32
  %705 = load i32, i32* %848, align 4
  %706 = add i32 %705, %704
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %RDX, align 8, !tbaa !2428
  %708 = icmp ult i32 %706, %704
  %709 = icmp ult i32 %706, %705
  %710 = or i1 %708, %709
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %73, align 1, !tbaa !2432
  %712 = and i32 %706, 255
  %713 = tail call i32 @llvm.ctpop.i32(i32 %712) #8
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = xor i8 %715, 1
  store i8 %716, i8* %74, align 1, !tbaa !2446
  %717 = xor i32 %705, %704
  %718 = xor i32 %717, %706
  %719 = lshr i32 %718, 4
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  store i8 %721, i8* %75, align 1, !tbaa !2450
  %722 = icmp eq i32 %706, 0
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %76, align 1, !tbaa !2447
  %724 = lshr i32 %706, 31
  %725 = trunc i32 %724 to i8
  store i8 %725, i8* %77, align 1, !tbaa !2448
  %726 = lshr i32 %704, 31
  %727 = lshr i32 %705, 31
  %728 = xor i32 %724, %726
  %729 = xor i32 %724, %727
  %730 = add nuw nsw i32 %728, %729
  %731 = icmp eq i32 %730, 2
  %732 = zext i1 %731 to i8
  store i8 %732, i8* %78, align 1, !tbaa !2449
  %733 = sext i32 %706 to i64
  store i64 %733, i64* %RCX, align 8, !tbaa !2428
  %734 = shl nsw i64 %733, 2
  %735 = add i64 %734, %677
  %736 = add i64 %881, 35
  store i64 %736, i64* %PC, align 8
  %737 = load <2 x float>, <2 x float>* %939, align 1
  %738 = load <2 x i32>, <2 x i32>* %89, align 1
  %739 = inttoptr i64 %735 to float*
  %740 = load float, float* %739, align 4
  %741 = extractelement <2 x float> %737, i32 0
  %742 = fadd float %741, %740
  store float %742, float* %90, align 1, !tbaa !2452
  %743 = bitcast <2 x float> %737 to <2 x i32>
  %744 = extractelement <2 x i32> %743, i32 1
  store i32 %744, i32* %20, align 1, !tbaa !2452
  %745 = extractelement <2 x i32> %738, i32 0
  store i32 %745, i32* %21, align 1, !tbaa !2452
  %746 = extractelement <2 x i32> %738, i32 1
  store i32 %746, i32* %23, align 1, !tbaa !2452
  %747 = load i64, i64* %RBP, align 8
  %748 = add i64 %747, -24
  %749 = add i64 %881, 39
  store i64 %749, i64* %PC, align 8
  %750 = inttoptr i64 %748 to i64*
  %751 = load i64, i64* %750, align 8
  store i64 %751, i64* %RAX, align 8, !tbaa !2428
  %752 = add i64 %747, -40
  %753 = add i64 %881, 43
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %752 to i32*
  %755 = load i32, i32* %754, align 4
  %756 = sext i32 %755 to i64
  store i64 %756, i64* %RCX, align 8, !tbaa !2428
  %757 = shl nsw i64 %756, 2
  %758 = add i64 %757, %751
  %759 = add i64 %881, 48
  store i64 %759, i64* %PC, align 8
  %760 = load <2 x float>, <2 x float>* %64, align 1
  %761 = extractelement <2 x float> %760, i32 0
  %762 = inttoptr i64 %758 to float*
  store float %761, float* %762, align 4
  %763 = load i64, i64* %RBP, align 8
  %764 = add i64 %763, -40
  %765 = load i64, i64* %PC, align 8
  %766 = add i64 %765, 3
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %764 to i32*
  %768 = load i32, i32* %767, align 4
  %769 = add i32 %768, 1
  %770 = zext i32 %769 to i64
  store i64 %770, i64* %RAX, align 8, !tbaa !2428
  %771 = icmp eq i32 %768, -1
  %772 = icmp eq i32 %769, 0
  %773 = or i1 %771, %772
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %73, align 1, !tbaa !2432
  %775 = and i32 %769, 255
  %776 = tail call i32 @llvm.ctpop.i32(i32 %775) #8
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = xor i8 %778, 1
  store i8 %779, i8* %74, align 1, !tbaa !2446
  %780 = xor i32 %768, %769
  %781 = lshr i32 %780, 4
  %782 = trunc i32 %781 to i8
  %783 = and i8 %782, 1
  store i8 %783, i8* %75, align 1, !tbaa !2450
  %784 = icmp eq i32 %769, 0
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %76, align 1, !tbaa !2447
  %786 = lshr i32 %769, 31
  %787 = trunc i32 %786 to i8
  store i8 %787, i8* %77, align 1, !tbaa !2448
  %788 = lshr i32 %768, 31
  %789 = xor i32 %786, %788
  %790 = add nuw nsw i32 %789, %786
  %791 = icmp eq i32 %790, 2
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %78, align 1, !tbaa !2449
  %793 = add i64 %765, 9
  store i64 %793, i64* %PC, align 8
  store i32 %769, i32* %767, align 4
  %794 = load i64, i64* %PC, align 8
  %795 = add i64 %794, -69
  store i64 %795, i64* %79, align 8, !tbaa !2428
  br label %block_40191a

block_4018a1:                                     ; preds = %block_401894, %block_401874
  %796 = phi i64 [ %.pre9, %block_401894 ], [ %426, %block_401874 ]
  %797 = load i64, i64* %RBP, align 8
  %798 = add i64 %797, -52
  %799 = add i64 %796, 5
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %798 to i32*
  %801 = load i32, i32* %800, align 4
  %802 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %801, i32* %802, align 1, !tbaa !2452
  store float 0.000000e+00, float* %91, align 1, !tbaa !2452
  store float 0.000000e+00, float* %92, align 1, !tbaa !2452
  store float 0.000000e+00, float* %93, align 1, !tbaa !2452
  %803 = add i64 %797, -32
  %804 = add i64 %796, 9
  store i64 %804, i64* %PC, align 8
  %805 = inttoptr i64 %803 to i64*
  %806 = load i64, i64* %805, align 8
  store i64 %806, i64* %RAX, align 8, !tbaa !2428
  %807 = add i64 %796, 13
  store i64 %807, i64* %PC, align 8
  %808 = load <2 x float>, <2 x float>* %64, align 1
  %809 = extractelement <2 x float> %808, i32 0
  %810 = inttoptr i64 %806 to float*
  store float %809, float* %810, align 4
  %811 = load i64, i64* %RBP, align 8
  %812 = add i64 %811, -40
  %813 = load i64, i64* %PC, align 8
  %814 = add i64 %813, 3
  store i64 %814, i64* %PC, align 8
  %815 = inttoptr i64 %812 to i32*
  %816 = load i32, i32* %815, align 4
  %817 = add i32 %816, 1
  %818 = zext i32 %817 to i64
  store i64 %818, i64* %RAX, align 8, !tbaa !2428
  %819 = icmp eq i32 %816, -1
  %820 = icmp eq i32 %817, 0
  %821 = or i1 %819, %820
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %73, align 1, !tbaa !2432
  %823 = and i32 %817, 255
  %824 = tail call i32 @llvm.ctpop.i32(i32 %823) #8
  %825 = trunc i32 %824 to i8
  %826 = and i8 %825, 1
  %827 = xor i8 %826, 1
  store i8 %827, i8* %74, align 1, !tbaa !2446
  %828 = xor i32 %816, %817
  %829 = lshr i32 %828, 4
  %830 = trunc i32 %829 to i8
  %831 = and i8 %830, 1
  store i8 %831, i8* %75, align 1, !tbaa !2450
  %832 = icmp eq i32 %817, 0
  %833 = zext i1 %832 to i8
  store i8 %833, i8* %76, align 1, !tbaa !2447
  %834 = lshr i32 %817, 31
  %835 = trunc i32 %834 to i8
  store i8 %835, i8* %77, align 1, !tbaa !2448
  %836 = lshr i32 %816, 31
  %837 = xor i32 %834, %836
  %838 = add nuw nsw i32 %837, %834
  %839 = icmp eq i32 %838, 2
  %840 = zext i1 %839 to i8
  store i8 %840, i8* %78, align 1, !tbaa !2449
  %841 = add i64 %813, 9
  store i64 %841, i64* %PC, align 8
  store i32 %817, i32* %815, align 4
  %842 = load i64, i64* %PC, align 8
  %843 = add i64 %842, -197
  store i64 %843, i64* %79, align 8, !tbaa !2428
  br label %block_4017f2

block_40191a:                                     ; preds = %block_401913, %block_401926
  %844 = phi i64 [ %.pre12, %block_401913 ], [ %795, %block_401926 ]
  %845 = load i64, i64* %RBP, align 8
  %846 = add i64 %845, -40
  %847 = add i64 %844, 3
  store i64 %847, i64* %PC, align 8
  %848 = inttoptr i64 %846 to i32*
  %849 = load i32, i32* %848, align 4
  %850 = zext i32 %849 to i64
  store i64 %850, i64* %RAX, align 8, !tbaa !2428
  %851 = add i64 %845, -16
  %852 = add i64 %844, 6
  store i64 %852, i64* %PC, align 8
  %853 = inttoptr i64 %851 to i32*
  %854 = load i32, i32* %853, align 4
  %855 = sub i32 %849, %854
  %856 = icmp ult i32 %849, %854
  %857 = zext i1 %856 to i8
  store i8 %857, i8* %73, align 1, !tbaa !2432
  %858 = and i32 %855, 255
  %859 = tail call i32 @llvm.ctpop.i32(i32 %858) #8
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  %862 = xor i8 %861, 1
  store i8 %862, i8* %74, align 1, !tbaa !2446
  %863 = xor i32 %854, %849
  %864 = xor i32 %863, %855
  %865 = lshr i32 %864, 4
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  store i8 %867, i8* %75, align 1, !tbaa !2450
  %868 = icmp eq i32 %855, 0
  %869 = zext i1 %868 to i8
  store i8 %869, i8* %76, align 1, !tbaa !2447
  %870 = lshr i32 %855, 31
  %871 = trunc i32 %870 to i8
  store i8 %871, i8* %77, align 1, !tbaa !2448
  %872 = lshr i32 %849, 31
  %873 = lshr i32 %854, 31
  %874 = xor i32 %873, %872
  %875 = xor i32 %870, %872
  %876 = add nuw nsw i32 %875, %874
  %877 = icmp eq i32 %876, 2
  %878 = zext i1 %877 to i8
  store i8 %878, i8* %78, align 1, !tbaa !2449
  %879 = icmp ne i8 %871, 0
  %880 = xor i1 %879, %877
  %.v17 = select i1 %880, i64 12, i64 74
  %881 = add i64 %844, %.v17
  store i64 %881, i64* %79, align 8, !tbaa !2428
  br i1 %880, label %block_401926, label %block_401964

block_401913:                                     ; preds = %block_401907
  %882 = add i64 %899, -40
  %883 = add i64 %935, 7
  store i64 %883, i64* %PC, align 8
  %884 = inttoptr i64 %882 to i32*
  store i32 0, i32* %884, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_40191a

block_401894:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %885 = add i64 %344, -32
  %886 = add i64 %351, 4
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i64*
  %888 = load i64, i64* %887, align 8
  store i64 %888, i64* %RAX, align 8, !tbaa !2428
  %889 = add i64 %351, 8
  store i64 %889, i64* %PC, align 8
  %890 = inttoptr i64 %888 to i32*
  %891 = load i32, i32* %890, align 4
  %892 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %891, i32* %892, align 1, !tbaa !2452
  store float 0.000000e+00, float* %91, align 1, !tbaa !2452
  store float 0.000000e+00, float* %92, align 1, !tbaa !2452
  store float 0.000000e+00, float* %93, align 1, !tbaa !2452
  %893 = add i64 %344, -52
  %894 = add i64 %351, 13
  store i64 %894, i64* %PC, align 8
  %895 = load <2 x float>, <2 x float>* %64, align 1
  %896 = extractelement <2 x float> %895, i32 0
  %897 = inttoptr i64 %893 to float*
  store float %896, float* %897, align 4
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_4018a1

block_401907:                                     ; preds = %block_401900, %block_401964
  %898 = phi i64 [ %.pre11, %block_401900 ], [ %457, %block_401964 ]
  %899 = load i64, i64* %RBP, align 8
  %900 = add i64 %899, -44
  %901 = add i64 %898, 3
  store i64 %901, i64* %PC, align 8
  %902 = inttoptr i64 %900 to i32*
  %903 = load i32, i32* %902, align 4
  %904 = zext i32 %903 to i64
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = add i64 %899, -16
  %906 = add i64 %898, 6
  store i64 %906, i64* %PC, align 8
  %907 = inttoptr i64 %905 to i32*
  %908 = load i32, i32* %907, align 4
  %909 = sub i32 %903, %908
  %910 = icmp ult i32 %903, %908
  %911 = zext i1 %910 to i8
  store i8 %911, i8* %73, align 1, !tbaa !2432
  %912 = and i32 %909, 255
  %913 = tail call i32 @llvm.ctpop.i32(i32 %912) #8
  %914 = trunc i32 %913 to i8
  %915 = and i8 %914, 1
  %916 = xor i8 %915, 1
  store i8 %916, i8* %74, align 1, !tbaa !2446
  %917 = xor i32 %908, %903
  %918 = xor i32 %917, %909
  %919 = lshr i32 %918, 4
  %920 = trunc i32 %919 to i8
  %921 = and i8 %920, 1
  store i8 %921, i8* %75, align 1, !tbaa !2450
  %922 = icmp eq i32 %909, 0
  %923 = zext i1 %922 to i8
  store i8 %923, i8* %76, align 1, !tbaa !2447
  %924 = lshr i32 %909, 31
  %925 = trunc i32 %924 to i8
  store i8 %925, i8* %77, align 1, !tbaa !2448
  %926 = lshr i32 %903, 31
  %927 = lshr i32 %908, 31
  %928 = xor i32 %927, %926
  %929 = xor i32 %924, %926
  %930 = add nuw nsw i32 %929, %928
  %931 = icmp eq i32 %930, 2
  %932 = zext i1 %931 to i8
  store i8 %932, i8* %78, align 1, !tbaa !2449
  %933 = icmp ne i8 %925, 0
  %934 = xor i1 %933, %931
  %.v16 = select i1 %934, i64 12, i64 112
  %935 = add i64 %898, %.v16
  store i64 %935, i64* %79, align 8, !tbaa !2428
  br i1 %934, label %block_401913, label %block_401977

block_401900:                                     ; preds = %block_4018d6
  %936 = add i64 %555, -44
  %937 = add i64 %591, 7
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %936 to i32*
  store i32 0, i32* %938, align 4
  %939 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_401907
}

; Function Attrs: noinline
define %struct.Memory* @sub_402810_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402810:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = bitcast %union.VectorReg* %4 to i8*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast %union.VectorReg* %4 to i32*
  store i32 0, i32* %15, align 1, !tbaa !2451
  %16 = getelementptr inbounds i8, i8* %13, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 1, !tbaa !2451
  %18 = bitcast i64* %14 to i32*
  store i32 0, i32* %18, align 1, !tbaa !2451
  %19 = getelementptr inbounds i8, i8* %13, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = bitcast %union.VectorReg* %5 to i8*
  %22 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 16) to i32*), align 16
  %23 = bitcast %union.VectorReg* %5 to i32*
  store i32 %22, i32* %23, align 1, !tbaa !2452
  %24 = getelementptr inbounds i8, i8* %21, i64 4
  %25 = bitcast i8* %24 to float*
  store float 0.000000e+00, float* %25, align 1, !tbaa !2452
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %27 = bitcast i64* %26 to float*
  store float 0.000000e+00, float* %27, align 1, !tbaa !2452
  %28 = getelementptr inbounds i8, i8* %21, i64 12
  %29 = bitcast i8* %28 to float*
  store float 0.000000e+00, float* %29, align 1, !tbaa !2452
  %30 = add i64 %9, -12
  %31 = add i64 %12, 19
  store i64 %31, i64* %PC, align 8
  %32 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 1
  %34 = extractelement <2 x float> %33, i32 0
  %35 = inttoptr i64 %30 to float*
  store float %34, float* %35, align 4
  %36 = load i64, i64* %RBP, align 8
  %37 = add i64 %36, -8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 5
  store i64 %39, i64* %PC, align 8
  %40 = bitcast %union.VectorReg* %5 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 1
  %42 = extractelement <2 x float> %41, i32 0
  %43 = inttoptr i64 %37 to float*
  store float %42, float* %43, align 4
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -20
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 5
  store i64 %47, i64* %PC, align 8
  %48 = bitcast %union.VectorReg* %4 to <2 x float>*
  %49 = load <2 x float>, <2 x float>* %48, align 1
  %50 = extractelement <2 x float> %49, i32 0
  %51 = inttoptr i64 %45 to float*
  store float %50, float* %51, align 4
  %52 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %54 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %56 = bitcast [32 x %union.VectorReg]* %3 to i32*
  %57 = getelementptr inbounds i8, i8* %52, i64 4
  %58 = bitcast i8* %57 to i32*
  %59 = bitcast i64* %53 to i32*
  %60 = getelementptr inbounds i8, i8* %52, i64 12
  %61 = bitcast i8* %60 to i32*
  %62 = bitcast %union.VectorReg* %4 to float*
  %63 = bitcast i8* %16 to float*
  %64 = bitcast i64* %14 to float*
  %65 = bitcast i8* %19 to float*
  %66 = bitcast %union.VectorReg* %4 to double*
  %67 = bitcast %union.VectorReg* %4 to double*
  %68 = bitcast [32 x %union.VectorReg]* %3 to double*
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %72 = bitcast [32 x %union.VectorReg]* %3 to double*
  %73 = bitcast i64* %53 to double*
  %74 = bitcast i64* %14 to <2 x i32>*
  %75 = bitcast %union.VectorReg* %4 to <2 x float>*
  %76 = bitcast [32 x %union.VectorReg]* %3 to float*
  %77 = bitcast i8* %57 to float*
  %78 = bitcast i64* %53 to float*
  %79 = bitcast i8* %60 to float*
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre = load i64, i64* %PC, align 8
  br label %block_40282e

block_40282e:                                     ; preds = %block_40284a, %block_402810
  %84 = phi i64 [ %.pre, %block_402810 ], [ %224, %block_40284a ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402810 ], [ %119, %block_40284a ]
  store i32 0, i32* %56, align 1, !tbaa !2451
  store i32 0, i32* %58, align 1, !tbaa !2451
  store i32 0, i32* %59, align 1, !tbaa !2451
  store i32 0, i32* %61, align 1, !tbaa !2451
  %85 = load i64, i64* %RBP, align 8
  %86 = add i64 %85, -20
  %87 = add i64 %84, 8
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = bitcast %union.VectorReg* %4 to i32*
  store i32 %89, i32* %90, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  store float 0.000000e+00, float* %65, align 1, !tbaa !2452
  %91 = load <2 x float>, <2 x float>* %48, align 1
  %92 = extractelement <2 x float> %91, i32 0
  %93 = fpext float %92 to double
  store double %93, double* %66, align 1, !tbaa !2454
  %94 = add i64 %84, 16
  store i64 %94, i64* %PC, align 8
  %95 = load double, double* %68, align 1
  %96 = fcmp uno double %93, %95
  br i1 %96, label %97, label %107

; <label>:97:                                     ; preds = %block_40282e
  %98 = fadd double %93, %95
  %99 = bitcast double %98 to i64
  %100 = and i64 %99, 9221120237041090560
  %101 = icmp eq i64 %100, 9218868437227405312
  %102 = and i64 %99, 2251799813685247
  %103 = icmp ne i64 %102, 0
  %104 = and i1 %101, %103
  br i1 %104, label %105, label %113

; <label>:105:                                    ; preds = %97
  %106 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %94, %struct.Memory* %MEMORY.0) #9
  %.pre1 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:107:                                    ; preds = %block_40282e
  %108 = fcmp ogt double %93, %95
  br i1 %108, label %113, label %109

; <label>:109:                                    ; preds = %107
  %110 = fcmp olt double %93, %95
  br i1 %110, label %113, label %111

; <label>:111:                                    ; preds = %109
  %112 = fcmp oeq double %93, %95
  br i1 %112, label %113, label %117

; <label>:113:                                    ; preds = %111, %109, %107, %97
  %114 = phi i8 [ 0, %107 ], [ 0, %109 ], [ 1, %111 ], [ 1, %97 ]
  %115 = phi i8 [ 0, %107 ], [ 0, %109 ], [ 0, %111 ], [ 1, %97 ]
  %116 = phi i8 [ 0, %107 ], [ 1, %109 ], [ 0, %111 ], [ 1, %97 ]
  store i8 %114, i8* %70, align 1, !tbaa !2456
  store i8 %115, i8* %71, align 1, !tbaa !2456
  store i8 %116, i8* %80, align 1, !tbaa !2456
  br label %117

; <label>:117:                                    ; preds = %113, %111
  store i8 0, i8* %81, align 1, !tbaa !2456
  store i8 0, i8* %82, align 1, !tbaa !2456
  store i8 0, i8* %83, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %117, %105
  %118 = phi i64 [ %.pre1, %105 ], [ %94, %117 ]
  %119 = phi %struct.Memory* [ %106, %105 ], [ %MEMORY.0, %117 ]
  %120 = load i8, i8* %70, align 1, !tbaa !2447
  %121 = icmp eq i8 %120, 0
  %.v = select i1 %121, i64 100, i64 6
  %122 = add i64 %118, %.v
  store i64 %122, i64* %69, align 8, !tbaa !2428
  br i1 %121, label %block_4028a2, label %block_402844

block_40284a:                                     ; preds = %block_402844
  %123 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 80) to double*), align 16
  store double %123, double* %72, align 1, !tbaa !2454
  store double 0.000000e+00, double* %73, align 1, !tbaa !2454
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -8
  %126 = add i64 %227, 13
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i32*
  %128 = load i32, i32* %127, align 4
  %129 = bitcast %union.VectorReg* %4 to i32*
  store i32 %128, i32* %129, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  store float 0.000000e+00, float* %65, align 1, !tbaa !2452
  %130 = load <2 x float>, <2 x float>* %48, align 1
  %131 = extractelement <2 x float> %130, i32 0
  %132 = fpext float %131 to double
  %133 = bitcast i64* %14 to <2 x i32>*
  %134 = load <2 x i32>, <2 x i32>* %133, align 1
  %135 = fsub double %132, %123
  %136 = bitcast double %135 to <2 x i32>
  %137 = fptrunc double %135 to float
  store float %137, float* %62, align 1, !tbaa !2452
  %138 = extractelement <2 x i32> %136, i32 1
  store i32 %138, i32* %17, align 1, !tbaa !2452
  %139 = extractelement <2 x i32> %134, i32 0
  store i32 %139, i32* %18, align 1, !tbaa !2452
  %140 = extractelement <2 x i32> %134, i32 1
  store i32 %140, i32* %20, align 1, !tbaa !2452
  %141 = add i64 %124, -12
  %142 = add i64 %227, 30
  store i64 %142, i64* %PC, align 8
  %143 = load <2 x float>, <2 x float>* %48, align 1
  %144 = extractelement <2 x float> %143, i32 0
  %145 = inttoptr i64 %141 to float*
  store float %144, float* %145, align 4
  %146 = load i64, i64* %RBP, align 8
  %147 = add i64 %146, -12
  %148 = load i64, i64* %PC, align 8
  %149 = add i64 %148, 5
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %147 to float*
  %151 = inttoptr i64 %147 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = bitcast %union.VectorReg* %4 to i32*
  store i32 %152, i32* %153, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  store float 0.000000e+00, float* %65, align 1, !tbaa !2452
  %154 = add i64 %148, 10
  store i64 %154, i64* %PC, align 8
  %155 = load <2 x float>, <2 x float>* %75, align 1
  %156 = load <2 x i32>, <2 x i32>* %74, align 1
  %157 = load float, float* %150, align 4
  %158 = extractelement <2 x float> %155, i32 0
  %159 = fadd float %158, %157
  store float %159, float* %62, align 1, !tbaa !2452
  %160 = bitcast <2 x float> %155 to <2 x i32>
  %161 = extractelement <2 x i32> %160, i32 1
  store i32 %161, i32* %17, align 1, !tbaa !2452
  %162 = extractelement <2 x i32> %156, i32 0
  store i32 %162, i32* %18, align 1, !tbaa !2452
  %163 = extractelement <2 x i32> %156, i32 1
  store i32 %163, i32* %20, align 1, !tbaa !2452
  %164 = add i64 %148, 15
  store i64 %164, i64* %PC, align 8
  %165 = load <2 x float>, <2 x float>* %75, align 1
  %166 = load <2 x i32>, <2 x i32>* %74, align 1
  %167 = load float, float* %150, align 4
  %168 = extractelement <2 x float> %165, i32 0
  %169 = fadd float %168, %167
  store float %169, float* %62, align 1, !tbaa !2452
  %170 = bitcast <2 x float> %165 to <2 x i32>
  %171 = extractelement <2 x i32> %170, i32 1
  store i32 %171, i32* %17, align 1, !tbaa !2452
  %172 = extractelement <2 x i32> %166, i32 0
  store i32 %172, i32* %18, align 1, !tbaa !2452
  %173 = extractelement <2 x i32> %166, i32 1
  store i32 %173, i32* %20, align 1, !tbaa !2452
  %174 = add i64 %146, -16
  %175 = add i64 %148, 20
  store i64 %175, i64* %PC, align 8
  %176 = load <2 x float>, <2 x float>* %48, align 1
  %177 = extractelement <2 x float> %176, i32 0
  %178 = inttoptr i64 %174 to float*
  store float %177, float* %178, align 4
  %179 = load i64, i64* %RBP, align 8
  %180 = add i64 %179, -16
  %181 = load i64, i64* %PC, align 8
  %182 = add i64 %181, 5
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %180 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast %union.VectorReg* %4 to i32*
  store i32 %184, i32* %185, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  store float 0.000000e+00, float* %65, align 1, !tbaa !2452
  %186 = load <2 x float>, <2 x float>* %48, align 1
  %187 = extractelement <2 x float> %186, i32 0
  %188 = fpext float %187 to double
  %189 = load i64, i64* %14, align 1
  %190 = load double, double* %68, align 1
  %191 = fsub double %188, %190
  %192 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %193 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %194 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %195 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %196 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %192, i32* %196, align 1, !tbaa !2452
  %197 = bitcast i8* %57 to i32*
  store i32 %193, i32* %197, align 1, !tbaa !2452
  %198 = bitcast i64* %53 to i32*
  store i32 %194, i32* %198, align 1, !tbaa !2452
  %199 = bitcast i8* %60 to i32*
  store i32 %195, i32* %199, align 1, !tbaa !2452
  %200 = bitcast double %191 to i64
  %201 = load i64, i64* %54, align 1
  %202 = load i64, i64* %55, align 1
  %203 = and i64 %201, %200
  %204 = and i64 %202, %189
  %205 = trunc i64 %203 to i32
  %206 = lshr i64 %203, 32
  %207 = trunc i64 %206 to i32
  store i32 %205, i32* %15, align 1, !tbaa !2451
  store i32 %207, i32* %17, align 1, !tbaa !2451
  %208 = trunc i64 %204 to i32
  store i32 %208, i32* %18, align 1, !tbaa !2451
  %209 = lshr i64 %204, 32
  %210 = trunc i64 %209 to i32
  store i32 %210, i32* %20, align 1, !tbaa !2451
  %211 = bitcast i64 %201 to <2 x i32>
  %212 = bitcast i64 %202 to <2 x i32>
  %213 = load double, double* %67, align 1
  %214 = fptrunc double %213 to float
  store float %214, float* %76, align 1, !tbaa !2452
  %215 = extractelement <2 x i32> %211, i32 1
  store i32 %215, i32* %58, align 1, !tbaa !2452
  %216 = extractelement <2 x i32> %212, i32 0
  store i32 %216, i32* %59, align 1, !tbaa !2452
  %217 = extractelement <2 x i32> %212, i32 1
  store i32 %217, i32* %61, align 1, !tbaa !2452
  %218 = add i64 %179, -20
  %219 = add i64 %181, 33
  store i64 %219, i64* %PC, align 8
  %220 = load <2 x float>, <2 x float>* %32, align 1
  %221 = extractelement <2 x float> %220, i32 0
  %222 = inttoptr i64 %218 to float*
  store float %221, float* %222, align 4
  %223 = load i64, i64* %PC, align 8
  %224 = add i64 %223, -111
  store i64 %224, i64* %69, align 8, !tbaa !2428
  br label %block_40282e

block_402844:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %225 = load i8, i8* %71, align 1, !tbaa !2446
  %226 = icmp ne i8 %225, 0
  %.v2 = select i1 %226, i64 94, i64 6
  %227 = add i64 %122, %.v2
  store i64 %227, i64* %69, align 8, !tbaa !2428
  %228 = icmp eq i8 %225, 1
  br i1 %228, label %block_4028a2, label %block_40284a

block_4028a2:                                     ; preds = %block_402844, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %229 = phi i64 [ %227, %block_402844 ], [ %122, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %230 = load i64, i64* %RBP, align 8
  %231 = add i64 %230, -20
  %232 = add i64 %229, 5
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %234, i32* %235, align 1, !tbaa !2452
  store float 0.000000e+00, float* %77, align 1, !tbaa !2452
  store float 0.000000e+00, float* %78, align 1, !tbaa !2452
  store float 0.000000e+00, float* %79, align 1, !tbaa !2452
  %236 = load <2 x float>, <2 x float>* %32, align 1
  %237 = extractelement <2 x float> %236, i32 0
  %238 = fpext float %237 to double
  store double %238, double* %72, align 1, !tbaa !2454
  %239 = add i64 %230, -4
  %240 = add i64 %229, 14
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = bitcast %union.VectorReg* %4 to i32*
  store i32 %242, i32* %243, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  store float 0.000000e+00, float* %65, align 1, !tbaa !2452
  %244 = load <2 x float>, <2 x float>* %48, align 1
  %245 = extractelement <2 x float> %244, i32 0
  %246 = fpext float %245 to double
  %247 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %248 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %249 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %250 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %251 = bitcast %union.VectorReg* %5 to i32*
  store i32 %247, i32* %251, align 1, !tbaa !2452
  %252 = bitcast i8* %24 to i32*
  store i32 %248, i32* %252, align 1, !tbaa !2452
  %253 = bitcast i64* %26 to i32*
  store i32 %249, i32* %253, align 1, !tbaa !2452
  %254 = bitcast i8* %28 to i32*
  store i32 %250, i32* %254, align 1, !tbaa !2452
  %255 = bitcast double %246 to i64
  %256 = load i64, i64* %14, align 1
  %257 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  %258 = load i64, i64* %257, align 1
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %260 = load i64, i64* %259, align 1
  %261 = and i64 %258, %255
  %262 = and i64 %260, %256
  %263 = trunc i64 %261 to i32
  %264 = lshr i64 %261, 32
  %265 = trunc i64 %264 to i32
  store i32 %263, i32* %15, align 1, !tbaa !2451
  store i32 %265, i32* %17, align 1, !tbaa !2451
  %266 = trunc i64 %262 to i32
  store i32 %266, i32* %18, align 1, !tbaa !2451
  %267 = lshr i64 %262, 32
  %268 = trunc i64 %267 to i32
  store i32 %268, i32* %20, align 1, !tbaa !2451
  %269 = bitcast i64* %53 to <2 x i32>*
  %270 = load <2 x i32>, <2 x i32>* %269, align 1
  %271 = load double, double* %67, align 1
  %272 = fmul double %238, %271
  %273 = bitcast double %272 to <2 x i32>
  %274 = fptrunc double %272 to float
  store float %274, float* %76, align 1, !tbaa !2452
  %275 = extractelement <2 x i32> %273, i32 1
  store i32 %275, i32* %58, align 1, !tbaa !2452
  %276 = extractelement <2 x i32> %270, i32 0
  store i32 %276, i32* %59, align 1, !tbaa !2452
  %277 = extractelement <2 x i32> %270, i32 1
  store i32 %277, i32* %61, align 1, !tbaa !2452
  %278 = add i64 %229, 38
  store i64 %278, i64* %PC, align 8
  %279 = load i64, i64* %8, align 8, !tbaa !2428
  %280 = add i64 %279, 8
  %281 = inttoptr i64 %279 to i64*
  %282 = load i64, i64* %281, align 8
  store i64 %282, i64* %RBP, align 8, !tbaa !2428
  store i64 %280, i64* %8, align 8, !tbaa !2428
  %283 = add i64 %229, 39
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %280 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %69, align 8, !tbaa !2428
  %286 = add i64 %279, 16
  store i64 %286, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %119
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a50_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402a50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %17 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %17, align 1, !tbaa !2451
  %18 = getelementptr inbounds i8, i8* %15, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 0, i32* %19, align 1, !tbaa !2451
  %20 = bitcast i64* %16 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = getelementptr inbounds i8, i8* %15, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 0, i32* %22, align 1, !tbaa !2451
  %23 = add i64 %11, -16
  %24 = load i32, i32* %EDI, align 4
  %25 = add i64 %14, 9
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -60
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -56
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -40
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 5
  store i64 %64, i64* %PC, align 8
  %65 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 1
  %67 = extractelement <2 x float> %66, i32 0
  %68 = inttoptr i64 %62 to float*
  store float %67, float* %68, align 4
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 4
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %75, align 1, !tbaa !2432
  %76 = and i32 %74, 255
  %77 = tail call i32 @llvm.ctpop.i32(i32 %76) #8
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %80, i8* %81, align 1, !tbaa !2446
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %82, align 1, !tbaa !2450
  %83 = icmp eq i32 %74, 0
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = lshr i32 %74, 31
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %89, align 1, !tbaa !2449
  %90 = xor i1 %83, true
  %91 = icmp eq i8 %87, 0
  %92 = and i1 %91, %90
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %.v = select i1 %92, i64 23, i64 10
  %94 = add i64 %71, %.v
  store i64 %94, i64* %93, align 8, !tbaa !2428
  br i1 %92, label %block_402a93, label %block_402a86

block_402b9a:                                     ; preds = %block_402b58
  %95 = add i64 %101, -4
  %96 = add i64 %137, 10
  store i64 %96, i64* %PC, align 8
  %97 = load <2 x float>, <2 x float>* %65, align 1
  %98 = extractelement <2 x float> %97, i32 0
  %99 = inttoptr i64 %95 to float*
  store float %98, float* %99, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_402ba4

block_402b58:                                     ; preds = %block_402b64, %block_402b51
  %100 = phi i64 [ %697, %block_402b64 ], [ %.pre, %block_402b51 ]
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -44
  %103 = add i64 %100, 3
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i64
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = add i64 %101, -8
  %108 = add i64 %100, 6
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = sub i32 %105, %110
  %112 = icmp ult i32 %105, %110
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %75, align 1, !tbaa !2432
  %114 = and i32 %111, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #8
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %81, align 1, !tbaa !2446
  %119 = xor i32 %110, %105
  %120 = xor i32 %119, %111
  %121 = lshr i32 %120, 4
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  store i8 %123, i8* %82, align 1, !tbaa !2450
  %124 = icmp eq i32 %111, 0
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %85, align 1, !tbaa !2447
  %126 = lshr i32 %111, 31
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %88, align 1, !tbaa !2448
  %128 = lshr i32 %105, 31
  %129 = lshr i32 %110, 31
  %130 = xor i32 %129, %128
  %131 = xor i32 %126, %128
  %132 = add nuw nsw i32 %131, %130
  %133 = icmp eq i32 %132, 2
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %89, align 1, !tbaa !2449
  %135 = icmp ne i8 %127, 0
  %136 = xor i1 %135, %133
  %.v20 = select i1 %136, i64 12, i64 66
  %137 = add i64 %100, %.v20
  %138 = add i64 %101, -40
  %139 = add i64 %137, 5
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %141, i32* %142, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  store float 0.000000e+00, float* %600, align 1, !tbaa !2452
  store float 0.000000e+00, float* %601, align 1, !tbaa !2452
  br i1 %136, label %block_402b64, label %block_402b9a

block_402ba4:                                     ; preds = %block_402b42, %block_402a86, %block_402b9a
  %.pre-phi14 = phi float* [ %493, %block_402b42 ], [ %.pre13, %block_402a86 ], [ %601, %block_402b9a ]
  %.pre-phi12 = phi float* [ %492, %block_402b42 ], [ %.pre11, %block_402a86 ], [ %600, %block_402b9a ]
  %.pre-phi10 = phi float* [ %491, %block_402b42 ], [ %.pre9, %block_402a86 ], [ %599, %block_402b9a ]
  %.pre-phi = phi float* [ %490, %block_402b42 ], [ %.pre8, %block_402a86 ], [ %598, %block_402b9a ]
  %143 = phi i64 [ %704, %block_402b42 ], [ %568, %block_402a86 ], [ %.pre7, %block_402b9a ]
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -4
  %146 = add i64 %143, 5
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i32*
  %148 = load i32, i32* %147, align 4
  %149 = bitcast float* %.pre-phi to i32*
  store i32 %148, i32* %149, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi10, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi12, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi14, align 1, !tbaa !2452
  %150 = add i64 %143, 6
  store i64 %150, i64* %PC, align 8
  %151 = load i64, i64* %10, align 8, !tbaa !2428
  %152 = add i64 %151, 8
  %153 = inttoptr i64 %151 to i64*
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %RBP, align 8, !tbaa !2428
  store i64 %152, i64* %10, align 8, !tbaa !2428
  %155 = add i64 %143, 7
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %152 to i64*
  %157 = load i64, i64* %156, align 8
  store i64 %157, i64* %93, align 8, !tbaa !2428
  %158 = add i64 %151, 16
  store i64 %158, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402ad8:                                     ; preds = %block_402ace
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %75, align 1, !tbaa !2432
  store i8 1, i8* %81, align 1, !tbaa !2446
  store i8 1, i8* %85, align 1, !tbaa !2447
  store i8 0, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %82, align 1, !tbaa !2450
  %159 = add i64 %281, -8
  %160 = add i64 %296, 5
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %159 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = sub i32 0, %162
  %164 = lshr i32 %163, 31
  %165 = sub i32 1, %162
  %166 = zext i32 %165 to i64
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = icmp ult i32 %165, %163
  %168 = icmp eq i32 %165, 0
  %169 = or i1 %167, %168
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %75, align 1, !tbaa !2432
  %171 = and i32 %165, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #8
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %81, align 1, !tbaa !2446
  %176 = xor i32 %165, %163
  %177 = lshr i32 %176, 4
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %82, align 1, !tbaa !2450
  %180 = icmp eq i32 %165, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %85, align 1, !tbaa !2447
  %182 = lshr i32 %165, 31
  %183 = trunc i32 %182 to i8
  store i8 %183, i8* %88, align 1, !tbaa !2448
  %184 = xor i32 %182, %164
  %185 = add nuw nsw i32 %184, %182
  %186 = icmp eq i32 %185, 2
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %89, align 1, !tbaa !2449
  %188 = add i64 %296, 12
  store i64 %188, i64* %PC, align 8
  %189 = load i32, i32* %284, align 4
  %190 = sext i32 %165 to i64
  %191 = sext i32 %189 to i64
  %192 = mul nsw i64 %191, %190
  %193 = trunc i64 %192 to i32
  %194 = and i64 %192, 4294967295
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = shl i64 %192, 32
  %196 = ashr exact i64 %195, 32
  %197 = icmp ne i64 %196, %192
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %75, align 1, !tbaa !2432
  %199 = and i32 %193, 255
  %200 = tail call i32 @llvm.ctpop.i32(i32 %199) #8
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  store i8 %203, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  store i8 0, i8* %85, align 1, !tbaa !2447
  %204 = lshr i32 %193, 31
  %205 = trunc i32 %204 to i8
  store i8 %205, i8* %88, align 1, !tbaa !2448
  store i8 %198, i8* %89, align 1, !tbaa !2449
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -52
  %208 = trunc i64 %192 to i32
  %209 = add i64 %296, 15
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %207 to i32*
  store i32 %208, i32* %210, align 4
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_402ae7

block_402aee:                                     ; preds = %block_402ae7, %block_402afa
  %211 = phi i64 [ %.pre6, %block_402ae7 ], [ %484, %block_402afa ]
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -44
  %214 = add i64 %211, 3
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = zext i32 %216 to i64
  store i64 %217, i64* %RAX, align 8, !tbaa !2428
  %218 = add i64 %212, -8
  %219 = add i64 %211, 6
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = sub i32 %216, %221
  %223 = icmp ult i32 %216, %221
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %75, align 1, !tbaa !2432
  %225 = and i32 %222, 255
  %226 = tail call i32 @llvm.ctpop.i32(i32 %225) #8
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  store i8 %229, i8* %81, align 1, !tbaa !2446
  %230 = xor i32 %221, %216
  %231 = xor i32 %230, %222
  %232 = lshr i32 %231, 4
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  store i8 %234, i8* %82, align 1, !tbaa !2450
  %235 = icmp eq i32 %222, 0
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %85, align 1, !tbaa !2447
  %237 = lshr i32 %222, 31
  %238 = trunc i32 %237 to i8
  store i8 %238, i8* %88, align 1, !tbaa !2448
  %239 = lshr i32 %216, 31
  %240 = lshr i32 %221, 31
  %241 = xor i32 %240, %239
  %242 = xor i32 %237, %239
  %243 = add nuw nsw i32 %242, %241
  %244 = icmp eq i32 %243, 2
  %245 = zext i1 %244 to i8
  store i8 %245, i8* %89, align 1, !tbaa !2449
  %246 = icmp ne i8 %238, 0
  %247 = xor i1 %246, %244
  %.v19 = select i1 %247, i64 12, i64 84
  %248 = add i64 %211, %.v19
  %249 = add i64 %212, -40
  %250 = add i64 %248, 5
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %252, i32* %253, align 1, !tbaa !2452
  store float 0.000000e+00, float* %491, align 1, !tbaa !2452
  store float 0.000000e+00, float* %492, align 1, !tbaa !2452
  store float 0.000000e+00, float* %493, align 1, !tbaa !2452
  br i1 %247, label %block_402afa, label %block_402b42

block_402a9d:                                     ; preds = %block_402a93
  %254 = add i64 %69, -36
  %255 = add i64 %594, 4
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = add i32 %257, -1
  %259 = icmp eq i32 %257, 0
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %75, align 1, !tbaa !2432
  %261 = and i32 %258, 255
  %262 = tail call i32 @llvm.ctpop.i32(i32 %261) #8
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  store i8 %265, i8* %81, align 1, !tbaa !2446
  %266 = xor i32 %257, %258
  %267 = lshr i32 %266, 4
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  store i8 %269, i8* %82, align 1, !tbaa !2450
  %270 = icmp eq i32 %258, 0
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %85, align 1, !tbaa !2447
  %272 = lshr i32 %258, 31
  %273 = trunc i32 %272 to i8
  store i8 %273, i8* %88, align 1, !tbaa !2448
  %274 = lshr i32 %257, 31
  %275 = xor i32 %272, %274
  %276 = add nuw nsw i32 %275, %274
  %277 = icmp eq i32 %276, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %89, align 1, !tbaa !2449
  %.v16 = select i1 %270, i64 180, i64 10
  %279 = add i64 %594, %.v16
  store i64 %279, i64* %93, align 8, !tbaa !2428
  br i1 %270, label %block_402b51, label %block_402aa7

block_402ace:                                     ; preds = %block_402aa7, %block_402abf
  %280 = phi i64 [ %.pre3, %block_402abf ], [ %322, %block_402aa7 ]
  %281 = phi i64 [ %.pre2, %block_402abf ], [ %306, %block_402aa7 ]
  %282 = add i64 %281, -36
  %283 = add i64 %280, 4
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i32*
  %285 = load i32, i32* %284, align 4
  store i8 0, i8* %75, align 1, !tbaa !2432
  %286 = and i32 %285, 255
  %287 = tail call i32 @llvm.ctpop.i32(i32 %286) #8
  %288 = trunc i32 %287 to i8
  %289 = and i8 %288, 1
  %290 = xor i8 %289, 1
  store i8 %290, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  %291 = icmp eq i32 %285, 0
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %85, align 1, !tbaa !2447
  %293 = lshr i32 %285, 31
  %294 = trunc i32 %293 to i8
  store i8 %294, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  %295 = icmp ne i8 %294, 0
  %.v18 = select i1 %295, i64 10, i64 25
  %296 = add i64 %280, %.v18
  store i64 %296, i64* %93, align 8, !tbaa !2428
  br i1 %295, label %block_402ad8, label %block_402ae7

block_402aa7:                                     ; preds = %block_402a93, %block_402a9d
  %297 = phi i64 [ %594, %block_402a93 ], [ %279, %block_402a9d ]
  %298 = add i64 %69, -48
  %299 = add i64 %297, 7
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %298 to i32*
  store i32 0, i32* %300, align 4
  %301 = load i64, i64* %RBP, align 8
  %302 = add i64 %301, -52
  %303 = load i64, i64* %PC, align 8
  %304 = add i64 %303, 7
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %302 to i32*
  store i32 0, i32* %305, align 4
  %306 = load i64, i64* %RBP, align 8
  %307 = add i64 %306, -20
  %308 = load i64, i64* %PC, align 8
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %307 to i32*
  %311 = load i32, i32* %310, align 4
  store i8 0, i8* %75, align 1, !tbaa !2432
  %312 = and i32 %311, 255
  %313 = tail call i32 @llvm.ctpop.i32(i32 %312) #8
  %314 = trunc i32 %313 to i8
  %315 = and i8 %314, 1
  %316 = xor i8 %315, 1
  store i8 %316, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  %317 = icmp eq i32 %311, 0
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %85, align 1, !tbaa !2447
  %319 = lshr i32 %311, 31
  %320 = trunc i32 %319 to i8
  store i8 %320, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  %321 = icmp ne i8 %320, 0
  %.v17 = select i1 %321, i64 10, i64 25
  %322 = add i64 %308, %.v17
  store i64 %322, i64* %93, align 8, !tbaa !2428
  br i1 %321, label %block_402abf, label %block_402ace

block_402afa:                                     ; preds = %block_402aee
  %323 = inttoptr i64 %249 to float*
  %324 = add i64 %212, -16
  %325 = add i64 %248, 9
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326, align 8
  store i64 %327, i64* %RAX, align 8, !tbaa !2428
  %328 = add i64 %212, -48
  %329 = add i64 %248, 13
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = sext i32 %331 to i64
  store i64 %332, i64* %RCX, align 8, !tbaa !2428
  %333 = shl nsw i64 %332, 2
  %334 = add i64 %333, %327
  %335 = add i64 %248, 18
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %334 to i32*
  %337 = load i32, i32* %336, align 4
  %338 = bitcast %union.VectorReg* %7 to i32*
  store i32 %337, i32* %338, align 1, !tbaa !2452
  store float 0.000000e+00, float* %497, align 1, !tbaa !2452
  store float 0.000000e+00, float* %499, align 1, !tbaa !2452
  store float 0.000000e+00, float* %501, align 1, !tbaa !2452
  %339 = add i64 %212, -32
  %340 = add i64 %248, 22
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %212, -52
  %344 = add i64 %248, 26
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %343 to i32*
  %346 = load i32, i32* %345, align 4
  %347 = sext i32 %346 to i64
  store i64 %347, i64* %RCX, align 8, !tbaa !2428
  %348 = shl nsw i64 %347, 2
  %349 = add i64 %348, %342
  %350 = add i64 %248, 31
  store i64 %350, i64* %PC, align 8
  %351 = load <2 x float>, <2 x float>* %502, align 1
  %352 = load <2 x i32>, <2 x i32>* %503, align 1
  %353 = inttoptr i64 %349 to float*
  %354 = load float, float* %353, align 4
  %355 = extractelement <2 x float> %351, i32 0
  %356 = fmul float %355, %354
  store float %356, float* %495, align 1, !tbaa !2452
  %357 = bitcast <2 x float> %351 to <2 x i32>
  %358 = extractelement <2 x i32> %357, i32 1
  store i32 %358, i32* %504, align 1, !tbaa !2452
  %359 = extractelement <2 x i32> %352, i32 0
  store i32 %359, i32* %505, align 1, !tbaa !2452
  %360 = extractelement <2 x i32> %352, i32 1
  store i32 %360, i32* %506, align 1, !tbaa !2452
  %361 = load <2 x float>, <2 x float>* %507, align 1
  %362 = load <2 x i32>, <2 x i32>* %508, align 1
  %363 = load <2 x float>, <2 x float>* %509, align 1
  %364 = extractelement <2 x float> %361, i32 0
  %365 = extractelement <2 x float> %363, i32 0
  %366 = fadd float %364, %365
  store float %366, float* %490, align 1, !tbaa !2452
  %367 = bitcast <2 x float> %361 to <2 x i32>
  %368 = extractelement <2 x i32> %367, i32 1
  store i32 %368, i32* %19, align 1, !tbaa !2452
  %369 = extractelement <2 x i32> %362, i32 0
  store i32 %369, i32* %20, align 1, !tbaa !2452
  %370 = extractelement <2 x i32> %362, i32 1
  store i32 %370, i32* %22, align 1, !tbaa !2452
  %371 = add i64 %248, 40
  store i64 %371, i64* %PC, align 8
  %372 = load <2 x float>, <2 x float>* %65, align 1
  %373 = extractelement <2 x float> %372, i32 0
  store float %373, float* %323, align 4
  %374 = load i64, i64* %RBP, align 8
  %375 = add i64 %374, -48
  %376 = load i64, i64* %PC, align 8
  %377 = add i64 %376, 3
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %375 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %RDX, align 8, !tbaa !2428
  %381 = add i64 %374, -20
  %382 = add i64 %376, 6
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = add i32 %384, %379
  %386 = zext i32 %385 to i64
  store i64 %386, i64* %RDX, align 8, !tbaa !2428
  %387 = icmp ult i32 %385, %379
  %388 = icmp ult i32 %385, %384
  %389 = or i1 %387, %388
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %75, align 1, !tbaa !2432
  %391 = and i32 %385, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #8
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %81, align 1, !tbaa !2446
  %396 = xor i32 %384, %379
  %397 = xor i32 %396, %385
  %398 = lshr i32 %397, 4
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  store i8 %400, i8* %82, align 1, !tbaa !2450
  %401 = icmp eq i32 %385, 0
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %85, align 1, !tbaa !2447
  %403 = lshr i32 %385, 31
  %404 = trunc i32 %403 to i8
  store i8 %404, i8* %88, align 1, !tbaa !2448
  %405 = lshr i32 %379, 31
  %406 = lshr i32 %384, 31
  %407 = xor i32 %403, %405
  %408 = xor i32 %403, %406
  %409 = add nuw nsw i32 %407, %408
  %410 = icmp eq i32 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %89, align 1, !tbaa !2449
  %412 = add i64 %376, 9
  store i64 %412, i64* %PC, align 8
  store i32 %385, i32* %378, align 4
  %413 = load i64, i64* %RBP, align 8
  %414 = add i64 %413, -52
  %415 = load i64, i64* %PC, align 8
  %416 = add i64 %415, 3
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %414 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %RDX, align 8, !tbaa !2428
  %420 = add i64 %413, -36
  %421 = add i64 %415, 6
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %420 to i32*
  %423 = load i32, i32* %422, align 4
  %424 = add i32 %423, %418
  %425 = zext i32 %424 to i64
  store i64 %425, i64* %RDX, align 8, !tbaa !2428
  %426 = icmp ult i32 %424, %418
  %427 = icmp ult i32 %424, %423
  %428 = or i1 %426, %427
  %429 = zext i1 %428 to i8
  store i8 %429, i8* %75, align 1, !tbaa !2432
  %430 = and i32 %424, 255
  %431 = tail call i32 @llvm.ctpop.i32(i32 %430) #8
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  %434 = xor i8 %433, 1
  store i8 %434, i8* %81, align 1, !tbaa !2446
  %435 = xor i32 %423, %418
  %436 = xor i32 %435, %424
  %437 = lshr i32 %436, 4
  %438 = trunc i32 %437 to i8
  %439 = and i8 %438, 1
  store i8 %439, i8* %82, align 1, !tbaa !2450
  %440 = icmp eq i32 %424, 0
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %85, align 1, !tbaa !2447
  %442 = lshr i32 %424, 31
  %443 = trunc i32 %442 to i8
  store i8 %443, i8* %88, align 1, !tbaa !2448
  %444 = lshr i32 %418, 31
  %445 = lshr i32 %423, 31
  %446 = xor i32 %442, %444
  %447 = xor i32 %442, %445
  %448 = add nuw nsw i32 %446, %447
  %449 = icmp eq i32 %448, 2
  %450 = zext i1 %449 to i8
  store i8 %450, i8* %89, align 1, !tbaa !2449
  %451 = add i64 %415, 9
  store i64 %451, i64* %PC, align 8
  store i32 %424, i32* %417, align 4
  %452 = load i64, i64* %RBP, align 8
  %453 = add i64 %452, -44
  %454 = load i64, i64* %PC, align 8
  %455 = add i64 %454, 3
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %453 to i32*
  %457 = load i32, i32* %456, align 4
  %458 = add i32 %457, 1
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RAX, align 8, !tbaa !2428
  %460 = icmp eq i32 %457, -1
  %461 = icmp eq i32 %458, 0
  %462 = or i1 %460, %461
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %75, align 1, !tbaa !2432
  %464 = and i32 %458, 255
  %465 = tail call i32 @llvm.ctpop.i32(i32 %464) #8
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  store i8 %468, i8* %81, align 1, !tbaa !2446
  %469 = xor i32 %457, %458
  %470 = lshr i32 %469, 4
  %471 = trunc i32 %470 to i8
  %472 = and i8 %471, 1
  store i8 %472, i8* %82, align 1, !tbaa !2450
  %473 = icmp eq i32 %458, 0
  %474 = zext i1 %473 to i8
  store i8 %474, i8* %85, align 1, !tbaa !2447
  %475 = lshr i32 %458, 31
  %476 = trunc i32 %475 to i8
  store i8 %476, i8* %88, align 1, !tbaa !2448
  %477 = lshr i32 %457, 31
  %478 = xor i32 %475, %477
  %479 = add nuw nsw i32 %478, %475
  %480 = icmp eq i32 %479, 2
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %89, align 1, !tbaa !2449
  %482 = add i64 %454, 9
  store i64 %482, i64* %PC, align 8
  store i32 %458, i32* %456, align 4
  %483 = load i64, i64* %PC, align 8
  %484 = add i64 %483, -79
  store i64 %484, i64* %93, align 8, !tbaa !2428
  br label %block_402aee

block_402ae7:                                     ; preds = %block_402ace, %block_402ad8
  %485 = phi i64 [ %296, %block_402ace ], [ %.pre5, %block_402ad8 ]
  %486 = phi i64 [ %281, %block_402ace ], [ %.pre4, %block_402ad8 ]
  %487 = add i64 %486, -44
  %488 = add i64 %485, 7
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i32*
  store i32 0, i32* %489, align 4
  %490 = bitcast [32 x %union.VectorReg]* %6 to float*
  %491 = bitcast i8* %18 to float*
  %492 = bitcast i64* %16 to float*
  %493 = bitcast i8* %21 to float*
  %494 = bitcast %union.VectorReg* %7 to i8*
  %495 = bitcast %union.VectorReg* %7 to float*
  %496 = getelementptr inbounds i8, i8* %494, i64 4
  %497 = bitcast i8* %496 to float*
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %499 = bitcast i64* %498 to float*
  %500 = getelementptr inbounds i8, i8* %494, i64 12
  %501 = bitcast i8* %500 to float*
  %502 = bitcast %union.VectorReg* %7 to <2 x float>*
  %503 = bitcast i64* %498 to <2 x i32>*
  %504 = bitcast i8* %496 to i32*
  %505 = bitcast i64* %498 to i32*
  %506 = bitcast i8* %500 to i32*
  %507 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %508 = bitcast i64* %16 to <2 x i32>*
  %509 = bitcast %union.VectorReg* %7 to <2 x float>*
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_402aee

block_402abf:                                     ; preds = %block_402aa7
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %75, align 1, !tbaa !2432
  store i8 1, i8* %81, align 1, !tbaa !2446
  store i8 1, i8* %85, align 1, !tbaa !2447
  store i8 0, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %82, align 1, !tbaa !2450
  %510 = add i64 %306, -8
  %511 = add i64 %322, 5
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %510 to i32*
  %513 = load i32, i32* %512, align 4
  %514 = sub i32 0, %513
  %515 = lshr i32 %514, 31
  %516 = sub i32 1, %513
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = icmp ult i32 %516, %514
  %519 = icmp eq i32 %516, 0
  %520 = or i1 %518, %519
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %75, align 1, !tbaa !2432
  %522 = and i32 %516, 255
  %523 = tail call i32 @llvm.ctpop.i32(i32 %522) #8
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  store i8 %526, i8* %81, align 1, !tbaa !2446
  %527 = xor i32 %516, %514
  %528 = lshr i32 %527, 4
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  store i8 %530, i8* %82, align 1, !tbaa !2450
  %531 = icmp eq i32 %516, 0
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %85, align 1, !tbaa !2447
  %533 = lshr i32 %516, 31
  %534 = trunc i32 %533 to i8
  store i8 %534, i8* %88, align 1, !tbaa !2448
  %535 = xor i32 %533, %515
  %536 = add nuw nsw i32 %535, %533
  %537 = icmp eq i32 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %89, align 1, !tbaa !2449
  %539 = add i64 %322, 12
  store i64 %539, i64* %PC, align 8
  %540 = load i32, i32* %310, align 4
  %541 = sext i32 %516 to i64
  %542 = sext i32 %540 to i64
  %543 = mul nsw i64 %542, %541
  %544 = trunc i64 %543 to i32
  %545 = and i64 %543, 4294967295
  store i64 %545, i64* %RAX, align 8, !tbaa !2428
  %546 = shl i64 %543, 32
  %547 = ashr exact i64 %546, 32
  %548 = icmp ne i64 %547, %543
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %75, align 1, !tbaa !2432
  %550 = and i32 %544, 255
  %551 = tail call i32 @llvm.ctpop.i32(i32 %550) #8
  %552 = trunc i32 %551 to i8
  %553 = and i8 %552, 1
  %554 = xor i8 %553, 1
  store i8 %554, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  store i8 0, i8* %85, align 1, !tbaa !2447
  %555 = lshr i32 %544, 31
  %556 = trunc i32 %555 to i8
  store i8 %556, i8* %88, align 1, !tbaa !2448
  store i8 %549, i8* %89, align 1, !tbaa !2449
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -48
  %559 = trunc i64 %543 to i32
  %560 = add i64 %322, 15
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %558 to i32*
  store i32 %559, i32* %561, align 4
  %.pre2 = load i64, i64* %RBP, align 8
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_402ace

block_402a86:                                     ; preds = %block_402a50
  store i32 0, i32* %17, align 1, !tbaa !2451
  store i32 0, i32* %19, align 1, !tbaa !2451
  store i32 0, i32* %20, align 1, !tbaa !2451
  store i32 0, i32* %22, align 1, !tbaa !2451
  %562 = add i64 %69, -4
  %563 = add i64 %94, 8
  store i64 %563, i64* %PC, align 8
  %564 = load <2 x float>, <2 x float>* %65, align 1
  %565 = extractelement <2 x float> %564, i32 0
  %566 = inttoptr i64 %562 to float*
  store float %565, float* %566, align 4
  %567 = load i64, i64* %PC, align 8
  %568 = add i64 %567, 278
  store i64 %568, i64* %93, align 8, !tbaa !2428
  %.pre8 = bitcast [32 x %union.VectorReg]* %6 to float*
  %.pre9 = bitcast i8* %18 to float*
  %.pre11 = bitcast i64* %16 to float*
  %.pre13 = bitcast i8* %21 to float*
  br label %block_402ba4

block_402a93:                                     ; preds = %block_402a50
  %569 = add i64 %69, -20
  %570 = add i64 %94, 4
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to i32*
  %572 = load i32, i32* %571, align 4
  %573 = add i32 %572, -1
  %574 = icmp eq i32 %572, 0
  %575 = zext i1 %574 to i8
  store i8 %575, i8* %75, align 1, !tbaa !2432
  %576 = and i32 %573, 255
  %577 = tail call i32 @llvm.ctpop.i32(i32 %576) #8
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  store i8 %580, i8* %81, align 1, !tbaa !2446
  %581 = xor i32 %572, %573
  %582 = lshr i32 %581, 4
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  store i8 %584, i8* %82, align 1, !tbaa !2450
  %585 = icmp eq i32 %573, 0
  %586 = zext i1 %585 to i8
  store i8 %586, i8* %85, align 1, !tbaa !2447
  %587 = lshr i32 %573, 31
  %588 = trunc i32 %587 to i8
  store i8 %588, i8* %88, align 1, !tbaa !2448
  %589 = lshr i32 %572, 31
  %590 = xor i32 %587, %589
  %591 = add nuw nsw i32 %590, %589
  %592 = icmp eq i32 %591, 2
  %593 = zext i1 %592 to i8
  store i8 %593, i8* %89, align 1, !tbaa !2449
  %.v15 = select i1 %585, i64 10, i64 20
  %594 = add i64 %94, %.v15
  store i64 %594, i64* %93, align 8, !tbaa !2428
  br i1 %585, label %block_402a9d, label %block_402aa7

block_402b51:                                     ; preds = %block_402a9d
  %595 = add i64 %69, -44
  %596 = add i64 %279, 7
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i32*
  store i32 0, i32* %597, align 4
  %598 = bitcast [32 x %union.VectorReg]* %6 to float*
  %599 = bitcast i8* %18 to float*
  %600 = bitcast i64* %16 to float*
  %601 = bitcast i8* %21 to float*
  %602 = bitcast %union.VectorReg* %7 to i8*
  %603 = bitcast %union.VectorReg* %7 to float*
  %604 = getelementptr inbounds i8, i8* %602, i64 4
  %605 = bitcast i8* %604 to float*
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %607 = bitcast i64* %606 to float*
  %608 = getelementptr inbounds i8, i8* %602, i64 12
  %609 = bitcast i8* %608 to float*
  %610 = bitcast %union.VectorReg* %7 to <2 x float>*
  %611 = bitcast i64* %606 to <2 x i32>*
  %612 = bitcast i8* %604 to i32*
  %613 = bitcast i64* %606 to i32*
  %614 = bitcast i8* %608 to i32*
  %615 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %616 = bitcast i64* %16 to <2 x i32>*
  %617 = bitcast %union.VectorReg* %7 to <2 x float>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402b58

block_402b64:                                     ; preds = %block_402b58
  %618 = inttoptr i64 %138 to float*
  %619 = add i64 %101, -16
  %620 = add i64 %137, 9
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %619 to i64*
  %622 = load i64, i64* %621, align 8
  store i64 %622, i64* %RAX, align 8, !tbaa !2428
  %623 = add i64 %137, 13
  store i64 %623, i64* %PC, align 8
  %624 = load i32, i32* %104, align 4
  %625 = sext i32 %624 to i64
  store i64 %625, i64* %RCX, align 8, !tbaa !2428
  %626 = shl nsw i64 %625, 2
  %627 = add i64 %626, %622
  %628 = add i64 %137, 18
  store i64 %628, i64* %PC, align 8
  %629 = inttoptr i64 %627 to i32*
  %630 = load i32, i32* %629, align 4
  %631 = bitcast %union.VectorReg* %7 to i32*
  store i32 %630, i32* %631, align 1, !tbaa !2452
  store float 0.000000e+00, float* %605, align 1, !tbaa !2452
  store float 0.000000e+00, float* %607, align 1, !tbaa !2452
  store float 0.000000e+00, float* %609, align 1, !tbaa !2452
  %632 = add i64 %101, -32
  %633 = add i64 %137, 22
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %632 to i64*
  %635 = load i64, i64* %634, align 8
  store i64 %635, i64* %RAX, align 8, !tbaa !2428
  %636 = add i64 %137, 26
  store i64 %636, i64* %PC, align 8
  %637 = load i32, i32* %104, align 4
  %638 = sext i32 %637 to i64
  store i64 %638, i64* %RCX, align 8, !tbaa !2428
  %639 = shl nsw i64 %638, 2
  %640 = add i64 %639, %635
  %641 = add i64 %137, 31
  store i64 %641, i64* %PC, align 8
  %642 = load <2 x float>, <2 x float>* %610, align 1
  %643 = load <2 x i32>, <2 x i32>* %611, align 1
  %644 = inttoptr i64 %640 to float*
  %645 = load float, float* %644, align 4
  %646 = extractelement <2 x float> %642, i32 0
  %647 = fmul float %646, %645
  store float %647, float* %603, align 1, !tbaa !2452
  %648 = bitcast <2 x float> %642 to <2 x i32>
  %649 = extractelement <2 x i32> %648, i32 1
  store i32 %649, i32* %612, align 1, !tbaa !2452
  %650 = extractelement <2 x i32> %643, i32 0
  store i32 %650, i32* %613, align 1, !tbaa !2452
  %651 = extractelement <2 x i32> %643, i32 1
  store i32 %651, i32* %614, align 1, !tbaa !2452
  %652 = load <2 x float>, <2 x float>* %615, align 1
  %653 = load <2 x i32>, <2 x i32>* %616, align 1
  %654 = load <2 x float>, <2 x float>* %617, align 1
  %655 = extractelement <2 x float> %652, i32 0
  %656 = extractelement <2 x float> %654, i32 0
  %657 = fadd float %655, %656
  store float %657, float* %598, align 1, !tbaa !2452
  %658 = bitcast <2 x float> %652 to <2 x i32>
  %659 = extractelement <2 x i32> %658, i32 1
  store i32 %659, i32* %19, align 1, !tbaa !2452
  %660 = extractelement <2 x i32> %653, i32 0
  store i32 %660, i32* %20, align 1, !tbaa !2452
  %661 = extractelement <2 x i32> %653, i32 1
  store i32 %661, i32* %22, align 1, !tbaa !2452
  %662 = add i64 %137, 40
  store i64 %662, i64* %PC, align 8
  %663 = load <2 x float>, <2 x float>* %65, align 1
  %664 = extractelement <2 x float> %663, i32 0
  store float %664, float* %618, align 4
  %665 = load i64, i64* %RBP, align 8
  %666 = add i64 %665, -44
  %667 = load i64, i64* %PC, align 8
  %668 = add i64 %667, 3
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %666 to i32*
  %670 = load i32, i32* %669, align 4
  %671 = add i32 %670, 1
  %672 = zext i32 %671 to i64
  store i64 %672, i64* %RAX, align 8, !tbaa !2428
  %673 = icmp eq i32 %670, -1
  %674 = icmp eq i32 %671, 0
  %675 = or i1 %673, %674
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %75, align 1, !tbaa !2432
  %677 = and i32 %671, 255
  %678 = tail call i32 @llvm.ctpop.i32(i32 %677) #8
  %679 = trunc i32 %678 to i8
  %680 = and i8 %679, 1
  %681 = xor i8 %680, 1
  store i8 %681, i8* %81, align 1, !tbaa !2446
  %682 = xor i32 %670, %671
  %683 = lshr i32 %682, 4
  %684 = trunc i32 %683 to i8
  %685 = and i8 %684, 1
  store i8 %685, i8* %82, align 1, !tbaa !2450
  %686 = icmp eq i32 %671, 0
  %687 = zext i1 %686 to i8
  store i8 %687, i8* %85, align 1, !tbaa !2447
  %688 = lshr i32 %671, 31
  %689 = trunc i32 %688 to i8
  store i8 %689, i8* %88, align 1, !tbaa !2448
  %690 = lshr i32 %670, 31
  %691 = xor i32 %688, %690
  %692 = add nuw nsw i32 %691, %688
  %693 = icmp eq i32 %692, 2
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %89, align 1, !tbaa !2449
  %695 = add i64 %667, 9
  store i64 %695, i64* %PC, align 8
  store i32 %671, i32* %669, align 4
  %696 = load i64, i64* %PC, align 8
  %697 = add i64 %696, -61
  store i64 %697, i64* %93, align 8, !tbaa !2428
  br label %block_402b58

block_402b42:                                     ; preds = %block_402aee
  %698 = add i64 %212, -4
  %699 = add i64 %248, 10
  store i64 %699, i64* %PC, align 8
  %700 = load <2 x float>, <2 x float>* %65, align 1
  %701 = extractelement <2 x float> %700, i32 0
  %702 = inttoptr i64 %698 to float*
  store float %701, float* %702, align 4
  %703 = load i64, i64* %PC, align 8
  %704 = add i64 %703, 88
  store i64 %704, i64* %93, align 8, !tbaa !2428
  br label %block_402ba4
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005b0_frame_dummy() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_4005b0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005b0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400580___do_global_dtors_aux() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400580;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400580___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402eb0___libc_csu_fini() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402eb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402eb0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402eb0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e40___libc_csu_init() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402e40___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e40___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400610;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400610_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653140_clock(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653138_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4004b0_memset(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400478;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400478__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dscal() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402d70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402d70_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dmxpy() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402010_dmxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @matgen() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4017b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4017b0_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @daxpy() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4028e0_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @ddot() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402a50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402a50_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @epslon() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402810;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402810_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgesl() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c90_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005c0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @idamax() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402bb0_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @print_time() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @print_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4028d0_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @what_date() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @what_date_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400600_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgefa() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401980;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401980_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402eb4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402eb4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

define internal void @__mcsema_destructor() {
  tail call void @callback_sub_402eb0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_402e40___libc_csu_init()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { naked nobuiltin noinline }
attributes #8 = { nounwind }
attributes #9 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2071}
!2448 = !{!2433, !2430, i64 2073}
!2449 = !{!2433, !2430, i64 2077}
!2450 = !{!2433, !2430, i64 2069}
!2451 = !{!2445, !2445, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"float", !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"double", !2430, i64 0}
!2456 = !{!2430, !2430, i64 0}
