; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_402e40__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_603de0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_402e40__rodata = internal constant %seg_402e40__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_603de0__init_array = internal global %seg_603de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4005b0___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e30___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402dc0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4004a8__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4027c0_epslon_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400540_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402b50_idamax_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402cf0_dscal_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401fc0_dmxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_401930_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401930:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %9, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -72
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 64
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #12
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 %12, %15
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !2447
  %31 = icmp eq i64 %15, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !2448
  %34 = lshr i64 %15, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !2449
  %37 = lshr i64 %12, 63
  %38 = xor i64 %34, %37
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !2450
  %43 = add i64 %11, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = add i64 %14, 11
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -12
  %49 = load i32, i32* %ESI, align 4
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %52, align 4
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -16
  %55 = load i32, i32* %EDX, align 4
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 3
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %58, align 4
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -24
  %61 = load i64, i64* %RCX, align 8
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %64, align 8
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -32
  %67 = load i64, i64* %R8, align 8
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -32
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = add i64 %73, 10
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i32*
  store i32 0, i32* %78, align 4
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %84, -1
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = icmp eq i32 %84, 0
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %18, align 1, !tbaa !2432
  %89 = and i32 %85, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #12
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %25, align 1, !tbaa !2446
  %94 = xor i32 %85, %84
  %95 = lshr i32 %94, 4
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %30, align 1, !tbaa !2447
  %98 = icmp eq i32 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %33, align 1, !tbaa !2448
  %100 = lshr i32 %85, 31
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %36, align 1, !tbaa !2449
  %102 = lshr i32 %84, 31
  %103 = xor i32 %100, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %42, align 1, !tbaa !2450
  %107 = add i64 %79, -56
  %108 = add i64 %81, 9
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  store i32 %85, i32* %109, align 4
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -56
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i32*
  %115 = load i32, i32* %114, align 4
  store i8 0, i8* %18, align 1, !tbaa !2432
  %116 = and i32 %115, 255
  %117 = tail call i32 @llvm.ctpop.i32(i32 %116) #12
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  store i8 %120, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  %121 = icmp eq i32 %115, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %33, align 1, !tbaa !2448
  %123 = lshr i32 %115, 31
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %36, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  %125 = icmp ne i8 %124, 0
  %.v = select i1 %125, i64 631, i64 6
  %126 = add i64 %113, %.v
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br i1 %125, label %block_401930.block_401bd8_crit_edge, label %block_401967

block_401930.block_401bd8_crit_edge:              ; preds = %block_401930
  %.pre25 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %.pre26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre28 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %.pre30 = getelementptr inbounds i8, i8* %.pre25, i64 4
  %.pre32 = bitcast i8* %.pre30 to i32*
  %.pre34 = bitcast i64* %.pre26 to i32*
  %.pre36 = getelementptr inbounds i8, i8* %.pre25, i64 12
  %.pre38 = bitcast i8* %.pre36 to i32*
  %.pre40 = bitcast %union.VectorReg* %8 to double*
  %.pre42 = bitcast [32 x %union.VectorReg]* %7 to double*
  br label %block_401bd8

block_401afe:                                     ; preds = %block_401ad7
  %127 = add i64 %1449, -8
  %128 = add i64 %1484, 4
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = add i64 %1449, -12
  %132 = add i64 %1484, 7
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %RCX, align 8, !tbaa !2428
  %136 = add i64 %1449, -40
  %137 = add i64 %1484, 11
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = sext i32 %134 to i64
  %141 = sext i32 %139 to i64
  %142 = mul nsw i64 %141, %140
  %143 = trunc i64 %142 to i32
  %144 = and i64 %142, 4294967295
  store i64 %144, i64* %RCX, align 8, !tbaa !2428
  %145 = shl i64 %142, 32
  %146 = ashr exact i64 %145, 32
  %147 = icmp ne i64 %146, %142
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %18, align 1, !tbaa !2432
  %149 = and i32 %143, 255
  %150 = tail call i32 @llvm.ctpop.i32(i32 %149) #12
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  store i8 %153, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %154 = lshr i32 %143, 31
  %155 = trunc i32 %154 to i8
  store i8 %155, i8* %36, align 1, !tbaa !2449
  store i8 %148, i8* %42, align 1, !tbaa !2450
  %156 = add i64 %1484, 14
  store i64 %156, i64* %PC, align 8
  %157 = trunc i64 %142 to i32
  %158 = load i32, i32* %1458, align 4
  %159 = add i32 %158, %157
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %RCX, align 8, !tbaa !2428
  %161 = icmp ult i32 %159, %157
  %162 = icmp ult i32 %159, %158
  %163 = or i1 %161, %162
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %18, align 1, !tbaa !2432
  %165 = and i32 %159, 255
  %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #12
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %25, align 1, !tbaa !2446
  %170 = xor i32 %158, %157
  %171 = xor i32 %170, %159
  %172 = lshr i32 %171, 4
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  store i8 %174, i8* %30, align 1, !tbaa !2447
  %175 = icmp eq i32 %159, 0
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %33, align 1, !tbaa !2448
  %177 = lshr i32 %159, 31
  %178 = trunc i32 %177 to i8
  store i8 %178, i8* %36, align 1, !tbaa !2449
  %179 = lshr i32 %157, 31
  %180 = lshr i32 %158, 31
  %181 = xor i32 %177, %179
  %182 = xor i32 %177, %180
  %183 = add nuw nsw i32 %181, %182
  %184 = icmp eq i32 %183, 2
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %42, align 1, !tbaa !2450
  %186 = sext i32 %159 to i64
  store i64 %186, i64* %RDX, align 8, !tbaa !2428
  %187 = shl nsw i64 %186, 2
  %188 = add i64 %130, %187
  %189 = add i64 %1484, 22
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i32*
  %191 = load i32, i32* %190, align 4
  store i32 %191, i32* %1363, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1377, align 1, !tbaa !2451
  %192 = add i64 %1484, 26
  store i64 %192, i64* %PC, align 8
  %193 = load i64, i64* %129, align 8
  store i64 %193, i64* %RAX, align 8, !tbaa !2428
  %194 = add i64 %1484, 29
  store i64 %194, i64* %PC, align 8
  %195 = load i32, i32* %133, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -40
  %199 = add i64 %1484, 33
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i32*
  %201 = load i32, i32* %200, align 4
  %202 = sext i32 %195 to i64
  %203 = sext i32 %201 to i64
  %204 = mul nsw i64 %203, %202
  %205 = trunc i64 %204 to i32
  %206 = and i64 %204, 4294967295
  store i64 %206, i64* %RCX, align 8, !tbaa !2428
  %207 = shl i64 %204, 32
  %208 = ashr exact i64 %207, 32
  %209 = icmp ne i64 %208, %204
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %18, align 1, !tbaa !2432
  %211 = and i32 %205, 255
  %212 = tail call i32 @llvm.ctpop.i32(i32 %211) #12
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = xor i8 %214, 1
  store i8 %215, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %216 = lshr i32 %205, 31
  %217 = trunc i32 %216 to i8
  store i8 %217, i8* %36, align 1, !tbaa !2449
  store i8 %210, i8* %42, align 1, !tbaa !2450
  %218 = add i64 %197, -52
  %219 = add i64 %1484, 36
  store i64 %219, i64* %PC, align 8
  %220 = trunc i64 %204 to i32
  %221 = inttoptr i64 %218 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = add i32 %222, %220
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RCX, align 8, !tbaa !2428
  %225 = icmp ult i32 %223, %220
  %226 = icmp ult i32 %223, %222
  %227 = or i1 %225, %226
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %18, align 1, !tbaa !2432
  %229 = and i32 %223, 255
  %230 = tail call i32 @llvm.ctpop.i32(i32 %229) #12
  %231 = trunc i32 %230 to i8
  %232 = and i8 %231, 1
  %233 = xor i8 %232, 1
  store i8 %233, i8* %25, align 1, !tbaa !2446
  %234 = xor i32 %222, %220
  %235 = xor i32 %234, %223
  %236 = lshr i32 %235, 4
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  store i8 %238, i8* %30, align 1, !tbaa !2447
  %239 = icmp eq i32 %223, 0
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %33, align 1, !tbaa !2448
  %241 = lshr i32 %223, 31
  %242 = trunc i32 %241 to i8
  store i8 %242, i8* %36, align 1, !tbaa !2449
  %243 = lshr i32 %220, 31
  %244 = lshr i32 %222, 31
  %245 = xor i32 %241, %243
  %246 = xor i32 %241, %244
  %247 = add nuw nsw i32 %245, %246
  %248 = icmp eq i32 %247, 2
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %42, align 1, !tbaa !2450
  %250 = sext i32 %223 to i64
  store i64 %250, i64* %RDX, align 8, !tbaa !2428
  %251 = shl nsw i64 %250, 2
  %252 = add i64 %193, %251
  %253 = add i64 %1484, 44
  store i64 %253, i64* %PC, align 8
  %254 = load <2 x float>, <2 x float>* %1374, align 1
  %255 = extractelement <2 x float> %254, i32 0
  %256 = inttoptr i64 %252 to float*
  store float %255, float* %256, align 4
  %257 = load i64, i64* %RBP, align 8
  %258 = add i64 %257, -36
  %259 = load i64, i64* %PC, align 8
  %260 = add i64 %259, 5
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %258 to i32*
  %262 = load i32, i32* %261, align 4
  store i32 %262, i32* %1363, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1377, align 1, !tbaa !2451
  %263 = add i64 %257, -8
  %264 = add i64 %259, 9
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %263 to i64*
  %266 = load i64, i64* %265, align 8
  store i64 %266, i64* %RAX, align 8, !tbaa !2428
  %267 = add i64 %257, -12
  %268 = add i64 %259, 12
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i32*
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i64
  store i64 %271, i64* %RCX, align 8, !tbaa !2428
  %272 = add i64 %257, -40
  %273 = add i64 %259, 16
  store i64 %273, i64* %PC, align 8
  %274 = inttoptr i64 %272 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = sext i32 %270 to i64
  %277 = sext i32 %275 to i64
  %278 = mul nsw i64 %277, %276
  %279 = trunc i64 %278 to i32
  %280 = and i64 %278, 4294967295
  store i64 %280, i64* %RCX, align 8, !tbaa !2428
  %281 = shl i64 %278, 32
  %282 = ashr exact i64 %281, 32
  %283 = icmp ne i64 %282, %278
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %18, align 1, !tbaa !2432
  %285 = and i32 %279, 255
  %286 = tail call i32 @llvm.ctpop.i32(i32 %285) #12
  %287 = trunc i32 %286 to i8
  %288 = and i8 %287, 1
  %289 = xor i8 %288, 1
  store i8 %289, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %290 = lshr i32 %279, 31
  %291 = trunc i32 %290 to i8
  store i8 %291, i8* %36, align 1, !tbaa !2449
  store i8 %284, i8* %42, align 1, !tbaa !2450
  %292 = add i64 %257, -44
  %293 = add i64 %259, 19
  store i64 %293, i64* %PC, align 8
  %294 = trunc i64 %278 to i32
  %295 = inttoptr i64 %292 to i32*
  %296 = load i32, i32* %295, align 4
  %297 = add i32 %296, %294
  %298 = zext i32 %297 to i64
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = icmp ult i32 %297, %294
  %300 = icmp ult i32 %297, %296
  %301 = or i1 %299, %300
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %18, align 1, !tbaa !2432
  %303 = and i32 %297, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #12
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %25, align 1, !tbaa !2446
  %308 = xor i32 %296, %294
  %309 = xor i32 %308, %297
  %310 = lshr i32 %309, 4
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  store i8 %312, i8* %30, align 1, !tbaa !2447
  %313 = icmp eq i32 %297, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %33, align 1, !tbaa !2448
  %315 = lshr i32 %297, 31
  %316 = trunc i32 %315 to i8
  store i8 %316, i8* %36, align 1, !tbaa !2449
  %317 = lshr i32 %294, 31
  %318 = lshr i32 %296, 31
  %319 = xor i32 %315, %317
  %320 = xor i32 %315, %318
  %321 = add nuw nsw i32 %319, %320
  %322 = icmp eq i32 %321, 2
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %42, align 1, !tbaa !2450
  %324 = sext i32 %297 to i64
  store i64 %324, i64* %RDX, align 8, !tbaa !2428
  %325 = shl nsw i64 %324, 2
  %326 = add i64 %266, %325
  %327 = add i64 %259, 27
  store i64 %327, i64* %PC, align 8
  %328 = load <2 x float>, <2 x float>* %1374, align 1
  %329 = extractelement <2 x float> %328, i32 0
  %330 = inttoptr i64 %326 to float*
  store float %329, float* %330, align 4
  %.pre20 = load i64, i64* %PC, align 8
  %.pre21 = load i64, i64* %RBP, align 8
  br label %block_401b45

block_4019f2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1, %block_4019e7
  %331 = phi i64 [ %975, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %682, %block_4019e7 ]
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -52
  %334 = add i64 %331, 3
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i32*
  %336 = load i32, i32* %335, align 4
  %337 = zext i32 %336 to i64
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = add i64 %332, -44
  %339 = add i64 %331, 6
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %338 to i32*
  %341 = load i32, i32* %340, align 4
  %342 = sub i32 %336, %341
  %343 = icmp ult i32 %336, %341
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %18, align 1, !tbaa !2432
  %345 = and i32 %342, 255
  %346 = tail call i32 @llvm.ctpop.i32(i32 %345) #12
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  store i8 %349, i8* %25, align 1, !tbaa !2446
  %350 = xor i32 %341, %336
  %351 = xor i32 %350, %342
  %352 = lshr i32 %351, 4
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  store i8 %354, i8* %30, align 1, !tbaa !2447
  %355 = icmp eq i32 %342, 0
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %33, align 1, !tbaa !2448
  %357 = lshr i32 %342, 31
  %358 = trunc i32 %357 to i8
  store i8 %358, i8* %36, align 1, !tbaa !2449
  %359 = lshr i32 %336, 31
  %360 = lshr i32 %341, 31
  %361 = xor i32 %360, %359
  %362 = xor i32 %357, %359
  %363 = add nuw nsw i32 %362, %361
  %364 = icmp eq i32 %363, 2
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %42, align 1, !tbaa !2450
  %.v47 = select i1 %355, i64 110, i64 12
  %366 = add i64 %331, %.v47
  store i64 %366, i64* %PC, align 8, !tbaa !2428
  br i1 %355, label %block_401a60, label %block_4019fe

block_40196e:                                     ; preds = %block_401bc0, %block_401967
  %367 = phi i64 [ %.pre, %block_401967 ], [ %1554, %block_401bc0 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401967 ], [ %MEMORY.5, %block_401bc0 ]
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -44
  %370 = add i64 %367, 3
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i32*
  %372 = load i32, i32* %371, align 4
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %RAX, align 8, !tbaa !2428
  %374 = add i64 %368, -56
  %375 = add i64 %367, 6
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i32*
  %377 = load i32, i32* %376, align 4
  %378 = sub i32 %372, %377
  %379 = icmp ult i32 %372, %377
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %18, align 1, !tbaa !2432
  %381 = and i32 %378, 255
  %382 = tail call i32 @llvm.ctpop.i32(i32 %381) #12
  %383 = trunc i32 %382 to i8
  %384 = and i8 %383, 1
  %385 = xor i8 %384, 1
  store i8 %385, i8* %25, align 1, !tbaa !2446
  %386 = xor i32 %377, %372
  %387 = xor i32 %386, %378
  %388 = lshr i32 %387, 4
  %389 = trunc i32 %388 to i8
  %390 = and i8 %389, 1
  store i8 %390, i8* %30, align 1, !tbaa !2447
  %391 = icmp eq i32 %378, 0
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %33, align 1, !tbaa !2448
  %393 = lshr i32 %378, 31
  %394 = trunc i32 %393 to i8
  store i8 %394, i8* %36, align 1, !tbaa !2449
  %395 = lshr i32 %372, 31
  %396 = lshr i32 %377, 31
  %397 = xor i32 %396, %395
  %398 = xor i32 %393, %395
  %399 = add nuw nsw i32 %398, %397
  %400 = icmp eq i32 %399, 2
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %42, align 1, !tbaa !2450
  %402 = icmp ne i8 %394, 0
  %403 = xor i1 %402, %400
  %.v44 = select i1 %403, i64 12, i64 613
  %404 = add i64 %367, %.v44
  %405 = add i64 %404, 5
  store i64 %405, i64* %PC, align 8
  br i1 %403, label %block_40197a, label %block_401bd8.loopexit

block_4019fe:                                     ; preds = %block_4019f2
  %406 = add i64 %332, -8
  %407 = add i64 %366, 4
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %406 to i64*
  %409 = load i64, i64* %408, align 8
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = add i64 %332, -12
  %411 = add i64 %366, 7
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %410 to i32*
  %413 = load i32, i32* %412, align 4
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %415 = add i64 %366, 11
  store i64 %415, i64* %PC, align 8
  %416 = load i32, i32* %340, align 4
  %417 = sext i32 %413 to i64
  %418 = sext i32 %416 to i64
  %419 = mul nsw i64 %418, %417
  %420 = trunc i64 %419 to i32
  %421 = and i64 %419, 4294967295
  store i64 %421, i64* %RCX, align 8, !tbaa !2428
  %422 = shl i64 %419, 32
  %423 = ashr exact i64 %422, 32
  %424 = icmp ne i64 %423, %419
  %425 = zext i1 %424 to i8
  store i8 %425, i8* %18, align 1, !tbaa !2432
  %426 = and i32 %420, 255
  %427 = tail call i32 @llvm.ctpop.i32(i32 %426) #12
  %428 = trunc i32 %427 to i8
  %429 = and i8 %428, 1
  %430 = xor i8 %429, 1
  store i8 %430, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %431 = lshr i32 %420, 31
  %432 = trunc i32 %431 to i8
  store i8 %432, i8* %36, align 1, !tbaa !2449
  store i8 %425, i8* %42, align 1, !tbaa !2450
  %433 = add i64 %366, 14
  store i64 %433, i64* %PC, align 8
  %434 = trunc i64 %419 to i32
  %435 = load i32, i32* %335, align 4
  %436 = add i32 %435, %434
  %437 = zext i32 %436 to i64
  store i64 %437, i64* %RCX, align 8, !tbaa !2428
  %438 = icmp ult i32 %436, %434
  %439 = icmp ult i32 %436, %435
  %440 = or i1 %438, %439
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %18, align 1, !tbaa !2432
  %442 = and i32 %436, 255
  %443 = tail call i32 @llvm.ctpop.i32(i32 %442) #12
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  store i8 %446, i8* %25, align 1, !tbaa !2446
  %447 = xor i32 %435, %434
  %448 = xor i32 %447, %436
  %449 = lshr i32 %448, 4
  %450 = trunc i32 %449 to i8
  %451 = and i8 %450, 1
  store i8 %451, i8* %30, align 1, !tbaa !2447
  %452 = icmp eq i32 %436, 0
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %33, align 1, !tbaa !2448
  %454 = lshr i32 %436, 31
  %455 = trunc i32 %454 to i8
  store i8 %455, i8* %36, align 1, !tbaa !2449
  %456 = lshr i32 %434, 31
  %457 = lshr i32 %435, 31
  %458 = xor i32 %454, %456
  %459 = xor i32 %454, %457
  %460 = add nuw nsw i32 %458, %459
  %461 = icmp eq i32 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %42, align 1, !tbaa !2450
  %463 = sext i32 %436 to i64
  store i64 %463, i64* %RDX, align 8, !tbaa !2428
  %464 = shl nsw i64 %463, 2
  %465 = add i64 %409, %464
  %466 = add i64 %366, 22
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %465 to i32*
  %468 = load i32, i32* %467, align 4
  store i32 %468, i32* %1363, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1377, align 1, !tbaa !2451
  %469 = add i64 %332, -36
  %470 = add i64 %366, 27
  store i64 %470, i64* %PC, align 8
  %471 = load <2 x float>, <2 x float>* %1374, align 1
  %472 = extractelement <2 x float> %471, i32 0
  %473 = inttoptr i64 %469 to float*
  store float %472, float* %473, align 4
  %474 = load i64, i64* %RBP, align 8
  %475 = add i64 %474, -8
  %476 = load i64, i64* %PC, align 8
  %477 = add i64 %476, 4
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %475 to i64*
  %479 = load i64, i64* %478, align 8
  store i64 %479, i64* %RAX, align 8, !tbaa !2428
  %480 = add i64 %474, -12
  %481 = add i64 %476, 7
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i32*
  %483 = load i32, i32* %482, align 4
  %484 = zext i32 %483 to i64
  store i64 %484, i64* %RCX, align 8, !tbaa !2428
  %485 = add i64 %474, -44
  %486 = add i64 %476, 11
  store i64 %486, i64* %PC, align 8
  %487 = inttoptr i64 %485 to i32*
  %488 = load i32, i32* %487, align 4
  %489 = sext i32 %483 to i64
  %490 = sext i32 %488 to i64
  %491 = mul nsw i64 %490, %489
  %492 = trunc i64 %491 to i32
  %493 = and i64 %491, 4294967295
  store i64 %493, i64* %RCX, align 8, !tbaa !2428
  %494 = shl i64 %491, 32
  %495 = ashr exact i64 %494, 32
  %496 = icmp ne i64 %495, %491
  %497 = zext i1 %496 to i8
  store i8 %497, i8* %18, align 1, !tbaa !2432
  %498 = and i32 %492, 255
  %499 = tail call i32 @llvm.ctpop.i32(i32 %498) #12
  %500 = trunc i32 %499 to i8
  %501 = and i8 %500, 1
  %502 = xor i8 %501, 1
  store i8 %502, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %503 = lshr i32 %492, 31
  %504 = trunc i32 %503 to i8
  store i8 %504, i8* %36, align 1, !tbaa !2449
  store i8 %497, i8* %42, align 1, !tbaa !2450
  %505 = add i64 %476, 14
  store i64 %505, i64* %PC, align 8
  %506 = trunc i64 %491 to i32
  %507 = load i32, i32* %487, align 4
  %508 = add i32 %507, %506
  %509 = zext i32 %508 to i64
  store i64 %509, i64* %RCX, align 8, !tbaa !2428
  %510 = icmp ult i32 %508, %506
  %511 = icmp ult i32 %508, %507
  %512 = or i1 %510, %511
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %18, align 1, !tbaa !2432
  %514 = and i32 %508, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #12
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %25, align 1, !tbaa !2446
  %519 = xor i32 %507, %506
  %520 = xor i32 %519, %508
  %521 = lshr i32 %520, 4
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  store i8 %523, i8* %30, align 1, !tbaa !2447
  %524 = icmp eq i32 %508, 0
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %33, align 1, !tbaa !2448
  %526 = lshr i32 %508, 31
  %527 = trunc i32 %526 to i8
  store i8 %527, i8* %36, align 1, !tbaa !2449
  %528 = lshr i32 %506, 31
  %529 = lshr i32 %507, 31
  %530 = xor i32 %526, %528
  %531 = xor i32 %526, %529
  %532 = add nuw nsw i32 %530, %531
  %533 = icmp eq i32 %532, 2
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %42, align 1, !tbaa !2450
  %535 = sext i32 %508 to i64
  store i64 %535, i64* %RDX, align 8, !tbaa !2428
  %536 = shl nsw i64 %535, 2
  %537 = add i64 %479, %536
  %538 = add i64 %476, 22
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %537 to i32*
  %540 = load i32, i32* %539, align 4
  store i32 %540, i32* %1363, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1377, align 1, !tbaa !2451
  %541 = add i64 %476, 26
  store i64 %541, i64* %PC, align 8
  %542 = load i64, i64* %478, align 8
  store i64 %542, i64* %RAX, align 8, !tbaa !2428
  %543 = load i64, i64* %RBP, align 8
  %544 = add i64 %543, -12
  %545 = add i64 %476, 29
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %544 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = zext i32 %547 to i64
  store i64 %548, i64* %RCX, align 8, !tbaa !2428
  %549 = add i64 %543, -44
  %550 = add i64 %476, 33
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i32*
  %552 = load i32, i32* %551, align 4
  %553 = sext i32 %547 to i64
  %554 = sext i32 %552 to i64
  %555 = mul nsw i64 %554, %553
  %556 = trunc i64 %555 to i32
  %557 = and i64 %555, 4294967295
  store i64 %557, i64* %RCX, align 8, !tbaa !2428
  %558 = shl i64 %555, 32
  %559 = ashr exact i64 %558, 32
  %560 = icmp ne i64 %559, %555
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %18, align 1, !tbaa !2432
  %562 = and i32 %556, 255
  %563 = tail call i32 @llvm.ctpop.i32(i32 %562) #12
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  store i8 %566, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %567 = lshr i32 %556, 31
  %568 = trunc i32 %567 to i8
  store i8 %568, i8* %36, align 1, !tbaa !2449
  store i8 %561, i8* %42, align 1, !tbaa !2450
  %569 = add i64 %543, -52
  %570 = add i64 %476, 36
  store i64 %570, i64* %PC, align 8
  %571 = trunc i64 %555 to i32
  %572 = inttoptr i64 %569 to i32*
  %573 = load i32, i32* %572, align 4
  %574 = add i32 %573, %571
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RCX, align 8, !tbaa !2428
  %576 = icmp ult i32 %574, %571
  %577 = icmp ult i32 %574, %573
  %578 = or i1 %576, %577
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %18, align 1, !tbaa !2432
  %580 = and i32 %574, 255
  %581 = tail call i32 @llvm.ctpop.i32(i32 %580) #12
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = xor i8 %583, 1
  store i8 %584, i8* %25, align 1, !tbaa !2446
  %585 = xor i32 %573, %571
  %586 = xor i32 %585, %574
  %587 = lshr i32 %586, 4
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  store i8 %589, i8* %30, align 1, !tbaa !2447
  %590 = icmp eq i32 %574, 0
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %33, align 1, !tbaa !2448
  %592 = lshr i32 %574, 31
  %593 = trunc i32 %592 to i8
  store i8 %593, i8* %36, align 1, !tbaa !2449
  %594 = lshr i32 %571, 31
  %595 = lshr i32 %573, 31
  %596 = xor i32 %592, %594
  %597 = xor i32 %592, %595
  %598 = add nuw nsw i32 %596, %597
  %599 = icmp eq i32 %598, 2
  %600 = zext i1 %599 to i8
  store i8 %600, i8* %42, align 1, !tbaa !2450
  %601 = sext i32 %574 to i64
  store i64 %601, i64* %RDX, align 8, !tbaa !2428
  %602 = shl nsw i64 %601, 2
  %603 = add i64 %542, %602
  %604 = add i64 %476, 44
  store i64 %604, i64* %PC, align 8
  %605 = load <2 x float>, <2 x float>* %1374, align 1
  %606 = extractelement <2 x float> %605, i32 0
  %607 = inttoptr i64 %603 to float*
  store float %606, float* %607, align 4
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -36
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 5
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i32*
  %613 = load i32, i32* %612, align 4
  store i32 %613, i32* %1363, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1377, align 1, !tbaa !2451
  %614 = add i64 %608, -8
  %615 = add i64 %610, 9
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %614 to i64*
  %617 = load i64, i64* %616, align 8
  store i64 %617, i64* %RAX, align 8, !tbaa !2428
  %618 = add i64 %608, -12
  %619 = add i64 %610, 12
  store i64 %619, i64* %PC, align 8
  %620 = inttoptr i64 %618 to i32*
  %621 = load i32, i32* %620, align 4
  %622 = zext i32 %621 to i64
  store i64 %622, i64* %RCX, align 8, !tbaa !2428
  %623 = add i64 %608, -44
  %624 = add i64 %610, 16
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %623 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = sext i32 %621 to i64
  %628 = sext i32 %626 to i64
  %629 = mul nsw i64 %628, %627
  %630 = trunc i64 %629 to i32
  %631 = and i64 %629, 4294967295
  store i64 %631, i64* %RCX, align 8, !tbaa !2428
  %632 = shl i64 %629, 32
  %633 = ashr exact i64 %632, 32
  %634 = icmp ne i64 %633, %629
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %18, align 1, !tbaa !2432
  %636 = and i32 %630, 255
  %637 = tail call i32 @llvm.ctpop.i32(i32 %636) #12
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = xor i8 %639, 1
  store i8 %640, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %641 = lshr i32 %630, 31
  %642 = trunc i32 %641 to i8
  store i8 %642, i8* %36, align 1, !tbaa !2449
  store i8 %635, i8* %42, align 1, !tbaa !2450
  %643 = add i64 %610, 19
  store i64 %643, i64* %PC, align 8
  %644 = trunc i64 %629 to i32
  %645 = load i32, i32* %625, align 4
  %646 = add i32 %645, %644
  %647 = zext i32 %646 to i64
  store i64 %647, i64* %RCX, align 8, !tbaa !2428
  %648 = icmp ult i32 %646, %644
  %649 = icmp ult i32 %646, %645
  %650 = or i1 %648, %649
  %651 = zext i1 %650 to i8
  store i8 %651, i8* %18, align 1, !tbaa !2432
  %652 = and i32 %646, 255
  %653 = tail call i32 @llvm.ctpop.i32(i32 %652) #12
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  store i8 %656, i8* %25, align 1, !tbaa !2446
  %657 = xor i32 %645, %644
  %658 = xor i32 %657, %646
  %659 = lshr i32 %658, 4
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  store i8 %661, i8* %30, align 1, !tbaa !2447
  %662 = icmp eq i32 %646, 0
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %33, align 1, !tbaa !2448
  %664 = lshr i32 %646, 31
  %665 = trunc i32 %664 to i8
  store i8 %665, i8* %36, align 1, !tbaa !2449
  %666 = lshr i32 %644, 31
  %667 = lshr i32 %645, 31
  %668 = xor i32 %664, %666
  %669 = xor i32 %664, %667
  %670 = add nuw nsw i32 %668, %669
  %671 = icmp eq i32 %670, 2
  %672 = zext i1 %671 to i8
  store i8 %672, i8* %42, align 1, !tbaa !2450
  %673 = sext i32 %646 to i64
  store i64 %673, i64* %RDX, align 8, !tbaa !2428
  %674 = shl nsw i64 %673, 2
  %675 = add i64 %617, %674
  %676 = add i64 %610, 27
  store i64 %676, i64* %PC, align 8
  %677 = load <2 x float>, <2 x float>* %1374, align 1
  %678 = extractelement <2 x float> %677, i32 0
  %679 = inttoptr i64 %675 to float*
  store float %678, float* %679, align 4
  %.pre15 = load i64, i64* %PC, align 8
  %.pre16 = load i64, i64* %RBP, align 8
  br label %block_401a60

block_4019e7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %680 = load i8, i8* %25, align 1, !tbaa !2446
  %681 = icmp ne i8 %680, 0
  %.v54 = select i1 %681, i64 11, i64 6
  %682 = add i64 %975, %.v54
  store i64 %682, i64* %PC, align 8, !tbaa !2428
  %683 = icmp eq i8 %680, 1
  br i1 %683, label %block_4019f2, label %block_4019ed

block_40197a:                                     ; preds = %block_40196e
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %684 = add i64 %404, 8
  store i64 %684, i64* %PC, align 8
  %685 = load i32, i32* %371, align 4
  %686 = add i32 %685, 1
  %687 = zext i32 %686 to i64
  store i64 %687, i64* %RAX, align 8, !tbaa !2428
  %688 = icmp eq i32 %685, -1
  %689 = icmp eq i32 %686, 0
  %690 = or i1 %688, %689
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %18, align 1, !tbaa !2432
  %692 = and i32 %686, 255
  %693 = tail call i32 @llvm.ctpop.i32(i32 %692) #12
  %694 = trunc i32 %693 to i8
  %695 = and i8 %694, 1
  %696 = xor i8 %695, 1
  store i8 %696, i8* %25, align 1, !tbaa !2446
  %697 = xor i32 %686, %685
  %698 = lshr i32 %697, 4
  %699 = trunc i32 %698 to i8
  %700 = and i8 %699, 1
  store i8 %700, i8* %30, align 1, !tbaa !2447
  %701 = zext i1 %689 to i8
  store i8 %701, i8* %33, align 1, !tbaa !2448
  %702 = lshr i32 %686, 31
  %703 = trunc i32 %702 to i8
  store i8 %703, i8* %36, align 1, !tbaa !2449
  %704 = lshr i32 %685, 31
  %705 = xor i32 %702, %704
  %706 = add nuw nsw i32 %705, %702
  %707 = icmp eq i32 %706, 2
  %708 = zext i1 %707 to i8
  store i8 %708, i8* %42, align 1, !tbaa !2450
  %709 = add i64 %368, -48
  %710 = add i64 %404, 14
  store i64 %710, i64* %PC, align 8
  %711 = inttoptr i64 %709 to i32*
  store i32 %686, i32* %711, align 4
  %712 = load i64, i64* %RBP, align 8
  %713 = add i64 %712, -16
  %714 = load i64, i64* %PC, align 8
  %715 = add i64 %714, 3
  store i64 %715, i64* %PC, align 8
  %716 = inttoptr i64 %713 to i32*
  %717 = load i32, i32* %716, align 4
  %718 = zext i32 %717 to i64
  store i64 %718, i64* %RAX, align 8, !tbaa !2428
  %719 = add i64 %712, -44
  %720 = add i64 %714, 6
  store i64 %720, i64* %PC, align 8
  %721 = inttoptr i64 %719 to i32*
  %722 = load i32, i32* %721, align 4
  %723 = sub i32 %717, %722
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RAX, align 8, !tbaa !2428
  %725 = icmp ult i32 %717, %722
  %726 = zext i1 %725 to i8
  store i8 %726, i8* %18, align 1, !tbaa !2432
  %727 = and i32 %723, 255
  %728 = tail call i32 @llvm.ctpop.i32(i32 %727) #12
  %729 = trunc i32 %728 to i8
  %730 = and i8 %729, 1
  %731 = xor i8 %730, 1
  store i8 %731, i8* %25, align 1, !tbaa !2446
  %732 = xor i32 %722, %717
  %733 = xor i32 %732, %723
  %734 = lshr i32 %733, 4
  %735 = trunc i32 %734 to i8
  %736 = and i8 %735, 1
  store i8 %736, i8* %30, align 1, !tbaa !2447
  %737 = icmp eq i32 %723, 0
  %738 = zext i1 %737 to i8
  store i8 %738, i8* %33, align 1, !tbaa !2448
  %739 = lshr i32 %723, 31
  %740 = trunc i32 %739 to i8
  store i8 %740, i8* %36, align 1, !tbaa !2449
  %741 = lshr i32 %717, 31
  %742 = lshr i32 %722, 31
  %743 = xor i32 %742, %741
  %744 = xor i32 %739, %741
  %745 = add nuw nsw i32 %744, %743
  %746 = icmp eq i32 %745, 2
  %747 = zext i1 %746 to i8
  store i8 %747, i8* %42, align 1, !tbaa !2450
  %748 = add i64 %712, -8
  %749 = add i64 %714, 10
  store i64 %749, i64* %PC, align 8
  %750 = inttoptr i64 %748 to i64*
  %751 = load i64, i64* %750, align 8
  store i64 %751, i64* %RCX, align 8, !tbaa !2428
  %752 = add i64 %712, -12
  %753 = add i64 %714, 13
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %752 to i32*
  %755 = load i32, i32* %754, align 4
  %756 = zext i32 %755 to i64
  store i64 %756, i64* %RSI, align 8, !tbaa !2428
  %757 = add i64 %714, 17
  store i64 %757, i64* %PC, align 8
  %758 = load i32, i32* %721, align 4
  %759 = sext i32 %755 to i64
  %760 = sext i32 %758 to i64
  %761 = mul nsw i64 %760, %759
  %762 = trunc i64 %761 to i32
  %763 = and i64 %761, 4294967295
  store i64 %763, i64* %RSI, align 8, !tbaa !2428
  %764 = shl i64 %761, 32
  %765 = ashr exact i64 %764, 32
  %766 = icmp ne i64 %765, %761
  %767 = zext i1 %766 to i8
  store i8 %767, i8* %18, align 1, !tbaa !2432
  %768 = and i32 %762, 255
  %769 = tail call i32 @llvm.ctpop.i32(i32 %768) #12
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = xor i8 %771, 1
  store i8 %772, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %773 = lshr i32 %762, 31
  %774 = trunc i32 %773 to i8
  store i8 %774, i8* %36, align 1, !tbaa !2449
  store i8 %767, i8* %42, align 1, !tbaa !2450
  %775 = add i64 %714, 20
  store i64 %775, i64* %PC, align 8
  %776 = trunc i64 %761 to i32
  %777 = load i32, i32* %721, align 4
  %778 = add i32 %777, %776
  %779 = sext i32 %778 to i64
  %780 = shl nsw i64 %779, 2
  %781 = load i64, i64* %RCX, align 8
  %782 = add i64 %780, %781
  store i64 %782, i64* %RCX, align 8, !tbaa !2428
  %783 = icmp ult i64 %782, %781
  %784 = icmp ult i64 %782, %780
  %785 = or i1 %783, %784
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %18, align 1, !tbaa !2432
  %787 = trunc i64 %782 to i32
  %788 = and i32 %787, 255
  %789 = tail call i32 @llvm.ctpop.i32(i32 %788) #12
  %790 = trunc i32 %789 to i8
  %791 = and i8 %790, 1
  %792 = xor i8 %791, 1
  store i8 %792, i8* %25, align 1, !tbaa !2446
  %793 = xor i64 %780, %781
  %794 = xor i64 %793, %782
  %795 = lshr i64 %794, 4
  %796 = trunc i64 %795 to i8
  %797 = and i8 %796, 1
  store i8 %797, i8* %30, align 1, !tbaa !2447
  %798 = icmp eq i64 %782, 0
  %799 = zext i1 %798 to i8
  store i8 %799, i8* %33, align 1, !tbaa !2448
  %800 = lshr i64 %782, 63
  %801 = trunc i64 %800 to i8
  store i8 %801, i8* %36, align 1, !tbaa !2449
  %802 = lshr i64 %781, 63
  %803 = lshr i64 %779, 61
  %804 = and i64 %803, 1
  %805 = xor i64 %800, %802
  %806 = xor i64 %800, %804
  %807 = add nuw nsw i64 %805, %806
  %808 = icmp eq i64 %807, 2
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %42, align 1, !tbaa !2450
  %810 = load i32, i32* %EAX, align 4
  %811 = zext i32 %810 to i64
  store i64 %811, i64* %RDI, align 8, !tbaa !2428
  store i64 %782, i64* %RSI, align 8, !tbaa !2428
  %812 = add i64 %714, 4552
  %813 = add i64 %714, 40
  %814 = load i64, i64* %RSP, align 8, !tbaa !2428
  %815 = add i64 %814, -8
  %816 = inttoptr i64 %815 to i64*
  store i64 %813, i64* %816, align 8
  store i64 %815, i64* %RSP, align 8, !tbaa !2428
  store i64 %812, i64* %PC, align 8, !tbaa !2428
  %817 = tail call %struct.Memory* @sub_402b50_idamax_renamed_(%struct.State* nonnull %0, i64 %812, %struct.Memory* %MEMORY.1)
  %818 = load i64, i64* %PC, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %1378, align 1, !tbaa !2453
  %819 = load i64, i64* %RAX, align 8
  %820 = load i64, i64* %RBP, align 8
  %821 = add i64 %820, -44
  %822 = add i64 %818, 6
  store i64 %822, i64* %PC, align 8
  %823 = trunc i64 %819 to i32
  %824 = inttoptr i64 %821 to i32*
  %825 = load i32, i32* %824, align 4
  %826 = add i32 %825, %823
  %827 = zext i32 %826 to i64
  store i64 %827, i64* %RAX, align 8, !tbaa !2428
  %828 = icmp ult i32 %826, %823
  %829 = icmp ult i32 %826, %825
  %830 = or i1 %828, %829
  %831 = zext i1 %830 to i8
  store i8 %831, i8* %18, align 1, !tbaa !2432
  %832 = and i32 %826, 255
  %833 = tail call i32 @llvm.ctpop.i32(i32 %832) #12
  %834 = trunc i32 %833 to i8
  %835 = and i8 %834, 1
  %836 = xor i8 %835, 1
  store i8 %836, i8* %25, align 1, !tbaa !2446
  %837 = xor i32 %825, %823
  %838 = xor i32 %837, %826
  %839 = lshr i32 %838, 4
  %840 = trunc i32 %839 to i8
  %841 = and i8 %840, 1
  store i8 %841, i8* %30, align 1, !tbaa !2447
  %842 = icmp eq i32 %826, 0
  %843 = zext i1 %842 to i8
  store i8 %843, i8* %33, align 1, !tbaa !2448
  %844 = lshr i32 %826, 31
  %845 = trunc i32 %844 to i8
  store i8 %845, i8* %36, align 1, !tbaa !2449
  %846 = lshr i32 %823, 31
  %847 = lshr i32 %825, 31
  %848 = xor i32 %844, %846
  %849 = xor i32 %844, %847
  %850 = add nuw nsw i32 %848, %849
  %851 = icmp eq i32 %850, 2
  %852 = zext i1 %851 to i8
  store i8 %852, i8* %42, align 1, !tbaa !2450
  %853 = add i64 %820, -52
  %854 = add i64 %818, 9
  store i64 %854, i64* %PC, align 8
  %855 = inttoptr i64 %853 to i32*
  store i32 %826, i32* %855, align 4
  %856 = load i64, i64* %RBP, align 8
  %857 = add i64 %856, -52
  %858 = load i64, i64* %PC, align 8
  %859 = add i64 %858, 3
  store i64 %859, i64* %PC, align 8
  %860 = inttoptr i64 %857 to i32*
  %861 = load i32, i32* %860, align 4
  %862 = zext i32 %861 to i64
  store i64 %862, i64* %RAX, align 8, !tbaa !2428
  %863 = add i64 %856, -24
  %864 = add i64 %858, 7
  store i64 %864, i64* %PC, align 8
  %865 = inttoptr i64 %863 to i64*
  %866 = load i64, i64* %865, align 8
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = add i64 %856, -44
  %868 = add i64 %858, 11
  store i64 %868, i64* %PC, align 8
  %869 = inttoptr i64 %867 to i32*
  %870 = load i32, i32* %869, align 4
  %871 = sext i32 %870 to i64
  store i64 %871, i64* %RSI, align 8, !tbaa !2428
  %872 = shl nsw i64 %871, 2
  %873 = add i64 %872, %866
  %874 = add i64 %858, 14
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %873 to i32*
  store i32 %861, i32* %875, align 4
  %876 = load i64, i64* %RBP, align 8
  %877 = add i64 %876, -8
  %878 = load i64, i64* %PC, align 8
  %879 = add i64 %878, 4
  store i64 %879, i64* %PC, align 8
  %880 = inttoptr i64 %877 to i64*
  %881 = load i64, i64* %880, align 8
  store i64 %881, i64* %RCX, align 8, !tbaa !2428
  %882 = add i64 %876, -12
  %883 = add i64 %878, 7
  store i64 %883, i64* %PC, align 8
  %884 = inttoptr i64 %882 to i32*
  %885 = load i32, i32* %884, align 4
  %886 = zext i32 %885 to i64
  store i64 %886, i64* %RAX, align 8, !tbaa !2428
  %887 = add i64 %876, -44
  %888 = add i64 %878, 11
  store i64 %888, i64* %PC, align 8
  %889 = inttoptr i64 %887 to i32*
  %890 = load i32, i32* %889, align 4
  %891 = sext i32 %885 to i64
  %892 = sext i32 %890 to i64
  %893 = mul nsw i64 %892, %891
  %894 = trunc i64 %893 to i32
  %895 = and i64 %893, 4294967295
  store i64 %895, i64* %RAX, align 8, !tbaa !2428
  %896 = shl i64 %893, 32
  %897 = ashr exact i64 %896, 32
  %898 = icmp ne i64 %897, %893
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %18, align 1, !tbaa !2432
  %900 = and i32 %894, 255
  %901 = tail call i32 @llvm.ctpop.i32(i32 %900) #12
  %902 = trunc i32 %901 to i8
  %903 = and i8 %902, 1
  %904 = xor i8 %903, 1
  store i8 %904, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %905 = lshr i32 %894, 31
  %906 = trunc i32 %905 to i8
  store i8 %906, i8* %36, align 1, !tbaa !2449
  store i8 %899, i8* %42, align 1, !tbaa !2450
  %907 = add i64 %876, -52
  %908 = add i64 %878, 14
  store i64 %908, i64* %PC, align 8
  %909 = trunc i64 %893 to i32
  %910 = inttoptr i64 %907 to i32*
  %911 = load i32, i32* %910, align 4
  %912 = add i32 %911, %909
  %913 = zext i32 %912 to i64
  store i64 %913, i64* %RAX, align 8, !tbaa !2428
  %914 = icmp ult i32 %912, %909
  %915 = icmp ult i32 %912, %911
  %916 = or i1 %914, %915
  %917 = zext i1 %916 to i8
  store i8 %917, i8* %18, align 1, !tbaa !2432
  %918 = and i32 %912, 255
  %919 = tail call i32 @llvm.ctpop.i32(i32 %918) #12
  %920 = trunc i32 %919 to i8
  %921 = and i8 %920, 1
  %922 = xor i8 %921, 1
  store i8 %922, i8* %25, align 1, !tbaa !2446
  %923 = xor i32 %911, %909
  %924 = xor i32 %923, %912
  %925 = lshr i32 %924, 4
  %926 = trunc i32 %925 to i8
  %927 = and i8 %926, 1
  store i8 %927, i8* %30, align 1, !tbaa !2447
  %928 = icmp eq i32 %912, 0
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %33, align 1, !tbaa !2448
  %930 = lshr i32 %912, 31
  %931 = trunc i32 %930 to i8
  store i8 %931, i8* %36, align 1, !tbaa !2449
  %932 = lshr i32 %909, 31
  %933 = lshr i32 %911, 31
  %934 = xor i32 %930, %932
  %935 = xor i32 %930, %933
  %936 = add nuw nsw i32 %934, %935
  %937 = icmp eq i32 %936, 2
  %938 = zext i1 %937 to i8
  store i8 %938, i8* %42, align 1, !tbaa !2450
  %939 = sext i32 %912 to i64
  store i64 %939, i64* %RSI, align 8, !tbaa !2428
  %940 = shl nsw i64 %939, 2
  %941 = add i64 %881, %940
  %942 = add i64 %878, 22
  store i64 %942, i64* %PC, align 8
  %943 = inttoptr i64 %941 to float*
  %944 = load float, float* %943, align 4
  %945 = fpext float %944 to double
  store double %945, double* %1369, align 1, !tbaa !2454
  %946 = add i64 %878, 26
  store i64 %946, i64* %PC, align 8
  %947 = load double, double* %1370, align 1
  %948 = fcmp uno double %945, %947
  br i1 %948, label %949, label %959

; <label>:949:                                    ; preds = %block_40197a
  %950 = fadd double %945, %947
  %951 = bitcast double %950 to i64
  %952 = and i64 %951, 9221120237041090560
  %953 = icmp eq i64 %952, 9218868437227405312
  %954 = and i64 %951, 2251799813685247
  %955 = icmp ne i64 %954, 0
  %956 = and i1 %953, %955
  br i1 %956, label %957, label %965

; <label>:957:                                    ; preds = %949
  %958 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %946, %struct.Memory* %MEMORY.1) #13
  %.pre13 = load i64, i64* %PC, align 8
  %.pre14 = load i8, i8* %33, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:959:                                    ; preds = %block_40197a
  %960 = fcmp ogt double %945, %947
  br i1 %960, label %965, label %961

; <label>:961:                                    ; preds = %959
  %962 = fcmp olt double %945, %947
  br i1 %962, label %965, label %963

; <label>:963:                                    ; preds = %961
  %964 = fcmp oeq double %945, %947
  br i1 %964, label %965, label %969

; <label>:965:                                    ; preds = %963, %961, %959, %949
  %966 = phi i8 [ 0, %959 ], [ 0, %961 ], [ 1, %963 ], [ 1, %949 ]
  %967 = phi i8 [ 0, %959 ], [ 0, %961 ], [ 0, %963 ], [ 1, %949 ]
  %968 = phi i8 [ 0, %959 ], [ 1, %961 ], [ 0, %963 ], [ 1, %949 ]
  store i8 %966, i8* %33, align 1, !tbaa !2456
  store i8 %967, i8* %25, align 1, !tbaa !2456
  store i8 %968, i8* %18, align 1, !tbaa !2456
  br label %969

; <label>:969:                                    ; preds = %965, %963
  %970 = phi i8 [ %966, %965 ], [ %929, %963 ]
  store i8 0, i8* %42, align 1, !tbaa !2456
  store i8 0, i8* %36, align 1, !tbaa !2456
  store i8 0, i8* %30, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %969, %957
  %971 = phi i8 [ %.pre14, %957 ], [ %970, %969 ]
  %972 = phi i64 [ %.pre13, %957 ], [ %946, %969 ]
  %973 = phi %struct.Memory* [ %958, %957 ], [ %MEMORY.1, %969 ]
  %974 = icmp eq i8 %971, 0
  %.v46 = select i1 %974, i64 17, i64 6
  %975 = add i64 %972, %.v46
  store i64 %975, i64* %PC, align 8, !tbaa !2428
  br i1 %974, label %block_4019f2, label %block_4019e7

block_4019ed:                                     ; preds = %block_4019e7
  %976 = load i64, i64* %RBP, align 8
  %977 = add i64 %976, -44
  %978 = add i64 %682, 461
  store i64 %978, i64* %PC, align 8
  %979 = inttoptr i64 %977 to i32*
  %980 = load i32, i32* %979, align 4
  %981 = zext i32 %980 to i64
  store i64 %981, i64* %RAX, align 8, !tbaa !2428
  %982 = add i64 %976, -32
  %983 = add i64 %682, 465
  store i64 %983, i64* %PC, align 8
  %984 = inttoptr i64 %982 to i64*
  %985 = load i64, i64* %984, align 8
  store i64 %985, i64* %RCX, align 8, !tbaa !2428
  %986 = add i64 %682, 467
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %985 to i32*
  store i32 %980, i32* %987, align 4
  %.pre18 = load i64, i64* %PC, align 8
  %.pre19 = load i64, i64* %RBP, align 8
  br label %block_401bc0

block_401a60:                                     ; preds = %block_4019fe, %block_4019f2
  %988 = phi i64 [ %.pre16, %block_4019fe ], [ %332, %block_4019f2 ]
  %989 = phi i64 [ %.pre15, %block_4019fe ], [ %366, %block_4019f2 ]
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %990 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 72) to i64*), align 8
  store i64 %990, i64* %1371, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1372, align 1, !tbaa !2454
  %991 = add i64 %988, -8
  %992 = add i64 %989, 17
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to i64*
  %994 = load i64, i64* %993, align 8
  store i64 %994, i64* %RAX, align 8, !tbaa !2428
  %995 = add i64 %988, -12
  %996 = add i64 %989, 20
  store i64 %996, i64* %PC, align 8
  %997 = inttoptr i64 %995 to i32*
  %998 = load i32, i32* %997, align 4
  %999 = zext i32 %998 to i64
  store i64 %999, i64* %RCX, align 8, !tbaa !2428
  %1000 = add i64 %988, -44
  %1001 = add i64 %989, 24
  store i64 %1001, i64* %PC, align 8
  %1002 = inttoptr i64 %1000 to i32*
  %1003 = load i32, i32* %1002, align 4
  %1004 = sext i32 %998 to i64
  %1005 = sext i32 %1003 to i64
  %1006 = mul nsw i64 %1005, %1004
  %1007 = trunc i64 %1006 to i32
  %1008 = and i64 %1006, 4294967295
  store i64 %1008, i64* %RCX, align 8, !tbaa !2428
  %1009 = shl i64 %1006, 32
  %1010 = ashr exact i64 %1009, 32
  %1011 = icmp ne i64 %1010, %1006
  %1012 = zext i1 %1011 to i8
  store i8 %1012, i8* %18, align 1, !tbaa !2432
  %1013 = and i32 %1007, 255
  %1014 = tail call i32 @llvm.ctpop.i32(i32 %1013) #12
  %1015 = trunc i32 %1014 to i8
  %1016 = and i8 %1015, 1
  %1017 = xor i8 %1016, 1
  store i8 %1017, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1018 = lshr i32 %1007, 31
  %1019 = trunc i32 %1018 to i8
  store i8 %1019, i8* %36, align 1, !tbaa !2449
  store i8 %1012, i8* %42, align 1, !tbaa !2450
  %1020 = add i64 %989, 27
  store i64 %1020, i64* %PC, align 8
  %1021 = trunc i64 %1006 to i32
  %1022 = load i32, i32* %1002, align 4
  %1023 = add i32 %1022, %1021
  %1024 = zext i32 %1023 to i64
  store i64 %1024, i64* %RCX, align 8, !tbaa !2428
  %1025 = icmp ult i32 %1023, %1021
  %1026 = icmp ult i32 %1023, %1022
  %1027 = or i1 %1025, %1026
  %1028 = zext i1 %1027 to i8
  store i8 %1028, i8* %18, align 1, !tbaa !2432
  %1029 = and i32 %1023, 255
  %1030 = tail call i32 @llvm.ctpop.i32(i32 %1029) #12
  %1031 = trunc i32 %1030 to i8
  %1032 = and i8 %1031, 1
  %1033 = xor i8 %1032, 1
  store i8 %1033, i8* %25, align 1, !tbaa !2446
  %1034 = xor i32 %1022, %1021
  %1035 = xor i32 %1034, %1023
  %1036 = lshr i32 %1035, 4
  %1037 = trunc i32 %1036 to i8
  %1038 = and i8 %1037, 1
  store i8 %1038, i8* %30, align 1, !tbaa !2447
  %1039 = icmp eq i32 %1023, 0
  %1040 = zext i1 %1039 to i8
  store i8 %1040, i8* %33, align 1, !tbaa !2448
  %1041 = lshr i32 %1023, 31
  %1042 = trunc i32 %1041 to i8
  store i8 %1042, i8* %36, align 1, !tbaa !2449
  %1043 = lshr i32 %1021, 31
  %1044 = lshr i32 %1022, 31
  %1045 = xor i32 %1041, %1043
  %1046 = xor i32 %1041, %1044
  %1047 = add nuw nsw i32 %1045, %1046
  %1048 = icmp eq i32 %1047, 2
  %1049 = zext i1 %1048 to i8
  store i8 %1049, i8* %42, align 1, !tbaa !2450
  %1050 = sext i32 %1023 to i64
  store i64 %1050, i64* %RSI, align 8, !tbaa !2428
  %1051 = shl nsw i64 %1050, 2
  %1052 = add i64 %994, %1051
  %1053 = add i64 %989, 35
  store i64 %1053, i64* %PC, align 8
  %1054 = inttoptr i64 %1052 to float*
  %1055 = load float, float* %1054, align 4
  %1056 = fpext float %1055 to double
  store double %1056, double* %1369, align 1, !tbaa !2454
  %1057 = bitcast i64 %990 to double
  %1058 = fdiv double %1057, %1056
  %.cast = bitcast double %1058 to <2 x i32>
  %1059 = fptrunc double %1058 to float
  store float %1059, float* %1373, align 1, !tbaa !2451
  %1060 = extractelement <2 x i32> %.cast, i32 1
  store i32 %1060, i32* %1365, align 1, !tbaa !2451
  store i32 0, i32* %1366, align 1, !tbaa !2451
  store i32 0, i32* %1368, align 1, !tbaa !2451
  %1061 = load i64, i64* %RBP, align 8
  %1062 = add i64 %1061, -36
  %1063 = add i64 %989, 48
  store i64 %1063, i64* %PC, align 8
  %1064 = load <2 x float>, <2 x float>* %1374, align 1
  %1065 = extractelement <2 x float> %1064, i32 0
  %1066 = inttoptr i64 %1062 to float*
  store float %1065, float* %1066, align 4
  %1067 = load i64, i64* %RBP, align 8
  %1068 = add i64 %1067, -16
  %1069 = load i64, i64* %PC, align 8
  %1070 = add i64 %1069, 3
  store i64 %1070, i64* %PC, align 8
  %1071 = inttoptr i64 %1068 to i32*
  %1072 = load i32, i32* %1071, align 4
  %1073 = zext i32 %1072 to i64
  store i64 %1073, i64* %RCX, align 8, !tbaa !2428
  %1074 = add i64 %1067, -44
  %1075 = add i64 %1069, 6
  store i64 %1075, i64* %PC, align 8
  %1076 = inttoptr i64 %1074 to i32*
  %1077 = load i32, i32* %1076, align 4
  %1078 = add i32 %1077, 1
  %1079 = zext i32 %1078 to i64
  store i64 %1079, i64* %RDI, align 8, !tbaa !2428
  %1080 = lshr i32 %1078, 31
  %1081 = sub i32 %1072, %1078
  %1082 = zext i32 %1081 to i64
  store i64 %1082, i64* %RCX, align 8, !tbaa !2428
  %1083 = icmp ult i32 %1072, %1078
  %1084 = zext i1 %1083 to i8
  store i8 %1084, i8* %18, align 1, !tbaa !2432
  %1085 = and i32 %1081, 255
  %1086 = tail call i32 @llvm.ctpop.i32(i32 %1085) #12
  %1087 = trunc i32 %1086 to i8
  %1088 = and i8 %1087, 1
  %1089 = xor i8 %1088, 1
  store i8 %1089, i8* %25, align 1, !tbaa !2446
  %1090 = xor i32 %1078, %1072
  %1091 = xor i32 %1090, %1081
  %1092 = lshr i32 %1091, 4
  %1093 = trunc i32 %1092 to i8
  %1094 = and i8 %1093, 1
  store i8 %1094, i8* %30, align 1, !tbaa !2447
  %1095 = icmp eq i32 %1081, 0
  %1096 = zext i1 %1095 to i8
  store i8 %1096, i8* %33, align 1, !tbaa !2448
  %1097 = lshr i32 %1081, 31
  %1098 = trunc i32 %1097 to i8
  store i8 %1098, i8* %36, align 1, !tbaa !2449
  %1099 = lshr i32 %1072, 31
  %1100 = xor i32 %1080, %1099
  %1101 = xor i32 %1097, %1099
  %1102 = add nuw nsw i32 %1101, %1100
  %1103 = icmp eq i32 %1102, 2
  %1104 = zext i1 %1103 to i8
  store i8 %1104, i8* %42, align 1, !tbaa !2450
  %1105 = add i64 %1067, -36
  %1106 = add i64 %1069, 16
  store i64 %1106, i64* %PC, align 8
  %1107 = inttoptr i64 %1105 to i32*
  %1108 = load i32, i32* %1107, align 4
  store i32 %1108, i32* %1363, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1377, align 1, !tbaa !2451
  %1109 = add i64 %1067, -8
  %1110 = add i64 %1069, 20
  store i64 %1110, i64* %PC, align 8
  %1111 = inttoptr i64 %1109 to i64*
  %1112 = load i64, i64* %1111, align 8
  store i64 %1112, i64* %RAX, align 8, !tbaa !2428
  %1113 = load i64, i64* %RBP, align 8
  %1114 = add i64 %1113, -12
  %1115 = add i64 %1069, 23
  store i64 %1115, i64* %PC, align 8
  %1116 = inttoptr i64 %1114 to i32*
  %1117 = load i32, i32* %1116, align 4
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RDI, align 8, !tbaa !2428
  %1119 = add i64 %1113, -44
  %1120 = add i64 %1069, 27
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i32*
  %1122 = load i32, i32* %1121, align 4
  %1123 = sext i32 %1117 to i64
  %1124 = sext i32 %1122 to i64
  %1125 = mul nsw i64 %1124, %1123
  %1126 = trunc i64 %1125 to i32
  %1127 = and i64 %1125, 4294967295
  store i64 %1127, i64* %RDI, align 8, !tbaa !2428
  %1128 = shl i64 %1125, 32
  %1129 = ashr exact i64 %1128, 32
  %1130 = icmp ne i64 %1129, %1125
  %1131 = zext i1 %1130 to i8
  store i8 %1131, i8* %18, align 1, !tbaa !2432
  %1132 = and i32 %1126, 255
  %1133 = tail call i32 @llvm.ctpop.i32(i32 %1132) #12
  %1134 = trunc i32 %1133 to i8
  %1135 = and i8 %1134, 1
  %1136 = xor i8 %1135, 1
  store i8 %1136, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1137 = lshr i32 %1126, 31
  %1138 = trunc i32 %1137 to i8
  store i8 %1138, i8* %36, align 1, !tbaa !2449
  store i8 %1131, i8* %42, align 1, !tbaa !2450
  %1139 = add i64 %1069, 30
  store i64 %1139, i64* %PC, align 8
  %1140 = trunc i64 %1125 to i32
  %1141 = load i32, i32* %1121, align 4
  %1142 = add i32 %1141, %1140
  %1143 = add i32 %1142, 1
  %1144 = sext i32 %1143 to i64
  %1145 = shl nsw i64 %1144, 2
  %1146 = load i64, i64* %RAX, align 8
  %1147 = add i64 %1145, %1146
  store i64 %1147, i64* %RAX, align 8, !tbaa !2428
  %1148 = icmp ult i64 %1147, %1146
  %1149 = icmp ult i64 %1147, %1145
  %1150 = or i1 %1148, %1149
  %1151 = zext i1 %1150 to i8
  store i8 %1151, i8* %18, align 1, !tbaa !2432
  %1152 = trunc i64 %1147 to i32
  %1153 = and i32 %1152, 255
  %1154 = tail call i32 @llvm.ctpop.i32(i32 %1153) #12
  %1155 = trunc i32 %1154 to i8
  %1156 = and i8 %1155, 1
  %1157 = xor i8 %1156, 1
  store i8 %1157, i8* %25, align 1, !tbaa !2446
  %1158 = xor i64 %1145, %1146
  %1159 = xor i64 %1158, %1147
  %1160 = lshr i64 %1159, 4
  %1161 = trunc i64 %1160 to i8
  %1162 = and i8 %1161, 1
  store i8 %1162, i8* %30, align 1, !tbaa !2447
  %1163 = icmp eq i64 %1147, 0
  %1164 = zext i1 %1163 to i8
  store i8 %1164, i8* %33, align 1, !tbaa !2448
  %1165 = lshr i64 %1147, 63
  %1166 = trunc i64 %1165 to i8
  store i8 %1166, i8* %36, align 1, !tbaa !2449
  %1167 = lshr i64 %1146, 63
  %1168 = lshr i64 %1144, 61
  %1169 = and i64 %1168, 1
  %1170 = xor i64 %1165, %1167
  %1171 = xor i64 %1165, %1169
  %1172 = add nuw nsw i64 %1170, %1171
  %1173 = icmp eq i64 %1172, 2
  %1174 = zext i1 %1173 to i8
  store i8 %1174, i8* %42, align 1, !tbaa !2450
  %1175 = load i32, i32* %ECX, align 4
  %1176 = zext i32 %1175 to i64
  store i64 %1176, i64* %RDI, align 8, !tbaa !2428
  store i64 %1147, i64* %RSI, align 8, !tbaa !2428
  %1177 = add i64 %1069, 4704
  %1178 = add i64 %1069, 53
  %1179 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1180 = add i64 %1179, -8
  %1181 = inttoptr i64 %1180 to i64*
  store i64 %1178, i64* %1181, align 8
  store i64 %1180, i64* %RSP, align 8, !tbaa !2428
  store i64 %1177, i64* %PC, align 8, !tbaa !2428
  %1182 = tail call %struct.Memory* @sub_402cf0_dscal_renamed_(%struct.State* nonnull %0, i64 %1177, %struct.Memory* %973)
  %1183 = load i64, i64* %RBP, align 8
  %1184 = add i64 %1183, -48
  %1185 = load i64, i64* %PC, align 8
  %1186 = add i64 %1185, 3
  store i64 %1186, i64* %PC, align 8
  %1187 = inttoptr i64 %1184 to i32*
  %1188 = load i32, i32* %1187, align 4
  %1189 = zext i32 %1188 to i64
  store i64 %1189, i64* %RCX, align 8, !tbaa !2428
  %1190 = add i64 %1183, -40
  %1191 = add i64 %1185, 6
  store i64 %1191, i64* %PC, align 8
  %1192 = inttoptr i64 %1190 to i32*
  store i32 %1188, i32* %1192, align 4
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_401acb

block_401bd8.loopexit:                            ; preds = %block_40196e
  br label %block_401bd8

block_401bd8:                                     ; preds = %block_401bd8.loopexit, %block_401930.block_401bd8_crit_edge
  %.pre-phi43 = phi double* [ %.pre42, %block_401930.block_401bd8_crit_edge ], [ %1370, %block_401bd8.loopexit ]
  %.pre-phi41 = phi double* [ %.pre40, %block_401930.block_401bd8_crit_edge ], [ %1369, %block_401bd8.loopexit ]
  %.pre-phi39 = phi i32* [ %.pre38, %block_401930.block_401bd8_crit_edge ], [ %1368, %block_401bd8.loopexit ]
  %.pre-phi35 = phi i32* [ %.pre34, %block_401930.block_401bd8_crit_edge ], [ %1366, %block_401bd8.loopexit ]
  %.pre-phi33 = phi i32* [ %.pre32, %block_401930.block_401bd8_crit_edge ], [ %1365, %block_401bd8.loopexit ]
  %.pre-phi29 = phi i32* [ %.pre28, %block_401930.block_401bd8_crit_edge ], [ %1363, %block_401bd8.loopexit ]
  %1193 = phi i64 [ %110, %block_401930.block_401bd8_crit_edge ], [ %368, %block_401bd8.loopexit ]
  %1194 = phi i64 [ %126, %block_401930.block_401bd8_crit_edge ], [ %405, %block_401bd8.loopexit ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_401930.block_401bd8_crit_edge ], [ %MEMORY.1, %block_401bd8.loopexit ]
  store i32 0, i32* %.pre-phi29, align 1, !tbaa !2453
  store i32 0, i32* %.pre-phi33, align 1, !tbaa !2453
  store i32 0, i32* %.pre-phi35, align 1, !tbaa !2453
  store i32 0, i32* %.pre-phi39, align 1, !tbaa !2453
  %1195 = add i64 %1193, -16
  %1196 = add i64 %1194, 6
  store i64 %1196, i64* %PC, align 8
  %1197 = inttoptr i64 %1195 to i32*
  %1198 = load i32, i32* %1197, align 4
  %1199 = add i32 %1198, -1
  %1200 = zext i32 %1199 to i64
  store i64 %1200, i64* %RAX, align 8, !tbaa !2428
  %1201 = icmp eq i32 %1198, 0
  %1202 = zext i1 %1201 to i8
  store i8 %1202, i8* %18, align 1, !tbaa !2432
  %1203 = and i32 %1199, 255
  %1204 = tail call i32 @llvm.ctpop.i32(i32 %1203) #12
  %1205 = trunc i32 %1204 to i8
  %1206 = and i8 %1205, 1
  %1207 = xor i8 %1206, 1
  store i8 %1207, i8* %25, align 1, !tbaa !2446
  %1208 = xor i32 %1199, %1198
  %1209 = lshr i32 %1208, 4
  %1210 = trunc i32 %1209 to i8
  %1211 = and i8 %1210, 1
  store i8 %1211, i8* %30, align 1, !tbaa !2447
  %1212 = icmp eq i32 %1199, 0
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %33, align 1, !tbaa !2448
  %1214 = lshr i32 %1199, 31
  %1215 = trunc i32 %1214 to i8
  store i8 %1215, i8* %36, align 1, !tbaa !2449
  %1216 = lshr i32 %1198, 31
  %1217 = xor i32 %1214, %1216
  %1218 = add nuw nsw i32 %1217, %1216
  %1219 = icmp eq i32 %1218, 2
  %1220 = zext i1 %1219 to i8
  store i8 %1220, i8* %42, align 1, !tbaa !2450
  %1221 = add i64 %1193, -24
  %1222 = add i64 %1194, 13
  store i64 %1222, i64* %PC, align 8
  %1223 = inttoptr i64 %1221 to i64*
  %1224 = load i64, i64* %1223, align 8
  store i64 %1224, i64* %RCX, align 8, !tbaa !2428
  %1225 = add i64 %1194, 16
  store i64 %1225, i64* %PC, align 8
  %1226 = load i32, i32* %1197, align 4
  %1227 = add i32 %1226, -1
  %1228 = zext i32 %1227 to i64
  store i64 %1228, i64* %RDX, align 8, !tbaa !2428
  %1229 = icmp eq i32 %1226, 0
  %1230 = zext i1 %1229 to i8
  store i8 %1230, i8* %18, align 1, !tbaa !2432
  %1231 = and i32 %1227, 255
  %1232 = tail call i32 @llvm.ctpop.i32(i32 %1231) #12
  %1233 = trunc i32 %1232 to i8
  %1234 = and i8 %1233, 1
  %1235 = xor i8 %1234, 1
  store i8 %1235, i8* %25, align 1, !tbaa !2446
  %1236 = xor i32 %1227, %1226
  %1237 = lshr i32 %1236, 4
  %1238 = trunc i32 %1237 to i8
  %1239 = and i8 %1238, 1
  store i8 %1239, i8* %30, align 1, !tbaa !2447
  %1240 = icmp eq i32 %1227, 0
  %1241 = zext i1 %1240 to i8
  store i8 %1241, i8* %33, align 1, !tbaa !2448
  %1242 = lshr i32 %1227, 31
  %1243 = trunc i32 %1242 to i8
  store i8 %1243, i8* %36, align 1, !tbaa !2449
  %1244 = lshr i32 %1226, 31
  %1245 = xor i32 %1242, %1244
  %1246 = add nuw nsw i32 %1245, %1244
  %1247 = icmp eq i32 %1246, 2
  %1248 = zext i1 %1247 to i8
  store i8 %1248, i8* %42, align 1, !tbaa !2450
  %1249 = sext i32 %1227 to i64
  store i64 %1249, i64* %RSI, align 8, !tbaa !2428
  %1250 = shl nsw i64 %1249, 2
  %1251 = add i64 %1224, %1250
  %1252 = add i64 %1194, 25
  store i64 %1252, i64* %PC, align 8
  %1253 = inttoptr i64 %1251 to i32*
  store i32 %1199, i32* %1253, align 4
  %1254 = load i64, i64* %RBP, align 8
  %1255 = add i64 %1254, -8
  %1256 = load i64, i64* %PC, align 8
  %1257 = add i64 %1256, 4
  store i64 %1257, i64* %PC, align 8
  %1258 = inttoptr i64 %1255 to i64*
  %1259 = load i64, i64* %1258, align 8
  store i64 %1259, i64* %RCX, align 8, !tbaa !2428
  %1260 = add i64 %1254, -12
  %1261 = add i64 %1256, 7
  store i64 %1261, i64* %PC, align 8
  %1262 = inttoptr i64 %1260 to i32*
  %1263 = load i32, i32* %1262, align 4
  %1264 = zext i32 %1263 to i64
  store i64 %1264, i64* %RAX, align 8, !tbaa !2428
  %1265 = add i64 %1254, -16
  %1266 = add i64 %1256, 10
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1265 to i32*
  %1268 = load i32, i32* %1267, align 4
  %1269 = add i32 %1268, -1
  %1270 = zext i32 %1269 to i64
  store i64 %1270, i64* %RDX, align 8, !tbaa !2428
  %1271 = sext i32 %1263 to i64
  %1272 = sext i32 %1269 to i64
  %1273 = mul nsw i64 %1272, %1271
  %1274 = trunc i64 %1273 to i32
  %1275 = and i64 %1273, 4294967295
  store i64 %1275, i64* %RAX, align 8, !tbaa !2428
  %1276 = shl i64 %1273, 32
  %1277 = ashr exact i64 %1276, 32
  %1278 = icmp ne i64 %1277, %1273
  %1279 = zext i1 %1278 to i8
  store i8 %1279, i8* %18, align 1, !tbaa !2432
  %1280 = and i32 %1274, 255
  %1281 = tail call i32 @llvm.ctpop.i32(i32 %1280) #12
  %1282 = trunc i32 %1281 to i8
  %1283 = and i8 %1282, 1
  %1284 = xor i8 %1283, 1
  store i8 %1284, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1285 = lshr i32 %1274, 31
  %1286 = trunc i32 %1285 to i8
  store i8 %1286, i8* %36, align 1, !tbaa !2449
  store i8 %1279, i8* %42, align 1, !tbaa !2450
  %1287 = add i64 %1256, 19
  store i64 %1287, i64* %PC, align 8
  %1288 = load i32, i32* %1267, align 4
  %1289 = add i32 %1288, -1
  %1290 = zext i32 %1289 to i64
  store i64 %1290, i64* %RDX, align 8, !tbaa !2428
  %1291 = lshr i32 %1289, 31
  %1292 = trunc i64 %1273 to i32
  %1293 = add i32 %1289, %1292
  %1294 = zext i32 %1293 to i64
  store i64 %1294, i64* %RAX, align 8, !tbaa !2428
  %1295 = icmp ult i32 %1293, %1292
  %1296 = icmp ult i32 %1293, %1289
  %1297 = or i1 %1295, %1296
  %1298 = zext i1 %1297 to i8
  store i8 %1298, i8* %18, align 1, !tbaa !2432
  %1299 = and i32 %1293, 255
  %1300 = tail call i32 @llvm.ctpop.i32(i32 %1299) #12
  %1301 = trunc i32 %1300 to i8
  %1302 = and i8 %1301, 1
  %1303 = xor i8 %1302, 1
  store i8 %1303, i8* %25, align 1, !tbaa !2446
  %1304 = xor i64 %1290, %1273
  %1305 = trunc i64 %1304 to i32
  %1306 = xor i32 %1305, %1293
  %1307 = lshr i32 %1306, 4
  %1308 = trunc i32 %1307 to i8
  %1309 = and i8 %1308, 1
  store i8 %1309, i8* %30, align 1, !tbaa !2447
  %1310 = icmp eq i32 %1293, 0
  %1311 = zext i1 %1310 to i8
  store i8 %1311, i8* %33, align 1, !tbaa !2448
  %1312 = lshr i32 %1293, 31
  %1313 = trunc i32 %1312 to i8
  store i8 %1313, i8* %36, align 1, !tbaa !2449
  %1314 = lshr i32 %1292, 31
  %1315 = xor i32 %1312, %1314
  %1316 = xor i32 %1312, %1291
  %1317 = add nuw nsw i32 %1315, %1316
  %1318 = icmp eq i32 %1317, 2
  %1319 = zext i1 %1318 to i8
  store i8 %1319, i8* %42, align 1, !tbaa !2450
  %1320 = sext i32 %1293 to i64
  store i64 %1320, i64* %RSI, align 8, !tbaa !2428
  %1321 = load i64, i64* %RCX, align 8
  %1322 = shl nsw i64 %1320, 2
  %1323 = add i64 %1321, %1322
  %1324 = add i64 %1256, 32
  store i64 %1324, i64* %PC, align 8
  %1325 = inttoptr i64 %1323 to float*
  %1326 = load float, float* %1325, align 4
  %1327 = fpext float %1326 to double
  store double %1327, double* %.pre-phi41, align 1, !tbaa !2454
  %1328 = add i64 %1256, 36
  store i64 %1328, i64* %PC, align 8
  %1329 = load double, double* %.pre-phi43, align 1
  %1330 = fcmp uno double %1327, %1329
  br i1 %1330, label %1331, label %1341

; <label>:1331:                                   ; preds = %block_401bd8
  %1332 = fadd double %1327, %1329
  %1333 = bitcast double %1332 to i64
  %1334 = and i64 %1333, 9221120237041090560
  %1335 = icmp eq i64 %1334, 9218868437227405312
  %1336 = and i64 %1333, 2251799813685247
  %1337 = icmp ne i64 %1336, 0
  %1338 = and i1 %1335, %1337
  br i1 %1338, label %1339, label %1347

; <label>:1339:                                   ; preds = %1331
  %1340 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1328, %struct.Memory* %MEMORY.3) #13
  %.pre22 = load i64, i64* %PC, align 8
  %.pre23 = load i8, i8* %33, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1341:                                   ; preds = %block_401bd8
  %1342 = fcmp ogt double %1327, %1329
  br i1 %1342, label %1347, label %1343

; <label>:1343:                                   ; preds = %1341
  %1344 = fcmp olt double %1327, %1329
  br i1 %1344, label %1347, label %1345

; <label>:1345:                                   ; preds = %1343
  %1346 = fcmp oeq double %1327, %1329
  br i1 %1346, label %1347, label %1351

; <label>:1347:                                   ; preds = %1345, %1343, %1341, %1331
  %1348 = phi i8 [ 0, %1341 ], [ 0, %1343 ], [ 1, %1345 ], [ 1, %1331 ]
  %1349 = phi i8 [ 0, %1341 ], [ 0, %1343 ], [ 0, %1345 ], [ 1, %1331 ]
  %1350 = phi i8 [ 0, %1341 ], [ 1, %1343 ], [ 0, %1345 ], [ 1, %1331 ]
  store i8 %1348, i8* %33, align 1, !tbaa !2456
  store i8 %1349, i8* %25, align 1, !tbaa !2456
  store i8 %1350, i8* %18, align 1, !tbaa !2456
  br label %1351

; <label>:1351:                                   ; preds = %1347, %1345
  %1352 = phi i8 [ %1348, %1347 ], [ %1311, %1345 ]
  store i8 0, i8* %42, align 1, !tbaa !2456
  store i8 0, i8* %36, align 1, !tbaa !2456
  store i8 0, i8* %30, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1351, %1339
  %1353 = phi i8 [ %.pre23, %1339 ], [ %1352, %1351 ]
  %1354 = phi i64 [ %.pre22, %1339 ], [ %1328, %1351 ]
  %1355 = phi %struct.Memory* [ %1340, %1339 ], [ %MEMORY.3, %1351 ]
  %1356 = icmp eq i8 %1353, 0
  %.v45 = select i1 %1356, i64 24, i64 6
  %1357 = add i64 %1354, %.v45
  store i64 %1357, i64* %PC, align 8, !tbaa !2428
  br i1 %1356, label %block_401c2d, label %block_401c1b

block_401967:                                     ; preds = %block_401930
  %1358 = add i64 %110, -44
  %1359 = add i64 %126, 7
  store i64 %1359, i64* %PC, align 8
  %1360 = inttoptr i64 %1358 to i32*
  store i32 0, i32* %1360, align 4
  %1361 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1363 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %1364 = getelementptr inbounds i8, i8* %1361, i64 4
  %1365 = bitcast i8* %1364 to i32*
  %1366 = bitcast i64* %1362 to i32*
  %1367 = getelementptr inbounds i8, i8* %1361, i64 12
  %1368 = bitcast i8* %1367 to i32*
  %1369 = bitcast %union.VectorReg* %8 to double*
  %1370 = bitcast [32 x %union.VectorReg]* %7 to double*
  %1371 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %7, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1372 = bitcast i64* %1362 to double*
  %1373 = bitcast [32 x %union.VectorReg]* %7 to float*
  %1374 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %1375 = bitcast i8* %1364 to float*
  %1376 = bitcast i64* %1362 to float*
  %1377 = bitcast i8* %1367 to float*
  %.pre = load i64, i64* %PC, align 8
  %1378 = bitcast [32 x %union.VectorReg]* %7 to <4 x i32>*
  br label %block_40196e

block_401ad7:                                     ; preds = %block_401acb
  %1379 = add i64 %1486, -8
  %1380 = add i64 %1522, 4
  store i64 %1380, i64* %PC, align 8
  %1381 = inttoptr i64 %1379 to i64*
  %1382 = load i64, i64* %1381, align 8
  store i64 %1382, i64* %RAX, align 8, !tbaa !2428
  %1383 = add i64 %1486, -12
  %1384 = add i64 %1522, 7
  store i64 %1384, i64* %PC, align 8
  %1385 = inttoptr i64 %1383 to i32*
  %1386 = load i32, i32* %1385, align 4
  %1387 = zext i32 %1386 to i64
  store i64 %1387, i64* %RCX, align 8, !tbaa !2428
  %1388 = add i64 %1522, 11
  store i64 %1388, i64* %PC, align 8
  %1389 = load i32, i32* %1489, align 4
  %1390 = sext i32 %1386 to i64
  %1391 = sext i32 %1389 to i64
  %1392 = mul nsw i64 %1391, %1390
  %1393 = trunc i64 %1392 to i32
  %1394 = and i64 %1392, 4294967295
  store i64 %1394, i64* %RCX, align 8, !tbaa !2428
  %1395 = shl i64 %1392, 32
  %1396 = ashr exact i64 %1395, 32
  %1397 = icmp ne i64 %1396, %1392
  %1398 = zext i1 %1397 to i8
  store i8 %1398, i8* %18, align 1, !tbaa !2432
  %1399 = and i32 %1393, 255
  %1400 = tail call i32 @llvm.ctpop.i32(i32 %1399) #12
  %1401 = trunc i32 %1400 to i8
  %1402 = and i8 %1401, 1
  %1403 = xor i8 %1402, 1
  store i8 %1403, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1404 = lshr i32 %1393, 31
  %1405 = trunc i32 %1404 to i8
  store i8 %1405, i8* %36, align 1, !tbaa !2449
  store i8 %1398, i8* %42, align 1, !tbaa !2450
  %1406 = add i64 %1486, -52
  %1407 = add i64 %1522, 14
  store i64 %1407, i64* %PC, align 8
  %1408 = trunc i64 %1392 to i32
  %1409 = inttoptr i64 %1406 to i32*
  %1410 = load i32, i32* %1409, align 4
  %1411 = add i32 %1410, %1408
  %1412 = zext i32 %1411 to i64
  store i64 %1412, i64* %RCX, align 8, !tbaa !2428
  %1413 = icmp ult i32 %1411, %1408
  %1414 = icmp ult i32 %1411, %1410
  %1415 = or i1 %1413, %1414
  %1416 = zext i1 %1415 to i8
  store i8 %1416, i8* %18, align 1, !tbaa !2432
  %1417 = and i32 %1411, 255
  %1418 = tail call i32 @llvm.ctpop.i32(i32 %1417) #12
  %1419 = trunc i32 %1418 to i8
  %1420 = and i8 %1419, 1
  %1421 = xor i8 %1420, 1
  store i8 %1421, i8* %25, align 1, !tbaa !2446
  %1422 = xor i32 %1410, %1408
  %1423 = xor i32 %1422, %1411
  %1424 = lshr i32 %1423, 4
  %1425 = trunc i32 %1424 to i8
  %1426 = and i8 %1425, 1
  store i8 %1426, i8* %30, align 1, !tbaa !2447
  %1427 = icmp eq i32 %1411, 0
  %1428 = zext i1 %1427 to i8
  store i8 %1428, i8* %33, align 1, !tbaa !2448
  %1429 = lshr i32 %1411, 31
  %1430 = trunc i32 %1429 to i8
  store i8 %1430, i8* %36, align 1, !tbaa !2449
  %1431 = lshr i32 %1408, 31
  %1432 = lshr i32 %1410, 31
  %1433 = xor i32 %1429, %1431
  %1434 = xor i32 %1429, %1432
  %1435 = add nuw nsw i32 %1433, %1434
  %1436 = icmp eq i32 %1435, 2
  %1437 = zext i1 %1436 to i8
  store i8 %1437, i8* %42, align 1, !tbaa !2450
  %1438 = sext i32 %1411 to i64
  store i64 %1438, i64* %RDX, align 8, !tbaa !2428
  %1439 = shl nsw i64 %1438, 2
  %1440 = add i64 %1382, %1439
  %1441 = add i64 %1522, 22
  store i64 %1441, i64* %PC, align 8
  %1442 = inttoptr i64 %1440 to i32*
  %1443 = load i32, i32* %1442, align 4
  store i32 %1443, i32* %1363, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1377, align 1, !tbaa !2451
  %1444 = add i64 %1486, -36
  %1445 = add i64 %1522, 27
  store i64 %1445, i64* %PC, align 8
  %1446 = load <2 x float>, <2 x float>* %1374, align 1
  %1447 = extractelement <2 x float> %1446, i32 0
  %1448 = inttoptr i64 %1444 to float*
  store float %1447, float* %1448, align 4
  %1449 = load i64, i64* %RBP, align 8
  %1450 = add i64 %1449, -52
  %1451 = load i64, i64* %PC, align 8
  %1452 = add i64 %1451, 3
  store i64 %1452, i64* %PC, align 8
  %1453 = inttoptr i64 %1450 to i32*
  %1454 = load i32, i32* %1453, align 4
  %1455 = zext i32 %1454 to i64
  store i64 %1455, i64* %RCX, align 8, !tbaa !2428
  %1456 = add i64 %1449, -44
  %1457 = add i64 %1451, 6
  store i64 %1457, i64* %PC, align 8
  %1458 = inttoptr i64 %1456 to i32*
  %1459 = load i32, i32* %1458, align 4
  %1460 = sub i32 %1454, %1459
  %1461 = icmp ult i32 %1454, %1459
  %1462 = zext i1 %1461 to i8
  store i8 %1462, i8* %18, align 1, !tbaa !2432
  %1463 = and i32 %1460, 255
  %1464 = tail call i32 @llvm.ctpop.i32(i32 %1463) #12
  %1465 = trunc i32 %1464 to i8
  %1466 = and i8 %1465, 1
  %1467 = xor i8 %1466, 1
  store i8 %1467, i8* %25, align 1, !tbaa !2446
  %1468 = xor i32 %1459, %1454
  %1469 = xor i32 %1468, %1460
  %1470 = lshr i32 %1469, 4
  %1471 = trunc i32 %1470 to i8
  %1472 = and i8 %1471, 1
  store i8 %1472, i8* %30, align 1, !tbaa !2447
  %1473 = icmp eq i32 %1460, 0
  %1474 = zext i1 %1473 to i8
  store i8 %1474, i8* %33, align 1, !tbaa !2448
  %1475 = lshr i32 %1460, 31
  %1476 = trunc i32 %1475 to i8
  store i8 %1476, i8* %36, align 1, !tbaa !2449
  %1477 = lshr i32 %1454, 31
  %1478 = lshr i32 %1459, 31
  %1479 = xor i32 %1478, %1477
  %1480 = xor i32 %1475, %1477
  %1481 = add nuw nsw i32 %1480, %1479
  %1482 = icmp eq i32 %1481, 2
  %1483 = zext i1 %1482 to i8
  store i8 %1483, i8* %42, align 1, !tbaa !2450
  %.v49 = select i1 %1473, i64 83, i64 12
  %1484 = add i64 %1451, %.v49
  store i64 %1484, i64* %PC, align 8, !tbaa !2428
  br i1 %1473, label %block_401b45, label %block_401afe

block_401acb:                                     ; preds = %block_401b45, %block_401a60
  %1485 = phi i64 [ %1849, %block_401b45 ], [ %.pre17, %block_401a60 ]
  %1486 = load i64, i64* %RBP, align 8
  %1487 = add i64 %1486, -40
  %1488 = add i64 %1485, 3
  store i64 %1488, i64* %PC, align 8
  %1489 = inttoptr i64 %1487 to i32*
  %1490 = load i32, i32* %1489, align 4
  %1491 = zext i32 %1490 to i64
  store i64 %1491, i64* %RAX, align 8, !tbaa !2428
  %1492 = add i64 %1486, -16
  %1493 = add i64 %1485, 6
  store i64 %1493, i64* %PC, align 8
  %1494 = inttoptr i64 %1492 to i32*
  %1495 = load i32, i32* %1494, align 4
  %1496 = sub i32 %1490, %1495
  %1497 = icmp ult i32 %1490, %1495
  %1498 = zext i1 %1497 to i8
  store i8 %1498, i8* %18, align 1, !tbaa !2432
  %1499 = and i32 %1496, 255
  %1500 = tail call i32 @llvm.ctpop.i32(i32 %1499) #12
  %1501 = trunc i32 %1500 to i8
  %1502 = and i8 %1501, 1
  %1503 = xor i8 %1502, 1
  store i8 %1503, i8* %25, align 1, !tbaa !2446
  %1504 = xor i32 %1495, %1490
  %1505 = xor i32 %1504, %1496
  %1506 = lshr i32 %1505, 4
  %1507 = trunc i32 %1506 to i8
  %1508 = and i8 %1507, 1
  store i8 %1508, i8* %30, align 1, !tbaa !2447
  %1509 = icmp eq i32 %1496, 0
  %1510 = zext i1 %1509 to i8
  store i8 %1510, i8* %33, align 1, !tbaa !2448
  %1511 = lshr i32 %1496, 31
  %1512 = trunc i32 %1511 to i8
  store i8 %1512, i8* %36, align 1, !tbaa !2449
  %1513 = lshr i32 %1490, 31
  %1514 = lshr i32 %1495, 31
  %1515 = xor i32 %1514, %1513
  %1516 = xor i32 %1511, %1513
  %1517 = add nuw nsw i32 %1516, %1515
  %1518 = icmp eq i32 %1517, 2
  %1519 = zext i1 %1518 to i8
  store i8 %1519, i8* %42, align 1, !tbaa !2450
  %1520 = icmp ne i8 %1512, 0
  %1521 = xor i1 %1520, %1518
  %.v48 = select i1 %1521, i64 12, i64 231
  %1522 = add i64 %1485, %.v48
  store i64 %1522, i64* %PC, align 8, !tbaa !2428
  br i1 %1521, label %block_401ad7, label %block_401bb2

block_401bc0:                                     ; preds = %block_401bb2, %block_4019ed
  %1523 = phi i64 [ %1486, %block_401bb2 ], [ %.pre19, %block_4019ed ]
  %1524 = phi i64 [ %1555, %block_401bb2 ], [ %.pre18, %block_4019ed ]
  %MEMORY.5 = phi %struct.Memory* [ %1182, %block_401bb2 ], [ %973, %block_4019ed ]
  %1525 = add i64 %1523, -44
  %1526 = add i64 %1524, 8
  store i64 %1526, i64* %PC, align 8
  %1527 = inttoptr i64 %1525 to i32*
  %1528 = load i32, i32* %1527, align 4
  %1529 = add i32 %1528, 1
  %1530 = zext i32 %1529 to i64
  store i64 %1530, i64* %RAX, align 8, !tbaa !2428
  %1531 = icmp eq i32 %1528, -1
  %1532 = icmp eq i32 %1529, 0
  %1533 = or i1 %1531, %1532
  %1534 = zext i1 %1533 to i8
  store i8 %1534, i8* %18, align 1, !tbaa !2432
  %1535 = and i32 %1529, 255
  %1536 = tail call i32 @llvm.ctpop.i32(i32 %1535) #12
  %1537 = trunc i32 %1536 to i8
  %1538 = and i8 %1537, 1
  %1539 = xor i8 %1538, 1
  store i8 %1539, i8* %25, align 1, !tbaa !2446
  %1540 = xor i32 %1529, %1528
  %1541 = lshr i32 %1540, 4
  %1542 = trunc i32 %1541 to i8
  %1543 = and i8 %1542, 1
  store i8 %1543, i8* %30, align 1, !tbaa !2447
  %1544 = zext i1 %1532 to i8
  store i8 %1544, i8* %33, align 1, !tbaa !2448
  %1545 = lshr i32 %1529, 31
  %1546 = trunc i32 %1545 to i8
  store i8 %1546, i8* %36, align 1, !tbaa !2449
  %1547 = lshr i32 %1528, 31
  %1548 = xor i32 %1545, %1547
  %1549 = add nuw nsw i32 %1548, %1545
  %1550 = icmp eq i32 %1549, 2
  %1551 = zext i1 %1550 to i8
  store i8 %1551, i8* %42, align 1, !tbaa !2450
  %1552 = add i64 %1524, 14
  store i64 %1552, i64* %PC, align 8
  store i32 %1529, i32* %1527, align 4
  %1553 = load i64, i64* %PC, align 8
  %1554 = add i64 %1553, -608
  store i64 %1554, i64* %PC, align 8, !tbaa !2428
  br label %block_40196e

block_401bb2:                                     ; preds = %block_401acb
  %1555 = add i64 %1522, 14
  store i64 %1555, i64* %PC, align 8, !tbaa !2428
  br label %block_401bc0

block_401c2d:                                     ; preds = %block_401c1b, %block_401c21, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1556 = phi i64 [ %1852, %block_401c1b ], [ %.pre24, %block_401c21 ], [ %1357, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %1557 = load i64, i64* %RSP, align 8
  %1558 = add i64 %1557, 64
  store i64 %1558, i64* %RSP, align 8, !tbaa !2428
  %1559 = icmp ugt i64 %1557, -65
  %1560 = zext i1 %1559 to i8
  store i8 %1560, i8* %18, align 1, !tbaa !2432
  %1561 = trunc i64 %1558 to i32
  %1562 = and i32 %1561, 255
  %1563 = tail call i32 @llvm.ctpop.i32(i32 %1562) #12
  %1564 = trunc i32 %1563 to i8
  %1565 = and i8 %1564, 1
  %1566 = xor i8 %1565, 1
  store i8 %1566, i8* %25, align 1, !tbaa !2446
  %1567 = xor i64 %1558, %1557
  %1568 = lshr i64 %1567, 4
  %1569 = trunc i64 %1568 to i8
  %1570 = and i8 %1569, 1
  store i8 %1570, i8* %30, align 1, !tbaa !2447
  %1571 = icmp eq i64 %1558, 0
  %1572 = zext i1 %1571 to i8
  store i8 %1572, i8* %33, align 1, !tbaa !2448
  %1573 = lshr i64 %1558, 63
  %1574 = trunc i64 %1573 to i8
  store i8 %1574, i8* %36, align 1, !tbaa !2449
  %1575 = lshr i64 %1557, 63
  %1576 = xor i64 %1573, %1575
  %1577 = add nuw nsw i64 %1576, %1573
  %1578 = icmp eq i64 %1577, 2
  %1579 = zext i1 %1578 to i8
  store i8 %1579, i8* %42, align 1, !tbaa !2450
  %1580 = add i64 %1556, 5
  store i64 %1580, i64* %PC, align 8
  %1581 = add i64 %1557, 72
  %1582 = inttoptr i64 %1558 to i64*
  %1583 = load i64, i64* %1582, align 8
  store i64 %1583, i64* %RBP, align 8, !tbaa !2428
  store i64 %1581, i64* %RSP, align 8, !tbaa !2428
  %1584 = add i64 %1556, 6
  store i64 %1584, i64* %PC, align 8
  %1585 = inttoptr i64 %1581 to i64*
  %1586 = load i64, i64* %1585, align 8
  store i64 %1586, i64* %PC, align 8, !tbaa !2428
  %1587 = add i64 %1557, 80
  store i64 %1587, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1355

block_401c21:                                     ; preds = %block_401c1b
  %1588 = load i64, i64* %RBP, align 8
  %1589 = add i64 %1588, -16
  %1590 = add i64 %1852, 3
  store i64 %1590, i64* %PC, align 8
  %1591 = inttoptr i64 %1589 to i32*
  %1592 = load i32, i32* %1591, align 4
  %1593 = add i32 %1592, -1
  %1594 = zext i32 %1593 to i64
  store i64 %1594, i64* %RAX, align 8, !tbaa !2428
  %1595 = icmp eq i32 %1592, 0
  %1596 = zext i1 %1595 to i8
  store i8 %1596, i8* %18, align 1, !tbaa !2432
  %1597 = and i32 %1593, 255
  %1598 = tail call i32 @llvm.ctpop.i32(i32 %1597) #12
  %1599 = trunc i32 %1598 to i8
  %1600 = and i8 %1599, 1
  %1601 = xor i8 %1600, 1
  store i8 %1601, i8* %25, align 1, !tbaa !2446
  %1602 = xor i32 %1593, %1592
  %1603 = lshr i32 %1602, 4
  %1604 = trunc i32 %1603 to i8
  %1605 = and i8 %1604, 1
  store i8 %1605, i8* %30, align 1, !tbaa !2447
  %1606 = icmp eq i32 %1593, 0
  %1607 = zext i1 %1606 to i8
  store i8 %1607, i8* %33, align 1, !tbaa !2448
  %1608 = lshr i32 %1593, 31
  %1609 = trunc i32 %1608 to i8
  store i8 %1609, i8* %36, align 1, !tbaa !2449
  %1610 = lshr i32 %1592, 31
  %1611 = xor i32 %1608, %1610
  %1612 = add nuw nsw i32 %1611, %1610
  %1613 = icmp eq i32 %1612, 2
  %1614 = zext i1 %1613 to i8
  store i8 %1614, i8* %42, align 1, !tbaa !2450
  %1615 = add i64 %1588, -32
  %1616 = add i64 %1852, 10
  store i64 %1616, i64* %PC, align 8
  %1617 = inttoptr i64 %1615 to i64*
  %1618 = load i64, i64* %1617, align 8
  store i64 %1618, i64* %RCX, align 8, !tbaa !2428
  %1619 = add i64 %1852, 12
  store i64 %1619, i64* %PC, align 8
  %1620 = inttoptr i64 %1618 to i32*
  store i32 %1593, i32* %1620, align 4
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_401c2d

block_401b45:                                     ; preds = %block_401ad7, %block_401afe
  %1621 = phi i64 [ %1449, %block_401ad7 ], [ %.pre21, %block_401afe ]
  %1622 = phi i64 [ %1484, %block_401ad7 ], [ %.pre20, %block_401afe ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1623 = add i64 %1621, -16
  %1624 = add i64 %1622, 8
  store i64 %1624, i64* %PC, align 8
  %1625 = inttoptr i64 %1623 to i32*
  %1626 = load i32, i32* %1625, align 4
  %1627 = zext i32 %1626 to i64
  store i64 %1627, i64* %RCX, align 8, !tbaa !2428
  %1628 = add i64 %1621, -44
  %1629 = add i64 %1622, 11
  store i64 %1629, i64* %PC, align 8
  %1630 = inttoptr i64 %1628 to i32*
  %1631 = load i32, i32* %1630, align 4
  %1632 = add i32 %1631, 1
  %1633 = zext i32 %1632 to i64
  store i64 %1633, i64* %RDX, align 8, !tbaa !2428
  %1634 = lshr i32 %1632, 31
  %1635 = sub i32 %1626, %1632
  %1636 = zext i32 %1635 to i64
  store i64 %1636, i64* %RCX, align 8, !tbaa !2428
  %1637 = icmp ult i32 %1626, %1632
  %1638 = zext i1 %1637 to i8
  store i8 %1638, i8* %18, align 1, !tbaa !2432
  %1639 = and i32 %1635, 255
  %1640 = tail call i32 @llvm.ctpop.i32(i32 %1639) #12
  %1641 = trunc i32 %1640 to i8
  %1642 = and i8 %1641, 1
  %1643 = xor i8 %1642, 1
  store i8 %1643, i8* %25, align 1, !tbaa !2446
  %1644 = xor i32 %1632, %1626
  %1645 = xor i32 %1644, %1635
  %1646 = lshr i32 %1645, 4
  %1647 = trunc i32 %1646 to i8
  %1648 = and i8 %1647, 1
  store i8 %1648, i8* %30, align 1, !tbaa !2447
  %1649 = icmp eq i32 %1635, 0
  %1650 = zext i1 %1649 to i8
  store i8 %1650, i8* %33, align 1, !tbaa !2448
  %1651 = lshr i32 %1635, 31
  %1652 = trunc i32 %1651 to i8
  store i8 %1652, i8* %36, align 1, !tbaa !2449
  %1653 = lshr i32 %1626, 31
  %1654 = xor i32 %1634, %1653
  %1655 = xor i32 %1651, %1653
  %1656 = add nuw nsw i32 %1655, %1654
  %1657 = icmp eq i32 %1656, 2
  %1658 = zext i1 %1657 to i8
  store i8 %1658, i8* %42, align 1, !tbaa !2450
  %1659 = add i64 %1621, -36
  %1660 = add i64 %1622, 21
  store i64 %1660, i64* %PC, align 8
  %1661 = inttoptr i64 %1659 to i32*
  %1662 = load i32, i32* %1661, align 4
  store i32 %1662, i32* %1363, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1377, align 1, !tbaa !2451
  %1663 = add i64 %1621, -8
  %1664 = add i64 %1622, 25
  store i64 %1664, i64* %PC, align 8
  %1665 = inttoptr i64 %1663 to i64*
  %1666 = load i64, i64* %1665, align 8
  store i64 %1666, i64* %RSI, align 8, !tbaa !2428
  %1667 = load i64, i64* %RBP, align 8
  %1668 = add i64 %1667, -12
  %1669 = add i64 %1622, 28
  store i64 %1669, i64* %PC, align 8
  %1670 = inttoptr i64 %1668 to i32*
  %1671 = load i32, i32* %1670, align 4
  %1672 = zext i32 %1671 to i64
  store i64 %1672, i64* %RDX, align 8, !tbaa !2428
  %1673 = add i64 %1667, -44
  %1674 = add i64 %1622, 32
  store i64 %1674, i64* %PC, align 8
  %1675 = inttoptr i64 %1673 to i32*
  %1676 = load i32, i32* %1675, align 4
  %1677 = sext i32 %1671 to i64
  %1678 = sext i32 %1676 to i64
  %1679 = mul nsw i64 %1678, %1677
  %1680 = trunc i64 %1679 to i32
  %1681 = and i64 %1679, 4294967295
  store i64 %1681, i64* %RDX, align 8, !tbaa !2428
  %1682 = shl i64 %1679, 32
  %1683 = ashr exact i64 %1682, 32
  %1684 = icmp ne i64 %1683, %1679
  %1685 = zext i1 %1684 to i8
  store i8 %1685, i8* %18, align 1, !tbaa !2432
  %1686 = and i32 %1680, 255
  %1687 = tail call i32 @llvm.ctpop.i32(i32 %1686) #12
  %1688 = trunc i32 %1687 to i8
  %1689 = and i8 %1688, 1
  %1690 = xor i8 %1689, 1
  store i8 %1690, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1691 = lshr i32 %1680, 31
  %1692 = trunc i32 %1691 to i8
  store i8 %1692, i8* %36, align 1, !tbaa !2449
  store i8 %1685, i8* %42, align 1, !tbaa !2450
  %1693 = add i64 %1622, 35
  store i64 %1693, i64* %PC, align 8
  %1694 = trunc i64 %1679 to i32
  %1695 = load i32, i32* %1675, align 4
  %1696 = add i32 %1695, %1694
  %1697 = add i32 %1696, 1
  %1698 = zext i32 %1697 to i64
  store i64 %1698, i64* %RDX, align 8, !tbaa !2428
  %1699 = sext i32 %1697 to i64
  %1700 = shl nsw i64 %1699, 2
  store i64 %1700, i64* %RDI, align 8, !tbaa !2428
  %1701 = load i64, i64* %RSI, align 8
  %1702 = add i64 %1700, %1701
  store i64 %1702, i64* %RSI, align 8, !tbaa !2428
  %1703 = icmp ult i64 %1702, %1701
  %1704 = icmp ult i64 %1702, %1700
  %1705 = or i1 %1703, %1704
  %1706 = zext i1 %1705 to i8
  store i8 %1706, i8* %18, align 1, !tbaa !2432
  %1707 = trunc i64 %1702 to i32
  %1708 = and i32 %1707, 255
  %1709 = tail call i32 @llvm.ctpop.i32(i32 %1708) #12
  %1710 = trunc i32 %1709 to i8
  %1711 = and i8 %1710, 1
  %1712 = xor i8 %1711, 1
  store i8 %1712, i8* %25, align 1, !tbaa !2446
  %1713 = xor i64 %1700, %1701
  %1714 = xor i64 %1713, %1702
  %1715 = lshr i64 %1714, 4
  %1716 = trunc i64 %1715 to i8
  %1717 = and i8 %1716, 1
  store i8 %1717, i8* %30, align 1, !tbaa !2447
  %1718 = icmp eq i64 %1702, 0
  %1719 = zext i1 %1718 to i8
  store i8 %1719, i8* %33, align 1, !tbaa !2448
  %1720 = lshr i64 %1702, 63
  %1721 = trunc i64 %1720 to i8
  store i8 %1721, i8* %36, align 1, !tbaa !2449
  %1722 = lshr i64 %1701, 63
  %1723 = lshr i64 %1699, 61
  %1724 = and i64 %1723, 1
  %1725 = xor i64 %1720, %1722
  %1726 = xor i64 %1720, %1724
  %1727 = add nuw nsw i64 %1725, %1726
  %1728 = icmp eq i64 %1727, 2
  %1729 = zext i1 %1728 to i8
  store i8 %1729, i8* %42, align 1, !tbaa !2450
  %1730 = load i64, i64* %RBP, align 8
  %1731 = add i64 %1730, -8
  %1732 = add i64 %1622, 52
  store i64 %1732, i64* %PC, align 8
  %1733 = inttoptr i64 %1731 to i64*
  %1734 = load i64, i64* %1733, align 8
  store i64 %1734, i64* %RDI, align 8, !tbaa !2428
  %1735 = add i64 %1730, -12
  %1736 = add i64 %1622, 55
  store i64 %1736, i64* %PC, align 8
  %1737 = inttoptr i64 %1735 to i32*
  %1738 = load i32, i32* %1737, align 4
  %1739 = zext i32 %1738 to i64
  store i64 %1739, i64* %RDX, align 8, !tbaa !2428
  %1740 = add i64 %1730, -40
  %1741 = add i64 %1622, 59
  store i64 %1741, i64* %PC, align 8
  %1742 = inttoptr i64 %1740 to i32*
  %1743 = load i32, i32* %1742, align 4
  %1744 = sext i32 %1738 to i64
  %1745 = sext i32 %1743 to i64
  %1746 = mul nsw i64 %1745, %1744
  %1747 = trunc i64 %1746 to i32
  %1748 = and i64 %1746, 4294967295
  store i64 %1748, i64* %RDX, align 8, !tbaa !2428
  %1749 = shl i64 %1746, 32
  %1750 = ashr exact i64 %1749, 32
  %1751 = icmp ne i64 %1750, %1746
  %1752 = zext i1 %1751 to i8
  store i8 %1752, i8* %18, align 1, !tbaa !2432
  %1753 = and i32 %1747, 255
  %1754 = tail call i32 @llvm.ctpop.i32(i32 %1753) #12
  %1755 = trunc i32 %1754 to i8
  %1756 = and i8 %1755, 1
  %1757 = xor i8 %1756, 1
  store i8 %1757, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1758 = lshr i32 %1747, 31
  %1759 = trunc i32 %1758 to i8
  store i8 %1759, i8* %36, align 1, !tbaa !2449
  store i8 %1752, i8* %42, align 1, !tbaa !2450
  %1760 = add i64 %1730, -44
  %1761 = add i64 %1622, 62
  store i64 %1761, i64* %PC, align 8
  %1762 = trunc i64 %1746 to i32
  %1763 = inttoptr i64 %1760 to i32*
  %1764 = load i32, i32* %1763, align 4
  %1765 = add i32 %1764, %1762
  %1766 = add i32 %1765, 1
  %1767 = sext i32 %1766 to i64
  %1768 = shl nsw i64 %1767, 2
  store i64 %1768, i64* %R8, align 8, !tbaa !2428
  %1769 = load i64, i64* %RDI, align 8
  %1770 = add i64 %1768, %1769
  %1771 = icmp ult i64 %1770, %1769
  %1772 = icmp ult i64 %1770, %1768
  %1773 = or i1 %1771, %1772
  %1774 = zext i1 %1773 to i8
  store i8 %1774, i8* %18, align 1, !tbaa !2432
  %1775 = trunc i64 %1770 to i32
  %1776 = and i32 %1775, 255
  %1777 = tail call i32 @llvm.ctpop.i32(i32 %1776) #12
  %1778 = trunc i32 %1777 to i8
  %1779 = and i8 %1778, 1
  %1780 = xor i8 %1779, 1
  store i8 %1780, i8* %25, align 1, !tbaa !2446
  %1781 = xor i64 %1768, %1769
  %1782 = xor i64 %1781, %1770
  %1783 = lshr i64 %1782, 4
  %1784 = trunc i64 %1783 to i8
  %1785 = and i8 %1784, 1
  store i8 %1785, i8* %30, align 1, !tbaa !2447
  %1786 = icmp eq i64 %1770, 0
  %1787 = zext i1 %1786 to i8
  store i8 %1787, i8* %33, align 1, !tbaa !2448
  %1788 = lshr i64 %1770, 63
  %1789 = trunc i64 %1788 to i8
  store i8 %1789, i8* %36, align 1, !tbaa !2449
  %1790 = lshr i64 %1769, 63
  %1791 = lshr i64 %1767, 61
  %1792 = and i64 %1791, 1
  %1793 = xor i64 %1788, %1790
  %1794 = xor i64 %1788, %1792
  %1795 = add nuw nsw i64 %1793, %1794
  %1796 = icmp eq i64 %1795, 2
  %1797 = zext i1 %1796 to i8
  store i8 %1797, i8* %42, align 1, !tbaa !2450
  %1798 = load i64, i64* %RBP, align 8
  %1799 = add i64 %1798, -64
  %1800 = add i64 %1622, 79
  store i64 %1800, i64* %PC, align 8
  %1801 = inttoptr i64 %1799 to i64*
  store i64 %1770, i64* %1801, align 8
  %1802 = load i32, i32* %ECX, align 4
  %1803 = zext i32 %1802 to i64
  %1804 = load i64, i64* %PC, align 8
  store i64 %1803, i64* %RDI, align 8, !tbaa !2428
  %1805 = load i32, i32* %EAX, align 4
  %1806 = zext i32 %1805 to i64
  store i64 %1806, i64* %RDX, align 8, !tbaa !2428
  %1807 = load i64, i64* %RBP, align 8
  %1808 = add i64 %1807, -64
  %1809 = add i64 %1804, 8
  store i64 %1809, i64* %PC, align 8
  %1810 = inttoptr i64 %1808 to i64*
  %1811 = load i64, i64* %1810, align 8
  store i64 %1811, i64* %RCX, align 8, !tbaa !2428
  store i64 %1806, i64* %R8, align 8, !tbaa !2428
  %1812 = add i64 %1804, 3308
  %1813 = add i64 %1804, 16
  %1814 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1815 = add i64 %1814, -8
  %1816 = inttoptr i64 %1815 to i64*
  store i64 %1813, i64* %1816, align 8
  store i64 %1815, i64* %RSP, align 8, !tbaa !2428
  store i64 %1812, i64* %PC, align 8, !tbaa !2428
  %1817 = tail call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* nonnull %0, i64 %1812, %struct.Memory* %1182)
  %1818 = load i64, i64* %RBP, align 8
  %1819 = add i64 %1818, -40
  %1820 = load i64, i64* %PC, align 8
  %1821 = add i64 %1820, 3
  store i64 %1821, i64* %PC, align 8
  %1822 = inttoptr i64 %1819 to i32*
  %1823 = load i32, i32* %1822, align 4
  %1824 = add i32 %1823, 1
  %1825 = zext i32 %1824 to i64
  store i64 %1825, i64* %RAX, align 8, !tbaa !2428
  %1826 = icmp eq i32 %1823, -1
  %1827 = icmp eq i32 %1824, 0
  %1828 = or i1 %1826, %1827
  %1829 = zext i1 %1828 to i8
  store i8 %1829, i8* %18, align 1, !tbaa !2432
  %1830 = and i32 %1824, 255
  %1831 = tail call i32 @llvm.ctpop.i32(i32 %1830) #12
  %1832 = trunc i32 %1831 to i8
  %1833 = and i8 %1832, 1
  %1834 = xor i8 %1833, 1
  store i8 %1834, i8* %25, align 1, !tbaa !2446
  %1835 = xor i32 %1824, %1823
  %1836 = lshr i32 %1835, 4
  %1837 = trunc i32 %1836 to i8
  %1838 = and i8 %1837, 1
  store i8 %1838, i8* %30, align 1, !tbaa !2447
  %1839 = zext i1 %1827 to i8
  store i8 %1839, i8* %33, align 1, !tbaa !2448
  %1840 = lshr i32 %1824, 31
  %1841 = trunc i32 %1840 to i8
  store i8 %1841, i8* %36, align 1, !tbaa !2449
  %1842 = lshr i32 %1823, 31
  %1843 = xor i32 %1840, %1842
  %1844 = add nuw nsw i32 %1843, %1840
  %1845 = icmp eq i32 %1844, 2
  %1846 = zext i1 %1845 to i8
  store i8 %1846, i8* %42, align 1, !tbaa !2450
  %1847 = add i64 %1820, 9
  store i64 %1847, i64* %PC, align 8
  store i32 %1824, i32* %1822, align 4
  %1848 = load i64, i64* %PC, align 8
  %1849 = add i64 %1848, -226
  store i64 %1849, i64* %PC, align 8, !tbaa !2428
  br label %block_401acb

block_401c1b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1850 = load i8, i8* %25, align 1, !tbaa !2446
  %1851 = icmp ne i8 %1850, 0
  %.v53 = select i1 %1851, i64 18, i64 6
  %1852 = add i64 %1357, %.v53
  store i64 %1852, i64* %PC, align 8, !tbaa !2428
  %1853 = icmp eq i8 %1850, 1
  br i1 %1853, label %block_401c2d, label %block_401c21
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400630_what_date(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400630:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, 5
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %6 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %PC, align 8, !tbaa !2428
  %15 = add i64 %6, 8
  store i64 %15, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4005b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #12
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2447
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2448
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2449
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_4005b9, label %block_4005d0

block_4005d0:                                     ; preds = %block_4005b0
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4005b9:                                     ; preds = %block_4005b0
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400540_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c40_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_401c40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %7 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -104
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = icmp ult i64 %13, 96
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2432
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #12
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2446
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = add i64 %12, -16
  %45 = load i64, i64* %RDI, align 8
  %46 = add i64 %15, 11
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -12
  %50 = load i32, i32* %ESI, align 4
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  %56 = load i32, i32* %EDX, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -24
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -32
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -36
  %74 = load i32, i32* %R9D, align 4
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %73 to i32*
  store i32 %74, i32* %77, align 4
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -16
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = add i32 %83, -1
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RDX, align 8, !tbaa !2428
  %86 = icmp eq i32 %83, 0
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %19, align 1, !tbaa !2432
  %88 = and i32 %84, 255
  %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #12
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = xor i8 %91, 1
  store i8 %92, i8* %26, align 1, !tbaa !2446
  %93 = xor i32 %84, %83
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  store i8 %96, i8* %31, align 1, !tbaa !2447
  %97 = icmp eq i32 %84, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %34, align 1, !tbaa !2448
  %99 = lshr i32 %84, 31
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %37, align 1, !tbaa !2449
  %101 = lshr i32 %83, 31
  %102 = xor i32 %99, %101
  %103 = add nuw nsw i32 %102, %101
  %104 = icmp eq i32 %103, 2
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %43, align 1, !tbaa !2450
  %106 = add i64 %78, -56
  %107 = add i64 %80, 9
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i32*
  store i32 %84, i32* %108, align 4
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -36
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %110 to i32*
  %114 = load i32, i32* %113, align 4
  store i8 0, i8* %19, align 1, !tbaa !2432
  %115 = and i32 %114, 255
  %116 = tail call i32 @llvm.ctpop.i32(i32 %115) #12
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  store i8 %119, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  %120 = icmp eq i32 %114, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %34, align 1, !tbaa !2448
  %122 = lshr i32 %114, 31
  %123 = trunc i32 %122 to i8
  store i8 %123, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %.v = select i1 %120, i64 10, i64 417
  %124 = add i64 %111, %.v
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  br i1 %120, label %block_401c71, label %block_401e08

block_401c7b:                                     ; preds = %block_401c71
  %125 = add i64 %109, -44
  %126 = add i64 %1318, 7
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i32*
  store i32 0, i32* %127, align 4
  %128 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %129 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %130 = getelementptr inbounds i8, i8* %128, i64 4
  %131 = bitcast i8* %130 to float*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %133 = bitcast i64* %132 to float*
  %134 = getelementptr inbounds i8, i8* %128, i64 12
  %135 = bitcast i8* %134 to float*
  %136 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401c82

block_401d64:                                     ; preds = %block_401d58
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %515, 8
  store i64 %137, i64* %PC, align 8
  %138 = load i32, i32* %487, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RCX, align 8, !tbaa !2428
  %140 = add i64 %515, 11
  store i64 %140, i64* %PC, align 8
  %141 = load i32, i32* %482, align 4
  %142 = add i32 %141, 1
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RDX, align 8, !tbaa !2428
  %144 = lshr i32 %142, 31
  %145 = sub i32 %138, %142
  %146 = zext i32 %145 to i64
  store i64 %146, i64* %RCX, align 8, !tbaa !2428
  %147 = icmp ult i32 %138, %142
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %19, align 1, !tbaa !2432
  %149 = and i32 %145, 255
  %150 = tail call i32 @llvm.ctpop.i32(i32 %149) #12
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  store i8 %153, i8* %26, align 1, !tbaa !2446
  %154 = xor i32 %142, %138
  %155 = xor i32 %154, %145
  %156 = lshr i32 %155, 4
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  store i8 %158, i8* %31, align 1, !tbaa !2447
  %159 = icmp eq i32 %145, 0
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %34, align 1, !tbaa !2448
  %161 = lshr i32 %145, 31
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %37, align 1, !tbaa !2449
  %163 = lshr i32 %138, 31
  %164 = xor i32 %144, %163
  %165 = xor i32 %161, %163
  %166 = add nuw nsw i32 %165, %164
  %167 = icmp eq i32 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %43, align 1, !tbaa !2450
  %169 = add i64 %479, -44
  %170 = add i64 %515, 19
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i32*
  store i32 %145, i32* %171, align 4
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -32
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %173 to i64*
  %177 = load i64, i64* %176, align 8
  store i64 %177, i64* %RSI, align 8, !tbaa !2428
  %178 = add i64 %172, -44
  %179 = add i64 %174, 8
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %183 = shl nsw i64 %182, 2
  %184 = add i64 %183, %177
  %185 = add i64 %174, 13
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %184 to i32*
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %188 = add i64 %172, -8
  %189 = add i64 %174, 17
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %RSI, align 8, !tbaa !2428
  %192 = add i64 %172, -12
  %193 = add i64 %174, 20
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = add i64 %174, 24
  store i64 %197, i64* %PC, align 8
  %198 = load i32, i32* %180, align 4
  %199 = sext i32 %195 to i64
  %200 = sext i32 %198 to i64
  %201 = mul nsw i64 %200, %199
  %202 = trunc i64 %201 to i32
  %203 = and i64 %201, 4294967295
  store i64 %203, i64* %RCX, align 8, !tbaa !2428
  %204 = shl i64 %201, 32
  %205 = ashr exact i64 %204, 32
  %206 = icmp ne i64 %205, %201
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %19, align 1, !tbaa !2432
  %208 = and i32 %202, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #12
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %213 = lshr i32 %202, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %37, align 1, !tbaa !2449
  store i8 %207, i8* %43, align 1, !tbaa !2450
  %215 = add i64 %174, 27
  store i64 %215, i64* %PC, align 8
  %216 = trunc i64 %201 to i32
  %217 = load i32, i32* %180, align 4
  %218 = add i32 %217, %216
  %219 = zext i32 %218 to i64
  store i64 %219, i64* %RCX, align 8, !tbaa !2428
  %220 = icmp ult i32 %218, %216
  %221 = icmp ult i32 %218, %217
  %222 = or i1 %220, %221
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %19, align 1, !tbaa !2432
  %224 = and i32 %218, 255
  %225 = tail call i32 @llvm.ctpop.i32(i32 %224) #12
  %226 = trunc i32 %225 to i8
  %227 = and i8 %226, 1
  %228 = xor i8 %227, 1
  store i8 %228, i8* %26, align 1, !tbaa !2446
  %229 = xor i32 %217, %216
  %230 = xor i32 %229, %218
  %231 = lshr i32 %230, 4
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  store i8 %233, i8* %31, align 1, !tbaa !2447
  %234 = icmp eq i32 %218, 0
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %34, align 1, !tbaa !2448
  %236 = lshr i32 %218, 31
  %237 = trunc i32 %236 to i8
  store i8 %237, i8* %37, align 1, !tbaa !2449
  %238 = lshr i32 %216, 31
  %239 = lshr i32 %217, 31
  %240 = xor i32 %236, %238
  %241 = xor i32 %236, %239
  %242 = add nuw nsw i32 %240, %241
  %243 = icmp eq i32 %242, 2
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %43, align 1, !tbaa !2450
  %245 = sext i32 %218 to i64
  store i64 %245, i64* %RDI, align 8, !tbaa !2428
  %246 = shl nsw i64 %245, 2
  %247 = add i64 %191, %246
  %248 = add i64 %174, 35
  store i64 %248, i64* %PC, align 8
  %249 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %250 = load <2 x i32>, <2 x i32>* %567, align 1
  %251 = inttoptr i64 %247 to float*
  %252 = load float, float* %251, align 4
  %253 = extractelement <2 x float> %249, i32 0
  %254 = fdiv float %253, %252
  store float %254, float* %566, align 1, !tbaa !2451
  %255 = bitcast <2 x float> %249 to <2 x i32>
  %256 = extractelement <2 x i32> %255, i32 1
  store i32 %256, i32* %568, align 1, !tbaa !2451
  %257 = extractelement <2 x i32> %250, i32 0
  store i32 %257, i32* %569, align 1, !tbaa !2451
  %258 = extractelement <2 x i32> %250, i32 1
  store i32 %258, i32* %570, align 1, !tbaa !2451
  %259 = load i64, i64* %RBP, align 8
  %260 = add i64 %259, -32
  %261 = add i64 %174, 39
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %RSI, align 8, !tbaa !2428
  %264 = add i64 %259, -44
  %265 = add i64 %174, 43
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = sext i32 %267 to i64
  store i64 %268, i64* %RDI, align 8, !tbaa !2428
  %269 = shl nsw i64 %268, 2
  %270 = add i64 %269, %263
  %271 = add i64 %174, 48
  store i64 %271, i64* %PC, align 8
  %272 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %273 = extractelement <2 x float> %272, i32 0
  %274 = inttoptr i64 %270 to float*
  store float %273, float* %274, align 4
  %275 = load i64, i64* %RBP, align 8
  %276 = add i64 %275, -32
  %277 = load i64, i64* %PC, align 8
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %276 to i64*
  %280 = load i64, i64* %279, align 8
  store i64 %280, i64* %RSI, align 8, !tbaa !2428
  %281 = add i64 %275, -44
  %282 = add i64 %277, 8
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %281 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = sext i32 %284 to i64
  store i64 %285, i64* %RDI, align 8, !tbaa !2428
  %286 = shl nsw i64 %285, 2
  %287 = add i64 %286, %280
  %288 = add i64 %277, 13
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i32*
  %290 = load i32, i32* %289, align 4
  store i32 %290, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %291 = load i64, i64* %571, align 1
  %292 = trunc i64 %291 to i32
  store i32 %292, i32* %ECX, align 1, !tbaa !2453
  store i32 0, i32* %573, align 1, !tbaa !2453
  %293 = load i64, i64* %RCX, align 8
  %294 = xor i64 %293, -2147483648
  %295 = trunc i64 %294 to i32
  %296 = and i64 %294, 4294967295
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2432
  %297 = and i32 %295, 255
  %298 = tail call i32 @llvm.ctpop.i32(i32 %297) #12
  %299 = trunc i32 %298 to i8
  %300 = and i8 %299, 1
  %301 = xor i8 %300, 1
  store i8 %301, i8* %26, align 1, !tbaa !2446
  %302 = icmp eq i32 %295, 0
  %303 = zext i1 %302 to i8
  store i8 %303, i8* %34, align 1, !tbaa !2448
  %304 = lshr i32 %295, 31
  %305 = trunc i32 %304 to i8
  store i8 %305, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2447
  %306 = trunc i64 %294 to i32
  store i32 %306, i32* %.pre-phi30, align 1, !tbaa !2453
  store i32 0, i32* %568, align 1, !tbaa !2453
  store i32 0, i32* %569, align 1, !tbaa !2453
  store i32 0, i32* %570, align 1, !tbaa !2453
  %307 = add i64 %275, -40
  %308 = add i64 %277, 32
  store i64 %308, i64* %PC, align 8
  %309 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %310 = extractelement <2 x float> %309, i32 0
  %311 = inttoptr i64 %307 to float*
  store float %310, float* %311, align 4
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -44
  %314 = load i64, i64* %PC, align 8
  %315 = add i64 %314, 3
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %313 to i32*
  %317 = load i32, i32* %316, align 4
  %318 = zext i32 %317 to i64
  store i64 %318, i64* %RDI, align 8, !tbaa !2428
  %319 = add i64 %312, -40
  %320 = add i64 %314, 8
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i32*
  %322 = load i32, i32* %321, align 4
  store i32 %322, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %323 = add i64 %312, -8
  %324 = add i64 %314, 12
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %RSI, align 8, !tbaa !2428
  %327 = add i64 %312, -12
  %328 = add i64 %314, 15
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %RCX, align 8, !tbaa !2428
  %332 = add i64 %314, 19
  store i64 %332, i64* %PC, align 8
  %333 = load i32, i32* %316, align 4
  %334 = sext i32 %330 to i64
  %335 = sext i32 %333 to i64
  %336 = mul nsw i64 %335, %334
  %337 = and i64 %336, 4294967295
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %sext = shl i64 %336, 32
  %338 = ashr exact i64 %sext, 30
  store i64 %338, i64* %R8, align 8, !tbaa !2428
  %339 = add i64 %338, %326
  store i64 %339, i64* %RSI, align 8, !tbaa !2428
  %340 = icmp ult i64 %339, %326
  %341 = icmp ult i64 %339, %338
  %342 = or i1 %340, %341
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %19, align 1, !tbaa !2432
  %344 = trunc i64 %339 to i32
  %345 = and i32 %344, 255
  %346 = tail call i32 @llvm.ctpop.i32(i32 %345) #12
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  store i8 %349, i8* %26, align 1, !tbaa !2446
  %350 = xor i64 %338, %326
  %351 = xor i64 %350, %339
  %352 = lshr i64 %351, 4
  %353 = trunc i64 %352 to i8
  %354 = and i8 %353, 1
  store i8 %354, i8* %31, align 1, !tbaa !2447
  %355 = icmp eq i64 %339, 0
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %34, align 1, !tbaa !2448
  %357 = lshr i64 %339, 63
  %358 = trunc i64 %357 to i8
  store i8 %358, i8* %37, align 1, !tbaa !2449
  %359 = lshr i64 %326, 63
  %360 = lshr i64 %338, 63
  %361 = xor i64 %357, %359
  %362 = xor i64 %357, %360
  %363 = add nuw nsw i64 %361, %362
  %364 = icmp eq i64 %363, 2
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %43, align 1, !tbaa !2450
  %366 = load i64, i64* %RBP, align 8
  %367 = add i64 %366, -32
  %368 = add i64 %314, 36
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %367 to i64*
  %370 = load i64, i64* %369, align 8
  store i64 %370, i64* %RCX, align 8, !tbaa !2428
  %371 = load i32, i32* %EAX, align 4
  %372 = zext i32 %371 to i64
  store i64 %372, i64* %RDX, align 8, !tbaa !2428
  store i64 %372, i64* %R8, align 8, !tbaa !2428
  %373 = add i64 %314, 2745
  %374 = add i64 %314, 46
  %375 = load i64, i64* %RSP, align 8, !tbaa !2428
  %376 = add i64 %375, -8
  %377 = inttoptr i64 %376 to i64*
  store i64 %374, i64* %377, align 8
  store i64 %376, i64* %RSP, align 8, !tbaa !2428
  store i64 %373, i64* %PC, align 8, !tbaa !2428
  %378 = tail call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* nonnull %0, i64 %373, %struct.Memory* %2)
  %379 = load i64, i64* %RBP, align 8
  %380 = add i64 %379, -48
  %381 = load i64, i64* %PC, align 8
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %380 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = add i32 %384, 1
  %386 = zext i32 %385 to i64
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = icmp eq i32 %384, -1
  %388 = icmp eq i32 %385, 0
  %389 = or i1 %387, %388
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %19, align 1, !tbaa !2432
  %391 = and i32 %385, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #12
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %26, align 1, !tbaa !2446
  %396 = xor i32 %385, %384
  %397 = lshr i32 %396, 4
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %31, align 1, !tbaa !2447
  %400 = zext i1 %388 to i8
  store i8 %400, i8* %34, align 1, !tbaa !2448
  %401 = lshr i32 %385, 31
  %402 = trunc i32 %401 to i8
  store i8 %402, i8* %37, align 1, !tbaa !2449
  %403 = lshr i32 %384, 31
  %404 = xor i32 %401, %403
  %405 = add nuw nsw i32 %404, %401
  %406 = icmp eq i32 %405, 2
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %43, align 1, !tbaa !2450
  %408 = add i64 %381, 9
  store i64 %408, i64* %PC, align 8
  store i32 %385, i32* %383, align 4
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, -166
  store i64 %410, i64* %PC, align 8, !tbaa !2428
  br label %block_401d58

block_401f5c:                                     ; preds = %block_401eb9
  %411 = add i64 %903, -32
  %412 = add i64 %938, 4
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i64*
  %414 = load i64, i64* %413, align 8
  store i64 %414, i64* %RAX, align 8, !tbaa !2428
  %415 = add i64 %938, 8
  store i64 %415, i64* %PC, align 8
  %416 = load i32, i32* %907, align 4
  %417 = sext i32 %416 to i64
  store i64 %417, i64* %RCX, align 8, !tbaa !2428
  %418 = shl nsw i64 %417, 2
  %419 = add i64 %418, %414
  %420 = add i64 %938, 13
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i32*
  %422 = load i32, i32* %421, align 4
  store i32 %422, i32* %1599, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1601, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1603, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1605, align 1, !tbaa !2451
  %423 = add i64 %903, -40
  %424 = add i64 %938, 18
  store i64 %424, i64* %PC, align 8
  %425 = load <2 x float>, <2 x float>* %1596, align 1
  %426 = extractelement <2 x float> %425, i32 0
  %427 = inttoptr i64 %423 to float*
  store float %426, float* %427, align 4
  %428 = load i64, i64* %RBP, align 8
  %429 = add i64 %428, -32
  %430 = load i64, i64* %PC, align 8
  %431 = add i64 %430, 4
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %429 to i64*
  %433 = load i64, i64* %432, align 8
  store i64 %433, i64* %RAX, align 8, !tbaa !2428
  %434 = add i64 %428, -44
  %435 = add i64 %430, 8
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %434 to i32*
  %437 = load i32, i32* %436, align 4
  %438 = sext i32 %437 to i64
  store i64 %438, i64* %RCX, align 8, !tbaa !2428
  %439 = shl nsw i64 %438, 2
  %440 = add i64 %439, %433
  %441 = add i64 %430, 13
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %440 to i32*
  %443 = load i32, i32* %442, align 4
  store i32 %443, i32* %1599, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1601, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1603, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1605, align 1, !tbaa !2451
  %444 = add i64 %430, 17
  store i64 %444, i64* %PC, align 8
  %445 = load i64, i64* %432, align 8
  store i64 %445, i64* %RAX, align 8, !tbaa !2428
  %446 = add i64 %428, -52
  %447 = add i64 %430, 21
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %446 to i32*
  %449 = load i32, i32* %448, align 4
  %450 = sext i32 %449 to i64
  store i64 %450, i64* %RCX, align 8, !tbaa !2428
  %451 = shl nsw i64 %450, 2
  %452 = add i64 %451, %445
  %453 = add i64 %430, 26
  store i64 %453, i64* %PC, align 8
  %454 = load <2 x float>, <2 x float>* %1596, align 1
  %455 = extractelement <2 x float> %454, i32 0
  %456 = inttoptr i64 %452 to float*
  store float %455, float* %456, align 4
  %457 = load i64, i64* %RBP, align 8
  %458 = add i64 %457, -40
  %459 = load i64, i64* %PC, align 8
  %460 = add i64 %459, 5
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %458 to i32*
  %462 = load i32, i32* %461, align 4
  store i32 %462, i32* %1599, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1601, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1603, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1605, align 1, !tbaa !2451
  %463 = add i64 %457, -32
  %464 = add i64 %459, 9
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %463 to i64*
  %466 = load i64, i64* %465, align 8
  store i64 %466, i64* %RAX, align 8, !tbaa !2428
  %467 = add i64 %457, -44
  %468 = add i64 %459, 13
  store i64 %468, i64* %PC, align 8
  %469 = inttoptr i64 %467 to i32*
  %470 = load i32, i32* %469, align 4
  %471 = sext i32 %470 to i64
  store i64 %471, i64* %RCX, align 8, !tbaa !2428
  %472 = shl nsw i64 %471, 2
  %473 = add i64 %472, %466
  %474 = add i64 %459, 18
  store i64 %474, i64* %PC, align 8
  %475 = load <2 x float>, <2 x float>* %1596, align 1
  %476 = extractelement <2 x float> %475, i32 0
  %477 = inttoptr i64 %473 to float*
  store float %476, float* %477, align 4
  %.pre26 = load i64, i64* %PC, align 8
  %.pre27 = load i64, i64* %RBP, align 8
  br label %block_401f9a

block_401d58:                                     ; preds = %block_401d51, %block_401d64
  %478 = phi i64 [ %.pre23, %block_401d51 ], [ %410, %block_401d64 ]
  %479 = load i64, i64* %RBP, align 8
  %480 = add i64 %479, -48
  %481 = add i64 %478, 3
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i32*
  %483 = load i32, i32* %482, align 4
  %484 = zext i32 %483 to i64
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = add i64 %479, -16
  %486 = add i64 %478, 6
  store i64 %486, i64* %PC, align 8
  %487 = inttoptr i64 %485 to i32*
  %488 = load i32, i32* %487, align 4
  %489 = sub i32 %483, %488
  %490 = icmp ult i32 %483, %488
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %19, align 1, !tbaa !2432
  %492 = and i32 %489, 255
  %493 = tail call i32 @llvm.ctpop.i32(i32 %492) #12
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  store i8 %496, i8* %26, align 1, !tbaa !2446
  %497 = xor i32 %488, %483
  %498 = xor i32 %497, %489
  %499 = lshr i32 %498, 4
  %500 = trunc i32 %499 to i8
  %501 = and i8 %500, 1
  store i8 %501, i8* %31, align 1, !tbaa !2447
  %502 = icmp eq i32 %489, 0
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %34, align 1, !tbaa !2448
  %504 = lshr i32 %489, 31
  %505 = trunc i32 %504 to i8
  store i8 %505, i8* %37, align 1, !tbaa !2449
  %506 = lshr i32 %483, 31
  %507 = lshr i32 %488, 31
  %508 = xor i32 %507, %506
  %509 = xor i32 %504, %506
  %510 = add nuw nsw i32 %509, %508
  %511 = icmp eq i32 %510, 2
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %43, align 1, !tbaa !2450
  %513 = icmp ne i8 %505, 0
  %514 = xor i1 %513, %511
  %.v52 = select i1 %514, i64 12, i64 171
  %515 = add i64 %478, %.v52
  store i64 %515, i64* %PC, align 8, !tbaa !2428
  br i1 %514, label %block_401d64, label %block_401e03

block_401d4c:                                     ; preds = %block_401c82
  %516 = add i64 %1648, 5
  store i64 %516, i64* %PC, align 8, !tbaa !2428
  br label %block_401d51

block_401cba:                                     ; preds = %block_401c8e
  %517 = add i64 %1356, -32
  %518 = add i64 %1391, 4
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %517 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %RAX, align 8, !tbaa !2428
  %521 = add i64 %1391, 8
  store i64 %521, i64* %PC, align 8
  %522 = load i32, i32* %1365, align 4
  %523 = sext i32 %522 to i64
  store i64 %523, i64* %RCX, align 8, !tbaa !2428
  %524 = shl nsw i64 %523, 2
  %525 = add i64 %524, %520
  %526 = add i64 %1391, 13
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i32*
  %528 = load i32, i32* %527, align 4
  store i32 %528, i32* %129, align 1, !tbaa !2451
  store float 0.000000e+00, float* %131, align 1, !tbaa !2451
  store float 0.000000e+00, float* %133, align 1, !tbaa !2451
  store float 0.000000e+00, float* %135, align 1, !tbaa !2451
  %529 = add i64 %1391, 17
  store i64 %529, i64* %PC, align 8
  %530 = load i64, i64* %519, align 8
  store i64 %530, i64* %RAX, align 8, !tbaa !2428
  %531 = add i64 %1391, 21
  store i64 %531, i64* %PC, align 8
  %532 = load i32, i32* %1360, align 4
  %533 = sext i32 %532 to i64
  store i64 %533, i64* %RCX, align 8, !tbaa !2428
  %534 = shl nsw i64 %533, 2
  %535 = add i64 %534, %530
  %536 = add i64 %1391, 26
  store i64 %536, i64* %PC, align 8
  %537 = load <2 x float>, <2 x float>* %136, align 1
  %538 = extractelement <2 x float> %537, i32 0
  %539 = inttoptr i64 %535 to float*
  store float %538, float* %539, align 4
  %540 = load i64, i64* %RBP, align 8
  %541 = add i64 %540, -40
  %542 = load i64, i64* %PC, align 8
  %543 = add i64 %542, 5
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %541 to i32*
  %545 = load i32, i32* %544, align 4
  store i32 %545, i32* %129, align 1, !tbaa !2451
  store float 0.000000e+00, float* %131, align 1, !tbaa !2451
  store float 0.000000e+00, float* %133, align 1, !tbaa !2451
  store float 0.000000e+00, float* %135, align 1, !tbaa !2451
  %546 = add i64 %540, -32
  %547 = add i64 %542, 9
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i64*
  %549 = load i64, i64* %548, align 8
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = add i64 %540, -44
  %551 = add i64 %542, 13
  store i64 %551, i64* %PC, align 8
  %552 = inttoptr i64 %550 to i32*
  %553 = load i32, i32* %552, align 4
  %554 = sext i32 %553 to i64
  store i64 %554, i64* %RCX, align 8, !tbaa !2428
  %555 = shl nsw i64 %554, 2
  %556 = add i64 %555, %549
  %557 = add i64 %542, 18
  store i64 %557, i64* %PC, align 8
  %558 = load <2 x float>, <2 x float>* %136, align 1
  %559 = extractelement <2 x float> %558, i32 0
  %560 = inttoptr i64 %556 to float*
  store float %559, float* %560, align 4
  %.pre21 = load i64, i64* %PC, align 8
  %.pre22 = load i64, i64* %RBP, align 8
  br label %block_401ce6

block_401d51:                                     ; preds = %block_401c71.block_401d51_crit_edge, %block_401d4c
  %.pre-phi44 = phi <2 x float>* [ %.pre43, %block_401c71.block_401d51_crit_edge ], [ %136, %block_401d4c ]
  %.pre-phi42 = phi float* [ %.pre41, %block_401c71.block_401d51_crit_edge ], [ %135, %block_401d4c ]
  %.pre-phi40 = phi i8* [ %.pre39, %block_401c71.block_401d51_crit_edge ], [ %134, %block_401d4c ]
  %.pre-phi38 = phi float* [ %.pre37, %block_401c71.block_401d51_crit_edge ], [ %133, %block_401d4c ]
  %.pre-phi36 = phi i64* [ %.pre35, %block_401c71.block_401d51_crit_edge ], [ %132, %block_401d4c ]
  %.pre-phi34 = phi float* [ %.pre33, %block_401c71.block_401d51_crit_edge ], [ %131, %block_401d4c ]
  %.pre-phi32 = phi i8* [ %.pre31, %block_401c71.block_401d51_crit_edge ], [ %130, %block_401d4c ]
  %.pre-phi30 = phi i32* [ %.pre29, %block_401c71.block_401d51_crit_edge ], [ %129, %block_401d4c ]
  %561 = phi i64 [ %1318, %block_401c71.block_401d51_crit_edge ], [ %516, %block_401d4c ]
  %562 = phi i64 [ %109, %block_401c71.block_401d51_crit_edge ], [ %1612, %block_401d4c ]
  %563 = add i64 %562, -48
  %564 = add i64 %561, 7
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %563 to i32*
  store i32 0, i32* %565, align 4
  %566 = bitcast [32 x %union.VectorReg]* %8 to float*
  %567 = bitcast i64* %.pre-phi36 to <2 x i32>*
  %568 = bitcast i8* %.pre-phi32 to i32*
  %569 = bitcast i64* %.pre-phi36 to i32*
  %570 = bitcast i8* %.pre-phi40 to i32*
  %571 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %572 = bitcast %union.anon* %4 to [2 x i32]*
  %573 = getelementptr inbounds [2 x i32], [2 x i32]* %572, i64 0, i64 1
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_401d58

block_401fb2.loopexit:                            ; preds = %block_401ead
  br label %block_401fb2

block_401fb2:                                     ; preds = %block_401fb2.loopexit, %block_401e9c
  %574 = phi i64 [ %966, %block_401e9c ], [ %614, %block_401fb2.loopexit ]
  %575 = add i64 %574, 5
  br label %block_401fb7

block_401ead:                                     ; preds = %block_401f9a, %block_401ea6
  %576 = phi i64 [ %1252, %block_401f9a ], [ %.pre25, %block_401ea6 ]
  %577 = load i64, i64* %RBP, align 8
  %578 = add i64 %577, -48
  %579 = add i64 %576, 3
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i32*
  %581 = load i32, i32* %580, align 4
  %582 = zext i32 %581 to i64
  store i64 %582, i64* %RAX, align 8, !tbaa !2428
  %583 = add i64 %577, -56
  %584 = add i64 %576, 6
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %583 to i32*
  %586 = load i32, i32* %585, align 4
  %587 = sub i32 %581, %586
  %588 = icmp ult i32 %581, %586
  %589 = zext i1 %588 to i8
  store i8 %589, i8* %19, align 1, !tbaa !2432
  %590 = and i32 %587, 255
  %591 = tail call i32 @llvm.ctpop.i32(i32 %590) #12
  %592 = trunc i32 %591 to i8
  %593 = and i8 %592, 1
  %594 = xor i8 %593, 1
  store i8 %594, i8* %26, align 1, !tbaa !2446
  %595 = xor i32 %586, %581
  %596 = xor i32 %595, %587
  %597 = lshr i32 %596, 4
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  store i8 %599, i8* %31, align 1, !tbaa !2447
  %600 = icmp eq i32 %587, 0
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %34, align 1, !tbaa !2448
  %602 = lshr i32 %587, 31
  %603 = trunc i32 %602 to i8
  store i8 %603, i8* %37, align 1, !tbaa !2449
  %604 = lshr i32 %581, 31
  %605 = lshr i32 %586, 31
  %606 = xor i32 %605, %604
  %607 = xor i32 %602, %604
  %608 = add nuw nsw i32 %607, %606
  %609 = icmp eq i32 %608, 2
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %43, align 1, !tbaa !2450
  %611 = icmp ne i8 %603, 0
  %612 = xor i1 %611, %609
  %.v48 = select i1 %612, i64 12, i64 256
  %613 = add i64 %576, %.v48
  %614 = add i64 %613, 5
  store i64 %614, i64* %PC, align 8
  br i1 %612, label %block_401eb9, label %block_401fb2.loopexit

block_401ea6:                                     ; preds = %block_401e9c
  %615 = add i64 %1254, -48
  %616 = add i64 %966, 7
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i32*
  store i32 1, i32* %617, align 4
  %618 = bitcast %union.VectorReg* %9 to i8*
  %619 = bitcast %union.VectorReg* %9 to float*
  %620 = bitcast %union.VectorReg* %9 to i32*
  %621 = getelementptr inbounds i8, i8* %618, i64 4
  %622 = bitcast i8* %621 to float*
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %624 = bitcast i64* %623 to float*
  %625 = getelementptr inbounds i8, i8* %618, i64 12
  %626 = bitcast i8* %625 to float*
  %627 = bitcast %union.VectorReg* %9 to <2 x float>*
  %628 = bitcast i64* %623 to <2 x i32>*
  %629 = bitcast i8* %621 to i32*
  %630 = bitcast i64* %623 to i32*
  %631 = bitcast i8* %625 to i32*
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_401ead

block_401eb9:                                     ; preds = %block_401ead
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %632 = add i64 %577, -16
  %633 = add i64 %613, 8
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %632 to i32*
  %635 = load i32, i32* %634, align 4
  %636 = zext i32 %635 to i64
  store i64 %636, i64* %RCX, align 8, !tbaa !2428
  %637 = add i64 %613, 11
  store i64 %637, i64* %PC, align 8
  %638 = load i32, i32* %580, align 4
  %639 = add i32 %638, 1
  %640 = zext i32 %639 to i64
  store i64 %640, i64* %RDX, align 8, !tbaa !2428
  %641 = lshr i32 %639, 31
  %642 = sub i32 %635, %639
  %643 = zext i32 %642 to i64
  store i64 %643, i64* %RCX, align 8, !tbaa !2428
  %644 = icmp ult i32 %635, %639
  %645 = zext i1 %644 to i8
  store i8 %645, i8* %19, align 1, !tbaa !2432
  %646 = and i32 %642, 255
  %647 = tail call i32 @llvm.ctpop.i32(i32 %646) #12
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  %650 = xor i8 %649, 1
  store i8 %650, i8* %26, align 1, !tbaa !2446
  %651 = xor i32 %639, %635
  %652 = xor i32 %651, %642
  %653 = lshr i32 %652, 4
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  store i8 %655, i8* %31, align 1, !tbaa !2447
  %656 = icmp eq i32 %642, 0
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %34, align 1, !tbaa !2448
  %658 = lshr i32 %642, 31
  %659 = trunc i32 %658 to i8
  store i8 %659, i8* %37, align 1, !tbaa !2449
  %660 = lshr i32 %635, 31
  %661 = xor i32 %641, %660
  %662 = xor i32 %658, %660
  %663 = add nuw nsw i32 %662, %661
  %664 = icmp eq i32 %663, 2
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %43, align 1, !tbaa !2450
  %666 = add i64 %577, -44
  %667 = add i64 %613, 19
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i32*
  store i32 %642, i32* %668, align 4
  %669 = load i64, i64* %RBP, align 8
  %670 = add i64 %669, -32
  %671 = load i64, i64* %PC, align 8
  %672 = add i64 %671, 4
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %670 to i64*
  %674 = load i64, i64* %673, align 8
  store i64 %674, i64* %RSI, align 8, !tbaa !2428
  %675 = add i64 %669, -44
  %676 = add i64 %671, 8
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i32*
  %678 = load i32, i32* %677, align 4
  %679 = sext i32 %678 to i64
  store i64 %679, i64* %RDI, align 8, !tbaa !2428
  %680 = shl nsw i64 %679, 2
  %681 = add i64 %680, %674
  %682 = add i64 %671, 13
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %681 to i32*
  %684 = load i32, i32* %683, align 4
  store i32 %684, i32* %1599, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1601, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1603, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1605, align 1, !tbaa !2451
  %685 = add i64 %669, -16
  %686 = add i64 %671, 16
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %685 to i32*
  %688 = load i32, i32* %687, align 4
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %RCX, align 8, !tbaa !2428
  %690 = add i64 %671, 19
  store i64 %690, i64* %PC, align 8
  %691 = load i32, i32* %677, align 4
  %692 = add i32 %691, 1
  %693 = zext i32 %692 to i64
  store i64 %693, i64* %RDX, align 8, !tbaa !2428
  %694 = lshr i32 %692, 31
  %695 = sub i32 %688, %692
  %696 = zext i32 %695 to i64
  store i64 %696, i64* %RCX, align 8, !tbaa !2428
  %697 = icmp ult i32 %688, %692
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %19, align 1, !tbaa !2432
  %699 = and i32 %695, 255
  %700 = tail call i32 @llvm.ctpop.i32(i32 %699) #12
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = xor i8 %702, 1
  store i8 %703, i8* %26, align 1, !tbaa !2446
  %704 = xor i32 %692, %688
  %705 = xor i32 %704, %695
  %706 = lshr i32 %705, 4
  %707 = trunc i32 %706 to i8
  %708 = and i8 %707, 1
  store i8 %708, i8* %31, align 1, !tbaa !2447
  %709 = icmp eq i32 %695, 0
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %34, align 1, !tbaa !2448
  %711 = lshr i32 %695, 31
  %712 = trunc i32 %711 to i8
  store i8 %712, i8* %37, align 1, !tbaa !2449
  %713 = lshr i32 %688, 31
  %714 = xor i32 %694, %713
  %715 = xor i32 %711, %713
  %716 = add nuw nsw i32 %715, %714
  %717 = icmp eq i32 %716, 2
  %718 = zext i1 %717 to i8
  store i8 %718, i8* %43, align 1, !tbaa !2450
  %719 = load i64, i64* %RBP, align 8
  %720 = add i64 %719, -8
  %721 = add i64 %671, 28
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %720 to i64*
  %723 = load i64, i64* %722, align 8
  store i64 %723, i64* %RSI, align 8, !tbaa !2428
  %724 = add i64 %719, -12
  %725 = add i64 %671, 31
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to i32*
  %727 = load i32, i32* %726, align 4
  %728 = zext i32 %727 to i64
  store i64 %728, i64* %RDX, align 8, !tbaa !2428
  %729 = add i64 %719, -44
  %730 = add i64 %671, 35
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %729 to i32*
  %732 = load i32, i32* %731, align 4
  %733 = sext i32 %727 to i64
  %734 = sext i32 %732 to i64
  %735 = mul nsw i64 %734, %733
  %736 = trunc i64 %735 to i32
  %737 = and i64 %735, 4294967295
  store i64 %737, i64* %RDX, align 8, !tbaa !2428
  %738 = shl i64 %735, 32
  %739 = ashr exact i64 %738, 32
  %740 = icmp ne i64 %739, %735
  %741 = zext i1 %740 to i8
  store i8 %741, i8* %19, align 1, !tbaa !2432
  %742 = and i32 %736, 255
  %743 = tail call i32 @llvm.ctpop.i32(i32 %742) #12
  %744 = trunc i32 %743 to i8
  %745 = and i8 %744, 1
  %746 = xor i8 %745, 1
  store i8 %746, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %747 = lshr i32 %736, 31
  %748 = trunc i32 %747 to i8
  store i8 %748, i8* %37, align 1, !tbaa !2449
  store i8 %741, i8* %43, align 1, !tbaa !2450
  %749 = add i64 %671, 38
  store i64 %749, i64* %PC, align 8
  %750 = trunc i64 %735 to i32
  %751 = load i32, i32* %731, align 4
  %752 = add i32 %751, %750
  %753 = add i32 %752, 1
  %754 = zext i32 %753 to i64
  store i64 %754, i64* %RDX, align 8, !tbaa !2428
  %755 = sext i32 %753 to i64
  %756 = shl nsw i64 %755, 2
  store i64 %756, i64* %RDI, align 8, !tbaa !2428
  %757 = load i64, i64* %RSI, align 8
  %758 = add i64 %756, %757
  store i64 %758, i64* %RSI, align 8, !tbaa !2428
  %759 = icmp ult i64 %758, %757
  %760 = icmp ult i64 %758, %756
  %761 = or i1 %759, %760
  %762 = zext i1 %761 to i8
  store i8 %762, i8* %19, align 1, !tbaa !2432
  %763 = trunc i64 %758 to i32
  %764 = and i32 %763, 255
  %765 = tail call i32 @llvm.ctpop.i32(i32 %764) #12
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  store i8 %768, i8* %26, align 1, !tbaa !2446
  %769 = xor i64 %756, %757
  %770 = xor i64 %769, %758
  %771 = lshr i64 %770, 4
  %772 = trunc i64 %771 to i8
  %773 = and i8 %772, 1
  store i8 %773, i8* %31, align 1, !tbaa !2447
  %774 = icmp eq i64 %758, 0
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %34, align 1, !tbaa !2448
  %776 = lshr i64 %758, 63
  %777 = trunc i64 %776 to i8
  store i8 %777, i8* %37, align 1, !tbaa !2449
  %778 = lshr i64 %757, 63
  %779 = lshr i64 %755, 61
  %780 = and i64 %779, 1
  %781 = xor i64 %776, %778
  %782 = xor i64 %776, %780
  %783 = add nuw nsw i64 %781, %782
  %784 = icmp eq i64 %783, 2
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %43, align 1, !tbaa !2450
  %786 = load i64, i64* %RBP, align 8
  %787 = add i64 %786, -32
  %788 = add i64 %671, 55
  store i64 %788, i64* %PC, align 8
  %789 = inttoptr i64 %787 to i64*
  %790 = load i64, i64* %789, align 8
  store i64 %790, i64* %RDI, align 8, !tbaa !2428
  %791 = add i64 %786, -44
  %792 = add i64 %671, 58
  store i64 %792, i64* %PC, align 8
  %793 = inttoptr i64 %791 to i32*
  %794 = load i32, i32* %793, align 4
  %795 = add i32 %794, 1
  %796 = sext i32 %795 to i64
  %797 = shl nsw i64 %796, 2
  store i64 %797, i64* %R8, align 8, !tbaa !2428
  %798 = add i64 %797, %790
  %799 = icmp ult i64 %798, %790
  %800 = icmp ult i64 %798, %797
  %801 = or i1 %799, %800
  %802 = zext i1 %801 to i8
  store i8 %802, i8* %19, align 1, !tbaa !2432
  %803 = trunc i64 %798 to i32
  %804 = and i32 %803, 255
  %805 = tail call i32 @llvm.ctpop.i32(i32 %804) #12
  %806 = trunc i32 %805 to i8
  %807 = and i8 %806, 1
  %808 = xor i8 %807, 1
  store i8 %808, i8* %26, align 1, !tbaa !2446
  %809 = xor i64 %797, %790
  %810 = xor i64 %809, %798
  %811 = lshr i64 %810, 4
  %812 = trunc i64 %811 to i8
  %813 = and i8 %812, 1
  store i8 %813, i8* %31, align 1, !tbaa !2447
  %814 = icmp eq i64 %798, 0
  %815 = zext i1 %814 to i8
  store i8 %815, i8* %34, align 1, !tbaa !2448
  %816 = lshr i64 %798, 63
  %817 = trunc i64 %816 to i8
  store i8 %817, i8* %37, align 1, !tbaa !2449
  %818 = lshr i64 %790, 63
  %819 = lshr i64 %796, 61
  %820 = and i64 %819, 1
  %821 = xor i64 %816, %818
  %822 = xor i64 %816, %820
  %823 = add nuw nsw i64 %821, %822
  %824 = icmp eq i64 %823, 2
  %825 = zext i1 %824 to i8
  store i8 %825, i8* %43, align 1, !tbaa !2450
  %826 = load i64, i64* %RBP, align 8
  %827 = add i64 %826, -80
  %828 = add i64 %671, 75
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %827 to i64*
  store i64 %798, i64* %829, align 8
  %830 = load i32, i32* %ECX, align 4
  %831 = zext i32 %830 to i64
  %832 = load i64, i64* %PC, align 8
  store i64 %831, i64* %RDI, align 8, !tbaa !2428
  %833 = load i32, i32* %EAX, align 4
  %834 = zext i32 %833 to i64
  store i64 %834, i64* %RDX, align 8, !tbaa !2428
  %835 = load i64, i64* %RBP, align 8
  %836 = add i64 %835, -80
  %837 = add i64 %832, 8
  store i64 %837, i64* %PC, align 8
  %838 = inttoptr i64 %836 to i64*
  %839 = load i64, i64* %838, align 8
  store i64 %839, i64* %RCX, align 8, !tbaa !2428
  store i64 %834, i64* %R8, align 8, !tbaa !2428
  %840 = add i64 %835, -84
  %841 = add i64 %832, 16
  store i64 %841, i64* %PC, align 8
  %842 = load <2 x float>, <2 x float>* %1596, align 1
  %843 = extractelement <2 x float> %842, i32 0
  %844 = inttoptr i64 %840 to float*
  store float %843, float* %844, align 4
  %845 = load i64, i64* %PC, align 8
  %846 = add i64 %845, 2761
  %847 = add i64 %845, 5
  %848 = load i64, i64* %RSP, align 8, !tbaa !2428
  %849 = add i64 %848, -8
  %850 = inttoptr i64 %849 to i64*
  store i64 %847, i64* %850, align 8
  store i64 %849, i64* %RSP, align 8, !tbaa !2428
  store i64 %846, i64* %PC, align 8, !tbaa !2428
  %851 = tail call %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* nonnull %0, i64 %846, %struct.Memory* %2)
  %852 = load i64, i64* %RBP, align 8
  %853 = add i64 %852, -84
  %854 = load i64, i64* %PC, align 8
  %855 = add i64 %854, 5
  store i64 %855, i64* %PC, align 8
  %856 = inttoptr i64 %853 to i32*
  %857 = load i32, i32* %856, align 4
  store i32 %857, i32* %620, align 1, !tbaa !2451
  store float 0.000000e+00, float* %622, align 1, !tbaa !2451
  store float 0.000000e+00, float* %624, align 1, !tbaa !2451
  store float 0.000000e+00, float* %626, align 1, !tbaa !2451
  %858 = load <2 x float>, <2 x float>* %627, align 1
  %859 = load <2 x i32>, <2 x i32>* %628, align 1
  %860 = load <2 x float>, <2 x float>* %1596, align 1
  %861 = extractelement <2 x float> %858, i32 0
  %862 = extractelement <2 x float> %860, i32 0
  %863 = fadd float %861, %862
  store float %863, float* %619, align 1, !tbaa !2451
  %864 = bitcast <2 x float> %858 to <2 x i32>
  %865 = extractelement <2 x i32> %864, i32 1
  store i32 %865, i32* %629, align 1, !tbaa !2451
  %866 = extractelement <2 x i32> %859, i32 0
  store i32 %866, i32* %630, align 1, !tbaa !2451
  %867 = extractelement <2 x i32> %859, i32 1
  store i32 %867, i32* %631, align 1, !tbaa !2451
  %868 = add i64 %852, -32
  %869 = add i64 %854, 13
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i64*
  %871 = load i64, i64* %870, align 8
  store i64 %871, i64* %RCX, align 8, !tbaa !2428
  %872 = add i64 %852, -44
  %873 = add i64 %854, 17
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to i32*
  %875 = load i32, i32* %874, align 4
  %876 = sext i32 %875 to i64
  store i64 %876, i64* %RSI, align 8, !tbaa !2428
  %877 = shl nsw i64 %876, 2
  %878 = add i64 %877, %871
  %879 = add i64 %854, 22
  store i64 %879, i64* %PC, align 8
  %880 = load <2 x float>, <2 x float>* %627, align 1
  %881 = extractelement <2 x float> %880, i32 0
  %882 = inttoptr i64 %878 to float*
  store float %881, float* %882, align 4
  %883 = load i64, i64* %RBP, align 8
  %884 = add i64 %883, -24
  %885 = load i64, i64* %PC, align 8
  %886 = add i64 %885, 4
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %884 to i64*
  %888 = load i64, i64* %887, align 8
  store i64 %888, i64* %RCX, align 8, !tbaa !2428
  %889 = add i64 %883, -44
  %890 = add i64 %885, 8
  store i64 %890, i64* %PC, align 8
  %891 = inttoptr i64 %889 to i32*
  %892 = load i32, i32* %891, align 4
  %893 = sext i32 %892 to i64
  store i64 %893, i64* %RSI, align 8, !tbaa !2428
  %894 = shl nsw i64 %893, 2
  %895 = add i64 %894, %888
  %896 = add i64 %885, 11
  store i64 %896, i64* %PC, align 8
  %897 = inttoptr i64 %895 to i32*
  %898 = load i32, i32* %897, align 4
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = add i64 %883, -52
  %901 = add i64 %885, 14
  store i64 %901, i64* %PC, align 8
  %902 = inttoptr i64 %900 to i32*
  store i32 %898, i32* %902, align 4
  %903 = load i64, i64* %RBP, align 8
  %904 = add i64 %903, -52
  %905 = load i64, i64* %PC, align 8
  %906 = add i64 %905, 3
  store i64 %906, i64* %PC, align 8
  %907 = inttoptr i64 %904 to i32*
  %908 = load i32, i32* %907, align 4
  %909 = zext i32 %908 to i64
  store i64 %909, i64* %RAX, align 8, !tbaa !2428
  %910 = add i64 %903, -44
  %911 = add i64 %905, 6
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to i32*
  %913 = load i32, i32* %912, align 4
  %914 = sub i32 %908, %913
  %915 = icmp ult i32 %908, %913
  %916 = zext i1 %915 to i8
  store i8 %916, i8* %19, align 1, !tbaa !2432
  %917 = and i32 %914, 255
  %918 = tail call i32 @llvm.ctpop.i32(i32 %917) #12
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  store i8 %921, i8* %26, align 1, !tbaa !2446
  %922 = xor i32 %913, %908
  %923 = xor i32 %922, %914
  %924 = lshr i32 %923, 4
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  store i8 %926, i8* %31, align 1, !tbaa !2447
  %927 = icmp eq i32 %914, 0
  %928 = zext i1 %927 to i8
  store i8 %928, i8* %34, align 1, !tbaa !2448
  %929 = lshr i32 %914, 31
  %930 = trunc i32 %929 to i8
  store i8 %930, i8* %37, align 1, !tbaa !2449
  %931 = lshr i32 %908, 31
  %932 = lshr i32 %913, 31
  %933 = xor i32 %932, %931
  %934 = xor i32 %929, %931
  %935 = add nuw nsw i32 %934, %933
  %936 = icmp eq i32 %935, 2
  %937 = zext i1 %936 to i8
  store i8 %937, i8* %43, align 1, !tbaa !2450
  %.v49 = select i1 %927, i64 74, i64 12
  %938 = add i64 %905, %.v49
  store i64 %938, i64* %PC, align 8, !tbaa !2428
  br i1 %927, label %block_401f9a, label %block_401f5c

block_401e9c:                                     ; preds = %block_401e0f
  %939 = add i64 %1254, -56
  %940 = add i64 %1290, 4
  store i64 %940, i64* %PC, align 8
  %941 = inttoptr i64 %939 to i32*
  %942 = load i32, i32* %941, align 4
  %943 = add i32 %942, -1
  %944 = icmp eq i32 %942, 0
  %945 = zext i1 %944 to i8
  store i8 %945, i8* %19, align 1, !tbaa !2432
  %946 = and i32 %943, 255
  %947 = tail call i32 @llvm.ctpop.i32(i32 %946) #12
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = xor i8 %949, 1
  store i8 %950, i8* %26, align 1, !tbaa !2446
  %951 = xor i32 %943, %942
  %952 = lshr i32 %951, 4
  %953 = trunc i32 %952 to i8
  %954 = and i8 %953, 1
  store i8 %954, i8* %31, align 1, !tbaa !2447
  %955 = icmp eq i32 %943, 0
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %34, align 1, !tbaa !2448
  %957 = lshr i32 %943, 31
  %958 = trunc i32 %957 to i8
  store i8 %958, i8* %37, align 1, !tbaa !2449
  %959 = lshr i32 %942, 31
  %960 = xor i32 %957, %959
  %961 = add nuw nsw i32 %960, %959
  %962 = icmp eq i32 %961, 2
  %963 = zext i1 %962 to i8
  store i8 %963, i8* %43, align 1, !tbaa !2450
  %964 = icmp ne i8 %958, 0
  %965 = xor i1 %964, %962
  %.v47 = select i1 %965, i64 278, i64 10
  %966 = add i64 %1290, %.v47
  store i64 %966, i64* %PC, align 8, !tbaa !2428
  br i1 %965, label %block_401fb2, label %block_401ea6

block_401e1b:                                     ; preds = %block_401e0f
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %967 = add i64 %1290, 8
  store i64 %967, i64* %PC, align 8
  %968 = load i32, i32* %1257, align 4
  %969 = zext i32 %968 to i64
  store i64 %969, i64* %RDI, align 8, !tbaa !2428
  %970 = add i64 %1254, -8
  %971 = add i64 %1290, 12
  store i64 %971, i64* %PC, align 8
  %972 = inttoptr i64 %970 to i64*
  %973 = load i64, i64* %972, align 8
  store i64 %973, i64* %RCX, align 8, !tbaa !2428
  %974 = add i64 %1254, -12
  %975 = add i64 %1290, 15
  store i64 %975, i64* %PC, align 8
  %976 = inttoptr i64 %974 to i32*
  %977 = load i32, i32* %976, align 4
  %978 = zext i32 %977 to i64
  store i64 %978, i64* %RDX, align 8, !tbaa !2428
  %979 = add i64 %1290, 19
  store i64 %979, i64* %PC, align 8
  %980 = load i32, i32* %1257, align 4
  %981 = sext i32 %977 to i64
  %982 = sext i32 %980 to i64
  %983 = mul nsw i64 %982, %981
  %984 = and i64 %983, 4294967295
  store i64 %984, i64* %RDX, align 8, !tbaa !2428
  %sext45 = shl i64 %983, 32
  %985 = ashr exact i64 %sext45, 30
  store i64 %985, i64* %RSI, align 8, !tbaa !2428
  %986 = add i64 %985, %973
  store i64 %986, i64* %RCX, align 8, !tbaa !2428
  %987 = icmp ult i64 %986, %973
  %988 = icmp ult i64 %986, %985
  %989 = or i1 %987, %988
  %990 = zext i1 %989 to i8
  store i8 %990, i8* %19, align 1, !tbaa !2432
  %991 = trunc i64 %986 to i32
  %992 = and i32 %991, 255
  %993 = tail call i32 @llvm.ctpop.i32(i32 %992) #12
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  %996 = xor i8 %995, 1
  store i8 %996, i8* %26, align 1, !tbaa !2446
  %997 = xor i64 %985, %973
  %998 = xor i64 %997, %986
  %999 = lshr i64 %998, 4
  %1000 = trunc i64 %999 to i8
  %1001 = and i8 %1000, 1
  store i8 %1001, i8* %31, align 1, !tbaa !2447
  %1002 = icmp eq i64 %986, 0
  %1003 = zext i1 %1002 to i8
  store i8 %1003, i8* %34, align 1, !tbaa !2448
  %1004 = lshr i64 %986, 63
  %1005 = trunc i64 %1004 to i8
  store i8 %1005, i8* %37, align 1, !tbaa !2449
  %1006 = lshr i64 %973, 63
  %1007 = lshr i64 %985, 63
  %1008 = xor i64 %1004, %1006
  %1009 = xor i64 %1004, %1007
  %1010 = add nuw nsw i64 %1008, %1009
  %1011 = icmp eq i64 %1010, 2
  %1012 = zext i1 %1011 to i8
  store i8 %1012, i8* %43, align 1, !tbaa !2450
  %1013 = load i64, i64* %RBP, align 8
  %1014 = add i64 %1013, -32
  %1015 = add i64 %1290, 36
  store i64 %1015, i64* %PC, align 8
  %1016 = inttoptr i64 %1014 to i64*
  %1017 = load i64, i64* %1016, align 8
  %1018 = add i64 %1013, -72
  %1019 = add i64 %1290, 40
  store i64 %1019, i64* %PC, align 8
  %1020 = inttoptr i64 %1018 to i64*
  store i64 %1017, i64* %1020, align 8
  %1021 = load i64, i64* %RCX, align 8
  %1022 = load i64, i64* %PC, align 8
  store i64 %1021, i64* %RSI, align 8, !tbaa !2428
  %1023 = load i32, i32* %EAX, align 4
  %1024 = zext i32 %1023 to i64
  store i64 %1024, i64* %RDX, align 8, !tbaa !2428
  %1025 = load i64, i64* %RBP, align 8
  %1026 = add i64 %1025, -72
  %1027 = add i64 %1022, 9
  store i64 %1027, i64* %PC, align 8
  %1028 = inttoptr i64 %1026 to i64*
  %1029 = load i64, i64* %1028, align 8
  store i64 %1029, i64* %RCX, align 8, !tbaa !2428
  store i64 %1024, i64* %R8, align 8, !tbaa !2428
  %1030 = add i64 %1022, 2989
  %1031 = add i64 %1022, 17
  %1032 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1033 = add i64 %1032, -8
  %1034 = inttoptr i64 %1033 to i64*
  store i64 %1031, i64* %1034, align 8
  store i64 %1033, i64* %RSP, align 8, !tbaa !2428
  store i64 %1030, i64* %PC, align 8, !tbaa !2428
  %1035 = tail call %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* nonnull %0, i64 %1030, %struct.Memory* %2)
  %1036 = load i64, i64* %RBP, align 8
  %1037 = add i64 %1036, -40
  %1038 = load i64, i64* %PC, align 8
  %1039 = add i64 %1038, 5
  store i64 %1039, i64* %PC, align 8
  %1040 = load <2 x float>, <2 x float>* %1596, align 1
  %1041 = extractelement <2 x float> %1040, i32 0
  %1042 = inttoptr i64 %1037 to float*
  store float %1041, float* %1042, align 4
  %1043 = load i64, i64* %RBP, align 8
  %1044 = add i64 %1043, -32
  %1045 = load i64, i64* %PC, align 8
  %1046 = add i64 %1045, 4
  store i64 %1046, i64* %PC, align 8
  %1047 = inttoptr i64 %1044 to i64*
  %1048 = load i64, i64* %1047, align 8
  store i64 %1048, i64* %RCX, align 8, !tbaa !2428
  %1049 = add i64 %1043, -44
  %1050 = add i64 %1045, 8
  store i64 %1050, i64* %PC, align 8
  %1051 = inttoptr i64 %1049 to i32*
  %1052 = load i32, i32* %1051, align 4
  %1053 = sext i32 %1052 to i64
  store i64 %1053, i64* %RSI, align 8, !tbaa !2428
  %1054 = shl nsw i64 %1053, 2
  %1055 = add i64 %1054, %1048
  %1056 = add i64 %1045, 13
  store i64 %1056, i64* %PC, align 8
  %1057 = inttoptr i64 %1055 to i32*
  %1058 = load i32, i32* %1057, align 4
  store i32 %1058, i32* %1599, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1601, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1603, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1605, align 1, !tbaa !2451
  %1059 = add i64 %1043, -40
  %1060 = add i64 %1045, 18
  store i64 %1060, i64* %PC, align 8
  %1061 = load <2 x float>, <2 x float>* %1596, align 1
  %1062 = load <2 x i32>, <2 x i32>* %1606, align 1
  %1063 = inttoptr i64 %1059 to float*
  %1064 = load float, float* %1063, align 4
  %1065 = extractelement <2 x float> %1061, i32 0
  %1066 = fsub float %1065, %1064
  store float %1066, float* %1598, align 1, !tbaa !2451
  %1067 = bitcast <2 x float> %1061 to <2 x i32>
  %1068 = extractelement <2 x i32> %1067, i32 1
  store i32 %1068, i32* %1607, align 1, !tbaa !2451
  %1069 = extractelement <2 x i32> %1062, i32 0
  store i32 %1069, i32* %1608, align 1, !tbaa !2451
  %1070 = extractelement <2 x i32> %1062, i32 1
  store i32 %1070, i32* %1609, align 1, !tbaa !2451
  %1071 = add i64 %1043, -8
  %1072 = add i64 %1045, 22
  store i64 %1072, i64* %PC, align 8
  %1073 = inttoptr i64 %1071 to i64*
  %1074 = load i64, i64* %1073, align 8
  store i64 %1074, i64* %RCX, align 8, !tbaa !2428
  %1075 = add i64 %1043, -12
  %1076 = add i64 %1045, 25
  store i64 %1076, i64* %PC, align 8
  %1077 = inttoptr i64 %1075 to i32*
  %1078 = load i32, i32* %1077, align 4
  %1079 = zext i32 %1078 to i64
  store i64 %1079, i64* %RAX, align 8, !tbaa !2428
  %1080 = add i64 %1045, 29
  store i64 %1080, i64* %PC, align 8
  %1081 = load i32, i32* %1051, align 4
  %1082 = sext i32 %1078 to i64
  %1083 = sext i32 %1081 to i64
  %1084 = mul nsw i64 %1083, %1082
  %1085 = trunc i64 %1084 to i32
  %1086 = and i64 %1084, 4294967295
  store i64 %1086, i64* %RAX, align 8, !tbaa !2428
  %1087 = shl i64 %1084, 32
  %1088 = ashr exact i64 %1087, 32
  %1089 = icmp ne i64 %1088, %1084
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %19, align 1, !tbaa !2432
  %1091 = and i32 %1085, 255
  %1092 = tail call i32 @llvm.ctpop.i32(i32 %1091) #12
  %1093 = trunc i32 %1092 to i8
  %1094 = and i8 %1093, 1
  %1095 = xor i8 %1094, 1
  store i8 %1095, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1096 = lshr i32 %1085, 31
  %1097 = trunc i32 %1096 to i8
  store i8 %1097, i8* %37, align 1, !tbaa !2449
  store i8 %1090, i8* %43, align 1, !tbaa !2450
  %1098 = add i64 %1045, 32
  store i64 %1098, i64* %PC, align 8
  %1099 = trunc i64 %1084 to i32
  %1100 = load i32, i32* %1051, align 4
  %1101 = add i32 %1100, %1099
  %1102 = zext i32 %1101 to i64
  store i64 %1102, i64* %RAX, align 8, !tbaa !2428
  %1103 = icmp ult i32 %1101, %1099
  %1104 = icmp ult i32 %1101, %1100
  %1105 = or i1 %1103, %1104
  %1106 = zext i1 %1105 to i8
  store i8 %1106, i8* %19, align 1, !tbaa !2432
  %1107 = and i32 %1101, 255
  %1108 = tail call i32 @llvm.ctpop.i32(i32 %1107) #12
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  store i8 %1111, i8* %26, align 1, !tbaa !2446
  %1112 = xor i32 %1100, %1099
  %1113 = xor i32 %1112, %1101
  %1114 = lshr i32 %1113, 4
  %1115 = trunc i32 %1114 to i8
  %1116 = and i8 %1115, 1
  store i8 %1116, i8* %31, align 1, !tbaa !2447
  %1117 = icmp eq i32 %1101, 0
  %1118 = zext i1 %1117 to i8
  store i8 %1118, i8* %34, align 1, !tbaa !2448
  %1119 = lshr i32 %1101, 31
  %1120 = trunc i32 %1119 to i8
  store i8 %1120, i8* %37, align 1, !tbaa !2449
  %1121 = lshr i32 %1099, 31
  %1122 = lshr i32 %1100, 31
  %1123 = xor i32 %1119, %1121
  %1124 = xor i32 %1119, %1122
  %1125 = add nuw nsw i32 %1123, %1124
  %1126 = icmp eq i32 %1125, 2
  %1127 = zext i1 %1126 to i8
  store i8 %1127, i8* %43, align 1, !tbaa !2450
  %1128 = sext i32 %1101 to i64
  store i64 %1128, i64* %RSI, align 8, !tbaa !2428
  %1129 = shl nsw i64 %1128, 2
  %1130 = add i64 %1074, %1129
  %1131 = add i64 %1045, 40
  store i64 %1131, i64* %PC, align 8
  %1132 = load <2 x float>, <2 x float>* %1596, align 1
  %1133 = load <2 x i32>, <2 x i32>* %1606, align 1
  %1134 = inttoptr i64 %1130 to float*
  %1135 = load float, float* %1134, align 4
  %1136 = extractelement <2 x float> %1132, i32 0
  %1137 = fdiv float %1136, %1135
  store float %1137, float* %1598, align 1, !tbaa !2451
  %1138 = bitcast <2 x float> %1132 to <2 x i32>
  %1139 = extractelement <2 x i32> %1138, i32 1
  store i32 %1139, i32* %1607, align 1, !tbaa !2451
  %1140 = extractelement <2 x i32> %1133, i32 0
  store i32 %1140, i32* %1608, align 1, !tbaa !2451
  %1141 = extractelement <2 x i32> %1133, i32 1
  store i32 %1141, i32* %1609, align 1, !tbaa !2451
  %1142 = load i64, i64* %RBP, align 8
  %1143 = add i64 %1142, -32
  %1144 = add i64 %1045, 44
  store i64 %1144, i64* %PC, align 8
  %1145 = inttoptr i64 %1143 to i64*
  %1146 = load i64, i64* %1145, align 8
  store i64 %1146, i64* %RCX, align 8, !tbaa !2428
  %1147 = add i64 %1142, -44
  %1148 = add i64 %1045, 48
  store i64 %1148, i64* %PC, align 8
  %1149 = inttoptr i64 %1147 to i32*
  %1150 = load i32, i32* %1149, align 4
  %1151 = sext i32 %1150 to i64
  store i64 %1151, i64* %RSI, align 8, !tbaa !2428
  %1152 = shl nsw i64 %1151, 2
  %1153 = add i64 %1152, %1146
  %1154 = add i64 %1045, 53
  store i64 %1154, i64* %PC, align 8
  %1155 = load <2 x float>, <2 x float>* %1596, align 1
  %1156 = extractelement <2 x float> %1155, i32 0
  %1157 = inttoptr i64 %1153 to float*
  store float %1156, float* %1157, align 4
  %1158 = load i64, i64* %RBP, align 8
  %1159 = add i64 %1158, -44
  %1160 = load i64, i64* %PC, align 8
  %1161 = add i64 %1160, 3
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1159 to i32*
  %1163 = load i32, i32* %1162, align 4
  %1164 = add i32 %1163, 1
  %1165 = zext i32 %1164 to i64
  store i64 %1165, i64* %RAX, align 8, !tbaa !2428
  %1166 = icmp eq i32 %1163, -1
  %1167 = icmp eq i32 %1164, 0
  %1168 = or i1 %1166, %1167
  %1169 = zext i1 %1168 to i8
  store i8 %1169, i8* %19, align 1, !tbaa !2432
  %1170 = and i32 %1164, 255
  %1171 = tail call i32 @llvm.ctpop.i32(i32 %1170) #12
  %1172 = trunc i32 %1171 to i8
  %1173 = and i8 %1172, 1
  %1174 = xor i8 %1173, 1
  store i8 %1174, i8* %26, align 1, !tbaa !2446
  %1175 = xor i32 %1164, %1163
  %1176 = lshr i32 %1175, 4
  %1177 = trunc i32 %1176 to i8
  %1178 = and i8 %1177, 1
  store i8 %1178, i8* %31, align 1, !tbaa !2447
  %1179 = zext i1 %1167 to i8
  store i8 %1179, i8* %34, align 1, !tbaa !2448
  %1180 = lshr i32 %1164, 31
  %1181 = trunc i32 %1180 to i8
  store i8 %1181, i8* %37, align 1, !tbaa !2449
  %1182 = lshr i32 %1163, 31
  %1183 = xor i32 %1180, %1182
  %1184 = add nuw nsw i32 %1183, %1180
  %1185 = icmp eq i32 %1184, 2
  %1186 = zext i1 %1185 to i8
  store i8 %1186, i8* %43, align 1, !tbaa !2450
  %1187 = add i64 %1160, 9
  store i64 %1187, i64* %PC, align 8
  store i32 %1164, i32* %1162, align 4
  %1188 = load i64, i64* %PC, align 8
  %1189 = add i64 %1188, -136
  store i64 %1189, i64* %PC, align 8, !tbaa !2428
  br label %block_401e0f

block_401fb7:                                     ; preds = %block_401e03, %block_401fb2
  %.sink = phi i64 [ %1610, %block_401e03 ], [ %575, %block_401fb2 ]
  %1190 = load i64, i64* %RSP, align 8
  %1191 = add i64 %1190, 96
  store i64 %1191, i64* %RSP, align 8, !tbaa !2428
  %1192 = icmp ugt i64 %1190, -97
  %1193 = zext i1 %1192 to i8
  store i8 %1193, i8* %19, align 1, !tbaa !2432
  %1194 = trunc i64 %1191 to i32
  %1195 = and i32 %1194, 255
  %1196 = tail call i32 @llvm.ctpop.i32(i32 %1195) #12
  %1197 = trunc i32 %1196 to i8
  %1198 = and i8 %1197, 1
  %1199 = xor i8 %1198, 1
  store i8 %1199, i8* %26, align 1, !tbaa !2446
  %1200 = xor i64 %1191, %1190
  %1201 = lshr i64 %1200, 4
  %1202 = trunc i64 %1201 to i8
  %1203 = and i8 %1202, 1
  store i8 %1203, i8* %31, align 1, !tbaa !2447
  %1204 = icmp eq i64 %1191, 0
  %1205 = zext i1 %1204 to i8
  store i8 %1205, i8* %34, align 1, !tbaa !2448
  %1206 = lshr i64 %1191, 63
  %1207 = trunc i64 %1206 to i8
  store i8 %1207, i8* %37, align 1, !tbaa !2449
  %1208 = lshr i64 %1190, 63
  %1209 = xor i64 %1206, %1208
  %1210 = add nuw nsw i64 %1209, %1206
  %1211 = icmp eq i64 %1210, 2
  %1212 = zext i1 %1211 to i8
  store i8 %1212, i8* %43, align 1, !tbaa !2450
  %1213 = add i64 %.sink, 5
  store i64 %1213, i64* %PC, align 8
  %1214 = add i64 %1190, 104
  %1215 = inttoptr i64 %1191 to i64*
  %1216 = load i64, i64* %1215, align 8
  store i64 %1216, i64* %RBP, align 8, !tbaa !2428
  store i64 %1214, i64* %RSP, align 8, !tbaa !2428
  %1217 = add i64 %.sink, 6
  store i64 %1217, i64* %PC, align 8
  %1218 = inttoptr i64 %1214 to i64*
  %1219 = load i64, i64* %1218, align 8
  store i64 %1219, i64* %PC, align 8, !tbaa !2428
  %1220 = add i64 %1190, 112
  store i64 %1220, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401f9a:                                     ; preds = %block_401eb9, %block_401f5c
  %1221 = phi i64 [ %903, %block_401eb9 ], [ %.pre27, %block_401f5c ]
  %1222 = phi i64 [ %938, %block_401eb9 ], [ %.pre26, %block_401f5c ]
  %1223 = add i64 %1221, -48
  %1224 = add i64 %1222, 8
  store i64 %1224, i64* %PC, align 8
  %1225 = inttoptr i64 %1223 to i32*
  %1226 = load i32, i32* %1225, align 4
  %1227 = add i32 %1226, 1
  %1228 = zext i32 %1227 to i64
  store i64 %1228, i64* %RAX, align 8, !tbaa !2428
  %1229 = icmp eq i32 %1226, -1
  %1230 = icmp eq i32 %1227, 0
  %1231 = or i1 %1229, %1230
  %1232 = zext i1 %1231 to i8
  store i8 %1232, i8* %19, align 1, !tbaa !2432
  %1233 = and i32 %1227, 255
  %1234 = tail call i32 @llvm.ctpop.i32(i32 %1233) #12
  %1235 = trunc i32 %1234 to i8
  %1236 = and i8 %1235, 1
  %1237 = xor i8 %1236, 1
  store i8 %1237, i8* %26, align 1, !tbaa !2446
  %1238 = xor i32 %1227, %1226
  %1239 = lshr i32 %1238, 4
  %1240 = trunc i32 %1239 to i8
  %1241 = and i8 %1240, 1
  store i8 %1241, i8* %31, align 1, !tbaa !2447
  %1242 = zext i1 %1230 to i8
  store i8 %1242, i8* %34, align 1, !tbaa !2448
  %1243 = lshr i32 %1227, 31
  %1244 = trunc i32 %1243 to i8
  store i8 %1244, i8* %37, align 1, !tbaa !2449
  %1245 = lshr i32 %1226, 31
  %1246 = xor i32 %1243, %1245
  %1247 = add nuw nsw i32 %1246, %1243
  %1248 = icmp eq i32 %1247, 2
  %1249 = zext i1 %1248 to i8
  store i8 %1249, i8* %43, align 1, !tbaa !2450
  %1250 = add i64 %1222, 14
  store i64 %1250, i64* %PC, align 8
  store i32 %1227, i32* %1225, align 4
  %1251 = load i64, i64* %PC, align 8
  %1252 = add i64 %1251, -251
  store i64 %1252, i64* %PC, align 8, !tbaa !2428
  br label %block_401ead

block_401e0f:                                     ; preds = %block_401e08, %block_401e1b
  %1253 = phi i64 [ %.pre24, %block_401e08 ], [ %1189, %block_401e1b ]
  %1254 = load i64, i64* %RBP, align 8
  %1255 = add i64 %1254, -44
  %1256 = add i64 %1253, 3
  store i64 %1256, i64* %PC, align 8
  %1257 = inttoptr i64 %1255 to i32*
  %1258 = load i32, i32* %1257, align 4
  %1259 = zext i32 %1258 to i64
  store i64 %1259, i64* %RAX, align 8, !tbaa !2428
  %1260 = add i64 %1254, -16
  %1261 = add i64 %1253, 6
  store i64 %1261, i64* %PC, align 8
  %1262 = inttoptr i64 %1260 to i32*
  %1263 = load i32, i32* %1262, align 4
  %1264 = sub i32 %1258, %1263
  %1265 = icmp ult i32 %1258, %1263
  %1266 = zext i1 %1265 to i8
  store i8 %1266, i8* %19, align 1, !tbaa !2432
  %1267 = and i32 %1264, 255
  %1268 = tail call i32 @llvm.ctpop.i32(i32 %1267) #12
  %1269 = trunc i32 %1268 to i8
  %1270 = and i8 %1269, 1
  %1271 = xor i8 %1270, 1
  store i8 %1271, i8* %26, align 1, !tbaa !2446
  %1272 = xor i32 %1263, %1258
  %1273 = xor i32 %1272, %1264
  %1274 = lshr i32 %1273, 4
  %1275 = trunc i32 %1274 to i8
  %1276 = and i8 %1275, 1
  store i8 %1276, i8* %31, align 1, !tbaa !2447
  %1277 = icmp eq i32 %1264, 0
  %1278 = zext i1 %1277 to i8
  store i8 %1278, i8* %34, align 1, !tbaa !2448
  %1279 = lshr i32 %1264, 31
  %1280 = trunc i32 %1279 to i8
  store i8 %1280, i8* %37, align 1, !tbaa !2449
  %1281 = lshr i32 %1258, 31
  %1282 = lshr i32 %1263, 31
  %1283 = xor i32 %1282, %1281
  %1284 = xor i32 %1279, %1281
  %1285 = add nuw nsw i32 %1284, %1283
  %1286 = icmp eq i32 %1285, 2
  %1287 = zext i1 %1286 to i8
  store i8 %1287, i8* %43, align 1, !tbaa !2450
  %1288 = icmp ne i8 %1280, 0
  %1289 = xor i1 %1288, %1286
  %.v46 = select i1 %1289, i64 12, i64 141
  %1290 = add i64 %1253, %.v46
  store i64 %1290, i64* %PC, align 8, !tbaa !2428
  br i1 %1289, label %block_401e1b, label %block_401e9c

block_401c71:                                     ; preds = %block_401c40
  %1291 = add i64 %109, -56
  %1292 = add i64 %124, 4
  store i64 %1292, i64* %PC, align 8
  %1293 = inttoptr i64 %1291 to i32*
  %1294 = load i32, i32* %1293, align 4
  %1295 = add i32 %1294, -1
  %1296 = icmp eq i32 %1294, 0
  %1297 = zext i1 %1296 to i8
  store i8 %1297, i8* %19, align 1, !tbaa !2432
  %1298 = and i32 %1295, 255
  %1299 = tail call i32 @llvm.ctpop.i32(i32 %1298) #12
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  store i8 %1302, i8* %26, align 1, !tbaa !2446
  %1303 = xor i32 %1295, %1294
  %1304 = lshr i32 %1303, 4
  %1305 = trunc i32 %1304 to i8
  %1306 = and i8 %1305, 1
  store i8 %1306, i8* %31, align 1, !tbaa !2447
  %1307 = icmp eq i32 %1295, 0
  %1308 = zext i1 %1307 to i8
  store i8 %1308, i8* %34, align 1, !tbaa !2448
  %1309 = lshr i32 %1295, 31
  %1310 = trunc i32 %1309 to i8
  store i8 %1310, i8* %37, align 1, !tbaa !2449
  %1311 = lshr i32 %1294, 31
  %1312 = xor i32 %1309, %1311
  %1313 = add nuw nsw i32 %1312, %1311
  %1314 = icmp eq i32 %1313, 2
  %1315 = zext i1 %1314 to i8
  store i8 %1315, i8* %43, align 1, !tbaa !2450
  %1316 = icmp ne i8 %1310, 0
  %1317 = xor i1 %1316, %1314
  %.v50 = select i1 %1317, i64 224, i64 10
  %1318 = add i64 %124, %.v50
  store i64 %1318, i64* %PC, align 8, !tbaa !2428
  br i1 %1317, label %block_401c71.block_401d51_crit_edge, label %block_401c7b

block_401c71.block_401d51_crit_edge:              ; preds = %block_401c71
  %.pre28 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %.pre29 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %.pre31 = getelementptr inbounds i8, i8* %.pre28, i64 4
  %.pre33 = bitcast i8* %.pre31 to float*
  %.pre35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre37 = bitcast i64* %.pre35 to float*
  %.pre39 = getelementptr inbounds i8, i8* %.pre28, i64 12
  %.pre41 = bitcast i8* %.pre39 to float*
  %.pre43 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  br label %block_401d51

block_401c8e:                                     ; preds = %block_401c82
  %1319 = add i64 %1612, -24
  %1320 = add i64 %1648, 4
  store i64 %1320, i64* %PC, align 8
  %1321 = inttoptr i64 %1319 to i64*
  %1322 = load i64, i64* %1321, align 8
  store i64 %1322, i64* %RAX, align 8, !tbaa !2428
  %1323 = add i64 %1648, 8
  store i64 %1323, i64* %PC, align 8
  %1324 = load i32, i32* %1615, align 4
  %1325 = sext i32 %1324 to i64
  store i64 %1325, i64* %RCX, align 8, !tbaa !2428
  %1326 = shl nsw i64 %1325, 2
  %1327 = add i64 %1326, %1322
  %1328 = add i64 %1648, 11
  store i64 %1328, i64* %PC, align 8
  %1329 = inttoptr i64 %1327 to i32*
  %1330 = load i32, i32* %1329, align 4
  %1331 = zext i32 %1330 to i64
  store i64 %1331, i64* %RDX, align 8, !tbaa !2428
  %1332 = add i64 %1612, -52
  %1333 = add i64 %1648, 14
  store i64 %1333, i64* %PC, align 8
  %1334 = inttoptr i64 %1332 to i32*
  store i32 %1330, i32* %1334, align 4
  %1335 = load i64, i64* %RBP, align 8
  %1336 = add i64 %1335, -32
  %1337 = load i64, i64* %PC, align 8
  %1338 = add i64 %1337, 4
  store i64 %1338, i64* %PC, align 8
  %1339 = inttoptr i64 %1336 to i64*
  %1340 = load i64, i64* %1339, align 8
  store i64 %1340, i64* %RAX, align 8, !tbaa !2428
  %1341 = add i64 %1335, -52
  %1342 = add i64 %1337, 8
  store i64 %1342, i64* %PC, align 8
  %1343 = inttoptr i64 %1341 to i32*
  %1344 = load i32, i32* %1343, align 4
  %1345 = sext i32 %1344 to i64
  store i64 %1345, i64* %RCX, align 8, !tbaa !2428
  %1346 = shl nsw i64 %1345, 2
  %1347 = add i64 %1346, %1340
  %1348 = add i64 %1337, 13
  store i64 %1348, i64* %PC, align 8
  %1349 = inttoptr i64 %1347 to i32*
  %1350 = load i32, i32* %1349, align 4
  store i32 %1350, i32* %129, align 1, !tbaa !2451
  store float 0.000000e+00, float* %131, align 1, !tbaa !2451
  store float 0.000000e+00, float* %133, align 1, !tbaa !2451
  store float 0.000000e+00, float* %135, align 1, !tbaa !2451
  %1351 = add i64 %1335, -40
  %1352 = add i64 %1337, 18
  store i64 %1352, i64* %PC, align 8
  %1353 = load <2 x float>, <2 x float>* %136, align 1
  %1354 = extractelement <2 x float> %1353, i32 0
  %1355 = inttoptr i64 %1351 to float*
  store float %1354, float* %1355, align 4
  %1356 = load i64, i64* %RBP, align 8
  %1357 = add i64 %1356, -52
  %1358 = load i64, i64* %PC, align 8
  %1359 = add i64 %1358, 3
  store i64 %1359, i64* %PC, align 8
  %1360 = inttoptr i64 %1357 to i32*
  %1361 = load i32, i32* %1360, align 4
  %1362 = zext i32 %1361 to i64
  store i64 %1362, i64* %RDX, align 8, !tbaa !2428
  %1363 = add i64 %1356, -44
  %1364 = add i64 %1358, 6
  store i64 %1364, i64* %PC, align 8
  %1365 = inttoptr i64 %1363 to i32*
  %1366 = load i32, i32* %1365, align 4
  %1367 = sub i32 %1361, %1366
  %1368 = icmp ult i32 %1361, %1366
  %1369 = zext i1 %1368 to i8
  store i8 %1369, i8* %19, align 1, !tbaa !2432
  %1370 = and i32 %1367, 255
  %1371 = tail call i32 @llvm.ctpop.i32(i32 %1370) #12
  %1372 = trunc i32 %1371 to i8
  %1373 = and i8 %1372, 1
  %1374 = xor i8 %1373, 1
  store i8 %1374, i8* %26, align 1, !tbaa !2446
  %1375 = xor i32 %1366, %1361
  %1376 = xor i32 %1375, %1367
  %1377 = lshr i32 %1376, 4
  %1378 = trunc i32 %1377 to i8
  %1379 = and i8 %1378, 1
  store i8 %1379, i8* %31, align 1, !tbaa !2447
  %1380 = icmp eq i32 %1367, 0
  %1381 = zext i1 %1380 to i8
  store i8 %1381, i8* %34, align 1, !tbaa !2448
  %1382 = lshr i32 %1367, 31
  %1383 = trunc i32 %1382 to i8
  store i8 %1383, i8* %37, align 1, !tbaa !2449
  %1384 = lshr i32 %1361, 31
  %1385 = lshr i32 %1366, 31
  %1386 = xor i32 %1385, %1384
  %1387 = xor i32 %1382, %1384
  %1388 = add nuw nsw i32 %1387, %1386
  %1389 = icmp eq i32 %1388, 2
  %1390 = zext i1 %1389 to i8
  store i8 %1390, i8* %43, align 1, !tbaa !2450
  %.v53 = select i1 %1380, i64 56, i64 12
  %1391 = add i64 %1358, %.v53
  store i64 %1391, i64* %PC, align 8, !tbaa !2428
  br i1 %1380, label %block_401ce6, label %block_401cba

block_401ce6:                                     ; preds = %block_401c8e, %block_401cba
  %1392 = phi i64 [ %1356, %block_401c8e ], [ %.pre22, %block_401cba ]
  %1393 = phi i64 [ %1391, %block_401c8e ], [ %.pre21, %block_401cba ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1394 = add i64 %1392, -16
  %1395 = add i64 %1393, 8
  store i64 %1395, i64* %PC, align 8
  %1396 = inttoptr i64 %1394 to i32*
  %1397 = load i32, i32* %1396, align 4
  %1398 = zext i32 %1397 to i64
  store i64 %1398, i64* %RCX, align 8, !tbaa !2428
  %1399 = add i64 %1392, -44
  %1400 = add i64 %1393, 11
  store i64 %1400, i64* %PC, align 8
  %1401 = inttoptr i64 %1399 to i32*
  %1402 = load i32, i32* %1401, align 4
  %1403 = add i32 %1402, 1
  %1404 = zext i32 %1403 to i64
  store i64 %1404, i64* %RDX, align 8, !tbaa !2428
  %1405 = lshr i32 %1403, 31
  %1406 = sub i32 %1397, %1403
  %1407 = zext i32 %1406 to i64
  store i64 %1407, i64* %RCX, align 8, !tbaa !2428
  %1408 = icmp ult i32 %1397, %1403
  %1409 = zext i1 %1408 to i8
  store i8 %1409, i8* %19, align 1, !tbaa !2432
  %1410 = and i32 %1406, 255
  %1411 = tail call i32 @llvm.ctpop.i32(i32 %1410) #12
  %1412 = trunc i32 %1411 to i8
  %1413 = and i8 %1412, 1
  %1414 = xor i8 %1413, 1
  store i8 %1414, i8* %26, align 1, !tbaa !2446
  %1415 = xor i32 %1403, %1397
  %1416 = xor i32 %1415, %1406
  %1417 = lshr i32 %1416, 4
  %1418 = trunc i32 %1417 to i8
  %1419 = and i8 %1418, 1
  store i8 %1419, i8* %31, align 1, !tbaa !2447
  %1420 = icmp eq i32 %1406, 0
  %1421 = zext i1 %1420 to i8
  store i8 %1421, i8* %34, align 1, !tbaa !2448
  %1422 = lshr i32 %1406, 31
  %1423 = trunc i32 %1422 to i8
  store i8 %1423, i8* %37, align 1, !tbaa !2449
  %1424 = lshr i32 %1397, 31
  %1425 = xor i32 %1405, %1424
  %1426 = xor i32 %1422, %1424
  %1427 = add nuw nsw i32 %1426, %1425
  %1428 = icmp eq i32 %1427, 2
  %1429 = zext i1 %1428 to i8
  store i8 %1429, i8* %43, align 1, !tbaa !2450
  %1430 = add i64 %1392, -40
  %1431 = add i64 %1393, 21
  store i64 %1431, i64* %PC, align 8
  %1432 = inttoptr i64 %1430 to i32*
  %1433 = load i32, i32* %1432, align 4
  store i32 %1433, i32* %129, align 1, !tbaa !2451
  store float 0.000000e+00, float* %131, align 1, !tbaa !2451
  store float 0.000000e+00, float* %133, align 1, !tbaa !2451
  store float 0.000000e+00, float* %135, align 1, !tbaa !2451
  %1434 = add i64 %1392, -8
  %1435 = add i64 %1393, 25
  store i64 %1435, i64* %PC, align 8
  %1436 = inttoptr i64 %1434 to i64*
  %1437 = load i64, i64* %1436, align 8
  store i64 %1437, i64* %RSI, align 8, !tbaa !2428
  %1438 = load i64, i64* %RBP, align 8
  %1439 = add i64 %1438, -12
  %1440 = add i64 %1393, 28
  store i64 %1440, i64* %PC, align 8
  %1441 = inttoptr i64 %1439 to i32*
  %1442 = load i32, i32* %1441, align 4
  %1443 = zext i32 %1442 to i64
  store i64 %1443, i64* %RDX, align 8, !tbaa !2428
  %1444 = add i64 %1438, -44
  %1445 = add i64 %1393, 32
  store i64 %1445, i64* %PC, align 8
  %1446 = inttoptr i64 %1444 to i32*
  %1447 = load i32, i32* %1446, align 4
  %1448 = sext i32 %1442 to i64
  %1449 = sext i32 %1447 to i64
  %1450 = mul nsw i64 %1449, %1448
  %1451 = trunc i64 %1450 to i32
  %1452 = and i64 %1450, 4294967295
  store i64 %1452, i64* %RDX, align 8, !tbaa !2428
  %1453 = shl i64 %1450, 32
  %1454 = ashr exact i64 %1453, 32
  %1455 = icmp ne i64 %1454, %1450
  %1456 = zext i1 %1455 to i8
  store i8 %1456, i8* %19, align 1, !tbaa !2432
  %1457 = and i32 %1451, 255
  %1458 = tail call i32 @llvm.ctpop.i32(i32 %1457) #12
  %1459 = trunc i32 %1458 to i8
  %1460 = and i8 %1459, 1
  %1461 = xor i8 %1460, 1
  store i8 %1461, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1462 = lshr i32 %1451, 31
  %1463 = trunc i32 %1462 to i8
  store i8 %1463, i8* %37, align 1, !tbaa !2449
  store i8 %1456, i8* %43, align 1, !tbaa !2450
  %1464 = add i64 %1393, 35
  store i64 %1464, i64* %PC, align 8
  %1465 = trunc i64 %1450 to i32
  %1466 = load i32, i32* %1446, align 4
  %1467 = add i32 %1466, %1465
  %1468 = add i32 %1467, 1
  %1469 = zext i32 %1468 to i64
  store i64 %1469, i64* %RDX, align 8, !tbaa !2428
  %1470 = sext i32 %1468 to i64
  %1471 = shl nsw i64 %1470, 2
  store i64 %1471, i64* %RDI, align 8, !tbaa !2428
  %1472 = load i64, i64* %RSI, align 8
  %1473 = add i64 %1471, %1472
  store i64 %1473, i64* %RSI, align 8, !tbaa !2428
  %1474 = icmp ult i64 %1473, %1472
  %1475 = icmp ult i64 %1473, %1471
  %1476 = or i1 %1474, %1475
  %1477 = zext i1 %1476 to i8
  store i8 %1477, i8* %19, align 1, !tbaa !2432
  %1478 = trunc i64 %1473 to i32
  %1479 = and i32 %1478, 255
  %1480 = tail call i32 @llvm.ctpop.i32(i32 %1479) #12
  %1481 = trunc i32 %1480 to i8
  %1482 = and i8 %1481, 1
  %1483 = xor i8 %1482, 1
  store i8 %1483, i8* %26, align 1, !tbaa !2446
  %1484 = xor i64 %1471, %1472
  %1485 = xor i64 %1484, %1473
  %1486 = lshr i64 %1485, 4
  %1487 = trunc i64 %1486 to i8
  %1488 = and i8 %1487, 1
  store i8 %1488, i8* %31, align 1, !tbaa !2447
  %1489 = icmp eq i64 %1473, 0
  %1490 = zext i1 %1489 to i8
  store i8 %1490, i8* %34, align 1, !tbaa !2448
  %1491 = lshr i64 %1473, 63
  %1492 = trunc i64 %1491 to i8
  store i8 %1492, i8* %37, align 1, !tbaa !2449
  %1493 = lshr i64 %1472, 63
  %1494 = lshr i64 %1470, 61
  %1495 = and i64 %1494, 1
  %1496 = xor i64 %1491, %1493
  %1497 = xor i64 %1491, %1495
  %1498 = add nuw nsw i64 %1496, %1497
  %1499 = icmp eq i64 %1498, 2
  %1500 = zext i1 %1499 to i8
  store i8 %1500, i8* %43, align 1, !tbaa !2450
  %1501 = load i64, i64* %RBP, align 8
  %1502 = add i64 %1501, -32
  %1503 = add i64 %1393, 52
  store i64 %1503, i64* %PC, align 8
  %1504 = inttoptr i64 %1502 to i64*
  %1505 = load i64, i64* %1504, align 8
  store i64 %1505, i64* %RDI, align 8, !tbaa !2428
  %1506 = add i64 %1501, -44
  %1507 = add i64 %1393, 55
  store i64 %1507, i64* %PC, align 8
  %1508 = inttoptr i64 %1506 to i32*
  %1509 = load i32, i32* %1508, align 4
  %1510 = add i32 %1509, 1
  %1511 = sext i32 %1510 to i64
  %1512 = shl nsw i64 %1511, 2
  store i64 %1512, i64* %R8, align 8, !tbaa !2428
  %1513 = add i64 %1512, %1505
  %1514 = icmp ult i64 %1513, %1505
  %1515 = icmp ult i64 %1513, %1512
  %1516 = or i1 %1514, %1515
  %1517 = zext i1 %1516 to i8
  store i8 %1517, i8* %19, align 1, !tbaa !2432
  %1518 = trunc i64 %1513 to i32
  %1519 = and i32 %1518, 255
  %1520 = tail call i32 @llvm.ctpop.i32(i32 %1519) #12
  %1521 = trunc i32 %1520 to i8
  %1522 = and i8 %1521, 1
  %1523 = xor i8 %1522, 1
  store i8 %1523, i8* %26, align 1, !tbaa !2446
  %1524 = xor i64 %1512, %1505
  %1525 = xor i64 %1524, %1513
  %1526 = lshr i64 %1525, 4
  %1527 = trunc i64 %1526 to i8
  %1528 = and i8 %1527, 1
  store i8 %1528, i8* %31, align 1, !tbaa !2447
  %1529 = icmp eq i64 %1513, 0
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %34, align 1, !tbaa !2448
  %1531 = lshr i64 %1513, 63
  %1532 = trunc i64 %1531 to i8
  store i8 %1532, i8* %37, align 1, !tbaa !2449
  %1533 = lshr i64 %1505, 63
  %1534 = lshr i64 %1511, 61
  %1535 = and i64 %1534, 1
  %1536 = xor i64 %1531, %1533
  %1537 = xor i64 %1531, %1535
  %1538 = add nuw nsw i64 %1536, %1537
  %1539 = icmp eq i64 %1538, 2
  %1540 = zext i1 %1539 to i8
  store i8 %1540, i8* %43, align 1, !tbaa !2450
  %1541 = load i64, i64* %RBP, align 8
  %1542 = add i64 %1541, -64
  %1543 = add i64 %1393, 72
  store i64 %1543, i64* %PC, align 8
  %1544 = inttoptr i64 %1542 to i64*
  store i64 %1513, i64* %1544, align 8
  %1545 = load i32, i32* %ECX, align 4
  %1546 = zext i32 %1545 to i64
  %1547 = load i64, i64* %PC, align 8
  store i64 %1546, i64* %RDI, align 8, !tbaa !2428
  %1548 = load i32, i32* %EAX, align 4
  %1549 = zext i32 %1548 to i64
  store i64 %1549, i64* %RDX, align 8, !tbaa !2428
  %1550 = load i64, i64* %RBP, align 8
  %1551 = add i64 %1550, -64
  %1552 = add i64 %1547, 8
  store i64 %1552, i64* %PC, align 8
  %1553 = inttoptr i64 %1551 to i64*
  %1554 = load i64, i64* %1553, align 8
  store i64 %1554, i64* %RCX, align 8, !tbaa !2428
  store i64 %1549, i64* %R8, align 8, !tbaa !2428
  %1555 = add i64 %1547, 2898
  %1556 = add i64 %1547, 16
  %1557 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1558 = add i64 %1557, -8
  %1559 = inttoptr i64 %1558 to i64*
  store i64 %1556, i64* %1559, align 8
  store i64 %1558, i64* %RSP, align 8, !tbaa !2428
  store i64 %1555, i64* %PC, align 8, !tbaa !2428
  %1560 = tail call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* nonnull %0, i64 %1555, %struct.Memory* %2)
  %1561 = load i64, i64* %RBP, align 8
  %1562 = add i64 %1561, -44
  %1563 = load i64, i64* %PC, align 8
  %1564 = add i64 %1563, 3
  store i64 %1564, i64* %PC, align 8
  %1565 = inttoptr i64 %1562 to i32*
  %1566 = load i32, i32* %1565, align 4
  %1567 = add i32 %1566, 1
  %1568 = zext i32 %1567 to i64
  store i64 %1568, i64* %RAX, align 8, !tbaa !2428
  %1569 = icmp eq i32 %1566, -1
  %1570 = icmp eq i32 %1567, 0
  %1571 = or i1 %1569, %1570
  %1572 = zext i1 %1571 to i8
  store i8 %1572, i8* %19, align 1, !tbaa !2432
  %1573 = and i32 %1567, 255
  %1574 = tail call i32 @llvm.ctpop.i32(i32 %1573) #12
  %1575 = trunc i32 %1574 to i8
  %1576 = and i8 %1575, 1
  %1577 = xor i8 %1576, 1
  store i8 %1577, i8* %26, align 1, !tbaa !2446
  %1578 = xor i32 %1567, %1566
  %1579 = lshr i32 %1578, 4
  %1580 = trunc i32 %1579 to i8
  %1581 = and i8 %1580, 1
  store i8 %1581, i8* %31, align 1, !tbaa !2447
  %1582 = zext i1 %1570 to i8
  store i8 %1582, i8* %34, align 1, !tbaa !2448
  %1583 = lshr i32 %1567, 31
  %1584 = trunc i32 %1583 to i8
  store i8 %1584, i8* %37, align 1, !tbaa !2449
  %1585 = lshr i32 %1566, 31
  %1586 = xor i32 %1583, %1585
  %1587 = add nuw nsw i32 %1586, %1583
  %1588 = icmp eq i32 %1587, 2
  %1589 = zext i1 %1588 to i8
  store i8 %1589, i8* %43, align 1, !tbaa !2450
  %1590 = add i64 %1563, 9
  store i64 %1590, i64* %PC, align 8
  store i32 %1567, i32* %1565, align 4
  %1591 = load i64, i64* %PC, align 8
  %1592 = add i64 %1591, -197
  store i64 %1592, i64* %PC, align 8, !tbaa !2428
  br label %block_401c82

block_401e08:                                     ; preds = %block_401c40
  %1593 = add i64 %109, -44
  %1594 = add i64 %124, 7
  store i64 %1594, i64* %PC, align 8
  %1595 = inttoptr i64 %1593 to i32*
  store i32 0, i32* %1595, align 4
  %1596 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %1597 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %1598 = bitcast [32 x %union.VectorReg]* %8 to float*
  %1599 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %1600 = getelementptr inbounds i8, i8* %1597, i64 4
  %1601 = bitcast i8* %1600 to float*
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1603 = bitcast i64* %1602 to float*
  %1604 = getelementptr inbounds i8, i8* %1597, i64 12
  %1605 = bitcast i8* %1604 to float*
  %1606 = bitcast i64* %1602 to <2 x i32>*
  %1607 = bitcast i8* %1600 to i32*
  %1608 = bitcast i64* %1602 to i32*
  %1609 = bitcast i8* %1604 to i32*
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_401e0f

block_401e03:                                     ; preds = %block_401d58
  %1610 = add i64 %515, 436
  br label %block_401fb7

block_401c82:                                     ; preds = %block_401ce6, %block_401c7b
  %1611 = phi i64 [ %1592, %block_401ce6 ], [ %.pre, %block_401c7b ]
  %1612 = load i64, i64* %RBP, align 8
  %1613 = add i64 %1612, -44
  %1614 = add i64 %1611, 3
  store i64 %1614, i64* %PC, align 8
  %1615 = inttoptr i64 %1613 to i32*
  %1616 = load i32, i32* %1615, align 4
  %1617 = zext i32 %1616 to i64
  store i64 %1617, i64* %RAX, align 8, !tbaa !2428
  %1618 = add i64 %1612, -56
  %1619 = add i64 %1611, 6
  store i64 %1619, i64* %PC, align 8
  %1620 = inttoptr i64 %1618 to i32*
  %1621 = load i32, i32* %1620, align 4
  %1622 = sub i32 %1616, %1621
  %1623 = icmp ult i32 %1616, %1621
  %1624 = zext i1 %1623 to i8
  store i8 %1624, i8* %19, align 1, !tbaa !2432
  %1625 = and i32 %1622, 255
  %1626 = tail call i32 @llvm.ctpop.i32(i32 %1625) #12
  %1627 = trunc i32 %1626 to i8
  %1628 = and i8 %1627, 1
  %1629 = xor i8 %1628, 1
  store i8 %1629, i8* %26, align 1, !tbaa !2446
  %1630 = xor i32 %1621, %1616
  %1631 = xor i32 %1630, %1622
  %1632 = lshr i32 %1631, 4
  %1633 = trunc i32 %1632 to i8
  %1634 = and i8 %1633, 1
  store i8 %1634, i8* %31, align 1, !tbaa !2447
  %1635 = icmp eq i32 %1622, 0
  %1636 = zext i1 %1635 to i8
  store i8 %1636, i8* %34, align 1, !tbaa !2448
  %1637 = lshr i32 %1622, 31
  %1638 = trunc i32 %1637 to i8
  store i8 %1638, i8* %37, align 1, !tbaa !2449
  %1639 = lshr i32 %1616, 31
  %1640 = lshr i32 %1621, 31
  %1641 = xor i32 %1640, %1639
  %1642 = xor i32 %1637, %1639
  %1643 = add nuw nsw i32 %1642, %1641
  %1644 = icmp eq i32 %1643, 2
  %1645 = zext i1 %1644 to i8
  store i8 %1645, i8* %43, align 1, !tbaa !2450
  %1646 = icmp ne i8 %1638, 0
  %1647 = xor i1 %1646, %1644
  %.v51 = select i1 %1647, i64 12, i64 202
  %1648 = add i64 %1611, %.v51
  store i64 %1648, i64* %PC, align 8, !tbaa !2428
  br i1 %1647, label %block_401c8e, label %block_401d4c
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4027c0_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_4027c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = bitcast %union.VectorReg* %4 to i8*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast %union.VectorReg* %4 to i32*
  %16 = getelementptr inbounds i8, i8* %13, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = bitcast i64* %14 to i32*
  %19 = getelementptr inbounds i8, i8* %13, i64 12
  %20 = bitcast i8* %19 to i32*
  %21 = bitcast %union.VectorReg* %4 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %21, align 1, !tbaa !2453
  %22 = bitcast %union.VectorReg* %5 to i8*
  %23 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 16) to i32*), align 16
  %24 = bitcast %union.VectorReg* %5 to i32*
  store i32 %23, i32* %24, align 1, !tbaa !2451
  %25 = getelementptr inbounds i8, i8* %22, i64 4
  %26 = bitcast i8* %25 to float*
  store float 0.000000e+00, float* %26, align 1, !tbaa !2451
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %28 = bitcast i64* %27 to float*
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %29 = getelementptr inbounds i8, i8* %22, i64 12
  %30 = bitcast i8* %29 to float*
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  %31 = add i64 %9, -12
  %32 = add i64 %12, 19
  store i64 %32, i64* %PC, align 8
  %33 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 1
  %35 = extractelement <2 x float> %34, i32 0
  %36 = inttoptr i64 %31 to float*
  store float %35, float* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -8
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 5
  store i64 %40, i64* %PC, align 8
  %41 = bitcast %union.VectorReg* %5 to <2 x float>*
  %42 = load <2 x float>, <2 x float>* %41, align 1
  %43 = extractelement <2 x float> %42, i32 0
  %44 = inttoptr i64 %38 to float*
  store float %43, float* %44, align 4
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -20
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 5
  store i64 %48, i64* %PC, align 8
  %49 = bitcast %union.VectorReg* %4 to <2 x float>*
  %50 = load <2 x float>, <2 x float>* %49, align 1
  %51 = extractelement <2 x float> %50, i32 0
  %52 = inttoptr i64 %46 to float*
  store float %51, float* %52, align 4
  %53 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %56 = bitcast [32 x %union.VectorReg]* %3 to i32*
  %57 = getelementptr inbounds i8, i8* %53, i64 4
  %58 = bitcast i8* %57 to i32*
  %59 = bitcast i64* %54 to i32*
  %60 = getelementptr inbounds i8, i8* %53, i64 12
  %61 = bitcast i8* %60 to i32*
  %62 = bitcast %union.VectorReg* %4 to double*
  %63 = bitcast [32 x %union.VectorReg]* %3 to double*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %66 = bitcast i64* %54 to double*
  %67 = bitcast i64* %14 to <2 x i32>*
  %68 = bitcast %union.VectorReg* %4 to float*
  %69 = bitcast i8* %16 to float*
  %70 = bitcast i64* %14 to float*
  %71 = bitcast i8* %19 to float*
  %72 = bitcast [32 x %union.VectorReg]* %3 to float*
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre = load i64, i64* %PC, align 8
  %77 = bitcast [32 x %union.VectorReg]* %3 to <4 x i32>*
  %78 = bitcast i64* %14 to <2 x i32>*
  br label %block_4027de

block_4027de:                                     ; preds = %block_4027f6, %block_4027c0
  %79 = phi i64 [ %.pre, %block_4027c0 ], [ %206, %block_4027f6 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4027c0 ], [ %111, %block_4027f6 ]
  store <4 x i32> zeroinitializer, <4 x i32>* %77, align 1, !tbaa !2453
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -20
  %82 = add i64 %79, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to float*
  %84 = load float, float* %83, align 4
  %85 = fpext float %84 to double
  store double %85, double* %62, align 1, !tbaa !2454
  %86 = add i64 %79, 12
  store i64 %86, i64* %PC, align 8
  %87 = load double, double* %63, align 1
  %88 = fcmp uno double %85, %87
  br i1 %88, label %89, label %99

; <label>:89:                                     ; preds = %block_4027de
  %90 = fadd double %85, %87
  %91 = bitcast double %90 to i64
  %92 = and i64 %91, 9221120237041090560
  %93 = icmp eq i64 %92, 9218868437227405312
  %94 = and i64 %91, 2251799813685247
  %95 = icmp ne i64 %94, 0
  %96 = and i1 %93, %95
  br i1 %96, label %97, label %105

; <label>:97:                                     ; preds = %89
  %98 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %86, %struct.Memory* %MEMORY.0) #13
  %.pre11 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:99:                                     ; preds = %block_4027de
  %100 = fcmp ogt double %85, %87
  br i1 %100, label %105, label %101

; <label>:101:                                    ; preds = %99
  %102 = fcmp olt double %85, %87
  br i1 %102, label %105, label %103

; <label>:103:                                    ; preds = %101
  %104 = fcmp oeq double %85, %87
  br i1 %104, label %105, label %109

; <label>:105:                                    ; preds = %103, %101, %99, %89
  %106 = phi i8 [ 0, %99 ], [ 0, %101 ], [ 1, %103 ], [ 1, %89 ]
  %107 = phi i8 [ 0, %99 ], [ 0, %101 ], [ 0, %103 ], [ 1, %89 ]
  %108 = phi i8 [ 0, %99 ], [ 1, %101 ], [ 0, %103 ], [ 1, %89 ]
  store i8 %106, i8* %64, align 1, !tbaa !2456
  store i8 %107, i8* %65, align 1, !tbaa !2456
  store i8 %108, i8* %73, align 1, !tbaa !2456
  br label %109

; <label>:109:                                    ; preds = %105, %103
  store i8 0, i8* %74, align 1, !tbaa !2456
  store i8 0, i8* %75, align 1, !tbaa !2456
  store i8 0, i8* %76, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %109, %97
  %110 = phi i64 [ %.pre11, %97 ], [ %86, %109 ]
  %111 = phi %struct.Memory* [ %98, %97 ], [ %MEMORY.0, %109 ]
  %112 = add i64 %110, 92
  %113 = add i64 %110, 6
  %114 = load i8, i8* %64, align 1, !tbaa !2448
  %115 = icmp eq i8 %114, 0
  %116 = select i1 %115, i64 %112, i64 %113
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br i1 %115, label %block_402846, label %block_4027f0

block_4027f6:                                     ; preds = %block_4027f0
  %117 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 80) to i64*), align 16
  store i64 %117, i64* %55, align 1, !tbaa !2454
  store double 0.000000e+00, double* %66, align 1, !tbaa !2454
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -8
  %120 = add i64 %209, 13
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to float*
  %122 = load float, float* %121, align 4
  %123 = fpext float %122 to double
  %124 = load <2 x i32>, <2 x i32>* %78, align 1
  %125 = bitcast i64 %117 to double
  %126 = fsub double %123, %125
  %.cast = bitcast double %126 to <2 x i32>
  %127 = fptrunc double %126 to float
  store float %127, float* %68, align 1, !tbaa !2451
  %128 = extractelement <2 x i32> %.cast, i32 1
  store i32 %128, i32* %17, align 1, !tbaa !2451
  %129 = extractelement <2 x i32> %124, i32 0
  store i32 %129, i32* %18, align 1, !tbaa !2451
  %130 = extractelement <2 x i32> %124, i32 1
  store i32 %130, i32* %20, align 1, !tbaa !2451
  %131 = add i64 %118, -12
  %132 = add i64 %209, 26
  store i64 %132, i64* %PC, align 8
  %133 = load <2 x float>, <2 x float>* %49, align 1
  %134 = extractelement <2 x float> %133, i32 0
  %135 = inttoptr i64 %131 to float*
  store float %134, float* %135, align 4
  %136 = load i64, i64* %RBP, align 8
  %137 = add i64 %136, -12
  %138 = load i64, i64* %PC, align 8
  %139 = add i64 %138, 5
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %137 to i32*
  %141 = load i32, i32* %140, align 4
  store i32 %141, i32* %15, align 1, !tbaa !2451
  store float 0.000000e+00, float* %69, align 1, !tbaa !2451
  store float 0.000000e+00, float* %70, align 1, !tbaa !2451
  store float 0.000000e+00, float* %71, align 1, !tbaa !2451
  %142 = add i64 %138, 10
  store i64 %142, i64* %PC, align 8
  %143 = load <2 x float>, <2 x float>* %49, align 1
  %144 = load <2 x i32>, <2 x i32>* %67, align 1
  %145 = inttoptr i64 %137 to float*
  %146 = load float, float* %145, align 4
  %147 = extractelement <2 x float> %143, i32 0
  %148 = fadd float %147, %146
  store float %148, float* %68, align 1, !tbaa !2451
  %149 = bitcast <2 x float> %143 to <2 x i32>
  %150 = extractelement <2 x i32> %149, i32 1
  store i32 %150, i32* %17, align 1, !tbaa !2451
  %151 = extractelement <2 x i32> %144, i32 0
  store i32 %151, i32* %18, align 1, !tbaa !2451
  %152 = extractelement <2 x i32> %144, i32 1
  store i32 %152, i32* %20, align 1, !tbaa !2451
  %153 = add i64 %138, 15
  store i64 %153, i64* %PC, align 8
  %154 = load <2 x float>, <2 x float>* %49, align 1
  %155 = load <2 x i32>, <2 x i32>* %67, align 1
  %156 = load float, float* %145, align 4
  %157 = extractelement <2 x float> %154, i32 0
  %158 = fadd float %157, %156
  store float %158, float* %68, align 1, !tbaa !2451
  %159 = bitcast <2 x float> %154 to <2 x i32>
  %160 = extractelement <2 x i32> %159, i32 1
  store i32 %160, i32* %17, align 1, !tbaa !2451
  %161 = extractelement <2 x i32> %155, i32 0
  store i32 %161, i32* %18, align 1, !tbaa !2451
  %162 = extractelement <2 x i32> %155, i32 1
  store i32 %162, i32* %20, align 1, !tbaa !2451
  %163 = add i64 %136, -16
  %164 = add i64 %138, 20
  store i64 %164, i64* %PC, align 8
  %165 = load <2 x float>, <2 x float>* %49, align 1
  %166 = extractelement <2 x float> %165, i32 0
  %167 = inttoptr i64 %163 to float*
  store float %166, float* %167, align 4
  %168 = load i64, i64* %RBP, align 8
  %169 = add i64 %168, -16
  %170 = load i64, i64* %PC, align 8
  %171 = add i64 %170, 5
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %169 to float*
  %173 = load float, float* %172, align 4
  %174 = fpext float %173 to double
  %175 = load i64, i64* %14, align 1
  %176 = load double, double* %63, align 1
  %177 = fsub double %174, %176
  %178 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %179 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %180 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %181 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %178, i32* %56, align 1, !tbaa !2451
  store i32 %179, i32* %58, align 1, !tbaa !2451
  store i32 %180, i32* %59, align 1, !tbaa !2451
  store i32 %181, i32* %61, align 1, !tbaa !2451
  %182 = bitcast double %177 to i64
  %183 = load i64, i64* %55, align 1
  %184 = load i64, i64* %54, align 1
  %185 = and i64 %183, %182
  %186 = and i64 %184, %175
  %187 = trunc i64 %185 to i32
  %188 = lshr i64 %185, 32
  %189 = trunc i64 %188 to i32
  store i32 %187, i32* %15, align 1, !tbaa !2453
  store i32 %189, i32* %17, align 1, !tbaa !2453
  %190 = trunc i64 %186 to i32
  store i32 %190, i32* %18, align 1, !tbaa !2453
  %191 = lshr i64 %186, 32
  %192 = trunc i64 %191 to i32
  store i32 %192, i32* %20, align 1, !tbaa !2453
  %193 = bitcast i64 %183 to <2 x i32>
  %194 = bitcast i64 %184 to <2 x i32>
  %195 = load double, double* %62, align 1
  %196 = fptrunc double %195 to float
  store float %196, float* %72, align 1, !tbaa !2451
  %197 = extractelement <2 x i32> %193, i32 1
  store i32 %197, i32* %58, align 1, !tbaa !2451
  %198 = extractelement <2 x i32> %194, i32 0
  store i32 %198, i32* %59, align 1, !tbaa !2451
  %199 = extractelement <2 x i32> %194, i32 1
  store i32 %199, i32* %61, align 1, !tbaa !2451
  %200 = add i64 %168, -20
  %201 = add i64 %170, 29
  store i64 %201, i64* %PC, align 8
  %202 = load <2 x float>, <2 x float>* %33, align 1
  %203 = extractelement <2 x float> %202, i32 0
  %204 = inttoptr i64 %200 to float*
  store float %203, float* %204, align 4
  %205 = load i64, i64* %PC, align 8
  %206 = add i64 %205, -99
  store i64 %206, i64* %PC, align 8, !tbaa !2428
  br label %block_4027de

block_4027f0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %207 = load i8, i8* %65, align 1, !tbaa !2446
  %208 = icmp ne i8 %207, 0
  %.v = select i1 %208, i64 86, i64 6
  %209 = add i64 %116, %.v
  store i64 %209, i64* %PC, align 8, !tbaa !2428
  %210 = icmp eq i8 %207, 1
  br i1 %210, label %block_402846, label %block_4027f6

block_402846:                                     ; preds = %block_4027f0, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %211 = phi i64 [ %209, %block_4027f0 ], [ %112, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -20
  %214 = add i64 %211, 5
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to float*
  %216 = load float, float* %215, align 4
  %217 = fpext float %216 to double
  store double %217, double* %63, align 1, !tbaa !2454
  %218 = add i64 %212, -4
  %219 = add i64 %211, 10
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to float*
  %221 = load float, float* %220, align 4
  %222 = fpext float %221 to double
  %223 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %224 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %225 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %226 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %223, i32* %24, align 1, !tbaa !2451
  %227 = bitcast i8* %25 to i32*
  store i32 %224, i32* %227, align 1, !tbaa !2451
  %228 = bitcast i64* %27 to i32*
  store i32 %225, i32* %228, align 1, !tbaa !2451
  %229 = bitcast i8* %29 to i32*
  store i32 %226, i32* %229, align 1, !tbaa !2451
  %230 = bitcast double %222 to i64
  %231 = load i64, i64* %14, align 1
  %232 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  %233 = load i64, i64* %232, align 1
  %234 = load i64, i64* %27, align 1
  %235 = and i64 %233, %230
  %236 = and i64 %234, %231
  %237 = trunc i64 %235 to i32
  %238 = lshr i64 %235, 32
  %239 = trunc i64 %238 to i32
  store i32 %237, i32* %15, align 1, !tbaa !2453
  store i32 %239, i32* %17, align 1, !tbaa !2453
  %240 = trunc i64 %236 to i32
  store i32 %240, i32* %18, align 1, !tbaa !2453
  %241 = lshr i64 %236, 32
  %242 = trunc i64 %241 to i32
  store i32 %242, i32* %20, align 1, !tbaa !2453
  %243 = bitcast i64* %54 to <2 x i32>*
  %244 = load <2 x i32>, <2 x i32>* %243, align 1
  %245 = load double, double* %62, align 1
  %246 = fmul double %217, %245
  %.cast3 = bitcast double %246 to <2 x i32>
  %247 = fptrunc double %246 to float
  store float %247, float* %72, align 1, !tbaa !2451
  %248 = extractelement <2 x i32> %.cast3, i32 1
  store i32 %248, i32* %58, align 1, !tbaa !2451
  %249 = extractelement <2 x i32> %244, i32 0
  store i32 %249, i32* %59, align 1, !tbaa !2451
  %250 = extractelement <2 x i32> %244, i32 1
  store i32 %250, i32* %61, align 1, !tbaa !2451
  %251 = add i64 %211, 30
  store i64 %251, i64* %PC, align 8
  %252 = load i64, i64* %8, align 8, !tbaa !2428
  %253 = add i64 %252, 8
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254, align 8
  store i64 %255, i64* %RBP, align 8, !tbaa !2428
  store i64 %253, i64* %8, align 8, !tbaa !2428
  %256 = add i64 %211, 31
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %253 to i64*
  %258 = load i64, i64* %257, align 8
  store i64 %258, i64* %PC, align 8, !tbaa !2428
  %259 = add i64 %252, 16
  store i64 %259, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %111
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400570_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_400640_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400640:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -1016
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %23 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %24 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 8) to i32*), align 8
  %25 = bitcast [32 x %union.VectorReg]* %6 to float*
  %26 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !2451
  %27 = getelementptr inbounds i8, i8* %23, i64 4
  %28 = bitcast i8* %27 to float*
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to float*
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  %31 = getelementptr inbounds i8, i8* %23, i64 12
  %32 = bitcast i8* %31 to float*
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i64 720, i64* %R8, align 8, !tbaa !2428
  %33 = add i64 %12, -840
  store i64 %33, i64* %R9, align 8, !tbaa !2428
  %34 = add i64 %12, -12
  %35 = add i64 %15, 72
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i32*
  store i32 0, i32* %36, align 4
  %37 = load i64, i64* %R9, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -840
  %41 = load i64, i64* %RSI, align 8
  %42 = add i64 %38, 10
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i32, i32* %EDX, align 4
  %45 = zext i32 %44 to i64
  %46 = load i64, i64* %PC, align 8
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %47 = load i64, i64* %R8, align 8
  store i64 %47, i64* %RDX, align 8, !tbaa !2428
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -848
  %50 = load i64, i64* %RCX, align 8
  %51 = add i64 %46, 12
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -852
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 8
  store i64 %56, i64* %PC, align 8
  %57 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %58 = load <2 x float>, <2 x float>* %57, align 1
  %59 = extractelement <2 x float> %58, i32 0
  %60 = inttoptr i64 %54 to float*
  store float %59, float* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -864
  %63 = load i64, i64* %RAX, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, -462
  %69 = add i64 %67, 5
  %70 = load i64, i64* %RSP, align 8, !tbaa !2428
  %71 = add i64 %70, -8
  %72 = inttoptr i64 %71 to i64*
  store i64 %69, i64* %72, align 8
  store i64 %71, i64* %RSP, align 8, !tbaa !2428
  store i64 %68, i64* %PC, align 8, !tbaa !2428
  %73 = tail call fastcc %struct.Memory* @ext_653148_memset(%struct.State* nonnull %0, %struct.Memory* %2)
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -832
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 7
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %75 to i8*
  store i8 32, i8* %78, align 1
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -848
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 7
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = add i64 %79, -96
  %86 = add i64 %81, 11
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  store i64 %84, i64* %87, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -864
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 7
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = add i64 %88, -104
  %95 = add i64 %90, 11
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %93, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %98 = load i64, i64* %RBP, align 8
  %99 = add i64 %98, -852
  %100 = add i64 %97, 30
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i32*
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %103 = add i64 %98, -8
  %104 = add i64 %97, 35
  store i64 %104, i64* %PC, align 8
  %105 = load <2 x float>, <2 x float>* %57, align 1
  %106 = extractelement <2 x float> %105, i32 0
  %107 = inttoptr i64 %103 to float*
  store float %106, float* %107, align 4
  %108 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %109 = load i64, i64* @stderr, align 64
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -840
  %112 = add i64 %108, 26
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %115 = add i64 %108, -515
  %116 = add i64 %108, 33
  %117 = load i64, i64* %RSP, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %116, i64* %119, align 8
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %120 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %73)
  %121 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %122 = load i64, i64* @stderr, align 64
  store i64 %122, i64* %RDI, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP, align 8
  %124 = add i64 %123, -868
  %125 = load i32, i32* %EAX, align 4
  %126 = add i64 %121, 24
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %127, align 4
  %128 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %129 = add i64 %128, -572
  %130 = add i64 %128, 7
  %131 = load i64, i64* %RSP, align 8, !tbaa !2428
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %130, i64* %133, align 8
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  %134 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %120)
  %135 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %136 = load i64, i64* @stderr, align 64
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -872
  %139 = load i32, i32* %EAX, align 4
  %140 = add i64 %135, 24
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %138 to i32*
  store i32 %139, i32* %141, align 4
  %142 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %143 = add i64 %142, -603
  %144 = add i64 %142, 7
  %145 = load i64, i64* %RSP, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %144, i64* %147, align 8
  store i64 %146, i64* %RSP, align 8, !tbaa !2428
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  %148 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %134)
  %149 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %150 = load i64, i64* @stderr, align 64
  store i64 %150, i64* %RDI, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -96
  %153 = add i64 %149, 22
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RDX, align 8, !tbaa !2428
  %156 = add i64 %151, -876
  %157 = load i32, i32* %EAX, align 4
  %158 = add i64 %149, 28
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i32*
  store i32 %157, i32* %159, align 4
  %160 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %161 = add i64 %160, -638
  %162 = add i64 %160, 7
  %163 = load i64, i64* %RSP, align 8, !tbaa !2428
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165, align 8
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %166 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %148)
  %167 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %168 = load i64, i64* @stderr, align 64
  store i64 %168, i64* %RDI, align 8, !tbaa !2428
  %169 = load i64, i64* %RBP, align 8
  %170 = add i64 %169, -104
  %171 = add i64 %167, 22
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RDX, align 8, !tbaa !2428
  %174 = add i64 %169, -880
  %175 = load i32, i32* %EAX, align 4
  %176 = add i64 %167, 28
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i32*
  store i32 %175, i32* %177, align 4
  %178 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %179 = add i64 %178, -673
  %180 = add i64 %178, 7
  %181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183, align 8
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %184 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %166)
  %185 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -20
  store i64 %187, i64* %R8, align 8, !tbaa !2428
  %188 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to i64*), align 8
  %189 = bitcast [32 x %union.VectorReg]* %6 to double*
  %190 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %188, i64* %190, align 1, !tbaa !2454
  %191 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %191, align 1, !tbaa !2454
  %192 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 32) to double*), align 16
  %193 = bitcast %union.VectorReg* %7 to double*
  %194 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %196 = bitcast i64* %195 to double*
  store double 0.000000e+00, double* %196, align 1, !tbaa !2454
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %198 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %199 = sext i32 %198 to i64
  %200 = mul nsw i64 %199, %199
  %201 = trunc i64 %200 to i32
  %202 = and i64 %200, 4294967295
  %203 = shl i64 %200, 32
  %204 = ashr exact i64 %203, 32
  %205 = icmp ne i64 %204, %200
  %206 = zext i1 %205 to i8
  %207 = and i32 %201, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207) #12
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  %212 = lshr i32 %201, 31
  %213 = trunc i32 %212 to i8
  %214 = trunc i64 %200 to i32
  %sext = shl i64 %200, 32
  %215 = ashr exact i64 %sext, 32
  %216 = mul nsw i64 %199, %215
  %217 = trunc i64 %216 to i32
  %218 = sitofp i32 %217 to double
  %219 = bitcast %union.VectorReg* %8 to double*
  store double %218, double* %219, align 1, !tbaa !2454
  %220 = bitcast %union.VectorReg* %9 to i8*
  %221 = bitcast i64 %188 to <2 x i32>
  %222 = bitcast i64* %29 to <2 x i32>*
  %223 = extractelement <2 x i32> %221, i32 0
  %224 = bitcast %union.VectorReg* %9 to i32*
  store i32 %223, i32* %224, align 1, !tbaa !2451
  %225 = extractelement <2 x i32> %221, i32 1
  %226 = getelementptr inbounds i8, i8* %220, i64 4
  %227 = bitcast i8* %226 to i32*
  store i32 %225, i32* %227, align 1, !tbaa !2451
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %229 = bitcast i64* %228 to i32*
  store i32 0, i32* %229, align 1, !tbaa !2451
  %230 = getelementptr inbounds i8, i8* %220, i64 12
  %231 = bitcast i8* %230 to i32*
  store i32 0, i32* %231, align 1, !tbaa !2451
  %232 = bitcast %union.VectorReg* %9 to double*
  %233 = load double, double* %232, align 1
  %234 = fmul double %233, %218
  %235 = fdiv double %234, %192
  store i64 %202, i64* %197, align 8, !tbaa !2428
  store i8 %206, i8* %17, align 1, !tbaa !2432
  store i8 %211, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %20, align 1, !tbaa !2448
  store i8 %213, i8* %21, align 1, !tbaa !2449
  store i8 %206, i8* %22, align 1, !tbaa !2450
  %236 = sitofp i32 %214 to double
  store double %236, double* %193, align 1, !tbaa !2454
  %237 = load double, double* %189, align 1
  %238 = bitcast i64* %29 to <2 x i32>*
  %239 = load <2 x i32>, <2 x i32>* %238, align 1
  %240 = fmul double %236, %237
  %241 = fadd double %240, %235
  store double %241, double* %232, align 1, !tbaa !2454
  %242 = bitcast double %240 to <2 x i32>
  %243 = fptrunc double %241 to float
  store float %243, float* %25, align 1, !tbaa !2451
  %244 = extractelement <2 x i32> %242, i32 1
  %245 = bitcast i8* %27 to i32*
  store i32 %244, i32* %245, align 1, !tbaa !2451
  %246 = extractelement <2 x i32> %239, i32 0
  %247 = bitcast i64* %29 to i32*
  store i32 %246, i32* %247, align 1, !tbaa !2451
  %248 = extractelement <2 x i32> %239, i32 1
  %249 = bitcast i8* %31 to i32*
  store i32 %248, i32* %249, align 1, !tbaa !2451
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -12
  %252 = add i64 %185, 121
  store i64 %252, i64* %PC, align 8
  %253 = load <2 x float>, <2 x float>* %57, align 1
  %254 = extractelement <2 x float> %253, i32 0
  %255 = inttoptr i64 %251 to float*
  store float %254, float* %255, align 4
  %256 = load i64, i64* %PC, align 8
  %257 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %258 = zext i32 %257 to i64
  store i64 %258, i64* %RSI, align 8, !tbaa !2428
  %259 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %260 = zext i32 %259 to i64
  store i64 %260, i64* %RDX, align 8, !tbaa !2428
  %261 = load i64, i64* %RBP, align 8
  %262 = add i64 %261, -884
  %263 = load i32, i32* %EAX, align 4
  %264 = add i64 %256, 20
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %262 to i32*
  store i32 %263, i32* %265, align 4
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, 3899
  %268 = add i64 %266, 5
  %269 = load i64, i64* %RSP, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271, align 8
  store i64 %270, i64* %RSP, align 8, !tbaa !2428
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %272 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %267, %struct.Memory* %184)
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, -570
  %275 = add i64 %273, 5
  %276 = load i64, i64* %RSP, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %275, i64* %278, align 8
  store i64 %277, i64* %RSP, align 8, !tbaa !2428
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  %279 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %274, %struct.Memory* %272)
  %280 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %281 = load i64, i64* %RBP, align 8
  %282 = add i64 %281, -40
  %283 = add i64 %280, 35
  store i64 %283, i64* %PC, align 8
  %284 = load <2 x float>, <2 x float>* %57, align 1
  %285 = extractelement <2 x float> %284, i32 0
  %286 = inttoptr i64 %282 to float*
  store float %285, float* %286, align 4
  %287 = load i64, i64* %PC, align 8
  %288 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %RSI, align 8, !tbaa !2428
  %290 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %291 = zext i32 %290 to i64
  store i64 %291, i64* %RDX, align 8, !tbaa !2428
  %292 = add i64 %287, 4318
  %293 = add i64 %287, 19
  %294 = load i64, i64* %RSP, align 8, !tbaa !2428
  %295 = add i64 %294, -8
  %296 = inttoptr i64 %295 to i64*
  store i64 %293, i64* %296, align 8
  store i64 %295, i64* %RSP, align 8, !tbaa !2428
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  %297 = tail call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* nonnull %0, i64 %292, %struct.Memory* %279)
  %298 = load i64, i64* %PC, align 8
  %299 = add i64 %298, -629
  %300 = add i64 %298, 5
  %301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303, align 8
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  %304 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %299, %struct.Memory* %297)
  %305 = load i64, i64* %RBP, align 8
  %306 = add i64 %305, -40
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, 5
  store i64 %308, i64* %PC, align 8
  %309 = load <2 x float>, <2 x float>* %57, align 1
  %310 = load <2 x i32>, <2 x i32>* %222, align 1
  %311 = inttoptr i64 %306 to float*
  %312 = load float, float* %311, align 4
  %313 = extractelement <2 x float> %309, i32 0
  %314 = fsub float %313, %312
  store float %314, float* %25, align 1, !tbaa !2451
  %315 = bitcast <2 x float> %309 to <2 x i32>
  %316 = extractelement <2 x i32> %315, i32 1
  store i32 %316, i32* %245, align 1, !tbaa !2451
  %317 = extractelement <2 x i32> %310, i32 0
  store i32 %317, i32* %247, align 1, !tbaa !2451
  %318 = extractelement <2 x i32> %310, i32 1
  store i32 %318, i32* %249, align 1, !tbaa !2451
  %319 = load <2 x float>, <2 x float>* %57, align 1
  %320 = extractelement <2 x float> %319, i32 0
  store float %320, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*), align 16
  %321 = add i64 %307, -634
  %322 = add i64 %307, 19
  %323 = load i64, i64* %RSP, align 8, !tbaa !2428
  %324 = add i64 %323, -8
  %325 = inttoptr i64 %324 to i64*
  store i64 %322, i64* %325, align 8
  store i64 %324, i64* %RSP, align 8, !tbaa !2428
  store i64 %321, i64* %PC, align 8, !tbaa !2428
  %326 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %321, %struct.Memory* %304)
  %327 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %328 = load i64, i64* %RBP, align 8
  %329 = add i64 %328, -40
  %330 = add i64 %327, 38
  store i64 %330, i64* %PC, align 8
  %331 = load <2 x float>, <2 x float>* %57, align 1
  %332 = extractelement <2 x float> %331, i32 0
  %333 = inttoptr i64 %329 to float*
  store float %332, float* %333, align 4
  %334 = load i64, i64* %PC, align 8
  %335 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RSI, align 8, !tbaa !2428
  %337 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %338 = zext i32 %337 to i64
  store i64 %338, i64* %RDX, align 8, !tbaa !2428
  %339 = add i64 %334, 5021
  %340 = add i64 %334, 19
  %341 = load i64, i64* %RSP, align 8, !tbaa !2428
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %340, i64* %343, align 8
  store i64 %342, i64* %RSP, align 8, !tbaa !2428
  store i64 %339, i64* %PC, align 8, !tbaa !2428
  %344 = tail call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* nonnull %0, i64 %339, %struct.Memory* %326)
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, -710
  %347 = add i64 %345, 5
  %348 = load i64, i64* %RSP, align 8, !tbaa !2428
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350, align 8
  store i64 %349, i64* %RSP, align 8, !tbaa !2428
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  %351 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %346, %struct.Memory* %344)
  %352 = load i64, i64* %RBP, align 8
  %353 = add i64 %352, -40
  %354 = load i64, i64* %PC, align 8
  %355 = add i64 %354, 5
  store i64 %355, i64* %PC, align 8
  %356 = load <2 x float>, <2 x float>* %57, align 1
  %357 = inttoptr i64 %353 to float*
  %358 = load float, float* %357, align 4
  %359 = extractelement <2 x float> %356, i32 0
  %360 = fsub float %359, %358
  store float %360, float* %25, align 1, !tbaa !2451
  %361 = bitcast <2 x float> %356 to <2 x i32>
  %362 = extractelement <2 x i32> %361, i32 1
  store i32 %362, i32* %245, align 1, !tbaa !2451
  %363 = load <2 x float>, <2 x float>* %57, align 1
  %364 = extractelement <2 x float> %363, i32 0
  store float %364, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*), align 4
  %365 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to i32*), align 16
  store i32 %365, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %366 = load <2 x float>, <2 x float>* %57, align 1
  %367 = load <2 x i32>, <2 x i32>* %222, align 1
  %368 = extractelement <2 x float> %366, i32 0
  %369 = fadd float %368, %364
  store float %369, float* %25, align 1, !tbaa !2451
  %370 = bitcast <2 x float> %366 to <2 x i32>
  %371 = extractelement <2 x i32> %370, i32 1
  store i32 %371, i32* %245, align 1, !tbaa !2451
  %372 = extractelement <2 x i32> %367, i32 0
  store i32 %372, i32* %247, align 1, !tbaa !2451
  %373 = extractelement <2 x i32> %367, i32 1
  store i32 %373, i32* %249, align 1, !tbaa !2451
  %374 = add i64 %352, -16
  %375 = add i64 %354, 37
  store i64 %375, i64* %PC, align 8
  %376 = load <2 x float>, <2 x float>* %57, align 1
  %377 = extractelement <2 x float> %376, i32 0
  %378 = inttoptr i64 %374 to float*
  store float %377, float* %378, align 4
  %379 = load i64, i64* %PC, align 8
  %380 = add i64 %379, 11
  store i64 %380, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4008eb

block_40096d:                                     ; preds = %block_400981, %block_400937
  %381 = phi i32 [ %3157, %block_400981 ], [ 0, %block_400937 ]
  %382 = phi i64 [ %3180, %block_400981 ], [ %2629, %block_400937 ]
  %383 = zext i32 %381 to i64
  store i64 %383, i64* %RAX, align 8, !tbaa !2428
  %384 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %385 = sub i32 %381, %384
  %386 = icmp ult i32 %381, %384
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %17, align 1, !tbaa !2432
  %388 = and i32 %385, 255
  %389 = tail call i32 @llvm.ctpop.i32(i32 %388) #12
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  store i8 %392, i8* %18, align 1, !tbaa !2446
  %393 = xor i32 %384, %381
  %394 = xor i32 %393, %385
  %395 = lshr i32 %394, 4
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  store i8 %397, i8* %19, align 1, !tbaa !2447
  %398 = icmp eq i32 %385, 0
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %20, align 1, !tbaa !2448
  %400 = lshr i32 %385, 31
  %401 = trunc i32 %400 to i8
  store i8 %401, i8* %21, align 1, !tbaa !2449
  %402 = lshr i32 %381, 31
  %403 = lshr i32 %384, 31
  %404 = xor i32 %403, %402
  %405 = xor i32 %400, %402
  %406 = add nuw nsw i32 %405, %404
  %407 = icmp eq i32 %406, 2
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %22, align 1, !tbaa !2450
  %409 = icmp ne i8 %401, 0
  %410 = xor i1 %409, %407
  %.v94 = select i1 %410, i64 20, i64 90
  %411 = add i64 %382, %.v94
  store i64 %411, i64* %PC, align 8, !tbaa !2428
  br i1 %410, label %block_400981, label %block_4009c7

block_4012f1:                                     ; preds = %block_401082
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %412 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %412, align 1, !tbaa !2453
  %413 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 48) to i64*), align 16
  %414 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %415 = fpext float %414 to double
  %416 = bitcast i64 %413 to double
  %417 = fdiv double %415, %416
  store double %417, double* %219, align 1, !tbaa !2454
  %.cast30 = bitcast i64 %413 to <2 x i32>
  %418 = fptrunc double %417 to float
  store float %418, float* %2113, align 1, !tbaa !2451
  %419 = extractelement <2 x i32> %.cast30, i32 1
  store i32 %419, i32* %1912, align 1, !tbaa !2451
  store i32 0, i32* %1913, align 1, !tbaa !2451
  store i32 0, i32* %1915, align 1, !tbaa !2451
  %420 = load <2 x float>, <2 x float>* %2206, align 1
  %421 = extractelement <2 x float> %420, i32 0
  store float %421, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %422 = load i64, i64* @stderr, align 64
  store i64 %422, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %423 = add i64 %3138, -3585
  %424 = add i64 %3138, 62
  %425 = load i64, i64* %RSP, align 8, !tbaa !2428
  %426 = add i64 %425, -8
  %427 = inttoptr i64 %426 to i64*
  store i64 %424, i64* %427, align 8
  store i64 %426, i64* %RSP, align 8, !tbaa !2428
  store i64 %423, i64* %PC, align 8, !tbaa !2428
  %428 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1174)
  %429 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %430 = load i64, i64* @stderr, align 64
  store i64 %430, i64* %RDI, align 8, !tbaa !2428
  %431 = load i64, i64* %RBP, align 8
  %432 = add i64 %431, -972
  %433 = load i32, i32* %EAX, align 4
  %434 = add i64 %429, 24
  store i64 %434, i64* %PC, align 8
  %435 = inttoptr i64 %432 to i32*
  store i32 %433, i32* %435, align 4
  %436 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %437 = add i64 %436, -3671
  %438 = add i64 %436, 7
  %439 = load i64, i64* %RSP, align 8, !tbaa !2428
  %440 = add i64 %439, -8
  %441 = inttoptr i64 %440 to i64*
  store i64 %438, i64* %441, align 8
  store i64 %440, i64* %RSP, align 8, !tbaa !2428
  store i64 %437, i64* %PC, align 8, !tbaa !2428
  %442 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %428)
  %443 = load i64, i64* %RBP, align 8
  %444 = add i64 %443, -976
  %445 = load i32, i32* %EAX, align 4
  %446 = load i64, i64* %PC, align 8
  %447 = add i64 %446, 6
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %444 to i32*
  store i32 %445, i32* %448, align 4
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, -3428
  %451 = add i64 %449, 5
  %452 = load i64, i64* %RSP, align 8, !tbaa !2428
  %453 = add i64 %452, -8
  %454 = inttoptr i64 %453 to i64*
  store i64 %451, i64* %454, align 8
  store i64 %453, i64* %RSP, align 8, !tbaa !2428
  store i64 %450, i64* %PC, align 8, !tbaa !2428
  %455 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %450, %struct.Memory* %442)
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -80
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 5
  store i64 %459, i64* %PC, align 8
  %460 = load <2 x float>, <2 x float>* %57, align 1
  %461 = extractelement <2 x float> %460, i32 0
  %462 = inttoptr i64 %457 to float*
  store float %461, float* %462, align 4
  %463 = load i64, i64* %PC, align 8
  %464 = add i64 %463, 11
  store i64 %464, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_401369

block_40116d:                                     ; preds = %block_40112b, %block_401181
  %465 = phi i32 [ 0, %block_40112b ], [ %2979, %block_401181 ]
  %466 = phi i64 [ %3112, %block_40112b ], [ %3002, %block_401181 ]
  %467 = zext i32 %465 to i64
  store i64 %467, i64* %RAX, align 8, !tbaa !2428
  %468 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %469 = sub i32 %465, %468
  %470 = icmp ult i32 %465, %468
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %17, align 1, !tbaa !2432
  %472 = and i32 %469, 255
  %473 = tail call i32 @llvm.ctpop.i32(i32 %472) #12
  %474 = trunc i32 %473 to i8
  %475 = and i8 %474, 1
  %476 = xor i8 %475, 1
  store i8 %476, i8* %18, align 1, !tbaa !2446
  %477 = xor i32 %468, %465
  %478 = xor i32 %477, %469
  %479 = lshr i32 %478, 4
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  store i8 %481, i8* %19, align 1, !tbaa !2447
  %482 = icmp eq i32 %469, 0
  %483 = zext i1 %482 to i8
  store i8 %483, i8* %20, align 1, !tbaa !2448
  %484 = lshr i32 %469, 31
  %485 = trunc i32 %484 to i8
  store i8 %485, i8* %21, align 1, !tbaa !2449
  %486 = lshr i32 %465, 31
  %487 = lshr i32 %468, 31
  %488 = xor i32 %487, %486
  %489 = xor i32 %484, %486
  %490 = add nuw nsw i32 %489, %488
  %491 = icmp eq i32 %490, 2
  %492 = zext i1 %491 to i8
  store i8 %492, i8* %22, align 1, !tbaa !2450
  %493 = icmp ne i8 %485, 0
  %494 = xor i1 %493, %491
  %.v104 = select i1 %494, i64 20, i64 94
  %495 = add i64 %466, %.v104
  store i64 %495, i64* %PC, align 8, !tbaa !2428
  br i1 %494, label %block_401181, label %block_4011cb

block_400cc0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %496 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to i64*), align 8
  store i64 %496, i64* %190, align 1, !tbaa !2454
  store double 0.000000e+00, double* %191, align 1, !tbaa !2454
  %497 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to i64*), align 8
  store i64 %497, i64* %194, align 1, !tbaa !2454
  store double 0.000000e+00, double* %196, align 1, !tbaa !2454
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -12
  %500 = add i64 %2438, 21
  store i64 %500, i64* %PC, align 8
  %501 = inttoptr i64 %499 to float*
  %502 = load float, float* %501, align 4
  %503 = fpext float %502 to double
  store double %503, double* %219, align 1, !tbaa !2454
  %504 = add i64 %498, -16
  %505 = add i64 %2438, 26
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %504 to float*
  %507 = load float, float* %506, align 4
  %508 = fpext float %507 to double
  store double %508, double* %232, align 1, !tbaa !2454
  %509 = bitcast i64 %497 to double
  %510 = fmul double %508, %509
  %511 = fdiv double %503, %510
  store double %511, double* %219, align 1, !tbaa !2454
  %512 = bitcast double %510 to <2 x i32>
  %513 = fptrunc double %511 to float
  store float %513, float* %2113, align 1, !tbaa !2451
  %514 = extractelement <2 x i32> %512, i32 1
  store i32 %514, i32* %1912, align 1, !tbaa !2451
  store i32 0, i32* %1913, align 1, !tbaa !2451
  store i32 0, i32* %1915, align 1, !tbaa !2451
  %515 = load <2 x float>, <2 x float>* %2206, align 1
  %516 = extractelement <2 x float> %515, i32 0
  store float %516, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %517 = fpext float %516 to double
  store double %517, double* %193, align 1, !tbaa !2454
  %518 = bitcast i64 %496 to double
  %519 = fdiv double %518, %517
  %.cast23 = bitcast double %519 to <2 x i32>
  %520 = fptrunc double %519 to float
  store float %520, float* %25, align 1, !tbaa !2451
  %521 = extractelement <2 x i32> %.cast23, i32 1
  store i32 %521, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  store i32 0, i32* %249, align 1, !tbaa !2451
  %522 = load <2 x float>, <2 x float>* %57, align 1
  %523 = extractelement <2 x float> %522, i32 0
  store float %523, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %524 = add i64 %2438, 99
  store i64 %524, i64* %PC, align 8, !tbaa !2428
  br label %block_400d23

block_400afe:                                     ; preds = %block_400ac8, %block_400ada
  %525 = phi i64 [ %2679, %block_400ac8 ], [ %.pre89, %block_400ada ]
  %526 = load i64, i64* %RBP, align 8
  %527 = add i64 %526, -904
  %528 = add i64 %525, 8
  store i64 %528, i64* %PC, align 8
  %529 = inttoptr i64 %527 to i64*
  %530 = load i64, i64* %529, align 8
  %.cast21 = bitcast i64 %530 to <2 x i32>
  %.cast22 = bitcast i64 %530 to double
  %531 = fptrunc double %.cast22 to float
  store float %531, float* %25, align 1, !tbaa !2451
  %532 = extractelement <2 x i32> %.cast21, i32 1
  store i32 %532, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  store i32 0, i32* %249, align 1, !tbaa !2451
  %533 = add i64 %526, -24
  %534 = add i64 %525, 17
  store i64 %534, i64* %PC, align 8
  %535 = load <2 x float>, <2 x float>* %57, align 1
  %536 = extractelement <2 x float> %535, i32 0
  %537 = inttoptr i64 %533 to float*
  store float %536, float* %537, align 4
  %538 = load i64, i64* %PC, align 8
  %539 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %540 = add i32 %539, 1
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = icmp eq i32 %539, -1
  %543 = icmp eq i32 %540, 0
  %544 = or i1 %542, %543
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %17, align 1, !tbaa !2432
  %546 = and i32 %540, 255
  %547 = tail call i32 @llvm.ctpop.i32(i32 %546) #12
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  store i8 %550, i8* %18, align 1, !tbaa !2446
  %551 = xor i32 %540, %539
  %552 = lshr i32 %551, 4
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  store i8 %554, i8* %19, align 1, !tbaa !2447
  %555 = zext i1 %543 to i8
  store i8 %555, i8* %20, align 1, !tbaa !2448
  %556 = lshr i32 %540, 31
  %557 = trunc i32 %556 to i8
  store i8 %557, i8* %21, align 1, !tbaa !2449
  %558 = lshr i32 %539, 31
  %559 = xor i32 %556, %558
  %560 = add nuw nsw i32 %559, %556
  %561 = icmp eq i32 %560, 2
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %22, align 1, !tbaa !2450
  store i32 %540, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %563 = add i64 %538, -248
  store i64 %563, i64* %PC, align 8, !tbaa !2428
  br label %block_400a17

block_4008eb:                                     ; preds = %block_4008ff, %block_400640
  %564 = phi i32 [ %1657, %block_4008ff ], [ 0, %block_400640 ]
  %565 = phi i64 [ %1680, %block_4008ff ], [ %380, %block_400640 ]
  %566 = zext i32 %564 to i64
  store i64 %566, i64* %RAX, align 8, !tbaa !2428
  %567 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %568 = sub i32 %564, %567
  %569 = icmp ult i32 %564, %567
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %17, align 1, !tbaa !2432
  %571 = and i32 %568, 255
  %572 = tail call i32 @llvm.ctpop.i32(i32 %571) #12
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  %575 = xor i8 %574, 1
  store i8 %575, i8* %18, align 1, !tbaa !2446
  %576 = xor i32 %567, %564
  %577 = xor i32 %576, %568
  %578 = lshr i32 %577, 4
  %579 = trunc i32 %578 to i8
  %580 = and i8 %579, 1
  store i8 %580, i8* %19, align 1, !tbaa !2447
  %581 = icmp eq i32 %568, 0
  %582 = zext i1 %581 to i8
  store i8 %582, i8* %20, align 1, !tbaa !2448
  %583 = lshr i32 %568, 31
  %584 = trunc i32 %583 to i8
  store i8 %584, i8* %21, align 1, !tbaa !2449
  %585 = lshr i32 %564, 31
  %586 = lshr i32 %567, 31
  %587 = xor i32 %586, %585
  %588 = xor i32 %583, %585
  %589 = add nuw nsw i32 %588, %587
  %590 = icmp eq i32 %589, 2
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %22, align 1, !tbaa !2450
  %592 = icmp ne i8 %584, 0
  %593 = xor i1 %592, %590
  %.v93 = select i1 %593, i64 20, i64 76
  %594 = add i64 %565, %.v93
  store i64 %594, i64* %PC, align 8, !tbaa !2428
  br i1 %593, label %block_4008ff, label %block_400937

block_400a68:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %595 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %596 = sext i32 %595 to i64
  store i64 %596, i64* %RAX, align 8, !tbaa !2428
  %597 = shl nsw i64 %596, 2
  %598 = add i64 %597, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %599 = add i64 %2008, 17
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %598 to float*
  %601 = load float, float* %600, align 4
  %602 = fpext float %601 to double
  %603 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %604 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %605 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %606 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %603, i32* %1910, align 1, !tbaa !2451
  store i32 %604, i32* %1912, align 1, !tbaa !2451
  store i32 %605, i32* %1913, align 1, !tbaa !2451
  store i32 %606, i32* %1915, align 1, !tbaa !2451
  %607 = bitcast double %602 to i64
  %608 = load i64, i64* %29, align 1
  %609 = load i64, i64* %194, align 1
  %610 = load i64, i64* %195, align 1
  %611 = and i64 %609, %607
  %612 = and i64 %610, %608
  %613 = trunc i64 %611 to i32
  %614 = lshr i64 %611, 32
  %615 = trunc i64 %614 to i32
  store i32 %613, i32* %26, align 1, !tbaa !2453
  store i32 %615, i32* %245, align 1, !tbaa !2453
  %616 = trunc i64 %612 to i32
  store i32 %616, i32* %247, align 1, !tbaa !2453
  %617 = lshr i64 %612, 32
  %618 = trunc i64 %617 to i32
  store i32 %618, i32* %249, align 1, !tbaa !2453
  %619 = load i64, i64* %RBP, align 8
  %620 = add i64 %619, -896
  %621 = add i64 %2008, 36
  store i64 %621, i64* %PC, align 8
  %622 = load i64, i64* %190, align 1
  %623 = inttoptr i64 %620 to i64*
  store i64 %622, i64* %623, align 8
  %.pre87 = load i64, i64* %PC, align 8
  br label %block_400a8c

block_4015e6:                                     ; preds = %block_401588
  %624 = add i64 %1946, -4086
  %625 = add i64 %1946, 5
  %626 = load i64, i64* %RSP, align 8, !tbaa !2428
  %627 = add i64 %626, -8
  %628 = inttoptr i64 %627 to i64*
  store i64 %625, i64* %628, align 8
  store i64 %627, i64* %RSP, align 8, !tbaa !2428
  store i64 %624, i64* %PC, align 8, !tbaa !2428
  %629 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %624, %struct.Memory* %1839)
  %630 = load i64, i64* %PC, align 8
  %631 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to i64*), align 8
  store i64 %631, i64* %194, align 1, !tbaa !2454
  store double 0.000000e+00, double* %196, align 1, !tbaa !2454
  %632 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to i64*), align 8
  store i64 %632, i64* %1909, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1209, align 1, !tbaa !2454
  %633 = load i64, i64* %RBP, align 8
  %634 = add i64 %633, -40
  %635 = add i64 %630, 21
  store i64 %635, i64* %PC, align 8
  %636 = load <2 x float>, <2 x float>* %57, align 1
  %637 = load <2 x i32>, <2 x i32>* %222, align 1
  %638 = inttoptr i64 %634 to float*
  %639 = load float, float* %638, align 4
  %640 = extractelement <2 x float> %636, i32 0
  %641 = fsub float %640, %639
  store float %641, float* %25, align 1, !tbaa !2451
  %642 = bitcast <2 x float> %636 to <2 x i32>
  %643 = extractelement <2 x i32> %642, i32 1
  store i32 %643, i32* %245, align 1, !tbaa !2451
  %644 = extractelement <2 x i32> %637, i32 0
  store i32 %644, i32* %247, align 1, !tbaa !2451
  %645 = extractelement <2 x i32> %637, i32 1
  store i32 %645, i32* %249, align 1, !tbaa !2451
  %646 = load <2 x i32>, <2 x i32>* %1210, align 1
  %647 = load <2 x i32>, <2 x i32>* %1211, align 1
  %648 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %649 = sitofp i32 %648 to float
  store float %649, float* %1212, align 1, !tbaa !2451
  %650 = extractelement <2 x i32> %646, i32 1
  store i32 %650, i32* %227, align 1, !tbaa !2451
  %651 = extractelement <2 x i32> %647, i32 0
  store i32 %651, i32* %229, align 1, !tbaa !2451
  %652 = extractelement <2 x i32> %647, i32 1
  store i32 %652, i32* %231, align 1, !tbaa !2451
  %653 = load <2 x float>, <2 x float>* %57, align 1
  %654 = load <2 x i32>, <2 x i32>* %222, align 1
  %655 = load <2 x float>, <2 x float>* %1213, align 1
  %656 = extractelement <2 x float> %653, i32 0
  %657 = extractelement <2 x float> %655, i32 0
  %658 = fdiv float %656, %657
  store float %658, float* %25, align 1, !tbaa !2451
  %659 = bitcast <2 x float> %653 to <2 x i32>
  %660 = extractelement <2 x i32> %659, i32 1
  store i32 %660, i32* %245, align 1, !tbaa !2451
  %661 = extractelement <2 x i32> %654, i32 0
  store i32 %661, i32* %247, align 1, !tbaa !2451
  %662 = extractelement <2 x i32> %654, i32 1
  store i32 %662, i32* %249, align 1, !tbaa !2451
  %663 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %664 = sext i32 %663 to i64
  %665 = shl nsw i64 %664, 2
  %666 = add i64 %665, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %667 = add i64 %630, 51
  store i64 %667, i64* %PC, align 8
  %668 = load <2 x float>, <2 x float>* %57, align 1
  %669 = extractelement <2 x float> %668, i32 0
  %670 = inttoptr i64 %666 to float*
  store float %669, float* %670, align 4
  %671 = load i64, i64* %PC, align 8
  %672 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %673 = sext i32 %672 to i64
  store i64 %673, i64* %RAX, align 8, !tbaa !2428
  %674 = shl nsw i64 %673, 2
  %675 = add i64 %674, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %676 = add i64 %671, 17
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i32*
  %678 = load i32, i32* %677, align 4
  store i32 %678, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 %673, i64* %RAX, align 8, !tbaa !2428
  %679 = add i64 %674, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %680 = add i64 %671, 34
  store i64 %680, i64* %PC, align 8
  %681 = load <2 x float>, <2 x float>* %57, align 1
  %682 = load <2 x i32>, <2 x i32>* %222, align 1
  %683 = inttoptr i64 %679 to float*
  %684 = load float, float* %683, align 4
  %685 = extractelement <2 x float> %681, i32 0
  %686 = fadd float %685, %684
  store float %686, float* %25, align 1, !tbaa !2451
  %687 = bitcast <2 x float> %681 to <2 x i32>
  %688 = extractelement <2 x i32> %687, i32 1
  store i32 %688, i32* %245, align 1, !tbaa !2451
  %689 = extractelement <2 x i32> %682, i32 0
  store i32 %689, i32* %247, align 1, !tbaa !2451
  %690 = extractelement <2 x i32> %682, i32 1
  store i32 %690, i32* %249, align 1, !tbaa !2451
  %691 = load i64, i64* %RBP, align 8
  %692 = add i64 %691, -16
  %693 = add i64 %671, 39
  store i64 %693, i64* %PC, align 8
  %694 = load <2 x float>, <2 x float>* %57, align 1
  %695 = extractelement <2 x float> %694, i32 0
  %696 = inttoptr i64 %692 to float*
  store float %695, float* %696, align 4
  %697 = load i64, i64* %RBP, align 8
  %698 = add i64 %697, -16
  %699 = load i64, i64* %PC, align 8
  %700 = add i64 %699, 5
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %698 to i32*
  %702 = load i32, i32* %701, align 4
  store i32 %702, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %703 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %704 = sext i32 %703 to i64
  store i64 %704, i64* %RAX, align 8, !tbaa !2428
  %705 = shl nsw i64 %704, 2
  %706 = add i64 %705, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %707 = add i64 %699, 22
  store i64 %707, i64* %PC, align 8
  %708 = load <2 x float>, <2 x float>* %57, align 1
  %709 = extractelement <2 x float> %708, i32 0
  %710 = inttoptr i64 %706 to float*
  store float %709, float* %710, align 4
  %711 = load i64, i64* %RBP, align 8
  %712 = add i64 %711, -12
  %713 = load i64, i64* %PC, align 8
  %714 = add i64 %713, 5
  store i64 %714, i64* %PC, align 8
  %715 = inttoptr i64 %712 to float*
  %716 = load float, float* %715, align 4
  %717 = fpext float %716 to double
  store double %717, double* %189, align 1, !tbaa !2454
  %718 = add i64 %711, -16
  %719 = add i64 %713, 10
  store i64 %719, i64* %PC, align 8
  %720 = inttoptr i64 %718 to float*
  %721 = load float, float* %720, align 4
  %722 = fpext float %721 to double
  store double %722, double* %232, align 1, !tbaa !2454
  %723 = load double, double* %219, align 1
  %724 = fmul double %722, %723
  store double %724, double* %219, align 1, !tbaa !2454
  %725 = load <2 x i32>, <2 x i32>* %1875, align 1
  %726 = fdiv double %717, %724
  %.cast33 = bitcast double %726 to <2 x i32>
  %727 = fptrunc double %726 to float
  store float %727, float* %25, align 1, !tbaa !2451
  %728 = extractelement <2 x i32> %.cast33, i32 1
  store i32 %728, i32* %245, align 1, !tbaa !2451
  %729 = extractelement <2 x i32> %725, i32 0
  store i32 %729, i32* %247, align 1, !tbaa !2451
  %730 = extractelement <2 x i32> %725, i32 1
  store i32 %730, i32* %249, align 1, !tbaa !2451
  %731 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %732 = sext i32 %731 to i64
  %733 = shl nsw i64 %732, 2
  %734 = add i64 %733, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %735 = add i64 %713, 39
  store i64 %735, i64* %PC, align 8
  %736 = load <2 x float>, <2 x float>* %57, align 1
  %737 = extractelement <2 x float> %736, i32 0
  %738 = inttoptr i64 %734 to float*
  store float %737, float* %738, align 4
  %739 = load i64, i64* %PC, align 8
  %740 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %741 = sext i32 %740 to i64
  store i64 %741, i64* %RAX, align 8, !tbaa !2428
  %742 = shl nsw i64 %741, 2
  %743 = add i64 %742, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %744 = add i64 %739, 17
  store i64 %744, i64* %PC, align 8
  %745 = inttoptr i64 %743 to float*
  %746 = load float, float* %745, align 4
  %747 = fpext float %746 to double
  %748 = load double, double* %193, align 1
  %749 = fdiv double %748, %747
  store double %749, double* %193, align 1, !tbaa !2454
  %750 = bitcast double %747 to <2 x i32>
  %751 = load <2 x i32>, <2 x i32>* %222, align 1
  %752 = fptrunc double %749 to float
  store float %752, float* %25, align 1, !tbaa !2451
  %753 = extractelement <2 x i32> %750, i32 1
  store i32 %753, i32* %245, align 1, !tbaa !2451
  %754 = extractelement <2 x i32> %751, i32 0
  store i32 %754, i32* %247, align 1, !tbaa !2451
  %755 = extractelement <2 x i32> %751, i32 1
  store i32 %755, i32* %249, align 1, !tbaa !2451
  store i64 %741, i64* %RAX, align 8, !tbaa !2428
  %756 = add i64 %742, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %757 = add i64 %739, 42
  store i64 %757, i64* %PC, align 8
  %758 = load <2 x float>, <2 x float>* %57, align 1
  %759 = extractelement <2 x float> %758, i32 0
  %760 = inttoptr i64 %756 to float*
  store float %759, float* %760, align 4
  %761 = load i64, i64* %RBP, align 8
  %762 = add i64 %761, -16
  %763 = load i64, i64* %PC, align 8
  %764 = add i64 %763, 5
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %762 to i32*
  %766 = load i32, i32* %765, align 4
  store i32 %766, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %767 = add i64 %761, -8
  %768 = add i64 %763, 10
  store i64 %768, i64* %PC, align 8
  %769 = load <2 x float>, <2 x float>* %57, align 1
  %770 = inttoptr i64 %767 to float*
  %771 = load float, float* %770, align 4
  %772 = extractelement <2 x float> %769, i32 0
  %773 = fdiv float %772, %771
  store float %773, float* %25, align 1, !tbaa !2451
  %774 = bitcast <2 x float> %769 to <2 x i32>
  %775 = extractelement <2 x i32> %774, i32 1
  store i32 %775, i32* %245, align 1, !tbaa !2451
  %776 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %777 = sext i32 %776 to i64
  %778 = shl nsw i64 %777, 2
  %779 = add i64 %778, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %780 = add i64 %763, 27
  store i64 %780, i64* %PC, align 8
  %781 = load <2 x float>, <2 x float>* %57, align 1
  %782 = extractelement <2 x float> %781, i32 0
  %783 = inttoptr i64 %779 to float*
  store float %782, float* %783, align 4
  %784 = load i64, i64* %PC, align 8
  %785 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  store i32 %785, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %786 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %787 = sext i32 %786 to i64
  store i64 %787, i64* %RAX, align 8, !tbaa !2428
  %788 = shl nsw i64 %787, 2
  %789 = add i64 %788, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %790 = add i64 %784, 26
  store i64 %790, i64* %PC, align 8
  %791 = load <2 x float>, <2 x float>* %57, align 1
  %792 = load <2 x i32>, <2 x i32>* %222, align 1
  %793 = inttoptr i64 %789 to float*
  %794 = load float, float* %793, align 4
  %795 = extractelement <2 x float> %791, i32 0
  %796 = fadd float %795, %794
  store float %796, float* %25, align 1, !tbaa !2451
  %797 = bitcast <2 x float> %791 to <2 x i32>
  %798 = extractelement <2 x i32> %797, i32 1
  store i32 %798, i32* %245, align 1, !tbaa !2451
  %799 = extractelement <2 x i32> %792, i32 0
  store i32 %799, i32* %247, align 1, !tbaa !2451
  %800 = extractelement <2 x i32> %792, i32 1
  store i32 %800, i32* %249, align 1, !tbaa !2451
  %801 = load <2 x float>, <2 x float>* %57, align 1
  %802 = extractelement <2 x float> %801, i32 0
  store float %802, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %803 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %804 = zext i32 %803 to i64
  store i64 %804, i64* %RDI, align 8, !tbaa !2428
  %805 = add i64 %784, 4521
  %806 = add i64 %784, 47
  %807 = load i64, i64* %RSP, align 8, !tbaa !2428
  %808 = add i64 %807, -8
  %809 = inttoptr i64 %808 to i64*
  store i64 %806, i64* %809, align 8
  store i64 %808, i64* %RSP, align 8, !tbaa !2428
  store i64 %805, i64* %PC, align 8, !tbaa !2428
  %810 = tail call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* nonnull %0, i64 %805, %struct.Memory* %1839)
  %811 = load i64, i64* %PC, align 8
  %812 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %813 = add i32 %812, 1
  %814 = zext i32 %813 to i64
  store i64 %814, i64* %RAX, align 8, !tbaa !2428
  %815 = icmp eq i32 %812, -1
  %816 = icmp eq i32 %813, 0
  %817 = or i1 %815, %816
  %818 = zext i1 %817 to i8
  store i8 %818, i8* %17, align 1, !tbaa !2432
  %819 = and i32 %813, 255
  %820 = tail call i32 @llvm.ctpop.i32(i32 %819) #12
  %821 = trunc i32 %820 to i8
  %822 = and i8 %821, 1
  %823 = xor i8 %822, 1
  store i8 %823, i8* %18, align 1, !tbaa !2446
  %824 = xor i32 %813, %812
  %825 = lshr i32 %824, 4
  %826 = trunc i32 %825 to i8
  %827 = and i8 %826, 1
  store i8 %827, i8* %19, align 1, !tbaa !2447
  %828 = zext i1 %816 to i8
  store i8 %828, i8* %20, align 1, !tbaa !2448
  %829 = lshr i32 %813, 31
  %830 = trunc i32 %829 to i8
  store i8 %830, i8* %21, align 1, !tbaa !2449
  %831 = lshr i32 %812, 31
  %832 = xor i32 %829, %831
  %833 = add nuw nsw i32 %832, %829
  %834 = icmp eq i32 %833, 2
  %835 = zext i1 %834 to i8
  store i8 %835, i8* %22, align 1, !tbaa !2450
  store i32 %813, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %836 = add i64 %811, -601
  store i64 %836, i64* %PC, align 8, !tbaa !2428
  br label %block_40149d

block_401369:                                     ; preds = %block_401379, %block_4012f1
  %837 = phi i32 [ %3016, %block_401379 ], [ 0, %block_4012f1 ]
  %838 = phi i64 [ %3039, %block_401379 ], [ %464, %block_4012f1 ]
  %839 = zext i32 %837 to i64
  store i64 %839, i64* %RAX, align 8, !tbaa !2428
  %840 = load i64, i64* %RBP, align 8
  %841 = add i64 %840, -68
  %842 = add i64 %838, 10
  store i64 %842, i64* %PC, align 8
  %843 = inttoptr i64 %841 to i32*
  %844 = load i32, i32* %843, align 4
  %845 = sub i32 %837, %844
  %846 = icmp ult i32 %837, %844
  %847 = zext i1 %846 to i8
  store i8 %847, i8* %17, align 1, !tbaa !2432
  %848 = and i32 %845, 255
  %849 = tail call i32 @llvm.ctpop.i32(i32 %848) #12
  %850 = trunc i32 %849 to i8
  %851 = and i8 %850, 1
  %852 = xor i8 %851, 1
  store i8 %852, i8* %18, align 1, !tbaa !2446
  %853 = xor i32 %844, %837
  %854 = xor i32 %853, %845
  %855 = lshr i32 %854, 4
  %856 = trunc i32 %855 to i8
  %857 = and i8 %856, 1
  store i8 %857, i8* %19, align 1, !tbaa !2447
  %858 = icmp eq i32 %845, 0
  %859 = zext i1 %858 to i8
  store i8 %859, i8* %20, align 1, !tbaa !2448
  %860 = lshr i32 %845, 31
  %861 = trunc i32 %860 to i8
  store i8 %861, i8* %21, align 1, !tbaa !2449
  %862 = lshr i32 %837, 31
  %863 = lshr i32 %844, 31
  %864 = xor i32 %863, %862
  %865 = xor i32 %860, %862
  %866 = add nuw nsw i32 %865, %864
  %867 = icmp eq i32 %866, 2
  %868 = zext i1 %867 to i8
  store i8 %868, i8* %22, align 1, !tbaa !2450
  %869 = icmp ne i8 %861, 0
  %870 = xor i1 %869, %867
  %.v99 = select i1 %870, i64 16, i64 81
  %871 = add i64 %838, %.v99
  store i64 %871, i64* %PC, align 8, !tbaa !2428
  br i1 %870, label %block_401379, label %block_4013ba

block_4010a5:                                     ; preds = %block_401090, %block_4010b9
  %872 = phi i32 [ 0, %block_401090 ], [ %2034, %block_4010b9 ]
  %873 = phi i64 [ %2725, %block_401090 ], [ %2057, %block_4010b9 ]
  %874 = zext i32 %872 to i64
  store i64 %874, i64* %RAX, align 8, !tbaa !2428
  %875 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %876 = sub i32 %872, %875
  %877 = icmp ult i32 %872, %875
  %878 = zext i1 %877 to i8
  store i8 %878, i8* %17, align 1, !tbaa !2432
  %879 = and i32 %876, 255
  %880 = tail call i32 @llvm.ctpop.i32(i32 %879) #12
  %881 = trunc i32 %880 to i8
  %882 = and i8 %881, 1
  %883 = xor i8 %882, 1
  store i8 %883, i8* %18, align 1, !tbaa !2446
  %884 = xor i32 %875, %872
  %885 = xor i32 %884, %876
  %886 = lshr i32 %885, 4
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  store i8 %888, i8* %19, align 1, !tbaa !2447
  %889 = icmp eq i32 %876, 0
  %890 = zext i1 %889 to i8
  store i8 %890, i8* %20, align 1, !tbaa !2448
  %891 = lshr i32 %876, 31
  %892 = trunc i32 %891 to i8
  store i8 %892, i8* %21, align 1, !tbaa !2449
  %893 = lshr i32 %872, 31
  %894 = lshr i32 %875, 31
  %895 = xor i32 %894, %893
  %896 = xor i32 %891, %893
  %897 = add nuw nsw i32 %896, %895
  %898 = icmp eq i32 %897, 2
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %22, align 1, !tbaa !2450
  %900 = icmp ne i8 %892, 0
  %901 = xor i1 %900, %898
  %.v103 = select i1 %901, i64 20, i64 134
  %902 = add i64 %873, %.v103
  store i64 %902, i64* %PC, align 8, !tbaa !2428
  br i1 %901, label %block_4010b9, label %block_40112b

block_400ada:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %903 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %904 = sext i32 %903 to i64
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = shl nsw i64 %904, 2
  %906 = add i64 %905, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %907 = add i64 %2931, 17
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %906 to float*
  %909 = load float, float* %908, align 4
  %910 = fpext float %909 to double
  %911 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %912 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %913 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %914 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %911, i32* %1910, align 1, !tbaa !2451
  store i32 %912, i32* %1912, align 1, !tbaa !2451
  store i32 %913, i32* %1913, align 1, !tbaa !2451
  store i32 %914, i32* %1915, align 1, !tbaa !2451
  %915 = bitcast double %910 to i64
  %916 = load i64, i64* %29, align 1
  %917 = load i64, i64* %194, align 1
  %918 = load i64, i64* %195, align 1
  %919 = and i64 %917, %915
  %920 = and i64 %918, %916
  %921 = trunc i64 %919 to i32
  %922 = lshr i64 %919, 32
  %923 = trunc i64 %922 to i32
  store i32 %921, i32* %26, align 1, !tbaa !2453
  store i32 %923, i32* %245, align 1, !tbaa !2453
  %924 = trunc i64 %920 to i32
  store i32 %924, i32* %247, align 1, !tbaa !2453
  %925 = lshr i64 %920, 32
  %926 = trunc i64 %925 to i32
  store i32 %926, i32* %249, align 1, !tbaa !2453
  %927 = load i64, i64* %RBP, align 8
  %928 = add i64 %927, -904
  %929 = add i64 %2931, 36
  store i64 %929, i64* %PC, align 8
  %930 = load i64, i64* %190, align 1
  %931 = inttoptr i64 %928 to i64*
  store i64 %930, i64* %931, align 8
  %.pre89 = load i64, i64* %PC, align 8
  br label %block_400afe

block_400dd9:                                     ; preds = %block_400d88
  %932 = add i64 %2966, -2025
  %933 = add i64 %2966, 5
  %934 = load i64, i64* %RSP, align 8, !tbaa !2428
  %935 = add i64 %934, -8
  %936 = inttoptr i64 %935 to i64*
  store i64 %933, i64* %936, align 8
  store i64 %935, i64* %RSP, align 8, !tbaa !2428
  store i64 %932, i64* %PC, align 8, !tbaa !2428
  %937 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %932, %struct.Memory* %MEMORY.7)
  %938 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %2570, align 1, !tbaa !2453
  %939 = load i64, i64* %RBP, align 8
  %940 = add i64 %939, -84
  %941 = add i64 %938, 18
  store i64 %941, i64* %PC, align 8
  %942 = load <2 x float>, <2 x float>* %57, align 1
  %943 = extractelement <2 x float> %942, i32 0
  %944 = inttoptr i64 %940 to float*
  store float %943, float* %944, align 4
  %945 = load i64, i64* %RBP, align 8
  %946 = add i64 %945, -84
  %947 = load i64, i64* %PC, align 8
  %948 = add i64 %947, 5
  store i64 %948, i64* %PC, align 8
  %949 = inttoptr i64 %946 to i32*
  %950 = load i32, i32* %949, align 4
  store i32 %950, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %951 = add i64 %945, -80
  %952 = add i64 %947, 10
  store i64 %952, i64* %PC, align 8
  %953 = load <2 x float>, <2 x float>* %57, align 1
  %954 = load <2 x i32>, <2 x i32>* %222, align 1
  %955 = inttoptr i64 %951 to float*
  %956 = load float, float* %955, align 4
  %957 = extractelement <2 x float> %953, i32 0
  %958 = fsub float %957, %956
  store float %958, float* %25, align 1, !tbaa !2451
  %959 = bitcast <2 x float> %953 to <2 x i32>
  %960 = extractelement <2 x i32> %959, i32 1
  store i32 %960, i32* %245, align 1, !tbaa !2451
  %961 = extractelement <2 x i32> %954, i32 0
  store i32 %961, i32* %247, align 1, !tbaa !2451
  %962 = extractelement <2 x i32> %954, i32 1
  store i32 %962, i32* %249, align 1, !tbaa !2451
  %963 = add i64 %945, -72
  %964 = add i64 %947, 15
  store i64 %964, i64* %PC, align 8
  %965 = load <2 x float>, <2 x float>* %57, align 1
  %966 = extractelement <2 x float> %965, i32 0
  %967 = inttoptr i64 %963 to float*
  store float %966, float* %967, align 4
  %968 = load i64, i64* %PC, align 8
  %969 = load i64, i64* @stderr, align 64
  store i64 %969, i64* %RDI, align 8, !tbaa !2428
  %970 = load i64, i64* %RBP, align 8
  %971 = add i64 %970, -68
  %972 = add i64 %968, 11
  store i64 %972, i64* %PC, align 8
  %973 = inttoptr i64 %971 to i32*
  %974 = load i32, i32* %973, align 4
  %975 = zext i32 %974 to i64
  store i64 %975, i64* %RDX, align 8, !tbaa !2428
  %976 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %977 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %978 = extractelement <2 x i32> %976, i32 0
  store i32 %978, i32* %26, align 1, !tbaa !2451
  %979 = extractelement <2 x i32> %976, i32 1
  store i32 %979, i32* %245, align 1, !tbaa !2451
  %980 = extractelement <2 x i32> %977, i32 0
  store i32 %980, i32* %247, align 1, !tbaa !2451
  %981 = extractelement <2 x i32> %977, i32 1
  store i32 %981, i32* %249, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %982 = add i64 %968, -2319
  %983 = add i64 %968, 21
  %984 = load i64, i64* %RSP, align 8, !tbaa !2428
  %985 = add i64 %984, -8
  %986 = inttoptr i64 %985 to i64*
  store i64 %983, i64* %986, align 8
  store i64 %985, i64* %RSP, align 8, !tbaa !2428
  store i64 %982, i64* %PC, align 8, !tbaa !2428
  %987 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.7)
  %988 = load i64, i64* %RBP, align 8
  %989 = add i64 %988, -64
  %990 = load i64, i64* %PC, align 8
  %991 = add i64 %990, 4
  store i64 %991, i64* %PC, align 8
  %992 = inttoptr i64 %989 to i32*
  %993 = load i32, i32* %992, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %994 = and i32 %993, 255
  %995 = tail call i32 @llvm.ctpop.i32(i32 %994) #12
  %996 = trunc i32 %995 to i8
  %997 = and i8 %996, 1
  %998 = xor i8 %997, 1
  store i8 %998, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %999 = icmp eq i32 %993, 0
  %1000 = zext i1 %999 to i8
  store i8 %1000, i8* %20, align 1, !tbaa !2448
  %1001 = lshr i32 %993, 31
  %1002 = trunc i32 %1001 to i8
  store i8 %1002, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1003 = add i64 %988, -940
  %1004 = load i32, i32* %EAX, align 4
  %1005 = add i64 %990, 10
  store i64 %1005, i64* %PC, align 8
  %1006 = inttoptr i64 %1003 to i32*
  store i32 %1004, i32* %1006, align 4
  %1007 = load i64, i64* %PC, align 8
  %1008 = add i64 %1007, 15
  %1009 = add i64 %1007, 6
  %1010 = load i8, i8* %21, align 1, !tbaa !2449
  %1011 = icmp ne i8 %1010, 0
  %1012 = load i8, i8* %22, align 1, !tbaa !2450
  %1013 = icmp ne i8 %1012, 0
  %1014 = xor i1 %1011, %1013
  %1015 = select i1 %1014, i64 %1009, i64 %1008
  store i64 %1015, i64* %PC, align 8, !tbaa !2428
  br i1 %1014, label %block_400e24, label %block_400e2d

block_400ed8:                                     ; preds = %block_400ec4
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %1016 = load i64, i64* %RBP, align 8
  %1017 = add i64 %1016, -20
  store i64 %1017, i64* %R8, align 8, !tbaa !2428
  %1018 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1019 = zext i32 %1018 to i64
  store i64 %1019, i64* %RSI, align 8, !tbaa !2428
  %1020 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1021 = zext i32 %1020 to i64
  store i64 %1021, i64* %RDX, align 8, !tbaa !2428
  %1022 = add i64 %1643, 2184
  %1023 = add i64 %1643, 43
  %1024 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1025 = add i64 %1024, -8
  %1026 = inttoptr i64 %1025 to i64*
  store i64 %1023, i64* %1026, align 8
  store i64 %1025, i64* %RSP, align 8, !tbaa !2428
  store i64 %1022, i64* %PC, align 8, !tbaa !2428
  %1027 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %1022, %struct.Memory* %MEMORY.11)
  %1028 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %1029 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1030 = zext i32 %1029 to i64
  store i64 %1030, i64* %RSI, align 8, !tbaa !2428
  %1031 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1032 = zext i32 %1031 to i64
  store i64 %1032, i64* %RDX, align 8, !tbaa !2428
  %1033 = add i64 %1028, 2605
  %1034 = add i64 %1028, 49
  %1035 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1036 = add i64 %1035, -8
  %1037 = inttoptr i64 %1036 to i64*
  store i64 %1034, i64* %1037, align 8
  store i64 %1036, i64* %RSP, align 8, !tbaa !2428
  store i64 %1033, i64* %PC, align 8, !tbaa !2428
  %1038 = tail call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* nonnull %0, i64 %1033, %struct.Memory* %MEMORY.11)
  %1039 = load i64, i64* %PC, align 8
  %1040 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1041 = add i32 %1040, 1
  %1042 = zext i32 %1041 to i64
  store i64 %1042, i64* %RAX, align 8, !tbaa !2428
  %1043 = icmp eq i32 %1040, -1
  %1044 = icmp eq i32 %1041, 0
  %1045 = or i1 %1043, %1044
  %1046 = zext i1 %1045 to i8
  store i8 %1046, i8* %17, align 1, !tbaa !2432
  %1047 = and i32 %1041, 255
  %1048 = tail call i32 @llvm.ctpop.i32(i32 %1047) #12
  %1049 = trunc i32 %1048 to i8
  %1050 = and i8 %1049, 1
  %1051 = xor i8 %1050, 1
  store i8 %1051, i8* %18, align 1, !tbaa !2446
  %1052 = xor i32 %1041, %1040
  %1053 = lshr i32 %1052, 4
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  store i8 %1055, i8* %19, align 1, !tbaa !2447
  %1056 = zext i1 %1044 to i8
  store i8 %1056, i8* %20, align 1, !tbaa !2448
  %1057 = lshr i32 %1041, 31
  %1058 = trunc i32 %1057 to i8
  store i8 %1058, i8* %21, align 1, !tbaa !2449
  %1059 = lshr i32 %1040, 31
  %1060 = xor i32 %1057, %1059
  %1061 = add nuw nsw i32 %1060, %1057
  %1062 = icmp eq i32 %1061, 2
  %1063 = zext i1 %1062 to i8
  store i8 %1063, i8* %22, align 1, !tbaa !2450
  store i32 %1041, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1064 = add i64 %1039, -112
  store i64 %1064, i64* %PC, align 8, !tbaa !2428
  br label %block_400ec4

block_400a56:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1065 = load i64, i64* %RBP, align 8
  %1066 = add i64 %1065, -28
  %1067 = add i64 %2008, 5
  store i64 %1067, i64* %PC, align 8
  %1068 = inttoptr i64 %1066 to float*
  %1069 = load float, float* %1068, align 4
  %1070 = fpext float %1069 to double
  store double %1070, double* %189, align 1, !tbaa !2454
  %1071 = add i64 %1065, -896
  %1072 = add i64 %2008, 13
  store i64 %1072, i64* %PC, align 8
  %1073 = inttoptr i64 %1071 to double*
  store double %1070, double* %1073, align 8
  %1074 = load i64, i64* %PC, align 8
  %1075 = add i64 %1074, 41
  store i64 %1075, i64* %PC, align 8, !tbaa !2428
  br label %block_400a8c

block_4014d4:                                     ; preds = %block_4014c0
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %1076 = load i64, i64* %RBP, align 8
  %1077 = add i64 %1076, -20
  store i64 %1077, i64* %R8, align 8, !tbaa !2428
  %1078 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1079 = zext i32 %1078 to i64
  store i64 %1079, i64* %RSI, align 8, !tbaa !2428
  %1080 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1081 = zext i32 %1080 to i64
  store i64 %1081, i64* %RDX, align 8, !tbaa !2428
  %1082 = add i64 %1711, 652
  %1083 = add i64 %1711, 43
  %1084 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1085 = add i64 %1084, -8
  %1086 = inttoptr i64 %1085 to i64*
  store i64 %1083, i64* %1086, align 8
  store i64 %1085, i64* %RSP, align 8, !tbaa !2428
  store i64 %1082, i64* %PC, align 8, !tbaa !2428
  %1087 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %1082, %struct.Memory* %1839)
  %1088 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %1089 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1090 = zext i32 %1089 to i64
  store i64 %1090, i64* %RSI, align 8, !tbaa !2428
  %1091 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %RDX, align 8, !tbaa !2428
  %1093 = add i64 %1088, 1073
  %1094 = add i64 %1088, 49
  %1095 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1096 = add i64 %1095, -8
  %1097 = inttoptr i64 %1096 to i64*
  store i64 %1094, i64* %1097, align 8
  store i64 %1096, i64* %RSP, align 8, !tbaa !2428
  store i64 %1093, i64* %PC, align 8, !tbaa !2428
  %1098 = tail call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* nonnull %0, i64 %1093, %struct.Memory* %1839)
  %1099 = load i64, i64* %PC, align 8
  %1100 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1101 = add i32 %1100, 1
  %1102 = zext i32 %1101 to i64
  store i64 %1102, i64* %RAX, align 8, !tbaa !2428
  %1103 = icmp eq i32 %1100, -1
  %1104 = icmp eq i32 %1101, 0
  %1105 = or i1 %1103, %1104
  %1106 = zext i1 %1105 to i8
  store i8 %1106, i8* %17, align 1, !tbaa !2432
  %1107 = and i32 %1101, 255
  %1108 = tail call i32 @llvm.ctpop.i32(i32 %1107) #12
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  store i8 %1111, i8* %18, align 1, !tbaa !2446
  %1112 = xor i32 %1101, %1100
  %1113 = lshr i32 %1112, 4
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  store i8 %1115, i8* %19, align 1, !tbaa !2447
  %1116 = zext i1 %1104 to i8
  store i8 %1116, i8* %20, align 1, !tbaa !2448
  %1117 = lshr i32 %1101, 31
  %1118 = trunc i32 %1117 to i8
  store i8 %1118, i8* %21, align 1, !tbaa !2449
  %1119 = lshr i32 %1100, 31
  %1120 = xor i32 %1117, %1119
  %1121 = add nuw nsw i32 %1120, %1117
  %1122 = icmp eq i32 %1121, 2
  %1123 = zext i1 %1122 to i8
  store i8 %1123, i8* %22, align 1, !tbaa !2450
  store i32 %1101, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1124 = add i64 %1099, -112
  store i64 %1124, i64* %PC, align 8, !tbaa !2428
  br label %block_4014c0

block_400fd3:                                     ; preds = %block_400fa0
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %.pre79 = load i64, i64* @stderr, align 64
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i64 %.pre79, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1125 = add i64 %2587, -2751
  %1126 = add i64 %2587, 63
  %1127 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1128 = add i64 %1127, -8
  %1129 = inttoptr i64 %1128 to i64*
  store i64 %1126, i64* %1129, align 8
  store i64 %1128, i64* %RSP, align 8, !tbaa !2428
  store i64 %1125, i64* %PC, align 8, !tbaa !2428
  %1130 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1511)
  %1131 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1132 = load i64, i64* @stderr, align 64
  store i64 %1132, i64* %RDI, align 8, !tbaa !2428
  %1133 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1134 = zext i32 %1133 to i64
  store i64 %1134, i64* %RDX, align 8, !tbaa !2428
  %1135 = load i64, i64* %RBP, align 8
  %1136 = add i64 %1135, -956
  %1137 = load i32, i32* %EAX, align 4
  %1138 = add i64 %1131, 31
  store i64 %1138, i64* %PC, align 8
  %1139 = inttoptr i64 %1136 to i32*
  store i32 %1137, i32* %1139, align 4
  %1140 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1141 = add i64 %1140, -2845
  %1142 = add i64 %1140, 7
  %1143 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1144 = add i64 %1143, -8
  %1145 = inttoptr i64 %1144 to i64*
  store i64 %1142, i64* %1145, align 8
  store i64 %1144, i64* %RSP, align 8, !tbaa !2428
  store i64 %1141, i64* %PC, align 8, !tbaa !2428
  %1146 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1130)
  %1147 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1148 = load i64, i64* @stderr, align 64
  store i64 %1148, i64* %RDI, align 8, !tbaa !2428
  %1149 = load i64, i64* %RBP, align 8
  %1150 = add i64 %1149, -960
  %1151 = load i32, i32* %EAX, align 4
  %1152 = add i64 %1147, 24
  store i64 %1152, i64* %PC, align 8
  %1153 = inttoptr i64 %1150 to i32*
  store i32 %1151, i32* %1153, align 4
  %1154 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1155 = add i64 %1154, -2876
  %1156 = add i64 %1154, 7
  %1157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1158 = add i64 %1157, -8
  %1159 = inttoptr i64 %1158 to i64*
  store i64 %1156, i64* %1159, align 8
  store i64 %1158, i64* %RSP, align 8, !tbaa !2428
  store i64 %1155, i64* %PC, align 8, !tbaa !2428
  %1160 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1146)
  %1161 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1162 = load i64, i64* @stderr, align 64
  store i64 %1162, i64* %RDI, align 8, !tbaa !2428
  %1163 = load i64, i64* %RBP, align 8
  %1164 = add i64 %1163, -964
  %1165 = load i32, i32* %EAX, align 4
  %1166 = add i64 %1161, 24
  store i64 %1166, i64* %PC, align 8
  %1167 = inttoptr i64 %1164 to i32*
  store i32 %1165, i32* %1167, align 4
  %1168 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1169 = add i64 %1168, -2907
  %1170 = add i64 %1168, 7
  %1171 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1172 = add i64 %1171, -8
  %1173 = inttoptr i64 %1172 to i64*
  store i64 %1170, i64* %1173, align 8
  store i64 %1172, i64* %RSP, align 8, !tbaa !2428
  store i64 %1169, i64* %PC, align 8, !tbaa !2428
  %1174 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1160)
  %1175 = load i64, i64* %PC, align 8
  store i32 0, i32* %26, align 1, !tbaa !2453
  store i32 0, i32* %245, align 1, !tbaa !2453
  store i32 0, i32* %247, align 1, !tbaa !2453
  store i32 0, i32* %249, align 1, !tbaa !2453
  %1176 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1177 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1178 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1179 = sitofp i32 %1178 to float
  store float %1179, float* %2113, align 1, !tbaa !2451
  %1180 = extractelement <2 x i32> %1176, i32 1
  store i32 %1180, i32* %1912, align 1, !tbaa !2451
  %1181 = extractelement <2 x i32> %1177, i32 0
  store i32 %1181, i32* %1913, align 1, !tbaa !2451
  %1182 = extractelement <2 x i32> %1177, i32 1
  store i32 %1182, i32* %1915, align 1, !tbaa !2451
  %1183 = load i64, i64* %RBP, align 8
  %1184 = add i64 %1183, -72
  %1185 = add i64 %1175, 17
  store i64 %1185, i64* %PC, align 8
  %1186 = load <2 x float>, <2 x float>* %2206, align 1
  %1187 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1188 = inttoptr i64 %1184 to float*
  %1189 = load float, float* %1188, align 4
  %1190 = extractelement <2 x float> %1186, i32 0
  %1191 = fmul float %1190, %1189
  store float %1191, float* %2113, align 1, !tbaa !2451
  %1192 = bitcast <2 x float> %1186 to <2 x i32>
  %1193 = extractelement <2 x i32> %1192, i32 1
  store i32 %1193, i32* %1912, align 1, !tbaa !2451
  %1194 = extractelement <2 x i32> %1187, i32 0
  store i32 %1194, i32* %1913, align 1, !tbaa !2451
  %1195 = extractelement <2 x i32> %1187, i32 1
  store i32 %1195, i32* %1915, align 1, !tbaa !2451
  %1196 = add i64 %1183, -44
  %1197 = add i64 %1175, 22
  store i64 %1197, i64* %PC, align 8
  %1198 = load <2 x float>, <2 x float>* %2206, align 1
  %1199 = extractelement <2 x float> %1198, i32 0
  %1200 = inttoptr i64 %1196 to float*
  store float %1199, float* %1200, align 4
  %1201 = load i64, i64* %PC, align 8
  %1202 = load <2 x float>, <2 x float>* %57, align 1
  %1203 = extractelement <2 x float> %1202, i32 0
  store float %1203, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1204 = load i64, i64* %RBP, align 8
  %1205 = add i64 %1204, -968
  %1206 = load i32, i32* %EAX, align 4
  %1207 = add i64 %1201, 26
  store i64 %1207, i64* %PC, align 8
  %1208 = inttoptr i64 %1205 to i32*
  store i32 %1206, i32* %1208, align 4
  %1209 = bitcast i64* %1905 to double*
  %1210 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %1211 = bitcast i64* %228 to <2 x i32>*
  %1212 = bitcast %union.VectorReg* %9 to float*
  %1213 = bitcast %union.VectorReg* %9 to <2 x float>*
  %.pre80 = load i64, i64* %PC, align 8
  %.pre81 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1214 = bitcast i64* %29 to <2 x i32>*
  br label %block_401082

block_400d6a:                                     ; preds = %block_400e2d, %block_400d23
  %1215 = phi i64 [ %.pre76, %block_400d23 ], [ %2742, %block_400e2d ]
  %MEMORY.7 = phi %struct.Memory* [ %2553, %block_400d23 ], [ %987, %block_400e2d ]
  %1216 = add i64 %1215, -1914
  %1217 = add i64 %1215, 5
  %1218 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1219 = add i64 %1218, -8
  %1220 = inttoptr i64 %1219 to i64*
  store i64 %1217, i64* %1220, align 8
  store i64 %1219, i64* %RSP, align 8, !tbaa !2428
  store i64 %1216, i64* %PC, align 8, !tbaa !2428
  %1221 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1216, %struct.Memory* %MEMORY.7)
  %1222 = load i64, i64* %RBP, align 8
  %1223 = add i64 %1222, -80
  %1224 = load i64, i64* %PC, align 8
  %1225 = add i64 %1224, 5
  store i64 %1225, i64* %PC, align 8
  %1226 = load <2 x float>, <2 x float>* %57, align 1
  %1227 = extractelement <2 x float> %1226, i32 0
  %1228 = inttoptr i64 %1223 to float*
  store float %1227, float* %1228, align 4
  %1229 = load i64, i64* %RBP, align 8
  %1230 = add i64 %1229, -64
  %1231 = load i64, i64* %PC, align 8
  %1232 = add i64 %1231, 3
  store i64 %1232, i64* %PC, align 8
  %1233 = inttoptr i64 %1230 to i32*
  %1234 = load i32, i32* %1233, align 4
  %1235 = add i32 %1234, 1
  %1236 = zext i32 %1235 to i64
  store i64 %1236, i64* %RAX, align 8, !tbaa !2428
  %1237 = icmp eq i32 %1234, -1
  %1238 = icmp eq i32 %1235, 0
  %1239 = or i1 %1237, %1238
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %17, align 1, !tbaa !2432
  %1241 = and i32 %1235, 255
  %1242 = tail call i32 @llvm.ctpop.i32(i32 %1241) #12
  %1243 = trunc i32 %1242 to i8
  %1244 = and i8 %1243, 1
  %1245 = xor i8 %1244, 1
  store i8 %1245, i8* %18, align 1, !tbaa !2446
  %1246 = xor i32 %1235, %1234
  %1247 = lshr i32 %1246, 4
  %1248 = trunc i32 %1247 to i8
  %1249 = and i8 %1248, 1
  store i8 %1249, i8* %19, align 1, !tbaa !2447
  %1250 = zext i1 %1238 to i8
  store i8 %1250, i8* %20, align 1, !tbaa !2448
  %1251 = lshr i32 %1235, 31
  %1252 = trunc i32 %1251 to i8
  store i8 %1252, i8* %21, align 1, !tbaa !2449
  %1253 = lshr i32 %1234, 31
  %1254 = xor i32 %1251, %1253
  %1255 = add nuw nsw i32 %1254, %1251
  %1256 = icmp eq i32 %1255, 2
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %22, align 1, !tbaa !2450
  %1258 = add i64 %1231, 9
  store i64 %1258, i64* %PC, align 8
  store i32 %1235, i32* %1233, align 4
  %1259 = load i64, i64* %PC, align 8
  %1260 = add i64 %1259, 11
  store i64 %1260, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400d88

block_4011cb:                                     ; preds = %block_40116d
  %1261 = add i64 %495, -3035
  %1262 = add i64 %495, 5
  %1263 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1264 = add i64 %1263, -8
  %1265 = inttoptr i64 %1264 to i64*
  store i64 %1262, i64* %1265, align 8
  store i64 %1264, i64* %RSP, align 8, !tbaa !2428
  store i64 %1261, i64* %PC, align 8, !tbaa !2428
  %1266 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1261, %struct.Memory* %1174)
  %1267 = load i64, i64* %PC, align 8
  %1268 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to i64*), align 8
  store i64 %1268, i64* %194, align 1, !tbaa !2454
  store double 0.000000e+00, double* %196, align 1, !tbaa !2454
  %1269 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to i64*), align 8
  store i64 %1269, i64* %1909, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1209, align 1, !tbaa !2454
  %1270 = load i64, i64* %RBP, align 8
  %1271 = add i64 %1270, -40
  %1272 = add i64 %1267, 21
  store i64 %1272, i64* %PC, align 8
  %1273 = load <2 x float>, <2 x float>* %57, align 1
  %1274 = load <2 x i32>, <2 x i32>* %222, align 1
  %1275 = inttoptr i64 %1271 to float*
  %1276 = load float, float* %1275, align 4
  %1277 = extractelement <2 x float> %1273, i32 0
  %1278 = fsub float %1277, %1276
  store float %1278, float* %25, align 1, !tbaa !2451
  %1279 = bitcast <2 x float> %1273 to <2 x i32>
  %1280 = extractelement <2 x i32> %1279, i32 1
  store i32 %1280, i32* %245, align 1, !tbaa !2451
  %1281 = extractelement <2 x i32> %1274, i32 0
  store i32 %1281, i32* %247, align 1, !tbaa !2451
  %1282 = extractelement <2 x i32> %1274, i32 1
  store i32 %1282, i32* %249, align 1, !tbaa !2451
  %1283 = load <2 x i32>, <2 x i32>* %1210, align 1
  %1284 = load <2 x i32>, <2 x i32>* %1211, align 1
  %1285 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1286 = sitofp i32 %1285 to float
  store float %1286, float* %1212, align 1, !tbaa !2451
  %1287 = extractelement <2 x i32> %1283, i32 1
  store i32 %1287, i32* %227, align 1, !tbaa !2451
  %1288 = extractelement <2 x i32> %1284, i32 0
  store i32 %1288, i32* %229, align 1, !tbaa !2451
  %1289 = extractelement <2 x i32> %1284, i32 1
  store i32 %1289, i32* %231, align 1, !tbaa !2451
  %1290 = load <2 x float>, <2 x float>* %57, align 1
  %1291 = load <2 x i32>, <2 x i32>* %222, align 1
  %1292 = load <2 x float>, <2 x float>* %1213, align 1
  %1293 = extractelement <2 x float> %1290, i32 0
  %1294 = extractelement <2 x float> %1292, i32 0
  %1295 = fdiv float %1293, %1294
  store float %1295, float* %25, align 1, !tbaa !2451
  %1296 = bitcast <2 x float> %1290 to <2 x i32>
  %1297 = extractelement <2 x i32> %1296, i32 1
  store i32 %1297, i32* %245, align 1, !tbaa !2451
  %1298 = extractelement <2 x i32> %1291, i32 0
  store i32 %1298, i32* %247, align 1, !tbaa !2451
  %1299 = extractelement <2 x i32> %1291, i32 1
  store i32 %1299, i32* %249, align 1, !tbaa !2451
  %1300 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1301 = sext i32 %1300 to i64
  %1302 = shl nsw i64 %1301, 2
  %1303 = add i64 %1302, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1304 = add i64 %1267, 51
  store i64 %1304, i64* %PC, align 8
  %1305 = load <2 x float>, <2 x float>* %57, align 1
  %1306 = extractelement <2 x float> %1305, i32 0
  %1307 = inttoptr i64 %1303 to float*
  store float %1306, float* %1307, align 4
  %1308 = load i64, i64* %PC, align 8
  %1309 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1310 = sext i32 %1309 to i64
  store i64 %1310, i64* %RAX, align 8, !tbaa !2428
  %1311 = shl nsw i64 %1310, 2
  %1312 = add i64 %1311, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1313 = add i64 %1308, 17
  store i64 %1313, i64* %PC, align 8
  %1314 = inttoptr i64 %1312 to i32*
  %1315 = load i32, i32* %1314, align 4
  store i32 %1315, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 %1310, i64* %RAX, align 8, !tbaa !2428
  %1316 = add i64 %1311, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1317 = add i64 %1308, 34
  store i64 %1317, i64* %PC, align 8
  %1318 = load <2 x float>, <2 x float>* %57, align 1
  %1319 = load <2 x i32>, <2 x i32>* %222, align 1
  %1320 = inttoptr i64 %1316 to float*
  %1321 = load float, float* %1320, align 4
  %1322 = extractelement <2 x float> %1318, i32 0
  %1323 = fadd float %1322, %1321
  store float %1323, float* %25, align 1, !tbaa !2451
  %1324 = bitcast <2 x float> %1318 to <2 x i32>
  %1325 = extractelement <2 x i32> %1324, i32 1
  store i32 %1325, i32* %245, align 1, !tbaa !2451
  %1326 = extractelement <2 x i32> %1319, i32 0
  store i32 %1326, i32* %247, align 1, !tbaa !2451
  %1327 = extractelement <2 x i32> %1319, i32 1
  store i32 %1327, i32* %249, align 1, !tbaa !2451
  %1328 = load i64, i64* %RBP, align 8
  %1329 = add i64 %1328, -16
  %1330 = add i64 %1308, 39
  store i64 %1330, i64* %PC, align 8
  %1331 = load <2 x float>, <2 x float>* %57, align 1
  %1332 = extractelement <2 x float> %1331, i32 0
  %1333 = inttoptr i64 %1329 to float*
  store float %1332, float* %1333, align 4
  %1334 = load i64, i64* %RBP, align 8
  %1335 = add i64 %1334, -16
  %1336 = load i64, i64* %PC, align 8
  %1337 = add i64 %1336, 5
  store i64 %1337, i64* %PC, align 8
  %1338 = inttoptr i64 %1335 to i32*
  %1339 = load i32, i32* %1338, align 4
  store i32 %1339, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1340 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1341 = sext i32 %1340 to i64
  store i64 %1341, i64* %RAX, align 8, !tbaa !2428
  %1342 = shl nsw i64 %1341, 2
  %1343 = add i64 %1342, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1344 = add i64 %1336, 22
  store i64 %1344, i64* %PC, align 8
  %1345 = load <2 x float>, <2 x float>* %57, align 1
  %1346 = extractelement <2 x float> %1345, i32 0
  %1347 = inttoptr i64 %1343 to float*
  store float %1346, float* %1347, align 4
  %1348 = load i64, i64* %RBP, align 8
  %1349 = add i64 %1348, -12
  %1350 = load i64, i64* %PC, align 8
  %1351 = add i64 %1350, 5
  store i64 %1351, i64* %PC, align 8
  %1352 = inttoptr i64 %1349 to float*
  %1353 = load float, float* %1352, align 4
  %1354 = fpext float %1353 to double
  store double %1354, double* %189, align 1, !tbaa !2454
  %1355 = add i64 %1348, -16
  %1356 = add i64 %1350, 10
  store i64 %1356, i64* %PC, align 8
  %1357 = inttoptr i64 %1355 to float*
  %1358 = load float, float* %1357, align 4
  %1359 = fpext float %1358 to double
  store double %1359, double* %232, align 1, !tbaa !2454
  %1360 = load double, double* %219, align 1
  %1361 = fmul double %1359, %1360
  store double %1361, double* %219, align 1, !tbaa !2454
  %1362 = load <2 x i32>, <2 x i32>* %1214, align 1
  %1363 = fdiv double %1354, %1361
  %.cast28 = bitcast double %1363 to <2 x i32>
  %1364 = fptrunc double %1363 to float
  store float %1364, float* %25, align 1, !tbaa !2451
  %1365 = extractelement <2 x i32> %.cast28, i32 1
  store i32 %1365, i32* %245, align 1, !tbaa !2451
  %1366 = extractelement <2 x i32> %1362, i32 0
  store i32 %1366, i32* %247, align 1, !tbaa !2451
  %1367 = extractelement <2 x i32> %1362, i32 1
  store i32 %1367, i32* %249, align 1, !tbaa !2451
  %1368 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1369 = sext i32 %1368 to i64
  %1370 = shl nsw i64 %1369, 2
  %1371 = add i64 %1370, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1372 = add i64 %1350, 39
  store i64 %1372, i64* %PC, align 8
  %1373 = load <2 x float>, <2 x float>* %57, align 1
  %1374 = extractelement <2 x float> %1373, i32 0
  %1375 = inttoptr i64 %1371 to float*
  store float %1374, float* %1375, align 4
  %1376 = load i64, i64* %PC, align 8
  %1377 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1378 = sext i32 %1377 to i64
  store i64 %1378, i64* %RAX, align 8, !tbaa !2428
  %1379 = shl nsw i64 %1378, 2
  %1380 = add i64 %1379, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1381 = add i64 %1376, 17
  store i64 %1381, i64* %PC, align 8
  %1382 = inttoptr i64 %1380 to float*
  %1383 = load float, float* %1382, align 4
  %1384 = fpext float %1383 to double
  %1385 = load double, double* %193, align 1
  %1386 = fdiv double %1385, %1384
  store double %1386, double* %193, align 1, !tbaa !2454
  %1387 = bitcast double %1384 to <2 x i32>
  %1388 = load <2 x i32>, <2 x i32>* %222, align 1
  %1389 = fptrunc double %1386 to float
  store float %1389, float* %25, align 1, !tbaa !2451
  %1390 = extractelement <2 x i32> %1387, i32 1
  store i32 %1390, i32* %245, align 1, !tbaa !2451
  %1391 = extractelement <2 x i32> %1388, i32 0
  store i32 %1391, i32* %247, align 1, !tbaa !2451
  %1392 = extractelement <2 x i32> %1388, i32 1
  store i32 %1392, i32* %249, align 1, !tbaa !2451
  store i64 %1378, i64* %RAX, align 8, !tbaa !2428
  %1393 = add i64 %1379, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1394 = add i64 %1376, 42
  store i64 %1394, i64* %PC, align 8
  %1395 = load <2 x float>, <2 x float>* %57, align 1
  %1396 = extractelement <2 x float> %1395, i32 0
  %1397 = inttoptr i64 %1393 to float*
  store float %1396, float* %1397, align 4
  %1398 = load i64, i64* %RBP, align 8
  %1399 = add i64 %1398, -16
  %1400 = load i64, i64* %PC, align 8
  %1401 = add i64 %1400, 5
  store i64 %1401, i64* %PC, align 8
  %1402 = inttoptr i64 %1399 to i32*
  %1403 = load i32, i32* %1402, align 4
  store i32 %1403, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1404 = add i64 %1398, -8
  %1405 = add i64 %1400, 10
  store i64 %1405, i64* %PC, align 8
  %1406 = load <2 x float>, <2 x float>* %57, align 1
  %1407 = inttoptr i64 %1404 to float*
  %1408 = load float, float* %1407, align 4
  %1409 = extractelement <2 x float> %1406, i32 0
  %1410 = fdiv float %1409, %1408
  store float %1410, float* %25, align 1, !tbaa !2451
  %1411 = bitcast <2 x float> %1406 to <2 x i32>
  %1412 = extractelement <2 x i32> %1411, i32 1
  store i32 %1412, i32* %245, align 1, !tbaa !2451
  %1413 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1414 = sext i32 %1413 to i64
  %1415 = shl nsw i64 %1414, 2
  %1416 = add i64 %1415, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1417 = add i64 %1400, 27
  store i64 %1417, i64* %PC, align 8
  %1418 = load <2 x float>, <2 x float>* %57, align 1
  %1419 = extractelement <2 x float> %1418, i32 0
  %1420 = inttoptr i64 %1416 to float*
  store float %1419, float* %1420, align 4
  %1421 = load i64, i64* %PC, align 8
  %1422 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  store i32 %1422, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1423 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1424 = sext i32 %1423 to i64
  store i64 %1424, i64* %RAX, align 8, !tbaa !2428
  %1425 = shl nsw i64 %1424, 2
  %1426 = add i64 %1425, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1427 = add i64 %1421, 26
  store i64 %1427, i64* %PC, align 8
  %1428 = load <2 x float>, <2 x float>* %57, align 1
  %1429 = load <2 x i32>, <2 x i32>* %222, align 1
  %1430 = inttoptr i64 %1426 to float*
  %1431 = load float, float* %1430, align 4
  %1432 = extractelement <2 x float> %1428, i32 0
  %1433 = fadd float %1432, %1431
  store float %1433, float* %25, align 1, !tbaa !2451
  %1434 = bitcast <2 x float> %1428 to <2 x i32>
  %1435 = extractelement <2 x i32> %1434, i32 1
  store i32 %1435, i32* %245, align 1, !tbaa !2451
  %1436 = extractelement <2 x i32> %1429, i32 0
  store i32 %1436, i32* %247, align 1, !tbaa !2451
  %1437 = extractelement <2 x i32> %1429, i32 1
  store i32 %1437, i32* %249, align 1, !tbaa !2451
  %1438 = load <2 x float>, <2 x float>* %57, align 1
  %1439 = extractelement <2 x float> %1438, i32 0
  store float %1439, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %1440 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1441 = zext i32 %1440 to i64
  store i64 %1441, i64* %RDI, align 8, !tbaa !2428
  %1442 = add i64 %1421, 5572
  %1443 = add i64 %1421, 47
  %1444 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1445 = add i64 %1444, -8
  %1446 = inttoptr i64 %1445 to i64*
  store i64 %1443, i64* %1446, align 8
  store i64 %1445, i64* %RSP, align 8, !tbaa !2428
  store i64 %1442, i64* %PC, align 8, !tbaa !2428
  %1447 = tail call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* nonnull %0, i64 %1442, %struct.Memory* %1174)
  %1448 = load i64, i64* %PC, align 8
  %1449 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1450 = add i32 %1449, 1
  %1451 = zext i32 %1450 to i64
  store i64 %1451, i64* %RAX, align 8, !tbaa !2428
  %1452 = icmp eq i32 %1449, -1
  %1453 = icmp eq i32 %1450, 0
  %1454 = or i1 %1452, %1453
  %1455 = zext i1 %1454 to i8
  store i8 %1455, i8* %17, align 1, !tbaa !2432
  %1456 = and i32 %1450, 255
  %1457 = tail call i32 @llvm.ctpop.i32(i32 %1456) #12
  %1458 = trunc i32 %1457 to i8
  %1459 = and i8 %1458, 1
  %1460 = xor i8 %1459, 1
  store i8 %1460, i8* %18, align 1, !tbaa !2446
  %1461 = xor i32 %1450, %1449
  %1462 = lshr i32 %1461, 4
  %1463 = trunc i32 %1462 to i8
  %1464 = and i8 %1463, 1
  store i8 %1464, i8* %19, align 1, !tbaa !2447
  %1465 = zext i1 %1453 to i8
  store i8 %1465, i8* %20, align 1, !tbaa !2448
  %1466 = lshr i32 %1450, 31
  %1467 = trunc i32 %1466 to i8
  store i8 %1467, i8* %21, align 1, !tbaa !2449
  %1468 = lshr i32 %1449, 31
  %1469 = xor i32 %1466, %1468
  %1470 = add nuw nsw i32 %1469, %1466
  %1471 = icmp eq i32 %1470, 2
  %1472 = zext i1 %1471 to i8
  store i8 %1472, i8* %22, align 1, !tbaa !2450
  store i32 %1450, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1473 = add i64 %1448, -601
  store i64 %1473, i64* %PC, align 8, !tbaa !2428
  br label %block_401082

block_400f4a:                                     ; preds = %block_400ec4
  %1474 = add i64 %1643, -2394
  %1475 = add i64 %1643, 5
  %1476 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1477 = add i64 %1476, -8
  %1478 = inttoptr i64 %1477 to i64*
  store i64 %1475, i64* %1478, align 8
  store i64 %1477, i64* %RSP, align 8, !tbaa !2428
  store i64 %1474, i64* %PC, align 8, !tbaa !2428
  %1479 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1474, %struct.Memory* %MEMORY.11)
  %1480 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %2820, align 1, !tbaa !2453
  %1481 = load i64, i64* %RBP, align 8
  %1482 = add i64 %1481, -80
  %1483 = add i64 %1480, 18
  store i64 %1483, i64* %PC, align 8
  %1484 = load <2 x float>, <2 x float>* %57, align 1
  %1485 = inttoptr i64 %1482 to float*
  %1486 = load float, float* %1485, align 4
  %1487 = extractelement <2 x float> %1484, i32 0
  %1488 = fsub float %1487, %1486
  store float %1488, float* %25, align 1, !tbaa !2451
  %1489 = bitcast <2 x float> %1484 to <2 x i32>
  %1490 = extractelement <2 x i32> %1489, i32 1
  store i32 %1490, i32* %245, align 1, !tbaa !2451
  %1491 = add i64 %1481, -84
  %1492 = add i64 %1480, 23
  store i64 %1492, i64* %PC, align 8
  %1493 = load <2 x float>, <2 x float>* %57, align 1
  %1494 = extractelement <2 x float> %1493, i32 0
  %1495 = inttoptr i64 %1491 to float*
  store float %1494, float* %1495, align 4
  %1496 = load i64, i64* %PC, align 8
  %1497 = load i64, i64* @stderr, align 64
  store i64 %1497, i64* %RDI, align 8, !tbaa !2428
  %1498 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1499 = zext i32 %1498 to i64
  store i64 %1499, i64* %RDX, align 8, !tbaa !2428
  %1500 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1501 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1502 = extractelement <2 x i32> %1500, i32 0
  store i32 %1502, i32* %26, align 1, !tbaa !2451
  %1503 = extractelement <2 x i32> %1500, i32 1
  store i32 %1503, i32* %245, align 1, !tbaa !2451
  %1504 = extractelement <2 x i32> %1501, i32 0
  store i32 %1504, i32* %247, align 1, !tbaa !2451
  %1505 = extractelement <2 x i32> %1501, i32 1
  store i32 %1505, i32* %249, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1506 = add i64 %1496, -2678
  %1507 = add i64 %1496, 25
  %1508 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1509 = add i64 %1508, -8
  %1510 = inttoptr i64 %1509 to i64*
  store i64 %1507, i64* %1510, align 8
  store i64 %1509, i64* %RSP, align 8, !tbaa !2428
  store i64 %1506, i64* %PC, align 8, !tbaa !2428
  %1511 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.11)
  %1512 = load i64, i64* %RBP, align 8
  %1513 = add i64 %1512, -64
  %1514 = load i64, i64* %PC, align 8
  %1515 = add i64 %1514, 4
  store i64 %1515, i64* %PC, align 8
  %1516 = inttoptr i64 %1513 to i32*
  %1517 = load i32, i32* %1516, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %1518 = and i32 %1517, 255
  %1519 = tail call i32 @llvm.ctpop.i32(i32 %1518) #12
  %1520 = trunc i32 %1519 to i8
  %1521 = and i8 %1520, 1
  %1522 = xor i8 %1521, 1
  store i8 %1522, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %1523 = icmp eq i32 %1517, 0
  %1524 = zext i1 %1523 to i8
  store i8 %1524, i8* %20, align 1, !tbaa !2448
  %1525 = lshr i32 %1517, 31
  %1526 = trunc i32 %1525 to i8
  store i8 %1526, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1527 = add i64 %1512, -952
  %1528 = load i32, i32* %EAX, align 4
  %1529 = add i64 %1514, 10
  store i64 %1529, i64* %PC, align 8
  %1530 = inttoptr i64 %1527 to i32*
  store i32 %1528, i32* %1530, align 4
  %1531 = load i64, i64* %PC, align 8
  %1532 = add i64 %1531, 23
  %1533 = add i64 %1531, 6
  %1534 = load i8, i8* %21, align 1, !tbaa !2449
  %1535 = icmp ne i8 %1534, 0
  %1536 = load i8, i8* %22, align 1, !tbaa !2450
  %1537 = icmp ne i8 %1536, 0
  %1538 = xor i1 %1535, %1537
  %1539 = select i1 %1538, i64 %1533, i64 %1532
  store i64 %1539, i64* %PC, align 8, !tbaa !2428
  br i1 %1538, label %block_400f8f, label %block_400fa0

block_401546:                                     ; preds = %block_4014c0
  %1540 = add i64 %1711, -3926
  %1541 = add i64 %1711, 5
  %1542 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1543 = add i64 %1542, -8
  %1544 = inttoptr i64 %1543 to i64*
  store i64 %1541, i64* %1544, align 8
  store i64 %1543, i64* %RSP, align 8, !tbaa !2428
  store i64 %1540, i64* %PC, align 8, !tbaa !2428
  %1545 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1540, %struct.Memory* %1839)
  %1546 = load i64, i64* %RBP, align 8
  %1547 = add i64 %1546, -40
  %1548 = load i64, i64* %PC, align 8
  %1549 = add i64 %1548, 5
  store i64 %1549, i64* %PC, align 8
  %1550 = load <2 x float>, <2 x float>* %57, align 1
  %1551 = load <2 x i32>, <2 x i32>* %222, align 1
  %1552 = inttoptr i64 %1547 to float*
  %1553 = load float, float* %1552, align 4
  %1554 = extractelement <2 x float> %1550, i32 0
  %1555 = fsub float %1554, %1553
  store float %1555, float* %25, align 1, !tbaa !2451
  %1556 = bitcast <2 x float> %1550 to <2 x i32>
  %1557 = extractelement <2 x i32> %1556, i32 1
  store i32 %1557, i32* %245, align 1, !tbaa !2451
  %1558 = extractelement <2 x i32> %1551, i32 0
  store i32 %1558, i32* %247, align 1, !tbaa !2451
  %1559 = extractelement <2 x i32> %1551, i32 1
  store i32 %1559, i32* %249, align 1, !tbaa !2451
  %1560 = add i64 %1546, -44
  %1561 = add i64 %1548, 10
  store i64 %1561, i64* %PC, align 8
  %1562 = load <2 x float>, <2 x float>* %57, align 1
  %1563 = load <2 x i32>, <2 x i32>* %222, align 1
  %1564 = inttoptr i64 %1560 to float*
  %1565 = load float, float* %1564, align 4
  %1566 = extractelement <2 x float> %1562, i32 0
  %1567 = fsub float %1566, %1565
  store float %1567, float* %25, align 1, !tbaa !2451
  %1568 = bitcast <2 x float> %1562 to <2 x i32>
  %1569 = extractelement <2 x i32> %1568, i32 1
  store i32 %1569, i32* %245, align 1, !tbaa !2451
  %1570 = extractelement <2 x i32> %1563, i32 0
  store i32 %1570, i32* %247, align 1, !tbaa !2451
  %1571 = extractelement <2 x i32> %1563, i32 1
  store i32 %1571, i32* %249, align 1, !tbaa !2451
  %1572 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1573 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1574 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1575 = sitofp i32 %1574 to float
  store float %1575, float* %2113, align 1, !tbaa !2451
  %1576 = extractelement <2 x i32> %1572, i32 1
  store i32 %1576, i32* %1912, align 1, !tbaa !2451
  %1577 = extractelement <2 x i32> %1573, i32 0
  store i32 %1577, i32* %1913, align 1, !tbaa !2451
  %1578 = extractelement <2 x i32> %1573, i32 1
  store i32 %1578, i32* %1915, align 1, !tbaa !2451
  %1579 = load <2 x float>, <2 x float>* %57, align 1
  %1580 = load <2 x i32>, <2 x i32>* %222, align 1
  %1581 = load <2 x float>, <2 x float>* %2206, align 1
  %1582 = extractelement <2 x float> %1579, i32 0
  %1583 = extractelement <2 x float> %1581, i32 0
  %1584 = fdiv float %1582, %1583
  store float %1584, float* %25, align 1, !tbaa !2451
  %1585 = bitcast <2 x float> %1579 to <2 x i32>
  %1586 = extractelement <2 x i32> %1585, i32 1
  store i32 %1586, i32* %245, align 1, !tbaa !2451
  %1587 = extractelement <2 x i32> %1580, i32 0
  store i32 %1587, i32* %247, align 1, !tbaa !2451
  %1588 = extractelement <2 x i32> %1580, i32 1
  store i32 %1588, i32* %249, align 1, !tbaa !2451
  %1589 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1590 = sext i32 %1589 to i64
  store i64 %1590, i64* %RAX, align 8, !tbaa !2428
  %1591 = shl nsw i64 %1590, 2
  %1592 = add i64 %1591, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1593 = add i64 %1548, 40
  store i64 %1593, i64* %PC, align 8
  %1594 = load <2 x float>, <2 x float>* %57, align 1
  %1595 = extractelement <2 x float> %1594, i32 0
  %1596 = inttoptr i64 %1592 to float*
  store float %1595, float* %1596, align 4
  %1597 = load i64, i64* %PC, align 8
  %1598 = add i64 %1597, -3971
  %1599 = add i64 %1597, 5
  %1600 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1601 = add i64 %1600, -8
  %1602 = inttoptr i64 %1601 to i64*
  store i64 %1599, i64* %1602, align 8
  store i64 %1601, i64* %RSP, align 8, !tbaa !2428
  store i64 %1598, i64* %PC, align 8, !tbaa !2428
  %1603 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1598, %struct.Memory* %1839)
  %1604 = load i64, i64* %RBP, align 8
  %1605 = add i64 %1604, -40
  %1606 = load i64, i64* %PC, align 8
  %1607 = add i64 %1606, 5
  store i64 %1607, i64* %PC, align 8
  %1608 = load <2 x float>, <2 x float>* %57, align 1
  %1609 = extractelement <2 x float> %1608, i32 0
  %1610 = inttoptr i64 %1605 to float*
  store float %1609, float* %1610, align 4
  %1611 = load i64, i64* %PC, align 8
  %1612 = add i64 %1611, 11
  store i64 %1612, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_401588

block_400ec4:                                     ; preds = %block_400ea6, %block_400ed8
  %1613 = phi i32 [ 0, %block_400ea6 ], [ %1041, %block_400ed8 ]
  %1614 = phi i64 [ %2103, %block_400ea6 ], [ %1064, %block_400ed8 ]
  %1615 = zext i32 %1613 to i64
  store i64 %1615, i64* %RAX, align 8, !tbaa !2428
  %1616 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1617 = sub i32 %1613, %1616
  %1618 = icmp ult i32 %1613, %1616
  %1619 = zext i1 %1618 to i8
  store i8 %1619, i8* %17, align 1, !tbaa !2432
  %1620 = and i32 %1617, 255
  %1621 = tail call i32 @llvm.ctpop.i32(i32 %1620) #12
  %1622 = trunc i32 %1621 to i8
  %1623 = and i8 %1622, 1
  %1624 = xor i8 %1623, 1
  store i8 %1624, i8* %18, align 1, !tbaa !2446
  %1625 = xor i32 %1616, %1613
  %1626 = xor i32 %1625, %1617
  %1627 = lshr i32 %1626, 4
  %1628 = trunc i32 %1627 to i8
  %1629 = and i8 %1628, 1
  store i8 %1629, i8* %19, align 1, !tbaa !2447
  %1630 = icmp eq i32 %1617, 0
  %1631 = zext i1 %1630 to i8
  store i8 %1631, i8* %20, align 1, !tbaa !2448
  %1632 = lshr i32 %1617, 31
  %1633 = trunc i32 %1632 to i8
  store i8 %1633, i8* %21, align 1, !tbaa !2449
  %1634 = lshr i32 %1613, 31
  %1635 = lshr i32 %1616, 31
  %1636 = xor i32 %1635, %1634
  %1637 = xor i32 %1632, %1634
  %1638 = add nuw nsw i32 %1637, %1636
  %1639 = icmp eq i32 %1638, 2
  %1640 = zext i1 %1639 to i8
  store i8 %1640, i8* %22, align 1, !tbaa !2450
  %1641 = icmp ne i8 %1633, 0
  %1642 = xor i1 %1641, %1639
  %.v97 = select i1 %1642, i64 20, i64 134
  %1643 = add i64 %1614, %.v97
  store i64 %1643, i64* %PC, align 8, !tbaa !2428
  br i1 %1642, label %block_400ed8, label %block_400f4a

block_4008ff:                                     ; preds = %block_4008eb
  %1644 = sext i32 %564 to i64
  store i64 %1644, i64* %RAX, align 8, !tbaa !2428
  %1645 = shl nsw i64 %1644, 2
  %1646 = add i64 %1645, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1647 = add i64 %594, 17
  store i64 %1647, i64* %PC, align 8
  %1648 = inttoptr i64 %1646 to i32*
  %1649 = load i32, i32* %1648, align 4
  store i32 %1649, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1650 = add i64 %1645, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %1651 = add i64 %594, 34
  store i64 %1651, i64* %PC, align 8
  %1652 = load <2 x float>, <2 x float>* %57, align 1
  %1653 = extractelement <2 x float> %1652, i32 0
  %1654 = inttoptr i64 %1650 to float*
  store float %1653, float* %1654, align 4
  %1655 = load i64, i64* %PC, align 8
  %1656 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1657 = add i32 %1656, 1
  %1658 = zext i32 %1657 to i64
  store i64 %1658, i64* %RAX, align 8, !tbaa !2428
  %1659 = icmp eq i32 %1656, -1
  %1660 = icmp eq i32 %1657, 0
  %1661 = or i1 %1659, %1660
  %1662 = zext i1 %1661 to i8
  store i8 %1662, i8* %17, align 1, !tbaa !2432
  %1663 = and i32 %1657, 255
  %1664 = tail call i32 @llvm.ctpop.i32(i32 %1663) #12
  %1665 = trunc i32 %1664 to i8
  %1666 = and i8 %1665, 1
  %1667 = xor i8 %1666, 1
  store i8 %1667, i8* %18, align 1, !tbaa !2446
  %1668 = xor i32 %1657, %1656
  %1669 = lshr i32 %1668, 4
  %1670 = trunc i32 %1669 to i8
  %1671 = and i8 %1670, 1
  store i8 %1671, i8* %19, align 1, !tbaa !2447
  %1672 = zext i1 %1660 to i8
  store i8 %1672, i8* %20, align 1, !tbaa !2448
  %1673 = lshr i32 %1657, 31
  %1674 = trunc i32 %1673 to i8
  store i8 %1674, i8* %21, align 1, !tbaa !2449
  %1675 = lshr i32 %1656, 31
  %1676 = xor i32 %1673, %1675
  %1677 = add nuw nsw i32 %1676, %1673
  %1678 = icmp eq i32 %1677, 2
  %1679 = zext i1 %1678 to i8
  store i8 %1679, i8* %22, align 1, !tbaa !2450
  store i32 %1657, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1680 = add i64 %1655, -54
  store i64 %1680, i64* %PC, align 8, !tbaa !2428
  br label %block_4008eb

block_4014c0:                                     ; preds = %block_4014ab, %block_4014d4
  %1681 = phi i32 [ 0, %block_4014ab ], [ %1101, %block_4014d4 ]
  %1682 = phi i64 [ %1726, %block_4014ab ], [ %1124, %block_4014d4 ]
  %1683 = zext i32 %1681 to i64
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %1684 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1685 = sub i32 %1681, %1684
  %1686 = icmp ult i32 %1681, %1684
  %1687 = zext i1 %1686 to i8
  store i8 %1687, i8* %17, align 1, !tbaa !2432
  %1688 = and i32 %1685, 255
  %1689 = tail call i32 @llvm.ctpop.i32(i32 %1688) #12
  %1690 = trunc i32 %1689 to i8
  %1691 = and i8 %1690, 1
  %1692 = xor i8 %1691, 1
  store i8 %1692, i8* %18, align 1, !tbaa !2446
  %1693 = xor i32 %1684, %1681
  %1694 = xor i32 %1693, %1685
  %1695 = lshr i32 %1694, 4
  %1696 = trunc i32 %1695 to i8
  %1697 = and i8 %1696, 1
  store i8 %1697, i8* %19, align 1, !tbaa !2447
  %1698 = icmp eq i32 %1685, 0
  %1699 = zext i1 %1698 to i8
  store i8 %1699, i8* %20, align 1, !tbaa !2448
  %1700 = lshr i32 %1685, 31
  %1701 = trunc i32 %1700 to i8
  store i8 %1701, i8* %21, align 1, !tbaa !2449
  %1702 = lshr i32 %1681, 31
  %1703 = lshr i32 %1684, 31
  %1704 = xor i32 %1703, %1702
  %1705 = xor i32 %1700, %1702
  %1706 = add nuw nsw i32 %1705, %1704
  %1707 = icmp eq i32 %1706, 2
  %1708 = zext i1 %1707 to i8
  store i8 %1708, i8* %22, align 1, !tbaa !2450
  %1709 = icmp ne i8 %1701, 0
  %1710 = xor i1 %1709, %1707
  %.v101 = select i1 %1710, i64 20, i64 134
  %1711 = add i64 %1682, %.v101
  store i64 %1711, i64* %PC, align 8, !tbaa !2428
  br i1 %1710, label %block_4014d4, label %block_401546

block_4014ab:                                     ; preds = %block_40149d
  %1712 = add i64 %2613, -3771
  %1713 = add i64 %2613, 5
  %1714 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1715 = add i64 %1714, -8
  %1716 = inttoptr i64 %1715 to i64*
  store i64 %1713, i64* %1716, align 8
  store i64 %1715, i64* %RSP, align 8, !tbaa !2428
  store i64 %1712, i64* %PC, align 8, !tbaa !2428
  %1717 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1712, %struct.Memory* %1839)
  %1718 = load i64, i64* %RBP, align 8
  %1719 = add i64 %1718, -40
  %1720 = load i64, i64* %PC, align 8
  %1721 = add i64 %1720, 5
  store i64 %1721, i64* %PC, align 8
  %1722 = load <2 x float>, <2 x float>* %57, align 1
  %1723 = extractelement <2 x float> %1722, i32 0
  %1724 = inttoptr i64 %1719 to float*
  store float %1723, float* %1724, align 4
  %1725 = load i64, i64* %PC, align 8
  %1726 = add i64 %1725, 11
  store i64 %1726, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4014c0

block_4013ba:                                     ; preds = %block_401369
  %1727 = add i64 %871, -3530
  %1728 = add i64 %871, 5
  %1729 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1730 = add i64 %1729, -8
  %1731 = inttoptr i64 %1730 to i64*
  store i64 %1728, i64* %1731, align 8
  store i64 %1730, i64* %RSP, align 8, !tbaa !2428
  store i64 %1727, i64* %PC, align 8, !tbaa !2428
  %1732 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1727, %struct.Memory* %455)
  %1733 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %1734 = bitcast %union.VectorReg* %7 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1734, align 1, !tbaa !2453
  %1735 = load i64, i64* %RBP, align 8
  %1736 = add i64 %1735, -84
  %1737 = add i64 %1733, 18
  store i64 %1737, i64* %PC, align 8
  %1738 = load <2 x float>, <2 x float>* %57, align 1
  %1739 = extractelement <2 x float> %1738, i32 0
  %1740 = inttoptr i64 %1736 to float*
  store float %1739, float* %1740, align 4
  %1741 = load i64, i64* %RBP, align 8
  %1742 = add i64 %1741, -84
  %1743 = load i64, i64* %PC, align 8
  %1744 = add i64 %1743, 5
  store i64 %1744, i64* %PC, align 8
  %1745 = inttoptr i64 %1742 to i32*
  %1746 = load i32, i32* %1745, align 4
  store i32 %1746, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1747 = add i64 %1741, -80
  %1748 = add i64 %1743, 10
  store i64 %1748, i64* %PC, align 8
  %1749 = load <2 x float>, <2 x float>* %57, align 1
  %1750 = load <2 x i32>, <2 x i32>* %222, align 1
  %1751 = inttoptr i64 %1747 to float*
  %1752 = load float, float* %1751, align 4
  %1753 = extractelement <2 x float> %1749, i32 0
  %1754 = fsub float %1753, %1752
  store float %1754, float* %25, align 1, !tbaa !2451
  %1755 = bitcast <2 x float> %1749 to <2 x i32>
  %1756 = extractelement <2 x i32> %1755, i32 1
  store i32 %1756, i32* %245, align 1, !tbaa !2451
  %1757 = extractelement <2 x i32> %1750, i32 0
  store i32 %1757, i32* %247, align 1, !tbaa !2451
  %1758 = extractelement <2 x i32> %1750, i32 1
  store i32 %1758, i32* %249, align 1, !tbaa !2451
  %1759 = add i64 %1741, -76
  %1760 = add i64 %1743, 15
  store i64 %1760, i64* %PC, align 8
  %1761 = load <2 x float>, <2 x float>* %57, align 1
  %1762 = extractelement <2 x float> %1761, i32 0
  %1763 = inttoptr i64 %1759 to float*
  store float %1762, float* %1763, align 4
  %1764 = load i64, i64* %RBP, align 8
  %1765 = add i64 %1764, -76
  %1766 = load i64, i64* %PC, align 8
  %1767 = add i64 %1766, 5
  store i64 %1767, i64* %PC, align 8
  %1768 = inttoptr i64 %1765 to float*
  %1769 = load float, float* %1768, align 4
  %1770 = fpext float %1769 to double
  store double %1770, double* %189, align 1, !tbaa !2454
  %1771 = add i64 %1764, -68
  %1772 = add i64 %1766, 10
  store i64 %1772, i64* %PC, align 8
  %1773 = inttoptr i64 %1771 to i32*
  %1774 = load i32, i32* %1773, align 4
  %1775 = sitofp i32 %1774 to double
  store double %1775, double* %219, align 1, !tbaa !2454
  %1776 = fdiv double %1770, %1775
  %.cast31 = bitcast double %1776 to <2 x i32>
  %1777 = fptrunc double %1776 to float
  store float %1777, float* %25, align 1, !tbaa !2451
  %1778 = extractelement <2 x i32> %.cast31, i32 1
  store i32 %1778, i32* %245, align 1, !tbaa !2451
  %1779 = add i64 %1766, 23
  store i64 %1779, i64* %PC, align 8
  %1780 = load <2 x float>, <2 x float>* %57, align 1
  %1781 = extractelement <2 x float> %1780, i32 0
  store float %1781, float* %1768, align 4
  %1782 = load i64, i64* %PC, align 8
  %1783 = load i64, i64* @stderr, align 64
  store i64 %1783, i64* %RDI, align 8, !tbaa !2428
  %1784 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1785 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1786 = extractelement <2 x i32> %1784, i32 0
  store i32 %1786, i32* %26, align 1, !tbaa !2451
  %1787 = extractelement <2 x i32> %1784, i32 1
  store i32 %1787, i32* %245, align 1, !tbaa !2451
  %1788 = extractelement <2 x i32> %1785, i32 0
  store i32 %1788, i32* %247, align 1, !tbaa !2451
  %1789 = extractelement <2 x i32> %1785, i32 1
  store i32 %1789, i32* %249, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1790 = add i64 %1782, -3847
  %1791 = add i64 %1782, 18
  %1792 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1793 = add i64 %1792, -8
  %1794 = inttoptr i64 %1793 to i64*
  store i64 %1791, i64* %1794, align 8
  store i64 %1793, i64* %RSP, align 8, !tbaa !2428
  store i64 %1790, i64* %PC, align 8, !tbaa !2428
  %1795 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1732)
  %1796 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1797 = load i64, i64* @stderr, align 64
  store i64 %1797, i64* %RDI, align 8, !tbaa !2428
  %1798 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1799 = zext i32 %1798 to i64
  store i64 %1799, i64* %RDX, align 8, !tbaa !2428
  %1800 = load i64, i64* %RBP, align 8
  %1801 = add i64 %1800, -980
  %1802 = load i32, i32* %EAX, align 4
  %1803 = add i64 %1796, 31
  store i64 %1803, i64* %PC, align 8
  %1804 = inttoptr i64 %1801 to i32*
  store i32 %1802, i32* %1804, align 4
  %1805 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1806 = add i64 %1805, -3896
  %1807 = add i64 %1805, 7
  %1808 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1809 = add i64 %1808, -8
  %1810 = inttoptr i64 %1809 to i64*
  store i64 %1807, i64* %1810, align 8
  store i64 %1809, i64* %RSP, align 8, !tbaa !2428
  store i64 %1806, i64* %PC, align 8, !tbaa !2428
  %1811 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1795)
  %1812 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1813 = load i64, i64* @stderr, align 64
  store i64 %1813, i64* %RDI, align 8, !tbaa !2428
  %1814 = load i64, i64* %RBP, align 8
  %1815 = add i64 %1814, -984
  %1816 = load i32, i32* %EAX, align 4
  %1817 = add i64 %1812, 24
  store i64 %1817, i64* %PC, align 8
  %1818 = inttoptr i64 %1815 to i32*
  store i32 %1816, i32* %1818, align 4
  %1819 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1820 = add i64 %1819, -3927
  %1821 = add i64 %1819, 7
  %1822 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1823 = add i64 %1822, -8
  %1824 = inttoptr i64 %1823 to i64*
  store i64 %1821, i64* %1824, align 8
  store i64 %1823, i64* %RSP, align 8, !tbaa !2428
  store i64 %1820, i64* %PC, align 8, !tbaa !2428
  %1825 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1811)
  %1826 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1827 = load i64, i64* @stderr, align 64
  store i64 %1827, i64* %RDI, align 8, !tbaa !2428
  %1828 = load i64, i64* %RBP, align 8
  %1829 = add i64 %1828, -988
  %1830 = load i32, i32* %EAX, align 4
  %1831 = add i64 %1826, 24
  store i64 %1831, i64* %PC, align 8
  %1832 = inttoptr i64 %1829 to i32*
  store i32 %1830, i32* %1832, align 4
  %1833 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1834 = add i64 %1833, -3958
  %1835 = add i64 %1833, 7
  %1836 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1837 = add i64 %1836, -8
  %1838 = inttoptr i64 %1837 to i64*
  store i64 %1835, i64* %1838, align 8
  store i64 %1837, i64* %RSP, align 8, !tbaa !2428
  store i64 %1834, i64* %PC, align 8, !tbaa !2428
  %1839 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1825)
  %1840 = load i64, i64* %PC, align 8
  %1841 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1841, align 1, !tbaa !2453
  %1842 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1843 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1844 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1845 = sitofp i32 %1844 to float
  store float %1845, float* %2113, align 1, !tbaa !2451
  %1846 = extractelement <2 x i32> %1842, i32 1
  store i32 %1846, i32* %1912, align 1, !tbaa !2451
  %1847 = extractelement <2 x i32> %1843, i32 0
  store i32 %1847, i32* %1913, align 1, !tbaa !2451
  %1848 = extractelement <2 x i32> %1843, i32 1
  store i32 %1848, i32* %1915, align 1, !tbaa !2451
  %1849 = load i64, i64* %RBP, align 8
  %1850 = add i64 %1849, -76
  %1851 = add i64 %1840, 17
  store i64 %1851, i64* %PC, align 8
  %1852 = load <2 x float>, <2 x float>* %2206, align 1
  %1853 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1854 = inttoptr i64 %1850 to float*
  %1855 = load float, float* %1854, align 4
  %1856 = extractelement <2 x float> %1852, i32 0
  %1857 = fmul float %1856, %1855
  store float %1857, float* %2113, align 1, !tbaa !2451
  %1858 = bitcast <2 x float> %1852 to <2 x i32>
  %1859 = extractelement <2 x i32> %1858, i32 1
  store i32 %1859, i32* %1912, align 1, !tbaa !2451
  %1860 = extractelement <2 x i32> %1853, i32 0
  store i32 %1860, i32* %1913, align 1, !tbaa !2451
  %1861 = extractelement <2 x i32> %1853, i32 1
  store i32 %1861, i32* %1915, align 1, !tbaa !2451
  %1862 = add i64 %1849, -44
  %1863 = add i64 %1840, 22
  store i64 %1863, i64* %PC, align 8
  %1864 = load <2 x float>, <2 x float>* %2206, align 1
  %1865 = extractelement <2 x float> %1864, i32 0
  %1866 = inttoptr i64 %1862 to float*
  store float %1865, float* %1866, align 4
  %1867 = load i64, i64* %PC, align 8
  %1868 = load <2 x float>, <2 x float>* %57, align 1
  %1869 = extractelement <2 x float> %1868, i32 0
  store float %1869, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1870 = load i64, i64* %RBP, align 8
  %1871 = add i64 %1870, -992
  %1872 = load i32, i32* %EAX, align 4
  %1873 = add i64 %1867, 26
  store i64 %1873, i64* %PC, align 8
  %1874 = inttoptr i64 %1871 to i32*
  store i32 %1872, i32* %1874, align 4
  %.pre82 = load i64, i64* %PC, align 8
  %.pre83 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1875 = bitcast i64* %29 to <2 x i32>*
  br label %block_40149d

block_4009c7:                                     ; preds = %block_40096d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %1876 = zext i32 %384 to i64
  store i64 %1876, i64* %RDI, align 8, !tbaa !2428
  store i64 %1876, i64* %RDX, align 8, !tbaa !2428
  %1877 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1878 = zext i32 %1877 to i64
  store i64 %1878, i64* %RCX, align 8, !tbaa !2428
  %1879 = add i64 %411, 5625
  %1880 = add i64 %411, 56
  %1881 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1882 = add i64 %1881, -8
  %1883 = inttoptr i64 %1882 to i64*
  store i64 %1880, i64* %1883, align 8
  store i64 %1882, i64* %RSP, align 8, !tbaa !2428
  store i64 %1879, i64* %PC, align 8, !tbaa !2428
  %1884 = tail call %struct.Memory* @sub_401fc0_dmxpy_renamed_(%struct.State* nonnull %0, i64 %1879, %struct.Memory* %2627)
  %1885 = load i64, i64* %PC, align 8
  %1886 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1886, align 1, !tbaa !2453
  %1887 = load i64, i64* %RBP, align 8
  %1888 = add i64 %1887, -28
  %1889 = add i64 %1885, 8
  store i64 %1889, i64* %PC, align 8
  %1890 = load <2 x float>, <2 x float>* %57, align 1
  %1891 = extractelement <2 x float> %1890, i32 0
  %1892 = inttoptr i64 %1888 to float*
  store float %1891, float* %1892, align 4
  %1893 = load i64, i64* %RBP, align 8
  %1894 = add i64 %1893, -24
  %1895 = load i64, i64* %PC, align 8
  %1896 = add i64 %1895, 5
  store i64 %1896, i64* %PC, align 8
  %1897 = load <2 x float>, <2 x float>* %57, align 1
  %1898 = extractelement <2 x float> %1897, i32 0
  %1899 = inttoptr i64 %1894 to float*
  store float %1898, float* %1899, align 4
  %1900 = load i64, i64* %PC, align 8
  %1901 = add i64 %1900, 11
  store i64 %1901, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1902 = bitcast %union.VectorReg* %8 to i32*
  %1903 = getelementptr inbounds i8, i8* %2616, i64 4
  %1904 = bitcast i8* %1903 to i32*
  %1905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %1906 = bitcast i64* %1905 to i32*
  %1907 = getelementptr inbounds i8, i8* %2616, i64 12
  %1908 = bitcast i8* %1907 to i32*
  %1909 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  %1910 = bitcast %union.VectorReg* %7 to i32*
  %1911 = getelementptr inbounds i8, i8* %2615, i64 4
  %1912 = bitcast i8* %1911 to i32*
  %1913 = bitcast i64* %195 to i32*
  %1914 = getelementptr inbounds i8, i8* %2615, i64 12
  %1915 = bitcast i8* %1914 to i32*
  br label %block_400a17

block_401588:                                     ; preds = %block_40159c, %block_401546
  %1916 = phi i32 [ %2833, %block_40159c ], [ 0, %block_401546 ]
  %1917 = phi i64 [ %2856, %block_40159c ], [ %1612, %block_401546 ]
  %1918 = zext i32 %1916 to i64
  store i64 %1918, i64* %RAX, align 8, !tbaa !2428
  %1919 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1920 = sub i32 %1916, %1919
  %1921 = icmp ult i32 %1916, %1919
  %1922 = zext i1 %1921 to i8
  store i8 %1922, i8* %17, align 1, !tbaa !2432
  %1923 = and i32 %1920, 255
  %1924 = tail call i32 @llvm.ctpop.i32(i32 %1923) #12
  %1925 = trunc i32 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = xor i8 %1926, 1
  store i8 %1927, i8* %18, align 1, !tbaa !2446
  %1928 = xor i32 %1919, %1916
  %1929 = xor i32 %1928, %1920
  %1930 = lshr i32 %1929, 4
  %1931 = trunc i32 %1930 to i8
  %1932 = and i8 %1931, 1
  store i8 %1932, i8* %19, align 1, !tbaa !2447
  %1933 = icmp eq i32 %1920, 0
  %1934 = zext i1 %1933 to i8
  store i8 %1934, i8* %20, align 1, !tbaa !2448
  %1935 = lshr i32 %1920, 31
  %1936 = trunc i32 %1935 to i8
  store i8 %1936, i8* %21, align 1, !tbaa !2449
  %1937 = lshr i32 %1916, 31
  %1938 = lshr i32 %1919, 31
  %1939 = xor i32 %1938, %1937
  %1940 = xor i32 %1935, %1937
  %1941 = add nuw nsw i32 %1940, %1939
  %1942 = icmp eq i32 %1941, 2
  %1943 = zext i1 %1942 to i8
  store i8 %1943, i8* %22, align 1, !tbaa !2450
  %1944 = icmp ne i8 %1936, 0
  %1945 = xor i1 %1944, %1942
  %.v102 = select i1 %1945, i64 20, i64 94
  %1946 = add i64 %1917, %.v102
  store i64 %1946, i64* %PC, align 8, !tbaa !2428
  br i1 %1945, label %block_40159c, label %block_4015e6

block_400a2b:                                     ; preds = %block_400a17
  %1947 = load i64, i64* %RBP, align 8
  %1948 = add i64 %1947, -28
  %1949 = add i64 %2710, 5
  store i64 %1949, i64* %PC, align 8
  %1950 = inttoptr i64 %1948 to float*
  %1951 = load float, float* %1950, align 4
  %1952 = fpext float %1951 to double
  store double %1952, double* %189, align 1, !tbaa !2454
  %1953 = sext i32 %2680 to i64
  store i64 %1953, i64* %RAX, align 8, !tbaa !2428
  %1954 = shl nsw i64 %1953, 2
  %1955 = add i64 %1954, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1956 = add i64 %2710, 22
  store i64 %1956, i64* %PC, align 8
  %1957 = inttoptr i64 %1955 to float*
  %1958 = load float, float* %1957, align 4
  %1959 = fpext float %1958 to double
  %1960 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %1961 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %1962 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %1963 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %1960, i32* %1902, align 1, !tbaa !2451
  store i32 %1961, i32* %1904, align 1, !tbaa !2451
  store i32 %1962, i32* %1906, align 1, !tbaa !2451
  store i32 %1963, i32* %1908, align 1, !tbaa !2451
  %1964 = bitcast double %1959 to i64
  %1965 = load i64, i64* %195, align 1
  %1966 = load i64, i64* %1909, align 1
  %1967 = load i64, i64* %1905, align 1
  %1968 = and i64 %1966, %1964
  %1969 = and i64 %1967, %1965
  %1970 = trunc i64 %1968 to i32
  %1971 = lshr i64 %1968, 32
  %1972 = trunc i64 %1971 to i32
  store i32 %1970, i32* %1910, align 1, !tbaa !2453
  store i32 %1972, i32* %1912, align 1, !tbaa !2453
  %1973 = trunc i64 %1969 to i32
  store i32 %1973, i32* %1913, align 1, !tbaa !2453
  %1974 = lshr i64 %1969, 32
  %1975 = trunc i64 %1974 to i32
  store i32 %1975, i32* %1915, align 1, !tbaa !2453
  %1976 = add i64 %2710, 37
  store i64 %1976, i64* %PC, align 8
  %1977 = load double, double* %193, align 1
  %1978 = fcmp uno double %1952, %1977
  br i1 %1978, label %1979, label %1989

; <label>:1979:                                   ; preds = %block_400a2b
  %1980 = fadd double %1952, %1977
  %1981 = bitcast double %1980 to i64
  %1982 = and i64 %1981, 9221120237041090560
  %1983 = icmp eq i64 %1982, 9218868437227405312
  %1984 = and i64 %1981, 2251799813685247
  %1985 = icmp ne i64 %1984, 0
  %1986 = and i1 %1983, %1985
  br i1 %1986, label %1987, label %1995

; <label>:1987:                                   ; preds = %1979
  %1988 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1976, %struct.Memory* %MEMORY.15) #13
  %.pre84 = load i64, i64* %PC, align 8
  %.pre85 = load i8, i8* %17, align 1, !tbaa !2432
  %.pre86 = load i8, i8* %20, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:1989:                                   ; preds = %block_400a2b
  %1990 = fcmp ogt double %1952, %1977
  br i1 %1990, label %1995, label %1991

; <label>:1991:                                   ; preds = %1989
  %1992 = fcmp olt double %1952, %1977
  br i1 %1992, label %1995, label %1993

; <label>:1993:                                   ; preds = %1991
  %1994 = fcmp oeq double %1952, %1977
  br i1 %1994, label %1995, label %1999

; <label>:1995:                                   ; preds = %1993, %1991, %1989, %1979
  %1996 = phi i8 [ 0, %1989 ], [ 0, %1991 ], [ 1, %1993 ], [ 1, %1979 ]
  %1997 = phi i8 [ 0, %1989 ], [ 0, %1991 ], [ 0, %1993 ], [ 1, %1979 ]
  %1998 = phi i8 [ 0, %1989 ], [ 1, %1991 ], [ 0, %1993 ], [ 1, %1979 ]
  store i8 %1996, i8* %20, align 1, !tbaa !2456
  store i8 %1997, i8* %18, align 1, !tbaa !2456
  store i8 %1998, i8* %17, align 1, !tbaa !2456
  br label %1999

; <label>:1999:                                   ; preds = %1995, %1993
  %2000 = phi i8 [ %1996, %1995 ], [ %2698, %1993 ]
  %2001 = phi i8 [ %1998, %1995 ], [ %2686, %1993 ]
  store i8 0, i8* %22, align 1, !tbaa !2456
  store i8 0, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %1999, %1987
  %2002 = phi i8 [ %.pre86, %1987 ], [ %2000, %1999 ]
  %2003 = phi i8 [ %.pre85, %1987 ], [ %2001, %1999 ]
  %2004 = phi i64 [ %.pre84, %1987 ], [ %1976, %1999 ]
  %2005 = phi %struct.Memory* [ %1988, %1987 ], [ %MEMORY.15, %1999 ]
  %2006 = or i8 %2002, %2003
  %2007 = icmp ne i8 %2006, 0
  %.v105 = select i1 %2007, i64 24, i64 6
  %2008 = add i64 %2004, %.v105
  store i64 %2008, i64* %PC, align 8, !tbaa !2428
  br i1 %2007, label %block_400a68, label %block_400a56

block_4010b9:                                     ; preds = %block_4010a5
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2009 = load i64, i64* %RBP, align 8
  %2010 = add i64 %2009, -20
  store i64 %2010, i64* %R8, align 8, !tbaa !2428
  %2011 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2012 = zext i32 %2011 to i64
  store i64 %2012, i64* %RSI, align 8, !tbaa !2428
  %2013 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2014 = zext i32 %2013 to i64
  store i64 %2014, i64* %RDX, align 8, !tbaa !2428
  %2015 = add i64 %902, 1703
  %2016 = add i64 %902, 43
  %2017 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2018 = add i64 %2017, -8
  %2019 = inttoptr i64 %2018 to i64*
  store i64 %2016, i64* %2019, align 8
  store i64 %2018, i64* %RSP, align 8, !tbaa !2428
  store i64 %2015, i64* %PC, align 8, !tbaa !2428
  %2020 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %2015, %struct.Memory* %1174)
  %2021 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2022 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2023 = zext i32 %2022 to i64
  store i64 %2023, i64* %RSI, align 8, !tbaa !2428
  %2024 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2025 = zext i32 %2024 to i64
  store i64 %2025, i64* %RDX, align 8, !tbaa !2428
  %2026 = add i64 %2021, 2124
  %2027 = add i64 %2021, 49
  %2028 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2029 = add i64 %2028, -8
  %2030 = inttoptr i64 %2029 to i64*
  store i64 %2027, i64* %2030, align 8
  store i64 %2029, i64* %RSP, align 8, !tbaa !2428
  store i64 %2026, i64* %PC, align 8, !tbaa !2428
  %2031 = tail call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* nonnull %0, i64 %2026, %struct.Memory* %1174)
  %2032 = load i64, i64* %PC, align 8
  %2033 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2034 = add i32 %2033, 1
  %2035 = zext i32 %2034 to i64
  store i64 %2035, i64* %RAX, align 8, !tbaa !2428
  %2036 = icmp eq i32 %2033, -1
  %2037 = icmp eq i32 %2034, 0
  %2038 = or i1 %2036, %2037
  %2039 = zext i1 %2038 to i8
  store i8 %2039, i8* %17, align 1, !tbaa !2432
  %2040 = and i32 %2034, 255
  %2041 = tail call i32 @llvm.ctpop.i32(i32 %2040) #12
  %2042 = trunc i32 %2041 to i8
  %2043 = and i8 %2042, 1
  %2044 = xor i8 %2043, 1
  store i8 %2044, i8* %18, align 1, !tbaa !2446
  %2045 = xor i32 %2034, %2033
  %2046 = lshr i32 %2045, 4
  %2047 = trunc i32 %2046 to i8
  %2048 = and i8 %2047, 1
  store i8 %2048, i8* %19, align 1, !tbaa !2447
  %2049 = zext i1 %2037 to i8
  store i8 %2049, i8* %20, align 1, !tbaa !2448
  %2050 = lshr i32 %2034, 31
  %2051 = trunc i32 %2050 to i8
  store i8 %2051, i8* %21, align 1, !tbaa !2449
  %2052 = lshr i32 %2033, 31
  %2053 = xor i32 %2050, %2052
  %2054 = add nuw nsw i32 %2053, %2050
  %2055 = icmp eq i32 %2054, 2
  %2056 = zext i1 %2055 to i8
  store i8 %2056, i8* %22, align 1, !tbaa !2450
  store i32 %2034, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2057 = add i64 %2032, -112
  store i64 %2057, i64* %PC, align 8, !tbaa !2428
  br label %block_4010a5

block_400ea6:                                     ; preds = %block_400e3c, %block_400fa0
  %2058 = phi i64 [ %.pre78, %block_400e3c ], [ %2587, %block_400fa0 ]
  %MEMORY.11 = phi %struct.Memory* [ %2808, %block_400e3c ], [ %1511, %block_400fa0 ]
  %2059 = add i64 %2058, -2230
  %2060 = add i64 %2058, 5
  %2061 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2062 = add i64 %2061, -8
  %2063 = inttoptr i64 %2062 to i64*
  store i64 %2060, i64* %2063, align 8
  store i64 %2062, i64* %RSP, align 8, !tbaa !2428
  store i64 %2059, i64* %PC, align 8, !tbaa !2428
  %2064 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %2059, %struct.Memory* %MEMORY.11)
  %2065 = load i64, i64* %RBP, align 8
  %2066 = add i64 %2065, -80
  %2067 = load i64, i64* %PC, align 8
  %2068 = add i64 %2067, 5
  store i64 %2068, i64* %PC, align 8
  %2069 = load <2 x float>, <2 x float>* %57, align 1
  %2070 = extractelement <2 x float> %2069, i32 0
  %2071 = inttoptr i64 %2066 to float*
  store float %2070, float* %2071, align 4
  %2072 = load i64, i64* %RBP, align 8
  %2073 = add i64 %2072, -64
  %2074 = load i64, i64* %PC, align 8
  %2075 = add i64 %2074, 3
  store i64 %2075, i64* %PC, align 8
  %2076 = inttoptr i64 %2073 to i32*
  %2077 = load i32, i32* %2076, align 4
  %2078 = add i32 %2077, 1
  %2079 = zext i32 %2078 to i64
  store i64 %2079, i64* %RAX, align 8, !tbaa !2428
  %2080 = icmp eq i32 %2077, -1
  %2081 = icmp eq i32 %2078, 0
  %2082 = or i1 %2080, %2081
  %2083 = zext i1 %2082 to i8
  store i8 %2083, i8* %17, align 1, !tbaa !2432
  %2084 = and i32 %2078, 255
  %2085 = tail call i32 @llvm.ctpop.i32(i32 %2084) #12
  %2086 = trunc i32 %2085 to i8
  %2087 = and i8 %2086, 1
  %2088 = xor i8 %2087, 1
  store i8 %2088, i8* %18, align 1, !tbaa !2446
  %2089 = xor i32 %2078, %2077
  %2090 = lshr i32 %2089, 4
  %2091 = trunc i32 %2090 to i8
  %2092 = and i8 %2091, 1
  store i8 %2092, i8* %19, align 1, !tbaa !2447
  %2093 = zext i1 %2081 to i8
  store i8 %2093, i8* %20, align 1, !tbaa !2448
  %2094 = lshr i32 %2078, 31
  %2095 = trunc i32 %2094 to i8
  store i8 %2095, i8* %21, align 1, !tbaa !2449
  %2096 = lshr i32 %2077, 31
  %2097 = xor i32 %2094, %2096
  %2098 = add nuw nsw i32 %2097, %2094
  %2099 = icmp eq i32 %2098, 2
  %2100 = zext i1 %2099 to i8
  store i8 %2100, i8* %22, align 1, !tbaa !2450
  %2101 = add i64 %2074, 9
  store i64 %2101, i64* %PC, align 8
  store i32 %2078, i32* %2076, align 4
  %2102 = load i64, i64* %PC, align 8
  %2103 = add i64 %2102, 11
  store i64 %2103, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400ec4

block_400b25:                                     ; preds = %block_400a17
  %2104 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 12) to i32*), align 4
  store i32 %2104, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2105 = add i64 %2710, 7323
  %2106 = add i64 %2710, 13
  %2107 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2108 = add i64 %2107, -8
  %2109 = inttoptr i64 %2108 to i64*
  store i64 %2106, i64* %2109, align 8
  store i64 %2108, i64* %RSP, align 8, !tbaa !2428
  store i64 %2105, i64* %PC, align 8, !tbaa !2428
  %2110 = tail call %struct.Memory* @sub_4027c0_epslon_renamed_(%struct.State* nonnull %0, i64 %2105, %struct.Memory* %MEMORY.15)
  %2111 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %2112 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 12) to i32*), align 4
  %2113 = bitcast %union.VectorReg* %7 to float*
  store i32 %2112, i32* %1910, align 1, !tbaa !2451
  %2114 = bitcast i8* %1911 to float*
  store float 0.000000e+00, float* %2114, align 1, !tbaa !2451
  %2115 = bitcast i64* %195 to float*
  store float 0.000000e+00, float* %2115, align 1, !tbaa !2451
  %2116 = bitcast i8* %1914 to float*
  store float 0.000000e+00, float* %2116, align 1, !tbaa !2451
  %2117 = load i64, i64* %RBP, align 8
  %2118 = add i64 %2117, -36
  %2119 = add i64 %2111, 23
  store i64 %2119, i64* %PC, align 8
  %2120 = load <2 x float>, <2 x float>* %57, align 1
  %2121 = extractelement <2 x float> %2120, i32 0
  %2122 = inttoptr i64 %2118 to float*
  store float %2121, float* %2122, align 4
  %2123 = load i64, i64* %RBP, align 8
  %2124 = add i64 %2123, -28
  %2125 = load i64, i64* %PC, align 8
  %2126 = add i64 %2125, 5
  store i64 %2126, i64* %PC, align 8
  %2127 = inttoptr i64 %2124 to i32*
  %2128 = load i32, i32* %2127, align 4
  store i32 %2128, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2129 = bitcast %union.VectorReg* %8 to <2 x i32>*
  %2130 = load <2 x i32>, <2 x i32>* %2129, align 1
  %2131 = bitcast i64* %1905 to <2 x i32>*
  %2132 = load <2 x i32>, <2 x i32>* %2131, align 1
  %2133 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2134 = sitofp i32 %2133 to float
  %2135 = bitcast %union.VectorReg* %8 to float*
  store float %2134, float* %2135, align 1, !tbaa !2451
  %2136 = extractelement <2 x i32> %2130, i32 1
  store i32 %2136, i32* %1904, align 1, !tbaa !2451
  %2137 = extractelement <2 x i32> %2132, i32 0
  store i32 %2137, i32* %1906, align 1, !tbaa !2451
  %2138 = extractelement <2 x i32> %2132, i32 1
  store i32 %2138, i32* %1908, align 1, !tbaa !2451
  %2139 = add i64 %2123, -20
  %2140 = add i64 %2125, 19
  store i64 %2140, i64* %PC, align 8
  %2141 = bitcast %union.VectorReg* %8 to <2 x float>*
  %2142 = load <2 x float>, <2 x float>* %2141, align 1
  %2143 = load <2 x i32>, <2 x i32>* %2131, align 1
  %2144 = inttoptr i64 %2139 to float*
  %2145 = load float, float* %2144, align 4
  %2146 = extractelement <2 x float> %2142, i32 0
  %2147 = fmul float %2146, %2145
  store float %2147, float* %2135, align 1, !tbaa !2451
  %2148 = bitcast <2 x float> %2142 to <2 x i32>
  %2149 = extractelement <2 x i32> %2148, i32 1
  store i32 %2149, i32* %1904, align 1, !tbaa !2451
  %2150 = extractelement <2 x i32> %2143, i32 0
  store i32 %2150, i32* %1906, align 1, !tbaa !2451
  %2151 = extractelement <2 x i32> %2143, i32 1
  store i32 %2151, i32* %1908, align 1, !tbaa !2451
  %2152 = add i64 %2123, -24
  %2153 = add i64 %2125, 24
  store i64 %2153, i64* %PC, align 8
  %2154 = load <2 x float>, <2 x float>* %2141, align 1
  %2155 = load <2 x i32>, <2 x i32>* %2131, align 1
  %2156 = inttoptr i64 %2152 to float*
  %2157 = load float, float* %2156, align 4
  %2158 = extractelement <2 x float> %2154, i32 0
  %2159 = fmul float %2158, %2157
  store float %2159, float* %2135, align 1, !tbaa !2451
  %2160 = bitcast <2 x float> %2154 to <2 x i32>
  %2161 = extractelement <2 x i32> %2160, i32 1
  store i32 %2161, i32* %1904, align 1, !tbaa !2451
  %2162 = extractelement <2 x i32> %2155, i32 0
  store i32 %2162, i32* %1906, align 1, !tbaa !2451
  %2163 = extractelement <2 x i32> %2155, i32 1
  store i32 %2163, i32* %1908, align 1, !tbaa !2451
  %2164 = add i64 %2123, -36
  %2165 = add i64 %2125, 29
  store i64 %2165, i64* %PC, align 8
  %2166 = load <2 x float>, <2 x float>* %2141, align 1
  %2167 = load <2 x i32>, <2 x i32>* %2131, align 1
  %2168 = inttoptr i64 %2164 to float*
  %2169 = load float, float* %2168, align 4
  %2170 = extractelement <2 x float> %2166, i32 0
  %2171 = fmul float %2170, %2169
  store float %2171, float* %2135, align 1, !tbaa !2451
  %2172 = bitcast <2 x float> %2166 to <2 x i32>
  %2173 = extractelement <2 x i32> %2172, i32 1
  store i32 %2173, i32* %1904, align 1, !tbaa !2451
  %2174 = extractelement <2 x i32> %2167, i32 0
  store i32 %2174, i32* %1906, align 1, !tbaa !2451
  %2175 = extractelement <2 x i32> %2167, i32 1
  store i32 %2175, i32* %1908, align 1, !tbaa !2451
  %2176 = load <2 x float>, <2 x float>* %57, align 1
  %2177 = load <2 x i32>, <2 x i32>* %222, align 1
  %2178 = load <2 x float>, <2 x float>* %2141, align 1
  %2179 = extractelement <2 x float> %2176, i32 0
  %2180 = extractelement <2 x float> %2178, i32 0
  %2181 = fdiv float %2179, %2180
  store float %2181, float* %25, align 1, !tbaa !2451
  %2182 = bitcast <2 x float> %2176 to <2 x i32>
  %2183 = extractelement <2 x i32> %2182, i32 1
  store i32 %2183, i32* %245, align 1, !tbaa !2451
  %2184 = extractelement <2 x i32> %2177, i32 0
  store i32 %2184, i32* %247, align 1, !tbaa !2451
  %2185 = extractelement <2 x i32> %2177, i32 1
  store i32 %2185, i32* %249, align 1, !tbaa !2451
  %2186 = add i64 %2123, -32
  %2187 = add i64 %2125, 38
  store i64 %2187, i64* %PC, align 8
  %2188 = load <2 x float>, <2 x float>* %57, align 1
  %2189 = extractelement <2 x float> %2188, i32 0
  %2190 = inttoptr i64 %2186 to float*
  store float %2189, float* %2190, align 4
  %2191 = load i64, i64* %RBP, align 8
  %2192 = add i64 %2191, -36
  %2193 = load i64, i64* %PC, align 8
  %2194 = add i64 %2193, 5
  store i64 %2194, i64* %PC, align 8
  %2195 = inttoptr i64 %2192 to i32*
  %2196 = load i32, i32* %2195, align 4
  store i32 %2196, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %2197 = add i64 %2191, -48
  %2198 = add i64 %2193, 10
  store i64 %2198, i64* %PC, align 8
  %2199 = load <2 x float>, <2 x float>* %57, align 1
  %2200 = extractelement <2 x float> %2199, i32 0
  %2201 = inttoptr i64 %2197 to float*
  store float %2200, float* %2201, align 4
  %2202 = load i64, i64* %PC, align 8
  %2203 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to i32*), align 16
  store i32 %2203, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2204 = load <2 x float>, <2 x float>* %57, align 1
  %2205 = load <2 x i32>, <2 x i32>* %222, align 1
  %2206 = bitcast %union.VectorReg* %7 to <2 x float>*
  %2207 = load <2 x float>, <2 x float>* %2206, align 1
  %2208 = extractelement <2 x float> %2204, i32 0
  %2209 = extractelement <2 x float> %2207, i32 0
  %2210 = fsub float %2208, %2209
  store float %2210, float* %25, align 1, !tbaa !2451
  %2211 = bitcast <2 x float> %2204 to <2 x i32>
  %2212 = extractelement <2 x i32> %2211, i32 1
  store i32 %2212, i32* %245, align 1, !tbaa !2451
  %2213 = extractelement <2 x i32> %2205, i32 0
  store i32 %2213, i32* %247, align 1, !tbaa !2451
  %2214 = extractelement <2 x i32> %2205, i32 1
  store i32 %2214, i32* %249, align 1, !tbaa !2451
  %2215 = load i64, i64* %RBP, align 8
  %2216 = add i64 %2215, -52
  %2217 = add i64 %2202, 18
  store i64 %2217, i64* %PC, align 8
  %2218 = load <2 x float>, <2 x float>* %57, align 1
  %2219 = extractelement <2 x float> %2218, i32 0
  %2220 = inttoptr i64 %2216 to float*
  store float %2219, float* %2220, align 4
  %2221 = load i64, i64* %PC, align 8
  %2222 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2223 = add i32 %2222, -1
  %2224 = zext i32 %2223 to i64
  store i64 %2224, i64* %RAX, align 8, !tbaa !2428
  %2225 = icmp eq i32 %2222, 0
  %2226 = zext i1 %2225 to i8
  store i8 %2226, i8* %17, align 1, !tbaa !2432
  %2227 = and i32 %2223, 255
  %2228 = tail call i32 @llvm.ctpop.i32(i32 %2227) #12
  %2229 = trunc i32 %2228 to i8
  %2230 = and i8 %2229, 1
  %2231 = xor i8 %2230, 1
  store i8 %2231, i8* %18, align 1, !tbaa !2446
  %2232 = xor i32 %2223, %2222
  %2233 = lshr i32 %2232, 4
  %2234 = trunc i32 %2233 to i8
  %2235 = and i8 %2234, 1
  store i8 %2235, i8* %19, align 1, !tbaa !2447
  %2236 = icmp eq i32 %2223, 0
  %2237 = zext i1 %2236 to i8
  store i8 %2237, i8* %20, align 1, !tbaa !2448
  %2238 = lshr i32 %2223, 31
  %2239 = trunc i32 %2238 to i8
  store i8 %2239, i8* %21, align 1, !tbaa !2449
  %2240 = lshr i32 %2222, 31
  %2241 = xor i32 %2238, %2240
  %2242 = add nuw nsw i32 %2241, %2240
  %2243 = icmp eq i32 %2242, 2
  %2244 = zext i1 %2243 to i8
  store i8 %2244, i8* %22, align 1, !tbaa !2450
  %2245 = sext i32 %2223 to i64
  store i64 %2245, i64* %RCX, align 8, !tbaa !2428
  %2246 = shl nsw i64 %2245, 2
  %2247 = add i64 %2246, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2248 = add i64 %2221, 22
  store i64 %2248, i64* %PC, align 8
  %2249 = inttoptr i64 %2247 to i32*
  %2250 = load i32, i32* %2249, align 4
  store i32 %2250, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2251 = load <2 x float>, <2 x float>* %57, align 1
  %2252 = load <2 x i32>, <2 x i32>* %222, align 1
  %2253 = load <2 x float>, <2 x float>* %2206, align 1
  %2254 = extractelement <2 x float> %2251, i32 0
  %2255 = extractelement <2 x float> %2253, i32 0
  %2256 = fsub float %2254, %2255
  store float %2256, float* %25, align 1, !tbaa !2451
  %2257 = bitcast <2 x float> %2251 to <2 x i32>
  %2258 = extractelement <2 x i32> %2257, i32 1
  store i32 %2258, i32* %245, align 1, !tbaa !2451
  %2259 = extractelement <2 x i32> %2252, i32 0
  store i32 %2259, i32* %247, align 1, !tbaa !2451
  %2260 = extractelement <2 x i32> %2252, i32 1
  store i32 %2260, i32* %249, align 1, !tbaa !2451
  %2261 = load i64, i64* %RBP, align 8
  %2262 = add i64 %2261, -56
  %2263 = add i64 %2221, 31
  store i64 %2263, i64* %PC, align 8
  %2264 = load <2 x float>, <2 x float>* %57, align 1
  %2265 = extractelement <2 x float> %2264, i32 0
  %2266 = inttoptr i64 %2262 to float*
  store float %2265, float* %2266, align 4
  %2267 = load i64, i64* %PC, align 8
  %2268 = load i64, i64* @stderr, align 64
  store i64 %2268, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2269 = add i64 %2267, -1722
  %2270 = add i64 %2267, 15
  %2271 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2272 = add i64 %2271, -8
  %2273 = inttoptr i64 %2272 to i64*
  store i64 %2270, i64* %2273, align 8
  store i64 %2272, i64* %RSP, align 8, !tbaa !2428
  store i64 %2269, i64* %PC, align 8, !tbaa !2428
  %2274 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2110)
  %2275 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %2276 = load i64, i64* @stderr, align 64
  store i64 %2276, i64* %RDI, align 8, !tbaa !2428
  %2277 = load i64, i64* %RBP, align 8
  %2278 = add i64 %2277, -908
  %2279 = load i32, i32* %EAX, align 4
  %2280 = add i64 %2275, 24
  store i64 %2280, i64* %PC, align 8
  %2281 = inttoptr i64 %2278 to i32*
  store i32 %2279, i32* %2281, align 4
  %2282 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2283 = add i64 %2282, -1761
  %2284 = add i64 %2282, 7
  %2285 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2286 = add i64 %2285, -8
  %2287 = inttoptr i64 %2286 to i64*
  store i64 %2284, i64* %2287, align 8
  store i64 %2286, i64* %RSP, align 8, !tbaa !2428
  store i64 %2283, i64* %PC, align 8, !tbaa !2428
  %2288 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2274)
  %2289 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %2290 = load i64, i64* @stderr, align 64
  store i64 %2290, i64* %RDI, align 8, !tbaa !2428
  %2291 = load i64, i64* %RBP, align 8
  %2292 = add i64 %2291, -32
  %2293 = add i64 %2289, 23
  store i64 %2293, i64* %PC, align 8
  %2294 = inttoptr i64 %2292 to float*
  %2295 = load float, float* %2294, align 4
  %2296 = fpext float %2295 to double
  store double %2296, double* %189, align 1, !tbaa !2454
  %2297 = add i64 %2291, -28
  %2298 = add i64 %2289, 28
  store i64 %2298, i64* %PC, align 8
  %2299 = inttoptr i64 %2297 to float*
  %2300 = load float, float* %2299, align 4
  %2301 = fpext float %2300 to double
  store double %2301, double* %193, align 1, !tbaa !2454
  %2302 = add i64 %2291, -48
  %2303 = add i64 %2289, 33
  store i64 %2303, i64* %PC, align 8
  %2304 = inttoptr i64 %2302 to float*
  %2305 = load float, float* %2304, align 4
  %2306 = fpext float %2305 to double
  store double %2306, double* %219, align 1, !tbaa !2454
  %2307 = add i64 %2291, -52
  %2308 = add i64 %2289, 38
  store i64 %2308, i64* %PC, align 8
  %2309 = inttoptr i64 %2307 to float*
  %2310 = load float, float* %2309, align 4
  %2311 = fpext float %2310 to double
  store double %2311, double* %232, align 1, !tbaa !2454
  %2312 = add i64 %2291, -56
  %2313 = add i64 %2289, 43
  store i64 %2313, i64* %PC, align 8
  %2314 = inttoptr i64 %2312 to float*
  %2315 = load float, float* %2314, align 4
  %2316 = fpext float %2315 to double
  %2317 = bitcast %union.VectorReg* %2614 to double*
  store double %2316, double* %2317, align 1, !tbaa !2454
  %2318 = add i64 %2291, -912
  %2319 = load i32, i32* %EAX, align 4
  %2320 = add i64 %2289, 49
  store i64 %2320, i64* %PC, align 8
  %2321 = inttoptr i64 %2318 to i32*
  store i32 %2319, i32* %2321, align 4
  %2322 = load i64, i64* %PC, align 8
  store i8 5, i8* %AL, align 1, !tbaa !2456
  %2323 = add i64 %2322, -1817
  %2324 = add i64 %2322, 7
  %2325 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2326 = add i64 %2325, -8
  %2327 = inttoptr i64 %2326 to i64*
  store i64 %2324, i64* %2327, align 8
  store i64 %2326, i64* %RSP, align 8, !tbaa !2428
  store i64 %2323, i64* %PC, align 8, !tbaa !2428
  %2328 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2288)
  %2329 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %2330 = load i64, i64* @stderr, align 64
  store i64 %2330, i64* %RDI, align 8, !tbaa !2428
  %2331 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2332 = zext i32 %2331 to i64
  store i64 %2332, i64* %RDX, align 8, !tbaa !2428
  %2333 = load i64, i64* %RBP, align 8
  %2334 = add i64 %2333, -916
  %2335 = load i32, i32* %EAX, align 4
  %2336 = add i64 %2329, 31
  store i64 %2336, i64* %PC, align 8
  %2337 = inttoptr i64 %2334 to i32*
  store i32 %2335, i32* %2337, align 4
  %2338 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2339 = add i64 %2338, -1855
  %2340 = add i64 %2338, 7
  %2341 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2342 = add i64 %2341, -8
  %2343 = inttoptr i64 %2342 to i64*
  store i64 %2340, i64* %2343, align 8
  store i64 %2342, i64* %RSP, align 8, !tbaa !2428
  store i64 %2339, i64* %PC, align 8, !tbaa !2428
  %2344 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2328)
  %2345 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %2346 = load i64, i64* @stderr, align 64
  store i64 %2346, i64* %RDI, align 8, !tbaa !2428
  %2347 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2348 = zext i32 %2347 to i64
  store i64 %2348, i64* %RDX, align 8, !tbaa !2428
  %2349 = load i64, i64* %RBP, align 8
  %2350 = add i64 %2349, -920
  %2351 = load i32, i32* %EAX, align 4
  %2352 = add i64 %2345, 31
  store i64 %2352, i64* %PC, align 8
  %2353 = inttoptr i64 %2350 to i32*
  store i32 %2351, i32* %2353, align 4
  %2354 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2355 = add i64 %2354, -1893
  %2356 = add i64 %2354, 7
  %2357 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2358 = add i64 %2357, -8
  %2359 = inttoptr i64 %2358 to i64*
  store i64 %2356, i64* %2359, align 8
  store i64 %2358, i64* %RSP, align 8, !tbaa !2428
  store i64 %2355, i64* %PC, align 8, !tbaa !2428
  %2360 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2344)
  %2361 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %2362 = load i64, i64* @stderr, align 64
  store i64 %2362, i64* %RDI, align 8, !tbaa !2428
  %2363 = load i64, i64* %RBP, align 8
  %2364 = add i64 %2363, -924
  %2365 = load i32, i32* %EAX, align 4
  %2366 = add i64 %2361, 24
  store i64 %2366, i64* %PC, align 8
  %2367 = inttoptr i64 %2364 to i32*
  store i32 %2365, i32* %2367, align 4
  %2368 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2369 = add i64 %2368, -1924
  %2370 = add i64 %2368, 7
  %2371 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2372 = add i64 %2371, -8
  %2373 = inttoptr i64 %2372 to i64*
  store i64 %2370, i64* %2373, align 8
  store i64 %2372, i64* %RSP, align 8, !tbaa !2428
  store i64 %2369, i64* %PC, align 8, !tbaa !2428
  %2374 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2360)
  %2375 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %2376 = load i64, i64* @stderr, align 64
  store i64 %2376, i64* %RDI, align 8, !tbaa !2428
  %2377 = load i64, i64* %RBP, align 8
  %2378 = add i64 %2377, -928
  %2379 = load i32, i32* %EAX, align 4
  %2380 = add i64 %2375, 24
  store i64 %2380, i64* %PC, align 8
  %2381 = inttoptr i64 %2378 to i32*
  store i32 %2379, i32* %2381, align 4
  %2382 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2383 = add i64 %2382, -1955
  %2384 = add i64 %2382, 7
  %2385 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2386 = add i64 %2385, -8
  %2387 = inttoptr i64 %2386 to i64*
  store i64 %2384, i64* %2387, align 8
  store i64 %2386, i64* %RSP, align 8, !tbaa !2428
  store i64 %2383, i64* %PC, align 8, !tbaa !2428
  %2388 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2374)
  %2389 = load i64, i64* %PC, align 8
  %2390 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2390, align 1, !tbaa !2453
  %2391 = load i64, i64* %RBP, align 8
  %2392 = add i64 %2391, -16
  %2393 = add i64 %2389, 8
  store i64 %2393, i64* %PC, align 8
  %2394 = inttoptr i64 %2392 to i32*
  %2395 = load i32, i32* %2394, align 4
  store i32 %2395, i32* %1910, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2114, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2115, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2116, align 1, !tbaa !2451
  %2396 = load <2 x float>, <2 x float>* %2206, align 1
  %2397 = extractelement <2 x float> %2396, i32 0
  store float %2397, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*), align 8
  %2398 = add i64 %2389, 22
  store i64 %2398, i64* %PC, align 8
  %2399 = inttoptr i64 %2392 to float*
  %2400 = load float, float* %2399, align 4
  %2401 = fpext float %2400 to double
  store double %2401, double* %193, align 1, !tbaa !2454
  %2402 = add i64 %2389, 26
  store i64 %2402, i64* %PC, align 8
  %2403 = load double, double* %189, align 1
  %2404 = fcmp uno double %2401, %2403
  br i1 %2404, label %2405, label %2415

; <label>:2405:                                   ; preds = %block_400b25
  %2406 = fadd double %2401, %2403
  %2407 = bitcast double %2406 to i64
  %2408 = and i64 %2407, 9221120237041090560
  %2409 = icmp eq i64 %2408, 9218868437227405312
  %2410 = and i64 %2407, 2251799813685247
  %2411 = icmp ne i64 %2410, 0
  %2412 = and i1 %2409, %2411
  br i1 %2412, label %2413, label %2421

; <label>:2413:                                   ; preds = %2405
  %2414 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2402, %struct.Memory* %2388) #13
  %.pre = load i64, i64* %RBP, align 8
  %.pre74 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:2415:                                   ; preds = %block_400b25
  %2416 = fcmp ogt double %2401, %2403
  br i1 %2416, label %2421, label %2417

; <label>:2417:                                   ; preds = %2415
  %2418 = fcmp olt double %2401, %2403
  br i1 %2418, label %2421, label %2419

; <label>:2419:                                   ; preds = %2417
  %2420 = fcmp oeq double %2401, %2403
  br i1 %2420, label %2421, label %2425

; <label>:2421:                                   ; preds = %2419, %2417, %2415, %2405
  %2422 = phi i8 [ 0, %2415 ], [ 0, %2417 ], [ 1, %2419 ], [ 1, %2405 ]
  %2423 = phi i8 [ 0, %2415 ], [ 0, %2417 ], [ 0, %2419 ], [ 1, %2405 ]
  %2424 = phi i8 [ 0, %2415 ], [ 1, %2417 ], [ 0, %2419 ], [ 1, %2405 ]
  store i8 %2422, i8* %20, align 1, !tbaa !2456
  store i8 %2423, i8* %18, align 1, !tbaa !2456
  store i8 %2424, i8* %17, align 1, !tbaa !2456
  br label %2425

; <label>:2425:                                   ; preds = %2421, %2419
  store i8 0, i8* %22, align 1, !tbaa !2456
  store i8 0, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %2425, %2413
  %2426 = phi i64 [ %.pre74, %2413 ], [ %2402, %2425 ]
  %2427 = phi i64 [ %.pre, %2413 ], [ %2391, %2425 ]
  %2428 = phi %struct.Memory* [ %2414, %2413 ], [ %2388, %2425 ]
  %2429 = add i64 %2427, -932
  %2430 = load i32, i32* %EAX, align 4
  %2431 = add i64 %2426, 6
  store i64 %2431, i64* %PC, align 8
  %2432 = inttoptr i64 %2429 to i32*
  store i32 %2430, i32* %2432, align 4
  %2433 = load i64, i64* %PC, align 8
  %2434 = load i8, i8* %17, align 1, !tbaa !2432
  %2435 = load i8, i8* %20, align 1, !tbaa !2448
  %2436 = or i8 %2435, %2434
  %2437 = icmp ne i8 %2436, 0
  %.v124 = select i1 %2437, i64 84, i64 6
  %2438 = add i64 %2433, %.v124
  store i64 %2438, i64* %PC, align 8, !tbaa !2428
  br i1 %2437, label %block_400d0e, label %block_400cc0

block_400e24:                                     ; preds = %block_400dd9
  %2439 = load i64, i64* %RBP, align 8
  %2440 = add i64 %2439, -68
  %2441 = add i64 %1015, 3
  store i64 %2441, i64* %PC, align 8
  %2442 = inttoptr i64 %2440 to i32*
  %2443 = load i32, i32* %2442, align 4
  %2444 = shl i32 %2443, 1
  %2445 = icmp slt i32 %2443, 0
  %2446 = icmp slt i32 %2444, 0
  %2447 = xor i1 %2445, %2446
  %2448 = zext i32 %2444 to i64
  store i64 %2448, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %2443, 31
  %2449 = trunc i32 %.lobit to i8
  store i8 %2449, i8* %17, align 1, !tbaa !2456
  %2450 = and i32 %2444, 254
  %2451 = tail call i32 @llvm.ctpop.i32(i32 %2450) #12
  %2452 = trunc i32 %2451 to i8
  %2453 = and i8 %2452, 1
  %2454 = xor i8 %2453, 1
  store i8 %2454, i8* %18, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  %2455 = icmp eq i32 %2444, 0
  %2456 = zext i1 %2455 to i8
  store i8 %2456, i8* %20, align 1, !tbaa !2456
  %2457 = lshr i32 %2443, 30
  %2458 = trunc i32 %2457 to i8
  %2459 = and i8 %2458, 1
  store i8 %2459, i8* %21, align 1, !tbaa !2456
  %2460 = zext i1 %2447 to i8
  store i8 %2460, i8* %22, align 1, !tbaa !2456
  %2461 = add i64 %1015, 9
  store i64 %2461, i64* %PC, align 8
  store i32 %2444, i32* %2442, align 4
  %.pre77 = load i64, i64* %PC, align 8
  br label %block_400e2d

block_40170c:                                     ; preds = %block_40149d
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %2462 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2462, align 1, !tbaa !2453
  %2463 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 48) to i64*), align 16
  %2464 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %2465 = fpext float %2464 to double
  %2466 = bitcast i64 %2463 to double
  %2467 = fdiv double %2465, %2466
  store double %2467, double* %219, align 1, !tbaa !2454
  %.cast35 = bitcast i64 %2463 to <2 x i32>
  %2468 = fptrunc double %2467 to float
  store float %2468, float* %2113, align 1, !tbaa !2451
  %2469 = extractelement <2 x i32> %.cast35, i32 1
  store i32 %2469, i32* %1912, align 1, !tbaa !2451
  store i32 0, i32* %1913, align 1, !tbaa !2451
  store i32 0, i32* %1915, align 1, !tbaa !2451
  %2470 = load <2 x float>, <2 x float>* %2206, align 1
  %2471 = extractelement <2 x float> %2470, i32 0
  store float %2471, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %2472 = load i64, i64* @stderr, align 64
  store i64 %2472, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %2473 = add i64 %2613, -4636
  %2474 = add i64 %2613, 62
  %2475 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2476 = add i64 %2475, -8
  %2477 = inttoptr i64 %2476 to i64*
  store i64 %2474, i64* %2477, align 8
  store i64 %2476, i64* %RSP, align 8, !tbaa !2428
  store i64 %2473, i64* %PC, align 8, !tbaa !2428
  %2478 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1839)
  %2479 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %2480 = load i64, i64* %RBP, align 8
  %2481 = add i64 %2480, -996
  %2482 = load i32, i32* %EAX, align 4
  %2483 = add i64 %2479, 8
  store i64 %2483, i64* %PC, align 8
  %2484 = inttoptr i64 %2481 to i32*
  store i32 %2482, i32* %2484, align 4
  %2485 = load i32, i32* %ECX, align 4
  %2486 = zext i32 %2485 to i64
  %2487 = load i64, i64* %PC, align 8
  store i64 %2486, i64* %RAX, align 8, !tbaa !2428
  %2488 = load i64, i64* %RSP, align 8
  %2489 = add i64 %2488, 1008
  store i64 %2489, i64* %RSP, align 8, !tbaa !2428
  %2490 = icmp ugt i64 %2488, -1009
  %2491 = zext i1 %2490 to i8
  store i8 %2491, i8* %17, align 1, !tbaa !2432
  %2492 = trunc i64 %2489 to i32
  %2493 = and i32 %2492, 255
  %2494 = tail call i32 @llvm.ctpop.i32(i32 %2493) #12
  %2495 = trunc i32 %2494 to i8
  %2496 = and i8 %2495, 1
  %2497 = xor i8 %2496, 1
  store i8 %2497, i8* %18, align 1, !tbaa !2446
  %2498 = xor i64 %2488, 16
  %2499 = xor i64 %2498, %2489
  %2500 = lshr i64 %2499, 4
  %2501 = trunc i64 %2500 to i8
  %2502 = and i8 %2501, 1
  store i8 %2502, i8* %19, align 1, !tbaa !2447
  %2503 = icmp eq i64 %2489, 0
  %2504 = zext i1 %2503 to i8
  store i8 %2504, i8* %20, align 1, !tbaa !2448
  %2505 = lshr i64 %2489, 63
  %2506 = trunc i64 %2505 to i8
  store i8 %2506, i8* %21, align 1, !tbaa !2449
  %2507 = lshr i64 %2488, 63
  %2508 = xor i64 %2505, %2507
  %2509 = add nuw nsw i64 %2508, %2505
  %2510 = icmp eq i64 %2509, 2
  %2511 = zext i1 %2510 to i8
  store i8 %2511, i8* %22, align 1, !tbaa !2450
  %2512 = add i64 %2487, 10
  store i64 %2512, i64* %PC, align 8
  %2513 = add i64 %2488, 1016
  %2514 = inttoptr i64 %2489 to i64*
  %2515 = load i64, i64* %2514, align 8
  store i64 %2515, i64* %RBP, align 8, !tbaa !2428
  store i64 %2513, i64* %RSP, align 8, !tbaa !2428
  %2516 = add i64 %2487, 11
  store i64 %2516, i64* %PC, align 8
  %2517 = inttoptr i64 %2513 to i64*
  %2518 = load i64, i64* %2517, align 8
  store i64 %2518, i64* %PC, align 8, !tbaa !2428
  %2519 = add i64 %2488, 1024
  store i64 %2519, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2478

block_400d23:                                     ; preds = %block_400d0e, %block_400cc0
  %2520 = phi i64 [ %.pre75, %block_400d0e ], [ %498, %block_400cc0 ]
  %2521 = phi i64 [ %2765, %block_400d0e ], [ %524, %block_400cc0 ]
  %.pre-phi = bitcast %union.VectorReg* %7 to <2 x i32>*
  %.pre-phi92 = bitcast i64* %195 to <2 x i32>*
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2522 = add i64 %2520, -16
  %2523 = add i64 %2521, 7
  store i64 %2523, i64* %PC, align 8
  %2524 = inttoptr i64 %2522 to i32*
  %2525 = load i32, i32* %2524, align 4
  store i32 %2525, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2526 = add i64 %2520, -8
  %2527 = add i64 %2521, 12
  store i64 %2527, i64* %PC, align 8
  %2528 = load <2 x float>, <2 x float>* %57, align 1
  %2529 = load <2 x i32>, <2 x i32>* %222, align 1
  %2530 = inttoptr i64 %2526 to float*
  %2531 = load float, float* %2530, align 4
  %2532 = extractelement <2 x float> %2528, i32 0
  %2533 = fdiv float %2532, %2531
  store float %2533, float* %25, align 1, !tbaa !2451
  %2534 = bitcast <2 x float> %2528 to <2 x i32>
  %2535 = extractelement <2 x i32> %2534, i32 1
  store i32 %2535, i32* %245, align 1, !tbaa !2451
  %2536 = extractelement <2 x i32> %2529, i32 0
  store i32 %2536, i32* %247, align 1, !tbaa !2451
  %2537 = extractelement <2 x i32> %2529, i32 1
  store i32 %2537, i32* %249, align 1, !tbaa !2451
  %2538 = load <2 x float>, <2 x float>* %57, align 1
  %2539 = extractelement <2 x float> %2538, i32 0
  store float %2539, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*), align 4
  %2540 = add i64 %2521, 6989
  %2541 = add i64 %2521, 26
  %2542 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2543 = add i64 %2542, -8
  %2544 = inttoptr i64 %2543 to i64*
  store i64 %2541, i64* %2544, align 8
  store i64 %2543, i64* %RSP, align 8, !tbaa !2428
  store i64 %2540, i64* %PC, align 8, !tbaa !2428
  %2545 = tail call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* nonnull %0, i64 %2540, %struct.Memory* %2428)
  %2546 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %2547 = load i64, i64* @stderr, align 64
  store i64 %2547, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2548 = add i64 %2546, -2125
  %2549 = add i64 %2546, 25
  %2550 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2551 = add i64 %2550, -8
  %2552 = inttoptr i64 %2551 to i64*
  store i64 %2549, i64* %2552, align 8
  store i64 %2551, i64* %RSP, align 8, !tbaa !2428
  store i64 %2548, i64* %PC, align 8, !tbaa !2428
  %2553 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2545)
  %2554 = load i64, i64* %RBP, align 8
  %2555 = add i64 %2554, -64
  %2556 = load i64, i64* %PC, align 8
  %2557 = add i64 %2556, 7
  store i64 %2557, i64* %PC, align 8
  %2558 = inttoptr i64 %2555 to i32*
  store i32 -3, i32* %2558, align 4
  %2559 = load i64, i64* %RBP, align 8
  %2560 = add i64 %2559, -68
  %2561 = load i64, i64* %PC, align 8
  %2562 = add i64 %2561, 7
  store i64 %2562, i64* %PC, align 8
  %2563 = inttoptr i64 %2560 to i32*
  store i32 100, i32* %2563, align 4
  %2564 = load i64, i64* %RBP, align 8
  %2565 = add i64 %2564, -936
  %2566 = load i32, i32* %EAX, align 4
  %2567 = load i64, i64* %PC, align 8
  %2568 = add i64 %2567, 6
  store i64 %2568, i64* %PC, align 8
  %2569 = inttoptr i64 %2565 to i32*
  store i32 %2566, i32* %2569, align 4
  %.pre76 = load i64, i64* %PC, align 8
  %2570 = bitcast %union.VectorReg* %7 to <4 x i32>*
  br label %block_400d6a

block_400fa0:                                     ; preds = %block_400f4a, %block_400f8f
  %2571 = phi i64 [ %1532, %block_400f4a ], [ %2761, %block_400f8f ]
  %2572 = load i64, i64* %RBP, align 8
  %2573 = add i64 %2572, -64
  %2574 = add i64 %2571, 9
  store i64 %2574, i64* %PC, align 8
  %2575 = inttoptr i64 %2573 to i32*
  %2576 = load i32, i32* %2575, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %2577 = and i32 %2576, 255
  %2578 = tail call i32 @llvm.ctpop.i32(i32 %2577) #12
  %2579 = trunc i32 %2578 to i8
  %2580 = and i8 %2579, 1
  %2581 = xor i8 %2580, 1
  store i8 %2581, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2582 = icmp eq i32 %2576, 0
  %2583 = zext i1 %2582 to i8
  store i8 %2583, i8* %20, align 1, !tbaa !2448
  %2584 = lshr i32 %2576, 31
  %2585 = trunc i32 %2584 to i8
  store i8 %2585, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %2586 = icmp ne i8 %2585, 0
  %.v36 = select i1 %2586, i64 -259, i64 6
  %2587 = add i64 %2574, %.v36
  store i64 %2587, i64* %PC, align 8, !tbaa !2428
  br i1 %2586, label %block_400ea6, label %block_400fd3

block_40149d:                                     ; preds = %block_4013ba, %block_4015e6
  %2588 = phi i32 [ %.pre83, %block_4013ba ], [ %813, %block_4015e6 ]
  %2589 = phi i64 [ %.pre82, %block_4013ba ], [ %836, %block_4015e6 ]
  %2590 = add i32 %2588, -12
  %2591 = icmp ult i32 %2588, 12
  %2592 = zext i1 %2591 to i8
  store i8 %2592, i8* %17, align 1, !tbaa !2432
  %2593 = and i32 %2590, 255
  %2594 = tail call i32 @llvm.ctpop.i32(i32 %2593) #12
  %2595 = trunc i32 %2594 to i8
  %2596 = and i8 %2595, 1
  %2597 = xor i8 %2596, 1
  store i8 %2597, i8* %18, align 1, !tbaa !2446
  %2598 = xor i32 %2590, %2588
  %2599 = lshr i32 %2598, 4
  %2600 = trunc i32 %2599 to i8
  %2601 = and i8 %2600, 1
  store i8 %2601, i8* %19, align 1, !tbaa !2447
  %2602 = icmp eq i32 %2590, 0
  %2603 = zext i1 %2602 to i8
  store i8 %2603, i8* %20, align 1, !tbaa !2448
  %2604 = lshr i32 %2590, 31
  %2605 = trunc i32 %2604 to i8
  store i8 %2605, i8* %21, align 1, !tbaa !2449
  %2606 = lshr i32 %2588, 31
  %2607 = xor i32 %2604, %2606
  %2608 = add nuw nsw i32 %2607, %2606
  %2609 = icmp eq i32 %2608, 2
  %2610 = zext i1 %2609 to i8
  store i8 %2610, i8* %22, align 1, !tbaa !2450
  %2611 = icmp ne i8 %2605, 0
  %2612 = xor i1 %2611, %2609
  %.v100 = select i1 %2612, i64 14, i64 623
  %2613 = add i64 %2589, %.v100
  store i64 %2613, i64* %PC, align 8, !tbaa !2428
  br i1 %2612, label %block_4014ab, label %block_40170c

block_400937:                                     ; preds = %block_4008eb
  %ECX = bitcast %union.anon* %4 to i32*
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %2615 = bitcast %union.VectorReg* %7 to i8*
  %2616 = bitcast %union.VectorReg* %8 to i8*
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2617 = load i64, i64* %RBP, align 8
  %2618 = add i64 %2617, -20
  store i64 %2618, i64* %R8, align 8, !tbaa !2428
  %2619 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2620 = zext i32 %2619 to i64
  store i64 %2620, i64* %RSI, align 8, !tbaa !2428
  %2621 = zext i32 %567 to i64
  store i64 %2621, i64* %RDX, align 8, !tbaa !2428
  %2622 = add i64 %594, 3625
  %2623 = add i64 %594, 43
  %2624 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2625 = add i64 %2624, -8
  %2626 = inttoptr i64 %2625 to i64*
  store i64 %2623, i64* %2626, align 8
  store i64 %2625, i64* %RSP, align 8, !tbaa !2428
  store i64 %2622, i64* %PC, align 8, !tbaa !2428
  %2627 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %2622, %struct.Memory* %351)
  %2628 = load i64, i64* %PC, align 8
  %2629 = add i64 %2628, 11
  store i64 %2629, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2630 = bitcast %union.anon* %4 to [2 x i32]*
  %2631 = getelementptr inbounds [2 x i32], [2 x i32]* %2630, i64 0, i64 1
  br label %block_40096d

block_400d98:                                     ; preds = %block_400d88
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2632 = add i64 %2935, -20
  store i64 %2632, i64* %R8, align 8, !tbaa !2428
  %2633 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2634 = zext i32 %2633 to i64
  store i64 %2634, i64* %RSI, align 8, !tbaa !2428
  %2635 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2636 = zext i32 %2635 to i64
  store i64 %2636, i64* %RDX, align 8, !tbaa !2428
  %2637 = add i64 %2966, 2504
  %2638 = add i64 %2966, 43
  %2639 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2640 = add i64 %2639, -8
  %2641 = inttoptr i64 %2640 to i64*
  store i64 %2638, i64* %2641, align 8
  store i64 %2640, i64* %RSP, align 8, !tbaa !2428
  store i64 %2637, i64* %PC, align 8, !tbaa !2428
  %2642 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %2637, %struct.Memory* %MEMORY.7)
  %2643 = load i64, i64* %PC, align 8
  %2644 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2645 = add i32 %2644, 1
  %2646 = zext i32 %2645 to i64
  store i64 %2646, i64* %RAX, align 8, !tbaa !2428
  %2647 = icmp eq i32 %2644, -1
  %2648 = icmp eq i32 %2645, 0
  %2649 = or i1 %2647, %2648
  %2650 = zext i1 %2649 to i8
  store i8 %2650, i8* %17, align 1, !tbaa !2432
  %2651 = and i32 %2645, 255
  %2652 = tail call i32 @llvm.ctpop.i32(i32 %2651) #12
  %2653 = trunc i32 %2652 to i8
  %2654 = and i8 %2653, 1
  %2655 = xor i8 %2654, 1
  store i8 %2655, i8* %18, align 1, !tbaa !2446
  %2656 = xor i32 %2645, %2644
  %2657 = lshr i32 %2656, 4
  %2658 = trunc i32 %2657 to i8
  %2659 = and i8 %2658, 1
  store i8 %2659, i8* %19, align 1, !tbaa !2447
  %2660 = zext i1 %2648 to i8
  store i8 %2660, i8* %20, align 1, !tbaa !2448
  %2661 = lshr i32 %2645, 31
  %2662 = trunc i32 %2661 to i8
  store i8 %2662, i8* %21, align 1, !tbaa !2449
  %2663 = lshr i32 %2644, 31
  %2664 = xor i32 %2661, %2663
  %2665 = add nuw nsw i32 %2664, %2661
  %2666 = icmp eq i32 %2665, 2
  %2667 = zext i1 %2666 to i8
  store i8 %2667, i8* %22, align 1, !tbaa !2450
  store i32 %2645, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2668 = add i64 %2643, -59
  store i64 %2668, i64* %PC, align 8, !tbaa !2428
  br label %block_400d88

block_400ac8:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %2669 = load i64, i64* %RBP, align 8
  %2670 = add i64 %2669, -24
  %2671 = add i64 %2931, 5
  store i64 %2671, i64* %PC, align 8
  %2672 = inttoptr i64 %2670 to float*
  %2673 = load float, float* %2672, align 4
  %2674 = fpext float %2673 to double
  store double %2674, double* %189, align 1, !tbaa !2454
  %2675 = add i64 %2669, -904
  %2676 = add i64 %2931, 13
  store i64 %2676, i64* %PC, align 8
  %2677 = inttoptr i64 %2675 to double*
  store double %2674, double* %2677, align 8
  %2678 = load i64, i64* %PC, align 8
  %2679 = add i64 %2678, 41
  store i64 %2679, i64* %PC, align 8, !tbaa !2428
  br label %block_400afe

block_400a17:                                     ; preds = %block_4009c7, %block_400afe
  %2680 = phi i32 [ 0, %block_4009c7 ], [ %540, %block_400afe ]
  %2681 = phi i64 [ %1901, %block_4009c7 ], [ %563, %block_400afe ]
  %MEMORY.15 = phi %struct.Memory* [ %1884, %block_4009c7 ], [ %2926, %block_400afe ]
  %2682 = zext i32 %2680 to i64
  store i64 %2682, i64* %RAX, align 8, !tbaa !2428
  %2683 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2684 = sub i32 %2680, %2683
  %2685 = icmp ult i32 %2680, %2683
  %2686 = zext i1 %2685 to i8
  store i8 %2686, i8* %17, align 1, !tbaa !2432
  %2687 = and i32 %2684, 255
  %2688 = tail call i32 @llvm.ctpop.i32(i32 %2687) #12
  %2689 = trunc i32 %2688 to i8
  %2690 = and i8 %2689, 1
  %2691 = xor i8 %2690, 1
  store i8 %2691, i8* %18, align 1, !tbaa !2446
  %2692 = xor i32 %2683, %2680
  %2693 = xor i32 %2692, %2684
  %2694 = lshr i32 %2693, 4
  %2695 = trunc i32 %2694 to i8
  %2696 = and i8 %2695, 1
  store i8 %2696, i8* %19, align 1, !tbaa !2447
  %2697 = icmp eq i32 %2684, 0
  %2698 = zext i1 %2697 to i8
  store i8 %2698, i8* %20, align 1, !tbaa !2448
  %2699 = lshr i32 %2684, 31
  %2700 = trunc i32 %2699 to i8
  store i8 %2700, i8* %21, align 1, !tbaa !2449
  %2701 = lshr i32 %2680, 31
  %2702 = lshr i32 %2683, 31
  %2703 = xor i32 %2702, %2701
  %2704 = xor i32 %2699, %2701
  %2705 = add nuw nsw i32 %2704, %2703
  %2706 = icmp eq i32 %2705, 2
  %2707 = zext i1 %2706 to i8
  store i8 %2707, i8* %22, align 1, !tbaa !2450
  %2708 = icmp ne i8 %2700, 0
  %2709 = xor i1 %2708, %2706
  %.v95 = select i1 %2709, i64 20, i64 270
  %2710 = add i64 %2681, %.v95
  store i64 %2710, i64* %PC, align 8, !tbaa !2428
  br i1 %2709, label %block_400a2b, label %block_400b25

block_401090:                                     ; preds = %block_401082
  %2711 = add i64 %3138, -2720
  %2712 = add i64 %3138, 5
  %2713 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2714 = add i64 %2713, -8
  %2715 = inttoptr i64 %2714 to i64*
  store i64 %2712, i64* %2715, align 8
  store i64 %2714, i64* %RSP, align 8, !tbaa !2428
  store i64 %2711, i64* %PC, align 8, !tbaa !2428
  %2716 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %2711, %struct.Memory* %1174)
  %2717 = load i64, i64* %RBP, align 8
  %2718 = add i64 %2717, -40
  %2719 = load i64, i64* %PC, align 8
  %2720 = add i64 %2719, 5
  store i64 %2720, i64* %PC, align 8
  %2721 = load <2 x float>, <2 x float>* %57, align 1
  %2722 = extractelement <2 x float> %2721, i32 0
  %2723 = inttoptr i64 %2718 to float*
  store float %2722, float* %2723, align 4
  %2724 = load i64, i64* %PC, align 8
  %2725 = add i64 %2724, 11
  store i64 %2725, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4010a5

block_400e2d:                                     ; preds = %block_400dd9, %block_400e24
  %2726 = phi i64 [ %1008, %block_400dd9 ], [ %.pre77, %block_400e24 ]
  %2727 = load i64, i64* %RBP, align 8
  %2728 = add i64 %2727, -64
  %2729 = add i64 %2726, 9
  store i64 %2729, i64* %PC, align 8
  %2730 = inttoptr i64 %2728 to i32*
  %2731 = load i32, i32* %2730, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %2732 = and i32 %2731, 255
  %2733 = tail call i32 @llvm.ctpop.i32(i32 %2732) #12
  %2734 = trunc i32 %2733 to i8
  %2735 = and i8 %2734, 1
  %2736 = xor i8 %2735, 1
  store i8 %2736, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2737 = icmp eq i32 %2731, 0
  %2738 = zext i1 %2737 to i8
  store i8 %2738, i8* %20, align 1, !tbaa !2448
  %2739 = lshr i32 %2731, 31
  %2740 = trunc i32 %2739 to i8
  store i8 %2740, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %2741 = icmp ne i8 %2740, 0
  %.v = select i1 %2741, i64 -204, i64 6
  %2742 = add i64 %2729, %.v
  store i64 %2742, i64* %PC, align 8, !tbaa !2428
  br i1 %2741, label %block_400d6a, label %block_400e3c

block_400f8f:                                     ; preds = %block_400f4a
  %2743 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2744 = shl i32 %2743, 1
  %2745 = icmp slt i32 %2743, 0
  %2746 = icmp slt i32 %2744, 0
  %2747 = xor i1 %2745, %2746
  %2748 = zext i32 %2744 to i64
  store i64 %2748, i64* %RAX, align 8, !tbaa !2428
  %.lobit27 = lshr i32 %2743, 31
  %2749 = trunc i32 %.lobit27 to i8
  store i8 %2749, i8* %17, align 1, !tbaa !2456
  %2750 = and i32 %2744, 254
  %2751 = tail call i32 @llvm.ctpop.i32(i32 %2750) #12
  %2752 = trunc i32 %2751 to i8
  %2753 = and i8 %2752, 1
  %2754 = xor i8 %2753, 1
  store i8 %2754, i8* %18, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  %2755 = icmp eq i32 %2744, 0
  %2756 = zext i1 %2755 to i8
  store i8 %2756, i8* %20, align 1, !tbaa !2456
  %2757 = lshr i32 %2743, 30
  %2758 = trunc i32 %2757 to i8
  %2759 = and i8 %2758, 1
  store i8 %2759, i8* %21, align 1, !tbaa !2456
  %2760 = zext i1 %2747 to i8
  store i8 %2760, i8* %22, align 1, !tbaa !2456
  %2761 = add i64 %1539, 17
  store i64 %2761, i64* %PC, align 8
  store i32 %2744, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  br label %block_400fa0

block_400d0e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %2762 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2762, align 1, !tbaa !2453
  %2763 = load <2 x float>, <2 x float>* %57, align 1
  %2764 = extractelement <2 x float> %2763, i32 0
  store float %2764, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %2765 = add i64 %2438, 21
  store i64 %2765, i64* %PC, align 8
  store float %2764, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %.pre75 = load i64, i64* %RBP, align 8
  br label %block_400d23

block_400e3c:                                     ; preds = %block_400e2d
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %2766 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2766, align 1, !tbaa !2453
  %2767 = add i64 %2727, -72
  %2768 = add i64 %2742, 18
  store i64 %2768, i64* %PC, align 8
  %2769 = inttoptr i64 %2767 to float*
  %2770 = load float, float* %2769, align 4
  %2771 = fpext float %2770 to double
  store double %2771, double* %193, align 1, !tbaa !2454
  %2772 = add i64 %2727, -68
  %2773 = add i64 %2742, 23
  store i64 %2773, i64* %PC, align 8
  %2774 = inttoptr i64 %2772 to i32*
  %2775 = load i32, i32* %2774, align 4
  %2776 = sitofp i32 %2775 to double
  store double %2776, double* %219, align 1, !tbaa !2454
  %2777 = bitcast i64* %195 to <2 x i32>*
  %2778 = load <2 x i32>, <2 x i32>* %2777, align 1
  %2779 = fdiv double %2771, %2776
  %.cast25 = bitcast double %2779 to <2 x i32>
  %2780 = fptrunc double %2779 to float
  store float %2780, float* %2113, align 1, !tbaa !2451
  %2781 = extractelement <2 x i32> %.cast25, i32 1
  store i32 %2781, i32* %1912, align 1, !tbaa !2451
  %2782 = extractelement <2 x i32> %2778, i32 0
  store i32 %2782, i32* %1913, align 1, !tbaa !2451
  %2783 = extractelement <2 x i32> %2778, i32 1
  store i32 %2783, i32* %1915, align 1, !tbaa !2451
  %2784 = add i64 %2742, 36
  store i64 %2784, i64* %PC, align 8
  %2785 = load <2 x float>, <2 x float>* %2206, align 1
  %2786 = extractelement <2 x float> %2785, i32 0
  store float %2786, float* %2769, align 4
  %2787 = load i64, i64* %PC, align 8
  %2788 = load i64, i64* @stderr, align 64
  store i64 %2788, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %2789 = add i64 %2787, -2416
  %2790 = add i64 %2787, 15
  %2791 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2792 = add i64 %2791, -8
  %2793 = inttoptr i64 %2792 to i64*
  store i64 %2790, i64* %2793, align 8
  store i64 %2792, i64* %RSP, align 8, !tbaa !2428
  store i64 %2789, i64* %PC, align 8, !tbaa !2428
  %2794 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %987)
  %2795 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %2796 = load i64, i64* @stderr, align 64
  store i64 %2796, i64* %RDI, align 8, !tbaa !2428
  %2797 = load i64, i64* %RBP, align 8
  %2798 = add i64 %2797, -944
  %2799 = load i32, i32* %EAX, align 4
  %2800 = add i64 %2795, 24
  store i64 %2800, i64* %PC, align 8
  %2801 = inttoptr i64 %2798 to i32*
  store i32 %2799, i32* %2801, align 4
  %2802 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2803 = add i64 %2802, -2455
  %2804 = add i64 %2802, 7
  %2805 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2806 = add i64 %2805, -8
  %2807 = inttoptr i64 %2806 to i64*
  store i64 %2804, i64* %2807, align 8
  store i64 %2806, i64* %RSP, align 8, !tbaa !2428
  store i64 %2803, i64* %PC, align 8, !tbaa !2428
  %2808 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2794)
  %2809 = load i64, i64* %RBP, align 8
  %2810 = add i64 %2809, -64
  %2811 = load i64, i64* %PC, align 8
  %2812 = add i64 %2811, 7
  store i64 %2812, i64* %PC, align 8
  %2813 = inttoptr i64 %2810 to i32*
  store i32 -3, i32* %2813, align 4
  %2814 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2815 = load i64, i64* %RBP, align 8
  %2816 = add i64 %2815, -948
  %2817 = load i32, i32* %EAX, align 4
  %2818 = add i64 %2814, 17
  store i64 %2818, i64* %PC, align 8
  %2819 = inttoptr i64 %2816 to i32*
  store i32 %2817, i32* %2819, align 4
  %.pre78 = load i64, i64* %PC, align 8
  %2820 = bitcast %union.VectorReg* %7 to <4 x i32>*
  br label %block_400ea6

block_40159c:                                     ; preds = %block_401588
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2821 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2822 = zext i32 %2821 to i64
  store i64 %2822, i64* %RSI, align 8, !tbaa !2428
  %2823 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2824 = zext i32 %2823 to i64
  store i64 %2824, i64* %RDX, align 8, !tbaa !2428
  %2825 = add i64 %1946, 1700
  %2826 = add i64 %1946, 52
  %2827 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2828 = add i64 %2827, -8
  %2829 = inttoptr i64 %2828 to i64*
  store i64 %2826, i64* %2829, align 8
  store i64 %2828, i64* %RSP, align 8, !tbaa !2428
  store i64 %2825, i64* %PC, align 8, !tbaa !2428
  %2830 = tail call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* nonnull %0, i64 %2825, %struct.Memory* %1839)
  %2831 = load i64, i64* %PC, align 8
  %2832 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2833 = add i32 %2832, 1
  %2834 = zext i32 %2833 to i64
  store i64 %2834, i64* %RAX, align 8, !tbaa !2428
  %2835 = icmp eq i32 %2832, -1
  %2836 = icmp eq i32 %2833, 0
  %2837 = or i1 %2835, %2836
  %2838 = zext i1 %2837 to i8
  store i8 %2838, i8* %17, align 1, !tbaa !2432
  %2839 = and i32 %2833, 255
  %2840 = tail call i32 @llvm.ctpop.i32(i32 %2839) #12
  %2841 = trunc i32 %2840 to i8
  %2842 = and i8 %2841, 1
  %2843 = xor i8 %2842, 1
  store i8 %2843, i8* %18, align 1, !tbaa !2446
  %2844 = xor i32 %2833, %2832
  %2845 = lshr i32 %2844, 4
  %2846 = trunc i32 %2845 to i8
  %2847 = and i8 %2846, 1
  store i8 %2847, i8* %19, align 1, !tbaa !2447
  %2848 = zext i1 %2836 to i8
  store i8 %2848, i8* %20, align 1, !tbaa !2448
  %2849 = lshr i32 %2833, 31
  %2850 = trunc i32 %2849 to i8
  store i8 %2850, i8* %21, align 1, !tbaa !2449
  %2851 = lshr i32 %2832, 31
  %2852 = xor i32 %2849, %2851
  %2853 = add nuw nsw i32 %2852, %2849
  %2854 = icmp eq i32 %2853, 2
  %2855 = zext i1 %2854 to i8
  store i8 %2855, i8* %22, align 1, !tbaa !2450
  store i32 %2833, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2856 = add i64 %2831, -72
  store i64 %2856, i64* %PC, align 8, !tbaa !2428
  br label %block_401588

block_400a8c:                                     ; preds = %block_400a56, %block_400a68
  %2857 = phi i64 [ %1075, %block_400a56 ], [ %.pre87, %block_400a68 ]
  %2858 = load i64, i64* %RBP, align 8
  %2859 = add i64 %2858, -896
  %2860 = add i64 %2857, 8
  store i64 %2860, i64* %PC, align 8
  %2861 = inttoptr i64 %2859 to i64*
  %2862 = load i64, i64* %2861, align 8
  %.cast = bitcast i64 %2862 to <2 x i32>
  %.cast20 = bitcast i64 %2862 to double
  %2863 = fptrunc double %.cast20 to float
  store float %2863, float* %25, align 1, !tbaa !2451
  %2864 = extractelement <2 x i32> %.cast, i32 1
  store i32 %2864, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  store i32 0, i32* %249, align 1, !tbaa !2451
  %2865 = add i64 %2858, -28
  %2866 = add i64 %2857, 17
  store i64 %2866, i64* %PC, align 8
  %2867 = load <2 x float>, <2 x float>* %57, align 1
  %2868 = extractelement <2 x float> %2867, i32 0
  %2869 = inttoptr i64 %2865 to float*
  store float %2868, float* %2869, align 4
  %2870 = load i64, i64* %RBP, align 8
  %2871 = add i64 %2870, -24
  %2872 = load i64, i64* %PC, align 8
  %2873 = add i64 %2872, 5
  store i64 %2873, i64* %PC, align 8
  %2874 = inttoptr i64 %2871 to float*
  %2875 = load float, float* %2874, align 4
  %2876 = fpext float %2875 to double
  store double %2876, double* %189, align 1, !tbaa !2454
  %2877 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2878 = sext i32 %2877 to i64
  store i64 %2878, i64* %RAX, align 8, !tbaa !2428
  %2879 = shl nsw i64 %2878, 2
  %2880 = add i64 %2879, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2881 = add i64 %2872, 22
  store i64 %2881, i64* %PC, align 8
  %2882 = inttoptr i64 %2880 to float*
  %2883 = load float, float* %2882, align 4
  %2884 = fpext float %2883 to double
  %2885 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %2886 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %2887 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %2888 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %2885, i32* %1902, align 1, !tbaa !2451
  store i32 %2886, i32* %1904, align 1, !tbaa !2451
  store i32 %2887, i32* %1906, align 1, !tbaa !2451
  store i32 %2888, i32* %1908, align 1, !tbaa !2451
  %2889 = bitcast double %2884 to i64
  %2890 = load i64, i64* %195, align 1
  %2891 = load i64, i64* %1909, align 1
  %2892 = load i64, i64* %1905, align 1
  %2893 = and i64 %2891, %2889
  %2894 = and i64 %2892, %2890
  %2895 = trunc i64 %2893 to i32
  %2896 = lshr i64 %2893, 32
  %2897 = trunc i64 %2896 to i32
  store i32 %2895, i32* %1910, align 1, !tbaa !2453
  store i32 %2897, i32* %1912, align 1, !tbaa !2453
  %2898 = trunc i64 %2894 to i32
  store i32 %2898, i32* %1913, align 1, !tbaa !2453
  %2899 = lshr i64 %2894, 32
  %2900 = trunc i64 %2899 to i32
  store i32 %2900, i32* %1915, align 1, !tbaa !2453
  %2901 = add i64 %2872, 37
  store i64 %2901, i64* %PC, align 8
  %2902 = load double, double* %193, align 1
  %2903 = fcmp uno double %2876, %2902
  br i1 %2903, label %2904, label %2914

; <label>:2904:                                   ; preds = %block_400a8c
  %2905 = fadd double %2876, %2902
  %2906 = bitcast double %2905 to i64
  %2907 = and i64 %2906, 9221120237041090560
  %2908 = icmp eq i64 %2907, 9218868437227405312
  %2909 = and i64 %2906, 2251799813685247
  %2910 = icmp ne i64 %2909, 0
  %2911 = and i1 %2908, %2910
  br i1 %2911, label %2912, label %2920

; <label>:2912:                                   ; preds = %2904
  %2913 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2901, %struct.Memory* %2005) #13
  %.pre88 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:2914:                                   ; preds = %block_400a8c
  %2915 = fcmp ogt double %2876, %2902
  br i1 %2915, label %2920, label %2916

; <label>:2916:                                   ; preds = %2914
  %2917 = fcmp olt double %2876, %2902
  br i1 %2917, label %2920, label %2918

; <label>:2918:                                   ; preds = %2916
  %2919 = fcmp oeq double %2876, %2902
  br i1 %2919, label %2920, label %2924

; <label>:2920:                                   ; preds = %2918, %2916, %2914, %2904
  %2921 = phi i8 [ 0, %2914 ], [ 0, %2916 ], [ 1, %2918 ], [ 1, %2904 ]
  %2922 = phi i8 [ 0, %2914 ], [ 0, %2916 ], [ 0, %2918 ], [ 1, %2904 ]
  %2923 = phi i8 [ 0, %2914 ], [ 1, %2916 ], [ 0, %2918 ], [ 1, %2904 ]
  store i8 %2921, i8* %20, align 1, !tbaa !2456
  store i8 %2922, i8* %18, align 1, !tbaa !2456
  store i8 %2923, i8* %17, align 1, !tbaa !2456
  br label %2924

; <label>:2924:                                   ; preds = %2920, %2918
  store i8 0, i8* %22, align 1, !tbaa !2456
  store i8 0, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %2924, %2912
  %2925 = phi i64 [ %.pre88, %2912 ], [ %2901, %2924 ]
  %2926 = phi %struct.Memory* [ %2913, %2912 ], [ %2005, %2924 ]
  %2927 = load i8, i8* %17, align 1, !tbaa !2432
  %2928 = load i8, i8* %20, align 1, !tbaa !2448
  %2929 = or i8 %2928, %2927
  %2930 = icmp ne i8 %2929, 0
  %.v125 = select i1 %2930, i64 24, i64 6
  %2931 = add i64 %2925, %.v125
  store i64 %2931, i64* %PC, align 8, !tbaa !2428
  br i1 %2930, label %block_400ada, label %block_400ac8

block_400d88:                                     ; preds = %block_400d98, %block_400d6a
  %2932 = phi i32 [ %2645, %block_400d98 ], [ 0, %block_400d6a ]
  %2933 = phi i64 [ %2668, %block_400d98 ], [ %1260, %block_400d6a ]
  %2934 = zext i32 %2932 to i64
  store i64 %2934, i64* %RAX, align 8, !tbaa !2428
  %2935 = load i64, i64* %RBP, align 8
  %2936 = add i64 %2935, -68
  %2937 = add i64 %2933, 10
  store i64 %2937, i64* %PC, align 8
  %2938 = inttoptr i64 %2936 to i32*
  %2939 = load i32, i32* %2938, align 4
  %2940 = sub i32 %2932, %2939
  %2941 = icmp ult i32 %2932, %2939
  %2942 = zext i1 %2941 to i8
  store i8 %2942, i8* %17, align 1, !tbaa !2432
  %2943 = and i32 %2940, 255
  %2944 = tail call i32 @llvm.ctpop.i32(i32 %2943) #12
  %2945 = trunc i32 %2944 to i8
  %2946 = and i8 %2945, 1
  %2947 = xor i8 %2946, 1
  store i8 %2947, i8* %18, align 1, !tbaa !2446
  %2948 = xor i32 %2939, %2932
  %2949 = xor i32 %2948, %2940
  %2950 = lshr i32 %2949, 4
  %2951 = trunc i32 %2950 to i8
  %2952 = and i8 %2951, 1
  store i8 %2952, i8* %19, align 1, !tbaa !2447
  %2953 = icmp eq i32 %2940, 0
  %2954 = zext i1 %2953 to i8
  store i8 %2954, i8* %20, align 1, !tbaa !2448
  %2955 = lshr i32 %2940, 31
  %2956 = trunc i32 %2955 to i8
  store i8 %2956, i8* %21, align 1, !tbaa !2449
  %2957 = lshr i32 %2932, 31
  %2958 = lshr i32 %2939, 31
  %2959 = xor i32 %2958, %2957
  %2960 = xor i32 %2955, %2957
  %2961 = add nuw nsw i32 %2960, %2959
  %2962 = icmp eq i32 %2961, 2
  %2963 = zext i1 %2962 to i8
  store i8 %2963, i8* %22, align 1, !tbaa !2450
  %2964 = icmp ne i8 %2956, 0
  %2965 = xor i1 %2964, %2962
  %.v96 = select i1 %2965, i64 16, i64 81
  %2966 = add i64 %2933, %.v96
  store i64 %2966, i64* %PC, align 8, !tbaa !2428
  br i1 %2965, label %block_400d98, label %block_400dd9

block_401181:                                     ; preds = %block_40116d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2967 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2968 = zext i32 %2967 to i64
  store i64 %2968, i64* %RSI, align 8, !tbaa !2428
  %2969 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2970 = zext i32 %2969 to i64
  store i64 %2970, i64* %RDX, align 8, !tbaa !2428
  %2971 = add i64 %495, 2751
  %2972 = add i64 %495, 52
  %2973 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2974 = add i64 %2973, -8
  %2975 = inttoptr i64 %2974 to i64*
  store i64 %2972, i64* %2975, align 8
  store i64 %2974, i64* %RSP, align 8, !tbaa !2428
  store i64 %2971, i64* %PC, align 8, !tbaa !2428
  %2976 = tail call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* nonnull %0, i64 %2971, %struct.Memory* %1174)
  %2977 = load i64, i64* %PC, align 8
  %2978 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2979 = add i32 %2978, 1
  %2980 = zext i32 %2979 to i64
  store i64 %2980, i64* %RAX, align 8, !tbaa !2428
  %2981 = icmp eq i32 %2978, -1
  %2982 = icmp eq i32 %2979, 0
  %2983 = or i1 %2981, %2982
  %2984 = zext i1 %2983 to i8
  store i8 %2984, i8* %17, align 1, !tbaa !2432
  %2985 = and i32 %2979, 255
  %2986 = tail call i32 @llvm.ctpop.i32(i32 %2985) #12
  %2987 = trunc i32 %2986 to i8
  %2988 = and i8 %2987, 1
  %2989 = xor i8 %2988, 1
  store i8 %2989, i8* %18, align 1, !tbaa !2446
  %2990 = xor i32 %2979, %2978
  %2991 = lshr i32 %2990, 4
  %2992 = trunc i32 %2991 to i8
  %2993 = and i8 %2992, 1
  store i8 %2993, i8* %19, align 1, !tbaa !2447
  %2994 = zext i1 %2982 to i8
  store i8 %2994, i8* %20, align 1, !tbaa !2448
  %2995 = lshr i32 %2979, 31
  %2996 = trunc i32 %2995 to i8
  store i8 %2996, i8* %21, align 1, !tbaa !2449
  %2997 = lshr i32 %2978, 31
  %2998 = xor i32 %2995, %2997
  %2999 = add nuw nsw i32 %2998, %2995
  %3000 = icmp eq i32 %2999, 2
  %3001 = zext i1 %3000 to i8
  store i8 %3001, i8* %22, align 1, !tbaa !2450
  store i32 %2979, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3002 = add i64 %2977, -72
  store i64 %3002, i64* %PC, align 8, !tbaa !2428
  br label %block_40116d

block_401379:                                     ; preds = %block_401369
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3003 = add i64 %840, -20
  store i64 %3003, i64* %R8, align 8, !tbaa !2428
  %3004 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %3005 = zext i32 %3004 to i64
  store i64 %3005, i64* %RSI, align 8, !tbaa !2428
  %3006 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3007 = zext i32 %3006 to i64
  store i64 %3007, i64* %RDX, align 8, !tbaa !2428
  %3008 = add i64 %871, 999
  %3009 = add i64 %871, 43
  %3010 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3011 = add i64 %3010, -8
  %3012 = inttoptr i64 %3011 to i64*
  store i64 %3009, i64* %3012, align 8
  store i64 %3011, i64* %RSP, align 8, !tbaa !2428
  store i64 %3008, i64* %PC, align 8, !tbaa !2428
  %3013 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %3008, %struct.Memory* %455)
  %3014 = load i64, i64* %PC, align 8
  %3015 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3016 = add i32 %3015, 1
  %3017 = zext i32 %3016 to i64
  store i64 %3017, i64* %RAX, align 8, !tbaa !2428
  %3018 = icmp eq i32 %3015, -1
  %3019 = icmp eq i32 %3016, 0
  %3020 = or i1 %3018, %3019
  %3021 = zext i1 %3020 to i8
  store i8 %3021, i8* %17, align 1, !tbaa !2432
  %3022 = and i32 %3016, 255
  %3023 = tail call i32 @llvm.ctpop.i32(i32 %3022) #12
  %3024 = trunc i32 %3023 to i8
  %3025 = and i8 %3024, 1
  %3026 = xor i8 %3025, 1
  store i8 %3026, i8* %18, align 1, !tbaa !2446
  %3027 = xor i32 %3016, %3015
  %3028 = lshr i32 %3027, 4
  %3029 = trunc i32 %3028 to i8
  %3030 = and i8 %3029, 1
  store i8 %3030, i8* %19, align 1, !tbaa !2447
  %3031 = zext i1 %3019 to i8
  store i8 %3031, i8* %20, align 1, !tbaa !2448
  %3032 = lshr i32 %3016, 31
  %3033 = trunc i32 %3032 to i8
  store i8 %3033, i8* %21, align 1, !tbaa !2449
  %3034 = lshr i32 %3015, 31
  %3035 = xor i32 %3032, %3034
  %3036 = add nuw nsw i32 %3035, %3032
  %3037 = icmp eq i32 %3036, 2
  %3038 = zext i1 %3037 to i8
  store i8 %3038, i8* %22, align 1, !tbaa !2450
  store i32 %3016, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3039 = add i64 %3014, -59
  store i64 %3039, i64* %PC, align 8, !tbaa !2428
  br label %block_401369

block_40112b:                                     ; preds = %block_4010a5
  %3040 = add i64 %902, -2875
  %3041 = add i64 %902, 5
  %3042 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3043 = add i64 %3042, -8
  %3044 = inttoptr i64 %3043 to i64*
  store i64 %3041, i64* %3044, align 8
  store i64 %3043, i64* %RSP, align 8, !tbaa !2428
  store i64 %3040, i64* %PC, align 8, !tbaa !2428
  %3045 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %3040, %struct.Memory* %1174)
  %3046 = load i64, i64* %RBP, align 8
  %3047 = add i64 %3046, -40
  %3048 = load i64, i64* %PC, align 8
  %3049 = add i64 %3048, 5
  store i64 %3049, i64* %PC, align 8
  %3050 = load <2 x float>, <2 x float>* %57, align 1
  %3051 = load <2 x i32>, <2 x i32>* %222, align 1
  %3052 = inttoptr i64 %3047 to float*
  %3053 = load float, float* %3052, align 4
  %3054 = extractelement <2 x float> %3050, i32 0
  %3055 = fsub float %3054, %3053
  store float %3055, float* %25, align 1, !tbaa !2451
  %3056 = bitcast <2 x float> %3050 to <2 x i32>
  %3057 = extractelement <2 x i32> %3056, i32 1
  store i32 %3057, i32* %245, align 1, !tbaa !2451
  %3058 = extractelement <2 x i32> %3051, i32 0
  store i32 %3058, i32* %247, align 1, !tbaa !2451
  %3059 = extractelement <2 x i32> %3051, i32 1
  store i32 %3059, i32* %249, align 1, !tbaa !2451
  %3060 = add i64 %3046, -44
  %3061 = add i64 %3048, 10
  store i64 %3061, i64* %PC, align 8
  %3062 = load <2 x float>, <2 x float>* %57, align 1
  %3063 = load <2 x i32>, <2 x i32>* %222, align 1
  %3064 = inttoptr i64 %3060 to float*
  %3065 = load float, float* %3064, align 4
  %3066 = extractelement <2 x float> %3062, i32 0
  %3067 = fsub float %3066, %3065
  store float %3067, float* %25, align 1, !tbaa !2451
  %3068 = bitcast <2 x float> %3062 to <2 x i32>
  %3069 = extractelement <2 x i32> %3068, i32 1
  store i32 %3069, i32* %245, align 1, !tbaa !2451
  %3070 = extractelement <2 x i32> %3063, i32 0
  store i32 %3070, i32* %247, align 1, !tbaa !2451
  %3071 = extractelement <2 x i32> %3063, i32 1
  store i32 %3071, i32* %249, align 1, !tbaa !2451
  %3072 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %3073 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %3074 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %3075 = sitofp i32 %3074 to float
  store float %3075, float* %2113, align 1, !tbaa !2451
  %3076 = extractelement <2 x i32> %3072, i32 1
  store i32 %3076, i32* %1912, align 1, !tbaa !2451
  %3077 = extractelement <2 x i32> %3073, i32 0
  store i32 %3077, i32* %1913, align 1, !tbaa !2451
  %3078 = extractelement <2 x i32> %3073, i32 1
  store i32 %3078, i32* %1915, align 1, !tbaa !2451
  %3079 = load <2 x float>, <2 x float>* %57, align 1
  %3080 = load <2 x i32>, <2 x i32>* %222, align 1
  %3081 = load <2 x float>, <2 x float>* %2206, align 1
  %3082 = extractelement <2 x float> %3079, i32 0
  %3083 = extractelement <2 x float> %3081, i32 0
  %3084 = fdiv float %3082, %3083
  store float %3084, float* %25, align 1, !tbaa !2451
  %3085 = bitcast <2 x float> %3079 to <2 x i32>
  %3086 = extractelement <2 x i32> %3085, i32 1
  store i32 %3086, i32* %245, align 1, !tbaa !2451
  %3087 = extractelement <2 x i32> %3080, i32 0
  store i32 %3087, i32* %247, align 1, !tbaa !2451
  %3088 = extractelement <2 x i32> %3080, i32 1
  store i32 %3088, i32* %249, align 1, !tbaa !2451
  %3089 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %3090 = sext i32 %3089 to i64
  store i64 %3090, i64* %RAX, align 8, !tbaa !2428
  %3091 = shl nsw i64 %3090, 2
  %3092 = add i64 %3091, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3093 = add i64 %3048, 40
  store i64 %3093, i64* %PC, align 8
  %3094 = load <2 x float>, <2 x float>* %57, align 1
  %3095 = extractelement <2 x float> %3094, i32 0
  %3096 = inttoptr i64 %3092 to float*
  store float %3095, float* %3096, align 4
  %3097 = load i64, i64* %PC, align 8
  %3098 = add i64 %3097, -2920
  %3099 = add i64 %3097, 5
  %3100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3101 = add i64 %3100, -8
  %3102 = inttoptr i64 %3101 to i64*
  store i64 %3099, i64* %3102, align 8
  store i64 %3101, i64* %RSP, align 8, !tbaa !2428
  store i64 %3098, i64* %PC, align 8, !tbaa !2428
  %3103 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %3098, %struct.Memory* %1174)
  %3104 = load i64, i64* %RBP, align 8
  %3105 = add i64 %3104, -40
  %3106 = load i64, i64* %PC, align 8
  %3107 = add i64 %3106, 5
  store i64 %3107, i64* %PC, align 8
  %3108 = load <2 x float>, <2 x float>* %57, align 1
  %3109 = extractelement <2 x float> %3108, i32 0
  %3110 = inttoptr i64 %3105 to float*
  store float %3109, float* %3110, align 4
  %3111 = load i64, i64* %PC, align 8
  %3112 = add i64 %3111, 11
  store i64 %3112, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40116d

block_401082:                                     ; preds = %block_4011cb, %block_400fd3
  %3113 = phi i32 [ %1450, %block_4011cb ], [ %.pre81, %block_400fd3 ]
  %3114 = phi i64 [ %1473, %block_4011cb ], [ %.pre80, %block_400fd3 ]
  %3115 = add i32 %3113, -6
  %3116 = icmp ult i32 %3113, 6
  %3117 = zext i1 %3116 to i8
  store i8 %3117, i8* %17, align 1, !tbaa !2432
  %3118 = and i32 %3115, 255
  %3119 = tail call i32 @llvm.ctpop.i32(i32 %3118) #12
  %3120 = trunc i32 %3119 to i8
  %3121 = and i8 %3120, 1
  %3122 = xor i8 %3121, 1
  store i8 %3122, i8* %18, align 1, !tbaa !2446
  %3123 = xor i32 %3115, %3113
  %3124 = lshr i32 %3123, 4
  %3125 = trunc i32 %3124 to i8
  %3126 = and i8 %3125, 1
  store i8 %3126, i8* %19, align 1, !tbaa !2447
  %3127 = icmp eq i32 %3115, 0
  %3128 = zext i1 %3127 to i8
  store i8 %3128, i8* %20, align 1, !tbaa !2448
  %3129 = lshr i32 %3115, 31
  %3130 = trunc i32 %3129 to i8
  store i8 %3130, i8* %21, align 1, !tbaa !2449
  %3131 = lshr i32 %3113, 31
  %3132 = xor i32 %3129, %3131
  %3133 = add nuw nsw i32 %3132, %3131
  %3134 = icmp eq i32 %3133, 2
  %3135 = zext i1 %3134 to i8
  store i8 %3135, i8* %22, align 1, !tbaa !2450
  %3136 = icmp ne i8 %3130, 0
  %3137 = xor i1 %3136, %3134
  %.v98 = select i1 %3137, i64 14, i64 623
  %3138 = add i64 %3114, %.v98
  store i64 %3138, i64* %PC, align 8, !tbaa !2428
  br i1 %3137, label %block_401090, label %block_4012f1

block_400981:                                     ; preds = %block_40096d
  %3139 = sext i32 %381 to i64
  store i64 %3139, i64* %RAX, align 8, !tbaa !2428
  %3140 = shl nsw i64 %3139, 2
  %3141 = add i64 %3140, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %3142 = add i64 %411, 17
  store i64 %3142, i64* %PC, align 8
  %3143 = inttoptr i64 %3141 to i32*
  %3144 = load i32, i32* %3143, align 4
  store i32 %3144, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %3145 = load i64, i64* %190, align 1
  %3146 = trunc i64 %3145 to i32
  store i32 %3146, i32* %ECX, align 1, !tbaa !2453
  store i32 0, i32* %2631, align 1, !tbaa !2453
  %3147 = load i64, i64* %RCX, align 8
  %3148 = xor i64 %3147, -2147483648
  %3149 = and i64 %3148, 4294967295
  store i64 %3149, i64* %RCX, align 8, !tbaa !2428
  %3150 = trunc i64 %3148 to i32
  store i32 %3150, i32* %26, align 1, !tbaa !2453
  store i32 0, i32* %245, align 1, !tbaa !2453
  store i32 0, i32* %247, align 1, !tbaa !2453
  store i32 0, i32* %249, align 1, !tbaa !2453
  %3151 = add i64 %411, 48
  store i64 %3151, i64* %PC, align 8
  %3152 = load <2 x float>, <2 x float>* %57, align 1
  %3153 = extractelement <2 x float> %3152, i32 0
  %3154 = inttoptr i64 %3141 to float*
  store float %3153, float* %3154, align 4
  %3155 = load i64, i64* %PC, align 8
  %3156 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3157 = add i32 %3156, 1
  %3158 = zext i32 %3157 to i64
  store i64 %3158, i64* %RAX, align 8, !tbaa !2428
  %3159 = icmp eq i32 %3156, -1
  %3160 = icmp eq i32 %3157, 0
  %3161 = or i1 %3159, %3160
  %3162 = zext i1 %3161 to i8
  store i8 %3162, i8* %17, align 1, !tbaa !2432
  %3163 = and i32 %3157, 255
  %3164 = tail call i32 @llvm.ctpop.i32(i32 %3163) #12
  %3165 = trunc i32 %3164 to i8
  %3166 = and i8 %3165, 1
  %3167 = xor i8 %3166, 1
  store i8 %3167, i8* %18, align 1, !tbaa !2446
  %3168 = xor i32 %3157, %3156
  %3169 = lshr i32 %3168, 4
  %3170 = trunc i32 %3169 to i8
  %3171 = and i8 %3170, 1
  store i8 %3171, i8* %19, align 1, !tbaa !2447
  %3172 = zext i1 %3160 to i8
  store i8 %3172, i8* %20, align 1, !tbaa !2448
  %3173 = lshr i32 %3157, 31
  %3174 = trunc i32 %3173 to i8
  store i8 %3174, i8* %21, align 1, !tbaa !2449
  %3175 = lshr i32 %3156, 31
  %3176 = xor i32 %3173, %3175
  %3177 = add nuw nsw i32 %3176, %3173
  %3178 = icmp eq i32 %3177, 2
  %3179 = zext i1 %3178 to i8
  store i8 %3179, i8* %22, align 1, !tbaa !2450
  store i32 %3157, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3180 = add i64 %3155, -68
  store i64 %3180, i64* %PC, align 8, !tbaa !2428
  br label %block_40096d
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_402870_print_time(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402870:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -12
  %12 = load i32, i32* %EDI, align 4
  %13 = add i64 %10, 6
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i32*
  store i32 %12, i32* %14, align 4
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %6, align 8, !tbaa !2428
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %18, i64* %6, align 8, !tbaa !2428
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %17, 16
  store i64 %24, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402dc0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402dc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603de0__init_array_type* @seg_603de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603de0__init_array_type* @seg_603de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2456
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #12
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2456
  store i8 0, i8* %45, align 1, !tbaa !2456
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2456
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2456
  store i8 0, i8* %48, align 1, !tbaa !2456
  %63 = add i64 %38, -10547
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_4004a8__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_402e16, label %block_402df6

block_402e16.loopexit:                            ; preds = %block_402e00
  br label %block_402e16

block_402e16:                                     ; preds = %block_402e16.loopexit, %block_402dc0
  %81 = phi i64 [ %80, %block_402dc0 ], [ %179, %block_402e16.loopexit ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_402dc0 ], [ %149, %block_402e16.loopexit ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #12
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402df6:                                     ; preds = %block_402dc0
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_402e00

block_402e00:                                     ; preds = %block_402e00, %block_402df6
  %134 = phi i64 [ 0, %block_402df6 ], [ %152, %block_402e00 ]
  %135 = phi i64 [ %133, %block_402df6 ], [ %179, %block_402e00 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_402df6 ], [ %149, %block_402e00 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #12
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2447
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v2 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v2
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_402e16.loopexit, label %block_402e00
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402880_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_402880:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -12
  %16 = load i32, i32* %EDI, align 4
  %17 = add i64 %14, 6
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i32*
  store i32 %16, i32* %18, align 4
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 5
  store i64 %22, i64* %PC, align 8
  %23 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = extractelement <2 x float> %24, i32 0
  %26 = inttoptr i64 %20 to float*
  store float %25, float* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -56
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -52
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %67, align 1, !tbaa !2432
  %68 = and i32 %66, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !2446
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i32 %66, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i32 %66, 31
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %81, align 1, !tbaa !2450
  %82 = xor i1 %75, true
  %83 = icmp eq i8 %79, 0
  %84 = and i1 %83, %82
  %.v24 = select i1 %84, i64 15, i64 10
  %85 = add i64 %63, %.v24
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_4028b8, label %block_4029e7

block_4028df:                                     ; preds = %block_4028d5
  %86 = add i64 %549, -36
  %87 = add i64 %575, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = add i32 %89, -1
  %91 = icmp eq i32 %89, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %67, align 1, !tbaa !2432
  %93 = and i32 %90, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #12
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  store i8 %97, i8* %73, align 1, !tbaa !2446
  %98 = xor i32 %90, %89
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %74, align 1, !tbaa !2447
  %102 = icmp eq i32 %90, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %77, align 1, !tbaa !2448
  %104 = lshr i32 %90, 31
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %80, align 1, !tbaa !2449
  %106 = lshr i32 %89, 31
  %107 = xor i32 %104, %106
  %108 = add nuw nsw i32 %107, %106
  %109 = icmp eq i32 %108, 2
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %81, align 1, !tbaa !2450
  %.v28 = select i1 %102, i64 178, i64 10
  %111 = add i64 %575, %.v28
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  br i1 %102, label %block_402991, label %block_4028e9

block_4028b8:                                     ; preds = %block_402880
  %112 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %114 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %115 = getelementptr inbounds i8, i8* %112, i64 4
  %116 = bitcast i8* %115 to i32*
  %117 = bitcast i64* %113 to i32*
  %118 = getelementptr inbounds i8, i8* %112, i64 12
  %119 = bitcast i8* %118 to i32*
  %120 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %120, align 1, !tbaa !2453
  %121 = bitcast %union.VectorReg* %7 to i8*
  %122 = add i64 %61, -8
  %123 = add i64 %85, 8
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %122 to float*
  %125 = load float, float* %124, align 4
  %126 = fpext float %125 to double
  %127 = bitcast %union.VectorReg* %7 to double*
  store double %126, double* %127, align 1, !tbaa !2454
  %128 = add i64 %85, 12
  store i64 %128, i64* %PC, align 8
  %129 = bitcast [32 x %union.VectorReg]* %6 to double*
  %130 = load double, double* %129, align 1
  %131 = fcmp uno double %126, %130
  br i1 %131, label %132, label %142

; <label>:132:                                    ; preds = %block_4028b8
  %133 = fadd double %126, %130
  %134 = bitcast double %133 to i64
  %135 = and i64 %134, 9221120237041090560
  %136 = icmp eq i64 %135, 9218868437227405312
  %137 = and i64 %134, 2251799813685247
  %138 = icmp ne i64 %137, 0
  %139 = and i1 %136, %138
  br i1 %139, label %140, label %148

; <label>:140:                                    ; preds = %132
  %141 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %128, %struct.Memory* %2) #13
  %.pre = load i64, i64* %PC, align 8
  %.pre17 = load i8, i8* %77, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:142:                                    ; preds = %block_4028b8
  %143 = fcmp ogt double %126, %130
  br i1 %143, label %148, label %144

; <label>:144:                                    ; preds = %142
  %145 = fcmp olt double %126, %130
  br i1 %145, label %148, label %146

; <label>:146:                                    ; preds = %144
  %147 = fcmp oeq double %126, %130
  br i1 %147, label %148, label %152

; <label>:148:                                    ; preds = %146, %144, %142, %132
  %149 = phi i8 [ 0, %142 ], [ 0, %144 ], [ 1, %146 ], [ 1, %132 ]
  %150 = phi i8 [ 0, %142 ], [ 0, %144 ], [ 0, %146 ], [ 1, %132 ]
  %151 = phi i8 [ 0, %142 ], [ 1, %144 ], [ 0, %146 ], [ 1, %132 ]
  store i8 %149, i8* %77, align 1, !tbaa !2456
  store i8 %150, i8* %73, align 1, !tbaa !2456
  store i8 %151, i8* %67, align 1, !tbaa !2456
  br label %152

; <label>:152:                                    ; preds = %148, %146
  %153 = phi i8 [ %149, %148 ], [ 0, %146 ]
  store i8 0, i8* %81, align 1, !tbaa !2456
  store i8 0, i8* %80, align 1, !tbaa !2456
  store i8 0, i8* %74, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %152, %140
  %154 = phi i8 [ %.pre17, %140 ], [ %153, %152 ]
  %155 = phi i64 [ %.pre, %140 ], [ %128, %152 ]
  %156 = phi %struct.Memory* [ %141, %140 ], [ %2, %152 ]
  %157 = icmp eq i8 %154, 0
  %.v25 = select i1 %157, i64 17, i64 6
  %158 = add i64 %155, %.v25
  store i64 %158, i64* %PC, align 8, !tbaa !2428
  br i1 %157, label %block_4028d5, label %block_4028ca

block_40293c:                                     ; preds = %block_402930
  %159 = add i64 %430, -32
  %160 = add i64 %466, 4
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %159 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = add i64 %430, -48
  %164 = add i64 %466, 8
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = sext i32 %166 to i64
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = shl nsw i64 %167, 2
  %169 = add i64 %168, %162
  %170 = add i64 %466, 13
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i32*
  %172 = load i32, i32* %171, align 4
  store i32 %172, i32* %114, align 1, !tbaa !2451
  store float 0.000000e+00, float* %374, align 1, !tbaa !2451
  store float 0.000000e+00, float* %375, align 1, !tbaa !2451
  store float 0.000000e+00, float* %376, align 1, !tbaa !2451
  %173 = add i64 %430, -8
  %174 = add i64 %466, 18
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i32*
  %176 = load i32, i32* %175, align 4
  store i32 %176, i32* %378, align 1, !tbaa !2451
  store float 0.000000e+00, float* %380, align 1, !tbaa !2451
  store float 0.000000e+00, float* %382, align 1, !tbaa !2451
  store float 0.000000e+00, float* %384, align 1, !tbaa !2451
  %177 = add i64 %430, -16
  %178 = add i64 %466, 22
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179, align 8
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = add i64 %430, -44
  %182 = add i64 %466, 26
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %181 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %184 to i64
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = shl nsw i64 %185, 2
  %187 = add i64 %186, %180
  %188 = add i64 %466, 31
  store i64 %188, i64* %PC, align 8
  %189 = load <2 x float>, <2 x float>* %385, align 1
  %190 = load <2 x i32>, <2 x i32>* %386, align 1
  %191 = inttoptr i64 %187 to float*
  %192 = load float, float* %191, align 4
  %193 = extractelement <2 x float> %189, i32 0
  %194 = fmul float %193, %192
  store float %194, float* %377, align 1, !tbaa !2451
  %195 = bitcast <2 x float> %189 to <2 x i32>
  %196 = extractelement <2 x i32> %195, i32 1
  store i32 %196, i32* %387, align 1, !tbaa !2451
  %197 = extractelement <2 x i32> %190, i32 0
  store i32 %197, i32* %388, align 1, !tbaa !2451
  %198 = extractelement <2 x i32> %190, i32 1
  store i32 %198, i32* %389, align 1, !tbaa !2451
  %199 = load <2 x float>, <2 x float>* %23, align 1
  %200 = load <2 x i32>, <2 x i32>* %390, align 1
  %201 = load <2 x float>, <2 x float>* %385, align 1
  %202 = extractelement <2 x float> %199, i32 0
  %203 = extractelement <2 x float> %201, i32 0
  %204 = fadd float %202, %203
  store float %204, float* %373, align 1, !tbaa !2451
  %205 = bitcast <2 x float> %199 to <2 x i32>
  %206 = extractelement <2 x i32> %205, i32 1
  store i32 %206, i32* %116, align 1, !tbaa !2451
  %207 = extractelement <2 x i32> %200, i32 0
  store i32 %207, i32* %117, align 1, !tbaa !2451
  %208 = extractelement <2 x i32> %200, i32 1
  store i32 %208, i32* %119, align 1, !tbaa !2451
  %209 = add i64 %466, 39
  store i64 %209, i64* %PC, align 8
  %210 = load i64, i64* %161, align 8
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = add i64 %466, 43
  store i64 %211, i64* %PC, align 8
  %212 = load i32, i32* %165, align 4
  %213 = sext i32 %212 to i64
  store i64 %213, i64* %RCX, align 8, !tbaa !2428
  %214 = shl nsw i64 %213, 2
  %215 = add i64 %214, %210
  %216 = add i64 %466, 48
  store i64 %216, i64* %PC, align 8
  %217 = load <2 x float>, <2 x float>* %23, align 1
  %218 = extractelement <2 x float> %217, i32 0
  %219 = inttoptr i64 %215 to float*
  store float %218, float* %219, align 4
  %220 = load i64, i64* %RBP, align 8
  %221 = add i64 %220, -44
  %222 = load i64, i64* %PC, align 8
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %221 to i32*
  %225 = load i32, i32* %224, align 4
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %RDX, align 8, !tbaa !2428
  %227 = add i64 %220, -20
  %228 = add i64 %222, 6
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %227 to i32*
  %230 = load i32, i32* %229, align 4
  %231 = add i32 %230, %225
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RDX, align 8, !tbaa !2428
  %233 = icmp ult i32 %231, %225
  %234 = icmp ult i32 %231, %230
  %235 = or i1 %233, %234
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %67, align 1, !tbaa !2432
  %237 = and i32 %231, 255
  %238 = tail call i32 @llvm.ctpop.i32(i32 %237) #12
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  store i8 %241, i8* %73, align 1, !tbaa !2446
  %242 = xor i32 %230, %225
  %243 = xor i32 %242, %231
  %244 = lshr i32 %243, 4
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  store i8 %246, i8* %74, align 1, !tbaa !2447
  %247 = icmp eq i32 %231, 0
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %77, align 1, !tbaa !2448
  %249 = lshr i32 %231, 31
  %250 = trunc i32 %249 to i8
  store i8 %250, i8* %80, align 1, !tbaa !2449
  %251 = lshr i32 %225, 31
  %252 = lshr i32 %230, 31
  %253 = xor i32 %249, %251
  %254 = xor i32 %249, %252
  %255 = add nuw nsw i32 %253, %254
  %256 = icmp eq i32 %255, 2
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %81, align 1, !tbaa !2450
  %258 = add i64 %222, 9
  store i64 %258, i64* %PC, align 8
  store i32 %231, i32* %224, align 4
  %259 = load i64, i64* %RBP, align 8
  %260 = add i64 %259, -48
  %261 = load i64, i64* %PC, align 8
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC, align 8
  %263 = inttoptr i64 %260 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RDX, align 8, !tbaa !2428
  %266 = add i64 %259, -36
  %267 = add i64 %261, 6
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i32*
  %269 = load i32, i32* %268, align 4
  %270 = add i32 %269, %264
  %271 = zext i32 %270 to i64
  store i64 %271, i64* %RDX, align 8, !tbaa !2428
  %272 = icmp ult i32 %270, %264
  %273 = icmp ult i32 %270, %269
  %274 = or i1 %272, %273
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %67, align 1, !tbaa !2432
  %276 = and i32 %270, 255
  %277 = tail call i32 @llvm.ctpop.i32(i32 %276) #12
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  store i8 %280, i8* %73, align 1, !tbaa !2446
  %281 = xor i32 %269, %264
  %282 = xor i32 %281, %270
  %283 = lshr i32 %282, 4
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  store i8 %285, i8* %74, align 1, !tbaa !2447
  %286 = icmp eq i32 %270, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %77, align 1, !tbaa !2448
  %288 = lshr i32 %270, 31
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %80, align 1, !tbaa !2449
  %290 = lshr i32 %264, 31
  %291 = lshr i32 %269, 31
  %292 = xor i32 %288, %290
  %293 = xor i32 %288, %291
  %294 = add nuw nsw i32 %292, %293
  %295 = icmp eq i32 %294, 2
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %81, align 1, !tbaa !2450
  %297 = add i64 %261, 9
  store i64 %297, i64* %PC, align 8
  store i32 %270, i32* %263, align 4
  %298 = load i64, i64* %RBP, align 8
  %299 = add i64 %298, -40
  %300 = load i64, i64* %PC, align 8
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = add i32 %303, 1
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %RAX, align 8, !tbaa !2428
  %306 = icmp eq i32 %303, -1
  %307 = icmp eq i32 %304, 0
  %308 = or i1 %306, %307
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %67, align 1, !tbaa !2432
  %310 = and i32 %304, 255
  %311 = tail call i32 @llvm.ctpop.i32(i32 %310) #12
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  store i8 %314, i8* %73, align 1, !tbaa !2446
  %315 = xor i32 %304, %303
  %316 = lshr i32 %315, 4
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  store i8 %318, i8* %74, align 1, !tbaa !2447
  %319 = zext i1 %307 to i8
  store i8 %319, i8* %77, align 1, !tbaa !2448
  %320 = lshr i32 %304, 31
  %321 = trunc i32 %320 to i8
  store i8 %321, i8* %80, align 1, !tbaa !2449
  %322 = lshr i32 %303, 31
  %323 = xor i32 %320, %322
  %324 = add nuw nsw i32 %323, %320
  %325 = icmp eq i32 %324, 2
  %326 = zext i1 %325 to i8
  store i8 %326, i8* %81, align 1, !tbaa !2450
  %327 = add i64 %300, 9
  store i64 %327, i64* %PC, align 8
  store i32 %304, i32* %302, align 4
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, -87
  store i64 %329, i64* %PC, align 8, !tbaa !2428
  br label %block_402930

block_402998:                                     ; preds = %block_4029a4, %block_402991
  %330 = phi i64 [ %664, %block_4029a4 ], [ %.pre18, %block_402991 ]
  %331 = load i64, i64* %RBP, align 8
  %332 = add i64 %331, -40
  %333 = add i64 %330, 3
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i32*
  %335 = load i32, i32* %334, align 4
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = add i64 %331, -4
  %338 = add i64 %330, 6
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = sub i32 %335, %340
  %342 = icmp ult i32 %335, %340
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %67, align 1, !tbaa !2432
  %344 = and i32 %341, 255
  %345 = tail call i32 @llvm.ctpop.i32(i32 %344) #12
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  store i8 %348, i8* %73, align 1, !tbaa !2446
  %349 = xor i32 %340, %335
  %350 = xor i32 %349, %341
  %351 = lshr i32 %350, 4
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %74, align 1, !tbaa !2447
  %354 = icmp eq i32 %341, 0
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %77, align 1, !tbaa !2448
  %356 = lshr i32 %341, 31
  %357 = trunc i32 %356 to i8
  store i8 %357, i8* %80, align 1, !tbaa !2449
  %358 = lshr i32 %335, 31
  %359 = lshr i32 %340, 31
  %360 = xor i32 %359, %358
  %361 = xor i32 %356, %358
  %362 = add nuw nsw i32 %361, %360
  %363 = icmp eq i32 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %81, align 1, !tbaa !2450
  %365 = icmp ne i8 %357, 0
  %366 = xor i1 %365, %363
  %.v29 = select i1 %366, i64 12, i64 74
  %367 = add i64 %330, %.v29
  store i64 %367, i64* %PC, align 8, !tbaa !2428
  br i1 %366, label %block_4029a4, label %block_4029e7.loopexit

block_402929:                                     ; preds = %block_402910, %block_40291a
  %368 = phi i64 [ %428, %block_402910 ], [ %.pre22, %block_40291a ]
  %369 = phi i64 [ %413, %block_402910 ], [ %.pre21, %block_40291a ]
  %370 = add i64 %369, -40
  %371 = add i64 %368, 7
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %370 to i32*
  store i32 0, i32* %372, align 4
  %373 = bitcast [32 x %union.VectorReg]* %6 to float*
  %374 = bitcast i8* %115 to float*
  %375 = bitcast i64* %113 to float*
  %376 = bitcast i8* %118 to float*
  %377 = bitcast %union.VectorReg* %7 to float*
  %378 = bitcast %union.VectorReg* %7 to i32*
  %379 = getelementptr inbounds i8, i8* %121, i64 4
  %380 = bitcast i8* %379 to float*
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %382 = bitcast i64* %381 to float*
  %383 = getelementptr inbounds i8, i8* %121, i64 12
  %384 = bitcast i8* %383 to float*
  %385 = bitcast %union.VectorReg* %7 to <2 x float>*
  %386 = bitcast i64* %381 to <2 x i32>*
  %387 = bitcast i8* %379 to i32*
  %388 = bitcast i64* %381 to i32*
  %389 = bitcast i8* %383 to i32*
  %390 = bitcast i64* %113 to <2 x i32>*
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_402930

block_402991:                                     ; preds = %block_4028df
  %391 = add i64 %549, -40
  %392 = add i64 %111, 7
  store i64 %392, i64* %PC, align 8
  %393 = inttoptr i64 %391 to i32*
  store i32 0, i32* %393, align 4
  %394 = bitcast [32 x %union.VectorReg]* %6 to float*
  %395 = bitcast i8* %115 to float*
  %396 = bitcast i64* %113 to float*
  %397 = bitcast i8* %118 to float*
  %398 = bitcast %union.VectorReg* %7 to float*
  %399 = bitcast %union.VectorReg* %7 to i32*
  %400 = getelementptr inbounds i8, i8* %121, i64 4
  %401 = bitcast i8* %400 to float*
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %403 = bitcast i64* %402 to float*
  %404 = getelementptr inbounds i8, i8* %121, i64 12
  %405 = bitcast i8* %404 to float*
  %406 = bitcast %union.VectorReg* %7 to <2 x float>*
  %407 = bitcast i64* %402 to <2 x i32>*
  %408 = bitcast i8* %400 to i32*
  %409 = bitcast i64* %402 to i32*
  %410 = bitcast i8* %404 to i32*
  %411 = bitcast i64* %113 to <2 x i32>*
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_402998

block_402910:                                     ; preds = %block_4028e9, %block_402901
  %412 = phi i64 [ %496, %block_4028e9 ], [ %.pre20, %block_402901 ]
  %413 = phi i64 [ %480, %block_4028e9 ], [ %.pre19, %block_402901 ]
  %414 = add i64 %413, -36
  %415 = add i64 %412, 4
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i32*
  %417 = load i32, i32* %416, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %418 = and i32 %417, 255
  %419 = tail call i32 @llvm.ctpop.i32(i32 %418) #12
  %420 = trunc i32 %419 to i8
  %421 = and i8 %420, 1
  %422 = xor i8 %421, 1
  store i8 %422, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  %423 = icmp eq i32 %417, 0
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %77, align 1, !tbaa !2448
  %425 = lshr i32 %417, 31
  %426 = trunc i32 %425 to i8
  store i8 %426, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  %427 = icmp ne i8 %426, 0
  %.v14 = select i1 %427, i64 6, i64 21
  %428 = add i64 %415, %.v14
  store i64 %428, i64* %PC, align 8, !tbaa !2428
  br i1 %427, label %block_40291a, label %block_402929

block_402930:                                     ; preds = %block_402929, %block_40293c
  %429 = phi i64 [ %.pre23, %block_402929 ], [ %329, %block_40293c ]
  %430 = load i64, i64* %RBP, align 8
  %431 = add i64 %430, -40
  %432 = add i64 %429, 3
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %431 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = zext i32 %434 to i64
  store i64 %435, i64* %RAX, align 8, !tbaa !2428
  %436 = add i64 %430, -4
  %437 = add i64 %429, 6
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %436 to i32*
  %439 = load i32, i32* %438, align 4
  %440 = sub i32 %434, %439
  %441 = icmp ult i32 %434, %439
  %442 = zext i1 %441 to i8
  store i8 %442, i8* %67, align 1, !tbaa !2432
  %443 = and i32 %440, 255
  %444 = tail call i32 @llvm.ctpop.i32(i32 %443) #12
  %445 = trunc i32 %444 to i8
  %446 = and i8 %445, 1
  %447 = xor i8 %446, 1
  store i8 %447, i8* %73, align 1, !tbaa !2446
  %448 = xor i32 %439, %434
  %449 = xor i32 %448, %440
  %450 = lshr i32 %449, 4
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  store i8 %452, i8* %74, align 1, !tbaa !2447
  %453 = icmp eq i32 %440, 0
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %77, align 1, !tbaa !2448
  %455 = lshr i32 %440, 31
  %456 = trunc i32 %455 to i8
  store i8 %456, i8* %80, align 1, !tbaa !2449
  %457 = lshr i32 %434, 31
  %458 = lshr i32 %439, 31
  %459 = xor i32 %458, %457
  %460 = xor i32 %455, %457
  %461 = add nuw nsw i32 %460, %459
  %462 = icmp eq i32 %461, 2
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %81, align 1, !tbaa !2450
  %464 = icmp ne i8 %456, 0
  %465 = xor i1 %464, %462
  %.v27 = select i1 %465, i64 12, i64 92
  %466 = add i64 %429, %.v27
  store i64 %466, i64* %PC, align 8, !tbaa !2428
  br i1 %465, label %block_40293c, label %block_4029e7.loopexit35

block_4028ca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %467 = load i8, i8* %73, align 1, !tbaa !2446
  %468 = icmp ne i8 %467, 0
  %.v32 = select i1 %468, i64 11, i64 6
  %469 = add i64 %158, %.v32
  store i64 %469, i64* %PC, align 8, !tbaa !2428
  %470 = icmp eq i8 %467, 1
  br i1 %470, label %block_4028d5, label %block_4029e7

block_4028e9:                                     ; preds = %block_4028d5, %block_4028df
  %471 = phi i64 [ %575, %block_4028d5 ], [ %111, %block_4028df ]
  %472 = add i64 %549, -44
  %473 = add i64 %471, 7
  store i64 %473, i64* %PC, align 8
  %474 = inttoptr i64 %472 to i32*
  store i32 0, i32* %474, align 4
  %475 = load i64, i64* %RBP, align 8
  %476 = add i64 %475, -48
  %477 = load i64, i64* %PC, align 8
  %478 = add i64 %477, 7
  store i64 %478, i64* %PC, align 8
  %479 = inttoptr i64 %476 to i32*
  store i32 0, i32* %479, align 4
  %480 = load i64, i64* %RBP, align 8
  %481 = add i64 %480, -20
  %482 = load i64, i64* %PC, align 8
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %481 to i32*
  %485 = load i32, i32* %484, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %486 = and i32 %485, 255
  %487 = tail call i32 @llvm.ctpop.i32(i32 %486) #12
  %488 = trunc i32 %487 to i8
  %489 = and i8 %488, 1
  %490 = xor i8 %489, 1
  store i8 %490, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  %491 = icmp eq i32 %485, 0
  %492 = zext i1 %491 to i8
  store i8 %492, i8* %77, align 1, !tbaa !2448
  %493 = lshr i32 %485, 31
  %494 = trunc i32 %493 to i8
  store i8 %494, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  %495 = icmp ne i8 %494, 0
  %.v = select i1 %495, i64 6, i64 21
  %496 = add i64 %483, %.v
  store i64 %496, i64* %PC, align 8, !tbaa !2428
  br i1 %495, label %block_402901, label %block_402910

block_40291a:                                     ; preds = %block_402910
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  store i8 0, i8* %74, align 1, !tbaa !2447
  %497 = add i64 %413, -4
  %498 = add i64 %428, 5
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = sub i32 0, %500
  %502 = lshr i32 %501, 31
  %503 = sub i32 1, %500
  %504 = zext i32 %503 to i64
  store i64 %504, i64* %RAX, align 8, !tbaa !2428
  %505 = icmp eq i32 %501, -1
  %506 = icmp eq i32 %503, 0
  %507 = or i1 %505, %506
  %508 = zext i1 %507 to i8
  store i8 %508, i8* %67, align 1, !tbaa !2432
  %509 = and i32 %503, 255
  %510 = tail call i32 @llvm.ctpop.i32(i32 %509) #12
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  store i8 %513, i8* %73, align 1, !tbaa !2446
  %514 = xor i32 %503, %501
  %515 = lshr i32 %514, 4
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  store i8 %517, i8* %74, align 1, !tbaa !2447
  %518 = zext i1 %506 to i8
  store i8 %518, i8* %77, align 1, !tbaa !2448
  %519 = lshr i32 %503, 31
  %520 = trunc i32 %519 to i8
  store i8 %520, i8* %80, align 1, !tbaa !2449
  %521 = xor i32 %519, %502
  %522 = add nuw nsw i32 %521, %519
  %523 = icmp eq i32 %522, 2
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %81, align 1, !tbaa !2450
  %525 = add i64 %428, 12
  store i64 %525, i64* %PC, align 8
  %526 = load i32, i32* %416, align 4
  %527 = sext i32 %503 to i64
  %528 = sext i32 %526 to i64
  %529 = mul nsw i64 %528, %527
  %530 = trunc i64 %529 to i32
  %531 = and i64 %529, 4294967295
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = shl i64 %529, 32
  %533 = ashr exact i64 %532, 32
  %534 = icmp ne i64 %533, %529
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %67, align 1, !tbaa !2432
  %536 = and i32 %530, 255
  %537 = tail call i32 @llvm.ctpop.i32(i32 %536) #12
  %538 = trunc i32 %537 to i8
  %539 = and i8 %538, 1
  %540 = xor i8 %539, 1
  store i8 %540, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %541 = lshr i32 %530, 31
  %542 = trunc i32 %541 to i8
  store i8 %542, i8* %80, align 1, !tbaa !2449
  store i8 %535, i8* %81, align 1, !tbaa !2450
  %543 = load i64, i64* %RBP, align 8
  %544 = add i64 %543, -48
  %545 = trunc i64 %529 to i32
  %546 = add i64 %428, 15
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %544 to i32*
  store i32 %545, i32* %547, align 4
  %.pre21 = load i64, i64* %RBP, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_402929

block_4028d5:                                     ; preds = %block_4028ca, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %548 = phi i64 [ %469, %block_4028ca ], [ %158, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %549 = load i64, i64* %RBP, align 8
  %550 = add i64 %549, -20
  %551 = add i64 %548, 4
  store i64 %551, i64* %PC, align 8
  %552 = inttoptr i64 %550 to i32*
  %553 = load i32, i32* %552, align 4
  %554 = add i32 %553, -1
  %555 = icmp eq i32 %553, 0
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %67, align 1, !tbaa !2432
  %557 = and i32 %554, 255
  %558 = tail call i32 @llvm.ctpop.i32(i32 %557) #12
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  %561 = xor i8 %560, 1
  store i8 %561, i8* %73, align 1, !tbaa !2446
  %562 = xor i32 %554, %553
  %563 = lshr i32 %562, 4
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  store i8 %565, i8* %74, align 1, !tbaa !2447
  %566 = icmp eq i32 %554, 0
  %567 = zext i1 %566 to i8
  store i8 %567, i8* %77, align 1, !tbaa !2448
  %568 = lshr i32 %554, 31
  %569 = trunc i32 %568 to i8
  store i8 %569, i8* %80, align 1, !tbaa !2449
  %570 = lshr i32 %553, 31
  %571 = xor i32 %568, %570
  %572 = add nuw nsw i32 %571, %570
  %573 = icmp eq i32 %572, 2
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %81, align 1, !tbaa !2450
  %.v26 = select i1 %566, i64 10, i64 20
  %575 = add i64 %548, %.v26
  store i64 %575, i64* %PC, align 8, !tbaa !2428
  br i1 %566, label %block_4028df, label %block_4028e9

block_4029a4:                                     ; preds = %block_402998
  %576 = add i64 %331, -32
  %577 = add i64 %367, 4
  store i64 %577, i64* %PC, align 8
  %578 = inttoptr i64 %576 to i64*
  %579 = load i64, i64* %578, align 8
  store i64 %579, i64* %RAX, align 8, !tbaa !2428
  %580 = add i64 %367, 8
  store i64 %580, i64* %PC, align 8
  %581 = load i32, i32* %334, align 4
  %582 = sext i32 %581 to i64
  store i64 %582, i64* %RCX, align 8, !tbaa !2428
  %583 = shl nsw i64 %582, 2
  %584 = add i64 %583, %579
  %585 = add i64 %367, 13
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i32*
  %587 = load i32, i32* %586, align 4
  store i32 %587, i32* %114, align 1, !tbaa !2451
  store float 0.000000e+00, float* %395, align 1, !tbaa !2451
  store float 0.000000e+00, float* %396, align 1, !tbaa !2451
  store float 0.000000e+00, float* %397, align 1, !tbaa !2451
  %588 = add i64 %331, -8
  %589 = add i64 %367, 18
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %588 to i32*
  %591 = load i32, i32* %590, align 4
  store i32 %591, i32* %399, align 1, !tbaa !2451
  store float 0.000000e+00, float* %401, align 1, !tbaa !2451
  store float 0.000000e+00, float* %403, align 1, !tbaa !2451
  store float 0.000000e+00, float* %405, align 1, !tbaa !2451
  %592 = add i64 %331, -16
  %593 = add i64 %367, 22
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %592 to i64*
  %595 = load i64, i64* %594, align 8
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = add i64 %367, 26
  store i64 %596, i64* %PC, align 8
  %597 = load i32, i32* %334, align 4
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RCX, align 8, !tbaa !2428
  %599 = shl nsw i64 %598, 2
  %600 = add i64 %599, %595
  %601 = add i64 %367, 31
  store i64 %601, i64* %PC, align 8
  %602 = load <2 x float>, <2 x float>* %406, align 1
  %603 = load <2 x i32>, <2 x i32>* %407, align 1
  %604 = inttoptr i64 %600 to float*
  %605 = load float, float* %604, align 4
  %606 = extractelement <2 x float> %602, i32 0
  %607 = fmul float %606, %605
  store float %607, float* %398, align 1, !tbaa !2451
  %608 = bitcast <2 x float> %602 to <2 x i32>
  %609 = extractelement <2 x i32> %608, i32 1
  store i32 %609, i32* %408, align 1, !tbaa !2451
  %610 = extractelement <2 x i32> %603, i32 0
  store i32 %610, i32* %409, align 1, !tbaa !2451
  %611 = extractelement <2 x i32> %603, i32 1
  store i32 %611, i32* %410, align 1, !tbaa !2451
  %612 = load <2 x float>, <2 x float>* %23, align 1
  %613 = load <2 x i32>, <2 x i32>* %411, align 1
  %614 = load <2 x float>, <2 x float>* %406, align 1
  %615 = extractelement <2 x float> %612, i32 0
  %616 = extractelement <2 x float> %614, i32 0
  %617 = fadd float %615, %616
  store float %617, float* %394, align 1, !tbaa !2451
  %618 = bitcast <2 x float> %612 to <2 x i32>
  %619 = extractelement <2 x i32> %618, i32 1
  store i32 %619, i32* %116, align 1, !tbaa !2451
  %620 = extractelement <2 x i32> %613, i32 0
  store i32 %620, i32* %117, align 1, !tbaa !2451
  %621 = extractelement <2 x i32> %613, i32 1
  store i32 %621, i32* %119, align 1, !tbaa !2451
  %622 = add i64 %367, 39
  store i64 %622, i64* %PC, align 8
  %623 = load i64, i64* %578, align 8
  store i64 %623, i64* %RAX, align 8, !tbaa !2428
  %624 = add i64 %367, 43
  store i64 %624, i64* %PC, align 8
  %625 = load i32, i32* %334, align 4
  %626 = sext i32 %625 to i64
  store i64 %626, i64* %RCX, align 8, !tbaa !2428
  %627 = shl nsw i64 %626, 2
  %628 = add i64 %627, %623
  %629 = add i64 %367, 48
  store i64 %629, i64* %PC, align 8
  %630 = load <2 x float>, <2 x float>* %23, align 1
  %631 = extractelement <2 x float> %630, i32 0
  %632 = inttoptr i64 %628 to float*
  store float %631, float* %632, align 4
  %633 = load i64, i64* %RBP, align 8
  %634 = add i64 %633, -40
  %635 = load i64, i64* %PC, align 8
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %634 to i32*
  %638 = load i32, i32* %637, align 4
  %639 = add i32 %638, 1
  %640 = zext i32 %639 to i64
  store i64 %640, i64* %RAX, align 8, !tbaa !2428
  %641 = icmp eq i32 %638, -1
  %642 = icmp eq i32 %639, 0
  %643 = or i1 %641, %642
  %644 = zext i1 %643 to i8
  store i8 %644, i8* %67, align 1, !tbaa !2432
  %645 = and i32 %639, 255
  %646 = tail call i32 @llvm.ctpop.i32(i32 %645) #12
  %647 = trunc i32 %646 to i8
  %648 = and i8 %647, 1
  %649 = xor i8 %648, 1
  store i8 %649, i8* %73, align 1, !tbaa !2446
  %650 = xor i32 %639, %638
  %651 = lshr i32 %650, 4
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  store i8 %653, i8* %74, align 1, !tbaa !2447
  %654 = zext i1 %642 to i8
  store i8 %654, i8* %77, align 1, !tbaa !2448
  %655 = lshr i32 %639, 31
  %656 = trunc i32 %655 to i8
  store i8 %656, i8* %80, align 1, !tbaa !2449
  %657 = lshr i32 %638, 31
  %658 = xor i32 %655, %657
  %659 = add nuw nsw i32 %658, %655
  %660 = icmp eq i32 %659, 2
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %81, align 1, !tbaa !2450
  %662 = add i64 %635, 9
  store i64 %662, i64* %PC, align 8
  store i32 %639, i32* %637, align 4
  %663 = load i64, i64* %PC, align 8
  %664 = add i64 %663, -69
  store i64 %664, i64* %PC, align 8, !tbaa !2428
  br label %block_402998

block_4029e7.loopexit:                            ; preds = %block_402998
  br label %block_4029e7

block_4029e7.loopexit35:                          ; preds = %block_402930
  br label %block_4029e7

block_4029e7:                                     ; preds = %block_4029e7.loopexit35, %block_4029e7.loopexit, %block_4028ca, %block_402880
  %665 = phi i64 [ %85, %block_402880 ], [ %469, %block_4028ca ], [ %367, %block_4029e7.loopexit ], [ %466, %block_4029e7.loopexit35 ]
  %.sink5 = phi i64 [ 309, %block_402880 ], [ 280, %block_4028ca ], [ 6, %block_4029e7.loopexit ], [ 92, %block_4029e7.loopexit35 ]
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_402880 ], [ %156, %block_4028ca ], [ %156, %block_4029e7.loopexit ], [ %156, %block_4029e7.loopexit35 ]
  %666 = add i64 %.sink5, %665
  store i64 %666, i64* %PC, align 8
  %667 = load i64, i64* %10, align 8, !tbaa !2428
  %668 = add i64 %667, 8
  %669 = inttoptr i64 %667 to i64*
  %670 = load i64, i64* %669, align 8
  store i64 %670, i64* %RBP, align 8, !tbaa !2428
  store i64 %668, i64* %10, align 8, !tbaa !2428
  %671 = add i64 %666, 1
  store i64 %671, i64* %PC, align 8
  %672 = inttoptr i64 %668 to i64*
  %673 = load i64, i64* %672, align 8
  store i64 %673, i64* %PC, align 8, !tbaa !2428
  %674 = add i64 %667, 16
  store i64 %674, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_402901:                                     ; preds = %block_4028e9
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  store i8 0, i8* %74, align 1, !tbaa !2447
  %675 = add i64 %480, -4
  %676 = add i64 %496, 5
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i32*
  %678 = load i32, i32* %677, align 4
  %679 = sub i32 0, %678
  %680 = lshr i32 %679, 31
  %681 = sub i32 1, %678
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RAX, align 8, !tbaa !2428
  %683 = icmp eq i32 %679, -1
  %684 = icmp eq i32 %681, 0
  %685 = or i1 %683, %684
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %67, align 1, !tbaa !2432
  %687 = and i32 %681, 255
  %688 = tail call i32 @llvm.ctpop.i32(i32 %687) #12
  %689 = trunc i32 %688 to i8
  %690 = and i8 %689, 1
  %691 = xor i8 %690, 1
  store i8 %691, i8* %73, align 1, !tbaa !2446
  %692 = xor i32 %681, %679
  %693 = lshr i32 %692, 4
  %694 = trunc i32 %693 to i8
  %695 = and i8 %694, 1
  store i8 %695, i8* %74, align 1, !tbaa !2447
  %696 = zext i1 %684 to i8
  store i8 %696, i8* %77, align 1, !tbaa !2448
  %697 = lshr i32 %681, 31
  %698 = trunc i32 %697 to i8
  store i8 %698, i8* %80, align 1, !tbaa !2449
  %699 = xor i32 %697, %680
  %700 = add nuw nsw i32 %699, %697
  %701 = icmp eq i32 %700, 2
  %702 = zext i1 %701 to i8
  store i8 %702, i8* %81, align 1, !tbaa !2450
  %703 = add i64 %496, 12
  store i64 %703, i64* %PC, align 8
  %704 = load i32, i32* %484, align 4
  %705 = sext i32 %681 to i64
  %706 = sext i32 %704 to i64
  %707 = mul nsw i64 %706, %705
  %708 = trunc i64 %707 to i32
  %709 = and i64 %707, 4294967295
  store i64 %709, i64* %RAX, align 8, !tbaa !2428
  %710 = shl i64 %707, 32
  %711 = ashr exact i64 %710, 32
  %712 = icmp ne i64 %711, %707
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %67, align 1, !tbaa !2432
  %714 = and i32 %708, 255
  %715 = tail call i32 @llvm.ctpop.i32(i32 %714) #12
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  store i8 %718, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %719 = lshr i32 %708, 31
  %720 = trunc i32 %719 to i8
  store i8 %720, i8* %80, align 1, !tbaa !2449
  store i8 %713, i8* %81, align 1, !tbaa !2450
  %721 = load i64, i64* %RBP, align 8
  %722 = add i64 %721, -44
  %723 = trunc i64 %707 to i32
  %724 = add i64 %496, 15
  store i64 %724, i64* %PC, align 8
  %725 = inttoptr i64 %722 to i32*
  store i32 %723, i32* %725, align 4
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_402910
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4004a8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_4004a8:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #12
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_4004ba, label %block_4004b8

block_4004b8:                                     ; preds = %block_4004a8
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_4004ba

block_4004ba:                                     ; preds = %block_4004b8, %block_4004a8
  %27 = phi i64 [ %22, %block_4004a8 ], [ %.pre1, %block_4004b8 ]
  %28 = phi i64 [ %4, %block_4004a8 ], [ %.pre, %block_4004b8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004a8 ], [ %26, %block_4004b8 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #12
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %29, %28
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2447
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005f0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_4005f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %10, -289
  %41 = add i64 %10, 12
  %42 = add i64 %7, -32
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43, align 8
  store i64 %42, i64* %RSP, align 8, !tbaa !2428
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %44 = tail call fastcc %struct.Memory* @ext_653140_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %45 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %46 = load i64, i64* %PC, align 8
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 4) to i32*), align 4
  %48 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %47, i32* %48, align 1, !tbaa !2451
  %49 = getelementptr inbounds i8, i8* %45, i64 4
  %50 = bitcast i8* %49 to float*
  store float 0.000000e+00, float* %50, align 1, !tbaa !2451
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %52 = bitcast i64* %51 to float*
  store float 0.000000e+00, float* %52, align 1, !tbaa !2451
  %53 = getelementptr inbounds i8, i8* %45, i64 12
  %54 = bitcast i8* %53 to float*
  store float 0.000000e+00, float* %54, align 1, !tbaa !2451
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i64, i64* %RAX, align 8
  %58 = add i64 %46, 12
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %59, align 8
  %60 = bitcast %union.VectorReg* %4 to i8*
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -16
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 6
  store i64 %64, i64* %PC, align 8
  %65 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %66 = load <2 x i32>, <2 x i32>* %65, align 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %68 = bitcast i64* %67 to <2 x i32>*
  %69 = load <2 x i32>, <2 x i32>* %68, align 1
  %70 = inttoptr i64 %62 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sitofp i64 %71 to float
  %73 = bitcast %union.VectorReg* %4 to float*
  store float %72, float* %73, align 1, !tbaa !2451
  %74 = extractelement <2 x i32> %66, i32 1
  %75 = getelementptr inbounds i8, i8* %60, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %74, i32* %76, align 1, !tbaa !2451
  %77 = extractelement <2 x i32> %69, i32 0
  %78 = bitcast i64* %67 to i32*
  store i32 %77, i32* %78, align 1, !tbaa !2451
  %79 = extractelement <2 x i32> %69, i32 1
  %80 = getelementptr inbounds i8, i8* %60, i64 12
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 1, !tbaa !2451
  %82 = bitcast %union.VectorReg* %4 to <2 x float>*
  %83 = load <2 x float>, <2 x float>* %82, align 1
  %84 = load <2 x i32>, <2 x i32>* %68, align 1
  %85 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %86 = load <2 x float>, <2 x float>* %85, align 1
  %87 = extractelement <2 x float> %83, i32 0
  %88 = extractelement <2 x float> %86, i32 0
  %89 = fdiv float %87, %88
  store float %89, float* %73, align 1, !tbaa !2451
  %90 = bitcast <2 x float> %83 to <2 x i32>
  %91 = extractelement <2 x i32> %90, i32 1
  store i32 %91, i32* %76, align 1, !tbaa !2451
  %92 = extractelement <2 x i32> %84, i32 0
  store i32 %92, i32* %78, align 1, !tbaa !2451
  %93 = extractelement <2 x i32> %84, i32 1
  store i32 %93, i32* %81, align 1, !tbaa !2451
  %94 = add i64 %61, -4
  %95 = add i64 %63, 15
  store i64 %95, i64* %PC, align 8
  %96 = load <2 x float>, <2 x float>* %82, align 1
  %97 = extractelement <2 x float> %96, i32 0
  %98 = inttoptr i64 %94 to float*
  store float %97, float* %98, align 4
  %99 = load i64, i64* %RBP, align 8
  %100 = add i64 %99, -4
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 5
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %48, align 1, !tbaa !2451
  store float 0.000000e+00, float* %50, align 1, !tbaa !2451
  store float 0.000000e+00, float* %52, align 1, !tbaa !2451
  store float 0.000000e+00, float* %54, align 1, !tbaa !2451
  %105 = load i64, i64* %RSP, align 8
  %106 = add i64 %105, 16
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %107 = icmp ugt i64 %105, -17
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %14, align 1, !tbaa !2432
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %21, align 1, !tbaa !2446
  %115 = xor i64 %105, 16
  %116 = xor i64 %115, %106
  %117 = lshr i64 %116, 4
  %118 = trunc i64 %117 to i8
  %119 = and i8 %118, 1
  store i8 %119, i8* %27, align 1, !tbaa !2447
  %120 = icmp eq i64 %106, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %30, align 1, !tbaa !2448
  %122 = lshr i64 %106, 63
  %123 = trunc i64 %122 to i8
  store i8 %123, i8* %33, align 1, !tbaa !2449
  %124 = lshr i64 %105, 63
  %125 = xor i64 %122, %124
  %126 = add nuw nsw i64 %125, %122
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %39, align 1, !tbaa !2450
  %129 = add i64 %101, 10
  store i64 %129, i64* %PC, align 8
  %130 = add i64 %105, 24
  %131 = inttoptr i64 %106 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RBP, align 8, !tbaa !2428
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %133 = add i64 %101, 11
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %130 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  %136 = add i64 %105, 32
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %44
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401fc0_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_401fc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %16 = add i64 %12, -12
  %17 = load i32, i32* %EDI, align 4
  %18 = add i64 %15, 11
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i32*
  store i32 %17, i32* %19, align 4
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %RSI, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -20
  %28 = load i32, i32* %EDX, align 4
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %31, align 4
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i32, i32* %ECX, align 4
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i32*
  store i32 %34, i32* %37, align 4
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -32
  %40 = load i64, i64* %R8, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -40
  %46 = load i64, i64* %R9, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -20
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = add i64 %50, -56
  %58 = load i32, i32* %EAX, align 4
  %59 = add i64 %52, 6
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %60, align 4
  %61 = load i32, i32* %ECX, align 4
  %62 = zext i32 %61 to i64
  %63 = load i64, i64* %PC, align 8
  store i64 %62, i64* %RAX, align 8, !tbaa !2428
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %65 = sext i32 %61 to i64
  %66 = lshr i64 %65, 32
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -56
  %69 = add i64 %63, 6
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RCX, align 8, !tbaa !2428
  %73 = add i64 %63, 8
  store i64 %73, i64* %PC, align 8
  %74 = sext i32 %71 to i64
  %75 = shl nuw i64 %66, 32
  %76 = or i64 %75, %62
  %77 = sdiv i64 %76, %74
  %78 = shl i64 %77, 32
  %79 = ashr exact i64 %78, 32
  %80 = icmp eq i64 %77, %79
  br i1 %80, label %83, label %81

; <label>:81:                                     ; preds = %block_401fc0
  %82 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %73, %struct.Memory* %2) #13
  %.pre = load i64, i64* %RBP, align 8
  %.pre20 = load i32, i32* %EDX, align 4
  %.pre21 = load i64, i64* %PC, align 8
  %.pre40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.pre41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %.pre43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %.pre47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %.pre49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:83:                                     ; preds = %block_401fc0
  %84 = srem i64 %76, %74
  %85 = and i64 %77, 4294967295
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = and i64 %84, 4294967295
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %87, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %88, align 1, !tbaa !2446
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %89, align 1, !tbaa !2447
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %90, align 1, !tbaa !2448
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %91, align 1, !tbaa !2449
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %92, align 1, !tbaa !2450
  %93 = trunc i64 %84 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %83, %81
  %.pre-phi50 = phi i8* [ %92, %83 ], [ %.pre49, %81 ]
  %.pre-phi48 = phi i8* [ %91, %83 ], [ %.pre47, %81 ]
  %.pre-phi46 = phi i8* [ %90, %83 ], [ %.pre45, %81 ]
  %.pre-phi44 = phi i8* [ %89, %83 ], [ %.pre43, %81 ]
  %.pre-phi42 = phi i8* [ %88, %83 ], [ %.pre41, %81 ]
  %.pre-phi = phi i8* [ %87, %83 ], [ %.pre40, %81 ]
  %94 = phi i64 [ %73, %83 ], [ %.pre21, %81 ]
  %95 = phi i32 [ %93, %83 ], [ %.pre20, %81 ]
  %96 = phi i64 [ %67, %83 ], [ %.pre, %81 ]
  %97 = phi %struct.Memory* [ %2, %83 ], [ %82, %81 ]
  %98 = add i64 %96, -44
  %99 = add i64 %94, 3
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i32*
  store i32 %95, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -44
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = add i32 %106, -1
  %108 = icmp eq i32 %106, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %.pre-phi, align 1, !tbaa !2432
  %110 = and i32 %107, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %.pre-phi42, align 1, !tbaa !2446
  %115 = xor i32 %107, %106
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %.pre-phi44, align 1, !tbaa !2447
  %119 = icmp eq i32 %107, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %.pre-phi46, align 1, !tbaa !2448
  %121 = lshr i32 %107, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %.pre-phi48, align 1, !tbaa !2449
  %123 = lshr i32 %106, 31
  %124 = xor i32 %121, %123
  %125 = add nuw nsw i32 %124, %123
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %.pre-phi50, align 1, !tbaa !2450
  %128 = icmp ne i8 %122, 0
  %129 = xor i1 %128, %126
  %.v51 = select i1 %129, i64 122, i64 10
  %130 = add i64 %103, %.v51
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  br i1 %129, label %block_402069, label %block_401ff9

block_40227d:                                     ; preds = %block_402289, %block_40226d
  %131 = phi i64 [ %5006, %block_402289 ], [ %.pre34, %block_40226d ]
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -48
  %134 = add i64 %131, 3
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %133 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %132, -4
  %139 = add i64 %131, 6
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = sub i32 %136, %141
  %143 = icmp ult i32 %136, %141
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %.pre-phi, align 1, !tbaa !2432
  %145 = and i32 %142, 255
  %146 = tail call i32 @llvm.ctpop.i32(i32 %145) #12
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %.pre-phi42, align 1, !tbaa !2446
  %150 = xor i32 %141, %136
  %151 = xor i32 %150, %142
  %152 = lshr i32 %151, 4
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  store i8 %154, i8* %.pre-phi44, align 1, !tbaa !2447
  %155 = icmp eq i32 %142, 0
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %.pre-phi46, align 1, !tbaa !2448
  %157 = lshr i32 %142, 31
  %158 = trunc i32 %157 to i8
  store i8 %158, i8* %.pre-phi48, align 1, !tbaa !2449
  %159 = lshr i32 %136, 31
  %160 = lshr i32 %141, 31
  %161 = xor i32 %160, %159
  %162 = xor i32 %157, %159
  %163 = add nuw nsw i32 %162, %161
  %164 = icmp eq i32 %163, 2
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %.pre-phi50, align 1, !tbaa !2450
  %166 = icmp ne i8 %158, 0
  %167 = xor i1 %166, %164
  %.v58 = select i1 %167, i64 12, i64 434
  %168 = add i64 %131, %.v58
  store i64 %168, i64* %PC, align 8, !tbaa !2428
  br i1 %167, label %block_402289, label %block_40242f

block_401ff9:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %169 = add i64 %130, 3
  store i64 %169, i64* %PC, align 8
  %170 = load i32, i32* %105, align 4
  %171 = add i32 %170, -1
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = icmp eq i32 %170, 0
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %.pre-phi, align 1, !tbaa !2432
  %175 = and i32 %171, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #12
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %.pre-phi42, align 1, !tbaa !2446
  %180 = xor i32 %171, %170
  %181 = lshr i32 %180, 4
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  store i8 %183, i8* %.pre-phi44, align 1, !tbaa !2447
  %184 = icmp eq i32 %171, 0
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %.pre-phi46, align 1, !tbaa !2448
  %186 = lshr i32 %171, 31
  %187 = trunc i32 %186 to i8
  store i8 %187, i8* %.pre-phi48, align 1, !tbaa !2449
  %188 = lshr i32 %170, 31
  %189 = xor i32 %186, %188
  %190 = add nuw nsw i32 %189, %188
  %191 = icmp eq i32 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %.pre-phi50, align 1, !tbaa !2450
  %193 = add i64 %130, 9
  store i64 %193, i64* %PC, align 8
  store i32 %171, i32* %105, align 4
  %194 = load i64, i64* %RBP, align 8
  %195 = add i64 %194, -48
  %196 = load i64, i64* %PC, align 8
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %195 to i32*
  store i32 0, i32* %198, align 4
  %199 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %200 = bitcast [32 x %union.VectorReg]* %7 to float*
  %201 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %202 = getelementptr inbounds i8, i8* %199, i64 4
  %203 = bitcast i8* %202 to float*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %205 = bitcast i64* %204 to float*
  %206 = getelementptr inbounds i8, i8* %199, i64 12
  %207 = bitcast i8* %206 to float*
  %208 = bitcast %union.VectorReg* %8 to i8*
  %209 = bitcast %union.VectorReg* %8 to float*
  %210 = bitcast %union.VectorReg* %8 to i32*
  %211 = getelementptr inbounds i8, i8* %208, i64 4
  %212 = bitcast i8* %211 to float*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %214 = bitcast i64* %213 to float*
  %215 = getelementptr inbounds i8, i8* %208, i64 12
  %216 = bitcast i8* %215 to float*
  %217 = bitcast %union.VectorReg* %8 to <2 x float>*
  %218 = bitcast i64* %213 to <2 x i32>*
  %219 = bitcast i8* %211 to i32*
  %220 = bitcast i64* %213 to i32*
  %221 = bitcast i8* %215 to i32*
  %222 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %223 = bitcast i64* %204 to <2 x i32>*
  %224 = bitcast i8* %202 to i32*
  %225 = bitcast i64* %204 to i32*
  %226 = bitcast i8* %206 to i32*
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_402009

block_402069:                                     ; preds = %block_402064, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %227 = phi i64 [ %2934, %block_402064 ], [ %101, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  %228 = phi i64 [ %2858, %block_402064 ], [ %130, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %229 = add i64 %227, -20
  %230 = add i64 %228, 8
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i32*
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = add i64 %227, -60
  %235 = add i64 %228, 11
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i32*
  store i32 4, i32* %236, align 4
  %237 = load i32, i32* %ECX, align 4
  %238 = zext i32 %237 to i64
  %239 = load i64, i64* %PC, align 8
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %240 = sext i32 %237 to i64
  %241 = lshr i64 %240, 32
  store i64 %241, i64* %64, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -60
  %244 = add i64 %239, 6
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i32*
  %246 = load i32, i32* %245, align 4
  %247 = zext i32 %246 to i64
  store i64 %247, i64* %RCX, align 8, !tbaa !2428
  %248 = add i64 %239, 8
  store i64 %248, i64* %PC, align 8
  %249 = sext i32 %246 to i64
  %250 = shl nuw i64 %241, 32
  %251 = or i64 %250, %238
  %252 = sdiv i64 %251, %249
  %253 = shl i64 %252, 32
  %254 = ashr exact i64 %253, 32
  %255 = icmp eq i64 %252, %254
  br i1 %255, label %258, label %256

; <label>:256:                                    ; preds = %block_402069
  %257 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %248, %struct.Memory* %97) #13
  %.pre23 = load i64, i64* %RBP, align 8
  %.pre24 = load i32, i32* %EDX, align 4
  %.pre25 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:258:                                    ; preds = %block_402069
  %259 = srem i64 %251, %249
  %260 = and i64 %252, 4294967295
  store i64 %260, i64* %RAX, align 8, !tbaa !2428
  %261 = and i64 %259, 4294967295
  store i64 %261, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi50, align 1, !tbaa !2450
  %262 = trunc i64 %259 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %258, %256
  %263 = phi i64 [ %.pre25, %256 ], [ %248, %258 ]
  %264 = phi i32 [ %.pre24, %256 ], [ %262, %258 ]
  %265 = phi i64 [ %.pre23, %256 ], [ %242, %258 ]
  %266 = phi %struct.Memory* [ %257, %256 ], [ %97, %258 ]
  %267 = add i64 %265, -44
  %268 = add i64 %263, 3
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i32*
  store i32 %264, i32* %269, align 4
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -44
  %272 = load i64, i64* %PC, align 8
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC, align 8
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = add i32 %275, -2
  %277 = icmp ult i32 %275, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %.pre-phi, align 1, !tbaa !2432
  %279 = and i32 %276, 255
  %280 = tail call i32 @llvm.ctpop.i32(i32 %279) #12
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  store i8 %283, i8* %.pre-phi42, align 1, !tbaa !2446
  %284 = xor i32 %276, %275
  %285 = lshr i32 %284, 4
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  store i8 %287, i8* %.pre-phi44, align 1, !tbaa !2447
  %288 = icmp eq i32 %276, 0
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %.pre-phi46, align 1, !tbaa !2448
  %290 = lshr i32 %276, 31
  %291 = trunc i32 %290 to i8
  store i8 %291, i8* %.pre-phi48, align 1, !tbaa !2449
  %292 = lshr i32 %275, 31
  %293 = xor i32 %290, %292
  %294 = add nuw nsw i32 %293, %292
  %295 = icmp eq i32 %294, 2
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %.pre-phi50, align 1, !tbaa !2450
  %297 = icmp ne i8 %291, 0
  %298 = xor i1 %297, %295
  %.v53 = select i1 %298, i64 171, i64 10
  %299 = add i64 %272, %.v53
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  br i1 %298, label %block_40212a, label %block_402089

block_402475:                                     ; preds = %block_402469
  %300 = add i64 %3107, -16
  %301 = add i64 %3143, 4
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %300 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = add i64 %3143, 8
  store i64 %304, i64* %PC, align 8
  %305 = load i32, i32* %3110, align 4
  %306 = sext i32 %305 to i64
  store i64 %306, i64* %RCX, align 8, !tbaa !2428
  %307 = shl nsw i64 %306, 2
  %308 = add i64 %307, %303
  %309 = add i64 %3143, 13
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %308 to i32*
  %311 = load i32, i32* %310, align 4
  store i32 %311, i32* %3080, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3082, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3084, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3086, align 1, !tbaa !2451
  %312 = add i64 %3107, -32
  %313 = add i64 %3143, 17
  store i64 %313, i64* %PC, align 8
  %314 = inttoptr i64 %312 to i64*
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = add i64 %3107, -44
  %317 = add i64 %3143, 20
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %316 to i32*
  %319 = load i32, i32* %318, align 4
  %320 = add i32 %319, -15
  %321 = zext i32 %320 to i64
  store i64 %321, i64* %RDX, align 8, !tbaa !2428
  %322 = icmp ult i32 %319, 15
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %.pre-phi, align 1, !tbaa !2432
  %324 = and i32 %320, 255
  %325 = tail call i32 @llvm.ctpop.i32(i32 %324) #12
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = xor i8 %327, 1
  store i8 %328, i8* %.pre-phi42, align 1, !tbaa !2446
  %329 = xor i32 %320, %319
  %330 = lshr i32 %329, 4
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  store i8 %332, i8* %.pre-phi44, align 1, !tbaa !2447
  %333 = icmp eq i32 %320, 0
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %.pre-phi46, align 1, !tbaa !2448
  %335 = lshr i32 %320, 31
  %336 = trunc i32 %335 to i8
  store i8 %336, i8* %.pre-phi48, align 1, !tbaa !2449
  %337 = lshr i32 %319, 31
  %338 = xor i32 %335, %337
  %339 = add nuw nsw i32 %338, %337
  %340 = icmp eq i32 %339, 2
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %.pre-phi50, align 1, !tbaa !2450
  %342 = sext i32 %320 to i64
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = shl nsw i64 %342, 2
  %344 = add i64 %315, %343
  %345 = add i64 %3143, 31
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %344 to i32*
  %347 = load i32, i32* %346, align 4
  store i32 %347, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %348 = add i64 %3107, -40
  %349 = add i64 %3143, 35
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %348 to i64*
  %351 = load i64, i64* %350, align 8
  store i64 %351, i64* %RAX, align 8, !tbaa !2428
  %352 = add i64 %3107, -24
  %353 = add i64 %3143, 38
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %352 to i32*
  %355 = load i32, i32* %354, align 4
  %356 = zext i32 %355 to i64
  store i64 %356, i64* %RDX, align 8, !tbaa !2428
  %357 = add i64 %3143, 41
  store i64 %357, i64* %PC, align 8
  %358 = load i32, i32* %318, align 4
  %359 = add i32 %358, -15
  %360 = zext i32 %359 to i64
  store i64 %360, i64* %RSI, align 8, !tbaa !2428
  %361 = sext i32 %355 to i64
  %362 = sext i32 %359 to i64
  %363 = mul nsw i64 %362, %361
  %364 = trunc i64 %363 to i32
  %365 = and i64 %363, 4294967295
  store i64 %365, i64* %RDX, align 8, !tbaa !2428
  %366 = shl i64 %363, 32
  %367 = ashr exact i64 %366, 32
  %368 = icmp ne i64 %367, %363
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %.pre-phi, align 1, !tbaa !2432
  %370 = and i32 %364, 255
  %371 = tail call i32 @llvm.ctpop.i32(i32 %370) #12
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = xor i8 %373, 1
  store i8 %374, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %375 = lshr i32 %364, 31
  %376 = trunc i32 %375 to i8
  store i8 %376, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %369, i8* %.pre-phi50, align 1, !tbaa !2450
  %377 = load i64, i64* %RBP, align 8
  %378 = add i64 %377, -48
  %379 = add i64 %3143, 50
  store i64 %379, i64* %PC, align 8
  %380 = trunc i64 %363 to i32
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381, align 4
  %383 = add i32 %382, %380
  %384 = zext i32 %383 to i64
  store i64 %384, i64* %RDX, align 8, !tbaa !2428
  %385 = icmp ult i32 %383, %380
  %386 = icmp ult i32 %383, %382
  %387 = or i1 %385, %386
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %.pre-phi, align 1, !tbaa !2432
  %389 = and i32 %383, 255
  %390 = tail call i32 @llvm.ctpop.i32(i32 %389) #12
  %391 = trunc i32 %390 to i8
  %392 = and i8 %391, 1
  %393 = xor i8 %392, 1
  store i8 %393, i8* %.pre-phi42, align 1, !tbaa !2446
  %394 = xor i32 %382, %380
  %395 = xor i32 %394, %383
  %396 = lshr i32 %395, 4
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  store i8 %398, i8* %.pre-phi44, align 1, !tbaa !2447
  %399 = icmp eq i32 %383, 0
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %.pre-phi46, align 1, !tbaa !2448
  %401 = lshr i32 %383, 31
  %402 = trunc i32 %401 to i8
  store i8 %402, i8* %.pre-phi48, align 1, !tbaa !2449
  %403 = lshr i32 %380, 31
  %404 = lshr i32 %382, 31
  %405 = xor i32 %401, %403
  %406 = xor i32 %401, %404
  %407 = add nuw nsw i32 %405, %406
  %408 = icmp eq i32 %407, 2
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %.pre-phi50, align 1, !tbaa !2450
  %410 = sext i32 %383 to i64
  store i64 %410, i64* %RCX, align 8, !tbaa !2428
  %411 = load i64, i64* %RAX, align 8
  %412 = shl nsw i64 %410, 2
  %413 = add i64 %411, %412
  %414 = add i64 %3143, 58
  store i64 %414, i64* %PC, align 8
  %415 = load <2 x float>, <2 x float>* %3096, align 1
  %416 = load <2 x i32>, <2 x i32>* %3097, align 1
  %417 = inttoptr i64 %413 to float*
  %418 = load float, float* %417, align 4
  %419 = extractelement <2 x float> %415, i32 0
  %420 = fmul float %419, %418
  store float %420, float* %3088, align 1, !tbaa !2451
  %421 = bitcast <2 x float> %415 to <2 x i32>
  %422 = extractelement <2 x i32> %421, i32 1
  store i32 %422, i32* %3098, align 1, !tbaa !2451
  %423 = extractelement <2 x i32> %416, i32 0
  store i32 %423, i32* %3099, align 1, !tbaa !2451
  %424 = extractelement <2 x i32> %416, i32 1
  store i32 %424, i32* %3100, align 1, !tbaa !2451
  %425 = load <2 x float>, <2 x float>* %3101, align 1
  %426 = load <2 x i32>, <2 x i32>* %3102, align 1
  %427 = load <2 x float>, <2 x float>* %3096, align 1
  %428 = extractelement <2 x float> %425, i32 0
  %429 = extractelement <2 x float> %427, i32 0
  %430 = fadd float %428, %429
  store float %430, float* %3079, align 1, !tbaa !2451
  %431 = bitcast <2 x float> %425 to <2 x i32>
  %432 = extractelement <2 x i32> %431, i32 1
  store i32 %432, i32* %3103, align 1, !tbaa !2451
  %433 = extractelement <2 x i32> %426, i32 0
  store i32 %433, i32* %3104, align 1, !tbaa !2451
  %434 = extractelement <2 x i32> %426, i32 1
  store i32 %434, i32* %3105, align 1, !tbaa !2451
  %435 = add i64 %377, -32
  %436 = add i64 %3143, 66
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %435 to i64*
  %438 = load i64, i64* %437, align 8
  store i64 %438, i64* %RAX, align 8, !tbaa !2428
  %439 = add i64 %377, -44
  %440 = add i64 %3143, 69
  store i64 %440, i64* %PC, align 8
  %441 = inttoptr i64 %439 to i32*
  %442 = load i32, i32* %441, align 4
  %443 = add i32 %442, -14
  %444 = zext i32 %443 to i64
  store i64 %444, i64* %RDX, align 8, !tbaa !2428
  %445 = icmp ult i32 %442, 14
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %.pre-phi, align 1, !tbaa !2432
  %447 = and i32 %443, 255
  %448 = tail call i32 @llvm.ctpop.i32(i32 %447) #12
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  store i8 %451, i8* %.pre-phi42, align 1, !tbaa !2446
  %452 = xor i32 %443, %442
  %453 = lshr i32 %452, 4
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  store i8 %455, i8* %.pre-phi44, align 1, !tbaa !2447
  %456 = icmp eq i32 %443, 0
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %.pre-phi46, align 1, !tbaa !2448
  %458 = lshr i32 %443, 31
  %459 = trunc i32 %458 to i8
  store i8 %459, i8* %.pre-phi48, align 1, !tbaa !2449
  %460 = lshr i32 %442, 31
  %461 = xor i32 %458, %460
  %462 = add nuw nsw i32 %461, %460
  %463 = icmp eq i32 %462, 2
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %.pre-phi50, align 1, !tbaa !2450
  %465 = sext i32 %443 to i64
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = shl nsw i64 %465, 2
  %467 = add i64 %438, %466
  %468 = add i64 %3143, 80
  store i64 %468, i64* %PC, align 8
  %469 = inttoptr i64 %467 to i32*
  %470 = load i32, i32* %469, align 4
  store i32 %470, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %471 = load i64, i64* %RBP, align 8
  %472 = add i64 %471, -40
  %473 = add i64 %3143, 84
  store i64 %473, i64* %PC, align 8
  %474 = inttoptr i64 %472 to i64*
  %475 = load i64, i64* %474, align 8
  store i64 %475, i64* %RAX, align 8, !tbaa !2428
  %476 = add i64 %471, -24
  %477 = add i64 %3143, 87
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %476 to i32*
  %479 = load i32, i32* %478, align 4
  %480 = zext i32 %479 to i64
  store i64 %480, i64* %RDX, align 8, !tbaa !2428
  %481 = add i64 %471, -44
  %482 = add i64 %3143, 90
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i32*
  %484 = load i32, i32* %483, align 4
  %485 = add i32 %484, -14
  %486 = zext i32 %485 to i64
  store i64 %486, i64* %RSI, align 8, !tbaa !2428
  %487 = sext i32 %479 to i64
  %488 = sext i32 %485 to i64
  %489 = mul nsw i64 %488, %487
  %490 = trunc i64 %489 to i32
  %491 = and i64 %489, 4294967295
  store i64 %491, i64* %RDX, align 8, !tbaa !2428
  %492 = shl i64 %489, 32
  %493 = ashr exact i64 %492, 32
  %494 = icmp ne i64 %493, %489
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %.pre-phi, align 1, !tbaa !2432
  %496 = and i32 %490, 255
  %497 = tail call i32 @llvm.ctpop.i32(i32 %496) #12
  %498 = trunc i32 %497 to i8
  %499 = and i8 %498, 1
  %500 = xor i8 %499, 1
  store i8 %500, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %501 = lshr i32 %490, 31
  %502 = trunc i32 %501 to i8
  store i8 %502, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %495, i8* %.pre-phi50, align 1, !tbaa !2450
  %503 = add i64 %471, -48
  %504 = add i64 %3143, 99
  store i64 %504, i64* %PC, align 8
  %505 = trunc i64 %489 to i32
  %506 = inttoptr i64 %503 to i32*
  %507 = load i32, i32* %506, align 4
  %508 = add i32 %507, %505
  %509 = zext i32 %508 to i64
  store i64 %509, i64* %RDX, align 8, !tbaa !2428
  %510 = icmp ult i32 %508, %505
  %511 = icmp ult i32 %508, %507
  %512 = or i1 %510, %511
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %.pre-phi, align 1, !tbaa !2432
  %514 = and i32 %508, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #12
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %.pre-phi42, align 1, !tbaa !2446
  %519 = xor i32 %507, %505
  %520 = xor i32 %519, %508
  %521 = lshr i32 %520, 4
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  store i8 %523, i8* %.pre-phi44, align 1, !tbaa !2447
  %524 = icmp eq i32 %508, 0
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %.pre-phi46, align 1, !tbaa !2448
  %526 = lshr i32 %508, 31
  %527 = trunc i32 %526 to i8
  store i8 %527, i8* %.pre-phi48, align 1, !tbaa !2449
  %528 = lshr i32 %505, 31
  %529 = lshr i32 %507, 31
  %530 = xor i32 %526, %528
  %531 = xor i32 %526, %529
  %532 = add nuw nsw i32 %530, %531
  %533 = icmp eq i32 %532, 2
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %.pre-phi50, align 1, !tbaa !2450
  %535 = sext i32 %508 to i64
  store i64 %535, i64* %RCX, align 8, !tbaa !2428
  %536 = load i64, i64* %RAX, align 8
  %537 = shl nsw i64 %535, 2
  %538 = add i64 %536, %537
  %539 = add i64 %3143, 107
  store i64 %539, i64* %PC, align 8
  %540 = load <2 x float>, <2 x float>* %3096, align 1
  %541 = load <2 x i32>, <2 x i32>* %3097, align 1
  %542 = inttoptr i64 %538 to float*
  %543 = load float, float* %542, align 4
  %544 = extractelement <2 x float> %540, i32 0
  %545 = fmul float %544, %543
  store float %545, float* %3088, align 1, !tbaa !2451
  %546 = bitcast <2 x float> %540 to <2 x i32>
  %547 = extractelement <2 x i32> %546, i32 1
  store i32 %547, i32* %3098, align 1, !tbaa !2451
  %548 = extractelement <2 x i32> %541, i32 0
  store i32 %548, i32* %3099, align 1, !tbaa !2451
  %549 = extractelement <2 x i32> %541, i32 1
  store i32 %549, i32* %3100, align 1, !tbaa !2451
  %550 = load <2 x float>, <2 x float>* %3101, align 1
  %551 = load <2 x i32>, <2 x i32>* %3102, align 1
  %552 = load <2 x float>, <2 x float>* %3096, align 1
  %553 = extractelement <2 x float> %550, i32 0
  %554 = extractelement <2 x float> %552, i32 0
  %555 = fadd float %553, %554
  store float %555, float* %3079, align 1, !tbaa !2451
  %556 = bitcast <2 x float> %550 to <2 x i32>
  %557 = extractelement <2 x i32> %556, i32 1
  store i32 %557, i32* %3103, align 1, !tbaa !2451
  %558 = extractelement <2 x i32> %551, i32 0
  store i32 %558, i32* %3104, align 1, !tbaa !2451
  %559 = extractelement <2 x i32> %551, i32 1
  store i32 %559, i32* %3105, align 1, !tbaa !2451
  %560 = load i64, i64* %RBP, align 8
  %561 = add i64 %560, -32
  %562 = add i64 %3143, 115
  store i64 %562, i64* %PC, align 8
  %563 = inttoptr i64 %561 to i64*
  %564 = load i64, i64* %563, align 8
  store i64 %564, i64* %RAX, align 8, !tbaa !2428
  %565 = add i64 %560, -44
  %566 = add i64 %3143, 118
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i32*
  %568 = load i32, i32* %567, align 4
  %569 = add i32 %568, -13
  %570 = zext i32 %569 to i64
  store i64 %570, i64* %RDX, align 8, !tbaa !2428
  %571 = icmp ult i32 %568, 13
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %.pre-phi, align 1, !tbaa !2432
  %573 = and i32 %569, 255
  %574 = tail call i32 @llvm.ctpop.i32(i32 %573) #12
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  store i8 %577, i8* %.pre-phi42, align 1, !tbaa !2446
  %578 = xor i32 %569, %568
  %579 = lshr i32 %578, 4
  %580 = trunc i32 %579 to i8
  %581 = and i8 %580, 1
  store i8 %581, i8* %.pre-phi44, align 1, !tbaa !2447
  %582 = icmp eq i32 %569, 0
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %.pre-phi46, align 1, !tbaa !2448
  %584 = lshr i32 %569, 31
  %585 = trunc i32 %584 to i8
  store i8 %585, i8* %.pre-phi48, align 1, !tbaa !2449
  %586 = lshr i32 %568, 31
  %587 = xor i32 %584, %586
  %588 = add nuw nsw i32 %587, %586
  %589 = icmp eq i32 %588, 2
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %.pre-phi50, align 1, !tbaa !2450
  %591 = sext i32 %569 to i64
  store i64 %591, i64* %RCX, align 8, !tbaa !2428
  %592 = shl nsw i64 %591, 2
  %593 = add i64 %564, %592
  %594 = add i64 %3143, 129
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i32*
  %596 = load i32, i32* %595, align 4
  store i32 %596, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %597 = add i64 %560, -40
  %598 = add i64 %3143, 133
  store i64 %598, i64* %PC, align 8
  %599 = inttoptr i64 %597 to i64*
  %600 = load i64, i64* %599, align 8
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %601 = add i64 %560, -24
  %602 = add i64 %3143, 136
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to i32*
  %604 = load i32, i32* %603, align 4
  %605 = zext i32 %604 to i64
  store i64 %605, i64* %RDX, align 8, !tbaa !2428
  %606 = add i64 %3143, 139
  store i64 %606, i64* %PC, align 8
  %607 = load i32, i32* %567, align 4
  %608 = add i32 %607, -13
  %609 = zext i32 %608 to i64
  store i64 %609, i64* %RSI, align 8, !tbaa !2428
  %610 = sext i32 %604 to i64
  %611 = sext i32 %608 to i64
  %612 = mul nsw i64 %611, %610
  %613 = trunc i64 %612 to i32
  %614 = and i64 %612, 4294967295
  store i64 %614, i64* %RDX, align 8, !tbaa !2428
  %615 = shl i64 %612, 32
  %616 = ashr exact i64 %615, 32
  %617 = icmp ne i64 %616, %612
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %.pre-phi, align 1, !tbaa !2432
  %619 = and i32 %613, 255
  %620 = tail call i32 @llvm.ctpop.i32(i32 %619) #12
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = xor i8 %622, 1
  store i8 %623, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %624 = lshr i32 %613, 31
  %625 = trunc i32 %624 to i8
  store i8 %625, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %618, i8* %.pre-phi50, align 1, !tbaa !2450
  %626 = load i64, i64* %RBP, align 8
  %627 = add i64 %626, -48
  %628 = add i64 %3143, 148
  store i64 %628, i64* %PC, align 8
  %629 = trunc i64 %612 to i32
  %630 = inttoptr i64 %627 to i32*
  %631 = load i32, i32* %630, align 4
  %632 = add i32 %631, %629
  %633 = zext i32 %632 to i64
  store i64 %633, i64* %RDX, align 8, !tbaa !2428
  %634 = icmp ult i32 %632, %629
  %635 = icmp ult i32 %632, %631
  %636 = or i1 %634, %635
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %.pre-phi, align 1, !tbaa !2432
  %638 = and i32 %632, 255
  %639 = tail call i32 @llvm.ctpop.i32(i32 %638) #12
  %640 = trunc i32 %639 to i8
  %641 = and i8 %640, 1
  %642 = xor i8 %641, 1
  store i8 %642, i8* %.pre-phi42, align 1, !tbaa !2446
  %643 = xor i32 %631, %629
  %644 = xor i32 %643, %632
  %645 = lshr i32 %644, 4
  %646 = trunc i32 %645 to i8
  %647 = and i8 %646, 1
  store i8 %647, i8* %.pre-phi44, align 1, !tbaa !2447
  %648 = icmp eq i32 %632, 0
  %649 = zext i1 %648 to i8
  store i8 %649, i8* %.pre-phi46, align 1, !tbaa !2448
  %650 = lshr i32 %632, 31
  %651 = trunc i32 %650 to i8
  store i8 %651, i8* %.pre-phi48, align 1, !tbaa !2449
  %652 = lshr i32 %629, 31
  %653 = lshr i32 %631, 31
  %654 = xor i32 %650, %652
  %655 = xor i32 %650, %653
  %656 = add nuw nsw i32 %654, %655
  %657 = icmp eq i32 %656, 2
  %658 = zext i1 %657 to i8
  store i8 %658, i8* %.pre-phi50, align 1, !tbaa !2450
  %659 = sext i32 %632 to i64
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %660 = load i64, i64* %RAX, align 8
  %661 = shl nsw i64 %659, 2
  %662 = add i64 %660, %661
  %663 = add i64 %3143, 156
  store i64 %663, i64* %PC, align 8
  %664 = load <2 x float>, <2 x float>* %3096, align 1
  %665 = load <2 x i32>, <2 x i32>* %3097, align 1
  %666 = inttoptr i64 %662 to float*
  %667 = load float, float* %666, align 4
  %668 = extractelement <2 x float> %664, i32 0
  %669 = fmul float %668, %667
  store float %669, float* %3088, align 1, !tbaa !2451
  %670 = bitcast <2 x float> %664 to <2 x i32>
  %671 = extractelement <2 x i32> %670, i32 1
  store i32 %671, i32* %3098, align 1, !tbaa !2451
  %672 = extractelement <2 x i32> %665, i32 0
  store i32 %672, i32* %3099, align 1, !tbaa !2451
  %673 = extractelement <2 x i32> %665, i32 1
  store i32 %673, i32* %3100, align 1, !tbaa !2451
  %674 = load <2 x float>, <2 x float>* %3101, align 1
  %675 = load <2 x i32>, <2 x i32>* %3102, align 1
  %676 = load <2 x float>, <2 x float>* %3096, align 1
  %677 = extractelement <2 x float> %674, i32 0
  %678 = extractelement <2 x float> %676, i32 0
  %679 = fadd float %677, %678
  store float %679, float* %3079, align 1, !tbaa !2451
  %680 = bitcast <2 x float> %674 to <2 x i32>
  %681 = extractelement <2 x i32> %680, i32 1
  store i32 %681, i32* %3103, align 1, !tbaa !2451
  %682 = extractelement <2 x i32> %675, i32 0
  store i32 %682, i32* %3104, align 1, !tbaa !2451
  %683 = extractelement <2 x i32> %675, i32 1
  store i32 %683, i32* %3105, align 1, !tbaa !2451
  %684 = add i64 %626, -32
  %685 = add i64 %3143, 164
  store i64 %685, i64* %PC, align 8
  %686 = inttoptr i64 %684 to i64*
  %687 = load i64, i64* %686, align 8
  store i64 %687, i64* %RAX, align 8, !tbaa !2428
  %688 = add i64 %626, -44
  %689 = add i64 %3143, 167
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %688 to i32*
  %691 = load i32, i32* %690, align 4
  %692 = add i32 %691, -12
  %693 = zext i32 %692 to i64
  store i64 %693, i64* %RDX, align 8, !tbaa !2428
  %694 = icmp ult i32 %691, 12
  %695 = zext i1 %694 to i8
  store i8 %695, i8* %.pre-phi, align 1, !tbaa !2432
  %696 = and i32 %692, 255
  %697 = tail call i32 @llvm.ctpop.i32(i32 %696) #12
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  %700 = xor i8 %699, 1
  store i8 %700, i8* %.pre-phi42, align 1, !tbaa !2446
  %701 = xor i32 %692, %691
  %702 = lshr i32 %701, 4
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  store i8 %704, i8* %.pre-phi44, align 1, !tbaa !2447
  %705 = icmp eq i32 %692, 0
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %.pre-phi46, align 1, !tbaa !2448
  %707 = lshr i32 %692, 31
  %708 = trunc i32 %707 to i8
  store i8 %708, i8* %.pre-phi48, align 1, !tbaa !2449
  %709 = lshr i32 %691, 31
  %710 = xor i32 %707, %709
  %711 = add nuw nsw i32 %710, %709
  %712 = icmp eq i32 %711, 2
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %.pre-phi50, align 1, !tbaa !2450
  %714 = sext i32 %692 to i64
  store i64 %714, i64* %RCX, align 8, !tbaa !2428
  %715 = shl nsw i64 %714, 2
  %716 = add i64 %687, %715
  %717 = add i64 %3143, 178
  store i64 %717, i64* %PC, align 8
  %718 = inttoptr i64 %716 to i32*
  %719 = load i32, i32* %718, align 4
  store i32 %719, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %720 = load i64, i64* %RBP, align 8
  %721 = add i64 %720, -40
  %722 = add i64 %3143, 182
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %721 to i64*
  %724 = load i64, i64* %723, align 8
  store i64 %724, i64* %RAX, align 8, !tbaa !2428
  %725 = add i64 %720, -24
  %726 = add i64 %3143, 185
  store i64 %726, i64* %PC, align 8
  %727 = inttoptr i64 %725 to i32*
  %728 = load i32, i32* %727, align 4
  %729 = zext i32 %728 to i64
  store i64 %729, i64* %RDX, align 8, !tbaa !2428
  %730 = add i64 %720, -44
  %731 = add i64 %3143, 188
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %730 to i32*
  %733 = load i32, i32* %732, align 4
  %734 = add i32 %733, -12
  %735 = zext i32 %734 to i64
  store i64 %735, i64* %RSI, align 8, !tbaa !2428
  %736 = sext i32 %728 to i64
  %737 = sext i32 %734 to i64
  %738 = mul nsw i64 %737, %736
  %739 = trunc i64 %738 to i32
  %740 = and i64 %738, 4294967295
  store i64 %740, i64* %RDX, align 8, !tbaa !2428
  %741 = shl i64 %738, 32
  %742 = ashr exact i64 %741, 32
  %743 = icmp ne i64 %742, %738
  %744 = zext i1 %743 to i8
  store i8 %744, i8* %.pre-phi, align 1, !tbaa !2432
  %745 = and i32 %739, 255
  %746 = tail call i32 @llvm.ctpop.i32(i32 %745) #12
  %747 = trunc i32 %746 to i8
  %748 = and i8 %747, 1
  %749 = xor i8 %748, 1
  store i8 %749, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %750 = lshr i32 %739, 31
  %751 = trunc i32 %750 to i8
  store i8 %751, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %744, i8* %.pre-phi50, align 1, !tbaa !2450
  %752 = add i64 %720, -48
  %753 = add i64 %3143, 197
  store i64 %753, i64* %PC, align 8
  %754 = trunc i64 %738 to i32
  %755 = inttoptr i64 %752 to i32*
  %756 = load i32, i32* %755, align 4
  %757 = add i32 %756, %754
  %758 = zext i32 %757 to i64
  store i64 %758, i64* %RDX, align 8, !tbaa !2428
  %759 = icmp ult i32 %757, %754
  %760 = icmp ult i32 %757, %756
  %761 = or i1 %759, %760
  %762 = zext i1 %761 to i8
  store i8 %762, i8* %.pre-phi, align 1, !tbaa !2432
  %763 = and i32 %757, 255
  %764 = tail call i32 @llvm.ctpop.i32(i32 %763) #12
  %765 = trunc i32 %764 to i8
  %766 = and i8 %765, 1
  %767 = xor i8 %766, 1
  store i8 %767, i8* %.pre-phi42, align 1, !tbaa !2446
  %768 = xor i32 %756, %754
  %769 = xor i32 %768, %757
  %770 = lshr i32 %769, 4
  %771 = trunc i32 %770 to i8
  %772 = and i8 %771, 1
  store i8 %772, i8* %.pre-phi44, align 1, !tbaa !2447
  %773 = icmp eq i32 %757, 0
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %.pre-phi46, align 1, !tbaa !2448
  %775 = lshr i32 %757, 31
  %776 = trunc i32 %775 to i8
  store i8 %776, i8* %.pre-phi48, align 1, !tbaa !2449
  %777 = lshr i32 %754, 31
  %778 = lshr i32 %756, 31
  %779 = xor i32 %775, %777
  %780 = xor i32 %775, %778
  %781 = add nuw nsw i32 %779, %780
  %782 = icmp eq i32 %781, 2
  %783 = zext i1 %782 to i8
  store i8 %783, i8* %.pre-phi50, align 1, !tbaa !2450
  %784 = sext i32 %757 to i64
  store i64 %784, i64* %RCX, align 8, !tbaa !2428
  %785 = load i64, i64* %RAX, align 8
  %786 = shl nsw i64 %784, 2
  %787 = add i64 %785, %786
  %788 = add i64 %3143, 205
  store i64 %788, i64* %PC, align 8
  %789 = load <2 x float>, <2 x float>* %3096, align 1
  %790 = load <2 x i32>, <2 x i32>* %3097, align 1
  %791 = inttoptr i64 %787 to float*
  %792 = load float, float* %791, align 4
  %793 = extractelement <2 x float> %789, i32 0
  %794 = fmul float %793, %792
  store float %794, float* %3088, align 1, !tbaa !2451
  %795 = bitcast <2 x float> %789 to <2 x i32>
  %796 = extractelement <2 x i32> %795, i32 1
  store i32 %796, i32* %3098, align 1, !tbaa !2451
  %797 = extractelement <2 x i32> %790, i32 0
  store i32 %797, i32* %3099, align 1, !tbaa !2451
  %798 = extractelement <2 x i32> %790, i32 1
  store i32 %798, i32* %3100, align 1, !tbaa !2451
  %799 = load <2 x float>, <2 x float>* %3101, align 1
  %800 = load <2 x i32>, <2 x i32>* %3102, align 1
  %801 = load <2 x float>, <2 x float>* %3096, align 1
  %802 = extractelement <2 x float> %799, i32 0
  %803 = extractelement <2 x float> %801, i32 0
  %804 = fadd float %802, %803
  store float %804, float* %3079, align 1, !tbaa !2451
  %805 = bitcast <2 x float> %799 to <2 x i32>
  %806 = extractelement <2 x i32> %805, i32 1
  store i32 %806, i32* %3103, align 1, !tbaa !2451
  %807 = extractelement <2 x i32> %800, i32 0
  store i32 %807, i32* %3104, align 1, !tbaa !2451
  %808 = extractelement <2 x i32> %800, i32 1
  store i32 %808, i32* %3105, align 1, !tbaa !2451
  %809 = load i64, i64* %RBP, align 8
  %810 = add i64 %809, -32
  %811 = add i64 %3143, 213
  store i64 %811, i64* %PC, align 8
  %812 = inttoptr i64 %810 to i64*
  %813 = load i64, i64* %812, align 8
  store i64 %813, i64* %RAX, align 8, !tbaa !2428
  %814 = add i64 %809, -44
  %815 = add i64 %3143, 216
  store i64 %815, i64* %PC, align 8
  %816 = inttoptr i64 %814 to i32*
  %817 = load i32, i32* %816, align 4
  %818 = add i32 %817, -11
  %819 = zext i32 %818 to i64
  store i64 %819, i64* %RDX, align 8, !tbaa !2428
  %820 = icmp ult i32 %817, 11
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %.pre-phi, align 1, !tbaa !2432
  %822 = and i32 %818, 255
  %823 = tail call i32 @llvm.ctpop.i32(i32 %822) #12
  %824 = trunc i32 %823 to i8
  %825 = and i8 %824, 1
  %826 = xor i8 %825, 1
  store i8 %826, i8* %.pre-phi42, align 1, !tbaa !2446
  %827 = xor i32 %818, %817
  %828 = lshr i32 %827, 4
  %829 = trunc i32 %828 to i8
  %830 = and i8 %829, 1
  store i8 %830, i8* %.pre-phi44, align 1, !tbaa !2447
  %831 = icmp eq i32 %818, 0
  %832 = zext i1 %831 to i8
  store i8 %832, i8* %.pre-phi46, align 1, !tbaa !2448
  %833 = lshr i32 %818, 31
  %834 = trunc i32 %833 to i8
  store i8 %834, i8* %.pre-phi48, align 1, !tbaa !2449
  %835 = lshr i32 %817, 31
  %836 = xor i32 %833, %835
  %837 = add nuw nsw i32 %836, %835
  %838 = icmp eq i32 %837, 2
  %839 = zext i1 %838 to i8
  store i8 %839, i8* %.pre-phi50, align 1, !tbaa !2450
  %840 = sext i32 %818 to i64
  store i64 %840, i64* %RCX, align 8, !tbaa !2428
  %841 = shl nsw i64 %840, 2
  %842 = add i64 %813, %841
  %843 = add i64 %3143, 227
  store i64 %843, i64* %PC, align 8
  %844 = inttoptr i64 %842 to i32*
  %845 = load i32, i32* %844, align 4
  store i32 %845, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %846 = add i64 %809, -40
  %847 = add i64 %3143, 231
  store i64 %847, i64* %PC, align 8
  %848 = inttoptr i64 %846 to i64*
  %849 = load i64, i64* %848, align 8
  store i64 %849, i64* %RAX, align 8, !tbaa !2428
  %850 = add i64 %809, -24
  %851 = add i64 %3143, 234
  store i64 %851, i64* %PC, align 8
  %852 = inttoptr i64 %850 to i32*
  %853 = load i32, i32* %852, align 4
  %854 = zext i32 %853 to i64
  store i64 %854, i64* %RDX, align 8, !tbaa !2428
  %855 = add i64 %3143, 237
  store i64 %855, i64* %PC, align 8
  %856 = load i32, i32* %816, align 4
  %857 = add i32 %856, -11
  %858 = zext i32 %857 to i64
  store i64 %858, i64* %RSI, align 8, !tbaa !2428
  %859 = sext i32 %853 to i64
  %860 = sext i32 %857 to i64
  %861 = mul nsw i64 %860, %859
  %862 = trunc i64 %861 to i32
  %863 = and i64 %861, 4294967295
  store i64 %863, i64* %RDX, align 8, !tbaa !2428
  %864 = shl i64 %861, 32
  %865 = ashr exact i64 %864, 32
  %866 = icmp ne i64 %865, %861
  %867 = zext i1 %866 to i8
  store i8 %867, i8* %.pre-phi, align 1, !tbaa !2432
  %868 = and i32 %862, 255
  %869 = tail call i32 @llvm.ctpop.i32(i32 %868) #12
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = xor i8 %871, 1
  store i8 %872, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %873 = lshr i32 %862, 31
  %874 = trunc i32 %873 to i8
  store i8 %874, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %867, i8* %.pre-phi50, align 1, !tbaa !2450
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -48
  %877 = add i64 %3143, 246
  store i64 %877, i64* %PC, align 8
  %878 = trunc i64 %861 to i32
  %879 = inttoptr i64 %876 to i32*
  %880 = load i32, i32* %879, align 4
  %881 = add i32 %880, %878
  %882 = zext i32 %881 to i64
  store i64 %882, i64* %RDX, align 8, !tbaa !2428
  %883 = icmp ult i32 %881, %878
  %884 = icmp ult i32 %881, %880
  %885 = or i1 %883, %884
  %886 = zext i1 %885 to i8
  store i8 %886, i8* %.pre-phi, align 1, !tbaa !2432
  %887 = and i32 %881, 255
  %888 = tail call i32 @llvm.ctpop.i32(i32 %887) #12
  %889 = trunc i32 %888 to i8
  %890 = and i8 %889, 1
  %891 = xor i8 %890, 1
  store i8 %891, i8* %.pre-phi42, align 1, !tbaa !2446
  %892 = xor i32 %880, %878
  %893 = xor i32 %892, %881
  %894 = lshr i32 %893, 4
  %895 = trunc i32 %894 to i8
  %896 = and i8 %895, 1
  store i8 %896, i8* %.pre-phi44, align 1, !tbaa !2447
  %897 = icmp eq i32 %881, 0
  %898 = zext i1 %897 to i8
  store i8 %898, i8* %.pre-phi46, align 1, !tbaa !2448
  %899 = lshr i32 %881, 31
  %900 = trunc i32 %899 to i8
  store i8 %900, i8* %.pre-phi48, align 1, !tbaa !2449
  %901 = lshr i32 %878, 31
  %902 = lshr i32 %880, 31
  %903 = xor i32 %899, %901
  %904 = xor i32 %899, %902
  %905 = add nuw nsw i32 %903, %904
  %906 = icmp eq i32 %905, 2
  %907 = zext i1 %906 to i8
  store i8 %907, i8* %.pre-phi50, align 1, !tbaa !2450
  %908 = sext i32 %881 to i64
  store i64 %908, i64* %RCX, align 8, !tbaa !2428
  %909 = load i64, i64* %RAX, align 8
  %910 = shl nsw i64 %908, 2
  %911 = add i64 %909, %910
  %912 = add i64 %3143, 254
  store i64 %912, i64* %PC, align 8
  %913 = load <2 x float>, <2 x float>* %3096, align 1
  %914 = load <2 x i32>, <2 x i32>* %3097, align 1
  %915 = inttoptr i64 %911 to float*
  %916 = load float, float* %915, align 4
  %917 = extractelement <2 x float> %913, i32 0
  %918 = fmul float %917, %916
  store float %918, float* %3088, align 1, !tbaa !2451
  %919 = bitcast <2 x float> %913 to <2 x i32>
  %920 = extractelement <2 x i32> %919, i32 1
  store i32 %920, i32* %3098, align 1, !tbaa !2451
  %921 = extractelement <2 x i32> %914, i32 0
  store i32 %921, i32* %3099, align 1, !tbaa !2451
  %922 = extractelement <2 x i32> %914, i32 1
  store i32 %922, i32* %3100, align 1, !tbaa !2451
  %923 = load <2 x float>, <2 x float>* %3101, align 1
  %924 = load <2 x i32>, <2 x i32>* %3102, align 1
  %925 = load <2 x float>, <2 x float>* %3096, align 1
  %926 = extractelement <2 x float> %923, i32 0
  %927 = extractelement <2 x float> %925, i32 0
  %928 = fadd float %926, %927
  store float %928, float* %3079, align 1, !tbaa !2451
  %929 = bitcast <2 x float> %923 to <2 x i32>
  %930 = extractelement <2 x i32> %929, i32 1
  store i32 %930, i32* %3103, align 1, !tbaa !2451
  %931 = extractelement <2 x i32> %924, i32 0
  store i32 %931, i32* %3104, align 1, !tbaa !2451
  %932 = extractelement <2 x i32> %924, i32 1
  store i32 %932, i32* %3105, align 1, !tbaa !2451
  %933 = add i64 %875, -32
  %934 = add i64 %3143, 262
  store i64 %934, i64* %PC, align 8
  %935 = inttoptr i64 %933 to i64*
  %936 = load i64, i64* %935, align 8
  store i64 %936, i64* %RAX, align 8, !tbaa !2428
  %937 = add i64 %875, -44
  %938 = add i64 %3143, 265
  store i64 %938, i64* %PC, align 8
  %939 = inttoptr i64 %937 to i32*
  %940 = load i32, i32* %939, align 4
  %941 = add i32 %940, -10
  %942 = zext i32 %941 to i64
  store i64 %942, i64* %RDX, align 8, !tbaa !2428
  %943 = icmp ult i32 %940, 10
  %944 = zext i1 %943 to i8
  store i8 %944, i8* %.pre-phi, align 1, !tbaa !2432
  %945 = and i32 %941, 255
  %946 = tail call i32 @llvm.ctpop.i32(i32 %945) #12
  %947 = trunc i32 %946 to i8
  %948 = and i8 %947, 1
  %949 = xor i8 %948, 1
  store i8 %949, i8* %.pre-phi42, align 1, !tbaa !2446
  %950 = xor i32 %941, %940
  %951 = lshr i32 %950, 4
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  store i8 %953, i8* %.pre-phi44, align 1, !tbaa !2447
  %954 = icmp eq i32 %941, 0
  %955 = zext i1 %954 to i8
  store i8 %955, i8* %.pre-phi46, align 1, !tbaa !2448
  %956 = lshr i32 %941, 31
  %957 = trunc i32 %956 to i8
  store i8 %957, i8* %.pre-phi48, align 1, !tbaa !2449
  %958 = lshr i32 %940, 31
  %959 = xor i32 %956, %958
  %960 = add nuw nsw i32 %959, %958
  %961 = icmp eq i32 %960, 2
  %962 = zext i1 %961 to i8
  store i8 %962, i8* %.pre-phi50, align 1, !tbaa !2450
  %963 = sext i32 %941 to i64
  store i64 %963, i64* %RCX, align 8, !tbaa !2428
  %964 = shl nsw i64 %963, 2
  %965 = add i64 %936, %964
  %966 = add i64 %3143, 276
  store i64 %966, i64* %PC, align 8
  %967 = inttoptr i64 %965 to i32*
  %968 = load i32, i32* %967, align 4
  store i32 %968, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %969 = load i64, i64* %RBP, align 8
  %970 = add i64 %969, -40
  %971 = add i64 %3143, 280
  store i64 %971, i64* %PC, align 8
  %972 = inttoptr i64 %970 to i64*
  %973 = load i64, i64* %972, align 8
  store i64 %973, i64* %RAX, align 8, !tbaa !2428
  %974 = add i64 %969, -24
  %975 = add i64 %3143, 283
  store i64 %975, i64* %PC, align 8
  %976 = inttoptr i64 %974 to i32*
  %977 = load i32, i32* %976, align 4
  %978 = zext i32 %977 to i64
  store i64 %978, i64* %RDX, align 8, !tbaa !2428
  %979 = add i64 %969, -44
  %980 = add i64 %3143, 286
  store i64 %980, i64* %PC, align 8
  %981 = inttoptr i64 %979 to i32*
  %982 = load i32, i32* %981, align 4
  %983 = add i32 %982, -10
  %984 = zext i32 %983 to i64
  store i64 %984, i64* %RSI, align 8, !tbaa !2428
  %985 = sext i32 %977 to i64
  %986 = sext i32 %983 to i64
  %987 = mul nsw i64 %986, %985
  %988 = trunc i64 %987 to i32
  %989 = and i64 %987, 4294967295
  store i64 %989, i64* %RDX, align 8, !tbaa !2428
  %990 = shl i64 %987, 32
  %991 = ashr exact i64 %990, 32
  %992 = icmp ne i64 %991, %987
  %993 = zext i1 %992 to i8
  store i8 %993, i8* %.pre-phi, align 1, !tbaa !2432
  %994 = and i32 %988, 255
  %995 = tail call i32 @llvm.ctpop.i32(i32 %994) #12
  %996 = trunc i32 %995 to i8
  %997 = and i8 %996, 1
  %998 = xor i8 %997, 1
  store i8 %998, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %999 = lshr i32 %988, 31
  %1000 = trunc i32 %999 to i8
  store i8 %1000, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %993, i8* %.pre-phi50, align 1, !tbaa !2450
  %1001 = add i64 %969, -48
  %1002 = add i64 %3143, 295
  store i64 %1002, i64* %PC, align 8
  %1003 = trunc i64 %987 to i32
  %1004 = inttoptr i64 %1001 to i32*
  %1005 = load i32, i32* %1004, align 4
  %1006 = add i32 %1005, %1003
  %1007 = zext i32 %1006 to i64
  store i64 %1007, i64* %RDX, align 8, !tbaa !2428
  %1008 = icmp ult i32 %1006, %1003
  %1009 = icmp ult i32 %1006, %1005
  %1010 = or i1 %1008, %1009
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %.pre-phi, align 1, !tbaa !2432
  %1012 = and i32 %1006, 255
  %1013 = tail call i32 @llvm.ctpop.i32(i32 %1012) #12
  %1014 = trunc i32 %1013 to i8
  %1015 = and i8 %1014, 1
  %1016 = xor i8 %1015, 1
  store i8 %1016, i8* %.pre-phi42, align 1, !tbaa !2446
  %1017 = xor i32 %1005, %1003
  %1018 = xor i32 %1017, %1006
  %1019 = lshr i32 %1018, 4
  %1020 = trunc i32 %1019 to i8
  %1021 = and i8 %1020, 1
  store i8 %1021, i8* %.pre-phi44, align 1, !tbaa !2447
  %1022 = icmp eq i32 %1006, 0
  %1023 = zext i1 %1022 to i8
  store i8 %1023, i8* %.pre-phi46, align 1, !tbaa !2448
  %1024 = lshr i32 %1006, 31
  %1025 = trunc i32 %1024 to i8
  store i8 %1025, i8* %.pre-phi48, align 1, !tbaa !2449
  %1026 = lshr i32 %1003, 31
  %1027 = lshr i32 %1005, 31
  %1028 = xor i32 %1024, %1026
  %1029 = xor i32 %1024, %1027
  %1030 = add nuw nsw i32 %1028, %1029
  %1031 = icmp eq i32 %1030, 2
  %1032 = zext i1 %1031 to i8
  store i8 %1032, i8* %.pre-phi50, align 1, !tbaa !2450
  %1033 = sext i32 %1006 to i64
  store i64 %1033, i64* %RCX, align 8, !tbaa !2428
  %1034 = load i64, i64* %RAX, align 8
  %1035 = shl nsw i64 %1033, 2
  %1036 = add i64 %1034, %1035
  %1037 = add i64 %3143, 303
  store i64 %1037, i64* %PC, align 8
  %1038 = load <2 x float>, <2 x float>* %3096, align 1
  %1039 = load <2 x i32>, <2 x i32>* %3097, align 1
  %1040 = inttoptr i64 %1036 to float*
  %1041 = load float, float* %1040, align 4
  %1042 = extractelement <2 x float> %1038, i32 0
  %1043 = fmul float %1042, %1041
  store float %1043, float* %3088, align 1, !tbaa !2451
  %1044 = bitcast <2 x float> %1038 to <2 x i32>
  %1045 = extractelement <2 x i32> %1044, i32 1
  store i32 %1045, i32* %3098, align 1, !tbaa !2451
  %1046 = extractelement <2 x i32> %1039, i32 0
  store i32 %1046, i32* %3099, align 1, !tbaa !2451
  %1047 = extractelement <2 x i32> %1039, i32 1
  store i32 %1047, i32* %3100, align 1, !tbaa !2451
  %1048 = load <2 x float>, <2 x float>* %3101, align 1
  %1049 = load <2 x i32>, <2 x i32>* %3102, align 1
  %1050 = load <2 x float>, <2 x float>* %3096, align 1
  %1051 = extractelement <2 x float> %1048, i32 0
  %1052 = extractelement <2 x float> %1050, i32 0
  %1053 = fadd float %1051, %1052
  store float %1053, float* %3079, align 1, !tbaa !2451
  %1054 = bitcast <2 x float> %1048 to <2 x i32>
  %1055 = extractelement <2 x i32> %1054, i32 1
  store i32 %1055, i32* %3103, align 1, !tbaa !2451
  %1056 = extractelement <2 x i32> %1049, i32 0
  store i32 %1056, i32* %3104, align 1, !tbaa !2451
  %1057 = extractelement <2 x i32> %1049, i32 1
  store i32 %1057, i32* %3105, align 1, !tbaa !2451
  %1058 = load i64, i64* %RBP, align 8
  %1059 = add i64 %1058, -32
  %1060 = add i64 %3143, 311
  store i64 %1060, i64* %PC, align 8
  %1061 = inttoptr i64 %1059 to i64*
  %1062 = load i64, i64* %1061, align 8
  store i64 %1062, i64* %RAX, align 8, !tbaa !2428
  %1063 = add i64 %1058, -44
  %1064 = add i64 %3143, 314
  store i64 %1064, i64* %PC, align 8
  %1065 = inttoptr i64 %1063 to i32*
  %1066 = load i32, i32* %1065, align 4
  %1067 = add i32 %1066, -9
  %1068 = zext i32 %1067 to i64
  store i64 %1068, i64* %RDX, align 8, !tbaa !2428
  %1069 = icmp ult i32 %1066, 9
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %.pre-phi, align 1, !tbaa !2432
  %1071 = and i32 %1067, 255
  %1072 = tail call i32 @llvm.ctpop.i32(i32 %1071) #12
  %1073 = trunc i32 %1072 to i8
  %1074 = and i8 %1073, 1
  %1075 = xor i8 %1074, 1
  store i8 %1075, i8* %.pre-phi42, align 1, !tbaa !2446
  %1076 = xor i32 %1067, %1066
  %1077 = lshr i32 %1076, 4
  %1078 = trunc i32 %1077 to i8
  %1079 = and i8 %1078, 1
  store i8 %1079, i8* %.pre-phi44, align 1, !tbaa !2447
  %1080 = icmp eq i32 %1067, 0
  %1081 = zext i1 %1080 to i8
  store i8 %1081, i8* %.pre-phi46, align 1, !tbaa !2448
  %1082 = lshr i32 %1067, 31
  %1083 = trunc i32 %1082 to i8
  store i8 %1083, i8* %.pre-phi48, align 1, !tbaa !2449
  %1084 = lshr i32 %1066, 31
  %1085 = xor i32 %1082, %1084
  %1086 = add nuw nsw i32 %1085, %1084
  %1087 = icmp eq i32 %1086, 2
  %1088 = zext i1 %1087 to i8
  store i8 %1088, i8* %.pre-phi50, align 1, !tbaa !2450
  %1089 = sext i32 %1067 to i64
  store i64 %1089, i64* %RCX, align 8, !tbaa !2428
  %1090 = shl nsw i64 %1089, 2
  %1091 = add i64 %1062, %1090
  %1092 = add i64 %3143, 325
  store i64 %1092, i64* %PC, align 8
  %1093 = inttoptr i64 %1091 to i32*
  %1094 = load i32, i32* %1093, align 4
  store i32 %1094, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %1095 = add i64 %1058, -40
  %1096 = add i64 %3143, 329
  store i64 %1096, i64* %PC, align 8
  %1097 = inttoptr i64 %1095 to i64*
  %1098 = load i64, i64* %1097, align 8
  store i64 %1098, i64* %RAX, align 8, !tbaa !2428
  %1099 = add i64 %1058, -24
  %1100 = add i64 %3143, 332
  store i64 %1100, i64* %PC, align 8
  %1101 = inttoptr i64 %1099 to i32*
  %1102 = load i32, i32* %1101, align 4
  %1103 = zext i32 %1102 to i64
  store i64 %1103, i64* %RDX, align 8, !tbaa !2428
  %1104 = add i64 %3143, 335
  store i64 %1104, i64* %PC, align 8
  %1105 = load i32, i32* %1065, align 4
  %1106 = add i32 %1105, -9
  %1107 = zext i32 %1106 to i64
  store i64 %1107, i64* %RSI, align 8, !tbaa !2428
  %1108 = sext i32 %1102 to i64
  %1109 = sext i32 %1106 to i64
  %1110 = mul nsw i64 %1109, %1108
  %1111 = trunc i64 %1110 to i32
  %1112 = and i64 %1110, 4294967295
  store i64 %1112, i64* %RDX, align 8, !tbaa !2428
  %1113 = shl i64 %1110, 32
  %1114 = ashr exact i64 %1113, 32
  %1115 = icmp ne i64 %1114, %1110
  %1116 = zext i1 %1115 to i8
  store i8 %1116, i8* %.pre-phi, align 1, !tbaa !2432
  %1117 = and i32 %1111, 255
  %1118 = tail call i32 @llvm.ctpop.i32(i32 %1117) #12
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  store i8 %1121, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1122 = lshr i32 %1111, 31
  %1123 = trunc i32 %1122 to i8
  store i8 %1123, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1116, i8* %.pre-phi50, align 1, !tbaa !2450
  %1124 = load i64, i64* %RBP, align 8
  %1125 = add i64 %1124, -48
  %1126 = add i64 %3143, 344
  store i64 %1126, i64* %PC, align 8
  %1127 = trunc i64 %1110 to i32
  %1128 = inttoptr i64 %1125 to i32*
  %1129 = load i32, i32* %1128, align 4
  %1130 = add i32 %1129, %1127
  %1131 = zext i32 %1130 to i64
  store i64 %1131, i64* %RDX, align 8, !tbaa !2428
  %1132 = icmp ult i32 %1130, %1127
  %1133 = icmp ult i32 %1130, %1129
  %1134 = or i1 %1132, %1133
  %1135 = zext i1 %1134 to i8
  store i8 %1135, i8* %.pre-phi, align 1, !tbaa !2432
  %1136 = and i32 %1130, 255
  %1137 = tail call i32 @llvm.ctpop.i32(i32 %1136) #12
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  %1140 = xor i8 %1139, 1
  store i8 %1140, i8* %.pre-phi42, align 1, !tbaa !2446
  %1141 = xor i32 %1129, %1127
  %1142 = xor i32 %1141, %1130
  %1143 = lshr i32 %1142, 4
  %1144 = trunc i32 %1143 to i8
  %1145 = and i8 %1144, 1
  store i8 %1145, i8* %.pre-phi44, align 1, !tbaa !2447
  %1146 = icmp eq i32 %1130, 0
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %.pre-phi46, align 1, !tbaa !2448
  %1148 = lshr i32 %1130, 31
  %1149 = trunc i32 %1148 to i8
  store i8 %1149, i8* %.pre-phi48, align 1, !tbaa !2449
  %1150 = lshr i32 %1127, 31
  %1151 = lshr i32 %1129, 31
  %1152 = xor i32 %1148, %1150
  %1153 = xor i32 %1148, %1151
  %1154 = add nuw nsw i32 %1152, %1153
  %1155 = icmp eq i32 %1154, 2
  %1156 = zext i1 %1155 to i8
  store i8 %1156, i8* %.pre-phi50, align 1, !tbaa !2450
  %1157 = sext i32 %1130 to i64
  store i64 %1157, i64* %RCX, align 8, !tbaa !2428
  %1158 = load i64, i64* %RAX, align 8
  %1159 = shl nsw i64 %1157, 2
  %1160 = add i64 %1158, %1159
  %1161 = add i64 %3143, 352
  store i64 %1161, i64* %PC, align 8
  %1162 = load <2 x float>, <2 x float>* %3096, align 1
  %1163 = load <2 x i32>, <2 x i32>* %3097, align 1
  %1164 = inttoptr i64 %1160 to float*
  %1165 = load float, float* %1164, align 4
  %1166 = extractelement <2 x float> %1162, i32 0
  %1167 = fmul float %1166, %1165
  store float %1167, float* %3088, align 1, !tbaa !2451
  %1168 = bitcast <2 x float> %1162 to <2 x i32>
  %1169 = extractelement <2 x i32> %1168, i32 1
  store i32 %1169, i32* %3098, align 1, !tbaa !2451
  %1170 = extractelement <2 x i32> %1163, i32 0
  store i32 %1170, i32* %3099, align 1, !tbaa !2451
  %1171 = extractelement <2 x i32> %1163, i32 1
  store i32 %1171, i32* %3100, align 1, !tbaa !2451
  %1172 = load <2 x float>, <2 x float>* %3101, align 1
  %1173 = load <2 x i32>, <2 x i32>* %3102, align 1
  %1174 = load <2 x float>, <2 x float>* %3096, align 1
  %1175 = extractelement <2 x float> %1172, i32 0
  %1176 = extractelement <2 x float> %1174, i32 0
  %1177 = fadd float %1175, %1176
  store float %1177, float* %3079, align 1, !tbaa !2451
  %1178 = bitcast <2 x float> %1172 to <2 x i32>
  %1179 = extractelement <2 x i32> %1178, i32 1
  store i32 %1179, i32* %3103, align 1, !tbaa !2451
  %1180 = extractelement <2 x i32> %1173, i32 0
  store i32 %1180, i32* %3104, align 1, !tbaa !2451
  %1181 = extractelement <2 x i32> %1173, i32 1
  store i32 %1181, i32* %3105, align 1, !tbaa !2451
  %1182 = add i64 %1124, -32
  %1183 = add i64 %3143, 360
  store i64 %1183, i64* %PC, align 8
  %1184 = inttoptr i64 %1182 to i64*
  %1185 = load i64, i64* %1184, align 8
  store i64 %1185, i64* %RAX, align 8, !tbaa !2428
  %1186 = add i64 %1124, -44
  %1187 = add i64 %3143, 363
  store i64 %1187, i64* %PC, align 8
  %1188 = inttoptr i64 %1186 to i32*
  %1189 = load i32, i32* %1188, align 4
  %1190 = add i32 %1189, -8
  %1191 = zext i32 %1190 to i64
  store i64 %1191, i64* %RDX, align 8, !tbaa !2428
  %1192 = icmp ult i32 %1189, 8
  %1193 = zext i1 %1192 to i8
  store i8 %1193, i8* %.pre-phi, align 1, !tbaa !2432
  %1194 = and i32 %1190, 255
  %1195 = tail call i32 @llvm.ctpop.i32(i32 %1194) #12
  %1196 = trunc i32 %1195 to i8
  %1197 = and i8 %1196, 1
  %1198 = xor i8 %1197, 1
  store i8 %1198, i8* %.pre-phi42, align 1, !tbaa !2446
  %1199 = xor i32 %1190, %1189
  %1200 = lshr i32 %1199, 4
  %1201 = trunc i32 %1200 to i8
  %1202 = and i8 %1201, 1
  store i8 %1202, i8* %.pre-phi44, align 1, !tbaa !2447
  %1203 = icmp eq i32 %1190, 0
  %1204 = zext i1 %1203 to i8
  store i8 %1204, i8* %.pre-phi46, align 1, !tbaa !2448
  %1205 = lshr i32 %1190, 31
  %1206 = trunc i32 %1205 to i8
  store i8 %1206, i8* %.pre-phi48, align 1, !tbaa !2449
  %1207 = lshr i32 %1189, 31
  %1208 = xor i32 %1205, %1207
  %1209 = add nuw nsw i32 %1208, %1207
  %1210 = icmp eq i32 %1209, 2
  %1211 = zext i1 %1210 to i8
  store i8 %1211, i8* %.pre-phi50, align 1, !tbaa !2450
  %1212 = sext i32 %1190 to i64
  store i64 %1212, i64* %RCX, align 8, !tbaa !2428
  %1213 = shl nsw i64 %1212, 2
  %1214 = add i64 %1185, %1213
  %1215 = add i64 %3143, 374
  store i64 %1215, i64* %PC, align 8
  %1216 = inttoptr i64 %1214 to i32*
  %1217 = load i32, i32* %1216, align 4
  store i32 %1217, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %1218 = load i64, i64* %RBP, align 8
  %1219 = add i64 %1218, -40
  %1220 = add i64 %3143, 378
  store i64 %1220, i64* %PC, align 8
  %1221 = inttoptr i64 %1219 to i64*
  %1222 = load i64, i64* %1221, align 8
  store i64 %1222, i64* %RAX, align 8, !tbaa !2428
  %1223 = add i64 %1218, -24
  %1224 = add i64 %3143, 381
  store i64 %1224, i64* %PC, align 8
  %1225 = inttoptr i64 %1223 to i32*
  %1226 = load i32, i32* %1225, align 4
  %1227 = zext i32 %1226 to i64
  store i64 %1227, i64* %RDX, align 8, !tbaa !2428
  %1228 = add i64 %1218, -44
  %1229 = add i64 %3143, 384
  store i64 %1229, i64* %PC, align 8
  %1230 = inttoptr i64 %1228 to i32*
  %1231 = load i32, i32* %1230, align 4
  %1232 = add i32 %1231, -8
  %1233 = zext i32 %1232 to i64
  store i64 %1233, i64* %RSI, align 8, !tbaa !2428
  %1234 = sext i32 %1226 to i64
  %1235 = sext i32 %1232 to i64
  %1236 = mul nsw i64 %1235, %1234
  %1237 = trunc i64 %1236 to i32
  %1238 = and i64 %1236, 4294967295
  store i64 %1238, i64* %RDX, align 8, !tbaa !2428
  %1239 = shl i64 %1236, 32
  %1240 = ashr exact i64 %1239, 32
  %1241 = icmp ne i64 %1240, %1236
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* %.pre-phi, align 1, !tbaa !2432
  %1243 = and i32 %1237, 255
  %1244 = tail call i32 @llvm.ctpop.i32(i32 %1243) #12
  %1245 = trunc i32 %1244 to i8
  %1246 = and i8 %1245, 1
  %1247 = xor i8 %1246, 1
  store i8 %1247, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1248 = lshr i32 %1237, 31
  %1249 = trunc i32 %1248 to i8
  store i8 %1249, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1242, i8* %.pre-phi50, align 1, !tbaa !2450
  %1250 = add i64 %1218, -48
  %1251 = add i64 %3143, 393
  store i64 %1251, i64* %PC, align 8
  %1252 = trunc i64 %1236 to i32
  %1253 = inttoptr i64 %1250 to i32*
  %1254 = load i32, i32* %1253, align 4
  %1255 = add i32 %1254, %1252
  %1256 = zext i32 %1255 to i64
  store i64 %1256, i64* %RDX, align 8, !tbaa !2428
  %1257 = icmp ult i32 %1255, %1252
  %1258 = icmp ult i32 %1255, %1254
  %1259 = or i1 %1257, %1258
  %1260 = zext i1 %1259 to i8
  store i8 %1260, i8* %.pre-phi, align 1, !tbaa !2432
  %1261 = and i32 %1255, 255
  %1262 = tail call i32 @llvm.ctpop.i32(i32 %1261) #12
  %1263 = trunc i32 %1262 to i8
  %1264 = and i8 %1263, 1
  %1265 = xor i8 %1264, 1
  store i8 %1265, i8* %.pre-phi42, align 1, !tbaa !2446
  %1266 = xor i32 %1254, %1252
  %1267 = xor i32 %1266, %1255
  %1268 = lshr i32 %1267, 4
  %1269 = trunc i32 %1268 to i8
  %1270 = and i8 %1269, 1
  store i8 %1270, i8* %.pre-phi44, align 1, !tbaa !2447
  %1271 = icmp eq i32 %1255, 0
  %1272 = zext i1 %1271 to i8
  store i8 %1272, i8* %.pre-phi46, align 1, !tbaa !2448
  %1273 = lshr i32 %1255, 31
  %1274 = trunc i32 %1273 to i8
  store i8 %1274, i8* %.pre-phi48, align 1, !tbaa !2449
  %1275 = lshr i32 %1252, 31
  %1276 = lshr i32 %1254, 31
  %1277 = xor i32 %1273, %1275
  %1278 = xor i32 %1273, %1276
  %1279 = add nuw nsw i32 %1277, %1278
  %1280 = icmp eq i32 %1279, 2
  %1281 = zext i1 %1280 to i8
  store i8 %1281, i8* %.pre-phi50, align 1, !tbaa !2450
  %1282 = sext i32 %1255 to i64
  store i64 %1282, i64* %RCX, align 8, !tbaa !2428
  %1283 = load i64, i64* %RAX, align 8
  %1284 = shl nsw i64 %1282, 2
  %1285 = add i64 %1283, %1284
  %1286 = add i64 %3143, 401
  store i64 %1286, i64* %PC, align 8
  %1287 = load <2 x float>, <2 x float>* %3096, align 1
  %1288 = load <2 x i32>, <2 x i32>* %3097, align 1
  %1289 = inttoptr i64 %1285 to float*
  %1290 = load float, float* %1289, align 4
  %1291 = extractelement <2 x float> %1287, i32 0
  %1292 = fmul float %1291, %1290
  store float %1292, float* %3088, align 1, !tbaa !2451
  %1293 = bitcast <2 x float> %1287 to <2 x i32>
  %1294 = extractelement <2 x i32> %1293, i32 1
  store i32 %1294, i32* %3098, align 1, !tbaa !2451
  %1295 = extractelement <2 x i32> %1288, i32 0
  store i32 %1295, i32* %3099, align 1, !tbaa !2451
  %1296 = extractelement <2 x i32> %1288, i32 1
  store i32 %1296, i32* %3100, align 1, !tbaa !2451
  %1297 = load <2 x float>, <2 x float>* %3101, align 1
  %1298 = load <2 x i32>, <2 x i32>* %3102, align 1
  %1299 = load <2 x float>, <2 x float>* %3096, align 1
  %1300 = extractelement <2 x float> %1297, i32 0
  %1301 = extractelement <2 x float> %1299, i32 0
  %1302 = fadd float %1300, %1301
  store float %1302, float* %3079, align 1, !tbaa !2451
  %1303 = bitcast <2 x float> %1297 to <2 x i32>
  %1304 = extractelement <2 x i32> %1303, i32 1
  store i32 %1304, i32* %3103, align 1, !tbaa !2451
  %1305 = extractelement <2 x i32> %1298, i32 0
  store i32 %1305, i32* %3104, align 1, !tbaa !2451
  %1306 = extractelement <2 x i32> %1298, i32 1
  store i32 %1306, i32* %3105, align 1, !tbaa !2451
  %1307 = load i64, i64* %RBP, align 8
  %1308 = add i64 %1307, -32
  %1309 = add i64 %3143, 409
  store i64 %1309, i64* %PC, align 8
  %1310 = inttoptr i64 %1308 to i64*
  %1311 = load i64, i64* %1310, align 8
  store i64 %1311, i64* %RAX, align 8, !tbaa !2428
  %1312 = add i64 %1307, -44
  %1313 = add i64 %3143, 412
  store i64 %1313, i64* %PC, align 8
  %1314 = inttoptr i64 %1312 to i32*
  %1315 = load i32, i32* %1314, align 4
  %1316 = add i32 %1315, -7
  %1317 = zext i32 %1316 to i64
  store i64 %1317, i64* %RDX, align 8, !tbaa !2428
  %1318 = icmp ult i32 %1315, 7
  %1319 = zext i1 %1318 to i8
  store i8 %1319, i8* %.pre-phi, align 1, !tbaa !2432
  %1320 = and i32 %1316, 255
  %1321 = tail call i32 @llvm.ctpop.i32(i32 %1320) #12
  %1322 = trunc i32 %1321 to i8
  %1323 = and i8 %1322, 1
  %1324 = xor i8 %1323, 1
  store i8 %1324, i8* %.pre-phi42, align 1, !tbaa !2446
  %1325 = xor i32 %1316, %1315
  %1326 = lshr i32 %1325, 4
  %1327 = trunc i32 %1326 to i8
  %1328 = and i8 %1327, 1
  store i8 %1328, i8* %.pre-phi44, align 1, !tbaa !2447
  %1329 = icmp eq i32 %1316, 0
  %1330 = zext i1 %1329 to i8
  store i8 %1330, i8* %.pre-phi46, align 1, !tbaa !2448
  %1331 = lshr i32 %1316, 31
  %1332 = trunc i32 %1331 to i8
  store i8 %1332, i8* %.pre-phi48, align 1, !tbaa !2449
  %1333 = lshr i32 %1315, 31
  %1334 = xor i32 %1331, %1333
  %1335 = add nuw nsw i32 %1334, %1333
  %1336 = icmp eq i32 %1335, 2
  %1337 = zext i1 %1336 to i8
  store i8 %1337, i8* %.pre-phi50, align 1, !tbaa !2450
  %1338 = sext i32 %1316 to i64
  store i64 %1338, i64* %RCX, align 8, !tbaa !2428
  %1339 = shl nsw i64 %1338, 2
  %1340 = add i64 %1311, %1339
  %1341 = add i64 %3143, 423
  store i64 %1341, i64* %PC, align 8
  %1342 = inttoptr i64 %1340 to i32*
  %1343 = load i32, i32* %1342, align 4
  store i32 %1343, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %1344 = add i64 %1307, -40
  %1345 = add i64 %3143, 427
  store i64 %1345, i64* %PC, align 8
  %1346 = inttoptr i64 %1344 to i64*
  %1347 = load i64, i64* %1346, align 8
  store i64 %1347, i64* %RAX, align 8, !tbaa !2428
  %1348 = add i64 %1307, -24
  %1349 = add i64 %3143, 430
  store i64 %1349, i64* %PC, align 8
  %1350 = inttoptr i64 %1348 to i32*
  %1351 = load i32, i32* %1350, align 4
  %1352 = zext i32 %1351 to i64
  store i64 %1352, i64* %RDX, align 8, !tbaa !2428
  %1353 = add i64 %3143, 433
  store i64 %1353, i64* %PC, align 8
  %1354 = load i32, i32* %1314, align 4
  %1355 = add i32 %1354, -7
  %1356 = zext i32 %1355 to i64
  store i64 %1356, i64* %RSI, align 8, !tbaa !2428
  %1357 = sext i32 %1351 to i64
  %1358 = sext i32 %1355 to i64
  %1359 = mul nsw i64 %1358, %1357
  %1360 = trunc i64 %1359 to i32
  %1361 = and i64 %1359, 4294967295
  store i64 %1361, i64* %RDX, align 8, !tbaa !2428
  %1362 = shl i64 %1359, 32
  %1363 = ashr exact i64 %1362, 32
  %1364 = icmp ne i64 %1363, %1359
  %1365 = zext i1 %1364 to i8
  store i8 %1365, i8* %.pre-phi, align 1, !tbaa !2432
  %1366 = and i32 %1360, 255
  %1367 = tail call i32 @llvm.ctpop.i32(i32 %1366) #12
  %1368 = trunc i32 %1367 to i8
  %1369 = and i8 %1368, 1
  %1370 = xor i8 %1369, 1
  store i8 %1370, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1371 = lshr i32 %1360, 31
  %1372 = trunc i32 %1371 to i8
  store i8 %1372, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1365, i8* %.pre-phi50, align 1, !tbaa !2450
  %1373 = load i64, i64* %RBP, align 8
  %1374 = add i64 %1373, -48
  %1375 = add i64 %3143, 442
  store i64 %1375, i64* %PC, align 8
  %1376 = trunc i64 %1359 to i32
  %1377 = inttoptr i64 %1374 to i32*
  %1378 = load i32, i32* %1377, align 4
  %1379 = add i32 %1378, %1376
  %1380 = zext i32 %1379 to i64
  store i64 %1380, i64* %RDX, align 8, !tbaa !2428
  %1381 = icmp ult i32 %1379, %1376
  %1382 = icmp ult i32 %1379, %1378
  %1383 = or i1 %1381, %1382
  %1384 = zext i1 %1383 to i8
  store i8 %1384, i8* %.pre-phi, align 1, !tbaa !2432
  %1385 = and i32 %1379, 255
  %1386 = tail call i32 @llvm.ctpop.i32(i32 %1385) #12
  %1387 = trunc i32 %1386 to i8
  %1388 = and i8 %1387, 1
  %1389 = xor i8 %1388, 1
  store i8 %1389, i8* %.pre-phi42, align 1, !tbaa !2446
  %1390 = xor i32 %1378, %1376
  %1391 = xor i32 %1390, %1379
  %1392 = lshr i32 %1391, 4
  %1393 = trunc i32 %1392 to i8
  %1394 = and i8 %1393, 1
  store i8 %1394, i8* %.pre-phi44, align 1, !tbaa !2447
  %1395 = icmp eq i32 %1379, 0
  %1396 = zext i1 %1395 to i8
  store i8 %1396, i8* %.pre-phi46, align 1, !tbaa !2448
  %1397 = lshr i32 %1379, 31
  %1398 = trunc i32 %1397 to i8
  store i8 %1398, i8* %.pre-phi48, align 1, !tbaa !2449
  %1399 = lshr i32 %1376, 31
  %1400 = lshr i32 %1378, 31
  %1401 = xor i32 %1397, %1399
  %1402 = xor i32 %1397, %1400
  %1403 = add nuw nsw i32 %1401, %1402
  %1404 = icmp eq i32 %1403, 2
  %1405 = zext i1 %1404 to i8
  store i8 %1405, i8* %.pre-phi50, align 1, !tbaa !2450
  %1406 = sext i32 %1379 to i64
  store i64 %1406, i64* %RCX, align 8, !tbaa !2428
  %1407 = load i64, i64* %RAX, align 8
  %1408 = shl nsw i64 %1406, 2
  %1409 = add i64 %1407, %1408
  %1410 = add i64 %3143, 450
  store i64 %1410, i64* %PC, align 8
  %1411 = load <2 x float>, <2 x float>* %3096, align 1
  %1412 = load <2 x i32>, <2 x i32>* %3097, align 1
  %1413 = inttoptr i64 %1409 to float*
  %1414 = load float, float* %1413, align 4
  %1415 = extractelement <2 x float> %1411, i32 0
  %1416 = fmul float %1415, %1414
  store float %1416, float* %3088, align 1, !tbaa !2451
  %1417 = bitcast <2 x float> %1411 to <2 x i32>
  %1418 = extractelement <2 x i32> %1417, i32 1
  store i32 %1418, i32* %3098, align 1, !tbaa !2451
  %1419 = extractelement <2 x i32> %1412, i32 0
  store i32 %1419, i32* %3099, align 1, !tbaa !2451
  %1420 = extractelement <2 x i32> %1412, i32 1
  store i32 %1420, i32* %3100, align 1, !tbaa !2451
  %1421 = load <2 x float>, <2 x float>* %3101, align 1
  %1422 = load <2 x i32>, <2 x i32>* %3102, align 1
  %1423 = load <2 x float>, <2 x float>* %3096, align 1
  %1424 = extractelement <2 x float> %1421, i32 0
  %1425 = extractelement <2 x float> %1423, i32 0
  %1426 = fadd float %1424, %1425
  store float %1426, float* %3079, align 1, !tbaa !2451
  %1427 = bitcast <2 x float> %1421 to <2 x i32>
  %1428 = extractelement <2 x i32> %1427, i32 1
  store i32 %1428, i32* %3103, align 1, !tbaa !2451
  %1429 = extractelement <2 x i32> %1422, i32 0
  store i32 %1429, i32* %3104, align 1, !tbaa !2451
  %1430 = extractelement <2 x i32> %1422, i32 1
  store i32 %1430, i32* %3105, align 1, !tbaa !2451
  %1431 = add i64 %1373, -32
  %1432 = add i64 %3143, 458
  store i64 %1432, i64* %PC, align 8
  %1433 = inttoptr i64 %1431 to i64*
  %1434 = load i64, i64* %1433, align 8
  store i64 %1434, i64* %RAX, align 8, !tbaa !2428
  %1435 = add i64 %1373, -44
  %1436 = add i64 %3143, 461
  store i64 %1436, i64* %PC, align 8
  %1437 = inttoptr i64 %1435 to i32*
  %1438 = load i32, i32* %1437, align 4
  %1439 = add i32 %1438, -6
  %1440 = zext i32 %1439 to i64
  store i64 %1440, i64* %RDX, align 8, !tbaa !2428
  %1441 = icmp ult i32 %1438, 6
  %1442 = zext i1 %1441 to i8
  store i8 %1442, i8* %.pre-phi, align 1, !tbaa !2432
  %1443 = and i32 %1439, 255
  %1444 = tail call i32 @llvm.ctpop.i32(i32 %1443) #12
  %1445 = trunc i32 %1444 to i8
  %1446 = and i8 %1445, 1
  %1447 = xor i8 %1446, 1
  store i8 %1447, i8* %.pre-phi42, align 1, !tbaa !2446
  %1448 = xor i32 %1439, %1438
  %1449 = lshr i32 %1448, 4
  %1450 = trunc i32 %1449 to i8
  %1451 = and i8 %1450, 1
  store i8 %1451, i8* %.pre-phi44, align 1, !tbaa !2447
  %1452 = icmp eq i32 %1439, 0
  %1453 = zext i1 %1452 to i8
  store i8 %1453, i8* %.pre-phi46, align 1, !tbaa !2448
  %1454 = lshr i32 %1439, 31
  %1455 = trunc i32 %1454 to i8
  store i8 %1455, i8* %.pre-phi48, align 1, !tbaa !2449
  %1456 = lshr i32 %1438, 31
  %1457 = xor i32 %1454, %1456
  %1458 = add nuw nsw i32 %1457, %1456
  %1459 = icmp eq i32 %1458, 2
  %1460 = zext i1 %1459 to i8
  store i8 %1460, i8* %.pre-phi50, align 1, !tbaa !2450
  %1461 = sext i32 %1439 to i64
  store i64 %1461, i64* %RCX, align 8, !tbaa !2428
  %1462 = shl nsw i64 %1461, 2
  %1463 = add i64 %1434, %1462
  %1464 = add i64 %3143, 472
  store i64 %1464, i64* %PC, align 8
  %1465 = inttoptr i64 %1463 to i32*
  %1466 = load i32, i32* %1465, align 4
  store i32 %1466, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %1467 = load i64, i64* %RBP, align 8
  %1468 = add i64 %1467, -40
  %1469 = add i64 %3143, 476
  store i64 %1469, i64* %PC, align 8
  %1470 = inttoptr i64 %1468 to i64*
  %1471 = load i64, i64* %1470, align 8
  store i64 %1471, i64* %RAX, align 8, !tbaa !2428
  %1472 = add i64 %1467, -24
  %1473 = add i64 %3143, 479
  store i64 %1473, i64* %PC, align 8
  %1474 = inttoptr i64 %1472 to i32*
  %1475 = load i32, i32* %1474, align 4
  %1476 = zext i32 %1475 to i64
  store i64 %1476, i64* %RDX, align 8, !tbaa !2428
  %1477 = add i64 %1467, -44
  %1478 = add i64 %3143, 482
  store i64 %1478, i64* %PC, align 8
  %1479 = inttoptr i64 %1477 to i32*
  %1480 = load i32, i32* %1479, align 4
  %1481 = add i32 %1480, -6
  %1482 = zext i32 %1481 to i64
  store i64 %1482, i64* %RSI, align 8, !tbaa !2428
  %1483 = sext i32 %1475 to i64
  %1484 = sext i32 %1481 to i64
  %1485 = mul nsw i64 %1484, %1483
  %1486 = trunc i64 %1485 to i32
  %1487 = and i64 %1485, 4294967295
  store i64 %1487, i64* %RDX, align 8, !tbaa !2428
  %1488 = shl i64 %1485, 32
  %1489 = ashr exact i64 %1488, 32
  %1490 = icmp ne i64 %1489, %1485
  %1491 = zext i1 %1490 to i8
  store i8 %1491, i8* %.pre-phi, align 1, !tbaa !2432
  %1492 = and i32 %1486, 255
  %1493 = tail call i32 @llvm.ctpop.i32(i32 %1492) #12
  %1494 = trunc i32 %1493 to i8
  %1495 = and i8 %1494, 1
  %1496 = xor i8 %1495, 1
  store i8 %1496, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1497 = lshr i32 %1486, 31
  %1498 = trunc i32 %1497 to i8
  store i8 %1498, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1491, i8* %.pre-phi50, align 1, !tbaa !2450
  %1499 = add i64 %1467, -48
  %1500 = add i64 %3143, 491
  store i64 %1500, i64* %PC, align 8
  %1501 = trunc i64 %1485 to i32
  %1502 = inttoptr i64 %1499 to i32*
  %1503 = load i32, i32* %1502, align 4
  %1504 = add i32 %1503, %1501
  %1505 = zext i32 %1504 to i64
  store i64 %1505, i64* %RDX, align 8, !tbaa !2428
  %1506 = icmp ult i32 %1504, %1501
  %1507 = icmp ult i32 %1504, %1503
  %1508 = or i1 %1506, %1507
  %1509 = zext i1 %1508 to i8
  store i8 %1509, i8* %.pre-phi, align 1, !tbaa !2432
  %1510 = and i32 %1504, 255
  %1511 = tail call i32 @llvm.ctpop.i32(i32 %1510) #12
  %1512 = trunc i32 %1511 to i8
  %1513 = and i8 %1512, 1
  %1514 = xor i8 %1513, 1
  store i8 %1514, i8* %.pre-phi42, align 1, !tbaa !2446
  %1515 = xor i32 %1503, %1501
  %1516 = xor i32 %1515, %1504
  %1517 = lshr i32 %1516, 4
  %1518 = trunc i32 %1517 to i8
  %1519 = and i8 %1518, 1
  store i8 %1519, i8* %.pre-phi44, align 1, !tbaa !2447
  %1520 = icmp eq i32 %1504, 0
  %1521 = zext i1 %1520 to i8
  store i8 %1521, i8* %.pre-phi46, align 1, !tbaa !2448
  %1522 = lshr i32 %1504, 31
  %1523 = trunc i32 %1522 to i8
  store i8 %1523, i8* %.pre-phi48, align 1, !tbaa !2449
  %1524 = lshr i32 %1501, 31
  %1525 = lshr i32 %1503, 31
  %1526 = xor i32 %1522, %1524
  %1527 = xor i32 %1522, %1525
  %1528 = add nuw nsw i32 %1526, %1527
  %1529 = icmp eq i32 %1528, 2
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %.pre-phi50, align 1, !tbaa !2450
  %1531 = sext i32 %1504 to i64
  store i64 %1531, i64* %RCX, align 8, !tbaa !2428
  %1532 = load i64, i64* %RAX, align 8
  %1533 = shl nsw i64 %1531, 2
  %1534 = add i64 %1532, %1533
  %1535 = add i64 %3143, 499
  store i64 %1535, i64* %PC, align 8
  %1536 = load <2 x float>, <2 x float>* %3096, align 1
  %1537 = load <2 x i32>, <2 x i32>* %3097, align 1
  %1538 = inttoptr i64 %1534 to float*
  %1539 = load float, float* %1538, align 4
  %1540 = extractelement <2 x float> %1536, i32 0
  %1541 = fmul float %1540, %1539
  store float %1541, float* %3088, align 1, !tbaa !2451
  %1542 = bitcast <2 x float> %1536 to <2 x i32>
  %1543 = extractelement <2 x i32> %1542, i32 1
  store i32 %1543, i32* %3098, align 1, !tbaa !2451
  %1544 = extractelement <2 x i32> %1537, i32 0
  store i32 %1544, i32* %3099, align 1, !tbaa !2451
  %1545 = extractelement <2 x i32> %1537, i32 1
  store i32 %1545, i32* %3100, align 1, !tbaa !2451
  %1546 = load <2 x float>, <2 x float>* %3101, align 1
  %1547 = load <2 x i32>, <2 x i32>* %3102, align 1
  %1548 = load <2 x float>, <2 x float>* %3096, align 1
  %1549 = extractelement <2 x float> %1546, i32 0
  %1550 = extractelement <2 x float> %1548, i32 0
  %1551 = fadd float %1549, %1550
  store float %1551, float* %3079, align 1, !tbaa !2451
  %1552 = bitcast <2 x float> %1546 to <2 x i32>
  %1553 = extractelement <2 x i32> %1552, i32 1
  store i32 %1553, i32* %3103, align 1, !tbaa !2451
  %1554 = extractelement <2 x i32> %1547, i32 0
  store i32 %1554, i32* %3104, align 1, !tbaa !2451
  %1555 = extractelement <2 x i32> %1547, i32 1
  store i32 %1555, i32* %3105, align 1, !tbaa !2451
  %1556 = load i64, i64* %RBP, align 8
  %1557 = add i64 %1556, -32
  %1558 = add i64 %3143, 507
  store i64 %1558, i64* %PC, align 8
  %1559 = inttoptr i64 %1557 to i64*
  %1560 = load i64, i64* %1559, align 8
  store i64 %1560, i64* %RAX, align 8, !tbaa !2428
  %1561 = add i64 %1556, -44
  %1562 = add i64 %3143, 510
  store i64 %1562, i64* %PC, align 8
  %1563 = inttoptr i64 %1561 to i32*
  %1564 = load i32, i32* %1563, align 4
  %1565 = add i32 %1564, -5
  %1566 = zext i32 %1565 to i64
  store i64 %1566, i64* %RDX, align 8, !tbaa !2428
  %1567 = icmp ult i32 %1564, 5
  %1568 = zext i1 %1567 to i8
  store i8 %1568, i8* %.pre-phi, align 1, !tbaa !2432
  %1569 = and i32 %1565, 255
  %1570 = tail call i32 @llvm.ctpop.i32(i32 %1569) #12
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  %1573 = xor i8 %1572, 1
  store i8 %1573, i8* %.pre-phi42, align 1, !tbaa !2446
  %1574 = xor i32 %1565, %1564
  %1575 = lshr i32 %1574, 4
  %1576 = trunc i32 %1575 to i8
  %1577 = and i8 %1576, 1
  store i8 %1577, i8* %.pre-phi44, align 1, !tbaa !2447
  %1578 = icmp eq i32 %1565, 0
  %1579 = zext i1 %1578 to i8
  store i8 %1579, i8* %.pre-phi46, align 1, !tbaa !2448
  %1580 = lshr i32 %1565, 31
  %1581 = trunc i32 %1580 to i8
  store i8 %1581, i8* %.pre-phi48, align 1, !tbaa !2449
  %1582 = lshr i32 %1564, 31
  %1583 = xor i32 %1580, %1582
  %1584 = add nuw nsw i32 %1583, %1582
  %1585 = icmp eq i32 %1584, 2
  %1586 = zext i1 %1585 to i8
  store i8 %1586, i8* %.pre-phi50, align 1, !tbaa !2450
  %1587 = sext i32 %1565 to i64
  store i64 %1587, i64* %RCX, align 8, !tbaa !2428
  %1588 = shl nsw i64 %1587, 2
  %1589 = add i64 %1560, %1588
  %1590 = add i64 %3143, 521
  store i64 %1590, i64* %PC, align 8
  %1591 = inttoptr i64 %1589 to i32*
  %1592 = load i32, i32* %1591, align 4
  store i32 %1592, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %1593 = add i64 %1556, -40
  %1594 = add i64 %3143, 525
  store i64 %1594, i64* %PC, align 8
  %1595 = inttoptr i64 %1593 to i64*
  %1596 = load i64, i64* %1595, align 8
  store i64 %1596, i64* %RAX, align 8, !tbaa !2428
  %1597 = add i64 %1556, -24
  %1598 = add i64 %3143, 528
  store i64 %1598, i64* %PC, align 8
  %1599 = inttoptr i64 %1597 to i32*
  %1600 = load i32, i32* %1599, align 4
  %1601 = zext i32 %1600 to i64
  store i64 %1601, i64* %RDX, align 8, !tbaa !2428
  %1602 = add i64 %3143, 531
  store i64 %1602, i64* %PC, align 8
  %1603 = load i32, i32* %1563, align 4
  %1604 = add i32 %1603, -5
  %1605 = zext i32 %1604 to i64
  store i64 %1605, i64* %RSI, align 8, !tbaa !2428
  %1606 = sext i32 %1600 to i64
  %1607 = sext i32 %1604 to i64
  %1608 = mul nsw i64 %1607, %1606
  %1609 = trunc i64 %1608 to i32
  %1610 = and i64 %1608, 4294967295
  store i64 %1610, i64* %RDX, align 8, !tbaa !2428
  %1611 = shl i64 %1608, 32
  %1612 = ashr exact i64 %1611, 32
  %1613 = icmp ne i64 %1612, %1608
  %1614 = zext i1 %1613 to i8
  store i8 %1614, i8* %.pre-phi, align 1, !tbaa !2432
  %1615 = and i32 %1609, 255
  %1616 = tail call i32 @llvm.ctpop.i32(i32 %1615) #12
  %1617 = trunc i32 %1616 to i8
  %1618 = and i8 %1617, 1
  %1619 = xor i8 %1618, 1
  store i8 %1619, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1620 = lshr i32 %1609, 31
  %1621 = trunc i32 %1620 to i8
  store i8 %1621, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1614, i8* %.pre-phi50, align 1, !tbaa !2450
  %1622 = load i64, i64* %RBP, align 8
  %1623 = add i64 %1622, -48
  %1624 = add i64 %3143, 540
  store i64 %1624, i64* %PC, align 8
  %1625 = trunc i64 %1608 to i32
  %1626 = inttoptr i64 %1623 to i32*
  %1627 = load i32, i32* %1626, align 4
  %1628 = add i32 %1627, %1625
  %1629 = zext i32 %1628 to i64
  store i64 %1629, i64* %RDX, align 8, !tbaa !2428
  %1630 = icmp ult i32 %1628, %1625
  %1631 = icmp ult i32 %1628, %1627
  %1632 = or i1 %1630, %1631
  %1633 = zext i1 %1632 to i8
  store i8 %1633, i8* %.pre-phi, align 1, !tbaa !2432
  %1634 = and i32 %1628, 255
  %1635 = tail call i32 @llvm.ctpop.i32(i32 %1634) #12
  %1636 = trunc i32 %1635 to i8
  %1637 = and i8 %1636, 1
  %1638 = xor i8 %1637, 1
  store i8 %1638, i8* %.pre-phi42, align 1, !tbaa !2446
  %1639 = xor i32 %1627, %1625
  %1640 = xor i32 %1639, %1628
  %1641 = lshr i32 %1640, 4
  %1642 = trunc i32 %1641 to i8
  %1643 = and i8 %1642, 1
  store i8 %1643, i8* %.pre-phi44, align 1, !tbaa !2447
  %1644 = icmp eq i32 %1628, 0
  %1645 = zext i1 %1644 to i8
  store i8 %1645, i8* %.pre-phi46, align 1, !tbaa !2448
  %1646 = lshr i32 %1628, 31
  %1647 = trunc i32 %1646 to i8
  store i8 %1647, i8* %.pre-phi48, align 1, !tbaa !2449
  %1648 = lshr i32 %1625, 31
  %1649 = lshr i32 %1627, 31
  %1650 = xor i32 %1646, %1648
  %1651 = xor i32 %1646, %1649
  %1652 = add nuw nsw i32 %1650, %1651
  %1653 = icmp eq i32 %1652, 2
  %1654 = zext i1 %1653 to i8
  store i8 %1654, i8* %.pre-phi50, align 1, !tbaa !2450
  %1655 = sext i32 %1628 to i64
  store i64 %1655, i64* %RCX, align 8, !tbaa !2428
  %1656 = load i64, i64* %RAX, align 8
  %1657 = shl nsw i64 %1655, 2
  %1658 = add i64 %1656, %1657
  %1659 = add i64 %3143, 548
  store i64 %1659, i64* %PC, align 8
  %1660 = load <2 x float>, <2 x float>* %3096, align 1
  %1661 = load <2 x i32>, <2 x i32>* %3097, align 1
  %1662 = inttoptr i64 %1658 to float*
  %1663 = load float, float* %1662, align 4
  %1664 = extractelement <2 x float> %1660, i32 0
  %1665 = fmul float %1664, %1663
  store float %1665, float* %3088, align 1, !tbaa !2451
  %1666 = bitcast <2 x float> %1660 to <2 x i32>
  %1667 = extractelement <2 x i32> %1666, i32 1
  store i32 %1667, i32* %3098, align 1, !tbaa !2451
  %1668 = extractelement <2 x i32> %1661, i32 0
  store i32 %1668, i32* %3099, align 1, !tbaa !2451
  %1669 = extractelement <2 x i32> %1661, i32 1
  store i32 %1669, i32* %3100, align 1, !tbaa !2451
  %1670 = load <2 x float>, <2 x float>* %3101, align 1
  %1671 = load <2 x i32>, <2 x i32>* %3102, align 1
  %1672 = load <2 x float>, <2 x float>* %3096, align 1
  %1673 = extractelement <2 x float> %1670, i32 0
  %1674 = extractelement <2 x float> %1672, i32 0
  %1675 = fadd float %1673, %1674
  store float %1675, float* %3079, align 1, !tbaa !2451
  %1676 = bitcast <2 x float> %1670 to <2 x i32>
  %1677 = extractelement <2 x i32> %1676, i32 1
  store i32 %1677, i32* %3103, align 1, !tbaa !2451
  %1678 = extractelement <2 x i32> %1671, i32 0
  store i32 %1678, i32* %3104, align 1, !tbaa !2451
  %1679 = extractelement <2 x i32> %1671, i32 1
  store i32 %1679, i32* %3105, align 1, !tbaa !2451
  %1680 = add i64 %1622, -32
  %1681 = add i64 %3143, 556
  store i64 %1681, i64* %PC, align 8
  %1682 = inttoptr i64 %1680 to i64*
  %1683 = load i64, i64* %1682, align 8
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %1684 = add i64 %1622, -44
  %1685 = add i64 %3143, 559
  store i64 %1685, i64* %PC, align 8
  %1686 = inttoptr i64 %1684 to i32*
  %1687 = load i32, i32* %1686, align 4
  %1688 = add i32 %1687, -4
  %1689 = zext i32 %1688 to i64
  store i64 %1689, i64* %RDX, align 8, !tbaa !2428
  %1690 = icmp ult i32 %1687, 4
  %1691 = zext i1 %1690 to i8
  store i8 %1691, i8* %.pre-phi, align 1, !tbaa !2432
  %1692 = and i32 %1688, 255
  %1693 = tail call i32 @llvm.ctpop.i32(i32 %1692) #12
  %1694 = trunc i32 %1693 to i8
  %1695 = and i8 %1694, 1
  %1696 = xor i8 %1695, 1
  store i8 %1696, i8* %.pre-phi42, align 1, !tbaa !2446
  %1697 = xor i32 %1688, %1687
  %1698 = lshr i32 %1697, 4
  %1699 = trunc i32 %1698 to i8
  %1700 = and i8 %1699, 1
  store i8 %1700, i8* %.pre-phi44, align 1, !tbaa !2447
  %1701 = icmp eq i32 %1688, 0
  %1702 = zext i1 %1701 to i8
  store i8 %1702, i8* %.pre-phi46, align 1, !tbaa !2448
  %1703 = lshr i32 %1688, 31
  %1704 = trunc i32 %1703 to i8
  store i8 %1704, i8* %.pre-phi48, align 1, !tbaa !2449
  %1705 = lshr i32 %1687, 31
  %1706 = xor i32 %1703, %1705
  %1707 = add nuw nsw i32 %1706, %1705
  %1708 = icmp eq i32 %1707, 2
  %1709 = zext i1 %1708 to i8
  store i8 %1709, i8* %.pre-phi50, align 1, !tbaa !2450
  %1710 = sext i32 %1688 to i64
  store i64 %1710, i64* %RCX, align 8, !tbaa !2428
  %1711 = shl nsw i64 %1710, 2
  %1712 = add i64 %1683, %1711
  %1713 = add i64 %3143, 570
  store i64 %1713, i64* %PC, align 8
  %1714 = inttoptr i64 %1712 to i32*
  %1715 = load i32, i32* %1714, align 4
  store i32 %1715, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %1716 = load i64, i64* %RBP, align 8
  %1717 = add i64 %1716, -40
  %1718 = add i64 %3143, 574
  store i64 %1718, i64* %PC, align 8
  %1719 = inttoptr i64 %1717 to i64*
  %1720 = load i64, i64* %1719, align 8
  store i64 %1720, i64* %RAX, align 8, !tbaa !2428
  %1721 = add i64 %1716, -24
  %1722 = add i64 %3143, 577
  store i64 %1722, i64* %PC, align 8
  %1723 = inttoptr i64 %1721 to i32*
  %1724 = load i32, i32* %1723, align 4
  %1725 = zext i32 %1724 to i64
  store i64 %1725, i64* %RDX, align 8, !tbaa !2428
  %1726 = add i64 %1716, -44
  %1727 = add i64 %3143, 580
  store i64 %1727, i64* %PC, align 8
  %1728 = inttoptr i64 %1726 to i32*
  %1729 = load i32, i32* %1728, align 4
  %1730 = add i32 %1729, -4
  %1731 = zext i32 %1730 to i64
  store i64 %1731, i64* %RSI, align 8, !tbaa !2428
  %1732 = sext i32 %1724 to i64
  %1733 = sext i32 %1730 to i64
  %1734 = mul nsw i64 %1733, %1732
  %1735 = trunc i64 %1734 to i32
  %1736 = and i64 %1734, 4294967295
  store i64 %1736, i64* %RDX, align 8, !tbaa !2428
  %1737 = shl i64 %1734, 32
  %1738 = ashr exact i64 %1737, 32
  %1739 = icmp ne i64 %1738, %1734
  %1740 = zext i1 %1739 to i8
  store i8 %1740, i8* %.pre-phi, align 1, !tbaa !2432
  %1741 = and i32 %1735, 255
  %1742 = tail call i32 @llvm.ctpop.i32(i32 %1741) #12
  %1743 = trunc i32 %1742 to i8
  %1744 = and i8 %1743, 1
  %1745 = xor i8 %1744, 1
  store i8 %1745, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1746 = lshr i32 %1735, 31
  %1747 = trunc i32 %1746 to i8
  store i8 %1747, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1740, i8* %.pre-phi50, align 1, !tbaa !2450
  %1748 = add i64 %1716, -48
  %1749 = add i64 %3143, 589
  store i64 %1749, i64* %PC, align 8
  %1750 = trunc i64 %1734 to i32
  %1751 = inttoptr i64 %1748 to i32*
  %1752 = load i32, i32* %1751, align 4
  %1753 = add i32 %1752, %1750
  %1754 = zext i32 %1753 to i64
  store i64 %1754, i64* %RDX, align 8, !tbaa !2428
  %1755 = icmp ult i32 %1753, %1750
  %1756 = icmp ult i32 %1753, %1752
  %1757 = or i1 %1755, %1756
  %1758 = zext i1 %1757 to i8
  store i8 %1758, i8* %.pre-phi, align 1, !tbaa !2432
  %1759 = and i32 %1753, 255
  %1760 = tail call i32 @llvm.ctpop.i32(i32 %1759) #12
  %1761 = trunc i32 %1760 to i8
  %1762 = and i8 %1761, 1
  %1763 = xor i8 %1762, 1
  store i8 %1763, i8* %.pre-phi42, align 1, !tbaa !2446
  %1764 = xor i32 %1752, %1750
  %1765 = xor i32 %1764, %1753
  %1766 = lshr i32 %1765, 4
  %1767 = trunc i32 %1766 to i8
  %1768 = and i8 %1767, 1
  store i8 %1768, i8* %.pre-phi44, align 1, !tbaa !2447
  %1769 = icmp eq i32 %1753, 0
  %1770 = zext i1 %1769 to i8
  store i8 %1770, i8* %.pre-phi46, align 1, !tbaa !2448
  %1771 = lshr i32 %1753, 31
  %1772 = trunc i32 %1771 to i8
  store i8 %1772, i8* %.pre-phi48, align 1, !tbaa !2449
  %1773 = lshr i32 %1750, 31
  %1774 = lshr i32 %1752, 31
  %1775 = xor i32 %1771, %1773
  %1776 = xor i32 %1771, %1774
  %1777 = add nuw nsw i32 %1775, %1776
  %1778 = icmp eq i32 %1777, 2
  %1779 = zext i1 %1778 to i8
  store i8 %1779, i8* %.pre-phi50, align 1, !tbaa !2450
  %1780 = sext i32 %1753 to i64
  store i64 %1780, i64* %RCX, align 8, !tbaa !2428
  %1781 = load i64, i64* %RAX, align 8
  %1782 = shl nsw i64 %1780, 2
  %1783 = add i64 %1781, %1782
  %1784 = add i64 %3143, 597
  store i64 %1784, i64* %PC, align 8
  %1785 = load <2 x float>, <2 x float>* %3096, align 1
  %1786 = load <2 x i32>, <2 x i32>* %3097, align 1
  %1787 = inttoptr i64 %1783 to float*
  %1788 = load float, float* %1787, align 4
  %1789 = extractelement <2 x float> %1785, i32 0
  %1790 = fmul float %1789, %1788
  store float %1790, float* %3088, align 1, !tbaa !2451
  %1791 = bitcast <2 x float> %1785 to <2 x i32>
  %1792 = extractelement <2 x i32> %1791, i32 1
  store i32 %1792, i32* %3098, align 1, !tbaa !2451
  %1793 = extractelement <2 x i32> %1786, i32 0
  store i32 %1793, i32* %3099, align 1, !tbaa !2451
  %1794 = extractelement <2 x i32> %1786, i32 1
  store i32 %1794, i32* %3100, align 1, !tbaa !2451
  %1795 = load <2 x float>, <2 x float>* %3101, align 1
  %1796 = load <2 x i32>, <2 x i32>* %3102, align 1
  %1797 = load <2 x float>, <2 x float>* %3096, align 1
  %1798 = extractelement <2 x float> %1795, i32 0
  %1799 = extractelement <2 x float> %1797, i32 0
  %1800 = fadd float %1798, %1799
  store float %1800, float* %3079, align 1, !tbaa !2451
  %1801 = bitcast <2 x float> %1795 to <2 x i32>
  %1802 = extractelement <2 x i32> %1801, i32 1
  store i32 %1802, i32* %3103, align 1, !tbaa !2451
  %1803 = extractelement <2 x i32> %1796, i32 0
  store i32 %1803, i32* %3104, align 1, !tbaa !2451
  %1804 = extractelement <2 x i32> %1796, i32 1
  store i32 %1804, i32* %3105, align 1, !tbaa !2451
  %1805 = load i64, i64* %RBP, align 8
  %1806 = add i64 %1805, -32
  %1807 = add i64 %3143, 605
  store i64 %1807, i64* %PC, align 8
  %1808 = inttoptr i64 %1806 to i64*
  %1809 = load i64, i64* %1808, align 8
  store i64 %1809, i64* %RAX, align 8, !tbaa !2428
  %1810 = add i64 %1805, -44
  %1811 = add i64 %3143, 608
  store i64 %1811, i64* %PC, align 8
  %1812 = inttoptr i64 %1810 to i32*
  %1813 = load i32, i32* %1812, align 4
  %1814 = add i32 %1813, -3
  %1815 = zext i32 %1814 to i64
  store i64 %1815, i64* %RDX, align 8, !tbaa !2428
  %1816 = icmp ult i32 %1813, 3
  %1817 = zext i1 %1816 to i8
  store i8 %1817, i8* %.pre-phi, align 1, !tbaa !2432
  %1818 = and i32 %1814, 255
  %1819 = tail call i32 @llvm.ctpop.i32(i32 %1818) #12
  %1820 = trunc i32 %1819 to i8
  %1821 = and i8 %1820, 1
  %1822 = xor i8 %1821, 1
  store i8 %1822, i8* %.pre-phi42, align 1, !tbaa !2446
  %1823 = xor i32 %1814, %1813
  %1824 = lshr i32 %1823, 4
  %1825 = trunc i32 %1824 to i8
  %1826 = and i8 %1825, 1
  store i8 %1826, i8* %.pre-phi44, align 1, !tbaa !2447
  %1827 = icmp eq i32 %1814, 0
  %1828 = zext i1 %1827 to i8
  store i8 %1828, i8* %.pre-phi46, align 1, !tbaa !2448
  %1829 = lshr i32 %1814, 31
  %1830 = trunc i32 %1829 to i8
  store i8 %1830, i8* %.pre-phi48, align 1, !tbaa !2449
  %1831 = lshr i32 %1813, 31
  %1832 = xor i32 %1829, %1831
  %1833 = add nuw nsw i32 %1832, %1831
  %1834 = icmp eq i32 %1833, 2
  %1835 = zext i1 %1834 to i8
  store i8 %1835, i8* %.pre-phi50, align 1, !tbaa !2450
  %1836 = sext i32 %1814 to i64
  store i64 %1836, i64* %RCX, align 8, !tbaa !2428
  %1837 = shl nsw i64 %1836, 2
  %1838 = add i64 %1809, %1837
  %1839 = add i64 %3143, 619
  store i64 %1839, i64* %PC, align 8
  %1840 = inttoptr i64 %1838 to i32*
  %1841 = load i32, i32* %1840, align 4
  store i32 %1841, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %1842 = add i64 %1805, -40
  %1843 = add i64 %3143, 623
  store i64 %1843, i64* %PC, align 8
  %1844 = inttoptr i64 %1842 to i64*
  %1845 = load i64, i64* %1844, align 8
  store i64 %1845, i64* %RAX, align 8, !tbaa !2428
  %1846 = add i64 %1805, -24
  %1847 = add i64 %3143, 626
  store i64 %1847, i64* %PC, align 8
  %1848 = inttoptr i64 %1846 to i32*
  %1849 = load i32, i32* %1848, align 4
  %1850 = zext i32 %1849 to i64
  store i64 %1850, i64* %RDX, align 8, !tbaa !2428
  %1851 = add i64 %3143, 629
  store i64 %1851, i64* %PC, align 8
  %1852 = load i32, i32* %1812, align 4
  %1853 = add i32 %1852, -3
  %1854 = zext i32 %1853 to i64
  store i64 %1854, i64* %RSI, align 8, !tbaa !2428
  %1855 = sext i32 %1849 to i64
  %1856 = sext i32 %1853 to i64
  %1857 = mul nsw i64 %1856, %1855
  %1858 = trunc i64 %1857 to i32
  %1859 = and i64 %1857, 4294967295
  store i64 %1859, i64* %RDX, align 8, !tbaa !2428
  %1860 = shl i64 %1857, 32
  %1861 = ashr exact i64 %1860, 32
  %1862 = icmp ne i64 %1861, %1857
  %1863 = zext i1 %1862 to i8
  store i8 %1863, i8* %.pre-phi, align 1, !tbaa !2432
  %1864 = and i32 %1858, 255
  %1865 = tail call i32 @llvm.ctpop.i32(i32 %1864) #12
  %1866 = trunc i32 %1865 to i8
  %1867 = and i8 %1866, 1
  %1868 = xor i8 %1867, 1
  store i8 %1868, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1869 = lshr i32 %1858, 31
  %1870 = trunc i32 %1869 to i8
  store i8 %1870, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1863, i8* %.pre-phi50, align 1, !tbaa !2450
  %1871 = load i64, i64* %RBP, align 8
  %1872 = add i64 %1871, -48
  %1873 = add i64 %3143, 638
  store i64 %1873, i64* %PC, align 8
  %1874 = trunc i64 %1857 to i32
  %1875 = inttoptr i64 %1872 to i32*
  %1876 = load i32, i32* %1875, align 4
  %1877 = add i32 %1876, %1874
  %1878 = zext i32 %1877 to i64
  store i64 %1878, i64* %RDX, align 8, !tbaa !2428
  %1879 = icmp ult i32 %1877, %1874
  %1880 = icmp ult i32 %1877, %1876
  %1881 = or i1 %1879, %1880
  %1882 = zext i1 %1881 to i8
  store i8 %1882, i8* %.pre-phi, align 1, !tbaa !2432
  %1883 = and i32 %1877, 255
  %1884 = tail call i32 @llvm.ctpop.i32(i32 %1883) #12
  %1885 = trunc i32 %1884 to i8
  %1886 = and i8 %1885, 1
  %1887 = xor i8 %1886, 1
  store i8 %1887, i8* %.pre-phi42, align 1, !tbaa !2446
  %1888 = xor i32 %1876, %1874
  %1889 = xor i32 %1888, %1877
  %1890 = lshr i32 %1889, 4
  %1891 = trunc i32 %1890 to i8
  %1892 = and i8 %1891, 1
  store i8 %1892, i8* %.pre-phi44, align 1, !tbaa !2447
  %1893 = icmp eq i32 %1877, 0
  %1894 = zext i1 %1893 to i8
  store i8 %1894, i8* %.pre-phi46, align 1, !tbaa !2448
  %1895 = lshr i32 %1877, 31
  %1896 = trunc i32 %1895 to i8
  store i8 %1896, i8* %.pre-phi48, align 1, !tbaa !2449
  %1897 = lshr i32 %1874, 31
  %1898 = lshr i32 %1876, 31
  %1899 = xor i32 %1895, %1897
  %1900 = xor i32 %1895, %1898
  %1901 = add nuw nsw i32 %1899, %1900
  %1902 = icmp eq i32 %1901, 2
  %1903 = zext i1 %1902 to i8
  store i8 %1903, i8* %.pre-phi50, align 1, !tbaa !2450
  %1904 = sext i32 %1877 to i64
  store i64 %1904, i64* %RCX, align 8, !tbaa !2428
  %1905 = load i64, i64* %RAX, align 8
  %1906 = shl nsw i64 %1904, 2
  %1907 = add i64 %1905, %1906
  %1908 = add i64 %3143, 646
  store i64 %1908, i64* %PC, align 8
  %1909 = load <2 x float>, <2 x float>* %3096, align 1
  %1910 = load <2 x i32>, <2 x i32>* %3097, align 1
  %1911 = inttoptr i64 %1907 to float*
  %1912 = load float, float* %1911, align 4
  %1913 = extractelement <2 x float> %1909, i32 0
  %1914 = fmul float %1913, %1912
  store float %1914, float* %3088, align 1, !tbaa !2451
  %1915 = bitcast <2 x float> %1909 to <2 x i32>
  %1916 = extractelement <2 x i32> %1915, i32 1
  store i32 %1916, i32* %3098, align 1, !tbaa !2451
  %1917 = extractelement <2 x i32> %1910, i32 0
  store i32 %1917, i32* %3099, align 1, !tbaa !2451
  %1918 = extractelement <2 x i32> %1910, i32 1
  store i32 %1918, i32* %3100, align 1, !tbaa !2451
  %1919 = load <2 x float>, <2 x float>* %3101, align 1
  %1920 = load <2 x i32>, <2 x i32>* %3102, align 1
  %1921 = load <2 x float>, <2 x float>* %3096, align 1
  %1922 = extractelement <2 x float> %1919, i32 0
  %1923 = extractelement <2 x float> %1921, i32 0
  %1924 = fadd float %1922, %1923
  store float %1924, float* %3079, align 1, !tbaa !2451
  %1925 = bitcast <2 x float> %1919 to <2 x i32>
  %1926 = extractelement <2 x i32> %1925, i32 1
  store i32 %1926, i32* %3103, align 1, !tbaa !2451
  %1927 = extractelement <2 x i32> %1920, i32 0
  store i32 %1927, i32* %3104, align 1, !tbaa !2451
  %1928 = extractelement <2 x i32> %1920, i32 1
  store i32 %1928, i32* %3105, align 1, !tbaa !2451
  %1929 = add i64 %1871, -32
  %1930 = add i64 %3143, 654
  store i64 %1930, i64* %PC, align 8
  %1931 = inttoptr i64 %1929 to i64*
  %1932 = load i64, i64* %1931, align 8
  store i64 %1932, i64* %RAX, align 8, !tbaa !2428
  %1933 = add i64 %1871, -44
  %1934 = add i64 %3143, 657
  store i64 %1934, i64* %PC, align 8
  %1935 = inttoptr i64 %1933 to i32*
  %1936 = load i32, i32* %1935, align 4
  %1937 = add i32 %1936, -2
  %1938 = zext i32 %1937 to i64
  store i64 %1938, i64* %RDX, align 8, !tbaa !2428
  %1939 = icmp ult i32 %1936, 2
  %1940 = zext i1 %1939 to i8
  store i8 %1940, i8* %.pre-phi, align 1, !tbaa !2432
  %1941 = and i32 %1937, 255
  %1942 = tail call i32 @llvm.ctpop.i32(i32 %1941) #12
  %1943 = trunc i32 %1942 to i8
  %1944 = and i8 %1943, 1
  %1945 = xor i8 %1944, 1
  store i8 %1945, i8* %.pre-phi42, align 1, !tbaa !2446
  %1946 = xor i32 %1937, %1936
  %1947 = lshr i32 %1946, 4
  %1948 = trunc i32 %1947 to i8
  %1949 = and i8 %1948, 1
  store i8 %1949, i8* %.pre-phi44, align 1, !tbaa !2447
  %1950 = icmp eq i32 %1937, 0
  %1951 = zext i1 %1950 to i8
  store i8 %1951, i8* %.pre-phi46, align 1, !tbaa !2448
  %1952 = lshr i32 %1937, 31
  %1953 = trunc i32 %1952 to i8
  store i8 %1953, i8* %.pre-phi48, align 1, !tbaa !2449
  %1954 = lshr i32 %1936, 31
  %1955 = xor i32 %1952, %1954
  %1956 = add nuw nsw i32 %1955, %1954
  %1957 = icmp eq i32 %1956, 2
  %1958 = zext i1 %1957 to i8
  store i8 %1958, i8* %.pre-phi50, align 1, !tbaa !2450
  %1959 = sext i32 %1937 to i64
  store i64 %1959, i64* %RCX, align 8, !tbaa !2428
  %1960 = shl nsw i64 %1959, 2
  %1961 = add i64 %1932, %1960
  %1962 = add i64 %3143, 668
  store i64 %1962, i64* %PC, align 8
  %1963 = inttoptr i64 %1961 to i32*
  %1964 = load i32, i32* %1963, align 4
  store i32 %1964, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %1965 = load i64, i64* %RBP, align 8
  %1966 = add i64 %1965, -40
  %1967 = add i64 %3143, 672
  store i64 %1967, i64* %PC, align 8
  %1968 = inttoptr i64 %1966 to i64*
  %1969 = load i64, i64* %1968, align 8
  store i64 %1969, i64* %RAX, align 8, !tbaa !2428
  %1970 = add i64 %1965, -24
  %1971 = add i64 %3143, 675
  store i64 %1971, i64* %PC, align 8
  %1972 = inttoptr i64 %1970 to i32*
  %1973 = load i32, i32* %1972, align 4
  %1974 = zext i32 %1973 to i64
  store i64 %1974, i64* %RDX, align 8, !tbaa !2428
  %1975 = add i64 %1965, -44
  %1976 = add i64 %3143, 678
  store i64 %1976, i64* %PC, align 8
  %1977 = inttoptr i64 %1975 to i32*
  %1978 = load i32, i32* %1977, align 4
  %1979 = add i32 %1978, -2
  %1980 = zext i32 %1979 to i64
  store i64 %1980, i64* %RSI, align 8, !tbaa !2428
  %1981 = sext i32 %1973 to i64
  %1982 = sext i32 %1979 to i64
  %1983 = mul nsw i64 %1982, %1981
  %1984 = trunc i64 %1983 to i32
  %1985 = and i64 %1983, 4294967295
  store i64 %1985, i64* %RDX, align 8, !tbaa !2428
  %1986 = shl i64 %1983, 32
  %1987 = ashr exact i64 %1986, 32
  %1988 = icmp ne i64 %1987, %1983
  %1989 = zext i1 %1988 to i8
  store i8 %1989, i8* %.pre-phi, align 1, !tbaa !2432
  %1990 = and i32 %1984, 255
  %1991 = tail call i32 @llvm.ctpop.i32(i32 %1990) #12
  %1992 = trunc i32 %1991 to i8
  %1993 = and i8 %1992, 1
  %1994 = xor i8 %1993, 1
  store i8 %1994, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1995 = lshr i32 %1984, 31
  %1996 = trunc i32 %1995 to i8
  store i8 %1996, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1989, i8* %.pre-phi50, align 1, !tbaa !2450
  %1997 = add i64 %1965, -48
  %1998 = add i64 %3143, 687
  store i64 %1998, i64* %PC, align 8
  %1999 = trunc i64 %1983 to i32
  %2000 = inttoptr i64 %1997 to i32*
  %2001 = load i32, i32* %2000, align 4
  %2002 = add i32 %2001, %1999
  %2003 = zext i32 %2002 to i64
  store i64 %2003, i64* %RDX, align 8, !tbaa !2428
  %2004 = icmp ult i32 %2002, %1999
  %2005 = icmp ult i32 %2002, %2001
  %2006 = or i1 %2004, %2005
  %2007 = zext i1 %2006 to i8
  store i8 %2007, i8* %.pre-phi, align 1, !tbaa !2432
  %2008 = and i32 %2002, 255
  %2009 = tail call i32 @llvm.ctpop.i32(i32 %2008) #12
  %2010 = trunc i32 %2009 to i8
  %2011 = and i8 %2010, 1
  %2012 = xor i8 %2011, 1
  store i8 %2012, i8* %.pre-phi42, align 1, !tbaa !2446
  %2013 = xor i32 %2001, %1999
  %2014 = xor i32 %2013, %2002
  %2015 = lshr i32 %2014, 4
  %2016 = trunc i32 %2015 to i8
  %2017 = and i8 %2016, 1
  store i8 %2017, i8* %.pre-phi44, align 1, !tbaa !2447
  %2018 = icmp eq i32 %2002, 0
  %2019 = zext i1 %2018 to i8
  store i8 %2019, i8* %.pre-phi46, align 1, !tbaa !2448
  %2020 = lshr i32 %2002, 31
  %2021 = trunc i32 %2020 to i8
  store i8 %2021, i8* %.pre-phi48, align 1, !tbaa !2449
  %2022 = lshr i32 %1999, 31
  %2023 = lshr i32 %2001, 31
  %2024 = xor i32 %2020, %2022
  %2025 = xor i32 %2020, %2023
  %2026 = add nuw nsw i32 %2024, %2025
  %2027 = icmp eq i32 %2026, 2
  %2028 = zext i1 %2027 to i8
  store i8 %2028, i8* %.pre-phi50, align 1, !tbaa !2450
  %2029 = sext i32 %2002 to i64
  store i64 %2029, i64* %RCX, align 8, !tbaa !2428
  %2030 = load i64, i64* %RAX, align 8
  %2031 = shl nsw i64 %2029, 2
  %2032 = add i64 %2030, %2031
  %2033 = add i64 %3143, 695
  store i64 %2033, i64* %PC, align 8
  %2034 = load <2 x float>, <2 x float>* %3096, align 1
  %2035 = load <2 x i32>, <2 x i32>* %3097, align 1
  %2036 = inttoptr i64 %2032 to float*
  %2037 = load float, float* %2036, align 4
  %2038 = extractelement <2 x float> %2034, i32 0
  %2039 = fmul float %2038, %2037
  store float %2039, float* %3088, align 1, !tbaa !2451
  %2040 = bitcast <2 x float> %2034 to <2 x i32>
  %2041 = extractelement <2 x i32> %2040, i32 1
  store i32 %2041, i32* %3098, align 1, !tbaa !2451
  %2042 = extractelement <2 x i32> %2035, i32 0
  store i32 %2042, i32* %3099, align 1, !tbaa !2451
  %2043 = extractelement <2 x i32> %2035, i32 1
  store i32 %2043, i32* %3100, align 1, !tbaa !2451
  %2044 = load <2 x float>, <2 x float>* %3101, align 1
  %2045 = load <2 x i32>, <2 x i32>* %3102, align 1
  %2046 = load <2 x float>, <2 x float>* %3096, align 1
  %2047 = extractelement <2 x float> %2044, i32 0
  %2048 = extractelement <2 x float> %2046, i32 0
  %2049 = fadd float %2047, %2048
  store float %2049, float* %3079, align 1, !tbaa !2451
  %2050 = bitcast <2 x float> %2044 to <2 x i32>
  %2051 = extractelement <2 x i32> %2050, i32 1
  store i32 %2051, i32* %3103, align 1, !tbaa !2451
  %2052 = extractelement <2 x i32> %2045, i32 0
  store i32 %2052, i32* %3104, align 1, !tbaa !2451
  %2053 = extractelement <2 x i32> %2045, i32 1
  store i32 %2053, i32* %3105, align 1, !tbaa !2451
  %2054 = load i64, i64* %RBP, align 8
  %2055 = add i64 %2054, -32
  %2056 = add i64 %3143, 703
  store i64 %2056, i64* %PC, align 8
  %2057 = inttoptr i64 %2055 to i64*
  %2058 = load i64, i64* %2057, align 8
  store i64 %2058, i64* %RAX, align 8, !tbaa !2428
  %2059 = add i64 %2054, -44
  %2060 = add i64 %3143, 706
  store i64 %2060, i64* %PC, align 8
  %2061 = inttoptr i64 %2059 to i32*
  %2062 = load i32, i32* %2061, align 4
  %2063 = add i32 %2062, -1
  %2064 = zext i32 %2063 to i64
  store i64 %2064, i64* %RDX, align 8, !tbaa !2428
  %2065 = icmp eq i32 %2062, 0
  %2066 = zext i1 %2065 to i8
  store i8 %2066, i8* %.pre-phi, align 1, !tbaa !2432
  %2067 = and i32 %2063, 255
  %2068 = tail call i32 @llvm.ctpop.i32(i32 %2067) #12
  %2069 = trunc i32 %2068 to i8
  %2070 = and i8 %2069, 1
  %2071 = xor i8 %2070, 1
  store i8 %2071, i8* %.pre-phi42, align 1, !tbaa !2446
  %2072 = xor i32 %2063, %2062
  %2073 = lshr i32 %2072, 4
  %2074 = trunc i32 %2073 to i8
  %2075 = and i8 %2074, 1
  store i8 %2075, i8* %.pre-phi44, align 1, !tbaa !2447
  %2076 = icmp eq i32 %2063, 0
  %2077 = zext i1 %2076 to i8
  store i8 %2077, i8* %.pre-phi46, align 1, !tbaa !2448
  %2078 = lshr i32 %2063, 31
  %2079 = trunc i32 %2078 to i8
  store i8 %2079, i8* %.pre-phi48, align 1, !tbaa !2449
  %2080 = lshr i32 %2062, 31
  %2081 = xor i32 %2078, %2080
  %2082 = add nuw nsw i32 %2081, %2080
  %2083 = icmp eq i32 %2082, 2
  %2084 = zext i1 %2083 to i8
  store i8 %2084, i8* %.pre-phi50, align 1, !tbaa !2450
  %2085 = sext i32 %2063 to i64
  store i64 %2085, i64* %RCX, align 8, !tbaa !2428
  %2086 = shl nsw i64 %2085, 2
  %2087 = add i64 %2058, %2086
  %2088 = add i64 %3143, 717
  store i64 %2088, i64* %PC, align 8
  %2089 = inttoptr i64 %2087 to i32*
  %2090 = load i32, i32* %2089, align 4
  store i32 %2090, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %2091 = add i64 %2054, -40
  %2092 = add i64 %3143, 721
  store i64 %2092, i64* %PC, align 8
  %2093 = inttoptr i64 %2091 to i64*
  %2094 = load i64, i64* %2093, align 8
  store i64 %2094, i64* %RAX, align 8, !tbaa !2428
  %2095 = add i64 %2054, -24
  %2096 = add i64 %3143, 724
  store i64 %2096, i64* %PC, align 8
  %2097 = inttoptr i64 %2095 to i32*
  %2098 = load i32, i32* %2097, align 4
  %2099 = zext i32 %2098 to i64
  store i64 %2099, i64* %RDX, align 8, !tbaa !2428
  %2100 = add i64 %3143, 727
  store i64 %2100, i64* %PC, align 8
  %2101 = load i32, i32* %2061, align 4
  %2102 = add i32 %2101, -1
  %2103 = zext i32 %2102 to i64
  store i64 %2103, i64* %RSI, align 8, !tbaa !2428
  %2104 = sext i32 %2098 to i64
  %2105 = sext i32 %2102 to i64
  %2106 = mul nsw i64 %2105, %2104
  %2107 = trunc i64 %2106 to i32
  %2108 = and i64 %2106, 4294967295
  store i64 %2108, i64* %RDX, align 8, !tbaa !2428
  %2109 = shl i64 %2106, 32
  %2110 = ashr exact i64 %2109, 32
  %2111 = icmp ne i64 %2110, %2106
  %2112 = zext i1 %2111 to i8
  store i8 %2112, i8* %.pre-phi, align 1, !tbaa !2432
  %2113 = and i32 %2107, 255
  %2114 = tail call i32 @llvm.ctpop.i32(i32 %2113) #12
  %2115 = trunc i32 %2114 to i8
  %2116 = and i8 %2115, 1
  %2117 = xor i8 %2116, 1
  store i8 %2117, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2118 = lshr i32 %2107, 31
  %2119 = trunc i32 %2118 to i8
  store i8 %2119, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2112, i8* %.pre-phi50, align 1, !tbaa !2450
  %2120 = load i64, i64* %RBP, align 8
  %2121 = add i64 %2120, -48
  %2122 = add i64 %3143, 736
  store i64 %2122, i64* %PC, align 8
  %2123 = trunc i64 %2106 to i32
  %2124 = inttoptr i64 %2121 to i32*
  %2125 = load i32, i32* %2124, align 4
  %2126 = add i32 %2125, %2123
  %2127 = zext i32 %2126 to i64
  store i64 %2127, i64* %RDX, align 8, !tbaa !2428
  %2128 = icmp ult i32 %2126, %2123
  %2129 = icmp ult i32 %2126, %2125
  %2130 = or i1 %2128, %2129
  %2131 = zext i1 %2130 to i8
  store i8 %2131, i8* %.pre-phi, align 1, !tbaa !2432
  %2132 = and i32 %2126, 255
  %2133 = tail call i32 @llvm.ctpop.i32(i32 %2132) #12
  %2134 = trunc i32 %2133 to i8
  %2135 = and i8 %2134, 1
  %2136 = xor i8 %2135, 1
  store i8 %2136, i8* %.pre-phi42, align 1, !tbaa !2446
  %2137 = xor i32 %2125, %2123
  %2138 = xor i32 %2137, %2126
  %2139 = lshr i32 %2138, 4
  %2140 = trunc i32 %2139 to i8
  %2141 = and i8 %2140, 1
  store i8 %2141, i8* %.pre-phi44, align 1, !tbaa !2447
  %2142 = icmp eq i32 %2126, 0
  %2143 = zext i1 %2142 to i8
  store i8 %2143, i8* %.pre-phi46, align 1, !tbaa !2448
  %2144 = lshr i32 %2126, 31
  %2145 = trunc i32 %2144 to i8
  store i8 %2145, i8* %.pre-phi48, align 1, !tbaa !2449
  %2146 = lshr i32 %2123, 31
  %2147 = lshr i32 %2125, 31
  %2148 = xor i32 %2144, %2146
  %2149 = xor i32 %2144, %2147
  %2150 = add nuw nsw i32 %2148, %2149
  %2151 = icmp eq i32 %2150, 2
  %2152 = zext i1 %2151 to i8
  store i8 %2152, i8* %.pre-phi50, align 1, !tbaa !2450
  %2153 = sext i32 %2126 to i64
  store i64 %2153, i64* %RCX, align 8, !tbaa !2428
  %2154 = load i64, i64* %RAX, align 8
  %2155 = shl nsw i64 %2153, 2
  %2156 = add i64 %2154, %2155
  %2157 = add i64 %3143, 744
  store i64 %2157, i64* %PC, align 8
  %2158 = load <2 x float>, <2 x float>* %3096, align 1
  %2159 = load <2 x i32>, <2 x i32>* %3097, align 1
  %2160 = inttoptr i64 %2156 to float*
  %2161 = load float, float* %2160, align 4
  %2162 = extractelement <2 x float> %2158, i32 0
  %2163 = fmul float %2162, %2161
  store float %2163, float* %3088, align 1, !tbaa !2451
  %2164 = bitcast <2 x float> %2158 to <2 x i32>
  %2165 = extractelement <2 x i32> %2164, i32 1
  store i32 %2165, i32* %3098, align 1, !tbaa !2451
  %2166 = extractelement <2 x i32> %2159, i32 0
  store i32 %2166, i32* %3099, align 1, !tbaa !2451
  %2167 = extractelement <2 x i32> %2159, i32 1
  store i32 %2167, i32* %3100, align 1, !tbaa !2451
  %2168 = load <2 x float>, <2 x float>* %3101, align 1
  %2169 = load <2 x i32>, <2 x i32>* %3102, align 1
  %2170 = load <2 x float>, <2 x float>* %3096, align 1
  %2171 = extractelement <2 x float> %2168, i32 0
  %2172 = extractelement <2 x float> %2170, i32 0
  %2173 = fadd float %2171, %2172
  store float %2173, float* %3079, align 1, !tbaa !2451
  %2174 = bitcast <2 x float> %2168 to <2 x i32>
  %2175 = extractelement <2 x i32> %2174, i32 1
  store i32 %2175, i32* %3103, align 1, !tbaa !2451
  %2176 = extractelement <2 x i32> %2169, i32 0
  store i32 %2176, i32* %3104, align 1, !tbaa !2451
  %2177 = extractelement <2 x i32> %2169, i32 1
  store i32 %2177, i32* %3105, align 1, !tbaa !2451
  %2178 = add i64 %2120, -32
  %2179 = add i64 %3143, 752
  store i64 %2179, i64* %PC, align 8
  %2180 = inttoptr i64 %2178 to i64*
  %2181 = load i64, i64* %2180, align 8
  store i64 %2181, i64* %RAX, align 8, !tbaa !2428
  %2182 = add i64 %2120, -44
  %2183 = add i64 %3143, 756
  store i64 %2183, i64* %PC, align 8
  %2184 = inttoptr i64 %2182 to i32*
  %2185 = load i32, i32* %2184, align 4
  %2186 = sext i32 %2185 to i64
  store i64 %2186, i64* %RCX, align 8, !tbaa !2428
  %2187 = shl nsw i64 %2186, 2
  %2188 = add i64 %2187, %2181
  %2189 = add i64 %3143, 761
  store i64 %2189, i64* %PC, align 8
  %2190 = inttoptr i64 %2188 to i32*
  %2191 = load i32, i32* %2190, align 4
  store i32 %2191, i32* %3089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3091, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3093, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3095, align 1, !tbaa !2451
  %2192 = load i64, i64* %RBP, align 8
  %2193 = add i64 %2192, -40
  %2194 = add i64 %3143, 765
  store i64 %2194, i64* %PC, align 8
  %2195 = inttoptr i64 %2193 to i64*
  %2196 = load i64, i64* %2195, align 8
  store i64 %2196, i64* %RAX, align 8, !tbaa !2428
  %2197 = add i64 %2192, -24
  %2198 = add i64 %3143, 768
  store i64 %2198, i64* %PC, align 8
  %2199 = inttoptr i64 %2197 to i32*
  %2200 = load i32, i32* %2199, align 4
  %2201 = zext i32 %2200 to i64
  store i64 %2201, i64* %RDX, align 8, !tbaa !2428
  %2202 = add i64 %2192, -44
  %2203 = add i64 %3143, 772
  store i64 %2203, i64* %PC, align 8
  %2204 = inttoptr i64 %2202 to i32*
  %2205 = load i32, i32* %2204, align 4
  %2206 = sext i32 %2200 to i64
  %2207 = sext i32 %2205 to i64
  %2208 = mul nsw i64 %2207, %2206
  %2209 = trunc i64 %2208 to i32
  %2210 = and i64 %2208, 4294967295
  store i64 %2210, i64* %RDX, align 8, !tbaa !2428
  %2211 = shl i64 %2208, 32
  %2212 = ashr exact i64 %2211, 32
  %2213 = icmp ne i64 %2212, %2208
  %2214 = zext i1 %2213 to i8
  store i8 %2214, i8* %.pre-phi, align 1, !tbaa !2432
  %2215 = and i32 %2209, 255
  %2216 = tail call i32 @llvm.ctpop.i32(i32 %2215) #12
  %2217 = trunc i32 %2216 to i8
  %2218 = and i8 %2217, 1
  %2219 = xor i8 %2218, 1
  store i8 %2219, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2220 = lshr i32 %2209, 31
  %2221 = trunc i32 %2220 to i8
  store i8 %2221, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2214, i8* %.pre-phi50, align 1, !tbaa !2450
  %2222 = add i64 %2192, -48
  %2223 = add i64 %3143, 775
  store i64 %2223, i64* %PC, align 8
  %2224 = trunc i64 %2208 to i32
  %2225 = inttoptr i64 %2222 to i32*
  %2226 = load i32, i32* %2225, align 4
  %2227 = add i32 %2226, %2224
  %2228 = zext i32 %2227 to i64
  store i64 %2228, i64* %RDX, align 8, !tbaa !2428
  %2229 = icmp ult i32 %2227, %2224
  %2230 = icmp ult i32 %2227, %2226
  %2231 = or i1 %2229, %2230
  %2232 = zext i1 %2231 to i8
  store i8 %2232, i8* %.pre-phi, align 1, !tbaa !2432
  %2233 = and i32 %2227, 255
  %2234 = tail call i32 @llvm.ctpop.i32(i32 %2233) #12
  %2235 = trunc i32 %2234 to i8
  %2236 = and i8 %2235, 1
  %2237 = xor i8 %2236, 1
  store i8 %2237, i8* %.pre-phi42, align 1, !tbaa !2446
  %2238 = xor i32 %2226, %2224
  %2239 = xor i32 %2238, %2227
  %2240 = lshr i32 %2239, 4
  %2241 = trunc i32 %2240 to i8
  %2242 = and i8 %2241, 1
  store i8 %2242, i8* %.pre-phi44, align 1, !tbaa !2447
  %2243 = icmp eq i32 %2227, 0
  %2244 = zext i1 %2243 to i8
  store i8 %2244, i8* %.pre-phi46, align 1, !tbaa !2448
  %2245 = lshr i32 %2227, 31
  %2246 = trunc i32 %2245 to i8
  store i8 %2246, i8* %.pre-phi48, align 1, !tbaa !2449
  %2247 = lshr i32 %2224, 31
  %2248 = lshr i32 %2226, 31
  %2249 = xor i32 %2245, %2247
  %2250 = xor i32 %2245, %2248
  %2251 = add nuw nsw i32 %2249, %2250
  %2252 = icmp eq i32 %2251, 2
  %2253 = zext i1 %2252 to i8
  store i8 %2253, i8* %.pre-phi50, align 1, !tbaa !2450
  %2254 = sext i32 %2227 to i64
  store i64 %2254, i64* %RCX, align 8, !tbaa !2428
  %2255 = shl nsw i64 %2254, 2
  %2256 = add i64 %2196, %2255
  %2257 = add i64 %3143, 783
  store i64 %2257, i64* %PC, align 8
  %2258 = load <2 x float>, <2 x float>* %3096, align 1
  %2259 = load <2 x i32>, <2 x i32>* %3097, align 1
  %2260 = inttoptr i64 %2256 to float*
  %2261 = load float, float* %2260, align 4
  %2262 = extractelement <2 x float> %2258, i32 0
  %2263 = fmul float %2262, %2261
  store float %2263, float* %3088, align 1, !tbaa !2451
  %2264 = bitcast <2 x float> %2258 to <2 x i32>
  %2265 = extractelement <2 x i32> %2264, i32 1
  store i32 %2265, i32* %3098, align 1, !tbaa !2451
  %2266 = extractelement <2 x i32> %2259, i32 0
  store i32 %2266, i32* %3099, align 1, !tbaa !2451
  %2267 = extractelement <2 x i32> %2259, i32 1
  store i32 %2267, i32* %3100, align 1, !tbaa !2451
  %2268 = load <2 x float>, <2 x float>* %3101, align 1
  %2269 = load <2 x i32>, <2 x i32>* %3102, align 1
  %2270 = load <2 x float>, <2 x float>* %3096, align 1
  %2271 = extractelement <2 x float> %2268, i32 0
  %2272 = extractelement <2 x float> %2270, i32 0
  %2273 = fadd float %2271, %2272
  store float %2273, float* %3079, align 1, !tbaa !2451
  %2274 = bitcast <2 x float> %2268 to <2 x i32>
  %2275 = extractelement <2 x i32> %2274, i32 1
  store i32 %2275, i32* %3103, align 1, !tbaa !2451
  %2276 = extractelement <2 x i32> %2269, i32 0
  store i32 %2276, i32* %3104, align 1, !tbaa !2451
  %2277 = extractelement <2 x i32> %2269, i32 1
  store i32 %2277, i32* %3105, align 1, !tbaa !2451
  %2278 = load i64, i64* %RBP, align 8
  %2279 = add i64 %2278, -16
  %2280 = add i64 %3143, 791
  store i64 %2280, i64* %PC, align 8
  %2281 = inttoptr i64 %2279 to i64*
  %2282 = load i64, i64* %2281, align 8
  store i64 %2282, i64* %RAX, align 8, !tbaa !2428
  %2283 = add i64 %2278, -48
  %2284 = add i64 %3143, 795
  store i64 %2284, i64* %PC, align 8
  %2285 = inttoptr i64 %2283 to i32*
  %2286 = load i32, i32* %2285, align 4
  %2287 = sext i32 %2286 to i64
  store i64 %2287, i64* %RCX, align 8, !tbaa !2428
  %2288 = shl nsw i64 %2287, 2
  %2289 = add i64 %2288, %2282
  %2290 = add i64 %3143, 800
  store i64 %2290, i64* %PC, align 8
  %2291 = load <2 x float>, <2 x float>* %3101, align 1
  %2292 = extractelement <2 x float> %2291, i32 0
  %2293 = inttoptr i64 %2289 to float*
  store float %2292, float* %2293, align 4
  %2294 = load i64, i64* %RBP, align 8
  %2295 = add i64 %2294, -48
  %2296 = load i64, i64* %PC, align 8
  %2297 = add i64 %2296, 3
  store i64 %2297, i64* %PC, align 8
  %2298 = inttoptr i64 %2295 to i32*
  %2299 = load i32, i32* %2298, align 4
  %2300 = add i32 %2299, 1
  %2301 = zext i32 %2300 to i64
  store i64 %2301, i64* %RAX, align 8, !tbaa !2428
  %2302 = icmp eq i32 %2299, -1
  %2303 = icmp eq i32 %2300, 0
  %2304 = or i1 %2302, %2303
  %2305 = zext i1 %2304 to i8
  store i8 %2305, i8* %.pre-phi, align 1, !tbaa !2432
  %2306 = and i32 %2300, 255
  %2307 = tail call i32 @llvm.ctpop.i32(i32 %2306) #12
  %2308 = trunc i32 %2307 to i8
  %2309 = and i8 %2308, 1
  %2310 = xor i8 %2309, 1
  store i8 %2310, i8* %.pre-phi42, align 1, !tbaa !2446
  %2311 = xor i32 %2300, %2299
  %2312 = lshr i32 %2311, 4
  %2313 = trunc i32 %2312 to i8
  %2314 = and i8 %2313, 1
  store i8 %2314, i8* %.pre-phi44, align 1, !tbaa !2447
  %2315 = zext i1 %2303 to i8
  store i8 %2315, i8* %.pre-phi46, align 1, !tbaa !2448
  %2316 = lshr i32 %2300, 31
  %2317 = trunc i32 %2316 to i8
  store i8 %2317, i8* %.pre-phi48, align 1, !tbaa !2449
  %2318 = lshr i32 %2299, 31
  %2319 = xor i32 %2316, %2318
  %2320 = add nuw nsw i32 %2319, %2316
  %2321 = icmp eq i32 %2320, 2
  %2322 = zext i1 %2321 to i8
  store i8 %2322, i8* %.pre-phi50, align 1, !tbaa !2450
  %2323 = add i64 %2296, 9
  store i64 %2323, i64* %PC, align 8
  store i32 %2300, i32* %2298, align 4
  %2324 = load i64, i64* %PC, align 8
  %2325 = add i64 %2324, -821
  store i64 %2325, i64* %PC, align 8, !tbaa !2428
  br label %block_402469

block_402166:                                     ; preds = %block_40215a
  %2326 = add i64 %3145, -16
  %2327 = add i64 %3181, 4
  store i64 %2327, i64* %PC, align 8
  %2328 = inttoptr i64 %2326 to i64*
  %2329 = load i64, i64* %2328, align 8
  store i64 %2329, i64* %RAX, align 8, !tbaa !2428
  %2330 = add i64 %3181, 8
  store i64 %2330, i64* %PC, align 8
  %2331 = load i32, i32* %3148, align 4
  %2332 = sext i32 %2331 to i64
  store i64 %2332, i64* %RCX, align 8, !tbaa !2428
  %2333 = shl nsw i64 %2332, 2
  %2334 = add i64 %2333, %2329
  %2335 = add i64 %3181, 13
  store i64 %2335, i64* %PC, align 8
  %2336 = inttoptr i64 %2334 to i32*
  %2337 = load i32, i32* %2336, align 4
  store i32 %2337, i32* %3951, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3953, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3955, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3957, align 1, !tbaa !2451
  %2338 = add i64 %3145, -32
  %2339 = add i64 %3181, 17
  store i64 %2339, i64* %PC, align 8
  %2340 = inttoptr i64 %2338 to i64*
  %2341 = load i64, i64* %2340, align 8
  store i64 %2341, i64* %RAX, align 8, !tbaa !2428
  %2342 = add i64 %3145, -44
  %2343 = add i64 %3181, 20
  store i64 %2343, i64* %PC, align 8
  %2344 = inttoptr i64 %2342 to i32*
  %2345 = load i32, i32* %2344, align 4
  %2346 = add i32 %2345, -3
  %2347 = zext i32 %2346 to i64
  store i64 %2347, i64* %RDX, align 8, !tbaa !2428
  %2348 = icmp ult i32 %2345, 3
  %2349 = zext i1 %2348 to i8
  store i8 %2349, i8* %.pre-phi, align 1, !tbaa !2432
  %2350 = and i32 %2346, 255
  %2351 = tail call i32 @llvm.ctpop.i32(i32 %2350) #12
  %2352 = trunc i32 %2351 to i8
  %2353 = and i8 %2352, 1
  %2354 = xor i8 %2353, 1
  store i8 %2354, i8* %.pre-phi42, align 1, !tbaa !2446
  %2355 = xor i32 %2346, %2345
  %2356 = lshr i32 %2355, 4
  %2357 = trunc i32 %2356 to i8
  %2358 = and i8 %2357, 1
  store i8 %2358, i8* %.pre-phi44, align 1, !tbaa !2447
  %2359 = icmp eq i32 %2346, 0
  %2360 = zext i1 %2359 to i8
  store i8 %2360, i8* %.pre-phi46, align 1, !tbaa !2448
  %2361 = lshr i32 %2346, 31
  %2362 = trunc i32 %2361 to i8
  store i8 %2362, i8* %.pre-phi48, align 1, !tbaa !2449
  %2363 = lshr i32 %2345, 31
  %2364 = xor i32 %2361, %2363
  %2365 = add nuw nsw i32 %2364, %2363
  %2366 = icmp eq i32 %2365, 2
  %2367 = zext i1 %2366 to i8
  store i8 %2367, i8* %.pre-phi50, align 1, !tbaa !2450
  %2368 = sext i32 %2346 to i64
  store i64 %2368, i64* %RCX, align 8, !tbaa !2428
  %2369 = shl nsw i64 %2368, 2
  %2370 = add i64 %2341, %2369
  %2371 = add i64 %3181, 31
  store i64 %2371, i64* %PC, align 8
  %2372 = inttoptr i64 %2370 to i32*
  %2373 = load i32, i32* %2372, align 4
  store i32 %2373, i32* %3960, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3962, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3964, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3966, align 1, !tbaa !2451
  %2374 = add i64 %3145, -40
  %2375 = add i64 %3181, 35
  store i64 %2375, i64* %PC, align 8
  %2376 = inttoptr i64 %2374 to i64*
  %2377 = load i64, i64* %2376, align 8
  store i64 %2377, i64* %RAX, align 8, !tbaa !2428
  %2378 = add i64 %3145, -24
  %2379 = add i64 %3181, 38
  store i64 %2379, i64* %PC, align 8
  %2380 = inttoptr i64 %2378 to i32*
  %2381 = load i32, i32* %2380, align 4
  %2382 = zext i32 %2381 to i64
  store i64 %2382, i64* %RDX, align 8, !tbaa !2428
  %2383 = add i64 %3181, 41
  store i64 %2383, i64* %PC, align 8
  %2384 = load i32, i32* %2344, align 4
  %2385 = add i32 %2384, -3
  %2386 = zext i32 %2385 to i64
  store i64 %2386, i64* %RSI, align 8, !tbaa !2428
  %2387 = sext i32 %2381 to i64
  %2388 = sext i32 %2385 to i64
  %2389 = mul nsw i64 %2388, %2387
  %2390 = trunc i64 %2389 to i32
  %2391 = and i64 %2389, 4294967295
  store i64 %2391, i64* %RDX, align 8, !tbaa !2428
  %2392 = shl i64 %2389, 32
  %2393 = ashr exact i64 %2392, 32
  %2394 = icmp ne i64 %2393, %2389
  %2395 = zext i1 %2394 to i8
  store i8 %2395, i8* %.pre-phi, align 1, !tbaa !2432
  %2396 = and i32 %2390, 255
  %2397 = tail call i32 @llvm.ctpop.i32(i32 %2396) #12
  %2398 = trunc i32 %2397 to i8
  %2399 = and i8 %2398, 1
  %2400 = xor i8 %2399, 1
  store i8 %2400, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2401 = lshr i32 %2390, 31
  %2402 = trunc i32 %2401 to i8
  store i8 %2402, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2395, i8* %.pre-phi50, align 1, !tbaa !2450
  %2403 = load i64, i64* %RBP, align 8
  %2404 = add i64 %2403, -48
  %2405 = add i64 %3181, 50
  store i64 %2405, i64* %PC, align 8
  %2406 = trunc i64 %2389 to i32
  %2407 = inttoptr i64 %2404 to i32*
  %2408 = load i32, i32* %2407, align 4
  %2409 = add i32 %2408, %2406
  %2410 = zext i32 %2409 to i64
  store i64 %2410, i64* %RDX, align 8, !tbaa !2428
  %2411 = icmp ult i32 %2409, %2406
  %2412 = icmp ult i32 %2409, %2408
  %2413 = or i1 %2411, %2412
  %2414 = zext i1 %2413 to i8
  store i8 %2414, i8* %.pre-phi, align 1, !tbaa !2432
  %2415 = and i32 %2409, 255
  %2416 = tail call i32 @llvm.ctpop.i32(i32 %2415) #12
  %2417 = trunc i32 %2416 to i8
  %2418 = and i8 %2417, 1
  %2419 = xor i8 %2418, 1
  store i8 %2419, i8* %.pre-phi42, align 1, !tbaa !2446
  %2420 = xor i32 %2408, %2406
  %2421 = xor i32 %2420, %2409
  %2422 = lshr i32 %2421, 4
  %2423 = trunc i32 %2422 to i8
  %2424 = and i8 %2423, 1
  store i8 %2424, i8* %.pre-phi44, align 1, !tbaa !2447
  %2425 = icmp eq i32 %2409, 0
  %2426 = zext i1 %2425 to i8
  store i8 %2426, i8* %.pre-phi46, align 1, !tbaa !2448
  %2427 = lshr i32 %2409, 31
  %2428 = trunc i32 %2427 to i8
  store i8 %2428, i8* %.pre-phi48, align 1, !tbaa !2449
  %2429 = lshr i32 %2406, 31
  %2430 = lshr i32 %2408, 31
  %2431 = xor i32 %2427, %2429
  %2432 = xor i32 %2427, %2430
  %2433 = add nuw nsw i32 %2431, %2432
  %2434 = icmp eq i32 %2433, 2
  %2435 = zext i1 %2434 to i8
  store i8 %2435, i8* %.pre-phi50, align 1, !tbaa !2450
  %2436 = sext i32 %2409 to i64
  store i64 %2436, i64* %RCX, align 8, !tbaa !2428
  %2437 = load i64, i64* %RAX, align 8
  %2438 = shl nsw i64 %2436, 2
  %2439 = add i64 %2437, %2438
  %2440 = add i64 %3181, 58
  store i64 %2440, i64* %PC, align 8
  %2441 = load <2 x float>, <2 x float>* %3967, align 1
  %2442 = load <2 x i32>, <2 x i32>* %3968, align 1
  %2443 = inttoptr i64 %2439 to float*
  %2444 = load float, float* %2443, align 4
  %2445 = extractelement <2 x float> %2441, i32 0
  %2446 = fmul float %2445, %2444
  store float %2446, float* %3959, align 1, !tbaa !2451
  %2447 = bitcast <2 x float> %2441 to <2 x i32>
  %2448 = extractelement <2 x i32> %2447, i32 1
  store i32 %2448, i32* %3969, align 1, !tbaa !2451
  %2449 = extractelement <2 x i32> %2442, i32 0
  store i32 %2449, i32* %3970, align 1, !tbaa !2451
  %2450 = extractelement <2 x i32> %2442, i32 1
  store i32 %2450, i32* %3971, align 1, !tbaa !2451
  %2451 = load <2 x float>, <2 x float>* %3972, align 1
  %2452 = load <2 x i32>, <2 x i32>* %3973, align 1
  %2453 = load <2 x float>, <2 x float>* %3967, align 1
  %2454 = extractelement <2 x float> %2451, i32 0
  %2455 = extractelement <2 x float> %2453, i32 0
  %2456 = fadd float %2454, %2455
  store float %2456, float* %3950, align 1, !tbaa !2451
  %2457 = bitcast <2 x float> %2451 to <2 x i32>
  %2458 = extractelement <2 x i32> %2457, i32 1
  store i32 %2458, i32* %3974, align 1, !tbaa !2451
  %2459 = extractelement <2 x i32> %2452, i32 0
  store i32 %2459, i32* %3975, align 1, !tbaa !2451
  %2460 = extractelement <2 x i32> %2452, i32 1
  store i32 %2460, i32* %3976, align 1, !tbaa !2451
  %2461 = add i64 %2403, -32
  %2462 = add i64 %3181, 66
  store i64 %2462, i64* %PC, align 8
  %2463 = inttoptr i64 %2461 to i64*
  %2464 = load i64, i64* %2463, align 8
  store i64 %2464, i64* %RAX, align 8, !tbaa !2428
  %2465 = add i64 %2403, -44
  %2466 = add i64 %3181, 69
  store i64 %2466, i64* %PC, align 8
  %2467 = inttoptr i64 %2465 to i32*
  %2468 = load i32, i32* %2467, align 4
  %2469 = add i32 %2468, -2
  %2470 = zext i32 %2469 to i64
  store i64 %2470, i64* %RDX, align 8, !tbaa !2428
  %2471 = icmp ult i32 %2468, 2
  %2472 = zext i1 %2471 to i8
  store i8 %2472, i8* %.pre-phi, align 1, !tbaa !2432
  %2473 = and i32 %2469, 255
  %2474 = tail call i32 @llvm.ctpop.i32(i32 %2473) #12
  %2475 = trunc i32 %2474 to i8
  %2476 = and i8 %2475, 1
  %2477 = xor i8 %2476, 1
  store i8 %2477, i8* %.pre-phi42, align 1, !tbaa !2446
  %2478 = xor i32 %2469, %2468
  %2479 = lshr i32 %2478, 4
  %2480 = trunc i32 %2479 to i8
  %2481 = and i8 %2480, 1
  store i8 %2481, i8* %.pre-phi44, align 1, !tbaa !2447
  %2482 = icmp eq i32 %2469, 0
  %2483 = zext i1 %2482 to i8
  store i8 %2483, i8* %.pre-phi46, align 1, !tbaa !2448
  %2484 = lshr i32 %2469, 31
  %2485 = trunc i32 %2484 to i8
  store i8 %2485, i8* %.pre-phi48, align 1, !tbaa !2449
  %2486 = lshr i32 %2468, 31
  %2487 = xor i32 %2484, %2486
  %2488 = add nuw nsw i32 %2487, %2486
  %2489 = icmp eq i32 %2488, 2
  %2490 = zext i1 %2489 to i8
  store i8 %2490, i8* %.pre-phi50, align 1, !tbaa !2450
  %2491 = sext i32 %2469 to i64
  store i64 %2491, i64* %RCX, align 8, !tbaa !2428
  %2492 = shl nsw i64 %2491, 2
  %2493 = add i64 %2464, %2492
  %2494 = add i64 %3181, 80
  store i64 %2494, i64* %PC, align 8
  %2495 = inttoptr i64 %2493 to i32*
  %2496 = load i32, i32* %2495, align 4
  store i32 %2496, i32* %3960, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3962, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3964, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3966, align 1, !tbaa !2451
  %2497 = load i64, i64* %RBP, align 8
  %2498 = add i64 %2497, -40
  %2499 = add i64 %3181, 84
  store i64 %2499, i64* %PC, align 8
  %2500 = inttoptr i64 %2498 to i64*
  %2501 = load i64, i64* %2500, align 8
  store i64 %2501, i64* %RAX, align 8, !tbaa !2428
  %2502 = add i64 %2497, -24
  %2503 = add i64 %3181, 87
  store i64 %2503, i64* %PC, align 8
  %2504 = inttoptr i64 %2502 to i32*
  %2505 = load i32, i32* %2504, align 4
  %2506 = zext i32 %2505 to i64
  store i64 %2506, i64* %RDX, align 8, !tbaa !2428
  %2507 = add i64 %2497, -44
  %2508 = add i64 %3181, 90
  store i64 %2508, i64* %PC, align 8
  %2509 = inttoptr i64 %2507 to i32*
  %2510 = load i32, i32* %2509, align 4
  %2511 = add i32 %2510, -2
  %2512 = zext i32 %2511 to i64
  store i64 %2512, i64* %RSI, align 8, !tbaa !2428
  %2513 = sext i32 %2505 to i64
  %2514 = sext i32 %2511 to i64
  %2515 = mul nsw i64 %2514, %2513
  %2516 = trunc i64 %2515 to i32
  %2517 = and i64 %2515, 4294967295
  store i64 %2517, i64* %RDX, align 8, !tbaa !2428
  %2518 = shl i64 %2515, 32
  %2519 = ashr exact i64 %2518, 32
  %2520 = icmp ne i64 %2519, %2515
  %2521 = zext i1 %2520 to i8
  store i8 %2521, i8* %.pre-phi, align 1, !tbaa !2432
  %2522 = and i32 %2516, 255
  %2523 = tail call i32 @llvm.ctpop.i32(i32 %2522) #12
  %2524 = trunc i32 %2523 to i8
  %2525 = and i8 %2524, 1
  %2526 = xor i8 %2525, 1
  store i8 %2526, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2527 = lshr i32 %2516, 31
  %2528 = trunc i32 %2527 to i8
  store i8 %2528, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2521, i8* %.pre-phi50, align 1, !tbaa !2450
  %2529 = add i64 %2497, -48
  %2530 = add i64 %3181, 99
  store i64 %2530, i64* %PC, align 8
  %2531 = trunc i64 %2515 to i32
  %2532 = inttoptr i64 %2529 to i32*
  %2533 = load i32, i32* %2532, align 4
  %2534 = add i32 %2533, %2531
  %2535 = zext i32 %2534 to i64
  store i64 %2535, i64* %RDX, align 8, !tbaa !2428
  %2536 = icmp ult i32 %2534, %2531
  %2537 = icmp ult i32 %2534, %2533
  %2538 = or i1 %2536, %2537
  %2539 = zext i1 %2538 to i8
  store i8 %2539, i8* %.pre-phi, align 1, !tbaa !2432
  %2540 = and i32 %2534, 255
  %2541 = tail call i32 @llvm.ctpop.i32(i32 %2540) #12
  %2542 = trunc i32 %2541 to i8
  %2543 = and i8 %2542, 1
  %2544 = xor i8 %2543, 1
  store i8 %2544, i8* %.pre-phi42, align 1, !tbaa !2446
  %2545 = xor i32 %2533, %2531
  %2546 = xor i32 %2545, %2534
  %2547 = lshr i32 %2546, 4
  %2548 = trunc i32 %2547 to i8
  %2549 = and i8 %2548, 1
  store i8 %2549, i8* %.pre-phi44, align 1, !tbaa !2447
  %2550 = icmp eq i32 %2534, 0
  %2551 = zext i1 %2550 to i8
  store i8 %2551, i8* %.pre-phi46, align 1, !tbaa !2448
  %2552 = lshr i32 %2534, 31
  %2553 = trunc i32 %2552 to i8
  store i8 %2553, i8* %.pre-phi48, align 1, !tbaa !2449
  %2554 = lshr i32 %2531, 31
  %2555 = lshr i32 %2533, 31
  %2556 = xor i32 %2552, %2554
  %2557 = xor i32 %2552, %2555
  %2558 = add nuw nsw i32 %2556, %2557
  %2559 = icmp eq i32 %2558, 2
  %2560 = zext i1 %2559 to i8
  store i8 %2560, i8* %.pre-phi50, align 1, !tbaa !2450
  %2561 = sext i32 %2534 to i64
  store i64 %2561, i64* %RCX, align 8, !tbaa !2428
  %2562 = load i64, i64* %RAX, align 8
  %2563 = shl nsw i64 %2561, 2
  %2564 = add i64 %2562, %2563
  %2565 = add i64 %3181, 107
  store i64 %2565, i64* %PC, align 8
  %2566 = load <2 x float>, <2 x float>* %3967, align 1
  %2567 = load <2 x i32>, <2 x i32>* %3968, align 1
  %2568 = inttoptr i64 %2564 to float*
  %2569 = load float, float* %2568, align 4
  %2570 = extractelement <2 x float> %2566, i32 0
  %2571 = fmul float %2570, %2569
  store float %2571, float* %3959, align 1, !tbaa !2451
  %2572 = bitcast <2 x float> %2566 to <2 x i32>
  %2573 = extractelement <2 x i32> %2572, i32 1
  store i32 %2573, i32* %3969, align 1, !tbaa !2451
  %2574 = extractelement <2 x i32> %2567, i32 0
  store i32 %2574, i32* %3970, align 1, !tbaa !2451
  %2575 = extractelement <2 x i32> %2567, i32 1
  store i32 %2575, i32* %3971, align 1, !tbaa !2451
  %2576 = load <2 x float>, <2 x float>* %3972, align 1
  %2577 = load <2 x i32>, <2 x i32>* %3973, align 1
  %2578 = load <2 x float>, <2 x float>* %3967, align 1
  %2579 = extractelement <2 x float> %2576, i32 0
  %2580 = extractelement <2 x float> %2578, i32 0
  %2581 = fadd float %2579, %2580
  store float %2581, float* %3950, align 1, !tbaa !2451
  %2582 = bitcast <2 x float> %2576 to <2 x i32>
  %2583 = extractelement <2 x i32> %2582, i32 1
  store i32 %2583, i32* %3974, align 1, !tbaa !2451
  %2584 = extractelement <2 x i32> %2577, i32 0
  store i32 %2584, i32* %3975, align 1, !tbaa !2451
  %2585 = extractelement <2 x i32> %2577, i32 1
  store i32 %2585, i32* %3976, align 1, !tbaa !2451
  %2586 = load i64, i64* %RBP, align 8
  %2587 = add i64 %2586, -32
  %2588 = add i64 %3181, 115
  store i64 %2588, i64* %PC, align 8
  %2589 = inttoptr i64 %2587 to i64*
  %2590 = load i64, i64* %2589, align 8
  store i64 %2590, i64* %RAX, align 8, !tbaa !2428
  %2591 = add i64 %2586, -44
  %2592 = add i64 %3181, 118
  store i64 %2592, i64* %PC, align 8
  %2593 = inttoptr i64 %2591 to i32*
  %2594 = load i32, i32* %2593, align 4
  %2595 = add i32 %2594, -1
  %2596 = zext i32 %2595 to i64
  store i64 %2596, i64* %RDX, align 8, !tbaa !2428
  %2597 = icmp eq i32 %2594, 0
  %2598 = zext i1 %2597 to i8
  store i8 %2598, i8* %.pre-phi, align 1, !tbaa !2432
  %2599 = and i32 %2595, 255
  %2600 = tail call i32 @llvm.ctpop.i32(i32 %2599) #12
  %2601 = trunc i32 %2600 to i8
  %2602 = and i8 %2601, 1
  %2603 = xor i8 %2602, 1
  store i8 %2603, i8* %.pre-phi42, align 1, !tbaa !2446
  %2604 = xor i32 %2595, %2594
  %2605 = lshr i32 %2604, 4
  %2606 = trunc i32 %2605 to i8
  %2607 = and i8 %2606, 1
  store i8 %2607, i8* %.pre-phi44, align 1, !tbaa !2447
  %2608 = icmp eq i32 %2595, 0
  %2609 = zext i1 %2608 to i8
  store i8 %2609, i8* %.pre-phi46, align 1, !tbaa !2448
  %2610 = lshr i32 %2595, 31
  %2611 = trunc i32 %2610 to i8
  store i8 %2611, i8* %.pre-phi48, align 1, !tbaa !2449
  %2612 = lshr i32 %2594, 31
  %2613 = xor i32 %2610, %2612
  %2614 = add nuw nsw i32 %2613, %2612
  %2615 = icmp eq i32 %2614, 2
  %2616 = zext i1 %2615 to i8
  store i8 %2616, i8* %.pre-phi50, align 1, !tbaa !2450
  %2617 = sext i32 %2595 to i64
  store i64 %2617, i64* %RCX, align 8, !tbaa !2428
  %2618 = shl nsw i64 %2617, 2
  %2619 = add i64 %2590, %2618
  %2620 = add i64 %3181, 129
  store i64 %2620, i64* %PC, align 8
  %2621 = inttoptr i64 %2619 to i32*
  %2622 = load i32, i32* %2621, align 4
  store i32 %2622, i32* %3960, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3962, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3964, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3966, align 1, !tbaa !2451
  %2623 = add i64 %2586, -40
  %2624 = add i64 %3181, 133
  store i64 %2624, i64* %PC, align 8
  %2625 = inttoptr i64 %2623 to i64*
  %2626 = load i64, i64* %2625, align 8
  store i64 %2626, i64* %RAX, align 8, !tbaa !2428
  %2627 = add i64 %2586, -24
  %2628 = add i64 %3181, 136
  store i64 %2628, i64* %PC, align 8
  %2629 = inttoptr i64 %2627 to i32*
  %2630 = load i32, i32* %2629, align 4
  %2631 = zext i32 %2630 to i64
  store i64 %2631, i64* %RDX, align 8, !tbaa !2428
  %2632 = add i64 %3181, 139
  store i64 %2632, i64* %PC, align 8
  %2633 = load i32, i32* %2593, align 4
  %2634 = add i32 %2633, -1
  %2635 = zext i32 %2634 to i64
  store i64 %2635, i64* %RSI, align 8, !tbaa !2428
  %2636 = sext i32 %2630 to i64
  %2637 = sext i32 %2634 to i64
  %2638 = mul nsw i64 %2637, %2636
  %2639 = trunc i64 %2638 to i32
  %2640 = and i64 %2638, 4294967295
  store i64 %2640, i64* %RDX, align 8, !tbaa !2428
  %2641 = shl i64 %2638, 32
  %2642 = ashr exact i64 %2641, 32
  %2643 = icmp ne i64 %2642, %2638
  %2644 = zext i1 %2643 to i8
  store i8 %2644, i8* %.pre-phi, align 1, !tbaa !2432
  %2645 = and i32 %2639, 255
  %2646 = tail call i32 @llvm.ctpop.i32(i32 %2645) #12
  %2647 = trunc i32 %2646 to i8
  %2648 = and i8 %2647, 1
  %2649 = xor i8 %2648, 1
  store i8 %2649, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2650 = lshr i32 %2639, 31
  %2651 = trunc i32 %2650 to i8
  store i8 %2651, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2644, i8* %.pre-phi50, align 1, !tbaa !2450
  %2652 = load i64, i64* %RBP, align 8
  %2653 = add i64 %2652, -48
  %2654 = add i64 %3181, 148
  store i64 %2654, i64* %PC, align 8
  %2655 = trunc i64 %2638 to i32
  %2656 = inttoptr i64 %2653 to i32*
  %2657 = load i32, i32* %2656, align 4
  %2658 = add i32 %2657, %2655
  %2659 = zext i32 %2658 to i64
  store i64 %2659, i64* %RDX, align 8, !tbaa !2428
  %2660 = icmp ult i32 %2658, %2655
  %2661 = icmp ult i32 %2658, %2657
  %2662 = or i1 %2660, %2661
  %2663 = zext i1 %2662 to i8
  store i8 %2663, i8* %.pre-phi, align 1, !tbaa !2432
  %2664 = and i32 %2658, 255
  %2665 = tail call i32 @llvm.ctpop.i32(i32 %2664) #12
  %2666 = trunc i32 %2665 to i8
  %2667 = and i8 %2666, 1
  %2668 = xor i8 %2667, 1
  store i8 %2668, i8* %.pre-phi42, align 1, !tbaa !2446
  %2669 = xor i32 %2657, %2655
  %2670 = xor i32 %2669, %2658
  %2671 = lshr i32 %2670, 4
  %2672 = trunc i32 %2671 to i8
  %2673 = and i8 %2672, 1
  store i8 %2673, i8* %.pre-phi44, align 1, !tbaa !2447
  %2674 = icmp eq i32 %2658, 0
  %2675 = zext i1 %2674 to i8
  store i8 %2675, i8* %.pre-phi46, align 1, !tbaa !2448
  %2676 = lshr i32 %2658, 31
  %2677 = trunc i32 %2676 to i8
  store i8 %2677, i8* %.pre-phi48, align 1, !tbaa !2449
  %2678 = lshr i32 %2655, 31
  %2679 = lshr i32 %2657, 31
  %2680 = xor i32 %2676, %2678
  %2681 = xor i32 %2676, %2679
  %2682 = add nuw nsw i32 %2680, %2681
  %2683 = icmp eq i32 %2682, 2
  %2684 = zext i1 %2683 to i8
  store i8 %2684, i8* %.pre-phi50, align 1, !tbaa !2450
  %2685 = sext i32 %2658 to i64
  store i64 %2685, i64* %RCX, align 8, !tbaa !2428
  %2686 = load i64, i64* %RAX, align 8
  %2687 = shl nsw i64 %2685, 2
  %2688 = add i64 %2686, %2687
  %2689 = add i64 %3181, 156
  store i64 %2689, i64* %PC, align 8
  %2690 = load <2 x float>, <2 x float>* %3967, align 1
  %2691 = load <2 x i32>, <2 x i32>* %3968, align 1
  %2692 = inttoptr i64 %2688 to float*
  %2693 = load float, float* %2692, align 4
  %2694 = extractelement <2 x float> %2690, i32 0
  %2695 = fmul float %2694, %2693
  store float %2695, float* %3959, align 1, !tbaa !2451
  %2696 = bitcast <2 x float> %2690 to <2 x i32>
  %2697 = extractelement <2 x i32> %2696, i32 1
  store i32 %2697, i32* %3969, align 1, !tbaa !2451
  %2698 = extractelement <2 x i32> %2691, i32 0
  store i32 %2698, i32* %3970, align 1, !tbaa !2451
  %2699 = extractelement <2 x i32> %2691, i32 1
  store i32 %2699, i32* %3971, align 1, !tbaa !2451
  %2700 = load <2 x float>, <2 x float>* %3972, align 1
  %2701 = load <2 x i32>, <2 x i32>* %3973, align 1
  %2702 = load <2 x float>, <2 x float>* %3967, align 1
  %2703 = extractelement <2 x float> %2700, i32 0
  %2704 = extractelement <2 x float> %2702, i32 0
  %2705 = fadd float %2703, %2704
  store float %2705, float* %3950, align 1, !tbaa !2451
  %2706 = bitcast <2 x float> %2700 to <2 x i32>
  %2707 = extractelement <2 x i32> %2706, i32 1
  store i32 %2707, i32* %3974, align 1, !tbaa !2451
  %2708 = extractelement <2 x i32> %2701, i32 0
  store i32 %2708, i32* %3975, align 1, !tbaa !2451
  %2709 = extractelement <2 x i32> %2701, i32 1
  store i32 %2709, i32* %3976, align 1, !tbaa !2451
  %2710 = add i64 %2652, -32
  %2711 = add i64 %3181, 164
  store i64 %2711, i64* %PC, align 8
  %2712 = inttoptr i64 %2710 to i64*
  %2713 = load i64, i64* %2712, align 8
  store i64 %2713, i64* %RAX, align 8, !tbaa !2428
  %2714 = add i64 %2652, -44
  %2715 = add i64 %3181, 168
  store i64 %2715, i64* %PC, align 8
  %2716 = inttoptr i64 %2714 to i32*
  %2717 = load i32, i32* %2716, align 4
  %2718 = sext i32 %2717 to i64
  store i64 %2718, i64* %RCX, align 8, !tbaa !2428
  %2719 = shl nsw i64 %2718, 2
  %2720 = add i64 %2719, %2713
  %2721 = add i64 %3181, 173
  store i64 %2721, i64* %PC, align 8
  %2722 = inttoptr i64 %2720 to i32*
  %2723 = load i32, i32* %2722, align 4
  store i32 %2723, i32* %3960, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3962, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3964, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3966, align 1, !tbaa !2451
  %2724 = load i64, i64* %RBP, align 8
  %2725 = add i64 %2724, -40
  %2726 = add i64 %3181, 177
  store i64 %2726, i64* %PC, align 8
  %2727 = inttoptr i64 %2725 to i64*
  %2728 = load i64, i64* %2727, align 8
  store i64 %2728, i64* %RAX, align 8, !tbaa !2428
  %2729 = add i64 %2724, -24
  %2730 = add i64 %3181, 180
  store i64 %2730, i64* %PC, align 8
  %2731 = inttoptr i64 %2729 to i32*
  %2732 = load i32, i32* %2731, align 4
  %2733 = zext i32 %2732 to i64
  store i64 %2733, i64* %RDX, align 8, !tbaa !2428
  %2734 = add i64 %2724, -44
  %2735 = add i64 %3181, 184
  store i64 %2735, i64* %PC, align 8
  %2736 = inttoptr i64 %2734 to i32*
  %2737 = load i32, i32* %2736, align 4
  %2738 = sext i32 %2732 to i64
  %2739 = sext i32 %2737 to i64
  %2740 = mul nsw i64 %2739, %2738
  %2741 = trunc i64 %2740 to i32
  %2742 = and i64 %2740, 4294967295
  store i64 %2742, i64* %RDX, align 8, !tbaa !2428
  %2743 = shl i64 %2740, 32
  %2744 = ashr exact i64 %2743, 32
  %2745 = icmp ne i64 %2744, %2740
  %2746 = zext i1 %2745 to i8
  store i8 %2746, i8* %.pre-phi, align 1, !tbaa !2432
  %2747 = and i32 %2741, 255
  %2748 = tail call i32 @llvm.ctpop.i32(i32 %2747) #12
  %2749 = trunc i32 %2748 to i8
  %2750 = and i8 %2749, 1
  %2751 = xor i8 %2750, 1
  store i8 %2751, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2752 = lshr i32 %2741, 31
  %2753 = trunc i32 %2752 to i8
  store i8 %2753, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2746, i8* %.pre-phi50, align 1, !tbaa !2450
  %2754 = add i64 %2724, -48
  %2755 = add i64 %3181, 187
  store i64 %2755, i64* %PC, align 8
  %2756 = trunc i64 %2740 to i32
  %2757 = inttoptr i64 %2754 to i32*
  %2758 = load i32, i32* %2757, align 4
  %2759 = add i32 %2758, %2756
  %2760 = zext i32 %2759 to i64
  store i64 %2760, i64* %RDX, align 8, !tbaa !2428
  %2761 = icmp ult i32 %2759, %2756
  %2762 = icmp ult i32 %2759, %2758
  %2763 = or i1 %2761, %2762
  %2764 = zext i1 %2763 to i8
  store i8 %2764, i8* %.pre-phi, align 1, !tbaa !2432
  %2765 = and i32 %2759, 255
  %2766 = tail call i32 @llvm.ctpop.i32(i32 %2765) #12
  %2767 = trunc i32 %2766 to i8
  %2768 = and i8 %2767, 1
  %2769 = xor i8 %2768, 1
  store i8 %2769, i8* %.pre-phi42, align 1, !tbaa !2446
  %2770 = xor i32 %2758, %2756
  %2771 = xor i32 %2770, %2759
  %2772 = lshr i32 %2771, 4
  %2773 = trunc i32 %2772 to i8
  %2774 = and i8 %2773, 1
  store i8 %2774, i8* %.pre-phi44, align 1, !tbaa !2447
  %2775 = icmp eq i32 %2759, 0
  %2776 = zext i1 %2775 to i8
  store i8 %2776, i8* %.pre-phi46, align 1, !tbaa !2448
  %2777 = lshr i32 %2759, 31
  %2778 = trunc i32 %2777 to i8
  store i8 %2778, i8* %.pre-phi48, align 1, !tbaa !2449
  %2779 = lshr i32 %2756, 31
  %2780 = lshr i32 %2758, 31
  %2781 = xor i32 %2777, %2779
  %2782 = xor i32 %2777, %2780
  %2783 = add nuw nsw i32 %2781, %2782
  %2784 = icmp eq i32 %2783, 2
  %2785 = zext i1 %2784 to i8
  store i8 %2785, i8* %.pre-phi50, align 1, !tbaa !2450
  %2786 = sext i32 %2759 to i64
  store i64 %2786, i64* %RCX, align 8, !tbaa !2428
  %2787 = shl nsw i64 %2786, 2
  %2788 = add i64 %2728, %2787
  %2789 = add i64 %3181, 195
  store i64 %2789, i64* %PC, align 8
  %2790 = load <2 x float>, <2 x float>* %3967, align 1
  %2791 = load <2 x i32>, <2 x i32>* %3968, align 1
  %2792 = inttoptr i64 %2788 to float*
  %2793 = load float, float* %2792, align 4
  %2794 = extractelement <2 x float> %2790, i32 0
  %2795 = fmul float %2794, %2793
  store float %2795, float* %3959, align 1, !tbaa !2451
  %2796 = bitcast <2 x float> %2790 to <2 x i32>
  %2797 = extractelement <2 x i32> %2796, i32 1
  store i32 %2797, i32* %3969, align 1, !tbaa !2451
  %2798 = extractelement <2 x i32> %2791, i32 0
  store i32 %2798, i32* %3970, align 1, !tbaa !2451
  %2799 = extractelement <2 x i32> %2791, i32 1
  store i32 %2799, i32* %3971, align 1, !tbaa !2451
  %2800 = load <2 x float>, <2 x float>* %3972, align 1
  %2801 = load <2 x i32>, <2 x i32>* %3973, align 1
  %2802 = load <2 x float>, <2 x float>* %3967, align 1
  %2803 = extractelement <2 x float> %2800, i32 0
  %2804 = extractelement <2 x float> %2802, i32 0
  %2805 = fadd float %2803, %2804
  store float %2805, float* %3950, align 1, !tbaa !2451
  %2806 = bitcast <2 x float> %2800 to <2 x i32>
  %2807 = extractelement <2 x i32> %2806, i32 1
  store i32 %2807, i32* %3974, align 1, !tbaa !2451
  %2808 = extractelement <2 x i32> %2801, i32 0
  store i32 %2808, i32* %3975, align 1, !tbaa !2451
  %2809 = extractelement <2 x i32> %2801, i32 1
  store i32 %2809, i32* %3976, align 1, !tbaa !2451
  %2810 = load i64, i64* %RBP, align 8
  %2811 = add i64 %2810, -16
  %2812 = add i64 %3181, 203
  store i64 %2812, i64* %PC, align 8
  %2813 = inttoptr i64 %2811 to i64*
  %2814 = load i64, i64* %2813, align 8
  store i64 %2814, i64* %RAX, align 8, !tbaa !2428
  %2815 = add i64 %2810, -48
  %2816 = add i64 %3181, 207
  store i64 %2816, i64* %PC, align 8
  %2817 = inttoptr i64 %2815 to i32*
  %2818 = load i32, i32* %2817, align 4
  %2819 = sext i32 %2818 to i64
  store i64 %2819, i64* %RCX, align 8, !tbaa !2428
  %2820 = shl nsw i64 %2819, 2
  %2821 = add i64 %2820, %2814
  %2822 = add i64 %3181, 212
  store i64 %2822, i64* %PC, align 8
  %2823 = load <2 x float>, <2 x float>* %3972, align 1
  %2824 = extractelement <2 x float> %2823, i32 0
  %2825 = inttoptr i64 %2821 to float*
  store float %2824, float* %2825, align 4
  %2826 = load i64, i64* %RBP, align 8
  %2827 = add i64 %2826, -48
  %2828 = load i64, i64* %PC, align 8
  %2829 = add i64 %2828, 3
  store i64 %2829, i64* %PC, align 8
  %2830 = inttoptr i64 %2827 to i32*
  %2831 = load i32, i32* %2830, align 4
  %2832 = add i32 %2831, 1
  %2833 = zext i32 %2832 to i64
  store i64 %2833, i64* %RAX, align 8, !tbaa !2428
  %2834 = icmp eq i32 %2831, -1
  %2835 = icmp eq i32 %2832, 0
  %2836 = or i1 %2834, %2835
  %2837 = zext i1 %2836 to i8
  store i8 %2837, i8* %.pre-phi, align 1, !tbaa !2432
  %2838 = and i32 %2832, 255
  %2839 = tail call i32 @llvm.ctpop.i32(i32 %2838) #12
  %2840 = trunc i32 %2839 to i8
  %2841 = and i8 %2840, 1
  %2842 = xor i8 %2841, 1
  store i8 %2842, i8* %.pre-phi42, align 1, !tbaa !2446
  %2843 = xor i32 %2832, %2831
  %2844 = lshr i32 %2843, 4
  %2845 = trunc i32 %2844 to i8
  %2846 = and i8 %2845, 1
  store i8 %2846, i8* %.pre-phi44, align 1, !tbaa !2447
  %2847 = zext i1 %2835 to i8
  store i8 %2847, i8* %.pre-phi46, align 1, !tbaa !2448
  %2848 = lshr i32 %2832, 31
  %2849 = trunc i32 %2848 to i8
  store i8 %2849, i8* %.pre-phi48, align 1, !tbaa !2449
  %2850 = lshr i32 %2831, 31
  %2851 = xor i32 %2848, %2850
  %2852 = add nuw nsw i32 %2851, %2848
  %2853 = icmp eq i32 %2852, 2
  %2854 = zext i1 %2853 to i8
  store i8 %2854, i8* %.pre-phi50, align 1, !tbaa !2450
  %2855 = add i64 %2828, 9
  store i64 %2855, i64* %PC, align 8
  store i32 %2832, i32* %2830, align 4
  %2856 = load i64, i64* %PC, align 8
  %2857 = add i64 %2856, -233
  store i64 %2857, i64* %PC, align 8, !tbaa !2428
  br label %block_40215a

block_402064:                                     ; preds = %block_402009
  %2858 = add i64 %2970, 5
  store i64 %2858, i64* %PC, align 8, !tbaa !2428
  br label %block_402069

block_402248:                                     ; preds = %block_40215a
  %2859 = add i64 %3181, 5
  store i64 %2859, i64* %PC, align 8, !tbaa !2428
  br label %block_40224d

block_40224d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_402248
  %2860 = phi i64 [ %3638, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %3145, %block_402248 ]
  %2861 = phi i64 [ %3667, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %2859, %block_402248 ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %2862 = add i64 %2860, -20
  %2863 = add i64 %2861, 8
  store i64 %2863, i64* %PC, align 8
  %2864 = inttoptr i64 %2862 to i32*
  %2865 = load i32, i32* %2864, align 4
  %2866 = zext i32 %2865 to i64
  store i64 %2866, i64* %RCX, align 8, !tbaa !2428
  %2867 = add i64 %2860, -68
  %2868 = add i64 %2861, 11
  store i64 %2868, i64* %PC, align 8
  %2869 = inttoptr i64 %2867 to i32*
  store i32 16, i32* %2869, align 4
  %2870 = load i32, i32* %ECX, align 4
  %2871 = zext i32 %2870 to i64
  %2872 = load i64, i64* %PC, align 8
  store i64 %2871, i64* %RAX, align 8, !tbaa !2428
  %2873 = sext i32 %2870 to i64
  %2874 = lshr i64 %2873, 32
  store i64 %2874, i64* %64, align 8, !tbaa !2428
  %2875 = load i64, i64* %RBP, align 8
  %2876 = add i64 %2875, -68
  %2877 = add i64 %2872, 6
  store i64 %2877, i64* %PC, align 8
  %2878 = inttoptr i64 %2876 to i32*
  %2879 = load i32, i32* %2878, align 4
  %2880 = zext i32 %2879 to i64
  store i64 %2880, i64* %RCX, align 8, !tbaa !2428
  %2881 = add i64 %2872, 8
  store i64 %2881, i64* %PC, align 8
  %2882 = sext i32 %2879 to i64
  %2883 = shl nuw i64 %2874, 32
  %2884 = or i64 %2883, %2871
  %2885 = sdiv i64 %2884, %2882
  %2886 = shl i64 %2885, 32
  %2887 = ashr exact i64 %2886, 32
  %2888 = icmp eq i64 %2885, %2887
  br i1 %2888, label %2891, label %2889

; <label>:2889:                                   ; preds = %block_40224d
  %2890 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2881, %struct.Memory* %3634) #13
  %.pre31 = load i64, i64* %RBP, align 8
  %.pre32 = load i32, i32* %EDX, align 4
  %.pre33 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:2891:                                   ; preds = %block_40224d
  %2892 = srem i64 %2884, %2882
  %2893 = and i64 %2885, 4294967295
  store i64 %2893, i64* %RAX, align 8, !tbaa !2428
  %2894 = and i64 %2892, 4294967295
  store i64 %2894, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi50, align 1, !tbaa !2450
  %2895 = trunc i64 %2892 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %2891, %2889
  %2896 = phi i64 [ %.pre33, %2889 ], [ %2881, %2891 ]
  %2897 = phi i32 [ %.pre32, %2889 ], [ %2895, %2891 ]
  %2898 = phi i64 [ %.pre31, %2889 ], [ %2875, %2891 ]
  %2899 = phi %struct.Memory* [ %2890, %2889 ], [ %3634, %2891 ]
  %2900 = add i64 %2898, -44
  %2901 = add i64 %2896, 3
  store i64 %2901, i64* %PC, align 8
  %2902 = inttoptr i64 %2900 to i32*
  store i32 %2897, i32* %2902, align 4
  %2903 = load i64, i64* %RBP, align 8
  %2904 = add i64 %2903, -44
  %2905 = load i64, i64* %PC, align 8
  %2906 = add i64 %2905, 4
  store i64 %2906, i64* %PC, align 8
  %2907 = inttoptr i64 %2904 to i32*
  %2908 = load i32, i32* %2907, align 4
  %2909 = add i32 %2908, -8
  %2910 = icmp ult i32 %2908, 8
  %2911 = zext i1 %2910 to i8
  store i8 %2911, i8* %.pre-phi, align 1, !tbaa !2432
  %2912 = and i32 %2909, 255
  %2913 = tail call i32 @llvm.ctpop.i32(i32 %2912) #12
  %2914 = trunc i32 %2913 to i8
  %2915 = and i8 %2914, 1
  %2916 = xor i8 %2915, 1
  store i8 %2916, i8* %.pre-phi42, align 1, !tbaa !2446
  %2917 = xor i32 %2909, %2908
  %2918 = lshr i32 %2917, 4
  %2919 = trunc i32 %2918 to i8
  %2920 = and i8 %2919, 1
  store i8 %2920, i8* %.pre-phi44, align 1, !tbaa !2447
  %2921 = icmp eq i32 %2909, 0
  %2922 = zext i1 %2921 to i8
  store i8 %2922, i8* %.pre-phi46, align 1, !tbaa !2448
  %2923 = lshr i32 %2909, 31
  %2924 = trunc i32 %2923 to i8
  store i8 %2924, i8* %.pre-phi48, align 1, !tbaa !2449
  %2925 = lshr i32 %2908, 31
  %2926 = xor i32 %2923, %2925
  %2927 = add nuw nsw i32 %2926, %2925
  %2928 = icmp eq i32 %2927, 2
  %2929 = zext i1 %2928 to i8
  store i8 %2929, i8* %.pre-phi50, align 1, !tbaa !2450
  %2930 = icmp ne i8 %2924, 0
  %2931 = xor i1 %2930, %2928
  %.v57 = select i1 %2931, i64 465, i64 10
  %2932 = add i64 %2905, %.v57
  store i64 %2932, i64* %PC, align 8, !tbaa !2428
  br i1 %2931, label %block_402434, label %block_40226d

block_402009:                                     ; preds = %block_402015, %block_401ff9
  %2933 = phi i64 [ %3918, %block_402015 ], [ %.pre22, %block_401ff9 ]
  %2934 = load i64, i64* %RBP, align 8
  %2935 = add i64 %2934, -48
  %2936 = add i64 %2933, 3
  store i64 %2936, i64* %PC, align 8
  %2937 = inttoptr i64 %2935 to i32*
  %2938 = load i32, i32* %2937, align 4
  %2939 = zext i32 %2938 to i64
  store i64 %2939, i64* %RAX, align 8, !tbaa !2428
  %2940 = add i64 %2934, -4
  %2941 = add i64 %2933, 6
  store i64 %2941, i64* %PC, align 8
  %2942 = inttoptr i64 %2940 to i32*
  %2943 = load i32, i32* %2942, align 4
  %2944 = sub i32 %2938, %2943
  %2945 = icmp ult i32 %2938, %2943
  %2946 = zext i1 %2945 to i8
  store i8 %2946, i8* %.pre-phi, align 1, !tbaa !2432
  %2947 = and i32 %2944, 255
  %2948 = tail call i32 @llvm.ctpop.i32(i32 %2947) #12
  %2949 = trunc i32 %2948 to i8
  %2950 = and i8 %2949, 1
  %2951 = xor i8 %2950, 1
  store i8 %2951, i8* %.pre-phi42, align 1, !tbaa !2446
  %2952 = xor i32 %2943, %2938
  %2953 = xor i32 %2952, %2944
  %2954 = lshr i32 %2953, 4
  %2955 = trunc i32 %2954 to i8
  %2956 = and i8 %2955, 1
  store i8 %2956, i8* %.pre-phi44, align 1, !tbaa !2447
  %2957 = icmp eq i32 %2944, 0
  %2958 = zext i1 %2957 to i8
  store i8 %2958, i8* %.pre-phi46, align 1, !tbaa !2448
  %2959 = lshr i32 %2944, 31
  %2960 = trunc i32 %2959 to i8
  store i8 %2960, i8* %.pre-phi48, align 1, !tbaa !2449
  %2961 = lshr i32 %2938, 31
  %2962 = lshr i32 %2943, 31
  %2963 = xor i32 %2962, %2961
  %2964 = xor i32 %2959, %2961
  %2965 = add nuw nsw i32 %2964, %2963
  %2966 = icmp eq i32 %2965, 2
  %2967 = zext i1 %2966 to i8
  store i8 %2967, i8* %.pre-phi50, align 1, !tbaa !2450
  %2968 = icmp ne i8 %2960, 0
  %2969 = xor i1 %2968, %2966
  %.v52 = select i1 %2969, i64 12, i64 91
  %2970 = add i64 %2933, %.v52
  store i64 %2970, i64* %PC, align 8, !tbaa !2428
  br i1 %2969, label %block_402015, label %block_402064

block_4027b6:                                     ; preds = %block_402456
  %2971 = add i64 %3594, 1
  store i64 %2971, i64* %PC, align 8
  %2972 = load i64, i64* %11, align 8, !tbaa !2428
  %2973 = add i64 %2972, 8
  %2974 = inttoptr i64 %2972 to i64*
  %2975 = load i64, i64* %2974, align 8
  store i64 %2975, i64* %RBP, align 8, !tbaa !2428
  store i64 %2973, i64* %11, align 8, !tbaa !2428
  %2976 = add i64 %3594, 2
  store i64 %2976, i64* %PC, align 8
  %2977 = inttoptr i64 %2973 to i64*
  %2978 = load i64, i64* %2977, align 8
  store i64 %2978, i64* %PC, align 8, !tbaa !2428
  %2979 = add i64 %2972, 16
  store i64 %2979, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %3019

block_402125:                                     ; preds = %block_402099
  %2980 = add i64 %3705, 5
  store i64 %2980, i64* %PC, align 8, !tbaa !2428
  br label %block_40212a

block_402434:                                     ; preds = %block_40242f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %2981 = phi i64 [ %132, %block_40242f ], [ %2903, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  %2982 = phi i64 [ %3182, %block_40242f ], [ %2932, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %2983 = add i64 %2981, -20
  %2984 = add i64 %2982, 8
  store i64 %2984, i64* %PC, align 8
  %2985 = inttoptr i64 %2983 to i32*
  %2986 = load i32, i32* %2985, align 4
  %2987 = zext i32 %2986 to i64
  store i64 %2987, i64* %RCX, align 8, !tbaa !2428
  %2988 = add i64 %2981, -72
  %2989 = add i64 %2982, 11
  store i64 %2989, i64* %PC, align 8
  %2990 = inttoptr i64 %2988 to i32*
  store i32 16, i32* %2990, align 4
  %2991 = load i32, i32* %ECX, align 4
  %2992 = zext i32 %2991 to i64
  %2993 = load i64, i64* %PC, align 8
  store i64 %2992, i64* %RAX, align 8, !tbaa !2428
  %2994 = sext i32 %2991 to i64
  %2995 = lshr i64 %2994, 32
  store i64 %2995, i64* %64, align 8, !tbaa !2428
  %2996 = load i64, i64* %RBP, align 8
  %2997 = add i64 %2996, -72
  %2998 = add i64 %2993, 6
  store i64 %2998, i64* %PC, align 8
  %2999 = inttoptr i64 %2997 to i32*
  %3000 = load i32, i32* %2999, align 4
  %3001 = zext i32 %3000 to i64
  store i64 %3001, i64* %RCX, align 8, !tbaa !2428
  %3002 = add i64 %2993, 8
  store i64 %3002, i64* %PC, align 8
  %3003 = sext i32 %3000 to i64
  %3004 = shl nuw i64 %2995, 32
  %3005 = or i64 %3004, %2992
  %3006 = sdiv i64 %3005, %3003
  %3007 = shl i64 %3006, 32
  %3008 = ashr exact i64 %3007, 32
  %3009 = icmp eq i64 %3006, %3008
  br i1 %3009, label %3012, label %3010

; <label>:3010:                                   ; preds = %block_402434
  %3011 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3002, %struct.Memory* %2899) #13
  %.pre35 = load i64, i64* %RDX, align 8
  %.pre36 = load i64, i64* %PC, align 8
  %.pre37 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:3012:                                   ; preds = %block_402434
  %3013 = srem i64 %3005, %3003
  %3014 = and i64 %3006, 4294967295
  store i64 %3014, i64* %RAX, align 8, !tbaa !2428
  %3015 = and i64 %3013, 4294967295
  store i64 %3015, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi50, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %3012, %3010
  %3016 = phi i64 [ %.pre37, %3010 ], [ %2996, %3012 ]
  %3017 = phi i64 [ %.pre36, %3010 ], [ %3002, %3012 ]
  %3018 = phi i64 [ %.pre35, %3010 ], [ %3015, %3012 ]
  %3019 = phi %struct.Memory* [ %3011, %3010 ], [ %2899, %3012 ]
  %3020 = trunc i64 %3018 to i32
  %3021 = add i32 %3020, 16
  %3022 = zext i32 %3021 to i64
  store i64 %3022, i64* %RDX, align 8, !tbaa !2428
  %3023 = icmp ugt i32 %3020, -17
  %3024 = zext i1 %3023 to i8
  store i8 %3024, i8* %.pre-phi, align 1, !tbaa !2432
  %3025 = and i32 %3021, 255
  %3026 = tail call i32 @llvm.ctpop.i32(i32 %3025) #12
  %3027 = trunc i32 %3026 to i8
  %3028 = and i8 %3027, 1
  %3029 = xor i8 %3028, 1
  store i8 %3029, i8* %.pre-phi42, align 1, !tbaa !2446
  %3030 = xor i32 %3020, 16
  %3031 = xor i32 %3030, %3021
  %3032 = lshr i32 %3031, 4
  %3033 = trunc i32 %3032 to i8
  %3034 = and i8 %3033, 1
  store i8 %3034, i8* %.pre-phi44, align 1, !tbaa !2447
  %3035 = icmp eq i32 %3021, 0
  %3036 = zext i1 %3035 to i8
  store i8 %3036, i8* %.pre-phi46, align 1, !tbaa !2448
  %3037 = lshr i32 %3021, 31
  %3038 = trunc i32 %3037 to i8
  store i8 %3038, i8* %.pre-phi48, align 1, !tbaa !2449
  %3039 = lshr i32 %3020, 31
  %3040 = xor i32 %3037, %3039
  %3041 = add nuw nsw i32 %3040, %3037
  %3042 = icmp eq i32 %3041, 2
  %3043 = zext i1 %3042 to i8
  store i8 %3043, i8* %.pre-phi50, align 1, !tbaa !2450
  %3044 = add i64 %3016, -52
  %3045 = add i64 %3017, 6
  store i64 %3045, i64* %PC, align 8
  %3046 = inttoptr i64 %3044 to i32*
  store i32 %3021, i32* %3046, align 4
  %3047 = load i64, i64* %RBP, align 8
  %3048 = add i64 %3047, -52
  %3049 = load i64, i64* %PC, align 8
  %3050 = add i64 %3049, 3
  store i64 %3050, i64* %PC, align 8
  %3051 = inttoptr i64 %3048 to i32*
  %3052 = load i32, i32* %3051, align 4
  %3053 = add i32 %3052, -1
  %3054 = zext i32 %3053 to i64
  store i64 %3054, i64* %RDX, align 8, !tbaa !2428
  %3055 = icmp eq i32 %3052, 0
  %3056 = zext i1 %3055 to i8
  store i8 %3056, i8* %.pre-phi, align 1, !tbaa !2432
  %3057 = and i32 %3053, 255
  %3058 = tail call i32 @llvm.ctpop.i32(i32 %3057) #12
  %3059 = trunc i32 %3058 to i8
  %3060 = and i8 %3059, 1
  %3061 = xor i8 %3060, 1
  store i8 %3061, i8* %.pre-phi42, align 1, !tbaa !2446
  %3062 = xor i32 %3053, %3052
  %3063 = lshr i32 %3062, 4
  %3064 = trunc i32 %3063 to i8
  %3065 = and i8 %3064, 1
  store i8 %3065, i8* %.pre-phi44, align 1, !tbaa !2447
  %3066 = icmp eq i32 %3053, 0
  %3067 = zext i1 %3066 to i8
  store i8 %3067, i8* %.pre-phi46, align 1, !tbaa !2448
  %3068 = lshr i32 %3053, 31
  %3069 = trunc i32 %3068 to i8
  store i8 %3069, i8* %.pre-phi48, align 1, !tbaa !2449
  %3070 = lshr i32 %3052, 31
  %3071 = xor i32 %3068, %3070
  %3072 = add nuw nsw i32 %3071, %3070
  %3073 = icmp eq i32 %3072, 2
  %3074 = zext i1 %3073 to i8
  store i8 %3074, i8* %.pre-phi50, align 1, !tbaa !2450
  %3075 = add i64 %3047, -44
  %3076 = add i64 %3049, 9
  store i64 %3076, i64* %PC, align 8
  %3077 = inttoptr i64 %3075 to i32*
  store i32 %3053, i32* %3077, align 4
  %3078 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %3079 = bitcast [32 x %union.VectorReg]* %7 to float*
  %3080 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %3081 = getelementptr inbounds i8, i8* %3078, i64 4
  %3082 = bitcast i8* %3081 to float*
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3084 = bitcast i64* %3083 to float*
  %3085 = getelementptr inbounds i8, i8* %3078, i64 12
  %3086 = bitcast i8* %3085 to float*
  %3087 = bitcast %union.VectorReg* %8 to i8*
  %3088 = bitcast %union.VectorReg* %8 to float*
  %3089 = bitcast %union.VectorReg* %8 to i32*
  %3090 = getelementptr inbounds i8, i8* %3087, i64 4
  %3091 = bitcast i8* %3090 to float*
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %3093 = bitcast i64* %3092 to float*
  %3094 = getelementptr inbounds i8, i8* %3087, i64 12
  %3095 = bitcast i8* %3094 to float*
  %3096 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3097 = bitcast i64* %3092 to <2 x i32>*
  %3098 = bitcast i8* %3090 to i32*
  %3099 = bitcast i64* %3092 to i32*
  %3100 = bitcast i8* %3094 to i32*
  %3101 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %3102 = bitcast i64* %3083 to <2 x i32>*
  %3103 = bitcast i8* %3081 to i32*
  %3104 = bitcast i64* %3083 to i32*
  %3105 = bitcast i8* %3085 to i32*
  %.pre38 = load i64, i64* %PC, align 8
  br label %block_402456

block_402469:                                     ; preds = %block_402462, %block_402475
  %3106 = phi i64 [ %.pre39, %block_402462 ], [ %2325, %block_402475 ]
  %3107 = load i64, i64* %RBP, align 8
  %3108 = add i64 %3107, -48
  %3109 = add i64 %3106, 3
  store i64 %3109, i64* %PC, align 8
  %3110 = inttoptr i64 %3108 to i32*
  %3111 = load i32, i32* %3110, align 4
  %3112 = zext i32 %3111 to i64
  store i64 %3112, i64* %RAX, align 8, !tbaa !2428
  %3113 = add i64 %3107, -4
  %3114 = add i64 %3106, 6
  store i64 %3114, i64* %PC, align 8
  %3115 = inttoptr i64 %3113 to i32*
  %3116 = load i32, i32* %3115, align 4
  %3117 = sub i32 %3111, %3116
  %3118 = icmp ult i32 %3111, %3116
  %3119 = zext i1 %3118 to i8
  store i8 %3119, i8* %.pre-phi, align 1, !tbaa !2432
  %3120 = and i32 %3117, 255
  %3121 = tail call i32 @llvm.ctpop.i32(i32 %3120) #12
  %3122 = trunc i32 %3121 to i8
  %3123 = and i8 %3122, 1
  %3124 = xor i8 %3123, 1
  store i8 %3124, i8* %.pre-phi42, align 1, !tbaa !2446
  %3125 = xor i32 %3116, %3111
  %3126 = xor i32 %3125, %3117
  %3127 = lshr i32 %3126, 4
  %3128 = trunc i32 %3127 to i8
  %3129 = and i8 %3128, 1
  store i8 %3129, i8* %.pre-phi44, align 1, !tbaa !2447
  %3130 = icmp eq i32 %3117, 0
  %3131 = zext i1 %3130 to i8
  store i8 %3131, i8* %.pre-phi46, align 1, !tbaa !2448
  %3132 = lshr i32 %3117, 31
  %3133 = trunc i32 %3132 to i8
  store i8 %3133, i8* %.pre-phi48, align 1, !tbaa !2449
  %3134 = lshr i32 %3111, 31
  %3135 = lshr i32 %3116, 31
  %3136 = xor i32 %3135, %3134
  %3137 = xor i32 %3132, %3134
  %3138 = add nuw nsw i32 %3137, %3136
  %3139 = icmp eq i32 %3138, 2
  %3140 = zext i1 %3139 to i8
  store i8 %3140, i8* %.pre-phi50, align 1, !tbaa !2450
  %3141 = icmp ne i8 %3133, 0
  %3142 = xor i1 %3141, %3139
  %.v = select i1 %3142, i64 12, i64 826
  %3143 = add i64 %3106, %.v
  store i64 %3143, i64* %PC, align 8, !tbaa !2428
  br i1 %3142, label %block_402475, label %block_4027a3

block_40215a:                                     ; preds = %block_40214a, %block_402166
  %3144 = phi i64 [ %.pre30, %block_40214a ], [ %2857, %block_402166 ]
  %3145 = load i64, i64* %RBP, align 8
  %3146 = add i64 %3145, -48
  %3147 = add i64 %3144, 3
  store i64 %3147, i64* %PC, align 8
  %3148 = inttoptr i64 %3146 to i32*
  %3149 = load i32, i32* %3148, align 4
  %3150 = zext i32 %3149 to i64
  store i64 %3150, i64* %RAX, align 8, !tbaa !2428
  %3151 = add i64 %3145, -4
  %3152 = add i64 %3144, 6
  store i64 %3152, i64* %PC, align 8
  %3153 = inttoptr i64 %3151 to i32*
  %3154 = load i32, i32* %3153, align 4
  %3155 = sub i32 %3149, %3154
  %3156 = icmp ult i32 %3149, %3154
  %3157 = zext i1 %3156 to i8
  store i8 %3157, i8* %.pre-phi, align 1, !tbaa !2432
  %3158 = and i32 %3155, 255
  %3159 = tail call i32 @llvm.ctpop.i32(i32 %3158) #12
  %3160 = trunc i32 %3159 to i8
  %3161 = and i8 %3160, 1
  %3162 = xor i8 %3161, 1
  store i8 %3162, i8* %.pre-phi42, align 1, !tbaa !2446
  %3163 = xor i32 %3154, %3149
  %3164 = xor i32 %3163, %3155
  %3165 = lshr i32 %3164, 4
  %3166 = trunc i32 %3165 to i8
  %3167 = and i8 %3166, 1
  store i8 %3167, i8* %.pre-phi44, align 1, !tbaa !2447
  %3168 = icmp eq i32 %3155, 0
  %3169 = zext i1 %3168 to i8
  store i8 %3169, i8* %.pre-phi46, align 1, !tbaa !2448
  %3170 = lshr i32 %3155, 31
  %3171 = trunc i32 %3170 to i8
  store i8 %3171, i8* %.pre-phi48, align 1, !tbaa !2449
  %3172 = lshr i32 %3149, 31
  %3173 = lshr i32 %3154, 31
  %3174 = xor i32 %3173, %3172
  %3175 = xor i32 %3170, %3172
  %3176 = add nuw nsw i32 %3175, %3174
  %3177 = icmp eq i32 %3176, 2
  %3178 = zext i1 %3177 to i8
  store i8 %3178, i8* %.pre-phi50, align 1, !tbaa !2450
  %3179 = icmp ne i8 %3171, 0
  %3180 = xor i1 %3179, %3177
  %.v56 = select i1 %3180, i64 12, i64 238
  %3181 = add i64 %3144, %.v56
  store i64 %3181, i64* %PC, align 8, !tbaa !2428
  br i1 %3180, label %block_402166, label %block_402248

block_40242f:                                     ; preds = %block_40227d
  %3182 = add i64 %168, 5
  store i64 %3182, i64* %PC, align 8, !tbaa !2428
  br label %block_402434

block_402462:                                     ; preds = %block_402456
  %3183 = add i64 %3558, -48
  %3184 = add i64 %3594, 7
  store i64 %3184, i64* %PC, align 8
  %3185 = inttoptr i64 %3183 to i32*
  store i32 0, i32* %3185, align 4
  %.pre39 = load i64, i64* %PC, align 8
  br label %block_402469

block_4020a5:                                     ; preds = %block_402099
  %3186 = add i64 %3669, -16
  %3187 = add i64 %3705, 4
  store i64 %3187, i64* %PC, align 8
  %3188 = inttoptr i64 %3186 to i64*
  %3189 = load i64, i64* %3188, align 8
  store i64 %3189, i64* %RAX, align 8, !tbaa !2428
  %3190 = add i64 %3705, 8
  store i64 %3190, i64* %PC, align 8
  %3191 = load i32, i32* %3672, align 4
  %3192 = sext i32 %3191 to i64
  store i64 %3192, i64* %RCX, align 8, !tbaa !2428
  %3193 = shl nsw i64 %3192, 2
  %3194 = add i64 %3193, %3189
  %3195 = add i64 %3705, 13
  store i64 %3195, i64* %PC, align 8
  %3196 = inttoptr i64 %3194 to i32*
  %3197 = load i32, i32* %3196, align 4
  store i32 %3197, i32* %3738, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3740, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3742, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3744, align 1, !tbaa !2451
  %3198 = add i64 %3669, -32
  %3199 = add i64 %3705, 17
  store i64 %3199, i64* %PC, align 8
  %3200 = inttoptr i64 %3198 to i64*
  %3201 = load i64, i64* %3200, align 8
  store i64 %3201, i64* %RAX, align 8, !tbaa !2428
  %3202 = add i64 %3669, -44
  %3203 = add i64 %3705, 20
  store i64 %3203, i64* %PC, align 8
  %3204 = inttoptr i64 %3202 to i32*
  %3205 = load i32, i32* %3204, align 4
  %3206 = add i32 %3205, -1
  %3207 = zext i32 %3206 to i64
  store i64 %3207, i64* %RDX, align 8, !tbaa !2428
  %3208 = icmp eq i32 %3205, 0
  %3209 = zext i1 %3208 to i8
  store i8 %3209, i8* %.pre-phi, align 1, !tbaa !2432
  %3210 = and i32 %3206, 255
  %3211 = tail call i32 @llvm.ctpop.i32(i32 %3210) #12
  %3212 = trunc i32 %3211 to i8
  %3213 = and i8 %3212, 1
  %3214 = xor i8 %3213, 1
  store i8 %3214, i8* %.pre-phi42, align 1, !tbaa !2446
  %3215 = xor i32 %3206, %3205
  %3216 = lshr i32 %3215, 4
  %3217 = trunc i32 %3216 to i8
  %3218 = and i8 %3217, 1
  store i8 %3218, i8* %.pre-phi44, align 1, !tbaa !2447
  %3219 = icmp eq i32 %3206, 0
  %3220 = zext i1 %3219 to i8
  store i8 %3220, i8* %.pre-phi46, align 1, !tbaa !2448
  %3221 = lshr i32 %3206, 31
  %3222 = trunc i32 %3221 to i8
  store i8 %3222, i8* %.pre-phi48, align 1, !tbaa !2449
  %3223 = lshr i32 %3205, 31
  %3224 = xor i32 %3221, %3223
  %3225 = add nuw nsw i32 %3224, %3223
  %3226 = icmp eq i32 %3225, 2
  %3227 = zext i1 %3226 to i8
  store i8 %3227, i8* %.pre-phi50, align 1, !tbaa !2450
  %3228 = sext i32 %3206 to i64
  store i64 %3228, i64* %RCX, align 8, !tbaa !2428
  %3229 = shl nsw i64 %3228, 2
  %3230 = add i64 %3201, %3229
  %3231 = add i64 %3705, 31
  store i64 %3231, i64* %PC, align 8
  %3232 = inttoptr i64 %3230 to i32*
  %3233 = load i32, i32* %3232, align 4
  store i32 %3233, i32* %3747, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3749, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3751, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3753, align 1, !tbaa !2451
  %3234 = add i64 %3669, -40
  %3235 = add i64 %3705, 35
  store i64 %3235, i64* %PC, align 8
  %3236 = inttoptr i64 %3234 to i64*
  %3237 = load i64, i64* %3236, align 8
  store i64 %3237, i64* %RAX, align 8, !tbaa !2428
  %3238 = add i64 %3669, -24
  %3239 = add i64 %3705, 38
  store i64 %3239, i64* %PC, align 8
  %3240 = inttoptr i64 %3238 to i32*
  %3241 = load i32, i32* %3240, align 4
  %3242 = zext i32 %3241 to i64
  store i64 %3242, i64* %RDX, align 8, !tbaa !2428
  %3243 = add i64 %3705, 41
  store i64 %3243, i64* %PC, align 8
  %3244 = load i32, i32* %3204, align 4
  %3245 = add i32 %3244, -1
  %3246 = zext i32 %3245 to i64
  store i64 %3246, i64* %RSI, align 8, !tbaa !2428
  %3247 = sext i32 %3241 to i64
  %3248 = sext i32 %3245 to i64
  %3249 = mul nsw i64 %3248, %3247
  %3250 = trunc i64 %3249 to i32
  %3251 = and i64 %3249, 4294967295
  store i64 %3251, i64* %RDX, align 8, !tbaa !2428
  %3252 = shl i64 %3249, 32
  %3253 = ashr exact i64 %3252, 32
  %3254 = icmp ne i64 %3253, %3249
  %3255 = zext i1 %3254 to i8
  store i8 %3255, i8* %.pre-phi, align 1, !tbaa !2432
  %3256 = and i32 %3250, 255
  %3257 = tail call i32 @llvm.ctpop.i32(i32 %3256) #12
  %3258 = trunc i32 %3257 to i8
  %3259 = and i8 %3258, 1
  %3260 = xor i8 %3259, 1
  store i8 %3260, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3261 = lshr i32 %3250, 31
  %3262 = trunc i32 %3261 to i8
  store i8 %3262, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3255, i8* %.pre-phi50, align 1, !tbaa !2450
  %3263 = load i64, i64* %RBP, align 8
  %3264 = add i64 %3263, -48
  %3265 = add i64 %3705, 50
  store i64 %3265, i64* %PC, align 8
  %3266 = trunc i64 %3249 to i32
  %3267 = inttoptr i64 %3264 to i32*
  %3268 = load i32, i32* %3267, align 4
  %3269 = add i32 %3268, %3266
  %3270 = zext i32 %3269 to i64
  store i64 %3270, i64* %RDX, align 8, !tbaa !2428
  %3271 = icmp ult i32 %3269, %3266
  %3272 = icmp ult i32 %3269, %3268
  %3273 = or i1 %3271, %3272
  %3274 = zext i1 %3273 to i8
  store i8 %3274, i8* %.pre-phi, align 1, !tbaa !2432
  %3275 = and i32 %3269, 255
  %3276 = tail call i32 @llvm.ctpop.i32(i32 %3275) #12
  %3277 = trunc i32 %3276 to i8
  %3278 = and i8 %3277, 1
  %3279 = xor i8 %3278, 1
  store i8 %3279, i8* %.pre-phi42, align 1, !tbaa !2446
  %3280 = xor i32 %3268, %3266
  %3281 = xor i32 %3280, %3269
  %3282 = lshr i32 %3281, 4
  %3283 = trunc i32 %3282 to i8
  %3284 = and i8 %3283, 1
  store i8 %3284, i8* %.pre-phi44, align 1, !tbaa !2447
  %3285 = icmp eq i32 %3269, 0
  %3286 = zext i1 %3285 to i8
  store i8 %3286, i8* %.pre-phi46, align 1, !tbaa !2448
  %3287 = lshr i32 %3269, 31
  %3288 = trunc i32 %3287 to i8
  store i8 %3288, i8* %.pre-phi48, align 1, !tbaa !2449
  %3289 = lshr i32 %3266, 31
  %3290 = lshr i32 %3268, 31
  %3291 = xor i32 %3287, %3289
  %3292 = xor i32 %3287, %3290
  %3293 = add nuw nsw i32 %3291, %3292
  %3294 = icmp eq i32 %3293, 2
  %3295 = zext i1 %3294 to i8
  store i8 %3295, i8* %.pre-phi50, align 1, !tbaa !2450
  %3296 = sext i32 %3269 to i64
  store i64 %3296, i64* %RCX, align 8, !tbaa !2428
  %3297 = load i64, i64* %RAX, align 8
  %3298 = shl nsw i64 %3296, 2
  %3299 = add i64 %3297, %3298
  %3300 = add i64 %3705, 58
  store i64 %3300, i64* %PC, align 8
  %3301 = load <2 x float>, <2 x float>* %3754, align 1
  %3302 = load <2 x i32>, <2 x i32>* %3755, align 1
  %3303 = inttoptr i64 %3299 to float*
  %3304 = load float, float* %3303, align 4
  %3305 = extractelement <2 x float> %3301, i32 0
  %3306 = fmul float %3305, %3304
  store float %3306, float* %3746, align 1, !tbaa !2451
  %3307 = bitcast <2 x float> %3301 to <2 x i32>
  %3308 = extractelement <2 x i32> %3307, i32 1
  store i32 %3308, i32* %3756, align 1, !tbaa !2451
  %3309 = extractelement <2 x i32> %3302, i32 0
  store i32 %3309, i32* %3757, align 1, !tbaa !2451
  %3310 = extractelement <2 x i32> %3302, i32 1
  store i32 %3310, i32* %3758, align 1, !tbaa !2451
  %3311 = load <2 x float>, <2 x float>* %3759, align 1
  %3312 = load <2 x i32>, <2 x i32>* %3760, align 1
  %3313 = load <2 x float>, <2 x float>* %3754, align 1
  %3314 = extractelement <2 x float> %3311, i32 0
  %3315 = extractelement <2 x float> %3313, i32 0
  %3316 = fadd float %3314, %3315
  store float %3316, float* %3737, align 1, !tbaa !2451
  %3317 = bitcast <2 x float> %3311 to <2 x i32>
  %3318 = extractelement <2 x i32> %3317, i32 1
  store i32 %3318, i32* %3761, align 1, !tbaa !2451
  %3319 = extractelement <2 x i32> %3312, i32 0
  store i32 %3319, i32* %3762, align 1, !tbaa !2451
  %3320 = extractelement <2 x i32> %3312, i32 1
  store i32 %3320, i32* %3763, align 1, !tbaa !2451
  %3321 = add i64 %3263, -32
  %3322 = add i64 %3705, 66
  store i64 %3322, i64* %PC, align 8
  %3323 = inttoptr i64 %3321 to i64*
  %3324 = load i64, i64* %3323, align 8
  store i64 %3324, i64* %RAX, align 8, !tbaa !2428
  %3325 = add i64 %3263, -44
  %3326 = add i64 %3705, 70
  store i64 %3326, i64* %PC, align 8
  %3327 = inttoptr i64 %3325 to i32*
  %3328 = load i32, i32* %3327, align 4
  %3329 = sext i32 %3328 to i64
  store i64 %3329, i64* %RCX, align 8, !tbaa !2428
  %3330 = shl nsw i64 %3329, 2
  %3331 = add i64 %3330, %3324
  %3332 = add i64 %3705, 75
  store i64 %3332, i64* %PC, align 8
  %3333 = inttoptr i64 %3331 to i32*
  %3334 = load i32, i32* %3333, align 4
  store i32 %3334, i32* %3747, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3749, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3751, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3753, align 1, !tbaa !2451
  %3335 = load i64, i64* %RBP, align 8
  %3336 = add i64 %3335, -40
  %3337 = add i64 %3705, 79
  store i64 %3337, i64* %PC, align 8
  %3338 = inttoptr i64 %3336 to i64*
  %3339 = load i64, i64* %3338, align 8
  store i64 %3339, i64* %RAX, align 8, !tbaa !2428
  %3340 = add i64 %3335, -24
  %3341 = add i64 %3705, 82
  store i64 %3341, i64* %PC, align 8
  %3342 = inttoptr i64 %3340 to i32*
  %3343 = load i32, i32* %3342, align 4
  %3344 = zext i32 %3343 to i64
  store i64 %3344, i64* %RDX, align 8, !tbaa !2428
  %3345 = add i64 %3335, -44
  %3346 = add i64 %3705, 86
  store i64 %3346, i64* %PC, align 8
  %3347 = inttoptr i64 %3345 to i32*
  %3348 = load i32, i32* %3347, align 4
  %3349 = sext i32 %3343 to i64
  %3350 = sext i32 %3348 to i64
  %3351 = mul nsw i64 %3350, %3349
  %3352 = trunc i64 %3351 to i32
  %3353 = and i64 %3351, 4294967295
  store i64 %3353, i64* %RDX, align 8, !tbaa !2428
  %3354 = shl i64 %3351, 32
  %3355 = ashr exact i64 %3354, 32
  %3356 = icmp ne i64 %3355, %3351
  %3357 = zext i1 %3356 to i8
  store i8 %3357, i8* %.pre-phi, align 1, !tbaa !2432
  %3358 = and i32 %3352, 255
  %3359 = tail call i32 @llvm.ctpop.i32(i32 %3358) #12
  %3360 = trunc i32 %3359 to i8
  %3361 = and i8 %3360, 1
  %3362 = xor i8 %3361, 1
  store i8 %3362, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3363 = lshr i32 %3352, 31
  %3364 = trunc i32 %3363 to i8
  store i8 %3364, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3357, i8* %.pre-phi50, align 1, !tbaa !2450
  %3365 = add i64 %3335, -48
  %3366 = add i64 %3705, 89
  store i64 %3366, i64* %PC, align 8
  %3367 = trunc i64 %3351 to i32
  %3368 = inttoptr i64 %3365 to i32*
  %3369 = load i32, i32* %3368, align 4
  %3370 = add i32 %3369, %3367
  %3371 = zext i32 %3370 to i64
  store i64 %3371, i64* %RDX, align 8, !tbaa !2428
  %3372 = icmp ult i32 %3370, %3367
  %3373 = icmp ult i32 %3370, %3369
  %3374 = or i1 %3372, %3373
  %3375 = zext i1 %3374 to i8
  store i8 %3375, i8* %.pre-phi, align 1, !tbaa !2432
  %3376 = and i32 %3370, 255
  %3377 = tail call i32 @llvm.ctpop.i32(i32 %3376) #12
  %3378 = trunc i32 %3377 to i8
  %3379 = and i8 %3378, 1
  %3380 = xor i8 %3379, 1
  store i8 %3380, i8* %.pre-phi42, align 1, !tbaa !2446
  %3381 = xor i32 %3369, %3367
  %3382 = xor i32 %3381, %3370
  %3383 = lshr i32 %3382, 4
  %3384 = trunc i32 %3383 to i8
  %3385 = and i8 %3384, 1
  store i8 %3385, i8* %.pre-phi44, align 1, !tbaa !2447
  %3386 = icmp eq i32 %3370, 0
  %3387 = zext i1 %3386 to i8
  store i8 %3387, i8* %.pre-phi46, align 1, !tbaa !2448
  %3388 = lshr i32 %3370, 31
  %3389 = trunc i32 %3388 to i8
  store i8 %3389, i8* %.pre-phi48, align 1, !tbaa !2449
  %3390 = lshr i32 %3367, 31
  %3391 = lshr i32 %3369, 31
  %3392 = xor i32 %3388, %3390
  %3393 = xor i32 %3388, %3391
  %3394 = add nuw nsw i32 %3392, %3393
  %3395 = icmp eq i32 %3394, 2
  %3396 = zext i1 %3395 to i8
  store i8 %3396, i8* %.pre-phi50, align 1, !tbaa !2450
  %3397 = sext i32 %3370 to i64
  store i64 %3397, i64* %RCX, align 8, !tbaa !2428
  %3398 = shl nsw i64 %3397, 2
  %3399 = add i64 %3339, %3398
  %3400 = add i64 %3705, 97
  store i64 %3400, i64* %PC, align 8
  %3401 = load <2 x float>, <2 x float>* %3754, align 1
  %3402 = load <2 x i32>, <2 x i32>* %3755, align 1
  %3403 = inttoptr i64 %3399 to float*
  %3404 = load float, float* %3403, align 4
  %3405 = extractelement <2 x float> %3401, i32 0
  %3406 = fmul float %3405, %3404
  store float %3406, float* %3746, align 1, !tbaa !2451
  %3407 = bitcast <2 x float> %3401 to <2 x i32>
  %3408 = extractelement <2 x i32> %3407, i32 1
  store i32 %3408, i32* %3756, align 1, !tbaa !2451
  %3409 = extractelement <2 x i32> %3402, i32 0
  store i32 %3409, i32* %3757, align 1, !tbaa !2451
  %3410 = extractelement <2 x i32> %3402, i32 1
  store i32 %3410, i32* %3758, align 1, !tbaa !2451
  %3411 = load <2 x float>, <2 x float>* %3759, align 1
  %3412 = load <2 x i32>, <2 x i32>* %3760, align 1
  %3413 = load <2 x float>, <2 x float>* %3754, align 1
  %3414 = extractelement <2 x float> %3411, i32 0
  %3415 = extractelement <2 x float> %3413, i32 0
  %3416 = fadd float %3414, %3415
  store float %3416, float* %3737, align 1, !tbaa !2451
  %3417 = bitcast <2 x float> %3411 to <2 x i32>
  %3418 = extractelement <2 x i32> %3417, i32 1
  store i32 %3418, i32* %3761, align 1, !tbaa !2451
  %3419 = extractelement <2 x i32> %3412, i32 0
  store i32 %3419, i32* %3762, align 1, !tbaa !2451
  %3420 = extractelement <2 x i32> %3412, i32 1
  store i32 %3420, i32* %3763, align 1, !tbaa !2451
  %3421 = load i64, i64* %RBP, align 8
  %3422 = add i64 %3421, -16
  %3423 = add i64 %3705, 105
  store i64 %3423, i64* %PC, align 8
  %3424 = inttoptr i64 %3422 to i64*
  %3425 = load i64, i64* %3424, align 8
  store i64 %3425, i64* %RAX, align 8, !tbaa !2428
  %3426 = add i64 %3421, -48
  %3427 = add i64 %3705, 109
  store i64 %3427, i64* %PC, align 8
  %3428 = inttoptr i64 %3426 to i32*
  %3429 = load i32, i32* %3428, align 4
  %3430 = sext i32 %3429 to i64
  store i64 %3430, i64* %RCX, align 8, !tbaa !2428
  %3431 = shl nsw i64 %3430, 2
  %3432 = add i64 %3431, %3425
  %3433 = add i64 %3705, 114
  store i64 %3433, i64* %PC, align 8
  %3434 = load <2 x float>, <2 x float>* %3759, align 1
  %3435 = extractelement <2 x float> %3434, i32 0
  %3436 = inttoptr i64 %3432 to float*
  store float %3435, float* %3436, align 4
  %3437 = load i64, i64* %RBP, align 8
  %3438 = add i64 %3437, -48
  %3439 = load i64, i64* %PC, align 8
  %3440 = add i64 %3439, 3
  store i64 %3440, i64* %PC, align 8
  %3441 = inttoptr i64 %3438 to i32*
  %3442 = load i32, i32* %3441, align 4
  %3443 = add i32 %3442, 1
  %3444 = zext i32 %3443 to i64
  store i64 %3444, i64* %RAX, align 8, !tbaa !2428
  %3445 = icmp eq i32 %3442, -1
  %3446 = icmp eq i32 %3443, 0
  %3447 = or i1 %3445, %3446
  %3448 = zext i1 %3447 to i8
  store i8 %3448, i8* %.pre-phi, align 1, !tbaa !2432
  %3449 = and i32 %3443, 255
  %3450 = tail call i32 @llvm.ctpop.i32(i32 %3449) #12
  %3451 = trunc i32 %3450 to i8
  %3452 = and i8 %3451, 1
  %3453 = xor i8 %3452, 1
  store i8 %3453, i8* %.pre-phi42, align 1, !tbaa !2446
  %3454 = xor i32 %3443, %3442
  %3455 = lshr i32 %3454, 4
  %3456 = trunc i32 %3455 to i8
  %3457 = and i8 %3456, 1
  store i8 %3457, i8* %.pre-phi44, align 1, !tbaa !2447
  %3458 = zext i1 %3446 to i8
  store i8 %3458, i8* %.pre-phi46, align 1, !tbaa !2448
  %3459 = lshr i32 %3443, 31
  %3460 = trunc i32 %3459 to i8
  store i8 %3460, i8* %.pre-phi48, align 1, !tbaa !2449
  %3461 = lshr i32 %3442, 31
  %3462 = xor i32 %3459, %3461
  %3463 = add nuw nsw i32 %3462, %3459
  %3464 = icmp eq i32 %3463, 2
  %3465 = zext i1 %3464 to i8
  store i8 %3465, i8* %.pre-phi50, align 1, !tbaa !2450
  %3466 = add i64 %3439, 9
  store i64 %3466, i64* %PC, align 8
  store i32 %3443, i32* %3441, align 4
  %3467 = load i64, i64* %PC, align 8
  %3468 = add i64 %3467, -135
  store i64 %3468, i64* %PC, align 8, !tbaa !2428
  br label %block_402099

block_40226d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %3469 = add i64 %2932, 3
  store i64 %3469, i64* %PC, align 8
  %3470 = load i32, i32* %2907, align 4
  %3471 = add i32 %3470, -1
  %3472 = zext i32 %3471 to i64
  store i64 %3472, i64* %RAX, align 8, !tbaa !2428
  %3473 = icmp eq i32 %3470, 0
  %3474 = zext i1 %3473 to i8
  store i8 %3474, i8* %.pre-phi, align 1, !tbaa !2432
  %3475 = and i32 %3471, 255
  %3476 = tail call i32 @llvm.ctpop.i32(i32 %3475) #12
  %3477 = trunc i32 %3476 to i8
  %3478 = and i8 %3477, 1
  %3479 = xor i8 %3478, 1
  store i8 %3479, i8* %.pre-phi42, align 1, !tbaa !2446
  %3480 = xor i32 %3471, %3470
  %3481 = lshr i32 %3480, 4
  %3482 = trunc i32 %3481 to i8
  %3483 = and i8 %3482, 1
  store i8 %3483, i8* %.pre-phi44, align 1, !tbaa !2447
  %3484 = icmp eq i32 %3471, 0
  %3485 = zext i1 %3484 to i8
  store i8 %3485, i8* %.pre-phi46, align 1, !tbaa !2448
  %3486 = lshr i32 %3471, 31
  %3487 = trunc i32 %3486 to i8
  store i8 %3487, i8* %.pre-phi48, align 1, !tbaa !2449
  %3488 = lshr i32 %3470, 31
  %3489 = xor i32 %3486, %3488
  %3490 = add nuw nsw i32 %3489, %3488
  %3491 = icmp eq i32 %3490, 2
  %3492 = zext i1 %3491 to i8
  store i8 %3492, i8* %.pre-phi50, align 1, !tbaa !2450
  %3493 = add i64 %2932, 9
  store i64 %3493, i64* %PC, align 8
  store i32 %3471, i32* %2907, align 4
  %3494 = load i64, i64* %RBP, align 8
  %3495 = add i64 %3494, -48
  %3496 = load i64, i64* %PC, align 8
  %3497 = add i64 %3496, 7
  store i64 %3497, i64* %PC, align 8
  %3498 = inttoptr i64 %3495 to i32*
  store i32 0, i32* %3498, align 4
  %3499 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %3500 = bitcast [32 x %union.VectorReg]* %7 to float*
  %3501 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %3502 = getelementptr inbounds i8, i8* %3499, i64 4
  %3503 = bitcast i8* %3502 to float*
  %3504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3505 = bitcast i64* %3504 to float*
  %3506 = getelementptr inbounds i8, i8* %3499, i64 12
  %3507 = bitcast i8* %3506 to float*
  %3508 = bitcast %union.VectorReg* %8 to i8*
  %3509 = bitcast %union.VectorReg* %8 to float*
  %3510 = bitcast %union.VectorReg* %8 to i32*
  %3511 = getelementptr inbounds i8, i8* %3508, i64 4
  %3512 = bitcast i8* %3511 to float*
  %3513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %3514 = bitcast i64* %3513 to float*
  %3515 = getelementptr inbounds i8, i8* %3508, i64 12
  %3516 = bitcast i8* %3515 to float*
  %3517 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3518 = bitcast i64* %3513 to <2 x i32>*
  %3519 = bitcast i8* %3511 to i32*
  %3520 = bitcast i64* %3513 to i32*
  %3521 = bitcast i8* %3515 to i32*
  %3522 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %3523 = bitcast i64* %3504 to <2 x i32>*
  %3524 = bitcast i8* %3502 to i32*
  %3525 = bitcast i64* %3504 to i32*
  %3526 = bitcast i8* %3506 to i32*
  %.pre34 = load i64, i64* %PC, align 8
  br label %block_40227d

block_4027a3:                                     ; preds = %block_402469
  %3527 = add i64 %3107, -44
  %3528 = add i64 %3143, 8
  store i64 %3528, i64* %PC, align 8
  %3529 = inttoptr i64 %3527 to i32*
  %3530 = load i32, i32* %3529, align 4
  %3531 = add i32 %3530, 16
  %3532 = zext i32 %3531 to i64
  store i64 %3532, i64* %RAX, align 8, !tbaa !2428
  %3533 = icmp ugt i32 %3530, -17
  %3534 = zext i1 %3533 to i8
  store i8 %3534, i8* %.pre-phi, align 1, !tbaa !2432
  %3535 = and i32 %3531, 255
  %3536 = tail call i32 @llvm.ctpop.i32(i32 %3535) #12
  %3537 = trunc i32 %3536 to i8
  %3538 = and i8 %3537, 1
  %3539 = xor i8 %3538, 1
  store i8 %3539, i8* %.pre-phi42, align 1, !tbaa !2446
  %3540 = xor i32 %3530, 16
  %3541 = xor i32 %3540, %3531
  %3542 = lshr i32 %3541, 4
  %3543 = trunc i32 %3542 to i8
  %3544 = and i8 %3543, 1
  store i8 %3544, i8* %.pre-phi44, align 1, !tbaa !2447
  %3545 = icmp eq i32 %3531, 0
  %3546 = zext i1 %3545 to i8
  store i8 %3546, i8* %.pre-phi46, align 1, !tbaa !2448
  %3547 = lshr i32 %3531, 31
  %3548 = trunc i32 %3547 to i8
  store i8 %3548, i8* %.pre-phi48, align 1, !tbaa !2449
  %3549 = lshr i32 %3530, 31
  %3550 = xor i32 %3547, %3549
  %3551 = add nuw nsw i32 %3550, %3547
  %3552 = icmp eq i32 %3551, 2
  %3553 = zext i1 %3552 to i8
  store i8 %3553, i8* %.pre-phi50, align 1, !tbaa !2450
  %3554 = add i64 %3143, 14
  store i64 %3554, i64* %PC, align 8
  store i32 %3531, i32* %3529, align 4
  %3555 = load i64, i64* %PC, align 8
  %3556 = add i64 %3555, -859
  store i64 %3556, i64* %PC, align 8, !tbaa !2428
  br label %block_402456

block_402456:                                     ; preds = %block_4027a3, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %3557 = phi i64 [ %3556, %block_4027a3 ], [ %.pre38, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ]
  %3558 = load i64, i64* %RBP, align 8
  %3559 = add i64 %3558, -44
  %3560 = add i64 %3557, 3
  store i64 %3560, i64* %PC, align 8
  %3561 = inttoptr i64 %3559 to i32*
  %3562 = load i32, i32* %3561, align 4
  %3563 = zext i32 %3562 to i64
  store i64 %3563, i64* %RAX, align 8, !tbaa !2428
  %3564 = add i64 %3558, -20
  %3565 = add i64 %3557, 6
  store i64 %3565, i64* %PC, align 8
  %3566 = inttoptr i64 %3564 to i32*
  %3567 = load i32, i32* %3566, align 4
  %3568 = sub i32 %3562, %3567
  %3569 = icmp ult i32 %3562, %3567
  %3570 = zext i1 %3569 to i8
  store i8 %3570, i8* %.pre-phi, align 1, !tbaa !2432
  %3571 = and i32 %3568, 255
  %3572 = tail call i32 @llvm.ctpop.i32(i32 %3571) #12
  %3573 = trunc i32 %3572 to i8
  %3574 = and i8 %3573, 1
  %3575 = xor i8 %3574, 1
  store i8 %3575, i8* %.pre-phi42, align 1, !tbaa !2446
  %3576 = xor i32 %3567, %3562
  %3577 = xor i32 %3576, %3568
  %3578 = lshr i32 %3577, 4
  %3579 = trunc i32 %3578 to i8
  %3580 = and i8 %3579, 1
  store i8 %3580, i8* %.pre-phi44, align 1, !tbaa !2447
  %3581 = icmp eq i32 %3568, 0
  %3582 = zext i1 %3581 to i8
  store i8 %3582, i8* %.pre-phi46, align 1, !tbaa !2448
  %3583 = lshr i32 %3568, 31
  %3584 = trunc i32 %3583 to i8
  store i8 %3584, i8* %.pre-phi48, align 1, !tbaa !2449
  %3585 = lshr i32 %3562, 31
  %3586 = lshr i32 %3567, 31
  %3587 = xor i32 %3586, %3585
  %3588 = xor i32 %3583, %3585
  %3589 = add nuw nsw i32 %3588, %3587
  %3590 = icmp eq i32 %3589, 2
  %3591 = zext i1 %3590 to i8
  store i8 %3591, i8* %.pre-phi50, align 1, !tbaa !2450
  %3592 = icmp ne i8 %3584, 0
  %3593 = xor i1 %3592, %3590
  %.v59 = select i1 %3593, i64 12, i64 864
  %3594 = add i64 %3557, %.v59
  store i64 %3594, i64* %PC, align 8, !tbaa !2428
  br i1 %3593, label %block_402462, label %block_4027b6

block_40212a:                                     ; preds = %block_402125, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %3595 = phi i64 [ %3669, %block_402125 ], [ %270, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  %3596 = phi i64 [ %2980, %block_402125 ], [ %299, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %3597 = add i64 %3595, -20
  %3598 = add i64 %3596, 8
  store i64 %3598, i64* %PC, align 8
  %3599 = inttoptr i64 %3597 to i32*
  %3600 = load i32, i32* %3599, align 4
  %3601 = zext i32 %3600 to i64
  store i64 %3601, i64* %RCX, align 8, !tbaa !2428
  %3602 = add i64 %3595, -64
  %3603 = add i64 %3596, 11
  store i64 %3603, i64* %PC, align 8
  %3604 = inttoptr i64 %3602 to i32*
  store i32 8, i32* %3604, align 4
  %3605 = load i32, i32* %ECX, align 4
  %3606 = zext i32 %3605 to i64
  %3607 = load i64, i64* %PC, align 8
  store i64 %3606, i64* %RAX, align 8, !tbaa !2428
  %3608 = sext i32 %3605 to i64
  %3609 = lshr i64 %3608, 32
  store i64 %3609, i64* %64, align 8, !tbaa !2428
  %3610 = load i64, i64* %RBP, align 8
  %3611 = add i64 %3610, -64
  %3612 = add i64 %3607, 6
  store i64 %3612, i64* %PC, align 8
  %3613 = inttoptr i64 %3611 to i32*
  %3614 = load i32, i32* %3613, align 4
  %3615 = zext i32 %3614 to i64
  store i64 %3615, i64* %RCX, align 8, !tbaa !2428
  %3616 = add i64 %3607, 8
  store i64 %3616, i64* %PC, align 8
  %3617 = sext i32 %3614 to i64
  %3618 = shl nuw i64 %3609, 32
  %3619 = or i64 %3618, %3606
  %3620 = sdiv i64 %3619, %3617
  %3621 = shl i64 %3620, 32
  %3622 = ashr exact i64 %3621, 32
  %3623 = icmp eq i64 %3620, %3622
  br i1 %3623, label %3626, label %3624

; <label>:3624:                                   ; preds = %block_40212a
  %3625 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3616, %struct.Memory* %266) #13
  %.pre27 = load i64, i64* %RBP, align 8
  %.pre28 = load i32, i32* %EDX, align 4
  %.pre29 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:3626:                                   ; preds = %block_40212a
  %3627 = srem i64 %3619, %3617
  %3628 = and i64 %3620, 4294967295
  store i64 %3628, i64* %RAX, align 8, !tbaa !2428
  %3629 = and i64 %3627, 4294967295
  store i64 %3629, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi50, align 1, !tbaa !2450
  %3630 = trunc i64 %3627 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %3626, %3624
  %3631 = phi i64 [ %.pre29, %3624 ], [ %3616, %3626 ]
  %3632 = phi i32 [ %.pre28, %3624 ], [ %3630, %3626 ]
  %3633 = phi i64 [ %.pre27, %3624 ], [ %3610, %3626 ]
  %3634 = phi %struct.Memory* [ %3625, %3624 ], [ %266, %3626 ]
  %3635 = add i64 %3633, -44
  %3636 = add i64 %3631, 3
  store i64 %3636, i64* %PC, align 8
  %3637 = inttoptr i64 %3635 to i32*
  store i32 %3632, i32* %3637, align 4
  %3638 = load i64, i64* %RBP, align 8
  %3639 = add i64 %3638, -44
  %3640 = load i64, i64* %PC, align 8
  %3641 = add i64 %3640, 4
  store i64 %3641, i64* %PC, align 8
  %3642 = inttoptr i64 %3639 to i32*
  %3643 = load i32, i32* %3642, align 4
  %3644 = add i32 %3643, -4
  %3645 = icmp ult i32 %3643, 4
  %3646 = zext i1 %3645 to i8
  store i8 %3646, i8* %.pre-phi, align 1, !tbaa !2432
  %3647 = and i32 %3644, 255
  %3648 = tail call i32 @llvm.ctpop.i32(i32 %3647) #12
  %3649 = trunc i32 %3648 to i8
  %3650 = and i8 %3649, 1
  %3651 = xor i8 %3650, 1
  store i8 %3651, i8* %.pre-phi42, align 1, !tbaa !2446
  %3652 = xor i32 %3644, %3643
  %3653 = lshr i32 %3652, 4
  %3654 = trunc i32 %3653 to i8
  %3655 = and i8 %3654, 1
  store i8 %3655, i8* %.pre-phi44, align 1, !tbaa !2447
  %3656 = icmp eq i32 %3644, 0
  %3657 = zext i1 %3656 to i8
  store i8 %3657, i8* %.pre-phi46, align 1, !tbaa !2448
  %3658 = lshr i32 %3644, 31
  %3659 = trunc i32 %3658 to i8
  store i8 %3659, i8* %.pre-phi48, align 1, !tbaa !2449
  %3660 = lshr i32 %3643, 31
  %3661 = xor i32 %3658, %3660
  %3662 = add nuw nsw i32 %3661, %3660
  %3663 = icmp eq i32 %3662, 2
  %3664 = zext i1 %3663 to i8
  store i8 %3664, i8* %.pre-phi50, align 1, !tbaa !2450
  %3665 = icmp ne i8 %3659, 0
  %3666 = xor i1 %3665, %3663
  %.v55 = select i1 %3666, i64 269, i64 10
  %3667 = add i64 %3640, %.v55
  store i64 %3667, i64* %PC, align 8, !tbaa !2428
  br i1 %3666, label %block_40224d, label %block_40214a

block_402099:                                     ; preds = %block_402089, %block_4020a5
  %3668 = phi i64 [ %.pre26, %block_402089 ], [ %3468, %block_4020a5 ]
  %3669 = load i64, i64* %RBP, align 8
  %3670 = add i64 %3669, -48
  %3671 = add i64 %3668, 3
  store i64 %3671, i64* %PC, align 8
  %3672 = inttoptr i64 %3670 to i32*
  %3673 = load i32, i32* %3672, align 4
  %3674 = zext i32 %3673 to i64
  store i64 %3674, i64* %RAX, align 8, !tbaa !2428
  %3675 = add i64 %3669, -4
  %3676 = add i64 %3668, 6
  store i64 %3676, i64* %PC, align 8
  %3677 = inttoptr i64 %3675 to i32*
  %3678 = load i32, i32* %3677, align 4
  %3679 = sub i32 %3673, %3678
  %3680 = icmp ult i32 %3673, %3678
  %3681 = zext i1 %3680 to i8
  store i8 %3681, i8* %.pre-phi, align 1, !tbaa !2432
  %3682 = and i32 %3679, 255
  %3683 = tail call i32 @llvm.ctpop.i32(i32 %3682) #12
  %3684 = trunc i32 %3683 to i8
  %3685 = and i8 %3684, 1
  %3686 = xor i8 %3685, 1
  store i8 %3686, i8* %.pre-phi42, align 1, !tbaa !2446
  %3687 = xor i32 %3678, %3673
  %3688 = xor i32 %3687, %3679
  %3689 = lshr i32 %3688, 4
  %3690 = trunc i32 %3689 to i8
  %3691 = and i8 %3690, 1
  store i8 %3691, i8* %.pre-phi44, align 1, !tbaa !2447
  %3692 = icmp eq i32 %3679, 0
  %3693 = zext i1 %3692 to i8
  store i8 %3693, i8* %.pre-phi46, align 1, !tbaa !2448
  %3694 = lshr i32 %3679, 31
  %3695 = trunc i32 %3694 to i8
  store i8 %3695, i8* %.pre-phi48, align 1, !tbaa !2449
  %3696 = lshr i32 %3673, 31
  %3697 = lshr i32 %3678, 31
  %3698 = xor i32 %3697, %3696
  %3699 = xor i32 %3694, %3696
  %3700 = add nuw nsw i32 %3699, %3698
  %3701 = icmp eq i32 %3700, 2
  %3702 = zext i1 %3701 to i8
  store i8 %3702, i8* %.pre-phi50, align 1, !tbaa !2450
  %3703 = icmp ne i8 %3695, 0
  %3704 = xor i1 %3703, %3701
  %.v54 = select i1 %3704, i64 12, i64 140
  %3705 = add i64 %3668, %.v54
  store i64 %3705, i64* %PC, align 8, !tbaa !2428
  br i1 %3704, label %block_4020a5, label %block_402125

block_402089:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %3706 = add i64 %299, 3
  store i64 %3706, i64* %PC, align 8
  %3707 = load i32, i32* %274, align 4
  %3708 = add i32 %3707, -1
  %3709 = zext i32 %3708 to i64
  store i64 %3709, i64* %RAX, align 8, !tbaa !2428
  %3710 = icmp eq i32 %3707, 0
  %3711 = zext i1 %3710 to i8
  store i8 %3711, i8* %.pre-phi, align 1, !tbaa !2432
  %3712 = and i32 %3708, 255
  %3713 = tail call i32 @llvm.ctpop.i32(i32 %3712) #12
  %3714 = trunc i32 %3713 to i8
  %3715 = and i8 %3714, 1
  %3716 = xor i8 %3715, 1
  store i8 %3716, i8* %.pre-phi42, align 1, !tbaa !2446
  %3717 = xor i32 %3708, %3707
  %3718 = lshr i32 %3717, 4
  %3719 = trunc i32 %3718 to i8
  %3720 = and i8 %3719, 1
  store i8 %3720, i8* %.pre-phi44, align 1, !tbaa !2447
  %3721 = icmp eq i32 %3708, 0
  %3722 = zext i1 %3721 to i8
  store i8 %3722, i8* %.pre-phi46, align 1, !tbaa !2448
  %3723 = lshr i32 %3708, 31
  %3724 = trunc i32 %3723 to i8
  store i8 %3724, i8* %.pre-phi48, align 1, !tbaa !2449
  %3725 = lshr i32 %3707, 31
  %3726 = xor i32 %3723, %3725
  %3727 = add nuw nsw i32 %3726, %3725
  %3728 = icmp eq i32 %3727, 2
  %3729 = zext i1 %3728 to i8
  store i8 %3729, i8* %.pre-phi50, align 1, !tbaa !2450
  %3730 = add i64 %299, 9
  store i64 %3730, i64* %PC, align 8
  store i32 %3708, i32* %274, align 4
  %3731 = load i64, i64* %RBP, align 8
  %3732 = add i64 %3731, -48
  %3733 = load i64, i64* %PC, align 8
  %3734 = add i64 %3733, 7
  store i64 %3734, i64* %PC, align 8
  %3735 = inttoptr i64 %3732 to i32*
  store i32 0, i32* %3735, align 4
  %3736 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %3737 = bitcast [32 x %union.VectorReg]* %7 to float*
  %3738 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %3739 = getelementptr inbounds i8, i8* %3736, i64 4
  %3740 = bitcast i8* %3739 to float*
  %3741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3742 = bitcast i64* %3741 to float*
  %3743 = getelementptr inbounds i8, i8* %3736, i64 12
  %3744 = bitcast i8* %3743 to float*
  %3745 = bitcast %union.VectorReg* %8 to i8*
  %3746 = bitcast %union.VectorReg* %8 to float*
  %3747 = bitcast %union.VectorReg* %8 to i32*
  %3748 = getelementptr inbounds i8, i8* %3745, i64 4
  %3749 = bitcast i8* %3748 to float*
  %3750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %3751 = bitcast i64* %3750 to float*
  %3752 = getelementptr inbounds i8, i8* %3745, i64 12
  %3753 = bitcast i8* %3752 to float*
  %3754 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3755 = bitcast i64* %3750 to <2 x i32>*
  %3756 = bitcast i8* %3748 to i32*
  %3757 = bitcast i64* %3750 to i32*
  %3758 = bitcast i8* %3752 to i32*
  %3759 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %3760 = bitcast i64* %3741 to <2 x i32>*
  %3761 = bitcast i8* %3739 to i32*
  %3762 = bitcast i64* %3741 to i32*
  %3763 = bitcast i8* %3743 to i32*
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_402099

block_402015:                                     ; preds = %block_402009
  %3764 = add i64 %2934, -16
  %3765 = add i64 %2970, 4
  store i64 %3765, i64* %PC, align 8
  %3766 = inttoptr i64 %3764 to i64*
  %3767 = load i64, i64* %3766, align 8
  store i64 %3767, i64* %RAX, align 8, !tbaa !2428
  %3768 = add i64 %2970, 8
  store i64 %3768, i64* %PC, align 8
  %3769 = load i32, i32* %2937, align 4
  %3770 = sext i32 %3769 to i64
  store i64 %3770, i64* %RCX, align 8, !tbaa !2428
  %3771 = shl nsw i64 %3770, 2
  %3772 = add i64 %3771, %3767
  %3773 = add i64 %2970, 13
  store i64 %3773, i64* %PC, align 8
  %3774 = inttoptr i64 %3772 to i32*
  %3775 = load i32, i32* %3774, align 4
  store i32 %3775, i32* %201, align 1, !tbaa !2451
  store float 0.000000e+00, float* %203, align 1, !tbaa !2451
  store float 0.000000e+00, float* %205, align 1, !tbaa !2451
  store float 0.000000e+00, float* %207, align 1, !tbaa !2451
  %3776 = add i64 %2934, -32
  %3777 = add i64 %2970, 17
  store i64 %3777, i64* %PC, align 8
  %3778 = inttoptr i64 %3776 to i64*
  %3779 = load i64, i64* %3778, align 8
  store i64 %3779, i64* %RAX, align 8, !tbaa !2428
  %3780 = add i64 %2934, -44
  %3781 = add i64 %2970, 21
  store i64 %3781, i64* %PC, align 8
  %3782 = inttoptr i64 %3780 to i32*
  %3783 = load i32, i32* %3782, align 4
  %3784 = sext i32 %3783 to i64
  store i64 %3784, i64* %RCX, align 8, !tbaa !2428
  %3785 = shl nsw i64 %3784, 2
  %3786 = add i64 %3785, %3779
  %3787 = add i64 %2970, 26
  store i64 %3787, i64* %PC, align 8
  %3788 = inttoptr i64 %3786 to i32*
  %3789 = load i32, i32* %3788, align 4
  store i32 %3789, i32* %210, align 1, !tbaa !2451
  store float 0.000000e+00, float* %212, align 1, !tbaa !2451
  store float 0.000000e+00, float* %214, align 1, !tbaa !2451
  store float 0.000000e+00, float* %216, align 1, !tbaa !2451
  %3790 = add i64 %2934, -40
  %3791 = add i64 %2970, 30
  store i64 %3791, i64* %PC, align 8
  %3792 = inttoptr i64 %3790 to i64*
  %3793 = load i64, i64* %3792, align 8
  store i64 %3793, i64* %RAX, align 8, !tbaa !2428
  %3794 = add i64 %2934, -24
  %3795 = add i64 %2970, 33
  store i64 %3795, i64* %PC, align 8
  %3796 = inttoptr i64 %3794 to i32*
  %3797 = load i32, i32* %3796, align 4
  %3798 = zext i32 %3797 to i64
  store i64 %3798, i64* %RDX, align 8, !tbaa !2428
  %3799 = add i64 %2970, 37
  store i64 %3799, i64* %PC, align 8
  %3800 = load i32, i32* %3782, align 4
  %3801 = sext i32 %3797 to i64
  %3802 = sext i32 %3800 to i64
  %3803 = mul nsw i64 %3802, %3801
  %3804 = trunc i64 %3803 to i32
  %3805 = and i64 %3803, 4294967295
  store i64 %3805, i64* %RDX, align 8, !tbaa !2428
  %3806 = shl i64 %3803, 32
  %3807 = ashr exact i64 %3806, 32
  %3808 = icmp ne i64 %3807, %3803
  %3809 = zext i1 %3808 to i8
  store i8 %3809, i8* %.pre-phi, align 1, !tbaa !2432
  %3810 = and i32 %3804, 255
  %3811 = tail call i32 @llvm.ctpop.i32(i32 %3810) #12
  %3812 = trunc i32 %3811 to i8
  %3813 = and i8 %3812, 1
  %3814 = xor i8 %3813, 1
  store i8 %3814, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3815 = lshr i32 %3804, 31
  %3816 = trunc i32 %3815 to i8
  store i8 %3816, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3809, i8* %.pre-phi50, align 1, !tbaa !2450
  %3817 = add i64 %2970, 40
  store i64 %3817, i64* %PC, align 8
  %3818 = trunc i64 %3803 to i32
  %3819 = load i32, i32* %2937, align 4
  %3820 = add i32 %3819, %3818
  %3821 = zext i32 %3820 to i64
  store i64 %3821, i64* %RDX, align 8, !tbaa !2428
  %3822 = icmp ult i32 %3820, %3818
  %3823 = icmp ult i32 %3820, %3819
  %3824 = or i1 %3822, %3823
  %3825 = zext i1 %3824 to i8
  store i8 %3825, i8* %.pre-phi, align 1, !tbaa !2432
  %3826 = and i32 %3820, 255
  %3827 = tail call i32 @llvm.ctpop.i32(i32 %3826) #12
  %3828 = trunc i32 %3827 to i8
  %3829 = and i8 %3828, 1
  %3830 = xor i8 %3829, 1
  store i8 %3830, i8* %.pre-phi42, align 1, !tbaa !2446
  %3831 = xor i32 %3819, %3818
  %3832 = xor i32 %3831, %3820
  %3833 = lshr i32 %3832, 4
  %3834 = trunc i32 %3833 to i8
  %3835 = and i8 %3834, 1
  store i8 %3835, i8* %.pre-phi44, align 1, !tbaa !2447
  %3836 = icmp eq i32 %3820, 0
  %3837 = zext i1 %3836 to i8
  store i8 %3837, i8* %.pre-phi46, align 1, !tbaa !2448
  %3838 = lshr i32 %3820, 31
  %3839 = trunc i32 %3838 to i8
  store i8 %3839, i8* %.pre-phi48, align 1, !tbaa !2449
  %3840 = lshr i32 %3818, 31
  %3841 = lshr i32 %3819, 31
  %3842 = xor i32 %3838, %3840
  %3843 = xor i32 %3838, %3841
  %3844 = add nuw nsw i32 %3842, %3843
  %3845 = icmp eq i32 %3844, 2
  %3846 = zext i1 %3845 to i8
  store i8 %3846, i8* %.pre-phi50, align 1, !tbaa !2450
  %3847 = sext i32 %3820 to i64
  store i64 %3847, i64* %RCX, align 8, !tbaa !2428
  %3848 = shl nsw i64 %3847, 2
  %3849 = add i64 %3793, %3848
  %3850 = add i64 %2970, 48
  store i64 %3850, i64* %PC, align 8
  %3851 = load <2 x float>, <2 x float>* %217, align 1
  %3852 = load <2 x i32>, <2 x i32>* %218, align 1
  %3853 = inttoptr i64 %3849 to float*
  %3854 = load float, float* %3853, align 4
  %3855 = extractelement <2 x float> %3851, i32 0
  %3856 = fmul float %3855, %3854
  store float %3856, float* %209, align 1, !tbaa !2451
  %3857 = bitcast <2 x float> %3851 to <2 x i32>
  %3858 = extractelement <2 x i32> %3857, i32 1
  store i32 %3858, i32* %219, align 1, !tbaa !2451
  %3859 = extractelement <2 x i32> %3852, i32 0
  store i32 %3859, i32* %220, align 1, !tbaa !2451
  %3860 = extractelement <2 x i32> %3852, i32 1
  store i32 %3860, i32* %221, align 1, !tbaa !2451
  %3861 = load <2 x float>, <2 x float>* %222, align 1
  %3862 = load <2 x i32>, <2 x i32>* %223, align 1
  %3863 = load <2 x float>, <2 x float>* %217, align 1
  %3864 = extractelement <2 x float> %3861, i32 0
  %3865 = extractelement <2 x float> %3863, i32 0
  %3866 = fadd float %3864, %3865
  store float %3866, float* %200, align 1, !tbaa !2451
  %3867 = bitcast <2 x float> %3861 to <2 x i32>
  %3868 = extractelement <2 x i32> %3867, i32 1
  store i32 %3868, i32* %224, align 1, !tbaa !2451
  %3869 = extractelement <2 x i32> %3862, i32 0
  store i32 %3869, i32* %225, align 1, !tbaa !2451
  %3870 = extractelement <2 x i32> %3862, i32 1
  store i32 %3870, i32* %226, align 1, !tbaa !2451
  %3871 = load i64, i64* %RBP, align 8
  %3872 = add i64 %3871, -16
  %3873 = add i64 %2970, 56
  store i64 %3873, i64* %PC, align 8
  %3874 = inttoptr i64 %3872 to i64*
  %3875 = load i64, i64* %3874, align 8
  store i64 %3875, i64* %RAX, align 8, !tbaa !2428
  %3876 = add i64 %3871, -48
  %3877 = add i64 %2970, 60
  store i64 %3877, i64* %PC, align 8
  %3878 = inttoptr i64 %3876 to i32*
  %3879 = load i32, i32* %3878, align 4
  %3880 = sext i32 %3879 to i64
  store i64 %3880, i64* %RCX, align 8, !tbaa !2428
  %3881 = shl nsw i64 %3880, 2
  %3882 = add i64 %3881, %3875
  %3883 = add i64 %2970, 65
  store i64 %3883, i64* %PC, align 8
  %3884 = load <2 x float>, <2 x float>* %222, align 1
  %3885 = extractelement <2 x float> %3884, i32 0
  %3886 = inttoptr i64 %3882 to float*
  store float %3885, float* %3886, align 4
  %3887 = load i64, i64* %RBP, align 8
  %3888 = add i64 %3887, -48
  %3889 = load i64, i64* %PC, align 8
  %3890 = add i64 %3889, 3
  store i64 %3890, i64* %PC, align 8
  %3891 = inttoptr i64 %3888 to i32*
  %3892 = load i32, i32* %3891, align 4
  %3893 = add i32 %3892, 1
  %3894 = zext i32 %3893 to i64
  store i64 %3894, i64* %RAX, align 8, !tbaa !2428
  %3895 = icmp eq i32 %3892, -1
  %3896 = icmp eq i32 %3893, 0
  %3897 = or i1 %3895, %3896
  %3898 = zext i1 %3897 to i8
  store i8 %3898, i8* %.pre-phi, align 1, !tbaa !2432
  %3899 = and i32 %3893, 255
  %3900 = tail call i32 @llvm.ctpop.i32(i32 %3899) #12
  %3901 = trunc i32 %3900 to i8
  %3902 = and i8 %3901, 1
  %3903 = xor i8 %3902, 1
  store i8 %3903, i8* %.pre-phi42, align 1, !tbaa !2446
  %3904 = xor i32 %3893, %3892
  %3905 = lshr i32 %3904, 4
  %3906 = trunc i32 %3905 to i8
  %3907 = and i8 %3906, 1
  store i8 %3907, i8* %.pre-phi44, align 1, !tbaa !2447
  %3908 = zext i1 %3896 to i8
  store i8 %3908, i8* %.pre-phi46, align 1, !tbaa !2448
  %3909 = lshr i32 %3893, 31
  %3910 = trunc i32 %3909 to i8
  store i8 %3910, i8* %.pre-phi48, align 1, !tbaa !2449
  %3911 = lshr i32 %3892, 31
  %3912 = xor i32 %3909, %3911
  %3913 = add nuw nsw i32 %3912, %3909
  %3914 = icmp eq i32 %3913, 2
  %3915 = zext i1 %3914 to i8
  store i8 %3915, i8* %.pre-phi50, align 1, !tbaa !2450
  %3916 = add i64 %3889, 9
  store i64 %3916, i64* %PC, align 8
  store i32 %3893, i32* %3891, align 4
  %3917 = load i64, i64* %PC, align 8
  %3918 = add i64 %3917, -86
  store i64 %3918, i64* %PC, align 8, !tbaa !2428
  br label %block_402009

block_40214a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %3919 = add i64 %3667, 3
  store i64 %3919, i64* %PC, align 8
  %3920 = load i32, i32* %3642, align 4
  %3921 = add i32 %3920, -1
  %3922 = zext i32 %3921 to i64
  store i64 %3922, i64* %RAX, align 8, !tbaa !2428
  %3923 = icmp eq i32 %3920, 0
  %3924 = zext i1 %3923 to i8
  store i8 %3924, i8* %.pre-phi, align 1, !tbaa !2432
  %3925 = and i32 %3921, 255
  %3926 = tail call i32 @llvm.ctpop.i32(i32 %3925) #12
  %3927 = trunc i32 %3926 to i8
  %3928 = and i8 %3927, 1
  %3929 = xor i8 %3928, 1
  store i8 %3929, i8* %.pre-phi42, align 1, !tbaa !2446
  %3930 = xor i32 %3921, %3920
  %3931 = lshr i32 %3930, 4
  %3932 = trunc i32 %3931 to i8
  %3933 = and i8 %3932, 1
  store i8 %3933, i8* %.pre-phi44, align 1, !tbaa !2447
  %3934 = icmp eq i32 %3921, 0
  %3935 = zext i1 %3934 to i8
  store i8 %3935, i8* %.pre-phi46, align 1, !tbaa !2448
  %3936 = lshr i32 %3921, 31
  %3937 = trunc i32 %3936 to i8
  store i8 %3937, i8* %.pre-phi48, align 1, !tbaa !2449
  %3938 = lshr i32 %3920, 31
  %3939 = xor i32 %3936, %3938
  %3940 = add nuw nsw i32 %3939, %3938
  %3941 = icmp eq i32 %3940, 2
  %3942 = zext i1 %3941 to i8
  store i8 %3942, i8* %.pre-phi50, align 1, !tbaa !2450
  %3943 = add i64 %3667, 9
  store i64 %3943, i64* %PC, align 8
  store i32 %3921, i32* %3642, align 4
  %3944 = load i64, i64* %RBP, align 8
  %3945 = add i64 %3944, -48
  %3946 = load i64, i64* %PC, align 8
  %3947 = add i64 %3946, 7
  store i64 %3947, i64* %PC, align 8
  %3948 = inttoptr i64 %3945 to i32*
  store i32 0, i32* %3948, align 4
  %3949 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %3950 = bitcast [32 x %union.VectorReg]* %7 to float*
  %3951 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %3952 = getelementptr inbounds i8, i8* %3949, i64 4
  %3953 = bitcast i8* %3952 to float*
  %3954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3955 = bitcast i64* %3954 to float*
  %3956 = getelementptr inbounds i8, i8* %3949, i64 12
  %3957 = bitcast i8* %3956 to float*
  %3958 = bitcast %union.VectorReg* %8 to i8*
  %3959 = bitcast %union.VectorReg* %8 to float*
  %3960 = bitcast %union.VectorReg* %8 to i32*
  %3961 = getelementptr inbounds i8, i8* %3958, i64 4
  %3962 = bitcast i8* %3961 to float*
  %3963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %3964 = bitcast i64* %3963 to float*
  %3965 = getelementptr inbounds i8, i8* %3958, i64 12
  %3966 = bitcast i8* %3965 to float*
  %3967 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3968 = bitcast i64* %3963 to <2 x i32>*
  %3969 = bitcast i8* %3961 to i32*
  %3970 = bitcast i64* %3963 to i32*
  %3971 = bitcast i8* %3965 to i32*
  %3972 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %3973 = bitcast i64* %3954 to <2 x i32>*
  %3974 = bitcast i8* %3952 to i32*
  %3975 = bitcast i64* %3954 to i32*
  %3976 = bitcast i8* %3956 to i32*
  %.pre30 = load i64, i64* %PC, align 8
  br label %block_40215a

block_402289:                                     ; preds = %block_40227d
  %3977 = add i64 %132, -16
  %3978 = add i64 %168, 4
  store i64 %3978, i64* %PC, align 8
  %3979 = inttoptr i64 %3977 to i64*
  %3980 = load i64, i64* %3979, align 8
  store i64 %3980, i64* %RAX, align 8, !tbaa !2428
  %3981 = add i64 %168, 8
  store i64 %3981, i64* %PC, align 8
  %3982 = load i32, i32* %135, align 4
  %3983 = sext i32 %3982 to i64
  store i64 %3983, i64* %RCX, align 8, !tbaa !2428
  %3984 = shl nsw i64 %3983, 2
  %3985 = add i64 %3984, %3980
  %3986 = add i64 %168, 13
  store i64 %3986, i64* %PC, align 8
  %3987 = inttoptr i64 %3985 to i32*
  %3988 = load i32, i32* %3987, align 4
  store i32 %3988, i32* %3501, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3503, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3505, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3507, align 1, !tbaa !2451
  %3989 = add i64 %132, -32
  %3990 = add i64 %168, 17
  store i64 %3990, i64* %PC, align 8
  %3991 = inttoptr i64 %3989 to i64*
  %3992 = load i64, i64* %3991, align 8
  store i64 %3992, i64* %RAX, align 8, !tbaa !2428
  %3993 = add i64 %132, -44
  %3994 = add i64 %168, 20
  store i64 %3994, i64* %PC, align 8
  %3995 = inttoptr i64 %3993 to i32*
  %3996 = load i32, i32* %3995, align 4
  %3997 = add i32 %3996, -7
  %3998 = zext i32 %3997 to i64
  store i64 %3998, i64* %RDX, align 8, !tbaa !2428
  %3999 = icmp ult i32 %3996, 7
  %4000 = zext i1 %3999 to i8
  store i8 %4000, i8* %.pre-phi, align 1, !tbaa !2432
  %4001 = and i32 %3997, 255
  %4002 = tail call i32 @llvm.ctpop.i32(i32 %4001) #12
  %4003 = trunc i32 %4002 to i8
  %4004 = and i8 %4003, 1
  %4005 = xor i8 %4004, 1
  store i8 %4005, i8* %.pre-phi42, align 1, !tbaa !2446
  %4006 = xor i32 %3997, %3996
  %4007 = lshr i32 %4006, 4
  %4008 = trunc i32 %4007 to i8
  %4009 = and i8 %4008, 1
  store i8 %4009, i8* %.pre-phi44, align 1, !tbaa !2447
  %4010 = icmp eq i32 %3997, 0
  %4011 = zext i1 %4010 to i8
  store i8 %4011, i8* %.pre-phi46, align 1, !tbaa !2448
  %4012 = lshr i32 %3997, 31
  %4013 = trunc i32 %4012 to i8
  store i8 %4013, i8* %.pre-phi48, align 1, !tbaa !2449
  %4014 = lshr i32 %3996, 31
  %4015 = xor i32 %4012, %4014
  %4016 = add nuw nsw i32 %4015, %4014
  %4017 = icmp eq i32 %4016, 2
  %4018 = zext i1 %4017 to i8
  store i8 %4018, i8* %.pre-phi50, align 1, !tbaa !2450
  %4019 = sext i32 %3997 to i64
  store i64 %4019, i64* %RCX, align 8, !tbaa !2428
  %4020 = shl nsw i64 %4019, 2
  %4021 = add i64 %3992, %4020
  %4022 = add i64 %168, 31
  store i64 %4022, i64* %PC, align 8
  %4023 = inttoptr i64 %4021 to i32*
  %4024 = load i32, i32* %4023, align 4
  store i32 %4024, i32* %3510, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3512, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3514, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3516, align 1, !tbaa !2451
  %4025 = add i64 %132, -40
  %4026 = add i64 %168, 35
  store i64 %4026, i64* %PC, align 8
  %4027 = inttoptr i64 %4025 to i64*
  %4028 = load i64, i64* %4027, align 8
  store i64 %4028, i64* %RAX, align 8, !tbaa !2428
  %4029 = add i64 %132, -24
  %4030 = add i64 %168, 38
  store i64 %4030, i64* %PC, align 8
  %4031 = inttoptr i64 %4029 to i32*
  %4032 = load i32, i32* %4031, align 4
  %4033 = zext i32 %4032 to i64
  store i64 %4033, i64* %RDX, align 8, !tbaa !2428
  %4034 = add i64 %168, 41
  store i64 %4034, i64* %PC, align 8
  %4035 = load i32, i32* %3995, align 4
  %4036 = add i32 %4035, -7
  %4037 = zext i32 %4036 to i64
  store i64 %4037, i64* %RSI, align 8, !tbaa !2428
  %4038 = sext i32 %4032 to i64
  %4039 = sext i32 %4036 to i64
  %4040 = mul nsw i64 %4039, %4038
  %4041 = trunc i64 %4040 to i32
  %4042 = and i64 %4040, 4294967295
  store i64 %4042, i64* %RDX, align 8, !tbaa !2428
  %4043 = shl i64 %4040, 32
  %4044 = ashr exact i64 %4043, 32
  %4045 = icmp ne i64 %4044, %4040
  %4046 = zext i1 %4045 to i8
  store i8 %4046, i8* %.pre-phi, align 1, !tbaa !2432
  %4047 = and i32 %4041, 255
  %4048 = tail call i32 @llvm.ctpop.i32(i32 %4047) #12
  %4049 = trunc i32 %4048 to i8
  %4050 = and i8 %4049, 1
  %4051 = xor i8 %4050, 1
  store i8 %4051, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4052 = lshr i32 %4041, 31
  %4053 = trunc i32 %4052 to i8
  store i8 %4053, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4046, i8* %.pre-phi50, align 1, !tbaa !2450
  %4054 = load i64, i64* %RBP, align 8
  %4055 = add i64 %4054, -48
  %4056 = add i64 %168, 50
  store i64 %4056, i64* %PC, align 8
  %4057 = trunc i64 %4040 to i32
  %4058 = inttoptr i64 %4055 to i32*
  %4059 = load i32, i32* %4058, align 4
  %4060 = add i32 %4059, %4057
  %4061 = zext i32 %4060 to i64
  store i64 %4061, i64* %RDX, align 8, !tbaa !2428
  %4062 = icmp ult i32 %4060, %4057
  %4063 = icmp ult i32 %4060, %4059
  %4064 = or i1 %4062, %4063
  %4065 = zext i1 %4064 to i8
  store i8 %4065, i8* %.pre-phi, align 1, !tbaa !2432
  %4066 = and i32 %4060, 255
  %4067 = tail call i32 @llvm.ctpop.i32(i32 %4066) #12
  %4068 = trunc i32 %4067 to i8
  %4069 = and i8 %4068, 1
  %4070 = xor i8 %4069, 1
  store i8 %4070, i8* %.pre-phi42, align 1, !tbaa !2446
  %4071 = xor i32 %4059, %4057
  %4072 = xor i32 %4071, %4060
  %4073 = lshr i32 %4072, 4
  %4074 = trunc i32 %4073 to i8
  %4075 = and i8 %4074, 1
  store i8 %4075, i8* %.pre-phi44, align 1, !tbaa !2447
  %4076 = icmp eq i32 %4060, 0
  %4077 = zext i1 %4076 to i8
  store i8 %4077, i8* %.pre-phi46, align 1, !tbaa !2448
  %4078 = lshr i32 %4060, 31
  %4079 = trunc i32 %4078 to i8
  store i8 %4079, i8* %.pre-phi48, align 1, !tbaa !2449
  %4080 = lshr i32 %4057, 31
  %4081 = lshr i32 %4059, 31
  %4082 = xor i32 %4078, %4080
  %4083 = xor i32 %4078, %4081
  %4084 = add nuw nsw i32 %4082, %4083
  %4085 = icmp eq i32 %4084, 2
  %4086 = zext i1 %4085 to i8
  store i8 %4086, i8* %.pre-phi50, align 1, !tbaa !2450
  %4087 = sext i32 %4060 to i64
  store i64 %4087, i64* %RCX, align 8, !tbaa !2428
  %4088 = load i64, i64* %RAX, align 8
  %4089 = shl nsw i64 %4087, 2
  %4090 = add i64 %4088, %4089
  %4091 = add i64 %168, 58
  store i64 %4091, i64* %PC, align 8
  %4092 = load <2 x float>, <2 x float>* %3517, align 1
  %4093 = load <2 x i32>, <2 x i32>* %3518, align 1
  %4094 = inttoptr i64 %4090 to float*
  %4095 = load float, float* %4094, align 4
  %4096 = extractelement <2 x float> %4092, i32 0
  %4097 = fmul float %4096, %4095
  store float %4097, float* %3509, align 1, !tbaa !2451
  %4098 = bitcast <2 x float> %4092 to <2 x i32>
  %4099 = extractelement <2 x i32> %4098, i32 1
  store i32 %4099, i32* %3519, align 1, !tbaa !2451
  %4100 = extractelement <2 x i32> %4093, i32 0
  store i32 %4100, i32* %3520, align 1, !tbaa !2451
  %4101 = extractelement <2 x i32> %4093, i32 1
  store i32 %4101, i32* %3521, align 1, !tbaa !2451
  %4102 = load <2 x float>, <2 x float>* %3522, align 1
  %4103 = load <2 x i32>, <2 x i32>* %3523, align 1
  %4104 = load <2 x float>, <2 x float>* %3517, align 1
  %4105 = extractelement <2 x float> %4102, i32 0
  %4106 = extractelement <2 x float> %4104, i32 0
  %4107 = fadd float %4105, %4106
  store float %4107, float* %3500, align 1, !tbaa !2451
  %4108 = bitcast <2 x float> %4102 to <2 x i32>
  %4109 = extractelement <2 x i32> %4108, i32 1
  store i32 %4109, i32* %3524, align 1, !tbaa !2451
  %4110 = extractelement <2 x i32> %4103, i32 0
  store i32 %4110, i32* %3525, align 1, !tbaa !2451
  %4111 = extractelement <2 x i32> %4103, i32 1
  store i32 %4111, i32* %3526, align 1, !tbaa !2451
  %4112 = add i64 %4054, -32
  %4113 = add i64 %168, 66
  store i64 %4113, i64* %PC, align 8
  %4114 = inttoptr i64 %4112 to i64*
  %4115 = load i64, i64* %4114, align 8
  store i64 %4115, i64* %RAX, align 8, !tbaa !2428
  %4116 = add i64 %4054, -44
  %4117 = add i64 %168, 69
  store i64 %4117, i64* %PC, align 8
  %4118 = inttoptr i64 %4116 to i32*
  %4119 = load i32, i32* %4118, align 4
  %4120 = add i32 %4119, -6
  %4121 = zext i32 %4120 to i64
  store i64 %4121, i64* %RDX, align 8, !tbaa !2428
  %4122 = icmp ult i32 %4119, 6
  %4123 = zext i1 %4122 to i8
  store i8 %4123, i8* %.pre-phi, align 1, !tbaa !2432
  %4124 = and i32 %4120, 255
  %4125 = tail call i32 @llvm.ctpop.i32(i32 %4124) #12
  %4126 = trunc i32 %4125 to i8
  %4127 = and i8 %4126, 1
  %4128 = xor i8 %4127, 1
  store i8 %4128, i8* %.pre-phi42, align 1, !tbaa !2446
  %4129 = xor i32 %4120, %4119
  %4130 = lshr i32 %4129, 4
  %4131 = trunc i32 %4130 to i8
  %4132 = and i8 %4131, 1
  store i8 %4132, i8* %.pre-phi44, align 1, !tbaa !2447
  %4133 = icmp eq i32 %4120, 0
  %4134 = zext i1 %4133 to i8
  store i8 %4134, i8* %.pre-phi46, align 1, !tbaa !2448
  %4135 = lshr i32 %4120, 31
  %4136 = trunc i32 %4135 to i8
  store i8 %4136, i8* %.pre-phi48, align 1, !tbaa !2449
  %4137 = lshr i32 %4119, 31
  %4138 = xor i32 %4135, %4137
  %4139 = add nuw nsw i32 %4138, %4137
  %4140 = icmp eq i32 %4139, 2
  %4141 = zext i1 %4140 to i8
  store i8 %4141, i8* %.pre-phi50, align 1, !tbaa !2450
  %4142 = sext i32 %4120 to i64
  store i64 %4142, i64* %RCX, align 8, !tbaa !2428
  %4143 = shl nsw i64 %4142, 2
  %4144 = add i64 %4115, %4143
  %4145 = add i64 %168, 80
  store i64 %4145, i64* %PC, align 8
  %4146 = inttoptr i64 %4144 to i32*
  %4147 = load i32, i32* %4146, align 4
  store i32 %4147, i32* %3510, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3512, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3514, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3516, align 1, !tbaa !2451
  %4148 = load i64, i64* %RBP, align 8
  %4149 = add i64 %4148, -40
  %4150 = add i64 %168, 84
  store i64 %4150, i64* %PC, align 8
  %4151 = inttoptr i64 %4149 to i64*
  %4152 = load i64, i64* %4151, align 8
  store i64 %4152, i64* %RAX, align 8, !tbaa !2428
  %4153 = add i64 %4148, -24
  %4154 = add i64 %168, 87
  store i64 %4154, i64* %PC, align 8
  %4155 = inttoptr i64 %4153 to i32*
  %4156 = load i32, i32* %4155, align 4
  %4157 = zext i32 %4156 to i64
  store i64 %4157, i64* %RDX, align 8, !tbaa !2428
  %4158 = add i64 %4148, -44
  %4159 = add i64 %168, 90
  store i64 %4159, i64* %PC, align 8
  %4160 = inttoptr i64 %4158 to i32*
  %4161 = load i32, i32* %4160, align 4
  %4162 = add i32 %4161, -6
  %4163 = zext i32 %4162 to i64
  store i64 %4163, i64* %RSI, align 8, !tbaa !2428
  %4164 = sext i32 %4156 to i64
  %4165 = sext i32 %4162 to i64
  %4166 = mul nsw i64 %4165, %4164
  %4167 = trunc i64 %4166 to i32
  %4168 = and i64 %4166, 4294967295
  store i64 %4168, i64* %RDX, align 8, !tbaa !2428
  %4169 = shl i64 %4166, 32
  %4170 = ashr exact i64 %4169, 32
  %4171 = icmp ne i64 %4170, %4166
  %4172 = zext i1 %4171 to i8
  store i8 %4172, i8* %.pre-phi, align 1, !tbaa !2432
  %4173 = and i32 %4167, 255
  %4174 = tail call i32 @llvm.ctpop.i32(i32 %4173) #12
  %4175 = trunc i32 %4174 to i8
  %4176 = and i8 %4175, 1
  %4177 = xor i8 %4176, 1
  store i8 %4177, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4178 = lshr i32 %4167, 31
  %4179 = trunc i32 %4178 to i8
  store i8 %4179, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4172, i8* %.pre-phi50, align 1, !tbaa !2450
  %4180 = add i64 %4148, -48
  %4181 = add i64 %168, 99
  store i64 %4181, i64* %PC, align 8
  %4182 = trunc i64 %4166 to i32
  %4183 = inttoptr i64 %4180 to i32*
  %4184 = load i32, i32* %4183, align 4
  %4185 = add i32 %4184, %4182
  %4186 = zext i32 %4185 to i64
  store i64 %4186, i64* %RDX, align 8, !tbaa !2428
  %4187 = icmp ult i32 %4185, %4182
  %4188 = icmp ult i32 %4185, %4184
  %4189 = or i1 %4187, %4188
  %4190 = zext i1 %4189 to i8
  store i8 %4190, i8* %.pre-phi, align 1, !tbaa !2432
  %4191 = and i32 %4185, 255
  %4192 = tail call i32 @llvm.ctpop.i32(i32 %4191) #12
  %4193 = trunc i32 %4192 to i8
  %4194 = and i8 %4193, 1
  %4195 = xor i8 %4194, 1
  store i8 %4195, i8* %.pre-phi42, align 1, !tbaa !2446
  %4196 = xor i32 %4184, %4182
  %4197 = xor i32 %4196, %4185
  %4198 = lshr i32 %4197, 4
  %4199 = trunc i32 %4198 to i8
  %4200 = and i8 %4199, 1
  store i8 %4200, i8* %.pre-phi44, align 1, !tbaa !2447
  %4201 = icmp eq i32 %4185, 0
  %4202 = zext i1 %4201 to i8
  store i8 %4202, i8* %.pre-phi46, align 1, !tbaa !2448
  %4203 = lshr i32 %4185, 31
  %4204 = trunc i32 %4203 to i8
  store i8 %4204, i8* %.pre-phi48, align 1, !tbaa !2449
  %4205 = lshr i32 %4182, 31
  %4206 = lshr i32 %4184, 31
  %4207 = xor i32 %4203, %4205
  %4208 = xor i32 %4203, %4206
  %4209 = add nuw nsw i32 %4207, %4208
  %4210 = icmp eq i32 %4209, 2
  %4211 = zext i1 %4210 to i8
  store i8 %4211, i8* %.pre-phi50, align 1, !tbaa !2450
  %4212 = sext i32 %4185 to i64
  store i64 %4212, i64* %RCX, align 8, !tbaa !2428
  %4213 = load i64, i64* %RAX, align 8
  %4214 = shl nsw i64 %4212, 2
  %4215 = add i64 %4213, %4214
  %4216 = add i64 %168, 107
  store i64 %4216, i64* %PC, align 8
  %4217 = load <2 x float>, <2 x float>* %3517, align 1
  %4218 = load <2 x i32>, <2 x i32>* %3518, align 1
  %4219 = inttoptr i64 %4215 to float*
  %4220 = load float, float* %4219, align 4
  %4221 = extractelement <2 x float> %4217, i32 0
  %4222 = fmul float %4221, %4220
  store float %4222, float* %3509, align 1, !tbaa !2451
  %4223 = bitcast <2 x float> %4217 to <2 x i32>
  %4224 = extractelement <2 x i32> %4223, i32 1
  store i32 %4224, i32* %3519, align 1, !tbaa !2451
  %4225 = extractelement <2 x i32> %4218, i32 0
  store i32 %4225, i32* %3520, align 1, !tbaa !2451
  %4226 = extractelement <2 x i32> %4218, i32 1
  store i32 %4226, i32* %3521, align 1, !tbaa !2451
  %4227 = load <2 x float>, <2 x float>* %3522, align 1
  %4228 = load <2 x i32>, <2 x i32>* %3523, align 1
  %4229 = load <2 x float>, <2 x float>* %3517, align 1
  %4230 = extractelement <2 x float> %4227, i32 0
  %4231 = extractelement <2 x float> %4229, i32 0
  %4232 = fadd float %4230, %4231
  store float %4232, float* %3500, align 1, !tbaa !2451
  %4233 = bitcast <2 x float> %4227 to <2 x i32>
  %4234 = extractelement <2 x i32> %4233, i32 1
  store i32 %4234, i32* %3524, align 1, !tbaa !2451
  %4235 = extractelement <2 x i32> %4228, i32 0
  store i32 %4235, i32* %3525, align 1, !tbaa !2451
  %4236 = extractelement <2 x i32> %4228, i32 1
  store i32 %4236, i32* %3526, align 1, !tbaa !2451
  %4237 = load i64, i64* %RBP, align 8
  %4238 = add i64 %4237, -32
  %4239 = add i64 %168, 115
  store i64 %4239, i64* %PC, align 8
  %4240 = inttoptr i64 %4238 to i64*
  %4241 = load i64, i64* %4240, align 8
  store i64 %4241, i64* %RAX, align 8, !tbaa !2428
  %4242 = add i64 %4237, -44
  %4243 = add i64 %168, 118
  store i64 %4243, i64* %PC, align 8
  %4244 = inttoptr i64 %4242 to i32*
  %4245 = load i32, i32* %4244, align 4
  %4246 = add i32 %4245, -5
  %4247 = zext i32 %4246 to i64
  store i64 %4247, i64* %RDX, align 8, !tbaa !2428
  %4248 = icmp ult i32 %4245, 5
  %4249 = zext i1 %4248 to i8
  store i8 %4249, i8* %.pre-phi, align 1, !tbaa !2432
  %4250 = and i32 %4246, 255
  %4251 = tail call i32 @llvm.ctpop.i32(i32 %4250) #12
  %4252 = trunc i32 %4251 to i8
  %4253 = and i8 %4252, 1
  %4254 = xor i8 %4253, 1
  store i8 %4254, i8* %.pre-phi42, align 1, !tbaa !2446
  %4255 = xor i32 %4246, %4245
  %4256 = lshr i32 %4255, 4
  %4257 = trunc i32 %4256 to i8
  %4258 = and i8 %4257, 1
  store i8 %4258, i8* %.pre-phi44, align 1, !tbaa !2447
  %4259 = icmp eq i32 %4246, 0
  %4260 = zext i1 %4259 to i8
  store i8 %4260, i8* %.pre-phi46, align 1, !tbaa !2448
  %4261 = lshr i32 %4246, 31
  %4262 = trunc i32 %4261 to i8
  store i8 %4262, i8* %.pre-phi48, align 1, !tbaa !2449
  %4263 = lshr i32 %4245, 31
  %4264 = xor i32 %4261, %4263
  %4265 = add nuw nsw i32 %4264, %4263
  %4266 = icmp eq i32 %4265, 2
  %4267 = zext i1 %4266 to i8
  store i8 %4267, i8* %.pre-phi50, align 1, !tbaa !2450
  %4268 = sext i32 %4246 to i64
  store i64 %4268, i64* %RCX, align 8, !tbaa !2428
  %4269 = shl nsw i64 %4268, 2
  %4270 = add i64 %4241, %4269
  %4271 = add i64 %168, 129
  store i64 %4271, i64* %PC, align 8
  %4272 = inttoptr i64 %4270 to i32*
  %4273 = load i32, i32* %4272, align 4
  store i32 %4273, i32* %3510, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3512, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3514, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3516, align 1, !tbaa !2451
  %4274 = add i64 %4237, -40
  %4275 = add i64 %168, 133
  store i64 %4275, i64* %PC, align 8
  %4276 = inttoptr i64 %4274 to i64*
  %4277 = load i64, i64* %4276, align 8
  store i64 %4277, i64* %RAX, align 8, !tbaa !2428
  %4278 = add i64 %4237, -24
  %4279 = add i64 %168, 136
  store i64 %4279, i64* %PC, align 8
  %4280 = inttoptr i64 %4278 to i32*
  %4281 = load i32, i32* %4280, align 4
  %4282 = zext i32 %4281 to i64
  store i64 %4282, i64* %RDX, align 8, !tbaa !2428
  %4283 = add i64 %168, 139
  store i64 %4283, i64* %PC, align 8
  %4284 = load i32, i32* %4244, align 4
  %4285 = add i32 %4284, -5
  %4286 = zext i32 %4285 to i64
  store i64 %4286, i64* %RSI, align 8, !tbaa !2428
  %4287 = sext i32 %4281 to i64
  %4288 = sext i32 %4285 to i64
  %4289 = mul nsw i64 %4288, %4287
  %4290 = trunc i64 %4289 to i32
  %4291 = and i64 %4289, 4294967295
  store i64 %4291, i64* %RDX, align 8, !tbaa !2428
  %4292 = shl i64 %4289, 32
  %4293 = ashr exact i64 %4292, 32
  %4294 = icmp ne i64 %4293, %4289
  %4295 = zext i1 %4294 to i8
  store i8 %4295, i8* %.pre-phi, align 1, !tbaa !2432
  %4296 = and i32 %4290, 255
  %4297 = tail call i32 @llvm.ctpop.i32(i32 %4296) #12
  %4298 = trunc i32 %4297 to i8
  %4299 = and i8 %4298, 1
  %4300 = xor i8 %4299, 1
  store i8 %4300, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4301 = lshr i32 %4290, 31
  %4302 = trunc i32 %4301 to i8
  store i8 %4302, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4295, i8* %.pre-phi50, align 1, !tbaa !2450
  %4303 = load i64, i64* %RBP, align 8
  %4304 = add i64 %4303, -48
  %4305 = add i64 %168, 148
  store i64 %4305, i64* %PC, align 8
  %4306 = trunc i64 %4289 to i32
  %4307 = inttoptr i64 %4304 to i32*
  %4308 = load i32, i32* %4307, align 4
  %4309 = add i32 %4308, %4306
  %4310 = zext i32 %4309 to i64
  store i64 %4310, i64* %RDX, align 8, !tbaa !2428
  %4311 = icmp ult i32 %4309, %4306
  %4312 = icmp ult i32 %4309, %4308
  %4313 = or i1 %4311, %4312
  %4314 = zext i1 %4313 to i8
  store i8 %4314, i8* %.pre-phi, align 1, !tbaa !2432
  %4315 = and i32 %4309, 255
  %4316 = tail call i32 @llvm.ctpop.i32(i32 %4315) #12
  %4317 = trunc i32 %4316 to i8
  %4318 = and i8 %4317, 1
  %4319 = xor i8 %4318, 1
  store i8 %4319, i8* %.pre-phi42, align 1, !tbaa !2446
  %4320 = xor i32 %4308, %4306
  %4321 = xor i32 %4320, %4309
  %4322 = lshr i32 %4321, 4
  %4323 = trunc i32 %4322 to i8
  %4324 = and i8 %4323, 1
  store i8 %4324, i8* %.pre-phi44, align 1, !tbaa !2447
  %4325 = icmp eq i32 %4309, 0
  %4326 = zext i1 %4325 to i8
  store i8 %4326, i8* %.pre-phi46, align 1, !tbaa !2448
  %4327 = lshr i32 %4309, 31
  %4328 = trunc i32 %4327 to i8
  store i8 %4328, i8* %.pre-phi48, align 1, !tbaa !2449
  %4329 = lshr i32 %4306, 31
  %4330 = lshr i32 %4308, 31
  %4331 = xor i32 %4327, %4329
  %4332 = xor i32 %4327, %4330
  %4333 = add nuw nsw i32 %4331, %4332
  %4334 = icmp eq i32 %4333, 2
  %4335 = zext i1 %4334 to i8
  store i8 %4335, i8* %.pre-phi50, align 1, !tbaa !2450
  %4336 = sext i32 %4309 to i64
  store i64 %4336, i64* %RCX, align 8, !tbaa !2428
  %4337 = load i64, i64* %RAX, align 8
  %4338 = shl nsw i64 %4336, 2
  %4339 = add i64 %4337, %4338
  %4340 = add i64 %168, 156
  store i64 %4340, i64* %PC, align 8
  %4341 = load <2 x float>, <2 x float>* %3517, align 1
  %4342 = load <2 x i32>, <2 x i32>* %3518, align 1
  %4343 = inttoptr i64 %4339 to float*
  %4344 = load float, float* %4343, align 4
  %4345 = extractelement <2 x float> %4341, i32 0
  %4346 = fmul float %4345, %4344
  store float %4346, float* %3509, align 1, !tbaa !2451
  %4347 = bitcast <2 x float> %4341 to <2 x i32>
  %4348 = extractelement <2 x i32> %4347, i32 1
  store i32 %4348, i32* %3519, align 1, !tbaa !2451
  %4349 = extractelement <2 x i32> %4342, i32 0
  store i32 %4349, i32* %3520, align 1, !tbaa !2451
  %4350 = extractelement <2 x i32> %4342, i32 1
  store i32 %4350, i32* %3521, align 1, !tbaa !2451
  %4351 = load <2 x float>, <2 x float>* %3522, align 1
  %4352 = load <2 x i32>, <2 x i32>* %3523, align 1
  %4353 = load <2 x float>, <2 x float>* %3517, align 1
  %4354 = extractelement <2 x float> %4351, i32 0
  %4355 = extractelement <2 x float> %4353, i32 0
  %4356 = fadd float %4354, %4355
  store float %4356, float* %3500, align 1, !tbaa !2451
  %4357 = bitcast <2 x float> %4351 to <2 x i32>
  %4358 = extractelement <2 x i32> %4357, i32 1
  store i32 %4358, i32* %3524, align 1, !tbaa !2451
  %4359 = extractelement <2 x i32> %4352, i32 0
  store i32 %4359, i32* %3525, align 1, !tbaa !2451
  %4360 = extractelement <2 x i32> %4352, i32 1
  store i32 %4360, i32* %3526, align 1, !tbaa !2451
  %4361 = add i64 %4303, -32
  %4362 = add i64 %168, 164
  store i64 %4362, i64* %PC, align 8
  %4363 = inttoptr i64 %4361 to i64*
  %4364 = load i64, i64* %4363, align 8
  store i64 %4364, i64* %RAX, align 8, !tbaa !2428
  %4365 = add i64 %4303, -44
  %4366 = add i64 %168, 167
  store i64 %4366, i64* %PC, align 8
  %4367 = inttoptr i64 %4365 to i32*
  %4368 = load i32, i32* %4367, align 4
  %4369 = add i32 %4368, -4
  %4370 = zext i32 %4369 to i64
  store i64 %4370, i64* %RDX, align 8, !tbaa !2428
  %4371 = icmp ult i32 %4368, 4
  %4372 = zext i1 %4371 to i8
  store i8 %4372, i8* %.pre-phi, align 1, !tbaa !2432
  %4373 = and i32 %4369, 255
  %4374 = tail call i32 @llvm.ctpop.i32(i32 %4373) #12
  %4375 = trunc i32 %4374 to i8
  %4376 = and i8 %4375, 1
  %4377 = xor i8 %4376, 1
  store i8 %4377, i8* %.pre-phi42, align 1, !tbaa !2446
  %4378 = xor i32 %4369, %4368
  %4379 = lshr i32 %4378, 4
  %4380 = trunc i32 %4379 to i8
  %4381 = and i8 %4380, 1
  store i8 %4381, i8* %.pre-phi44, align 1, !tbaa !2447
  %4382 = icmp eq i32 %4369, 0
  %4383 = zext i1 %4382 to i8
  store i8 %4383, i8* %.pre-phi46, align 1, !tbaa !2448
  %4384 = lshr i32 %4369, 31
  %4385 = trunc i32 %4384 to i8
  store i8 %4385, i8* %.pre-phi48, align 1, !tbaa !2449
  %4386 = lshr i32 %4368, 31
  %4387 = xor i32 %4384, %4386
  %4388 = add nuw nsw i32 %4387, %4386
  %4389 = icmp eq i32 %4388, 2
  %4390 = zext i1 %4389 to i8
  store i8 %4390, i8* %.pre-phi50, align 1, !tbaa !2450
  %4391 = sext i32 %4369 to i64
  store i64 %4391, i64* %RCX, align 8, !tbaa !2428
  %4392 = shl nsw i64 %4391, 2
  %4393 = add i64 %4364, %4392
  %4394 = add i64 %168, 178
  store i64 %4394, i64* %PC, align 8
  %4395 = inttoptr i64 %4393 to i32*
  %4396 = load i32, i32* %4395, align 4
  store i32 %4396, i32* %3510, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3512, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3514, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3516, align 1, !tbaa !2451
  %4397 = load i64, i64* %RBP, align 8
  %4398 = add i64 %4397, -40
  %4399 = add i64 %168, 182
  store i64 %4399, i64* %PC, align 8
  %4400 = inttoptr i64 %4398 to i64*
  %4401 = load i64, i64* %4400, align 8
  store i64 %4401, i64* %RAX, align 8, !tbaa !2428
  %4402 = add i64 %4397, -24
  %4403 = add i64 %168, 185
  store i64 %4403, i64* %PC, align 8
  %4404 = inttoptr i64 %4402 to i32*
  %4405 = load i32, i32* %4404, align 4
  %4406 = zext i32 %4405 to i64
  store i64 %4406, i64* %RDX, align 8, !tbaa !2428
  %4407 = add i64 %4397, -44
  %4408 = add i64 %168, 188
  store i64 %4408, i64* %PC, align 8
  %4409 = inttoptr i64 %4407 to i32*
  %4410 = load i32, i32* %4409, align 4
  %4411 = add i32 %4410, -4
  %4412 = zext i32 %4411 to i64
  store i64 %4412, i64* %RSI, align 8, !tbaa !2428
  %4413 = sext i32 %4405 to i64
  %4414 = sext i32 %4411 to i64
  %4415 = mul nsw i64 %4414, %4413
  %4416 = trunc i64 %4415 to i32
  %4417 = and i64 %4415, 4294967295
  store i64 %4417, i64* %RDX, align 8, !tbaa !2428
  %4418 = shl i64 %4415, 32
  %4419 = ashr exact i64 %4418, 32
  %4420 = icmp ne i64 %4419, %4415
  %4421 = zext i1 %4420 to i8
  store i8 %4421, i8* %.pre-phi, align 1, !tbaa !2432
  %4422 = and i32 %4416, 255
  %4423 = tail call i32 @llvm.ctpop.i32(i32 %4422) #12
  %4424 = trunc i32 %4423 to i8
  %4425 = and i8 %4424, 1
  %4426 = xor i8 %4425, 1
  store i8 %4426, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4427 = lshr i32 %4416, 31
  %4428 = trunc i32 %4427 to i8
  store i8 %4428, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4421, i8* %.pre-phi50, align 1, !tbaa !2450
  %4429 = add i64 %4397, -48
  %4430 = add i64 %168, 197
  store i64 %4430, i64* %PC, align 8
  %4431 = trunc i64 %4415 to i32
  %4432 = inttoptr i64 %4429 to i32*
  %4433 = load i32, i32* %4432, align 4
  %4434 = add i32 %4433, %4431
  %4435 = zext i32 %4434 to i64
  store i64 %4435, i64* %RDX, align 8, !tbaa !2428
  %4436 = icmp ult i32 %4434, %4431
  %4437 = icmp ult i32 %4434, %4433
  %4438 = or i1 %4436, %4437
  %4439 = zext i1 %4438 to i8
  store i8 %4439, i8* %.pre-phi, align 1, !tbaa !2432
  %4440 = and i32 %4434, 255
  %4441 = tail call i32 @llvm.ctpop.i32(i32 %4440) #12
  %4442 = trunc i32 %4441 to i8
  %4443 = and i8 %4442, 1
  %4444 = xor i8 %4443, 1
  store i8 %4444, i8* %.pre-phi42, align 1, !tbaa !2446
  %4445 = xor i32 %4433, %4431
  %4446 = xor i32 %4445, %4434
  %4447 = lshr i32 %4446, 4
  %4448 = trunc i32 %4447 to i8
  %4449 = and i8 %4448, 1
  store i8 %4449, i8* %.pre-phi44, align 1, !tbaa !2447
  %4450 = icmp eq i32 %4434, 0
  %4451 = zext i1 %4450 to i8
  store i8 %4451, i8* %.pre-phi46, align 1, !tbaa !2448
  %4452 = lshr i32 %4434, 31
  %4453 = trunc i32 %4452 to i8
  store i8 %4453, i8* %.pre-phi48, align 1, !tbaa !2449
  %4454 = lshr i32 %4431, 31
  %4455 = lshr i32 %4433, 31
  %4456 = xor i32 %4452, %4454
  %4457 = xor i32 %4452, %4455
  %4458 = add nuw nsw i32 %4456, %4457
  %4459 = icmp eq i32 %4458, 2
  %4460 = zext i1 %4459 to i8
  store i8 %4460, i8* %.pre-phi50, align 1, !tbaa !2450
  %4461 = sext i32 %4434 to i64
  store i64 %4461, i64* %RCX, align 8, !tbaa !2428
  %4462 = load i64, i64* %RAX, align 8
  %4463 = shl nsw i64 %4461, 2
  %4464 = add i64 %4462, %4463
  %4465 = add i64 %168, 205
  store i64 %4465, i64* %PC, align 8
  %4466 = load <2 x float>, <2 x float>* %3517, align 1
  %4467 = load <2 x i32>, <2 x i32>* %3518, align 1
  %4468 = inttoptr i64 %4464 to float*
  %4469 = load float, float* %4468, align 4
  %4470 = extractelement <2 x float> %4466, i32 0
  %4471 = fmul float %4470, %4469
  store float %4471, float* %3509, align 1, !tbaa !2451
  %4472 = bitcast <2 x float> %4466 to <2 x i32>
  %4473 = extractelement <2 x i32> %4472, i32 1
  store i32 %4473, i32* %3519, align 1, !tbaa !2451
  %4474 = extractelement <2 x i32> %4467, i32 0
  store i32 %4474, i32* %3520, align 1, !tbaa !2451
  %4475 = extractelement <2 x i32> %4467, i32 1
  store i32 %4475, i32* %3521, align 1, !tbaa !2451
  %4476 = load <2 x float>, <2 x float>* %3522, align 1
  %4477 = load <2 x i32>, <2 x i32>* %3523, align 1
  %4478 = load <2 x float>, <2 x float>* %3517, align 1
  %4479 = extractelement <2 x float> %4476, i32 0
  %4480 = extractelement <2 x float> %4478, i32 0
  %4481 = fadd float %4479, %4480
  store float %4481, float* %3500, align 1, !tbaa !2451
  %4482 = bitcast <2 x float> %4476 to <2 x i32>
  %4483 = extractelement <2 x i32> %4482, i32 1
  store i32 %4483, i32* %3524, align 1, !tbaa !2451
  %4484 = extractelement <2 x i32> %4477, i32 0
  store i32 %4484, i32* %3525, align 1, !tbaa !2451
  %4485 = extractelement <2 x i32> %4477, i32 1
  store i32 %4485, i32* %3526, align 1, !tbaa !2451
  %4486 = load i64, i64* %RBP, align 8
  %4487 = add i64 %4486, -32
  %4488 = add i64 %168, 213
  store i64 %4488, i64* %PC, align 8
  %4489 = inttoptr i64 %4487 to i64*
  %4490 = load i64, i64* %4489, align 8
  store i64 %4490, i64* %RAX, align 8, !tbaa !2428
  %4491 = add i64 %4486, -44
  %4492 = add i64 %168, 216
  store i64 %4492, i64* %PC, align 8
  %4493 = inttoptr i64 %4491 to i32*
  %4494 = load i32, i32* %4493, align 4
  %4495 = add i32 %4494, -3
  %4496 = zext i32 %4495 to i64
  store i64 %4496, i64* %RDX, align 8, !tbaa !2428
  %4497 = icmp ult i32 %4494, 3
  %4498 = zext i1 %4497 to i8
  store i8 %4498, i8* %.pre-phi, align 1, !tbaa !2432
  %4499 = and i32 %4495, 255
  %4500 = tail call i32 @llvm.ctpop.i32(i32 %4499) #12
  %4501 = trunc i32 %4500 to i8
  %4502 = and i8 %4501, 1
  %4503 = xor i8 %4502, 1
  store i8 %4503, i8* %.pre-phi42, align 1, !tbaa !2446
  %4504 = xor i32 %4495, %4494
  %4505 = lshr i32 %4504, 4
  %4506 = trunc i32 %4505 to i8
  %4507 = and i8 %4506, 1
  store i8 %4507, i8* %.pre-phi44, align 1, !tbaa !2447
  %4508 = icmp eq i32 %4495, 0
  %4509 = zext i1 %4508 to i8
  store i8 %4509, i8* %.pre-phi46, align 1, !tbaa !2448
  %4510 = lshr i32 %4495, 31
  %4511 = trunc i32 %4510 to i8
  store i8 %4511, i8* %.pre-phi48, align 1, !tbaa !2449
  %4512 = lshr i32 %4494, 31
  %4513 = xor i32 %4510, %4512
  %4514 = add nuw nsw i32 %4513, %4512
  %4515 = icmp eq i32 %4514, 2
  %4516 = zext i1 %4515 to i8
  store i8 %4516, i8* %.pre-phi50, align 1, !tbaa !2450
  %4517 = sext i32 %4495 to i64
  store i64 %4517, i64* %RCX, align 8, !tbaa !2428
  %4518 = shl nsw i64 %4517, 2
  %4519 = add i64 %4490, %4518
  %4520 = add i64 %168, 227
  store i64 %4520, i64* %PC, align 8
  %4521 = inttoptr i64 %4519 to i32*
  %4522 = load i32, i32* %4521, align 4
  store i32 %4522, i32* %3510, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3512, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3514, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3516, align 1, !tbaa !2451
  %4523 = add i64 %4486, -40
  %4524 = add i64 %168, 231
  store i64 %4524, i64* %PC, align 8
  %4525 = inttoptr i64 %4523 to i64*
  %4526 = load i64, i64* %4525, align 8
  store i64 %4526, i64* %RAX, align 8, !tbaa !2428
  %4527 = add i64 %4486, -24
  %4528 = add i64 %168, 234
  store i64 %4528, i64* %PC, align 8
  %4529 = inttoptr i64 %4527 to i32*
  %4530 = load i32, i32* %4529, align 4
  %4531 = zext i32 %4530 to i64
  store i64 %4531, i64* %RDX, align 8, !tbaa !2428
  %4532 = add i64 %168, 237
  store i64 %4532, i64* %PC, align 8
  %4533 = load i32, i32* %4493, align 4
  %4534 = add i32 %4533, -3
  %4535 = zext i32 %4534 to i64
  store i64 %4535, i64* %RSI, align 8, !tbaa !2428
  %4536 = sext i32 %4530 to i64
  %4537 = sext i32 %4534 to i64
  %4538 = mul nsw i64 %4537, %4536
  %4539 = trunc i64 %4538 to i32
  %4540 = and i64 %4538, 4294967295
  store i64 %4540, i64* %RDX, align 8, !tbaa !2428
  %4541 = shl i64 %4538, 32
  %4542 = ashr exact i64 %4541, 32
  %4543 = icmp ne i64 %4542, %4538
  %4544 = zext i1 %4543 to i8
  store i8 %4544, i8* %.pre-phi, align 1, !tbaa !2432
  %4545 = and i32 %4539, 255
  %4546 = tail call i32 @llvm.ctpop.i32(i32 %4545) #12
  %4547 = trunc i32 %4546 to i8
  %4548 = and i8 %4547, 1
  %4549 = xor i8 %4548, 1
  store i8 %4549, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4550 = lshr i32 %4539, 31
  %4551 = trunc i32 %4550 to i8
  store i8 %4551, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4544, i8* %.pre-phi50, align 1, !tbaa !2450
  %4552 = load i64, i64* %RBP, align 8
  %4553 = add i64 %4552, -48
  %4554 = add i64 %168, 246
  store i64 %4554, i64* %PC, align 8
  %4555 = trunc i64 %4538 to i32
  %4556 = inttoptr i64 %4553 to i32*
  %4557 = load i32, i32* %4556, align 4
  %4558 = add i32 %4557, %4555
  %4559 = zext i32 %4558 to i64
  store i64 %4559, i64* %RDX, align 8, !tbaa !2428
  %4560 = icmp ult i32 %4558, %4555
  %4561 = icmp ult i32 %4558, %4557
  %4562 = or i1 %4560, %4561
  %4563 = zext i1 %4562 to i8
  store i8 %4563, i8* %.pre-phi, align 1, !tbaa !2432
  %4564 = and i32 %4558, 255
  %4565 = tail call i32 @llvm.ctpop.i32(i32 %4564) #12
  %4566 = trunc i32 %4565 to i8
  %4567 = and i8 %4566, 1
  %4568 = xor i8 %4567, 1
  store i8 %4568, i8* %.pre-phi42, align 1, !tbaa !2446
  %4569 = xor i32 %4557, %4555
  %4570 = xor i32 %4569, %4558
  %4571 = lshr i32 %4570, 4
  %4572 = trunc i32 %4571 to i8
  %4573 = and i8 %4572, 1
  store i8 %4573, i8* %.pre-phi44, align 1, !tbaa !2447
  %4574 = icmp eq i32 %4558, 0
  %4575 = zext i1 %4574 to i8
  store i8 %4575, i8* %.pre-phi46, align 1, !tbaa !2448
  %4576 = lshr i32 %4558, 31
  %4577 = trunc i32 %4576 to i8
  store i8 %4577, i8* %.pre-phi48, align 1, !tbaa !2449
  %4578 = lshr i32 %4555, 31
  %4579 = lshr i32 %4557, 31
  %4580 = xor i32 %4576, %4578
  %4581 = xor i32 %4576, %4579
  %4582 = add nuw nsw i32 %4580, %4581
  %4583 = icmp eq i32 %4582, 2
  %4584 = zext i1 %4583 to i8
  store i8 %4584, i8* %.pre-phi50, align 1, !tbaa !2450
  %4585 = sext i32 %4558 to i64
  store i64 %4585, i64* %RCX, align 8, !tbaa !2428
  %4586 = load i64, i64* %RAX, align 8
  %4587 = shl nsw i64 %4585, 2
  %4588 = add i64 %4586, %4587
  %4589 = add i64 %168, 254
  store i64 %4589, i64* %PC, align 8
  %4590 = load <2 x float>, <2 x float>* %3517, align 1
  %4591 = load <2 x i32>, <2 x i32>* %3518, align 1
  %4592 = inttoptr i64 %4588 to float*
  %4593 = load float, float* %4592, align 4
  %4594 = extractelement <2 x float> %4590, i32 0
  %4595 = fmul float %4594, %4593
  store float %4595, float* %3509, align 1, !tbaa !2451
  %4596 = bitcast <2 x float> %4590 to <2 x i32>
  %4597 = extractelement <2 x i32> %4596, i32 1
  store i32 %4597, i32* %3519, align 1, !tbaa !2451
  %4598 = extractelement <2 x i32> %4591, i32 0
  store i32 %4598, i32* %3520, align 1, !tbaa !2451
  %4599 = extractelement <2 x i32> %4591, i32 1
  store i32 %4599, i32* %3521, align 1, !tbaa !2451
  %4600 = load <2 x float>, <2 x float>* %3522, align 1
  %4601 = load <2 x i32>, <2 x i32>* %3523, align 1
  %4602 = load <2 x float>, <2 x float>* %3517, align 1
  %4603 = extractelement <2 x float> %4600, i32 0
  %4604 = extractelement <2 x float> %4602, i32 0
  %4605 = fadd float %4603, %4604
  store float %4605, float* %3500, align 1, !tbaa !2451
  %4606 = bitcast <2 x float> %4600 to <2 x i32>
  %4607 = extractelement <2 x i32> %4606, i32 1
  store i32 %4607, i32* %3524, align 1, !tbaa !2451
  %4608 = extractelement <2 x i32> %4601, i32 0
  store i32 %4608, i32* %3525, align 1, !tbaa !2451
  %4609 = extractelement <2 x i32> %4601, i32 1
  store i32 %4609, i32* %3526, align 1, !tbaa !2451
  %4610 = add i64 %4552, -32
  %4611 = add i64 %168, 262
  store i64 %4611, i64* %PC, align 8
  %4612 = inttoptr i64 %4610 to i64*
  %4613 = load i64, i64* %4612, align 8
  store i64 %4613, i64* %RAX, align 8, !tbaa !2428
  %4614 = add i64 %4552, -44
  %4615 = add i64 %168, 265
  store i64 %4615, i64* %PC, align 8
  %4616 = inttoptr i64 %4614 to i32*
  %4617 = load i32, i32* %4616, align 4
  %4618 = add i32 %4617, -2
  %4619 = zext i32 %4618 to i64
  store i64 %4619, i64* %RDX, align 8, !tbaa !2428
  %4620 = icmp ult i32 %4617, 2
  %4621 = zext i1 %4620 to i8
  store i8 %4621, i8* %.pre-phi, align 1, !tbaa !2432
  %4622 = and i32 %4618, 255
  %4623 = tail call i32 @llvm.ctpop.i32(i32 %4622) #12
  %4624 = trunc i32 %4623 to i8
  %4625 = and i8 %4624, 1
  %4626 = xor i8 %4625, 1
  store i8 %4626, i8* %.pre-phi42, align 1, !tbaa !2446
  %4627 = xor i32 %4618, %4617
  %4628 = lshr i32 %4627, 4
  %4629 = trunc i32 %4628 to i8
  %4630 = and i8 %4629, 1
  store i8 %4630, i8* %.pre-phi44, align 1, !tbaa !2447
  %4631 = icmp eq i32 %4618, 0
  %4632 = zext i1 %4631 to i8
  store i8 %4632, i8* %.pre-phi46, align 1, !tbaa !2448
  %4633 = lshr i32 %4618, 31
  %4634 = trunc i32 %4633 to i8
  store i8 %4634, i8* %.pre-phi48, align 1, !tbaa !2449
  %4635 = lshr i32 %4617, 31
  %4636 = xor i32 %4633, %4635
  %4637 = add nuw nsw i32 %4636, %4635
  %4638 = icmp eq i32 %4637, 2
  %4639 = zext i1 %4638 to i8
  store i8 %4639, i8* %.pre-phi50, align 1, !tbaa !2450
  %4640 = sext i32 %4618 to i64
  store i64 %4640, i64* %RCX, align 8, !tbaa !2428
  %4641 = shl nsw i64 %4640, 2
  %4642 = add i64 %4613, %4641
  %4643 = add i64 %168, 276
  store i64 %4643, i64* %PC, align 8
  %4644 = inttoptr i64 %4642 to i32*
  %4645 = load i32, i32* %4644, align 4
  store i32 %4645, i32* %3510, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3512, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3514, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3516, align 1, !tbaa !2451
  %4646 = load i64, i64* %RBP, align 8
  %4647 = add i64 %4646, -40
  %4648 = add i64 %168, 280
  store i64 %4648, i64* %PC, align 8
  %4649 = inttoptr i64 %4647 to i64*
  %4650 = load i64, i64* %4649, align 8
  store i64 %4650, i64* %RAX, align 8, !tbaa !2428
  %4651 = add i64 %4646, -24
  %4652 = add i64 %168, 283
  store i64 %4652, i64* %PC, align 8
  %4653 = inttoptr i64 %4651 to i32*
  %4654 = load i32, i32* %4653, align 4
  %4655 = zext i32 %4654 to i64
  store i64 %4655, i64* %RDX, align 8, !tbaa !2428
  %4656 = add i64 %4646, -44
  %4657 = add i64 %168, 286
  store i64 %4657, i64* %PC, align 8
  %4658 = inttoptr i64 %4656 to i32*
  %4659 = load i32, i32* %4658, align 4
  %4660 = add i32 %4659, -2
  %4661 = zext i32 %4660 to i64
  store i64 %4661, i64* %RSI, align 8, !tbaa !2428
  %4662 = sext i32 %4654 to i64
  %4663 = sext i32 %4660 to i64
  %4664 = mul nsw i64 %4663, %4662
  %4665 = trunc i64 %4664 to i32
  %4666 = and i64 %4664, 4294967295
  store i64 %4666, i64* %RDX, align 8, !tbaa !2428
  %4667 = shl i64 %4664, 32
  %4668 = ashr exact i64 %4667, 32
  %4669 = icmp ne i64 %4668, %4664
  %4670 = zext i1 %4669 to i8
  store i8 %4670, i8* %.pre-phi, align 1, !tbaa !2432
  %4671 = and i32 %4665, 255
  %4672 = tail call i32 @llvm.ctpop.i32(i32 %4671) #12
  %4673 = trunc i32 %4672 to i8
  %4674 = and i8 %4673, 1
  %4675 = xor i8 %4674, 1
  store i8 %4675, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4676 = lshr i32 %4665, 31
  %4677 = trunc i32 %4676 to i8
  store i8 %4677, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4670, i8* %.pre-phi50, align 1, !tbaa !2450
  %4678 = add i64 %4646, -48
  %4679 = add i64 %168, 295
  store i64 %4679, i64* %PC, align 8
  %4680 = trunc i64 %4664 to i32
  %4681 = inttoptr i64 %4678 to i32*
  %4682 = load i32, i32* %4681, align 4
  %4683 = add i32 %4682, %4680
  %4684 = zext i32 %4683 to i64
  store i64 %4684, i64* %RDX, align 8, !tbaa !2428
  %4685 = icmp ult i32 %4683, %4680
  %4686 = icmp ult i32 %4683, %4682
  %4687 = or i1 %4685, %4686
  %4688 = zext i1 %4687 to i8
  store i8 %4688, i8* %.pre-phi, align 1, !tbaa !2432
  %4689 = and i32 %4683, 255
  %4690 = tail call i32 @llvm.ctpop.i32(i32 %4689) #12
  %4691 = trunc i32 %4690 to i8
  %4692 = and i8 %4691, 1
  %4693 = xor i8 %4692, 1
  store i8 %4693, i8* %.pre-phi42, align 1, !tbaa !2446
  %4694 = xor i32 %4682, %4680
  %4695 = xor i32 %4694, %4683
  %4696 = lshr i32 %4695, 4
  %4697 = trunc i32 %4696 to i8
  %4698 = and i8 %4697, 1
  store i8 %4698, i8* %.pre-phi44, align 1, !tbaa !2447
  %4699 = icmp eq i32 %4683, 0
  %4700 = zext i1 %4699 to i8
  store i8 %4700, i8* %.pre-phi46, align 1, !tbaa !2448
  %4701 = lshr i32 %4683, 31
  %4702 = trunc i32 %4701 to i8
  store i8 %4702, i8* %.pre-phi48, align 1, !tbaa !2449
  %4703 = lshr i32 %4680, 31
  %4704 = lshr i32 %4682, 31
  %4705 = xor i32 %4701, %4703
  %4706 = xor i32 %4701, %4704
  %4707 = add nuw nsw i32 %4705, %4706
  %4708 = icmp eq i32 %4707, 2
  %4709 = zext i1 %4708 to i8
  store i8 %4709, i8* %.pre-phi50, align 1, !tbaa !2450
  %4710 = sext i32 %4683 to i64
  store i64 %4710, i64* %RCX, align 8, !tbaa !2428
  %4711 = load i64, i64* %RAX, align 8
  %4712 = shl nsw i64 %4710, 2
  %4713 = add i64 %4711, %4712
  %4714 = add i64 %168, 303
  store i64 %4714, i64* %PC, align 8
  %4715 = load <2 x float>, <2 x float>* %3517, align 1
  %4716 = load <2 x i32>, <2 x i32>* %3518, align 1
  %4717 = inttoptr i64 %4713 to float*
  %4718 = load float, float* %4717, align 4
  %4719 = extractelement <2 x float> %4715, i32 0
  %4720 = fmul float %4719, %4718
  store float %4720, float* %3509, align 1, !tbaa !2451
  %4721 = bitcast <2 x float> %4715 to <2 x i32>
  %4722 = extractelement <2 x i32> %4721, i32 1
  store i32 %4722, i32* %3519, align 1, !tbaa !2451
  %4723 = extractelement <2 x i32> %4716, i32 0
  store i32 %4723, i32* %3520, align 1, !tbaa !2451
  %4724 = extractelement <2 x i32> %4716, i32 1
  store i32 %4724, i32* %3521, align 1, !tbaa !2451
  %4725 = load <2 x float>, <2 x float>* %3522, align 1
  %4726 = load <2 x i32>, <2 x i32>* %3523, align 1
  %4727 = load <2 x float>, <2 x float>* %3517, align 1
  %4728 = extractelement <2 x float> %4725, i32 0
  %4729 = extractelement <2 x float> %4727, i32 0
  %4730 = fadd float %4728, %4729
  store float %4730, float* %3500, align 1, !tbaa !2451
  %4731 = bitcast <2 x float> %4725 to <2 x i32>
  %4732 = extractelement <2 x i32> %4731, i32 1
  store i32 %4732, i32* %3524, align 1, !tbaa !2451
  %4733 = extractelement <2 x i32> %4726, i32 0
  store i32 %4733, i32* %3525, align 1, !tbaa !2451
  %4734 = extractelement <2 x i32> %4726, i32 1
  store i32 %4734, i32* %3526, align 1, !tbaa !2451
  %4735 = load i64, i64* %RBP, align 8
  %4736 = add i64 %4735, -32
  %4737 = add i64 %168, 311
  store i64 %4737, i64* %PC, align 8
  %4738 = inttoptr i64 %4736 to i64*
  %4739 = load i64, i64* %4738, align 8
  store i64 %4739, i64* %RAX, align 8, !tbaa !2428
  %4740 = add i64 %4735, -44
  %4741 = add i64 %168, 314
  store i64 %4741, i64* %PC, align 8
  %4742 = inttoptr i64 %4740 to i32*
  %4743 = load i32, i32* %4742, align 4
  %4744 = add i32 %4743, -1
  %4745 = zext i32 %4744 to i64
  store i64 %4745, i64* %RDX, align 8, !tbaa !2428
  %4746 = icmp eq i32 %4743, 0
  %4747 = zext i1 %4746 to i8
  store i8 %4747, i8* %.pre-phi, align 1, !tbaa !2432
  %4748 = and i32 %4744, 255
  %4749 = tail call i32 @llvm.ctpop.i32(i32 %4748) #12
  %4750 = trunc i32 %4749 to i8
  %4751 = and i8 %4750, 1
  %4752 = xor i8 %4751, 1
  store i8 %4752, i8* %.pre-phi42, align 1, !tbaa !2446
  %4753 = xor i32 %4744, %4743
  %4754 = lshr i32 %4753, 4
  %4755 = trunc i32 %4754 to i8
  %4756 = and i8 %4755, 1
  store i8 %4756, i8* %.pre-phi44, align 1, !tbaa !2447
  %4757 = icmp eq i32 %4744, 0
  %4758 = zext i1 %4757 to i8
  store i8 %4758, i8* %.pre-phi46, align 1, !tbaa !2448
  %4759 = lshr i32 %4744, 31
  %4760 = trunc i32 %4759 to i8
  store i8 %4760, i8* %.pre-phi48, align 1, !tbaa !2449
  %4761 = lshr i32 %4743, 31
  %4762 = xor i32 %4759, %4761
  %4763 = add nuw nsw i32 %4762, %4761
  %4764 = icmp eq i32 %4763, 2
  %4765 = zext i1 %4764 to i8
  store i8 %4765, i8* %.pre-phi50, align 1, !tbaa !2450
  %4766 = sext i32 %4744 to i64
  store i64 %4766, i64* %RCX, align 8, !tbaa !2428
  %4767 = shl nsw i64 %4766, 2
  %4768 = add i64 %4739, %4767
  %4769 = add i64 %168, 325
  store i64 %4769, i64* %PC, align 8
  %4770 = inttoptr i64 %4768 to i32*
  %4771 = load i32, i32* %4770, align 4
  store i32 %4771, i32* %3510, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3512, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3514, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3516, align 1, !tbaa !2451
  %4772 = add i64 %4735, -40
  %4773 = add i64 %168, 329
  store i64 %4773, i64* %PC, align 8
  %4774 = inttoptr i64 %4772 to i64*
  %4775 = load i64, i64* %4774, align 8
  store i64 %4775, i64* %RAX, align 8, !tbaa !2428
  %4776 = add i64 %4735, -24
  %4777 = add i64 %168, 332
  store i64 %4777, i64* %PC, align 8
  %4778 = inttoptr i64 %4776 to i32*
  %4779 = load i32, i32* %4778, align 4
  %4780 = zext i32 %4779 to i64
  store i64 %4780, i64* %RDX, align 8, !tbaa !2428
  %4781 = add i64 %168, 335
  store i64 %4781, i64* %PC, align 8
  %4782 = load i32, i32* %4742, align 4
  %4783 = add i32 %4782, -1
  %4784 = zext i32 %4783 to i64
  store i64 %4784, i64* %RSI, align 8, !tbaa !2428
  %4785 = sext i32 %4779 to i64
  %4786 = sext i32 %4783 to i64
  %4787 = mul nsw i64 %4786, %4785
  %4788 = trunc i64 %4787 to i32
  %4789 = and i64 %4787, 4294967295
  store i64 %4789, i64* %RDX, align 8, !tbaa !2428
  %4790 = shl i64 %4787, 32
  %4791 = ashr exact i64 %4790, 32
  %4792 = icmp ne i64 %4791, %4787
  %4793 = zext i1 %4792 to i8
  store i8 %4793, i8* %.pre-phi, align 1, !tbaa !2432
  %4794 = and i32 %4788, 255
  %4795 = tail call i32 @llvm.ctpop.i32(i32 %4794) #12
  %4796 = trunc i32 %4795 to i8
  %4797 = and i8 %4796, 1
  %4798 = xor i8 %4797, 1
  store i8 %4798, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4799 = lshr i32 %4788, 31
  %4800 = trunc i32 %4799 to i8
  store i8 %4800, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4793, i8* %.pre-phi50, align 1, !tbaa !2450
  %4801 = load i64, i64* %RBP, align 8
  %4802 = add i64 %4801, -48
  %4803 = add i64 %168, 344
  store i64 %4803, i64* %PC, align 8
  %4804 = trunc i64 %4787 to i32
  %4805 = inttoptr i64 %4802 to i32*
  %4806 = load i32, i32* %4805, align 4
  %4807 = add i32 %4806, %4804
  %4808 = zext i32 %4807 to i64
  store i64 %4808, i64* %RDX, align 8, !tbaa !2428
  %4809 = icmp ult i32 %4807, %4804
  %4810 = icmp ult i32 %4807, %4806
  %4811 = or i1 %4809, %4810
  %4812 = zext i1 %4811 to i8
  store i8 %4812, i8* %.pre-phi, align 1, !tbaa !2432
  %4813 = and i32 %4807, 255
  %4814 = tail call i32 @llvm.ctpop.i32(i32 %4813) #12
  %4815 = trunc i32 %4814 to i8
  %4816 = and i8 %4815, 1
  %4817 = xor i8 %4816, 1
  store i8 %4817, i8* %.pre-phi42, align 1, !tbaa !2446
  %4818 = xor i32 %4806, %4804
  %4819 = xor i32 %4818, %4807
  %4820 = lshr i32 %4819, 4
  %4821 = trunc i32 %4820 to i8
  %4822 = and i8 %4821, 1
  store i8 %4822, i8* %.pre-phi44, align 1, !tbaa !2447
  %4823 = icmp eq i32 %4807, 0
  %4824 = zext i1 %4823 to i8
  store i8 %4824, i8* %.pre-phi46, align 1, !tbaa !2448
  %4825 = lshr i32 %4807, 31
  %4826 = trunc i32 %4825 to i8
  store i8 %4826, i8* %.pre-phi48, align 1, !tbaa !2449
  %4827 = lshr i32 %4804, 31
  %4828 = lshr i32 %4806, 31
  %4829 = xor i32 %4825, %4827
  %4830 = xor i32 %4825, %4828
  %4831 = add nuw nsw i32 %4829, %4830
  %4832 = icmp eq i32 %4831, 2
  %4833 = zext i1 %4832 to i8
  store i8 %4833, i8* %.pre-phi50, align 1, !tbaa !2450
  %4834 = sext i32 %4807 to i64
  store i64 %4834, i64* %RCX, align 8, !tbaa !2428
  %4835 = load i64, i64* %RAX, align 8
  %4836 = shl nsw i64 %4834, 2
  %4837 = add i64 %4835, %4836
  %4838 = add i64 %168, 352
  store i64 %4838, i64* %PC, align 8
  %4839 = load <2 x float>, <2 x float>* %3517, align 1
  %4840 = load <2 x i32>, <2 x i32>* %3518, align 1
  %4841 = inttoptr i64 %4837 to float*
  %4842 = load float, float* %4841, align 4
  %4843 = extractelement <2 x float> %4839, i32 0
  %4844 = fmul float %4843, %4842
  store float %4844, float* %3509, align 1, !tbaa !2451
  %4845 = bitcast <2 x float> %4839 to <2 x i32>
  %4846 = extractelement <2 x i32> %4845, i32 1
  store i32 %4846, i32* %3519, align 1, !tbaa !2451
  %4847 = extractelement <2 x i32> %4840, i32 0
  store i32 %4847, i32* %3520, align 1, !tbaa !2451
  %4848 = extractelement <2 x i32> %4840, i32 1
  store i32 %4848, i32* %3521, align 1, !tbaa !2451
  %4849 = load <2 x float>, <2 x float>* %3522, align 1
  %4850 = load <2 x i32>, <2 x i32>* %3523, align 1
  %4851 = load <2 x float>, <2 x float>* %3517, align 1
  %4852 = extractelement <2 x float> %4849, i32 0
  %4853 = extractelement <2 x float> %4851, i32 0
  %4854 = fadd float %4852, %4853
  store float %4854, float* %3500, align 1, !tbaa !2451
  %4855 = bitcast <2 x float> %4849 to <2 x i32>
  %4856 = extractelement <2 x i32> %4855, i32 1
  store i32 %4856, i32* %3524, align 1, !tbaa !2451
  %4857 = extractelement <2 x i32> %4850, i32 0
  store i32 %4857, i32* %3525, align 1, !tbaa !2451
  %4858 = extractelement <2 x i32> %4850, i32 1
  store i32 %4858, i32* %3526, align 1, !tbaa !2451
  %4859 = add i64 %4801, -32
  %4860 = add i64 %168, 360
  store i64 %4860, i64* %PC, align 8
  %4861 = inttoptr i64 %4859 to i64*
  %4862 = load i64, i64* %4861, align 8
  store i64 %4862, i64* %RAX, align 8, !tbaa !2428
  %4863 = add i64 %4801, -44
  %4864 = add i64 %168, 364
  store i64 %4864, i64* %PC, align 8
  %4865 = inttoptr i64 %4863 to i32*
  %4866 = load i32, i32* %4865, align 4
  %4867 = sext i32 %4866 to i64
  store i64 %4867, i64* %RCX, align 8, !tbaa !2428
  %4868 = shl nsw i64 %4867, 2
  %4869 = add i64 %4868, %4862
  %4870 = add i64 %168, 369
  store i64 %4870, i64* %PC, align 8
  %4871 = inttoptr i64 %4869 to i32*
  %4872 = load i32, i32* %4871, align 4
  store i32 %4872, i32* %3510, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3512, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3514, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3516, align 1, !tbaa !2451
  %4873 = load i64, i64* %RBP, align 8
  %4874 = add i64 %4873, -40
  %4875 = add i64 %168, 373
  store i64 %4875, i64* %PC, align 8
  %4876 = inttoptr i64 %4874 to i64*
  %4877 = load i64, i64* %4876, align 8
  store i64 %4877, i64* %RAX, align 8, !tbaa !2428
  %4878 = add i64 %4873, -24
  %4879 = add i64 %168, 376
  store i64 %4879, i64* %PC, align 8
  %4880 = inttoptr i64 %4878 to i32*
  %4881 = load i32, i32* %4880, align 4
  %4882 = zext i32 %4881 to i64
  store i64 %4882, i64* %RDX, align 8, !tbaa !2428
  %4883 = add i64 %4873, -44
  %4884 = add i64 %168, 380
  store i64 %4884, i64* %PC, align 8
  %4885 = inttoptr i64 %4883 to i32*
  %4886 = load i32, i32* %4885, align 4
  %4887 = sext i32 %4881 to i64
  %4888 = sext i32 %4886 to i64
  %4889 = mul nsw i64 %4888, %4887
  %4890 = trunc i64 %4889 to i32
  %4891 = and i64 %4889, 4294967295
  store i64 %4891, i64* %RDX, align 8, !tbaa !2428
  %4892 = shl i64 %4889, 32
  %4893 = ashr exact i64 %4892, 32
  %4894 = icmp ne i64 %4893, %4889
  %4895 = zext i1 %4894 to i8
  store i8 %4895, i8* %.pre-phi, align 1, !tbaa !2432
  %4896 = and i32 %4890, 255
  %4897 = tail call i32 @llvm.ctpop.i32(i32 %4896) #12
  %4898 = trunc i32 %4897 to i8
  %4899 = and i8 %4898, 1
  %4900 = xor i8 %4899, 1
  store i8 %4900, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4901 = lshr i32 %4890, 31
  %4902 = trunc i32 %4901 to i8
  store i8 %4902, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4895, i8* %.pre-phi50, align 1, !tbaa !2450
  %4903 = add i64 %4873, -48
  %4904 = add i64 %168, 383
  store i64 %4904, i64* %PC, align 8
  %4905 = trunc i64 %4889 to i32
  %4906 = inttoptr i64 %4903 to i32*
  %4907 = load i32, i32* %4906, align 4
  %4908 = add i32 %4907, %4905
  %4909 = zext i32 %4908 to i64
  store i64 %4909, i64* %RDX, align 8, !tbaa !2428
  %4910 = icmp ult i32 %4908, %4905
  %4911 = icmp ult i32 %4908, %4907
  %4912 = or i1 %4910, %4911
  %4913 = zext i1 %4912 to i8
  store i8 %4913, i8* %.pre-phi, align 1, !tbaa !2432
  %4914 = and i32 %4908, 255
  %4915 = tail call i32 @llvm.ctpop.i32(i32 %4914) #12
  %4916 = trunc i32 %4915 to i8
  %4917 = and i8 %4916, 1
  %4918 = xor i8 %4917, 1
  store i8 %4918, i8* %.pre-phi42, align 1, !tbaa !2446
  %4919 = xor i32 %4907, %4905
  %4920 = xor i32 %4919, %4908
  %4921 = lshr i32 %4920, 4
  %4922 = trunc i32 %4921 to i8
  %4923 = and i8 %4922, 1
  store i8 %4923, i8* %.pre-phi44, align 1, !tbaa !2447
  %4924 = icmp eq i32 %4908, 0
  %4925 = zext i1 %4924 to i8
  store i8 %4925, i8* %.pre-phi46, align 1, !tbaa !2448
  %4926 = lshr i32 %4908, 31
  %4927 = trunc i32 %4926 to i8
  store i8 %4927, i8* %.pre-phi48, align 1, !tbaa !2449
  %4928 = lshr i32 %4905, 31
  %4929 = lshr i32 %4907, 31
  %4930 = xor i32 %4926, %4928
  %4931 = xor i32 %4926, %4929
  %4932 = add nuw nsw i32 %4930, %4931
  %4933 = icmp eq i32 %4932, 2
  %4934 = zext i1 %4933 to i8
  store i8 %4934, i8* %.pre-phi50, align 1, !tbaa !2450
  %4935 = sext i32 %4908 to i64
  store i64 %4935, i64* %RCX, align 8, !tbaa !2428
  %4936 = shl nsw i64 %4935, 2
  %4937 = add i64 %4877, %4936
  %4938 = add i64 %168, 391
  store i64 %4938, i64* %PC, align 8
  %4939 = load <2 x float>, <2 x float>* %3517, align 1
  %4940 = load <2 x i32>, <2 x i32>* %3518, align 1
  %4941 = inttoptr i64 %4937 to float*
  %4942 = load float, float* %4941, align 4
  %4943 = extractelement <2 x float> %4939, i32 0
  %4944 = fmul float %4943, %4942
  store float %4944, float* %3509, align 1, !tbaa !2451
  %4945 = bitcast <2 x float> %4939 to <2 x i32>
  %4946 = extractelement <2 x i32> %4945, i32 1
  store i32 %4946, i32* %3519, align 1, !tbaa !2451
  %4947 = extractelement <2 x i32> %4940, i32 0
  store i32 %4947, i32* %3520, align 1, !tbaa !2451
  %4948 = extractelement <2 x i32> %4940, i32 1
  store i32 %4948, i32* %3521, align 1, !tbaa !2451
  %4949 = load <2 x float>, <2 x float>* %3522, align 1
  %4950 = load <2 x i32>, <2 x i32>* %3523, align 1
  %4951 = load <2 x float>, <2 x float>* %3517, align 1
  %4952 = extractelement <2 x float> %4949, i32 0
  %4953 = extractelement <2 x float> %4951, i32 0
  %4954 = fadd float %4952, %4953
  store float %4954, float* %3500, align 1, !tbaa !2451
  %4955 = bitcast <2 x float> %4949 to <2 x i32>
  %4956 = extractelement <2 x i32> %4955, i32 1
  store i32 %4956, i32* %3524, align 1, !tbaa !2451
  %4957 = extractelement <2 x i32> %4950, i32 0
  store i32 %4957, i32* %3525, align 1, !tbaa !2451
  %4958 = extractelement <2 x i32> %4950, i32 1
  store i32 %4958, i32* %3526, align 1, !tbaa !2451
  %4959 = load i64, i64* %RBP, align 8
  %4960 = add i64 %4959, -16
  %4961 = add i64 %168, 399
  store i64 %4961, i64* %PC, align 8
  %4962 = inttoptr i64 %4960 to i64*
  %4963 = load i64, i64* %4962, align 8
  store i64 %4963, i64* %RAX, align 8, !tbaa !2428
  %4964 = add i64 %4959, -48
  %4965 = add i64 %168, 403
  store i64 %4965, i64* %PC, align 8
  %4966 = inttoptr i64 %4964 to i32*
  %4967 = load i32, i32* %4966, align 4
  %4968 = sext i32 %4967 to i64
  store i64 %4968, i64* %RCX, align 8, !tbaa !2428
  %4969 = shl nsw i64 %4968, 2
  %4970 = add i64 %4969, %4963
  %4971 = add i64 %168, 408
  store i64 %4971, i64* %PC, align 8
  %4972 = load <2 x float>, <2 x float>* %3522, align 1
  %4973 = extractelement <2 x float> %4972, i32 0
  %4974 = inttoptr i64 %4970 to float*
  store float %4973, float* %4974, align 4
  %4975 = load i64, i64* %RBP, align 8
  %4976 = add i64 %4975, -48
  %4977 = load i64, i64* %PC, align 8
  %4978 = add i64 %4977, 3
  store i64 %4978, i64* %PC, align 8
  %4979 = inttoptr i64 %4976 to i32*
  %4980 = load i32, i32* %4979, align 4
  %4981 = add i32 %4980, 1
  %4982 = zext i32 %4981 to i64
  store i64 %4982, i64* %RAX, align 8, !tbaa !2428
  %4983 = icmp eq i32 %4980, -1
  %4984 = icmp eq i32 %4981, 0
  %4985 = or i1 %4983, %4984
  %4986 = zext i1 %4985 to i8
  store i8 %4986, i8* %.pre-phi, align 1, !tbaa !2432
  %4987 = and i32 %4981, 255
  %4988 = tail call i32 @llvm.ctpop.i32(i32 %4987) #12
  %4989 = trunc i32 %4988 to i8
  %4990 = and i8 %4989, 1
  %4991 = xor i8 %4990, 1
  store i8 %4991, i8* %.pre-phi42, align 1, !tbaa !2446
  %4992 = xor i32 %4981, %4980
  %4993 = lshr i32 %4992, 4
  %4994 = trunc i32 %4993 to i8
  %4995 = and i8 %4994, 1
  store i8 %4995, i8* %.pre-phi44, align 1, !tbaa !2447
  %4996 = zext i1 %4984 to i8
  store i8 %4996, i8* %.pre-phi46, align 1, !tbaa !2448
  %4997 = lshr i32 %4981, 31
  %4998 = trunc i32 %4997 to i8
  store i8 %4998, i8* %.pre-phi48, align 1, !tbaa !2449
  %4999 = lshr i32 %4980, 31
  %5000 = xor i32 %4997, %4999
  %5001 = add nuw nsw i32 %5000, %4997
  %5002 = icmp eq i32 %5001, 2
  %5003 = zext i1 %5002 to i8
  store i8 %5003, i8* %.pre-phi50, align 1, !tbaa !2450
  %5004 = add i64 %4977, 9
  store i64 %5004, i64* %PC, align 8
  store i32 %4981, i32* %4979, align 4
  %5005 = load i64, i64* %PC, align 8
  %5006 = add i64 %5005, -429
  store i64 %5006, i64* %PC, align 8, !tbaa !2428
  br label %block_40227d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402e34__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_402e34:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = xor i64 %4, %3
  %8 = lshr i64 %7, 4
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13 = lshr i64 %4, 63
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15 = lshr i64 %3, 63
  %16 = xor i64 %13, %15
  %17 = add nuw nsw i64 %16, %15
  %18 = icmp eq i64 %17, 2
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %3, i64* %RSP, align 8, !tbaa !2428
  %21 = icmp ult i64 %3, 8
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1, !tbaa !2432
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #12
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %6, align 1, !tbaa !2446
  store i8 %10, i8* %11, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %12, align 1, !tbaa !2448
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %14, align 1, !tbaa !2449
  store i8 %19, i8* %20, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402b50_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_402b50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -16
  %15 = load i32, i32* %EDI, align 4
  %16 = add i64 %13, 6
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %17, align 4
  %18 = load i64, i64* %RBP, align 8
  %19 = add i64 %18, -16
  %20 = load i64, i64* %RSI, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -20
  %26 = load i32, i32* %EDX, align 4
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 3
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %29, align 4
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = icmp eq i32 %35, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = and i32 %36, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #12
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2446
  %46 = xor i32 %36, %35
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = icmp eq i32 %36, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %36, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = lshr i32 %35, 31
  %58 = xor i32 %54, %57
  %59 = add nuw nsw i32 %58, %57
  %60 = icmp eq i32 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = icmp ne i8 %55, 0
  %64 = xor i1 %63, %60
  %.v = select i1 %64, i64 10, i64 22
  %65 = add i64 %32, %.v
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  br i1 %64, label %block_402b68, label %block_402b74

block_402bd3:                                     ; preds = %block_402bc7
  %66 = add i64 %606, -16
  %67 = add i64 %642, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %66 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = add i64 %606, -32
  %71 = add i64 %642, 8
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %70 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  store i64 %74, i64* %RCX, align 8, !tbaa !2428
  %75 = shl nsw i64 %74, 2
  %76 = add i64 %75, %69
  %77 = add i64 %642, 13
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to float*
  %79 = load float, float* %78, align 4
  %80 = fpext float %79 to double
  %81 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %82 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %83 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %84 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %81, i32* %417, align 1, !tbaa !2451
  store i32 %82, i32* %419, align 1, !tbaa !2451
  store i32 %83, i32* %421, align 1, !tbaa !2451
  store i32 %84, i32* %423, align 1, !tbaa !2451
  %85 = bitcast double %80 to i64
  %86 = load i64, i64* %425, align 1
  %87 = load i64, i64* %427, align 1
  %88 = load i64, i64* %420, align 1
  %89 = and i64 %87, %85
  %90 = and i64 %88, %86
  %91 = trunc i64 %89 to i32
  %92 = lshr i64 %89, 32
  %93 = trunc i64 %92 to i32
  store i32 %91, i32* %435, align 1, !tbaa !2453
  store i32 %93, i32* %437, align 1, !tbaa !2453
  %94 = trunc i64 %90 to i32
  store i32 %94, i32* %439, align 1, !tbaa !2453
  %95 = lshr i64 %90, 32
  %96 = trunc i64 %95 to i32
  store i32 %96, i32* %443, align 1, !tbaa !2453
  %97 = add i64 %606, -24
  %98 = add i64 %642, 29
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to float*
  %100 = load float, float* %99, align 4
  %101 = fpext float %100 to double
  store double %101, double* %503, align 1, !tbaa !2454
  %102 = add i64 %642, 33
  store i64 %102, i64* %PC, align 8
  %103 = load double, double* %411, align 1
  %104 = fcmp uno double %103, %101
  br i1 %104, label %105, label %115

; <label>:105:                                    ; preds = %block_402bd3
  %106 = fadd double %101, %103
  %107 = bitcast double %106 to i64
  %108 = and i64 %107, 9221120237041090560
  %109 = icmp eq i64 %108, 9218868437227405312
  %110 = and i64 %107, 2251799813685247
  %111 = icmp ne i64 %110, 0
  %112 = and i1 %109, %111
  br i1 %112, label %113, label %121

; <label>:113:                                    ; preds = %105
  %114 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %102, %struct.Memory* %MEMORY.3) #13
  %.pre17 = load i64, i64* %PC, align 8
  %.pre18 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre19 = load i8, i8* %53, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:115:                                    ; preds = %block_402bd3
  %116 = fcmp ogt double %103, %101
  br i1 %116, label %121, label %117

; <label>:117:                                    ; preds = %115
  %118 = fcmp olt double %103, %101
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %117
  %120 = fcmp oeq double %103, %101
  br i1 %120, label %121, label %125

; <label>:121:                                    ; preds = %119, %117, %115, %105
  %122 = phi i8 [ 0, %115 ], [ 0, %117 ], [ 1, %119 ], [ 1, %105 ]
  %123 = phi i8 [ 0, %115 ], [ 0, %117 ], [ 0, %119 ], [ 1, %105 ]
  %124 = phi i8 [ 0, %115 ], [ 1, %117 ], [ 0, %119 ], [ 1, %105 ]
  store i8 %122, i8* %53, align 1, !tbaa !2456
  store i8 %123, i8* %45, align 1, !tbaa !2456
  store i8 %124, i8* %39, align 1, !tbaa !2456
  br label %125

; <label>:125:                                    ; preds = %121, %119
  %126 = phi i8 [ %122, %121 ], [ %630, %119 ]
  %127 = phi i8 [ %124, %121 ], [ %618, %119 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %125, %113
  %128 = phi i8 [ %.pre19, %113 ], [ %126, %125 ]
  %129 = phi i8 [ %.pre18, %113 ], [ %127, %125 ]
  %130 = phi i64 [ %.pre17, %113 ], [ %102, %125 ]
  %131 = phi %struct.Memory* [ %114, %113 ], [ %MEMORY.3, %125 ]
  %132 = or i8 %128, %129
  %133 = icmp ne i8 %132, 0
  %.v30 = select i1 %133, i64 45, i64 6
  %134 = add i64 %130, %.v30
  store i64 %134, i64* %PC, align 8, !tbaa !2428
  br i1 %133, label %block_402c21, label %block_402bfa

block_402bfa:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -28
  %137 = add i64 %134, 3
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = add i64 %135, -36
  %142 = add i64 %134, 6
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i32*
  store i32 %139, i32* %143, align 4
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -16
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %RCX, align 8, !tbaa !2428
  %150 = add i64 %144, -32
  %151 = add i64 %146, 8
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %150 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = sext i32 %153 to i64
  store i64 %154, i64* %RDX, align 8, !tbaa !2428
  %155 = shl nsw i64 %154, 2
  %156 = add i64 %155, %149
  %157 = add i64 %146, 13
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to float*
  %159 = load float, float* %158, align 4
  %160 = fpext float %159 to double
  %161 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %162 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %163 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %164 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %161, i32* %417, align 1, !tbaa !2451
  store i32 %162, i32* %419, align 1, !tbaa !2451
  store i32 %163, i32* %421, align 1, !tbaa !2451
  store i32 %164, i32* %423, align 1, !tbaa !2451
  %165 = bitcast double %160 to i64
  %166 = load i64, i64* %425, align 1
  %167 = load i64, i64* %427, align 1
  %168 = load i64, i64* %420, align 1
  %169 = and i64 %167, %165
  %170 = and i64 %168, %166
  %171 = trunc i64 %169 to i32
  %172 = lshr i64 %169, 32
  %173 = trunc i64 %172 to i32
  store i32 %171, i32* %435, align 1, !tbaa !2453
  store i32 %173, i32* %437, align 1, !tbaa !2453
  %174 = trunc i64 %170 to i32
  store i32 %174, i32* %439, align 1, !tbaa !2453
  %175 = lshr i64 %170, 32
  %176 = trunc i64 %175 to i32
  store i32 %176, i32* %443, align 1, !tbaa !2453
  %177 = load <2 x i32>, <2 x i32>* %444, align 1
  %178 = load <2 x i32>, <2 x i32>* %446, align 1
  %.cast12 = bitcast <2 x i32> %177 to double
  %179 = fptrunc double %.cast12 to float
  store float %179, float* %449, align 1, !tbaa !2451
  %180 = extractelement <2 x i32> %177, i32 1
  store i32 %180, i32* %437, align 1, !tbaa !2451
  %181 = extractelement <2 x i32> %178, i32 0
  store i32 %181, i32* %439, align 1, !tbaa !2451
  %182 = extractelement <2 x i32> %178, i32 1
  store i32 %182, i32* %443, align 1, !tbaa !2451
  %183 = add i64 %144, -24
  %184 = add i64 %146, 33
  store i64 %184, i64* %PC, align 8
  %185 = load <2 x float>, <2 x float>* %455, align 1
  %186 = extractelement <2 x float> %185, i32 0
  %187 = inttoptr i64 %183 to float*
  store float %186, float* %187, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_402c21

block_402cdf:                                     ; preds = %block_402cd9, %block_402b68, %block_402b7e
  %188 = phi i64 [ %.pre26, %block_402cd9 ], [ %328, %block_402b7e ], [ %604, %block_402b68 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_402cd9 ], [ %2, %block_402b7e ], [ %2, %block_402b68 ]
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -4
  %191 = add i64 %188, 3
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %190 to i32*
  %193 = load i32, i32* %192, align 4
  %194 = zext i32 %193 to i64
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %188, 4
  store i64 %195, i64* %PC, align 8
  %196 = load i64, i64* %9, align 8, !tbaa !2428
  %197 = add i64 %196, 8
  %198 = inttoptr i64 %196 to i64*
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %RBP, align 8, !tbaa !2428
  store i64 %197, i64* %9, align 8, !tbaa !2428
  %200 = add i64 %188, 5
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %197 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %PC, align 8, !tbaa !2428
  %203 = add i64 %196, 16
  store i64 %203, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402c9a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -28
  %206 = add i64 %323, 3
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %205 to i32*
  %208 = load i32, i32* %207, align 4
  %209 = zext i32 %208 to i64
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = add i64 %204, -36
  %211 = add i64 %323, 6
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i32*
  store i32 %208, i32* %212, align 4
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -16
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %214 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RCX, align 8, !tbaa !2428
  %219 = add i64 %213, -28
  %220 = add i64 %215, 8
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = sext i32 %222 to i64
  store i64 %223, i64* %RDX, align 8, !tbaa !2428
  %224 = shl nsw i64 %223, 2
  %225 = add i64 %224, %218
  %226 = add i64 %215, 13
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to float*
  %228 = load float, float* %227, align 4
  %229 = fpext float %228 to double
  %230 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %231 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %232 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %233 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %230, i32* %349, align 1, !tbaa !2451
  store i32 %231, i32* %351, align 1, !tbaa !2451
  store i32 %232, i32* %353, align 1, !tbaa !2451
  store i32 %233, i32* %355, align 1, !tbaa !2451
  %234 = bitcast double %229 to i64
  %235 = load i64, i64* %357, align 1
  %236 = load i64, i64* %359, align 1
  %237 = load i64, i64* %352, align 1
  %238 = and i64 %236, %234
  %239 = and i64 %237, %235
  %240 = trunc i64 %238 to i32
  %241 = lshr i64 %238, 32
  %242 = trunc i64 %241 to i32
  store i32 %240, i32* %367, align 1, !tbaa !2453
  store i32 %242, i32* %369, align 1, !tbaa !2453
  %243 = trunc i64 %239 to i32
  store i32 %243, i32* %371, align 1, !tbaa !2453
  %244 = lshr i64 %239, 32
  %245 = trunc i64 %244 to i32
  store i32 %245, i32* %375, align 1, !tbaa !2453
  %246 = load <2 x i32>, <2 x i32>* %376, align 1
  %247 = load <2 x i32>, <2 x i32>* %378, align 1
  %.cast14 = bitcast <2 x i32> %246 to double
  %248 = fptrunc double %.cast14 to float
  store float %248, float* %381, align 1, !tbaa !2451
  %249 = extractelement <2 x i32> %246, i32 1
  store i32 %249, i32* %369, align 1, !tbaa !2451
  %250 = extractelement <2 x i32> %247, i32 0
  store i32 %250, i32* %371, align 1, !tbaa !2451
  %251 = extractelement <2 x i32> %247, i32 1
  store i32 %251, i32* %375, align 1, !tbaa !2451
  %252 = add i64 %213, -24
  %253 = add i64 %215, 33
  store i64 %253, i64* %PC, align 8
  %254 = load <2 x float>, <2 x float>* %387, align 1
  %255 = extractelement <2 x float> %254, i32 0
  %256 = inttoptr i64 %252 to float*
  store float %255, float* %256, align 4
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_402cc1

block_402c73:                                     ; preds = %block_402c67
  %257 = add i64 %505, -16
  %258 = add i64 %541, 4
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %RAX, align 8, !tbaa !2428
  %261 = add i64 %541, 8
  store i64 %261, i64* %PC, align 8
  %262 = load i32, i32* %508, align 4
  %263 = sext i32 %262 to i64
  store i64 %263, i64* %RCX, align 8, !tbaa !2428
  %264 = shl nsw i64 %263, 2
  %265 = add i64 %264, %260
  %266 = add i64 %541, 13
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to float*
  %268 = load float, float* %267, align 4
  %269 = fpext float %268 to double
  %270 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %271 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %272 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %273 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %270, i32* %349, align 1, !tbaa !2451
  store i32 %271, i32* %351, align 1, !tbaa !2451
  store i32 %272, i32* %353, align 1, !tbaa !2451
  store i32 %273, i32* %355, align 1, !tbaa !2451
  %274 = bitcast double %269 to i64
  %275 = load i64, i64* %357, align 1
  %276 = load i64, i64* %359, align 1
  %277 = load i64, i64* %352, align 1
  %278 = and i64 %276, %274
  %279 = and i64 %277, %275
  %280 = trunc i64 %278 to i32
  %281 = lshr i64 %278, 32
  %282 = trunc i64 %281 to i32
  store i32 %280, i32* %367, align 1, !tbaa !2453
  store i32 %282, i32* %369, align 1, !tbaa !2453
  %283 = trunc i64 %279 to i32
  store i32 %283, i32* %371, align 1, !tbaa !2453
  %284 = lshr i64 %279, 32
  %285 = trunc i64 %284 to i32
  store i32 %285, i32* %375, align 1, !tbaa !2453
  %286 = add i64 %505, -24
  %287 = add i64 %541, 29
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to float*
  %289 = load float, float* %288, align 4
  %290 = fpext float %289 to double
  store double %290, double* %396, align 1, !tbaa !2454
  %291 = add i64 %541, 33
  store i64 %291, i64* %PC, align 8
  %292 = load double, double* %343, align 1
  %293 = fcmp uno double %292, %290
  br i1 %293, label %294, label %304

; <label>:294:                                    ; preds = %block_402c73
  %295 = fadd double %290, %292
  %296 = bitcast double %295 to i64
  %297 = and i64 %296, 9221120237041090560
  %298 = icmp eq i64 %297, 9218868437227405312
  %299 = and i64 %296, 2251799813685247
  %300 = icmp ne i64 %299, 0
  %301 = and i1 %298, %300
  br i1 %301, label %302, label %310

; <label>:302:                                    ; preds = %294
  %303 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %291, %struct.Memory* %MEMORY.1) #13
  %.pre22 = load i64, i64* %PC, align 8
  %.pre23 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre24 = load i8, i8* %53, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:304:                                    ; preds = %block_402c73
  %305 = fcmp ogt double %292, %290
  br i1 %305, label %310, label %306

; <label>:306:                                    ; preds = %304
  %307 = fcmp olt double %292, %290
  br i1 %307, label %310, label %308

; <label>:308:                                    ; preds = %306
  %309 = fcmp oeq double %292, %290
  br i1 %309, label %310, label %314

; <label>:310:                                    ; preds = %308, %306, %304, %294
  %311 = phi i8 [ 0, %304 ], [ 0, %306 ], [ 1, %308 ], [ 1, %294 ]
  %312 = phi i8 [ 0, %304 ], [ 0, %306 ], [ 0, %308 ], [ 1, %294 ]
  %313 = phi i8 [ 0, %304 ], [ 1, %306 ], [ 0, %308 ], [ 1, %294 ]
  store i8 %311, i8* %53, align 1, !tbaa !2456
  store i8 %312, i8* %45, align 1, !tbaa !2456
  store i8 %313, i8* %39, align 1, !tbaa !2456
  br label %314

; <label>:314:                                    ; preds = %310, %308
  %315 = phi i8 [ %311, %310 ], [ %529, %308 ]
  %316 = phi i8 [ %313, %310 ], [ %517, %308 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %314, %302
  %317 = phi i8 [ %.pre24, %302 ], [ %315, %314 ]
  %318 = phi i8 [ %.pre23, %302 ], [ %316, %314 ]
  %319 = phi i64 [ %.pre22, %302 ], [ %291, %314 ]
  %320 = phi %struct.Memory* [ %303, %302 ], [ %MEMORY.1, %314 ]
  %321 = or i8 %317, %318
  %322 = icmp ne i8 %321, 0
  %.v32 = select i1 %322, i64 45, i64 6
  %323 = add i64 %319, %.v32
  store i64 %323, i64* %PC, align 8, !tbaa !2428
  br i1 %322, label %block_402cc1, label %block_402c9a

block_402b7e:                                     ; preds = %block_402b74
  %324 = add i64 %30, -4
  %325 = add i64 %666, 7
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i32*
  store i32 0, i32* %326, align 4
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, 346
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  br label %block_402cdf

block_402c3d:                                     ; preds = %block_402b8a
  %329 = add i64 %30, -36
  %330 = add i64 %567, 7
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i32*
  store i32 0, i32* %331, align 4
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -16
  %334 = load i64, i64* %PC, align 8
  %335 = add i64 %334, 4
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %333 to i64*
  %337 = load i64, i64* %336, align 8
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %339 = add i64 %334, 8
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to float*
  %341 = load float, float* %340, align 4
  %342 = fpext float %341 to double
  %343 = bitcast [32 x %union.VectorReg]* %5 to double*
  %344 = bitcast %union.VectorReg* %6 to i8*
  %345 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %346 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %347 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %348 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  %349 = bitcast %union.VectorReg* %6 to i32*
  store i32 %345, i32* %349, align 1, !tbaa !2451
  %350 = getelementptr inbounds i8, i8* %344, i64 4
  %351 = bitcast i8* %350 to i32*
  store i32 %346, i32* %351, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %353 = bitcast i64* %352 to i32*
  store i32 %347, i32* %353, align 1, !tbaa !2451
  %354 = getelementptr inbounds i8, i8* %344, i64 12
  %355 = bitcast i8* %354 to i32*
  store i32 %348, i32* %355, align 1, !tbaa !2451
  %356 = bitcast double %342 to i64
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %358 = load i64, i64* %357, align 1
  %359 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %360 = load i64, i64* %359, align 1
  %361 = load i64, i64* %352, align 1
  %362 = and i64 %360, %356
  %363 = and i64 %361, %358
  %364 = trunc i64 %362 to i32
  %365 = lshr i64 %362, 32
  %366 = trunc i64 %365 to i32
  %367 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %364, i32* %367, align 1, !tbaa !2453
  %368 = getelementptr inbounds i8, i8* %338, i64 4
  %369 = bitcast i8* %368 to i32*
  store i32 %366, i32* %369, align 1, !tbaa !2453
  %370 = trunc i64 %363 to i32
  %371 = bitcast i64* %357 to i32*
  store i32 %370, i32* %371, align 1, !tbaa !2453
  %372 = lshr i64 %363, 32
  %373 = trunc i64 %372 to i32
  %374 = getelementptr inbounds i8, i8* %338, i64 12
  %375 = bitcast i8* %374 to i32*
  store i32 %373, i32* %375, align 1, !tbaa !2453
  %376 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %377 = load <2 x i32>, <2 x i32>* %376, align 1
  %378 = bitcast i64* %357 to <2 x i32>*
  %379 = load <2 x i32>, <2 x i32>* %378, align 1
  %.cast13 = bitcast <2 x i32> %377 to double
  %380 = fptrunc double %.cast13 to float
  %381 = bitcast [32 x %union.VectorReg]* %5 to float*
  store float %380, float* %381, align 1, !tbaa !2451
  %382 = extractelement <2 x i32> %377, i32 1
  store i32 %382, i32* %369, align 1, !tbaa !2451
  %383 = extractelement <2 x i32> %379, i32 0
  store i32 %383, i32* %371, align 1, !tbaa !2451
  %384 = extractelement <2 x i32> %379, i32 1
  store i32 %384, i32* %375, align 1, !tbaa !2451
  %385 = add i64 %332, -24
  %386 = add i64 %334, 28
  store i64 %386, i64* %PC, align 8
  %387 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %388 = load <2 x float>, <2 x float>* %387, align 1
  %389 = extractelement <2 x float> %388, i32 0
  %390 = inttoptr i64 %385 to float*
  store float %389, float* %390, align 4
  %391 = load i64, i64* %RBP, align 8
  %392 = add i64 %391, -28
  %393 = load i64, i64* %PC, align 8
  %394 = add i64 %393, 7
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %392 to i32*
  store i32 1, i32* %395, align 4
  %396 = bitcast %union.VectorReg* %6 to double*
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_402c67

block_402b94:                                     ; preds = %block_402b8a
  %397 = add i64 %30, -32
  %398 = add i64 %567, 7
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %397 to i32*
  store i32 1, i32* %399, align 4
  %400 = load i64, i64* %RBP, align 8
  %401 = add i64 %400, -16
  %402 = load i64, i64* %PC, align 8
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %401 to i64*
  %405 = load i64, i64* %404, align 8
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %407 = add i64 %402, 8
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %405 to float*
  %409 = load float, float* %408, align 4
  %410 = fpext float %409 to double
  %411 = bitcast [32 x %union.VectorReg]* %5 to double*
  %412 = bitcast %union.VectorReg* %6 to i8*
  %413 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %414 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %415 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %416 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  %417 = bitcast %union.VectorReg* %6 to i32*
  store i32 %413, i32* %417, align 1, !tbaa !2451
  %418 = getelementptr inbounds i8, i8* %412, i64 4
  %419 = bitcast i8* %418 to i32*
  store i32 %414, i32* %419, align 1, !tbaa !2451
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %421 = bitcast i64* %420 to i32*
  store i32 %415, i32* %421, align 1, !tbaa !2451
  %422 = getelementptr inbounds i8, i8* %412, i64 12
  %423 = bitcast i8* %422 to i32*
  store i32 %416, i32* %423, align 1, !tbaa !2451
  %424 = bitcast double %410 to i64
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %426 = load i64, i64* %425, align 1
  %427 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %428 = load i64, i64* %427, align 1
  %429 = load i64, i64* %420, align 1
  %430 = and i64 %428, %424
  %431 = and i64 %429, %426
  %432 = trunc i64 %430 to i32
  %433 = lshr i64 %430, 32
  %434 = trunc i64 %433 to i32
  %435 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %432, i32* %435, align 1, !tbaa !2453
  %436 = getelementptr inbounds i8, i8* %406, i64 4
  %437 = bitcast i8* %436 to i32*
  store i32 %434, i32* %437, align 1, !tbaa !2453
  %438 = trunc i64 %431 to i32
  %439 = bitcast i64* %425 to i32*
  store i32 %438, i32* %439, align 1, !tbaa !2453
  %440 = lshr i64 %431, 32
  %441 = trunc i64 %440 to i32
  %442 = getelementptr inbounds i8, i8* %406, i64 12
  %443 = bitcast i8* %442 to i32*
  store i32 %441, i32* %443, align 1, !tbaa !2453
  %444 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %445 = load <2 x i32>, <2 x i32>* %444, align 1
  %446 = bitcast i64* %425 to <2 x i32>*
  %447 = load <2 x i32>, <2 x i32>* %446, align 1
  %.cast = bitcast <2 x i32> %445 to double
  %448 = fptrunc double %.cast to float
  %449 = bitcast [32 x %union.VectorReg]* %5 to float*
  store float %448, float* %449, align 1, !tbaa !2451
  %450 = extractelement <2 x i32> %445, i32 1
  store i32 %450, i32* %437, align 1, !tbaa !2451
  %451 = extractelement <2 x i32> %447, i32 0
  store i32 %451, i32* %439, align 1, !tbaa !2451
  %452 = extractelement <2 x i32> %447, i32 1
  store i32 %452, i32* %443, align 1, !tbaa !2451
  %453 = add i64 %400, -24
  %454 = add i64 %402, 28
  store i64 %454, i64* %PC, align 8
  %455 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %456 = load <2 x float>, <2 x float>* %455, align 1
  %457 = extractelement <2 x float> %456, i32 0
  %458 = inttoptr i64 %453 to float*
  store float %457, float* %458, align 4
  %459 = load i64, i64* %RBP, align 8
  %460 = add i64 %459, -32
  %461 = load i64, i64* %PC, align 8
  %462 = add i64 %461, 3
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %460 to i32*
  %464 = load i32, i32* %463, align 4
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = add i64 %459, -20
  %467 = add i64 %461, 6
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i32*
  %469 = load i32, i32* %468, align 4
  %470 = add i32 %469, %464
  %471 = zext i32 %470 to i64
  store i64 %471, i64* %RCX, align 8, !tbaa !2428
  %472 = icmp ult i32 %470, %464
  %473 = icmp ult i32 %470, %469
  %474 = or i1 %472, %473
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %39, align 1, !tbaa !2432
  %476 = and i32 %470, 255
  %477 = tail call i32 @llvm.ctpop.i32(i32 %476) #12
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  store i8 %480, i8* %45, align 1, !tbaa !2446
  %481 = xor i32 %469, %464
  %482 = xor i32 %481, %470
  %483 = lshr i32 %482, 4
  %484 = trunc i32 %483 to i8
  %485 = and i8 %484, 1
  store i8 %485, i8* %50, align 1, !tbaa !2447
  %486 = icmp eq i32 %470, 0
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %53, align 1, !tbaa !2448
  %488 = lshr i32 %470, 31
  %489 = trunc i32 %488 to i8
  store i8 %489, i8* %56, align 1, !tbaa !2449
  %490 = lshr i32 %464, 31
  %491 = lshr i32 %469, 31
  %492 = xor i32 %488, %490
  %493 = xor i32 %488, %491
  %494 = add nuw nsw i32 %492, %493
  %495 = icmp eq i32 %494, 2
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %62, align 1, !tbaa !2450
  %497 = add i64 %461, 9
  store i64 %497, i64* %PC, align 8
  store i32 %470, i32* %463, align 4
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -28
  %500 = load i64, i64* %PC, align 8
  %501 = add i64 %500, 7
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %499 to i32*
  store i32 1, i32* %502, align 4
  %503 = bitcast %union.VectorReg* %6 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402bc7

block_402c67:                                     ; preds = %block_402cc1, %block_402c3d
  %504 = phi i64 [ %.pre21, %block_402c3d ], [ %599, %block_402cc1 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_402c3d ], [ %320, %block_402cc1 ]
  %505 = load i64, i64* %RBP, align 8
  %506 = add i64 %505, -28
  %507 = add i64 %504, 3
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to i32*
  %509 = load i32, i32* %508, align 4
  %510 = zext i32 %509 to i64
  store i64 %510, i64* %RAX, align 8, !tbaa !2428
  %511 = add i64 %505, -8
  %512 = add i64 %504, 6
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = sub i32 %509, %514
  %516 = icmp ult i32 %509, %514
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %39, align 1, !tbaa !2432
  %518 = and i32 %515, 255
  %519 = tail call i32 @llvm.ctpop.i32(i32 %518) #12
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  store i8 %522, i8* %45, align 1, !tbaa !2446
  %523 = xor i32 %514, %509
  %524 = xor i32 %523, %515
  %525 = lshr i32 %524, 4
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  store i8 %527, i8* %50, align 1, !tbaa !2447
  %528 = icmp eq i32 %515, 0
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %53, align 1, !tbaa !2448
  %530 = lshr i32 %515, 31
  %531 = trunc i32 %530 to i8
  store i8 %531, i8* %56, align 1, !tbaa !2449
  %532 = lshr i32 %509, 31
  %533 = lshr i32 %514, 31
  %534 = xor i32 %533, %532
  %535 = xor i32 %530, %532
  %536 = add nuw nsw i32 %535, %534
  %537 = icmp eq i32 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %62, align 1, !tbaa !2450
  %539 = icmp ne i8 %531, 0
  %540 = xor i1 %539, %537
  %.v31 = select i1 %540, i64 12, i64 109
  %541 = add i64 %504, %.v31
  store i64 %541, i64* %PC, align 8, !tbaa !2428
  br i1 %540, label %block_402c73, label %block_402cd9.loopexit

block_402b8a:                                     ; preds = %block_402b74
  %542 = add i64 %30, -20
  %543 = add i64 %666, 4
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i32*
  %545 = load i32, i32* %544, align 4
  %546 = add i32 %545, -1
  %547 = icmp eq i32 %545, 0
  %548 = zext i1 %547 to i8
  store i8 %548, i8* %39, align 1, !tbaa !2432
  %549 = and i32 %546, 255
  %550 = tail call i32 @llvm.ctpop.i32(i32 %549) #12
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  %553 = xor i8 %552, 1
  store i8 %553, i8* %45, align 1, !tbaa !2446
  %554 = xor i32 %546, %545
  %555 = lshr i32 %554, 4
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  store i8 %557, i8* %50, align 1, !tbaa !2447
  %558 = icmp eq i32 %546, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %53, align 1, !tbaa !2448
  %560 = lshr i32 %546, 31
  %561 = trunc i32 %560 to i8
  store i8 %561, i8* %56, align 1, !tbaa !2449
  %562 = lshr i32 %545, 31
  %563 = xor i32 %560, %562
  %564 = add nuw nsw i32 %563, %562
  %565 = icmp eq i32 %564, 2
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %62, align 1, !tbaa !2450
  %.v28 = select i1 %558, i64 179, i64 10
  %567 = add i64 %666, %.v28
  store i64 %567, i64* %PC, align 8, !tbaa !2428
  br i1 %558, label %block_402c3d, label %block_402b94

block_402cc1:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402c9a
  %568 = phi i64 [ %323, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %.pre25, %block_402c9a ]
  %569 = load i64, i64* %RBP, align 8
  %570 = add i64 %569, -28
  %571 = add i64 %568, 8
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i32*
  %573 = load i32, i32* %572, align 4
  %574 = add i32 %573, 1
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = icmp eq i32 %573, -1
  %577 = icmp eq i32 %574, 0
  %578 = or i1 %576, %577
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %39, align 1, !tbaa !2432
  %580 = and i32 %574, 255
  %581 = tail call i32 @llvm.ctpop.i32(i32 %580) #12
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = xor i8 %583, 1
  store i8 %584, i8* %45, align 1, !tbaa !2446
  %585 = xor i32 %574, %573
  %586 = lshr i32 %585, 4
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  store i8 %588, i8* %50, align 1, !tbaa !2447
  %589 = zext i1 %577 to i8
  store i8 %589, i8* %53, align 1, !tbaa !2448
  %590 = lshr i32 %574, 31
  %591 = trunc i32 %590 to i8
  store i8 %591, i8* %56, align 1, !tbaa !2449
  %592 = lshr i32 %573, 31
  %593 = xor i32 %590, %592
  %594 = add nuw nsw i32 %593, %590
  %595 = icmp eq i32 %594, 2
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %62, align 1, !tbaa !2450
  %597 = add i64 %568, 14
  store i64 %597, i64* %PC, align 8
  store i32 %574, i32* %572, align 4
  %598 = load i64, i64* %PC, align 8
  %599 = add i64 %598, -104
  store i64 %599, i64* %PC, align 8, !tbaa !2428
  br label %block_402c67

block_402b68:                                     ; preds = %block_402b50
  %600 = add i64 %30, -4
  %601 = add i64 %65, 7
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i32*
  store i32 -1, i32* %602, align 4
  %603 = load i64, i64* %PC, align 8
  %604 = add i64 %603, 368
  store i64 %604, i64* %PC, align 8, !tbaa !2428
  br label %block_402cdf

block_402bc7:                                     ; preds = %block_402c21, %block_402b94
  %605 = phi i64 [ %.pre, %block_402b94 ], [ %748, %block_402c21 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402b94 ], [ %131, %block_402c21 ]
  %606 = load i64, i64* %RBP, align 8
  %607 = add i64 %606, -28
  %608 = add i64 %605, 3
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %607 to i32*
  %610 = load i32, i32* %609, align 4
  %611 = zext i32 %610 to i64
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = add i64 %606, -8
  %613 = add i64 %605, 6
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i32*
  %615 = load i32, i32* %614, align 4
  %616 = sub i32 %610, %615
  %617 = icmp ult i32 %610, %615
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %39, align 1, !tbaa !2432
  %619 = and i32 %616, 255
  %620 = tail call i32 @llvm.ctpop.i32(i32 %619) #12
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = xor i8 %622, 1
  store i8 %623, i8* %45, align 1, !tbaa !2446
  %624 = xor i32 %615, %610
  %625 = xor i32 %624, %616
  %626 = lshr i32 %625, 4
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  store i8 %628, i8* %50, align 1, !tbaa !2447
  %629 = icmp eq i32 %616, 0
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %53, align 1, !tbaa !2448
  %631 = lshr i32 %616, 31
  %632 = trunc i32 %631 to i8
  store i8 %632, i8* %56, align 1, !tbaa !2449
  %633 = lshr i32 %610, 31
  %634 = lshr i32 %615, 31
  %635 = xor i32 %634, %633
  %636 = xor i32 %631, %633
  %637 = add nuw nsw i32 %636, %635
  %638 = icmp eq i32 %637, 2
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %62, align 1, !tbaa !2450
  %640 = icmp ne i8 %632, 0
  %641 = xor i1 %640, %638
  %.v29 = select i1 %641, i64 12, i64 113
  %642 = add i64 %605, %.v29
  store i64 %642, i64* %PC, align 8, !tbaa !2428
  br i1 %641, label %block_402bd3, label %block_402cd9.loopexit41

block_402b74:                                     ; preds = %block_402b50
  %643 = add i64 %65, 4
  store i64 %643, i64* %PC, align 8
  %644 = load i32, i32* %34, align 4
  %645 = add i32 %644, -1
  %646 = icmp eq i32 %644, 0
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %39, align 1, !tbaa !2432
  %648 = and i32 %645, 255
  %649 = tail call i32 @llvm.ctpop.i32(i32 %648) #12
  %650 = trunc i32 %649 to i8
  %651 = and i8 %650, 1
  %652 = xor i8 %651, 1
  store i8 %652, i8* %45, align 1, !tbaa !2446
  %653 = xor i32 %645, %644
  %654 = lshr i32 %653, 4
  %655 = trunc i32 %654 to i8
  %656 = and i8 %655, 1
  store i8 %656, i8* %50, align 1, !tbaa !2447
  %657 = icmp eq i32 %645, 0
  %658 = zext i1 %657 to i8
  store i8 %658, i8* %53, align 1, !tbaa !2448
  %659 = lshr i32 %645, 31
  %660 = trunc i32 %659 to i8
  store i8 %660, i8* %56, align 1, !tbaa !2449
  %661 = lshr i32 %644, 31
  %662 = xor i32 %659, %661
  %663 = add nuw nsw i32 %662, %661
  %664 = icmp eq i32 %663, 2
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %62, align 1, !tbaa !2450
  %.v27 = select i1 %657, i64 10, i64 22
  %666 = add i64 %65, %.v27
  store i64 %666, i64* %PC, align 8, !tbaa !2428
  br i1 %657, label %block_402b7e, label %block_402b8a

block_402cd9.loopexit:                            ; preds = %block_402c67
  br label %block_402cd9

block_402cd9.loopexit41:                          ; preds = %block_402bc7
  br label %block_402cd9

block_402cd9:                                     ; preds = %block_402cd9.loopexit41, %block_402cd9.loopexit
  %667 = phi i64 [ %505, %block_402cd9.loopexit ], [ %606, %block_402cd9.loopexit41 ]
  %668 = phi i64 [ %541, %block_402cd9.loopexit ], [ %642, %block_402cd9.loopexit41 ]
  %.sink5 = phi i64 [ 5, %block_402cd9.loopexit ], [ 161, %block_402cd9.loopexit41 ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.1, %block_402cd9.loopexit ], [ %MEMORY.3, %block_402cd9.loopexit41 ]
  %669 = add i64 %668, %.sink5
  %670 = add i64 %667, -36
  %671 = add i64 %669, 3
  store i64 %671, i64* %PC, align 8
  %672 = inttoptr i64 %670 to i32*
  %673 = load i32, i32* %672, align 4
  %674 = zext i32 %673 to i64
  store i64 %674, i64* %RAX, align 8, !tbaa !2428
  %675 = add i64 %667, -4
  %676 = add i64 %669, 6
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i32*
  store i32 %673, i32* %677, align 4
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_402cdf

block_402c21:                                     ; preds = %block_402bfa, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %678 = phi i64 [ %.pre20, %block_402bfa ], [ %134, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -32
  %681 = add i64 %678, 3
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %680 to i32*
  %683 = load i32, i32* %682, align 4
  %684 = zext i32 %683 to i64
  store i64 %684, i64* %RAX, align 8, !tbaa !2428
  %685 = add i64 %679, -20
  %686 = add i64 %678, 6
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %685 to i32*
  %688 = load i32, i32* %687, align 4
  %689 = add i32 %688, %683
  %690 = zext i32 %689 to i64
  store i64 %690, i64* %RAX, align 8, !tbaa !2428
  %691 = icmp ult i32 %689, %683
  %692 = icmp ult i32 %689, %688
  %693 = or i1 %691, %692
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %39, align 1, !tbaa !2432
  %695 = and i32 %689, 255
  %696 = tail call i32 @llvm.ctpop.i32(i32 %695) #12
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  store i8 %699, i8* %45, align 1, !tbaa !2446
  %700 = xor i32 %688, %683
  %701 = xor i32 %700, %689
  %702 = lshr i32 %701, 4
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  store i8 %704, i8* %50, align 1, !tbaa !2447
  %705 = icmp eq i32 %689, 0
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %53, align 1, !tbaa !2448
  %707 = lshr i32 %689, 31
  %708 = trunc i32 %707 to i8
  store i8 %708, i8* %56, align 1, !tbaa !2449
  %709 = lshr i32 %683, 31
  %710 = lshr i32 %688, 31
  %711 = xor i32 %707, %709
  %712 = xor i32 %707, %710
  %713 = add nuw nsw i32 %711, %712
  %714 = icmp eq i32 %713, 2
  %715 = zext i1 %714 to i8
  store i8 %715, i8* %62, align 1, !tbaa !2450
  %716 = add i64 %678, 9
  store i64 %716, i64* %PC, align 8
  store i32 %689, i32* %682, align 4
  %717 = load i64, i64* %RBP, align 8
  %718 = add i64 %717, -28
  %719 = load i64, i64* %PC, align 8
  %720 = add i64 %719, 3
  store i64 %720, i64* %PC, align 8
  %721 = inttoptr i64 %718 to i32*
  %722 = load i32, i32* %721, align 4
  %723 = add i32 %722, 1
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RAX, align 8, !tbaa !2428
  %725 = icmp eq i32 %722, -1
  %726 = icmp eq i32 %723, 0
  %727 = or i1 %725, %726
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %39, align 1, !tbaa !2432
  %729 = and i32 %723, 255
  %730 = tail call i32 @llvm.ctpop.i32(i32 %729) #12
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  %733 = xor i8 %732, 1
  store i8 %733, i8* %45, align 1, !tbaa !2446
  %734 = xor i32 %723, %722
  %735 = lshr i32 %734, 4
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  store i8 %737, i8* %50, align 1, !tbaa !2447
  %738 = zext i1 %726 to i8
  store i8 %738, i8* %53, align 1, !tbaa !2448
  %739 = lshr i32 %723, 31
  %740 = trunc i32 %739 to i8
  store i8 %740, i8* %56, align 1, !tbaa !2449
  %741 = lshr i32 %722, 31
  %742 = xor i32 %739, %741
  %743 = add nuw nsw i32 %742, %739
  %744 = icmp eq i32 %743, 2
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %62, align 1, !tbaa !2450
  %746 = add i64 %719, 9
  store i64 %746, i64* %PC, align 8
  store i32 %723, i32* %721, align 4
  %747 = load i64, i64* %PC, align 8
  %748 = add i64 %747, -108
  store i64 %748, i64* %PC, align 8, !tbaa !2428
  br label %block_402bc7
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_402e30___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402e30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402cf0_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_402cf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -12
  %14 = load i32, i32* %EDI, align 4
  %15 = add i64 %12, 6
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 5
  store i64 %20, i64* %PC, align 8
  %21 = bitcast %union.VectorReg* %5 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 1
  %23 = extractelement <2 x float> %22, i32 0
  %24 = inttoptr i64 %18 to float*
  store float %23, float* %24, align 4
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -16
  %27 = load i64, i64* %RSI, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -20
  %33 = load i32, i32* %EDX, align 4
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -32
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  store i32 0, i32* %41, align 4
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -28
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %53, align 1, !tbaa !2432
  %54 = and i32 %52, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #12
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %60, align 1, !tbaa !2447
  %61 = icmp eq i32 %52, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = lshr i32 %52, 31
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %67, align 1, !tbaa !2450
  %68 = xor i1 %61, true
  %69 = icmp eq i8 %65, 0
  %70 = and i1 %69, %68
  %.v = select i1 %70, i64 15, i64 10
  %71 = add i64 %49, %.v
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  br i1 %70, label %block_402d20, label %block_402db9.sink.split

block_402d3b:                                     ; preds = %block_402d47, %block_402d2a
  %72 = phi i64 [ %361, %block_402d47 ], [ %.pre, %block_402d2a ]
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -24
  %75 = add i64 %72, 3
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %73, -36
  %80 = add i64 %72, 6
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = sub i32 %77, %82
  %84 = icmp ult i32 %77, %82
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %53, align 1, !tbaa !2432
  %86 = and i32 %83, 255
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #12
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  store i8 %90, i8* %59, align 1, !tbaa !2446
  %91 = xor i32 %82, %77
  %92 = xor i32 %91, %83
  %93 = lshr i32 %92, 4
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %60, align 1, !tbaa !2447
  %96 = icmp eq i32 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %63, align 1, !tbaa !2448
  %98 = lshr i32 %83, 31
  %99 = trunc i32 %98 to i8
  store i8 %99, i8* %66, align 1, !tbaa !2449
  %100 = lshr i32 %77, 31
  %101 = lshr i32 %82, 31
  %102 = xor i32 %101, %100
  %103 = xor i32 %98, %100
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %67, align 1, !tbaa !2450
  %107 = icmp ne i8 %99, 0
  %108 = xor i1 %107, %105
  %.v11 = select i1 %108, i64 12, i64 57
  %109 = add i64 %72, %.v11
  store i64 %109, i64* %PC, align 8, !tbaa !2428
  br i1 %108, label %block_402d47, label %block_402db9.sink.split.loopexit

block_402d79:                                     ; preds = %block_402d20
  %110 = add i64 %47, -24
  %111 = add i64 %387, 7
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i32*
  store i32 0, i32* %112, align 4
  %113 = bitcast %union.VectorReg* %5 to i8*
  %114 = bitcast %union.VectorReg* %5 to float*
  %115 = bitcast %union.VectorReg* %5 to i32*
  %116 = getelementptr inbounds i8, i8* %113, i64 4
  %117 = bitcast i8* %116 to float*
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %119 = bitcast i64* %118 to float*
  %120 = getelementptr inbounds i8, i8* %113, i64 12
  %121 = bitcast i8* %120 to float*
  %122 = bitcast i64* %118 to <2 x i32>*
  %123 = bitcast i8* %116 to i32*
  %124 = bitcast i64* %118 to i32*
  %125 = bitcast i8* %120 to i32*
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_402d80

block_402d8c:                                     ; preds = %block_402d80
  %126 = add i64 %249, -8
  %127 = add i64 %285, 5
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i32*
  %129 = load i32, i32* %128, align 4
  store i32 %129, i32* %115, align 1, !tbaa !2451
  store float 0.000000e+00, float* %117, align 1, !tbaa !2451
  store float 0.000000e+00, float* %119, align 1, !tbaa !2451
  store float 0.000000e+00, float* %121, align 1, !tbaa !2451
  %130 = add i64 %249, -16
  %131 = add i64 %285, 9
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = add i64 %285, 13
  store i64 %134, i64* %PC, align 8
  %135 = load i32, i32* %252, align 4
  %136 = sext i32 %135 to i64
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = shl nsw i64 %136, 2
  %138 = add i64 %137, %133
  %139 = add i64 %285, 18
  store i64 %139, i64* %PC, align 8
  %140 = load <2 x float>, <2 x float>* %21, align 1
  %141 = load <2 x i32>, <2 x i32>* %122, align 1
  %142 = inttoptr i64 %138 to float*
  %143 = load float, float* %142, align 4
  %144 = extractelement <2 x float> %140, i32 0
  %145 = fmul float %144, %143
  store float %145, float* %114, align 1, !tbaa !2451
  %146 = bitcast <2 x float> %140 to <2 x i32>
  %147 = extractelement <2 x i32> %146, i32 1
  store i32 %147, i32* %123, align 1, !tbaa !2451
  %148 = extractelement <2 x i32> %141, i32 0
  store i32 %148, i32* %124, align 1, !tbaa !2451
  %149 = extractelement <2 x i32> %141, i32 1
  store i32 %149, i32* %125, align 1, !tbaa !2451
  %150 = add i64 %285, 22
  store i64 %150, i64* %PC, align 8
  %151 = load i64, i64* %132, align 8
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  %152 = add i64 %285, 26
  store i64 %152, i64* %PC, align 8
  %153 = load i32, i32* %252, align 4
  %154 = sext i32 %153 to i64
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = shl nsw i64 %154, 2
  %156 = add i64 %155, %151
  %157 = add i64 %285, 31
  store i64 %157, i64* %PC, align 8
  %158 = load <2 x float>, <2 x float>* %21, align 1
  %159 = extractelement <2 x float> %158, i32 0
  %160 = inttoptr i64 %156 to float*
  store float %159, float* %160, align 4
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -24
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = icmp eq i32 %166, -1
  %170 = icmp eq i32 %167, 0
  %171 = or i1 %169, %170
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %53, align 1, !tbaa !2432
  %173 = and i32 %167, 255
  %174 = tail call i32 @llvm.ctpop.i32(i32 %173) #12
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = xor i8 %176, 1
  store i8 %177, i8* %59, align 1, !tbaa !2446
  %178 = xor i32 %167, %166
  %179 = lshr i32 %178, 4
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %60, align 1, !tbaa !2447
  %182 = zext i1 %170 to i8
  store i8 %182, i8* %63, align 1, !tbaa !2448
  %183 = lshr i32 %167, 31
  %184 = trunc i32 %183 to i8
  store i8 %184, i8* %66, align 1, !tbaa !2449
  %185 = lshr i32 %166, 31
  %186 = xor i32 %183, %185
  %187 = add nuw nsw i32 %186, %183
  %188 = icmp eq i32 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %67, align 1, !tbaa !2450
  %190 = add i64 %163, 9
  store i64 %190, i64* %PC, align 8
  store i32 %167, i32* %165, align 4
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, -52
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  br label %block_402d80

block_402db9.sink.split.loopexit:                 ; preds = %block_402d3b
  br label %block_402db9.sink.split

block_402db9.sink.split:                          ; preds = %block_402db9.sink.split.loopexit, %block_402cf0
  %193 = phi i64 [ %71, %block_402cf0 ], [ %109, %block_402db9.sink.split.loopexit ]
  %.sink5 = phi i64 [ 158, %block_402cf0 ], [ 69, %block_402db9.sink.split.loopexit ]
  %194 = add i64 %193, %.sink5
  store i64 %194, i64* %PC, align 8, !tbaa !2428
  br label %block_402db9

block_402db9.loopexit:                            ; preds = %block_402d80
  br label %block_402db9

block_402db9:                                     ; preds = %block_402db9.loopexit, %block_402db9.sink.split
  %195 = phi i64 [ %194, %block_402db9.sink.split ], [ %285, %block_402db9.loopexit ]
  %196 = add i64 %195, 1
  store i64 %196, i64* %PC, align 8
  %197 = load i64, i64* %8, align 8, !tbaa !2428
  %198 = add i64 %197, 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RBP, align 8, !tbaa !2428
  store i64 %198, i64* %8, align 8, !tbaa !2428
  %201 = add i64 %195, 2
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %198 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %PC, align 8, !tbaa !2428
  %204 = add i64 %197, 16
  store i64 %204, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402d2a:                                     ; preds = %block_402d20
  %205 = add i64 %387, 3
  store i64 %205, i64* %PC, align 8
  %206 = load i32, i32* %51, align 4
  %207 = zext i32 %206 to i64
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %387, 7
  store i64 %208, i64* %PC, align 8
  %209 = load i32, i32* %364, align 4
  %210 = sext i32 %206 to i64
  %211 = sext i32 %209 to i64
  %212 = mul nsw i64 %211, %210
  %213 = trunc i64 %212 to i32
  %214 = and i64 %212, 4294967295
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = shl i64 %212, 32
  %216 = ashr exact i64 %215, 32
  %217 = icmp ne i64 %216, %212
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %53, align 1, !tbaa !2432
  %219 = and i32 %213, 255
  %220 = tail call i32 @llvm.ctpop.i32(i32 %219) #12
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  store i8 %223, i8* %59, align 1, !tbaa !2446
  store i8 0, i8* %60, align 1, !tbaa !2447
  store i8 0, i8* %63, align 1, !tbaa !2448
  %224 = lshr i32 %213, 31
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %66, align 1, !tbaa !2449
  store i8 %218, i8* %67, align 1, !tbaa !2450
  %226 = add i64 %47, -36
  %227 = trunc i64 %212 to i32
  %228 = add i64 %387, 10
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %226 to i32*
  store i32 %227, i32* %229, align 4
  %230 = load i64, i64* %RBP, align 8
  %231 = add i64 %230, -24
  %232 = load i64, i64* %PC, align 8
  %233 = add i64 %232, 7
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %231 to i32*
  store i32 0, i32* %234, align 4
  %235 = bitcast %union.VectorReg* %5 to i8*
  %236 = bitcast %union.VectorReg* %5 to float*
  %237 = bitcast %union.VectorReg* %5 to i32*
  %238 = getelementptr inbounds i8, i8* %235, i64 4
  %239 = bitcast i8* %238 to float*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %241 = bitcast i64* %240 to float*
  %242 = getelementptr inbounds i8, i8* %235, i64 12
  %243 = bitcast i8* %242 to float*
  %244 = bitcast i64* %240 to <2 x i32>*
  %245 = bitcast i8* %238 to i32*
  %246 = bitcast i64* %240 to i32*
  %247 = bitcast i8* %242 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402d3b

block_402d80:                                     ; preds = %block_402d8c, %block_402d79
  %248 = phi i64 [ %192, %block_402d8c ], [ %.pre9, %block_402d79 ]
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -24
  %251 = add i64 %248, 3
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i32*
  %253 = load i32, i32* %252, align 4
  %254 = zext i32 %253 to i64
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = add i64 %249, -4
  %256 = add i64 %248, 6
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %255 to i32*
  %258 = load i32, i32* %257, align 4
  %259 = sub i32 %253, %258
  %260 = icmp ult i32 %253, %258
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %53, align 1, !tbaa !2432
  %262 = and i32 %259, 255
  %263 = tail call i32 @llvm.ctpop.i32(i32 %262) #12
  %264 = trunc i32 %263 to i8
  %265 = and i8 %264, 1
  %266 = xor i8 %265, 1
  store i8 %266, i8* %59, align 1, !tbaa !2446
  %267 = xor i32 %258, %253
  %268 = xor i32 %267, %259
  %269 = lshr i32 %268, 4
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  store i8 %271, i8* %60, align 1, !tbaa !2447
  %272 = icmp eq i32 %259, 0
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %63, align 1, !tbaa !2448
  %274 = lshr i32 %259, 31
  %275 = trunc i32 %274 to i8
  store i8 %275, i8* %66, align 1, !tbaa !2449
  %276 = lshr i32 %253, 31
  %277 = lshr i32 %258, 31
  %278 = xor i32 %277, %276
  %279 = xor i32 %274, %276
  %280 = add nuw nsw i32 %279, %278
  %281 = icmp eq i32 %280, 2
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %67, align 1, !tbaa !2450
  %283 = icmp ne i8 %275, 0
  %284 = xor i1 %283, %281
  %.v12 = select i1 %284, i64 12, i64 57
  %285 = add i64 %248, %.v12
  store i64 %285, i64* %PC, align 8, !tbaa !2428
  br i1 %284, label %block_402d8c, label %block_402db9.loopexit

block_402d47:                                     ; preds = %block_402d3b
  %286 = add i64 %73, -8
  %287 = add i64 %109, 5
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to i32*
  %289 = load i32, i32* %288, align 4
  store i32 %289, i32* %237, align 1, !tbaa !2451
  store float 0.000000e+00, float* %239, align 1, !tbaa !2451
  store float 0.000000e+00, float* %241, align 1, !tbaa !2451
  store float 0.000000e+00, float* %243, align 1, !tbaa !2451
  %290 = add i64 %73, -16
  %291 = add i64 %109, 9
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292, align 8
  store i64 %293, i64* %RAX, align 8, !tbaa !2428
  %294 = add i64 %109, 13
  store i64 %294, i64* %PC, align 8
  %295 = load i32, i32* %76, align 4
  %296 = sext i32 %295 to i64
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  %297 = shl nsw i64 %296, 2
  %298 = add i64 %297, %293
  %299 = add i64 %109, 18
  store i64 %299, i64* %PC, align 8
  %300 = load <2 x float>, <2 x float>* %21, align 1
  %301 = load <2 x i32>, <2 x i32>* %244, align 1
  %302 = inttoptr i64 %298 to float*
  %303 = load float, float* %302, align 4
  %304 = extractelement <2 x float> %300, i32 0
  %305 = fmul float %304, %303
  store float %305, float* %236, align 1, !tbaa !2451
  %306 = bitcast <2 x float> %300 to <2 x i32>
  %307 = extractelement <2 x i32> %306, i32 1
  store i32 %307, i32* %245, align 1, !tbaa !2451
  %308 = extractelement <2 x i32> %301, i32 0
  store i32 %308, i32* %246, align 1, !tbaa !2451
  %309 = extractelement <2 x i32> %301, i32 1
  store i32 %309, i32* %247, align 1, !tbaa !2451
  %310 = add i64 %109, 22
  store i64 %310, i64* %PC, align 8
  %311 = load i64, i64* %292, align 8
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = add i64 %109, 26
  store i64 %312, i64* %PC, align 8
  %313 = load i32, i32* %76, align 4
  %314 = sext i32 %313 to i64
  store i64 %314, i64* %RCX, align 8, !tbaa !2428
  %315 = shl nsw i64 %314, 2
  %316 = add i64 %315, %311
  %317 = add i64 %109, 31
  store i64 %317, i64* %PC, align 8
  %318 = load <2 x float>, <2 x float>* %21, align 1
  %319 = extractelement <2 x float> %318, i32 0
  %320 = inttoptr i64 %316 to float*
  store float %319, float* %320, align 4
  %321 = load i64, i64* %RBP, align 8
  %322 = add i64 %321, -24
  %323 = load i64, i64* %PC, align 8
  %324 = add i64 %323, 3
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %322 to i32*
  %326 = load i32, i32* %325, align 4
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RAX, align 8, !tbaa !2428
  %328 = add i64 %321, -20
  %329 = add i64 %323, 6
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = add i32 %331, %326
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = icmp ult i32 %332, %326
  %335 = icmp ult i32 %332, %331
  %336 = or i1 %334, %335
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %53, align 1, !tbaa !2432
  %338 = and i32 %332, 255
  %339 = tail call i32 @llvm.ctpop.i32(i32 %338) #12
  %340 = trunc i32 %339 to i8
  %341 = and i8 %340, 1
  %342 = xor i8 %341, 1
  store i8 %342, i8* %59, align 1, !tbaa !2446
  %343 = xor i32 %331, %326
  %344 = xor i32 %343, %332
  %345 = lshr i32 %344, 4
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  store i8 %347, i8* %60, align 1, !tbaa !2447
  %348 = icmp eq i32 %332, 0
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %63, align 1, !tbaa !2448
  %350 = lshr i32 %332, 31
  %351 = trunc i32 %350 to i8
  store i8 %351, i8* %66, align 1, !tbaa !2449
  %352 = lshr i32 %326, 31
  %353 = lshr i32 %331, 31
  %354 = xor i32 %350, %352
  %355 = xor i32 %350, %353
  %356 = add nuw nsw i32 %354, %355
  %357 = icmp eq i32 %356, 2
  %358 = zext i1 %357 to i8
  store i8 %358, i8* %67, align 1, !tbaa !2450
  %359 = add i64 %323, 9
  store i64 %359, i64* %PC, align 8
  store i32 %332, i32* %325, align 4
  %360 = load i64, i64* %PC, align 8
  %361 = add i64 %360, -52
  store i64 %361, i64* %PC, align 8, !tbaa !2428
  br label %block_402d3b

block_402d20:                                     ; preds = %block_402cf0
  %362 = add i64 %47, -20
  %363 = add i64 %71, 4
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %362 to i32*
  %365 = load i32, i32* %364, align 4
  %366 = add i32 %365, -1
  %367 = icmp eq i32 %365, 0
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %53, align 1, !tbaa !2432
  %369 = and i32 %366, 255
  %370 = tail call i32 @llvm.ctpop.i32(i32 %369) #12
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  store i8 %373, i8* %59, align 1, !tbaa !2446
  %374 = xor i32 %366, %365
  %375 = lshr i32 %374, 4
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %60, align 1, !tbaa !2447
  %378 = icmp eq i32 %366, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %63, align 1, !tbaa !2448
  %380 = lshr i32 %366, 31
  %381 = trunc i32 %380 to i8
  store i8 %381, i8* %66, align 1, !tbaa !2449
  %382 = lshr i32 %365, 31
  %383 = xor i32 %380, %382
  %384 = add nuw nsw i32 %383, %382
  %385 = icmp eq i32 %384, 2
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %67, align 1, !tbaa !2450
  %.v10 = select i1 %378, i64 89, i64 10
  %387 = add i64 %71, %.v10
  store i64 %387, i64* %PC, align 8, !tbaa !2428
  br i1 %378, label %block_402d79, label %block_402d2a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400500__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_400500:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %11 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %RSI, align 8, !tbaa !2428
  store i64 %12, i64* %RDX, align 8, !tbaa !2428
  %15 = and i64 %12, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 240
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %4, align 1, !tbaa !2446
  %22 = icmp eq i64 %15, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %5, align 1, !tbaa !2448
  %24 = lshr i64 %12, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %26 = load i64, i64* %RAX, align 8
  %27 = add i64 %1, 14
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %15, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %15, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %28, i64* %33, align 16
  %34 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_402e30___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_402dc0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %34, 27
  %36 = add i64 %15, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37, align 8
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %38 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = tail call fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC, align 8
  %42 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %41, %struct.Memory* %39)
  ret %struct.Memory* %42
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401760_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_401760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %19 = getelementptr inbounds i8, i8* %16, i64 4
  %20 = bitcast i8* %19 to i32*
  %21 = bitcast i64* %17 to i32*
  %22 = getelementptr inbounds i8, i8* %16, i64 12
  %23 = bitcast i8* %22 to i32*
  %24 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %24, align 1, !tbaa !2453
  %25 = add i64 %12, -16
  %26 = load i64, i64* %RDI, align 8
  %27 = add i64 %15, 10
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %28, align 8
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -12
  %31 = load i32, i32* %ESI, align 4
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %30 to i32*
  store i32 %31, i32* %34, align 4
  %35 = load i64, i64* %RBP, align 8
  %36 = add i64 %35, -16
  %37 = load i32, i32* %EDX, align 4
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %40, align 4
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RCX, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -32
  %49 = load i64, i64* %R8, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -36
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %54 to i32*
  store i32 1325, i32* %57, align 4
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -32
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = add i64 %60, 8
  store i64 %64, i64* %PC, align 8
  %65 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 1
  %67 = extractelement <2 x float> %66, i32 0
  %68 = inttoptr i64 %63 to float*
  store float %67, float* %68, align 4
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -44
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i32*
  store i32 0, i32* %73, align 4
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %80 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %81 = bitcast i64* %17 to double*
  %82 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %84 = bitcast i64* %83 to double*
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %86 = bitcast %union.VectorReg* %8 to double*
  %87 = bitcast %union.VectorReg* %7 to double*
  %88 = bitcast [32 x %union.VectorReg]* %6 to double*
  %89 = bitcast i64* %17 to <2 x i32>*
  %90 = bitcast [32 x %union.VectorReg]* %6 to float*
  %91 = bitcast i8* %19 to float*
  %92 = bitcast i64* %17 to float*
  %93 = bitcast i8* %22 to float*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40178f

block_4018d4:                                     ; preds = %block_4018c8
  %94 = add i64 %302, -24
  %95 = add i64 %338, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %338, 8
  store i64 %98, i64* %PC, align 8
  %99 = load i32, i32* %305, align 4
  %100 = sext i32 %99 to i64
  store i64 %100, i64* %RCX, align 8, !tbaa !2428
  %101 = shl nsw i64 %100, 2
  %102 = add i64 %101, %97
  %103 = add i64 %338, 13
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %106 = add i64 %302, -8
  %107 = add i64 %338, 17
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %302, -12
  %111 = add i64 %338, 20
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = zext i32 %113 to i64
  store i64 %114, i64* %RDX, align 8, !tbaa !2428
  %115 = add i64 %302, -44
  %116 = add i64 %338, 24
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %115 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = sext i32 %113 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %120, %119
  %122 = trunc i64 %121 to i32
  %123 = and i64 %121, 4294967295
  store i64 %123, i64* %RDX, align 8, !tbaa !2428
  %124 = shl i64 %121, 32
  %125 = ashr exact i64 %124, 32
  %126 = icmp ne i64 %125, %121
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %74, align 1, !tbaa !2432
  %128 = and i32 %122, 255
  %129 = tail call i32 @llvm.ctpop.i32(i32 %128) #12
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  store i8 %132, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %133 = lshr i32 %122, 31
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %78, align 1, !tbaa !2449
  store i8 %127, i8* %79, align 1, !tbaa !2450
  %135 = add i64 %338, 27
  store i64 %135, i64* %PC, align 8
  %136 = trunc i64 %121 to i32
  %137 = load i32, i32* %305, align 4
  %138 = add i32 %137, %136
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDX, align 8, !tbaa !2428
  %140 = icmp ult i32 %138, %136
  %141 = icmp ult i32 %138, %137
  %142 = or i1 %140, %141
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %74, align 1, !tbaa !2432
  %144 = and i32 %138, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #12
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %75, align 1, !tbaa !2446
  %149 = xor i32 %137, %136
  %150 = xor i32 %149, %138
  %151 = lshr i32 %150, 4
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %76, align 1, !tbaa !2447
  %154 = icmp eq i32 %138, 0
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %77, align 1, !tbaa !2448
  %156 = lshr i32 %138, 31
  %157 = trunc i32 %156 to i8
  store i8 %157, i8* %78, align 1, !tbaa !2449
  %158 = lshr i32 %136, 31
  %159 = lshr i32 %137, 31
  %160 = xor i32 %156, %158
  %161 = xor i32 %156, %159
  %162 = add nuw nsw i32 %160, %161
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %79, align 1, !tbaa !2450
  %165 = sext i32 %138 to i64
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = shl nsw i64 %165, 2
  %167 = add i64 %109, %166
  %168 = add i64 %338, 35
  store i64 %168, i64* %PC, align 8
  %169 = load <2 x float>, <2 x float>* %65, align 1
  %170 = load <2 x i32>, <2 x i32>* %89, align 1
  %171 = inttoptr i64 %167 to float*
  %172 = load float, float* %171, align 4
  %173 = extractelement <2 x float> %169, i32 0
  %174 = fadd float %173, %172
  store float %174, float* %90, align 1, !tbaa !2451
  %175 = bitcast <2 x float> %169 to <2 x i32>
  %176 = extractelement <2 x i32> %175, i32 1
  store i32 %176, i32* %20, align 1, !tbaa !2451
  %177 = extractelement <2 x i32> %170, i32 0
  store i32 %177, i32* %21, align 1, !tbaa !2451
  %178 = extractelement <2 x i32> %170, i32 1
  store i32 %178, i32* %23, align 1, !tbaa !2451
  %179 = load i64, i64* %RBP, align 8
  %180 = add i64 %179, -24
  %181 = add i64 %338, 39
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = add i64 %179, -40
  %185 = add i64 %338, 43
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %184 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = sext i32 %187 to i64
  store i64 %188, i64* %RCX, align 8, !tbaa !2428
  %189 = shl nsw i64 %188, 2
  %190 = add i64 %189, %183
  %191 = add i64 %338, 48
  store i64 %191, i64* %PC, align 8
  %192 = load <2 x float>, <2 x float>* %65, align 1
  %193 = extractelement <2 x float> %192, i32 0
  %194 = inttoptr i64 %190 to float*
  store float %193, float* %194, align 4
  %195 = load i64, i64* %RBP, align 8
  %196 = add i64 %195, -40
  %197 = load i64, i64* %PC, align 8
  %198 = add i64 %197, 3
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %196 to i32*
  %200 = load i32, i32* %199, align 4
  %201 = add i32 %200, 1
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %RAX, align 8, !tbaa !2428
  %203 = icmp eq i32 %200, -1
  %204 = icmp eq i32 %201, 0
  %205 = or i1 %203, %204
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %74, align 1, !tbaa !2432
  %207 = and i32 %201, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207) #12
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  store i8 %211, i8* %75, align 1, !tbaa !2446
  %212 = xor i32 %201, %200
  %213 = lshr i32 %212, 4
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  store i8 %215, i8* %76, align 1, !tbaa !2447
  %216 = zext i1 %204 to i8
  store i8 %216, i8* %77, align 1, !tbaa !2448
  %217 = lshr i32 %201, 31
  %218 = trunc i32 %217 to i8
  store i8 %218, i8* %78, align 1, !tbaa !2449
  %219 = lshr i32 %200, 31
  %220 = xor i32 %217, %219
  %221 = add nuw nsw i32 %220, %217
  %222 = icmp eq i32 %221, 2
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %79, align 1, !tbaa !2450
  %224 = add i64 %197, 9
  store i64 %224, i64* %PC, align 8
  store i32 %201, i32* %199, align 4
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, -69
  store i64 %226, i64* %PC, align 8, !tbaa !2428
  br label %block_4018c8

block_401822:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %227 = add i64 %721, -8
  %228 = add i64 %720, 4
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %227 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = add i64 %721, -12
  %232 = add i64 %720, 7
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = zext i32 %234 to i64
  store i64 %235, i64* %RCX, align 8, !tbaa !2428
  %236 = add i64 %721, -44
  %237 = add i64 %720, 11
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i32*
  %239 = load i32, i32* %238, align 4
  %240 = sext i32 %234 to i64
  %241 = sext i32 %239 to i64
  %242 = mul nsw i64 %241, %240
  %243 = trunc i64 %242 to i32
  %244 = and i64 %242, 4294967295
  store i64 %244, i64* %RCX, align 8, !tbaa !2428
  %245 = shl i64 %242, 32
  %246 = ashr exact i64 %245, 32
  %247 = icmp ne i64 %246, %242
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %74, align 1, !tbaa !2432
  %249 = and i32 %243, 255
  %250 = tail call i32 @llvm.ctpop.i32(i32 %249) #12
  %251 = trunc i32 %250 to i8
  %252 = and i8 %251, 1
  %253 = xor i8 %252, 1
  store i8 %253, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %254 = lshr i32 %243, 31
  %255 = trunc i32 %254 to i8
  store i8 %255, i8* %78, align 1, !tbaa !2449
  store i8 %248, i8* %79, align 1, !tbaa !2450
  %256 = add i64 %721, -40
  %257 = add i64 %720, 14
  store i64 %257, i64* %PC, align 8
  %258 = trunc i64 %242 to i32
  %259 = inttoptr i64 %256 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = add i32 %260, %258
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = icmp ult i32 %261, %258
  %264 = icmp ult i32 %261, %260
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %74, align 1, !tbaa !2432
  %267 = and i32 %261, 255
  %268 = tail call i32 @llvm.ctpop.i32(i32 %267) #12
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  store i8 %271, i8* %75, align 1, !tbaa !2446
  %272 = xor i32 %260, %258
  %273 = xor i32 %272, %261
  %274 = lshr i32 %273, 4
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %76, align 1, !tbaa !2447
  %277 = icmp eq i32 %261, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %77, align 1, !tbaa !2448
  %279 = lshr i32 %261, 31
  %280 = trunc i32 %279 to i8
  store i8 %280, i8* %78, align 1, !tbaa !2449
  %281 = lshr i32 %258, 31
  %282 = lshr i32 %260, 31
  %283 = xor i32 %279, %281
  %284 = xor i32 %279, %282
  %285 = add nuw nsw i32 %283, %284
  %286 = icmp eq i32 %285, 2
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %79, align 1, !tbaa !2450
  %288 = sext i32 %261 to i64
  store i64 %288, i64* %RDX, align 8, !tbaa !2428
  %289 = shl nsw i64 %288, 2
  %290 = add i64 %230, %289
  %291 = add i64 %720, 22
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %290 to i32*
  %293 = load i32, i32* %292, align 4
  store i32 %293, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %294 = add i64 %721, -52
  %295 = add i64 %720, 27
  store i64 %295, i64* %PC, align 8
  %296 = load <2 x float>, <2 x float>* %65, align 1
  %297 = extractelement <2 x float> %296, i32 0
  %298 = inttoptr i64 %294 to float*
  store float %297, float* %298, align 4
  %299 = load i64, i64* %PC, align 8
  %300 = add i64 %299, 18
  store i64 %300, i64* %PC, align 8, !tbaa !2428
  br label %block_40184f

block_4018c8:                                     ; preds = %block_4018c1, %block_4018d4
  %301 = phi i64 [ %.pre20, %block_4018c1 ], [ %226, %block_4018d4 ]
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -40
  %304 = add i64 %301, 3
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %303 to i32*
  %306 = load i32, i32* %305, align 4
  %307 = zext i32 %306 to i64
  store i64 %307, i64* %RAX, align 8, !tbaa !2428
  %308 = add i64 %302, -16
  %309 = add i64 %301, 6
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %308 to i32*
  %311 = load i32, i32* %310, align 4
  %312 = sub i32 %306, %311
  %313 = icmp ult i32 %306, %311
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %74, align 1, !tbaa !2432
  %315 = and i32 %312, 255
  %316 = tail call i32 @llvm.ctpop.i32(i32 %315) #12
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  store i8 %319, i8* %75, align 1, !tbaa !2446
  %320 = xor i32 %311, %306
  %321 = xor i32 %320, %312
  %322 = lshr i32 %321, 4
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  store i8 %324, i8* %76, align 1, !tbaa !2447
  %325 = icmp eq i32 %312, 0
  %326 = zext i1 %325 to i8
  store i8 %326, i8* %77, align 1, !tbaa !2448
  %327 = lshr i32 %312, 31
  %328 = trunc i32 %327 to i8
  store i8 %328, i8* %78, align 1, !tbaa !2449
  %329 = lshr i32 %306, 31
  %330 = lshr i32 %311, 31
  %331 = xor i32 %330, %329
  %332 = xor i32 %327, %329
  %333 = add nuw nsw i32 %332, %331
  %334 = icmp eq i32 %333, 2
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %79, align 1, !tbaa !2450
  %336 = icmp ne i8 %328, 0
  %337 = xor i1 %336, %334
  %.v29 = select i1 %337, i64 12, i64 74
  %338 = add i64 %301, %.v29
  store i64 %338, i64* %PC, align 8, !tbaa !2428
  br i1 %337, label %block_4018d4, label %block_401912

block_4018c1:                                     ; preds = %block_4018b5
  %339 = add i64 %355, -40
  %340 = add i64 %391, 7
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i32*
  store i32 0, i32* %341, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_4018c8

block_401842:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %342 = add i64 %721, -32
  %343 = add i64 %720, 4
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = add i64 %720, 8
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %345 to i32*
  %348 = load i32, i32* %347, align 4
  store i32 %348, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %349 = add i64 %721, -52
  %350 = add i64 %720, 13
  store i64 %350, i64* %PC, align 8
  %351 = load <2 x float>, <2 x float>* %65, align 1
  %352 = extractelement <2 x float> %351, i32 0
  %353 = inttoptr i64 %349 to float*
  store float %352, float* %353, align 4
  %.pre28 = load i64, i64* %PC, align 8
  br label %block_40184f

block_4018b5:                                     ; preds = %block_401912, %block_4018ae
  %354 = phi i64 [ %789, %block_401912 ], [ %.pre19, %block_4018ae ]
  %355 = load i64, i64* %RBP, align 8
  %356 = add i64 %355, -44
  %357 = add i64 %354, 3
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i32*
  %359 = load i32, i32* %358, align 4
  %360 = zext i32 %359 to i64
  store i64 %360, i64* %RAX, align 8, !tbaa !2428
  %361 = add i64 %355, -16
  %362 = add i64 %354, 6
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i32*
  %364 = load i32, i32* %363, align 4
  %365 = sub i32 %359, %364
  %366 = icmp ult i32 %359, %364
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %74, align 1, !tbaa !2432
  %368 = and i32 %365, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #12
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %75, align 1, !tbaa !2446
  %373 = xor i32 %364, %359
  %374 = xor i32 %373, %365
  %375 = lshr i32 %374, 4
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %76, align 1, !tbaa !2447
  %378 = icmp eq i32 %365, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %77, align 1, !tbaa !2448
  %380 = lshr i32 %365, 31
  %381 = trunc i32 %380 to i8
  store i8 %381, i8* %78, align 1, !tbaa !2449
  %382 = lshr i32 %359, 31
  %383 = lshr i32 %364, 31
  %384 = xor i32 %383, %382
  %385 = xor i32 %380, %382
  %386 = add nuw nsw i32 %385, %384
  %387 = icmp eq i32 %386, 2
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %79, align 1, !tbaa !2450
  %389 = icmp ne i8 %381, 0
  %390 = xor i1 %389, %387
  %.v32 = select i1 %390, i64 12, i64 112
  %391 = add i64 %354, %.v32
  store i64 %391, i64* %PC, align 8, !tbaa !2428
  br i1 %390, label %block_4018c1, label %block_401925

block_4018ae:                                     ; preds = %block_401884
  %392 = add i64 %887, -44
  %393 = add i64 %923, 7
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %392 to i32*
  store i32 0, i32* %394, align 4
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4018b5

block_40186a:                                     ; preds = %block_4017a2
  %395 = add i64 %723, -44
  %396 = add i64 %759, 8
  store i64 %396, i64* %PC, align 8
  %397 = inttoptr i64 %395 to i32*
  %398 = load i32, i32* %397, align 4
  %399 = add i32 %398, 1
  %400 = zext i32 %399 to i64
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = icmp eq i32 %398, -1
  %402 = icmp eq i32 %399, 0
  %403 = or i1 %401, %402
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %74, align 1, !tbaa !2432
  %405 = and i32 %399, 255
  %406 = tail call i32 @llvm.ctpop.i32(i32 %405) #12
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  store i8 %409, i8* %75, align 1, !tbaa !2446
  %410 = xor i32 %399, %398
  %411 = lshr i32 %410, 4
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  store i8 %413, i8* %76, align 1, !tbaa !2447
  %414 = zext i1 %402 to i8
  store i8 %414, i8* %77, align 1, !tbaa !2448
  %415 = lshr i32 %399, 31
  %416 = trunc i32 %415 to i8
  store i8 %416, i8* %78, align 1, !tbaa !2449
  %417 = lshr i32 %398, 31
  %418 = xor i32 %415, %417
  %419 = add nuw nsw i32 %418, %415
  %420 = icmp eq i32 %419, 2
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %79, align 1, !tbaa !2450
  %422 = add i64 %759, 14
  store i64 %422, i64* %PC, align 8
  store i32 %399, i32* %397, align 4
  %423 = load i64, i64* %PC, align 8
  %424 = add i64 %423, -233
  store i64 %424, i64* %PC, align 8, !tbaa !2428
  br label %block_40178f

block_40184f:                                     ; preds = %block_401842, %block_401822
  %425 = phi i64 [ %.pre28, %block_401842 ], [ %300, %block_401822 ]
  %426 = load i64, i64* %RBP, align 8
  %427 = add i64 %426, -52
  %428 = add i64 %425, 5
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i32*
  %430 = load i32, i32* %429, align 4
  store i32 %430, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %431 = add i64 %426, -32
  %432 = add i64 %425, 9
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %431 to i64*
  %434 = load i64, i64* %433, align 8
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = add i64 %425, 13
  store i64 %435, i64* %PC, align 8
  %436 = load <2 x float>, <2 x float>* %65, align 1
  %437 = extractelement <2 x float> %436, i32 0
  %438 = inttoptr i64 %434 to float*
  store float %437, float* %438, align 4
  %439 = load i64, i64* %RBP, align 8
  %440 = add i64 %439, -40
  %441 = load i64, i64* %PC, align 8
  %442 = add i64 %441, 3
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %440 to i32*
  %444 = load i32, i32* %443, align 4
  %445 = add i32 %444, 1
  %446 = zext i32 %445 to i64
  store i64 %446, i64* %RAX, align 8, !tbaa !2428
  %447 = icmp eq i32 %444, -1
  %448 = icmp eq i32 %445, 0
  %449 = or i1 %447, %448
  %450 = zext i1 %449 to i8
  store i8 %450, i8* %74, align 1, !tbaa !2432
  %451 = and i32 %445, 255
  %452 = tail call i32 @llvm.ctpop.i32(i32 %451) #12
  %453 = trunc i32 %452 to i8
  %454 = and i8 %453, 1
  %455 = xor i8 %454, 1
  store i8 %455, i8* %75, align 1, !tbaa !2446
  %456 = xor i32 %445, %444
  %457 = lshr i32 %456, 4
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  store i8 %459, i8* %76, align 1, !tbaa !2447
  %460 = zext i1 %448 to i8
  store i8 %460, i8* %77, align 1, !tbaa !2448
  %461 = lshr i32 %445, 31
  %462 = trunc i32 %461 to i8
  store i8 %462, i8* %78, align 1, !tbaa !2449
  %463 = lshr i32 %444, 31
  %464 = xor i32 %461, %463
  %465 = add nuw nsw i32 %464, %461
  %466 = icmp eq i32 %465, 2
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %79, align 1, !tbaa !2450
  %468 = add i64 %441, 9
  store i64 %468, i64* %PC, align 8
  store i32 %445, i32* %443, align 4
  %469 = load i64, i64* %PC, align 8
  %470 = add i64 %469, -195
  store i64 %470, i64* %PC, align 8, !tbaa !2428
  br label %block_4017a2

block_4017ae:                                     ; preds = %block_4017a2
  %471 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 56) to i64*), align 8
  store i64 %471, i64* %80, align 1, !tbaa !2454
  store double 0.000000e+00, double* %81, align 1, !tbaa !2454
  %472 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 64) to i64*), align 16
  store i64 %472, i64* %82, align 1, !tbaa !2454
  store double 0.000000e+00, double* %84, align 1, !tbaa !2454
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %473 = add i64 %723, -36
  %474 = add i64 %759, 28
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %473 to i32*
  %476 = load i32, i32* %475, align 4
  %477 = sext i32 %476 to i64
  %478 = mul nsw i64 %477, 3125
  %479 = trunc i64 %478 to i32
  %480 = and i64 %478, 4294967295
  store i64 %480, i64* %RCX, align 8, !tbaa !2428
  %481 = mul i64 %477, 13421772800000
  %482 = ashr exact i64 %481, 32
  %483 = icmp ne i64 %482, %478
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %74, align 1, !tbaa !2432
  %485 = and i32 %479, 255
  %486 = tail call i32 @llvm.ctpop.i32(i32 %485) #12
  %487 = trunc i32 %486 to i8
  %488 = and i8 %487, 1
  %489 = xor i8 %488, 1
  store i8 %489, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %490 = lshr i32 %479, 31
  %491 = trunc i32 %490 to i8
  store i8 %491, i8* %78, align 1, !tbaa !2449
  store i8 %484, i8* %79, align 1, !tbaa !2450
  %492 = add i64 %723, -48
  %493 = add i64 %759, 31
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to i32*
  store i32 65536, i32* %494, align 4
  %495 = load i32, i32* %ECX, align 4
  %496 = zext i32 %495 to i64
  %497 = load i64, i64* %PC, align 8
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %498 = sext i32 %495 to i64
  %499 = lshr i64 %498, 32
  store i64 %499, i64* %85, align 8, !tbaa !2428
  %500 = load i64, i64* %RBP, align 8
  %501 = add i64 %500, -48
  %502 = add i64 %497, 6
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %501 to i32*
  %504 = load i32, i32* %503, align 4
  %505 = zext i32 %504 to i64
  store i64 %505, i64* %RCX, align 8, !tbaa !2428
  %506 = add i64 %497, 8
  store i64 %506, i64* %PC, align 8
  %507 = sext i32 %504 to i64
  %508 = shl nuw i64 %499, 32
  %509 = or i64 %508, %496
  %510 = sdiv i64 %509, %507
  %511 = shl i64 %510, 32
  %512 = ashr exact i64 %511, 32
  %513 = icmp eq i64 %510, %512
  br i1 %513, label %516, label %514

; <label>:514:                                    ; preds = %block_4017ae
  %515 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %506, %struct.Memory* %MEMORY.3) #13
  %.pre22 = load i64, i64* %RBP, align 8
  %.pre23 = load i32, i32* %EDX, align 4
  %.pre24 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:516:                                    ; preds = %block_4017ae
  %517 = srem i64 %509, %507
  %518 = and i64 %510, 4294967295
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = and i64 %517, 4294967295
  store i64 %519, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %74, align 1, !tbaa !2432
  store i8 0, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %78, align 1, !tbaa !2449
  store i8 0, i8* %79, align 1, !tbaa !2450
  %520 = trunc i64 %517 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %516, %514
  %521 = phi i64 [ %.pre24, %514 ], [ %506, %516 ]
  %522 = phi i32 [ %.pre23, %514 ], [ %520, %516 ]
  %523 = phi i64 [ %.pre22, %514 ], [ %500, %516 ]
  %524 = phi %struct.Memory* [ %515, %514 ], [ %MEMORY.3, %516 ]
  %525 = add i64 %523, -36
  %526 = add i64 %521, 3
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i32*
  store i32 %522, i32* %527, align 4
  %528 = load i64, i64* %RBP, align 8
  %529 = add i64 %528, -36
  %530 = load i64, i64* %PC, align 8
  %531 = add i64 %530, 5
  store i64 %531, i64* %PC, align 8
  %532 = inttoptr i64 %529 to i32*
  %533 = load i32, i32* %532, align 4
  %534 = sitofp i32 %533 to double
  %535 = load double, double* %87, align 1
  %536 = fsub double %534, %535
  %537 = load double, double* %88, align 1
  %538 = fdiv double %536, %537
  store double %538, double* %86, align 1, !tbaa !2454
  %.cast = bitcast double %537 to <2 x i32>
  %539 = load <2 x i32>, <2 x i32>* %89, align 1
  %540 = fptrunc double %538 to float
  store float %540, float* %90, align 1, !tbaa !2451
  %541 = extractelement <2 x i32> %.cast, i32 1
  store i32 %541, i32* %20, align 1, !tbaa !2451
  %542 = extractelement <2 x i32> %539, i32 0
  store i32 %542, i32* %21, align 1, !tbaa !2451
  %543 = extractelement <2 x i32> %539, i32 1
  store i32 %543, i32* %23, align 1, !tbaa !2451
  %544 = add i64 %528, -8
  %545 = add i64 %530, 21
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %544 to i64*
  %547 = load i64, i64* %546, align 8
  store i64 %547, i64* %RSI, align 8, !tbaa !2428
  %548 = add i64 %528, -12
  %549 = add i64 %530, 24
  store i64 %549, i64* %PC, align 8
  %550 = inttoptr i64 %548 to i32*
  %551 = load i32, i32* %550, align 4
  %552 = zext i32 %551 to i64
  store i64 %552, i64* %RDX, align 8, !tbaa !2428
  %553 = add i64 %528, -44
  %554 = add i64 %530, 28
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %553 to i32*
  %556 = load i32, i32* %555, align 4
  %557 = sext i32 %551 to i64
  %558 = sext i32 %556 to i64
  %559 = mul nsw i64 %558, %557
  %560 = trunc i64 %559 to i32
  %561 = and i64 %559, 4294967295
  store i64 %561, i64* %RDX, align 8, !tbaa !2428
  %562 = shl i64 %559, 32
  %563 = ashr exact i64 %562, 32
  %564 = icmp ne i64 %563, %559
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %74, align 1, !tbaa !2432
  %566 = and i32 %560, 255
  %567 = tail call i32 @llvm.ctpop.i32(i32 %566) #12
  %568 = trunc i32 %567 to i8
  %569 = and i8 %568, 1
  %570 = xor i8 %569, 1
  store i8 %570, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %571 = lshr i32 %560, 31
  %572 = trunc i32 %571 to i8
  store i8 %572, i8* %78, align 1, !tbaa !2449
  store i8 %565, i8* %79, align 1, !tbaa !2450
  %573 = add i64 %528, -40
  %574 = add i64 %530, 31
  store i64 %574, i64* %PC, align 8
  %575 = trunc i64 %559 to i32
  %576 = inttoptr i64 %573 to i32*
  %577 = load i32, i32* %576, align 4
  %578 = add i32 %577, %575
  %579 = zext i32 %578 to i64
  store i64 %579, i64* %RDX, align 8, !tbaa !2428
  %580 = icmp ult i32 %578, %575
  %581 = icmp ult i32 %578, %577
  %582 = or i1 %580, %581
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %74, align 1, !tbaa !2432
  %584 = and i32 %578, 255
  %585 = tail call i32 @llvm.ctpop.i32(i32 %584) #12
  %586 = trunc i32 %585 to i8
  %587 = and i8 %586, 1
  %588 = xor i8 %587, 1
  store i8 %588, i8* %75, align 1, !tbaa !2446
  %589 = xor i32 %577, %575
  %590 = xor i32 %589, %578
  %591 = lshr i32 %590, 4
  %592 = trunc i32 %591 to i8
  %593 = and i8 %592, 1
  store i8 %593, i8* %76, align 1, !tbaa !2447
  %594 = icmp eq i32 %578, 0
  %595 = zext i1 %594 to i8
  store i8 %595, i8* %77, align 1, !tbaa !2448
  %596 = lshr i32 %578, 31
  %597 = trunc i32 %596 to i8
  store i8 %597, i8* %78, align 1, !tbaa !2449
  %598 = lshr i32 %575, 31
  %599 = lshr i32 %577, 31
  %600 = xor i32 %596, %598
  %601 = xor i32 %596, %599
  %602 = add nuw nsw i32 %600, %601
  %603 = icmp eq i32 %602, 2
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %79, align 1, !tbaa !2450
  %605 = sext i32 %578 to i64
  store i64 %605, i64* %RDI, align 8, !tbaa !2428
  %606 = shl nsw i64 %605, 2
  %607 = add i64 %547, %606
  %608 = add i64 %530, 39
  store i64 %608, i64* %PC, align 8
  %609 = load <2 x float>, <2 x float>* %65, align 1
  %610 = extractelement <2 x float> %609, i32 0
  %611 = inttoptr i64 %607 to float*
  store float %610, float* %611, align 4
  %612 = load i64, i64* %RBP, align 8
  %613 = add i64 %612, -8
  %614 = load i64, i64* %PC, align 8
  %615 = add i64 %614, 4
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %613 to i64*
  %617 = load i64, i64* %616, align 8
  store i64 %617, i64* %RSI, align 8, !tbaa !2428
  %618 = add i64 %612, -12
  %619 = add i64 %614, 7
  store i64 %619, i64* %PC, align 8
  %620 = inttoptr i64 %618 to i32*
  %621 = load i32, i32* %620, align 4
  %622 = zext i32 %621 to i64
  store i64 %622, i64* %RDX, align 8, !tbaa !2428
  %623 = add i64 %612, -44
  %624 = add i64 %614, 11
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %623 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = sext i32 %621 to i64
  %628 = sext i32 %626 to i64
  %629 = mul nsw i64 %628, %627
  %630 = trunc i64 %629 to i32
  %631 = and i64 %629, 4294967295
  store i64 %631, i64* %RDX, align 8, !tbaa !2428
  %632 = shl i64 %629, 32
  %633 = ashr exact i64 %632, 32
  %634 = icmp ne i64 %633, %629
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %74, align 1, !tbaa !2432
  %636 = and i32 %630, 255
  %637 = tail call i32 @llvm.ctpop.i32(i32 %636) #12
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = xor i8 %639, 1
  store i8 %640, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %641 = lshr i32 %630, 31
  %642 = trunc i32 %641 to i8
  store i8 %642, i8* %78, align 1, !tbaa !2449
  store i8 %635, i8* %79, align 1, !tbaa !2450
  %643 = add i64 %612, -40
  %644 = add i64 %614, 14
  store i64 %644, i64* %PC, align 8
  %645 = trunc i64 %629 to i32
  %646 = inttoptr i64 %643 to i32*
  %647 = load i32, i32* %646, align 4
  %648 = add i32 %647, %645
  %649 = zext i32 %648 to i64
  store i64 %649, i64* %RDX, align 8, !tbaa !2428
  %650 = icmp ult i32 %648, %645
  %651 = icmp ult i32 %648, %647
  %652 = or i1 %650, %651
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %74, align 1, !tbaa !2432
  %654 = and i32 %648, 255
  %655 = tail call i32 @llvm.ctpop.i32(i32 %654) #12
  %656 = trunc i32 %655 to i8
  %657 = and i8 %656, 1
  %658 = xor i8 %657, 1
  store i8 %658, i8* %75, align 1, !tbaa !2446
  %659 = xor i32 %647, %645
  %660 = xor i32 %659, %648
  %661 = lshr i32 %660, 4
  %662 = trunc i32 %661 to i8
  %663 = and i8 %662, 1
  store i8 %663, i8* %76, align 1, !tbaa !2447
  %664 = icmp eq i32 %648, 0
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %77, align 1, !tbaa !2448
  %666 = lshr i32 %648, 31
  %667 = trunc i32 %666 to i8
  store i8 %667, i8* %78, align 1, !tbaa !2449
  %668 = lshr i32 %645, 31
  %669 = lshr i32 %647, 31
  %670 = xor i32 %666, %668
  %671 = xor i32 %666, %669
  %672 = add nuw nsw i32 %670, %671
  %673 = icmp eq i32 %672, 2
  %674 = zext i1 %673 to i8
  store i8 %674, i8* %79, align 1, !tbaa !2450
  %675 = sext i32 %648 to i64
  store i64 %675, i64* %RDI, align 8, !tbaa !2428
  %676 = shl nsw i64 %675, 2
  %677 = add i64 %617, %676
  %678 = add i64 %614, 22
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %677 to i32*
  %680 = load i32, i32* %679, align 4
  store i32 %680, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %681 = add i64 %612, -32
  %682 = add i64 %614, 26
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %681 to i64*
  %684 = load i64, i64* %683, align 8
  store i64 %684, i64* %RSI, align 8, !tbaa !2428
  %685 = add i64 %614, 29
  store i64 %685, i64* %PC, align 8
  %686 = load <2 x float>, <2 x float>* %65, align 1
  %687 = extractelement <2 x float> %686, i32 0
  %688 = inttoptr i64 %684 to float*
  %689 = load float, float* %688, align 4
  %690 = fcmp uno float %687, %689
  br i1 %690, label %691, label %701

; <label>:691:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %692 = fadd float %687, %689
  %693 = bitcast float %692 to i32
  %694 = and i32 %693, 2143289344
  %695 = icmp eq i32 %694, 2139095040
  %696 = and i32 %693, 4194303
  %697 = icmp ne i32 %696, 0
  %698 = and i1 %695, %697
  br i1 %698, label %699, label %707

; <label>:699:                                    ; preds = %691
  %700 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %685, %struct.Memory* %524) #13
  %.pre25 = load i64, i64* %PC, align 8
  %.pre26 = load i8, i8* %74, align 1, !tbaa !2432
  %.pre27 = load i8, i8* %77, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:701:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %702 = fcmp ogt float %687, %689
  br i1 %702, label %707, label %703

; <label>:703:                                    ; preds = %701
  %704 = fcmp olt float %687, %689
  br i1 %704, label %707, label %705

; <label>:705:                                    ; preds = %703
  %706 = fcmp oeq float %687, %689
  br i1 %706, label %707, label %711

; <label>:707:                                    ; preds = %705, %703, %701, %691
  %708 = phi i8 [ 0, %701 ], [ 0, %703 ], [ 1, %705 ], [ 1, %691 ]
  %709 = phi i8 [ 0, %701 ], [ 0, %703 ], [ 0, %705 ], [ 1, %691 ]
  %710 = phi i8 [ 0, %701 ], [ 1, %703 ], [ 0, %705 ], [ 1, %691 ]
  store i8 %708, i8* %77, align 1, !tbaa !2456
  store i8 %709, i8* %75, align 1, !tbaa !2456
  store i8 %710, i8* %74, align 1, !tbaa !2456
  br label %711

; <label>:711:                                    ; preds = %707, %705
  %712 = phi i8 [ %708, %707 ], [ %665, %705 ]
  %713 = phi i8 [ %710, %707 ], [ %653, %705 ]
  store i8 0, i8* %79, align 1, !tbaa !2456
  store i8 0, i8* %78, align 1, !tbaa !2456
  store i8 0, i8* %76, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %711, %699
  %714 = phi i8 [ %.pre27, %699 ], [ %712, %711 ]
  %715 = phi i8 [ %.pre26, %699 ], [ %713, %711 ]
  %716 = phi i64 [ %.pre25, %699 ], [ %685, %711 ]
  %717 = phi %struct.Memory* [ %700, %699 ], [ %524, %711 ]
  %718 = or i8 %714, %715
  %719 = icmp ne i8 %718, 0
  %.v33 = select i1 %719, i64 38, i64 6
  %720 = add i64 %716, %.v33
  store i64 %720, i64* %PC, align 8, !tbaa !2428
  %721 = load i64, i64* %RBP, align 8
  br i1 %719, label %block_401842, label %block_401822

block_4017a2:                                     ; preds = %block_4017a2.preheader, %block_40184f
  %722 = phi i64 [ %470, %block_40184f ], [ %.pre21, %block_4017a2.preheader ]
  %MEMORY.3 = phi %struct.Memory* [ %717, %block_40184f ], [ %MEMORY.4, %block_4017a2.preheader ]
  %723 = load i64, i64* %RBP, align 8
  %724 = add i64 %723, -40
  %725 = add i64 %722, 3
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to i32*
  %727 = load i32, i32* %726, align 4
  %728 = zext i32 %727 to i64
  store i64 %728, i64* %RAX, align 8, !tbaa !2428
  %729 = add i64 %723, -16
  %730 = add i64 %722, 6
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %729 to i32*
  %732 = load i32, i32* %731, align 4
  %733 = sub i32 %727, %732
  %734 = icmp ult i32 %727, %732
  %735 = zext i1 %734 to i8
  store i8 %735, i8* %74, align 1, !tbaa !2432
  %736 = and i32 %733, 255
  %737 = tail call i32 @llvm.ctpop.i32(i32 %736) #12
  %738 = trunc i32 %737 to i8
  %739 = and i8 %738, 1
  %740 = xor i8 %739, 1
  store i8 %740, i8* %75, align 1, !tbaa !2446
  %741 = xor i32 %732, %727
  %742 = xor i32 %741, %733
  %743 = lshr i32 %742, 4
  %744 = trunc i32 %743 to i8
  %745 = and i8 %744, 1
  store i8 %745, i8* %76, align 1, !tbaa !2447
  %746 = icmp eq i32 %733, 0
  %747 = zext i1 %746 to i8
  store i8 %747, i8* %77, align 1, !tbaa !2448
  %748 = lshr i32 %733, 31
  %749 = trunc i32 %748 to i8
  store i8 %749, i8* %78, align 1, !tbaa !2449
  %750 = lshr i32 %727, 31
  %751 = lshr i32 %732, 31
  %752 = xor i32 %751, %750
  %753 = xor i32 %748, %750
  %754 = add nuw nsw i32 %753, %752
  %755 = icmp eq i32 %754, 2
  %756 = zext i1 %755 to i8
  store i8 %756, i8* %79, align 1, !tbaa !2450
  %757 = icmp ne i8 %749, 0
  %758 = xor i1 %757, %755
  %.v30 = select i1 %758, i64 12, i64 200
  %759 = add i64 %722, %.v30
  store i64 %759, i64* %PC, align 8, !tbaa !2428
  br i1 %758, label %block_4017ae, label %block_40186a

block_401912:                                     ; preds = %block_4018c8
  %760 = add i64 %302, -44
  %761 = add i64 %338, 8
  store i64 %761, i64* %PC, align 8
  %762 = inttoptr i64 %760 to i32*
  %763 = load i32, i32* %762, align 4
  %764 = add i32 %763, 1
  %765 = zext i32 %764 to i64
  store i64 %765, i64* %RAX, align 8, !tbaa !2428
  %766 = icmp eq i32 %763, -1
  %767 = icmp eq i32 %764, 0
  %768 = or i1 %766, %767
  %769 = zext i1 %768 to i8
  store i8 %769, i8* %74, align 1, !tbaa !2432
  %770 = and i32 %764, 255
  %771 = tail call i32 @llvm.ctpop.i32(i32 %770) #12
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  store i8 %774, i8* %75, align 1, !tbaa !2446
  %775 = xor i32 %764, %763
  %776 = lshr i32 %775, 4
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  store i8 %778, i8* %76, align 1, !tbaa !2447
  %779 = zext i1 %767 to i8
  store i8 %779, i8* %77, align 1, !tbaa !2448
  %780 = lshr i32 %764, 31
  %781 = trunc i32 %780 to i8
  store i8 %781, i8* %78, align 1, !tbaa !2449
  %782 = lshr i32 %763, 31
  %783 = xor i32 %780, %782
  %784 = add nuw nsw i32 %783, %780
  %785 = icmp eq i32 %784, 2
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %79, align 1, !tbaa !2450
  %787 = add i64 %338, 14
  store i64 %787, i64* %PC, align 8
  store i32 %764, i32* %762, align 4
  %788 = load i64, i64* %PC, align 8
  %789 = add i64 %788, -107
  store i64 %789, i64* %PC, align 8, !tbaa !2428
  br label %block_4018b5

block_401890:                                     ; preds = %block_401884
  store <4 x i32> zeroinitializer, <4 x i32>* %876, align 1, !tbaa !2453
  %790 = add i64 %887, -24
  %791 = add i64 %923, 7
  store i64 %791, i64* %PC, align 8
  %792 = inttoptr i64 %790 to i64*
  %793 = load i64, i64* %792, align 8
  store i64 %793, i64* %RAX, align 8, !tbaa !2428
  %794 = add i64 %923, 11
  store i64 %794, i64* %PC, align 8
  %795 = load i32, i32* %890, align 4
  %796 = sext i32 %795 to i64
  store i64 %796, i64* %RCX, align 8, !tbaa !2428
  %797 = shl nsw i64 %796, 2
  %798 = add i64 %797, %793
  %799 = add i64 %923, 16
  store i64 %799, i64* %PC, align 8
  %800 = load <2 x float>, <2 x float>* %65, align 1
  %801 = extractelement <2 x float> %800, i32 0
  %802 = inttoptr i64 %798 to float*
  store float %801, float* %802, align 4
  %803 = load i64, i64* %RBP, align 8
  %804 = add i64 %803, -40
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, 3
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %804 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = add i32 %808, 1
  %810 = zext i32 %809 to i64
  store i64 %810, i64* %RAX, align 8, !tbaa !2428
  %811 = icmp eq i32 %808, -1
  %812 = icmp eq i32 %809, 0
  %813 = or i1 %811, %812
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %74, align 1, !tbaa !2432
  %815 = and i32 %809, 255
  %816 = tail call i32 @llvm.ctpop.i32(i32 %815) #12
  %817 = trunc i32 %816 to i8
  %818 = and i8 %817, 1
  %819 = xor i8 %818, 1
  store i8 %819, i8* %75, align 1, !tbaa !2446
  %820 = xor i32 %809, %808
  %821 = lshr i32 %820, 4
  %822 = trunc i32 %821 to i8
  %823 = and i8 %822, 1
  store i8 %823, i8* %76, align 1, !tbaa !2447
  %824 = zext i1 %812 to i8
  store i8 %824, i8* %77, align 1, !tbaa !2448
  %825 = lshr i32 %809, 31
  %826 = trunc i32 %825 to i8
  store i8 %826, i8* %78, align 1, !tbaa !2449
  %827 = lshr i32 %808, 31
  %828 = xor i32 %825, %827
  %829 = add nuw nsw i32 %828, %825
  %830 = icmp eq i32 %829, 2
  %831 = zext i1 %830 to i8
  store i8 %831, i8* %79, align 1, !tbaa !2450
  %832 = add i64 %805, 9
  store i64 %832, i64* %PC, align 8
  store i32 %809, i32* %807, align 4
  %833 = load i64, i64* %PC, align 8
  %834 = add i64 %833, -37
  store i64 %834, i64* %PC, align 8, !tbaa !2428
  br label %block_401884

block_40178f:                                     ; preds = %block_40186a, %block_401760
  %835 = phi i64 [ %.pre, %block_401760 ], [ %424, %block_40186a ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401760 ], [ %MEMORY.3, %block_40186a ]
  %836 = load i64, i64* %RBP, align 8
  %837 = add i64 %836, -44
  %838 = add i64 %835, 3
  store i64 %838, i64* %PC, align 8
  %839 = inttoptr i64 %837 to i32*
  %840 = load i32, i32* %839, align 4
  %841 = zext i32 %840 to i64
  store i64 %841, i64* %RAX, align 8, !tbaa !2428
  %842 = add i64 %836, -16
  %843 = add i64 %835, 6
  store i64 %843, i64* %PC, align 8
  %844 = inttoptr i64 %842 to i32*
  %845 = load i32, i32* %844, align 4
  %846 = sub i32 %840, %845
  %847 = icmp ult i32 %840, %845
  %848 = zext i1 %847 to i8
  store i8 %848, i8* %74, align 1, !tbaa !2432
  %849 = and i32 %846, 255
  %850 = tail call i32 @llvm.ctpop.i32(i32 %849) #12
  %851 = trunc i32 %850 to i8
  %852 = and i8 %851, 1
  %853 = xor i8 %852, 1
  store i8 %853, i8* %75, align 1, !tbaa !2446
  %854 = xor i32 %845, %840
  %855 = xor i32 %854, %846
  %856 = lshr i32 %855, 4
  %857 = trunc i32 %856 to i8
  %858 = and i8 %857, 1
  store i8 %858, i8* %76, align 1, !tbaa !2447
  %859 = icmp eq i32 %846, 0
  %860 = zext i1 %859 to i8
  store i8 %860, i8* %77, align 1, !tbaa !2448
  %861 = lshr i32 %846, 31
  %862 = trunc i32 %861 to i8
  store i8 %862, i8* %78, align 1, !tbaa !2449
  %863 = lshr i32 %840, 31
  %864 = lshr i32 %845, 31
  %865 = xor i32 %864, %863
  %866 = xor i32 %861, %863
  %867 = add nuw nsw i32 %866, %865
  %868 = icmp eq i32 %867, 2
  %869 = zext i1 %868 to i8
  store i8 %869, i8* %79, align 1, !tbaa !2450
  %870 = icmp ne i8 %862, 0
  %871 = xor i1 %870, %868
  %.v = select i1 %871, i64 12, i64 238
  %872 = add i64 %835, %.v
  %873 = add i64 %836, -40
  %874 = add i64 %872, 7
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %873 to i32*
  store i32 0, i32* %875, align 4
  %.pre21 = load i64, i64* %PC, align 8
  br i1 %871, label %block_4017a2.preheader, label %block_401884.preheader

block_4017a2.preheader:                           ; preds = %block_40178f
  br label %block_4017a2

block_401884.preheader:                           ; preds = %block_40178f
  %876 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  br label %block_401884

block_401925:                                     ; preds = %block_4018b5
  %877 = add i64 %391, 1
  store i64 %877, i64* %PC, align 8
  %878 = load i64, i64* %11, align 8, !tbaa !2428
  %879 = add i64 %878, 8
  %880 = inttoptr i64 %878 to i64*
  %881 = load i64, i64* %880, align 8
  store i64 %881, i64* %RBP, align 8, !tbaa !2428
  store i64 %879, i64* %11, align 8, !tbaa !2428
  %882 = add i64 %391, 2
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %879 to i64*
  %884 = load i64, i64* %883, align 8
  store i64 %884, i64* %PC, align 8, !tbaa !2428
  %885 = add i64 %878, 16
  store i64 %885, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_401884:                                     ; preds = %block_401884.preheader, %block_401890
  %886 = phi i64 [ %834, %block_401890 ], [ %.pre21, %block_401884.preheader ]
  %887 = load i64, i64* %RBP, align 8
  %888 = add i64 %887, -40
  %889 = add i64 %886, 3
  store i64 %889, i64* %PC, align 8
  %890 = inttoptr i64 %888 to i32*
  %891 = load i32, i32* %890, align 4
  %892 = zext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = add i64 %887, -16
  %894 = add i64 %886, 6
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %893 to i32*
  %896 = load i32, i32* %895, align 4
  %897 = sub i32 %891, %896
  %898 = icmp ult i32 %891, %896
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %74, align 1, !tbaa !2432
  %900 = and i32 %897, 255
  %901 = tail call i32 @llvm.ctpop.i32(i32 %900) #12
  %902 = trunc i32 %901 to i8
  %903 = and i8 %902, 1
  %904 = xor i8 %903, 1
  store i8 %904, i8* %75, align 1, !tbaa !2446
  %905 = xor i32 %896, %891
  %906 = xor i32 %905, %897
  %907 = lshr i32 %906, 4
  %908 = trunc i32 %907 to i8
  %909 = and i8 %908, 1
  store i8 %909, i8* %76, align 1, !tbaa !2447
  %910 = icmp eq i32 %897, 0
  %911 = zext i1 %910 to i8
  store i8 %911, i8* %77, align 1, !tbaa !2448
  %912 = lshr i32 %897, 31
  %913 = trunc i32 %912 to i8
  store i8 %913, i8* %78, align 1, !tbaa !2449
  %914 = lshr i32 %891, 31
  %915 = lshr i32 %896, 31
  %916 = xor i32 %915, %914
  %917 = xor i32 %912, %914
  %918 = add nuw nsw i32 %917, %916
  %919 = icmp eq i32 %918, 2
  %920 = zext i1 %919 to i8
  store i8 %920, i8* %79, align 1, !tbaa !2450
  %921 = icmp ne i8 %913, 0
  %922 = xor i1 %921, %919
  %.v31 = select i1 %922, i64 12, i64 42
  %923 = add i64 %886, %.v31
  store i64 %923, i64* %PC, align 8, !tbaa !2428
  br i1 %922, label %block_401890, label %block_4018ae
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4029f0_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_4029f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %17 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %18 = getelementptr inbounds i8, i8* %15, i64 4
  %19 = bitcast i8* %18 to i32*
  %20 = bitcast i64* %16 to i32*
  %21 = getelementptr inbounds i8, i8* %15, i64 12
  %22 = bitcast i8* %21 to i32*
  %23 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %23, align 1, !tbaa !2453
  %24 = add i64 %11, -16
  %25 = load i32, i32* %EDI, align 4
  %26 = add i64 %14, 9
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %27, align 4
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %RSI, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33, align 8
  %34 = load i64, i64* %RBP, align 8
  %35 = add i64 %34, -20
  %36 = load i32, i32* %EDX, align 4
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %39, align 4
  %40 = load i64, i64* %RBP, align 8
  %41 = add i64 %40, -32
  %42 = load i64, i64* %RCX, align 8
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %45, align 8
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -36
  %48 = load i32, i32* %R8D, align 4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %51, align 4
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -60
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i32*
  store i32 0, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -56
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 7
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  store i32 0, i32* %61, align 4
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -40
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 5
  store i64 %65, i64* %PC, align 8
  %66 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 1
  %68 = extractelement <2 x float> %67, i32 0
  %69 = inttoptr i64 %63 to float*
  store float %68, float* %69, align 4
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = and i32 %75, 255
  %78 = tail call i32 @llvm.ctpop.i32(i32 %77) #12
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %81, i8* %82, align 1, !tbaa !2446
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %83, align 1, !tbaa !2447
  %84 = icmp eq i32 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i32 %75, 31
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = xor i1 %84, true
  %92 = icmp eq i8 %88, 0
  %93 = and i1 %92, %91
  %.v23 = select i1 %93, i64 23, i64 10
  %94 = add i64 %72, %.v23
  store i64 %94, i64* %PC, align 8, !tbaa !2428
  br i1 %93, label %block_402a33, label %block_402a26

block_402b3a:                                     ; preds = %block_402af8
  %95 = add i64 %116, -4
  %96 = add i64 %152, 10
  store i64 %96, i64* %PC, align 8
  %97 = load <2 x float>, <2 x float>* %66, align 1
  %98 = extractelement <2 x float> %97, i32 0
  %99 = inttoptr i64 %95 to float*
  store float %98, float* %99, align 4
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_402b44

block_402b44:                                     ; preds = %block_402ae2, %block_402a26, %block_402b3a
  %.pre-phi20 = phi float* [ %486, %block_402ae2 ], [ %.pre19, %block_402a26 ], [ %593, %block_402b3a ]
  %.pre-phi18 = phi float* [ %485, %block_402ae2 ], [ %.pre17, %block_402a26 ], [ %592, %block_402b3a ]
  %.pre-phi = phi float* [ %484, %block_402ae2 ], [ %.pre16, %block_402a26 ], [ %591, %block_402b3a ]
  %100 = phi i64 [ %694, %block_402ae2 ], [ %561, %block_402a26 ], [ %.pre15, %block_402b3a ]
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -4
  %103 = add i64 %100, 5
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi20, align 1, !tbaa !2451
  %106 = add i64 %100, 6
  store i64 %106, i64* %PC, align 8
  %107 = load i64, i64* %10, align 8, !tbaa !2428
  %108 = add i64 %107, 8
  %109 = inttoptr i64 %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %10, align 8, !tbaa !2428
  %111 = add i64 %100, 7
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %107, 16
  store i64 %114, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402af8:                                     ; preds = %block_402b04, %block_402af1
  %115 = phi i64 [ %687, %block_402b04 ], [ %.pre, %block_402af1 ]
  %116 = load i64, i64* %RBP, align 8
  %117 = add i64 %116, -44
  %118 = add i64 %115, 3
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = zext i32 %120 to i64
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = add i64 %116, -8
  %123 = add i64 %115, 6
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %122 to i32*
  %125 = load i32, i32* %124, align 4
  %126 = sub i32 %120, %125
  %127 = icmp ult i32 %120, %125
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %76, align 1, !tbaa !2432
  %129 = and i32 %126, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #12
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %82, align 1, !tbaa !2446
  %134 = xor i32 %125, %120
  %135 = xor i32 %134, %126
  %136 = lshr i32 %135, 4
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %83, align 1, !tbaa !2447
  %139 = icmp eq i32 %126, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %86, align 1, !tbaa !2448
  %141 = lshr i32 %126, 31
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %89, align 1, !tbaa !2449
  %143 = lshr i32 %120, 31
  %144 = lshr i32 %125, 31
  %145 = xor i32 %144, %143
  %146 = xor i32 %141, %143
  %147 = add nuw nsw i32 %146, %145
  %148 = icmp eq i32 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %90, align 1, !tbaa !2450
  %150 = icmp ne i8 %142, 0
  %151 = xor i1 %150, %148
  %.v22 = select i1 %151, i64 12, i64 66
  %152 = add i64 %115, %.v22
  %153 = add i64 %116, -40
  %154 = add i64 %152, 5
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %153 to i32*
  %156 = load i32, i32* %155, align 4
  store i32 %156, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %591, align 1, !tbaa !2451
  store float 0.000000e+00, float* %592, align 1, !tbaa !2451
  store float 0.000000e+00, float* %593, align 1, !tbaa !2451
  br i1 %151, label %block_402b04, label %block_402b3a

block_402a8e:                                     ; preds = %block_402a87, %block_402a9a
  %157 = phi i64 [ %.pre14, %block_402a87 ], [ %478, %block_402a9a ]
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -44
  %160 = add i64 %157, 3
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %159 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %158, -8
  %165 = add i64 %157, 6
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i32*
  %167 = load i32, i32* %166, align 4
  %168 = sub i32 %162, %167
  %169 = icmp ult i32 %162, %167
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %76, align 1, !tbaa !2432
  %171 = and i32 %168, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #12
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %82, align 1, !tbaa !2446
  %176 = xor i32 %167, %162
  %177 = xor i32 %176, %168
  %178 = lshr i32 %177, 4
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %83, align 1, !tbaa !2447
  %181 = icmp eq i32 %168, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %86, align 1, !tbaa !2448
  %183 = lshr i32 %168, 31
  %184 = trunc i32 %183 to i8
  store i8 %184, i8* %89, align 1, !tbaa !2449
  %185 = lshr i32 %162, 31
  %186 = lshr i32 %167, 31
  %187 = xor i32 %186, %185
  %188 = xor i32 %183, %185
  %189 = add nuw nsw i32 %188, %187
  %190 = icmp eq i32 %189, 2
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %90, align 1, !tbaa !2450
  %192 = icmp ne i8 %184, 0
  %193 = xor i1 %192, %190
  %.v21 = select i1 %193, i64 12, i64 84
  %194 = add i64 %157, %.v21
  %195 = add i64 %158, -40
  %196 = add i64 %194, 5
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i32*
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %484, align 1, !tbaa !2451
  store float 0.000000e+00, float* %485, align 1, !tbaa !2451
  store float 0.000000e+00, float* %486, align 1, !tbaa !2451
  br i1 %193, label %block_402a9a, label %block_402ae2

block_402a3d:                                     ; preds = %block_402a33
  %199 = add i64 %70, -36
  %200 = add i64 %587, 4
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = add i32 %202, -1
  %204 = icmp eq i32 %202, 0
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %76, align 1, !tbaa !2432
  %206 = and i32 %203, 255
  %207 = tail call i32 @llvm.ctpop.i32(i32 %206) #12
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  store i8 %210, i8* %82, align 1, !tbaa !2446
  %211 = xor i32 %203, %202
  %212 = lshr i32 %211, 4
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  store i8 %214, i8* %83, align 1, !tbaa !2447
  %215 = icmp eq i32 %203, 0
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %86, align 1, !tbaa !2448
  %217 = lshr i32 %203, 31
  %218 = trunc i32 %217 to i8
  store i8 %218, i8* %89, align 1, !tbaa !2449
  %219 = lshr i32 %202, 31
  %220 = xor i32 %217, %219
  %221 = add nuw nsw i32 %220, %219
  %222 = icmp eq i32 %221, 2
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %90, align 1, !tbaa !2450
  %.v25 = select i1 %215, i64 180, i64 10
  %224 = add i64 %587, %.v25
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %215, label %block_402af1, label %block_402a47

block_402a6e:                                     ; preds = %block_402a47, %block_402a5f
  %225 = phi i64 [ %267, %block_402a47 ], [ %.pre11, %block_402a5f ]
  %226 = phi i64 [ %251, %block_402a47 ], [ %.pre10, %block_402a5f ]
  %227 = add i64 %226, -36
  %228 = add i64 %225, 4
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %227 to i32*
  %230 = load i32, i32* %229, align 4
  store i8 0, i8* %76, align 1, !tbaa !2432
  %231 = and i32 %230, 255
  %232 = tail call i32 @llvm.ctpop.i32(i32 %231) #12
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  store i8 %235, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  %236 = icmp eq i32 %230, 0
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %86, align 1, !tbaa !2448
  %238 = lshr i32 %230, 31
  %239 = trunc i32 %238 to i8
  store i8 %239, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  %240 = icmp ne i8 %239, 0
  %.v7 = select i1 %240, i64 6, i64 21
  %241 = add i64 %228, %.v7
  store i64 %241, i64* %PC, align 8, !tbaa !2428
  br i1 %240, label %block_402a78, label %block_402a87

block_402a47:                                     ; preds = %block_402a33, %block_402a3d
  %242 = phi i64 [ %587, %block_402a33 ], [ %224, %block_402a3d ]
  %243 = add i64 %70, -48
  %244 = add i64 %242, 7
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i32*
  store i32 0, i32* %245, align 4
  %246 = load i64, i64* %RBP, align 8
  %247 = add i64 %246, -52
  %248 = load i64, i64* %PC, align 8
  %249 = add i64 %248, 7
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %247 to i32*
  store i32 0, i32* %250, align 4
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -20
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255, align 4
  store i8 0, i8* %76, align 1, !tbaa !2432
  %257 = and i32 %256, 255
  %258 = tail call i32 @llvm.ctpop.i32(i32 %257) #12
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  store i8 %261, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  %262 = icmp eq i32 %256, 0
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %86, align 1, !tbaa !2448
  %264 = lshr i32 %256, 31
  %265 = trunc i32 %264 to i8
  store i8 %265, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  %266 = icmp ne i8 %265, 0
  %.v = select i1 %266, i64 6, i64 21
  %267 = add i64 %254, %.v
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  br i1 %266, label %block_402a5f, label %block_402a6e

block_402a78:                                     ; preds = %block_402a6e
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %76, align 1, !tbaa !2432
  store i8 1, i8* %82, align 1, !tbaa !2446
  store i8 1, i8* %86, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  store i8 0, i8* %83, align 1, !tbaa !2447
  %268 = add i64 %226, -8
  %269 = add i64 %241, 5
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %268 to i32*
  %271 = load i32, i32* %270, align 4
  %272 = sub i32 0, %271
  %273 = lshr i32 %272, 31
  %274 = sub i32 1, %271
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = icmp eq i32 %272, -1
  %277 = icmp eq i32 %274, 0
  %278 = or i1 %276, %277
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %76, align 1, !tbaa !2432
  %280 = and i32 %274, 255
  %281 = tail call i32 @llvm.ctpop.i32(i32 %280) #12
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  %284 = xor i8 %283, 1
  store i8 %284, i8* %82, align 1, !tbaa !2446
  %285 = xor i32 %274, %272
  %286 = lshr i32 %285, 4
  %287 = trunc i32 %286 to i8
  %288 = and i8 %287, 1
  store i8 %288, i8* %83, align 1, !tbaa !2447
  %289 = zext i1 %277 to i8
  store i8 %289, i8* %86, align 1, !tbaa !2448
  %290 = lshr i32 %274, 31
  %291 = trunc i32 %290 to i8
  store i8 %291, i8* %89, align 1, !tbaa !2449
  %292 = xor i32 %290, %273
  %293 = add nuw nsw i32 %292, %290
  %294 = icmp eq i32 %293, 2
  %295 = zext i1 %294 to i8
  store i8 %295, i8* %90, align 1, !tbaa !2450
  %296 = add i64 %241, 12
  store i64 %296, i64* %PC, align 8
  %297 = load i32, i32* %229, align 4
  %298 = sext i32 %274 to i64
  %299 = sext i32 %297 to i64
  %300 = mul nsw i64 %299, %298
  %301 = trunc i64 %300 to i32
  %302 = and i64 %300, 4294967295
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = shl i64 %300, 32
  %304 = ashr exact i64 %303, 32
  %305 = icmp ne i64 %304, %300
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %76, align 1, !tbaa !2432
  %307 = and i32 %301, 255
  %308 = tail call i32 @llvm.ctpop.i32(i32 %307) #12
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  store i8 %311, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  store i8 0, i8* %86, align 1, !tbaa !2448
  %312 = lshr i32 %301, 31
  %313 = trunc i32 %312 to i8
  store i8 %313, i8* %89, align 1, !tbaa !2449
  store i8 %306, i8* %90, align 1, !tbaa !2450
  %314 = load i64, i64* %RBP, align 8
  %315 = add i64 %314, -52
  %316 = trunc i64 %300 to i32
  %317 = add i64 %241, 15
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %315 to i32*
  store i32 %316, i32* %318, align 4
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i64, i64* %PC, align 8
  br label %block_402a87

block_402a9a:                                     ; preds = %block_402a8e
  %319 = add i64 %158, -16
  %320 = add i64 %194, 9
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = add i64 %158, -48
  %324 = add i64 %194, 13
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i32*
  %326 = load i32, i32* %325, align 4
  %327 = sext i32 %326 to i64
  store i64 %327, i64* %RCX, align 8, !tbaa !2428
  %328 = shl nsw i64 %327, 2
  %329 = add i64 %328, %322
  %330 = add i64 %194, 18
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i32*
  %332 = load i32, i32* %331, align 4
  store i32 %332, i32* %490, align 1, !tbaa !2451
  store float 0.000000e+00, float* %492, align 1, !tbaa !2451
  store float 0.000000e+00, float* %494, align 1, !tbaa !2451
  store float 0.000000e+00, float* %496, align 1, !tbaa !2451
  %333 = add i64 %158, -32
  %334 = add i64 %194, 22
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = add i64 %158, -52
  %338 = add i64 %194, 26
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = sext i32 %340 to i64
  store i64 %341, i64* %RCX, align 8, !tbaa !2428
  %342 = shl nsw i64 %341, 2
  %343 = add i64 %342, %336
  %344 = add i64 %194, 31
  store i64 %344, i64* %PC, align 8
  %345 = load <2 x float>, <2 x float>* %497, align 1
  %346 = load <2 x i32>, <2 x i32>* %498, align 1
  %347 = inttoptr i64 %343 to float*
  %348 = load float, float* %347, align 4
  %349 = extractelement <2 x float> %345, i32 0
  %350 = fmul float %349, %348
  store float %350, float* %489, align 1, !tbaa !2451
  %351 = bitcast <2 x float> %345 to <2 x i32>
  %352 = extractelement <2 x i32> %351, i32 1
  store i32 %352, i32* %499, align 1, !tbaa !2451
  %353 = extractelement <2 x i32> %346, i32 0
  store i32 %353, i32* %500, align 1, !tbaa !2451
  %354 = extractelement <2 x i32> %346, i32 1
  store i32 %354, i32* %501, align 1, !tbaa !2451
  %355 = load <2 x float>, <2 x float>* %66, align 1
  %356 = load <2 x i32>, <2 x i32>* %502, align 1
  %357 = load <2 x float>, <2 x float>* %497, align 1
  %358 = extractelement <2 x float> %355, i32 0
  %359 = extractelement <2 x float> %357, i32 0
  %360 = fadd float %358, %359
  store float %360, float* %487, align 1, !tbaa !2451
  %361 = bitcast <2 x float> %355 to <2 x i32>
  %362 = extractelement <2 x i32> %361, i32 1
  store i32 %362, i32* %19, align 1, !tbaa !2451
  %363 = extractelement <2 x i32> %356, i32 0
  store i32 %363, i32* %20, align 1, !tbaa !2451
  %364 = extractelement <2 x i32> %356, i32 1
  store i32 %364, i32* %22, align 1, !tbaa !2451
  %365 = add i64 %194, 40
  store i64 %365, i64* %PC, align 8
  %366 = load <2 x float>, <2 x float>* %66, align 1
  %367 = extractelement <2 x float> %366, i32 0
  %368 = inttoptr i64 %195 to float*
  store float %367, float* %368, align 4
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -48
  %371 = load i64, i64* %PC, align 8
  %372 = add i64 %371, 3
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %370 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = zext i32 %374 to i64
  store i64 %375, i64* %RDX, align 8, !tbaa !2428
  %376 = add i64 %369, -20
  %377 = add i64 %371, 6
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = add i32 %379, %374
  %381 = zext i32 %380 to i64
  store i64 %381, i64* %RDX, align 8, !tbaa !2428
  %382 = icmp ult i32 %380, %374
  %383 = icmp ult i32 %380, %379
  %384 = or i1 %382, %383
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %76, align 1, !tbaa !2432
  %386 = and i32 %380, 255
  %387 = tail call i32 @llvm.ctpop.i32(i32 %386) #12
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  store i8 %390, i8* %82, align 1, !tbaa !2446
  %391 = xor i32 %379, %374
  %392 = xor i32 %391, %380
  %393 = lshr i32 %392, 4
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  store i8 %395, i8* %83, align 1, !tbaa !2447
  %396 = icmp eq i32 %380, 0
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %86, align 1, !tbaa !2448
  %398 = lshr i32 %380, 31
  %399 = trunc i32 %398 to i8
  store i8 %399, i8* %89, align 1, !tbaa !2449
  %400 = lshr i32 %374, 31
  %401 = lshr i32 %379, 31
  %402 = xor i32 %398, %400
  %403 = xor i32 %398, %401
  %404 = add nuw nsw i32 %402, %403
  %405 = icmp eq i32 %404, 2
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %90, align 1, !tbaa !2450
  %407 = add i64 %371, 9
  store i64 %407, i64* %PC, align 8
  store i32 %380, i32* %373, align 4
  %408 = load i64, i64* %RBP, align 8
  %409 = add i64 %408, -52
  %410 = load i64, i64* %PC, align 8
  %411 = add i64 %410, 3
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %409 to i32*
  %413 = load i32, i32* %412, align 4
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %RDX, align 8, !tbaa !2428
  %415 = add i64 %408, -36
  %416 = add i64 %410, 6
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = add i32 %418, %413
  %420 = zext i32 %419 to i64
  store i64 %420, i64* %RDX, align 8, !tbaa !2428
  %421 = icmp ult i32 %419, %413
  %422 = icmp ult i32 %419, %418
  %423 = or i1 %421, %422
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %76, align 1, !tbaa !2432
  %425 = and i32 %419, 255
  %426 = tail call i32 @llvm.ctpop.i32(i32 %425) #12
  %427 = trunc i32 %426 to i8
  %428 = and i8 %427, 1
  %429 = xor i8 %428, 1
  store i8 %429, i8* %82, align 1, !tbaa !2446
  %430 = xor i32 %418, %413
  %431 = xor i32 %430, %419
  %432 = lshr i32 %431, 4
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  store i8 %434, i8* %83, align 1, !tbaa !2447
  %435 = icmp eq i32 %419, 0
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %86, align 1, !tbaa !2448
  %437 = lshr i32 %419, 31
  %438 = trunc i32 %437 to i8
  store i8 %438, i8* %89, align 1, !tbaa !2449
  %439 = lshr i32 %413, 31
  %440 = lshr i32 %418, 31
  %441 = xor i32 %437, %439
  %442 = xor i32 %437, %440
  %443 = add nuw nsw i32 %441, %442
  %444 = icmp eq i32 %443, 2
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %90, align 1, !tbaa !2450
  %446 = add i64 %410, 9
  store i64 %446, i64* %PC, align 8
  store i32 %419, i32* %412, align 4
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -44
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, 3
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %448 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = add i32 %452, 1
  %454 = zext i32 %453 to i64
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = icmp eq i32 %452, -1
  %456 = icmp eq i32 %453, 0
  %457 = or i1 %455, %456
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %76, align 1, !tbaa !2432
  %459 = and i32 %453, 255
  %460 = tail call i32 @llvm.ctpop.i32(i32 %459) #12
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  store i8 %463, i8* %82, align 1, !tbaa !2446
  %464 = xor i32 %453, %452
  %465 = lshr i32 %464, 4
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  store i8 %467, i8* %83, align 1, !tbaa !2447
  %468 = zext i1 %456 to i8
  store i8 %468, i8* %86, align 1, !tbaa !2448
  %469 = lshr i32 %453, 31
  %470 = trunc i32 %469 to i8
  store i8 %470, i8* %89, align 1, !tbaa !2449
  %471 = lshr i32 %452, 31
  %472 = xor i32 %469, %471
  %473 = add nuw nsw i32 %472, %469
  %474 = icmp eq i32 %473, 2
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %90, align 1, !tbaa !2450
  %476 = add i64 %449, 9
  store i64 %476, i64* %PC, align 8
  store i32 %453, i32* %451, align 4
  %477 = load i64, i64* %PC, align 8
  %478 = add i64 %477, -79
  store i64 %478, i64* %PC, align 8, !tbaa !2428
  br label %block_402a8e

block_402a87:                                     ; preds = %block_402a6e, %block_402a78
  %479 = phi i64 [ %241, %block_402a6e ], [ %.pre13, %block_402a78 ]
  %480 = phi i64 [ %226, %block_402a6e ], [ %.pre12, %block_402a78 ]
  %481 = add i64 %480, -44
  %482 = add i64 %479, 7
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i32*
  store i32 0, i32* %483, align 4
  %484 = bitcast i8* %18 to float*
  %485 = bitcast i64* %16 to float*
  %486 = bitcast i8* %21 to float*
  %487 = bitcast [32 x %union.VectorReg]* %6 to float*
  %488 = bitcast %union.VectorReg* %7 to i8*
  %489 = bitcast %union.VectorReg* %7 to float*
  %490 = bitcast %union.VectorReg* %7 to i32*
  %491 = getelementptr inbounds i8, i8* %488, i64 4
  %492 = bitcast i8* %491 to float*
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %494 = bitcast i64* %493 to float*
  %495 = getelementptr inbounds i8, i8* %488, i64 12
  %496 = bitcast i8* %495 to float*
  %497 = bitcast %union.VectorReg* %7 to <2 x float>*
  %498 = bitcast i64* %493 to <2 x i32>*
  %499 = bitcast i8* %491 to i32*
  %500 = bitcast i64* %493 to i32*
  %501 = bitcast i8* %495 to i32*
  %502 = bitcast i64* %16 to <2 x i32>*
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_402a8e

block_402a5f:                                     ; preds = %block_402a47
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %76, align 1, !tbaa !2432
  store i8 1, i8* %82, align 1, !tbaa !2446
  store i8 1, i8* %86, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  store i8 0, i8* %83, align 1, !tbaa !2447
  %503 = add i64 %251, -8
  %504 = add i64 %267, 5
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %503 to i32*
  %506 = load i32, i32* %505, align 4
  %507 = sub i32 0, %506
  %508 = lshr i32 %507, 31
  %509 = sub i32 1, %506
  %510 = zext i32 %509 to i64
  store i64 %510, i64* %RAX, align 8, !tbaa !2428
  %511 = icmp eq i32 %507, -1
  %512 = icmp eq i32 %509, 0
  %513 = or i1 %511, %512
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %76, align 1, !tbaa !2432
  %515 = and i32 %509, 255
  %516 = tail call i32 @llvm.ctpop.i32(i32 %515) #12
  %517 = trunc i32 %516 to i8
  %518 = and i8 %517, 1
  %519 = xor i8 %518, 1
  store i8 %519, i8* %82, align 1, !tbaa !2446
  %520 = xor i32 %509, %507
  %521 = lshr i32 %520, 4
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  store i8 %523, i8* %83, align 1, !tbaa !2447
  %524 = zext i1 %512 to i8
  store i8 %524, i8* %86, align 1, !tbaa !2448
  %525 = lshr i32 %509, 31
  %526 = trunc i32 %525 to i8
  store i8 %526, i8* %89, align 1, !tbaa !2449
  %527 = xor i32 %525, %508
  %528 = add nuw nsw i32 %527, %525
  %529 = icmp eq i32 %528, 2
  %530 = zext i1 %529 to i8
  store i8 %530, i8* %90, align 1, !tbaa !2450
  %531 = add i64 %267, 12
  store i64 %531, i64* %PC, align 8
  %532 = load i32, i32* %255, align 4
  %533 = sext i32 %509 to i64
  %534 = sext i32 %532 to i64
  %535 = mul nsw i64 %534, %533
  %536 = trunc i64 %535 to i32
  %537 = and i64 %535, 4294967295
  store i64 %537, i64* %RAX, align 8, !tbaa !2428
  %538 = shl i64 %535, 32
  %539 = ashr exact i64 %538, 32
  %540 = icmp ne i64 %539, %535
  %541 = zext i1 %540 to i8
  store i8 %541, i8* %76, align 1, !tbaa !2432
  %542 = and i32 %536, 255
  %543 = tail call i32 @llvm.ctpop.i32(i32 %542) #12
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = xor i8 %545, 1
  store i8 %546, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  store i8 0, i8* %86, align 1, !tbaa !2448
  %547 = lshr i32 %536, 31
  %548 = trunc i32 %547 to i8
  store i8 %548, i8* %89, align 1, !tbaa !2449
  store i8 %541, i8* %90, align 1, !tbaa !2450
  %549 = load i64, i64* %RBP, align 8
  %550 = add i64 %549, -48
  %551 = trunc i64 %535 to i32
  %552 = add i64 %267, 15
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %550 to i32*
  store i32 %551, i32* %553, align 4
  %.pre10 = load i64, i64* %RBP, align 8
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_402a6e

block_402a26:                                     ; preds = %block_4029f0
  %554 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %554, align 1, !tbaa !2453
  %555 = add i64 %70, -4
  %556 = add i64 %94, 8
  store i64 %556, i64* %PC, align 8
  %557 = load <2 x float>, <2 x float>* %66, align 1
  %558 = extractelement <2 x float> %557, i32 0
  %559 = inttoptr i64 %555 to float*
  store float %558, float* %559, align 4
  %560 = load i64, i64* %PC, align 8
  %561 = add i64 %560, 278
  store i64 %561, i64* %PC, align 8, !tbaa !2428
  %.pre16 = bitcast i8* %18 to float*
  %.pre17 = bitcast i64* %16 to float*
  %.pre19 = bitcast i8* %21 to float*
  br label %block_402b44

block_402a33:                                     ; preds = %block_4029f0
  %562 = add i64 %70, -20
  %563 = add i64 %94, 4
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i32*
  %565 = load i32, i32* %564, align 4
  %566 = add i32 %565, -1
  %567 = icmp eq i32 %565, 0
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %76, align 1, !tbaa !2432
  %569 = and i32 %566, 255
  %570 = tail call i32 @llvm.ctpop.i32(i32 %569) #12
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = xor i8 %572, 1
  store i8 %573, i8* %82, align 1, !tbaa !2446
  %574 = xor i32 %566, %565
  %575 = lshr i32 %574, 4
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  store i8 %577, i8* %83, align 1, !tbaa !2447
  %578 = icmp eq i32 %566, 0
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %86, align 1, !tbaa !2448
  %580 = lshr i32 %566, 31
  %581 = trunc i32 %580 to i8
  store i8 %581, i8* %89, align 1, !tbaa !2449
  %582 = lshr i32 %565, 31
  %583 = xor i32 %580, %582
  %584 = add nuw nsw i32 %583, %582
  %585 = icmp eq i32 %584, 2
  %586 = zext i1 %585 to i8
  store i8 %586, i8* %90, align 1, !tbaa !2450
  %.v24 = select i1 %578, i64 10, i64 20
  %587 = add i64 %94, %.v24
  store i64 %587, i64* %PC, align 8, !tbaa !2428
  br i1 %578, label %block_402a3d, label %block_402a47

block_402af1:                                     ; preds = %block_402a3d
  %588 = add i64 %70, -44
  %589 = add i64 %224, 7
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %588 to i32*
  store i32 0, i32* %590, align 4
  %591 = bitcast i8* %18 to float*
  %592 = bitcast i64* %16 to float*
  %593 = bitcast i8* %21 to float*
  %594 = bitcast [32 x %union.VectorReg]* %6 to float*
  %595 = bitcast %union.VectorReg* %7 to i8*
  %596 = bitcast %union.VectorReg* %7 to float*
  %597 = bitcast %union.VectorReg* %7 to i32*
  %598 = getelementptr inbounds i8, i8* %595, i64 4
  %599 = bitcast i8* %598 to float*
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %601 = bitcast i64* %600 to float*
  %602 = getelementptr inbounds i8, i8* %595, i64 12
  %603 = bitcast i8* %602 to float*
  %604 = bitcast %union.VectorReg* %7 to <2 x float>*
  %605 = bitcast i64* %600 to <2 x i32>*
  %606 = bitcast i8* %598 to i32*
  %607 = bitcast i64* %600 to i32*
  %608 = bitcast i8* %602 to i32*
  %609 = bitcast i64* %16 to <2 x i32>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402af8

block_402b04:                                     ; preds = %block_402af8
  %610 = add i64 %116, -16
  %611 = add i64 %152, 9
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %610 to i64*
  %613 = load i64, i64* %612, align 8
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = add i64 %152, 13
  store i64 %614, i64* %PC, align 8
  %615 = load i32, i32* %119, align 4
  %616 = sext i32 %615 to i64
  store i64 %616, i64* %RCX, align 8, !tbaa !2428
  %617 = shl nsw i64 %616, 2
  %618 = add i64 %617, %613
  %619 = add i64 %152, 18
  store i64 %619, i64* %PC, align 8
  %620 = inttoptr i64 %618 to i32*
  %621 = load i32, i32* %620, align 4
  store i32 %621, i32* %597, align 1, !tbaa !2451
  store float 0.000000e+00, float* %599, align 1, !tbaa !2451
  store float 0.000000e+00, float* %601, align 1, !tbaa !2451
  store float 0.000000e+00, float* %603, align 1, !tbaa !2451
  %622 = add i64 %116, -32
  %623 = add i64 %152, 22
  store i64 %623, i64* %PC, align 8
  %624 = inttoptr i64 %622 to i64*
  %625 = load i64, i64* %624, align 8
  store i64 %625, i64* %RAX, align 8, !tbaa !2428
  %626 = add i64 %152, 26
  store i64 %626, i64* %PC, align 8
  %627 = load i32, i32* %119, align 4
  %628 = sext i32 %627 to i64
  store i64 %628, i64* %RCX, align 8, !tbaa !2428
  %629 = shl nsw i64 %628, 2
  %630 = add i64 %629, %625
  %631 = add i64 %152, 31
  store i64 %631, i64* %PC, align 8
  %632 = load <2 x float>, <2 x float>* %604, align 1
  %633 = load <2 x i32>, <2 x i32>* %605, align 1
  %634 = inttoptr i64 %630 to float*
  %635 = load float, float* %634, align 4
  %636 = extractelement <2 x float> %632, i32 0
  %637 = fmul float %636, %635
  store float %637, float* %596, align 1, !tbaa !2451
  %638 = bitcast <2 x float> %632 to <2 x i32>
  %639 = extractelement <2 x i32> %638, i32 1
  store i32 %639, i32* %606, align 1, !tbaa !2451
  %640 = extractelement <2 x i32> %633, i32 0
  store i32 %640, i32* %607, align 1, !tbaa !2451
  %641 = extractelement <2 x i32> %633, i32 1
  store i32 %641, i32* %608, align 1, !tbaa !2451
  %642 = load <2 x float>, <2 x float>* %66, align 1
  %643 = load <2 x i32>, <2 x i32>* %609, align 1
  %644 = load <2 x float>, <2 x float>* %604, align 1
  %645 = extractelement <2 x float> %642, i32 0
  %646 = extractelement <2 x float> %644, i32 0
  %647 = fadd float %645, %646
  store float %647, float* %594, align 1, !tbaa !2451
  %648 = bitcast <2 x float> %642 to <2 x i32>
  %649 = extractelement <2 x i32> %648, i32 1
  store i32 %649, i32* %19, align 1, !tbaa !2451
  %650 = extractelement <2 x i32> %643, i32 0
  store i32 %650, i32* %20, align 1, !tbaa !2451
  %651 = extractelement <2 x i32> %643, i32 1
  store i32 %651, i32* %22, align 1, !tbaa !2451
  %652 = add i64 %152, 40
  store i64 %652, i64* %PC, align 8
  %653 = load <2 x float>, <2 x float>* %66, align 1
  %654 = extractelement <2 x float> %653, i32 0
  %655 = inttoptr i64 %153 to float*
  store float %654, float* %655, align 4
  %656 = load i64, i64* %RBP, align 8
  %657 = add i64 %656, -44
  %658 = load i64, i64* %PC, align 8
  %659 = add i64 %658, 3
  store i64 %659, i64* %PC, align 8
  %660 = inttoptr i64 %657 to i32*
  %661 = load i32, i32* %660, align 4
  %662 = add i32 %661, 1
  %663 = zext i32 %662 to i64
  store i64 %663, i64* %RAX, align 8, !tbaa !2428
  %664 = icmp eq i32 %661, -1
  %665 = icmp eq i32 %662, 0
  %666 = or i1 %664, %665
  %667 = zext i1 %666 to i8
  store i8 %667, i8* %76, align 1, !tbaa !2432
  %668 = and i32 %662, 255
  %669 = tail call i32 @llvm.ctpop.i32(i32 %668) #12
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  store i8 %672, i8* %82, align 1, !tbaa !2446
  %673 = xor i32 %662, %661
  %674 = lshr i32 %673, 4
  %675 = trunc i32 %674 to i8
  %676 = and i8 %675, 1
  store i8 %676, i8* %83, align 1, !tbaa !2447
  %677 = zext i1 %665 to i8
  store i8 %677, i8* %86, align 1, !tbaa !2448
  %678 = lshr i32 %662, 31
  %679 = trunc i32 %678 to i8
  store i8 %679, i8* %89, align 1, !tbaa !2449
  %680 = lshr i32 %661, 31
  %681 = xor i32 %678, %680
  %682 = add nuw nsw i32 %681, %678
  %683 = icmp eq i32 %682, 2
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %90, align 1, !tbaa !2450
  %685 = add i64 %658, 9
  store i64 %685, i64* %PC, align 8
  store i32 %662, i32* %660, align 4
  %686 = load i64, i64* %PC, align 8
  %687 = add i64 %686, -61
  store i64 %687, i64* %PC, align 8, !tbaa !2428
  br label %block_402af8

block_402ae2:                                     ; preds = %block_402a8e
  %688 = add i64 %158, -4
  %689 = add i64 %194, 10
  store i64 %689, i64* %PC, align 8
  %690 = load <2 x float>, <2 x float>* %66, align 1
  %691 = extractelement <2 x float> %690, i32 0
  %692 = inttoptr i64 %688 to float*
  store float %691, float* %692, align 4
  %693 = load i64, i64* %PC, align 8
  %694 = add i64 %693, 88
  store i64 %694, i64* %PC, align 8, !tbaa !2428
  br label %block_402b44
}

; Function Attrs: noinline
define %struct.Memory* @sub_400570_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400570:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %RSI, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = sub i64 %8, ptrtoint (i64* @stderr to i64)
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %17 = ashr i64 %10, 3
  %18 = lshr i64 %17, 63
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  %19 = add nsw i64 %18, %17
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %19, 1
  store i64 %22, i64* %RSI, align 8, !tbaa !2428
  store i8 %21, i8* %11, align 1, !tbaa !2456
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #12
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %12, align 1, !tbaa !2456
  store i8 0, i8* %13, align 1, !tbaa !2456
  %29 = icmp eq i64 %22, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %14, align 1, !tbaa !2456
  %31 = lshr i64 %22, 63
  %32 = trunc i64 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !2456
  store i8 0, i8* %16, align 1, !tbaa !2456
  %.v = select i1 %29, i64 50, i64 29
  %33 = add i64 %9, %.v
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  br i1 %29, label %block_4005a8, label %block_400593

block_400593:                                     ; preds = %block_400570
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2448
  store i8 0, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %13, align 1, !tbaa !2447
  %34 = add i64 %33, 21
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br label %block_4005a8

block_4005a8:                                     ; preds = %block_400593, %block_400570
  %35 = phi i64 [ %34, %block_400593 ], [ %33, %block_400570 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %RSP, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400540:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i8), i8* %9, align 1, !tbaa !2432
  %10 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i32), i32 255)) #12
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !2446
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (i64* @stderr to i64), i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64))), i64 4) to i8), i8 1), i8* %15, align 1, !tbaa !2447
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0) to i8), i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63) to i8), i8* %17, align 1, !tbaa !2449
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %18, align 1, !tbaa !2450
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %19 = add i64 %8, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16)
  store i64 %19, i64* %PC, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), label %block_400568, label %block_400551

block_400551:                                     ; preds = %block_400540
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %9, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %20 = add i64 %8, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  br label %block_400568

block_400568:                                     ; preds = %block_400551, %block_400540
  %21 = phi i64 [ %20, %block_400551 ], [ %19, %block_400540 ]
  %22 = add i64 %21, 1
  store i64 %22, i64* %PC, align 8
  %23 = load i64, i64* %7, align 8
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %24 = add i64 %21, 2
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %5 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %PC, align 8, !tbaa !2428
  %27 = add i64 %5, 8
  store i64 %27, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400530__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400530:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4005e0_frame_dummy() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @callback_sub_4005e0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4005b0___do_global_dtors_aux() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @callback_sub_4005b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653138_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653148_memset(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653140_clock(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_402e30___libc_csu_fini() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @callback_sub_402e30___libc_csu_fini_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e30___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_402dc0___libc_csu_init() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402dc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @callback_sub_402dc0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402dc0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @main() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400640;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400640_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dgefa() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401930;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401930_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @what_date() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @what_date_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400630_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.init_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4004a8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4004a8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dgesl() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory* readnone) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c40_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @epslon() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4027c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4027c0_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @ddot() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4029f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4029f0_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @daxpy() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402880;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402880_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dscal() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402cf0_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @matgen() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401760_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.term_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e34;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.term_proc_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e34__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dmxpy() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401fc0_dmxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @print_time() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @print_time_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402870_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @idamax() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402b50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402b50_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @second() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005f0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #12 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_402dc0___libc_csu_init()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #12 {
  tail call void @callback_sub_402e30___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { naked nobuiltin noinline nounwind }
attributes #10 = { noinline nounwind }
attributes #11 = { norecurse nounwind }
attributes #12 = { nounwind }
attributes #13 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2452, !2452, i64 0}
!2452 = !{!"float", !2430, i64 0}
!2453 = !{!2445, !2445, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"double", !2430, i64 0}
!2456 = !{!2430, !2430, i64 0}
