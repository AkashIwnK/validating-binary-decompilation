; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_402ec0__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_402ec0__rodata = internal constant %seg_402ec0__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005b0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400580___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005b0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400580___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402eb0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e40___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402bb0_idamax_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402010_dmxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402d70_dscal_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400478__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400510_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402810_epslon_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_400478__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400478:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #8
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2447
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2448
  store i8 0, i8* %10, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_400478.block_40048a_crit_edge, label %block_400488

block_400478.block_40048a_crit_edge:              ; preds = %block_400478
  br label %block_40048a

block_400488:                                     ; preds = %block_400478
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_40048a

block_40048a:                                     ; preds = %block_400478.block_40048a_crit_edge, %block_400488
  %.pre-phi = phi i64* [ %RSP, %block_400478.block_40048a_crit_edge ], [ %RSP, %block_400488 ]
  %27 = phi i64 [ %22, %block_400478.block_40048a_crit_edge ], [ %.pre1, %block_400488 ]
  %28 = phi i64 [ %4, %block_400478.block_40048a_crit_edge ], [ %.pre, %block_400488 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400478.block_40048a_crit_edge ], [ %26, %block_400488 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #8
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %28, %29
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2450
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2447
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2448
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2449
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %.pre-phi, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400540_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004d0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4004d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2447
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2448
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2449
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2450
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %12 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %RSI, align 8, !tbaa !2428
  store i64 %13, i64* %RDX, align 8, !tbaa !2428
  %16 = and i64 %13, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 240
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #8
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %4, align 1, !tbaa !2446
  %23 = icmp eq i64 %16, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !2447
  %25 = lshr i64 %13, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %6, align 1, !tbaa !2448
  store i8 0, i8* %7, align 1, !tbaa !2449
  store i8 0, i8* %8, align 1, !tbaa !2450
  %27 = load i64, i64* %RAX, align 8
  %28 = add i64 %1, 14
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %16, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %16, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %29, i64* %34, align 16
  %35 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_402eb0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_402e40___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %36 = add i64 %35, 27
  %37 = add i64 %16, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %11, align 8, !tbaa !2428
  %39 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = tail call fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC, align 8
  %43 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %42, %struct.Memory* %40)
  ret %struct.Memory* %43
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028e0_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4028e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -12
  %16 = load i32, i32* %EDI, align 4
  %17 = add i64 %14, 6
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i32*
  store i32 %16, i32* %18, align 4
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 5
  store i64 %22, i64* %PC, align 8
  %23 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = extractelement <2 x float> %24, i32 0
  %26 = inttoptr i64 %20 to float*
  store float %25, float* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -56
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -52
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %67, align 1, !tbaa !2432
  %68 = and i32 %66, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #8
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !2446
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %74, align 1, !tbaa !2450
  %75 = icmp eq i32 %66, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2447
  %78 = lshr i32 %66, 31
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2448
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %81, align 1, !tbaa !2449
  %82 = xor i1 %75, true
  %83 = icmp eq i8 %79, 0
  %84 = and i1 %83, %82
  %.v = select i1 %84, i64 15, i64 10
  %85 = add i64 %63, %.v
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_402918, label %block_402913

block_4029f5:                                     ; preds = %block_402943
  %86 = add i64 %307, -40
  %87 = add i64 %510, 7
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  store i32 0, i32* %88, align 4
  %89 = bitcast [32 x %union.VectorReg]* %6 to float*
  %90 = bitcast i8* %101 to float*
  %91 = bitcast i64* %99 to float*
  %92 = bitcast i8* %104 to float*
  %93 = bitcast i64* %115 to <2 x i32>*
  %94 = bitcast i8* %113 to i32*
  %95 = bitcast i64* %115 to i32*
  %96 = bitcast i8* %117 to i32*
  %97 = bitcast i64* %99 to <2 x i32>*
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_4029fc

block_402918:                                     ; preds = %block_4028e0
  %98 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %100 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %100, align 1, !tbaa !2451
  %101 = getelementptr inbounds i8, i8* %98, i64 4
  %102 = bitcast i8* %101 to i32*
  store i32 0, i32* %102, align 1, !tbaa !2451
  %103 = bitcast i64* %99 to i32*
  store i32 0, i32* %103, align 1, !tbaa !2451
  %104 = getelementptr inbounds i8, i8* %98, i64 12
  %105 = bitcast i8* %104 to i32*
  store i32 0, i32* %105, align 1, !tbaa !2451
  %106 = bitcast %union.VectorReg* %7 to i8*
  %107 = add i64 %61, -8
  %108 = add i64 %85, 8
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = bitcast %union.VectorReg* %7 to float*
  %112 = bitcast %union.VectorReg* %7 to i32*
  store i32 %110, i32* %112, align 1, !tbaa !2452
  %113 = getelementptr inbounds i8, i8* %106, i64 4
  %114 = bitcast i8* %113 to float*
  store float 0.000000e+00, float* %114, align 1, !tbaa !2452
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %116 = bitcast i64* %115 to float*
  store float 0.000000e+00, float* %116, align 1, !tbaa !2452
  %117 = getelementptr inbounds i8, i8* %106, i64 12
  %118 = bitcast i8* %117 to float*
  store float 0.000000e+00, float* %118, align 1, !tbaa !2452
  %119 = bitcast %union.VectorReg* %7 to <2 x float>*
  %120 = load <2 x float>, <2 x float>* %119, align 1
  %121 = extractelement <2 x float> %120, i32 0
  %122 = fpext float %121 to double
  %123 = bitcast %union.VectorReg* %7 to double*
  store double %122, double* %123, align 1, !tbaa !2454
  %124 = add i64 %85, 16
  store i64 %124, i64* %PC, align 8
  %125 = bitcast [32 x %union.VectorReg]* %6 to double*
  %126 = load double, double* %125, align 1
  %127 = fcmp uno double %122, %126
  br i1 %127, label %128, label %138

; <label>:128:                                    ; preds = %block_402918
  %129 = fadd double %122, %126
  %130 = bitcast double %129 to i64
  %131 = and i64 %130, 9221120237041090560
  %132 = icmp eq i64 %131, 9218868437227405312
  %133 = and i64 %130, 2251799813685247
  %134 = icmp ne i64 %133, 0
  %135 = and i1 %132, %134
  br i1 %135, label %136, label %144

; <label>:136:                                    ; preds = %128
  %137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %124, %struct.Memory* %2) #9
  %.pre = load i64, i64* %PC, align 8
  %.pre1 = load i8, i8* %77, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:138:                                    ; preds = %block_402918
  %139 = fcmp ogt double %122, %126
  br i1 %139, label %144, label %140

; <label>:140:                                    ; preds = %138
  %141 = fcmp olt double %122, %126
  br i1 %141, label %144, label %142

; <label>:142:                                    ; preds = %140
  %143 = fcmp oeq double %122, %126
  br i1 %143, label %144, label %148

; <label>:144:                                    ; preds = %142, %140, %138, %128
  %145 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 1, %142 ], [ 1, %128 ]
  %146 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 0, %142 ], [ 1, %128 ]
  %147 = phi i8 [ 0, %138 ], [ 1, %140 ], [ 0, %142 ], [ 1, %128 ]
  store i8 %145, i8* %77, align 1, !tbaa !2456
  store i8 %146, i8* %73, align 1, !tbaa !2456
  store i8 %147, i8* %67, align 1, !tbaa !2456
  br label %148

; <label>:148:                                    ; preds = %144, %142
  %149 = phi i8 [ %145, %144 ], [ 0, %142 ]
  store i8 0, i8* %81, align 1, !tbaa !2456
  store i8 0, i8* %80, align 1, !tbaa !2456
  store i8 0, i8* %74, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %148, %136
  %150 = phi i8 [ %.pre1, %136 ], [ %149, %148 ]
  %151 = phi i64 [ %.pre, %136 ], [ %124, %148 ]
  %152 = phi %struct.Memory* [ %137, %136 ], [ %2, %148 ]
  %153 = icmp eq i8 %150, 0
  %.v9 = select i1 %153, i64 17, i64 6
  %154 = add i64 %151, %.v9
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  br i1 %153, label %block_402939, label %block_40292e

block_402974:                                     ; preds = %block_40294d, %block_402965
  %155 = phi i64 [ %.pre4, %block_402965 ], [ %255, %block_40294d ]
  %156 = phi i64 [ %.pre3, %block_402965 ], [ %239, %block_40294d ]
  %157 = add i64 %156, -36
  %158 = add i64 %155, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i32*
  %160 = load i32, i32* %159, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %161 = and i32 %160, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #8
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  %166 = icmp eq i32 %160, 0
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %77, align 1, !tbaa !2447
  %168 = lshr i32 %160, 31
  %169 = trunc i32 %168 to i8
  store i8 %169, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  %170 = icmp ne i8 %169, 0
  %.v14 = select i1 %170, i64 10, i64 25
  %171 = add i64 %155, %.v14
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  br i1 %170, label %block_40297e, label %block_40298d

block_402913:                                     ; preds = %block_4028e0
  %172 = add i64 %85, 312
  br label %block_402a4b

block_402994:                                     ; preds = %block_4029a0, %block_40298d
  %173 = phi i64 [ %719, %block_4029a0 ], [ %.pre7, %block_40298d ]
  %174 = load i64, i64* %RBP, align 8
  %175 = add i64 %174, -40
  %176 = add i64 %173, 3
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i64
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = add i64 %174, -4
  %181 = add i64 %173, 6
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = sub i32 %178, %183
  %185 = icmp ult i32 %178, %183
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %67, align 1, !tbaa !2432
  %187 = and i32 %184, 255
  %188 = tail call i32 @llvm.ctpop.i32(i32 %187) #8
  %189 = trunc i32 %188 to i8
  %190 = and i8 %189, 1
  %191 = xor i8 %190, 1
  store i8 %191, i8* %73, align 1, !tbaa !2446
  %192 = xor i32 %183, %178
  %193 = xor i32 %192, %184
  %194 = lshr i32 %193, 4
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  store i8 %196, i8* %74, align 1, !tbaa !2450
  %197 = icmp eq i32 %184, 0
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %77, align 1, !tbaa !2447
  %199 = lshr i32 %184, 31
  %200 = trunc i32 %199 to i8
  store i8 %200, i8* %80, align 1, !tbaa !2448
  %201 = lshr i32 %178, 31
  %202 = lshr i32 %183, 31
  %203 = xor i32 %202, %201
  %204 = xor i32 %199, %201
  %205 = add nuw nsw i32 %204, %203
  %206 = icmp eq i32 %205, 2
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %81, align 1, !tbaa !2449
  %208 = icmp ne i8 %200, 0
  %209 = xor i1 %208, %206
  %.v15 = select i1 %209, i64 12, i64 92
  %210 = add i64 %173, %.v15
  store i64 %210, i64* %PC, align 8, !tbaa !2428
  br i1 %209, label %block_4029a0, label %block_4029f0

block_4029f0:                                     ; preds = %block_402994
  %211 = add i64 %210, 91
  br label %block_402a4b

block_40298d:                                     ; preds = %block_402974, %block_40297e
  %212 = phi i64 [ %.pre6, %block_40297e ], [ %171, %block_402974 ]
  %213 = phi i64 [ %.pre5, %block_40297e ], [ %156, %block_402974 ]
  %214 = add i64 %213, -40
  %215 = add i64 %212, 7
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i32*
  store i32 0, i32* %216, align 4
  %217 = bitcast [32 x %union.VectorReg]* %6 to float*
  %218 = bitcast i8* %101 to float*
  %219 = bitcast i64* %99 to float*
  %220 = bitcast i8* %104 to float*
  %221 = bitcast i64* %115 to <2 x i32>*
  %222 = bitcast i8* %113 to i32*
  %223 = bitcast i64* %115 to i32*
  %224 = bitcast i8* %117 to i32*
  %225 = bitcast i64* %99 to <2 x i32>*
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_402994

block_40292e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %226 = load i8, i8* %73, align 1, !tbaa !2446
  %227 = icmp ne i8 %226, 0
  %.v10 = select i1 %227, i64 11, i64 6
  %228 = add i64 %154, %.v10
  store i64 %228, i64* %PC, align 8, !tbaa !2428
  %229 = icmp eq i8 %226, 1
  br i1 %229, label %block_402939, label %block_402934

block_40294d:                                     ; preds = %block_402939, %block_402943
  %230 = phi i64 [ %510, %block_402943 ], [ %333, %block_402939 ]
  %231 = add i64 %307, -44
  %232 = add i64 %230, 7
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i32*
  store i32 0, i32* %233, align 4
  %234 = load i64, i64* %RBP, align 8
  %235 = add i64 %234, -48
  %236 = load i64, i64* %PC, align 8
  %237 = add i64 %236, 7
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %235 to i32*
  store i32 0, i32* %238, align 4
  %239 = load i64, i64* %RBP, align 8
  %240 = add i64 %239, -20
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %240 to i32*
  %244 = load i32, i32* %243, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %245 = and i32 %244, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245) #8
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  %250 = icmp eq i32 %244, 0
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %77, align 1, !tbaa !2447
  %252 = lshr i32 %244, 31
  %253 = trunc i32 %252 to i8
  store i8 %253, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  %254 = icmp ne i8 %253, 0
  %.v13 = select i1 %254, i64 10, i64 25
  %255 = add i64 %241, %.v13
  store i64 %255, i64* %PC, align 8, !tbaa !2428
  br i1 %254, label %block_402965, label %block_402974

block_40297e:                                     ; preds = %block_402974
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2447
  store i8 0, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  store i8 0, i8* %74, align 1, !tbaa !2450
  %256 = add i64 %156, -4
  %257 = add i64 %171, 5
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i32*
  %259 = load i32, i32* %258, align 4
  %260 = sub i32 0, %259
  %261 = lshr i32 %260, 31
  %262 = sub i32 1, %259
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = icmp ult i32 %262, %260
  %265 = icmp eq i32 %262, 0
  %266 = or i1 %264, %265
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %67, align 1, !tbaa !2432
  %268 = and i32 %262, 255
  %269 = tail call i32 @llvm.ctpop.i32(i32 %268) #8
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  store i8 %272, i8* %73, align 1, !tbaa !2446
  %273 = xor i32 %262, %260
  %274 = lshr i32 %273, 4
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %74, align 1, !tbaa !2450
  %277 = zext i1 %265 to i8
  store i8 %277, i8* %77, align 1, !tbaa !2447
  %278 = lshr i32 %262, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %80, align 1, !tbaa !2448
  %280 = xor i32 %278, %261
  %281 = add nuw nsw i32 %280, %278
  %282 = icmp eq i32 %281, 2
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %81, align 1, !tbaa !2449
  %284 = add i64 %171, 12
  store i64 %284, i64* %PC, align 8
  %285 = load i32, i32* %159, align 4
  %286 = sext i32 %262 to i64
  %287 = sext i32 %285 to i64
  %288 = mul nsw i64 %287, %286
  %289 = trunc i64 %288 to i32
  %290 = and i64 %288, 4294967295
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = shl i64 %288, 32
  %292 = ashr exact i64 %291, 32
  %293 = icmp ne i64 %292, %288
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %67, align 1, !tbaa !2432
  %295 = and i32 %289, 255
  %296 = tail call i32 @llvm.ctpop.i32(i32 %295) #8
  %297 = trunc i32 %296 to i8
  %298 = and i8 %297, 1
  %299 = xor i8 %298, 1
  store i8 %299, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  store i8 0, i8* %77, align 1, !tbaa !2447
  %300 = lshr i32 %289, 31
  %301 = trunc i32 %300 to i8
  store i8 %301, i8* %80, align 1, !tbaa !2448
  store i8 %294, i8* %81, align 1, !tbaa !2449
  %302 = load i64, i64* %RBP, align 8
  %303 = add i64 %302, -48
  %304 = add i64 %171, 15
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %303 to i32*
  store i32 %289, i32* %305, align 4
  %.pre5 = load i64, i64* %RBP, align 8
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_40298d

block_402939:                                     ; preds = %block_40292e, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %306 = phi i64 [ %228, %block_40292e ], [ %154, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %307 = load i64, i64* %RBP, align 8
  %308 = add i64 %307, -20
  %309 = add i64 %306, 4
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %308 to i32*
  %311 = load i32, i32* %310, align 4
  %312 = add i32 %311, -1
  %313 = icmp eq i32 %311, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %67, align 1, !tbaa !2432
  %315 = and i32 %312, 255
  %316 = tail call i32 @llvm.ctpop.i32(i32 %315) #8
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  store i8 %319, i8* %73, align 1, !tbaa !2446
  %320 = xor i32 %311, %312
  %321 = lshr i32 %320, 4
  %322 = trunc i32 %321 to i8
  %323 = and i8 %322, 1
  store i8 %323, i8* %74, align 1, !tbaa !2450
  %324 = icmp eq i32 %312, 0
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %77, align 1, !tbaa !2447
  %326 = lshr i32 %312, 31
  %327 = trunc i32 %326 to i8
  store i8 %327, i8* %80, align 1, !tbaa !2448
  %328 = lshr i32 %311, 31
  %329 = xor i32 %326, %328
  %330 = add nuw nsw i32 %329, %328
  %331 = icmp eq i32 %330, 2
  %332 = zext i1 %331 to i8
  store i8 %332, i8* %81, align 1, !tbaa !2449
  %.v11 = select i1 %324, i64 10, i64 20
  %333 = add i64 %306, %.v11
  store i64 %333, i64* %PC, align 8, !tbaa !2428
  br i1 %324, label %block_402943, label %block_40294d

block_402a08:                                     ; preds = %block_4029fc
  %334 = add i64 %512, -32
  %335 = add i64 %548, 4
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %334 to i64*
  %337 = load i64, i64* %336, align 8
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = add i64 %548, 8
  store i64 %338, i64* %PC, align 8
  %339 = load i32, i32* %515, align 4
  %340 = sext i32 %339 to i64
  store i64 %340, i64* %RCX, align 8, !tbaa !2428
  %341 = shl nsw i64 %340, 2
  %342 = add i64 %341, %337
  %343 = add i64 %548, 13
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i32*
  %345 = load i32, i32* %344, align 4
  store i32 %345, i32* %100, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  store float 0.000000e+00, float* %91, align 1, !tbaa !2452
  store float 0.000000e+00, float* %92, align 1, !tbaa !2452
  %346 = add i64 %512, -8
  %347 = add i64 %548, 18
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %346 to i32*
  %349 = load i32, i32* %348, align 4
  store i32 %349, i32* %112, align 1, !tbaa !2452
  store float 0.000000e+00, float* %114, align 1, !tbaa !2452
  store float 0.000000e+00, float* %116, align 1, !tbaa !2452
  store float 0.000000e+00, float* %118, align 1, !tbaa !2452
  %350 = add i64 %512, -16
  %351 = add i64 %548, 22
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %350 to i64*
  %353 = load i64, i64* %352, align 8
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = add i64 %548, 26
  store i64 %354, i64* %PC, align 8
  %355 = load i32, i32* %515, align 4
  %356 = sext i32 %355 to i64
  store i64 %356, i64* %RCX, align 8, !tbaa !2428
  %357 = shl nsw i64 %356, 2
  %358 = add i64 %357, %353
  %359 = add i64 %548, 31
  store i64 %359, i64* %PC, align 8
  %360 = load <2 x float>, <2 x float>* %119, align 1
  %361 = load <2 x i32>, <2 x i32>* %93, align 1
  %362 = inttoptr i64 %358 to float*
  %363 = load float, float* %362, align 4
  %364 = extractelement <2 x float> %360, i32 0
  %365 = fmul float %364, %363
  store float %365, float* %111, align 1, !tbaa !2452
  %366 = bitcast <2 x float> %360 to <2 x i32>
  %367 = extractelement <2 x i32> %366, i32 1
  store i32 %367, i32* %94, align 1, !tbaa !2452
  %368 = extractelement <2 x i32> %361, i32 0
  store i32 %368, i32* %95, align 1, !tbaa !2452
  %369 = extractelement <2 x i32> %361, i32 1
  store i32 %369, i32* %96, align 1, !tbaa !2452
  %370 = load <2 x float>, <2 x float>* %23, align 1
  %371 = load <2 x i32>, <2 x i32>* %97, align 1
  %372 = load <2 x float>, <2 x float>* %119, align 1
  %373 = extractelement <2 x float> %370, i32 0
  %374 = extractelement <2 x float> %372, i32 0
  %375 = fadd float %373, %374
  store float %375, float* %89, align 1, !tbaa !2452
  %376 = bitcast <2 x float> %370 to <2 x i32>
  %377 = extractelement <2 x i32> %376, i32 1
  store i32 %377, i32* %102, align 1, !tbaa !2452
  %378 = extractelement <2 x i32> %371, i32 0
  store i32 %378, i32* %103, align 1, !tbaa !2452
  %379 = extractelement <2 x i32> %371, i32 1
  store i32 %379, i32* %105, align 1, !tbaa !2452
  %380 = add i64 %548, 39
  store i64 %380, i64* %PC, align 8
  %381 = load i64, i64* %336, align 8
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = add i64 %548, 43
  store i64 %382, i64* %PC, align 8
  %383 = load i32, i32* %515, align 4
  %384 = sext i32 %383 to i64
  store i64 %384, i64* %RCX, align 8, !tbaa !2428
  %385 = shl nsw i64 %384, 2
  %386 = add i64 %385, %381
  %387 = add i64 %548, 48
  store i64 %387, i64* %PC, align 8
  %388 = load <2 x float>, <2 x float>* %23, align 1
  %389 = extractelement <2 x float> %388, i32 0
  %390 = inttoptr i64 %386 to float*
  store float %389, float* %390, align 4
  %391 = load i64, i64* %RBP, align 8
  %392 = add i64 %391, -40
  %393 = load i64, i64* %PC, align 8
  %394 = add i64 %393, 3
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %392 to i32*
  %396 = load i32, i32* %395, align 4
  %397 = add i32 %396, 1
  %398 = zext i32 %397 to i64
  store i64 %398, i64* %RAX, align 8, !tbaa !2428
  %399 = icmp eq i32 %396, -1
  %400 = icmp eq i32 %397, 0
  %401 = or i1 %399, %400
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %67, align 1, !tbaa !2432
  %403 = and i32 %397, 255
  %404 = tail call i32 @llvm.ctpop.i32(i32 %403) #8
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  store i8 %407, i8* %73, align 1, !tbaa !2446
  %408 = xor i32 %396, %397
  %409 = lshr i32 %408, 4
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  store i8 %411, i8* %74, align 1, !tbaa !2450
  %412 = zext i1 %400 to i8
  store i8 %412, i8* %77, align 1, !tbaa !2447
  %413 = lshr i32 %397, 31
  %414 = trunc i32 %413 to i8
  store i8 %414, i8* %80, align 1, !tbaa !2448
  %415 = lshr i32 %396, 31
  %416 = xor i32 %413, %415
  %417 = add nuw nsw i32 %416, %413
  %418 = icmp eq i32 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %81, align 1, !tbaa !2449
  %420 = add i64 %393, 9
  store i64 %420, i64* %PC, align 8
  store i32 %397, i32* %395, align 4
  %421 = load i64, i64* %PC, align 8
  %422 = add i64 %421, -69
  store i64 %422, i64* %PC, align 8, !tbaa !2428
  br label %block_4029fc

block_402934:                                     ; preds = %block_40292e
  %423 = add i64 %228, 279
  br label %block_402a4b

block_402a46:                                     ; preds = %block_4029fc
  %424 = add i64 %548, 5
  br label %block_402a4b

block_402a4b:                                     ; preds = %block_402a46, %block_402934, %block_4029f0, %block_402913
  %425 = phi i64 [ %211, %block_4029f0 ], [ %424, %block_402a46 ], [ %423, %block_402934 ], [ %172, %block_402913 ]
  %MEMORY.5 = phi %struct.Memory* [ %152, %block_4029f0 ], [ %152, %block_402a46 ], [ %152, %block_402934 ], [ %2, %block_402913 ]
  %426 = add i64 %425, 1
  store i64 %426, i64* %PC, align 8
  %427 = load i64, i64* %10, align 8, !tbaa !2428
  %428 = add i64 %427, 8
  %429 = inttoptr i64 %427 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RBP, align 8, !tbaa !2428
  store i64 %428, i64* %10, align 8, !tbaa !2428
  %431 = add i64 %425, 2
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %428 to i64*
  %433 = load i64, i64* %432, align 8
  store i64 %433, i64* %PC, align 8, !tbaa !2428
  %434 = add i64 %427, 16
  store i64 %434, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_402965:                                     ; preds = %block_40294d
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2447
  store i8 0, i8* %80, align 1, !tbaa !2448
  store i8 0, i8* %81, align 1, !tbaa !2449
  store i8 0, i8* %74, align 1, !tbaa !2450
  %435 = add i64 %239, -4
  %436 = add i64 %255, 5
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %435 to i32*
  %438 = load i32, i32* %437, align 4
  %439 = sub i32 0, %438
  %440 = lshr i32 %439, 31
  %441 = sub i32 1, %438
  %442 = zext i32 %441 to i64
  store i64 %442, i64* %RAX, align 8, !tbaa !2428
  %443 = icmp ult i32 %441, %439
  %444 = icmp eq i32 %441, 0
  %445 = or i1 %443, %444
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %67, align 1, !tbaa !2432
  %447 = and i32 %441, 255
  %448 = tail call i32 @llvm.ctpop.i32(i32 %447) #8
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  store i8 %451, i8* %73, align 1, !tbaa !2446
  %452 = xor i32 %441, %439
  %453 = lshr i32 %452, 4
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  store i8 %455, i8* %74, align 1, !tbaa !2450
  %456 = zext i1 %444 to i8
  store i8 %456, i8* %77, align 1, !tbaa !2447
  %457 = lshr i32 %441, 31
  %458 = trunc i32 %457 to i8
  store i8 %458, i8* %80, align 1, !tbaa !2448
  %459 = xor i32 %457, %440
  %460 = add nuw nsw i32 %459, %457
  %461 = icmp eq i32 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %81, align 1, !tbaa !2449
  %463 = add i64 %255, 12
  store i64 %463, i64* %PC, align 8
  %464 = load i32, i32* %243, align 4
  %465 = sext i32 %441 to i64
  %466 = sext i32 %464 to i64
  %467 = mul nsw i64 %466, %465
  %468 = trunc i64 %467 to i32
  %469 = and i64 %467, 4294967295
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = shl i64 %467, 32
  %471 = ashr exact i64 %470, 32
  %472 = icmp ne i64 %471, %467
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %67, align 1, !tbaa !2432
  %474 = and i32 %468, 255
  %475 = tail call i32 @llvm.ctpop.i32(i32 %474) #8
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  %478 = xor i8 %477, 1
  store i8 %478, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2450
  store i8 0, i8* %77, align 1, !tbaa !2447
  %479 = lshr i32 %468, 31
  %480 = trunc i32 %479 to i8
  store i8 %480, i8* %80, align 1, !tbaa !2448
  store i8 %473, i8* %81, align 1, !tbaa !2449
  %481 = load i64, i64* %RBP, align 8
  %482 = add i64 %481, -44
  %483 = add i64 %255, 15
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i32*
  store i32 %468, i32* %484, align 4
  %.pre3 = load i64, i64* %RBP, align 8
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402974

block_402943:                                     ; preds = %block_402939
  %485 = add i64 %307, -36
  %486 = add i64 %333, 4
  store i64 %486, i64* %PC, align 8
  %487 = inttoptr i64 %485 to i32*
  %488 = load i32, i32* %487, align 4
  %489 = add i32 %488, -1
  %490 = icmp eq i32 %488, 0
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %67, align 1, !tbaa !2432
  %492 = and i32 %489, 255
  %493 = tail call i32 @llvm.ctpop.i32(i32 %492) #8
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  store i8 %496, i8* %73, align 1, !tbaa !2446
  %497 = xor i32 %488, %489
  %498 = lshr i32 %497, 4
  %499 = trunc i32 %498 to i8
  %500 = and i8 %499, 1
  store i8 %500, i8* %74, align 1, !tbaa !2450
  %501 = icmp eq i32 %489, 0
  %502 = zext i1 %501 to i8
  store i8 %502, i8* %77, align 1, !tbaa !2447
  %503 = lshr i32 %489, 31
  %504 = trunc i32 %503 to i8
  store i8 %504, i8* %80, align 1, !tbaa !2448
  %505 = lshr i32 %488, 31
  %506 = xor i32 %503, %505
  %507 = add nuw nsw i32 %506, %505
  %508 = icmp eq i32 %507, 2
  %509 = zext i1 %508 to i8
  store i8 %509, i8* %81, align 1, !tbaa !2449
  %.v12 = select i1 %501, i64 178, i64 10
  %510 = add i64 %333, %.v12
  store i64 %510, i64* %PC, align 8, !tbaa !2428
  br i1 %501, label %block_4029f5, label %block_40294d

block_4029fc:                                     ; preds = %block_402a08, %block_4029f5
  %511 = phi i64 [ %422, %block_402a08 ], [ %.pre2, %block_4029f5 ]
  %512 = load i64, i64* %RBP, align 8
  %513 = add i64 %512, -40
  %514 = add i64 %511, 3
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to i32*
  %516 = load i32, i32* %515, align 4
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = add i64 %512, -4
  %519 = add i64 %511, 6
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %518 to i32*
  %521 = load i32, i32* %520, align 4
  %522 = sub i32 %516, %521
  %523 = icmp ult i32 %516, %521
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %67, align 1, !tbaa !2432
  %525 = and i32 %522, 255
  %526 = tail call i32 @llvm.ctpop.i32(i32 %525) #8
  %527 = trunc i32 %526 to i8
  %528 = and i8 %527, 1
  %529 = xor i8 %528, 1
  store i8 %529, i8* %73, align 1, !tbaa !2446
  %530 = xor i32 %521, %516
  %531 = xor i32 %530, %522
  %532 = lshr i32 %531, 4
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  store i8 %534, i8* %74, align 1, !tbaa !2450
  %535 = icmp eq i32 %522, 0
  %536 = zext i1 %535 to i8
  store i8 %536, i8* %77, align 1, !tbaa !2447
  %537 = lshr i32 %522, 31
  %538 = trunc i32 %537 to i8
  store i8 %538, i8* %80, align 1, !tbaa !2448
  %539 = lshr i32 %516, 31
  %540 = lshr i32 %521, 31
  %541 = xor i32 %540, %539
  %542 = xor i32 %537, %539
  %543 = add nuw nsw i32 %542, %541
  %544 = icmp eq i32 %543, 2
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %81, align 1, !tbaa !2449
  %546 = icmp ne i8 %538, 0
  %547 = xor i1 %546, %544
  %.v16 = select i1 %547, i64 12, i64 74
  %548 = add i64 %511, %.v16
  store i64 %548, i64* %PC, align 8, !tbaa !2428
  br i1 %547, label %block_402a08, label %block_402a46

block_4029a0:                                     ; preds = %block_402994
  %549 = add i64 %174, -32
  %550 = add i64 %210, 4
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i64*
  %552 = load i64, i64* %551, align 8
  store i64 %552, i64* %RAX, align 8, !tbaa !2428
  %553 = add i64 %174, -48
  %554 = add i64 %210, 8
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %553 to i32*
  %556 = load i32, i32* %555, align 4
  %557 = sext i32 %556 to i64
  store i64 %557, i64* %RCX, align 8, !tbaa !2428
  %558 = shl nsw i64 %557, 2
  %559 = add i64 %558, %552
  %560 = add i64 %210, 13
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %559 to i32*
  %562 = load i32, i32* %561, align 4
  store i32 %562, i32* %100, align 1, !tbaa !2452
  store float 0.000000e+00, float* %218, align 1, !tbaa !2452
  store float 0.000000e+00, float* %219, align 1, !tbaa !2452
  store float 0.000000e+00, float* %220, align 1, !tbaa !2452
  %563 = add i64 %174, -8
  %564 = add i64 %210, 18
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %563 to i32*
  %566 = load i32, i32* %565, align 4
  store i32 %566, i32* %112, align 1, !tbaa !2452
  store float 0.000000e+00, float* %114, align 1, !tbaa !2452
  store float 0.000000e+00, float* %116, align 1, !tbaa !2452
  store float 0.000000e+00, float* %118, align 1, !tbaa !2452
  %567 = add i64 %174, -16
  %568 = add i64 %210, 22
  store i64 %568, i64* %PC, align 8
  %569 = inttoptr i64 %567 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %RAX, align 8, !tbaa !2428
  %571 = add i64 %174, -44
  %572 = add i64 %210, 26
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %571 to i32*
  %574 = load i32, i32* %573, align 4
  %575 = sext i32 %574 to i64
  store i64 %575, i64* %RCX, align 8, !tbaa !2428
  %576 = shl nsw i64 %575, 2
  %577 = add i64 %576, %570
  %578 = add i64 %210, 31
  store i64 %578, i64* %PC, align 8
  %579 = load <2 x float>, <2 x float>* %119, align 1
  %580 = load <2 x i32>, <2 x i32>* %221, align 1
  %581 = inttoptr i64 %577 to float*
  %582 = load float, float* %581, align 4
  %583 = extractelement <2 x float> %579, i32 0
  %584 = fmul float %583, %582
  store float %584, float* %111, align 1, !tbaa !2452
  %585 = bitcast <2 x float> %579 to <2 x i32>
  %586 = extractelement <2 x i32> %585, i32 1
  store i32 %586, i32* %222, align 1, !tbaa !2452
  %587 = extractelement <2 x i32> %580, i32 0
  store i32 %587, i32* %223, align 1, !tbaa !2452
  %588 = extractelement <2 x i32> %580, i32 1
  store i32 %588, i32* %224, align 1, !tbaa !2452
  %589 = load <2 x float>, <2 x float>* %23, align 1
  %590 = load <2 x i32>, <2 x i32>* %225, align 1
  %591 = load <2 x float>, <2 x float>* %119, align 1
  %592 = extractelement <2 x float> %589, i32 0
  %593 = extractelement <2 x float> %591, i32 0
  %594 = fadd float %592, %593
  store float %594, float* %217, align 1, !tbaa !2452
  %595 = bitcast <2 x float> %589 to <2 x i32>
  %596 = extractelement <2 x i32> %595, i32 1
  store i32 %596, i32* %102, align 1, !tbaa !2452
  %597 = extractelement <2 x i32> %590, i32 0
  store i32 %597, i32* %103, align 1, !tbaa !2452
  %598 = extractelement <2 x i32> %590, i32 1
  store i32 %598, i32* %105, align 1, !tbaa !2452
  %599 = add i64 %210, 39
  store i64 %599, i64* %PC, align 8
  %600 = load i64, i64* %551, align 8
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %601 = add i64 %210, 43
  store i64 %601, i64* %PC, align 8
  %602 = load i32, i32* %555, align 4
  %603 = sext i32 %602 to i64
  store i64 %603, i64* %RCX, align 8, !tbaa !2428
  %604 = shl nsw i64 %603, 2
  %605 = add i64 %604, %600
  %606 = add i64 %210, 48
  store i64 %606, i64* %PC, align 8
  %607 = load <2 x float>, <2 x float>* %23, align 1
  %608 = extractelement <2 x float> %607, i32 0
  %609 = inttoptr i64 %605 to float*
  store float %608, float* %609, align 4
  %610 = load i64, i64* %RBP, align 8
  %611 = add i64 %610, -44
  %612 = load i64, i64* %PC, align 8
  %613 = add i64 %612, 3
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %611 to i32*
  %615 = load i32, i32* %614, align 4
  %616 = zext i32 %615 to i64
  store i64 %616, i64* %RDX, align 8, !tbaa !2428
  %617 = add i64 %610, -20
  %618 = add i64 %612, 6
  store i64 %618, i64* %PC, align 8
  %619 = inttoptr i64 %617 to i32*
  %620 = load i32, i32* %619, align 4
  %621 = add i32 %620, %615
  %622 = zext i32 %621 to i64
  store i64 %622, i64* %RDX, align 8, !tbaa !2428
  %623 = icmp ult i32 %621, %615
  %624 = icmp ult i32 %621, %620
  %625 = or i1 %623, %624
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %67, align 1, !tbaa !2432
  %627 = and i32 %621, 255
  %628 = tail call i32 @llvm.ctpop.i32(i32 %627) #8
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  store i8 %631, i8* %73, align 1, !tbaa !2446
  %632 = xor i32 %620, %615
  %633 = xor i32 %632, %621
  %634 = lshr i32 %633, 4
  %635 = trunc i32 %634 to i8
  %636 = and i8 %635, 1
  store i8 %636, i8* %74, align 1, !tbaa !2450
  %637 = icmp eq i32 %621, 0
  %638 = zext i1 %637 to i8
  store i8 %638, i8* %77, align 1, !tbaa !2447
  %639 = lshr i32 %621, 31
  %640 = trunc i32 %639 to i8
  store i8 %640, i8* %80, align 1, !tbaa !2448
  %641 = lshr i32 %615, 31
  %642 = lshr i32 %620, 31
  %643 = xor i32 %639, %641
  %644 = xor i32 %639, %642
  %645 = add nuw nsw i32 %643, %644
  %646 = icmp eq i32 %645, 2
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %81, align 1, !tbaa !2449
  %648 = add i64 %612, 9
  store i64 %648, i64* %PC, align 8
  store i32 %621, i32* %614, align 4
  %649 = load i64, i64* %RBP, align 8
  %650 = add i64 %649, -48
  %651 = load i64, i64* %PC, align 8
  %652 = add i64 %651, 3
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %650 to i32*
  %654 = load i32, i32* %653, align 4
  %655 = zext i32 %654 to i64
  store i64 %655, i64* %RDX, align 8, !tbaa !2428
  %656 = add i64 %649, -36
  %657 = add i64 %651, 6
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %656 to i32*
  %659 = load i32, i32* %658, align 4
  %660 = add i32 %659, %654
  %661 = zext i32 %660 to i64
  store i64 %661, i64* %RDX, align 8, !tbaa !2428
  %662 = icmp ult i32 %660, %654
  %663 = icmp ult i32 %660, %659
  %664 = or i1 %662, %663
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %67, align 1, !tbaa !2432
  %666 = and i32 %660, 255
  %667 = tail call i32 @llvm.ctpop.i32(i32 %666) #8
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = xor i8 %669, 1
  store i8 %670, i8* %73, align 1, !tbaa !2446
  %671 = xor i32 %659, %654
  %672 = xor i32 %671, %660
  %673 = lshr i32 %672, 4
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  store i8 %675, i8* %74, align 1, !tbaa !2450
  %676 = icmp eq i32 %660, 0
  %677 = zext i1 %676 to i8
  store i8 %677, i8* %77, align 1, !tbaa !2447
  %678 = lshr i32 %660, 31
  %679 = trunc i32 %678 to i8
  store i8 %679, i8* %80, align 1, !tbaa !2448
  %680 = lshr i32 %654, 31
  %681 = lshr i32 %659, 31
  %682 = xor i32 %678, %680
  %683 = xor i32 %678, %681
  %684 = add nuw nsw i32 %682, %683
  %685 = icmp eq i32 %684, 2
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %81, align 1, !tbaa !2449
  %687 = add i64 %651, 9
  store i64 %687, i64* %PC, align 8
  store i32 %660, i32* %653, align 4
  %688 = load i64, i64* %RBP, align 8
  %689 = add i64 %688, -40
  %690 = load i64, i64* %PC, align 8
  %691 = add i64 %690, 3
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %689 to i32*
  %693 = load i32, i32* %692, align 4
  %694 = add i32 %693, 1
  %695 = zext i32 %694 to i64
  store i64 %695, i64* %RAX, align 8, !tbaa !2428
  %696 = icmp eq i32 %693, -1
  %697 = icmp eq i32 %694, 0
  %698 = or i1 %696, %697
  %699 = zext i1 %698 to i8
  store i8 %699, i8* %67, align 1, !tbaa !2432
  %700 = and i32 %694, 255
  %701 = tail call i32 @llvm.ctpop.i32(i32 %700) #8
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  %704 = xor i8 %703, 1
  store i8 %704, i8* %73, align 1, !tbaa !2446
  %705 = xor i32 %693, %694
  %706 = lshr i32 %705, 4
  %707 = trunc i32 %706 to i8
  %708 = and i8 %707, 1
  store i8 %708, i8* %74, align 1, !tbaa !2450
  %709 = zext i1 %697 to i8
  store i8 %709, i8* %77, align 1, !tbaa !2447
  %710 = lshr i32 %694, 31
  %711 = trunc i32 %710 to i8
  store i8 %711, i8* %80, align 1, !tbaa !2448
  %712 = lshr i32 %693, 31
  %713 = xor i32 %710, %712
  %714 = add nuw nsw i32 %713, %710
  %715 = icmp eq i32 %714, 2
  %716 = zext i1 %715 to i8
  store i8 %716, i8* %81, align 1, !tbaa !2449
  %717 = add i64 %690, 9
  store i64 %717, i64* %PC, align 8
  store i32 %694, i32* %692, align 4
  %718 = load i64, i64* %PC, align 8
  %719 = add i64 %718, -87
  store i64 %719, i64* %PC, align 8, !tbaa !2428
  br label %block_402994
}

; Function Attrs: noinline
define %struct.Memory* @sub_402010_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %16 = add i64 %12, -12
  %17 = load i32, i32* %EDI, align 4
  %18 = add i64 %15, 11
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i32*
  store i32 %17, i32* %19, align 4
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %RSI, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -20
  %28 = load i32, i32* %EDX, align 4
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %31, align 4
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i32, i32* %ECX, align 4
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i32*
  store i32 %34, i32* %37, align 4
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -32
  %40 = load i64, i64* %R8, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -40
  %46 = load i64, i64* %R9, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -20
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = add i64 %50, -56
  %58 = load i32, i32* %EAX, align 4
  %59 = add i64 %52, 6
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %60, align 4
  %61 = load i32, i32* %ECX, align 4
  %62 = zext i32 %61 to i64
  %63 = load i64, i64* %PC, align 8
  store i64 %62, i64* %RAX, align 8, !tbaa !2428
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %65 = sext i32 %61 to i64
  %66 = lshr i64 %65, 32
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -56
  %69 = add i64 %63, 6
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RCX, align 8, !tbaa !2428
  %73 = add i64 %63, 8
  store i64 %73, i64* %PC, align 8
  %74 = sext i32 %71 to i64
  %75 = shl nuw i64 %66, 32
  %76 = or i64 %75, %62
  %77 = sdiv i64 %76, %74
  %78 = shl i64 %77, 32
  %79 = ashr exact i64 %78, 32
  %80 = icmp eq i64 %77, %79
  br i1 %80, label %83, label %81

; <label>:81:                                     ; preds = %block_402010
  %82 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %73, %struct.Memory* %2) #9
  %.pre = load i64, i64* %RBP, align 8
  %.pre1 = load i32, i32* %EDX, align 4
  %.pre2 = load i64, i64* %PC, align 8
  %.pre21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.pre22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %.pre24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %.pre28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %.pre30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:83:                                     ; preds = %block_402010
  %84 = srem i64 %76, %74
  %85 = and i64 %77, 4294967295
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = and i64 %84, 4294967295
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %87, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %88, align 1, !tbaa !2446
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %89, align 1, !tbaa !2450
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %90, align 1, !tbaa !2447
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %91, align 1, !tbaa !2448
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %92, align 1, !tbaa !2449
  %93 = trunc i64 %84 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %83, %81
  %.pre-phi31 = phi i8* [ %92, %83 ], [ %.pre30, %81 ]
  %.pre-phi29 = phi i8* [ %91, %83 ], [ %.pre28, %81 ]
  %.pre-phi27 = phi i8* [ %90, %83 ], [ %.pre26, %81 ]
  %.pre-phi25 = phi i8* [ %89, %83 ], [ %.pre24, %81 ]
  %.pre-phi23 = phi i8* [ %88, %83 ], [ %.pre22, %81 ]
  %.pre-phi = phi i8* [ %87, %83 ], [ %.pre21, %81 ]
  %94 = phi i64 [ %73, %83 ], [ %.pre2, %81 ]
  %95 = phi i32 [ %93, %83 ], [ %.pre1, %81 ]
  %96 = phi i64 [ %67, %83 ], [ %.pre, %81 ]
  %97 = phi %struct.Memory* [ %2, %83 ], [ %82, %81 ]
  %98 = add i64 %96, -44
  %99 = add i64 %94, 3
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i32*
  store i32 %95, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -44
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = add i32 %106, -1
  %108 = icmp eq i32 %106, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %.pre-phi, align 1, !tbaa !2432
  %110 = and i32 %107, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #8
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %.pre-phi23, align 1, !tbaa !2446
  %115 = xor i32 %106, %107
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %.pre-phi25, align 1, !tbaa !2450
  %119 = icmp eq i32 %107, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %.pre-phi27, align 1, !tbaa !2447
  %121 = lshr i32 %107, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %.pre-phi29, align 1, !tbaa !2448
  %123 = lshr i32 %106, 31
  %124 = xor i32 %121, %123
  %125 = add nuw nsw i32 %124, %123
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %.pre-phi31, align 1, !tbaa !2449
  %128 = icmp ne i8 %122, 0
  %129 = xor i1 %128, %126
  %.v34 = select i1 %129, i64 122, i64 10
  %130 = add i64 %103, %.v34
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  br i1 %129, label %block_4020b9, label %block_402049

block_4020d9:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %131 = add i64 %414, 3
  store i64 %131, i64* %PC, align 8
  %132 = load i32, i32* %389, align 4
  %133 = add i32 %132, -1
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  %135 = icmp eq i32 %132, 0
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %.pre-phi, align 1, !tbaa !2432
  %137 = and i32 %133, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #8
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %.pre-phi23, align 1, !tbaa !2446
  %142 = xor i32 %132, %133
  %143 = lshr i32 %142, 4
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %.pre-phi25, align 1, !tbaa !2450
  %146 = icmp eq i32 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %.pre-phi27, align 1, !tbaa !2447
  %148 = lshr i32 %133, 31
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %.pre-phi29, align 1, !tbaa !2448
  %150 = lshr i32 %132, 31
  %151 = xor i32 %148, %150
  %152 = add nuw nsw i32 %151, %150
  %153 = icmp eq i32 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %.pre-phi31, align 1, !tbaa !2449
  %155 = add i64 %414, 9
  store i64 %155, i64* %PC, align 8
  store i32 %133, i32* %389, align 4
  %156 = load i64, i64* %RBP, align 8
  %157 = add i64 %156, -48
  %158 = load i64, i64* %PC, align 8
  %159 = add i64 %158, 7
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %157 to i32*
  store i32 0, i32* %160, align 4
  %161 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %162 = bitcast [32 x %union.VectorReg]* %7 to float*
  %163 = getelementptr inbounds i8, i8* %161, i64 4
  %164 = bitcast i8* %163 to float*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %166 = bitcast i64* %165 to float*
  %167 = getelementptr inbounds i8, i8* %161, i64 12
  %168 = bitcast i8* %167 to float*
  %169 = bitcast %union.VectorReg* %8 to i8*
  %170 = bitcast %union.VectorReg* %8 to float*
  %171 = getelementptr inbounds i8, i8* %169, i64 4
  %172 = bitcast i8* %171 to float*
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %174 = bitcast i64* %173 to float*
  %175 = getelementptr inbounds i8, i8* %169, i64 12
  %176 = bitcast i8* %175 to float*
  %177 = bitcast %union.VectorReg* %8 to <2 x float>*
  %178 = bitcast i64* %173 to <2 x i32>*
  %179 = bitcast i8* %171 to i32*
  %180 = bitcast i64* %173 to i32*
  %181 = bitcast i8* %175 to i32*
  %182 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %183 = bitcast i64* %165 to <2 x i32>*
  %184 = bitcast i8* %163 to i32*
  %185 = bitcast i64* %165 to i32*
  %186 = bitcast i8* %167 to i32*
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4020e9

block_402065:                                     ; preds = %block_402059
  %187 = add i64 %3629, -16
  %188 = add i64 %3665, 4
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = add i64 %3665, 8
  store i64 %191, i64* %PC, align 8
  %192 = load i32, i32* %3632, align 4
  %193 = sext i32 %192 to i64
  store i64 %193, i64* %RCX, align 8, !tbaa !2428
  %194 = shl nsw i64 %193, 2
  %195 = add i64 %194, %190
  %196 = add i64 %3665, 13
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %198, i32* %199, align 1, !tbaa !2452
  store float 0.000000e+00, float* %486, align 1, !tbaa !2452
  store float 0.000000e+00, float* %488, align 1, !tbaa !2452
  store float 0.000000e+00, float* %490, align 1, !tbaa !2452
  %200 = add i64 %3629, -32
  %201 = add i64 %3665, 17
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %3629, -44
  %205 = add i64 %3665, 21
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = sext i32 %207 to i64
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = shl nsw i64 %208, 2
  %210 = add i64 %209, %203
  %211 = add i64 %3665, 26
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i32*
  %213 = load i32, i32* %212, align 4
  %214 = bitcast %union.VectorReg* %8 to i32*
  store i32 %213, i32* %214, align 1, !tbaa !2452
  store float 0.000000e+00, float* %494, align 1, !tbaa !2452
  store float 0.000000e+00, float* %496, align 1, !tbaa !2452
  store float 0.000000e+00, float* %498, align 1, !tbaa !2452
  %215 = add i64 %3629, -40
  %216 = add i64 %3665, 30
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RAX, align 8, !tbaa !2428
  %219 = add i64 %3629, -24
  %220 = add i64 %3665, 33
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = zext i32 %222 to i64
  store i64 %223, i64* %RDX, align 8, !tbaa !2428
  %224 = add i64 %3665, 37
  store i64 %224, i64* %PC, align 8
  %225 = load i32, i32* %206, align 4
  %226 = sext i32 %222 to i64
  %227 = sext i32 %225 to i64
  %228 = mul nsw i64 %227, %226
  %229 = trunc i64 %228 to i32
  %230 = and i64 %228, 4294967295
  store i64 %230, i64* %RDX, align 8, !tbaa !2428
  %231 = shl i64 %228, 32
  %232 = ashr exact i64 %231, 32
  %233 = icmp ne i64 %232, %228
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %.pre-phi, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #8
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %240 = lshr i32 %229, 31
  %241 = trunc i32 %240 to i8
  store i8 %241, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %234, i8* %.pre-phi31, align 1, !tbaa !2449
  %242 = add i64 %3665, 40
  store i64 %242, i64* %PC, align 8
  %243 = load i32, i32* %3632, align 4
  %244 = add i32 %243, %229
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RDX, align 8, !tbaa !2428
  %246 = icmp ult i32 %244, %229
  %247 = icmp ult i32 %244, %243
  %248 = or i1 %246, %247
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %.pre-phi, align 1, !tbaa !2432
  %250 = and i32 %244, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #8
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %.pre-phi23, align 1, !tbaa !2446
  %255 = xor i32 %243, %229
  %256 = xor i32 %255, %244
  %257 = lshr i32 %256, 4
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  store i8 %259, i8* %.pre-phi25, align 1, !tbaa !2450
  %260 = icmp eq i32 %244, 0
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %.pre-phi27, align 1, !tbaa !2447
  %262 = lshr i32 %244, 31
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %.pre-phi29, align 1, !tbaa !2448
  %264 = lshr i32 %243, 31
  %265 = xor i32 %262, %240
  %266 = xor i32 %262, %264
  %267 = add nuw nsw i32 %265, %266
  %268 = icmp eq i32 %267, 2
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %.pre-phi31, align 1, !tbaa !2449
  %270 = sext i32 %244 to i64
  store i64 %270, i64* %RCX, align 8, !tbaa !2428
  %271 = shl nsw i64 %270, 2
  %272 = add i64 %271, %218
  %273 = add i64 %3665, 48
  store i64 %273, i64* %PC, align 8
  %274 = load <2 x float>, <2 x float>* %499, align 1
  %275 = load <2 x i32>, <2 x i32>* %500, align 1
  %276 = inttoptr i64 %272 to float*
  %277 = load float, float* %276, align 4
  %278 = extractelement <2 x float> %274, i32 0
  %279 = fmul float %278, %277
  store float %279, float* %492, align 1, !tbaa !2452
  %280 = bitcast <2 x float> %274 to <2 x i32>
  %281 = extractelement <2 x i32> %280, i32 1
  store i32 %281, i32* %501, align 1, !tbaa !2452
  %282 = extractelement <2 x i32> %275, i32 0
  store i32 %282, i32* %502, align 1, !tbaa !2452
  %283 = extractelement <2 x i32> %275, i32 1
  store i32 %283, i32* %503, align 1, !tbaa !2452
  %284 = load <2 x float>, <2 x float>* %504, align 1
  %285 = load <2 x i32>, <2 x i32>* %505, align 1
  %286 = load <2 x float>, <2 x float>* %499, align 1
  %287 = extractelement <2 x float> %284, i32 0
  %288 = extractelement <2 x float> %286, i32 0
  %289 = fadd float %287, %288
  store float %289, float* %484, align 1, !tbaa !2452
  %290 = bitcast <2 x float> %284 to <2 x i32>
  %291 = extractelement <2 x i32> %290, i32 1
  store i32 %291, i32* %506, align 1, !tbaa !2452
  %292 = extractelement <2 x i32> %285, i32 0
  store i32 %292, i32* %507, align 1, !tbaa !2452
  %293 = extractelement <2 x i32> %285, i32 1
  store i32 %293, i32* %508, align 1, !tbaa !2452
  %294 = load i64, i64* %RBP, align 8
  %295 = add i64 %294, -16
  %296 = add i64 %3665, 56
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %294, -48
  %300 = add i64 %3665, 60
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %299 to i32*
  %302 = load i32, i32* %301, align 4
  %303 = sext i32 %302 to i64
  store i64 %303, i64* %RCX, align 8, !tbaa !2428
  %304 = shl nsw i64 %303, 2
  %305 = add i64 %304, %298
  %306 = add i64 %3665, 65
  store i64 %306, i64* %PC, align 8
  %307 = load <2 x float>, <2 x float>* %504, align 1
  %308 = extractelement <2 x float> %307, i32 0
  %309 = inttoptr i64 %305 to float*
  store float %308, float* %309, align 4
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -48
  %312 = load i64, i64* %PC, align 8
  %313 = add i64 %312, 3
  store i64 %313, i64* %PC, align 8
  %314 = inttoptr i64 %311 to i32*
  %315 = load i32, i32* %314, align 4
  %316 = add i32 %315, 1
  %317 = zext i32 %316 to i64
  store i64 %317, i64* %RAX, align 8, !tbaa !2428
  %318 = icmp eq i32 %315, -1
  %319 = icmp eq i32 %316, 0
  %320 = or i1 %318, %319
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %.pre-phi, align 1, !tbaa !2432
  %322 = and i32 %316, 255
  %323 = tail call i32 @llvm.ctpop.i32(i32 %322) #8
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = xor i8 %325, 1
  store i8 %326, i8* %.pre-phi23, align 1, !tbaa !2446
  %327 = xor i32 %315, %316
  %328 = lshr i32 %327, 4
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  store i8 %330, i8* %.pre-phi25, align 1, !tbaa !2450
  %331 = zext i1 %319 to i8
  store i8 %331, i8* %.pre-phi27, align 1, !tbaa !2447
  %332 = lshr i32 %316, 31
  %333 = trunc i32 %332 to i8
  store i8 %333, i8* %.pre-phi29, align 1, !tbaa !2448
  %334 = lshr i32 %315, 31
  %335 = xor i32 %332, %334
  %336 = add nuw nsw i32 %335, %332
  %337 = icmp eq i32 %336, 2
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %.pre-phi31, align 1, !tbaa !2449
  %339 = add i64 %312, 9
  store i64 %339, i64* %PC, align 8
  store i32 %316, i32* %314, align 4
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, -86
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  br label %block_402059

block_4020b9:                                     ; preds = %block_4020b4, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %342 = phi i64 [ %3629, %block_4020b4 ], [ %101, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  %343 = phi i64 [ %3117, %block_4020b4 ], [ %130, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %344 = add i64 %342, -20
  %345 = add i64 %343, 8
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %344 to i32*
  %347 = load i32, i32* %346, align 4
  %348 = zext i32 %347 to i64
  store i64 %348, i64* %RCX, align 8, !tbaa !2428
  %349 = add i64 %342, -60
  %350 = add i64 %343, 11
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %349 to i32*
  store i32 4, i32* %351, align 4
  %352 = load i32, i32* %ECX, align 4
  %353 = zext i32 %352 to i64
  %354 = load i64, i64* %PC, align 8
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %355 = sext i32 %352 to i64
  %356 = lshr i64 %355, 32
  store i64 %356, i64* %64, align 8, !tbaa !2428
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -60
  %359 = add i64 %354, 6
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i32*
  %361 = load i32, i32* %360, align 4
  %362 = zext i32 %361 to i64
  store i64 %362, i64* %RCX, align 8, !tbaa !2428
  %363 = add i64 %354, 8
  store i64 %363, i64* %PC, align 8
  %364 = sext i32 %361 to i64
  %365 = shl nuw i64 %356, 32
  %366 = or i64 %365, %353
  %367 = sdiv i64 %366, %364
  %368 = shl i64 %367, 32
  %369 = ashr exact i64 %368, 32
  %370 = icmp eq i64 %367, %369
  br i1 %370, label %373, label %371

; <label>:371:                                    ; preds = %block_4020b9
  %372 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %363, %struct.Memory* %97) #9
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i32, i32* %EDX, align 4
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:373:                                    ; preds = %block_4020b9
  %374 = srem i64 %366, %364
  %375 = and i64 %367, 4294967295
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = and i64 %374, 4294967295
  store i64 %376, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %377 = trunc i64 %374 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %373, %371
  %378 = phi i64 [ %.pre6, %371 ], [ %363, %373 ]
  %379 = phi i32 [ %.pre5, %371 ], [ %377, %373 ]
  %380 = phi i64 [ %.pre4, %371 ], [ %357, %373 ]
  %381 = phi %struct.Memory* [ %372, %371 ], [ %97, %373 ]
  %382 = add i64 %380, -44
  %383 = add i64 %378, 3
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i32*
  store i32 %379, i32* %384, align 4
  %385 = load i64, i64* %RBP, align 8
  %386 = add i64 %385, -44
  %387 = load i64, i64* %PC, align 8
  %388 = add i64 %387, 4
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %386 to i32*
  %390 = load i32, i32* %389, align 4
  %391 = add i32 %390, -2
  %392 = icmp ult i32 %390, 2
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %.pre-phi, align 1, !tbaa !2432
  %394 = and i32 %391, 255
  %395 = tail call i32 @llvm.ctpop.i32(i32 %394) #8
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  %398 = xor i8 %397, 1
  store i8 %398, i8* %.pre-phi23, align 1, !tbaa !2446
  %399 = xor i32 %390, %391
  %400 = lshr i32 %399, 4
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  store i8 %402, i8* %.pre-phi25, align 1, !tbaa !2450
  %403 = icmp eq i32 %391, 0
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %.pre-phi27, align 1, !tbaa !2447
  %405 = lshr i32 %391, 31
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %.pre-phi29, align 1, !tbaa !2448
  %407 = lshr i32 %390, 31
  %408 = xor i32 %405, %407
  %409 = add nuw nsw i32 %408, %407
  %410 = icmp eq i32 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %.pre-phi31, align 1, !tbaa !2449
  %412 = icmp ne i8 %406, 0
  %413 = xor i1 %412, %410
  %.v36 = select i1 %413, i64 171, i64 10
  %414 = add i64 %387, %.v36
  store i64 %414, i64* %PC, align 8, !tbaa !2428
  br i1 %413, label %block_40217a, label %block_4020d9

block_4022cd:                                     ; preds = %block_4022d9, %block_4022bd
  %415 = phi i64 [ %4810, %block_4022d9 ], [ %.pre15, %block_4022bd ]
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -48
  %418 = add i64 %415, 3
  store i64 %418, i64* %PC, align 8
  %419 = inttoptr i64 %417 to i32*
  %420 = load i32, i32* %419, align 4
  %421 = zext i32 %420 to i64
  store i64 %421, i64* %RAX, align 8, !tbaa !2428
  %422 = add i64 %416, -4
  %423 = add i64 %415, 6
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to i32*
  %425 = load i32, i32* %424, align 4
  %426 = sub i32 %420, %425
  %427 = icmp ult i32 %420, %425
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %.pre-phi, align 1, !tbaa !2432
  %429 = and i32 %426, 255
  %430 = tail call i32 @llvm.ctpop.i32(i32 %429) #8
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  %433 = xor i8 %432, 1
  store i8 %433, i8* %.pre-phi23, align 1, !tbaa !2446
  %434 = xor i32 %425, %420
  %435 = xor i32 %434, %426
  %436 = lshr i32 %435, 4
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  store i8 %438, i8* %.pre-phi25, align 1, !tbaa !2450
  %439 = icmp eq i32 %426, 0
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %.pre-phi27, align 1, !tbaa !2447
  %441 = lshr i32 %426, 31
  %442 = trunc i32 %441 to i8
  store i8 %442, i8* %.pre-phi29, align 1, !tbaa !2448
  %443 = lshr i32 %420, 31
  %444 = lshr i32 %425, 31
  %445 = xor i32 %444, %443
  %446 = xor i32 %441, %443
  %447 = add nuw nsw i32 %446, %445
  %448 = icmp eq i32 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %.pre-phi31, align 1, !tbaa !2449
  %450 = icmp ne i8 %442, 0
  %451 = xor i1 %450, %448
  %.v41 = select i1 %451, i64 12, i64 434
  %452 = add i64 %415, %.v41
  store i64 %452, i64* %PC, align 8, !tbaa !2428
  br i1 %451, label %block_4022d9, label %block_40247f

block_402049:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %453 = add i64 %130, 3
  store i64 %453, i64* %PC, align 8
  %454 = load i32, i32* %105, align 4
  %455 = add i32 %454, -1
  %456 = zext i32 %455 to i64
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = icmp eq i32 %454, 0
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %.pre-phi, align 1, !tbaa !2432
  %459 = and i32 %455, 255
  %460 = tail call i32 @llvm.ctpop.i32(i32 %459) #8
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  store i8 %463, i8* %.pre-phi23, align 1, !tbaa !2446
  %464 = xor i32 %454, %455
  %465 = lshr i32 %464, 4
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  store i8 %467, i8* %.pre-phi25, align 1, !tbaa !2450
  %468 = icmp eq i32 %455, 0
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %.pre-phi27, align 1, !tbaa !2447
  %470 = lshr i32 %455, 31
  %471 = trunc i32 %470 to i8
  store i8 %471, i8* %.pre-phi29, align 1, !tbaa !2448
  %472 = lshr i32 %454, 31
  %473 = xor i32 %470, %472
  %474 = add nuw nsw i32 %473, %472
  %475 = icmp eq i32 %474, 2
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %.pre-phi31, align 1, !tbaa !2449
  %477 = add i64 %130, 9
  store i64 %477, i64* %PC, align 8
  store i32 %455, i32* %105, align 4
  %478 = load i64, i64* %RBP, align 8
  %479 = add i64 %478, -48
  %480 = load i64, i64* %PC, align 8
  %481 = add i64 %480, 7
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %479 to i32*
  store i32 0, i32* %482, align 4
  %483 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %484 = bitcast [32 x %union.VectorReg]* %7 to float*
  %485 = getelementptr inbounds i8, i8* %483, i64 4
  %486 = bitcast i8* %485 to float*
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %488 = bitcast i64* %487 to float*
  %489 = getelementptr inbounds i8, i8* %483, i64 12
  %490 = bitcast i8* %489 to float*
  %491 = bitcast %union.VectorReg* %8 to i8*
  %492 = bitcast %union.VectorReg* %8 to float*
  %493 = getelementptr inbounds i8, i8* %491, i64 4
  %494 = bitcast i8* %493 to float*
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %496 = bitcast i64* %495 to float*
  %497 = getelementptr inbounds i8, i8* %491, i64 12
  %498 = bitcast i8* %497 to float*
  %499 = bitcast %union.VectorReg* %8 to <2 x float>*
  %500 = bitcast i64* %495 to <2 x i32>*
  %501 = bitcast i8* %493 to i32*
  %502 = bitcast i64* %495 to i32*
  %503 = bitcast i8* %497 to i32*
  %504 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %505 = bitcast i64* %487 to <2 x i32>*
  %506 = bitcast i8* %485 to i32*
  %507 = bitcast i64* %487 to i32*
  %508 = bitcast i8* %489 to i32*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_402059

block_4027f3:                                     ; preds = %block_4024b9
  %509 = add i64 %3404, -44
  %510 = add i64 %3440, 8
  store i64 %510, i64* %PC, align 8
  %511 = inttoptr i64 %509 to i32*
  %512 = load i32, i32* %511, align 4
  %513 = add i32 %512, 16
  %514 = zext i32 %513 to i64
  store i64 %514, i64* %RAX, align 8, !tbaa !2428
  %515 = icmp ugt i32 %512, -17
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %.pre-phi, align 1, !tbaa !2432
  %517 = and i32 %513, 255
  %518 = tail call i32 @llvm.ctpop.i32(i32 %517) #8
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  store i8 %521, i8* %.pre-phi23, align 1, !tbaa !2446
  %522 = xor i32 %512, 16
  %523 = xor i32 %522, %513
  %524 = lshr i32 %523, 4
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  store i8 %526, i8* %.pre-phi25, align 1, !tbaa !2450
  %527 = icmp eq i32 %513, 0
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %.pre-phi27, align 1, !tbaa !2447
  %529 = lshr i32 %513, 31
  %530 = trunc i32 %529 to i8
  store i8 %530, i8* %.pre-phi29, align 1, !tbaa !2448
  %531 = lshr i32 %512, 31
  %532 = xor i32 %529, %531
  %533 = add nuw nsw i32 %532, %529
  %534 = icmp eq i32 %533, 2
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %.pre-phi31, align 1, !tbaa !2449
  %536 = add i64 %3440, 14
  store i64 %536, i64* %PC, align 8
  store i32 %513, i32* %511, align 4
  %537 = load i64, i64* %PC, align 8
  %538 = add i64 %537, -859
  store i64 %538, i64* %PC, align 8, !tbaa !2428
  br label %block_4024a6

block_4022bd:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %539 = add i64 %3738, 3
  store i64 %539, i64* %PC, align 8
  %540 = load i32, i32* %3713, align 4
  %541 = add i32 %540, -1
  %542 = zext i32 %541 to i64
  store i64 %542, i64* %RAX, align 8, !tbaa !2428
  %543 = icmp eq i32 %540, 0
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %.pre-phi, align 1, !tbaa !2432
  %545 = and i32 %541, 255
  %546 = tail call i32 @llvm.ctpop.i32(i32 %545) #8
  %547 = trunc i32 %546 to i8
  %548 = and i8 %547, 1
  %549 = xor i8 %548, 1
  store i8 %549, i8* %.pre-phi23, align 1, !tbaa !2446
  %550 = xor i32 %540, %541
  %551 = lshr i32 %550, 4
  %552 = trunc i32 %551 to i8
  %553 = and i8 %552, 1
  store i8 %553, i8* %.pre-phi25, align 1, !tbaa !2450
  %554 = icmp eq i32 %541, 0
  %555 = zext i1 %554 to i8
  store i8 %555, i8* %.pre-phi27, align 1, !tbaa !2447
  %556 = lshr i32 %541, 31
  %557 = trunc i32 %556 to i8
  store i8 %557, i8* %.pre-phi29, align 1, !tbaa !2448
  %558 = lshr i32 %540, 31
  %559 = xor i32 %556, %558
  %560 = add nuw nsw i32 %559, %558
  %561 = icmp eq i32 %560, 2
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %.pre-phi31, align 1, !tbaa !2449
  %563 = add i64 %3738, 9
  store i64 %563, i64* %PC, align 8
  store i32 %541, i32* %3713, align 4
  %564 = load i64, i64* %RBP, align 8
  %565 = add i64 %564, -48
  %566 = load i64, i64* %PC, align 8
  %567 = add i64 %566, 7
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %565 to i32*
  store i32 0, i32* %568, align 4
  %569 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %570 = bitcast [32 x %union.VectorReg]* %7 to float*
  %571 = getelementptr inbounds i8, i8* %569, i64 4
  %572 = bitcast i8* %571 to float*
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %574 = bitcast i64* %573 to float*
  %575 = getelementptr inbounds i8, i8* %569, i64 12
  %576 = bitcast i8* %575 to float*
  %577 = bitcast %union.VectorReg* %8 to i8*
  %578 = bitcast %union.VectorReg* %8 to float*
  %579 = getelementptr inbounds i8, i8* %577, i64 4
  %580 = bitcast i8* %579 to float*
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %582 = bitcast i64* %581 to float*
  %583 = getelementptr inbounds i8, i8* %577, i64 12
  %584 = bitcast i8* %583 to float*
  %585 = bitcast %union.VectorReg* %8 to <2 x float>*
  %586 = bitcast i64* %581 to <2 x i32>*
  %587 = bitcast i8* %579 to i32*
  %588 = bitcast i64* %581 to i32*
  %589 = bitcast i8* %583 to i32*
  %590 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %591 = bitcast i64* %573 to <2 x i32>*
  %592 = bitcast i8* %571 to i32*
  %593 = bitcast i64* %573 to i32*
  %594 = bitcast i8* %575 to i32*
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_4022cd

block_4024c5:                                     ; preds = %block_4024b9
  %595 = add i64 %3404, -16
  %596 = add i64 %3440, 4
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i64*
  %598 = load i64, i64* %597, align 8
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = add i64 %3440, 8
  store i64 %599, i64* %PC, align 8
  %600 = load i32, i32* %3407, align 4
  %601 = sext i32 %600 to i64
  store i64 %601, i64* %RCX, align 8, !tbaa !2428
  %602 = shl nsw i64 %601, 2
  %603 = add i64 %602, %598
  %604 = add i64 %3440, 13
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %603 to i32*
  %606 = load i32, i32* %605, align 4
  %607 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %606, i32* %607, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4922, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4924, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4926, align 1, !tbaa !2452
  %608 = add i64 %3404, -32
  %609 = add i64 %3440, 17
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %608 to i64*
  %611 = load i64, i64* %610, align 8
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = add i64 %3404, -44
  %613 = add i64 %3440, 20
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i32*
  %615 = load i32, i32* %614, align 4
  %616 = add i32 %615, -15
  %617 = zext i32 %616 to i64
  store i64 %617, i64* %RDX, align 8, !tbaa !2428
  %618 = icmp ult i32 %615, 15
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %.pre-phi, align 1, !tbaa !2432
  %620 = and i32 %616, 255
  %621 = tail call i32 @llvm.ctpop.i32(i32 %620) #8
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  store i8 %624, i8* %.pre-phi23, align 1, !tbaa !2446
  %625 = xor i32 %615, %616
  %626 = lshr i32 %625, 4
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  store i8 %628, i8* %.pre-phi25, align 1, !tbaa !2450
  %629 = icmp eq i32 %616, 0
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %.pre-phi27, align 1, !tbaa !2447
  %631 = lshr i32 %616, 31
  %632 = trunc i32 %631 to i8
  store i8 %632, i8* %.pre-phi29, align 1, !tbaa !2448
  %633 = lshr i32 %615, 31
  %634 = xor i32 %631, %633
  %635 = add nuw nsw i32 %634, %633
  %636 = icmp eq i32 %635, 2
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %.pre-phi31, align 1, !tbaa !2449
  %638 = sext i32 %616 to i64
  store i64 %638, i64* %RCX, align 8, !tbaa !2428
  %639 = shl nsw i64 %638, 2
  %640 = add i64 %639, %611
  %641 = add i64 %3440, 31
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i32*
  %643 = load i32, i32* %642, align 4
  %644 = bitcast %union.VectorReg* %8 to i32*
  store i32 %643, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %645 = add i64 %3404, -40
  %646 = add i64 %3440, 35
  store i64 %646, i64* %PC, align 8
  %647 = inttoptr i64 %645 to i64*
  %648 = load i64, i64* %647, align 8
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = add i64 %3404, -24
  %650 = add i64 %3440, 38
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %649 to i32*
  %652 = load i32, i32* %651, align 4
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RDX, align 8, !tbaa !2428
  %654 = add i64 %3440, 41
  store i64 %654, i64* %PC, align 8
  %655 = load i32, i32* %614, align 4
  %656 = add i32 %655, -15
  %657 = zext i32 %656 to i64
  store i64 %657, i64* %RSI, align 8, !tbaa !2428
  %658 = sext i32 %652 to i64
  %659 = sext i32 %656 to i64
  %660 = mul nsw i64 %659, %658
  %661 = trunc i64 %660 to i32
  %662 = and i64 %660, 4294967295
  store i64 %662, i64* %RDX, align 8, !tbaa !2428
  %663 = shl i64 %660, 32
  %664 = ashr exact i64 %663, 32
  %665 = icmp ne i64 %664, %660
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %.pre-phi, align 1, !tbaa !2432
  %667 = and i32 %661, 255
  %668 = tail call i32 @llvm.ctpop.i32(i32 %667) #8
  %669 = trunc i32 %668 to i8
  %670 = and i8 %669, 1
  %671 = xor i8 %670, 1
  store i8 %671, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %672 = lshr i32 %661, 31
  %673 = trunc i32 %672 to i8
  store i8 %673, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %666, i8* %.pre-phi31, align 1, !tbaa !2449
  %674 = load i64, i64* %RBP, align 8
  %675 = add i64 %674, -48
  %676 = add i64 %3440, 50
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i32*
  %678 = load i32, i32* %677, align 4
  %679 = add i32 %678, %661
  %680 = zext i32 %679 to i64
  store i64 %680, i64* %RDX, align 8, !tbaa !2428
  %681 = icmp ult i32 %679, %661
  %682 = icmp ult i32 %679, %678
  %683 = or i1 %681, %682
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %.pre-phi, align 1, !tbaa !2432
  %685 = and i32 %679, 255
  %686 = tail call i32 @llvm.ctpop.i32(i32 %685) #8
  %687 = trunc i32 %686 to i8
  %688 = and i8 %687, 1
  %689 = xor i8 %688, 1
  store i8 %689, i8* %.pre-phi23, align 1, !tbaa !2446
  %690 = xor i32 %678, %661
  %691 = xor i32 %690, %679
  %692 = lshr i32 %691, 4
  %693 = trunc i32 %692 to i8
  %694 = and i8 %693, 1
  store i8 %694, i8* %.pre-phi25, align 1, !tbaa !2450
  %695 = icmp eq i32 %679, 0
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %.pre-phi27, align 1, !tbaa !2447
  %697 = lshr i32 %679, 31
  %698 = trunc i32 %697 to i8
  store i8 %698, i8* %.pre-phi29, align 1, !tbaa !2448
  %699 = lshr i32 %678, 31
  %700 = xor i32 %697, %672
  %701 = xor i32 %697, %699
  %702 = add nuw nsw i32 %700, %701
  %703 = icmp eq i32 %702, 2
  %704 = zext i1 %703 to i8
  store i8 %704, i8* %.pre-phi31, align 1, !tbaa !2449
  %705 = sext i32 %679 to i64
  store i64 %705, i64* %RCX, align 8, !tbaa !2428
  %706 = load i64, i64* %RAX, align 8
  %707 = shl nsw i64 %705, 2
  %708 = add i64 %707, %706
  %709 = add i64 %3440, 58
  store i64 %709, i64* %PC, align 8
  %710 = load <2 x float>, <2 x float>* %4935, align 1
  %711 = load <2 x i32>, <2 x i32>* %4936, align 1
  %712 = inttoptr i64 %708 to float*
  %713 = load float, float* %712, align 4
  %714 = extractelement <2 x float> %710, i32 0
  %715 = fmul float %714, %713
  store float %715, float* %4928, align 1, !tbaa !2452
  %716 = bitcast <2 x float> %710 to <2 x i32>
  %717 = extractelement <2 x i32> %716, i32 1
  store i32 %717, i32* %4937, align 1, !tbaa !2452
  %718 = extractelement <2 x i32> %711, i32 0
  store i32 %718, i32* %4938, align 1, !tbaa !2452
  %719 = extractelement <2 x i32> %711, i32 1
  store i32 %719, i32* %4939, align 1, !tbaa !2452
  %720 = load <2 x float>, <2 x float>* %4940, align 1
  %721 = load <2 x i32>, <2 x i32>* %4941, align 1
  %722 = load <2 x float>, <2 x float>* %4935, align 1
  %723 = extractelement <2 x float> %720, i32 0
  %724 = extractelement <2 x float> %722, i32 0
  %725 = fadd float %723, %724
  store float %725, float* %4920, align 1, !tbaa !2452
  %726 = bitcast <2 x float> %720 to <2 x i32>
  %727 = extractelement <2 x i32> %726, i32 1
  store i32 %727, i32* %4942, align 1, !tbaa !2452
  %728 = extractelement <2 x i32> %721, i32 0
  store i32 %728, i32* %4943, align 1, !tbaa !2452
  %729 = extractelement <2 x i32> %721, i32 1
  store i32 %729, i32* %4944, align 1, !tbaa !2452
  %730 = add i64 %674, -32
  %731 = add i64 %3440, 66
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %730 to i64*
  %733 = load i64, i64* %732, align 8
  store i64 %733, i64* %RAX, align 8, !tbaa !2428
  %734 = add i64 %674, -44
  %735 = add i64 %3440, 69
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to i32*
  %737 = load i32, i32* %736, align 4
  %738 = add i32 %737, -14
  %739 = zext i32 %738 to i64
  store i64 %739, i64* %RDX, align 8, !tbaa !2428
  %740 = icmp ult i32 %737, 14
  %741 = zext i1 %740 to i8
  store i8 %741, i8* %.pre-phi, align 1, !tbaa !2432
  %742 = and i32 %738, 255
  %743 = tail call i32 @llvm.ctpop.i32(i32 %742) #8
  %744 = trunc i32 %743 to i8
  %745 = and i8 %744, 1
  %746 = xor i8 %745, 1
  store i8 %746, i8* %.pre-phi23, align 1, !tbaa !2446
  %747 = xor i32 %737, %738
  %748 = lshr i32 %747, 4
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  store i8 %750, i8* %.pre-phi25, align 1, !tbaa !2450
  %751 = icmp eq i32 %738, 0
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %.pre-phi27, align 1, !tbaa !2447
  %753 = lshr i32 %738, 31
  %754 = trunc i32 %753 to i8
  store i8 %754, i8* %.pre-phi29, align 1, !tbaa !2448
  %755 = lshr i32 %737, 31
  %756 = xor i32 %753, %755
  %757 = add nuw nsw i32 %756, %755
  %758 = icmp eq i32 %757, 2
  %759 = zext i1 %758 to i8
  store i8 %759, i8* %.pre-phi31, align 1, !tbaa !2449
  %760 = sext i32 %738 to i64
  store i64 %760, i64* %RCX, align 8, !tbaa !2428
  %761 = shl nsw i64 %760, 2
  %762 = add i64 %761, %733
  %763 = add i64 %3440, 80
  store i64 %763, i64* %PC, align 8
  %764 = inttoptr i64 %762 to i32*
  %765 = load i32, i32* %764, align 4
  store i32 %765, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %766 = load i64, i64* %RBP, align 8
  %767 = add i64 %766, -40
  %768 = add i64 %3440, 84
  store i64 %768, i64* %PC, align 8
  %769 = inttoptr i64 %767 to i64*
  %770 = load i64, i64* %769, align 8
  store i64 %770, i64* %RAX, align 8, !tbaa !2428
  %771 = add i64 %766, -24
  %772 = add i64 %3440, 87
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to i32*
  %774 = load i32, i32* %773, align 4
  %775 = zext i32 %774 to i64
  store i64 %775, i64* %RDX, align 8, !tbaa !2428
  %776 = add i64 %766, -44
  %777 = add i64 %3440, 90
  store i64 %777, i64* %PC, align 8
  %778 = inttoptr i64 %776 to i32*
  %779 = load i32, i32* %778, align 4
  %780 = add i32 %779, -14
  %781 = zext i32 %780 to i64
  store i64 %781, i64* %RSI, align 8, !tbaa !2428
  %782 = sext i32 %774 to i64
  %783 = sext i32 %780 to i64
  %784 = mul nsw i64 %783, %782
  %785 = trunc i64 %784 to i32
  %786 = and i64 %784, 4294967295
  store i64 %786, i64* %RDX, align 8, !tbaa !2428
  %787 = shl i64 %784, 32
  %788 = ashr exact i64 %787, 32
  %789 = icmp ne i64 %788, %784
  %790 = zext i1 %789 to i8
  store i8 %790, i8* %.pre-phi, align 1, !tbaa !2432
  %791 = and i32 %785, 255
  %792 = tail call i32 @llvm.ctpop.i32(i32 %791) #8
  %793 = trunc i32 %792 to i8
  %794 = and i8 %793, 1
  %795 = xor i8 %794, 1
  store i8 %795, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %796 = lshr i32 %785, 31
  %797 = trunc i32 %796 to i8
  store i8 %797, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %790, i8* %.pre-phi31, align 1, !tbaa !2449
  %798 = add i64 %766, -48
  %799 = add i64 %3440, 99
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %798 to i32*
  %801 = load i32, i32* %800, align 4
  %802 = add i32 %801, %785
  %803 = zext i32 %802 to i64
  store i64 %803, i64* %RDX, align 8, !tbaa !2428
  %804 = icmp ult i32 %802, %785
  %805 = icmp ult i32 %802, %801
  %806 = or i1 %804, %805
  %807 = zext i1 %806 to i8
  store i8 %807, i8* %.pre-phi, align 1, !tbaa !2432
  %808 = and i32 %802, 255
  %809 = tail call i32 @llvm.ctpop.i32(i32 %808) #8
  %810 = trunc i32 %809 to i8
  %811 = and i8 %810, 1
  %812 = xor i8 %811, 1
  store i8 %812, i8* %.pre-phi23, align 1, !tbaa !2446
  %813 = xor i32 %801, %785
  %814 = xor i32 %813, %802
  %815 = lshr i32 %814, 4
  %816 = trunc i32 %815 to i8
  %817 = and i8 %816, 1
  store i8 %817, i8* %.pre-phi25, align 1, !tbaa !2450
  %818 = icmp eq i32 %802, 0
  %819 = zext i1 %818 to i8
  store i8 %819, i8* %.pre-phi27, align 1, !tbaa !2447
  %820 = lshr i32 %802, 31
  %821 = trunc i32 %820 to i8
  store i8 %821, i8* %.pre-phi29, align 1, !tbaa !2448
  %822 = lshr i32 %801, 31
  %823 = xor i32 %820, %796
  %824 = xor i32 %820, %822
  %825 = add nuw nsw i32 %823, %824
  %826 = icmp eq i32 %825, 2
  %827 = zext i1 %826 to i8
  store i8 %827, i8* %.pre-phi31, align 1, !tbaa !2449
  %828 = sext i32 %802 to i64
  store i64 %828, i64* %RCX, align 8, !tbaa !2428
  %829 = load i64, i64* %RAX, align 8
  %830 = shl nsw i64 %828, 2
  %831 = add i64 %830, %829
  %832 = add i64 %3440, 107
  store i64 %832, i64* %PC, align 8
  %833 = load <2 x float>, <2 x float>* %4935, align 1
  %834 = load <2 x i32>, <2 x i32>* %4936, align 1
  %835 = inttoptr i64 %831 to float*
  %836 = load float, float* %835, align 4
  %837 = extractelement <2 x float> %833, i32 0
  %838 = fmul float %837, %836
  store float %838, float* %4928, align 1, !tbaa !2452
  %839 = bitcast <2 x float> %833 to <2 x i32>
  %840 = extractelement <2 x i32> %839, i32 1
  store i32 %840, i32* %4937, align 1, !tbaa !2452
  %841 = extractelement <2 x i32> %834, i32 0
  store i32 %841, i32* %4938, align 1, !tbaa !2452
  %842 = extractelement <2 x i32> %834, i32 1
  store i32 %842, i32* %4939, align 1, !tbaa !2452
  %843 = load <2 x float>, <2 x float>* %4940, align 1
  %844 = load <2 x i32>, <2 x i32>* %4941, align 1
  %845 = load <2 x float>, <2 x float>* %4935, align 1
  %846 = extractelement <2 x float> %843, i32 0
  %847 = extractelement <2 x float> %845, i32 0
  %848 = fadd float %846, %847
  store float %848, float* %4920, align 1, !tbaa !2452
  %849 = bitcast <2 x float> %843 to <2 x i32>
  %850 = extractelement <2 x i32> %849, i32 1
  store i32 %850, i32* %4942, align 1, !tbaa !2452
  %851 = extractelement <2 x i32> %844, i32 0
  store i32 %851, i32* %4943, align 1, !tbaa !2452
  %852 = extractelement <2 x i32> %844, i32 1
  store i32 %852, i32* %4944, align 1, !tbaa !2452
  %853 = load i64, i64* %RBP, align 8
  %854 = add i64 %853, -32
  %855 = add i64 %3440, 115
  store i64 %855, i64* %PC, align 8
  %856 = inttoptr i64 %854 to i64*
  %857 = load i64, i64* %856, align 8
  store i64 %857, i64* %RAX, align 8, !tbaa !2428
  %858 = add i64 %853, -44
  %859 = add i64 %3440, 118
  store i64 %859, i64* %PC, align 8
  %860 = inttoptr i64 %858 to i32*
  %861 = load i32, i32* %860, align 4
  %862 = add i32 %861, -13
  %863 = zext i32 %862 to i64
  store i64 %863, i64* %RDX, align 8, !tbaa !2428
  %864 = icmp ult i32 %861, 13
  %865 = zext i1 %864 to i8
  store i8 %865, i8* %.pre-phi, align 1, !tbaa !2432
  %866 = and i32 %862, 255
  %867 = tail call i32 @llvm.ctpop.i32(i32 %866) #8
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 1
  %870 = xor i8 %869, 1
  store i8 %870, i8* %.pre-phi23, align 1, !tbaa !2446
  %871 = xor i32 %861, %862
  %872 = lshr i32 %871, 4
  %873 = trunc i32 %872 to i8
  %874 = and i8 %873, 1
  store i8 %874, i8* %.pre-phi25, align 1, !tbaa !2450
  %875 = icmp eq i32 %862, 0
  %876 = zext i1 %875 to i8
  store i8 %876, i8* %.pre-phi27, align 1, !tbaa !2447
  %877 = lshr i32 %862, 31
  %878 = trunc i32 %877 to i8
  store i8 %878, i8* %.pre-phi29, align 1, !tbaa !2448
  %879 = lshr i32 %861, 31
  %880 = xor i32 %877, %879
  %881 = add nuw nsw i32 %880, %879
  %882 = icmp eq i32 %881, 2
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %.pre-phi31, align 1, !tbaa !2449
  %884 = sext i32 %862 to i64
  store i64 %884, i64* %RCX, align 8, !tbaa !2428
  %885 = shl nsw i64 %884, 2
  %886 = add i64 %885, %857
  %887 = add i64 %3440, 129
  store i64 %887, i64* %PC, align 8
  %888 = inttoptr i64 %886 to i32*
  %889 = load i32, i32* %888, align 4
  store i32 %889, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %890 = add i64 %853, -40
  %891 = add i64 %3440, 133
  store i64 %891, i64* %PC, align 8
  %892 = inttoptr i64 %890 to i64*
  %893 = load i64, i64* %892, align 8
  store i64 %893, i64* %RAX, align 8, !tbaa !2428
  %894 = add i64 %853, -24
  %895 = add i64 %3440, 136
  store i64 %895, i64* %PC, align 8
  %896 = inttoptr i64 %894 to i32*
  %897 = load i32, i32* %896, align 4
  %898 = zext i32 %897 to i64
  store i64 %898, i64* %RDX, align 8, !tbaa !2428
  %899 = add i64 %3440, 139
  store i64 %899, i64* %PC, align 8
  %900 = load i32, i32* %860, align 4
  %901 = add i32 %900, -13
  %902 = zext i32 %901 to i64
  store i64 %902, i64* %RSI, align 8, !tbaa !2428
  %903 = sext i32 %897 to i64
  %904 = sext i32 %901 to i64
  %905 = mul nsw i64 %904, %903
  %906 = trunc i64 %905 to i32
  %907 = and i64 %905, 4294967295
  store i64 %907, i64* %RDX, align 8, !tbaa !2428
  %908 = shl i64 %905, 32
  %909 = ashr exact i64 %908, 32
  %910 = icmp ne i64 %909, %905
  %911 = zext i1 %910 to i8
  store i8 %911, i8* %.pre-phi, align 1, !tbaa !2432
  %912 = and i32 %906, 255
  %913 = tail call i32 @llvm.ctpop.i32(i32 %912) #8
  %914 = trunc i32 %913 to i8
  %915 = and i8 %914, 1
  %916 = xor i8 %915, 1
  store i8 %916, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %917 = lshr i32 %906, 31
  %918 = trunc i32 %917 to i8
  store i8 %918, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %911, i8* %.pre-phi31, align 1, !tbaa !2449
  %919 = load i64, i64* %RBP, align 8
  %920 = add i64 %919, -48
  %921 = add i64 %3440, 148
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to i32*
  %923 = load i32, i32* %922, align 4
  %924 = add i32 %923, %906
  %925 = zext i32 %924 to i64
  store i64 %925, i64* %RDX, align 8, !tbaa !2428
  %926 = icmp ult i32 %924, %906
  %927 = icmp ult i32 %924, %923
  %928 = or i1 %926, %927
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %.pre-phi, align 1, !tbaa !2432
  %930 = and i32 %924, 255
  %931 = tail call i32 @llvm.ctpop.i32(i32 %930) #8
  %932 = trunc i32 %931 to i8
  %933 = and i8 %932, 1
  %934 = xor i8 %933, 1
  store i8 %934, i8* %.pre-phi23, align 1, !tbaa !2446
  %935 = xor i32 %923, %906
  %936 = xor i32 %935, %924
  %937 = lshr i32 %936, 4
  %938 = trunc i32 %937 to i8
  %939 = and i8 %938, 1
  store i8 %939, i8* %.pre-phi25, align 1, !tbaa !2450
  %940 = icmp eq i32 %924, 0
  %941 = zext i1 %940 to i8
  store i8 %941, i8* %.pre-phi27, align 1, !tbaa !2447
  %942 = lshr i32 %924, 31
  %943 = trunc i32 %942 to i8
  store i8 %943, i8* %.pre-phi29, align 1, !tbaa !2448
  %944 = lshr i32 %923, 31
  %945 = xor i32 %942, %917
  %946 = xor i32 %942, %944
  %947 = add nuw nsw i32 %945, %946
  %948 = icmp eq i32 %947, 2
  %949 = zext i1 %948 to i8
  store i8 %949, i8* %.pre-phi31, align 1, !tbaa !2449
  %950 = sext i32 %924 to i64
  store i64 %950, i64* %RCX, align 8, !tbaa !2428
  %951 = load i64, i64* %RAX, align 8
  %952 = shl nsw i64 %950, 2
  %953 = add i64 %952, %951
  %954 = add i64 %3440, 156
  store i64 %954, i64* %PC, align 8
  %955 = load <2 x float>, <2 x float>* %4935, align 1
  %956 = load <2 x i32>, <2 x i32>* %4936, align 1
  %957 = inttoptr i64 %953 to float*
  %958 = load float, float* %957, align 4
  %959 = extractelement <2 x float> %955, i32 0
  %960 = fmul float %959, %958
  store float %960, float* %4928, align 1, !tbaa !2452
  %961 = bitcast <2 x float> %955 to <2 x i32>
  %962 = extractelement <2 x i32> %961, i32 1
  store i32 %962, i32* %4937, align 1, !tbaa !2452
  %963 = extractelement <2 x i32> %956, i32 0
  store i32 %963, i32* %4938, align 1, !tbaa !2452
  %964 = extractelement <2 x i32> %956, i32 1
  store i32 %964, i32* %4939, align 1, !tbaa !2452
  %965 = load <2 x float>, <2 x float>* %4940, align 1
  %966 = load <2 x i32>, <2 x i32>* %4941, align 1
  %967 = load <2 x float>, <2 x float>* %4935, align 1
  %968 = extractelement <2 x float> %965, i32 0
  %969 = extractelement <2 x float> %967, i32 0
  %970 = fadd float %968, %969
  store float %970, float* %4920, align 1, !tbaa !2452
  %971 = bitcast <2 x float> %965 to <2 x i32>
  %972 = extractelement <2 x i32> %971, i32 1
  store i32 %972, i32* %4942, align 1, !tbaa !2452
  %973 = extractelement <2 x i32> %966, i32 0
  store i32 %973, i32* %4943, align 1, !tbaa !2452
  %974 = extractelement <2 x i32> %966, i32 1
  store i32 %974, i32* %4944, align 1, !tbaa !2452
  %975 = add i64 %919, -32
  %976 = add i64 %3440, 164
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %975 to i64*
  %978 = load i64, i64* %977, align 8
  store i64 %978, i64* %RAX, align 8, !tbaa !2428
  %979 = add i64 %919, -44
  %980 = add i64 %3440, 167
  store i64 %980, i64* %PC, align 8
  %981 = inttoptr i64 %979 to i32*
  %982 = load i32, i32* %981, align 4
  %983 = add i32 %982, -12
  %984 = zext i32 %983 to i64
  store i64 %984, i64* %RDX, align 8, !tbaa !2428
  %985 = icmp ult i32 %982, 12
  %986 = zext i1 %985 to i8
  store i8 %986, i8* %.pre-phi, align 1, !tbaa !2432
  %987 = and i32 %983, 255
  %988 = tail call i32 @llvm.ctpop.i32(i32 %987) #8
  %989 = trunc i32 %988 to i8
  %990 = and i8 %989, 1
  %991 = xor i8 %990, 1
  store i8 %991, i8* %.pre-phi23, align 1, !tbaa !2446
  %992 = xor i32 %982, %983
  %993 = lshr i32 %992, 4
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  store i8 %995, i8* %.pre-phi25, align 1, !tbaa !2450
  %996 = icmp eq i32 %983, 0
  %997 = zext i1 %996 to i8
  store i8 %997, i8* %.pre-phi27, align 1, !tbaa !2447
  %998 = lshr i32 %983, 31
  %999 = trunc i32 %998 to i8
  store i8 %999, i8* %.pre-phi29, align 1, !tbaa !2448
  %1000 = lshr i32 %982, 31
  %1001 = xor i32 %998, %1000
  %1002 = add nuw nsw i32 %1001, %1000
  %1003 = icmp eq i32 %1002, 2
  %1004 = zext i1 %1003 to i8
  store i8 %1004, i8* %.pre-phi31, align 1, !tbaa !2449
  %1005 = sext i32 %983 to i64
  store i64 %1005, i64* %RCX, align 8, !tbaa !2428
  %1006 = shl nsw i64 %1005, 2
  %1007 = add i64 %1006, %978
  %1008 = add i64 %3440, 178
  store i64 %1008, i64* %PC, align 8
  %1009 = inttoptr i64 %1007 to i32*
  %1010 = load i32, i32* %1009, align 4
  store i32 %1010, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1011 = load i64, i64* %RBP, align 8
  %1012 = add i64 %1011, -40
  %1013 = add i64 %3440, 182
  store i64 %1013, i64* %PC, align 8
  %1014 = inttoptr i64 %1012 to i64*
  %1015 = load i64, i64* %1014, align 8
  store i64 %1015, i64* %RAX, align 8, !tbaa !2428
  %1016 = add i64 %1011, -24
  %1017 = add i64 %3440, 185
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1016 to i32*
  %1019 = load i32, i32* %1018, align 4
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RDX, align 8, !tbaa !2428
  %1021 = add i64 %1011, -44
  %1022 = add i64 %3440, 188
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1021 to i32*
  %1024 = load i32, i32* %1023, align 4
  %1025 = add i32 %1024, -12
  %1026 = zext i32 %1025 to i64
  store i64 %1026, i64* %RSI, align 8, !tbaa !2428
  %1027 = sext i32 %1019 to i64
  %1028 = sext i32 %1025 to i64
  %1029 = mul nsw i64 %1028, %1027
  %1030 = trunc i64 %1029 to i32
  %1031 = and i64 %1029, 4294967295
  store i64 %1031, i64* %RDX, align 8, !tbaa !2428
  %1032 = shl i64 %1029, 32
  %1033 = ashr exact i64 %1032, 32
  %1034 = icmp ne i64 %1033, %1029
  %1035 = zext i1 %1034 to i8
  store i8 %1035, i8* %.pre-phi, align 1, !tbaa !2432
  %1036 = and i32 %1030, 255
  %1037 = tail call i32 @llvm.ctpop.i32(i32 %1036) #8
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = xor i8 %1039, 1
  store i8 %1040, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1041 = lshr i32 %1030, 31
  %1042 = trunc i32 %1041 to i8
  store i8 %1042, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1035, i8* %.pre-phi31, align 1, !tbaa !2449
  %1043 = add i64 %1011, -48
  %1044 = add i64 %3440, 197
  store i64 %1044, i64* %PC, align 8
  %1045 = inttoptr i64 %1043 to i32*
  %1046 = load i32, i32* %1045, align 4
  %1047 = add i32 %1046, %1030
  %1048 = zext i32 %1047 to i64
  store i64 %1048, i64* %RDX, align 8, !tbaa !2428
  %1049 = icmp ult i32 %1047, %1030
  %1050 = icmp ult i32 %1047, %1046
  %1051 = or i1 %1049, %1050
  %1052 = zext i1 %1051 to i8
  store i8 %1052, i8* %.pre-phi, align 1, !tbaa !2432
  %1053 = and i32 %1047, 255
  %1054 = tail call i32 @llvm.ctpop.i32(i32 %1053) #8
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  store i8 %1057, i8* %.pre-phi23, align 1, !tbaa !2446
  %1058 = xor i32 %1046, %1030
  %1059 = xor i32 %1058, %1047
  %1060 = lshr i32 %1059, 4
  %1061 = trunc i32 %1060 to i8
  %1062 = and i8 %1061, 1
  store i8 %1062, i8* %.pre-phi25, align 1, !tbaa !2450
  %1063 = icmp eq i32 %1047, 0
  %1064 = zext i1 %1063 to i8
  store i8 %1064, i8* %.pre-phi27, align 1, !tbaa !2447
  %1065 = lshr i32 %1047, 31
  %1066 = trunc i32 %1065 to i8
  store i8 %1066, i8* %.pre-phi29, align 1, !tbaa !2448
  %1067 = lshr i32 %1046, 31
  %1068 = xor i32 %1065, %1041
  %1069 = xor i32 %1065, %1067
  %1070 = add nuw nsw i32 %1068, %1069
  %1071 = icmp eq i32 %1070, 2
  %1072 = zext i1 %1071 to i8
  store i8 %1072, i8* %.pre-phi31, align 1, !tbaa !2449
  %1073 = sext i32 %1047 to i64
  store i64 %1073, i64* %RCX, align 8, !tbaa !2428
  %1074 = load i64, i64* %RAX, align 8
  %1075 = shl nsw i64 %1073, 2
  %1076 = add i64 %1075, %1074
  %1077 = add i64 %3440, 205
  store i64 %1077, i64* %PC, align 8
  %1078 = load <2 x float>, <2 x float>* %4935, align 1
  %1079 = load <2 x i32>, <2 x i32>* %4936, align 1
  %1080 = inttoptr i64 %1076 to float*
  %1081 = load float, float* %1080, align 4
  %1082 = extractelement <2 x float> %1078, i32 0
  %1083 = fmul float %1082, %1081
  store float %1083, float* %4928, align 1, !tbaa !2452
  %1084 = bitcast <2 x float> %1078 to <2 x i32>
  %1085 = extractelement <2 x i32> %1084, i32 1
  store i32 %1085, i32* %4937, align 1, !tbaa !2452
  %1086 = extractelement <2 x i32> %1079, i32 0
  store i32 %1086, i32* %4938, align 1, !tbaa !2452
  %1087 = extractelement <2 x i32> %1079, i32 1
  store i32 %1087, i32* %4939, align 1, !tbaa !2452
  %1088 = load <2 x float>, <2 x float>* %4940, align 1
  %1089 = load <2 x i32>, <2 x i32>* %4941, align 1
  %1090 = load <2 x float>, <2 x float>* %4935, align 1
  %1091 = extractelement <2 x float> %1088, i32 0
  %1092 = extractelement <2 x float> %1090, i32 0
  %1093 = fadd float %1091, %1092
  store float %1093, float* %4920, align 1, !tbaa !2452
  %1094 = bitcast <2 x float> %1088 to <2 x i32>
  %1095 = extractelement <2 x i32> %1094, i32 1
  store i32 %1095, i32* %4942, align 1, !tbaa !2452
  %1096 = extractelement <2 x i32> %1089, i32 0
  store i32 %1096, i32* %4943, align 1, !tbaa !2452
  %1097 = extractelement <2 x i32> %1089, i32 1
  store i32 %1097, i32* %4944, align 1, !tbaa !2452
  %1098 = load i64, i64* %RBP, align 8
  %1099 = add i64 %1098, -32
  %1100 = add i64 %3440, 213
  store i64 %1100, i64* %PC, align 8
  %1101 = inttoptr i64 %1099 to i64*
  %1102 = load i64, i64* %1101, align 8
  store i64 %1102, i64* %RAX, align 8, !tbaa !2428
  %1103 = add i64 %1098, -44
  %1104 = add i64 %3440, 216
  store i64 %1104, i64* %PC, align 8
  %1105 = inttoptr i64 %1103 to i32*
  %1106 = load i32, i32* %1105, align 4
  %1107 = add i32 %1106, -11
  %1108 = zext i32 %1107 to i64
  store i64 %1108, i64* %RDX, align 8, !tbaa !2428
  %1109 = icmp ult i32 %1106, 11
  %1110 = zext i1 %1109 to i8
  store i8 %1110, i8* %.pre-phi, align 1, !tbaa !2432
  %1111 = and i32 %1107, 255
  %1112 = tail call i32 @llvm.ctpop.i32(i32 %1111) #8
  %1113 = trunc i32 %1112 to i8
  %1114 = and i8 %1113, 1
  %1115 = xor i8 %1114, 1
  store i8 %1115, i8* %.pre-phi23, align 1, !tbaa !2446
  %1116 = xor i32 %1106, %1107
  %1117 = lshr i32 %1116, 4
  %1118 = trunc i32 %1117 to i8
  %1119 = and i8 %1118, 1
  store i8 %1119, i8* %.pre-phi25, align 1, !tbaa !2450
  %1120 = icmp eq i32 %1107, 0
  %1121 = zext i1 %1120 to i8
  store i8 %1121, i8* %.pre-phi27, align 1, !tbaa !2447
  %1122 = lshr i32 %1107, 31
  %1123 = trunc i32 %1122 to i8
  store i8 %1123, i8* %.pre-phi29, align 1, !tbaa !2448
  %1124 = lshr i32 %1106, 31
  %1125 = xor i32 %1122, %1124
  %1126 = add nuw nsw i32 %1125, %1124
  %1127 = icmp eq i32 %1126, 2
  %1128 = zext i1 %1127 to i8
  store i8 %1128, i8* %.pre-phi31, align 1, !tbaa !2449
  %1129 = sext i32 %1107 to i64
  store i64 %1129, i64* %RCX, align 8, !tbaa !2428
  %1130 = shl nsw i64 %1129, 2
  %1131 = add i64 %1130, %1102
  %1132 = add i64 %3440, 227
  store i64 %1132, i64* %PC, align 8
  %1133 = inttoptr i64 %1131 to i32*
  %1134 = load i32, i32* %1133, align 4
  store i32 %1134, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1135 = add i64 %1098, -40
  %1136 = add i64 %3440, 231
  store i64 %1136, i64* %PC, align 8
  %1137 = inttoptr i64 %1135 to i64*
  %1138 = load i64, i64* %1137, align 8
  store i64 %1138, i64* %RAX, align 8, !tbaa !2428
  %1139 = add i64 %1098, -24
  %1140 = add i64 %3440, 234
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1139 to i32*
  %1142 = load i32, i32* %1141, align 4
  %1143 = zext i32 %1142 to i64
  store i64 %1143, i64* %RDX, align 8, !tbaa !2428
  %1144 = add i64 %3440, 237
  store i64 %1144, i64* %PC, align 8
  %1145 = load i32, i32* %1105, align 4
  %1146 = add i32 %1145, -11
  %1147 = zext i32 %1146 to i64
  store i64 %1147, i64* %RSI, align 8, !tbaa !2428
  %1148 = sext i32 %1142 to i64
  %1149 = sext i32 %1146 to i64
  %1150 = mul nsw i64 %1149, %1148
  %1151 = trunc i64 %1150 to i32
  %1152 = and i64 %1150, 4294967295
  store i64 %1152, i64* %RDX, align 8, !tbaa !2428
  %1153 = shl i64 %1150, 32
  %1154 = ashr exact i64 %1153, 32
  %1155 = icmp ne i64 %1154, %1150
  %1156 = zext i1 %1155 to i8
  store i8 %1156, i8* %.pre-phi, align 1, !tbaa !2432
  %1157 = and i32 %1151, 255
  %1158 = tail call i32 @llvm.ctpop.i32(i32 %1157) #8
  %1159 = trunc i32 %1158 to i8
  %1160 = and i8 %1159, 1
  %1161 = xor i8 %1160, 1
  store i8 %1161, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1162 = lshr i32 %1151, 31
  %1163 = trunc i32 %1162 to i8
  store i8 %1163, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1156, i8* %.pre-phi31, align 1, !tbaa !2449
  %1164 = load i64, i64* %RBP, align 8
  %1165 = add i64 %1164, -48
  %1166 = add i64 %3440, 246
  store i64 %1166, i64* %PC, align 8
  %1167 = inttoptr i64 %1165 to i32*
  %1168 = load i32, i32* %1167, align 4
  %1169 = add i32 %1168, %1151
  %1170 = zext i32 %1169 to i64
  store i64 %1170, i64* %RDX, align 8, !tbaa !2428
  %1171 = icmp ult i32 %1169, %1151
  %1172 = icmp ult i32 %1169, %1168
  %1173 = or i1 %1171, %1172
  %1174 = zext i1 %1173 to i8
  store i8 %1174, i8* %.pre-phi, align 1, !tbaa !2432
  %1175 = and i32 %1169, 255
  %1176 = tail call i32 @llvm.ctpop.i32(i32 %1175) #8
  %1177 = trunc i32 %1176 to i8
  %1178 = and i8 %1177, 1
  %1179 = xor i8 %1178, 1
  store i8 %1179, i8* %.pre-phi23, align 1, !tbaa !2446
  %1180 = xor i32 %1168, %1151
  %1181 = xor i32 %1180, %1169
  %1182 = lshr i32 %1181, 4
  %1183 = trunc i32 %1182 to i8
  %1184 = and i8 %1183, 1
  store i8 %1184, i8* %.pre-phi25, align 1, !tbaa !2450
  %1185 = icmp eq i32 %1169, 0
  %1186 = zext i1 %1185 to i8
  store i8 %1186, i8* %.pre-phi27, align 1, !tbaa !2447
  %1187 = lshr i32 %1169, 31
  %1188 = trunc i32 %1187 to i8
  store i8 %1188, i8* %.pre-phi29, align 1, !tbaa !2448
  %1189 = lshr i32 %1168, 31
  %1190 = xor i32 %1187, %1162
  %1191 = xor i32 %1187, %1189
  %1192 = add nuw nsw i32 %1190, %1191
  %1193 = icmp eq i32 %1192, 2
  %1194 = zext i1 %1193 to i8
  store i8 %1194, i8* %.pre-phi31, align 1, !tbaa !2449
  %1195 = sext i32 %1169 to i64
  store i64 %1195, i64* %RCX, align 8, !tbaa !2428
  %1196 = load i64, i64* %RAX, align 8
  %1197 = shl nsw i64 %1195, 2
  %1198 = add i64 %1197, %1196
  %1199 = add i64 %3440, 254
  store i64 %1199, i64* %PC, align 8
  %1200 = load <2 x float>, <2 x float>* %4935, align 1
  %1201 = load <2 x i32>, <2 x i32>* %4936, align 1
  %1202 = inttoptr i64 %1198 to float*
  %1203 = load float, float* %1202, align 4
  %1204 = extractelement <2 x float> %1200, i32 0
  %1205 = fmul float %1204, %1203
  store float %1205, float* %4928, align 1, !tbaa !2452
  %1206 = bitcast <2 x float> %1200 to <2 x i32>
  %1207 = extractelement <2 x i32> %1206, i32 1
  store i32 %1207, i32* %4937, align 1, !tbaa !2452
  %1208 = extractelement <2 x i32> %1201, i32 0
  store i32 %1208, i32* %4938, align 1, !tbaa !2452
  %1209 = extractelement <2 x i32> %1201, i32 1
  store i32 %1209, i32* %4939, align 1, !tbaa !2452
  %1210 = load <2 x float>, <2 x float>* %4940, align 1
  %1211 = load <2 x i32>, <2 x i32>* %4941, align 1
  %1212 = load <2 x float>, <2 x float>* %4935, align 1
  %1213 = extractelement <2 x float> %1210, i32 0
  %1214 = extractelement <2 x float> %1212, i32 0
  %1215 = fadd float %1213, %1214
  store float %1215, float* %4920, align 1, !tbaa !2452
  %1216 = bitcast <2 x float> %1210 to <2 x i32>
  %1217 = extractelement <2 x i32> %1216, i32 1
  store i32 %1217, i32* %4942, align 1, !tbaa !2452
  %1218 = extractelement <2 x i32> %1211, i32 0
  store i32 %1218, i32* %4943, align 1, !tbaa !2452
  %1219 = extractelement <2 x i32> %1211, i32 1
  store i32 %1219, i32* %4944, align 1, !tbaa !2452
  %1220 = add i64 %1164, -32
  %1221 = add i64 %3440, 262
  store i64 %1221, i64* %PC, align 8
  %1222 = inttoptr i64 %1220 to i64*
  %1223 = load i64, i64* %1222, align 8
  store i64 %1223, i64* %RAX, align 8, !tbaa !2428
  %1224 = add i64 %1164, -44
  %1225 = add i64 %3440, 265
  store i64 %1225, i64* %PC, align 8
  %1226 = inttoptr i64 %1224 to i32*
  %1227 = load i32, i32* %1226, align 4
  %1228 = add i32 %1227, -10
  %1229 = zext i32 %1228 to i64
  store i64 %1229, i64* %RDX, align 8, !tbaa !2428
  %1230 = icmp ult i32 %1227, 10
  %1231 = zext i1 %1230 to i8
  store i8 %1231, i8* %.pre-phi, align 1, !tbaa !2432
  %1232 = and i32 %1228, 255
  %1233 = tail call i32 @llvm.ctpop.i32(i32 %1232) #8
  %1234 = trunc i32 %1233 to i8
  %1235 = and i8 %1234, 1
  %1236 = xor i8 %1235, 1
  store i8 %1236, i8* %.pre-phi23, align 1, !tbaa !2446
  %1237 = xor i32 %1227, %1228
  %1238 = lshr i32 %1237, 4
  %1239 = trunc i32 %1238 to i8
  %1240 = and i8 %1239, 1
  store i8 %1240, i8* %.pre-phi25, align 1, !tbaa !2450
  %1241 = icmp eq i32 %1228, 0
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* %.pre-phi27, align 1, !tbaa !2447
  %1243 = lshr i32 %1228, 31
  %1244 = trunc i32 %1243 to i8
  store i8 %1244, i8* %.pre-phi29, align 1, !tbaa !2448
  %1245 = lshr i32 %1227, 31
  %1246 = xor i32 %1243, %1245
  %1247 = add nuw nsw i32 %1246, %1245
  %1248 = icmp eq i32 %1247, 2
  %1249 = zext i1 %1248 to i8
  store i8 %1249, i8* %.pre-phi31, align 1, !tbaa !2449
  %1250 = sext i32 %1228 to i64
  store i64 %1250, i64* %RCX, align 8, !tbaa !2428
  %1251 = shl nsw i64 %1250, 2
  %1252 = add i64 %1251, %1223
  %1253 = add i64 %3440, 276
  store i64 %1253, i64* %PC, align 8
  %1254 = inttoptr i64 %1252 to i32*
  %1255 = load i32, i32* %1254, align 4
  store i32 %1255, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1256 = load i64, i64* %RBP, align 8
  %1257 = add i64 %1256, -40
  %1258 = add i64 %3440, 280
  store i64 %1258, i64* %PC, align 8
  %1259 = inttoptr i64 %1257 to i64*
  %1260 = load i64, i64* %1259, align 8
  store i64 %1260, i64* %RAX, align 8, !tbaa !2428
  %1261 = add i64 %1256, -24
  %1262 = add i64 %3440, 283
  store i64 %1262, i64* %PC, align 8
  %1263 = inttoptr i64 %1261 to i32*
  %1264 = load i32, i32* %1263, align 4
  %1265 = zext i32 %1264 to i64
  store i64 %1265, i64* %RDX, align 8, !tbaa !2428
  %1266 = add i64 %1256, -44
  %1267 = add i64 %3440, 286
  store i64 %1267, i64* %PC, align 8
  %1268 = inttoptr i64 %1266 to i32*
  %1269 = load i32, i32* %1268, align 4
  %1270 = add i32 %1269, -10
  %1271 = zext i32 %1270 to i64
  store i64 %1271, i64* %RSI, align 8, !tbaa !2428
  %1272 = sext i32 %1264 to i64
  %1273 = sext i32 %1270 to i64
  %1274 = mul nsw i64 %1273, %1272
  %1275 = trunc i64 %1274 to i32
  %1276 = and i64 %1274, 4294967295
  store i64 %1276, i64* %RDX, align 8, !tbaa !2428
  %1277 = shl i64 %1274, 32
  %1278 = ashr exact i64 %1277, 32
  %1279 = icmp ne i64 %1278, %1274
  %1280 = zext i1 %1279 to i8
  store i8 %1280, i8* %.pre-phi, align 1, !tbaa !2432
  %1281 = and i32 %1275, 255
  %1282 = tail call i32 @llvm.ctpop.i32(i32 %1281) #8
  %1283 = trunc i32 %1282 to i8
  %1284 = and i8 %1283, 1
  %1285 = xor i8 %1284, 1
  store i8 %1285, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1286 = lshr i32 %1275, 31
  %1287 = trunc i32 %1286 to i8
  store i8 %1287, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1280, i8* %.pre-phi31, align 1, !tbaa !2449
  %1288 = add i64 %1256, -48
  %1289 = add i64 %3440, 295
  store i64 %1289, i64* %PC, align 8
  %1290 = inttoptr i64 %1288 to i32*
  %1291 = load i32, i32* %1290, align 4
  %1292 = add i32 %1291, %1275
  %1293 = zext i32 %1292 to i64
  store i64 %1293, i64* %RDX, align 8, !tbaa !2428
  %1294 = icmp ult i32 %1292, %1275
  %1295 = icmp ult i32 %1292, %1291
  %1296 = or i1 %1294, %1295
  %1297 = zext i1 %1296 to i8
  store i8 %1297, i8* %.pre-phi, align 1, !tbaa !2432
  %1298 = and i32 %1292, 255
  %1299 = tail call i32 @llvm.ctpop.i32(i32 %1298) #8
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  store i8 %1302, i8* %.pre-phi23, align 1, !tbaa !2446
  %1303 = xor i32 %1291, %1275
  %1304 = xor i32 %1303, %1292
  %1305 = lshr i32 %1304, 4
  %1306 = trunc i32 %1305 to i8
  %1307 = and i8 %1306, 1
  store i8 %1307, i8* %.pre-phi25, align 1, !tbaa !2450
  %1308 = icmp eq i32 %1292, 0
  %1309 = zext i1 %1308 to i8
  store i8 %1309, i8* %.pre-phi27, align 1, !tbaa !2447
  %1310 = lshr i32 %1292, 31
  %1311 = trunc i32 %1310 to i8
  store i8 %1311, i8* %.pre-phi29, align 1, !tbaa !2448
  %1312 = lshr i32 %1291, 31
  %1313 = xor i32 %1310, %1286
  %1314 = xor i32 %1310, %1312
  %1315 = add nuw nsw i32 %1313, %1314
  %1316 = icmp eq i32 %1315, 2
  %1317 = zext i1 %1316 to i8
  store i8 %1317, i8* %.pre-phi31, align 1, !tbaa !2449
  %1318 = sext i32 %1292 to i64
  store i64 %1318, i64* %RCX, align 8, !tbaa !2428
  %1319 = load i64, i64* %RAX, align 8
  %1320 = shl nsw i64 %1318, 2
  %1321 = add i64 %1320, %1319
  %1322 = add i64 %3440, 303
  store i64 %1322, i64* %PC, align 8
  %1323 = load <2 x float>, <2 x float>* %4935, align 1
  %1324 = load <2 x i32>, <2 x i32>* %4936, align 1
  %1325 = inttoptr i64 %1321 to float*
  %1326 = load float, float* %1325, align 4
  %1327 = extractelement <2 x float> %1323, i32 0
  %1328 = fmul float %1327, %1326
  store float %1328, float* %4928, align 1, !tbaa !2452
  %1329 = bitcast <2 x float> %1323 to <2 x i32>
  %1330 = extractelement <2 x i32> %1329, i32 1
  store i32 %1330, i32* %4937, align 1, !tbaa !2452
  %1331 = extractelement <2 x i32> %1324, i32 0
  store i32 %1331, i32* %4938, align 1, !tbaa !2452
  %1332 = extractelement <2 x i32> %1324, i32 1
  store i32 %1332, i32* %4939, align 1, !tbaa !2452
  %1333 = load <2 x float>, <2 x float>* %4940, align 1
  %1334 = load <2 x i32>, <2 x i32>* %4941, align 1
  %1335 = load <2 x float>, <2 x float>* %4935, align 1
  %1336 = extractelement <2 x float> %1333, i32 0
  %1337 = extractelement <2 x float> %1335, i32 0
  %1338 = fadd float %1336, %1337
  store float %1338, float* %4920, align 1, !tbaa !2452
  %1339 = bitcast <2 x float> %1333 to <2 x i32>
  %1340 = extractelement <2 x i32> %1339, i32 1
  store i32 %1340, i32* %4942, align 1, !tbaa !2452
  %1341 = extractelement <2 x i32> %1334, i32 0
  store i32 %1341, i32* %4943, align 1, !tbaa !2452
  %1342 = extractelement <2 x i32> %1334, i32 1
  store i32 %1342, i32* %4944, align 1, !tbaa !2452
  %1343 = load i64, i64* %RBP, align 8
  %1344 = add i64 %1343, -32
  %1345 = add i64 %3440, 311
  store i64 %1345, i64* %PC, align 8
  %1346 = inttoptr i64 %1344 to i64*
  %1347 = load i64, i64* %1346, align 8
  store i64 %1347, i64* %RAX, align 8, !tbaa !2428
  %1348 = add i64 %1343, -44
  %1349 = add i64 %3440, 314
  store i64 %1349, i64* %PC, align 8
  %1350 = inttoptr i64 %1348 to i32*
  %1351 = load i32, i32* %1350, align 4
  %1352 = add i32 %1351, -9
  %1353 = zext i32 %1352 to i64
  store i64 %1353, i64* %RDX, align 8, !tbaa !2428
  %1354 = icmp ult i32 %1351, 9
  %1355 = zext i1 %1354 to i8
  store i8 %1355, i8* %.pre-phi, align 1, !tbaa !2432
  %1356 = and i32 %1352, 255
  %1357 = tail call i32 @llvm.ctpop.i32(i32 %1356) #8
  %1358 = trunc i32 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = xor i8 %1359, 1
  store i8 %1360, i8* %.pre-phi23, align 1, !tbaa !2446
  %1361 = xor i32 %1351, %1352
  %1362 = lshr i32 %1361, 4
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  store i8 %1364, i8* %.pre-phi25, align 1, !tbaa !2450
  %1365 = icmp eq i32 %1352, 0
  %1366 = zext i1 %1365 to i8
  store i8 %1366, i8* %.pre-phi27, align 1, !tbaa !2447
  %1367 = lshr i32 %1352, 31
  %1368 = trunc i32 %1367 to i8
  store i8 %1368, i8* %.pre-phi29, align 1, !tbaa !2448
  %1369 = lshr i32 %1351, 31
  %1370 = xor i32 %1367, %1369
  %1371 = add nuw nsw i32 %1370, %1369
  %1372 = icmp eq i32 %1371, 2
  %1373 = zext i1 %1372 to i8
  store i8 %1373, i8* %.pre-phi31, align 1, !tbaa !2449
  %1374 = sext i32 %1352 to i64
  store i64 %1374, i64* %RCX, align 8, !tbaa !2428
  %1375 = shl nsw i64 %1374, 2
  %1376 = add i64 %1375, %1347
  %1377 = add i64 %3440, 325
  store i64 %1377, i64* %PC, align 8
  %1378 = inttoptr i64 %1376 to i32*
  %1379 = load i32, i32* %1378, align 4
  store i32 %1379, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1380 = add i64 %1343, -40
  %1381 = add i64 %3440, 329
  store i64 %1381, i64* %PC, align 8
  %1382 = inttoptr i64 %1380 to i64*
  %1383 = load i64, i64* %1382, align 8
  store i64 %1383, i64* %RAX, align 8, !tbaa !2428
  %1384 = add i64 %1343, -24
  %1385 = add i64 %3440, 332
  store i64 %1385, i64* %PC, align 8
  %1386 = inttoptr i64 %1384 to i32*
  %1387 = load i32, i32* %1386, align 4
  %1388 = zext i32 %1387 to i64
  store i64 %1388, i64* %RDX, align 8, !tbaa !2428
  %1389 = add i64 %3440, 335
  store i64 %1389, i64* %PC, align 8
  %1390 = load i32, i32* %1350, align 4
  %1391 = add i32 %1390, -9
  %1392 = zext i32 %1391 to i64
  store i64 %1392, i64* %RSI, align 8, !tbaa !2428
  %1393 = sext i32 %1387 to i64
  %1394 = sext i32 %1391 to i64
  %1395 = mul nsw i64 %1394, %1393
  %1396 = trunc i64 %1395 to i32
  %1397 = and i64 %1395, 4294967295
  store i64 %1397, i64* %RDX, align 8, !tbaa !2428
  %1398 = shl i64 %1395, 32
  %1399 = ashr exact i64 %1398, 32
  %1400 = icmp ne i64 %1399, %1395
  %1401 = zext i1 %1400 to i8
  store i8 %1401, i8* %.pre-phi, align 1, !tbaa !2432
  %1402 = and i32 %1396, 255
  %1403 = tail call i32 @llvm.ctpop.i32(i32 %1402) #8
  %1404 = trunc i32 %1403 to i8
  %1405 = and i8 %1404, 1
  %1406 = xor i8 %1405, 1
  store i8 %1406, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1407 = lshr i32 %1396, 31
  %1408 = trunc i32 %1407 to i8
  store i8 %1408, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1401, i8* %.pre-phi31, align 1, !tbaa !2449
  %1409 = load i64, i64* %RBP, align 8
  %1410 = add i64 %1409, -48
  %1411 = add i64 %3440, 344
  store i64 %1411, i64* %PC, align 8
  %1412 = inttoptr i64 %1410 to i32*
  %1413 = load i32, i32* %1412, align 4
  %1414 = add i32 %1413, %1396
  %1415 = zext i32 %1414 to i64
  store i64 %1415, i64* %RDX, align 8, !tbaa !2428
  %1416 = icmp ult i32 %1414, %1396
  %1417 = icmp ult i32 %1414, %1413
  %1418 = or i1 %1416, %1417
  %1419 = zext i1 %1418 to i8
  store i8 %1419, i8* %.pre-phi, align 1, !tbaa !2432
  %1420 = and i32 %1414, 255
  %1421 = tail call i32 @llvm.ctpop.i32(i32 %1420) #8
  %1422 = trunc i32 %1421 to i8
  %1423 = and i8 %1422, 1
  %1424 = xor i8 %1423, 1
  store i8 %1424, i8* %.pre-phi23, align 1, !tbaa !2446
  %1425 = xor i32 %1413, %1396
  %1426 = xor i32 %1425, %1414
  %1427 = lshr i32 %1426, 4
  %1428 = trunc i32 %1427 to i8
  %1429 = and i8 %1428, 1
  store i8 %1429, i8* %.pre-phi25, align 1, !tbaa !2450
  %1430 = icmp eq i32 %1414, 0
  %1431 = zext i1 %1430 to i8
  store i8 %1431, i8* %.pre-phi27, align 1, !tbaa !2447
  %1432 = lshr i32 %1414, 31
  %1433 = trunc i32 %1432 to i8
  store i8 %1433, i8* %.pre-phi29, align 1, !tbaa !2448
  %1434 = lshr i32 %1413, 31
  %1435 = xor i32 %1432, %1407
  %1436 = xor i32 %1432, %1434
  %1437 = add nuw nsw i32 %1435, %1436
  %1438 = icmp eq i32 %1437, 2
  %1439 = zext i1 %1438 to i8
  store i8 %1439, i8* %.pre-phi31, align 1, !tbaa !2449
  %1440 = sext i32 %1414 to i64
  store i64 %1440, i64* %RCX, align 8, !tbaa !2428
  %1441 = load i64, i64* %RAX, align 8
  %1442 = shl nsw i64 %1440, 2
  %1443 = add i64 %1442, %1441
  %1444 = add i64 %3440, 352
  store i64 %1444, i64* %PC, align 8
  %1445 = load <2 x float>, <2 x float>* %4935, align 1
  %1446 = load <2 x i32>, <2 x i32>* %4936, align 1
  %1447 = inttoptr i64 %1443 to float*
  %1448 = load float, float* %1447, align 4
  %1449 = extractelement <2 x float> %1445, i32 0
  %1450 = fmul float %1449, %1448
  store float %1450, float* %4928, align 1, !tbaa !2452
  %1451 = bitcast <2 x float> %1445 to <2 x i32>
  %1452 = extractelement <2 x i32> %1451, i32 1
  store i32 %1452, i32* %4937, align 1, !tbaa !2452
  %1453 = extractelement <2 x i32> %1446, i32 0
  store i32 %1453, i32* %4938, align 1, !tbaa !2452
  %1454 = extractelement <2 x i32> %1446, i32 1
  store i32 %1454, i32* %4939, align 1, !tbaa !2452
  %1455 = load <2 x float>, <2 x float>* %4940, align 1
  %1456 = load <2 x i32>, <2 x i32>* %4941, align 1
  %1457 = load <2 x float>, <2 x float>* %4935, align 1
  %1458 = extractelement <2 x float> %1455, i32 0
  %1459 = extractelement <2 x float> %1457, i32 0
  %1460 = fadd float %1458, %1459
  store float %1460, float* %4920, align 1, !tbaa !2452
  %1461 = bitcast <2 x float> %1455 to <2 x i32>
  %1462 = extractelement <2 x i32> %1461, i32 1
  store i32 %1462, i32* %4942, align 1, !tbaa !2452
  %1463 = extractelement <2 x i32> %1456, i32 0
  store i32 %1463, i32* %4943, align 1, !tbaa !2452
  %1464 = extractelement <2 x i32> %1456, i32 1
  store i32 %1464, i32* %4944, align 1, !tbaa !2452
  %1465 = add i64 %1409, -32
  %1466 = add i64 %3440, 360
  store i64 %1466, i64* %PC, align 8
  %1467 = inttoptr i64 %1465 to i64*
  %1468 = load i64, i64* %1467, align 8
  store i64 %1468, i64* %RAX, align 8, !tbaa !2428
  %1469 = add i64 %1409, -44
  %1470 = add i64 %3440, 363
  store i64 %1470, i64* %PC, align 8
  %1471 = inttoptr i64 %1469 to i32*
  %1472 = load i32, i32* %1471, align 4
  %1473 = add i32 %1472, -8
  %1474 = zext i32 %1473 to i64
  store i64 %1474, i64* %RDX, align 8, !tbaa !2428
  %1475 = icmp ult i32 %1472, 8
  %1476 = zext i1 %1475 to i8
  store i8 %1476, i8* %.pre-phi, align 1, !tbaa !2432
  %1477 = and i32 %1473, 255
  %1478 = tail call i32 @llvm.ctpop.i32(i32 %1477) #8
  %1479 = trunc i32 %1478 to i8
  %1480 = and i8 %1479, 1
  %1481 = xor i8 %1480, 1
  store i8 %1481, i8* %.pre-phi23, align 1, !tbaa !2446
  %1482 = xor i32 %1472, %1473
  %1483 = lshr i32 %1482, 4
  %1484 = trunc i32 %1483 to i8
  %1485 = and i8 %1484, 1
  store i8 %1485, i8* %.pre-phi25, align 1, !tbaa !2450
  %1486 = icmp eq i32 %1473, 0
  %1487 = zext i1 %1486 to i8
  store i8 %1487, i8* %.pre-phi27, align 1, !tbaa !2447
  %1488 = lshr i32 %1473, 31
  %1489 = trunc i32 %1488 to i8
  store i8 %1489, i8* %.pre-phi29, align 1, !tbaa !2448
  %1490 = lshr i32 %1472, 31
  %1491 = xor i32 %1488, %1490
  %1492 = add nuw nsw i32 %1491, %1490
  %1493 = icmp eq i32 %1492, 2
  %1494 = zext i1 %1493 to i8
  store i8 %1494, i8* %.pre-phi31, align 1, !tbaa !2449
  %1495 = sext i32 %1473 to i64
  store i64 %1495, i64* %RCX, align 8, !tbaa !2428
  %1496 = shl nsw i64 %1495, 2
  %1497 = add i64 %1496, %1468
  %1498 = add i64 %3440, 374
  store i64 %1498, i64* %PC, align 8
  %1499 = inttoptr i64 %1497 to i32*
  %1500 = load i32, i32* %1499, align 4
  store i32 %1500, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1501 = load i64, i64* %RBP, align 8
  %1502 = add i64 %1501, -40
  %1503 = add i64 %3440, 378
  store i64 %1503, i64* %PC, align 8
  %1504 = inttoptr i64 %1502 to i64*
  %1505 = load i64, i64* %1504, align 8
  store i64 %1505, i64* %RAX, align 8, !tbaa !2428
  %1506 = add i64 %1501, -24
  %1507 = add i64 %3440, 381
  store i64 %1507, i64* %PC, align 8
  %1508 = inttoptr i64 %1506 to i32*
  %1509 = load i32, i32* %1508, align 4
  %1510 = zext i32 %1509 to i64
  store i64 %1510, i64* %RDX, align 8, !tbaa !2428
  %1511 = add i64 %1501, -44
  %1512 = add i64 %3440, 384
  store i64 %1512, i64* %PC, align 8
  %1513 = inttoptr i64 %1511 to i32*
  %1514 = load i32, i32* %1513, align 4
  %1515 = add i32 %1514, -8
  %1516 = zext i32 %1515 to i64
  store i64 %1516, i64* %RSI, align 8, !tbaa !2428
  %1517 = sext i32 %1509 to i64
  %1518 = sext i32 %1515 to i64
  %1519 = mul nsw i64 %1518, %1517
  %1520 = trunc i64 %1519 to i32
  %1521 = and i64 %1519, 4294967295
  store i64 %1521, i64* %RDX, align 8, !tbaa !2428
  %1522 = shl i64 %1519, 32
  %1523 = ashr exact i64 %1522, 32
  %1524 = icmp ne i64 %1523, %1519
  %1525 = zext i1 %1524 to i8
  store i8 %1525, i8* %.pre-phi, align 1, !tbaa !2432
  %1526 = and i32 %1520, 255
  %1527 = tail call i32 @llvm.ctpop.i32(i32 %1526) #8
  %1528 = trunc i32 %1527 to i8
  %1529 = and i8 %1528, 1
  %1530 = xor i8 %1529, 1
  store i8 %1530, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1531 = lshr i32 %1520, 31
  %1532 = trunc i32 %1531 to i8
  store i8 %1532, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1525, i8* %.pre-phi31, align 1, !tbaa !2449
  %1533 = add i64 %1501, -48
  %1534 = add i64 %3440, 393
  store i64 %1534, i64* %PC, align 8
  %1535 = inttoptr i64 %1533 to i32*
  %1536 = load i32, i32* %1535, align 4
  %1537 = add i32 %1536, %1520
  %1538 = zext i32 %1537 to i64
  store i64 %1538, i64* %RDX, align 8, !tbaa !2428
  %1539 = icmp ult i32 %1537, %1520
  %1540 = icmp ult i32 %1537, %1536
  %1541 = or i1 %1539, %1540
  %1542 = zext i1 %1541 to i8
  store i8 %1542, i8* %.pre-phi, align 1, !tbaa !2432
  %1543 = and i32 %1537, 255
  %1544 = tail call i32 @llvm.ctpop.i32(i32 %1543) #8
  %1545 = trunc i32 %1544 to i8
  %1546 = and i8 %1545, 1
  %1547 = xor i8 %1546, 1
  store i8 %1547, i8* %.pre-phi23, align 1, !tbaa !2446
  %1548 = xor i32 %1536, %1520
  %1549 = xor i32 %1548, %1537
  %1550 = lshr i32 %1549, 4
  %1551 = trunc i32 %1550 to i8
  %1552 = and i8 %1551, 1
  store i8 %1552, i8* %.pre-phi25, align 1, !tbaa !2450
  %1553 = icmp eq i32 %1537, 0
  %1554 = zext i1 %1553 to i8
  store i8 %1554, i8* %.pre-phi27, align 1, !tbaa !2447
  %1555 = lshr i32 %1537, 31
  %1556 = trunc i32 %1555 to i8
  store i8 %1556, i8* %.pre-phi29, align 1, !tbaa !2448
  %1557 = lshr i32 %1536, 31
  %1558 = xor i32 %1555, %1531
  %1559 = xor i32 %1555, %1557
  %1560 = add nuw nsw i32 %1558, %1559
  %1561 = icmp eq i32 %1560, 2
  %1562 = zext i1 %1561 to i8
  store i8 %1562, i8* %.pre-phi31, align 1, !tbaa !2449
  %1563 = sext i32 %1537 to i64
  store i64 %1563, i64* %RCX, align 8, !tbaa !2428
  %1564 = load i64, i64* %RAX, align 8
  %1565 = shl nsw i64 %1563, 2
  %1566 = add i64 %1565, %1564
  %1567 = add i64 %3440, 401
  store i64 %1567, i64* %PC, align 8
  %1568 = load <2 x float>, <2 x float>* %4935, align 1
  %1569 = load <2 x i32>, <2 x i32>* %4936, align 1
  %1570 = inttoptr i64 %1566 to float*
  %1571 = load float, float* %1570, align 4
  %1572 = extractelement <2 x float> %1568, i32 0
  %1573 = fmul float %1572, %1571
  store float %1573, float* %4928, align 1, !tbaa !2452
  %1574 = bitcast <2 x float> %1568 to <2 x i32>
  %1575 = extractelement <2 x i32> %1574, i32 1
  store i32 %1575, i32* %4937, align 1, !tbaa !2452
  %1576 = extractelement <2 x i32> %1569, i32 0
  store i32 %1576, i32* %4938, align 1, !tbaa !2452
  %1577 = extractelement <2 x i32> %1569, i32 1
  store i32 %1577, i32* %4939, align 1, !tbaa !2452
  %1578 = load <2 x float>, <2 x float>* %4940, align 1
  %1579 = load <2 x i32>, <2 x i32>* %4941, align 1
  %1580 = load <2 x float>, <2 x float>* %4935, align 1
  %1581 = extractelement <2 x float> %1578, i32 0
  %1582 = extractelement <2 x float> %1580, i32 0
  %1583 = fadd float %1581, %1582
  store float %1583, float* %4920, align 1, !tbaa !2452
  %1584 = bitcast <2 x float> %1578 to <2 x i32>
  %1585 = extractelement <2 x i32> %1584, i32 1
  store i32 %1585, i32* %4942, align 1, !tbaa !2452
  %1586 = extractelement <2 x i32> %1579, i32 0
  store i32 %1586, i32* %4943, align 1, !tbaa !2452
  %1587 = extractelement <2 x i32> %1579, i32 1
  store i32 %1587, i32* %4944, align 1, !tbaa !2452
  %1588 = load i64, i64* %RBP, align 8
  %1589 = add i64 %1588, -32
  %1590 = add i64 %3440, 409
  store i64 %1590, i64* %PC, align 8
  %1591 = inttoptr i64 %1589 to i64*
  %1592 = load i64, i64* %1591, align 8
  store i64 %1592, i64* %RAX, align 8, !tbaa !2428
  %1593 = add i64 %1588, -44
  %1594 = add i64 %3440, 412
  store i64 %1594, i64* %PC, align 8
  %1595 = inttoptr i64 %1593 to i32*
  %1596 = load i32, i32* %1595, align 4
  %1597 = add i32 %1596, -7
  %1598 = zext i32 %1597 to i64
  store i64 %1598, i64* %RDX, align 8, !tbaa !2428
  %1599 = icmp ult i32 %1596, 7
  %1600 = zext i1 %1599 to i8
  store i8 %1600, i8* %.pre-phi, align 1, !tbaa !2432
  %1601 = and i32 %1597, 255
  %1602 = tail call i32 @llvm.ctpop.i32(i32 %1601) #8
  %1603 = trunc i32 %1602 to i8
  %1604 = and i8 %1603, 1
  %1605 = xor i8 %1604, 1
  store i8 %1605, i8* %.pre-phi23, align 1, !tbaa !2446
  %1606 = xor i32 %1596, %1597
  %1607 = lshr i32 %1606, 4
  %1608 = trunc i32 %1607 to i8
  %1609 = and i8 %1608, 1
  store i8 %1609, i8* %.pre-phi25, align 1, !tbaa !2450
  %1610 = icmp eq i32 %1597, 0
  %1611 = zext i1 %1610 to i8
  store i8 %1611, i8* %.pre-phi27, align 1, !tbaa !2447
  %1612 = lshr i32 %1597, 31
  %1613 = trunc i32 %1612 to i8
  store i8 %1613, i8* %.pre-phi29, align 1, !tbaa !2448
  %1614 = lshr i32 %1596, 31
  %1615 = xor i32 %1612, %1614
  %1616 = add nuw nsw i32 %1615, %1614
  %1617 = icmp eq i32 %1616, 2
  %1618 = zext i1 %1617 to i8
  store i8 %1618, i8* %.pre-phi31, align 1, !tbaa !2449
  %1619 = sext i32 %1597 to i64
  store i64 %1619, i64* %RCX, align 8, !tbaa !2428
  %1620 = shl nsw i64 %1619, 2
  %1621 = add i64 %1620, %1592
  %1622 = add i64 %3440, 423
  store i64 %1622, i64* %PC, align 8
  %1623 = inttoptr i64 %1621 to i32*
  %1624 = load i32, i32* %1623, align 4
  store i32 %1624, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1625 = add i64 %1588, -40
  %1626 = add i64 %3440, 427
  store i64 %1626, i64* %PC, align 8
  %1627 = inttoptr i64 %1625 to i64*
  %1628 = load i64, i64* %1627, align 8
  store i64 %1628, i64* %RAX, align 8, !tbaa !2428
  %1629 = add i64 %1588, -24
  %1630 = add i64 %3440, 430
  store i64 %1630, i64* %PC, align 8
  %1631 = inttoptr i64 %1629 to i32*
  %1632 = load i32, i32* %1631, align 4
  %1633 = zext i32 %1632 to i64
  store i64 %1633, i64* %RDX, align 8, !tbaa !2428
  %1634 = add i64 %3440, 433
  store i64 %1634, i64* %PC, align 8
  %1635 = load i32, i32* %1595, align 4
  %1636 = add i32 %1635, -7
  %1637 = zext i32 %1636 to i64
  store i64 %1637, i64* %RSI, align 8, !tbaa !2428
  %1638 = sext i32 %1632 to i64
  %1639 = sext i32 %1636 to i64
  %1640 = mul nsw i64 %1639, %1638
  %1641 = trunc i64 %1640 to i32
  %1642 = and i64 %1640, 4294967295
  store i64 %1642, i64* %RDX, align 8, !tbaa !2428
  %1643 = shl i64 %1640, 32
  %1644 = ashr exact i64 %1643, 32
  %1645 = icmp ne i64 %1644, %1640
  %1646 = zext i1 %1645 to i8
  store i8 %1646, i8* %.pre-phi, align 1, !tbaa !2432
  %1647 = and i32 %1641, 255
  %1648 = tail call i32 @llvm.ctpop.i32(i32 %1647) #8
  %1649 = trunc i32 %1648 to i8
  %1650 = and i8 %1649, 1
  %1651 = xor i8 %1650, 1
  store i8 %1651, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1652 = lshr i32 %1641, 31
  %1653 = trunc i32 %1652 to i8
  store i8 %1653, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1646, i8* %.pre-phi31, align 1, !tbaa !2449
  %1654 = load i64, i64* %RBP, align 8
  %1655 = add i64 %1654, -48
  %1656 = add i64 %3440, 442
  store i64 %1656, i64* %PC, align 8
  %1657 = inttoptr i64 %1655 to i32*
  %1658 = load i32, i32* %1657, align 4
  %1659 = add i32 %1658, %1641
  %1660 = zext i32 %1659 to i64
  store i64 %1660, i64* %RDX, align 8, !tbaa !2428
  %1661 = icmp ult i32 %1659, %1641
  %1662 = icmp ult i32 %1659, %1658
  %1663 = or i1 %1661, %1662
  %1664 = zext i1 %1663 to i8
  store i8 %1664, i8* %.pre-phi, align 1, !tbaa !2432
  %1665 = and i32 %1659, 255
  %1666 = tail call i32 @llvm.ctpop.i32(i32 %1665) #8
  %1667 = trunc i32 %1666 to i8
  %1668 = and i8 %1667, 1
  %1669 = xor i8 %1668, 1
  store i8 %1669, i8* %.pre-phi23, align 1, !tbaa !2446
  %1670 = xor i32 %1658, %1641
  %1671 = xor i32 %1670, %1659
  %1672 = lshr i32 %1671, 4
  %1673 = trunc i32 %1672 to i8
  %1674 = and i8 %1673, 1
  store i8 %1674, i8* %.pre-phi25, align 1, !tbaa !2450
  %1675 = icmp eq i32 %1659, 0
  %1676 = zext i1 %1675 to i8
  store i8 %1676, i8* %.pre-phi27, align 1, !tbaa !2447
  %1677 = lshr i32 %1659, 31
  %1678 = trunc i32 %1677 to i8
  store i8 %1678, i8* %.pre-phi29, align 1, !tbaa !2448
  %1679 = lshr i32 %1658, 31
  %1680 = xor i32 %1677, %1652
  %1681 = xor i32 %1677, %1679
  %1682 = add nuw nsw i32 %1680, %1681
  %1683 = icmp eq i32 %1682, 2
  %1684 = zext i1 %1683 to i8
  store i8 %1684, i8* %.pre-phi31, align 1, !tbaa !2449
  %1685 = sext i32 %1659 to i64
  store i64 %1685, i64* %RCX, align 8, !tbaa !2428
  %1686 = load i64, i64* %RAX, align 8
  %1687 = shl nsw i64 %1685, 2
  %1688 = add i64 %1687, %1686
  %1689 = add i64 %3440, 450
  store i64 %1689, i64* %PC, align 8
  %1690 = load <2 x float>, <2 x float>* %4935, align 1
  %1691 = load <2 x i32>, <2 x i32>* %4936, align 1
  %1692 = inttoptr i64 %1688 to float*
  %1693 = load float, float* %1692, align 4
  %1694 = extractelement <2 x float> %1690, i32 0
  %1695 = fmul float %1694, %1693
  store float %1695, float* %4928, align 1, !tbaa !2452
  %1696 = bitcast <2 x float> %1690 to <2 x i32>
  %1697 = extractelement <2 x i32> %1696, i32 1
  store i32 %1697, i32* %4937, align 1, !tbaa !2452
  %1698 = extractelement <2 x i32> %1691, i32 0
  store i32 %1698, i32* %4938, align 1, !tbaa !2452
  %1699 = extractelement <2 x i32> %1691, i32 1
  store i32 %1699, i32* %4939, align 1, !tbaa !2452
  %1700 = load <2 x float>, <2 x float>* %4940, align 1
  %1701 = load <2 x i32>, <2 x i32>* %4941, align 1
  %1702 = load <2 x float>, <2 x float>* %4935, align 1
  %1703 = extractelement <2 x float> %1700, i32 0
  %1704 = extractelement <2 x float> %1702, i32 0
  %1705 = fadd float %1703, %1704
  store float %1705, float* %4920, align 1, !tbaa !2452
  %1706 = bitcast <2 x float> %1700 to <2 x i32>
  %1707 = extractelement <2 x i32> %1706, i32 1
  store i32 %1707, i32* %4942, align 1, !tbaa !2452
  %1708 = extractelement <2 x i32> %1701, i32 0
  store i32 %1708, i32* %4943, align 1, !tbaa !2452
  %1709 = extractelement <2 x i32> %1701, i32 1
  store i32 %1709, i32* %4944, align 1, !tbaa !2452
  %1710 = add i64 %1654, -32
  %1711 = add i64 %3440, 458
  store i64 %1711, i64* %PC, align 8
  %1712 = inttoptr i64 %1710 to i64*
  %1713 = load i64, i64* %1712, align 8
  store i64 %1713, i64* %RAX, align 8, !tbaa !2428
  %1714 = add i64 %1654, -44
  %1715 = add i64 %3440, 461
  store i64 %1715, i64* %PC, align 8
  %1716 = inttoptr i64 %1714 to i32*
  %1717 = load i32, i32* %1716, align 4
  %1718 = add i32 %1717, -6
  %1719 = zext i32 %1718 to i64
  store i64 %1719, i64* %RDX, align 8, !tbaa !2428
  %1720 = icmp ult i32 %1717, 6
  %1721 = zext i1 %1720 to i8
  store i8 %1721, i8* %.pre-phi, align 1, !tbaa !2432
  %1722 = and i32 %1718, 255
  %1723 = tail call i32 @llvm.ctpop.i32(i32 %1722) #8
  %1724 = trunc i32 %1723 to i8
  %1725 = and i8 %1724, 1
  %1726 = xor i8 %1725, 1
  store i8 %1726, i8* %.pre-phi23, align 1, !tbaa !2446
  %1727 = xor i32 %1717, %1718
  %1728 = lshr i32 %1727, 4
  %1729 = trunc i32 %1728 to i8
  %1730 = and i8 %1729, 1
  store i8 %1730, i8* %.pre-phi25, align 1, !tbaa !2450
  %1731 = icmp eq i32 %1718, 0
  %1732 = zext i1 %1731 to i8
  store i8 %1732, i8* %.pre-phi27, align 1, !tbaa !2447
  %1733 = lshr i32 %1718, 31
  %1734 = trunc i32 %1733 to i8
  store i8 %1734, i8* %.pre-phi29, align 1, !tbaa !2448
  %1735 = lshr i32 %1717, 31
  %1736 = xor i32 %1733, %1735
  %1737 = add nuw nsw i32 %1736, %1735
  %1738 = icmp eq i32 %1737, 2
  %1739 = zext i1 %1738 to i8
  store i8 %1739, i8* %.pre-phi31, align 1, !tbaa !2449
  %1740 = sext i32 %1718 to i64
  store i64 %1740, i64* %RCX, align 8, !tbaa !2428
  %1741 = shl nsw i64 %1740, 2
  %1742 = add i64 %1741, %1713
  %1743 = add i64 %3440, 472
  store i64 %1743, i64* %PC, align 8
  %1744 = inttoptr i64 %1742 to i32*
  %1745 = load i32, i32* %1744, align 4
  store i32 %1745, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1746 = load i64, i64* %RBP, align 8
  %1747 = add i64 %1746, -40
  %1748 = add i64 %3440, 476
  store i64 %1748, i64* %PC, align 8
  %1749 = inttoptr i64 %1747 to i64*
  %1750 = load i64, i64* %1749, align 8
  store i64 %1750, i64* %RAX, align 8, !tbaa !2428
  %1751 = add i64 %1746, -24
  %1752 = add i64 %3440, 479
  store i64 %1752, i64* %PC, align 8
  %1753 = inttoptr i64 %1751 to i32*
  %1754 = load i32, i32* %1753, align 4
  %1755 = zext i32 %1754 to i64
  store i64 %1755, i64* %RDX, align 8, !tbaa !2428
  %1756 = add i64 %1746, -44
  %1757 = add i64 %3440, 482
  store i64 %1757, i64* %PC, align 8
  %1758 = inttoptr i64 %1756 to i32*
  %1759 = load i32, i32* %1758, align 4
  %1760 = add i32 %1759, -6
  %1761 = zext i32 %1760 to i64
  store i64 %1761, i64* %RSI, align 8, !tbaa !2428
  %1762 = sext i32 %1754 to i64
  %1763 = sext i32 %1760 to i64
  %1764 = mul nsw i64 %1763, %1762
  %1765 = trunc i64 %1764 to i32
  %1766 = and i64 %1764, 4294967295
  store i64 %1766, i64* %RDX, align 8, !tbaa !2428
  %1767 = shl i64 %1764, 32
  %1768 = ashr exact i64 %1767, 32
  %1769 = icmp ne i64 %1768, %1764
  %1770 = zext i1 %1769 to i8
  store i8 %1770, i8* %.pre-phi, align 1, !tbaa !2432
  %1771 = and i32 %1765, 255
  %1772 = tail call i32 @llvm.ctpop.i32(i32 %1771) #8
  %1773 = trunc i32 %1772 to i8
  %1774 = and i8 %1773, 1
  %1775 = xor i8 %1774, 1
  store i8 %1775, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1776 = lshr i32 %1765, 31
  %1777 = trunc i32 %1776 to i8
  store i8 %1777, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1770, i8* %.pre-phi31, align 1, !tbaa !2449
  %1778 = add i64 %1746, -48
  %1779 = add i64 %3440, 491
  store i64 %1779, i64* %PC, align 8
  %1780 = inttoptr i64 %1778 to i32*
  %1781 = load i32, i32* %1780, align 4
  %1782 = add i32 %1781, %1765
  %1783 = zext i32 %1782 to i64
  store i64 %1783, i64* %RDX, align 8, !tbaa !2428
  %1784 = icmp ult i32 %1782, %1765
  %1785 = icmp ult i32 %1782, %1781
  %1786 = or i1 %1784, %1785
  %1787 = zext i1 %1786 to i8
  store i8 %1787, i8* %.pre-phi, align 1, !tbaa !2432
  %1788 = and i32 %1782, 255
  %1789 = tail call i32 @llvm.ctpop.i32(i32 %1788) #8
  %1790 = trunc i32 %1789 to i8
  %1791 = and i8 %1790, 1
  %1792 = xor i8 %1791, 1
  store i8 %1792, i8* %.pre-phi23, align 1, !tbaa !2446
  %1793 = xor i32 %1781, %1765
  %1794 = xor i32 %1793, %1782
  %1795 = lshr i32 %1794, 4
  %1796 = trunc i32 %1795 to i8
  %1797 = and i8 %1796, 1
  store i8 %1797, i8* %.pre-phi25, align 1, !tbaa !2450
  %1798 = icmp eq i32 %1782, 0
  %1799 = zext i1 %1798 to i8
  store i8 %1799, i8* %.pre-phi27, align 1, !tbaa !2447
  %1800 = lshr i32 %1782, 31
  %1801 = trunc i32 %1800 to i8
  store i8 %1801, i8* %.pre-phi29, align 1, !tbaa !2448
  %1802 = lshr i32 %1781, 31
  %1803 = xor i32 %1800, %1776
  %1804 = xor i32 %1800, %1802
  %1805 = add nuw nsw i32 %1803, %1804
  %1806 = icmp eq i32 %1805, 2
  %1807 = zext i1 %1806 to i8
  store i8 %1807, i8* %.pre-phi31, align 1, !tbaa !2449
  %1808 = sext i32 %1782 to i64
  store i64 %1808, i64* %RCX, align 8, !tbaa !2428
  %1809 = load i64, i64* %RAX, align 8
  %1810 = shl nsw i64 %1808, 2
  %1811 = add i64 %1810, %1809
  %1812 = add i64 %3440, 499
  store i64 %1812, i64* %PC, align 8
  %1813 = load <2 x float>, <2 x float>* %4935, align 1
  %1814 = load <2 x i32>, <2 x i32>* %4936, align 1
  %1815 = inttoptr i64 %1811 to float*
  %1816 = load float, float* %1815, align 4
  %1817 = extractelement <2 x float> %1813, i32 0
  %1818 = fmul float %1817, %1816
  store float %1818, float* %4928, align 1, !tbaa !2452
  %1819 = bitcast <2 x float> %1813 to <2 x i32>
  %1820 = extractelement <2 x i32> %1819, i32 1
  store i32 %1820, i32* %4937, align 1, !tbaa !2452
  %1821 = extractelement <2 x i32> %1814, i32 0
  store i32 %1821, i32* %4938, align 1, !tbaa !2452
  %1822 = extractelement <2 x i32> %1814, i32 1
  store i32 %1822, i32* %4939, align 1, !tbaa !2452
  %1823 = load <2 x float>, <2 x float>* %4940, align 1
  %1824 = load <2 x i32>, <2 x i32>* %4941, align 1
  %1825 = load <2 x float>, <2 x float>* %4935, align 1
  %1826 = extractelement <2 x float> %1823, i32 0
  %1827 = extractelement <2 x float> %1825, i32 0
  %1828 = fadd float %1826, %1827
  store float %1828, float* %4920, align 1, !tbaa !2452
  %1829 = bitcast <2 x float> %1823 to <2 x i32>
  %1830 = extractelement <2 x i32> %1829, i32 1
  store i32 %1830, i32* %4942, align 1, !tbaa !2452
  %1831 = extractelement <2 x i32> %1824, i32 0
  store i32 %1831, i32* %4943, align 1, !tbaa !2452
  %1832 = extractelement <2 x i32> %1824, i32 1
  store i32 %1832, i32* %4944, align 1, !tbaa !2452
  %1833 = load i64, i64* %RBP, align 8
  %1834 = add i64 %1833, -32
  %1835 = add i64 %3440, 507
  store i64 %1835, i64* %PC, align 8
  %1836 = inttoptr i64 %1834 to i64*
  %1837 = load i64, i64* %1836, align 8
  store i64 %1837, i64* %RAX, align 8, !tbaa !2428
  %1838 = add i64 %1833, -44
  %1839 = add i64 %3440, 510
  store i64 %1839, i64* %PC, align 8
  %1840 = inttoptr i64 %1838 to i32*
  %1841 = load i32, i32* %1840, align 4
  %1842 = add i32 %1841, -5
  %1843 = zext i32 %1842 to i64
  store i64 %1843, i64* %RDX, align 8, !tbaa !2428
  %1844 = icmp ult i32 %1841, 5
  %1845 = zext i1 %1844 to i8
  store i8 %1845, i8* %.pre-phi, align 1, !tbaa !2432
  %1846 = and i32 %1842, 255
  %1847 = tail call i32 @llvm.ctpop.i32(i32 %1846) #8
  %1848 = trunc i32 %1847 to i8
  %1849 = and i8 %1848, 1
  %1850 = xor i8 %1849, 1
  store i8 %1850, i8* %.pre-phi23, align 1, !tbaa !2446
  %1851 = xor i32 %1841, %1842
  %1852 = lshr i32 %1851, 4
  %1853 = trunc i32 %1852 to i8
  %1854 = and i8 %1853, 1
  store i8 %1854, i8* %.pre-phi25, align 1, !tbaa !2450
  %1855 = icmp eq i32 %1842, 0
  %1856 = zext i1 %1855 to i8
  store i8 %1856, i8* %.pre-phi27, align 1, !tbaa !2447
  %1857 = lshr i32 %1842, 31
  %1858 = trunc i32 %1857 to i8
  store i8 %1858, i8* %.pre-phi29, align 1, !tbaa !2448
  %1859 = lshr i32 %1841, 31
  %1860 = xor i32 %1857, %1859
  %1861 = add nuw nsw i32 %1860, %1859
  %1862 = icmp eq i32 %1861, 2
  %1863 = zext i1 %1862 to i8
  store i8 %1863, i8* %.pre-phi31, align 1, !tbaa !2449
  %1864 = sext i32 %1842 to i64
  store i64 %1864, i64* %RCX, align 8, !tbaa !2428
  %1865 = shl nsw i64 %1864, 2
  %1866 = add i64 %1865, %1837
  %1867 = add i64 %3440, 521
  store i64 %1867, i64* %PC, align 8
  %1868 = inttoptr i64 %1866 to i32*
  %1869 = load i32, i32* %1868, align 4
  store i32 %1869, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1870 = add i64 %1833, -40
  %1871 = add i64 %3440, 525
  store i64 %1871, i64* %PC, align 8
  %1872 = inttoptr i64 %1870 to i64*
  %1873 = load i64, i64* %1872, align 8
  store i64 %1873, i64* %RAX, align 8, !tbaa !2428
  %1874 = add i64 %1833, -24
  %1875 = add i64 %3440, 528
  store i64 %1875, i64* %PC, align 8
  %1876 = inttoptr i64 %1874 to i32*
  %1877 = load i32, i32* %1876, align 4
  %1878 = zext i32 %1877 to i64
  store i64 %1878, i64* %RDX, align 8, !tbaa !2428
  %1879 = add i64 %3440, 531
  store i64 %1879, i64* %PC, align 8
  %1880 = load i32, i32* %1840, align 4
  %1881 = add i32 %1880, -5
  %1882 = zext i32 %1881 to i64
  store i64 %1882, i64* %RSI, align 8, !tbaa !2428
  %1883 = sext i32 %1877 to i64
  %1884 = sext i32 %1881 to i64
  %1885 = mul nsw i64 %1884, %1883
  %1886 = trunc i64 %1885 to i32
  %1887 = and i64 %1885, 4294967295
  store i64 %1887, i64* %RDX, align 8, !tbaa !2428
  %1888 = shl i64 %1885, 32
  %1889 = ashr exact i64 %1888, 32
  %1890 = icmp ne i64 %1889, %1885
  %1891 = zext i1 %1890 to i8
  store i8 %1891, i8* %.pre-phi, align 1, !tbaa !2432
  %1892 = and i32 %1886, 255
  %1893 = tail call i32 @llvm.ctpop.i32(i32 %1892) #8
  %1894 = trunc i32 %1893 to i8
  %1895 = and i8 %1894, 1
  %1896 = xor i8 %1895, 1
  store i8 %1896, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %1897 = lshr i32 %1886, 31
  %1898 = trunc i32 %1897 to i8
  store i8 %1898, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %1891, i8* %.pre-phi31, align 1, !tbaa !2449
  %1899 = load i64, i64* %RBP, align 8
  %1900 = add i64 %1899, -48
  %1901 = add i64 %3440, 540
  store i64 %1901, i64* %PC, align 8
  %1902 = inttoptr i64 %1900 to i32*
  %1903 = load i32, i32* %1902, align 4
  %1904 = add i32 %1903, %1886
  %1905 = zext i32 %1904 to i64
  store i64 %1905, i64* %RDX, align 8, !tbaa !2428
  %1906 = icmp ult i32 %1904, %1886
  %1907 = icmp ult i32 %1904, %1903
  %1908 = or i1 %1906, %1907
  %1909 = zext i1 %1908 to i8
  store i8 %1909, i8* %.pre-phi, align 1, !tbaa !2432
  %1910 = and i32 %1904, 255
  %1911 = tail call i32 @llvm.ctpop.i32(i32 %1910) #8
  %1912 = trunc i32 %1911 to i8
  %1913 = and i8 %1912, 1
  %1914 = xor i8 %1913, 1
  store i8 %1914, i8* %.pre-phi23, align 1, !tbaa !2446
  %1915 = xor i32 %1903, %1886
  %1916 = xor i32 %1915, %1904
  %1917 = lshr i32 %1916, 4
  %1918 = trunc i32 %1917 to i8
  %1919 = and i8 %1918, 1
  store i8 %1919, i8* %.pre-phi25, align 1, !tbaa !2450
  %1920 = icmp eq i32 %1904, 0
  %1921 = zext i1 %1920 to i8
  store i8 %1921, i8* %.pre-phi27, align 1, !tbaa !2447
  %1922 = lshr i32 %1904, 31
  %1923 = trunc i32 %1922 to i8
  store i8 %1923, i8* %.pre-phi29, align 1, !tbaa !2448
  %1924 = lshr i32 %1903, 31
  %1925 = xor i32 %1922, %1897
  %1926 = xor i32 %1922, %1924
  %1927 = add nuw nsw i32 %1925, %1926
  %1928 = icmp eq i32 %1927, 2
  %1929 = zext i1 %1928 to i8
  store i8 %1929, i8* %.pre-phi31, align 1, !tbaa !2449
  %1930 = sext i32 %1904 to i64
  store i64 %1930, i64* %RCX, align 8, !tbaa !2428
  %1931 = load i64, i64* %RAX, align 8
  %1932 = shl nsw i64 %1930, 2
  %1933 = add i64 %1932, %1931
  %1934 = add i64 %3440, 548
  store i64 %1934, i64* %PC, align 8
  %1935 = load <2 x float>, <2 x float>* %4935, align 1
  %1936 = load <2 x i32>, <2 x i32>* %4936, align 1
  %1937 = inttoptr i64 %1933 to float*
  %1938 = load float, float* %1937, align 4
  %1939 = extractelement <2 x float> %1935, i32 0
  %1940 = fmul float %1939, %1938
  store float %1940, float* %4928, align 1, !tbaa !2452
  %1941 = bitcast <2 x float> %1935 to <2 x i32>
  %1942 = extractelement <2 x i32> %1941, i32 1
  store i32 %1942, i32* %4937, align 1, !tbaa !2452
  %1943 = extractelement <2 x i32> %1936, i32 0
  store i32 %1943, i32* %4938, align 1, !tbaa !2452
  %1944 = extractelement <2 x i32> %1936, i32 1
  store i32 %1944, i32* %4939, align 1, !tbaa !2452
  %1945 = load <2 x float>, <2 x float>* %4940, align 1
  %1946 = load <2 x i32>, <2 x i32>* %4941, align 1
  %1947 = load <2 x float>, <2 x float>* %4935, align 1
  %1948 = extractelement <2 x float> %1945, i32 0
  %1949 = extractelement <2 x float> %1947, i32 0
  %1950 = fadd float %1948, %1949
  store float %1950, float* %4920, align 1, !tbaa !2452
  %1951 = bitcast <2 x float> %1945 to <2 x i32>
  %1952 = extractelement <2 x i32> %1951, i32 1
  store i32 %1952, i32* %4942, align 1, !tbaa !2452
  %1953 = extractelement <2 x i32> %1946, i32 0
  store i32 %1953, i32* %4943, align 1, !tbaa !2452
  %1954 = extractelement <2 x i32> %1946, i32 1
  store i32 %1954, i32* %4944, align 1, !tbaa !2452
  %1955 = add i64 %1899, -32
  %1956 = add i64 %3440, 556
  store i64 %1956, i64* %PC, align 8
  %1957 = inttoptr i64 %1955 to i64*
  %1958 = load i64, i64* %1957, align 8
  store i64 %1958, i64* %RAX, align 8, !tbaa !2428
  %1959 = add i64 %1899, -44
  %1960 = add i64 %3440, 559
  store i64 %1960, i64* %PC, align 8
  %1961 = inttoptr i64 %1959 to i32*
  %1962 = load i32, i32* %1961, align 4
  %1963 = add i32 %1962, -4
  %1964 = zext i32 %1963 to i64
  store i64 %1964, i64* %RDX, align 8, !tbaa !2428
  %1965 = icmp ult i32 %1962, 4
  %1966 = zext i1 %1965 to i8
  store i8 %1966, i8* %.pre-phi, align 1, !tbaa !2432
  %1967 = and i32 %1963, 255
  %1968 = tail call i32 @llvm.ctpop.i32(i32 %1967) #8
  %1969 = trunc i32 %1968 to i8
  %1970 = and i8 %1969, 1
  %1971 = xor i8 %1970, 1
  store i8 %1971, i8* %.pre-phi23, align 1, !tbaa !2446
  %1972 = xor i32 %1962, %1963
  %1973 = lshr i32 %1972, 4
  %1974 = trunc i32 %1973 to i8
  %1975 = and i8 %1974, 1
  store i8 %1975, i8* %.pre-phi25, align 1, !tbaa !2450
  %1976 = icmp eq i32 %1963, 0
  %1977 = zext i1 %1976 to i8
  store i8 %1977, i8* %.pre-phi27, align 1, !tbaa !2447
  %1978 = lshr i32 %1963, 31
  %1979 = trunc i32 %1978 to i8
  store i8 %1979, i8* %.pre-phi29, align 1, !tbaa !2448
  %1980 = lshr i32 %1962, 31
  %1981 = xor i32 %1978, %1980
  %1982 = add nuw nsw i32 %1981, %1980
  %1983 = icmp eq i32 %1982, 2
  %1984 = zext i1 %1983 to i8
  store i8 %1984, i8* %.pre-phi31, align 1, !tbaa !2449
  %1985 = sext i32 %1963 to i64
  store i64 %1985, i64* %RCX, align 8, !tbaa !2428
  %1986 = shl nsw i64 %1985, 2
  %1987 = add i64 %1986, %1958
  %1988 = add i64 %3440, 570
  store i64 %1988, i64* %PC, align 8
  %1989 = inttoptr i64 %1987 to i32*
  %1990 = load i32, i32* %1989, align 4
  store i32 %1990, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %1991 = load i64, i64* %RBP, align 8
  %1992 = add i64 %1991, -40
  %1993 = add i64 %3440, 574
  store i64 %1993, i64* %PC, align 8
  %1994 = inttoptr i64 %1992 to i64*
  %1995 = load i64, i64* %1994, align 8
  store i64 %1995, i64* %RAX, align 8, !tbaa !2428
  %1996 = add i64 %1991, -24
  %1997 = add i64 %3440, 577
  store i64 %1997, i64* %PC, align 8
  %1998 = inttoptr i64 %1996 to i32*
  %1999 = load i32, i32* %1998, align 4
  %2000 = zext i32 %1999 to i64
  store i64 %2000, i64* %RDX, align 8, !tbaa !2428
  %2001 = add i64 %1991, -44
  %2002 = add i64 %3440, 580
  store i64 %2002, i64* %PC, align 8
  %2003 = inttoptr i64 %2001 to i32*
  %2004 = load i32, i32* %2003, align 4
  %2005 = add i32 %2004, -4
  %2006 = zext i32 %2005 to i64
  store i64 %2006, i64* %RSI, align 8, !tbaa !2428
  %2007 = sext i32 %1999 to i64
  %2008 = sext i32 %2005 to i64
  %2009 = mul nsw i64 %2008, %2007
  %2010 = trunc i64 %2009 to i32
  %2011 = and i64 %2009, 4294967295
  store i64 %2011, i64* %RDX, align 8, !tbaa !2428
  %2012 = shl i64 %2009, 32
  %2013 = ashr exact i64 %2012, 32
  %2014 = icmp ne i64 %2013, %2009
  %2015 = zext i1 %2014 to i8
  store i8 %2015, i8* %.pre-phi, align 1, !tbaa !2432
  %2016 = and i32 %2010, 255
  %2017 = tail call i32 @llvm.ctpop.i32(i32 %2016) #8
  %2018 = trunc i32 %2017 to i8
  %2019 = and i8 %2018, 1
  %2020 = xor i8 %2019, 1
  store i8 %2020, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2021 = lshr i32 %2010, 31
  %2022 = trunc i32 %2021 to i8
  store i8 %2022, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2015, i8* %.pre-phi31, align 1, !tbaa !2449
  %2023 = add i64 %1991, -48
  %2024 = add i64 %3440, 589
  store i64 %2024, i64* %PC, align 8
  %2025 = inttoptr i64 %2023 to i32*
  %2026 = load i32, i32* %2025, align 4
  %2027 = add i32 %2026, %2010
  %2028 = zext i32 %2027 to i64
  store i64 %2028, i64* %RDX, align 8, !tbaa !2428
  %2029 = icmp ult i32 %2027, %2010
  %2030 = icmp ult i32 %2027, %2026
  %2031 = or i1 %2029, %2030
  %2032 = zext i1 %2031 to i8
  store i8 %2032, i8* %.pre-phi, align 1, !tbaa !2432
  %2033 = and i32 %2027, 255
  %2034 = tail call i32 @llvm.ctpop.i32(i32 %2033) #8
  %2035 = trunc i32 %2034 to i8
  %2036 = and i8 %2035, 1
  %2037 = xor i8 %2036, 1
  store i8 %2037, i8* %.pre-phi23, align 1, !tbaa !2446
  %2038 = xor i32 %2026, %2010
  %2039 = xor i32 %2038, %2027
  %2040 = lshr i32 %2039, 4
  %2041 = trunc i32 %2040 to i8
  %2042 = and i8 %2041, 1
  store i8 %2042, i8* %.pre-phi25, align 1, !tbaa !2450
  %2043 = icmp eq i32 %2027, 0
  %2044 = zext i1 %2043 to i8
  store i8 %2044, i8* %.pre-phi27, align 1, !tbaa !2447
  %2045 = lshr i32 %2027, 31
  %2046 = trunc i32 %2045 to i8
  store i8 %2046, i8* %.pre-phi29, align 1, !tbaa !2448
  %2047 = lshr i32 %2026, 31
  %2048 = xor i32 %2045, %2021
  %2049 = xor i32 %2045, %2047
  %2050 = add nuw nsw i32 %2048, %2049
  %2051 = icmp eq i32 %2050, 2
  %2052 = zext i1 %2051 to i8
  store i8 %2052, i8* %.pre-phi31, align 1, !tbaa !2449
  %2053 = sext i32 %2027 to i64
  store i64 %2053, i64* %RCX, align 8, !tbaa !2428
  %2054 = load i64, i64* %RAX, align 8
  %2055 = shl nsw i64 %2053, 2
  %2056 = add i64 %2055, %2054
  %2057 = add i64 %3440, 597
  store i64 %2057, i64* %PC, align 8
  %2058 = load <2 x float>, <2 x float>* %4935, align 1
  %2059 = load <2 x i32>, <2 x i32>* %4936, align 1
  %2060 = inttoptr i64 %2056 to float*
  %2061 = load float, float* %2060, align 4
  %2062 = extractelement <2 x float> %2058, i32 0
  %2063 = fmul float %2062, %2061
  store float %2063, float* %4928, align 1, !tbaa !2452
  %2064 = bitcast <2 x float> %2058 to <2 x i32>
  %2065 = extractelement <2 x i32> %2064, i32 1
  store i32 %2065, i32* %4937, align 1, !tbaa !2452
  %2066 = extractelement <2 x i32> %2059, i32 0
  store i32 %2066, i32* %4938, align 1, !tbaa !2452
  %2067 = extractelement <2 x i32> %2059, i32 1
  store i32 %2067, i32* %4939, align 1, !tbaa !2452
  %2068 = load <2 x float>, <2 x float>* %4940, align 1
  %2069 = load <2 x i32>, <2 x i32>* %4941, align 1
  %2070 = load <2 x float>, <2 x float>* %4935, align 1
  %2071 = extractelement <2 x float> %2068, i32 0
  %2072 = extractelement <2 x float> %2070, i32 0
  %2073 = fadd float %2071, %2072
  store float %2073, float* %4920, align 1, !tbaa !2452
  %2074 = bitcast <2 x float> %2068 to <2 x i32>
  %2075 = extractelement <2 x i32> %2074, i32 1
  store i32 %2075, i32* %4942, align 1, !tbaa !2452
  %2076 = extractelement <2 x i32> %2069, i32 0
  store i32 %2076, i32* %4943, align 1, !tbaa !2452
  %2077 = extractelement <2 x i32> %2069, i32 1
  store i32 %2077, i32* %4944, align 1, !tbaa !2452
  %2078 = load i64, i64* %RBP, align 8
  %2079 = add i64 %2078, -32
  %2080 = add i64 %3440, 605
  store i64 %2080, i64* %PC, align 8
  %2081 = inttoptr i64 %2079 to i64*
  %2082 = load i64, i64* %2081, align 8
  store i64 %2082, i64* %RAX, align 8, !tbaa !2428
  %2083 = add i64 %2078, -44
  %2084 = add i64 %3440, 608
  store i64 %2084, i64* %PC, align 8
  %2085 = inttoptr i64 %2083 to i32*
  %2086 = load i32, i32* %2085, align 4
  %2087 = add i32 %2086, -3
  %2088 = zext i32 %2087 to i64
  store i64 %2088, i64* %RDX, align 8, !tbaa !2428
  %2089 = icmp ult i32 %2086, 3
  %2090 = zext i1 %2089 to i8
  store i8 %2090, i8* %.pre-phi, align 1, !tbaa !2432
  %2091 = and i32 %2087, 255
  %2092 = tail call i32 @llvm.ctpop.i32(i32 %2091) #8
  %2093 = trunc i32 %2092 to i8
  %2094 = and i8 %2093, 1
  %2095 = xor i8 %2094, 1
  store i8 %2095, i8* %.pre-phi23, align 1, !tbaa !2446
  %2096 = xor i32 %2086, %2087
  %2097 = lshr i32 %2096, 4
  %2098 = trunc i32 %2097 to i8
  %2099 = and i8 %2098, 1
  store i8 %2099, i8* %.pre-phi25, align 1, !tbaa !2450
  %2100 = icmp eq i32 %2087, 0
  %2101 = zext i1 %2100 to i8
  store i8 %2101, i8* %.pre-phi27, align 1, !tbaa !2447
  %2102 = lshr i32 %2087, 31
  %2103 = trunc i32 %2102 to i8
  store i8 %2103, i8* %.pre-phi29, align 1, !tbaa !2448
  %2104 = lshr i32 %2086, 31
  %2105 = xor i32 %2102, %2104
  %2106 = add nuw nsw i32 %2105, %2104
  %2107 = icmp eq i32 %2106, 2
  %2108 = zext i1 %2107 to i8
  store i8 %2108, i8* %.pre-phi31, align 1, !tbaa !2449
  %2109 = sext i32 %2087 to i64
  store i64 %2109, i64* %RCX, align 8, !tbaa !2428
  %2110 = shl nsw i64 %2109, 2
  %2111 = add i64 %2110, %2082
  %2112 = add i64 %3440, 619
  store i64 %2112, i64* %PC, align 8
  %2113 = inttoptr i64 %2111 to i32*
  %2114 = load i32, i32* %2113, align 4
  store i32 %2114, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %2115 = add i64 %2078, -40
  %2116 = add i64 %3440, 623
  store i64 %2116, i64* %PC, align 8
  %2117 = inttoptr i64 %2115 to i64*
  %2118 = load i64, i64* %2117, align 8
  store i64 %2118, i64* %RAX, align 8, !tbaa !2428
  %2119 = add i64 %2078, -24
  %2120 = add i64 %3440, 626
  store i64 %2120, i64* %PC, align 8
  %2121 = inttoptr i64 %2119 to i32*
  %2122 = load i32, i32* %2121, align 4
  %2123 = zext i32 %2122 to i64
  store i64 %2123, i64* %RDX, align 8, !tbaa !2428
  %2124 = add i64 %3440, 629
  store i64 %2124, i64* %PC, align 8
  %2125 = load i32, i32* %2085, align 4
  %2126 = add i32 %2125, -3
  %2127 = zext i32 %2126 to i64
  store i64 %2127, i64* %RSI, align 8, !tbaa !2428
  %2128 = sext i32 %2122 to i64
  %2129 = sext i32 %2126 to i64
  %2130 = mul nsw i64 %2129, %2128
  %2131 = trunc i64 %2130 to i32
  %2132 = and i64 %2130, 4294967295
  store i64 %2132, i64* %RDX, align 8, !tbaa !2428
  %2133 = shl i64 %2130, 32
  %2134 = ashr exact i64 %2133, 32
  %2135 = icmp ne i64 %2134, %2130
  %2136 = zext i1 %2135 to i8
  store i8 %2136, i8* %.pre-phi, align 1, !tbaa !2432
  %2137 = and i32 %2131, 255
  %2138 = tail call i32 @llvm.ctpop.i32(i32 %2137) #8
  %2139 = trunc i32 %2138 to i8
  %2140 = and i8 %2139, 1
  %2141 = xor i8 %2140, 1
  store i8 %2141, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2142 = lshr i32 %2131, 31
  %2143 = trunc i32 %2142 to i8
  store i8 %2143, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2136, i8* %.pre-phi31, align 1, !tbaa !2449
  %2144 = load i64, i64* %RBP, align 8
  %2145 = add i64 %2144, -48
  %2146 = add i64 %3440, 638
  store i64 %2146, i64* %PC, align 8
  %2147 = inttoptr i64 %2145 to i32*
  %2148 = load i32, i32* %2147, align 4
  %2149 = add i32 %2148, %2131
  %2150 = zext i32 %2149 to i64
  store i64 %2150, i64* %RDX, align 8, !tbaa !2428
  %2151 = icmp ult i32 %2149, %2131
  %2152 = icmp ult i32 %2149, %2148
  %2153 = or i1 %2151, %2152
  %2154 = zext i1 %2153 to i8
  store i8 %2154, i8* %.pre-phi, align 1, !tbaa !2432
  %2155 = and i32 %2149, 255
  %2156 = tail call i32 @llvm.ctpop.i32(i32 %2155) #8
  %2157 = trunc i32 %2156 to i8
  %2158 = and i8 %2157, 1
  %2159 = xor i8 %2158, 1
  store i8 %2159, i8* %.pre-phi23, align 1, !tbaa !2446
  %2160 = xor i32 %2148, %2131
  %2161 = xor i32 %2160, %2149
  %2162 = lshr i32 %2161, 4
  %2163 = trunc i32 %2162 to i8
  %2164 = and i8 %2163, 1
  store i8 %2164, i8* %.pre-phi25, align 1, !tbaa !2450
  %2165 = icmp eq i32 %2149, 0
  %2166 = zext i1 %2165 to i8
  store i8 %2166, i8* %.pre-phi27, align 1, !tbaa !2447
  %2167 = lshr i32 %2149, 31
  %2168 = trunc i32 %2167 to i8
  store i8 %2168, i8* %.pre-phi29, align 1, !tbaa !2448
  %2169 = lshr i32 %2148, 31
  %2170 = xor i32 %2167, %2142
  %2171 = xor i32 %2167, %2169
  %2172 = add nuw nsw i32 %2170, %2171
  %2173 = icmp eq i32 %2172, 2
  %2174 = zext i1 %2173 to i8
  store i8 %2174, i8* %.pre-phi31, align 1, !tbaa !2449
  %2175 = sext i32 %2149 to i64
  store i64 %2175, i64* %RCX, align 8, !tbaa !2428
  %2176 = load i64, i64* %RAX, align 8
  %2177 = shl nsw i64 %2175, 2
  %2178 = add i64 %2177, %2176
  %2179 = add i64 %3440, 646
  store i64 %2179, i64* %PC, align 8
  %2180 = load <2 x float>, <2 x float>* %4935, align 1
  %2181 = load <2 x i32>, <2 x i32>* %4936, align 1
  %2182 = inttoptr i64 %2178 to float*
  %2183 = load float, float* %2182, align 4
  %2184 = extractelement <2 x float> %2180, i32 0
  %2185 = fmul float %2184, %2183
  store float %2185, float* %4928, align 1, !tbaa !2452
  %2186 = bitcast <2 x float> %2180 to <2 x i32>
  %2187 = extractelement <2 x i32> %2186, i32 1
  store i32 %2187, i32* %4937, align 1, !tbaa !2452
  %2188 = extractelement <2 x i32> %2181, i32 0
  store i32 %2188, i32* %4938, align 1, !tbaa !2452
  %2189 = extractelement <2 x i32> %2181, i32 1
  store i32 %2189, i32* %4939, align 1, !tbaa !2452
  %2190 = load <2 x float>, <2 x float>* %4940, align 1
  %2191 = load <2 x i32>, <2 x i32>* %4941, align 1
  %2192 = load <2 x float>, <2 x float>* %4935, align 1
  %2193 = extractelement <2 x float> %2190, i32 0
  %2194 = extractelement <2 x float> %2192, i32 0
  %2195 = fadd float %2193, %2194
  store float %2195, float* %4920, align 1, !tbaa !2452
  %2196 = bitcast <2 x float> %2190 to <2 x i32>
  %2197 = extractelement <2 x i32> %2196, i32 1
  store i32 %2197, i32* %4942, align 1, !tbaa !2452
  %2198 = extractelement <2 x i32> %2191, i32 0
  store i32 %2198, i32* %4943, align 1, !tbaa !2452
  %2199 = extractelement <2 x i32> %2191, i32 1
  store i32 %2199, i32* %4944, align 1, !tbaa !2452
  %2200 = add i64 %2144, -32
  %2201 = add i64 %3440, 654
  store i64 %2201, i64* %PC, align 8
  %2202 = inttoptr i64 %2200 to i64*
  %2203 = load i64, i64* %2202, align 8
  store i64 %2203, i64* %RAX, align 8, !tbaa !2428
  %2204 = add i64 %2144, -44
  %2205 = add i64 %3440, 657
  store i64 %2205, i64* %PC, align 8
  %2206 = inttoptr i64 %2204 to i32*
  %2207 = load i32, i32* %2206, align 4
  %2208 = add i32 %2207, -2
  %2209 = zext i32 %2208 to i64
  store i64 %2209, i64* %RDX, align 8, !tbaa !2428
  %2210 = icmp ult i32 %2207, 2
  %2211 = zext i1 %2210 to i8
  store i8 %2211, i8* %.pre-phi, align 1, !tbaa !2432
  %2212 = and i32 %2208, 255
  %2213 = tail call i32 @llvm.ctpop.i32(i32 %2212) #8
  %2214 = trunc i32 %2213 to i8
  %2215 = and i8 %2214, 1
  %2216 = xor i8 %2215, 1
  store i8 %2216, i8* %.pre-phi23, align 1, !tbaa !2446
  %2217 = xor i32 %2207, %2208
  %2218 = lshr i32 %2217, 4
  %2219 = trunc i32 %2218 to i8
  %2220 = and i8 %2219, 1
  store i8 %2220, i8* %.pre-phi25, align 1, !tbaa !2450
  %2221 = icmp eq i32 %2208, 0
  %2222 = zext i1 %2221 to i8
  store i8 %2222, i8* %.pre-phi27, align 1, !tbaa !2447
  %2223 = lshr i32 %2208, 31
  %2224 = trunc i32 %2223 to i8
  store i8 %2224, i8* %.pre-phi29, align 1, !tbaa !2448
  %2225 = lshr i32 %2207, 31
  %2226 = xor i32 %2223, %2225
  %2227 = add nuw nsw i32 %2226, %2225
  %2228 = icmp eq i32 %2227, 2
  %2229 = zext i1 %2228 to i8
  store i8 %2229, i8* %.pre-phi31, align 1, !tbaa !2449
  %2230 = sext i32 %2208 to i64
  store i64 %2230, i64* %RCX, align 8, !tbaa !2428
  %2231 = shl nsw i64 %2230, 2
  %2232 = add i64 %2231, %2203
  %2233 = add i64 %3440, 668
  store i64 %2233, i64* %PC, align 8
  %2234 = inttoptr i64 %2232 to i32*
  %2235 = load i32, i32* %2234, align 4
  store i32 %2235, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %2236 = load i64, i64* %RBP, align 8
  %2237 = add i64 %2236, -40
  %2238 = add i64 %3440, 672
  store i64 %2238, i64* %PC, align 8
  %2239 = inttoptr i64 %2237 to i64*
  %2240 = load i64, i64* %2239, align 8
  store i64 %2240, i64* %RAX, align 8, !tbaa !2428
  %2241 = add i64 %2236, -24
  %2242 = add i64 %3440, 675
  store i64 %2242, i64* %PC, align 8
  %2243 = inttoptr i64 %2241 to i32*
  %2244 = load i32, i32* %2243, align 4
  %2245 = zext i32 %2244 to i64
  store i64 %2245, i64* %RDX, align 8, !tbaa !2428
  %2246 = add i64 %2236, -44
  %2247 = add i64 %3440, 678
  store i64 %2247, i64* %PC, align 8
  %2248 = inttoptr i64 %2246 to i32*
  %2249 = load i32, i32* %2248, align 4
  %2250 = add i32 %2249, -2
  %2251 = zext i32 %2250 to i64
  store i64 %2251, i64* %RSI, align 8, !tbaa !2428
  %2252 = sext i32 %2244 to i64
  %2253 = sext i32 %2250 to i64
  %2254 = mul nsw i64 %2253, %2252
  %2255 = trunc i64 %2254 to i32
  %2256 = and i64 %2254, 4294967295
  store i64 %2256, i64* %RDX, align 8, !tbaa !2428
  %2257 = shl i64 %2254, 32
  %2258 = ashr exact i64 %2257, 32
  %2259 = icmp ne i64 %2258, %2254
  %2260 = zext i1 %2259 to i8
  store i8 %2260, i8* %.pre-phi, align 1, !tbaa !2432
  %2261 = and i32 %2255, 255
  %2262 = tail call i32 @llvm.ctpop.i32(i32 %2261) #8
  %2263 = trunc i32 %2262 to i8
  %2264 = and i8 %2263, 1
  %2265 = xor i8 %2264, 1
  store i8 %2265, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2266 = lshr i32 %2255, 31
  %2267 = trunc i32 %2266 to i8
  store i8 %2267, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2260, i8* %.pre-phi31, align 1, !tbaa !2449
  %2268 = add i64 %2236, -48
  %2269 = add i64 %3440, 687
  store i64 %2269, i64* %PC, align 8
  %2270 = inttoptr i64 %2268 to i32*
  %2271 = load i32, i32* %2270, align 4
  %2272 = add i32 %2271, %2255
  %2273 = zext i32 %2272 to i64
  store i64 %2273, i64* %RDX, align 8, !tbaa !2428
  %2274 = icmp ult i32 %2272, %2255
  %2275 = icmp ult i32 %2272, %2271
  %2276 = or i1 %2274, %2275
  %2277 = zext i1 %2276 to i8
  store i8 %2277, i8* %.pre-phi, align 1, !tbaa !2432
  %2278 = and i32 %2272, 255
  %2279 = tail call i32 @llvm.ctpop.i32(i32 %2278) #8
  %2280 = trunc i32 %2279 to i8
  %2281 = and i8 %2280, 1
  %2282 = xor i8 %2281, 1
  store i8 %2282, i8* %.pre-phi23, align 1, !tbaa !2446
  %2283 = xor i32 %2271, %2255
  %2284 = xor i32 %2283, %2272
  %2285 = lshr i32 %2284, 4
  %2286 = trunc i32 %2285 to i8
  %2287 = and i8 %2286, 1
  store i8 %2287, i8* %.pre-phi25, align 1, !tbaa !2450
  %2288 = icmp eq i32 %2272, 0
  %2289 = zext i1 %2288 to i8
  store i8 %2289, i8* %.pre-phi27, align 1, !tbaa !2447
  %2290 = lshr i32 %2272, 31
  %2291 = trunc i32 %2290 to i8
  store i8 %2291, i8* %.pre-phi29, align 1, !tbaa !2448
  %2292 = lshr i32 %2271, 31
  %2293 = xor i32 %2290, %2266
  %2294 = xor i32 %2290, %2292
  %2295 = add nuw nsw i32 %2293, %2294
  %2296 = icmp eq i32 %2295, 2
  %2297 = zext i1 %2296 to i8
  store i8 %2297, i8* %.pre-phi31, align 1, !tbaa !2449
  %2298 = sext i32 %2272 to i64
  store i64 %2298, i64* %RCX, align 8, !tbaa !2428
  %2299 = load i64, i64* %RAX, align 8
  %2300 = shl nsw i64 %2298, 2
  %2301 = add i64 %2300, %2299
  %2302 = add i64 %3440, 695
  store i64 %2302, i64* %PC, align 8
  %2303 = load <2 x float>, <2 x float>* %4935, align 1
  %2304 = load <2 x i32>, <2 x i32>* %4936, align 1
  %2305 = inttoptr i64 %2301 to float*
  %2306 = load float, float* %2305, align 4
  %2307 = extractelement <2 x float> %2303, i32 0
  %2308 = fmul float %2307, %2306
  store float %2308, float* %4928, align 1, !tbaa !2452
  %2309 = bitcast <2 x float> %2303 to <2 x i32>
  %2310 = extractelement <2 x i32> %2309, i32 1
  store i32 %2310, i32* %4937, align 1, !tbaa !2452
  %2311 = extractelement <2 x i32> %2304, i32 0
  store i32 %2311, i32* %4938, align 1, !tbaa !2452
  %2312 = extractelement <2 x i32> %2304, i32 1
  store i32 %2312, i32* %4939, align 1, !tbaa !2452
  %2313 = load <2 x float>, <2 x float>* %4940, align 1
  %2314 = load <2 x i32>, <2 x i32>* %4941, align 1
  %2315 = load <2 x float>, <2 x float>* %4935, align 1
  %2316 = extractelement <2 x float> %2313, i32 0
  %2317 = extractelement <2 x float> %2315, i32 0
  %2318 = fadd float %2316, %2317
  store float %2318, float* %4920, align 1, !tbaa !2452
  %2319 = bitcast <2 x float> %2313 to <2 x i32>
  %2320 = extractelement <2 x i32> %2319, i32 1
  store i32 %2320, i32* %4942, align 1, !tbaa !2452
  %2321 = extractelement <2 x i32> %2314, i32 0
  store i32 %2321, i32* %4943, align 1, !tbaa !2452
  %2322 = extractelement <2 x i32> %2314, i32 1
  store i32 %2322, i32* %4944, align 1, !tbaa !2452
  %2323 = load i64, i64* %RBP, align 8
  %2324 = add i64 %2323, -32
  %2325 = add i64 %3440, 703
  store i64 %2325, i64* %PC, align 8
  %2326 = inttoptr i64 %2324 to i64*
  %2327 = load i64, i64* %2326, align 8
  store i64 %2327, i64* %RAX, align 8, !tbaa !2428
  %2328 = add i64 %2323, -44
  %2329 = add i64 %3440, 706
  store i64 %2329, i64* %PC, align 8
  %2330 = inttoptr i64 %2328 to i32*
  %2331 = load i32, i32* %2330, align 4
  %2332 = add i32 %2331, -1
  %2333 = zext i32 %2332 to i64
  store i64 %2333, i64* %RDX, align 8, !tbaa !2428
  %2334 = icmp eq i32 %2331, 0
  %2335 = zext i1 %2334 to i8
  store i8 %2335, i8* %.pre-phi, align 1, !tbaa !2432
  %2336 = and i32 %2332, 255
  %2337 = tail call i32 @llvm.ctpop.i32(i32 %2336) #8
  %2338 = trunc i32 %2337 to i8
  %2339 = and i8 %2338, 1
  %2340 = xor i8 %2339, 1
  store i8 %2340, i8* %.pre-phi23, align 1, !tbaa !2446
  %2341 = xor i32 %2331, %2332
  %2342 = lshr i32 %2341, 4
  %2343 = trunc i32 %2342 to i8
  %2344 = and i8 %2343, 1
  store i8 %2344, i8* %.pre-phi25, align 1, !tbaa !2450
  %2345 = icmp eq i32 %2332, 0
  %2346 = zext i1 %2345 to i8
  store i8 %2346, i8* %.pre-phi27, align 1, !tbaa !2447
  %2347 = lshr i32 %2332, 31
  %2348 = trunc i32 %2347 to i8
  store i8 %2348, i8* %.pre-phi29, align 1, !tbaa !2448
  %2349 = lshr i32 %2331, 31
  %2350 = xor i32 %2347, %2349
  %2351 = add nuw nsw i32 %2350, %2349
  %2352 = icmp eq i32 %2351, 2
  %2353 = zext i1 %2352 to i8
  store i8 %2353, i8* %.pre-phi31, align 1, !tbaa !2449
  %2354 = sext i32 %2332 to i64
  store i64 %2354, i64* %RCX, align 8, !tbaa !2428
  %2355 = shl nsw i64 %2354, 2
  %2356 = add i64 %2355, %2327
  %2357 = add i64 %3440, 717
  store i64 %2357, i64* %PC, align 8
  %2358 = inttoptr i64 %2356 to i32*
  %2359 = load i32, i32* %2358, align 4
  store i32 %2359, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %2360 = add i64 %2323, -40
  %2361 = add i64 %3440, 721
  store i64 %2361, i64* %PC, align 8
  %2362 = inttoptr i64 %2360 to i64*
  %2363 = load i64, i64* %2362, align 8
  store i64 %2363, i64* %RAX, align 8, !tbaa !2428
  %2364 = add i64 %2323, -24
  %2365 = add i64 %3440, 724
  store i64 %2365, i64* %PC, align 8
  %2366 = inttoptr i64 %2364 to i32*
  %2367 = load i32, i32* %2366, align 4
  %2368 = zext i32 %2367 to i64
  store i64 %2368, i64* %RDX, align 8, !tbaa !2428
  %2369 = add i64 %3440, 727
  store i64 %2369, i64* %PC, align 8
  %2370 = load i32, i32* %2330, align 4
  %2371 = add i32 %2370, -1
  %2372 = zext i32 %2371 to i64
  store i64 %2372, i64* %RSI, align 8, !tbaa !2428
  %2373 = sext i32 %2367 to i64
  %2374 = sext i32 %2371 to i64
  %2375 = mul nsw i64 %2374, %2373
  %2376 = trunc i64 %2375 to i32
  %2377 = and i64 %2375, 4294967295
  store i64 %2377, i64* %RDX, align 8, !tbaa !2428
  %2378 = shl i64 %2375, 32
  %2379 = ashr exact i64 %2378, 32
  %2380 = icmp ne i64 %2379, %2375
  %2381 = zext i1 %2380 to i8
  store i8 %2381, i8* %.pre-phi, align 1, !tbaa !2432
  %2382 = and i32 %2376, 255
  %2383 = tail call i32 @llvm.ctpop.i32(i32 %2382) #8
  %2384 = trunc i32 %2383 to i8
  %2385 = and i8 %2384, 1
  %2386 = xor i8 %2385, 1
  store i8 %2386, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2387 = lshr i32 %2376, 31
  %2388 = trunc i32 %2387 to i8
  store i8 %2388, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2381, i8* %.pre-phi31, align 1, !tbaa !2449
  %2389 = load i64, i64* %RBP, align 8
  %2390 = add i64 %2389, -48
  %2391 = add i64 %3440, 736
  store i64 %2391, i64* %PC, align 8
  %2392 = inttoptr i64 %2390 to i32*
  %2393 = load i32, i32* %2392, align 4
  %2394 = add i32 %2393, %2376
  %2395 = zext i32 %2394 to i64
  store i64 %2395, i64* %RDX, align 8, !tbaa !2428
  %2396 = icmp ult i32 %2394, %2376
  %2397 = icmp ult i32 %2394, %2393
  %2398 = or i1 %2396, %2397
  %2399 = zext i1 %2398 to i8
  store i8 %2399, i8* %.pre-phi, align 1, !tbaa !2432
  %2400 = and i32 %2394, 255
  %2401 = tail call i32 @llvm.ctpop.i32(i32 %2400) #8
  %2402 = trunc i32 %2401 to i8
  %2403 = and i8 %2402, 1
  %2404 = xor i8 %2403, 1
  store i8 %2404, i8* %.pre-phi23, align 1, !tbaa !2446
  %2405 = xor i32 %2393, %2376
  %2406 = xor i32 %2405, %2394
  %2407 = lshr i32 %2406, 4
  %2408 = trunc i32 %2407 to i8
  %2409 = and i8 %2408, 1
  store i8 %2409, i8* %.pre-phi25, align 1, !tbaa !2450
  %2410 = icmp eq i32 %2394, 0
  %2411 = zext i1 %2410 to i8
  store i8 %2411, i8* %.pre-phi27, align 1, !tbaa !2447
  %2412 = lshr i32 %2394, 31
  %2413 = trunc i32 %2412 to i8
  store i8 %2413, i8* %.pre-phi29, align 1, !tbaa !2448
  %2414 = lshr i32 %2393, 31
  %2415 = xor i32 %2412, %2387
  %2416 = xor i32 %2412, %2414
  %2417 = add nuw nsw i32 %2415, %2416
  %2418 = icmp eq i32 %2417, 2
  %2419 = zext i1 %2418 to i8
  store i8 %2419, i8* %.pre-phi31, align 1, !tbaa !2449
  %2420 = sext i32 %2394 to i64
  store i64 %2420, i64* %RCX, align 8, !tbaa !2428
  %2421 = load i64, i64* %RAX, align 8
  %2422 = shl nsw i64 %2420, 2
  %2423 = add i64 %2422, %2421
  %2424 = add i64 %3440, 744
  store i64 %2424, i64* %PC, align 8
  %2425 = load <2 x float>, <2 x float>* %4935, align 1
  %2426 = load <2 x i32>, <2 x i32>* %4936, align 1
  %2427 = inttoptr i64 %2423 to float*
  %2428 = load float, float* %2427, align 4
  %2429 = extractelement <2 x float> %2425, i32 0
  %2430 = fmul float %2429, %2428
  store float %2430, float* %4928, align 1, !tbaa !2452
  %2431 = bitcast <2 x float> %2425 to <2 x i32>
  %2432 = extractelement <2 x i32> %2431, i32 1
  store i32 %2432, i32* %4937, align 1, !tbaa !2452
  %2433 = extractelement <2 x i32> %2426, i32 0
  store i32 %2433, i32* %4938, align 1, !tbaa !2452
  %2434 = extractelement <2 x i32> %2426, i32 1
  store i32 %2434, i32* %4939, align 1, !tbaa !2452
  %2435 = load <2 x float>, <2 x float>* %4940, align 1
  %2436 = load <2 x i32>, <2 x i32>* %4941, align 1
  %2437 = load <2 x float>, <2 x float>* %4935, align 1
  %2438 = extractelement <2 x float> %2435, i32 0
  %2439 = extractelement <2 x float> %2437, i32 0
  %2440 = fadd float %2438, %2439
  store float %2440, float* %4920, align 1, !tbaa !2452
  %2441 = bitcast <2 x float> %2435 to <2 x i32>
  %2442 = extractelement <2 x i32> %2441, i32 1
  store i32 %2442, i32* %4942, align 1, !tbaa !2452
  %2443 = extractelement <2 x i32> %2436, i32 0
  store i32 %2443, i32* %4943, align 1, !tbaa !2452
  %2444 = extractelement <2 x i32> %2436, i32 1
  store i32 %2444, i32* %4944, align 1, !tbaa !2452
  %2445 = add i64 %2389, -32
  %2446 = add i64 %3440, 752
  store i64 %2446, i64* %PC, align 8
  %2447 = inttoptr i64 %2445 to i64*
  %2448 = load i64, i64* %2447, align 8
  store i64 %2448, i64* %RAX, align 8, !tbaa !2428
  %2449 = add i64 %2389, -44
  %2450 = add i64 %3440, 756
  store i64 %2450, i64* %PC, align 8
  %2451 = inttoptr i64 %2449 to i32*
  %2452 = load i32, i32* %2451, align 4
  %2453 = sext i32 %2452 to i64
  store i64 %2453, i64* %RCX, align 8, !tbaa !2428
  %2454 = shl nsw i64 %2453, 2
  %2455 = add i64 %2454, %2448
  %2456 = add i64 %3440, 761
  store i64 %2456, i64* %PC, align 8
  %2457 = inttoptr i64 %2455 to i32*
  %2458 = load i32, i32* %2457, align 4
  store i32 %2458, i32* %644, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4930, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4932, align 1, !tbaa !2452
  store float 0.000000e+00, float* %4934, align 1, !tbaa !2452
  %2459 = load i64, i64* %RBP, align 8
  %2460 = add i64 %2459, -40
  %2461 = add i64 %3440, 765
  store i64 %2461, i64* %PC, align 8
  %2462 = inttoptr i64 %2460 to i64*
  %2463 = load i64, i64* %2462, align 8
  store i64 %2463, i64* %RAX, align 8, !tbaa !2428
  %2464 = add i64 %2459, -24
  %2465 = add i64 %3440, 768
  store i64 %2465, i64* %PC, align 8
  %2466 = inttoptr i64 %2464 to i32*
  %2467 = load i32, i32* %2466, align 4
  %2468 = zext i32 %2467 to i64
  store i64 %2468, i64* %RDX, align 8, !tbaa !2428
  %2469 = add i64 %2459, -44
  %2470 = add i64 %3440, 772
  store i64 %2470, i64* %PC, align 8
  %2471 = inttoptr i64 %2469 to i32*
  %2472 = load i32, i32* %2471, align 4
  %2473 = sext i32 %2467 to i64
  %2474 = sext i32 %2472 to i64
  %2475 = mul nsw i64 %2474, %2473
  %2476 = trunc i64 %2475 to i32
  %2477 = and i64 %2475, 4294967295
  store i64 %2477, i64* %RDX, align 8, !tbaa !2428
  %2478 = shl i64 %2475, 32
  %2479 = ashr exact i64 %2478, 32
  %2480 = icmp ne i64 %2479, %2475
  %2481 = zext i1 %2480 to i8
  store i8 %2481, i8* %.pre-phi, align 1, !tbaa !2432
  %2482 = and i32 %2476, 255
  %2483 = tail call i32 @llvm.ctpop.i32(i32 %2482) #8
  %2484 = trunc i32 %2483 to i8
  %2485 = and i8 %2484, 1
  %2486 = xor i8 %2485, 1
  store i8 %2486, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2487 = lshr i32 %2476, 31
  %2488 = trunc i32 %2487 to i8
  store i8 %2488, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2481, i8* %.pre-phi31, align 1, !tbaa !2449
  %2489 = add i64 %2459, -48
  %2490 = add i64 %3440, 775
  store i64 %2490, i64* %PC, align 8
  %2491 = inttoptr i64 %2489 to i32*
  %2492 = load i32, i32* %2491, align 4
  %2493 = add i32 %2492, %2476
  %2494 = zext i32 %2493 to i64
  store i64 %2494, i64* %RDX, align 8, !tbaa !2428
  %2495 = icmp ult i32 %2493, %2476
  %2496 = icmp ult i32 %2493, %2492
  %2497 = or i1 %2495, %2496
  %2498 = zext i1 %2497 to i8
  store i8 %2498, i8* %.pre-phi, align 1, !tbaa !2432
  %2499 = and i32 %2493, 255
  %2500 = tail call i32 @llvm.ctpop.i32(i32 %2499) #8
  %2501 = trunc i32 %2500 to i8
  %2502 = and i8 %2501, 1
  %2503 = xor i8 %2502, 1
  store i8 %2503, i8* %.pre-phi23, align 1, !tbaa !2446
  %2504 = xor i32 %2492, %2476
  %2505 = xor i32 %2504, %2493
  %2506 = lshr i32 %2505, 4
  %2507 = trunc i32 %2506 to i8
  %2508 = and i8 %2507, 1
  store i8 %2508, i8* %.pre-phi25, align 1, !tbaa !2450
  %2509 = icmp eq i32 %2493, 0
  %2510 = zext i1 %2509 to i8
  store i8 %2510, i8* %.pre-phi27, align 1, !tbaa !2447
  %2511 = lshr i32 %2493, 31
  %2512 = trunc i32 %2511 to i8
  store i8 %2512, i8* %.pre-phi29, align 1, !tbaa !2448
  %2513 = lshr i32 %2492, 31
  %2514 = xor i32 %2511, %2487
  %2515 = xor i32 %2511, %2513
  %2516 = add nuw nsw i32 %2514, %2515
  %2517 = icmp eq i32 %2516, 2
  %2518 = zext i1 %2517 to i8
  store i8 %2518, i8* %.pre-phi31, align 1, !tbaa !2449
  %2519 = sext i32 %2493 to i64
  store i64 %2519, i64* %RCX, align 8, !tbaa !2428
  %2520 = shl nsw i64 %2519, 2
  %2521 = add i64 %2520, %2463
  %2522 = add i64 %3440, 783
  store i64 %2522, i64* %PC, align 8
  %2523 = load <2 x float>, <2 x float>* %4935, align 1
  %2524 = load <2 x i32>, <2 x i32>* %4936, align 1
  %2525 = inttoptr i64 %2521 to float*
  %2526 = load float, float* %2525, align 4
  %2527 = extractelement <2 x float> %2523, i32 0
  %2528 = fmul float %2527, %2526
  store float %2528, float* %4928, align 1, !tbaa !2452
  %2529 = bitcast <2 x float> %2523 to <2 x i32>
  %2530 = extractelement <2 x i32> %2529, i32 1
  store i32 %2530, i32* %4937, align 1, !tbaa !2452
  %2531 = extractelement <2 x i32> %2524, i32 0
  store i32 %2531, i32* %4938, align 1, !tbaa !2452
  %2532 = extractelement <2 x i32> %2524, i32 1
  store i32 %2532, i32* %4939, align 1, !tbaa !2452
  %2533 = load <2 x float>, <2 x float>* %4940, align 1
  %2534 = load <2 x i32>, <2 x i32>* %4941, align 1
  %2535 = load <2 x float>, <2 x float>* %4935, align 1
  %2536 = extractelement <2 x float> %2533, i32 0
  %2537 = extractelement <2 x float> %2535, i32 0
  %2538 = fadd float %2536, %2537
  store float %2538, float* %4920, align 1, !tbaa !2452
  %2539 = bitcast <2 x float> %2533 to <2 x i32>
  %2540 = extractelement <2 x i32> %2539, i32 1
  store i32 %2540, i32* %4942, align 1, !tbaa !2452
  %2541 = extractelement <2 x i32> %2534, i32 0
  store i32 %2541, i32* %4943, align 1, !tbaa !2452
  %2542 = extractelement <2 x i32> %2534, i32 1
  store i32 %2542, i32* %4944, align 1, !tbaa !2452
  %2543 = load i64, i64* %RBP, align 8
  %2544 = add i64 %2543, -16
  %2545 = add i64 %3440, 791
  store i64 %2545, i64* %PC, align 8
  %2546 = inttoptr i64 %2544 to i64*
  %2547 = load i64, i64* %2546, align 8
  store i64 %2547, i64* %RAX, align 8, !tbaa !2428
  %2548 = add i64 %2543, -48
  %2549 = add i64 %3440, 795
  store i64 %2549, i64* %PC, align 8
  %2550 = inttoptr i64 %2548 to i32*
  %2551 = load i32, i32* %2550, align 4
  %2552 = sext i32 %2551 to i64
  store i64 %2552, i64* %RCX, align 8, !tbaa !2428
  %2553 = shl nsw i64 %2552, 2
  %2554 = add i64 %2553, %2547
  %2555 = add i64 %3440, 800
  store i64 %2555, i64* %PC, align 8
  %2556 = load <2 x float>, <2 x float>* %4940, align 1
  %2557 = extractelement <2 x float> %2556, i32 0
  %2558 = inttoptr i64 %2554 to float*
  store float %2557, float* %2558, align 4
  %2559 = load i64, i64* %RBP, align 8
  %2560 = add i64 %2559, -48
  %2561 = load i64, i64* %PC, align 8
  %2562 = add i64 %2561, 3
  store i64 %2562, i64* %PC, align 8
  %2563 = inttoptr i64 %2560 to i32*
  %2564 = load i32, i32* %2563, align 4
  %2565 = add i32 %2564, 1
  %2566 = zext i32 %2565 to i64
  store i64 %2566, i64* %RAX, align 8, !tbaa !2428
  %2567 = icmp eq i32 %2564, -1
  %2568 = icmp eq i32 %2565, 0
  %2569 = or i1 %2567, %2568
  %2570 = zext i1 %2569 to i8
  store i8 %2570, i8* %.pre-phi, align 1, !tbaa !2432
  %2571 = and i32 %2565, 255
  %2572 = tail call i32 @llvm.ctpop.i32(i32 %2571) #8
  %2573 = trunc i32 %2572 to i8
  %2574 = and i8 %2573, 1
  %2575 = xor i8 %2574, 1
  store i8 %2575, i8* %.pre-phi23, align 1, !tbaa !2446
  %2576 = xor i32 %2564, %2565
  %2577 = lshr i32 %2576, 4
  %2578 = trunc i32 %2577 to i8
  %2579 = and i8 %2578, 1
  store i8 %2579, i8* %.pre-phi25, align 1, !tbaa !2450
  %2580 = zext i1 %2568 to i8
  store i8 %2580, i8* %.pre-phi27, align 1, !tbaa !2447
  %2581 = lshr i32 %2565, 31
  %2582 = trunc i32 %2581 to i8
  store i8 %2582, i8* %.pre-phi29, align 1, !tbaa !2448
  %2583 = lshr i32 %2564, 31
  %2584 = xor i32 %2581, %2583
  %2585 = add nuw nsw i32 %2584, %2581
  %2586 = icmp eq i32 %2585, 2
  %2587 = zext i1 %2586 to i8
  store i8 %2587, i8* %.pre-phi31, align 1, !tbaa !2449
  %2588 = add i64 %2561, 9
  store i64 %2588, i64* %PC, align 8
  store i32 %2565, i32* %2563, align 4
  %2589 = load i64, i64* %PC, align 8
  %2590 = add i64 %2589, -821
  store i64 %2590, i64* %PC, align 8, !tbaa !2428
  br label %block_4024b9

block_4021b6:                                     ; preds = %block_4021aa
  %2591 = add i64 %3442, -16
  %2592 = add i64 %3478, 4
  store i64 %2592, i64* %PC, align 8
  %2593 = inttoptr i64 %2591 to i64*
  %2594 = load i64, i64* %2593, align 8
  store i64 %2594, i64* %RAX, align 8, !tbaa !2428
  %2595 = add i64 %3478, 8
  store i64 %2595, i64* %PC, align 8
  %2596 = load i32, i32* %3445, align 4
  %2597 = sext i32 %2596 to i64
  store i64 %2597, i64* %RCX, align 8, !tbaa !2428
  %2598 = shl nsw i64 %2597, 2
  %2599 = add i64 %2598, %2594
  %2600 = add i64 %3478, 13
  store i64 %2600, i64* %PC, align 8
  %2601 = inttoptr i64 %2599 to i32*
  %2602 = load i32, i32* %2601, align 4
  %2603 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %2602, i32* %2603, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3772, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3774, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3776, align 1, !tbaa !2452
  %2604 = add i64 %3442, -32
  %2605 = add i64 %3478, 17
  store i64 %2605, i64* %PC, align 8
  %2606 = inttoptr i64 %2604 to i64*
  %2607 = load i64, i64* %2606, align 8
  store i64 %2607, i64* %RAX, align 8, !tbaa !2428
  %2608 = add i64 %3442, -44
  %2609 = add i64 %3478, 20
  store i64 %2609, i64* %PC, align 8
  %2610 = inttoptr i64 %2608 to i32*
  %2611 = load i32, i32* %2610, align 4
  %2612 = add i32 %2611, -3
  %2613 = zext i32 %2612 to i64
  store i64 %2613, i64* %RDX, align 8, !tbaa !2428
  %2614 = icmp ult i32 %2611, 3
  %2615 = zext i1 %2614 to i8
  store i8 %2615, i8* %.pre-phi, align 1, !tbaa !2432
  %2616 = and i32 %2612, 255
  %2617 = tail call i32 @llvm.ctpop.i32(i32 %2616) #8
  %2618 = trunc i32 %2617 to i8
  %2619 = and i8 %2618, 1
  %2620 = xor i8 %2619, 1
  store i8 %2620, i8* %.pre-phi23, align 1, !tbaa !2446
  %2621 = xor i32 %2611, %2612
  %2622 = lshr i32 %2621, 4
  %2623 = trunc i32 %2622 to i8
  %2624 = and i8 %2623, 1
  store i8 %2624, i8* %.pre-phi25, align 1, !tbaa !2450
  %2625 = icmp eq i32 %2612, 0
  %2626 = zext i1 %2625 to i8
  store i8 %2626, i8* %.pre-phi27, align 1, !tbaa !2447
  %2627 = lshr i32 %2612, 31
  %2628 = trunc i32 %2627 to i8
  store i8 %2628, i8* %.pre-phi29, align 1, !tbaa !2448
  %2629 = lshr i32 %2611, 31
  %2630 = xor i32 %2627, %2629
  %2631 = add nuw nsw i32 %2630, %2629
  %2632 = icmp eq i32 %2631, 2
  %2633 = zext i1 %2632 to i8
  store i8 %2633, i8* %.pre-phi31, align 1, !tbaa !2449
  %2634 = sext i32 %2612 to i64
  store i64 %2634, i64* %RCX, align 8, !tbaa !2428
  %2635 = shl nsw i64 %2634, 2
  %2636 = add i64 %2635, %2607
  %2637 = add i64 %3478, 31
  store i64 %2637, i64* %PC, align 8
  %2638 = inttoptr i64 %2636 to i32*
  %2639 = load i32, i32* %2638, align 4
  %2640 = bitcast %union.VectorReg* %8 to i32*
  store i32 %2639, i32* %2640, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3782, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3784, align 1, !tbaa !2452
  %2641 = add i64 %3442, -40
  %2642 = add i64 %3478, 35
  store i64 %2642, i64* %PC, align 8
  %2643 = inttoptr i64 %2641 to i64*
  %2644 = load i64, i64* %2643, align 8
  store i64 %2644, i64* %RAX, align 8, !tbaa !2428
  %2645 = add i64 %3442, -24
  %2646 = add i64 %3478, 38
  store i64 %2646, i64* %PC, align 8
  %2647 = inttoptr i64 %2645 to i32*
  %2648 = load i32, i32* %2647, align 4
  %2649 = zext i32 %2648 to i64
  store i64 %2649, i64* %RDX, align 8, !tbaa !2428
  %2650 = add i64 %3478, 41
  store i64 %2650, i64* %PC, align 8
  %2651 = load i32, i32* %2610, align 4
  %2652 = add i32 %2651, -3
  %2653 = zext i32 %2652 to i64
  store i64 %2653, i64* %RSI, align 8, !tbaa !2428
  %2654 = sext i32 %2648 to i64
  %2655 = sext i32 %2652 to i64
  %2656 = mul nsw i64 %2655, %2654
  %2657 = trunc i64 %2656 to i32
  %2658 = and i64 %2656, 4294967295
  store i64 %2658, i64* %RDX, align 8, !tbaa !2428
  %2659 = shl i64 %2656, 32
  %2660 = ashr exact i64 %2659, 32
  %2661 = icmp ne i64 %2660, %2656
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %.pre-phi, align 1, !tbaa !2432
  %2663 = and i32 %2657, 255
  %2664 = tail call i32 @llvm.ctpop.i32(i32 %2663) #8
  %2665 = trunc i32 %2664 to i8
  %2666 = and i8 %2665, 1
  %2667 = xor i8 %2666, 1
  store i8 %2667, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2668 = lshr i32 %2657, 31
  %2669 = trunc i32 %2668 to i8
  store i8 %2669, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2662, i8* %.pre-phi31, align 1, !tbaa !2449
  %2670 = load i64, i64* %RBP, align 8
  %2671 = add i64 %2670, -48
  %2672 = add i64 %3478, 50
  store i64 %2672, i64* %PC, align 8
  %2673 = inttoptr i64 %2671 to i32*
  %2674 = load i32, i32* %2673, align 4
  %2675 = add i32 %2674, %2657
  %2676 = zext i32 %2675 to i64
  store i64 %2676, i64* %RDX, align 8, !tbaa !2428
  %2677 = icmp ult i32 %2675, %2657
  %2678 = icmp ult i32 %2675, %2674
  %2679 = or i1 %2677, %2678
  %2680 = zext i1 %2679 to i8
  store i8 %2680, i8* %.pre-phi, align 1, !tbaa !2432
  %2681 = and i32 %2675, 255
  %2682 = tail call i32 @llvm.ctpop.i32(i32 %2681) #8
  %2683 = trunc i32 %2682 to i8
  %2684 = and i8 %2683, 1
  %2685 = xor i8 %2684, 1
  store i8 %2685, i8* %.pre-phi23, align 1, !tbaa !2446
  %2686 = xor i32 %2674, %2657
  %2687 = xor i32 %2686, %2675
  %2688 = lshr i32 %2687, 4
  %2689 = trunc i32 %2688 to i8
  %2690 = and i8 %2689, 1
  store i8 %2690, i8* %.pre-phi25, align 1, !tbaa !2450
  %2691 = icmp eq i32 %2675, 0
  %2692 = zext i1 %2691 to i8
  store i8 %2692, i8* %.pre-phi27, align 1, !tbaa !2447
  %2693 = lshr i32 %2675, 31
  %2694 = trunc i32 %2693 to i8
  store i8 %2694, i8* %.pre-phi29, align 1, !tbaa !2448
  %2695 = lshr i32 %2674, 31
  %2696 = xor i32 %2693, %2668
  %2697 = xor i32 %2693, %2695
  %2698 = add nuw nsw i32 %2696, %2697
  %2699 = icmp eq i32 %2698, 2
  %2700 = zext i1 %2699 to i8
  store i8 %2700, i8* %.pre-phi31, align 1, !tbaa !2449
  %2701 = sext i32 %2675 to i64
  store i64 %2701, i64* %RCX, align 8, !tbaa !2428
  %2702 = load i64, i64* %RAX, align 8
  %2703 = shl nsw i64 %2701, 2
  %2704 = add i64 %2703, %2702
  %2705 = add i64 %3478, 58
  store i64 %2705, i64* %PC, align 8
  %2706 = load <2 x float>, <2 x float>* %3785, align 1
  %2707 = load <2 x i32>, <2 x i32>* %3786, align 1
  %2708 = inttoptr i64 %2704 to float*
  %2709 = load float, float* %2708, align 4
  %2710 = extractelement <2 x float> %2706, i32 0
  %2711 = fmul float %2710, %2709
  store float %2711, float* %3778, align 1, !tbaa !2452
  %2712 = bitcast <2 x float> %2706 to <2 x i32>
  %2713 = extractelement <2 x i32> %2712, i32 1
  store i32 %2713, i32* %3787, align 1, !tbaa !2452
  %2714 = extractelement <2 x i32> %2707, i32 0
  store i32 %2714, i32* %3788, align 1, !tbaa !2452
  %2715 = extractelement <2 x i32> %2707, i32 1
  store i32 %2715, i32* %3789, align 1, !tbaa !2452
  %2716 = load <2 x float>, <2 x float>* %3790, align 1
  %2717 = load <2 x i32>, <2 x i32>* %3791, align 1
  %2718 = load <2 x float>, <2 x float>* %3785, align 1
  %2719 = extractelement <2 x float> %2716, i32 0
  %2720 = extractelement <2 x float> %2718, i32 0
  %2721 = fadd float %2719, %2720
  store float %2721, float* %3770, align 1, !tbaa !2452
  %2722 = bitcast <2 x float> %2716 to <2 x i32>
  %2723 = extractelement <2 x i32> %2722, i32 1
  store i32 %2723, i32* %3792, align 1, !tbaa !2452
  %2724 = extractelement <2 x i32> %2717, i32 0
  store i32 %2724, i32* %3793, align 1, !tbaa !2452
  %2725 = extractelement <2 x i32> %2717, i32 1
  store i32 %2725, i32* %3794, align 1, !tbaa !2452
  %2726 = add i64 %2670, -32
  %2727 = add i64 %3478, 66
  store i64 %2727, i64* %PC, align 8
  %2728 = inttoptr i64 %2726 to i64*
  %2729 = load i64, i64* %2728, align 8
  store i64 %2729, i64* %RAX, align 8, !tbaa !2428
  %2730 = add i64 %2670, -44
  %2731 = add i64 %3478, 69
  store i64 %2731, i64* %PC, align 8
  %2732 = inttoptr i64 %2730 to i32*
  %2733 = load i32, i32* %2732, align 4
  %2734 = add i32 %2733, -2
  %2735 = zext i32 %2734 to i64
  store i64 %2735, i64* %RDX, align 8, !tbaa !2428
  %2736 = icmp ult i32 %2733, 2
  %2737 = zext i1 %2736 to i8
  store i8 %2737, i8* %.pre-phi, align 1, !tbaa !2432
  %2738 = and i32 %2734, 255
  %2739 = tail call i32 @llvm.ctpop.i32(i32 %2738) #8
  %2740 = trunc i32 %2739 to i8
  %2741 = and i8 %2740, 1
  %2742 = xor i8 %2741, 1
  store i8 %2742, i8* %.pre-phi23, align 1, !tbaa !2446
  %2743 = xor i32 %2733, %2734
  %2744 = lshr i32 %2743, 4
  %2745 = trunc i32 %2744 to i8
  %2746 = and i8 %2745, 1
  store i8 %2746, i8* %.pre-phi25, align 1, !tbaa !2450
  %2747 = icmp eq i32 %2734, 0
  %2748 = zext i1 %2747 to i8
  store i8 %2748, i8* %.pre-phi27, align 1, !tbaa !2447
  %2749 = lshr i32 %2734, 31
  %2750 = trunc i32 %2749 to i8
  store i8 %2750, i8* %.pre-phi29, align 1, !tbaa !2448
  %2751 = lshr i32 %2733, 31
  %2752 = xor i32 %2749, %2751
  %2753 = add nuw nsw i32 %2752, %2751
  %2754 = icmp eq i32 %2753, 2
  %2755 = zext i1 %2754 to i8
  store i8 %2755, i8* %.pre-phi31, align 1, !tbaa !2449
  %2756 = sext i32 %2734 to i64
  store i64 %2756, i64* %RCX, align 8, !tbaa !2428
  %2757 = shl nsw i64 %2756, 2
  %2758 = add i64 %2757, %2729
  %2759 = add i64 %3478, 80
  store i64 %2759, i64* %PC, align 8
  %2760 = inttoptr i64 %2758 to i32*
  %2761 = load i32, i32* %2760, align 4
  store i32 %2761, i32* %2640, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3782, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3784, align 1, !tbaa !2452
  %2762 = load i64, i64* %RBP, align 8
  %2763 = add i64 %2762, -40
  %2764 = add i64 %3478, 84
  store i64 %2764, i64* %PC, align 8
  %2765 = inttoptr i64 %2763 to i64*
  %2766 = load i64, i64* %2765, align 8
  store i64 %2766, i64* %RAX, align 8, !tbaa !2428
  %2767 = add i64 %2762, -24
  %2768 = add i64 %3478, 87
  store i64 %2768, i64* %PC, align 8
  %2769 = inttoptr i64 %2767 to i32*
  %2770 = load i32, i32* %2769, align 4
  %2771 = zext i32 %2770 to i64
  store i64 %2771, i64* %RDX, align 8, !tbaa !2428
  %2772 = add i64 %2762, -44
  %2773 = add i64 %3478, 90
  store i64 %2773, i64* %PC, align 8
  %2774 = inttoptr i64 %2772 to i32*
  %2775 = load i32, i32* %2774, align 4
  %2776 = add i32 %2775, -2
  %2777 = zext i32 %2776 to i64
  store i64 %2777, i64* %RSI, align 8, !tbaa !2428
  %2778 = sext i32 %2770 to i64
  %2779 = sext i32 %2776 to i64
  %2780 = mul nsw i64 %2779, %2778
  %2781 = trunc i64 %2780 to i32
  %2782 = and i64 %2780, 4294967295
  store i64 %2782, i64* %RDX, align 8, !tbaa !2428
  %2783 = shl i64 %2780, 32
  %2784 = ashr exact i64 %2783, 32
  %2785 = icmp ne i64 %2784, %2780
  %2786 = zext i1 %2785 to i8
  store i8 %2786, i8* %.pre-phi, align 1, !tbaa !2432
  %2787 = and i32 %2781, 255
  %2788 = tail call i32 @llvm.ctpop.i32(i32 %2787) #8
  %2789 = trunc i32 %2788 to i8
  %2790 = and i8 %2789, 1
  %2791 = xor i8 %2790, 1
  store i8 %2791, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2792 = lshr i32 %2781, 31
  %2793 = trunc i32 %2792 to i8
  store i8 %2793, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2786, i8* %.pre-phi31, align 1, !tbaa !2449
  %2794 = add i64 %2762, -48
  %2795 = add i64 %3478, 99
  store i64 %2795, i64* %PC, align 8
  %2796 = inttoptr i64 %2794 to i32*
  %2797 = load i32, i32* %2796, align 4
  %2798 = add i32 %2797, %2781
  %2799 = zext i32 %2798 to i64
  store i64 %2799, i64* %RDX, align 8, !tbaa !2428
  %2800 = icmp ult i32 %2798, %2781
  %2801 = icmp ult i32 %2798, %2797
  %2802 = or i1 %2800, %2801
  %2803 = zext i1 %2802 to i8
  store i8 %2803, i8* %.pre-phi, align 1, !tbaa !2432
  %2804 = and i32 %2798, 255
  %2805 = tail call i32 @llvm.ctpop.i32(i32 %2804) #8
  %2806 = trunc i32 %2805 to i8
  %2807 = and i8 %2806, 1
  %2808 = xor i8 %2807, 1
  store i8 %2808, i8* %.pre-phi23, align 1, !tbaa !2446
  %2809 = xor i32 %2797, %2781
  %2810 = xor i32 %2809, %2798
  %2811 = lshr i32 %2810, 4
  %2812 = trunc i32 %2811 to i8
  %2813 = and i8 %2812, 1
  store i8 %2813, i8* %.pre-phi25, align 1, !tbaa !2450
  %2814 = icmp eq i32 %2798, 0
  %2815 = zext i1 %2814 to i8
  store i8 %2815, i8* %.pre-phi27, align 1, !tbaa !2447
  %2816 = lshr i32 %2798, 31
  %2817 = trunc i32 %2816 to i8
  store i8 %2817, i8* %.pre-phi29, align 1, !tbaa !2448
  %2818 = lshr i32 %2797, 31
  %2819 = xor i32 %2816, %2792
  %2820 = xor i32 %2816, %2818
  %2821 = add nuw nsw i32 %2819, %2820
  %2822 = icmp eq i32 %2821, 2
  %2823 = zext i1 %2822 to i8
  store i8 %2823, i8* %.pre-phi31, align 1, !tbaa !2449
  %2824 = sext i32 %2798 to i64
  store i64 %2824, i64* %RCX, align 8, !tbaa !2428
  %2825 = load i64, i64* %RAX, align 8
  %2826 = shl nsw i64 %2824, 2
  %2827 = add i64 %2826, %2825
  %2828 = add i64 %3478, 107
  store i64 %2828, i64* %PC, align 8
  %2829 = load <2 x float>, <2 x float>* %3785, align 1
  %2830 = load <2 x i32>, <2 x i32>* %3786, align 1
  %2831 = inttoptr i64 %2827 to float*
  %2832 = load float, float* %2831, align 4
  %2833 = extractelement <2 x float> %2829, i32 0
  %2834 = fmul float %2833, %2832
  store float %2834, float* %3778, align 1, !tbaa !2452
  %2835 = bitcast <2 x float> %2829 to <2 x i32>
  %2836 = extractelement <2 x i32> %2835, i32 1
  store i32 %2836, i32* %3787, align 1, !tbaa !2452
  %2837 = extractelement <2 x i32> %2830, i32 0
  store i32 %2837, i32* %3788, align 1, !tbaa !2452
  %2838 = extractelement <2 x i32> %2830, i32 1
  store i32 %2838, i32* %3789, align 1, !tbaa !2452
  %2839 = load <2 x float>, <2 x float>* %3790, align 1
  %2840 = load <2 x i32>, <2 x i32>* %3791, align 1
  %2841 = load <2 x float>, <2 x float>* %3785, align 1
  %2842 = extractelement <2 x float> %2839, i32 0
  %2843 = extractelement <2 x float> %2841, i32 0
  %2844 = fadd float %2842, %2843
  store float %2844, float* %3770, align 1, !tbaa !2452
  %2845 = bitcast <2 x float> %2839 to <2 x i32>
  %2846 = extractelement <2 x i32> %2845, i32 1
  store i32 %2846, i32* %3792, align 1, !tbaa !2452
  %2847 = extractelement <2 x i32> %2840, i32 0
  store i32 %2847, i32* %3793, align 1, !tbaa !2452
  %2848 = extractelement <2 x i32> %2840, i32 1
  store i32 %2848, i32* %3794, align 1, !tbaa !2452
  %2849 = load i64, i64* %RBP, align 8
  %2850 = add i64 %2849, -32
  %2851 = add i64 %3478, 115
  store i64 %2851, i64* %PC, align 8
  %2852 = inttoptr i64 %2850 to i64*
  %2853 = load i64, i64* %2852, align 8
  store i64 %2853, i64* %RAX, align 8, !tbaa !2428
  %2854 = add i64 %2849, -44
  %2855 = add i64 %3478, 118
  store i64 %2855, i64* %PC, align 8
  %2856 = inttoptr i64 %2854 to i32*
  %2857 = load i32, i32* %2856, align 4
  %2858 = add i32 %2857, -1
  %2859 = zext i32 %2858 to i64
  store i64 %2859, i64* %RDX, align 8, !tbaa !2428
  %2860 = icmp eq i32 %2857, 0
  %2861 = zext i1 %2860 to i8
  store i8 %2861, i8* %.pre-phi, align 1, !tbaa !2432
  %2862 = and i32 %2858, 255
  %2863 = tail call i32 @llvm.ctpop.i32(i32 %2862) #8
  %2864 = trunc i32 %2863 to i8
  %2865 = and i8 %2864, 1
  %2866 = xor i8 %2865, 1
  store i8 %2866, i8* %.pre-phi23, align 1, !tbaa !2446
  %2867 = xor i32 %2857, %2858
  %2868 = lshr i32 %2867, 4
  %2869 = trunc i32 %2868 to i8
  %2870 = and i8 %2869, 1
  store i8 %2870, i8* %.pre-phi25, align 1, !tbaa !2450
  %2871 = icmp eq i32 %2858, 0
  %2872 = zext i1 %2871 to i8
  store i8 %2872, i8* %.pre-phi27, align 1, !tbaa !2447
  %2873 = lshr i32 %2858, 31
  %2874 = trunc i32 %2873 to i8
  store i8 %2874, i8* %.pre-phi29, align 1, !tbaa !2448
  %2875 = lshr i32 %2857, 31
  %2876 = xor i32 %2873, %2875
  %2877 = add nuw nsw i32 %2876, %2875
  %2878 = icmp eq i32 %2877, 2
  %2879 = zext i1 %2878 to i8
  store i8 %2879, i8* %.pre-phi31, align 1, !tbaa !2449
  %2880 = sext i32 %2858 to i64
  store i64 %2880, i64* %RCX, align 8, !tbaa !2428
  %2881 = shl nsw i64 %2880, 2
  %2882 = add i64 %2881, %2853
  %2883 = add i64 %3478, 129
  store i64 %2883, i64* %PC, align 8
  %2884 = inttoptr i64 %2882 to i32*
  %2885 = load i32, i32* %2884, align 4
  store i32 %2885, i32* %2640, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3782, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3784, align 1, !tbaa !2452
  %2886 = add i64 %2849, -40
  %2887 = add i64 %3478, 133
  store i64 %2887, i64* %PC, align 8
  %2888 = inttoptr i64 %2886 to i64*
  %2889 = load i64, i64* %2888, align 8
  store i64 %2889, i64* %RAX, align 8, !tbaa !2428
  %2890 = add i64 %2849, -24
  %2891 = add i64 %3478, 136
  store i64 %2891, i64* %PC, align 8
  %2892 = inttoptr i64 %2890 to i32*
  %2893 = load i32, i32* %2892, align 4
  %2894 = zext i32 %2893 to i64
  store i64 %2894, i64* %RDX, align 8, !tbaa !2428
  %2895 = add i64 %3478, 139
  store i64 %2895, i64* %PC, align 8
  %2896 = load i32, i32* %2856, align 4
  %2897 = add i32 %2896, -1
  %2898 = zext i32 %2897 to i64
  store i64 %2898, i64* %RSI, align 8, !tbaa !2428
  %2899 = sext i32 %2893 to i64
  %2900 = sext i32 %2897 to i64
  %2901 = mul nsw i64 %2900, %2899
  %2902 = trunc i64 %2901 to i32
  %2903 = and i64 %2901, 4294967295
  store i64 %2903, i64* %RDX, align 8, !tbaa !2428
  %2904 = shl i64 %2901, 32
  %2905 = ashr exact i64 %2904, 32
  %2906 = icmp ne i64 %2905, %2901
  %2907 = zext i1 %2906 to i8
  store i8 %2907, i8* %.pre-phi, align 1, !tbaa !2432
  %2908 = and i32 %2902, 255
  %2909 = tail call i32 @llvm.ctpop.i32(i32 %2908) #8
  %2910 = trunc i32 %2909 to i8
  %2911 = and i8 %2910, 1
  %2912 = xor i8 %2911, 1
  store i8 %2912, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %2913 = lshr i32 %2902, 31
  %2914 = trunc i32 %2913 to i8
  store i8 %2914, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %2907, i8* %.pre-phi31, align 1, !tbaa !2449
  %2915 = load i64, i64* %RBP, align 8
  %2916 = add i64 %2915, -48
  %2917 = add i64 %3478, 148
  store i64 %2917, i64* %PC, align 8
  %2918 = inttoptr i64 %2916 to i32*
  %2919 = load i32, i32* %2918, align 4
  %2920 = add i32 %2919, %2902
  %2921 = zext i32 %2920 to i64
  store i64 %2921, i64* %RDX, align 8, !tbaa !2428
  %2922 = icmp ult i32 %2920, %2902
  %2923 = icmp ult i32 %2920, %2919
  %2924 = or i1 %2922, %2923
  %2925 = zext i1 %2924 to i8
  store i8 %2925, i8* %.pre-phi, align 1, !tbaa !2432
  %2926 = and i32 %2920, 255
  %2927 = tail call i32 @llvm.ctpop.i32(i32 %2926) #8
  %2928 = trunc i32 %2927 to i8
  %2929 = and i8 %2928, 1
  %2930 = xor i8 %2929, 1
  store i8 %2930, i8* %.pre-phi23, align 1, !tbaa !2446
  %2931 = xor i32 %2919, %2902
  %2932 = xor i32 %2931, %2920
  %2933 = lshr i32 %2932, 4
  %2934 = trunc i32 %2933 to i8
  %2935 = and i8 %2934, 1
  store i8 %2935, i8* %.pre-phi25, align 1, !tbaa !2450
  %2936 = icmp eq i32 %2920, 0
  %2937 = zext i1 %2936 to i8
  store i8 %2937, i8* %.pre-phi27, align 1, !tbaa !2447
  %2938 = lshr i32 %2920, 31
  %2939 = trunc i32 %2938 to i8
  store i8 %2939, i8* %.pre-phi29, align 1, !tbaa !2448
  %2940 = lshr i32 %2919, 31
  %2941 = xor i32 %2938, %2913
  %2942 = xor i32 %2938, %2940
  %2943 = add nuw nsw i32 %2941, %2942
  %2944 = icmp eq i32 %2943, 2
  %2945 = zext i1 %2944 to i8
  store i8 %2945, i8* %.pre-phi31, align 1, !tbaa !2449
  %2946 = sext i32 %2920 to i64
  store i64 %2946, i64* %RCX, align 8, !tbaa !2428
  %2947 = load i64, i64* %RAX, align 8
  %2948 = shl nsw i64 %2946, 2
  %2949 = add i64 %2948, %2947
  %2950 = add i64 %3478, 156
  store i64 %2950, i64* %PC, align 8
  %2951 = load <2 x float>, <2 x float>* %3785, align 1
  %2952 = load <2 x i32>, <2 x i32>* %3786, align 1
  %2953 = inttoptr i64 %2949 to float*
  %2954 = load float, float* %2953, align 4
  %2955 = extractelement <2 x float> %2951, i32 0
  %2956 = fmul float %2955, %2954
  store float %2956, float* %3778, align 1, !tbaa !2452
  %2957 = bitcast <2 x float> %2951 to <2 x i32>
  %2958 = extractelement <2 x i32> %2957, i32 1
  store i32 %2958, i32* %3787, align 1, !tbaa !2452
  %2959 = extractelement <2 x i32> %2952, i32 0
  store i32 %2959, i32* %3788, align 1, !tbaa !2452
  %2960 = extractelement <2 x i32> %2952, i32 1
  store i32 %2960, i32* %3789, align 1, !tbaa !2452
  %2961 = load <2 x float>, <2 x float>* %3790, align 1
  %2962 = load <2 x i32>, <2 x i32>* %3791, align 1
  %2963 = load <2 x float>, <2 x float>* %3785, align 1
  %2964 = extractelement <2 x float> %2961, i32 0
  %2965 = extractelement <2 x float> %2963, i32 0
  %2966 = fadd float %2964, %2965
  store float %2966, float* %3770, align 1, !tbaa !2452
  %2967 = bitcast <2 x float> %2961 to <2 x i32>
  %2968 = extractelement <2 x i32> %2967, i32 1
  store i32 %2968, i32* %3792, align 1, !tbaa !2452
  %2969 = extractelement <2 x i32> %2962, i32 0
  store i32 %2969, i32* %3793, align 1, !tbaa !2452
  %2970 = extractelement <2 x i32> %2962, i32 1
  store i32 %2970, i32* %3794, align 1, !tbaa !2452
  %2971 = add i64 %2915, -32
  %2972 = add i64 %3478, 164
  store i64 %2972, i64* %PC, align 8
  %2973 = inttoptr i64 %2971 to i64*
  %2974 = load i64, i64* %2973, align 8
  store i64 %2974, i64* %RAX, align 8, !tbaa !2428
  %2975 = add i64 %2915, -44
  %2976 = add i64 %3478, 168
  store i64 %2976, i64* %PC, align 8
  %2977 = inttoptr i64 %2975 to i32*
  %2978 = load i32, i32* %2977, align 4
  %2979 = sext i32 %2978 to i64
  store i64 %2979, i64* %RCX, align 8, !tbaa !2428
  %2980 = shl nsw i64 %2979, 2
  %2981 = add i64 %2980, %2974
  %2982 = add i64 %3478, 173
  store i64 %2982, i64* %PC, align 8
  %2983 = inttoptr i64 %2981 to i32*
  %2984 = load i32, i32* %2983, align 4
  store i32 %2984, i32* %2640, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3780, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3782, align 1, !tbaa !2452
  store float 0.000000e+00, float* %3784, align 1, !tbaa !2452
  %2985 = load i64, i64* %RBP, align 8
  %2986 = add i64 %2985, -40
  %2987 = add i64 %3478, 177
  store i64 %2987, i64* %PC, align 8
  %2988 = inttoptr i64 %2986 to i64*
  %2989 = load i64, i64* %2988, align 8
  store i64 %2989, i64* %RAX, align 8, !tbaa !2428
  %2990 = add i64 %2985, -24
  %2991 = add i64 %3478, 180
  store i64 %2991, i64* %PC, align 8
  %2992 = inttoptr i64 %2990 to i32*
  %2993 = load i32, i32* %2992, align 4
  %2994 = zext i32 %2993 to i64
  store i64 %2994, i64* %RDX, align 8, !tbaa !2428
  %2995 = add i64 %2985, -44
  %2996 = add i64 %3478, 184
  store i64 %2996, i64* %PC, align 8
  %2997 = inttoptr i64 %2995 to i32*
  %2998 = load i32, i32* %2997, align 4
  %2999 = sext i32 %2993 to i64
  %3000 = sext i32 %2998 to i64
  %3001 = mul nsw i64 %3000, %2999
  %3002 = trunc i64 %3001 to i32
  %3003 = and i64 %3001, 4294967295
  store i64 %3003, i64* %RDX, align 8, !tbaa !2428
  %3004 = shl i64 %3001, 32
  %3005 = ashr exact i64 %3004, 32
  %3006 = icmp ne i64 %3005, %3001
  %3007 = zext i1 %3006 to i8
  store i8 %3007, i8* %.pre-phi, align 1, !tbaa !2432
  %3008 = and i32 %3002, 255
  %3009 = tail call i32 @llvm.ctpop.i32(i32 %3008) #8
  %3010 = trunc i32 %3009 to i8
  %3011 = and i8 %3010, 1
  %3012 = xor i8 %3011, 1
  store i8 %3012, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3013 = lshr i32 %3002, 31
  %3014 = trunc i32 %3013 to i8
  store i8 %3014, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3007, i8* %.pre-phi31, align 1, !tbaa !2449
  %3015 = add i64 %2985, -48
  %3016 = add i64 %3478, 187
  store i64 %3016, i64* %PC, align 8
  %3017 = inttoptr i64 %3015 to i32*
  %3018 = load i32, i32* %3017, align 4
  %3019 = add i32 %3018, %3002
  %3020 = zext i32 %3019 to i64
  store i64 %3020, i64* %RDX, align 8, !tbaa !2428
  %3021 = icmp ult i32 %3019, %3002
  %3022 = icmp ult i32 %3019, %3018
  %3023 = or i1 %3021, %3022
  %3024 = zext i1 %3023 to i8
  store i8 %3024, i8* %.pre-phi, align 1, !tbaa !2432
  %3025 = and i32 %3019, 255
  %3026 = tail call i32 @llvm.ctpop.i32(i32 %3025) #8
  %3027 = trunc i32 %3026 to i8
  %3028 = and i8 %3027, 1
  %3029 = xor i8 %3028, 1
  store i8 %3029, i8* %.pre-phi23, align 1, !tbaa !2446
  %3030 = xor i32 %3018, %3002
  %3031 = xor i32 %3030, %3019
  %3032 = lshr i32 %3031, 4
  %3033 = trunc i32 %3032 to i8
  %3034 = and i8 %3033, 1
  store i8 %3034, i8* %.pre-phi25, align 1, !tbaa !2450
  %3035 = icmp eq i32 %3019, 0
  %3036 = zext i1 %3035 to i8
  store i8 %3036, i8* %.pre-phi27, align 1, !tbaa !2447
  %3037 = lshr i32 %3019, 31
  %3038 = trunc i32 %3037 to i8
  store i8 %3038, i8* %.pre-phi29, align 1, !tbaa !2448
  %3039 = lshr i32 %3018, 31
  %3040 = xor i32 %3037, %3013
  %3041 = xor i32 %3037, %3039
  %3042 = add nuw nsw i32 %3040, %3041
  %3043 = icmp eq i32 %3042, 2
  %3044 = zext i1 %3043 to i8
  store i8 %3044, i8* %.pre-phi31, align 1, !tbaa !2449
  %3045 = sext i32 %3019 to i64
  store i64 %3045, i64* %RCX, align 8, !tbaa !2428
  %3046 = shl nsw i64 %3045, 2
  %3047 = add i64 %3046, %2989
  %3048 = add i64 %3478, 195
  store i64 %3048, i64* %PC, align 8
  %3049 = load <2 x float>, <2 x float>* %3785, align 1
  %3050 = load <2 x i32>, <2 x i32>* %3786, align 1
  %3051 = inttoptr i64 %3047 to float*
  %3052 = load float, float* %3051, align 4
  %3053 = extractelement <2 x float> %3049, i32 0
  %3054 = fmul float %3053, %3052
  store float %3054, float* %3778, align 1, !tbaa !2452
  %3055 = bitcast <2 x float> %3049 to <2 x i32>
  %3056 = extractelement <2 x i32> %3055, i32 1
  store i32 %3056, i32* %3787, align 1, !tbaa !2452
  %3057 = extractelement <2 x i32> %3050, i32 0
  store i32 %3057, i32* %3788, align 1, !tbaa !2452
  %3058 = extractelement <2 x i32> %3050, i32 1
  store i32 %3058, i32* %3789, align 1, !tbaa !2452
  %3059 = load <2 x float>, <2 x float>* %3790, align 1
  %3060 = load <2 x i32>, <2 x i32>* %3791, align 1
  %3061 = load <2 x float>, <2 x float>* %3785, align 1
  %3062 = extractelement <2 x float> %3059, i32 0
  %3063 = extractelement <2 x float> %3061, i32 0
  %3064 = fadd float %3062, %3063
  store float %3064, float* %3770, align 1, !tbaa !2452
  %3065 = bitcast <2 x float> %3059 to <2 x i32>
  %3066 = extractelement <2 x i32> %3065, i32 1
  store i32 %3066, i32* %3792, align 1, !tbaa !2452
  %3067 = extractelement <2 x i32> %3060, i32 0
  store i32 %3067, i32* %3793, align 1, !tbaa !2452
  %3068 = extractelement <2 x i32> %3060, i32 1
  store i32 %3068, i32* %3794, align 1, !tbaa !2452
  %3069 = load i64, i64* %RBP, align 8
  %3070 = add i64 %3069, -16
  %3071 = add i64 %3478, 203
  store i64 %3071, i64* %PC, align 8
  %3072 = inttoptr i64 %3070 to i64*
  %3073 = load i64, i64* %3072, align 8
  store i64 %3073, i64* %RAX, align 8, !tbaa !2428
  %3074 = add i64 %3069, -48
  %3075 = add i64 %3478, 207
  store i64 %3075, i64* %PC, align 8
  %3076 = inttoptr i64 %3074 to i32*
  %3077 = load i32, i32* %3076, align 4
  %3078 = sext i32 %3077 to i64
  store i64 %3078, i64* %RCX, align 8, !tbaa !2428
  %3079 = shl nsw i64 %3078, 2
  %3080 = add i64 %3079, %3073
  %3081 = add i64 %3478, 212
  store i64 %3081, i64* %PC, align 8
  %3082 = load <2 x float>, <2 x float>* %3790, align 1
  %3083 = extractelement <2 x float> %3082, i32 0
  %3084 = inttoptr i64 %3080 to float*
  store float %3083, float* %3084, align 4
  %3085 = load i64, i64* %RBP, align 8
  %3086 = add i64 %3085, -48
  %3087 = load i64, i64* %PC, align 8
  %3088 = add i64 %3087, 3
  store i64 %3088, i64* %PC, align 8
  %3089 = inttoptr i64 %3086 to i32*
  %3090 = load i32, i32* %3089, align 4
  %3091 = add i32 %3090, 1
  %3092 = zext i32 %3091 to i64
  store i64 %3092, i64* %RAX, align 8, !tbaa !2428
  %3093 = icmp eq i32 %3090, -1
  %3094 = icmp eq i32 %3091, 0
  %3095 = or i1 %3093, %3094
  %3096 = zext i1 %3095 to i8
  store i8 %3096, i8* %.pre-phi, align 1, !tbaa !2432
  %3097 = and i32 %3091, 255
  %3098 = tail call i32 @llvm.ctpop.i32(i32 %3097) #8
  %3099 = trunc i32 %3098 to i8
  %3100 = and i8 %3099, 1
  %3101 = xor i8 %3100, 1
  store i8 %3101, i8* %.pre-phi23, align 1, !tbaa !2446
  %3102 = xor i32 %3090, %3091
  %3103 = lshr i32 %3102, 4
  %3104 = trunc i32 %3103 to i8
  %3105 = and i8 %3104, 1
  store i8 %3105, i8* %.pre-phi25, align 1, !tbaa !2450
  %3106 = zext i1 %3094 to i8
  store i8 %3106, i8* %.pre-phi27, align 1, !tbaa !2447
  %3107 = lshr i32 %3091, 31
  %3108 = trunc i32 %3107 to i8
  store i8 %3108, i8* %.pre-phi29, align 1, !tbaa !2448
  %3109 = lshr i32 %3090, 31
  %3110 = xor i32 %3107, %3109
  %3111 = add nuw nsw i32 %3110, %3107
  %3112 = icmp eq i32 %3111, 2
  %3113 = zext i1 %3112 to i8
  store i8 %3113, i8* %.pre-phi31, align 1, !tbaa !2449
  %3114 = add i64 %3087, 9
  store i64 %3114, i64* %PC, align 8
  store i32 %3091, i32* %3089, align 4
  %3115 = load i64, i64* %PC, align 8
  %3116 = add i64 %3115, -233
  store i64 %3116, i64* %PC, align 8, !tbaa !2428
  br label %block_4021aa

block_4020b4:                                     ; preds = %block_402059
  %3117 = add i64 %3665, 5
  store i64 %3117, i64* %PC, align 8, !tbaa !2428
  br label %block_4020b9

block_4020f5:                                     ; preds = %block_4020e9
  %3118 = add i64 %3553, -16
  %3119 = add i64 %3589, 4
  store i64 %3119, i64* %PC, align 8
  %3120 = inttoptr i64 %3118 to i64*
  %3121 = load i64, i64* %3120, align 8
  store i64 %3121, i64* %RAX, align 8, !tbaa !2428
  %3122 = add i64 %3589, 8
  store i64 %3122, i64* %PC, align 8
  %3123 = load i32, i32* %3556, align 4
  %3124 = sext i32 %3123 to i64
  store i64 %3124, i64* %RCX, align 8, !tbaa !2428
  %3125 = shl nsw i64 %3124, 2
  %3126 = add i64 %3125, %3121
  %3127 = add i64 %3589, 13
  store i64 %3127, i64* %PC, align 8
  %3128 = inttoptr i64 %3126 to i32*
  %3129 = load i32, i32* %3128, align 4
  %3130 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %3129, i32* %3130, align 1, !tbaa !2452
  store float 0.000000e+00, float* %164, align 1, !tbaa !2452
  store float 0.000000e+00, float* %166, align 1, !tbaa !2452
  store float 0.000000e+00, float* %168, align 1, !tbaa !2452
  %3131 = add i64 %3553, -32
  %3132 = add i64 %3589, 17
  store i64 %3132, i64* %PC, align 8
  %3133 = inttoptr i64 %3131 to i64*
  %3134 = load i64, i64* %3133, align 8
  store i64 %3134, i64* %RAX, align 8, !tbaa !2428
  %3135 = add i64 %3553, -44
  %3136 = add i64 %3589, 20
  store i64 %3136, i64* %PC, align 8
  %3137 = inttoptr i64 %3135 to i32*
  %3138 = load i32, i32* %3137, align 4
  %3139 = add i32 %3138, -1
  %3140 = zext i32 %3139 to i64
  store i64 %3140, i64* %RDX, align 8, !tbaa !2428
  %3141 = icmp eq i32 %3138, 0
  %3142 = zext i1 %3141 to i8
  store i8 %3142, i8* %.pre-phi, align 1, !tbaa !2432
  %3143 = and i32 %3139, 255
  %3144 = tail call i32 @llvm.ctpop.i32(i32 %3143) #8
  %3145 = trunc i32 %3144 to i8
  %3146 = and i8 %3145, 1
  %3147 = xor i8 %3146, 1
  store i8 %3147, i8* %.pre-phi23, align 1, !tbaa !2446
  %3148 = xor i32 %3138, %3139
  %3149 = lshr i32 %3148, 4
  %3150 = trunc i32 %3149 to i8
  %3151 = and i8 %3150, 1
  store i8 %3151, i8* %.pre-phi25, align 1, !tbaa !2450
  %3152 = icmp eq i32 %3139, 0
  %3153 = zext i1 %3152 to i8
  store i8 %3153, i8* %.pre-phi27, align 1, !tbaa !2447
  %3154 = lshr i32 %3139, 31
  %3155 = trunc i32 %3154 to i8
  store i8 %3155, i8* %.pre-phi29, align 1, !tbaa !2448
  %3156 = lshr i32 %3138, 31
  %3157 = xor i32 %3154, %3156
  %3158 = add nuw nsw i32 %3157, %3156
  %3159 = icmp eq i32 %3158, 2
  %3160 = zext i1 %3159 to i8
  store i8 %3160, i8* %.pre-phi31, align 1, !tbaa !2449
  %3161 = sext i32 %3139 to i64
  store i64 %3161, i64* %RCX, align 8, !tbaa !2428
  %3162 = shl nsw i64 %3161, 2
  %3163 = add i64 %3162, %3134
  %3164 = add i64 %3589, 31
  store i64 %3164, i64* %PC, align 8
  %3165 = inttoptr i64 %3163 to i32*
  %3166 = load i32, i32* %3165, align 4
  %3167 = bitcast %union.VectorReg* %8 to i32*
  store i32 %3166, i32* %3167, align 1, !tbaa !2452
  store float 0.000000e+00, float* %172, align 1, !tbaa !2452
  store float 0.000000e+00, float* %174, align 1, !tbaa !2452
  store float 0.000000e+00, float* %176, align 1, !tbaa !2452
  %3168 = add i64 %3553, -40
  %3169 = add i64 %3589, 35
  store i64 %3169, i64* %PC, align 8
  %3170 = inttoptr i64 %3168 to i64*
  %3171 = load i64, i64* %3170, align 8
  store i64 %3171, i64* %RAX, align 8, !tbaa !2428
  %3172 = add i64 %3553, -24
  %3173 = add i64 %3589, 38
  store i64 %3173, i64* %PC, align 8
  %3174 = inttoptr i64 %3172 to i32*
  %3175 = load i32, i32* %3174, align 4
  %3176 = zext i32 %3175 to i64
  store i64 %3176, i64* %RDX, align 8, !tbaa !2428
  %3177 = add i64 %3589, 41
  store i64 %3177, i64* %PC, align 8
  %3178 = load i32, i32* %3137, align 4
  %3179 = add i32 %3178, -1
  %3180 = zext i32 %3179 to i64
  store i64 %3180, i64* %RSI, align 8, !tbaa !2428
  %3181 = sext i32 %3175 to i64
  %3182 = sext i32 %3179 to i64
  %3183 = mul nsw i64 %3182, %3181
  %3184 = trunc i64 %3183 to i32
  %3185 = and i64 %3183, 4294967295
  store i64 %3185, i64* %RDX, align 8, !tbaa !2428
  %3186 = shl i64 %3183, 32
  %3187 = ashr exact i64 %3186, 32
  %3188 = icmp ne i64 %3187, %3183
  %3189 = zext i1 %3188 to i8
  store i8 %3189, i8* %.pre-phi, align 1, !tbaa !2432
  %3190 = and i32 %3184, 255
  %3191 = tail call i32 @llvm.ctpop.i32(i32 %3190) #8
  %3192 = trunc i32 %3191 to i8
  %3193 = and i8 %3192, 1
  %3194 = xor i8 %3193, 1
  store i8 %3194, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3195 = lshr i32 %3184, 31
  %3196 = trunc i32 %3195 to i8
  store i8 %3196, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3189, i8* %.pre-phi31, align 1, !tbaa !2449
  %3197 = load i64, i64* %RBP, align 8
  %3198 = add i64 %3197, -48
  %3199 = add i64 %3589, 50
  store i64 %3199, i64* %PC, align 8
  %3200 = inttoptr i64 %3198 to i32*
  %3201 = load i32, i32* %3200, align 4
  %3202 = add i32 %3201, %3184
  %3203 = zext i32 %3202 to i64
  store i64 %3203, i64* %RDX, align 8, !tbaa !2428
  %3204 = icmp ult i32 %3202, %3184
  %3205 = icmp ult i32 %3202, %3201
  %3206 = or i1 %3204, %3205
  %3207 = zext i1 %3206 to i8
  store i8 %3207, i8* %.pre-phi, align 1, !tbaa !2432
  %3208 = and i32 %3202, 255
  %3209 = tail call i32 @llvm.ctpop.i32(i32 %3208) #8
  %3210 = trunc i32 %3209 to i8
  %3211 = and i8 %3210, 1
  %3212 = xor i8 %3211, 1
  store i8 %3212, i8* %.pre-phi23, align 1, !tbaa !2446
  %3213 = xor i32 %3201, %3184
  %3214 = xor i32 %3213, %3202
  %3215 = lshr i32 %3214, 4
  %3216 = trunc i32 %3215 to i8
  %3217 = and i8 %3216, 1
  store i8 %3217, i8* %.pre-phi25, align 1, !tbaa !2450
  %3218 = icmp eq i32 %3202, 0
  %3219 = zext i1 %3218 to i8
  store i8 %3219, i8* %.pre-phi27, align 1, !tbaa !2447
  %3220 = lshr i32 %3202, 31
  %3221 = trunc i32 %3220 to i8
  store i8 %3221, i8* %.pre-phi29, align 1, !tbaa !2448
  %3222 = lshr i32 %3201, 31
  %3223 = xor i32 %3220, %3195
  %3224 = xor i32 %3220, %3222
  %3225 = add nuw nsw i32 %3223, %3224
  %3226 = icmp eq i32 %3225, 2
  %3227 = zext i1 %3226 to i8
  store i8 %3227, i8* %.pre-phi31, align 1, !tbaa !2449
  %3228 = sext i32 %3202 to i64
  store i64 %3228, i64* %RCX, align 8, !tbaa !2428
  %3229 = load i64, i64* %RAX, align 8
  %3230 = shl nsw i64 %3228, 2
  %3231 = add i64 %3230, %3229
  %3232 = add i64 %3589, 58
  store i64 %3232, i64* %PC, align 8
  %3233 = load <2 x float>, <2 x float>* %177, align 1
  %3234 = load <2 x i32>, <2 x i32>* %178, align 1
  %3235 = inttoptr i64 %3231 to float*
  %3236 = load float, float* %3235, align 4
  %3237 = extractelement <2 x float> %3233, i32 0
  %3238 = fmul float %3237, %3236
  store float %3238, float* %170, align 1, !tbaa !2452
  %3239 = bitcast <2 x float> %3233 to <2 x i32>
  %3240 = extractelement <2 x i32> %3239, i32 1
  store i32 %3240, i32* %179, align 1, !tbaa !2452
  %3241 = extractelement <2 x i32> %3234, i32 0
  store i32 %3241, i32* %180, align 1, !tbaa !2452
  %3242 = extractelement <2 x i32> %3234, i32 1
  store i32 %3242, i32* %181, align 1, !tbaa !2452
  %3243 = load <2 x float>, <2 x float>* %182, align 1
  %3244 = load <2 x i32>, <2 x i32>* %183, align 1
  %3245 = load <2 x float>, <2 x float>* %177, align 1
  %3246 = extractelement <2 x float> %3243, i32 0
  %3247 = extractelement <2 x float> %3245, i32 0
  %3248 = fadd float %3246, %3247
  store float %3248, float* %162, align 1, !tbaa !2452
  %3249 = bitcast <2 x float> %3243 to <2 x i32>
  %3250 = extractelement <2 x i32> %3249, i32 1
  store i32 %3250, i32* %184, align 1, !tbaa !2452
  %3251 = extractelement <2 x i32> %3244, i32 0
  store i32 %3251, i32* %185, align 1, !tbaa !2452
  %3252 = extractelement <2 x i32> %3244, i32 1
  store i32 %3252, i32* %186, align 1, !tbaa !2452
  %3253 = add i64 %3197, -32
  %3254 = add i64 %3589, 66
  store i64 %3254, i64* %PC, align 8
  %3255 = inttoptr i64 %3253 to i64*
  %3256 = load i64, i64* %3255, align 8
  store i64 %3256, i64* %RAX, align 8, !tbaa !2428
  %3257 = add i64 %3197, -44
  %3258 = add i64 %3589, 70
  store i64 %3258, i64* %PC, align 8
  %3259 = inttoptr i64 %3257 to i32*
  %3260 = load i32, i32* %3259, align 4
  %3261 = sext i32 %3260 to i64
  store i64 %3261, i64* %RCX, align 8, !tbaa !2428
  %3262 = shl nsw i64 %3261, 2
  %3263 = add i64 %3262, %3256
  %3264 = add i64 %3589, 75
  store i64 %3264, i64* %PC, align 8
  %3265 = inttoptr i64 %3263 to i32*
  %3266 = load i32, i32* %3265, align 4
  store i32 %3266, i32* %3167, align 1, !tbaa !2452
  store float 0.000000e+00, float* %172, align 1, !tbaa !2452
  store float 0.000000e+00, float* %174, align 1, !tbaa !2452
  store float 0.000000e+00, float* %176, align 1, !tbaa !2452
  %3267 = load i64, i64* %RBP, align 8
  %3268 = add i64 %3267, -40
  %3269 = add i64 %3589, 79
  store i64 %3269, i64* %PC, align 8
  %3270 = inttoptr i64 %3268 to i64*
  %3271 = load i64, i64* %3270, align 8
  store i64 %3271, i64* %RAX, align 8, !tbaa !2428
  %3272 = add i64 %3267, -24
  %3273 = add i64 %3589, 82
  store i64 %3273, i64* %PC, align 8
  %3274 = inttoptr i64 %3272 to i32*
  %3275 = load i32, i32* %3274, align 4
  %3276 = zext i32 %3275 to i64
  store i64 %3276, i64* %RDX, align 8, !tbaa !2428
  %3277 = add i64 %3267, -44
  %3278 = add i64 %3589, 86
  store i64 %3278, i64* %PC, align 8
  %3279 = inttoptr i64 %3277 to i32*
  %3280 = load i32, i32* %3279, align 4
  %3281 = sext i32 %3275 to i64
  %3282 = sext i32 %3280 to i64
  %3283 = mul nsw i64 %3282, %3281
  %3284 = trunc i64 %3283 to i32
  %3285 = and i64 %3283, 4294967295
  store i64 %3285, i64* %RDX, align 8, !tbaa !2428
  %3286 = shl i64 %3283, 32
  %3287 = ashr exact i64 %3286, 32
  %3288 = icmp ne i64 %3287, %3283
  %3289 = zext i1 %3288 to i8
  store i8 %3289, i8* %.pre-phi, align 1, !tbaa !2432
  %3290 = and i32 %3284, 255
  %3291 = tail call i32 @llvm.ctpop.i32(i32 %3290) #8
  %3292 = trunc i32 %3291 to i8
  %3293 = and i8 %3292, 1
  %3294 = xor i8 %3293, 1
  store i8 %3294, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3295 = lshr i32 %3284, 31
  %3296 = trunc i32 %3295 to i8
  store i8 %3296, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3289, i8* %.pre-phi31, align 1, !tbaa !2449
  %3297 = add i64 %3267, -48
  %3298 = add i64 %3589, 89
  store i64 %3298, i64* %PC, align 8
  %3299 = inttoptr i64 %3297 to i32*
  %3300 = load i32, i32* %3299, align 4
  %3301 = add i32 %3300, %3284
  %3302 = zext i32 %3301 to i64
  store i64 %3302, i64* %RDX, align 8, !tbaa !2428
  %3303 = icmp ult i32 %3301, %3284
  %3304 = icmp ult i32 %3301, %3300
  %3305 = or i1 %3303, %3304
  %3306 = zext i1 %3305 to i8
  store i8 %3306, i8* %.pre-phi, align 1, !tbaa !2432
  %3307 = and i32 %3301, 255
  %3308 = tail call i32 @llvm.ctpop.i32(i32 %3307) #8
  %3309 = trunc i32 %3308 to i8
  %3310 = and i8 %3309, 1
  %3311 = xor i8 %3310, 1
  store i8 %3311, i8* %.pre-phi23, align 1, !tbaa !2446
  %3312 = xor i32 %3300, %3284
  %3313 = xor i32 %3312, %3301
  %3314 = lshr i32 %3313, 4
  %3315 = trunc i32 %3314 to i8
  %3316 = and i8 %3315, 1
  store i8 %3316, i8* %.pre-phi25, align 1, !tbaa !2450
  %3317 = icmp eq i32 %3301, 0
  %3318 = zext i1 %3317 to i8
  store i8 %3318, i8* %.pre-phi27, align 1, !tbaa !2447
  %3319 = lshr i32 %3301, 31
  %3320 = trunc i32 %3319 to i8
  store i8 %3320, i8* %.pre-phi29, align 1, !tbaa !2448
  %3321 = lshr i32 %3300, 31
  %3322 = xor i32 %3319, %3295
  %3323 = xor i32 %3319, %3321
  %3324 = add nuw nsw i32 %3322, %3323
  %3325 = icmp eq i32 %3324, 2
  %3326 = zext i1 %3325 to i8
  store i8 %3326, i8* %.pre-phi31, align 1, !tbaa !2449
  %3327 = sext i32 %3301 to i64
  store i64 %3327, i64* %RCX, align 8, !tbaa !2428
  %3328 = shl nsw i64 %3327, 2
  %3329 = add i64 %3328, %3271
  %3330 = add i64 %3589, 97
  store i64 %3330, i64* %PC, align 8
  %3331 = load <2 x float>, <2 x float>* %177, align 1
  %3332 = load <2 x i32>, <2 x i32>* %178, align 1
  %3333 = inttoptr i64 %3329 to float*
  %3334 = load float, float* %3333, align 4
  %3335 = extractelement <2 x float> %3331, i32 0
  %3336 = fmul float %3335, %3334
  store float %3336, float* %170, align 1, !tbaa !2452
  %3337 = bitcast <2 x float> %3331 to <2 x i32>
  %3338 = extractelement <2 x i32> %3337, i32 1
  store i32 %3338, i32* %179, align 1, !tbaa !2452
  %3339 = extractelement <2 x i32> %3332, i32 0
  store i32 %3339, i32* %180, align 1, !tbaa !2452
  %3340 = extractelement <2 x i32> %3332, i32 1
  store i32 %3340, i32* %181, align 1, !tbaa !2452
  %3341 = load <2 x float>, <2 x float>* %182, align 1
  %3342 = load <2 x i32>, <2 x i32>* %183, align 1
  %3343 = load <2 x float>, <2 x float>* %177, align 1
  %3344 = extractelement <2 x float> %3341, i32 0
  %3345 = extractelement <2 x float> %3343, i32 0
  %3346 = fadd float %3344, %3345
  store float %3346, float* %162, align 1, !tbaa !2452
  %3347 = bitcast <2 x float> %3341 to <2 x i32>
  %3348 = extractelement <2 x i32> %3347, i32 1
  store i32 %3348, i32* %184, align 1, !tbaa !2452
  %3349 = extractelement <2 x i32> %3342, i32 0
  store i32 %3349, i32* %185, align 1, !tbaa !2452
  %3350 = extractelement <2 x i32> %3342, i32 1
  store i32 %3350, i32* %186, align 1, !tbaa !2452
  %3351 = load i64, i64* %RBP, align 8
  %3352 = add i64 %3351, -16
  %3353 = add i64 %3589, 105
  store i64 %3353, i64* %PC, align 8
  %3354 = inttoptr i64 %3352 to i64*
  %3355 = load i64, i64* %3354, align 8
  store i64 %3355, i64* %RAX, align 8, !tbaa !2428
  %3356 = add i64 %3351, -48
  %3357 = add i64 %3589, 109
  store i64 %3357, i64* %PC, align 8
  %3358 = inttoptr i64 %3356 to i32*
  %3359 = load i32, i32* %3358, align 4
  %3360 = sext i32 %3359 to i64
  store i64 %3360, i64* %RCX, align 8, !tbaa !2428
  %3361 = shl nsw i64 %3360, 2
  %3362 = add i64 %3361, %3355
  %3363 = add i64 %3589, 114
  store i64 %3363, i64* %PC, align 8
  %3364 = load <2 x float>, <2 x float>* %182, align 1
  %3365 = extractelement <2 x float> %3364, i32 0
  %3366 = inttoptr i64 %3362 to float*
  store float %3365, float* %3366, align 4
  %3367 = load i64, i64* %RBP, align 8
  %3368 = add i64 %3367, -48
  %3369 = load i64, i64* %PC, align 8
  %3370 = add i64 %3369, 3
  store i64 %3370, i64* %PC, align 8
  %3371 = inttoptr i64 %3368 to i32*
  %3372 = load i32, i32* %3371, align 4
  %3373 = add i32 %3372, 1
  %3374 = zext i32 %3373 to i64
  store i64 %3374, i64* %RAX, align 8, !tbaa !2428
  %3375 = icmp eq i32 %3372, -1
  %3376 = icmp eq i32 %3373, 0
  %3377 = or i1 %3375, %3376
  %3378 = zext i1 %3377 to i8
  store i8 %3378, i8* %.pre-phi, align 1, !tbaa !2432
  %3379 = and i32 %3373, 255
  %3380 = tail call i32 @llvm.ctpop.i32(i32 %3379) #8
  %3381 = trunc i32 %3380 to i8
  %3382 = and i8 %3381, 1
  %3383 = xor i8 %3382, 1
  store i8 %3383, i8* %.pre-phi23, align 1, !tbaa !2446
  %3384 = xor i32 %3372, %3373
  %3385 = lshr i32 %3384, 4
  %3386 = trunc i32 %3385 to i8
  %3387 = and i8 %3386, 1
  store i8 %3387, i8* %.pre-phi25, align 1, !tbaa !2450
  %3388 = zext i1 %3376 to i8
  store i8 %3388, i8* %.pre-phi27, align 1, !tbaa !2447
  %3389 = lshr i32 %3373, 31
  %3390 = trunc i32 %3389 to i8
  store i8 %3390, i8* %.pre-phi29, align 1, !tbaa !2448
  %3391 = lshr i32 %3372, 31
  %3392 = xor i32 %3389, %3391
  %3393 = add nuw nsw i32 %3392, %3389
  %3394 = icmp eq i32 %3393, 2
  %3395 = zext i1 %3394 to i8
  store i8 %3395, i8* %.pre-phi31, align 1, !tbaa !2449
  %3396 = add i64 %3369, 9
  store i64 %3396, i64* %PC, align 8
  store i32 %3373, i32* %3371, align 4
  %3397 = load i64, i64* %PC, align 8
  %3398 = add i64 %3397, -135
  store i64 %3398, i64* %PC, align 8, !tbaa !2428
  br label %block_4020e9

block_4024b2:                                     ; preds = %block_4024a6
  %3399 = add i64 %3591, -48
  %3400 = add i64 %3627, 7
  store i64 %3400, i64* %PC, align 8
  %3401 = inttoptr i64 %3399 to i32*
  store i32 0, i32* %3401, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_4024b9

block_40247f:                                     ; preds = %block_4022cd
  %3402 = add i64 %452, 5
  store i64 %3402, i64* %PC, align 8, !tbaa !2428
  br label %block_402484

block_4024b9:                                     ; preds = %block_4024b2, %block_4024c5
  %3403 = phi i64 [ %.pre20, %block_4024b2 ], [ %2590, %block_4024c5 ]
  %3404 = load i64, i64* %RBP, align 8
  %3405 = add i64 %3404, -48
  %3406 = add i64 %3403, 3
  store i64 %3406, i64* %PC, align 8
  %3407 = inttoptr i64 %3405 to i32*
  %3408 = load i32, i32* %3407, align 4
  %3409 = zext i32 %3408 to i64
  store i64 %3409, i64* %RAX, align 8, !tbaa !2428
  %3410 = add i64 %3404, -4
  %3411 = add i64 %3403, 6
  store i64 %3411, i64* %PC, align 8
  %3412 = inttoptr i64 %3410 to i32*
  %3413 = load i32, i32* %3412, align 4
  %3414 = sub i32 %3408, %3413
  %3415 = icmp ult i32 %3408, %3413
  %3416 = zext i1 %3415 to i8
  store i8 %3416, i8* %.pre-phi, align 1, !tbaa !2432
  %3417 = and i32 %3414, 255
  %3418 = tail call i32 @llvm.ctpop.i32(i32 %3417) #8
  %3419 = trunc i32 %3418 to i8
  %3420 = and i8 %3419, 1
  %3421 = xor i8 %3420, 1
  store i8 %3421, i8* %.pre-phi23, align 1, !tbaa !2446
  %3422 = xor i32 %3413, %3408
  %3423 = xor i32 %3422, %3414
  %3424 = lshr i32 %3423, 4
  %3425 = trunc i32 %3424 to i8
  %3426 = and i8 %3425, 1
  store i8 %3426, i8* %.pre-phi25, align 1, !tbaa !2450
  %3427 = icmp eq i32 %3414, 0
  %3428 = zext i1 %3427 to i8
  store i8 %3428, i8* %.pre-phi27, align 1, !tbaa !2447
  %3429 = lshr i32 %3414, 31
  %3430 = trunc i32 %3429 to i8
  store i8 %3430, i8* %.pre-phi29, align 1, !tbaa !2448
  %3431 = lshr i32 %3408, 31
  %3432 = lshr i32 %3413, 31
  %3433 = xor i32 %3432, %3431
  %3434 = xor i32 %3429, %3431
  %3435 = add nuw nsw i32 %3434, %3433
  %3436 = icmp eq i32 %3435, 2
  %3437 = zext i1 %3436 to i8
  store i8 %3437, i8* %.pre-phi31, align 1, !tbaa !2449
  %3438 = icmp ne i8 %3430, 0
  %3439 = xor i1 %3438, %3436
  %.v = select i1 %3439, i64 12, i64 826
  %3440 = add i64 %3403, %.v
  store i64 %3440, i64* %PC, align 8, !tbaa !2428
  br i1 %3439, label %block_4024c5, label %block_4027f3

block_4021aa:                                     ; preds = %block_40219a, %block_4021b6
  %3441 = phi i64 [ %.pre11, %block_40219a ], [ %3116, %block_4021b6 ]
  %3442 = load i64, i64* %RBP, align 8
  %3443 = add i64 %3442, -48
  %3444 = add i64 %3441, 3
  store i64 %3444, i64* %PC, align 8
  %3445 = inttoptr i64 %3443 to i32*
  %3446 = load i32, i32* %3445, align 4
  %3447 = zext i32 %3446 to i64
  store i64 %3447, i64* %RAX, align 8, !tbaa !2428
  %3448 = add i64 %3442, -4
  %3449 = add i64 %3441, 6
  store i64 %3449, i64* %PC, align 8
  %3450 = inttoptr i64 %3448 to i32*
  %3451 = load i32, i32* %3450, align 4
  %3452 = sub i32 %3446, %3451
  %3453 = icmp ult i32 %3446, %3451
  %3454 = zext i1 %3453 to i8
  store i8 %3454, i8* %.pre-phi, align 1, !tbaa !2432
  %3455 = and i32 %3452, 255
  %3456 = tail call i32 @llvm.ctpop.i32(i32 %3455) #8
  %3457 = trunc i32 %3456 to i8
  %3458 = and i8 %3457, 1
  %3459 = xor i8 %3458, 1
  store i8 %3459, i8* %.pre-phi23, align 1, !tbaa !2446
  %3460 = xor i32 %3451, %3446
  %3461 = xor i32 %3460, %3452
  %3462 = lshr i32 %3461, 4
  %3463 = trunc i32 %3462 to i8
  %3464 = and i8 %3463, 1
  store i8 %3464, i8* %.pre-phi25, align 1, !tbaa !2450
  %3465 = icmp eq i32 %3452, 0
  %3466 = zext i1 %3465 to i8
  store i8 %3466, i8* %.pre-phi27, align 1, !tbaa !2447
  %3467 = lshr i32 %3452, 31
  %3468 = trunc i32 %3467 to i8
  store i8 %3468, i8* %.pre-phi29, align 1, !tbaa !2448
  %3469 = lshr i32 %3446, 31
  %3470 = lshr i32 %3451, 31
  %3471 = xor i32 %3470, %3469
  %3472 = xor i32 %3467, %3469
  %3473 = add nuw nsw i32 %3472, %3471
  %3474 = icmp eq i32 %3473, 2
  %3475 = zext i1 %3474 to i8
  store i8 %3475, i8* %.pre-phi31, align 1, !tbaa !2449
  %3476 = icmp ne i8 %3468, 0
  %3477 = xor i1 %3476, %3474
  %.v39 = select i1 %3477, i64 12, i64 238
  %3478 = add i64 %3441, %.v39
  store i64 %3478, i64* %PC, align 8, !tbaa !2428
  br i1 %3477, label %block_4021b6, label %block_402298

block_40217a:                                     ; preds = %block_402175, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %3479 = phi i64 [ %3553, %block_402175 ], [ %385, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  %3480 = phi i64 [ %4821, %block_402175 ], [ %414, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %3481 = add i64 %3479, -20
  %3482 = add i64 %3480, 8
  store i64 %3482, i64* %PC, align 8
  %3483 = inttoptr i64 %3481 to i32*
  %3484 = load i32, i32* %3483, align 4
  %3485 = zext i32 %3484 to i64
  store i64 %3485, i64* %RCX, align 8, !tbaa !2428
  %3486 = add i64 %3479, -64
  %3487 = add i64 %3480, 11
  store i64 %3487, i64* %PC, align 8
  %3488 = inttoptr i64 %3486 to i32*
  store i32 8, i32* %3488, align 4
  %3489 = load i32, i32* %ECX, align 4
  %3490 = zext i32 %3489 to i64
  %3491 = load i64, i64* %PC, align 8
  store i64 %3490, i64* %RAX, align 8, !tbaa !2428
  %3492 = sext i32 %3489 to i64
  %3493 = lshr i64 %3492, 32
  store i64 %3493, i64* %64, align 8, !tbaa !2428
  %3494 = load i64, i64* %RBP, align 8
  %3495 = add i64 %3494, -64
  %3496 = add i64 %3491, 6
  store i64 %3496, i64* %PC, align 8
  %3497 = inttoptr i64 %3495 to i32*
  %3498 = load i32, i32* %3497, align 4
  %3499 = zext i32 %3498 to i64
  store i64 %3499, i64* %RCX, align 8, !tbaa !2428
  %3500 = add i64 %3491, 8
  store i64 %3500, i64* %PC, align 8
  %3501 = sext i32 %3498 to i64
  %3502 = shl nuw i64 %3493, 32
  %3503 = or i64 %3502, %3490
  %3504 = sdiv i64 %3503, %3501
  %3505 = shl i64 %3504, 32
  %3506 = ashr exact i64 %3505, 32
  %3507 = icmp eq i64 %3504, %3506
  br i1 %3507, label %3510, label %3508

; <label>:3508:                                   ; preds = %block_40217a
  %3509 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3500, %struct.Memory* %381) #9
  %.pre8 = load i64, i64* %RBP, align 8
  %.pre9 = load i32, i32* %EDX, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:3510:                                   ; preds = %block_40217a
  %3511 = srem i64 %3503, %3501
  %3512 = and i64 %3504, 4294967295
  store i64 %3512, i64* %RAX, align 8, !tbaa !2428
  %3513 = and i64 %3511, 4294967295
  store i64 %3513, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %3514 = trunc i64 %3511 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %3510, %3508
  %3515 = phi i64 [ %.pre10, %3508 ], [ %3500, %3510 ]
  %3516 = phi i32 [ %.pre9, %3508 ], [ %3514, %3510 ]
  %3517 = phi i64 [ %.pre8, %3508 ], [ %3494, %3510 ]
  %3518 = phi %struct.Memory* [ %3509, %3508 ], [ %381, %3510 ]
  %3519 = add i64 %3517, -44
  %3520 = add i64 %3515, 3
  store i64 %3520, i64* %PC, align 8
  %3521 = inttoptr i64 %3519 to i32*
  store i32 %3516, i32* %3521, align 4
  %3522 = load i64, i64* %RBP, align 8
  %3523 = add i64 %3522, -44
  %3524 = load i64, i64* %PC, align 8
  %3525 = add i64 %3524, 4
  store i64 %3525, i64* %PC, align 8
  %3526 = inttoptr i64 %3523 to i32*
  %3527 = load i32, i32* %3526, align 4
  %3528 = add i32 %3527, -4
  %3529 = icmp ult i32 %3527, 4
  %3530 = zext i1 %3529 to i8
  store i8 %3530, i8* %.pre-phi, align 1, !tbaa !2432
  %3531 = and i32 %3528, 255
  %3532 = tail call i32 @llvm.ctpop.i32(i32 %3531) #8
  %3533 = trunc i32 %3532 to i8
  %3534 = and i8 %3533, 1
  %3535 = xor i8 %3534, 1
  store i8 %3535, i8* %.pre-phi23, align 1, !tbaa !2446
  %3536 = xor i32 %3527, %3528
  %3537 = lshr i32 %3536, 4
  %3538 = trunc i32 %3537 to i8
  %3539 = and i8 %3538, 1
  store i8 %3539, i8* %.pre-phi25, align 1, !tbaa !2450
  %3540 = icmp eq i32 %3528, 0
  %3541 = zext i1 %3540 to i8
  store i8 %3541, i8* %.pre-phi27, align 1, !tbaa !2447
  %3542 = lshr i32 %3528, 31
  %3543 = trunc i32 %3542 to i8
  store i8 %3543, i8* %.pre-phi29, align 1, !tbaa !2448
  %3544 = lshr i32 %3527, 31
  %3545 = xor i32 %3542, %3544
  %3546 = add nuw nsw i32 %3545, %3544
  %3547 = icmp eq i32 %3546, 2
  %3548 = zext i1 %3547 to i8
  store i8 %3548, i8* %.pre-phi31, align 1, !tbaa !2449
  %3549 = icmp ne i8 %3543, 0
  %3550 = xor i1 %3549, %3547
  %.v38 = select i1 %3550, i64 269, i64 10
  %3551 = add i64 %3524, %.v38
  store i64 %3551, i64* %PC, align 8, !tbaa !2428
  br i1 %3550, label %block_40229d, label %block_40219a

block_4020e9:                                     ; preds = %block_4020f5, %block_4020d9
  %3552 = phi i64 [ %3398, %block_4020f5 ], [ %.pre7, %block_4020d9 ]
  %3553 = load i64, i64* %RBP, align 8
  %3554 = add i64 %3553, -48
  %3555 = add i64 %3552, 3
  store i64 %3555, i64* %PC, align 8
  %3556 = inttoptr i64 %3554 to i32*
  %3557 = load i32, i32* %3556, align 4
  %3558 = zext i32 %3557 to i64
  store i64 %3558, i64* %RAX, align 8, !tbaa !2428
  %3559 = add i64 %3553, -4
  %3560 = add i64 %3552, 6
  store i64 %3560, i64* %PC, align 8
  %3561 = inttoptr i64 %3559 to i32*
  %3562 = load i32, i32* %3561, align 4
  %3563 = sub i32 %3557, %3562
  %3564 = icmp ult i32 %3557, %3562
  %3565 = zext i1 %3564 to i8
  store i8 %3565, i8* %.pre-phi, align 1, !tbaa !2432
  %3566 = and i32 %3563, 255
  %3567 = tail call i32 @llvm.ctpop.i32(i32 %3566) #8
  %3568 = trunc i32 %3567 to i8
  %3569 = and i8 %3568, 1
  %3570 = xor i8 %3569, 1
  store i8 %3570, i8* %.pre-phi23, align 1, !tbaa !2446
  %3571 = xor i32 %3562, %3557
  %3572 = xor i32 %3571, %3563
  %3573 = lshr i32 %3572, 4
  %3574 = trunc i32 %3573 to i8
  %3575 = and i8 %3574, 1
  store i8 %3575, i8* %.pre-phi25, align 1, !tbaa !2450
  %3576 = icmp eq i32 %3563, 0
  %3577 = zext i1 %3576 to i8
  store i8 %3577, i8* %.pre-phi27, align 1, !tbaa !2447
  %3578 = lshr i32 %3563, 31
  %3579 = trunc i32 %3578 to i8
  store i8 %3579, i8* %.pre-phi29, align 1, !tbaa !2448
  %3580 = lshr i32 %3557, 31
  %3581 = lshr i32 %3562, 31
  %3582 = xor i32 %3581, %3580
  %3583 = xor i32 %3578, %3580
  %3584 = add nuw nsw i32 %3583, %3582
  %3585 = icmp eq i32 %3584, 2
  %3586 = zext i1 %3585 to i8
  store i8 %3586, i8* %.pre-phi31, align 1, !tbaa !2449
  %3587 = icmp ne i8 %3579, 0
  %3588 = xor i1 %3587, %3585
  %.v37 = select i1 %3588, i64 12, i64 140
  %3589 = add i64 %3552, %.v37
  store i64 %3589, i64* %PC, align 8, !tbaa !2428
  br i1 %3588, label %block_4020f5, label %block_402175

block_4024a6:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_4027f3
  %3590 = phi i64 [ %.pre19, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %538, %block_4027f3 ]
  %3591 = load i64, i64* %RBP, align 8
  %3592 = add i64 %3591, -44
  %3593 = add i64 %3590, 3
  store i64 %3593, i64* %PC, align 8
  %3594 = inttoptr i64 %3592 to i32*
  %3595 = load i32, i32* %3594, align 4
  %3596 = zext i32 %3595 to i64
  store i64 %3596, i64* %RAX, align 8, !tbaa !2428
  %3597 = add i64 %3591, -20
  %3598 = add i64 %3590, 6
  store i64 %3598, i64* %PC, align 8
  %3599 = inttoptr i64 %3597 to i32*
  %3600 = load i32, i32* %3599, align 4
  %3601 = sub i32 %3595, %3600
  %3602 = icmp ult i32 %3595, %3600
  %3603 = zext i1 %3602 to i8
  store i8 %3603, i8* %.pre-phi, align 1, !tbaa !2432
  %3604 = and i32 %3601, 255
  %3605 = tail call i32 @llvm.ctpop.i32(i32 %3604) #8
  %3606 = trunc i32 %3605 to i8
  %3607 = and i8 %3606, 1
  %3608 = xor i8 %3607, 1
  store i8 %3608, i8* %.pre-phi23, align 1, !tbaa !2446
  %3609 = xor i32 %3600, %3595
  %3610 = xor i32 %3609, %3601
  %3611 = lshr i32 %3610, 4
  %3612 = trunc i32 %3611 to i8
  %3613 = and i8 %3612, 1
  store i8 %3613, i8* %.pre-phi25, align 1, !tbaa !2450
  %3614 = icmp eq i32 %3601, 0
  %3615 = zext i1 %3614 to i8
  store i8 %3615, i8* %.pre-phi27, align 1, !tbaa !2447
  %3616 = lshr i32 %3601, 31
  %3617 = trunc i32 %3616 to i8
  store i8 %3617, i8* %.pre-phi29, align 1, !tbaa !2448
  %3618 = lshr i32 %3595, 31
  %3619 = lshr i32 %3600, 31
  %3620 = xor i32 %3619, %3618
  %3621 = xor i32 %3616, %3618
  %3622 = add nuw nsw i32 %3621, %3620
  %3623 = icmp eq i32 %3622, 2
  %3624 = zext i1 %3623 to i8
  store i8 %3624, i8* %.pre-phi31, align 1, !tbaa !2449
  %3625 = icmp ne i8 %3617, 0
  %3626 = xor i1 %3625, %3623
  %.v42 = select i1 %3626, i64 12, i64 864
  %3627 = add i64 %3590, %.v42
  store i64 %3627, i64* %PC, align 8, !tbaa !2428
  br i1 %3626, label %block_4024b2, label %block_402806

block_402059:                                     ; preds = %block_402049, %block_402065
  %3628 = phi i64 [ %.pre3, %block_402049 ], [ %341, %block_402065 ]
  %3629 = load i64, i64* %RBP, align 8
  %3630 = add i64 %3629, -48
  %3631 = add i64 %3628, 3
  store i64 %3631, i64* %PC, align 8
  %3632 = inttoptr i64 %3630 to i32*
  %3633 = load i32, i32* %3632, align 4
  %3634 = zext i32 %3633 to i64
  store i64 %3634, i64* %RAX, align 8, !tbaa !2428
  %3635 = add i64 %3629, -4
  %3636 = add i64 %3628, 6
  store i64 %3636, i64* %PC, align 8
  %3637 = inttoptr i64 %3635 to i32*
  %3638 = load i32, i32* %3637, align 4
  %3639 = sub i32 %3633, %3638
  %3640 = icmp ult i32 %3633, %3638
  %3641 = zext i1 %3640 to i8
  store i8 %3641, i8* %.pre-phi, align 1, !tbaa !2432
  %3642 = and i32 %3639, 255
  %3643 = tail call i32 @llvm.ctpop.i32(i32 %3642) #8
  %3644 = trunc i32 %3643 to i8
  %3645 = and i8 %3644, 1
  %3646 = xor i8 %3645, 1
  store i8 %3646, i8* %.pre-phi23, align 1, !tbaa !2446
  %3647 = xor i32 %3638, %3633
  %3648 = xor i32 %3647, %3639
  %3649 = lshr i32 %3648, 4
  %3650 = trunc i32 %3649 to i8
  %3651 = and i8 %3650, 1
  store i8 %3651, i8* %.pre-phi25, align 1, !tbaa !2450
  %3652 = icmp eq i32 %3639, 0
  %3653 = zext i1 %3652 to i8
  store i8 %3653, i8* %.pre-phi27, align 1, !tbaa !2447
  %3654 = lshr i32 %3639, 31
  %3655 = trunc i32 %3654 to i8
  store i8 %3655, i8* %.pre-phi29, align 1, !tbaa !2448
  %3656 = lshr i32 %3633, 31
  %3657 = lshr i32 %3638, 31
  %3658 = xor i32 %3657, %3656
  %3659 = xor i32 %3654, %3656
  %3660 = add nuw nsw i32 %3659, %3658
  %3661 = icmp eq i32 %3660, 2
  %3662 = zext i1 %3661 to i8
  store i8 %3662, i8* %.pre-phi31, align 1, !tbaa !2449
  %3663 = icmp ne i8 %3655, 0
  %3664 = xor i1 %3663, %3661
  %.v35 = select i1 %3664, i64 12, i64 91
  %3665 = add i64 %3628, %.v35
  store i64 %3665, i64* %PC, align 8, !tbaa !2428
  br i1 %3664, label %block_402065, label %block_4020b4

block_40229d:                                     ; preds = %block_402298, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %3666 = phi i64 [ %3442, %block_402298 ], [ %3522, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  %3667 = phi i64 [ %4811, %block_402298 ], [ %3551, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %3668 = add i64 %3666, -20
  %3669 = add i64 %3667, 8
  store i64 %3669, i64* %PC, align 8
  %3670 = inttoptr i64 %3668 to i32*
  %3671 = load i32, i32* %3670, align 4
  %3672 = zext i32 %3671 to i64
  store i64 %3672, i64* %RCX, align 8, !tbaa !2428
  %3673 = add i64 %3666, -68
  %3674 = add i64 %3667, 11
  store i64 %3674, i64* %PC, align 8
  %3675 = inttoptr i64 %3673 to i32*
  store i32 16, i32* %3675, align 4
  %3676 = load i32, i32* %ECX, align 4
  %3677 = zext i32 %3676 to i64
  %3678 = load i64, i64* %PC, align 8
  store i64 %3677, i64* %RAX, align 8, !tbaa !2428
  %3679 = sext i32 %3676 to i64
  %3680 = lshr i64 %3679, 32
  store i64 %3680, i64* %64, align 8, !tbaa !2428
  %3681 = load i64, i64* %RBP, align 8
  %3682 = add i64 %3681, -68
  %3683 = add i64 %3678, 6
  store i64 %3683, i64* %PC, align 8
  %3684 = inttoptr i64 %3682 to i32*
  %3685 = load i32, i32* %3684, align 4
  %3686 = zext i32 %3685 to i64
  store i64 %3686, i64* %RCX, align 8, !tbaa !2428
  %3687 = add i64 %3678, 8
  store i64 %3687, i64* %PC, align 8
  %3688 = sext i32 %3685 to i64
  %3689 = shl nuw i64 %3680, 32
  %3690 = or i64 %3689, %3677
  %3691 = sdiv i64 %3690, %3688
  %3692 = shl i64 %3691, 32
  %3693 = ashr exact i64 %3692, 32
  %3694 = icmp eq i64 %3691, %3693
  br i1 %3694, label %3697, label %3695

; <label>:3695:                                   ; preds = %block_40229d
  %3696 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3687, %struct.Memory* %3518) #9
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i32, i32* %EDX, align 4
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:3697:                                   ; preds = %block_40229d
  %3698 = srem i64 %3690, %3688
  %3699 = and i64 %3691, 4294967295
  store i64 %3699, i64* %RAX, align 8, !tbaa !2428
  %3700 = and i64 %3698, 4294967295
  store i64 %3700, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  %3701 = trunc i64 %3698 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %3697, %3695
  %3702 = phi i64 [ %.pre14, %3695 ], [ %3687, %3697 ]
  %3703 = phi i32 [ %.pre13, %3695 ], [ %3701, %3697 ]
  %3704 = phi i64 [ %.pre12, %3695 ], [ %3681, %3697 ]
  %3705 = phi %struct.Memory* [ %3696, %3695 ], [ %3518, %3697 ]
  %3706 = add i64 %3704, -44
  %3707 = add i64 %3702, 3
  store i64 %3707, i64* %PC, align 8
  %3708 = inttoptr i64 %3706 to i32*
  store i32 %3703, i32* %3708, align 4
  %3709 = load i64, i64* %RBP, align 8
  %3710 = add i64 %3709, -44
  %3711 = load i64, i64* %PC, align 8
  %3712 = add i64 %3711, 4
  store i64 %3712, i64* %PC, align 8
  %3713 = inttoptr i64 %3710 to i32*
  %3714 = load i32, i32* %3713, align 4
  %3715 = add i32 %3714, -8
  %3716 = icmp ult i32 %3714, 8
  %3717 = zext i1 %3716 to i8
  store i8 %3717, i8* %.pre-phi, align 1, !tbaa !2432
  %3718 = and i32 %3715, 255
  %3719 = tail call i32 @llvm.ctpop.i32(i32 %3718) #8
  %3720 = trunc i32 %3719 to i8
  %3721 = and i8 %3720, 1
  %3722 = xor i8 %3721, 1
  store i8 %3722, i8* %.pre-phi23, align 1, !tbaa !2446
  %3723 = xor i32 %3714, %3715
  %3724 = lshr i32 %3723, 4
  %3725 = trunc i32 %3724 to i8
  %3726 = and i8 %3725, 1
  store i8 %3726, i8* %.pre-phi25, align 1, !tbaa !2450
  %3727 = icmp eq i32 %3715, 0
  %3728 = zext i1 %3727 to i8
  store i8 %3728, i8* %.pre-phi27, align 1, !tbaa !2447
  %3729 = lshr i32 %3715, 31
  %3730 = trunc i32 %3729 to i8
  store i8 %3730, i8* %.pre-phi29, align 1, !tbaa !2448
  %3731 = lshr i32 %3714, 31
  %3732 = xor i32 %3729, %3731
  %3733 = add nuw nsw i32 %3732, %3731
  %3734 = icmp eq i32 %3733, 2
  %3735 = zext i1 %3734 to i8
  store i8 %3735, i8* %.pre-phi31, align 1, !tbaa !2449
  %3736 = icmp ne i8 %3730, 0
  %3737 = xor i1 %3736, %3734
  %.v40 = select i1 %3737, i64 465, i64 10
  %3738 = add i64 %3711, %.v40
  store i64 %3738, i64* %PC, align 8, !tbaa !2428
  br i1 %3737, label %block_402484, label %block_4022bd

block_40219a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %3739 = add i64 %3551, 3
  store i64 %3739, i64* %PC, align 8
  %3740 = load i32, i32* %3526, align 4
  %3741 = add i32 %3740, -1
  %3742 = zext i32 %3741 to i64
  store i64 %3742, i64* %RAX, align 8, !tbaa !2428
  %3743 = icmp eq i32 %3740, 0
  %3744 = zext i1 %3743 to i8
  store i8 %3744, i8* %.pre-phi, align 1, !tbaa !2432
  %3745 = and i32 %3741, 255
  %3746 = tail call i32 @llvm.ctpop.i32(i32 %3745) #8
  %3747 = trunc i32 %3746 to i8
  %3748 = and i8 %3747, 1
  %3749 = xor i8 %3748, 1
  store i8 %3749, i8* %.pre-phi23, align 1, !tbaa !2446
  %3750 = xor i32 %3740, %3741
  %3751 = lshr i32 %3750, 4
  %3752 = trunc i32 %3751 to i8
  %3753 = and i8 %3752, 1
  store i8 %3753, i8* %.pre-phi25, align 1, !tbaa !2450
  %3754 = icmp eq i32 %3741, 0
  %3755 = zext i1 %3754 to i8
  store i8 %3755, i8* %.pre-phi27, align 1, !tbaa !2447
  %3756 = lshr i32 %3741, 31
  %3757 = trunc i32 %3756 to i8
  store i8 %3757, i8* %.pre-phi29, align 1, !tbaa !2448
  %3758 = lshr i32 %3740, 31
  %3759 = xor i32 %3756, %3758
  %3760 = add nuw nsw i32 %3759, %3758
  %3761 = icmp eq i32 %3760, 2
  %3762 = zext i1 %3761 to i8
  store i8 %3762, i8* %.pre-phi31, align 1, !tbaa !2449
  %3763 = add i64 %3551, 9
  store i64 %3763, i64* %PC, align 8
  store i32 %3741, i32* %3526, align 4
  %3764 = load i64, i64* %RBP, align 8
  %3765 = add i64 %3764, -48
  %3766 = load i64, i64* %PC, align 8
  %3767 = add i64 %3766, 7
  store i64 %3767, i64* %PC, align 8
  %3768 = inttoptr i64 %3765 to i32*
  store i32 0, i32* %3768, align 4
  %3769 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %3770 = bitcast [32 x %union.VectorReg]* %7 to float*
  %3771 = getelementptr inbounds i8, i8* %3769, i64 4
  %3772 = bitcast i8* %3771 to float*
  %3773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3774 = bitcast i64* %3773 to float*
  %3775 = getelementptr inbounds i8, i8* %3769, i64 12
  %3776 = bitcast i8* %3775 to float*
  %3777 = bitcast %union.VectorReg* %8 to i8*
  %3778 = bitcast %union.VectorReg* %8 to float*
  %3779 = getelementptr inbounds i8, i8* %3777, i64 4
  %3780 = bitcast i8* %3779 to float*
  %3781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %3782 = bitcast i64* %3781 to float*
  %3783 = getelementptr inbounds i8, i8* %3777, i64 12
  %3784 = bitcast i8* %3783 to float*
  %3785 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3786 = bitcast i64* %3781 to <2 x i32>*
  %3787 = bitcast i8* %3779 to i32*
  %3788 = bitcast i64* %3781 to i32*
  %3789 = bitcast i8* %3783 to i32*
  %3790 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %3791 = bitcast i64* %3773 to <2 x i32>*
  %3792 = bitcast i8* %3771 to i32*
  %3793 = bitcast i64* %3773 to i32*
  %3794 = bitcast i8* %3775 to i32*
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_4021aa

block_4022d9:                                     ; preds = %block_4022cd
  %3795 = add i64 %416, -16
  %3796 = add i64 %452, 4
  store i64 %3796, i64* %PC, align 8
  %3797 = inttoptr i64 %3795 to i64*
  %3798 = load i64, i64* %3797, align 8
  store i64 %3798, i64* %RAX, align 8, !tbaa !2428
  %3799 = add i64 %452, 8
  store i64 %3799, i64* %PC, align 8
  %3800 = load i32, i32* %419, align 4
  %3801 = sext i32 %3800 to i64
  store i64 %3801, i64* %RCX, align 8, !tbaa !2428
  %3802 = shl nsw i64 %3801, 2
  %3803 = add i64 %3802, %3798
  %3804 = add i64 %452, 13
  store i64 %3804, i64* %PC, align 8
  %3805 = inttoptr i64 %3803 to i32*
  %3806 = load i32, i32* %3805, align 4
  %3807 = bitcast [32 x %union.VectorReg]* %7 to i32*
  store i32 %3806, i32* %3807, align 1, !tbaa !2452
  store float 0.000000e+00, float* %572, align 1, !tbaa !2452
  store float 0.000000e+00, float* %574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %576, align 1, !tbaa !2452
  %3808 = add i64 %416, -32
  %3809 = add i64 %452, 17
  store i64 %3809, i64* %PC, align 8
  %3810 = inttoptr i64 %3808 to i64*
  %3811 = load i64, i64* %3810, align 8
  store i64 %3811, i64* %RAX, align 8, !tbaa !2428
  %3812 = add i64 %416, -44
  %3813 = add i64 %452, 20
  store i64 %3813, i64* %PC, align 8
  %3814 = inttoptr i64 %3812 to i32*
  %3815 = load i32, i32* %3814, align 4
  %3816 = add i32 %3815, -7
  %3817 = zext i32 %3816 to i64
  store i64 %3817, i64* %RDX, align 8, !tbaa !2428
  %3818 = icmp ult i32 %3815, 7
  %3819 = zext i1 %3818 to i8
  store i8 %3819, i8* %.pre-phi, align 1, !tbaa !2432
  %3820 = and i32 %3816, 255
  %3821 = tail call i32 @llvm.ctpop.i32(i32 %3820) #8
  %3822 = trunc i32 %3821 to i8
  %3823 = and i8 %3822, 1
  %3824 = xor i8 %3823, 1
  store i8 %3824, i8* %.pre-phi23, align 1, !tbaa !2446
  %3825 = xor i32 %3815, %3816
  %3826 = lshr i32 %3825, 4
  %3827 = trunc i32 %3826 to i8
  %3828 = and i8 %3827, 1
  store i8 %3828, i8* %.pre-phi25, align 1, !tbaa !2450
  %3829 = icmp eq i32 %3816, 0
  %3830 = zext i1 %3829 to i8
  store i8 %3830, i8* %.pre-phi27, align 1, !tbaa !2447
  %3831 = lshr i32 %3816, 31
  %3832 = trunc i32 %3831 to i8
  store i8 %3832, i8* %.pre-phi29, align 1, !tbaa !2448
  %3833 = lshr i32 %3815, 31
  %3834 = xor i32 %3831, %3833
  %3835 = add nuw nsw i32 %3834, %3833
  %3836 = icmp eq i32 %3835, 2
  %3837 = zext i1 %3836 to i8
  store i8 %3837, i8* %.pre-phi31, align 1, !tbaa !2449
  %3838 = sext i32 %3816 to i64
  store i64 %3838, i64* %RCX, align 8, !tbaa !2428
  %3839 = shl nsw i64 %3838, 2
  %3840 = add i64 %3839, %3811
  %3841 = add i64 %452, 31
  store i64 %3841, i64* %PC, align 8
  %3842 = inttoptr i64 %3840 to i32*
  %3843 = load i32, i32* %3842, align 4
  %3844 = bitcast %union.VectorReg* %8 to i32*
  store i32 %3843, i32* %3844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %3845 = add i64 %416, -40
  %3846 = add i64 %452, 35
  store i64 %3846, i64* %PC, align 8
  %3847 = inttoptr i64 %3845 to i64*
  %3848 = load i64, i64* %3847, align 8
  store i64 %3848, i64* %RAX, align 8, !tbaa !2428
  %3849 = add i64 %416, -24
  %3850 = add i64 %452, 38
  store i64 %3850, i64* %PC, align 8
  %3851 = inttoptr i64 %3849 to i32*
  %3852 = load i32, i32* %3851, align 4
  %3853 = zext i32 %3852 to i64
  store i64 %3853, i64* %RDX, align 8, !tbaa !2428
  %3854 = add i64 %452, 41
  store i64 %3854, i64* %PC, align 8
  %3855 = load i32, i32* %3814, align 4
  %3856 = add i32 %3855, -7
  %3857 = zext i32 %3856 to i64
  store i64 %3857, i64* %RSI, align 8, !tbaa !2428
  %3858 = sext i32 %3852 to i64
  %3859 = sext i32 %3856 to i64
  %3860 = mul nsw i64 %3859, %3858
  %3861 = trunc i64 %3860 to i32
  %3862 = and i64 %3860, 4294967295
  store i64 %3862, i64* %RDX, align 8, !tbaa !2428
  %3863 = shl i64 %3860, 32
  %3864 = ashr exact i64 %3863, 32
  %3865 = icmp ne i64 %3864, %3860
  %3866 = zext i1 %3865 to i8
  store i8 %3866, i8* %.pre-phi, align 1, !tbaa !2432
  %3867 = and i32 %3861, 255
  %3868 = tail call i32 @llvm.ctpop.i32(i32 %3867) #8
  %3869 = trunc i32 %3868 to i8
  %3870 = and i8 %3869, 1
  %3871 = xor i8 %3870, 1
  store i8 %3871, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3872 = lshr i32 %3861, 31
  %3873 = trunc i32 %3872 to i8
  store i8 %3873, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3866, i8* %.pre-phi31, align 1, !tbaa !2449
  %3874 = load i64, i64* %RBP, align 8
  %3875 = add i64 %3874, -48
  %3876 = add i64 %452, 50
  store i64 %3876, i64* %PC, align 8
  %3877 = inttoptr i64 %3875 to i32*
  %3878 = load i32, i32* %3877, align 4
  %3879 = add i32 %3878, %3861
  %3880 = zext i32 %3879 to i64
  store i64 %3880, i64* %RDX, align 8, !tbaa !2428
  %3881 = icmp ult i32 %3879, %3861
  %3882 = icmp ult i32 %3879, %3878
  %3883 = or i1 %3881, %3882
  %3884 = zext i1 %3883 to i8
  store i8 %3884, i8* %.pre-phi, align 1, !tbaa !2432
  %3885 = and i32 %3879, 255
  %3886 = tail call i32 @llvm.ctpop.i32(i32 %3885) #8
  %3887 = trunc i32 %3886 to i8
  %3888 = and i8 %3887, 1
  %3889 = xor i8 %3888, 1
  store i8 %3889, i8* %.pre-phi23, align 1, !tbaa !2446
  %3890 = xor i32 %3878, %3861
  %3891 = xor i32 %3890, %3879
  %3892 = lshr i32 %3891, 4
  %3893 = trunc i32 %3892 to i8
  %3894 = and i8 %3893, 1
  store i8 %3894, i8* %.pre-phi25, align 1, !tbaa !2450
  %3895 = icmp eq i32 %3879, 0
  %3896 = zext i1 %3895 to i8
  store i8 %3896, i8* %.pre-phi27, align 1, !tbaa !2447
  %3897 = lshr i32 %3879, 31
  %3898 = trunc i32 %3897 to i8
  store i8 %3898, i8* %.pre-phi29, align 1, !tbaa !2448
  %3899 = lshr i32 %3878, 31
  %3900 = xor i32 %3897, %3872
  %3901 = xor i32 %3897, %3899
  %3902 = add nuw nsw i32 %3900, %3901
  %3903 = icmp eq i32 %3902, 2
  %3904 = zext i1 %3903 to i8
  store i8 %3904, i8* %.pre-phi31, align 1, !tbaa !2449
  %3905 = sext i32 %3879 to i64
  store i64 %3905, i64* %RCX, align 8, !tbaa !2428
  %3906 = load i64, i64* %RAX, align 8
  %3907 = shl nsw i64 %3905, 2
  %3908 = add i64 %3907, %3906
  %3909 = add i64 %452, 58
  store i64 %3909, i64* %PC, align 8
  %3910 = load <2 x float>, <2 x float>* %585, align 1
  %3911 = load <2 x i32>, <2 x i32>* %586, align 1
  %3912 = inttoptr i64 %3908 to float*
  %3913 = load float, float* %3912, align 4
  %3914 = extractelement <2 x float> %3910, i32 0
  %3915 = fmul float %3914, %3913
  store float %3915, float* %578, align 1, !tbaa !2452
  %3916 = bitcast <2 x float> %3910 to <2 x i32>
  %3917 = extractelement <2 x i32> %3916, i32 1
  store i32 %3917, i32* %587, align 1, !tbaa !2452
  %3918 = extractelement <2 x i32> %3911, i32 0
  store i32 %3918, i32* %588, align 1, !tbaa !2452
  %3919 = extractelement <2 x i32> %3911, i32 1
  store i32 %3919, i32* %589, align 1, !tbaa !2452
  %3920 = load <2 x float>, <2 x float>* %590, align 1
  %3921 = load <2 x i32>, <2 x i32>* %591, align 1
  %3922 = load <2 x float>, <2 x float>* %585, align 1
  %3923 = extractelement <2 x float> %3920, i32 0
  %3924 = extractelement <2 x float> %3922, i32 0
  %3925 = fadd float %3923, %3924
  store float %3925, float* %570, align 1, !tbaa !2452
  %3926 = bitcast <2 x float> %3920 to <2 x i32>
  %3927 = extractelement <2 x i32> %3926, i32 1
  store i32 %3927, i32* %592, align 1, !tbaa !2452
  %3928 = extractelement <2 x i32> %3921, i32 0
  store i32 %3928, i32* %593, align 1, !tbaa !2452
  %3929 = extractelement <2 x i32> %3921, i32 1
  store i32 %3929, i32* %594, align 1, !tbaa !2452
  %3930 = add i64 %3874, -32
  %3931 = add i64 %452, 66
  store i64 %3931, i64* %PC, align 8
  %3932 = inttoptr i64 %3930 to i64*
  %3933 = load i64, i64* %3932, align 8
  store i64 %3933, i64* %RAX, align 8, !tbaa !2428
  %3934 = add i64 %3874, -44
  %3935 = add i64 %452, 69
  store i64 %3935, i64* %PC, align 8
  %3936 = inttoptr i64 %3934 to i32*
  %3937 = load i32, i32* %3936, align 4
  %3938 = add i32 %3937, -6
  %3939 = zext i32 %3938 to i64
  store i64 %3939, i64* %RDX, align 8, !tbaa !2428
  %3940 = icmp ult i32 %3937, 6
  %3941 = zext i1 %3940 to i8
  store i8 %3941, i8* %.pre-phi, align 1, !tbaa !2432
  %3942 = and i32 %3938, 255
  %3943 = tail call i32 @llvm.ctpop.i32(i32 %3942) #8
  %3944 = trunc i32 %3943 to i8
  %3945 = and i8 %3944, 1
  %3946 = xor i8 %3945, 1
  store i8 %3946, i8* %.pre-phi23, align 1, !tbaa !2446
  %3947 = xor i32 %3937, %3938
  %3948 = lshr i32 %3947, 4
  %3949 = trunc i32 %3948 to i8
  %3950 = and i8 %3949, 1
  store i8 %3950, i8* %.pre-phi25, align 1, !tbaa !2450
  %3951 = icmp eq i32 %3938, 0
  %3952 = zext i1 %3951 to i8
  store i8 %3952, i8* %.pre-phi27, align 1, !tbaa !2447
  %3953 = lshr i32 %3938, 31
  %3954 = trunc i32 %3953 to i8
  store i8 %3954, i8* %.pre-phi29, align 1, !tbaa !2448
  %3955 = lshr i32 %3937, 31
  %3956 = xor i32 %3953, %3955
  %3957 = add nuw nsw i32 %3956, %3955
  %3958 = icmp eq i32 %3957, 2
  %3959 = zext i1 %3958 to i8
  store i8 %3959, i8* %.pre-phi31, align 1, !tbaa !2449
  %3960 = sext i32 %3938 to i64
  store i64 %3960, i64* %RCX, align 8, !tbaa !2428
  %3961 = shl nsw i64 %3960, 2
  %3962 = add i64 %3961, %3933
  %3963 = add i64 %452, 80
  store i64 %3963, i64* %PC, align 8
  %3964 = inttoptr i64 %3962 to i32*
  %3965 = load i32, i32* %3964, align 4
  store i32 %3965, i32* %3844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %3966 = load i64, i64* %RBP, align 8
  %3967 = add i64 %3966, -40
  %3968 = add i64 %452, 84
  store i64 %3968, i64* %PC, align 8
  %3969 = inttoptr i64 %3967 to i64*
  %3970 = load i64, i64* %3969, align 8
  store i64 %3970, i64* %RAX, align 8, !tbaa !2428
  %3971 = add i64 %3966, -24
  %3972 = add i64 %452, 87
  store i64 %3972, i64* %PC, align 8
  %3973 = inttoptr i64 %3971 to i32*
  %3974 = load i32, i32* %3973, align 4
  %3975 = zext i32 %3974 to i64
  store i64 %3975, i64* %RDX, align 8, !tbaa !2428
  %3976 = add i64 %3966, -44
  %3977 = add i64 %452, 90
  store i64 %3977, i64* %PC, align 8
  %3978 = inttoptr i64 %3976 to i32*
  %3979 = load i32, i32* %3978, align 4
  %3980 = add i32 %3979, -6
  %3981 = zext i32 %3980 to i64
  store i64 %3981, i64* %RSI, align 8, !tbaa !2428
  %3982 = sext i32 %3974 to i64
  %3983 = sext i32 %3980 to i64
  %3984 = mul nsw i64 %3983, %3982
  %3985 = trunc i64 %3984 to i32
  %3986 = and i64 %3984, 4294967295
  store i64 %3986, i64* %RDX, align 8, !tbaa !2428
  %3987 = shl i64 %3984, 32
  %3988 = ashr exact i64 %3987, 32
  %3989 = icmp ne i64 %3988, %3984
  %3990 = zext i1 %3989 to i8
  store i8 %3990, i8* %.pre-phi, align 1, !tbaa !2432
  %3991 = and i32 %3985, 255
  %3992 = tail call i32 @llvm.ctpop.i32(i32 %3991) #8
  %3993 = trunc i32 %3992 to i8
  %3994 = and i8 %3993, 1
  %3995 = xor i8 %3994, 1
  store i8 %3995, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %3996 = lshr i32 %3985, 31
  %3997 = trunc i32 %3996 to i8
  store i8 %3997, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %3990, i8* %.pre-phi31, align 1, !tbaa !2449
  %3998 = add i64 %3966, -48
  %3999 = add i64 %452, 99
  store i64 %3999, i64* %PC, align 8
  %4000 = inttoptr i64 %3998 to i32*
  %4001 = load i32, i32* %4000, align 4
  %4002 = add i32 %4001, %3985
  %4003 = zext i32 %4002 to i64
  store i64 %4003, i64* %RDX, align 8, !tbaa !2428
  %4004 = icmp ult i32 %4002, %3985
  %4005 = icmp ult i32 %4002, %4001
  %4006 = or i1 %4004, %4005
  %4007 = zext i1 %4006 to i8
  store i8 %4007, i8* %.pre-phi, align 1, !tbaa !2432
  %4008 = and i32 %4002, 255
  %4009 = tail call i32 @llvm.ctpop.i32(i32 %4008) #8
  %4010 = trunc i32 %4009 to i8
  %4011 = and i8 %4010, 1
  %4012 = xor i8 %4011, 1
  store i8 %4012, i8* %.pre-phi23, align 1, !tbaa !2446
  %4013 = xor i32 %4001, %3985
  %4014 = xor i32 %4013, %4002
  %4015 = lshr i32 %4014, 4
  %4016 = trunc i32 %4015 to i8
  %4017 = and i8 %4016, 1
  store i8 %4017, i8* %.pre-phi25, align 1, !tbaa !2450
  %4018 = icmp eq i32 %4002, 0
  %4019 = zext i1 %4018 to i8
  store i8 %4019, i8* %.pre-phi27, align 1, !tbaa !2447
  %4020 = lshr i32 %4002, 31
  %4021 = trunc i32 %4020 to i8
  store i8 %4021, i8* %.pre-phi29, align 1, !tbaa !2448
  %4022 = lshr i32 %4001, 31
  %4023 = xor i32 %4020, %3996
  %4024 = xor i32 %4020, %4022
  %4025 = add nuw nsw i32 %4023, %4024
  %4026 = icmp eq i32 %4025, 2
  %4027 = zext i1 %4026 to i8
  store i8 %4027, i8* %.pre-phi31, align 1, !tbaa !2449
  %4028 = sext i32 %4002 to i64
  store i64 %4028, i64* %RCX, align 8, !tbaa !2428
  %4029 = load i64, i64* %RAX, align 8
  %4030 = shl nsw i64 %4028, 2
  %4031 = add i64 %4030, %4029
  %4032 = add i64 %452, 107
  store i64 %4032, i64* %PC, align 8
  %4033 = load <2 x float>, <2 x float>* %585, align 1
  %4034 = load <2 x i32>, <2 x i32>* %586, align 1
  %4035 = inttoptr i64 %4031 to float*
  %4036 = load float, float* %4035, align 4
  %4037 = extractelement <2 x float> %4033, i32 0
  %4038 = fmul float %4037, %4036
  store float %4038, float* %578, align 1, !tbaa !2452
  %4039 = bitcast <2 x float> %4033 to <2 x i32>
  %4040 = extractelement <2 x i32> %4039, i32 1
  store i32 %4040, i32* %587, align 1, !tbaa !2452
  %4041 = extractelement <2 x i32> %4034, i32 0
  store i32 %4041, i32* %588, align 1, !tbaa !2452
  %4042 = extractelement <2 x i32> %4034, i32 1
  store i32 %4042, i32* %589, align 1, !tbaa !2452
  %4043 = load <2 x float>, <2 x float>* %590, align 1
  %4044 = load <2 x i32>, <2 x i32>* %591, align 1
  %4045 = load <2 x float>, <2 x float>* %585, align 1
  %4046 = extractelement <2 x float> %4043, i32 0
  %4047 = extractelement <2 x float> %4045, i32 0
  %4048 = fadd float %4046, %4047
  store float %4048, float* %570, align 1, !tbaa !2452
  %4049 = bitcast <2 x float> %4043 to <2 x i32>
  %4050 = extractelement <2 x i32> %4049, i32 1
  store i32 %4050, i32* %592, align 1, !tbaa !2452
  %4051 = extractelement <2 x i32> %4044, i32 0
  store i32 %4051, i32* %593, align 1, !tbaa !2452
  %4052 = extractelement <2 x i32> %4044, i32 1
  store i32 %4052, i32* %594, align 1, !tbaa !2452
  %4053 = load i64, i64* %RBP, align 8
  %4054 = add i64 %4053, -32
  %4055 = add i64 %452, 115
  store i64 %4055, i64* %PC, align 8
  %4056 = inttoptr i64 %4054 to i64*
  %4057 = load i64, i64* %4056, align 8
  store i64 %4057, i64* %RAX, align 8, !tbaa !2428
  %4058 = add i64 %4053, -44
  %4059 = add i64 %452, 118
  store i64 %4059, i64* %PC, align 8
  %4060 = inttoptr i64 %4058 to i32*
  %4061 = load i32, i32* %4060, align 4
  %4062 = add i32 %4061, -5
  %4063 = zext i32 %4062 to i64
  store i64 %4063, i64* %RDX, align 8, !tbaa !2428
  %4064 = icmp ult i32 %4061, 5
  %4065 = zext i1 %4064 to i8
  store i8 %4065, i8* %.pre-phi, align 1, !tbaa !2432
  %4066 = and i32 %4062, 255
  %4067 = tail call i32 @llvm.ctpop.i32(i32 %4066) #8
  %4068 = trunc i32 %4067 to i8
  %4069 = and i8 %4068, 1
  %4070 = xor i8 %4069, 1
  store i8 %4070, i8* %.pre-phi23, align 1, !tbaa !2446
  %4071 = xor i32 %4061, %4062
  %4072 = lshr i32 %4071, 4
  %4073 = trunc i32 %4072 to i8
  %4074 = and i8 %4073, 1
  store i8 %4074, i8* %.pre-phi25, align 1, !tbaa !2450
  %4075 = icmp eq i32 %4062, 0
  %4076 = zext i1 %4075 to i8
  store i8 %4076, i8* %.pre-phi27, align 1, !tbaa !2447
  %4077 = lshr i32 %4062, 31
  %4078 = trunc i32 %4077 to i8
  store i8 %4078, i8* %.pre-phi29, align 1, !tbaa !2448
  %4079 = lshr i32 %4061, 31
  %4080 = xor i32 %4077, %4079
  %4081 = add nuw nsw i32 %4080, %4079
  %4082 = icmp eq i32 %4081, 2
  %4083 = zext i1 %4082 to i8
  store i8 %4083, i8* %.pre-phi31, align 1, !tbaa !2449
  %4084 = sext i32 %4062 to i64
  store i64 %4084, i64* %RCX, align 8, !tbaa !2428
  %4085 = shl nsw i64 %4084, 2
  %4086 = add i64 %4085, %4057
  %4087 = add i64 %452, 129
  store i64 %4087, i64* %PC, align 8
  %4088 = inttoptr i64 %4086 to i32*
  %4089 = load i32, i32* %4088, align 4
  store i32 %4089, i32* %3844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4090 = add i64 %4053, -40
  %4091 = add i64 %452, 133
  store i64 %4091, i64* %PC, align 8
  %4092 = inttoptr i64 %4090 to i64*
  %4093 = load i64, i64* %4092, align 8
  store i64 %4093, i64* %RAX, align 8, !tbaa !2428
  %4094 = add i64 %4053, -24
  %4095 = add i64 %452, 136
  store i64 %4095, i64* %PC, align 8
  %4096 = inttoptr i64 %4094 to i32*
  %4097 = load i32, i32* %4096, align 4
  %4098 = zext i32 %4097 to i64
  store i64 %4098, i64* %RDX, align 8, !tbaa !2428
  %4099 = add i64 %452, 139
  store i64 %4099, i64* %PC, align 8
  %4100 = load i32, i32* %4060, align 4
  %4101 = add i32 %4100, -5
  %4102 = zext i32 %4101 to i64
  store i64 %4102, i64* %RSI, align 8, !tbaa !2428
  %4103 = sext i32 %4097 to i64
  %4104 = sext i32 %4101 to i64
  %4105 = mul nsw i64 %4104, %4103
  %4106 = trunc i64 %4105 to i32
  %4107 = and i64 %4105, 4294967295
  store i64 %4107, i64* %RDX, align 8, !tbaa !2428
  %4108 = shl i64 %4105, 32
  %4109 = ashr exact i64 %4108, 32
  %4110 = icmp ne i64 %4109, %4105
  %4111 = zext i1 %4110 to i8
  store i8 %4111, i8* %.pre-phi, align 1, !tbaa !2432
  %4112 = and i32 %4106, 255
  %4113 = tail call i32 @llvm.ctpop.i32(i32 %4112) #8
  %4114 = trunc i32 %4113 to i8
  %4115 = and i8 %4114, 1
  %4116 = xor i8 %4115, 1
  store i8 %4116, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4117 = lshr i32 %4106, 31
  %4118 = trunc i32 %4117 to i8
  store i8 %4118, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4111, i8* %.pre-phi31, align 1, !tbaa !2449
  %4119 = load i64, i64* %RBP, align 8
  %4120 = add i64 %4119, -48
  %4121 = add i64 %452, 148
  store i64 %4121, i64* %PC, align 8
  %4122 = inttoptr i64 %4120 to i32*
  %4123 = load i32, i32* %4122, align 4
  %4124 = add i32 %4123, %4106
  %4125 = zext i32 %4124 to i64
  store i64 %4125, i64* %RDX, align 8, !tbaa !2428
  %4126 = icmp ult i32 %4124, %4106
  %4127 = icmp ult i32 %4124, %4123
  %4128 = or i1 %4126, %4127
  %4129 = zext i1 %4128 to i8
  store i8 %4129, i8* %.pre-phi, align 1, !tbaa !2432
  %4130 = and i32 %4124, 255
  %4131 = tail call i32 @llvm.ctpop.i32(i32 %4130) #8
  %4132 = trunc i32 %4131 to i8
  %4133 = and i8 %4132, 1
  %4134 = xor i8 %4133, 1
  store i8 %4134, i8* %.pre-phi23, align 1, !tbaa !2446
  %4135 = xor i32 %4123, %4106
  %4136 = xor i32 %4135, %4124
  %4137 = lshr i32 %4136, 4
  %4138 = trunc i32 %4137 to i8
  %4139 = and i8 %4138, 1
  store i8 %4139, i8* %.pre-phi25, align 1, !tbaa !2450
  %4140 = icmp eq i32 %4124, 0
  %4141 = zext i1 %4140 to i8
  store i8 %4141, i8* %.pre-phi27, align 1, !tbaa !2447
  %4142 = lshr i32 %4124, 31
  %4143 = trunc i32 %4142 to i8
  store i8 %4143, i8* %.pre-phi29, align 1, !tbaa !2448
  %4144 = lshr i32 %4123, 31
  %4145 = xor i32 %4142, %4117
  %4146 = xor i32 %4142, %4144
  %4147 = add nuw nsw i32 %4145, %4146
  %4148 = icmp eq i32 %4147, 2
  %4149 = zext i1 %4148 to i8
  store i8 %4149, i8* %.pre-phi31, align 1, !tbaa !2449
  %4150 = sext i32 %4124 to i64
  store i64 %4150, i64* %RCX, align 8, !tbaa !2428
  %4151 = load i64, i64* %RAX, align 8
  %4152 = shl nsw i64 %4150, 2
  %4153 = add i64 %4152, %4151
  %4154 = add i64 %452, 156
  store i64 %4154, i64* %PC, align 8
  %4155 = load <2 x float>, <2 x float>* %585, align 1
  %4156 = load <2 x i32>, <2 x i32>* %586, align 1
  %4157 = inttoptr i64 %4153 to float*
  %4158 = load float, float* %4157, align 4
  %4159 = extractelement <2 x float> %4155, i32 0
  %4160 = fmul float %4159, %4158
  store float %4160, float* %578, align 1, !tbaa !2452
  %4161 = bitcast <2 x float> %4155 to <2 x i32>
  %4162 = extractelement <2 x i32> %4161, i32 1
  store i32 %4162, i32* %587, align 1, !tbaa !2452
  %4163 = extractelement <2 x i32> %4156, i32 0
  store i32 %4163, i32* %588, align 1, !tbaa !2452
  %4164 = extractelement <2 x i32> %4156, i32 1
  store i32 %4164, i32* %589, align 1, !tbaa !2452
  %4165 = load <2 x float>, <2 x float>* %590, align 1
  %4166 = load <2 x i32>, <2 x i32>* %591, align 1
  %4167 = load <2 x float>, <2 x float>* %585, align 1
  %4168 = extractelement <2 x float> %4165, i32 0
  %4169 = extractelement <2 x float> %4167, i32 0
  %4170 = fadd float %4168, %4169
  store float %4170, float* %570, align 1, !tbaa !2452
  %4171 = bitcast <2 x float> %4165 to <2 x i32>
  %4172 = extractelement <2 x i32> %4171, i32 1
  store i32 %4172, i32* %592, align 1, !tbaa !2452
  %4173 = extractelement <2 x i32> %4166, i32 0
  store i32 %4173, i32* %593, align 1, !tbaa !2452
  %4174 = extractelement <2 x i32> %4166, i32 1
  store i32 %4174, i32* %594, align 1, !tbaa !2452
  %4175 = add i64 %4119, -32
  %4176 = add i64 %452, 164
  store i64 %4176, i64* %PC, align 8
  %4177 = inttoptr i64 %4175 to i64*
  %4178 = load i64, i64* %4177, align 8
  store i64 %4178, i64* %RAX, align 8, !tbaa !2428
  %4179 = add i64 %4119, -44
  %4180 = add i64 %452, 167
  store i64 %4180, i64* %PC, align 8
  %4181 = inttoptr i64 %4179 to i32*
  %4182 = load i32, i32* %4181, align 4
  %4183 = add i32 %4182, -4
  %4184 = zext i32 %4183 to i64
  store i64 %4184, i64* %RDX, align 8, !tbaa !2428
  %4185 = icmp ult i32 %4182, 4
  %4186 = zext i1 %4185 to i8
  store i8 %4186, i8* %.pre-phi, align 1, !tbaa !2432
  %4187 = and i32 %4183, 255
  %4188 = tail call i32 @llvm.ctpop.i32(i32 %4187) #8
  %4189 = trunc i32 %4188 to i8
  %4190 = and i8 %4189, 1
  %4191 = xor i8 %4190, 1
  store i8 %4191, i8* %.pre-phi23, align 1, !tbaa !2446
  %4192 = xor i32 %4182, %4183
  %4193 = lshr i32 %4192, 4
  %4194 = trunc i32 %4193 to i8
  %4195 = and i8 %4194, 1
  store i8 %4195, i8* %.pre-phi25, align 1, !tbaa !2450
  %4196 = icmp eq i32 %4183, 0
  %4197 = zext i1 %4196 to i8
  store i8 %4197, i8* %.pre-phi27, align 1, !tbaa !2447
  %4198 = lshr i32 %4183, 31
  %4199 = trunc i32 %4198 to i8
  store i8 %4199, i8* %.pre-phi29, align 1, !tbaa !2448
  %4200 = lshr i32 %4182, 31
  %4201 = xor i32 %4198, %4200
  %4202 = add nuw nsw i32 %4201, %4200
  %4203 = icmp eq i32 %4202, 2
  %4204 = zext i1 %4203 to i8
  store i8 %4204, i8* %.pre-phi31, align 1, !tbaa !2449
  %4205 = sext i32 %4183 to i64
  store i64 %4205, i64* %RCX, align 8, !tbaa !2428
  %4206 = shl nsw i64 %4205, 2
  %4207 = add i64 %4206, %4178
  %4208 = add i64 %452, 178
  store i64 %4208, i64* %PC, align 8
  %4209 = inttoptr i64 %4207 to i32*
  %4210 = load i32, i32* %4209, align 4
  store i32 %4210, i32* %3844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4211 = load i64, i64* %RBP, align 8
  %4212 = add i64 %4211, -40
  %4213 = add i64 %452, 182
  store i64 %4213, i64* %PC, align 8
  %4214 = inttoptr i64 %4212 to i64*
  %4215 = load i64, i64* %4214, align 8
  store i64 %4215, i64* %RAX, align 8, !tbaa !2428
  %4216 = add i64 %4211, -24
  %4217 = add i64 %452, 185
  store i64 %4217, i64* %PC, align 8
  %4218 = inttoptr i64 %4216 to i32*
  %4219 = load i32, i32* %4218, align 4
  %4220 = zext i32 %4219 to i64
  store i64 %4220, i64* %RDX, align 8, !tbaa !2428
  %4221 = add i64 %4211, -44
  %4222 = add i64 %452, 188
  store i64 %4222, i64* %PC, align 8
  %4223 = inttoptr i64 %4221 to i32*
  %4224 = load i32, i32* %4223, align 4
  %4225 = add i32 %4224, -4
  %4226 = zext i32 %4225 to i64
  store i64 %4226, i64* %RSI, align 8, !tbaa !2428
  %4227 = sext i32 %4219 to i64
  %4228 = sext i32 %4225 to i64
  %4229 = mul nsw i64 %4228, %4227
  %4230 = trunc i64 %4229 to i32
  %4231 = and i64 %4229, 4294967295
  store i64 %4231, i64* %RDX, align 8, !tbaa !2428
  %4232 = shl i64 %4229, 32
  %4233 = ashr exact i64 %4232, 32
  %4234 = icmp ne i64 %4233, %4229
  %4235 = zext i1 %4234 to i8
  store i8 %4235, i8* %.pre-phi, align 1, !tbaa !2432
  %4236 = and i32 %4230, 255
  %4237 = tail call i32 @llvm.ctpop.i32(i32 %4236) #8
  %4238 = trunc i32 %4237 to i8
  %4239 = and i8 %4238, 1
  %4240 = xor i8 %4239, 1
  store i8 %4240, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4241 = lshr i32 %4230, 31
  %4242 = trunc i32 %4241 to i8
  store i8 %4242, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4235, i8* %.pre-phi31, align 1, !tbaa !2449
  %4243 = add i64 %4211, -48
  %4244 = add i64 %452, 197
  store i64 %4244, i64* %PC, align 8
  %4245 = inttoptr i64 %4243 to i32*
  %4246 = load i32, i32* %4245, align 4
  %4247 = add i32 %4246, %4230
  %4248 = zext i32 %4247 to i64
  store i64 %4248, i64* %RDX, align 8, !tbaa !2428
  %4249 = icmp ult i32 %4247, %4230
  %4250 = icmp ult i32 %4247, %4246
  %4251 = or i1 %4249, %4250
  %4252 = zext i1 %4251 to i8
  store i8 %4252, i8* %.pre-phi, align 1, !tbaa !2432
  %4253 = and i32 %4247, 255
  %4254 = tail call i32 @llvm.ctpop.i32(i32 %4253) #8
  %4255 = trunc i32 %4254 to i8
  %4256 = and i8 %4255, 1
  %4257 = xor i8 %4256, 1
  store i8 %4257, i8* %.pre-phi23, align 1, !tbaa !2446
  %4258 = xor i32 %4246, %4230
  %4259 = xor i32 %4258, %4247
  %4260 = lshr i32 %4259, 4
  %4261 = trunc i32 %4260 to i8
  %4262 = and i8 %4261, 1
  store i8 %4262, i8* %.pre-phi25, align 1, !tbaa !2450
  %4263 = icmp eq i32 %4247, 0
  %4264 = zext i1 %4263 to i8
  store i8 %4264, i8* %.pre-phi27, align 1, !tbaa !2447
  %4265 = lshr i32 %4247, 31
  %4266 = trunc i32 %4265 to i8
  store i8 %4266, i8* %.pre-phi29, align 1, !tbaa !2448
  %4267 = lshr i32 %4246, 31
  %4268 = xor i32 %4265, %4241
  %4269 = xor i32 %4265, %4267
  %4270 = add nuw nsw i32 %4268, %4269
  %4271 = icmp eq i32 %4270, 2
  %4272 = zext i1 %4271 to i8
  store i8 %4272, i8* %.pre-phi31, align 1, !tbaa !2449
  %4273 = sext i32 %4247 to i64
  store i64 %4273, i64* %RCX, align 8, !tbaa !2428
  %4274 = load i64, i64* %RAX, align 8
  %4275 = shl nsw i64 %4273, 2
  %4276 = add i64 %4275, %4274
  %4277 = add i64 %452, 205
  store i64 %4277, i64* %PC, align 8
  %4278 = load <2 x float>, <2 x float>* %585, align 1
  %4279 = load <2 x i32>, <2 x i32>* %586, align 1
  %4280 = inttoptr i64 %4276 to float*
  %4281 = load float, float* %4280, align 4
  %4282 = extractelement <2 x float> %4278, i32 0
  %4283 = fmul float %4282, %4281
  store float %4283, float* %578, align 1, !tbaa !2452
  %4284 = bitcast <2 x float> %4278 to <2 x i32>
  %4285 = extractelement <2 x i32> %4284, i32 1
  store i32 %4285, i32* %587, align 1, !tbaa !2452
  %4286 = extractelement <2 x i32> %4279, i32 0
  store i32 %4286, i32* %588, align 1, !tbaa !2452
  %4287 = extractelement <2 x i32> %4279, i32 1
  store i32 %4287, i32* %589, align 1, !tbaa !2452
  %4288 = load <2 x float>, <2 x float>* %590, align 1
  %4289 = load <2 x i32>, <2 x i32>* %591, align 1
  %4290 = load <2 x float>, <2 x float>* %585, align 1
  %4291 = extractelement <2 x float> %4288, i32 0
  %4292 = extractelement <2 x float> %4290, i32 0
  %4293 = fadd float %4291, %4292
  store float %4293, float* %570, align 1, !tbaa !2452
  %4294 = bitcast <2 x float> %4288 to <2 x i32>
  %4295 = extractelement <2 x i32> %4294, i32 1
  store i32 %4295, i32* %592, align 1, !tbaa !2452
  %4296 = extractelement <2 x i32> %4289, i32 0
  store i32 %4296, i32* %593, align 1, !tbaa !2452
  %4297 = extractelement <2 x i32> %4289, i32 1
  store i32 %4297, i32* %594, align 1, !tbaa !2452
  %4298 = load i64, i64* %RBP, align 8
  %4299 = add i64 %4298, -32
  %4300 = add i64 %452, 213
  store i64 %4300, i64* %PC, align 8
  %4301 = inttoptr i64 %4299 to i64*
  %4302 = load i64, i64* %4301, align 8
  store i64 %4302, i64* %RAX, align 8, !tbaa !2428
  %4303 = add i64 %4298, -44
  %4304 = add i64 %452, 216
  store i64 %4304, i64* %PC, align 8
  %4305 = inttoptr i64 %4303 to i32*
  %4306 = load i32, i32* %4305, align 4
  %4307 = add i32 %4306, -3
  %4308 = zext i32 %4307 to i64
  store i64 %4308, i64* %RDX, align 8, !tbaa !2428
  %4309 = icmp ult i32 %4306, 3
  %4310 = zext i1 %4309 to i8
  store i8 %4310, i8* %.pre-phi, align 1, !tbaa !2432
  %4311 = and i32 %4307, 255
  %4312 = tail call i32 @llvm.ctpop.i32(i32 %4311) #8
  %4313 = trunc i32 %4312 to i8
  %4314 = and i8 %4313, 1
  %4315 = xor i8 %4314, 1
  store i8 %4315, i8* %.pre-phi23, align 1, !tbaa !2446
  %4316 = xor i32 %4306, %4307
  %4317 = lshr i32 %4316, 4
  %4318 = trunc i32 %4317 to i8
  %4319 = and i8 %4318, 1
  store i8 %4319, i8* %.pre-phi25, align 1, !tbaa !2450
  %4320 = icmp eq i32 %4307, 0
  %4321 = zext i1 %4320 to i8
  store i8 %4321, i8* %.pre-phi27, align 1, !tbaa !2447
  %4322 = lshr i32 %4307, 31
  %4323 = trunc i32 %4322 to i8
  store i8 %4323, i8* %.pre-phi29, align 1, !tbaa !2448
  %4324 = lshr i32 %4306, 31
  %4325 = xor i32 %4322, %4324
  %4326 = add nuw nsw i32 %4325, %4324
  %4327 = icmp eq i32 %4326, 2
  %4328 = zext i1 %4327 to i8
  store i8 %4328, i8* %.pre-phi31, align 1, !tbaa !2449
  %4329 = sext i32 %4307 to i64
  store i64 %4329, i64* %RCX, align 8, !tbaa !2428
  %4330 = shl nsw i64 %4329, 2
  %4331 = add i64 %4330, %4302
  %4332 = add i64 %452, 227
  store i64 %4332, i64* %PC, align 8
  %4333 = inttoptr i64 %4331 to i32*
  %4334 = load i32, i32* %4333, align 4
  store i32 %4334, i32* %3844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4335 = add i64 %4298, -40
  %4336 = add i64 %452, 231
  store i64 %4336, i64* %PC, align 8
  %4337 = inttoptr i64 %4335 to i64*
  %4338 = load i64, i64* %4337, align 8
  store i64 %4338, i64* %RAX, align 8, !tbaa !2428
  %4339 = add i64 %4298, -24
  %4340 = add i64 %452, 234
  store i64 %4340, i64* %PC, align 8
  %4341 = inttoptr i64 %4339 to i32*
  %4342 = load i32, i32* %4341, align 4
  %4343 = zext i32 %4342 to i64
  store i64 %4343, i64* %RDX, align 8, !tbaa !2428
  %4344 = add i64 %452, 237
  store i64 %4344, i64* %PC, align 8
  %4345 = load i32, i32* %4305, align 4
  %4346 = add i32 %4345, -3
  %4347 = zext i32 %4346 to i64
  store i64 %4347, i64* %RSI, align 8, !tbaa !2428
  %4348 = sext i32 %4342 to i64
  %4349 = sext i32 %4346 to i64
  %4350 = mul nsw i64 %4349, %4348
  %4351 = trunc i64 %4350 to i32
  %4352 = and i64 %4350, 4294967295
  store i64 %4352, i64* %RDX, align 8, !tbaa !2428
  %4353 = shl i64 %4350, 32
  %4354 = ashr exact i64 %4353, 32
  %4355 = icmp ne i64 %4354, %4350
  %4356 = zext i1 %4355 to i8
  store i8 %4356, i8* %.pre-phi, align 1, !tbaa !2432
  %4357 = and i32 %4351, 255
  %4358 = tail call i32 @llvm.ctpop.i32(i32 %4357) #8
  %4359 = trunc i32 %4358 to i8
  %4360 = and i8 %4359, 1
  %4361 = xor i8 %4360, 1
  store i8 %4361, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4362 = lshr i32 %4351, 31
  %4363 = trunc i32 %4362 to i8
  store i8 %4363, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4356, i8* %.pre-phi31, align 1, !tbaa !2449
  %4364 = load i64, i64* %RBP, align 8
  %4365 = add i64 %4364, -48
  %4366 = add i64 %452, 246
  store i64 %4366, i64* %PC, align 8
  %4367 = inttoptr i64 %4365 to i32*
  %4368 = load i32, i32* %4367, align 4
  %4369 = add i32 %4368, %4351
  %4370 = zext i32 %4369 to i64
  store i64 %4370, i64* %RDX, align 8, !tbaa !2428
  %4371 = icmp ult i32 %4369, %4351
  %4372 = icmp ult i32 %4369, %4368
  %4373 = or i1 %4371, %4372
  %4374 = zext i1 %4373 to i8
  store i8 %4374, i8* %.pre-phi, align 1, !tbaa !2432
  %4375 = and i32 %4369, 255
  %4376 = tail call i32 @llvm.ctpop.i32(i32 %4375) #8
  %4377 = trunc i32 %4376 to i8
  %4378 = and i8 %4377, 1
  %4379 = xor i8 %4378, 1
  store i8 %4379, i8* %.pre-phi23, align 1, !tbaa !2446
  %4380 = xor i32 %4368, %4351
  %4381 = xor i32 %4380, %4369
  %4382 = lshr i32 %4381, 4
  %4383 = trunc i32 %4382 to i8
  %4384 = and i8 %4383, 1
  store i8 %4384, i8* %.pre-phi25, align 1, !tbaa !2450
  %4385 = icmp eq i32 %4369, 0
  %4386 = zext i1 %4385 to i8
  store i8 %4386, i8* %.pre-phi27, align 1, !tbaa !2447
  %4387 = lshr i32 %4369, 31
  %4388 = trunc i32 %4387 to i8
  store i8 %4388, i8* %.pre-phi29, align 1, !tbaa !2448
  %4389 = lshr i32 %4368, 31
  %4390 = xor i32 %4387, %4362
  %4391 = xor i32 %4387, %4389
  %4392 = add nuw nsw i32 %4390, %4391
  %4393 = icmp eq i32 %4392, 2
  %4394 = zext i1 %4393 to i8
  store i8 %4394, i8* %.pre-phi31, align 1, !tbaa !2449
  %4395 = sext i32 %4369 to i64
  store i64 %4395, i64* %RCX, align 8, !tbaa !2428
  %4396 = load i64, i64* %RAX, align 8
  %4397 = shl nsw i64 %4395, 2
  %4398 = add i64 %4397, %4396
  %4399 = add i64 %452, 254
  store i64 %4399, i64* %PC, align 8
  %4400 = load <2 x float>, <2 x float>* %585, align 1
  %4401 = load <2 x i32>, <2 x i32>* %586, align 1
  %4402 = inttoptr i64 %4398 to float*
  %4403 = load float, float* %4402, align 4
  %4404 = extractelement <2 x float> %4400, i32 0
  %4405 = fmul float %4404, %4403
  store float %4405, float* %578, align 1, !tbaa !2452
  %4406 = bitcast <2 x float> %4400 to <2 x i32>
  %4407 = extractelement <2 x i32> %4406, i32 1
  store i32 %4407, i32* %587, align 1, !tbaa !2452
  %4408 = extractelement <2 x i32> %4401, i32 0
  store i32 %4408, i32* %588, align 1, !tbaa !2452
  %4409 = extractelement <2 x i32> %4401, i32 1
  store i32 %4409, i32* %589, align 1, !tbaa !2452
  %4410 = load <2 x float>, <2 x float>* %590, align 1
  %4411 = load <2 x i32>, <2 x i32>* %591, align 1
  %4412 = load <2 x float>, <2 x float>* %585, align 1
  %4413 = extractelement <2 x float> %4410, i32 0
  %4414 = extractelement <2 x float> %4412, i32 0
  %4415 = fadd float %4413, %4414
  store float %4415, float* %570, align 1, !tbaa !2452
  %4416 = bitcast <2 x float> %4410 to <2 x i32>
  %4417 = extractelement <2 x i32> %4416, i32 1
  store i32 %4417, i32* %592, align 1, !tbaa !2452
  %4418 = extractelement <2 x i32> %4411, i32 0
  store i32 %4418, i32* %593, align 1, !tbaa !2452
  %4419 = extractelement <2 x i32> %4411, i32 1
  store i32 %4419, i32* %594, align 1, !tbaa !2452
  %4420 = add i64 %4364, -32
  %4421 = add i64 %452, 262
  store i64 %4421, i64* %PC, align 8
  %4422 = inttoptr i64 %4420 to i64*
  %4423 = load i64, i64* %4422, align 8
  store i64 %4423, i64* %RAX, align 8, !tbaa !2428
  %4424 = add i64 %4364, -44
  %4425 = add i64 %452, 265
  store i64 %4425, i64* %PC, align 8
  %4426 = inttoptr i64 %4424 to i32*
  %4427 = load i32, i32* %4426, align 4
  %4428 = add i32 %4427, -2
  %4429 = zext i32 %4428 to i64
  store i64 %4429, i64* %RDX, align 8, !tbaa !2428
  %4430 = icmp ult i32 %4427, 2
  %4431 = zext i1 %4430 to i8
  store i8 %4431, i8* %.pre-phi, align 1, !tbaa !2432
  %4432 = and i32 %4428, 255
  %4433 = tail call i32 @llvm.ctpop.i32(i32 %4432) #8
  %4434 = trunc i32 %4433 to i8
  %4435 = and i8 %4434, 1
  %4436 = xor i8 %4435, 1
  store i8 %4436, i8* %.pre-phi23, align 1, !tbaa !2446
  %4437 = xor i32 %4427, %4428
  %4438 = lshr i32 %4437, 4
  %4439 = trunc i32 %4438 to i8
  %4440 = and i8 %4439, 1
  store i8 %4440, i8* %.pre-phi25, align 1, !tbaa !2450
  %4441 = icmp eq i32 %4428, 0
  %4442 = zext i1 %4441 to i8
  store i8 %4442, i8* %.pre-phi27, align 1, !tbaa !2447
  %4443 = lshr i32 %4428, 31
  %4444 = trunc i32 %4443 to i8
  store i8 %4444, i8* %.pre-phi29, align 1, !tbaa !2448
  %4445 = lshr i32 %4427, 31
  %4446 = xor i32 %4443, %4445
  %4447 = add nuw nsw i32 %4446, %4445
  %4448 = icmp eq i32 %4447, 2
  %4449 = zext i1 %4448 to i8
  store i8 %4449, i8* %.pre-phi31, align 1, !tbaa !2449
  %4450 = sext i32 %4428 to i64
  store i64 %4450, i64* %RCX, align 8, !tbaa !2428
  %4451 = shl nsw i64 %4450, 2
  %4452 = add i64 %4451, %4423
  %4453 = add i64 %452, 276
  store i64 %4453, i64* %PC, align 8
  %4454 = inttoptr i64 %4452 to i32*
  %4455 = load i32, i32* %4454, align 4
  store i32 %4455, i32* %3844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4456 = load i64, i64* %RBP, align 8
  %4457 = add i64 %4456, -40
  %4458 = add i64 %452, 280
  store i64 %4458, i64* %PC, align 8
  %4459 = inttoptr i64 %4457 to i64*
  %4460 = load i64, i64* %4459, align 8
  store i64 %4460, i64* %RAX, align 8, !tbaa !2428
  %4461 = add i64 %4456, -24
  %4462 = add i64 %452, 283
  store i64 %4462, i64* %PC, align 8
  %4463 = inttoptr i64 %4461 to i32*
  %4464 = load i32, i32* %4463, align 4
  %4465 = zext i32 %4464 to i64
  store i64 %4465, i64* %RDX, align 8, !tbaa !2428
  %4466 = add i64 %4456, -44
  %4467 = add i64 %452, 286
  store i64 %4467, i64* %PC, align 8
  %4468 = inttoptr i64 %4466 to i32*
  %4469 = load i32, i32* %4468, align 4
  %4470 = add i32 %4469, -2
  %4471 = zext i32 %4470 to i64
  store i64 %4471, i64* %RSI, align 8, !tbaa !2428
  %4472 = sext i32 %4464 to i64
  %4473 = sext i32 %4470 to i64
  %4474 = mul nsw i64 %4473, %4472
  %4475 = trunc i64 %4474 to i32
  %4476 = and i64 %4474, 4294967295
  store i64 %4476, i64* %RDX, align 8, !tbaa !2428
  %4477 = shl i64 %4474, 32
  %4478 = ashr exact i64 %4477, 32
  %4479 = icmp ne i64 %4478, %4474
  %4480 = zext i1 %4479 to i8
  store i8 %4480, i8* %.pre-phi, align 1, !tbaa !2432
  %4481 = and i32 %4475, 255
  %4482 = tail call i32 @llvm.ctpop.i32(i32 %4481) #8
  %4483 = trunc i32 %4482 to i8
  %4484 = and i8 %4483, 1
  %4485 = xor i8 %4484, 1
  store i8 %4485, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4486 = lshr i32 %4475, 31
  %4487 = trunc i32 %4486 to i8
  store i8 %4487, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4480, i8* %.pre-phi31, align 1, !tbaa !2449
  %4488 = add i64 %4456, -48
  %4489 = add i64 %452, 295
  store i64 %4489, i64* %PC, align 8
  %4490 = inttoptr i64 %4488 to i32*
  %4491 = load i32, i32* %4490, align 4
  %4492 = add i32 %4491, %4475
  %4493 = zext i32 %4492 to i64
  store i64 %4493, i64* %RDX, align 8, !tbaa !2428
  %4494 = icmp ult i32 %4492, %4475
  %4495 = icmp ult i32 %4492, %4491
  %4496 = or i1 %4494, %4495
  %4497 = zext i1 %4496 to i8
  store i8 %4497, i8* %.pre-phi, align 1, !tbaa !2432
  %4498 = and i32 %4492, 255
  %4499 = tail call i32 @llvm.ctpop.i32(i32 %4498) #8
  %4500 = trunc i32 %4499 to i8
  %4501 = and i8 %4500, 1
  %4502 = xor i8 %4501, 1
  store i8 %4502, i8* %.pre-phi23, align 1, !tbaa !2446
  %4503 = xor i32 %4491, %4475
  %4504 = xor i32 %4503, %4492
  %4505 = lshr i32 %4504, 4
  %4506 = trunc i32 %4505 to i8
  %4507 = and i8 %4506, 1
  store i8 %4507, i8* %.pre-phi25, align 1, !tbaa !2450
  %4508 = icmp eq i32 %4492, 0
  %4509 = zext i1 %4508 to i8
  store i8 %4509, i8* %.pre-phi27, align 1, !tbaa !2447
  %4510 = lshr i32 %4492, 31
  %4511 = trunc i32 %4510 to i8
  store i8 %4511, i8* %.pre-phi29, align 1, !tbaa !2448
  %4512 = lshr i32 %4491, 31
  %4513 = xor i32 %4510, %4486
  %4514 = xor i32 %4510, %4512
  %4515 = add nuw nsw i32 %4513, %4514
  %4516 = icmp eq i32 %4515, 2
  %4517 = zext i1 %4516 to i8
  store i8 %4517, i8* %.pre-phi31, align 1, !tbaa !2449
  %4518 = sext i32 %4492 to i64
  store i64 %4518, i64* %RCX, align 8, !tbaa !2428
  %4519 = load i64, i64* %RAX, align 8
  %4520 = shl nsw i64 %4518, 2
  %4521 = add i64 %4520, %4519
  %4522 = add i64 %452, 303
  store i64 %4522, i64* %PC, align 8
  %4523 = load <2 x float>, <2 x float>* %585, align 1
  %4524 = load <2 x i32>, <2 x i32>* %586, align 1
  %4525 = inttoptr i64 %4521 to float*
  %4526 = load float, float* %4525, align 4
  %4527 = extractelement <2 x float> %4523, i32 0
  %4528 = fmul float %4527, %4526
  store float %4528, float* %578, align 1, !tbaa !2452
  %4529 = bitcast <2 x float> %4523 to <2 x i32>
  %4530 = extractelement <2 x i32> %4529, i32 1
  store i32 %4530, i32* %587, align 1, !tbaa !2452
  %4531 = extractelement <2 x i32> %4524, i32 0
  store i32 %4531, i32* %588, align 1, !tbaa !2452
  %4532 = extractelement <2 x i32> %4524, i32 1
  store i32 %4532, i32* %589, align 1, !tbaa !2452
  %4533 = load <2 x float>, <2 x float>* %590, align 1
  %4534 = load <2 x i32>, <2 x i32>* %591, align 1
  %4535 = load <2 x float>, <2 x float>* %585, align 1
  %4536 = extractelement <2 x float> %4533, i32 0
  %4537 = extractelement <2 x float> %4535, i32 0
  %4538 = fadd float %4536, %4537
  store float %4538, float* %570, align 1, !tbaa !2452
  %4539 = bitcast <2 x float> %4533 to <2 x i32>
  %4540 = extractelement <2 x i32> %4539, i32 1
  store i32 %4540, i32* %592, align 1, !tbaa !2452
  %4541 = extractelement <2 x i32> %4534, i32 0
  store i32 %4541, i32* %593, align 1, !tbaa !2452
  %4542 = extractelement <2 x i32> %4534, i32 1
  store i32 %4542, i32* %594, align 1, !tbaa !2452
  %4543 = load i64, i64* %RBP, align 8
  %4544 = add i64 %4543, -32
  %4545 = add i64 %452, 311
  store i64 %4545, i64* %PC, align 8
  %4546 = inttoptr i64 %4544 to i64*
  %4547 = load i64, i64* %4546, align 8
  store i64 %4547, i64* %RAX, align 8, !tbaa !2428
  %4548 = add i64 %4543, -44
  %4549 = add i64 %452, 314
  store i64 %4549, i64* %PC, align 8
  %4550 = inttoptr i64 %4548 to i32*
  %4551 = load i32, i32* %4550, align 4
  %4552 = add i32 %4551, -1
  %4553 = zext i32 %4552 to i64
  store i64 %4553, i64* %RDX, align 8, !tbaa !2428
  %4554 = icmp eq i32 %4551, 0
  %4555 = zext i1 %4554 to i8
  store i8 %4555, i8* %.pre-phi, align 1, !tbaa !2432
  %4556 = and i32 %4552, 255
  %4557 = tail call i32 @llvm.ctpop.i32(i32 %4556) #8
  %4558 = trunc i32 %4557 to i8
  %4559 = and i8 %4558, 1
  %4560 = xor i8 %4559, 1
  store i8 %4560, i8* %.pre-phi23, align 1, !tbaa !2446
  %4561 = xor i32 %4551, %4552
  %4562 = lshr i32 %4561, 4
  %4563 = trunc i32 %4562 to i8
  %4564 = and i8 %4563, 1
  store i8 %4564, i8* %.pre-phi25, align 1, !tbaa !2450
  %4565 = icmp eq i32 %4552, 0
  %4566 = zext i1 %4565 to i8
  store i8 %4566, i8* %.pre-phi27, align 1, !tbaa !2447
  %4567 = lshr i32 %4552, 31
  %4568 = trunc i32 %4567 to i8
  store i8 %4568, i8* %.pre-phi29, align 1, !tbaa !2448
  %4569 = lshr i32 %4551, 31
  %4570 = xor i32 %4567, %4569
  %4571 = add nuw nsw i32 %4570, %4569
  %4572 = icmp eq i32 %4571, 2
  %4573 = zext i1 %4572 to i8
  store i8 %4573, i8* %.pre-phi31, align 1, !tbaa !2449
  %4574 = sext i32 %4552 to i64
  store i64 %4574, i64* %RCX, align 8, !tbaa !2428
  %4575 = shl nsw i64 %4574, 2
  %4576 = add i64 %4575, %4547
  %4577 = add i64 %452, 325
  store i64 %4577, i64* %PC, align 8
  %4578 = inttoptr i64 %4576 to i32*
  %4579 = load i32, i32* %4578, align 4
  store i32 %4579, i32* %3844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4580 = add i64 %4543, -40
  %4581 = add i64 %452, 329
  store i64 %4581, i64* %PC, align 8
  %4582 = inttoptr i64 %4580 to i64*
  %4583 = load i64, i64* %4582, align 8
  store i64 %4583, i64* %RAX, align 8, !tbaa !2428
  %4584 = add i64 %4543, -24
  %4585 = add i64 %452, 332
  store i64 %4585, i64* %PC, align 8
  %4586 = inttoptr i64 %4584 to i32*
  %4587 = load i32, i32* %4586, align 4
  %4588 = zext i32 %4587 to i64
  store i64 %4588, i64* %RDX, align 8, !tbaa !2428
  %4589 = add i64 %452, 335
  store i64 %4589, i64* %PC, align 8
  %4590 = load i32, i32* %4550, align 4
  %4591 = add i32 %4590, -1
  %4592 = zext i32 %4591 to i64
  store i64 %4592, i64* %RSI, align 8, !tbaa !2428
  %4593 = sext i32 %4587 to i64
  %4594 = sext i32 %4591 to i64
  %4595 = mul nsw i64 %4594, %4593
  %4596 = trunc i64 %4595 to i32
  %4597 = and i64 %4595, 4294967295
  store i64 %4597, i64* %RDX, align 8, !tbaa !2428
  %4598 = shl i64 %4595, 32
  %4599 = ashr exact i64 %4598, 32
  %4600 = icmp ne i64 %4599, %4595
  %4601 = zext i1 %4600 to i8
  store i8 %4601, i8* %.pre-phi, align 1, !tbaa !2432
  %4602 = and i32 %4596, 255
  %4603 = tail call i32 @llvm.ctpop.i32(i32 %4602) #8
  %4604 = trunc i32 %4603 to i8
  %4605 = and i8 %4604, 1
  %4606 = xor i8 %4605, 1
  store i8 %4606, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4607 = lshr i32 %4596, 31
  %4608 = trunc i32 %4607 to i8
  store i8 %4608, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4601, i8* %.pre-phi31, align 1, !tbaa !2449
  %4609 = load i64, i64* %RBP, align 8
  %4610 = add i64 %4609, -48
  %4611 = add i64 %452, 344
  store i64 %4611, i64* %PC, align 8
  %4612 = inttoptr i64 %4610 to i32*
  %4613 = load i32, i32* %4612, align 4
  %4614 = add i32 %4613, %4596
  %4615 = zext i32 %4614 to i64
  store i64 %4615, i64* %RDX, align 8, !tbaa !2428
  %4616 = icmp ult i32 %4614, %4596
  %4617 = icmp ult i32 %4614, %4613
  %4618 = or i1 %4616, %4617
  %4619 = zext i1 %4618 to i8
  store i8 %4619, i8* %.pre-phi, align 1, !tbaa !2432
  %4620 = and i32 %4614, 255
  %4621 = tail call i32 @llvm.ctpop.i32(i32 %4620) #8
  %4622 = trunc i32 %4621 to i8
  %4623 = and i8 %4622, 1
  %4624 = xor i8 %4623, 1
  store i8 %4624, i8* %.pre-phi23, align 1, !tbaa !2446
  %4625 = xor i32 %4613, %4596
  %4626 = xor i32 %4625, %4614
  %4627 = lshr i32 %4626, 4
  %4628 = trunc i32 %4627 to i8
  %4629 = and i8 %4628, 1
  store i8 %4629, i8* %.pre-phi25, align 1, !tbaa !2450
  %4630 = icmp eq i32 %4614, 0
  %4631 = zext i1 %4630 to i8
  store i8 %4631, i8* %.pre-phi27, align 1, !tbaa !2447
  %4632 = lshr i32 %4614, 31
  %4633 = trunc i32 %4632 to i8
  store i8 %4633, i8* %.pre-phi29, align 1, !tbaa !2448
  %4634 = lshr i32 %4613, 31
  %4635 = xor i32 %4632, %4607
  %4636 = xor i32 %4632, %4634
  %4637 = add nuw nsw i32 %4635, %4636
  %4638 = icmp eq i32 %4637, 2
  %4639 = zext i1 %4638 to i8
  store i8 %4639, i8* %.pre-phi31, align 1, !tbaa !2449
  %4640 = sext i32 %4614 to i64
  store i64 %4640, i64* %RCX, align 8, !tbaa !2428
  %4641 = load i64, i64* %RAX, align 8
  %4642 = shl nsw i64 %4640, 2
  %4643 = add i64 %4642, %4641
  %4644 = add i64 %452, 352
  store i64 %4644, i64* %PC, align 8
  %4645 = load <2 x float>, <2 x float>* %585, align 1
  %4646 = load <2 x i32>, <2 x i32>* %586, align 1
  %4647 = inttoptr i64 %4643 to float*
  %4648 = load float, float* %4647, align 4
  %4649 = extractelement <2 x float> %4645, i32 0
  %4650 = fmul float %4649, %4648
  store float %4650, float* %578, align 1, !tbaa !2452
  %4651 = bitcast <2 x float> %4645 to <2 x i32>
  %4652 = extractelement <2 x i32> %4651, i32 1
  store i32 %4652, i32* %587, align 1, !tbaa !2452
  %4653 = extractelement <2 x i32> %4646, i32 0
  store i32 %4653, i32* %588, align 1, !tbaa !2452
  %4654 = extractelement <2 x i32> %4646, i32 1
  store i32 %4654, i32* %589, align 1, !tbaa !2452
  %4655 = load <2 x float>, <2 x float>* %590, align 1
  %4656 = load <2 x i32>, <2 x i32>* %591, align 1
  %4657 = load <2 x float>, <2 x float>* %585, align 1
  %4658 = extractelement <2 x float> %4655, i32 0
  %4659 = extractelement <2 x float> %4657, i32 0
  %4660 = fadd float %4658, %4659
  store float %4660, float* %570, align 1, !tbaa !2452
  %4661 = bitcast <2 x float> %4655 to <2 x i32>
  %4662 = extractelement <2 x i32> %4661, i32 1
  store i32 %4662, i32* %592, align 1, !tbaa !2452
  %4663 = extractelement <2 x i32> %4656, i32 0
  store i32 %4663, i32* %593, align 1, !tbaa !2452
  %4664 = extractelement <2 x i32> %4656, i32 1
  store i32 %4664, i32* %594, align 1, !tbaa !2452
  %4665 = add i64 %4609, -32
  %4666 = add i64 %452, 360
  store i64 %4666, i64* %PC, align 8
  %4667 = inttoptr i64 %4665 to i64*
  %4668 = load i64, i64* %4667, align 8
  store i64 %4668, i64* %RAX, align 8, !tbaa !2428
  %4669 = add i64 %4609, -44
  %4670 = add i64 %452, 364
  store i64 %4670, i64* %PC, align 8
  %4671 = inttoptr i64 %4669 to i32*
  %4672 = load i32, i32* %4671, align 4
  %4673 = sext i32 %4672 to i64
  store i64 %4673, i64* %RCX, align 8, !tbaa !2428
  %4674 = shl nsw i64 %4673, 2
  %4675 = add i64 %4674, %4668
  %4676 = add i64 %452, 369
  store i64 %4676, i64* %PC, align 8
  %4677 = inttoptr i64 %4675 to i32*
  %4678 = load i32, i32* %4677, align 4
  store i32 %4678, i32* %3844, align 1, !tbaa !2452
  store float 0.000000e+00, float* %580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %584, align 1, !tbaa !2452
  %4679 = load i64, i64* %RBP, align 8
  %4680 = add i64 %4679, -40
  %4681 = add i64 %452, 373
  store i64 %4681, i64* %PC, align 8
  %4682 = inttoptr i64 %4680 to i64*
  %4683 = load i64, i64* %4682, align 8
  store i64 %4683, i64* %RAX, align 8, !tbaa !2428
  %4684 = add i64 %4679, -24
  %4685 = add i64 %452, 376
  store i64 %4685, i64* %PC, align 8
  %4686 = inttoptr i64 %4684 to i32*
  %4687 = load i32, i32* %4686, align 4
  %4688 = zext i32 %4687 to i64
  store i64 %4688, i64* %RDX, align 8, !tbaa !2428
  %4689 = add i64 %4679, -44
  %4690 = add i64 %452, 380
  store i64 %4690, i64* %PC, align 8
  %4691 = inttoptr i64 %4689 to i32*
  %4692 = load i32, i32* %4691, align 4
  %4693 = sext i32 %4687 to i64
  %4694 = sext i32 %4692 to i64
  %4695 = mul nsw i64 %4694, %4693
  %4696 = trunc i64 %4695 to i32
  %4697 = and i64 %4695, 4294967295
  store i64 %4697, i64* %RDX, align 8, !tbaa !2428
  %4698 = shl i64 %4695, 32
  %4699 = ashr exact i64 %4698, 32
  %4700 = icmp ne i64 %4699, %4695
  %4701 = zext i1 %4700 to i8
  store i8 %4701, i8* %.pre-phi, align 1, !tbaa !2432
  %4702 = and i32 %4696, 255
  %4703 = tail call i32 @llvm.ctpop.i32(i32 %4702) #8
  %4704 = trunc i32 %4703 to i8
  %4705 = and i8 %4704, 1
  %4706 = xor i8 %4705, 1
  store i8 %4706, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  %4707 = lshr i32 %4696, 31
  %4708 = trunc i32 %4707 to i8
  store i8 %4708, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 %4701, i8* %.pre-phi31, align 1, !tbaa !2449
  %4709 = add i64 %4679, -48
  %4710 = add i64 %452, 383
  store i64 %4710, i64* %PC, align 8
  %4711 = inttoptr i64 %4709 to i32*
  %4712 = load i32, i32* %4711, align 4
  %4713 = add i32 %4712, %4696
  %4714 = zext i32 %4713 to i64
  store i64 %4714, i64* %RDX, align 8, !tbaa !2428
  %4715 = icmp ult i32 %4713, %4696
  %4716 = icmp ult i32 %4713, %4712
  %4717 = or i1 %4715, %4716
  %4718 = zext i1 %4717 to i8
  store i8 %4718, i8* %.pre-phi, align 1, !tbaa !2432
  %4719 = and i32 %4713, 255
  %4720 = tail call i32 @llvm.ctpop.i32(i32 %4719) #8
  %4721 = trunc i32 %4720 to i8
  %4722 = and i8 %4721, 1
  %4723 = xor i8 %4722, 1
  store i8 %4723, i8* %.pre-phi23, align 1, !tbaa !2446
  %4724 = xor i32 %4712, %4696
  %4725 = xor i32 %4724, %4713
  %4726 = lshr i32 %4725, 4
  %4727 = trunc i32 %4726 to i8
  %4728 = and i8 %4727, 1
  store i8 %4728, i8* %.pre-phi25, align 1, !tbaa !2450
  %4729 = icmp eq i32 %4713, 0
  %4730 = zext i1 %4729 to i8
  store i8 %4730, i8* %.pre-phi27, align 1, !tbaa !2447
  %4731 = lshr i32 %4713, 31
  %4732 = trunc i32 %4731 to i8
  store i8 %4732, i8* %.pre-phi29, align 1, !tbaa !2448
  %4733 = lshr i32 %4712, 31
  %4734 = xor i32 %4731, %4707
  %4735 = xor i32 %4731, %4733
  %4736 = add nuw nsw i32 %4734, %4735
  %4737 = icmp eq i32 %4736, 2
  %4738 = zext i1 %4737 to i8
  store i8 %4738, i8* %.pre-phi31, align 1, !tbaa !2449
  %4739 = sext i32 %4713 to i64
  store i64 %4739, i64* %RCX, align 8, !tbaa !2428
  %4740 = shl nsw i64 %4739, 2
  %4741 = add i64 %4740, %4683
  %4742 = add i64 %452, 391
  store i64 %4742, i64* %PC, align 8
  %4743 = load <2 x float>, <2 x float>* %585, align 1
  %4744 = load <2 x i32>, <2 x i32>* %586, align 1
  %4745 = inttoptr i64 %4741 to float*
  %4746 = load float, float* %4745, align 4
  %4747 = extractelement <2 x float> %4743, i32 0
  %4748 = fmul float %4747, %4746
  store float %4748, float* %578, align 1, !tbaa !2452
  %4749 = bitcast <2 x float> %4743 to <2 x i32>
  %4750 = extractelement <2 x i32> %4749, i32 1
  store i32 %4750, i32* %587, align 1, !tbaa !2452
  %4751 = extractelement <2 x i32> %4744, i32 0
  store i32 %4751, i32* %588, align 1, !tbaa !2452
  %4752 = extractelement <2 x i32> %4744, i32 1
  store i32 %4752, i32* %589, align 1, !tbaa !2452
  %4753 = load <2 x float>, <2 x float>* %590, align 1
  %4754 = load <2 x i32>, <2 x i32>* %591, align 1
  %4755 = load <2 x float>, <2 x float>* %585, align 1
  %4756 = extractelement <2 x float> %4753, i32 0
  %4757 = extractelement <2 x float> %4755, i32 0
  %4758 = fadd float %4756, %4757
  store float %4758, float* %570, align 1, !tbaa !2452
  %4759 = bitcast <2 x float> %4753 to <2 x i32>
  %4760 = extractelement <2 x i32> %4759, i32 1
  store i32 %4760, i32* %592, align 1, !tbaa !2452
  %4761 = extractelement <2 x i32> %4754, i32 0
  store i32 %4761, i32* %593, align 1, !tbaa !2452
  %4762 = extractelement <2 x i32> %4754, i32 1
  store i32 %4762, i32* %594, align 1, !tbaa !2452
  %4763 = load i64, i64* %RBP, align 8
  %4764 = add i64 %4763, -16
  %4765 = add i64 %452, 399
  store i64 %4765, i64* %PC, align 8
  %4766 = inttoptr i64 %4764 to i64*
  %4767 = load i64, i64* %4766, align 8
  store i64 %4767, i64* %RAX, align 8, !tbaa !2428
  %4768 = add i64 %4763, -48
  %4769 = add i64 %452, 403
  store i64 %4769, i64* %PC, align 8
  %4770 = inttoptr i64 %4768 to i32*
  %4771 = load i32, i32* %4770, align 4
  %4772 = sext i32 %4771 to i64
  store i64 %4772, i64* %RCX, align 8, !tbaa !2428
  %4773 = shl nsw i64 %4772, 2
  %4774 = add i64 %4773, %4767
  %4775 = add i64 %452, 408
  store i64 %4775, i64* %PC, align 8
  %4776 = load <2 x float>, <2 x float>* %590, align 1
  %4777 = extractelement <2 x float> %4776, i32 0
  %4778 = inttoptr i64 %4774 to float*
  store float %4777, float* %4778, align 4
  %4779 = load i64, i64* %RBP, align 8
  %4780 = add i64 %4779, -48
  %4781 = load i64, i64* %PC, align 8
  %4782 = add i64 %4781, 3
  store i64 %4782, i64* %PC, align 8
  %4783 = inttoptr i64 %4780 to i32*
  %4784 = load i32, i32* %4783, align 4
  %4785 = add i32 %4784, 1
  %4786 = zext i32 %4785 to i64
  store i64 %4786, i64* %RAX, align 8, !tbaa !2428
  %4787 = icmp eq i32 %4784, -1
  %4788 = icmp eq i32 %4785, 0
  %4789 = or i1 %4787, %4788
  %4790 = zext i1 %4789 to i8
  store i8 %4790, i8* %.pre-phi, align 1, !tbaa !2432
  %4791 = and i32 %4785, 255
  %4792 = tail call i32 @llvm.ctpop.i32(i32 %4791) #8
  %4793 = trunc i32 %4792 to i8
  %4794 = and i8 %4793, 1
  %4795 = xor i8 %4794, 1
  store i8 %4795, i8* %.pre-phi23, align 1, !tbaa !2446
  %4796 = xor i32 %4784, %4785
  %4797 = lshr i32 %4796, 4
  %4798 = trunc i32 %4797 to i8
  %4799 = and i8 %4798, 1
  store i8 %4799, i8* %.pre-phi25, align 1, !tbaa !2450
  %4800 = zext i1 %4788 to i8
  store i8 %4800, i8* %.pre-phi27, align 1, !tbaa !2447
  %4801 = lshr i32 %4785, 31
  %4802 = trunc i32 %4801 to i8
  store i8 %4802, i8* %.pre-phi29, align 1, !tbaa !2448
  %4803 = lshr i32 %4784, 31
  %4804 = xor i32 %4801, %4803
  %4805 = add nuw nsw i32 %4804, %4801
  %4806 = icmp eq i32 %4805, 2
  %4807 = zext i1 %4806 to i8
  store i8 %4807, i8* %.pre-phi31, align 1, !tbaa !2449
  %4808 = add i64 %4781, 9
  store i64 %4808, i64* %PC, align 8
  store i32 %4785, i32* %4783, align 4
  %4809 = load i64, i64* %PC, align 8
  %4810 = add i64 %4809, -429
  store i64 %4810, i64* %PC, align 8, !tbaa !2428
  br label %block_4022cd

block_402298:                                     ; preds = %block_4021aa
  %4811 = add i64 %3478, 5
  store i64 %4811, i64* %PC, align 8, !tbaa !2428
  br label %block_40229d

block_402806:                                     ; preds = %block_4024a6
  %4812 = add i64 %3627, 1
  store i64 %4812, i64* %PC, align 8
  %4813 = load i64, i64* %11, align 8, !tbaa !2428
  %4814 = add i64 %4813, 8
  %4815 = inttoptr i64 %4813 to i64*
  %4816 = load i64, i64* %4815, align 8
  store i64 %4816, i64* %RBP, align 8, !tbaa !2428
  store i64 %4814, i64* %11, align 8, !tbaa !2428
  %4817 = add i64 %3627, 2
  store i64 %4817, i64* %PC, align 8
  %4818 = inttoptr i64 %4814 to i64*
  %4819 = load i64, i64* %4818, align 8
  store i64 %4819, i64* %PC, align 8, !tbaa !2428
  %4820 = add i64 %4813, 16
  store i64 %4820, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %4860

block_402175:                                     ; preds = %block_4020e9
  %4821 = add i64 %3589, 5
  store i64 %4821, i64* %PC, align 8, !tbaa !2428
  br label %block_40217a

block_402484:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_40247f
  %4822 = phi i64 [ %3709, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %416, %block_40247f ]
  %4823 = phi i64 [ %3738, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %3402, %block_40247f ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %4824 = add i64 %4822, -20
  %4825 = add i64 %4823, 8
  store i64 %4825, i64* %PC, align 8
  %4826 = inttoptr i64 %4824 to i32*
  %4827 = load i32, i32* %4826, align 4
  %4828 = zext i32 %4827 to i64
  store i64 %4828, i64* %RCX, align 8, !tbaa !2428
  %4829 = add i64 %4822, -72
  %4830 = add i64 %4823, 11
  store i64 %4830, i64* %PC, align 8
  %4831 = inttoptr i64 %4829 to i32*
  store i32 16, i32* %4831, align 4
  %4832 = load i32, i32* %ECX, align 4
  %4833 = zext i32 %4832 to i64
  %4834 = load i64, i64* %PC, align 8
  store i64 %4833, i64* %RAX, align 8, !tbaa !2428
  %4835 = sext i32 %4832 to i64
  %4836 = lshr i64 %4835, 32
  store i64 %4836, i64* %64, align 8, !tbaa !2428
  %4837 = load i64, i64* %RBP, align 8
  %4838 = add i64 %4837, -72
  %4839 = add i64 %4834, 6
  store i64 %4839, i64* %PC, align 8
  %4840 = inttoptr i64 %4838 to i32*
  %4841 = load i32, i32* %4840, align 4
  %4842 = zext i32 %4841 to i64
  store i64 %4842, i64* %RCX, align 8, !tbaa !2428
  %4843 = add i64 %4834, 8
  store i64 %4843, i64* %PC, align 8
  %4844 = sext i32 %4841 to i64
  %4845 = shl nuw i64 %4836, 32
  %4846 = or i64 %4845, %4833
  %4847 = sdiv i64 %4846, %4844
  %4848 = shl i64 %4847, 32
  %4849 = ashr exact i64 %4848, 32
  %4850 = icmp eq i64 %4847, %4849
  br i1 %4850, label %4853, label %4851

; <label>:4851:                                   ; preds = %block_402484
  %4852 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4843, %struct.Memory* %3705) #9
  %.pre16 = load i64, i64* %RDX, align 8
  %.pre17 = load i64, i64* %PC, align 8
  %.pre18 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:4853:                                   ; preds = %block_402484
  %4854 = srem i64 %4846, %4844
  %4855 = and i64 %4847, 4294967295
  store i64 %4855, i64* %RAX, align 8, !tbaa !2428
  %4856 = and i64 %4854, 4294967295
  store i64 %4856, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi23, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi25, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi27, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi29, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi31, align 1, !tbaa !2449
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %4853, %4851
  %4857 = phi i64 [ %.pre18, %4851 ], [ %4837, %4853 ]
  %4858 = phi i64 [ %.pre17, %4851 ], [ %4843, %4853 ]
  %4859 = phi i64 [ %.pre16, %4851 ], [ %4856, %4853 ]
  %4860 = phi %struct.Memory* [ %4852, %4851 ], [ %3705, %4853 ]
  %4861 = trunc i64 %4859 to i32
  %4862 = add i32 %4861, 16
  %4863 = zext i32 %4862 to i64
  store i64 %4863, i64* %RDX, align 8, !tbaa !2428
  %4864 = icmp ugt i32 %4861, -17
  %4865 = zext i1 %4864 to i8
  store i8 %4865, i8* %.pre-phi, align 1, !tbaa !2432
  %4866 = and i32 %4862, 255
  %4867 = tail call i32 @llvm.ctpop.i32(i32 %4866) #8
  %4868 = trunc i32 %4867 to i8
  %4869 = and i8 %4868, 1
  %4870 = xor i8 %4869, 1
  store i8 %4870, i8* %.pre-phi23, align 1, !tbaa !2446
  %4871 = xor i32 %4861, 16
  %4872 = xor i32 %4871, %4862
  %4873 = lshr i32 %4872, 4
  %4874 = trunc i32 %4873 to i8
  %4875 = and i8 %4874, 1
  store i8 %4875, i8* %.pre-phi25, align 1, !tbaa !2450
  %4876 = icmp eq i32 %4862, 0
  %4877 = zext i1 %4876 to i8
  store i8 %4877, i8* %.pre-phi27, align 1, !tbaa !2447
  %4878 = lshr i32 %4862, 31
  %4879 = trunc i32 %4878 to i8
  store i8 %4879, i8* %.pre-phi29, align 1, !tbaa !2448
  %4880 = lshr i32 %4861, 31
  %4881 = xor i32 %4878, %4880
  %4882 = add nuw nsw i32 %4881, %4878
  %4883 = icmp eq i32 %4882, 2
  %4884 = zext i1 %4883 to i8
  store i8 %4884, i8* %.pre-phi31, align 1, !tbaa !2449
  %4885 = add i64 %4857, -52
  %4886 = add i64 %4858, 6
  store i64 %4886, i64* %PC, align 8
  %4887 = inttoptr i64 %4885 to i32*
  store i32 %4862, i32* %4887, align 4
  %4888 = load i64, i64* %RBP, align 8
  %4889 = add i64 %4888, -52
  %4890 = load i64, i64* %PC, align 8
  %4891 = add i64 %4890, 3
  store i64 %4891, i64* %PC, align 8
  %4892 = inttoptr i64 %4889 to i32*
  %4893 = load i32, i32* %4892, align 4
  %4894 = add i32 %4893, -1
  %4895 = zext i32 %4894 to i64
  store i64 %4895, i64* %RDX, align 8, !tbaa !2428
  %4896 = icmp eq i32 %4893, 0
  %4897 = zext i1 %4896 to i8
  store i8 %4897, i8* %.pre-phi, align 1, !tbaa !2432
  %4898 = and i32 %4894, 255
  %4899 = tail call i32 @llvm.ctpop.i32(i32 %4898) #8
  %4900 = trunc i32 %4899 to i8
  %4901 = and i8 %4900, 1
  %4902 = xor i8 %4901, 1
  store i8 %4902, i8* %.pre-phi23, align 1, !tbaa !2446
  %4903 = xor i32 %4893, %4894
  %4904 = lshr i32 %4903, 4
  %4905 = trunc i32 %4904 to i8
  %4906 = and i8 %4905, 1
  store i8 %4906, i8* %.pre-phi25, align 1, !tbaa !2450
  %4907 = icmp eq i32 %4894, 0
  %4908 = zext i1 %4907 to i8
  store i8 %4908, i8* %.pre-phi27, align 1, !tbaa !2447
  %4909 = lshr i32 %4894, 31
  %4910 = trunc i32 %4909 to i8
  store i8 %4910, i8* %.pre-phi29, align 1, !tbaa !2448
  %4911 = lshr i32 %4893, 31
  %4912 = xor i32 %4909, %4911
  %4913 = add nuw nsw i32 %4912, %4911
  %4914 = icmp eq i32 %4913, 2
  %4915 = zext i1 %4914 to i8
  store i8 %4915, i8* %.pre-phi31, align 1, !tbaa !2449
  %4916 = add i64 %4888, -44
  %4917 = add i64 %4890, 9
  store i64 %4917, i64* %PC, align 8
  %4918 = inttoptr i64 %4916 to i32*
  store i32 %4894, i32* %4918, align 4
  %4919 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %4920 = bitcast [32 x %union.VectorReg]* %7 to float*
  %4921 = getelementptr inbounds i8, i8* %4919, i64 4
  %4922 = bitcast i8* %4921 to float*
  %4923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %4924 = bitcast i64* %4923 to float*
  %4925 = getelementptr inbounds i8, i8* %4919, i64 12
  %4926 = bitcast i8* %4925 to float*
  %4927 = bitcast %union.VectorReg* %8 to i8*
  %4928 = bitcast %union.VectorReg* %8 to float*
  %4929 = getelementptr inbounds i8, i8* %4927, i64 4
  %4930 = bitcast i8* %4929 to float*
  %4931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %4932 = bitcast i64* %4931 to float*
  %4933 = getelementptr inbounds i8, i8* %4927, i64 12
  %4934 = bitcast i8* %4933 to float*
  %4935 = bitcast %union.VectorReg* %8 to <2 x float>*
  %4936 = bitcast i64* %4931 to <2 x i32>*
  %4937 = bitcast i8* %4929 to i32*
  %4938 = bitcast i64* %4931 to i32*
  %4939 = bitcast i8* %4933 to i32*
  %4940 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %4941 = bitcast i64* %4923 to <2 x i32>*
  %4942 = bitcast i8* %4921 to i32*
  %4943 = bitcast i64* %4923 to i32*
  %4944 = bitcast i8* %4925 to i32*
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4024a6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400600_what_date(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400600:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, 5
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %6 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %PC, align 8, !tbaa !2428
  %15 = add i64 %6, 8
  store i64 %15, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005c0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #8
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2450
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2447
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2448
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2449
  %40 = add i64 %10, -289
  %41 = add i64 %10, 12
  %42 = add i64 %7, -32
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43, align 8
  store i64 %42, i64* %RSP, align 8, !tbaa !2428
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %44 = tail call fastcc %struct.Memory* @ext_653140_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %45 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %46 = load i64, i64* %PC, align 8
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 4) to i32*), align 4
  %48 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %47, i32* %48, align 1, !tbaa !2452
  %49 = getelementptr inbounds i8, i8* %45, i64 4
  %50 = bitcast i8* %49 to float*
  store float 0.000000e+00, float* %50, align 1, !tbaa !2452
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %52 = bitcast i64* %51 to float*
  store float 0.000000e+00, float* %52, align 1, !tbaa !2452
  %53 = getelementptr inbounds i8, i8* %45, i64 12
  %54 = bitcast i8* %53 to float*
  store float 0.000000e+00, float* %54, align 1, !tbaa !2452
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i64, i64* %RAX, align 8
  %58 = add i64 %46, 12
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = bitcast %union.VectorReg* %4 to i8*
  %67 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %68 = load <2 x i32>, <2 x i32>* %67, align 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %70 = bitcast i64* %69 to <2 x i32>*
  %71 = load <2 x i32>, <2 x i32>* %70, align 1
  %72 = sitofp i64 %65 to float
  %73 = bitcast %union.VectorReg* %4 to float*
  store float %72, float* %73, align 1, !tbaa !2452
  %74 = extractelement <2 x i32> %68, i32 1
  %75 = getelementptr inbounds i8, i8* %66, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %74, i32* %76, align 1, !tbaa !2452
  %77 = extractelement <2 x i32> %71, i32 0
  %78 = bitcast i64* %69 to i32*
  store i32 %77, i32* %78, align 1, !tbaa !2452
  %79 = extractelement <2 x i32> %71, i32 1
  %80 = getelementptr inbounds i8, i8* %66, i64 12
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 1, !tbaa !2452
  %82 = bitcast %union.VectorReg* %4 to <2 x float>*
  %83 = load <2 x float>, <2 x float>* %82, align 1
  %84 = load <2 x i32>, <2 x i32>* %70, align 1
  %85 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %86 = load <2 x float>, <2 x float>* %85, align 1
  %87 = extractelement <2 x float> %83, i32 0
  %88 = extractelement <2 x float> %86, i32 0
  %89 = fdiv float %87, %88
  store float %89, float* %73, align 1, !tbaa !2452
  %90 = bitcast <2 x float> %83 to <2 x i32>
  %91 = extractelement <2 x i32> %90, i32 1
  store i32 %91, i32* %76, align 1, !tbaa !2452
  %92 = extractelement <2 x i32> %84, i32 0
  store i32 %92, i32* %78, align 1, !tbaa !2452
  %93 = extractelement <2 x i32> %84, i32 1
  store i32 %93, i32* %81, align 1, !tbaa !2452
  %94 = add i64 %60, -4
  %95 = add i64 %62, 18
  store i64 %95, i64* %PC, align 8
  %96 = load <2 x float>, <2 x float>* %82, align 1
  %97 = extractelement <2 x float> %96, i32 0
  %98 = inttoptr i64 %94 to float*
  store float %97, float* %98, align 4
  %99 = load i64, i64* %RBP, align 8
  %100 = add i64 %99, -4
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 5
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %48, align 1, !tbaa !2452
  store float 0.000000e+00, float* %50, align 1, !tbaa !2452
  store float 0.000000e+00, float* %52, align 1, !tbaa !2452
  store float 0.000000e+00, float* %54, align 1, !tbaa !2452
  %105 = load i64, i64* %RSP, align 8
  %106 = add i64 %105, 16
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %107 = icmp ugt i64 %105, -17
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %14, align 1, !tbaa !2432
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #8
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %21, align 1, !tbaa !2446
  %115 = xor i64 %105, 16
  %116 = xor i64 %115, %106
  %117 = lshr i64 %116, 4
  %118 = trunc i64 %117 to i8
  %119 = and i8 %118, 1
  store i8 %119, i8* %27, align 1, !tbaa !2450
  %120 = icmp eq i64 %106, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %30, align 1, !tbaa !2447
  %122 = lshr i64 %106, 63
  %123 = trunc i64 %122 to i8
  store i8 %123, i8* %33, align 1, !tbaa !2448
  %124 = lshr i64 %105, 63
  %125 = xor i64 %122, %124
  %126 = add nuw nsw i64 %125, %122
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %39, align 1, !tbaa !2449
  %129 = add i64 %101, 10
  store i64 %129, i64* %PC, align 8
  %130 = add i64 %105, 24
  %131 = inttoptr i64 %106 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RBP, align 8, !tbaa !2428
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %133 = add i64 %101, 11
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %130 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  %136 = add i64 %105, 32
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %44
}

; Function Attrs: noinline
define %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400580:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #8
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2450
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2447
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2449
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_400589, label %block_4005a0

block_4005a0:                                     ; preds = %block_400580
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400589:                                     ; preds = %block_400580
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400510_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bb0_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402bb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -16
  %15 = load i32, i32* %EDI, align 4
  %16 = add i64 %13, 6
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %17, align 4
  %18 = load i64, i64* %RBP, align 8
  %19 = add i64 %18, -16
  %20 = load i64, i64* %RSI, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -20
  %26 = load i32, i32* %EDX, align 4
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 3
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %29, align 4
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = icmp eq i32 %35, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = and i32 %36, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #8
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2446
  %46 = xor i32 %35, %36
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = icmp eq i32 %36, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = lshr i32 %36, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = lshr i32 %35, 31
  %58 = xor i32 %54, %57
  %59 = add nuw nsw i32 %58, %57
  %60 = icmp eq i32 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = icmp ne i8 %55, 0
  %64 = xor i1 %63, %60
  %.v = select i1 %64, i64 10, i64 22
  %65 = add i64 %32, %.v
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  br i1 %64, label %block_402bc8, label %block_402bd4

block_402d5f:                                     ; preds = %block_402bc8, %block_402bde, %block_402d59
  %66 = phi i64 [ %.pre10, %block_402d59 ], [ %360, %block_402bde ], [ %481, %block_402bc8 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_402d59 ], [ %2, %block_402bde ], [ %2, %block_402bc8 ]
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -4
  %69 = add i64 %66, 3
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = add i64 %66, 4
  store i64 %73, i64* %PC, align 8
  %74 = load i64, i64* %9, align 8, !tbaa !2428
  %75 = add i64 %74, 8
  %76 = inttoptr i64 %74 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RBP, align 8, !tbaa !2428
  store i64 %75, i64* %9, align 8, !tbaa !2428
  %78 = add i64 %66, 5
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %75 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %81 = add i64 %74, 16
  store i64 %81, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402d54:                                     ; preds = %block_402cdb
  %82 = add i64 %355, 5
  br label %block_402d59

block_402d59:                                     ; preds = %block_402ca8, %block_402d54
  %83 = phi i64 [ %82, %block_402d54 ], [ %246, %block_402ca8 ]
  %84 = phi i64 [ %319, %block_402d54 ], [ %440, %block_402ca8 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402d54 ], [ %MEMORY.4, %block_402ca8 ]
  %85 = add i64 %84, -36
  %86 = add i64 %83, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = zext i32 %88 to i64
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = add i64 %84, -4
  %91 = add i64 %83, 6
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i32*
  store i32 %88, i32* %92, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_402d5f

block_402c37:                                     ; preds = %block_402c2b
  %93 = add i64 %440, -16
  %94 = add i64 %476, 4
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = add i64 %440, -32
  %98 = add i64 %476, 8
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %100 to i64
  store i64 %101, i64* %RCX, align 8, !tbaa !2428
  %102 = shl nsw i64 %101, 2
  %103 = add i64 %102, %96
  %104 = add i64 %476, 13
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i32*
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %649, align 1, !tbaa !2452
  store float 0.000000e+00, float* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %655, align 1, !tbaa !2452
  %107 = load <2 x float>, <2 x float>* %656, align 1
  %108 = extractelement <2 x float> %107, i32 0
  %109 = fpext float %108 to double
  %110 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %111 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %112 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %113 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %110, i32* %665, align 1, !tbaa !2452
  store i32 %111, i32* %668, align 1, !tbaa !2452
  store i32 %112, i32* %671, align 1, !tbaa !2452
  store i32 %113, i32* %674, align 1, !tbaa !2452
  %114 = bitcast double %109 to i64
  %115 = load i64, i64* %652, align 1
  %116 = load i64, i64* %677, align 1
  %117 = load i64, i64* %669, align 1
  %118 = and i64 %116, %114
  %119 = and i64 %117, %115
  %120 = trunc i64 %118 to i32
  %121 = lshr i64 %118, 32
  %122 = trunc i64 %121 to i32
  store i32 %120, i32* %649, align 1, !tbaa !2451
  store i32 %122, i32* %685, align 1, !tbaa !2451
  %123 = trunc i64 %119 to i32
  store i32 %123, i32* %687, align 1, !tbaa !2451
  %124 = lshr i64 %119, 32
  %125 = trunc i64 %124 to i32
  store i32 %125, i32* %690, align 1, !tbaa !2451
  %126 = add i64 %440, -24
  %127 = add i64 %476, 33
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i32*
  %129 = load i32, i32* %128, align 4
  store i32 %129, i32* %665, align 1, !tbaa !2452
  store float 0.000000e+00, float* %667, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %673, align 1, !tbaa !2452
  %130 = load <2 x float>, <2 x float>* %750, align 1
  %131 = extractelement <2 x float> %130, i32 0
  %132 = fpext float %131 to double
  store double %132, double* %751, align 1, !tbaa !2454
  %133 = add i64 %476, 41
  store i64 %133, i64* %PC, align 8
  %134 = load double, double* %695, align 1
  %135 = fcmp uno double %134, %132
  br i1 %135, label %136, label %146

; <label>:136:                                    ; preds = %block_402c37
  %137 = fadd double %134, %132
  %138 = bitcast double %137 to i64
  %139 = and i64 %138, 9221120237041090560
  %140 = icmp eq i64 %139, 9218868437227405312
  %141 = and i64 %138, 2251799813685247
  %142 = icmp ne i64 %141, 0
  %143 = and i1 %140, %142
  br i1 %143, label %144, label %152

; <label>:144:                                    ; preds = %136
  %145 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %133, %struct.Memory* %MEMORY.4) #9
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre3 = load i8, i8* %53, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:146:                                    ; preds = %block_402c37
  %147 = fcmp ogt double %134, %132
  br i1 %147, label %152, label %148

; <label>:148:                                    ; preds = %146
  %149 = fcmp olt double %134, %132
  br i1 %149, label %152, label %150

; <label>:150:                                    ; preds = %148
  %151 = fcmp oeq double %134, %132
  br i1 %151, label %152, label %156

; <label>:152:                                    ; preds = %150, %148, %146, %136
  %153 = phi i8 [ 0, %146 ], [ 0, %148 ], [ 1, %150 ], [ 1, %136 ]
  %154 = phi i8 [ 0, %146 ], [ 0, %148 ], [ 0, %150 ], [ 1, %136 ]
  %155 = phi i8 [ 0, %146 ], [ 1, %148 ], [ 0, %150 ], [ 1, %136 ]
  store i8 %153, i8* %53, align 1, !tbaa !2456
  store i8 %154, i8* %45, align 1, !tbaa !2456
  store i8 %155, i8* %39, align 1, !tbaa !2456
  br label %156

; <label>:156:                                    ; preds = %152, %150
  %157 = phi i8 [ %153, %152 ], [ %464, %150 ]
  %158 = phi i8 [ %155, %152 ], [ %452, %150 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %156, %144
  %159 = phi i8 [ %.pre3, %144 ], [ %157, %156 ]
  %160 = phi i8 [ %.pre2, %144 ], [ %158, %156 ]
  %161 = phi i64 [ %.pre1, %144 ], [ %133, %156 ]
  %162 = phi %struct.Memory* [ %145, %144 ], [ %MEMORY.4, %156 ]
  %163 = or i8 %159, %160
  %164 = icmp ne i8 %163, 0
  %.v15 = select i1 %164, i64 49, i64 6
  %165 = add i64 %161, %.v15
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  br i1 %164, label %block_402c91, label %block_402c66

block_402d16:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -28
  %168 = add i64 %578, 3
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = zext i32 %170 to i64
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = add i64 %166, -36
  %173 = add i64 %578, 6
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i32*
  store i32 %170, i32* %174, align 4
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -16
  %177 = load i64, i64* %PC, align 8
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179, align 8
  store i64 %180, i64* %RCX, align 8, !tbaa !2428
  %181 = add i64 %175, -28
  %182 = add i64 %177, 8
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %181 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %184 to i64
  store i64 %185, i64* %RDX, align 8, !tbaa !2428
  %186 = shl nsw i64 %185, 2
  %187 = add i64 %186, %180
  %188 = add i64 %177, 13
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i32*
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %375, align 1, !tbaa !2452
  store float 0.000000e+00, float* %377, align 1, !tbaa !2452
  store float 0.000000e+00, float* %379, align 1, !tbaa !2452
  store float 0.000000e+00, float* %381, align 1, !tbaa !2452
  %191 = load <2 x float>, <2 x float>* %382, align 1
  %192 = extractelement <2 x float> %191, i32 0
  %193 = fpext float %192 to double
  %194 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %195 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %196 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %197 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %194, i32* %391, align 1, !tbaa !2452
  store i32 %195, i32* %394, align 1, !tbaa !2452
  store i32 %196, i32* %397, align 1, !tbaa !2452
  store i32 %197, i32* %400, align 1, !tbaa !2452
  %198 = bitcast double %193 to i64
  %199 = load i64, i64* %378, align 1
  %200 = load i64, i64* %403, align 1
  %201 = load i64, i64* %395, align 1
  %202 = and i64 %200, %198
  %203 = and i64 %201, %199
  %204 = trunc i64 %202 to i32
  %205 = lshr i64 %202, 32
  %206 = trunc i64 %205 to i32
  store i32 %204, i32* %375, align 1, !tbaa !2451
  store i32 %206, i32* %411, align 1, !tbaa !2451
  %207 = trunc i64 %203 to i32
  store i32 %207, i32* %413, align 1, !tbaa !2451
  %208 = lshr i64 %203, 32
  %209 = trunc i64 %208 to i32
  store i32 %209, i32* %416, align 1, !tbaa !2451
  %210 = load <2 x i32>, <2 x i32>* %417, align 1
  %211 = load <2 x i32>, <2 x i32>* %419, align 1
  %212 = bitcast <2 x i32> %210 to double
  %213 = fptrunc double %212 to float
  store float %213, float* %374, align 1, !tbaa !2452
  %214 = extractelement <2 x i32> %210, i32 1
  store i32 %214, i32* %411, align 1, !tbaa !2452
  %215 = extractelement <2 x i32> %211, i32 0
  store i32 %215, i32* %413, align 1, !tbaa !2452
  %216 = extractelement <2 x i32> %211, i32 1
  store i32 %216, i32* %416, align 1, !tbaa !2452
  %217 = add i64 %175, -24
  %218 = add i64 %177, 37
  store i64 %218, i64* %PC, align 8
  %219 = load <2 x float>, <2 x float>* %382, align 1
  %220 = extractelement <2 x float> %219, i32 0
  %221 = inttoptr i64 %217 to float*
  store float %220, float* %221, align 4
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_402d41

block_402bd4:                                     ; preds = %block_402bb0
  %222 = add i64 %65, 4
  store i64 %222, i64* %PC, align 8
  %223 = load i32, i32* %34, align 4
  %224 = add i32 %223, -1
  %225 = icmp eq i32 %223, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %39, align 1, !tbaa !2432
  %227 = and i32 %224, 255
  %228 = tail call i32 @llvm.ctpop.i32(i32 %227) #8
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  store i8 %231, i8* %45, align 1, !tbaa !2446
  %232 = xor i32 %223, %224
  %233 = lshr i32 %232, 4
  %234 = trunc i32 %233 to i8
  %235 = and i8 %234, 1
  store i8 %235, i8* %50, align 1, !tbaa !2450
  %236 = icmp eq i32 %224, 0
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %53, align 1, !tbaa !2447
  %238 = lshr i32 %224, 31
  %239 = trunc i32 %238 to i8
  store i8 %239, i8* %56, align 1, !tbaa !2448
  %240 = lshr i32 %223, 31
  %241 = xor i32 %238, %240
  %242 = add nuw nsw i32 %241, %240
  %243 = icmp eq i32 %242, 2
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %62, align 1, !tbaa !2449
  %.v12 = select i1 %236, i64 10, i64 22
  %245 = add i64 %65, %.v12
  store i64 %245, i64* %PC, align 8, !tbaa !2428
  br i1 %236, label %block_402bde, label %block_402bea

block_402ca8:                                     ; preds = %block_402c2b
  %246 = add i64 %476, 177
  br label %block_402d59

block_402c91:                                     ; preds = %block_402c66, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %247 = phi i64 [ %.pre4, %block_402c66 ], [ %165, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -32
  %250 = add i64 %247, 3
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i64
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = add i64 %248, -20
  %255 = add i64 %247, 6
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = add i32 %257, %252
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RAX, align 8, !tbaa !2428
  %260 = icmp ult i32 %258, %252
  %261 = icmp ult i32 %258, %257
  %262 = or i1 %260, %261
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %39, align 1, !tbaa !2432
  %264 = and i32 %258, 255
  %265 = tail call i32 @llvm.ctpop.i32(i32 %264) #8
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  store i8 %268, i8* %45, align 1, !tbaa !2446
  %269 = xor i32 %257, %252
  %270 = xor i32 %269, %258
  %271 = lshr i32 %270, 4
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  store i8 %273, i8* %50, align 1, !tbaa !2450
  %274 = icmp eq i32 %258, 0
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %53, align 1, !tbaa !2447
  %276 = lshr i32 %258, 31
  %277 = trunc i32 %276 to i8
  store i8 %277, i8* %56, align 1, !tbaa !2448
  %278 = lshr i32 %252, 31
  %279 = lshr i32 %257, 31
  %280 = xor i32 %276, %278
  %281 = xor i32 %276, %279
  %282 = add nuw nsw i32 %280, %281
  %283 = icmp eq i32 %282, 2
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %62, align 1, !tbaa !2449
  %285 = add i64 %247, 9
  store i64 %285, i64* %PC, align 8
  store i32 %258, i32* %251, align 4
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -28
  %288 = load i64, i64* %PC, align 8
  %289 = add i64 %288, 3
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %287 to i32*
  %291 = load i32, i32* %290, align 4
  %292 = add i32 %291, 1
  %293 = zext i32 %292 to i64
  store i64 %293, i64* %RAX, align 8, !tbaa !2428
  %294 = icmp eq i32 %291, -1
  %295 = icmp eq i32 %292, 0
  %296 = or i1 %294, %295
  %297 = zext i1 %296 to i8
  store i8 %297, i8* %39, align 1, !tbaa !2432
  %298 = and i32 %292, 255
  %299 = tail call i32 @llvm.ctpop.i32(i32 %298) #8
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = xor i8 %301, 1
  store i8 %302, i8* %45, align 1, !tbaa !2446
  %303 = xor i32 %291, %292
  %304 = lshr i32 %303, 4
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  store i8 %306, i8* %50, align 1, !tbaa !2450
  %307 = zext i1 %295 to i8
  store i8 %307, i8* %53, align 1, !tbaa !2447
  %308 = lshr i32 %292, 31
  %309 = trunc i32 %308 to i8
  store i8 %309, i8* %56, align 1, !tbaa !2448
  %310 = lshr i32 %291, 31
  %311 = xor i32 %308, %310
  %312 = add nuw nsw i32 %311, %308
  %313 = icmp eq i32 %312, 2
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %62, align 1, !tbaa !2449
  %315 = add i64 %288, 9
  store i64 %315, i64* %PC, align 8
  store i32 %292, i32* %290, align 4
  %316 = load i64, i64* %PC, align 8
  %317 = add i64 %316, -120
  store i64 %317, i64* %PC, align 8, !tbaa !2428
  br label %block_402c2b

block_402cdb:                                     ; preds = %block_402d41, %block_402cad
  %318 = phi i64 [ %.pre5, %block_402cad ], [ %783, %block_402d41 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402cad ], [ %575, %block_402d41 ]
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -28
  %321 = add i64 %318, 3
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %320 to i32*
  %323 = load i32, i32* %322, align 4
  %324 = zext i32 %323 to i64
  store i64 %324, i64* %RAX, align 8, !tbaa !2428
  %325 = add i64 %319, -8
  %326 = add i64 %318, 6
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %325 to i32*
  %328 = load i32, i32* %327, align 4
  %329 = sub i32 %323, %328
  %330 = icmp ult i32 %323, %328
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %39, align 1, !tbaa !2432
  %332 = and i32 %329, 255
  %333 = tail call i32 @llvm.ctpop.i32(i32 %332) #8
  %334 = trunc i32 %333 to i8
  %335 = and i8 %334, 1
  %336 = xor i8 %335, 1
  store i8 %336, i8* %45, align 1, !tbaa !2446
  %337 = xor i32 %328, %323
  %338 = xor i32 %337, %329
  %339 = lshr i32 %338, 4
  %340 = trunc i32 %339 to i8
  %341 = and i8 %340, 1
  store i8 %341, i8* %50, align 1, !tbaa !2450
  %342 = icmp eq i32 %329, 0
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %53, align 1, !tbaa !2447
  %344 = lshr i32 %329, 31
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %56, align 1, !tbaa !2448
  %346 = lshr i32 %323, 31
  %347 = lshr i32 %328, 31
  %348 = xor i32 %347, %346
  %349 = xor i32 %344, %346
  %350 = add nuw nsw i32 %349, %348
  %351 = icmp eq i32 %350, 2
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %62, align 1, !tbaa !2449
  %353 = icmp ne i8 %345, 0
  %354 = xor i1 %353, %351
  %.v16 = select i1 %354, i64 12, i64 121
  %355 = add i64 %318, %.v16
  store i64 %355, i64* %PC, align 8, !tbaa !2428
  br i1 %354, label %block_402ce7, label %block_402d54

block_402bde:                                     ; preds = %block_402bd4
  %356 = add i64 %30, -4
  %357 = add i64 %245, 7
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i32*
  store i32 0, i32* %358, align 4
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, 378
  store i64 %360, i64* %PC, align 8, !tbaa !2428
  br label %block_402d5f

block_402cad:                                     ; preds = %block_402bea
  %361 = add i64 %30, -36
  %362 = add i64 %507, 7
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i32*
  store i32 0, i32* %363, align 4
  %364 = load i64, i64* %RBP, align 8
  %365 = add i64 %364, -16
  %366 = load i64, i64* %PC, align 8
  %367 = add i64 %366, 4
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %365 to i64*
  %369 = load i64, i64* %368, align 8
  store i64 %369, i64* %RAX, align 8, !tbaa !2428
  %370 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %371 = add i64 %366, 8
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = bitcast [32 x %union.VectorReg]* %5 to float*
  %375 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %373, i32* %375, align 1, !tbaa !2452
  %376 = getelementptr inbounds i8, i8* %370, i64 4
  %377 = bitcast i8* %376 to float*
  store float 0.000000e+00, float* %377, align 1, !tbaa !2452
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %379 = bitcast i64* %378 to float*
  store float 0.000000e+00, float* %379, align 1, !tbaa !2452
  %380 = getelementptr inbounds i8, i8* %370, i64 12
  %381 = bitcast i8* %380 to float*
  store float 0.000000e+00, float* %381, align 1, !tbaa !2452
  %382 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %383 = load <2 x float>, <2 x float>* %382, align 1
  %384 = extractelement <2 x float> %383, i32 0
  %385 = fpext float %384 to double
  %386 = bitcast %union.VectorReg* %6 to i8*
  %387 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %388 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %389 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %390 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %391 = bitcast %union.VectorReg* %6 to i32*
  store i32 %387, i32* %391, align 1, !tbaa !2452
  %392 = getelementptr inbounds i8, i8* %386, i64 4
  %393 = bitcast i8* %392 to float*
  %394 = bitcast i8* %392 to i32*
  store i32 %388, i32* %394, align 1, !tbaa !2452
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %396 = bitcast i64* %395 to float*
  %397 = bitcast i64* %395 to i32*
  store i32 %389, i32* %397, align 1, !tbaa !2452
  %398 = getelementptr inbounds i8, i8* %386, i64 12
  %399 = bitcast i8* %398 to float*
  %400 = bitcast i8* %398 to i32*
  store i32 %390, i32* %400, align 1, !tbaa !2452
  %401 = bitcast double %385 to i64
  %402 = load i64, i64* %378, align 1
  %403 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %404 = load i64, i64* %403, align 1
  %405 = load i64, i64* %395, align 1
  %406 = and i64 %404, %401
  %407 = and i64 %405, %402
  %408 = trunc i64 %406 to i32
  %409 = lshr i64 %406, 32
  %410 = trunc i64 %409 to i32
  store i32 %408, i32* %375, align 1, !tbaa !2451
  %411 = bitcast i8* %376 to i32*
  store i32 %410, i32* %411, align 1, !tbaa !2451
  %412 = trunc i64 %407 to i32
  %413 = bitcast i64* %378 to i32*
  store i32 %412, i32* %413, align 1, !tbaa !2451
  %414 = lshr i64 %407, 32
  %415 = trunc i64 %414 to i32
  %416 = bitcast i8* %380 to i32*
  store i32 %415, i32* %416, align 1, !tbaa !2451
  %417 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %418 = load <2 x i32>, <2 x i32>* %417, align 1
  %419 = bitcast i64* %378 to <2 x i32>*
  %420 = load <2 x i32>, <2 x i32>* %419, align 1
  %421 = bitcast [32 x %union.VectorReg]* %5 to double*
  %422 = bitcast <2 x i32> %418 to double
  %423 = fptrunc double %422 to float
  store float %423, float* %374, align 1, !tbaa !2452
  %424 = extractelement <2 x i32> %418, i32 1
  store i32 %424, i32* %411, align 1, !tbaa !2452
  %425 = extractelement <2 x i32> %420, i32 0
  store i32 %425, i32* %413, align 1, !tbaa !2452
  %426 = extractelement <2 x i32> %420, i32 1
  store i32 %426, i32* %416, align 1, !tbaa !2452
  %427 = add i64 %364, -24
  %428 = add i64 %366, 32
  store i64 %428, i64* %PC, align 8
  %429 = load <2 x float>, <2 x float>* %382, align 1
  %430 = extractelement <2 x float> %429, i32 0
  %431 = inttoptr i64 %427 to float*
  store float %430, float* %431, align 4
  %432 = load i64, i64* %RBP, align 8
  %433 = add i64 %432, -28
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 7
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %433 to i32*
  store i32 1, i32* %436, align 4
  %437 = bitcast %union.VectorReg* %6 to <2 x float>*
  %438 = bitcast %union.VectorReg* %6 to double*
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_402cdb

block_402c2b:                                     ; preds = %block_402bf4, %block_402c91
  %439 = phi i64 [ %.pre, %block_402bf4 ], [ %317, %block_402c91 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402bf4 ], [ %162, %block_402c91 ]
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -28
  %442 = add i64 %439, 3
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i32*
  %444 = load i32, i32* %443, align 4
  %445 = zext i32 %444 to i64
  store i64 %445, i64* %RAX, align 8, !tbaa !2428
  %446 = add i64 %440, -8
  %447 = add i64 %439, 6
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %446 to i32*
  %449 = load i32, i32* %448, align 4
  %450 = sub i32 %444, %449
  %451 = icmp ult i32 %444, %449
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %39, align 1, !tbaa !2432
  %453 = and i32 %450, 255
  %454 = tail call i32 @llvm.ctpop.i32(i32 %453) #8
  %455 = trunc i32 %454 to i8
  %456 = and i8 %455, 1
  %457 = xor i8 %456, 1
  store i8 %457, i8* %45, align 1, !tbaa !2446
  %458 = xor i32 %449, %444
  %459 = xor i32 %458, %450
  %460 = lshr i32 %459, 4
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  store i8 %462, i8* %50, align 1, !tbaa !2450
  %463 = icmp eq i32 %450, 0
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %53, align 1, !tbaa !2447
  %465 = lshr i32 %450, 31
  %466 = trunc i32 %465 to i8
  store i8 %466, i8* %56, align 1, !tbaa !2448
  %467 = lshr i32 %444, 31
  %468 = lshr i32 %449, 31
  %469 = xor i32 %468, %467
  %470 = xor i32 %465, %467
  %471 = add nuw nsw i32 %470, %469
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %62, align 1, !tbaa !2449
  %474 = icmp ne i8 %466, 0
  %475 = xor i1 %474, %472
  %.v14 = select i1 %475, i64 12, i64 125
  %476 = add i64 %439, %.v14
  store i64 %476, i64* %PC, align 8, !tbaa !2428
  br i1 %475, label %block_402c37, label %block_402ca8

block_402bc8:                                     ; preds = %block_402bb0
  %477 = add i64 %30, -4
  %478 = add i64 %65, 7
  store i64 %478, i64* %PC, align 8
  %479 = inttoptr i64 %477 to i32*
  store i32 -1, i32* %479, align 4
  %480 = load i64, i64* %PC, align 8
  %481 = add i64 %480, 400
  store i64 %481, i64* %PC, align 8, !tbaa !2428
  br label %block_402d5f

block_402bea:                                     ; preds = %block_402bd4
  %482 = add i64 %30, -20
  %483 = add i64 %245, 4
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i32*
  %485 = load i32, i32* %484, align 4
  %486 = add i32 %485, -1
  %487 = icmp eq i32 %485, 0
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %39, align 1, !tbaa !2432
  %489 = and i32 %486, 255
  %490 = tail call i32 @llvm.ctpop.i32(i32 %489) #8
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = xor i8 %492, 1
  store i8 %493, i8* %45, align 1, !tbaa !2446
  %494 = xor i32 %485, %486
  %495 = lshr i32 %494, 4
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  store i8 %497, i8* %50, align 1, !tbaa !2450
  %498 = icmp eq i32 %486, 0
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %53, align 1, !tbaa !2447
  %500 = lshr i32 %486, 31
  %501 = trunc i32 %500 to i8
  store i8 %501, i8* %56, align 1, !tbaa !2448
  %502 = lshr i32 %485, 31
  %503 = xor i32 %500, %502
  %504 = add nuw nsw i32 %503, %502
  %505 = icmp eq i32 %504, 2
  %506 = zext i1 %505 to i8
  store i8 %506, i8* %62, align 1, !tbaa !2449
  %.v13 = select i1 %498, i64 195, i64 10
  %507 = add i64 %245, %.v13
  store i64 %507, i64* %PC, align 8, !tbaa !2428
  br i1 %498, label %block_402cad, label %block_402bf4

block_402ce7:                                     ; preds = %block_402cdb
  %508 = add i64 %319, -16
  %509 = add i64 %355, 4
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to i64*
  %511 = load i64, i64* %510, align 8
  store i64 %511, i64* %RAX, align 8, !tbaa !2428
  %512 = add i64 %355, 8
  store i64 %512, i64* %PC, align 8
  %513 = load i32, i32* %322, align 4
  %514 = sext i32 %513 to i64
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %515 = shl nsw i64 %514, 2
  %516 = add i64 %515, %511
  %517 = add i64 %355, 13
  store i64 %517, i64* %PC, align 8
  %518 = inttoptr i64 %516 to i32*
  %519 = load i32, i32* %518, align 4
  store i32 %519, i32* %375, align 1, !tbaa !2452
  store float 0.000000e+00, float* %377, align 1, !tbaa !2452
  store float 0.000000e+00, float* %379, align 1, !tbaa !2452
  store float 0.000000e+00, float* %381, align 1, !tbaa !2452
  %520 = load <2 x float>, <2 x float>* %382, align 1
  %521 = extractelement <2 x float> %520, i32 0
  %522 = fpext float %521 to double
  %523 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %524 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %525 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %526 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %523, i32* %391, align 1, !tbaa !2452
  store i32 %524, i32* %394, align 1, !tbaa !2452
  store i32 %525, i32* %397, align 1, !tbaa !2452
  store i32 %526, i32* %400, align 1, !tbaa !2452
  %527 = bitcast double %522 to i64
  %528 = load i64, i64* %378, align 1
  %529 = load i64, i64* %403, align 1
  %530 = load i64, i64* %395, align 1
  %531 = and i64 %529, %527
  %532 = and i64 %530, %528
  %533 = trunc i64 %531 to i32
  %534 = lshr i64 %531, 32
  %535 = trunc i64 %534 to i32
  store i32 %533, i32* %375, align 1, !tbaa !2451
  store i32 %535, i32* %411, align 1, !tbaa !2451
  %536 = trunc i64 %532 to i32
  store i32 %536, i32* %413, align 1, !tbaa !2451
  %537 = lshr i64 %532, 32
  %538 = trunc i64 %537 to i32
  store i32 %538, i32* %416, align 1, !tbaa !2451
  %539 = add i64 %319, -24
  %540 = add i64 %355, 33
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %539 to i32*
  %542 = load i32, i32* %541, align 4
  store i32 %542, i32* %391, align 1, !tbaa !2452
  store float 0.000000e+00, float* %393, align 1, !tbaa !2452
  store float 0.000000e+00, float* %396, align 1, !tbaa !2452
  store float 0.000000e+00, float* %399, align 1, !tbaa !2452
  %543 = load <2 x float>, <2 x float>* %437, align 1
  %544 = extractelement <2 x float> %543, i32 0
  %545 = fpext float %544 to double
  store double %545, double* %438, align 1, !tbaa !2454
  %546 = add i64 %355, 41
  store i64 %546, i64* %PC, align 8
  %547 = load double, double* %421, align 1
  %548 = fcmp uno double %547, %545
  br i1 %548, label %549, label %559

; <label>:549:                                    ; preds = %block_402ce7
  %550 = fadd double %547, %545
  %551 = bitcast double %550 to i64
  %552 = and i64 %551, 9221120237041090560
  %553 = icmp eq i64 %552, 9218868437227405312
  %554 = and i64 %551, 2251799813685247
  %555 = icmp ne i64 %554, 0
  %556 = and i1 %553, %555
  br i1 %556, label %557, label %565

; <label>:557:                                    ; preds = %549
  %558 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %546, %struct.Memory* %MEMORY.3) #9
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre8 = load i8, i8* %53, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:559:                                    ; preds = %block_402ce7
  %560 = fcmp ogt double %547, %545
  br i1 %560, label %565, label %561

; <label>:561:                                    ; preds = %559
  %562 = fcmp olt double %547, %545
  br i1 %562, label %565, label %563

; <label>:563:                                    ; preds = %561
  %564 = fcmp oeq double %547, %545
  br i1 %564, label %565, label %569

; <label>:565:                                    ; preds = %563, %561, %559, %549
  %566 = phi i8 [ 0, %559 ], [ 0, %561 ], [ 1, %563 ], [ 1, %549 ]
  %567 = phi i8 [ 0, %559 ], [ 0, %561 ], [ 0, %563 ], [ 1, %549 ]
  %568 = phi i8 [ 0, %559 ], [ 1, %561 ], [ 0, %563 ], [ 1, %549 ]
  store i8 %566, i8* %53, align 1, !tbaa !2456
  store i8 %567, i8* %45, align 1, !tbaa !2456
  store i8 %568, i8* %39, align 1, !tbaa !2456
  br label %569

; <label>:569:                                    ; preds = %565, %563
  %570 = phi i8 [ %566, %565 ], [ %343, %563 ]
  %571 = phi i8 [ %568, %565 ], [ %331, %563 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %569, %557
  %572 = phi i8 [ %.pre8, %557 ], [ %570, %569 ]
  %573 = phi i8 [ %.pre7, %557 ], [ %571, %569 ]
  %574 = phi i64 [ %.pre6, %557 ], [ %546, %569 ]
  %575 = phi %struct.Memory* [ %558, %557 ], [ %MEMORY.3, %569 ]
  %576 = or i8 %572, %573
  %577 = icmp ne i8 %576, 0
  %.v17 = select i1 %577, i64 49, i64 6
  %578 = add i64 %574, %.v17
  store i64 %578, i64* %PC, align 8, !tbaa !2428
  br i1 %577, label %block_402d41, label %block_402d16

block_402c66:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %579 = load i64, i64* %RBP, align 8
  %580 = add i64 %579, -28
  %581 = add i64 %165, 3
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i32*
  %583 = load i32, i32* %582, align 4
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = add i64 %579, -36
  %586 = add i64 %165, 6
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %585 to i32*
  store i32 %583, i32* %587, align 4
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -16
  %590 = load i64, i64* %PC, align 8
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %589 to i64*
  %593 = load i64, i64* %592, align 8
  store i64 %593, i64* %RCX, align 8, !tbaa !2428
  %594 = add i64 %588, -32
  %595 = add i64 %590, 8
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i32*
  %597 = load i32, i32* %596, align 4
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RDX, align 8, !tbaa !2428
  %599 = shl nsw i64 %598, 2
  %600 = add i64 %599, %593
  %601 = add i64 %590, 13
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i32*
  %603 = load i32, i32* %602, align 4
  store i32 %603, i32* %649, align 1, !tbaa !2452
  store float 0.000000e+00, float* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %653, align 1, !tbaa !2452
  store float 0.000000e+00, float* %655, align 1, !tbaa !2452
  %604 = load <2 x float>, <2 x float>* %656, align 1
  %605 = extractelement <2 x float> %604, i32 0
  %606 = fpext float %605 to double
  %607 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %608 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %609 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %610 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %607, i32* %665, align 1, !tbaa !2452
  store i32 %608, i32* %668, align 1, !tbaa !2452
  store i32 %609, i32* %671, align 1, !tbaa !2452
  store i32 %610, i32* %674, align 1, !tbaa !2452
  %611 = bitcast double %606 to i64
  %612 = load i64, i64* %652, align 1
  %613 = load i64, i64* %677, align 1
  %614 = load i64, i64* %669, align 1
  %615 = and i64 %613, %611
  %616 = and i64 %614, %612
  %617 = trunc i64 %615 to i32
  %618 = lshr i64 %615, 32
  %619 = trunc i64 %618 to i32
  store i32 %617, i32* %649, align 1, !tbaa !2451
  store i32 %619, i32* %685, align 1, !tbaa !2451
  %620 = trunc i64 %616 to i32
  store i32 %620, i32* %687, align 1, !tbaa !2451
  %621 = lshr i64 %616, 32
  %622 = trunc i64 %621 to i32
  store i32 %622, i32* %690, align 1, !tbaa !2451
  %623 = load <2 x i32>, <2 x i32>* %691, align 1
  %624 = load <2 x i32>, <2 x i32>* %693, align 1
  %625 = bitcast <2 x i32> %623 to double
  %626 = fptrunc double %625 to float
  store float %626, float* %648, align 1, !tbaa !2452
  %627 = extractelement <2 x i32> %623, i32 1
  store i32 %627, i32* %685, align 1, !tbaa !2452
  %628 = extractelement <2 x i32> %624, i32 0
  store i32 %628, i32* %687, align 1, !tbaa !2452
  %629 = extractelement <2 x i32> %624, i32 1
  store i32 %629, i32* %690, align 1, !tbaa !2452
  %630 = add i64 %588, -24
  %631 = add i64 %590, 37
  store i64 %631, i64* %PC, align 8
  %632 = load <2 x float>, <2 x float>* %656, align 1
  %633 = extractelement <2 x float> %632, i32 0
  %634 = inttoptr i64 %630 to float*
  store float %633, float* %634, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_402c91

block_402bf4:                                     ; preds = %block_402bea
  %635 = add i64 %30, -32
  %636 = add i64 %507, 7
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %635 to i32*
  store i32 1, i32* %637, align 4
  %638 = load i64, i64* %RBP, align 8
  %639 = add i64 %638, -16
  %640 = load i64, i64* %PC, align 8
  %641 = add i64 %640, 4
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %639 to i64*
  %643 = load i64, i64* %642, align 8
  store i64 %643, i64* %RAX, align 8, !tbaa !2428
  %644 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %645 = add i64 %640, 8
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %643 to i32*
  %647 = load i32, i32* %646, align 4
  %648 = bitcast [32 x %union.VectorReg]* %5 to float*
  %649 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %647, i32* %649, align 1, !tbaa !2452
  %650 = getelementptr inbounds i8, i8* %644, i64 4
  %651 = bitcast i8* %650 to float*
  store float 0.000000e+00, float* %651, align 1, !tbaa !2452
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %653 = bitcast i64* %652 to float*
  store float 0.000000e+00, float* %653, align 1, !tbaa !2452
  %654 = getelementptr inbounds i8, i8* %644, i64 12
  %655 = bitcast i8* %654 to float*
  store float 0.000000e+00, float* %655, align 1, !tbaa !2452
  %656 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %657 = load <2 x float>, <2 x float>* %656, align 1
  %658 = extractelement <2 x float> %657, i32 0
  %659 = fpext float %658 to double
  %660 = bitcast %union.VectorReg* %6 to i8*
  %661 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %662 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %663 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %664 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %665 = bitcast %union.VectorReg* %6 to i32*
  store i32 %661, i32* %665, align 1, !tbaa !2452
  %666 = getelementptr inbounds i8, i8* %660, i64 4
  %667 = bitcast i8* %666 to float*
  %668 = bitcast i8* %666 to i32*
  store i32 %662, i32* %668, align 1, !tbaa !2452
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %670 = bitcast i64* %669 to float*
  %671 = bitcast i64* %669 to i32*
  store i32 %663, i32* %671, align 1, !tbaa !2452
  %672 = getelementptr inbounds i8, i8* %660, i64 12
  %673 = bitcast i8* %672 to float*
  %674 = bitcast i8* %672 to i32*
  store i32 %664, i32* %674, align 1, !tbaa !2452
  %675 = bitcast double %659 to i64
  %676 = load i64, i64* %652, align 1
  %677 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %678 = load i64, i64* %677, align 1
  %679 = load i64, i64* %669, align 1
  %680 = and i64 %678, %675
  %681 = and i64 %679, %676
  %682 = trunc i64 %680 to i32
  %683 = lshr i64 %680, 32
  %684 = trunc i64 %683 to i32
  store i32 %682, i32* %649, align 1, !tbaa !2451
  %685 = bitcast i8* %650 to i32*
  store i32 %684, i32* %685, align 1, !tbaa !2451
  %686 = trunc i64 %681 to i32
  %687 = bitcast i64* %652 to i32*
  store i32 %686, i32* %687, align 1, !tbaa !2451
  %688 = lshr i64 %681, 32
  %689 = trunc i64 %688 to i32
  %690 = bitcast i8* %654 to i32*
  store i32 %689, i32* %690, align 1, !tbaa !2451
  %691 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %692 = load <2 x i32>, <2 x i32>* %691, align 1
  %693 = bitcast i64* %652 to <2 x i32>*
  %694 = load <2 x i32>, <2 x i32>* %693, align 1
  %695 = bitcast [32 x %union.VectorReg]* %5 to double*
  %696 = bitcast <2 x i32> %692 to double
  %697 = fptrunc double %696 to float
  store float %697, float* %648, align 1, !tbaa !2452
  %698 = extractelement <2 x i32> %692, i32 1
  store i32 %698, i32* %685, align 1, !tbaa !2452
  %699 = extractelement <2 x i32> %694, i32 0
  store i32 %699, i32* %687, align 1, !tbaa !2452
  %700 = extractelement <2 x i32> %694, i32 1
  store i32 %700, i32* %690, align 1, !tbaa !2452
  %701 = add i64 %638, -24
  %702 = add i64 %640, 32
  store i64 %702, i64* %PC, align 8
  %703 = load <2 x float>, <2 x float>* %656, align 1
  %704 = extractelement <2 x float> %703, i32 0
  %705 = inttoptr i64 %701 to float*
  store float %704, float* %705, align 4
  %706 = load i64, i64* %RBP, align 8
  %707 = add i64 %706, -32
  %708 = load i64, i64* %PC, align 8
  %709 = add i64 %708, 3
  store i64 %709, i64* %PC, align 8
  %710 = inttoptr i64 %707 to i32*
  %711 = load i32, i32* %710, align 4
  %712 = zext i32 %711 to i64
  store i64 %712, i64* %RCX, align 8, !tbaa !2428
  %713 = add i64 %706, -20
  %714 = add i64 %708, 6
  store i64 %714, i64* %PC, align 8
  %715 = inttoptr i64 %713 to i32*
  %716 = load i32, i32* %715, align 4
  %717 = add i32 %716, %711
  %718 = zext i32 %717 to i64
  store i64 %718, i64* %RCX, align 8, !tbaa !2428
  %719 = icmp ult i32 %717, %711
  %720 = icmp ult i32 %717, %716
  %721 = or i1 %719, %720
  %722 = zext i1 %721 to i8
  store i8 %722, i8* %39, align 1, !tbaa !2432
  %723 = and i32 %717, 255
  %724 = tail call i32 @llvm.ctpop.i32(i32 %723) #8
  %725 = trunc i32 %724 to i8
  %726 = and i8 %725, 1
  %727 = xor i8 %726, 1
  store i8 %727, i8* %45, align 1, !tbaa !2446
  %728 = xor i32 %716, %711
  %729 = xor i32 %728, %717
  %730 = lshr i32 %729, 4
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  store i8 %732, i8* %50, align 1, !tbaa !2450
  %733 = icmp eq i32 %717, 0
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %53, align 1, !tbaa !2447
  %735 = lshr i32 %717, 31
  %736 = trunc i32 %735 to i8
  store i8 %736, i8* %56, align 1, !tbaa !2448
  %737 = lshr i32 %711, 31
  %738 = lshr i32 %716, 31
  %739 = xor i32 %735, %737
  %740 = xor i32 %735, %738
  %741 = add nuw nsw i32 %739, %740
  %742 = icmp eq i32 %741, 2
  %743 = zext i1 %742 to i8
  store i8 %743, i8* %62, align 1, !tbaa !2449
  %744 = add i64 %708, 9
  store i64 %744, i64* %PC, align 8
  store i32 %717, i32* %710, align 4
  %745 = load i64, i64* %RBP, align 8
  %746 = add i64 %745, -28
  %747 = load i64, i64* %PC, align 8
  %748 = add i64 %747, 7
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %746 to i32*
  store i32 1, i32* %749, align 4
  %750 = bitcast %union.VectorReg* %6 to <2 x float>*
  %751 = bitcast %union.VectorReg* %6 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c2b

block_402d41:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402d16
  %752 = phi i64 [ %578, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %.pre9, %block_402d16 ]
  %753 = load i64, i64* %RBP, align 8
  %754 = add i64 %753, -28
  %755 = add i64 %752, 8
  store i64 %755, i64* %PC, align 8
  %756 = inttoptr i64 %754 to i32*
  %757 = load i32, i32* %756, align 4
  %758 = add i32 %757, 1
  %759 = zext i32 %758 to i64
  store i64 %759, i64* %RAX, align 8, !tbaa !2428
  %760 = icmp eq i32 %757, -1
  %761 = icmp eq i32 %758, 0
  %762 = or i1 %760, %761
  %763 = zext i1 %762 to i8
  store i8 %763, i8* %39, align 1, !tbaa !2432
  %764 = and i32 %758, 255
  %765 = tail call i32 @llvm.ctpop.i32(i32 %764) #8
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  store i8 %768, i8* %45, align 1, !tbaa !2446
  %769 = xor i32 %757, %758
  %770 = lshr i32 %769, 4
  %771 = trunc i32 %770 to i8
  %772 = and i8 %771, 1
  store i8 %772, i8* %50, align 1, !tbaa !2450
  %773 = zext i1 %761 to i8
  store i8 %773, i8* %53, align 1, !tbaa !2447
  %774 = lshr i32 %758, 31
  %775 = trunc i32 %774 to i8
  store i8 %775, i8* %56, align 1, !tbaa !2448
  %776 = lshr i32 %757, 31
  %777 = xor i32 %774, %776
  %778 = add nuw nsw i32 %777, %774
  %779 = icmp eq i32 %778, 2
  %780 = zext i1 %779 to i8
  store i8 %780, i8* %62, align 1, !tbaa !2449
  %781 = add i64 %752, 14
  store i64 %781, i64* %PC, align 8
  store i32 %758, i32* %756, align 4
  %782 = load i64, i64* %PC, align 8
  %783 = add i64 %782, -116
  store i64 %783, i64* %PC, align 8, !tbaa !2428
  br label %block_402cdb
}

; Function Attrs: noinline
define %struct.Memory* @sub_400610_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400610:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %R9 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %1, 1
  store i64 %14, i64* %PC, align 8
  %15 = load i64, i64* %RSP, align 8, !tbaa !2428
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %13, i64* %17, align 8
  %18 = load i64, i64* %PC, align 8
  store i64 %16, i64* %RBP, align 8, !tbaa !2428
  %19 = add i64 %15, -1016
  store i64 %19, i64* %RSP, align 8, !tbaa !2428
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %26 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %27 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 8) to i32*), align 8
  %28 = bitcast [32 x %union.VectorReg]* %8 to float*
  %29 = bitcast [32 x %union.VectorReg]* %8 to i32*
  store i32 %27, i32* %29, align 1, !tbaa !2452
  %30 = getelementptr inbounds i8, i8* %26, i64 4
  %31 = bitcast i8* %30 to float*
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %33 = bitcast i64* %32 to float*
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  %34 = getelementptr inbounds i8, i8* %26, i64 12
  %35 = bitcast i8* %34 to float*
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i64 720, i64* %R8, align 8, !tbaa !2428
  %36 = add i64 %15, -840
  store i64 %36, i64* %R9, align 8, !tbaa !2428
  %37 = add i64 %15, -12
  %38 = add i64 %18, 72
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %37 to i32*
  store i32 0, i32* %39, align 4
  %40 = load i64, i64* %R9, align 8
  %41 = load i64, i64* %PC, align 8
  store i64 %40, i64* %RDI, align 8, !tbaa !2428
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -840
  %44 = load i64, i64* %RSI, align 8
  %45 = add i64 %41, 10
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %46, align 8
  %47 = load i32, i32* %EDX, align 4
  %48 = zext i32 %47 to i64
  %49 = load i64, i64* %PC, align 8
  store i64 %48, i64* %RSI, align 8, !tbaa !2428
  %50 = load i64, i64* %R8, align 8
  store i64 %50, i64* %RDX, align 8, !tbaa !2428
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -848
  %53 = load i64, i64* %RCX, align 8
  %54 = add i64 %49, 12
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -852
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 8
  store i64 %59, i64* %PC, align 8
  %60 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %61 = load <2 x float>, <2 x float>* %60, align 1
  %62 = extractelement <2 x float> %61, i32 0
  %63 = inttoptr i64 %57 to float*
  store float %62, float* %63, align 4
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -864
  %66 = load i64, i64* %RAX, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 7
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, -462
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call fastcc %struct.Memory* @ext_4004b0_memset(%struct.State* nonnull %0, %struct.Memory* %2)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -832
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i8*
  store i8 32, i8* %81, align 1
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -848
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %RAX, align 8, !tbaa !2428
  %88 = add i64 %82, -96
  %89 = add i64 %84, 11
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  store i64 %87, i64* %90, align 8
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -864
  %93 = load i64, i64* %PC, align 8
  %94 = add i64 %93, 7
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RCX, align 8, !tbaa !2428
  %97 = add i64 %91, -104
  %98 = add i64 %93, 11
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  store i64 %96, i64* %99, align 8
  %100 = load i64, i64* %PC, align 8
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -852
  %103 = add i64 %100, 30
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %106 = add i64 %101, -8
  %107 = add i64 %100, 35
  store i64 %107, i64* %PC, align 8
  %108 = load <2 x float>, <2 x float>* %60, align 1
  %109 = extractelement <2 x float> %108, i32 0
  %110 = inttoptr i64 %106 to float*
  store float %109, float* %110, align 4
  %111 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %112 = load i64, i64* @stderr, align 64
  store i64 %112, i64* %RDI, align 8, !tbaa !2428
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -840
  %115 = add i64 %111, 26
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %118 = add i64 %111, -515
  %119 = add i64 %111, 33
  %120 = load i64, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122, align 8
  store i64 %121, i64* %RSP, align 8, !tbaa !2428
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %123 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %76)
  %124 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %125 = load i64, i64* @stderr, align 64
  store i64 %125, i64* %RDI, align 8, !tbaa !2428
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -868
  %128 = load i32, i32* %EAX, align 4
  %129 = add i64 %124, 24
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i32*
  store i32 %128, i32* %130, align 4
  %131 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %132 = add i64 %131, -572
  %133 = add i64 %131, 7
  %134 = load i64, i64* %RSP, align 8, !tbaa !2428
  %135 = add i64 %134, -8
  %136 = inttoptr i64 %135 to i64*
  store i64 %133, i64* %136, align 8
  store i64 %135, i64* %RSP, align 8, !tbaa !2428
  store i64 %132, i64* %PC, align 8, !tbaa !2428
  %137 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %123)
  %138 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %139 = load i64, i64* @stderr, align 64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %RBP, align 8
  %141 = add i64 %140, -872
  %142 = load i32, i32* %EAX, align 4
  %143 = add i64 %138, 24
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %141 to i32*
  store i32 %142, i32* %144, align 4
  %145 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %146 = add i64 %145, -603
  %147 = add i64 %145, 7
  %148 = load i64, i64* %RSP, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150, align 8
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %151 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %137)
  %152 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %153 = load i64, i64* @stderr, align 64
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -96
  %156 = add i64 %152, 22
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %155 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RDX, align 8, !tbaa !2428
  %159 = add i64 %154, -876
  %160 = load i32, i32* %EAX, align 4
  %161 = add i64 %152, 28
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  store i32 %160, i32* %162, align 4
  %163 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %164 = add i64 %163, -638
  %165 = add i64 %163, 7
  %166 = load i64, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %168, align 8
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  %169 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %151)
  %170 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %171 = load i64, i64* @stderr, align 64
  store i64 %171, i64* %RDI, align 8, !tbaa !2428
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -104
  %174 = add i64 %170, 22
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %RDX, align 8, !tbaa !2428
  %177 = add i64 %172, -880
  %178 = load i32, i32* %EAX, align 4
  %179 = add i64 %170, 28
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %177 to i32*
  store i32 %178, i32* %180, align 4
  %181 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %182 = add i64 %181, -673
  %183 = add i64 %181, 7
  %184 = load i64, i64* %RSP, align 8, !tbaa !2428
  %185 = add i64 %184, -8
  %186 = inttoptr i64 %185 to i64*
  store i64 %183, i64* %186, align 8
  store i64 %185, i64* %RSP, align 8, !tbaa !2428
  store i64 %182, i64* %PC, align 8, !tbaa !2428
  %187 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %169)
  %188 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -20
  store i64 %190, i64* %R8, align 8, !tbaa !2428
  %191 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*), align 8
  %192 = bitcast [32 x %union.VectorReg]* %8 to double*
  store double %191, double* %192, align 1, !tbaa !2454
  %193 = bitcast i64* %32 to double*
  store double 0.000000e+00, double* %193, align 1, !tbaa !2454
  %194 = bitcast %union.VectorReg* %9 to i8*
  %195 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 32) to i64*), align 16
  %196 = bitcast %union.VectorReg* %9 to double*
  %197 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %195, i64* %197, align 1, !tbaa !2454
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %199 = bitcast i64* %198 to double*
  store double 0.000000e+00, double* %199, align 1, !tbaa !2454
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %201 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %202 = sext i32 %201 to i64
  %203 = mul nsw i64 %202, %202
  %204 = shl i64 %203, 32
  %205 = ashr exact i64 %204, 32
  %206 = mul nsw i64 %202, %205
  %207 = bitcast %union.VectorReg* %10 to i8*
  %208 = trunc i64 %206 to i32
  %209 = sitofp i32 %208 to double
  %210 = bitcast %union.VectorReg* %10 to double*
  store double %209, double* %210, align 1, !tbaa !2454
  %211 = bitcast %union.VectorReg* %11 to i8*
  %212 = bitcast double %191 to <2 x i32>
  %213 = extractelement <2 x i32> %212, i32 0
  %214 = bitcast %union.VectorReg* %11 to i32*
  store i32 %213, i32* %214, align 1, !tbaa !2452
  %215 = extractelement <2 x i32> %212, i32 1
  %216 = getelementptr inbounds i8, i8* %211, i64 4
  %217 = bitcast i8* %216 to i32*
  store i32 %215, i32* %217, align 1, !tbaa !2452
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %219 = bitcast i64* %218 to i32*
  store i32 0, i32* %219, align 1, !tbaa !2452
  %220 = getelementptr inbounds i8, i8* %211, i64 12
  %221 = bitcast i8* %220 to i32*
  store i32 0, i32* %221, align 1, !tbaa !2452
  %222 = bitcast %union.VectorReg* %11 to double*
  %223 = load double, double* %222, align 1
  %224 = fmul double %223, %209
  %225 = load double, double* %196, align 1
  %226 = fdiv double %224, %225
  %227 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %228 = sext i32 %227 to i64
  %229 = mul nsw i64 %228, %228
  %230 = trunc i64 %229 to i32
  %231 = and i64 %229, 4294967295
  store i64 %231, i64* %200, align 8, !tbaa !2428
  %232 = shl i64 %229, 32
  %233 = ashr exact i64 %232, 32
  %234 = icmp ne i64 %233, %229
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %20, align 1, !tbaa !2432
  %236 = and i32 %230, 255
  %237 = tail call i32 @llvm.ctpop.i32(i32 %236) #8
  %238 = trunc i32 %237 to i8
  %239 = and i8 %238, 1
  %240 = xor i8 %239, 1
  store i8 %240, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %23, align 1, !tbaa !2447
  %241 = lshr i32 %230, 31
  %242 = trunc i32 %241 to i8
  store i8 %242, i8* %24, align 1, !tbaa !2448
  store i8 %235, i8* %25, align 1, !tbaa !2449
  %243 = sitofp i32 %230 to double
  store double %243, double* %196, align 1, !tbaa !2454
  %244 = load double, double* %192, align 1
  %245 = bitcast i64* %32 to <2 x i32>*
  %246 = load <2 x i32>, <2 x i32>* %245, align 1
  %247 = fmul double %244, %243
  %248 = fadd double %226, %247
  store double %248, double* %222, align 1, !tbaa !2454
  %249 = bitcast double %247 to <2 x i32>
  %250 = fptrunc double %248 to float
  store float %250, float* %28, align 1, !tbaa !2452
  %251 = extractelement <2 x i32> %249, i32 1
  %252 = bitcast i8* %30 to i32*
  store i32 %251, i32* %252, align 1, !tbaa !2452
  %253 = extractelement <2 x i32> %246, i32 0
  %254 = bitcast i64* %32 to i32*
  store i32 %253, i32* %254, align 1, !tbaa !2452
  %255 = extractelement <2 x i32> %246, i32 1
  %256 = bitcast i8* %34 to i32*
  store i32 %255, i32* %256, align 1, !tbaa !2452
  %257 = load i64, i64* %RBP, align 8
  %258 = add i64 %257, -12
  %259 = add i64 %188, 121
  store i64 %259, i64* %PC, align 8
  %260 = load <2 x float>, <2 x float>* %60, align 1
  %261 = extractelement <2 x float> %260, i32 0
  %262 = inttoptr i64 %258 to float*
  store float %261, float* %262, align 4
  %263 = load i64, i64* %PC, align 8
  %264 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RSI, align 8, !tbaa !2428
  %266 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %267 = zext i32 %266 to i64
  store i64 %267, i64* %RDX, align 8, !tbaa !2428
  %268 = load i64, i64* %RBP, align 8
  %269 = add i64 %268, -884
  %270 = load i32, i32* %EAX, align 4
  %271 = add i64 %263, 20
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %269 to i32*
  store i32 %270, i32* %272, align 4
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, 4027
  %275 = add i64 %273, 5
  %276 = load i64, i64* %RSP, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %275, i64* %278, align 8
  store i64 %277, i64* %RSP, align 8, !tbaa !2428
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  %279 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %274, %struct.Memory* %187)
  %280 = load i64, i64* %PC, align 8
  %281 = add i64 %280, -570
  %282 = add i64 %280, 5
  %283 = load i64, i64* %RSP, align 8, !tbaa !2428
  %284 = add i64 %283, -8
  %285 = inttoptr i64 %284 to i64*
  store i64 %282, i64* %285, align 8
  store i64 %284, i64* %RSP, align 8, !tbaa !2428
  store i64 %281, i64* %PC, align 8, !tbaa !2428
  %286 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %281, %struct.Memory* %279)
  %287 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %288 = load i64, i64* %RBP, align 8
  %289 = add i64 %288, -40
  %290 = add i64 %287, 35
  store i64 %290, i64* %PC, align 8
  %291 = load <2 x float>, <2 x float>* %60, align 1
  %292 = extractelement <2 x float> %291, i32 0
  %293 = inttoptr i64 %289 to float*
  store float %292, float* %293, align 4
  %294 = load i64, i64* %PC, align 8
  %295 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %296 = zext i32 %295 to i64
  store i64 %296, i64* %RSI, align 8, !tbaa !2428
  %297 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %298 = zext i32 %297 to i64
  store i64 %298, i64* %RDX, align 8, !tbaa !2428
  %299 = add i64 %294, 4446
  %300 = add i64 %294, 19
  %301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303, align 8
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  %304 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %299, %struct.Memory* %286)
  %305 = load i64, i64* %PC, align 8
  %306 = add i64 %305, -629
  %307 = add i64 %305, 5
  %308 = load i64, i64* %RSP, align 8, !tbaa !2428
  %309 = add i64 %308, -8
  %310 = inttoptr i64 %309 to i64*
  store i64 %307, i64* %310, align 8
  store i64 %309, i64* %RSP, align 8, !tbaa !2428
  store i64 %306, i64* %PC, align 8, !tbaa !2428
  %311 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %306, %struct.Memory* %304)
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -40
  %314 = load i64, i64* %PC, align 8
  %315 = add i64 %314, 5
  store i64 %315, i64* %PC, align 8
  %316 = load <2 x float>, <2 x float>* %60, align 1
  %317 = load <2 x i32>, <2 x i32>* %245, align 1
  %318 = inttoptr i64 %313 to float*
  %319 = load float, float* %318, align 4
  %320 = extractelement <2 x float> %316, i32 0
  %321 = fsub float %320, %319
  store float %321, float* %28, align 1, !tbaa !2452
  %322 = bitcast <2 x float> %316 to <2 x i32>
  %323 = extractelement <2 x i32> %322, i32 1
  store i32 %323, i32* %252, align 1, !tbaa !2452
  %324 = extractelement <2 x i32> %317, i32 0
  store i32 %324, i32* %254, align 1, !tbaa !2452
  %325 = extractelement <2 x i32> %317, i32 1
  store i32 %325, i32* %256, align 1, !tbaa !2452
  %326 = load <2 x float>, <2 x float>* %60, align 1
  %327 = extractelement <2 x float> %326, i32 0
  store float %327, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*), align 16
  %328 = add i64 %314, -634
  %329 = add i64 %314, 19
  %330 = load i64, i64* %RSP, align 8, !tbaa !2428
  %331 = add i64 %330, -8
  %332 = inttoptr i64 %331 to i64*
  store i64 %329, i64* %332, align 8
  store i64 %331, i64* %RSP, align 8, !tbaa !2428
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  %333 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %328, %struct.Memory* %311)
  %334 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %335 = load i64, i64* %RBP, align 8
  %336 = add i64 %335, -40
  %337 = add i64 %334, 38
  store i64 %337, i64* %PC, align 8
  %338 = load <2 x float>, <2 x float>* %60, align 1
  %339 = extractelement <2 x float> %338, i32 0
  %340 = inttoptr i64 %336 to float*
  store float %339, float* %340, align 4
  %341 = load i64, i64* %PC, align 8
  %342 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %343 = zext i32 %342 to i64
  store i64 %343, i64* %RSI, align 8, !tbaa !2428
  %344 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %345 = zext i32 %344 to i64
  store i64 %345, i64* %RDX, align 8, !tbaa !2428
  %346 = add i64 %341, 5149
  %347 = add i64 %341, 19
  %348 = load i64, i64* %RSP, align 8, !tbaa !2428
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350, align 8
  store i64 %349, i64* %RSP, align 8, !tbaa !2428
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  %351 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %346, %struct.Memory* %333)
  %352 = load i64, i64* %PC, align 8
  %353 = add i64 %352, -710
  %354 = add i64 %352, 5
  %355 = load i64, i64* %RSP, align 8, !tbaa !2428
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %354, i64* %357, align 8
  store i64 %356, i64* %RSP, align 8, !tbaa !2428
  store i64 %353, i64* %PC, align 8, !tbaa !2428
  %358 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %353, %struct.Memory* %351)
  %359 = load i64, i64* %RBP, align 8
  %360 = add i64 %359, -40
  %361 = load i64, i64* %PC, align 8
  %362 = add i64 %361, 5
  store i64 %362, i64* %PC, align 8
  %363 = load <2 x float>, <2 x float>* %60, align 1
  %364 = inttoptr i64 %360 to float*
  %365 = load float, float* %364, align 4
  %366 = extractelement <2 x float> %363, i32 0
  %367 = fsub float %366, %365
  store float %367, float* %28, align 1, !tbaa !2452
  %368 = bitcast <2 x float> %363 to <2 x i32>
  %369 = extractelement <2 x i32> %368, i32 1
  store i32 %369, i32* %252, align 1, !tbaa !2452
  %370 = load <2 x float>, <2 x float>* %60, align 1
  %371 = extractelement <2 x float> %370, i32 0
  store float %371, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*), align 4
  %372 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to i32*), align 16
  store i32 %372, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %373 = load <2 x float>, <2 x float>* %60, align 1
  %374 = load <2 x i32>, <2 x i32>* %245, align 1
  %375 = extractelement <2 x float> %373, i32 0
  %376 = fadd float %375, %371
  store float %376, float* %28, align 1, !tbaa !2452
  %377 = bitcast <2 x float> %373 to <2 x i32>
  %378 = extractelement <2 x i32> %377, i32 1
  store i32 %378, i32* %252, align 1, !tbaa !2452
  %379 = extractelement <2 x i32> %374, i32 0
  store i32 %379, i32* %254, align 1, !tbaa !2452
  %380 = extractelement <2 x i32> %374, i32 1
  store i32 %380, i32* %256, align 1, !tbaa !2452
  %381 = add i64 %359, -16
  %382 = add i64 %361, 37
  store i64 %382, i64* %PC, align 8
  %383 = load <2 x float>, <2 x float>* %60, align 1
  %384 = extractelement <2 x float> %383, i32 0
  %385 = inttoptr i64 %381 to float*
  store float %384, float* %385, align 4
  %386 = load i64, i64* %PC, align 8
  %387 = add i64 %386, 11
  store i64 %387, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4008bb

block_400def:                                     ; preds = %block_400d9e
  %388 = add i64 %2483, -2095
  %389 = add i64 %2483, 5
  %390 = load i64, i64* %RSP, align 8, !tbaa !2428
  %391 = add i64 %390, -8
  %392 = inttoptr i64 %391 to i64*
  store i64 %389, i64* %392, align 8
  store i64 %391, i64* %RSP, align 8, !tbaa !2428
  store i64 %388, i64* %PC, align 8, !tbaa !2428
  %393 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %388, %struct.Memory* %MEMORY.12)
  %394 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2586, align 1, !tbaa !2451
  store i32 0, i32* %2587, align 1, !tbaa !2451
  store i32 0, i32* %2588, align 1, !tbaa !2451
  store i32 0, i32* %2589, align 1, !tbaa !2451
  %395 = load i64, i64* %RBP, align 8
  %396 = add i64 %395, -84
  %397 = add i64 %394, 18
  store i64 %397, i64* %PC, align 8
  %398 = load <2 x float>, <2 x float>* %60, align 1
  %399 = extractelement <2 x float> %398, i32 0
  %400 = inttoptr i64 %396 to float*
  store float %399, float* %400, align 4
  %401 = load i64, i64* %RBP, align 8
  %402 = add i64 %401, -84
  %403 = load i64, i64* %PC, align 8
  %404 = add i64 %403, 5
  store i64 %404, i64* %PC, align 8
  %405 = inttoptr i64 %402 to i32*
  %406 = load i32, i32* %405, align 4
  store i32 %406, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %407 = add i64 %401, -80
  %408 = add i64 %403, 10
  store i64 %408, i64* %PC, align 8
  %409 = load <2 x float>, <2 x float>* %60, align 1
  %410 = load <2 x i32>, <2 x i32>* %245, align 1
  %411 = inttoptr i64 %407 to float*
  %412 = load float, float* %411, align 4
  %413 = extractelement <2 x float> %409, i32 0
  %414 = fsub float %413, %412
  store float %414, float* %28, align 1, !tbaa !2452
  %415 = bitcast <2 x float> %409 to <2 x i32>
  %416 = extractelement <2 x i32> %415, i32 1
  store i32 %416, i32* %252, align 1, !tbaa !2452
  %417 = extractelement <2 x i32> %410, i32 0
  store i32 %417, i32* %254, align 1, !tbaa !2452
  %418 = extractelement <2 x i32> %410, i32 1
  store i32 %418, i32* %256, align 1, !tbaa !2452
  %419 = add i64 %401, -72
  %420 = add i64 %403, 15
  store i64 %420, i64* %PC, align 8
  %421 = load <2 x float>, <2 x float>* %60, align 1
  %422 = extractelement <2 x float> %421, i32 0
  %423 = inttoptr i64 %419 to float*
  store float %422, float* %423, align 4
  %424 = load i64, i64* %PC, align 8
  %425 = load i64, i64* @stderr, align 64
  store i64 %425, i64* %RDI, align 8, !tbaa !2428
  %426 = load i64, i64* %RBP, align 8
  %427 = add i64 %426, -68
  %428 = add i64 %424, 11
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i32*
  %430 = load i32, i32* %429, align 4
  %431 = zext i32 %430 to i64
  store i64 %431, i64* %RDX, align 8, !tbaa !2428
  %432 = load <2 x i32>, <2 x i32>* %1486, align 1
  %433 = load <2 x i32>, <2 x i32>* %1487, align 1
  %434 = extractelement <2 x i32> %432, i32 0
  store i32 %434, i32* %29, align 1, !tbaa !2452
  %435 = extractelement <2 x i32> %432, i32 1
  store i32 %435, i32* %252, align 1, !tbaa !2452
  %436 = extractelement <2 x i32> %433, i32 0
  store i32 %436, i32* %254, align 1, !tbaa !2452
  %437 = extractelement <2 x i32> %433, i32 1
  store i32 %437, i32* %256, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %438 = add i64 %424, -2389
  %439 = add i64 %424, 21
  %440 = load i64, i64* %RSP, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %439, i64* %442, align 8
  store i64 %441, i64* %RSP, align 8, !tbaa !2428
  store i64 %438, i64* %PC, align 8, !tbaa !2428
  %443 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %393)
  %444 = load i64, i64* %RBP, align 8
  %445 = add i64 %444, -64
  %446 = load i64, i64* %PC, align 8
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %445 to i32*
  %449 = load i32, i32* %448, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %450 = and i32 %449, 255
  %451 = tail call i32 @llvm.ctpop.i32(i32 %450) #8
  %452 = trunc i32 %451 to i8
  %453 = and i8 %452, 1
  %454 = xor i8 %453, 1
  store i8 %454, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  %455 = icmp eq i32 %449, 0
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %23, align 1, !tbaa !2447
  %457 = lshr i32 %449, 31
  %458 = trunc i32 %457 to i8
  store i8 %458, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  %459 = add i64 %444, -940
  %460 = load i32, i32* %EAX, align 4
  %461 = add i64 %446, 10
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i32*
  store i32 %460, i32* %462, align 4
  %463 = load i64, i64* %PC, align 8
  %464 = load i8, i8* %24, align 1, !tbaa !2448
  %465 = icmp ne i8 %464, 0
  %466 = load i8, i8* %25, align 1, !tbaa !2449
  %467 = icmp ne i8 %466, 0
  %468 = xor i1 %465, %467
  %.v34 = select i1 %468, i64 6, i64 15
  %469 = add i64 %463, %.v34
  store i64 %469, i64* %PC, align 8, !tbaa !2428
  br i1 %468, label %block_400e3a, label %block_400e43

block_400f66:                                     ; preds = %block_400ee0
  %470 = add i64 %2514, -2470
  %471 = add i64 %2514, 5
  %472 = load i64, i64* %RSP, align 8, !tbaa !2428
  %473 = add i64 %472, -8
  %474 = inttoptr i64 %473 to i64*
  store i64 %471, i64* %474, align 8
  store i64 %473, i64* %RSP, align 8, !tbaa !2428
  store i64 %470, i64* %PC, align 8, !tbaa !2428
  %475 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %470, %struct.Memory* %MEMORY.13)
  %476 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2586, align 1, !tbaa !2451
  store i32 0, i32* %2587, align 1, !tbaa !2451
  store i32 0, i32* %2588, align 1, !tbaa !2451
  store i32 0, i32* %2589, align 1, !tbaa !2451
  %477 = load i64, i64* %RBP, align 8
  %478 = add i64 %477, -80
  %479 = add i64 %476, 18
  store i64 %479, i64* %PC, align 8
  %480 = load <2 x float>, <2 x float>* %60, align 1
  %481 = inttoptr i64 %478 to float*
  %482 = load float, float* %481, align 4
  %483 = extractelement <2 x float> %480, i32 0
  %484 = fsub float %483, %482
  store float %484, float* %28, align 1, !tbaa !2452
  %485 = bitcast <2 x float> %480 to <2 x i32>
  %486 = extractelement <2 x i32> %485, i32 1
  store i32 %486, i32* %252, align 1, !tbaa !2452
  %487 = add i64 %477, -84
  %488 = add i64 %476, 23
  store i64 %488, i64* %PC, align 8
  %489 = load <2 x float>, <2 x float>* %60, align 1
  %490 = extractelement <2 x float> %489, i32 0
  %491 = inttoptr i64 %487 to float*
  store float %490, float* %491, align 4
  %492 = load i64, i64* %PC, align 8
  %493 = load i64, i64* @stderr, align 64
  store i64 %493, i64* %RDI, align 8, !tbaa !2428
  %494 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RDX, align 8, !tbaa !2428
  %496 = load <2 x i32>, <2 x i32>* %1486, align 1
  %497 = load <2 x i32>, <2 x i32>* %1487, align 1
  %498 = extractelement <2 x i32> %496, i32 0
  store i32 %498, i32* %29, align 1, !tbaa !2452
  %499 = extractelement <2 x i32> %496, i32 1
  store i32 %499, i32* %252, align 1, !tbaa !2452
  %500 = extractelement <2 x i32> %497, i32 0
  store i32 %500, i32* %254, align 1, !tbaa !2452
  %501 = extractelement <2 x i32> %497, i32 1
  store i32 %501, i32* %256, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %502 = add i64 %492, -2754
  %503 = add i64 %492, 25
  %504 = load i64, i64* %RSP, align 8, !tbaa !2428
  %505 = add i64 %504, -8
  %506 = inttoptr i64 %505 to i64*
  store i64 %503, i64* %506, align 8
  store i64 %505, i64* %RSP, align 8, !tbaa !2428
  store i64 %502, i64* %PC, align 8, !tbaa !2428
  %507 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %475)
  %508 = load i64, i64* %RBP, align 8
  %509 = add i64 %508, -64
  %510 = load i64, i64* %PC, align 8
  %511 = add i64 %510, 4
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %509 to i32*
  %513 = load i32, i32* %512, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %514 = and i32 %513, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #8
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  %519 = icmp eq i32 %513, 0
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %23, align 1, !tbaa !2447
  %521 = lshr i32 %513, 31
  %522 = trunc i32 %521 to i8
  store i8 %522, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  %523 = add i64 %508, -952
  %524 = load i32, i32* %EAX, align 4
  %525 = add i64 %510, 10
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %523 to i32*
  store i32 %524, i32* %526, align 4
  %527 = load i64, i64* %PC, align 8
  %528 = load i8, i8* %24, align 1, !tbaa !2448
  %529 = icmp ne i8 %528, 0
  %530 = load i8, i8* %25, align 1, !tbaa !2449
  %531 = icmp ne i8 %530, 0
  %532 = xor i1 %529, %531
  %.v37 = select i1 %532, i64 6, i64 23
  %533 = add i64 %527, %.v37
  store i64 %533, i64* %PC, align 8, !tbaa !2428
  br i1 %532, label %block_400fab, label %block_400fbc

block_4014e5:                                     ; preds = %block_4014d7
  %534 = add i64 %709, -3877
  %535 = add i64 %709, 5
  %536 = load i64, i64* %RSP, align 8, !tbaa !2428
  %537 = add i64 %536, -8
  %538 = inttoptr i64 %537 to i64*
  store i64 %535, i64* %538, align 8
  store i64 %537, i64* %RSP, align 8, !tbaa !2428
  store i64 %534, i64* %PC, align 8, !tbaa !2428
  %539 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %534, %struct.Memory* %MEMORY.1)
  %540 = load i64, i64* %RBP, align 8
  %541 = add i64 %540, -40
  %542 = load i64, i64* %PC, align 8
  %543 = add i64 %542, 5
  store i64 %543, i64* %PC, align 8
  %544 = load <2 x float>, <2 x float>* %60, align 1
  %545 = extractelement <2 x float> %544, i32 0
  %546 = inttoptr i64 %541 to float*
  store float %545, float* %546, align 4
  %547 = load i64, i64* %PC, align 8
  %548 = add i64 %547, 11
  store i64 %548, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4014fa

block_4015d8:                                     ; preds = %block_4015c4
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %549 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %550 = zext i32 %549 to i64
  store i64 %550, i64* %RSI, align 8, !tbaa !2428
  %551 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %552 = zext i32 %551 to i64
  store i64 %552, i64* %RDX, align 8, !tbaa !2428
  %553 = add i64 %1349, 1720
  %554 = add i64 %1349, 52
  %555 = load i64, i64* %RSP, align 8, !tbaa !2428
  %556 = add i64 %555, -8
  %557 = inttoptr i64 %556 to i64*
  store i64 %554, i64* %557, align 8
  store i64 %556, i64* %RSP, align 8, !tbaa !2428
  store i64 %553, i64* %PC, align 8, !tbaa !2428
  %558 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %553, %struct.Memory* %MEMORY.2)
  %559 = load i64, i64* %PC, align 8
  %560 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %561 = add i32 %560, 1
  %562 = zext i32 %561 to i64
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = icmp eq i32 %560, -1
  %564 = icmp eq i32 %561, 0
  %565 = or i1 %563, %564
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %20, align 1, !tbaa !2432
  %567 = and i32 %561, 255
  %568 = tail call i32 @llvm.ctpop.i32(i32 %567) #8
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = xor i8 %570, 1
  store i8 %571, i8* %21, align 1, !tbaa !2446
  %572 = xor i32 %560, %561
  %573 = lshr i32 %572, 4
  %574 = trunc i32 %573 to i8
  %575 = and i8 %574, 1
  store i8 %575, i8* %22, align 1, !tbaa !2450
  %576 = zext i1 %564 to i8
  store i8 %576, i8* %23, align 1, !tbaa !2447
  %577 = lshr i32 %561, 31
  %578 = trunc i32 %577 to i8
  store i8 %578, i8* %24, align 1, !tbaa !2448
  %579 = lshr i32 %560, 31
  %580 = xor i32 %577, %579
  %581 = add nuw nsw i32 %580, %577
  %582 = icmp eq i32 %581, 2
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %25, align 1, !tbaa !2449
  store i32 %561, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %584 = add i64 %559, -72
  store i64 %584, i64* %PC, align 8, !tbaa !2428
  br label %block_4015c4

block_401756:                                     ; preds = %block_4014d7
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %585 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 48) to double*), align 16
  %586 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  store i32 %586, i32* %2264, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2584, align 1, !tbaa !2452
  %587 = load <2 x float>, <2 x float>* %2095, align 1
  %588 = extractelement <2 x float> %587, i32 0
  %589 = fpext float %588 to double
  %590 = fdiv double %589, %585
  store double %590, double* %210, align 1, !tbaa !2454
  %591 = bitcast double %585 to <2 x i32>
  %592 = fptrunc double %590 to float
  store float %592, float* %2571, align 1, !tbaa !2452
  %593 = extractelement <2 x i32> %591, i32 1
  store i32 %593, i32* %2587, align 1, !tbaa !2452
  store i32 0, i32* %2588, align 1, !tbaa !2452
  store i32 0, i32* %2589, align 1, !tbaa !2452
  %594 = load <2 x float>, <2 x float>* %2577, align 1
  %595 = extractelement <2 x float> %594, i32 0
  store float %595, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %596 = load i64, i64* @stderr, align 64
  store i64 %596, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %597 = add i64 %709, -4758
  %598 = add i64 %709, 66
  %599 = load i64, i64* %RSP, align 8, !tbaa !2428
  %600 = add i64 %599, -8
  %601 = inttoptr i64 %600 to i64*
  store i64 %598, i64* %601, align 8
  store i64 %600, i64* %RSP, align 8, !tbaa !2428
  store i64 %597, i64* %PC, align 8, !tbaa !2428
  %602 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %603 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %604 = load i64, i64* %RBP, align 8
  %605 = add i64 %604, -996
  %606 = load i32, i32* %EAX, align 4
  %607 = add i64 %603, 8
  store i64 %607, i64* %PC, align 8
  %608 = inttoptr i64 %605 to i32*
  store i32 %606, i32* %608, align 4
  %609 = load i32, i32* %ECX, align 4
  %610 = zext i32 %609 to i64
  %611 = load i64, i64* %PC, align 8
  store i64 %610, i64* %RAX, align 8, !tbaa !2428
  %612 = load i64, i64* %RSP, align 8
  %613 = add i64 %612, 1008
  store i64 %613, i64* %RSP, align 8, !tbaa !2428
  %614 = icmp ugt i64 %612, -1009
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %20, align 1, !tbaa !2432
  %616 = trunc i64 %613 to i32
  %617 = and i32 %616, 255
  %618 = tail call i32 @llvm.ctpop.i32(i32 %617) #8
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  store i8 %621, i8* %21, align 1, !tbaa !2446
  %622 = xor i64 %612, 16
  %623 = xor i64 %622, %613
  %624 = lshr i64 %623, 4
  %625 = trunc i64 %624 to i8
  %626 = and i8 %625, 1
  store i8 %626, i8* %22, align 1, !tbaa !2450
  %627 = icmp eq i64 %613, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %23, align 1, !tbaa !2447
  %629 = lshr i64 %613, 63
  %630 = trunc i64 %629 to i8
  store i8 %630, i8* %24, align 1, !tbaa !2448
  %631 = lshr i64 %612, 63
  %632 = xor i64 %629, %631
  %633 = add nuw nsw i64 %632, %629
  %634 = icmp eq i64 %633, 2
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %25, align 1, !tbaa !2449
  %636 = add i64 %611, 10
  store i64 %636, i64* %PC, align 8
  %637 = add i64 %612, 1016
  %638 = inttoptr i64 %613 to i64*
  %639 = load i64, i64* %638, align 8
  store i64 %639, i64* %RBP, align 8, !tbaa !2428
  store i64 %637, i64* %RSP, align 8, !tbaa !2428
  %640 = add i64 %611, 11
  store i64 %640, i64* %PC, align 8
  %641 = inttoptr i64 %637 to i64*
  %642 = load i64, i64* %641, align 8
  store i64 %642, i64* %PC, align 8, !tbaa !2428
  %643 = add i64 %612, 1024
  store i64 %643, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %602

block_400aee:                                     ; preds = %block_400ab0, %block_400ac6
  %644 = phi i64 [ %1500, %block_400ab0 ], [ %.pre16, %block_400ac6 ]
  %645 = load i64, i64* %RBP, align 8
  %646 = add i64 %645, -904
  %647 = add i64 %644, 8
  store i64 %647, i64* %PC, align 8
  %648 = inttoptr i64 %646 to double*
  %649 = load double, double* %648, align 8
  %650 = bitcast double %649 to <2 x i32>
  %651 = fptrunc double %649 to float
  store float %651, float* %28, align 1, !tbaa !2452
  %652 = extractelement <2 x i32> %650, i32 1
  store i32 %652, i32* %252, align 1, !tbaa !2452
  store i32 0, i32* %254, align 1, !tbaa !2452
  store i32 0, i32* %256, align 1, !tbaa !2452
  %653 = add i64 %645, -24
  %654 = add i64 %644, 17
  store i64 %654, i64* %PC, align 8
  %655 = load <2 x float>, <2 x float>* %60, align 1
  %656 = extractelement <2 x float> %655, i32 0
  %657 = inttoptr i64 %653 to float*
  store float %656, float* %657, align 4
  %658 = load i64, i64* %PC, align 8
  %659 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %660 = add i32 %659, 1
  %661 = zext i32 %660 to i64
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %662 = icmp eq i32 %659, -1
  %663 = icmp eq i32 %660, 0
  %664 = or i1 %662, %663
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %20, align 1, !tbaa !2432
  %666 = and i32 %660, 255
  %667 = tail call i32 @llvm.ctpop.i32(i32 %666) #8
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = xor i8 %669, 1
  store i8 %670, i8* %21, align 1, !tbaa !2446
  %671 = xor i32 %659, %660
  %672 = lshr i32 %671, 4
  %673 = trunc i32 %672 to i8
  %674 = and i8 %673, 1
  store i8 %674, i8* %22, align 1, !tbaa !2450
  %675 = zext i1 %663 to i8
  store i8 %675, i8* %23, align 1, !tbaa !2447
  %676 = lshr i32 %660, 31
  %677 = trunc i32 %676 to i8
  store i8 %677, i8* %24, align 1, !tbaa !2448
  %678 = lshr i32 %659, 31
  %679 = xor i32 %676, %678
  %680 = add nuw nsw i32 %679, %676
  %681 = icmp eq i32 %680, 2
  %682 = zext i1 %681 to i8
  store i8 %682, i8* %25, align 1, !tbaa !2449
  store i32 %660, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %683 = add i64 %658, -280
  store i64 %683, i64* %PC, align 8, !tbaa !2428
  br label %block_4009e7

block_4014d7:                                     ; preds = %block_401622, %block_4013ec
  %684 = phi i32 [ %.pre27, %block_4013ec ], [ %1797, %block_401622 ]
  %685 = phi i64 [ %.pre26, %block_4013ec ], [ %1820, %block_401622 ]
  %MEMORY.1 = phi %struct.Memory* [ %1283, %block_4013ec ], [ %1794, %block_401622 ]
  %686 = add i32 %684, -12
  %687 = icmp ult i32 %684, 12
  %688 = zext i1 %687 to i8
  store i8 %688, i8* %20, align 1, !tbaa !2432
  %689 = and i32 %686, 255
  %690 = tail call i32 @llvm.ctpop.i32(i32 %689) #8
  %691 = trunc i32 %690 to i8
  %692 = and i8 %691, 1
  %693 = xor i8 %692, 1
  store i8 %693, i8* %21, align 1, !tbaa !2446
  %694 = xor i32 %684, %686
  %695 = lshr i32 %694, 4
  %696 = trunc i32 %695 to i8
  %697 = and i8 %696, 1
  store i8 %697, i8* %22, align 1, !tbaa !2450
  %698 = icmp eq i32 %686, 0
  %699 = zext i1 %698 to i8
  store i8 %699, i8* %23, align 1, !tbaa !2447
  %700 = lshr i32 %686, 31
  %701 = trunc i32 %700 to i8
  store i8 %701, i8* %24, align 1, !tbaa !2448
  %702 = lshr i32 %684, 31
  %703 = xor i32 %700, %702
  %704 = add nuw nsw i32 %703, %702
  %705 = icmp eq i32 %704, 2
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %25, align 1, !tbaa !2449
  %707 = icmp ne i8 %701, 0
  %708 = xor i1 %707, %705
  %.v44 = select i1 %708, i64 14, i64 639
  %709 = add i64 %685, %.v44
  store i64 %709, i64* %PC, align 8, !tbaa !2428
  br i1 %708, label %block_4014e5, label %block_401756

block_400951:                                     ; preds = %block_40093d
  %710 = sext i32 %2418 to i64
  store i64 %710, i64* %RAX, align 8, !tbaa !2428
  %711 = shl nsw i64 %710, 2
  %712 = add i64 %711, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %713 = add i64 %2448, 17
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %712 to float*
  %715 = inttoptr i64 %712 to i32*
  %716 = load i32, i32* %715, align 4
  store i32 %716, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  %717 = add i64 %2448, 21
  store i64 %717, i64* %PC, align 8
  %718 = load i64, i64* %3101, align 1
  %719 = trunc i64 %718 to i32
  store i32 %719, i32* %ECX, align 1, !tbaa !2451
  store i32 0, i32* %3103, align 1, !tbaa !2451
  %720 = load i64, i64* %RCX, align 8
  %721 = and i64 %720, 4294967295
  %722 = xor i64 %721, 2147483648
  store i64 %722, i64* %RCX, align 8, !tbaa !2428
  %723 = trunc i64 %722 to i32
  store i32 %723, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %724 = add i64 %2448, 48
  store i64 %724, i64* %PC, align 8
  %725 = load <2 x float>, <2 x float>* %60, align 1
  %726 = extractelement <2 x float> %725, i32 0
  store float %726, float* %714, align 4
  %727 = load i64, i64* %PC, align 8
  %728 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %729 = add i32 %728, 1
  %730 = zext i32 %729 to i64
  store i64 %730, i64* %RAX, align 8, !tbaa !2428
  %731 = icmp eq i32 %728, -1
  %732 = icmp eq i32 %729, 0
  %733 = or i1 %731, %732
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %20, align 1, !tbaa !2432
  %735 = and i32 %729, 255
  %736 = tail call i32 @llvm.ctpop.i32(i32 %735) #8
  %737 = trunc i32 %736 to i8
  %738 = and i8 %737, 1
  %739 = xor i8 %738, 1
  store i8 %739, i8* %21, align 1, !tbaa !2446
  %740 = xor i32 %728, %729
  %741 = lshr i32 %740, 4
  %742 = trunc i32 %741 to i8
  %743 = and i8 %742, 1
  store i8 %743, i8* %22, align 1, !tbaa !2450
  %744 = zext i1 %732 to i8
  store i8 %744, i8* %23, align 1, !tbaa !2447
  %745 = lshr i32 %729, 31
  %746 = trunc i32 %745 to i8
  store i8 %746, i8* %24, align 1, !tbaa !2448
  %747 = lshr i32 %728, 31
  %748 = xor i32 %745, %747
  %749 = add nuw nsw i32 %748, %745
  %750 = icmp eq i32 %749, 2
  %751 = zext i1 %750 to i8
  store i8 %751, i8* %25, align 1, !tbaa !2449
  store i32 %729, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %752 = add i64 %727, -68
  store i64 %752, i64* %PC, align 8, !tbaa !2428
  br label %block_40093d

block_400fcb:                                     ; preds = %block_400fbc
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %.pre23 = load i64, i64* @stderr, align 64
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i64 %.pre23, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %753 = add i64 %1366, -2827
  %754 = add i64 %1366, 63
  %755 = load i64, i64* %RSP, align 8, !tbaa !2428
  %756 = add i64 %755, -8
  %757 = inttoptr i64 %756 to i64*
  store i64 %754, i64* %757, align 8
  store i64 %756, i64* %RSP, align 8, !tbaa !2428
  store i64 %753, i64* %PC, align 8, !tbaa !2428
  %758 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %507)
  %759 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %760 = load i64, i64* @stderr, align 64
  store i64 %760, i64* %RDI, align 8, !tbaa !2428
  %761 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %762 = zext i32 %761 to i64
  store i64 %762, i64* %RDX, align 8, !tbaa !2428
  %763 = load i64, i64* %RBP, align 8
  %764 = add i64 %763, -956
  %765 = load i32, i32* %EAX, align 4
  %766 = add i64 %759, 31
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %764 to i32*
  store i32 %765, i32* %767, align 4
  %768 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %769 = add i64 %768, -2921
  %770 = add i64 %768, 7
  %771 = load i64, i64* %RSP, align 8, !tbaa !2428
  %772 = add i64 %771, -8
  %773 = inttoptr i64 %772 to i64*
  store i64 %770, i64* %773, align 8
  store i64 %772, i64* %RSP, align 8, !tbaa !2428
  store i64 %769, i64* %PC, align 8, !tbaa !2428
  %774 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %758)
  %775 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %776 = load i64, i64* @stderr, align 64
  store i64 %776, i64* %RDI, align 8, !tbaa !2428
  %777 = load i64, i64* %RBP, align 8
  %778 = add i64 %777, -960
  %779 = load i32, i32* %EAX, align 4
  %780 = add i64 %775, 24
  store i64 %780, i64* %PC, align 8
  %781 = inttoptr i64 %778 to i32*
  store i32 %779, i32* %781, align 4
  %782 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %783 = add i64 %782, -2952
  %784 = add i64 %782, 7
  %785 = load i64, i64* %RSP, align 8, !tbaa !2428
  %786 = add i64 %785, -8
  %787 = inttoptr i64 %786 to i64*
  store i64 %784, i64* %787, align 8
  store i64 %786, i64* %RSP, align 8, !tbaa !2428
  store i64 %783, i64* %PC, align 8, !tbaa !2428
  %788 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %774)
  %789 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %790 = load i64, i64* @stderr, align 64
  store i64 %790, i64* %RDI, align 8, !tbaa !2428
  %791 = load i64, i64* %RBP, align 8
  %792 = add i64 %791, -964
  %793 = load i32, i32* %EAX, align 4
  %794 = add i64 %789, 24
  store i64 %794, i64* %PC, align 8
  %795 = inttoptr i64 %792 to i32*
  store i32 %793, i32* %795, align 4
  %796 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %797 = add i64 %796, -2983
  %798 = add i64 %796, 7
  %799 = load i64, i64* %RSP, align 8, !tbaa !2428
  %800 = add i64 %799, -8
  %801 = inttoptr i64 %800 to i64*
  store i64 %798, i64* %801, align 8
  store i64 %800, i64* %RSP, align 8, !tbaa !2428
  store i64 %797, i64* %PC, align 8, !tbaa !2428
  %802 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %788)
  %803 = load i64, i64* %PC, align 8
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %804 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %805 = zext i32 %804 to i64
  store i64 %805, i64* %RDX, align 8, !tbaa !2428
  %806 = load <2 x i32>, <2 x i32>* %1486, align 1
  %807 = load <2 x i32>, <2 x i32>* %1487, align 1
  %808 = sitofp i32 %804 to float
  store float %808, float* %2571, align 1, !tbaa !2452
  %809 = extractelement <2 x i32> %806, i32 1
  store i32 %809, i32* %2587, align 1, !tbaa !2452
  %810 = extractelement <2 x i32> %807, i32 0
  store i32 %810, i32* %2588, align 1, !tbaa !2452
  %811 = extractelement <2 x i32> %807, i32 1
  store i32 %811, i32* %2589, align 1, !tbaa !2452
  %812 = load i64, i64* %RBP, align 8
  %813 = add i64 %812, -72
  %814 = add i64 %803, 19
  store i64 %814, i64* %PC, align 8
  %815 = load <2 x float>, <2 x float>* %2577, align 1
  %816 = load <2 x i32>, <2 x i32>* %1487, align 1
  %817 = inttoptr i64 %813 to float*
  %818 = load float, float* %817, align 4
  %819 = extractelement <2 x float> %815, i32 0
  %820 = fmul float %819, %818
  store float %820, float* %2571, align 1, !tbaa !2452
  %821 = bitcast <2 x float> %815 to <2 x i32>
  %822 = extractelement <2 x i32> %821, i32 1
  store i32 %822, i32* %2587, align 1, !tbaa !2452
  %823 = extractelement <2 x i32> %816, i32 0
  store i32 %823, i32* %2588, align 1, !tbaa !2452
  %824 = extractelement <2 x i32> %816, i32 1
  store i32 %824, i32* %2589, align 1, !tbaa !2452
  %825 = add i64 %812, -44
  %826 = add i64 %803, 24
  store i64 %826, i64* %PC, align 8
  %827 = load <2 x float>, <2 x float>* %2577, align 1
  %828 = extractelement <2 x float> %827, i32 0
  %829 = inttoptr i64 %825 to float*
  store float %828, float* %829, align 4
  %830 = load i64, i64* %PC, align 8
  %831 = load <2 x float>, <2 x float>* %60, align 1
  %832 = extractelement <2 x float> %831, i32 0
  store float %832, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %833 = load i64, i64* %RBP, align 8
  %834 = add i64 %833, -968
  %835 = load i32, i32* %EAX, align 4
  %836 = add i64 %830, 26
  store i64 %836, i64* %PC, align 8
  %837 = inttoptr i64 %834 to i32*
  store i32 %835, i32* %837, align 4
  %838 = bitcast i64* %2581 to double*
  %839 = bitcast %union.VectorReg* %11 to <2 x i32>*
  %840 = bitcast i64* %218 to <2 x i32>*
  %.pre24 = load i64, i64* %PC, align 8
  %.pre25 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  br label %block_4010a0

block_401149:                                     ; preds = %block_4010c3
  %841 = add i64 %1397, -2953
  %842 = add i64 %1397, 5
  %843 = load i64, i64* %RSP, align 8, !tbaa !2428
  %844 = add i64 %843, -8
  %845 = inttoptr i64 %844 to i64*
  store i64 %842, i64* %845, align 8
  store i64 %844, i64* %RSP, align 8, !tbaa !2428
  store i64 %841, i64* %PC, align 8, !tbaa !2428
  %846 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %841, %struct.Memory* %MEMORY.4)
  %847 = load i64, i64* %RBP, align 8
  %848 = add i64 %847, -40
  %849 = load i64, i64* %PC, align 8
  %850 = add i64 %849, 5
  store i64 %850, i64* %PC, align 8
  %851 = load <2 x float>, <2 x float>* %60, align 1
  %852 = load <2 x i32>, <2 x i32>* %245, align 1
  %853 = inttoptr i64 %848 to float*
  %854 = load float, float* %853, align 4
  %855 = extractelement <2 x float> %851, i32 0
  %856 = fsub float %855, %854
  store float %856, float* %28, align 1, !tbaa !2452
  %857 = bitcast <2 x float> %851 to <2 x i32>
  %858 = extractelement <2 x i32> %857, i32 1
  store i32 %858, i32* %252, align 1, !tbaa !2452
  %859 = extractelement <2 x i32> %852, i32 0
  store i32 %859, i32* %254, align 1, !tbaa !2452
  %860 = extractelement <2 x i32> %852, i32 1
  store i32 %860, i32* %256, align 1, !tbaa !2452
  %861 = add i64 %847, -44
  %862 = add i64 %849, 10
  store i64 %862, i64* %PC, align 8
  %863 = load <2 x float>, <2 x float>* %60, align 1
  %864 = load <2 x i32>, <2 x i32>* %245, align 1
  %865 = inttoptr i64 %861 to float*
  %866 = load float, float* %865, align 4
  %867 = extractelement <2 x float> %863, i32 0
  %868 = fsub float %867, %866
  store float %868, float* %28, align 1, !tbaa !2452
  %869 = bitcast <2 x float> %863 to <2 x i32>
  %870 = extractelement <2 x i32> %869, i32 1
  store i32 %870, i32* %252, align 1, !tbaa !2452
  %871 = extractelement <2 x i32> %864, i32 0
  store i32 %871, i32* %254, align 1, !tbaa !2452
  %872 = extractelement <2 x i32> %864, i32 1
  store i32 %872, i32* %256, align 1, !tbaa !2452
  %873 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %874 = zext i32 %873 to i64
  store i64 %874, i64* %RAX, align 8, !tbaa !2428
  %875 = load <2 x i32>, <2 x i32>* %1486, align 1
  %876 = load <2 x i32>, <2 x i32>* %1487, align 1
  %877 = sitofp i32 %873 to float
  store float %877, float* %2571, align 1, !tbaa !2452
  %878 = extractelement <2 x i32> %875, i32 1
  store i32 %878, i32* %2587, align 1, !tbaa !2452
  %879 = extractelement <2 x i32> %876, i32 0
  store i32 %879, i32* %2588, align 1, !tbaa !2452
  %880 = extractelement <2 x i32> %876, i32 1
  store i32 %880, i32* %2589, align 1, !tbaa !2452
  %881 = load <2 x float>, <2 x float>* %60, align 1
  %882 = load <2 x i32>, <2 x i32>* %245, align 1
  %883 = load <2 x float>, <2 x float>* %2577, align 1
  %884 = extractelement <2 x float> %881, i32 0
  %885 = extractelement <2 x float> %883, i32 0
  %886 = fdiv float %884, %885
  store float %886, float* %28, align 1, !tbaa !2452
  %887 = bitcast <2 x float> %881 to <2 x i32>
  %888 = extractelement <2 x i32> %887, i32 1
  store i32 %888, i32* %252, align 1, !tbaa !2452
  %889 = extractelement <2 x i32> %882, i32 0
  store i32 %889, i32* %254, align 1, !tbaa !2452
  %890 = extractelement <2 x i32> %882, i32 1
  store i32 %890, i32* %256, align 1, !tbaa !2452
  %891 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RCX, align 8, !tbaa !2428
  %893 = shl nsw i64 %892, 2
  %894 = add i64 %893, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %895 = add i64 %849, 42
  store i64 %895, i64* %PC, align 8
  %896 = load <2 x float>, <2 x float>* %60, align 1
  %897 = extractelement <2 x float> %896, i32 0
  %898 = inttoptr i64 %894 to float*
  store float %897, float* %898, align 4
  %899 = load i64, i64* %PC, align 8
  %900 = add i64 %899, -3000
  %901 = add i64 %899, 5
  %902 = load i64, i64* %RSP, align 8, !tbaa !2428
  %903 = add i64 %902, -8
  %904 = inttoptr i64 %903 to i64*
  store i64 %901, i64* %904, align 8
  store i64 %903, i64* %RSP, align 8, !tbaa !2428
  store i64 %900, i64* %PC, align 8, !tbaa !2428
  %905 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %900, %struct.Memory* %846)
  %906 = load i64, i64* %RBP, align 8
  %907 = add i64 %906, -40
  %908 = load i64, i64* %PC, align 8
  %909 = add i64 %908, 5
  store i64 %909, i64* %PC, align 8
  %910 = load <2 x float>, <2 x float>* %60, align 1
  %911 = extractelement <2 x float> %910, i32 0
  %912 = inttoptr i64 %907 to float*
  store float %911, float* %912, align 4
  %913 = load i64, i64* %PC, align 8
  %914 = add i64 %913, 11
  store i64 %914, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40118d

block_4011eb:                                     ; preds = %block_40118d
  %915 = add i64 %2873, -3115
  %916 = add i64 %2873, 5
  %917 = load i64, i64* %RSP, align 8, !tbaa !2428
  %918 = add i64 %917, -8
  %919 = inttoptr i64 %918 to i64*
  store i64 %916, i64* %919, align 8
  store i64 %918, i64* %RSP, align 8, !tbaa !2428
  store i64 %915, i64* %PC, align 8, !tbaa !2428
  %920 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %915, %struct.Memory* %MEMORY.16)
  %921 = load i64, i64* %PC, align 8
  %922 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to i64*), align 8
  store i64 %922, i64* %197, align 1, !tbaa !2454
  store double 0.000000e+00, double* %199, align 1, !tbaa !2454
  %923 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to i64*), align 8
  store i64 %923, i64* %2585, align 1, !tbaa !2454
  store double 0.000000e+00, double* %838, align 1, !tbaa !2454
  %924 = load i64, i64* %RBP, align 8
  %925 = add i64 %924, -40
  %926 = add i64 %921, 21
  store i64 %926, i64* %PC, align 8
  %927 = load <2 x float>, <2 x float>* %60, align 1
  %928 = load <2 x i32>, <2 x i32>* %245, align 1
  %929 = inttoptr i64 %925 to float*
  %930 = load float, float* %929, align 4
  %931 = extractelement <2 x float> %927, i32 0
  %932 = fsub float %931, %930
  store float %932, float* %28, align 1, !tbaa !2452
  %933 = bitcast <2 x float> %927 to <2 x i32>
  %934 = extractelement <2 x i32> %933, i32 1
  store i32 %934, i32* %252, align 1, !tbaa !2452
  %935 = extractelement <2 x i32> %928, i32 0
  store i32 %935, i32* %254, align 1, !tbaa !2452
  %936 = extractelement <2 x i32> %928, i32 1
  store i32 %936, i32* %256, align 1, !tbaa !2452
  %937 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %938 = zext i32 %937 to i64
  store i64 %938, i64* %RAX, align 8, !tbaa !2428
  %939 = load <2 x i32>, <2 x i32>* %839, align 1
  %940 = load <2 x i32>, <2 x i32>* %840, align 1
  %941 = sitofp i32 %937 to float
  store float %941, float* %2272, align 1, !tbaa !2452
  %942 = extractelement <2 x i32> %939, i32 1
  store i32 %942, i32* %217, align 1, !tbaa !2452
  %943 = extractelement <2 x i32> %940, i32 0
  store i32 %943, i32* %219, align 1, !tbaa !2452
  %944 = extractelement <2 x i32> %940, i32 1
  store i32 %944, i32* %221, align 1, !tbaa !2452
  %945 = load <2 x float>, <2 x float>* %60, align 1
  %946 = load <2 x i32>, <2 x i32>* %245, align 1
  %947 = load <2 x float>, <2 x float>* %2276, align 1
  %948 = extractelement <2 x float> %945, i32 0
  %949 = extractelement <2 x float> %947, i32 0
  %950 = fdiv float %948, %949
  store float %950, float* %28, align 1, !tbaa !2452
  %951 = bitcast <2 x float> %945 to <2 x i32>
  %952 = extractelement <2 x i32> %951, i32 1
  store i32 %952, i32* %252, align 1, !tbaa !2452
  %953 = extractelement <2 x i32> %946, i32 0
  store i32 %953, i32* %254, align 1, !tbaa !2452
  %954 = extractelement <2 x i32> %946, i32 1
  store i32 %954, i32* %256, align 1, !tbaa !2452
  %955 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %956 = sext i32 %955 to i64
  %957 = shl nsw i64 %956, 2
  %958 = add i64 %957, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %959 = add i64 %921, 53
  store i64 %959, i64* %PC, align 8
  %960 = load <2 x float>, <2 x float>* %60, align 1
  %961 = extractelement <2 x float> %960, i32 0
  %962 = inttoptr i64 %958 to float*
  store float %961, float* %962, align 4
  %963 = load i64, i64* %PC, align 8
  %964 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %965 = sext i32 %964 to i64
  store i64 %965, i64* %RCX, align 8, !tbaa !2428
  %966 = shl nsw i64 %965, 2
  %967 = add i64 %966, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %968 = add i64 %963, 17
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %967 to i32*
  %970 = load i32, i32* %969, align 4
  store i32 %970, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  store i64 %965, i64* %RCX, align 8, !tbaa !2428
  %971 = add i64 %966, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %972 = add i64 %963, 34
  store i64 %972, i64* %PC, align 8
  %973 = load <2 x float>, <2 x float>* %60, align 1
  %974 = load <2 x i32>, <2 x i32>* %245, align 1
  %975 = inttoptr i64 %971 to float*
  %976 = load float, float* %975, align 4
  %977 = extractelement <2 x float> %973, i32 0
  %978 = fadd float %977, %976
  store float %978, float* %28, align 1, !tbaa !2452
  %979 = bitcast <2 x float> %973 to <2 x i32>
  %980 = extractelement <2 x i32> %979, i32 1
  store i32 %980, i32* %252, align 1, !tbaa !2452
  %981 = extractelement <2 x i32> %974, i32 0
  store i32 %981, i32* %254, align 1, !tbaa !2452
  %982 = extractelement <2 x i32> %974, i32 1
  store i32 %982, i32* %256, align 1, !tbaa !2452
  %983 = load i64, i64* %RBP, align 8
  %984 = add i64 %983, -16
  %985 = add i64 %963, 39
  store i64 %985, i64* %PC, align 8
  %986 = load <2 x float>, <2 x float>* %60, align 1
  %987 = extractelement <2 x float> %986, i32 0
  %988 = inttoptr i64 %984 to float*
  store float %987, float* %988, align 4
  %989 = load i64, i64* %RBP, align 8
  %990 = add i64 %989, -16
  %991 = load i64, i64* %PC, align 8
  %992 = add i64 %991, 5
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %990 to i32*
  %994 = load i32, i32* %993, align 4
  store i32 %994, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %995 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %996 = sext i32 %995 to i64
  store i64 %996, i64* %RCX, align 8, !tbaa !2428
  %997 = shl nsw i64 %996, 2
  %998 = add i64 %997, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %999 = add i64 %991, 22
  store i64 %999, i64* %PC, align 8
  %1000 = load <2 x float>, <2 x float>* %60, align 1
  %1001 = extractelement <2 x float> %1000, i32 0
  %1002 = inttoptr i64 %998 to float*
  store float %1001, float* %1002, align 4
  %1003 = load i64, i64* %RBP, align 8
  %1004 = add i64 %1003, -12
  %1005 = load i64, i64* %PC, align 8
  %1006 = add i64 %1005, 5
  store i64 %1006, i64* %PC, align 8
  %1007 = inttoptr i64 %1004 to i32*
  %1008 = load i32, i32* %1007, align 4
  store i32 %1008, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1009 = load <2 x float>, <2 x float>* %60, align 1
  %1010 = extractelement <2 x float> %1009, i32 0
  %1011 = fpext float %1010 to double
  store double %1011, double* %192, align 1, !tbaa !2454
  %1012 = add i64 %1003, -16
  %1013 = add i64 %1005, 14
  store i64 %1013, i64* %PC, align 8
  %1014 = inttoptr i64 %1012 to i32*
  %1015 = load i32, i32* %1014, align 4
  store i32 %1015, i32* %214, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2273, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2274, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2275, align 1, !tbaa !2452
  %1016 = load <2 x float>, <2 x float>* %2276, align 1
  %1017 = extractelement <2 x float> %1016, i32 0
  %1018 = fpext float %1017 to double
  store double %1018, double* %222, align 1, !tbaa !2454
  %1019 = load double, double* %210, align 1
  %1020 = fmul double %1019, %1018
  store double %1020, double* %210, align 1, !tbaa !2454
  %1021 = load <2 x i32>, <2 x i32>* %245, align 1
  %1022 = fdiv double %1011, %1020
  %1023 = bitcast double %1022 to <2 x i32>
  %1024 = fptrunc double %1022 to float
  store float %1024, float* %28, align 1, !tbaa !2452
  %1025 = extractelement <2 x i32> %1023, i32 1
  store i32 %1025, i32* %252, align 1, !tbaa !2452
  %1026 = extractelement <2 x i32> %1021, i32 0
  store i32 %1026, i32* %254, align 1, !tbaa !2452
  %1027 = extractelement <2 x i32> %1021, i32 1
  store i32 %1027, i32* %256, align 1, !tbaa !2452
  %1028 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1029 = sext i32 %1028 to i64
  %1030 = shl nsw i64 %1029, 2
  %1031 = add i64 %1030, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1032 = add i64 %1005, 47
  store i64 %1032, i64* %PC, align 8
  %1033 = load <2 x float>, <2 x float>* %60, align 1
  %1034 = extractelement <2 x float> %1033, i32 0
  %1035 = inttoptr i64 %1031 to float*
  store float %1034, float* %1035, align 4
  %1036 = load i64, i64* %PC, align 8
  %1037 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1038 = sext i32 %1037 to i64
  store i64 %1038, i64* %RCX, align 8, !tbaa !2428
  %1039 = shl nsw i64 %1038, 2
  %1040 = add i64 %1039, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1041 = add i64 %1036, 17
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i32*
  %1043 = load i32, i32* %1042, align 4
  store i32 %1043, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1044 = load <2 x float>, <2 x float>* %60, align 1
  %1045 = extractelement <2 x float> %1044, i32 0
  %1046 = fpext float %1045 to double
  %1047 = load double, double* %196, align 1
  %1048 = fdiv double %1047, %1046
  store double %1048, double* %196, align 1, !tbaa !2454
  %1049 = bitcast double %1046 to <2 x i32>
  %1050 = load <2 x i32>, <2 x i32>* %245, align 1
  %1051 = fptrunc double %1048 to float
  store float %1051, float* %28, align 1, !tbaa !2452
  %1052 = extractelement <2 x i32> %1049, i32 1
  store i32 %1052, i32* %252, align 1, !tbaa !2452
  %1053 = extractelement <2 x i32> %1050, i32 0
  store i32 %1053, i32* %254, align 1, !tbaa !2452
  %1054 = extractelement <2 x i32> %1050, i32 1
  store i32 %1054, i32* %256, align 1, !tbaa !2452
  store i64 %1038, i64* %RCX, align 8, !tbaa !2428
  %1055 = add i64 %1039, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1056 = add i64 %1036, 46
  store i64 %1056, i64* %PC, align 8
  %1057 = load <2 x float>, <2 x float>* %60, align 1
  %1058 = extractelement <2 x float> %1057, i32 0
  %1059 = inttoptr i64 %1055 to float*
  store float %1058, float* %1059, align 4
  %1060 = load i64, i64* %RBP, align 8
  %1061 = add i64 %1060, -16
  %1062 = load i64, i64* %PC, align 8
  %1063 = add i64 %1062, 5
  store i64 %1063, i64* %PC, align 8
  %1064 = inttoptr i64 %1061 to i32*
  %1065 = load i32, i32* %1064, align 4
  store i32 %1065, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1066 = add i64 %1060, -8
  %1067 = add i64 %1062, 10
  store i64 %1067, i64* %PC, align 8
  %1068 = load <2 x float>, <2 x float>* %60, align 1
  %1069 = inttoptr i64 %1066 to float*
  %1070 = load float, float* %1069, align 4
  %1071 = extractelement <2 x float> %1068, i32 0
  %1072 = fdiv float %1071, %1070
  store float %1072, float* %28, align 1, !tbaa !2452
  %1073 = bitcast <2 x float> %1068 to <2 x i32>
  %1074 = extractelement <2 x i32> %1073, i32 1
  store i32 %1074, i32* %252, align 1, !tbaa !2452
  %1075 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1076 = sext i32 %1075 to i64
  %1077 = shl nsw i64 %1076, 2
  %1078 = add i64 %1077, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1079 = add i64 %1062, 27
  store i64 %1079, i64* %PC, align 8
  %1080 = load <2 x float>, <2 x float>* %60, align 1
  %1081 = extractelement <2 x float> %1080, i32 0
  %1082 = inttoptr i64 %1078 to float*
  store float %1081, float* %1082, align 4
  %1083 = load i64, i64* %PC, align 8
  %1084 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  store i32 %1084, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1085 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1086 = sext i32 %1085 to i64
  store i64 %1086, i64* %RCX, align 8, !tbaa !2428
  %1087 = shl nsw i64 %1086, 2
  %1088 = add i64 %1087, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1089 = add i64 %1083, 26
  store i64 %1089, i64* %PC, align 8
  %1090 = load <2 x float>, <2 x float>* %60, align 1
  %1091 = load <2 x i32>, <2 x i32>* %245, align 1
  %1092 = inttoptr i64 %1088 to float*
  %1093 = load float, float* %1092, align 4
  %1094 = extractelement <2 x float> %1090, i32 0
  %1095 = fadd float %1094, %1093
  store float %1095, float* %28, align 1, !tbaa !2452
  %1096 = bitcast <2 x float> %1090 to <2 x i32>
  %1097 = extractelement <2 x i32> %1096, i32 1
  store i32 %1097, i32* %252, align 1, !tbaa !2452
  %1098 = extractelement <2 x i32> %1091, i32 0
  store i32 %1098, i32* %254, align 1, !tbaa !2452
  %1099 = extractelement <2 x i32> %1091, i32 1
  store i32 %1099, i32* %256, align 1, !tbaa !2452
  %1100 = load <2 x float>, <2 x float>* %60, align 1
  %1101 = extractelement <2 x float> %1100, i32 0
  store float %1101, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %1102 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1103 = zext i32 %1102 to i64
  store i64 %1103, i64* %RDI, align 8, !tbaa !2428
  %1104 = add i64 %1083, 5622
  %1105 = add i64 %1083, 47
  %1106 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1107 = add i64 %1106, -8
  %1108 = inttoptr i64 %1107 to i64*
  store i64 %1105, i64* %1108, align 8
  store i64 %1107, i64* %RSP, align 8, !tbaa !2428
  store i64 %1104, i64* %PC, align 8, !tbaa !2428
  %1109 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1104, %struct.Memory* %920)
  %1110 = load i64, i64* %PC, align 8
  %1111 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1112 = add i32 %1111, 1
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RAX, align 8, !tbaa !2428
  %1114 = icmp eq i32 %1111, -1
  %1115 = icmp eq i32 %1112, 0
  %1116 = or i1 %1114, %1115
  %1117 = zext i1 %1116 to i8
  store i8 %1117, i8* %20, align 1, !tbaa !2432
  %1118 = and i32 %1112, 255
  %1119 = tail call i32 @llvm.ctpop.i32(i32 %1118) #8
  %1120 = trunc i32 %1119 to i8
  %1121 = and i8 %1120, 1
  %1122 = xor i8 %1121, 1
  store i8 %1122, i8* %21, align 1, !tbaa !2446
  %1123 = xor i32 %1111, %1112
  %1124 = lshr i32 %1123, 4
  %1125 = trunc i32 %1124 to i8
  %1126 = and i8 %1125, 1
  store i8 %1126, i8* %22, align 1, !tbaa !2450
  %1127 = zext i1 %1115 to i8
  store i8 %1127, i8* %23, align 1, !tbaa !2447
  %1128 = lshr i32 %1112, 31
  %1129 = trunc i32 %1128 to i8
  store i8 %1129, i8* %24, align 1, !tbaa !2448
  %1130 = lshr i32 %1111, 31
  %1131 = xor i32 %1128, %1130
  %1132 = add nuw nsw i32 %1131, %1128
  %1133 = icmp eq i32 %1132, 2
  %1134 = zext i1 %1133 to i8
  store i8 %1134, i8* %25, align 1, !tbaa !2449
  store i32 %1112, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1135 = add i64 %1110, -617
  store i64 %1135, i64* %PC, align 8, !tbaa !2428
  br label %block_4010a0

block_400ac6:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1136 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1137 = sext i32 %1136 to i64
  store i64 %1137, i64* %RAX, align 8, !tbaa !2428
  %1138 = shl nsw i64 %1137, 2
  %1139 = add i64 %1138, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %1140 = add i64 %3074, 17
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1139 to i32*
  %1142 = load i32, i32* %1141, align 4
  store i32 %1142, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1143 = load <2 x float>, <2 x float>* %60, align 1
  %1144 = extractelement <2 x float> %1143, i32 0
  %1145 = fpext float %1144 to double
  %1146 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %1147 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %1148 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %1149 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %1146, i32* %2586, align 1, !tbaa !2452
  store i32 %1147, i32* %2587, align 1, !tbaa !2452
  store i32 %1148, i32* %2588, align 1, !tbaa !2452
  store i32 %1149, i32* %2589, align 1, !tbaa !2452
  %1150 = bitcast double %1145 to i64
  %1151 = load i64, i64* %32, align 1
  %1152 = load i64, i64* %197, align 1
  %1153 = load i64, i64* %198, align 1
  %1154 = and i64 %1152, %1150
  %1155 = and i64 %1153, %1151
  %1156 = trunc i64 %1154 to i32
  %1157 = lshr i64 %1154, 32
  %1158 = trunc i64 %1157 to i32
  store i32 %1156, i32* %29, align 1, !tbaa !2451
  store i32 %1158, i32* %252, align 1, !tbaa !2451
  %1159 = trunc i64 %1155 to i32
  store i32 %1159, i32* %254, align 1, !tbaa !2451
  %1160 = lshr i64 %1155, 32
  %1161 = trunc i64 %1160 to i32
  store i32 %1161, i32* %256, align 1, !tbaa !2451
  %1162 = load i64, i64* %RBP, align 8
  %1163 = add i64 %1162, -904
  %1164 = add i64 %3074, 40
  store i64 %1164, i64* %PC, align 8
  %1165 = load i64, i64* %3101, align 1
  %1166 = inttoptr i64 %1163 to i64*
  store i64 %1165, i64* %1166, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %block_400aee

block_4013ec:                                     ; preds = %block_40139b
  %1167 = add i64 %2908, -3628
  %1168 = add i64 %2908, 5
  %1169 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1170 = add i64 %1169, -8
  %1171 = inttoptr i64 %1170 to i64*
  store i64 %1168, i64* %1171, align 8
  store i64 %1170, i64* %RSP, align 8, !tbaa !2428
  store i64 %1167, i64* %PC, align 8, !tbaa !2428
  %1172 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1167, %struct.Memory* %MEMORY.17)
  %1173 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %2586, align 1, !tbaa !2451
  store i32 0, i32* %2587, align 1, !tbaa !2451
  store i32 0, i32* %2588, align 1, !tbaa !2451
  store i32 0, i32* %2589, align 1, !tbaa !2451
  %1174 = load i64, i64* %RBP, align 8
  %1175 = add i64 %1174, -84
  %1176 = add i64 %1173, 18
  store i64 %1176, i64* %PC, align 8
  %1177 = load <2 x float>, <2 x float>* %60, align 1
  %1178 = extractelement <2 x float> %1177, i32 0
  %1179 = inttoptr i64 %1175 to float*
  store float %1178, float* %1179, align 4
  %1180 = load i64, i64* %RBP, align 8
  %1181 = add i64 %1180, -84
  %1182 = load i64, i64* %PC, align 8
  %1183 = add i64 %1182, 5
  store i64 %1183, i64* %PC, align 8
  %1184 = inttoptr i64 %1181 to i32*
  %1185 = load i32, i32* %1184, align 4
  store i32 %1185, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1186 = add i64 %1180, -80
  %1187 = add i64 %1182, 10
  store i64 %1187, i64* %PC, align 8
  %1188 = load <2 x float>, <2 x float>* %60, align 1
  %1189 = load <2 x i32>, <2 x i32>* %245, align 1
  %1190 = inttoptr i64 %1186 to float*
  %1191 = load float, float* %1190, align 4
  %1192 = extractelement <2 x float> %1188, i32 0
  %1193 = fsub float %1192, %1191
  store float %1193, float* %28, align 1, !tbaa !2452
  %1194 = bitcast <2 x float> %1188 to <2 x i32>
  %1195 = extractelement <2 x i32> %1194, i32 1
  store i32 %1195, i32* %252, align 1, !tbaa !2452
  %1196 = extractelement <2 x i32> %1189, i32 0
  store i32 %1196, i32* %254, align 1, !tbaa !2452
  %1197 = extractelement <2 x i32> %1189, i32 1
  store i32 %1197, i32* %256, align 1, !tbaa !2452
  %1198 = add i64 %1180, -76
  %1199 = add i64 %1182, 15
  store i64 %1199, i64* %PC, align 8
  %1200 = load <2 x float>, <2 x float>* %60, align 1
  %1201 = extractelement <2 x float> %1200, i32 0
  %1202 = inttoptr i64 %1198 to float*
  store float %1201, float* %1202, align 4
  %1203 = load i64, i64* %RBP, align 8
  %1204 = add i64 %1203, -76
  %1205 = load i64, i64* %PC, align 8
  %1206 = add i64 %1205, 5
  store i64 %1206, i64* %PC, align 8
  %1207 = inttoptr i64 %1204 to float*
  %1208 = inttoptr i64 %1204 to i32*
  %1209 = load i32, i32* %1208, align 4
  store i32 %1209, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1210 = load <2 x float>, <2 x float>* %60, align 1
  %1211 = extractelement <2 x float> %1210, i32 0
  %1212 = fpext float %1211 to double
  store double %1212, double* %192, align 1, !tbaa !2454
  %1213 = add i64 %1203, -68
  %1214 = add i64 %1205, 12
  store i64 %1214, i64* %PC, align 8
  %1215 = inttoptr i64 %1213 to i32*
  %1216 = load i32, i32* %1215, align 4
  %1217 = zext i32 %1216 to i64
  store i64 %1217, i64* %RAX, align 8, !tbaa !2428
  %1218 = sitofp i32 %1216 to double
  store double %1218, double* %210, align 1, !tbaa !2454
  %1219 = fdiv double %1212, %1218
  %1220 = bitcast double %1219 to <2 x i32>
  %1221 = fptrunc double %1219 to float
  store float %1221, float* %28, align 1, !tbaa !2452
  %1222 = extractelement <2 x i32> %1220, i32 1
  store i32 %1222, i32* %252, align 1, !tbaa !2452
  %1223 = add i64 %1205, 29
  store i64 %1223, i64* %PC, align 8
  %1224 = load <2 x float>, <2 x float>* %60, align 1
  %1225 = extractelement <2 x float> %1224, i32 0
  store float %1225, float* %1207, align 4
  %1226 = load i64, i64* %PC, align 8
  %1227 = load i64, i64* @stderr, align 64
  store i64 %1227, i64* %RDI, align 8, !tbaa !2428
  %1228 = load <2 x i32>, <2 x i32>* %1486, align 1
  %1229 = load <2 x i32>, <2 x i32>* %1487, align 1
  %1230 = extractelement <2 x i32> %1228, i32 0
  store i32 %1230, i32* %29, align 1, !tbaa !2452
  %1231 = extractelement <2 x i32> %1228, i32 1
  store i32 %1231, i32* %252, align 1, !tbaa !2452
  %1232 = extractelement <2 x i32> %1229, i32 0
  store i32 %1232, i32* %254, align 1, !tbaa !2452
  %1233 = extractelement <2 x i32> %1229, i32 1
  store i32 %1233, i32* %256, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1234 = add i64 %1226, -3951
  %1235 = add i64 %1226, 18
  %1236 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1237 = add i64 %1236, -8
  %1238 = inttoptr i64 %1237 to i64*
  store i64 %1235, i64* %1238, align 8
  store i64 %1237, i64* %RSP, align 8, !tbaa !2428
  store i64 %1234, i64* %PC, align 8, !tbaa !2428
  %1239 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1172)
  %1240 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1241 = load i64, i64* @stderr, align 64
  store i64 %1241, i64* %RDI, align 8, !tbaa !2428
  %1242 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1243 = zext i32 %1242 to i64
  store i64 %1243, i64* %RDX, align 8, !tbaa !2428
  %1244 = load i64, i64* %RBP, align 8
  %1245 = add i64 %1244, -980
  %1246 = load i32, i32* %EAX, align 4
  %1247 = add i64 %1240, 31
  store i64 %1247, i64* %PC, align 8
  %1248 = inttoptr i64 %1245 to i32*
  store i32 %1246, i32* %1248, align 4
  %1249 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1250 = add i64 %1249, -4000
  %1251 = add i64 %1249, 7
  %1252 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1253 = add i64 %1252, -8
  %1254 = inttoptr i64 %1253 to i64*
  store i64 %1251, i64* %1254, align 8
  store i64 %1253, i64* %RSP, align 8, !tbaa !2428
  store i64 %1250, i64* %PC, align 8, !tbaa !2428
  %1255 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1239)
  %1256 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1257 = load i64, i64* @stderr, align 64
  store i64 %1257, i64* %RDI, align 8, !tbaa !2428
  %1258 = load i64, i64* %RBP, align 8
  %1259 = add i64 %1258, -984
  %1260 = load i32, i32* %EAX, align 4
  %1261 = add i64 %1256, 24
  store i64 %1261, i64* %PC, align 8
  %1262 = inttoptr i64 %1259 to i32*
  store i32 %1260, i32* %1262, align 4
  %1263 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1264 = add i64 %1263, -4031
  %1265 = add i64 %1263, 7
  %1266 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1267 = add i64 %1266, -8
  %1268 = inttoptr i64 %1267 to i64*
  store i64 %1265, i64* %1268, align 8
  store i64 %1267, i64* %RSP, align 8, !tbaa !2428
  store i64 %1264, i64* %PC, align 8, !tbaa !2428
  %1269 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1255)
  %1270 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1271 = load i64, i64* @stderr, align 64
  store i64 %1271, i64* %RDI, align 8, !tbaa !2428
  %1272 = load i64, i64* %RBP, align 8
  %1273 = add i64 %1272, -988
  %1274 = load i32, i32* %EAX, align 4
  %1275 = add i64 %1270, 24
  store i64 %1275, i64* %PC, align 8
  %1276 = inttoptr i64 %1273 to i32*
  store i32 %1274, i32* %1276, align 4
  %1277 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1278 = add i64 %1277, -4062
  %1279 = add i64 %1277, 7
  %1280 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1281 = add i64 %1280, -8
  %1282 = inttoptr i64 %1281 to i64*
  store i64 %1279, i64* %1282, align 8
  store i64 %1281, i64* %RSP, align 8, !tbaa !2428
  store i64 %1278, i64* %PC, align 8, !tbaa !2428
  %1283 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1269)
  %1284 = load i64, i64* %PC, align 8
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %1285 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1286 = zext i32 %1285 to i64
  store i64 %1286, i64* %RDX, align 8, !tbaa !2428
  %1287 = load <2 x i32>, <2 x i32>* %1486, align 1
  %1288 = load <2 x i32>, <2 x i32>* %1487, align 1
  %1289 = sitofp i32 %1285 to float
  store float %1289, float* %2571, align 1, !tbaa !2452
  %1290 = extractelement <2 x i32> %1287, i32 1
  store i32 %1290, i32* %2587, align 1, !tbaa !2452
  %1291 = extractelement <2 x i32> %1288, i32 0
  store i32 %1291, i32* %2588, align 1, !tbaa !2452
  %1292 = extractelement <2 x i32> %1288, i32 1
  store i32 %1292, i32* %2589, align 1, !tbaa !2452
  %1293 = load i64, i64* %RBP, align 8
  %1294 = add i64 %1293, -76
  %1295 = add i64 %1284, 19
  store i64 %1295, i64* %PC, align 8
  %1296 = load <2 x float>, <2 x float>* %2577, align 1
  %1297 = load <2 x i32>, <2 x i32>* %1487, align 1
  %1298 = inttoptr i64 %1294 to float*
  %1299 = load float, float* %1298, align 4
  %1300 = extractelement <2 x float> %1296, i32 0
  %1301 = fmul float %1300, %1299
  store float %1301, float* %2571, align 1, !tbaa !2452
  %1302 = bitcast <2 x float> %1296 to <2 x i32>
  %1303 = extractelement <2 x i32> %1302, i32 1
  store i32 %1303, i32* %2587, align 1, !tbaa !2452
  %1304 = extractelement <2 x i32> %1297, i32 0
  store i32 %1304, i32* %2588, align 1, !tbaa !2452
  %1305 = extractelement <2 x i32> %1297, i32 1
  store i32 %1305, i32* %2589, align 1, !tbaa !2452
  %1306 = add i64 %1293, -44
  %1307 = add i64 %1284, 24
  store i64 %1307, i64* %PC, align 8
  %1308 = load <2 x float>, <2 x float>* %2577, align 1
  %1309 = extractelement <2 x float> %1308, i32 0
  %1310 = inttoptr i64 %1306 to float*
  store float %1309, float* %1310, align 4
  %1311 = load i64, i64* %PC, align 8
  %1312 = load <2 x float>, <2 x float>* %60, align 1
  %1313 = extractelement <2 x float> %1312, i32 0
  store float %1313, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1314 = load i64, i64* %RBP, align 8
  %1315 = add i64 %1314, -992
  %1316 = load i32, i32* %EAX, align 4
  %1317 = add i64 %1311, 26
  store i64 %1317, i64* %PC, align 8
  %1318 = inttoptr i64 %1315 to i32*
  store i32 %1316, i32* %1318, align 4
  %.pre26 = load i64, i64* %PC, align 8
  %.pre27 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  br label %block_4014d7

block_4015c4:                                     ; preds = %block_401580, %block_4015d8
  %1319 = phi i32 [ 0, %block_401580 ], [ %561, %block_4015d8 ]
  %1320 = phi i64 [ %3214, %block_401580 ], [ %584, %block_4015d8 ]
  %MEMORY.2 = phi %struct.Memory* [ %3205, %block_401580 ], [ %558, %block_4015d8 ]
  %1321 = zext i32 %1319 to i64
  store i64 %1321, i64* %RAX, align 8, !tbaa !2428
  %1322 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1323 = sub i32 %1319, %1322
  %1324 = icmp ult i32 %1319, %1322
  %1325 = zext i1 %1324 to i8
  store i8 %1325, i8* %20, align 1, !tbaa !2432
  %1326 = and i32 %1323, 255
  %1327 = tail call i32 @llvm.ctpop.i32(i32 %1326) #8
  %1328 = trunc i32 %1327 to i8
  %1329 = and i8 %1328, 1
  %1330 = xor i8 %1329, 1
  store i8 %1330, i8* %21, align 1, !tbaa !2446
  %1331 = xor i32 %1322, %1319
  %1332 = xor i32 %1331, %1323
  %1333 = lshr i32 %1332, 4
  %1334 = trunc i32 %1333 to i8
  %1335 = and i8 %1334, 1
  store i8 %1335, i8* %22, align 1, !tbaa !2450
  %1336 = icmp eq i32 %1323, 0
  %1337 = zext i1 %1336 to i8
  store i8 %1337, i8* %23, align 1, !tbaa !2447
  %1338 = lshr i32 %1323, 31
  %1339 = trunc i32 %1338 to i8
  store i8 %1339, i8* %24, align 1, !tbaa !2448
  %1340 = lshr i32 %1319, 31
  %1341 = lshr i32 %1322, 31
  %1342 = xor i32 %1341, %1340
  %1343 = xor i32 %1338, %1340
  %1344 = add nuw nsw i32 %1343, %1342
  %1345 = icmp eq i32 %1344, 2
  %1346 = zext i1 %1345 to i8
  store i8 %1346, i8* %25, align 1, !tbaa !2449
  %1347 = icmp ne i8 %1339, 0
  %1348 = xor i1 %1347, %1345
  %.v46 = select i1 %1348, i64 20, i64 94
  %1349 = add i64 %1320, %.v46
  store i64 %1349, i64* %PC, align 8, !tbaa !2428
  br i1 %1348, label %block_4015d8, label %block_401622

block_400fbc:                                     ; preds = %block_400f66, %block_400fab
  %1350 = phi i64 [ %1519, %block_400fab ], [ %533, %block_400f66 ]
  %1351 = load i64, i64* %RBP, align 8
  %1352 = add i64 %1351, -64
  %1353 = add i64 %1350, 9
  store i64 %1353, i64* %PC, align 8
  %1354 = inttoptr i64 %1352 to i32*
  %1355 = load i32, i32* %1354, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %1356 = and i32 %1355, 255
  %1357 = tail call i32 @llvm.ctpop.i32(i32 %1356) #8
  %1358 = trunc i32 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = xor i8 %1359, 1
  store i8 %1360, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1361 = icmp eq i32 %1355, 0
  %1362 = zext i1 %1361 to i8
  store i8 %1362, i8* %23, align 1, !tbaa !2447
  %1363 = lshr i32 %1355, 31
  %1364 = trunc i32 %1363 to i8
  store i8 %1364, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  %1365 = icmp ne i8 %1364, 0
  %.v39 = select i1 %1365, i64 -250, i64 15
  %1366 = add i64 %1350, %.v39
  store i64 %1366, i64* %PC, align 8, !tbaa !2428
  br i1 %1365, label %block_400ec2, label %block_400fcb

block_4010c3:                                     ; preds = %block_4010d7, %block_4010ae
  %1367 = phi i32 [ 0, %block_4010ae ], [ %2934, %block_4010d7 ]
  %1368 = phi i64 [ %1435, %block_4010ae ], [ %2957, %block_4010d7 ]
  %MEMORY.4 = phi %struct.Memory* [ %1426, %block_4010ae ], [ %2931, %block_4010d7 ]
  %1369 = zext i32 %1367 to i64
  store i64 %1369, i64* %RAX, align 8, !tbaa !2428
  %1370 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1371 = sub i32 %1367, %1370
  %1372 = icmp ult i32 %1367, %1370
  %1373 = zext i1 %1372 to i8
  store i8 %1373, i8* %20, align 1, !tbaa !2432
  %1374 = and i32 %1371, 255
  %1375 = tail call i32 @llvm.ctpop.i32(i32 %1374) #8
  %1376 = trunc i32 %1375 to i8
  %1377 = and i8 %1376, 1
  %1378 = xor i8 %1377, 1
  store i8 %1378, i8* %21, align 1, !tbaa !2446
  %1379 = xor i32 %1370, %1367
  %1380 = xor i32 %1379, %1371
  %1381 = lshr i32 %1380, 4
  %1382 = trunc i32 %1381 to i8
  %1383 = and i8 %1382, 1
  store i8 %1383, i8* %22, align 1, !tbaa !2450
  %1384 = icmp eq i32 %1371, 0
  %1385 = zext i1 %1384 to i8
  store i8 %1385, i8* %23, align 1, !tbaa !2447
  %1386 = lshr i32 %1371, 31
  %1387 = trunc i32 %1386 to i8
  store i8 %1387, i8* %24, align 1, !tbaa !2448
  %1388 = lshr i32 %1367, 31
  %1389 = lshr i32 %1370, 31
  %1390 = xor i32 %1389, %1388
  %1391 = xor i32 %1386, %1388
  %1392 = add nuw nsw i32 %1391, %1390
  %1393 = icmp eq i32 %1392, 2
  %1394 = zext i1 %1393 to i8
  store i8 %1394, i8* %25, align 1, !tbaa !2449
  %1395 = icmp ne i8 %1387, 0
  %1396 = xor i1 %1395, %1393
  %.v41 = select i1 %1396, i64 20, i64 134
  %1397 = add i64 %1368, %.v41
  store i64 %1397, i64* %PC, align 8, !tbaa !2428
  br i1 %1396, label %block_4010d7, label %block_401149

block_400e3a:                                     ; preds = %block_400def
  %1398 = load i64, i64* %RBP, align 8
  %1399 = add i64 %1398, -68
  %1400 = add i64 %469, 3
  store i64 %1400, i64* %PC, align 8
  %1401 = inttoptr i64 %1399 to i32*
  %1402 = load i32, i32* %1401, align 4
  %1403 = shl i32 %1402, 1
  %1404 = icmp slt i32 %1402, 0
  %1405 = icmp slt i32 %1403, 0
  %1406 = xor i1 %1404, %1405
  %1407 = zext i32 %1403 to i64
  store i64 %1407, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %1402, 31
  %1408 = trunc i32 %.lobit to i8
  store i8 %1408, i8* %20, align 1, !tbaa !2456
  %1409 = and i32 %1403, 254
  %1410 = tail call i32 @llvm.ctpop.i32(i32 %1409) #8
  %1411 = trunc i32 %1410 to i8
  %1412 = and i8 %1411, 1
  %1413 = xor i8 %1412, 1
  store i8 %1413, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  %1414 = icmp eq i32 %1403, 0
  %1415 = zext i1 %1414 to i8
  store i8 %1415, i8* %23, align 1, !tbaa !2456
  %1416 = lshr i32 %1402, 30
  %1417 = trunc i32 %1416 to i8
  %1418 = and i8 %1417, 1
  store i8 %1418, i8* %24, align 1, !tbaa !2456
  %1419 = zext i1 %1406 to i8
  store i8 %1419, i8* %25, align 1, !tbaa !2456
  %1420 = add i64 %469, 9
  store i64 %1420, i64* %PC, align 8
  store i32 %1403, i32* %1401, align 4
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_400e43

block_4010ae:                                     ; preds = %block_4010a0
  %1421 = add i64 %1973, -2798
  %1422 = add i64 %1973, 5
  %1423 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1424 = add i64 %1423, -8
  %1425 = inttoptr i64 %1424 to i64*
  store i64 %1422, i64* %1425, align 8
  store i64 %1424, i64* %RSP, align 8, !tbaa !2428
  store i64 %1421, i64* %PC, align 8, !tbaa !2428
  %1426 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1421, %struct.Memory* %MEMORY.9)
  %1427 = load i64, i64* %RBP, align 8
  %1428 = add i64 %1427, -40
  %1429 = load i64, i64* %PC, align 8
  %1430 = add i64 %1429, 5
  store i64 %1430, i64* %PC, align 8
  %1431 = load <2 x float>, <2 x float>* %60, align 1
  %1432 = extractelement <2 x float> %1431, i32 0
  %1433 = inttoptr i64 %1428 to float*
  store float %1432, float* %1433, align 4
  %1434 = load i64, i64* %PC, align 8
  %1435 = add i64 %1434, 11
  store i64 %1435, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4010c3

block_400d39:                                     ; preds = %block_400cca, %block_400d24
  %1436 = phi i64 [ %1823, %block_400cca ], [ %.pre19, %block_400d24 ]
  %1437 = phi i64 [ %1854, %block_400cca ], [ %1553, %block_400d24 ]
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1438 = add i64 %1436, -16
  %1439 = add i64 %1437, 7
  store i64 %1439, i64* %PC, align 8
  %1440 = inttoptr i64 %1438 to i32*
  %1441 = load i32, i32* %1440, align 4
  store i32 %1441, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1442 = add i64 %1436, -8
  %1443 = add i64 %1437, 12
  store i64 %1443, i64* %PC, align 8
  %1444 = load <2 x float>, <2 x float>* %60, align 1
  %1445 = load <2 x i32>, <2 x i32>* %245, align 1
  %1446 = inttoptr i64 %1442 to float*
  %1447 = load float, float* %1446, align 4
  %1448 = extractelement <2 x float> %1444, i32 0
  %1449 = fdiv float %1448, %1447
  store float %1449, float* %28, align 1, !tbaa !2452
  %1450 = bitcast <2 x float> %1444 to <2 x i32>
  %1451 = extractelement <2 x i32> %1450, i32 1
  store i32 %1451, i32* %252, align 1, !tbaa !2452
  %1452 = extractelement <2 x i32> %1445, i32 0
  store i32 %1452, i32* %254, align 1, !tbaa !2452
  %1453 = extractelement <2 x i32> %1445, i32 1
  store i32 %1453, i32* %256, align 1, !tbaa !2452
  %1454 = load <2 x float>, <2 x float>* %60, align 1
  %1455 = extractelement <2 x float> %1454, i32 0
  store float %1455, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*), align 4
  %1456 = add i64 %1437, 7063
  %1457 = add i64 %1437, 26
  %1458 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1459 = add i64 %1458, -8
  %1460 = inttoptr i64 %1459 to i64*
  store i64 %1457, i64* %1460, align 8
  store i64 %1459, i64* %RSP, align 8, !tbaa !2428
  store i64 %1456, i64* %PC, align 8, !tbaa !2428
  %1461 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1456, %struct.Memory* %2407)
  %1462 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %1463 = load i64, i64* @stderr, align 64
  store i64 %1463, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1464 = add i64 %1462, -2195
  %1465 = add i64 %1462, 25
  %1466 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1467 = add i64 %1466, -8
  %1468 = inttoptr i64 %1467 to i64*
  store i64 %1465, i64* %1468, align 8
  store i64 %1467, i64* %RSP, align 8, !tbaa !2428
  store i64 %1464, i64* %PC, align 8, !tbaa !2428
  %1469 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1461)
  %1470 = load i64, i64* %RBP, align 8
  %1471 = add i64 %1470, -64
  %1472 = load i64, i64* %PC, align 8
  %1473 = add i64 %1472, 7
  store i64 %1473, i64* %PC, align 8
  %1474 = inttoptr i64 %1471 to i32*
  store i32 -3, i32* %1474, align 4
  %1475 = load i64, i64* %RBP, align 8
  %1476 = add i64 %1475, -68
  %1477 = load i64, i64* %PC, align 8
  %1478 = add i64 %1477, 7
  store i64 %1478, i64* %PC, align 8
  %1479 = inttoptr i64 %1476 to i32*
  store i32 100, i32* %1479, align 4
  %1480 = load i64, i64* %RBP, align 8
  %1481 = add i64 %1480, -936
  %1482 = load i32, i32* %EAX, align 4
  %1483 = load i64, i64* %PC, align 8
  %1484 = add i64 %1483, 6
  store i64 %1484, i64* %PC, align 8
  %1485 = inttoptr i64 %1481 to i32*
  store i32 %1482, i32* %1485, align 4
  %1486 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %1487 = bitcast i64* %198 to <2 x i32>*
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_400d80

block_400ab0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1488 = load i64, i64* %RBP, align 8
  %1489 = add i64 %1488, -24
  %1490 = add i64 %3074, 5
  store i64 %1490, i64* %PC, align 8
  %1491 = inttoptr i64 %1489 to i32*
  %1492 = load i32, i32* %1491, align 4
  store i32 %1492, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1493 = load <2 x float>, <2 x float>* %60, align 1
  %1494 = extractelement <2 x float> %1493, i32 0
  %1495 = fpext float %1494 to double
  store double %1495, double* %192, align 1, !tbaa !2454
  %1496 = add i64 %1488, -904
  %1497 = add i64 %3074, 17
  store i64 %1497, i64* %PC, align 8
  %1498 = inttoptr i64 %1496 to double*
  store double %1495, double* %1498, align 8
  %1499 = load i64, i64* %PC, align 8
  %1500 = add i64 %1499, 45
  store i64 %1500, i64* %PC, align 8, !tbaa !2428
  br label %block_400aee

block_400fab:                                     ; preds = %block_400f66
  %1501 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1502 = shl i32 %1501, 1
  %1503 = icmp slt i32 %1501, 0
  %1504 = icmp slt i32 %1502, 0
  %1505 = xor i1 %1503, %1504
  %1506 = zext i32 %1502 to i64
  store i64 %1506, i64* %RAX, align 8, !tbaa !2428
  %.lobit38 = lshr i32 %1501, 31
  %1507 = trunc i32 %.lobit38 to i8
  store i8 %1507, i8* %20, align 1, !tbaa !2456
  %1508 = and i32 %1502, 254
  %1509 = tail call i32 @llvm.ctpop.i32(i32 %1508) #8
  %1510 = trunc i32 %1509 to i8
  %1511 = and i8 %1510, 1
  %1512 = xor i8 %1511, 1
  store i8 %1512, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  %1513 = icmp eq i32 %1502, 0
  %1514 = zext i1 %1513 to i8
  store i8 %1514, i8* %23, align 1, !tbaa !2456
  %1515 = lshr i32 %1501, 30
  %1516 = trunc i32 %1515 to i8
  %1517 = and i8 %1516, 1
  store i8 %1517, i8* %24, align 1, !tbaa !2456
  %1518 = zext i1 %1505 to i8
  store i8 %1518, i8* %25, align 1, !tbaa !2456
  %1519 = add i64 %533, 17
  store i64 %1519, i64* %PC, align 8
  store i32 %1502, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  br label %block_400fbc

block_4014fa:                                     ; preds = %block_40150e, %block_4014e5
  %1520 = phi i32 [ 0, %block_4014e5 ], [ %2819, %block_40150e ]
  %1521 = phi i64 [ %548, %block_4014e5 ], [ %2842, %block_40150e ]
  %MEMORY.6 = phi %struct.Memory* [ %539, %block_4014e5 ], [ %2816, %block_40150e ]
  %1522 = zext i32 %1520 to i64
  store i64 %1522, i64* %RAX, align 8, !tbaa !2428
  %1523 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1524 = sub i32 %1520, %1523
  %1525 = icmp ult i32 %1520, %1523
  %1526 = zext i1 %1525 to i8
  store i8 %1526, i8* %20, align 1, !tbaa !2432
  %1527 = and i32 %1524, 255
  %1528 = tail call i32 @llvm.ctpop.i32(i32 %1527) #8
  %1529 = trunc i32 %1528 to i8
  %1530 = and i8 %1529, 1
  %1531 = xor i8 %1530, 1
  store i8 %1531, i8* %21, align 1, !tbaa !2446
  %1532 = xor i32 %1523, %1520
  %1533 = xor i32 %1532, %1524
  %1534 = lshr i32 %1533, 4
  %1535 = trunc i32 %1534 to i8
  %1536 = and i8 %1535, 1
  store i8 %1536, i8* %22, align 1, !tbaa !2450
  %1537 = icmp eq i32 %1524, 0
  %1538 = zext i1 %1537 to i8
  store i8 %1538, i8* %23, align 1, !tbaa !2447
  %1539 = lshr i32 %1524, 31
  %1540 = trunc i32 %1539 to i8
  store i8 %1540, i8* %24, align 1, !tbaa !2448
  %1541 = lshr i32 %1520, 31
  %1542 = lshr i32 %1523, 31
  %1543 = xor i32 %1542, %1541
  %1544 = xor i32 %1539, %1541
  %1545 = add nuw nsw i32 %1544, %1543
  %1546 = icmp eq i32 %1545, 2
  %1547 = zext i1 %1546 to i8
  store i8 %1547, i8* %25, align 1, !tbaa !2449
  %1548 = icmp ne i8 %1540, 0
  %1549 = xor i1 %1548, %1546
  %.v45 = select i1 %1549, i64 20, i64 134
  %1550 = add i64 %1521, %.v45
  store i64 %1550, i64* %PC, align 8, !tbaa !2428
  br i1 %1549, label %block_40150e, label %block_401580

block_400d24:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %1551 = load <2 x float>, <2 x float>* %60, align 1
  %1552 = extractelement <2 x float> %1551, i32 0
  store float %1552, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %1553 = add i64 %2417, 21
  store i64 %1553, i64* %PC, align 8
  store float %1552, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %.pre19 = load i64, i64* %RBP, align 8
  br label %block_400d39

block_400ec2:                                     ; preds = %block_400e52, %block_400fbc
  %1554 = phi i64 [ %.pre22, %block_400e52 ], [ %1366, %block_400fbc ]
  %MEMORY.7 = phi %struct.Memory* [ %1936, %block_400e52 ], [ %507, %block_400fbc ]
  %1555 = add i64 %1554, -2306
  %1556 = add i64 %1554, 5
  %1557 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1558 = add i64 %1557, -8
  %1559 = inttoptr i64 %1558 to i64*
  store i64 %1556, i64* %1559, align 8
  store i64 %1558, i64* %RSP, align 8, !tbaa !2428
  store i64 %1555, i64* %PC, align 8, !tbaa !2428
  %1560 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1555, %struct.Memory* %MEMORY.7)
  %1561 = load i64, i64* %RBP, align 8
  %1562 = add i64 %1561, -80
  %1563 = load i64, i64* %PC, align 8
  %1564 = add i64 %1563, 5
  store i64 %1564, i64* %PC, align 8
  %1565 = load <2 x float>, <2 x float>* %60, align 1
  %1566 = extractelement <2 x float> %1565, i32 0
  %1567 = inttoptr i64 %1562 to float*
  store float %1566, float* %1567, align 4
  %1568 = load i64, i64* %RBP, align 8
  %1569 = add i64 %1568, -64
  %1570 = load i64, i64* %PC, align 8
  %1571 = add i64 %1570, 3
  store i64 %1571, i64* %PC, align 8
  %1572 = inttoptr i64 %1569 to i32*
  %1573 = load i32, i32* %1572, align 4
  %1574 = add i32 %1573, 1
  %1575 = zext i32 %1574 to i64
  store i64 %1575, i64* %RAX, align 8, !tbaa !2428
  %1576 = icmp eq i32 %1573, -1
  %1577 = icmp eq i32 %1574, 0
  %1578 = or i1 %1576, %1577
  %1579 = zext i1 %1578 to i8
  store i8 %1579, i8* %20, align 1, !tbaa !2432
  %1580 = and i32 %1574, 255
  %1581 = tail call i32 @llvm.ctpop.i32(i32 %1580) #8
  %1582 = trunc i32 %1581 to i8
  %1583 = and i8 %1582, 1
  %1584 = xor i8 %1583, 1
  store i8 %1584, i8* %21, align 1, !tbaa !2446
  %1585 = xor i32 %1573, %1574
  %1586 = lshr i32 %1585, 4
  %1587 = trunc i32 %1586 to i8
  %1588 = and i8 %1587, 1
  store i8 %1588, i8* %22, align 1, !tbaa !2450
  %1589 = zext i1 %1577 to i8
  store i8 %1589, i8* %23, align 1, !tbaa !2447
  %1590 = lshr i32 %1574, 31
  %1591 = trunc i32 %1590 to i8
  store i8 %1591, i8* %24, align 1, !tbaa !2448
  %1592 = lshr i32 %1573, 31
  %1593 = xor i32 %1590, %1592
  %1594 = add nuw nsw i32 %1593, %1590
  %1595 = icmp eq i32 %1594, 2
  %1596 = zext i1 %1595 to i8
  store i8 %1596, i8* %25, align 1, !tbaa !2449
  %1597 = add i64 %1570, 9
  store i64 %1597, i64* %PC, align 8
  store i32 %1574, i32* %1572, align 4
  %1598 = load i64, i64* %PC, align 8
  %1599 = add i64 %1598, 11
  store i64 %1599, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400ee0

block_401622:                                     ; preds = %block_4015c4
  %1600 = add i64 %1349, -4194
  %1601 = add i64 %1349, 5
  %1602 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1603 = add i64 %1602, -8
  %1604 = inttoptr i64 %1603 to i64*
  store i64 %1601, i64* %1604, align 8
  store i64 %1603, i64* %RSP, align 8, !tbaa !2428
  store i64 %1600, i64* %PC, align 8, !tbaa !2428
  %1605 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %1600, %struct.Memory* %MEMORY.2)
  %1606 = load i64, i64* %PC, align 8
  %1607 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to i64*), align 8
  store i64 %1607, i64* %197, align 1, !tbaa !2454
  store double 0.000000e+00, double* %199, align 1, !tbaa !2454
  %1608 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to i64*), align 8
  store i64 %1608, i64* %2585, align 1, !tbaa !2454
  store double 0.000000e+00, double* %838, align 1, !tbaa !2454
  %1609 = load i64, i64* %RBP, align 8
  %1610 = add i64 %1609, -40
  %1611 = add i64 %1606, 21
  store i64 %1611, i64* %PC, align 8
  %1612 = load <2 x float>, <2 x float>* %60, align 1
  %1613 = load <2 x i32>, <2 x i32>* %245, align 1
  %1614 = inttoptr i64 %1610 to float*
  %1615 = load float, float* %1614, align 4
  %1616 = extractelement <2 x float> %1612, i32 0
  %1617 = fsub float %1616, %1615
  store float %1617, float* %28, align 1, !tbaa !2452
  %1618 = bitcast <2 x float> %1612 to <2 x i32>
  %1619 = extractelement <2 x i32> %1618, i32 1
  store i32 %1619, i32* %252, align 1, !tbaa !2452
  %1620 = extractelement <2 x i32> %1613, i32 0
  store i32 %1620, i32* %254, align 1, !tbaa !2452
  %1621 = extractelement <2 x i32> %1613, i32 1
  store i32 %1621, i32* %256, align 1, !tbaa !2452
  %1622 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1623 = zext i32 %1622 to i64
  store i64 %1623, i64* %RAX, align 8, !tbaa !2428
  %1624 = load <2 x i32>, <2 x i32>* %839, align 1
  %1625 = load <2 x i32>, <2 x i32>* %840, align 1
  %1626 = sitofp i32 %1622 to float
  store float %1626, float* %2272, align 1, !tbaa !2452
  %1627 = extractelement <2 x i32> %1624, i32 1
  store i32 %1627, i32* %217, align 1, !tbaa !2452
  %1628 = extractelement <2 x i32> %1625, i32 0
  store i32 %1628, i32* %219, align 1, !tbaa !2452
  %1629 = extractelement <2 x i32> %1625, i32 1
  store i32 %1629, i32* %221, align 1, !tbaa !2452
  %1630 = load <2 x float>, <2 x float>* %60, align 1
  %1631 = load <2 x i32>, <2 x i32>* %245, align 1
  %1632 = load <2 x float>, <2 x float>* %2276, align 1
  %1633 = extractelement <2 x float> %1630, i32 0
  %1634 = extractelement <2 x float> %1632, i32 0
  %1635 = fdiv float %1633, %1634
  store float %1635, float* %28, align 1, !tbaa !2452
  %1636 = bitcast <2 x float> %1630 to <2 x i32>
  %1637 = extractelement <2 x i32> %1636, i32 1
  store i32 %1637, i32* %252, align 1, !tbaa !2452
  %1638 = extractelement <2 x i32> %1631, i32 0
  store i32 %1638, i32* %254, align 1, !tbaa !2452
  %1639 = extractelement <2 x i32> %1631, i32 1
  store i32 %1639, i32* %256, align 1, !tbaa !2452
  %1640 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1641 = sext i32 %1640 to i64
  %1642 = shl nsw i64 %1641, 2
  %1643 = add i64 %1642, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1644 = add i64 %1606, 53
  store i64 %1644, i64* %PC, align 8
  %1645 = load <2 x float>, <2 x float>* %60, align 1
  %1646 = extractelement <2 x float> %1645, i32 0
  %1647 = inttoptr i64 %1643 to float*
  store float %1646, float* %1647, align 4
  %1648 = load i64, i64* %PC, align 8
  %1649 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1650 = sext i32 %1649 to i64
  store i64 %1650, i64* %RCX, align 8, !tbaa !2428
  %1651 = shl nsw i64 %1650, 2
  %1652 = add i64 %1651, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1653 = add i64 %1648, 17
  store i64 %1653, i64* %PC, align 8
  %1654 = inttoptr i64 %1652 to i32*
  %1655 = load i32, i32* %1654, align 4
  store i32 %1655, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  store i64 %1650, i64* %RCX, align 8, !tbaa !2428
  %1656 = add i64 %1651, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1657 = add i64 %1648, 34
  store i64 %1657, i64* %PC, align 8
  %1658 = load <2 x float>, <2 x float>* %60, align 1
  %1659 = load <2 x i32>, <2 x i32>* %245, align 1
  %1660 = inttoptr i64 %1656 to float*
  %1661 = load float, float* %1660, align 4
  %1662 = extractelement <2 x float> %1658, i32 0
  %1663 = fadd float %1662, %1661
  store float %1663, float* %28, align 1, !tbaa !2452
  %1664 = bitcast <2 x float> %1658 to <2 x i32>
  %1665 = extractelement <2 x i32> %1664, i32 1
  store i32 %1665, i32* %252, align 1, !tbaa !2452
  %1666 = extractelement <2 x i32> %1659, i32 0
  store i32 %1666, i32* %254, align 1, !tbaa !2452
  %1667 = extractelement <2 x i32> %1659, i32 1
  store i32 %1667, i32* %256, align 1, !tbaa !2452
  %1668 = load i64, i64* %RBP, align 8
  %1669 = add i64 %1668, -16
  %1670 = add i64 %1648, 39
  store i64 %1670, i64* %PC, align 8
  %1671 = load <2 x float>, <2 x float>* %60, align 1
  %1672 = extractelement <2 x float> %1671, i32 0
  %1673 = inttoptr i64 %1669 to float*
  store float %1672, float* %1673, align 4
  %1674 = load i64, i64* %RBP, align 8
  %1675 = add i64 %1674, -16
  %1676 = load i64, i64* %PC, align 8
  %1677 = add i64 %1676, 5
  store i64 %1677, i64* %PC, align 8
  %1678 = inttoptr i64 %1675 to i32*
  %1679 = load i32, i32* %1678, align 4
  store i32 %1679, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1680 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1681 = sext i32 %1680 to i64
  store i64 %1681, i64* %RCX, align 8, !tbaa !2428
  %1682 = shl nsw i64 %1681, 2
  %1683 = add i64 %1682, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1684 = add i64 %1676, 22
  store i64 %1684, i64* %PC, align 8
  %1685 = load <2 x float>, <2 x float>* %60, align 1
  %1686 = extractelement <2 x float> %1685, i32 0
  %1687 = inttoptr i64 %1683 to float*
  store float %1686, float* %1687, align 4
  %1688 = load i64, i64* %RBP, align 8
  %1689 = add i64 %1688, -12
  %1690 = load i64, i64* %PC, align 8
  %1691 = add i64 %1690, 5
  store i64 %1691, i64* %PC, align 8
  %1692 = inttoptr i64 %1689 to i32*
  %1693 = load i32, i32* %1692, align 4
  store i32 %1693, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1694 = load <2 x float>, <2 x float>* %60, align 1
  %1695 = extractelement <2 x float> %1694, i32 0
  %1696 = fpext float %1695 to double
  store double %1696, double* %192, align 1, !tbaa !2454
  %1697 = add i64 %1688, -16
  %1698 = add i64 %1690, 14
  store i64 %1698, i64* %PC, align 8
  %1699 = inttoptr i64 %1697 to i32*
  %1700 = load i32, i32* %1699, align 4
  store i32 %1700, i32* %214, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2273, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2274, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2275, align 1, !tbaa !2452
  %1701 = load <2 x float>, <2 x float>* %2276, align 1
  %1702 = extractelement <2 x float> %1701, i32 0
  %1703 = fpext float %1702 to double
  store double %1703, double* %222, align 1, !tbaa !2454
  %1704 = load double, double* %210, align 1
  %1705 = fmul double %1704, %1703
  store double %1705, double* %210, align 1, !tbaa !2454
  %1706 = load <2 x i32>, <2 x i32>* %245, align 1
  %1707 = fdiv double %1696, %1705
  %1708 = bitcast double %1707 to <2 x i32>
  %1709 = fptrunc double %1707 to float
  store float %1709, float* %28, align 1, !tbaa !2452
  %1710 = extractelement <2 x i32> %1708, i32 1
  store i32 %1710, i32* %252, align 1, !tbaa !2452
  %1711 = extractelement <2 x i32> %1706, i32 0
  store i32 %1711, i32* %254, align 1, !tbaa !2452
  %1712 = extractelement <2 x i32> %1706, i32 1
  store i32 %1712, i32* %256, align 1, !tbaa !2452
  %1713 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1714 = sext i32 %1713 to i64
  %1715 = shl nsw i64 %1714, 2
  %1716 = add i64 %1715, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1717 = add i64 %1690, 47
  store i64 %1717, i64* %PC, align 8
  %1718 = load <2 x float>, <2 x float>* %60, align 1
  %1719 = extractelement <2 x float> %1718, i32 0
  %1720 = inttoptr i64 %1716 to float*
  store float %1719, float* %1720, align 4
  %1721 = load i64, i64* %PC, align 8
  %1722 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1723 = sext i32 %1722 to i64
  store i64 %1723, i64* %RCX, align 8, !tbaa !2428
  %1724 = shl nsw i64 %1723, 2
  %1725 = add i64 %1724, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1726 = add i64 %1721, 17
  store i64 %1726, i64* %PC, align 8
  %1727 = inttoptr i64 %1725 to i32*
  %1728 = load i32, i32* %1727, align 4
  store i32 %1728, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1729 = load <2 x float>, <2 x float>* %60, align 1
  %1730 = extractelement <2 x float> %1729, i32 0
  %1731 = fpext float %1730 to double
  %1732 = load double, double* %196, align 1
  %1733 = fdiv double %1732, %1731
  store double %1733, double* %196, align 1, !tbaa !2454
  %1734 = bitcast double %1731 to <2 x i32>
  %1735 = load <2 x i32>, <2 x i32>* %245, align 1
  %1736 = fptrunc double %1733 to float
  store float %1736, float* %28, align 1, !tbaa !2452
  %1737 = extractelement <2 x i32> %1734, i32 1
  store i32 %1737, i32* %252, align 1, !tbaa !2452
  %1738 = extractelement <2 x i32> %1735, i32 0
  store i32 %1738, i32* %254, align 1, !tbaa !2452
  %1739 = extractelement <2 x i32> %1735, i32 1
  store i32 %1739, i32* %256, align 1, !tbaa !2452
  store i64 %1723, i64* %RCX, align 8, !tbaa !2428
  %1740 = add i64 %1724, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1741 = add i64 %1721, 46
  store i64 %1741, i64* %PC, align 8
  %1742 = load <2 x float>, <2 x float>* %60, align 1
  %1743 = extractelement <2 x float> %1742, i32 0
  %1744 = inttoptr i64 %1740 to float*
  store float %1743, float* %1744, align 4
  %1745 = load i64, i64* %RBP, align 8
  %1746 = add i64 %1745, -16
  %1747 = load i64, i64* %PC, align 8
  %1748 = add i64 %1747, 5
  store i64 %1748, i64* %PC, align 8
  %1749 = inttoptr i64 %1746 to i32*
  %1750 = load i32, i32* %1749, align 4
  store i32 %1750, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1751 = add i64 %1745, -8
  %1752 = add i64 %1747, 10
  store i64 %1752, i64* %PC, align 8
  %1753 = load <2 x float>, <2 x float>* %60, align 1
  %1754 = inttoptr i64 %1751 to float*
  %1755 = load float, float* %1754, align 4
  %1756 = extractelement <2 x float> %1753, i32 0
  %1757 = fdiv float %1756, %1755
  store float %1757, float* %28, align 1, !tbaa !2452
  %1758 = bitcast <2 x float> %1753 to <2 x i32>
  %1759 = extractelement <2 x i32> %1758, i32 1
  store i32 %1759, i32* %252, align 1, !tbaa !2452
  %1760 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1761 = sext i32 %1760 to i64
  %1762 = shl nsw i64 %1761, 2
  %1763 = add i64 %1762, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1764 = add i64 %1747, 27
  store i64 %1764, i64* %PC, align 8
  %1765 = load <2 x float>, <2 x float>* %60, align 1
  %1766 = extractelement <2 x float> %1765, i32 0
  %1767 = inttoptr i64 %1763 to float*
  store float %1766, float* %1767, align 4
  %1768 = load i64, i64* %PC, align 8
  %1769 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  store i32 %1769, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %1770 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1771 = sext i32 %1770 to i64
  store i64 %1771, i64* %RCX, align 8, !tbaa !2428
  %1772 = shl nsw i64 %1771, 2
  %1773 = add i64 %1772, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1774 = add i64 %1768, 26
  store i64 %1774, i64* %PC, align 8
  %1775 = load <2 x float>, <2 x float>* %60, align 1
  %1776 = load <2 x i32>, <2 x i32>* %245, align 1
  %1777 = inttoptr i64 %1773 to float*
  %1778 = load float, float* %1777, align 4
  %1779 = extractelement <2 x float> %1775, i32 0
  %1780 = fadd float %1779, %1778
  store float %1780, float* %28, align 1, !tbaa !2452
  %1781 = bitcast <2 x float> %1775 to <2 x i32>
  %1782 = extractelement <2 x i32> %1781, i32 1
  store i32 %1782, i32* %252, align 1, !tbaa !2452
  %1783 = extractelement <2 x i32> %1776, i32 0
  store i32 %1783, i32* %254, align 1, !tbaa !2452
  %1784 = extractelement <2 x i32> %1776, i32 1
  store i32 %1784, i32* %256, align 1, !tbaa !2452
  %1785 = load <2 x float>, <2 x float>* %60, align 1
  %1786 = extractelement <2 x float> %1785, i32 0
  store float %1786, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %1787 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1788 = zext i32 %1787 to i64
  store i64 %1788, i64* %RDI, align 8, !tbaa !2428
  %1789 = add i64 %1768, 4543
  %1790 = add i64 %1768, 47
  %1791 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1792 = add i64 %1791, -8
  %1793 = inttoptr i64 %1792 to i64*
  store i64 %1790, i64* %1793, align 8
  store i64 %1792, i64* %RSP, align 8, !tbaa !2428
  store i64 %1789, i64* %PC, align 8, !tbaa !2428
  %1794 = tail call %struct.Memory* @sub_4028d0_print_time_renamed_(%struct.State* nonnull %0, i64 %1789, %struct.Memory* %1605)
  %1795 = load i64, i64* %PC, align 8
  %1796 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1797 = add i32 %1796, 1
  %1798 = zext i32 %1797 to i64
  store i64 %1798, i64* %RAX, align 8, !tbaa !2428
  %1799 = icmp eq i32 %1796, -1
  %1800 = icmp eq i32 %1797, 0
  %1801 = or i1 %1799, %1800
  %1802 = zext i1 %1801 to i8
  store i8 %1802, i8* %20, align 1, !tbaa !2432
  %1803 = and i32 %1797, 255
  %1804 = tail call i32 @llvm.ctpop.i32(i32 %1803) #8
  %1805 = trunc i32 %1804 to i8
  %1806 = and i8 %1805, 1
  %1807 = xor i8 %1806, 1
  store i8 %1807, i8* %21, align 1, !tbaa !2446
  %1808 = xor i32 %1796, %1797
  %1809 = lshr i32 %1808, 4
  %1810 = trunc i32 %1809 to i8
  %1811 = and i8 %1810, 1
  store i8 %1811, i8* %22, align 1, !tbaa !2450
  %1812 = zext i1 %1800 to i8
  store i8 %1812, i8* %23, align 1, !tbaa !2447
  %1813 = lshr i32 %1797, 31
  %1814 = trunc i32 %1813 to i8
  store i8 %1814, i8* %24, align 1, !tbaa !2448
  %1815 = lshr i32 %1796, 31
  %1816 = xor i32 %1813, %1815
  %1817 = add nuw nsw i32 %1816, %1813
  %1818 = icmp eq i32 %1817, 2
  %1819 = zext i1 %1818 to i8
  store i8 %1819, i8* %25, align 1, !tbaa !2449
  store i32 %1797, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1820 = add i64 %1795, -617
  store i64 %1820, i64* %PC, align 8, !tbaa !2428
  br label %block_4014d7

block_400cca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1821 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 24) to double*), align 8
  store double %1821, double* %192, align 1, !tbaa !2454
  store double 0.000000e+00, double* %193, align 1, !tbaa !2454
  %1822 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 40) to double*), align 8
  store double %1822, double* %196, align 1, !tbaa !2454
  store double 0.000000e+00, double* %199, align 1, !tbaa !2454
  %1823 = load i64, i64* %RBP, align 8
  %1824 = add i64 %1823, -12
  %1825 = add i64 %2417, 21
  store i64 %1825, i64* %PC, align 8
  %1826 = inttoptr i64 %1824 to i32*
  %1827 = load i32, i32* %1826, align 4
  store i32 %1827, i32* %2264, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2584, align 1, !tbaa !2452
  %1828 = load <2 x float>, <2 x float>* %2095, align 1
  %1829 = extractelement <2 x float> %1828, i32 0
  %1830 = fpext float %1829 to double
  store double %1830, double* %210, align 1, !tbaa !2454
  %1831 = add i64 %1823, -16
  %1832 = add i64 %2417, 30
  store i64 %1832, i64* %PC, align 8
  %1833 = inttoptr i64 %1831 to i32*
  %1834 = load i32, i32* %1833, align 4
  store i32 %1834, i32* %214, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2273, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2274, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2275, align 1, !tbaa !2452
  %1835 = load <2 x float>, <2 x float>* %2276, align 1
  %1836 = extractelement <2 x float> %1835, i32 0
  %1837 = fpext float %1836 to double
  store double %1837, double* %222, align 1, !tbaa !2454
  %1838 = fmul double %1822, %1837
  %1839 = fdiv double %1830, %1838
  store double %1839, double* %210, align 1, !tbaa !2454
  %1840 = bitcast double %1838 to <2 x i32>
  %1841 = fptrunc double %1839 to float
  store float %1841, float* %2571, align 1, !tbaa !2452
  %1842 = extractelement <2 x i32> %1840, i32 1
  store i32 %1842, i32* %2587, align 1, !tbaa !2452
  %1843 = load <2 x float>, <2 x float>* %2577, align 1
  %1844 = extractelement <2 x float> %1843, i32 0
  store float %1844, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  store float %1844, float* %2571, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2573, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2452
  %1845 = load <2 x float>, <2 x float>* %2577, align 1
  %1846 = extractelement <2 x float> %1845, i32 0
  %1847 = fpext float %1846 to double
  store double %1847, double* %196, align 1, !tbaa !2454
  %1848 = fdiv double %1821, %1847
  %1849 = bitcast double %1848 to <2 x i32>
  %1850 = fptrunc double %1848 to float
  store float %1850, float* %28, align 1, !tbaa !2452
  %1851 = extractelement <2 x i32> %1849, i32 1
  store i32 %1851, i32* %252, align 1, !tbaa !2452
  store i32 0, i32* %254, align 1, !tbaa !2452
  store i32 0, i32* %256, align 1, !tbaa !2452
  %1852 = load <2 x float>, <2 x float>* %60, align 1
  %1853 = extractelement <2 x float> %1852, i32 0
  store float %1853, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %1854 = add i64 %2417, 111
  store i64 %1854, i64* %PC, align 8, !tbaa !2428
  br label %block_400d39

block_4011a1:                                     ; preds = %block_40118d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1855 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1856 = zext i32 %1855 to i64
  store i64 %1856, i64* %RSI, align 8, !tbaa !2428
  %1857 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1858 = zext i32 %1857 to i64
  store i64 %1858, i64* %RDX, align 8, !tbaa !2428
  %1859 = add i64 %2873, 2799
  %1860 = add i64 %2873, 52
  %1861 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1862 = add i64 %1861, -8
  %1863 = inttoptr i64 %1862 to i64*
  store i64 %1860, i64* %1863, align 8
  store i64 %1862, i64* %RSP, align 8, !tbaa !2428
  store i64 %1859, i64* %PC, align 8, !tbaa !2428
  %1864 = tail call %struct.Memory* @sub_401c90_dgesl_renamed_(%struct.State* nonnull %0, i64 %1859, %struct.Memory* %MEMORY.16)
  %1865 = load i64, i64* %PC, align 8
  %1866 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1867 = add i32 %1866, 1
  %1868 = zext i32 %1867 to i64
  store i64 %1868, i64* %RAX, align 8, !tbaa !2428
  %1869 = icmp eq i32 %1866, -1
  %1870 = icmp eq i32 %1867, 0
  %1871 = or i1 %1869, %1870
  %1872 = zext i1 %1871 to i8
  store i8 %1872, i8* %20, align 1, !tbaa !2432
  %1873 = and i32 %1867, 255
  %1874 = tail call i32 @llvm.ctpop.i32(i32 %1873) #8
  %1875 = trunc i32 %1874 to i8
  %1876 = and i8 %1875, 1
  %1877 = xor i8 %1876, 1
  store i8 %1877, i8* %21, align 1, !tbaa !2446
  %1878 = xor i32 %1866, %1867
  %1879 = lshr i32 %1878, 4
  %1880 = trunc i32 %1879 to i8
  %1881 = and i8 %1880, 1
  store i8 %1881, i8* %22, align 1, !tbaa !2450
  %1882 = zext i1 %1870 to i8
  store i8 %1882, i8* %23, align 1, !tbaa !2447
  %1883 = lshr i32 %1867, 31
  %1884 = trunc i32 %1883 to i8
  store i8 %1884, i8* %24, align 1, !tbaa !2448
  %1885 = lshr i32 %1866, 31
  %1886 = xor i32 %1883, %1885
  %1887 = add nuw nsw i32 %1886, %1883
  %1888 = icmp eq i32 %1887, 2
  %1889 = zext i1 %1888 to i8
  store i8 %1889, i8* %25, align 1, !tbaa !2449
  store i32 %1867, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1890 = add i64 %1865, -72
  store i64 %1890, i64* %PC, align 8, !tbaa !2428
  br label %block_40118d

block_400e52:                                     ; preds = %block_400e43
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %1891 = add i64 %2671, -72
  %1892 = add i64 %2686, 18
  store i64 %1892, i64* %PC, align 8
  %1893 = inttoptr i64 %1891 to float*
  %1894 = inttoptr i64 %1891 to i32*
  %1895 = load i32, i32* %1894, align 4
  store i32 %1895, i32* %2586, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2573, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2452
  %1896 = load <2 x float>, <2 x float>* %2577, align 1
  %1897 = extractelement <2 x float> %1896, i32 0
  %1898 = fpext float %1897 to double
  store double %1898, double* %196, align 1, !tbaa !2454
  %1899 = add i64 %2671, -68
  %1900 = add i64 %2686, 25
  store i64 %1900, i64* %PC, align 8
  %1901 = inttoptr i64 %1899 to i32*
  %1902 = load i32, i32* %1901, align 4
  %1903 = zext i32 %1902 to i64
  store i64 %1903, i64* %RAX, align 8, !tbaa !2428
  %1904 = sitofp i32 %1902 to double
  store double %1904, double* %210, align 1, !tbaa !2454
  %1905 = load <2 x i32>, <2 x i32>* %1487, align 1
  %1906 = fdiv double %1898, %1904
  %1907 = bitcast double %1906 to <2 x i32>
  %1908 = fptrunc double %1906 to float
  store float %1908, float* %2571, align 1, !tbaa !2452
  %1909 = extractelement <2 x i32> %1907, i32 1
  store i32 %1909, i32* %2587, align 1, !tbaa !2452
  %1910 = extractelement <2 x i32> %1905, i32 0
  store i32 %1910, i32* %2588, align 1, !tbaa !2452
  %1911 = extractelement <2 x i32> %1905, i32 1
  store i32 %1911, i32* %2589, align 1, !tbaa !2452
  %1912 = add i64 %2686, 42
  store i64 %1912, i64* %PC, align 8
  %1913 = load <2 x float>, <2 x float>* %2577, align 1
  %1914 = extractelement <2 x float> %1913, i32 0
  store float %1914, float* %1893, align 4
  %1915 = load i64, i64* %PC, align 8
  %1916 = load i64, i64* @stderr, align 64
  store i64 %1916, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1917 = add i64 %1915, -2492
  %1918 = add i64 %1915, 15
  %1919 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1920 = add i64 %1919, -8
  %1921 = inttoptr i64 %1920 to i64*
  store i64 %1918, i64* %1921, align 8
  store i64 %1920, i64* %RSP, align 8, !tbaa !2428
  store i64 %1917, i64* %PC, align 8, !tbaa !2428
  %1922 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %443)
  %1923 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %1924 = load i64, i64* @stderr, align 64
  store i64 %1924, i64* %RDI, align 8, !tbaa !2428
  %1925 = load i64, i64* %RBP, align 8
  %1926 = add i64 %1925, -944
  %1927 = load i32, i32* %EAX, align 4
  %1928 = add i64 %1923, 24
  store i64 %1928, i64* %PC, align 8
  %1929 = inttoptr i64 %1926 to i32*
  store i32 %1927, i32* %1929, align 4
  %1930 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1931 = add i64 %1930, -2531
  %1932 = add i64 %1930, 7
  %1933 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1934 = add i64 %1933, -8
  %1935 = inttoptr i64 %1934 to i64*
  store i64 %1932, i64* %1935, align 8
  store i64 %1934, i64* %RSP, align 8, !tbaa !2428
  store i64 %1931, i64* %PC, align 8, !tbaa !2428
  %1936 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1922)
  %1937 = load i64, i64* %RBP, align 8
  %1938 = add i64 %1937, -64
  %1939 = load i64, i64* %PC, align 8
  %1940 = add i64 %1939, 7
  store i64 %1940, i64* %PC, align 8
  %1941 = inttoptr i64 %1938 to i32*
  store i32 -3, i32* %1941, align 4
  %1942 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1943 = load i64, i64* %RBP, align 8
  %1944 = add i64 %1943, -948
  %1945 = load i32, i32* %EAX, align 4
  %1946 = add i64 %1942, 17
  store i64 %1946, i64* %PC, align 8
  %1947 = inttoptr i64 %1944 to i32*
  store i32 %1945, i32* %1947, align 4
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_400ec2

block_4010a0:                                     ; preds = %block_400fcb, %block_4011eb
  %1948 = phi i32 [ %.pre25, %block_400fcb ], [ %1112, %block_4011eb ]
  %1949 = phi i64 [ %.pre24, %block_400fcb ], [ %1135, %block_4011eb ]
  %MEMORY.9 = phi %struct.Memory* [ %802, %block_400fcb ], [ %1109, %block_4011eb ]
  %1950 = add i32 %1948, -6
  %1951 = icmp ult i32 %1948, 6
  %1952 = zext i1 %1951 to i8
  store i8 %1952, i8* %20, align 1, !tbaa !2432
  %1953 = and i32 %1950, 255
  %1954 = tail call i32 @llvm.ctpop.i32(i32 %1953) #8
  %1955 = trunc i32 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = xor i8 %1956, 1
  store i8 %1957, i8* %21, align 1, !tbaa !2446
  %1958 = xor i32 %1948, %1950
  %1959 = lshr i32 %1958, 4
  %1960 = trunc i32 %1959 to i8
  %1961 = and i8 %1960, 1
  store i8 %1961, i8* %22, align 1, !tbaa !2450
  %1962 = icmp eq i32 %1950, 0
  %1963 = zext i1 %1962 to i8
  store i8 %1963, i8* %23, align 1, !tbaa !2447
  %1964 = lshr i32 %1950, 31
  %1965 = trunc i32 %1964 to i8
  store i8 %1965, i8* %24, align 1, !tbaa !2448
  %1966 = lshr i32 %1948, 31
  %1967 = xor i32 %1964, %1966
  %1968 = add nuw nsw i32 %1967, %1966
  %1969 = icmp eq i32 %1968, 2
  %1970 = zext i1 %1969 to i8
  store i8 %1970, i8* %25, align 1, !tbaa !2449
  %1971 = icmp ne i8 %1965, 0
  %1972 = xor i1 %1971, %1969
  %.v40 = select i1 %1972, i64 14, i64 639
  %1973 = add i64 %1949, %.v40
  store i64 %1973, i64* %PC, align 8, !tbaa !2428
  br i1 %1972, label %block_4010ae, label %block_40131f

block_4009e7:                                     ; preds = %block_400997, %block_400aee
  %1974 = phi i32 [ 0, %block_400997 ], [ %660, %block_400aee ]
  %1975 = phi i64 [ %2570, %block_400997 ], [ %683, %block_400aee ]
  %MEMORY.10 = phi %struct.Memory* [ %2554, %block_400997 ], [ %3069, %block_400aee ]
  %1976 = zext i32 %1974 to i64
  store i64 %1976, i64* %RAX, align 8, !tbaa !2428
  %1977 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1978 = sub i32 %1974, %1977
  %1979 = icmp ult i32 %1974, %1977
  %1980 = zext i1 %1979 to i8
  store i8 %1980, i8* %20, align 1, !tbaa !2432
  %1981 = and i32 %1978, 255
  %1982 = tail call i32 @llvm.ctpop.i32(i32 %1981) #8
  %1983 = trunc i32 %1982 to i8
  %1984 = and i8 %1983, 1
  %1985 = xor i8 %1984, 1
  store i8 %1985, i8* %21, align 1, !tbaa !2446
  %1986 = xor i32 %1977, %1974
  %1987 = xor i32 %1986, %1978
  %1988 = lshr i32 %1987, 4
  %1989 = trunc i32 %1988 to i8
  %1990 = and i8 %1989, 1
  store i8 %1990, i8* %22, align 1, !tbaa !2450
  %1991 = icmp eq i32 %1978, 0
  %1992 = zext i1 %1991 to i8
  store i8 %1992, i8* %23, align 1, !tbaa !2447
  %1993 = lshr i32 %1978, 31
  %1994 = trunc i32 %1993 to i8
  store i8 %1994, i8* %24, align 1, !tbaa !2448
  %1995 = lshr i32 %1974, 31
  %1996 = lshr i32 %1977, 31
  %1997 = xor i32 %1996, %1995
  %1998 = xor i32 %1993, %1995
  %1999 = add nuw nsw i32 %1998, %1997
  %2000 = icmp eq i32 %1999, 2
  %2001 = zext i1 %2000 to i8
  store i8 %2001, i8* %25, align 1, !tbaa !2449
  %2002 = icmp ne i8 %1994, 0
  %2003 = xor i1 %2002, %2000
  %.v29 = select i1 %2003, i64 20, i64 302
  %2004 = add i64 %1975, %.v29
  store i64 %2004, i64* %PC, align 8, !tbaa !2428
  br i1 %2003, label %block_4009fb, label %block_400b15

block_40131f:                                     ; preds = %block_4010a0
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %2005 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 48) to double*), align 16
  %2006 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  store i32 %2006, i32* %2264, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2584, align 1, !tbaa !2452
  %2007 = load <2 x float>, <2 x float>* %2095, align 1
  %2008 = extractelement <2 x float> %2007, i32 0
  %2009 = fpext float %2008 to double
  %2010 = fdiv double %2009, %2005
  store double %2010, double* %210, align 1, !tbaa !2454
  %2011 = bitcast double %2005 to <2 x i32>
  %2012 = fptrunc double %2010 to float
  store float %2012, float* %2571, align 1, !tbaa !2452
  %2013 = extractelement <2 x i32> %2011, i32 1
  store i32 %2013, i32* %2587, align 1, !tbaa !2452
  store i32 0, i32* %2588, align 1, !tbaa !2452
  store i32 0, i32* %2589, align 1, !tbaa !2452
  %2014 = load <2 x float>, <2 x float>* %2577, align 1
  %2015 = extractelement <2 x float> %2014, i32 0
  store float %2015, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %2016 = load i64, i64* @stderr, align 64
  store i64 %2016, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %2017 = add i64 %1973, -3679
  %2018 = add i64 %1973, 66
  %2019 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2020 = add i64 %2019, -8
  %2021 = inttoptr i64 %2020 to i64*
  store i64 %2018, i64* %2021, align 8
  store i64 %2020, i64* %RSP, align 8, !tbaa !2428
  store i64 %2017, i64* %PC, align 8, !tbaa !2428
  %2022 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.9)
  %2023 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %2024 = load i64, i64* @stderr, align 64
  store i64 %2024, i64* %RDI, align 8, !tbaa !2428
  %2025 = load i64, i64* %RBP, align 8
  %2026 = add i64 %2025, -972
  %2027 = load i32, i32* %EAX, align 4
  %2028 = add i64 %2023, 24
  store i64 %2028, i64* %PC, align 8
  %2029 = inttoptr i64 %2026 to i32*
  store i32 %2027, i32* %2029, align 4
  %2030 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2031 = add i64 %2030, -3769
  %2032 = add i64 %2030, 7
  %2033 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2034 = add i64 %2033, -8
  %2035 = inttoptr i64 %2034 to i64*
  store i64 %2032, i64* %2035, align 8
  store i64 %2034, i64* %RSP, align 8, !tbaa !2428
  store i64 %2031, i64* %PC, align 8, !tbaa !2428
  %2036 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2022)
  %2037 = load i64, i64* %RBP, align 8
  %2038 = add i64 %2037, -976
  %2039 = load i32, i32* %EAX, align 4
  %2040 = load i64, i64* %PC, align 8
  %2041 = add i64 %2040, 6
  store i64 %2041, i64* %PC, align 8
  %2042 = inttoptr i64 %2038 to i32*
  store i32 %2039, i32* %2042, align 4
  %2043 = load i64, i64* %PC, align 8
  %2044 = add i64 %2043, -3526
  %2045 = add i64 %2043, 5
  %2046 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2047 = add i64 %2046, -8
  %2048 = inttoptr i64 %2047 to i64*
  store i64 %2045, i64* %2048, align 8
  store i64 %2047, i64* %RSP, align 8, !tbaa !2428
  store i64 %2044, i64* %PC, align 8, !tbaa !2428
  %2049 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %2044, %struct.Memory* %2036)
  %2050 = load i64, i64* %RBP, align 8
  %2051 = add i64 %2050, -80
  %2052 = load i64, i64* %PC, align 8
  %2053 = add i64 %2052, 5
  store i64 %2053, i64* %PC, align 8
  %2054 = load <2 x float>, <2 x float>* %60, align 1
  %2055 = extractelement <2 x float> %2054, i32 0
  %2056 = inttoptr i64 %2051 to float*
  store float %2055, float* %2056, align 4
  %2057 = load i64, i64* %PC, align 8
  %2058 = add i64 %2057, 11
  store i64 %2058, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40139b

block_400b15:                                     ; preds = %block_4009e7
  %2059 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 12) to i32*), align 4
  store i32 %2059, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2060 = add i64 %2004, 7419
  %2061 = add i64 %2004, 13
  %2062 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2063 = add i64 %2062, -8
  %2064 = inttoptr i64 %2063 to i64*
  store i64 %2061, i64* %2064, align 8
  store i64 %2063, i64* %RSP, align 8, !tbaa !2428
  store i64 %2060, i64* %PC, align 8, !tbaa !2428
  %2065 = tail call %struct.Memory* @sub_402810_epslon_renamed_(%struct.State* nonnull %0, i64 %2060, %struct.Memory* %MEMORY.10)
  %2066 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %2067 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 12) to i32*), align 4
  store i32 %2067, i32* %2586, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2573, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2452
  %2068 = load i64, i64* %RBP, align 8
  %2069 = add i64 %2068, -36
  %2070 = add i64 %2066, 23
  store i64 %2070, i64* %PC, align 8
  %2071 = load <2 x float>, <2 x float>* %60, align 1
  %2072 = extractelement <2 x float> %2071, i32 0
  %2073 = inttoptr i64 %2069 to float*
  store float %2072, float* %2073, align 4
  %2074 = load i64, i64* %RBP, align 8
  %2075 = add i64 %2074, -28
  %2076 = load i64, i64* %PC, align 8
  %2077 = add i64 %2076, 5
  store i64 %2077, i64* %PC, align 8
  %2078 = inttoptr i64 %2075 to i32*
  %2079 = load i32, i32* %2078, align 4
  store i32 %2079, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2080 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2081 = zext i32 %2080 to i64
  store i64 %2081, i64* %RAX, align 8, !tbaa !2428
  %2082 = bitcast %union.VectorReg* %10 to <2 x i32>*
  %2083 = load <2 x i32>, <2 x i32>* %2082, align 1
  %2084 = bitcast i64* %2581 to <2 x i32>*
  %2085 = load <2 x i32>, <2 x i32>* %2084, align 1
  %2086 = sitofp i32 %2080 to float
  store float %2086, float* %2578, align 1, !tbaa !2452
  %2087 = extractelement <2 x i32> %2083, i32 1
  %2088 = bitcast i8* %2579 to i32*
  store i32 %2087, i32* %2088, align 1, !tbaa !2452
  %2089 = extractelement <2 x i32> %2085, i32 0
  %2090 = bitcast i64* %2581 to i32*
  store i32 %2089, i32* %2090, align 1, !tbaa !2452
  %2091 = extractelement <2 x i32> %2085, i32 1
  %2092 = bitcast i8* %2583 to i32*
  store i32 %2091, i32* %2092, align 1, !tbaa !2452
  %2093 = add i64 %2074, -20
  %2094 = add i64 %2076, 21
  store i64 %2094, i64* %PC, align 8
  %2095 = bitcast %union.VectorReg* %10 to <2 x float>*
  %2096 = load <2 x float>, <2 x float>* %2095, align 1
  %2097 = load <2 x i32>, <2 x i32>* %2084, align 1
  %2098 = inttoptr i64 %2093 to float*
  %2099 = load float, float* %2098, align 4
  %2100 = extractelement <2 x float> %2096, i32 0
  %2101 = fmul float %2100, %2099
  store float %2101, float* %2578, align 1, !tbaa !2452
  %2102 = bitcast <2 x float> %2096 to <2 x i32>
  %2103 = extractelement <2 x i32> %2102, i32 1
  store i32 %2103, i32* %2088, align 1, !tbaa !2452
  %2104 = extractelement <2 x i32> %2097, i32 0
  store i32 %2104, i32* %2090, align 1, !tbaa !2452
  %2105 = extractelement <2 x i32> %2097, i32 1
  store i32 %2105, i32* %2092, align 1, !tbaa !2452
  %2106 = add i64 %2074, -24
  %2107 = add i64 %2076, 26
  store i64 %2107, i64* %PC, align 8
  %2108 = load <2 x float>, <2 x float>* %2095, align 1
  %2109 = load <2 x i32>, <2 x i32>* %2084, align 1
  %2110 = inttoptr i64 %2106 to float*
  %2111 = load float, float* %2110, align 4
  %2112 = extractelement <2 x float> %2108, i32 0
  %2113 = fmul float %2112, %2111
  store float %2113, float* %2578, align 1, !tbaa !2452
  %2114 = bitcast <2 x float> %2108 to <2 x i32>
  %2115 = extractelement <2 x i32> %2114, i32 1
  store i32 %2115, i32* %2088, align 1, !tbaa !2452
  %2116 = extractelement <2 x i32> %2109, i32 0
  store i32 %2116, i32* %2090, align 1, !tbaa !2452
  %2117 = extractelement <2 x i32> %2109, i32 1
  store i32 %2117, i32* %2092, align 1, !tbaa !2452
  %2118 = add i64 %2074, -36
  %2119 = add i64 %2076, 31
  store i64 %2119, i64* %PC, align 8
  %2120 = load <2 x float>, <2 x float>* %2095, align 1
  %2121 = load <2 x i32>, <2 x i32>* %2084, align 1
  %2122 = inttoptr i64 %2118 to float*
  %2123 = load float, float* %2122, align 4
  %2124 = extractelement <2 x float> %2120, i32 0
  %2125 = fmul float %2124, %2123
  store float %2125, float* %2578, align 1, !tbaa !2452
  %2126 = bitcast <2 x float> %2120 to <2 x i32>
  %2127 = extractelement <2 x i32> %2126, i32 1
  store i32 %2127, i32* %2088, align 1, !tbaa !2452
  %2128 = extractelement <2 x i32> %2121, i32 0
  store i32 %2128, i32* %2090, align 1, !tbaa !2452
  %2129 = extractelement <2 x i32> %2121, i32 1
  store i32 %2129, i32* %2092, align 1, !tbaa !2452
  %2130 = load <2 x float>, <2 x float>* %60, align 1
  %2131 = load <2 x i32>, <2 x i32>* %245, align 1
  %2132 = load <2 x float>, <2 x float>* %2095, align 1
  %2133 = extractelement <2 x float> %2130, i32 0
  %2134 = extractelement <2 x float> %2132, i32 0
  %2135 = fdiv float %2133, %2134
  store float %2135, float* %28, align 1, !tbaa !2452
  %2136 = bitcast <2 x float> %2130 to <2 x i32>
  %2137 = extractelement <2 x i32> %2136, i32 1
  store i32 %2137, i32* %252, align 1, !tbaa !2452
  %2138 = extractelement <2 x i32> %2131, i32 0
  store i32 %2138, i32* %254, align 1, !tbaa !2452
  %2139 = extractelement <2 x i32> %2131, i32 1
  store i32 %2139, i32* %256, align 1, !tbaa !2452
  %2140 = load i64, i64* %RBP, align 8
  %2141 = add i64 %2140, -32
  %2142 = add i64 %2076, 40
  store i64 %2142, i64* %PC, align 8
  %2143 = load <2 x float>, <2 x float>* %60, align 1
  %2144 = extractelement <2 x float> %2143, i32 0
  %2145 = inttoptr i64 %2141 to float*
  store float %2144, float* %2145, align 4
  %2146 = load i64, i64* %RBP, align 8
  %2147 = add i64 %2146, -36
  %2148 = load i64, i64* %PC, align 8
  %2149 = add i64 %2148, 5
  store i64 %2149, i64* %PC, align 8
  %2150 = inttoptr i64 %2147 to i32*
  %2151 = load i32, i32* %2150, align 4
  store i32 %2151, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  %2152 = add i64 %2146, -48
  %2153 = add i64 %2148, 10
  store i64 %2153, i64* %PC, align 8
  %2154 = load <2 x float>, <2 x float>* %60, align 1
  %2155 = extractelement <2 x float> %2154, i32 0
  %2156 = inttoptr i64 %2152 to float*
  store float %2155, float* %2156, align 4
  %2157 = load i64, i64* %PC, align 8
  %2158 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to i32*), align 16
  store i32 %2158, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2159 = load <2 x float>, <2 x float>* %60, align 1
  %2160 = load <2 x i32>, <2 x i32>* %245, align 1
  %2161 = load <2 x float>, <2 x float>* %2577, align 1
  %2162 = extractelement <2 x float> %2159, i32 0
  %2163 = extractelement <2 x float> %2161, i32 0
  %2164 = fsub float %2162, %2163
  store float %2164, float* %28, align 1, !tbaa !2452
  %2165 = bitcast <2 x float> %2159 to <2 x i32>
  %2166 = extractelement <2 x i32> %2165, i32 1
  store i32 %2166, i32* %252, align 1, !tbaa !2452
  %2167 = extractelement <2 x i32> %2160, i32 0
  store i32 %2167, i32* %254, align 1, !tbaa !2452
  %2168 = extractelement <2 x i32> %2160, i32 1
  store i32 %2168, i32* %256, align 1, !tbaa !2452
  %2169 = load i64, i64* %RBP, align 8
  %2170 = add i64 %2169, -52
  %2171 = add i64 %2157, 18
  store i64 %2171, i64* %PC, align 8
  %2172 = load <2 x float>, <2 x float>* %60, align 1
  %2173 = extractelement <2 x float> %2172, i32 0
  %2174 = inttoptr i64 %2170 to float*
  store float %2173, float* %2174, align 4
  %2175 = load i64, i64* %PC, align 8
  %2176 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2177 = add i32 %2176, -1
  %2178 = zext i32 %2177 to i64
  store i64 %2178, i64* %RAX, align 8, !tbaa !2428
  %2179 = icmp eq i32 %2176, 0
  %2180 = zext i1 %2179 to i8
  store i8 %2180, i8* %20, align 1, !tbaa !2432
  %2181 = and i32 %2177, 255
  %2182 = tail call i32 @llvm.ctpop.i32(i32 %2181) #8
  %2183 = trunc i32 %2182 to i8
  %2184 = and i8 %2183, 1
  %2185 = xor i8 %2184, 1
  store i8 %2185, i8* %21, align 1, !tbaa !2446
  %2186 = xor i32 %2176, %2177
  %2187 = lshr i32 %2186, 4
  %2188 = trunc i32 %2187 to i8
  %2189 = and i8 %2188, 1
  store i8 %2189, i8* %22, align 1, !tbaa !2450
  %2190 = icmp eq i32 %2177, 0
  %2191 = zext i1 %2190 to i8
  store i8 %2191, i8* %23, align 1, !tbaa !2447
  %2192 = lshr i32 %2177, 31
  %2193 = trunc i32 %2192 to i8
  store i8 %2193, i8* %24, align 1, !tbaa !2448
  %2194 = lshr i32 %2176, 31
  %2195 = xor i32 %2192, %2194
  %2196 = add nuw nsw i32 %2195, %2194
  %2197 = icmp eq i32 %2196, 2
  %2198 = zext i1 %2197 to i8
  store i8 %2198, i8* %25, align 1, !tbaa !2449
  %2199 = sext i32 %2177 to i64
  store i64 %2199, i64* %RCX, align 8, !tbaa !2428
  %2200 = shl nsw i64 %2199, 2
  %2201 = add i64 %2200, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2202 = add i64 %2175, 22
  store i64 %2202, i64* %PC, align 8
  %2203 = inttoptr i64 %2201 to i32*
  %2204 = load i32, i32* %2203, align 4
  store i32 %2204, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2205 = load <2 x float>, <2 x float>* %60, align 1
  %2206 = load <2 x i32>, <2 x i32>* %245, align 1
  %2207 = load <2 x float>, <2 x float>* %2577, align 1
  %2208 = extractelement <2 x float> %2205, i32 0
  %2209 = extractelement <2 x float> %2207, i32 0
  %2210 = fsub float %2208, %2209
  store float %2210, float* %28, align 1, !tbaa !2452
  %2211 = bitcast <2 x float> %2205 to <2 x i32>
  %2212 = extractelement <2 x i32> %2211, i32 1
  store i32 %2212, i32* %252, align 1, !tbaa !2452
  %2213 = extractelement <2 x i32> %2206, i32 0
  store i32 %2213, i32* %254, align 1, !tbaa !2452
  %2214 = extractelement <2 x i32> %2206, i32 1
  store i32 %2214, i32* %256, align 1, !tbaa !2452
  %2215 = load i64, i64* %RBP, align 8
  %2216 = add i64 %2215, -56
  %2217 = add i64 %2175, 31
  store i64 %2217, i64* %PC, align 8
  %2218 = load <2 x float>, <2 x float>* %60, align 1
  %2219 = extractelement <2 x float> %2218, i32 0
  %2220 = inttoptr i64 %2216 to float*
  store float %2219, float* %2220, align 4
  %2221 = load i64, i64* %PC, align 8
  %2222 = load i64, i64* @stderr, align 64
  store i64 %2222, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2223 = add i64 %2221, -1756
  %2224 = add i64 %2221, 15
  %2225 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2226 = add i64 %2225, -8
  %2227 = inttoptr i64 %2226 to i64*
  store i64 %2224, i64* %2227, align 8
  store i64 %2226, i64* %RSP, align 8, !tbaa !2428
  store i64 %2223, i64* %PC, align 8, !tbaa !2428
  %2228 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2065)
  %2229 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %2230 = load i64, i64* @stderr, align 64
  store i64 %2230, i64* %RDI, align 8, !tbaa !2428
  %2231 = load i64, i64* %RBP, align 8
  %2232 = add i64 %2231, -908
  %2233 = load i32, i32* %EAX, align 4
  %2234 = add i64 %2229, 24
  store i64 %2234, i64* %PC, align 8
  %2235 = inttoptr i64 %2232 to i32*
  store i32 %2233, i32* %2235, align 4
  %2236 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2237 = add i64 %2236, -1795
  %2238 = add i64 %2236, 7
  %2239 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2240 = add i64 %2239, -8
  %2241 = inttoptr i64 %2240 to i64*
  store i64 %2238, i64* %2241, align 8
  store i64 %2240, i64* %RSP, align 8, !tbaa !2428
  store i64 %2237, i64* %PC, align 8, !tbaa !2428
  %2242 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2228)
  %2243 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %2244 = load i64, i64* @stderr, align 64
  store i64 %2244, i64* %RDI, align 8, !tbaa !2428
  %2245 = load i64, i64* %RBP, align 8
  %2246 = add i64 %2245, -32
  %2247 = add i64 %2243, 23
  store i64 %2247, i64* %PC, align 8
  %2248 = inttoptr i64 %2246 to i32*
  %2249 = load i32, i32* %2248, align 4
  store i32 %2249, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2250 = load <2 x float>, <2 x float>* %60, align 1
  %2251 = extractelement <2 x float> %2250, i32 0
  %2252 = fpext float %2251 to double
  store double %2252, double* %192, align 1, !tbaa !2454
  %2253 = add i64 %2245, -28
  %2254 = add i64 %2243, 32
  store i64 %2254, i64* %PC, align 8
  %2255 = inttoptr i64 %2253 to i32*
  %2256 = load i32, i32* %2255, align 4
  store i32 %2256, i32* %2586, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2573, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2452
  %2257 = load <2 x float>, <2 x float>* %2577, align 1
  %2258 = extractelement <2 x float> %2257, i32 0
  %2259 = fpext float %2258 to double
  store double %2259, double* %196, align 1, !tbaa !2454
  %2260 = add i64 %2245, -48
  %2261 = add i64 %2243, 41
  store i64 %2261, i64* %PC, align 8
  %2262 = inttoptr i64 %2260 to i32*
  %2263 = load i32, i32* %2262, align 4
  %2264 = bitcast %union.VectorReg* %10 to i32*
  store i32 %2263, i32* %2264, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2580, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2582, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2584, align 1, !tbaa !2452
  %2265 = load <2 x float>, <2 x float>* %2095, align 1
  %2266 = extractelement <2 x float> %2265, i32 0
  %2267 = fpext float %2266 to double
  store double %2267, double* %210, align 1, !tbaa !2454
  %2268 = add i64 %2245, -52
  %2269 = add i64 %2243, 50
  store i64 %2269, i64* %PC, align 8
  %2270 = inttoptr i64 %2268 to i32*
  %2271 = load i32, i32* %2270, align 4
  %2272 = bitcast %union.VectorReg* %11 to float*
  store i32 %2271, i32* %214, align 1, !tbaa !2452
  %2273 = bitcast i8* %216 to float*
  store float 0.000000e+00, float* %2273, align 1, !tbaa !2452
  %2274 = bitcast i64* %218 to float*
  store float 0.000000e+00, float* %2274, align 1, !tbaa !2452
  %2275 = bitcast i8* %220 to float*
  store float 0.000000e+00, float* %2275, align 1, !tbaa !2452
  %2276 = bitcast %union.VectorReg* %11 to <2 x float>*
  %2277 = load <2 x float>, <2 x float>* %2276, align 1
  %2278 = extractelement <2 x float> %2277, i32 0
  %2279 = fpext float %2278 to double
  store double %2279, double* %222, align 1, !tbaa !2454
  %2280 = bitcast %union.VectorReg* %12 to i8*
  %2281 = add i64 %2245, -56
  %2282 = add i64 %2243, 59
  store i64 %2282, i64* %PC, align 8
  %2283 = inttoptr i64 %2281 to i32*
  %2284 = load i32, i32* %2283, align 4
  %2285 = bitcast %union.VectorReg* %12 to i32*
  store i32 %2284, i32* %2285, align 1, !tbaa !2452
  %2286 = getelementptr inbounds i8, i8* %2280, i64 4
  %2287 = bitcast i8* %2286 to float*
  store float 0.000000e+00, float* %2287, align 1, !tbaa !2452
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4, i32 0, i32 0, i32 0, i64 1
  %2289 = bitcast i64* %2288 to float*
  store float 0.000000e+00, float* %2289, align 1, !tbaa !2452
  %2290 = getelementptr inbounds i8, i8* %2280, i64 12
  %2291 = bitcast i8* %2290 to float*
  store float 0.000000e+00, float* %2291, align 1, !tbaa !2452
  %2292 = bitcast %union.VectorReg* %12 to <2 x float>*
  %2293 = load <2 x float>, <2 x float>* %2292, align 1
  %2294 = extractelement <2 x float> %2293, i32 0
  %2295 = fpext float %2294 to double
  %2296 = bitcast %union.VectorReg* %12 to double*
  store double %2295, double* %2296, align 1, !tbaa !2454
  %2297 = add i64 %2245, -912
  %2298 = load i32, i32* %EAX, align 4
  %2299 = add i64 %2243, 69
  store i64 %2299, i64* %PC, align 8
  %2300 = inttoptr i64 %2297 to i32*
  store i32 %2298, i32* %2300, align 4
  %2301 = load i64, i64* %PC, align 8
  store i8 5, i8* %AL, align 1, !tbaa !2456
  %2302 = add i64 %2301, -1871
  %2303 = add i64 %2301, 7
  %2304 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2305 = add i64 %2304, -8
  %2306 = inttoptr i64 %2305 to i64*
  store i64 %2303, i64* %2306, align 8
  store i64 %2305, i64* %RSP, align 8, !tbaa !2428
  store i64 %2302, i64* %PC, align 8, !tbaa !2428
  %2307 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2242)
  %2308 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %2309 = load i64, i64* @stderr, align 64
  store i64 %2309, i64* %RDI, align 8, !tbaa !2428
  %2310 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2311 = zext i32 %2310 to i64
  store i64 %2311, i64* %RDX, align 8, !tbaa !2428
  %2312 = load i64, i64* %RBP, align 8
  %2313 = add i64 %2312, -916
  %2314 = load i32, i32* %EAX, align 4
  %2315 = add i64 %2308, 31
  store i64 %2315, i64* %PC, align 8
  %2316 = inttoptr i64 %2313 to i32*
  store i32 %2314, i32* %2316, align 4
  %2317 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2318 = add i64 %2317, -1909
  %2319 = add i64 %2317, 7
  %2320 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2321 = add i64 %2320, -8
  %2322 = inttoptr i64 %2321 to i64*
  store i64 %2319, i64* %2322, align 8
  store i64 %2321, i64* %RSP, align 8, !tbaa !2428
  store i64 %2318, i64* %PC, align 8, !tbaa !2428
  %2323 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2307)
  %2324 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %2325 = load i64, i64* @stderr, align 64
  store i64 %2325, i64* %RDI, align 8, !tbaa !2428
  %2326 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2327 = zext i32 %2326 to i64
  store i64 %2327, i64* %RDX, align 8, !tbaa !2428
  %2328 = load i64, i64* %RBP, align 8
  %2329 = add i64 %2328, -920
  %2330 = load i32, i32* %EAX, align 4
  %2331 = add i64 %2324, 31
  store i64 %2331, i64* %PC, align 8
  %2332 = inttoptr i64 %2329 to i32*
  store i32 %2330, i32* %2332, align 4
  %2333 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2334 = add i64 %2333, -1947
  %2335 = add i64 %2333, 7
  %2336 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2337 = add i64 %2336, -8
  %2338 = inttoptr i64 %2337 to i64*
  store i64 %2335, i64* %2338, align 8
  store i64 %2337, i64* %RSP, align 8, !tbaa !2428
  store i64 %2334, i64* %PC, align 8, !tbaa !2428
  %2339 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2323)
  %2340 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %2341 = load i64, i64* @stderr, align 64
  store i64 %2341, i64* %RDI, align 8, !tbaa !2428
  %2342 = load i64, i64* %RBP, align 8
  %2343 = add i64 %2342, -924
  %2344 = load i32, i32* %EAX, align 4
  %2345 = add i64 %2340, 24
  store i64 %2345, i64* %PC, align 8
  %2346 = inttoptr i64 %2343 to i32*
  store i32 %2344, i32* %2346, align 4
  %2347 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2348 = add i64 %2347, -1978
  %2349 = add i64 %2347, 7
  %2350 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2351 = add i64 %2350, -8
  %2352 = inttoptr i64 %2351 to i64*
  store i64 %2349, i64* %2352, align 8
  store i64 %2351, i64* %RSP, align 8, !tbaa !2428
  store i64 %2348, i64* %PC, align 8, !tbaa !2428
  %2353 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2339)
  %2354 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %2355 = load i64, i64* @stderr, align 64
  store i64 %2355, i64* %RDI, align 8, !tbaa !2428
  %2356 = load i64, i64* %RBP, align 8
  %2357 = add i64 %2356, -928
  %2358 = load i32, i32* %EAX, align 4
  %2359 = add i64 %2354, 24
  store i64 %2359, i64* %PC, align 8
  %2360 = inttoptr i64 %2357 to i32*
  store i32 %2358, i32* %2360, align 4
  %2361 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2362 = add i64 %2361, -2009
  %2363 = add i64 %2361, 7
  %2364 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2365 = add i64 %2364, -8
  %2366 = inttoptr i64 %2365 to i64*
  store i64 %2363, i64* %2366, align 8
  store i64 %2365, i64* %RSP, align 8, !tbaa !2428
  store i64 %2362, i64* %PC, align 8, !tbaa !2428
  %2367 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2353)
  %2368 = load i64, i64* %PC, align 8
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %2369 = load i64, i64* %RBP, align 8
  %2370 = add i64 %2369, -16
  %2371 = add i64 %2368, 8
  store i64 %2371, i64* %PC, align 8
  %2372 = inttoptr i64 %2370 to i32*
  %2373 = load i32, i32* %2372, align 4
  store i32 %2373, i32* %2586, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2573, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2452
  %2374 = load <2 x float>, <2 x float>* %2577, align 1
  %2375 = extractelement <2 x float> %2374, i32 0
  store float %2375, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*), align 8
  %2376 = add i64 %2368, 22
  store i64 %2376, i64* %PC, align 8
  %2377 = load i32, i32* %2372, align 4
  store i32 %2377, i32* %2586, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2573, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2452
  %2378 = load <2 x float>, <2 x float>* %2577, align 1
  %2379 = extractelement <2 x float> %2378, i32 0
  %2380 = fpext float %2379 to double
  store double %2380, double* %196, align 1, !tbaa !2454
  %2381 = add i64 %2368, 30
  store i64 %2381, i64* %PC, align 8
  %2382 = load double, double* %192, align 1
  %2383 = fcmp uno double %2380, %2382
  br i1 %2383, label %2384, label %2394

; <label>:2384:                                   ; preds = %block_400b15
  %2385 = fadd double %2380, %2382
  %2386 = bitcast double %2385 to i64
  %2387 = and i64 %2386, 9221120237041090560
  %2388 = icmp eq i64 %2387, 9218868437227405312
  %2389 = and i64 %2386, 2251799813685247
  %2390 = icmp ne i64 %2389, 0
  %2391 = and i1 %2388, %2390
  br i1 %2391, label %2392, label %2400

; <label>:2392:                                   ; preds = %2384
  %2393 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2381, %struct.Memory* %2367) #9
  %.pre17 = load i64, i64* %RBP, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:2394:                                   ; preds = %block_400b15
  %2395 = fcmp ogt double %2380, %2382
  br i1 %2395, label %2400, label %2396

; <label>:2396:                                   ; preds = %2394
  %2397 = fcmp olt double %2380, %2382
  br i1 %2397, label %2400, label %2398

; <label>:2398:                                   ; preds = %2396
  %2399 = fcmp oeq double %2380, %2382
  br i1 %2399, label %2400, label %2404

; <label>:2400:                                   ; preds = %2398, %2396, %2394, %2384
  %2401 = phi i8 [ 0, %2394 ], [ 0, %2396 ], [ 1, %2398 ], [ 1, %2384 ]
  %2402 = phi i8 [ 0, %2394 ], [ 0, %2396 ], [ 0, %2398 ], [ 1, %2384 ]
  %2403 = phi i8 [ 0, %2394 ], [ 1, %2396 ], [ 0, %2398 ], [ 1, %2384 ]
  store i8 %2401, i8* %23, align 1, !tbaa !2456
  store i8 %2402, i8* %21, align 1, !tbaa !2456
  store i8 %2403, i8* %20, align 1, !tbaa !2456
  br label %2404

; <label>:2404:                                   ; preds = %2400, %2398
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %24, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %2404, %2392
  %2405 = phi i64 [ %.pre18, %2392 ], [ %2381, %2404 ]
  %2406 = phi i64 [ %.pre17, %2392 ], [ %2369, %2404 ]
  %2407 = phi %struct.Memory* [ %2393, %2392 ], [ %2367, %2404 ]
  %2408 = add i64 %2406, -932
  %2409 = load i32, i32* %EAX, align 4
  %2410 = add i64 %2405, 6
  store i64 %2410, i64* %PC, align 8
  %2411 = inttoptr i64 %2408 to i32*
  store i32 %2409, i32* %2411, align 4
  %2412 = load i64, i64* %PC, align 8
  %2413 = load i8, i8* %20, align 1, !tbaa !2432
  %2414 = load i8, i8* %23, align 1, !tbaa !2447
  %2415 = or i8 %2414, %2413
  %2416 = icmp ne i8 %2415, 0
  %.v32 = select i1 %2416, i64 96, i64 6
  %2417 = add i64 %2412, %.v32
  store i64 %2417, i64* %PC, align 8, !tbaa !2428
  br i1 %2416, label %block_400d24, label %block_400cca

block_40093d:                                     ; preds = %block_400907, %block_400951
  %2418 = phi i32 [ 0, %block_400907 ], [ %729, %block_400951 ]
  %2419 = phi i64 [ %3100, %block_400907 ], [ %752, %block_400951 ]
  %2420 = zext i32 %2418 to i64
  store i64 %2420, i64* %RAX, align 8, !tbaa !2428
  %2421 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2422 = sub i32 %2418, %2421
  %2423 = icmp ult i32 %2418, %2421
  %2424 = zext i1 %2423 to i8
  store i8 %2424, i8* %20, align 1, !tbaa !2432
  %2425 = and i32 %2422, 255
  %2426 = tail call i32 @llvm.ctpop.i32(i32 %2425) #8
  %2427 = trunc i32 %2426 to i8
  %2428 = and i8 %2427, 1
  %2429 = xor i8 %2428, 1
  store i8 %2429, i8* %21, align 1, !tbaa !2446
  %2430 = xor i32 %2421, %2418
  %2431 = xor i32 %2430, %2422
  %2432 = lshr i32 %2431, 4
  %2433 = trunc i32 %2432 to i8
  %2434 = and i8 %2433, 1
  store i8 %2434, i8* %22, align 1, !tbaa !2450
  %2435 = icmp eq i32 %2422, 0
  %2436 = zext i1 %2435 to i8
  store i8 %2436, i8* %23, align 1, !tbaa !2447
  %2437 = lshr i32 %2422, 31
  %2438 = trunc i32 %2437 to i8
  store i8 %2438, i8* %24, align 1, !tbaa !2448
  %2439 = lshr i32 %2418, 31
  %2440 = lshr i32 %2421, 31
  %2441 = xor i32 %2440, %2439
  %2442 = xor i32 %2437, %2439
  %2443 = add nuw nsw i32 %2442, %2441
  %2444 = icmp eq i32 %2443, 2
  %2445 = zext i1 %2444 to i8
  store i8 %2445, i8* %25, align 1, !tbaa !2449
  %2446 = icmp ne i8 %2438, 0
  %2447 = xor i1 %2446, %2444
  %.v28 = select i1 %2447, i64 20, i64 90
  %2448 = add i64 %2419, %.v28
  store i64 %2448, i64* %PC, align 8, !tbaa !2428
  br i1 %2447, label %block_400951, label %block_400997

block_400d9e:                                     ; preds = %block_400d80, %block_400dae
  %2449 = phi i32 [ 0, %block_400d80 ], [ %2770, %block_400dae ]
  %2450 = phi i64 [ %3260, %block_400d80 ], [ %2793, %block_400dae ]
  %MEMORY.12 = phi %struct.Memory* [ %3221, %block_400d80 ], [ %2767, %block_400dae ]
  %2451 = zext i32 %2449 to i64
  store i64 %2451, i64* %RAX, align 8, !tbaa !2428
  %2452 = load i64, i64* %RBP, align 8
  %2453 = add i64 %2452, -68
  %2454 = add i64 %2450, 10
  store i64 %2454, i64* %PC, align 8
  %2455 = inttoptr i64 %2453 to i32*
  %2456 = load i32, i32* %2455, align 4
  %2457 = sub i32 %2449, %2456
  %2458 = icmp ult i32 %2449, %2456
  %2459 = zext i1 %2458 to i8
  store i8 %2459, i8* %20, align 1, !tbaa !2432
  %2460 = and i32 %2457, 255
  %2461 = tail call i32 @llvm.ctpop.i32(i32 %2460) #8
  %2462 = trunc i32 %2461 to i8
  %2463 = and i8 %2462, 1
  %2464 = xor i8 %2463, 1
  store i8 %2464, i8* %21, align 1, !tbaa !2446
  %2465 = xor i32 %2456, %2449
  %2466 = xor i32 %2465, %2457
  %2467 = lshr i32 %2466, 4
  %2468 = trunc i32 %2467 to i8
  %2469 = and i8 %2468, 1
  store i8 %2469, i8* %22, align 1, !tbaa !2450
  %2470 = icmp eq i32 %2457, 0
  %2471 = zext i1 %2470 to i8
  store i8 %2471, i8* %23, align 1, !tbaa !2447
  %2472 = lshr i32 %2457, 31
  %2473 = trunc i32 %2472 to i8
  store i8 %2473, i8* %24, align 1, !tbaa !2448
  %2474 = lshr i32 %2449, 31
  %2475 = lshr i32 %2456, 31
  %2476 = xor i32 %2475, %2474
  %2477 = xor i32 %2472, %2474
  %2478 = add nuw nsw i32 %2477, %2476
  %2479 = icmp eq i32 %2478, 2
  %2480 = zext i1 %2479 to i8
  store i8 %2480, i8* %25, align 1, !tbaa !2449
  %2481 = icmp ne i8 %2473, 0
  %2482 = xor i1 %2481, %2479
  %.v33 = select i1 %2482, i64 16, i64 81
  %2483 = add i64 %2450, %.v33
  store i64 %2483, i64* %PC, align 8, !tbaa !2428
  br i1 %2482, label %block_400dae, label %block_400def

block_400ee0:                                     ; preds = %block_400ef4, %block_400ec2
  %2484 = phi i32 [ 0, %block_400ec2 ], [ %2615, %block_400ef4 ]
  %2485 = phi i64 [ %1599, %block_400ec2 ], [ %2638, %block_400ef4 ]
  %MEMORY.13 = phi %struct.Memory* [ %1560, %block_400ec2 ], [ %2612, %block_400ef4 ]
  %2486 = zext i32 %2484 to i64
  store i64 %2486, i64* %RAX, align 8, !tbaa !2428
  %2487 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2488 = sub i32 %2484, %2487
  %2489 = icmp ult i32 %2484, %2487
  %2490 = zext i1 %2489 to i8
  store i8 %2490, i8* %20, align 1, !tbaa !2432
  %2491 = and i32 %2488, 255
  %2492 = tail call i32 @llvm.ctpop.i32(i32 %2491) #8
  %2493 = trunc i32 %2492 to i8
  %2494 = and i8 %2493, 1
  %2495 = xor i8 %2494, 1
  store i8 %2495, i8* %21, align 1, !tbaa !2446
  %2496 = xor i32 %2487, %2484
  %2497 = xor i32 %2496, %2488
  %2498 = lshr i32 %2497, 4
  %2499 = trunc i32 %2498 to i8
  %2500 = and i8 %2499, 1
  store i8 %2500, i8* %22, align 1, !tbaa !2450
  %2501 = icmp eq i32 %2488, 0
  %2502 = zext i1 %2501 to i8
  store i8 %2502, i8* %23, align 1, !tbaa !2447
  %2503 = lshr i32 %2488, 31
  %2504 = trunc i32 %2503 to i8
  store i8 %2504, i8* %24, align 1, !tbaa !2448
  %2505 = lshr i32 %2484, 31
  %2506 = lshr i32 %2487, 31
  %2507 = xor i32 %2506, %2505
  %2508 = xor i32 %2503, %2505
  %2509 = add nuw nsw i32 %2508, %2507
  %2510 = icmp eq i32 %2509, 2
  %2511 = zext i1 %2510 to i8
  store i8 %2511, i8* %25, align 1, !tbaa !2449
  %2512 = icmp ne i8 %2504, 0
  %2513 = xor i1 %2512, %2510
  %.v36 = select i1 %2513, i64 20, i64 134
  %2514 = add i64 %2485, %.v36
  store i64 %2514, i64* %PC, align 8, !tbaa !2428
  br i1 %2513, label %block_400ef4, label %block_400f66

block_400a44:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %2515 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2516 = sext i32 %2515 to i64
  store i64 %2516, i64* %RAX, align 8, !tbaa !2428
  %2517 = shl nsw i64 %2516, 2
  %2518 = add i64 %2517, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2519 = add i64 %2756, 17
  store i64 %2519, i64* %PC, align 8
  %2520 = inttoptr i64 %2518 to i32*
  %2521 = load i32, i32* %2520, align 4
  store i32 %2521, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2522 = load <2 x float>, <2 x float>* %60, align 1
  %2523 = extractelement <2 x float> %2522, i32 0
  %2524 = fpext float %2523 to double
  %2525 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %2526 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %2527 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %2528 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %2525, i32* %2586, align 1, !tbaa !2452
  store i32 %2526, i32* %2587, align 1, !tbaa !2452
  store i32 %2527, i32* %2588, align 1, !tbaa !2452
  store i32 %2528, i32* %2589, align 1, !tbaa !2452
  %2529 = bitcast double %2524 to i64
  %2530 = load i64, i64* %32, align 1
  %2531 = load i64, i64* %197, align 1
  %2532 = load i64, i64* %198, align 1
  %2533 = and i64 %2531, %2529
  %2534 = and i64 %2532, %2530
  %2535 = trunc i64 %2533 to i32
  %2536 = lshr i64 %2533, 32
  %2537 = trunc i64 %2536 to i32
  store i32 %2535, i32* %29, align 1, !tbaa !2451
  store i32 %2537, i32* %252, align 1, !tbaa !2451
  %2538 = trunc i64 %2534 to i32
  store i32 %2538, i32* %254, align 1, !tbaa !2451
  %2539 = lshr i64 %2534, 32
  %2540 = trunc i64 %2539 to i32
  store i32 %2540, i32* %256, align 1, !tbaa !2451
  %2541 = load i64, i64* %RBP, align 8
  %2542 = add i64 %2541, -896
  %2543 = add i64 %2756, 40
  store i64 %2543, i64* %PC, align 8
  %2544 = load i64, i64* %3101, align 1
  %2545 = inttoptr i64 %2542 to i64*
  store i64 %2544, i64* %2545, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_400a6c

block_400997:                                     ; preds = %block_40093d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %2546 = zext i32 %2421 to i64
  store i64 %2546, i64* %RDI, align 8, !tbaa !2428
  store i64 %2546, i64* %RDX, align 8, !tbaa !2428
  %2547 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2548 = zext i32 %2547 to i64
  store i64 %2548, i64* %RCX, align 8, !tbaa !2428
  %2549 = add i64 %2448, 5753
  %2550 = add i64 %2448, 56
  %2551 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2552 = add i64 %2551, -8
  %2553 = inttoptr i64 %2552 to i64*
  store i64 %2550, i64* %2553, align 8
  store i64 %2552, i64* %RSP, align 8, !tbaa !2428
  store i64 %2549, i64* %PC, align 8, !tbaa !2428
  %2554 = tail call %struct.Memory* @sub_402010_dmxpy_renamed_(%struct.State* nonnull %0, i64 %2549, %struct.Memory* %3098)
  %2555 = load i64, i64* %PC, align 8
  store i32 0, i32* %29, align 1, !tbaa !2451
  store i32 0, i32* %252, align 1, !tbaa !2451
  store i32 0, i32* %254, align 1, !tbaa !2451
  store i32 0, i32* %256, align 1, !tbaa !2451
  %2556 = load i64, i64* %RBP, align 8
  %2557 = add i64 %2556, -28
  %2558 = add i64 %2555, 8
  store i64 %2558, i64* %PC, align 8
  %2559 = load <2 x float>, <2 x float>* %60, align 1
  %2560 = extractelement <2 x float> %2559, i32 0
  %2561 = inttoptr i64 %2557 to float*
  store float %2560, float* %2561, align 4
  %2562 = load i64, i64* %RBP, align 8
  %2563 = add i64 %2562, -24
  %2564 = load i64, i64* %PC, align 8
  %2565 = add i64 %2564, 5
  store i64 %2565, i64* %PC, align 8
  %2566 = load <2 x float>, <2 x float>* %60, align 1
  %2567 = extractelement <2 x float> %2566, i32 0
  %2568 = inttoptr i64 %2563 to float*
  store float %2567, float* %2568, align 4
  %2569 = load i64, i64* %PC, align 8
  %2570 = add i64 %2569, 11
  store i64 %2570, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2571 = bitcast %union.VectorReg* %9 to float*
  %2572 = getelementptr inbounds i8, i8* %194, i64 4
  %2573 = bitcast i8* %2572 to float*
  %2574 = bitcast i64* %198 to float*
  %2575 = getelementptr inbounds i8, i8* %194, i64 12
  %2576 = bitcast i8* %2575 to float*
  %2577 = bitcast %union.VectorReg* %9 to <2 x float>*
  %2578 = bitcast %union.VectorReg* %10 to float*
  %2579 = getelementptr inbounds i8, i8* %207, i64 4
  %2580 = bitcast i8* %2579 to float*
  %2581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %2582 = bitcast i64* %2581 to float*
  %2583 = getelementptr inbounds i8, i8* %207, i64 12
  %2584 = bitcast i8* %2583 to float*
  %2585 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  %2586 = bitcast %union.VectorReg* %9 to i32*
  %2587 = bitcast i8* %2572 to i32*
  %2588 = bitcast i64* %198 to i32*
  %2589 = bitcast i8* %2575 to i32*
  br label %block_4009e7

block_400ef4:                                     ; preds = %block_400ee0
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2590 = load i64, i64* %RBP, align 8
  %2591 = add i64 %2590, -20
  store i64 %2591, i64* %R8, align 8, !tbaa !2428
  %2592 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2593 = zext i32 %2592 to i64
  store i64 %2593, i64* %RSI, align 8, !tbaa !2428
  %2594 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2595 = zext i32 %2594 to i64
  store i64 %2595, i64* %RDX, align 8, !tbaa !2428
  %2596 = add i64 %2514, 2236
  %2597 = add i64 %2514, 43
  %2598 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2599 = add i64 %2598, -8
  %2600 = inttoptr i64 %2599 to i64*
  store i64 %2597, i64* %2600, align 8
  store i64 %2599, i64* %RSP, align 8, !tbaa !2428
  store i64 %2596, i64* %PC, align 8, !tbaa !2428
  %2601 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2596, %struct.Memory* %MEMORY.13)
  %2602 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2603 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2604 = zext i32 %2603 to i64
  store i64 %2604, i64* %RSI, align 8, !tbaa !2428
  %2605 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2606 = zext i32 %2605 to i64
  store i64 %2606, i64* %RDX, align 8, !tbaa !2428
  %2607 = add i64 %2602, 2657
  %2608 = add i64 %2602, 49
  %2609 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2610 = add i64 %2609, -8
  %2611 = inttoptr i64 %2610 to i64*
  store i64 %2608, i64* %2611, align 8
  store i64 %2610, i64* %RSP, align 8, !tbaa !2428
  store i64 %2607, i64* %PC, align 8, !tbaa !2428
  %2612 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %2607, %struct.Memory* %2601)
  %2613 = load i64, i64* %PC, align 8
  %2614 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2615 = add i32 %2614, 1
  %2616 = zext i32 %2615 to i64
  store i64 %2616, i64* %RAX, align 8, !tbaa !2428
  %2617 = icmp eq i32 %2614, -1
  %2618 = icmp eq i32 %2615, 0
  %2619 = or i1 %2617, %2618
  %2620 = zext i1 %2619 to i8
  store i8 %2620, i8* %20, align 1, !tbaa !2432
  %2621 = and i32 %2615, 255
  %2622 = tail call i32 @llvm.ctpop.i32(i32 %2621) #8
  %2623 = trunc i32 %2622 to i8
  %2624 = and i8 %2623, 1
  %2625 = xor i8 %2624, 1
  store i8 %2625, i8* %21, align 1, !tbaa !2446
  %2626 = xor i32 %2614, %2615
  %2627 = lshr i32 %2626, 4
  %2628 = trunc i32 %2627 to i8
  %2629 = and i8 %2628, 1
  store i8 %2629, i8* %22, align 1, !tbaa !2450
  %2630 = zext i1 %2618 to i8
  store i8 %2630, i8* %23, align 1, !tbaa !2447
  %2631 = lshr i32 %2615, 31
  %2632 = trunc i32 %2631 to i8
  store i8 %2632, i8* %24, align 1, !tbaa !2448
  %2633 = lshr i32 %2614, 31
  %2634 = xor i32 %2631, %2633
  %2635 = add nuw nsw i32 %2634, %2631
  %2636 = icmp eq i32 %2635, 2
  %2637 = zext i1 %2636 to i8
  store i8 %2637, i8* %25, align 1, !tbaa !2449
  store i32 %2615, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2638 = add i64 %2613, -112
  store i64 %2638, i64* %PC, align 8, !tbaa !2428
  br label %block_400ee0

block_4008bb:                                     ; preds = %block_4008cf, %block_400610
  %2639 = phi i32 [ %2971, %block_4008cf ], [ 0, %block_400610 ]
  %2640 = phi i64 [ %2994, %block_4008cf ], [ %387, %block_400610 ]
  %2641 = zext i32 %2639 to i64
  store i64 %2641, i64* %RAX, align 8, !tbaa !2428
  %2642 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2643 = sub i32 %2639, %2642
  %2644 = icmp ult i32 %2639, %2642
  %2645 = zext i1 %2644 to i8
  store i8 %2645, i8* %20, align 1, !tbaa !2432
  %2646 = and i32 %2643, 255
  %2647 = tail call i32 @llvm.ctpop.i32(i32 %2646) #8
  %2648 = trunc i32 %2647 to i8
  %2649 = and i8 %2648, 1
  %2650 = xor i8 %2649, 1
  store i8 %2650, i8* %21, align 1, !tbaa !2446
  %2651 = xor i32 %2642, %2639
  %2652 = xor i32 %2651, %2643
  %2653 = lshr i32 %2652, 4
  %2654 = trunc i32 %2653 to i8
  %2655 = and i8 %2654, 1
  store i8 %2655, i8* %22, align 1, !tbaa !2450
  %2656 = icmp eq i32 %2643, 0
  %2657 = zext i1 %2656 to i8
  store i8 %2657, i8* %23, align 1, !tbaa !2447
  %2658 = lshr i32 %2643, 31
  %2659 = trunc i32 %2658 to i8
  store i8 %2659, i8* %24, align 1, !tbaa !2448
  %2660 = lshr i32 %2639, 31
  %2661 = lshr i32 %2642, 31
  %2662 = xor i32 %2661, %2660
  %2663 = xor i32 %2658, %2660
  %2664 = add nuw nsw i32 %2663, %2662
  %2665 = icmp eq i32 %2664, 2
  %2666 = zext i1 %2665 to i8
  store i8 %2666, i8* %25, align 1, !tbaa !2449
  %2667 = icmp ne i8 %2659, 0
  %2668 = xor i1 %2667, %2665
  %.v = select i1 %2668, i64 20, i64 76
  %2669 = add i64 %2640, %.v
  store i64 %2669, i64* %PC, align 8, !tbaa !2428
  br i1 %2668, label %block_4008cf, label %block_400907

block_400e43:                                     ; preds = %block_400def, %block_400e3a
  %2670 = phi i64 [ %.pre21, %block_400e3a ], [ %469, %block_400def ]
  %2671 = load i64, i64* %RBP, align 8
  %2672 = add i64 %2671, -64
  %2673 = add i64 %2670, 9
  store i64 %2673, i64* %PC, align 8
  %2674 = inttoptr i64 %2672 to i32*
  %2675 = load i32, i32* %2674, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %2676 = and i32 %2675, 255
  %2677 = tail call i32 @llvm.ctpop.i32(i32 %2676) #8
  %2678 = trunc i32 %2677 to i8
  %2679 = and i8 %2678, 1
  %2680 = xor i8 %2679, 1
  store i8 %2680, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %22, align 1, !tbaa !2450
  %2681 = icmp eq i32 %2675, 0
  %2682 = zext i1 %2681 to i8
  store i8 %2682, i8* %23, align 1, !tbaa !2447
  %2683 = lshr i32 %2675, 31
  %2684 = trunc i32 %2683 to i8
  store i8 %2684, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %25, align 1, !tbaa !2449
  %2685 = icmp ne i8 %2684, 0
  %.v35 = select i1 %2685, i64 -195, i64 15
  %2686 = add i64 %2670, %.v35
  store i64 %2686, i64* %PC, align 8, !tbaa !2428
  br i1 %2685, label %block_400d80, label %block_400e52

block_4009fb:                                     ; preds = %block_4009e7
  %2687 = load i64, i64* %RBP, align 8
  %2688 = add i64 %2687, -28
  %2689 = add i64 %2004, 5
  store i64 %2689, i64* %PC, align 8
  %2690 = inttoptr i64 %2688 to i32*
  %2691 = load i32, i32* %2690, align 4
  store i32 %2691, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2692 = load <2 x float>, <2 x float>* %60, align 1
  %2693 = extractelement <2 x float> %2692, i32 0
  %2694 = fpext float %2693 to double
  store double %2694, double* %192, align 1, !tbaa !2454
  %2695 = sext i32 %1974 to i64
  store i64 %2695, i64* %RAX, align 8, !tbaa !2428
  %2696 = shl nsw i64 %2695, 2
  %2697 = add i64 %2696, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2698 = add i64 %2004, 26
  store i64 %2698, i64* %PC, align 8
  %2699 = inttoptr i64 %2697 to i32*
  %2700 = load i32, i32* %2699, align 4
  store i32 %2700, i32* %2586, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2573, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2452
  %2701 = load <2 x float>, <2 x float>* %2577, align 1
  %2702 = extractelement <2 x float> %2701, i32 0
  %2703 = fpext float %2702 to double
  %2704 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %2705 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %2706 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %2707 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  %2708 = bitcast %union.VectorReg* %10 to i32*
  store i32 %2704, i32* %2708, align 1, !tbaa !2452
  %2709 = bitcast i8* %2579 to i32*
  store i32 %2705, i32* %2709, align 1, !tbaa !2452
  %2710 = bitcast i64* %2581 to i32*
  store i32 %2706, i32* %2710, align 1, !tbaa !2452
  %2711 = bitcast i8* %2583 to i32*
  store i32 %2707, i32* %2711, align 1, !tbaa !2452
  %2712 = bitcast double %2703 to i64
  %2713 = load i64, i64* %198, align 1
  %2714 = load i64, i64* %2585, align 1
  %2715 = load i64, i64* %2581, align 1
  %2716 = and i64 %2714, %2712
  %2717 = and i64 %2715, %2713
  %2718 = trunc i64 %2716 to i32
  %2719 = lshr i64 %2716, 32
  %2720 = trunc i64 %2719 to i32
  store i32 %2718, i32* %2586, align 1, !tbaa !2451
  store i32 %2720, i32* %2587, align 1, !tbaa !2451
  %2721 = trunc i64 %2717 to i32
  store i32 %2721, i32* %2588, align 1, !tbaa !2451
  %2722 = lshr i64 %2717, 32
  %2723 = trunc i64 %2722 to i32
  store i32 %2723, i32* %2589, align 1, !tbaa !2451
  %2724 = add i64 %2004, 45
  store i64 %2724, i64* %PC, align 8
  %2725 = load double, double* %196, align 1
  %2726 = fcmp uno double %2694, %2725
  br i1 %2726, label %2727, label %2737

; <label>:2727:                                   ; preds = %block_4009fb
  %2728 = fadd double %2694, %2725
  %2729 = bitcast double %2728 to i64
  %2730 = and i64 %2729, 9221120237041090560
  %2731 = icmp eq i64 %2730, 9218868437227405312
  %2732 = and i64 %2729, 2251799813685247
  %2733 = icmp ne i64 %2732, 0
  %2734 = and i1 %2731, %2733
  br i1 %2734, label %2735, label %2743

; <label>:2735:                                   ; preds = %2727
  %2736 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2724, %struct.Memory* %MEMORY.10) #9
  %.pre = load i64, i64* %PC, align 8
  %.pre12 = load i8, i8* %20, align 1, !tbaa !2432
  %.pre13 = load i8, i8* %23, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:2737:                                   ; preds = %block_4009fb
  %2738 = fcmp ogt double %2694, %2725
  br i1 %2738, label %2743, label %2739

; <label>:2739:                                   ; preds = %2737
  %2740 = fcmp olt double %2694, %2725
  br i1 %2740, label %2743, label %2741

; <label>:2741:                                   ; preds = %2739
  %2742 = fcmp oeq double %2694, %2725
  br i1 %2742, label %2743, label %2747

; <label>:2743:                                   ; preds = %2741, %2739, %2737, %2727
  %2744 = phi i8 [ 0, %2737 ], [ 0, %2739 ], [ 1, %2741 ], [ 1, %2727 ]
  %2745 = phi i8 [ 0, %2737 ], [ 0, %2739 ], [ 0, %2741 ], [ 1, %2727 ]
  %2746 = phi i8 [ 0, %2737 ], [ 1, %2739 ], [ 0, %2741 ], [ 1, %2727 ]
  store i8 %2744, i8* %23, align 1, !tbaa !2456
  store i8 %2745, i8* %21, align 1, !tbaa !2456
  store i8 %2746, i8* %20, align 1, !tbaa !2456
  br label %2747

; <label>:2747:                                   ; preds = %2743, %2741
  %2748 = phi i8 [ %2744, %2743 ], [ %1992, %2741 ]
  %2749 = phi i8 [ %2746, %2743 ], [ %1980, %2741 ]
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %24, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %2747, %2735
  %2750 = phi i8 [ %.pre13, %2735 ], [ %2748, %2747 ]
  %2751 = phi i8 [ %.pre12, %2735 ], [ %2749, %2747 ]
  %2752 = phi i64 [ %.pre, %2735 ], [ %2724, %2747 ]
  %2753 = phi %struct.Memory* [ %2736, %2735 ], [ %MEMORY.10, %2747 ]
  %2754 = or i8 %2750, %2751
  %2755 = icmp ne i8 %2754, 0
  %.v30 = select i1 %2755, i64 28, i64 6
  %2756 = add i64 %2752, %.v30
  store i64 %2756, i64* %PC, align 8, !tbaa !2428
  br i1 %2755, label %block_400a44, label %block_400a2e

block_400dae:                                     ; preds = %block_400d9e
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2757 = add i64 %2452, -20
  store i64 %2757, i64* %R8, align 8, !tbaa !2428
  %2758 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2759 = zext i32 %2758 to i64
  store i64 %2759, i64* %RSI, align 8, !tbaa !2428
  %2760 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2761 = zext i32 %2760 to i64
  store i64 %2761, i64* %RDX, align 8, !tbaa !2428
  %2762 = add i64 %2483, 2562
  %2763 = add i64 %2483, 43
  %2764 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2765 = add i64 %2764, -8
  %2766 = inttoptr i64 %2765 to i64*
  store i64 %2763, i64* %2766, align 8
  store i64 %2765, i64* %RSP, align 8, !tbaa !2428
  store i64 %2762, i64* %PC, align 8, !tbaa !2428
  %2767 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2762, %struct.Memory* %MEMORY.12)
  %2768 = load i64, i64* %PC, align 8
  %2769 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2770 = add i32 %2769, 1
  %2771 = zext i32 %2770 to i64
  store i64 %2771, i64* %RAX, align 8, !tbaa !2428
  %2772 = icmp eq i32 %2769, -1
  %2773 = icmp eq i32 %2770, 0
  %2774 = or i1 %2772, %2773
  %2775 = zext i1 %2774 to i8
  store i8 %2775, i8* %20, align 1, !tbaa !2432
  %2776 = and i32 %2770, 255
  %2777 = tail call i32 @llvm.ctpop.i32(i32 %2776) #8
  %2778 = trunc i32 %2777 to i8
  %2779 = and i8 %2778, 1
  %2780 = xor i8 %2779, 1
  store i8 %2780, i8* %21, align 1, !tbaa !2446
  %2781 = xor i32 %2769, %2770
  %2782 = lshr i32 %2781, 4
  %2783 = trunc i32 %2782 to i8
  %2784 = and i8 %2783, 1
  store i8 %2784, i8* %22, align 1, !tbaa !2450
  %2785 = zext i1 %2773 to i8
  store i8 %2785, i8* %23, align 1, !tbaa !2447
  %2786 = lshr i32 %2770, 31
  %2787 = trunc i32 %2786 to i8
  store i8 %2787, i8* %24, align 1, !tbaa !2448
  %2788 = lshr i32 %2769, 31
  %2789 = xor i32 %2786, %2788
  %2790 = add nuw nsw i32 %2789, %2786
  %2791 = icmp eq i32 %2790, 2
  %2792 = zext i1 %2791 to i8
  store i8 %2792, i8* %25, align 1, !tbaa !2449
  store i32 %2770, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2793 = add i64 %2768, -59
  store i64 %2793, i64* %PC, align 8, !tbaa !2428
  br label %block_400d9e

block_40150e:                                     ; preds = %block_4014fa
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2794 = load i64, i64* %RBP, align 8
  %2795 = add i64 %2794, -20
  store i64 %2795, i64* %R8, align 8, !tbaa !2428
  %2796 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2797 = zext i32 %2796 to i64
  store i64 %2797, i64* %RSI, align 8, !tbaa !2428
  %2798 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2799 = zext i32 %2798 to i64
  store i64 %2799, i64* %RDX, align 8, !tbaa !2428
  %2800 = add i64 %1550, 674
  %2801 = add i64 %1550, 43
  %2802 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2803 = add i64 %2802, -8
  %2804 = inttoptr i64 %2803 to i64*
  store i64 %2801, i64* %2804, align 8
  store i64 %2803, i64* %RSP, align 8, !tbaa !2428
  store i64 %2800, i64* %PC, align 8, !tbaa !2428
  %2805 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2800, %struct.Memory* %MEMORY.6)
  %2806 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2807 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2808 = zext i32 %2807 to i64
  store i64 %2808, i64* %RSI, align 8, !tbaa !2428
  %2809 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2810 = zext i32 %2809 to i64
  store i64 %2810, i64* %RDX, align 8, !tbaa !2428
  %2811 = add i64 %2806, 1095
  %2812 = add i64 %2806, 49
  %2813 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2814 = add i64 %2813, -8
  %2815 = inttoptr i64 %2814 to i64*
  store i64 %2812, i64* %2815, align 8
  store i64 %2814, i64* %RSP, align 8, !tbaa !2428
  store i64 %2811, i64* %PC, align 8, !tbaa !2428
  %2816 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %2811, %struct.Memory* %2805)
  %2817 = load i64, i64* %PC, align 8
  %2818 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2819 = add i32 %2818, 1
  %2820 = zext i32 %2819 to i64
  store i64 %2820, i64* %RAX, align 8, !tbaa !2428
  %2821 = icmp eq i32 %2818, -1
  %2822 = icmp eq i32 %2819, 0
  %2823 = or i1 %2821, %2822
  %2824 = zext i1 %2823 to i8
  store i8 %2824, i8* %20, align 1, !tbaa !2432
  %2825 = and i32 %2819, 255
  %2826 = tail call i32 @llvm.ctpop.i32(i32 %2825) #8
  %2827 = trunc i32 %2826 to i8
  %2828 = and i8 %2827, 1
  %2829 = xor i8 %2828, 1
  store i8 %2829, i8* %21, align 1, !tbaa !2446
  %2830 = xor i32 %2818, %2819
  %2831 = lshr i32 %2830, 4
  %2832 = trunc i32 %2831 to i8
  %2833 = and i8 %2832, 1
  store i8 %2833, i8* %22, align 1, !tbaa !2450
  %2834 = zext i1 %2822 to i8
  store i8 %2834, i8* %23, align 1, !tbaa !2447
  %2835 = lshr i32 %2819, 31
  %2836 = trunc i32 %2835 to i8
  store i8 %2836, i8* %24, align 1, !tbaa !2448
  %2837 = lshr i32 %2818, 31
  %2838 = xor i32 %2835, %2837
  %2839 = add nuw nsw i32 %2838, %2835
  %2840 = icmp eq i32 %2839, 2
  %2841 = zext i1 %2840 to i8
  store i8 %2841, i8* %25, align 1, !tbaa !2449
  store i32 %2819, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2842 = add i64 %2817, -112
  store i64 %2842, i64* %PC, align 8, !tbaa !2428
  br label %block_4014fa

block_40118d:                                     ; preds = %block_4011a1, %block_401149
  %2843 = phi i32 [ 0, %block_401149 ], [ %1867, %block_4011a1 ]
  %2844 = phi i64 [ %914, %block_401149 ], [ %1890, %block_4011a1 ]
  %MEMORY.16 = phi %struct.Memory* [ %905, %block_401149 ], [ %1864, %block_4011a1 ]
  %2845 = zext i32 %2843 to i64
  store i64 %2845, i64* %RAX, align 8, !tbaa !2428
  %2846 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2847 = sub i32 %2843, %2846
  %2848 = icmp ult i32 %2843, %2846
  %2849 = zext i1 %2848 to i8
  store i8 %2849, i8* %20, align 1, !tbaa !2432
  %2850 = and i32 %2847, 255
  %2851 = tail call i32 @llvm.ctpop.i32(i32 %2850) #8
  %2852 = trunc i32 %2851 to i8
  %2853 = and i8 %2852, 1
  %2854 = xor i8 %2853, 1
  store i8 %2854, i8* %21, align 1, !tbaa !2446
  %2855 = xor i32 %2846, %2843
  %2856 = xor i32 %2855, %2847
  %2857 = lshr i32 %2856, 4
  %2858 = trunc i32 %2857 to i8
  %2859 = and i8 %2858, 1
  store i8 %2859, i8* %22, align 1, !tbaa !2450
  %2860 = icmp eq i32 %2847, 0
  %2861 = zext i1 %2860 to i8
  store i8 %2861, i8* %23, align 1, !tbaa !2447
  %2862 = lshr i32 %2847, 31
  %2863 = trunc i32 %2862 to i8
  store i8 %2863, i8* %24, align 1, !tbaa !2448
  %2864 = lshr i32 %2843, 31
  %2865 = lshr i32 %2846, 31
  %2866 = xor i32 %2865, %2864
  %2867 = xor i32 %2862, %2864
  %2868 = add nuw nsw i32 %2867, %2866
  %2869 = icmp eq i32 %2868, 2
  %2870 = zext i1 %2869 to i8
  store i8 %2870, i8* %25, align 1, !tbaa !2449
  %2871 = icmp ne i8 %2863, 0
  %2872 = xor i1 %2871, %2869
  %.v42 = select i1 %2872, i64 20, i64 94
  %2873 = add i64 %2844, %.v42
  store i64 %2873, i64* %PC, align 8, !tbaa !2428
  br i1 %2872, label %block_4011a1, label %block_4011eb

block_40139b:                                     ; preds = %block_4013ab, %block_40131f
  %2874 = phi i32 [ 0, %block_40131f ], [ %3117, %block_4013ab ]
  %2875 = phi i64 [ %2058, %block_40131f ], [ %3140, %block_4013ab ]
  %MEMORY.17 = phi %struct.Memory* [ %2049, %block_40131f ], [ %3114, %block_4013ab ]
  %2876 = zext i32 %2874 to i64
  store i64 %2876, i64* %RAX, align 8, !tbaa !2428
  %2877 = load i64, i64* %RBP, align 8
  %2878 = add i64 %2877, -68
  %2879 = add i64 %2875, 10
  store i64 %2879, i64* %PC, align 8
  %2880 = inttoptr i64 %2878 to i32*
  %2881 = load i32, i32* %2880, align 4
  %2882 = sub i32 %2874, %2881
  %2883 = icmp ult i32 %2874, %2881
  %2884 = zext i1 %2883 to i8
  store i8 %2884, i8* %20, align 1, !tbaa !2432
  %2885 = and i32 %2882, 255
  %2886 = tail call i32 @llvm.ctpop.i32(i32 %2885) #8
  %2887 = trunc i32 %2886 to i8
  %2888 = and i8 %2887, 1
  %2889 = xor i8 %2888, 1
  store i8 %2889, i8* %21, align 1, !tbaa !2446
  %2890 = xor i32 %2881, %2874
  %2891 = xor i32 %2890, %2882
  %2892 = lshr i32 %2891, 4
  %2893 = trunc i32 %2892 to i8
  %2894 = and i8 %2893, 1
  store i8 %2894, i8* %22, align 1, !tbaa !2450
  %2895 = icmp eq i32 %2882, 0
  %2896 = zext i1 %2895 to i8
  store i8 %2896, i8* %23, align 1, !tbaa !2447
  %2897 = lshr i32 %2882, 31
  %2898 = trunc i32 %2897 to i8
  store i8 %2898, i8* %24, align 1, !tbaa !2448
  %2899 = lshr i32 %2874, 31
  %2900 = lshr i32 %2881, 31
  %2901 = xor i32 %2900, %2899
  %2902 = xor i32 %2897, %2899
  %2903 = add nuw nsw i32 %2902, %2901
  %2904 = icmp eq i32 %2903, 2
  %2905 = zext i1 %2904 to i8
  store i8 %2905, i8* %25, align 1, !tbaa !2449
  %2906 = icmp ne i8 %2898, 0
  %2907 = xor i1 %2906, %2904
  %.v43 = select i1 %2907, i64 16, i64 81
  %2908 = add i64 %2875, %.v43
  store i64 %2908, i64* %PC, align 8, !tbaa !2428
  br i1 %2907, label %block_4013ab, label %block_4013ec

block_4010d7:                                     ; preds = %block_4010c3
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2909 = load i64, i64* %RBP, align 8
  %2910 = add i64 %2909, -20
  store i64 %2910, i64* %R8, align 8, !tbaa !2428
  %2911 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2912 = zext i32 %2911 to i64
  store i64 %2912, i64* %RSI, align 8, !tbaa !2428
  %2913 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2914 = zext i32 %2913 to i64
  store i64 %2914, i64* %RDX, align 8, !tbaa !2428
  %2915 = add i64 %1397, 1753
  %2916 = add i64 %1397, 43
  %2917 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2918 = add i64 %2917, -8
  %2919 = inttoptr i64 %2918 to i64*
  store i64 %2916, i64* %2919, align 8
  store i64 %2918, i64* %RSP, align 8, !tbaa !2428
  store i64 %2915, i64* %PC, align 8, !tbaa !2428
  %2920 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %2915, %struct.Memory* %MEMORY.4)
  %2921 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2922 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2923 = zext i32 %2922 to i64
  store i64 %2923, i64* %RSI, align 8, !tbaa !2428
  %2924 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2925 = zext i32 %2924 to i64
  store i64 %2925, i64* %RDX, align 8, !tbaa !2428
  %2926 = add i64 %2921, 2174
  %2927 = add i64 %2921, 49
  %2928 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2929 = add i64 %2928, -8
  %2930 = inttoptr i64 %2929 to i64*
  store i64 %2927, i64* %2930, align 8
  store i64 %2929, i64* %RSP, align 8, !tbaa !2428
  store i64 %2926, i64* %PC, align 8, !tbaa !2428
  %2931 = tail call %struct.Memory* @sub_401980_dgefa_renamed_(%struct.State* nonnull %0, i64 %2926, %struct.Memory* %2920)
  %2932 = load i64, i64* %PC, align 8
  %2933 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2934 = add i32 %2933, 1
  %2935 = zext i32 %2934 to i64
  store i64 %2935, i64* %RAX, align 8, !tbaa !2428
  %2936 = icmp eq i32 %2933, -1
  %2937 = icmp eq i32 %2934, 0
  %2938 = or i1 %2936, %2937
  %2939 = zext i1 %2938 to i8
  store i8 %2939, i8* %20, align 1, !tbaa !2432
  %2940 = and i32 %2934, 255
  %2941 = tail call i32 @llvm.ctpop.i32(i32 %2940) #8
  %2942 = trunc i32 %2941 to i8
  %2943 = and i8 %2942, 1
  %2944 = xor i8 %2943, 1
  store i8 %2944, i8* %21, align 1, !tbaa !2446
  %2945 = xor i32 %2933, %2934
  %2946 = lshr i32 %2945, 4
  %2947 = trunc i32 %2946 to i8
  %2948 = and i8 %2947, 1
  store i8 %2948, i8* %22, align 1, !tbaa !2450
  %2949 = zext i1 %2937 to i8
  store i8 %2949, i8* %23, align 1, !tbaa !2447
  %2950 = lshr i32 %2934, 31
  %2951 = trunc i32 %2950 to i8
  store i8 %2951, i8* %24, align 1, !tbaa !2448
  %2952 = lshr i32 %2933, 31
  %2953 = xor i32 %2950, %2952
  %2954 = add nuw nsw i32 %2953, %2950
  %2955 = icmp eq i32 %2954, 2
  %2956 = zext i1 %2955 to i8
  store i8 %2956, i8* %25, align 1, !tbaa !2449
  store i32 %2934, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2957 = add i64 %2932, -112
  store i64 %2957, i64* %PC, align 8, !tbaa !2428
  br label %block_4010c3

block_4008cf:                                     ; preds = %block_4008bb
  %2958 = sext i32 %2639 to i64
  store i64 %2958, i64* %RAX, align 8, !tbaa !2428
  %2959 = shl nsw i64 %2958, 2
  %2960 = add i64 %2959, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2961 = add i64 %2669, 17
  store i64 %2961, i64* %PC, align 8
  %2962 = inttoptr i64 %2960 to i32*
  %2963 = load i32, i32* %2962, align 4
  store i32 %2963, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %2964 = add i64 %2959, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2965 = add i64 %2669, 34
  store i64 %2965, i64* %PC, align 8
  %2966 = load <2 x float>, <2 x float>* %60, align 1
  %2967 = extractelement <2 x float> %2966, i32 0
  %2968 = inttoptr i64 %2964 to float*
  store float %2967, float* %2968, align 4
  %2969 = load i64, i64* %PC, align 8
  %2970 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2971 = add i32 %2970, 1
  %2972 = zext i32 %2971 to i64
  store i64 %2972, i64* %RAX, align 8, !tbaa !2428
  %2973 = icmp eq i32 %2970, -1
  %2974 = icmp eq i32 %2971, 0
  %2975 = or i1 %2973, %2974
  %2976 = zext i1 %2975 to i8
  store i8 %2976, i8* %20, align 1, !tbaa !2432
  %2977 = and i32 %2971, 255
  %2978 = tail call i32 @llvm.ctpop.i32(i32 %2977) #8
  %2979 = trunc i32 %2978 to i8
  %2980 = and i8 %2979, 1
  %2981 = xor i8 %2980, 1
  store i8 %2981, i8* %21, align 1, !tbaa !2446
  %2982 = xor i32 %2970, %2971
  %2983 = lshr i32 %2982, 4
  %2984 = trunc i32 %2983 to i8
  %2985 = and i8 %2984, 1
  store i8 %2985, i8* %22, align 1, !tbaa !2450
  %2986 = zext i1 %2974 to i8
  store i8 %2986, i8* %23, align 1, !tbaa !2447
  %2987 = lshr i32 %2971, 31
  %2988 = trunc i32 %2987 to i8
  store i8 %2988, i8* %24, align 1, !tbaa !2448
  %2989 = lshr i32 %2970, 31
  %2990 = xor i32 %2987, %2989
  %2991 = add nuw nsw i32 %2990, %2987
  %2992 = icmp eq i32 %2991, 2
  %2993 = zext i1 %2992 to i8
  store i8 %2993, i8* %25, align 1, !tbaa !2449
  store i32 %2971, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2994 = add i64 %2969, -54
  store i64 %2994, i64* %PC, align 8, !tbaa !2428
  br label %block_4008bb

block_400a6c:                                     ; preds = %block_400a2e, %block_400a44
  %2995 = phi i64 [ %3087, %block_400a2e ], [ %.pre14, %block_400a44 ]
  %2996 = load i64, i64* %RBP, align 8
  %2997 = add i64 %2996, -896
  %2998 = add i64 %2995, 8
  store i64 %2998, i64* %PC, align 8
  %2999 = inttoptr i64 %2997 to double*
  %3000 = load double, double* %2999, align 8
  %3001 = bitcast double %3000 to <2 x i32>
  %3002 = fptrunc double %3000 to float
  store float %3002, float* %28, align 1, !tbaa !2452
  %3003 = extractelement <2 x i32> %3001, i32 1
  store i32 %3003, i32* %252, align 1, !tbaa !2452
  store i32 0, i32* %254, align 1, !tbaa !2452
  store i32 0, i32* %256, align 1, !tbaa !2452
  %3004 = add i64 %2996, -28
  %3005 = add i64 %2995, 17
  store i64 %3005, i64* %PC, align 8
  %3006 = load <2 x float>, <2 x float>* %60, align 1
  %3007 = extractelement <2 x float> %3006, i32 0
  %3008 = inttoptr i64 %3004 to float*
  store float %3007, float* %3008, align 4
  %3009 = load i64, i64* %RBP, align 8
  %3010 = add i64 %3009, -24
  %3011 = load i64, i64* %PC, align 8
  %3012 = add i64 %3011, 5
  store i64 %3012, i64* %PC, align 8
  %3013 = inttoptr i64 %3010 to i32*
  %3014 = load i32, i32* %3013, align 4
  store i32 %3014, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %3015 = load <2 x float>, <2 x float>* %60, align 1
  %3016 = extractelement <2 x float> %3015, i32 0
  %3017 = fpext float %3016 to double
  store double %3017, double* %192, align 1, !tbaa !2454
  %3018 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3019 = sext i32 %3018 to i64
  store i64 %3019, i64* %RAX, align 8, !tbaa !2428
  %3020 = shl nsw i64 %3019, 2
  %3021 = add i64 %3020, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %3022 = add i64 %3011, 26
  store i64 %3022, i64* %PC, align 8
  %3023 = inttoptr i64 %3021 to i32*
  %3024 = load i32, i32* %3023, align 4
  store i32 %3024, i32* %2586, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2573, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2574, align 1, !tbaa !2452
  store float 0.000000e+00, float* %2576, align 1, !tbaa !2452
  %3025 = load <2 x float>, <2 x float>* %2577, align 1
  %3026 = extractelement <2 x float> %3025, i32 0
  %3027 = fpext float %3026 to double
  %3028 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %3029 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %3030 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %3031 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %3028, i32* %2708, align 1, !tbaa !2452
  store i32 %3029, i32* %2709, align 1, !tbaa !2452
  store i32 %3030, i32* %2710, align 1, !tbaa !2452
  store i32 %3031, i32* %2711, align 1, !tbaa !2452
  %3032 = bitcast double %3027 to i64
  %3033 = load i64, i64* %198, align 1
  %3034 = load i64, i64* %2585, align 1
  %3035 = load i64, i64* %2581, align 1
  %3036 = and i64 %3034, %3032
  %3037 = and i64 %3035, %3033
  %3038 = trunc i64 %3036 to i32
  %3039 = lshr i64 %3036, 32
  %3040 = trunc i64 %3039 to i32
  store i32 %3038, i32* %2586, align 1, !tbaa !2451
  store i32 %3040, i32* %2587, align 1, !tbaa !2451
  %3041 = trunc i64 %3037 to i32
  store i32 %3041, i32* %2588, align 1, !tbaa !2451
  %3042 = lshr i64 %3037, 32
  %3043 = trunc i64 %3042 to i32
  store i32 %3043, i32* %2589, align 1, !tbaa !2451
  %3044 = add i64 %3011, 45
  store i64 %3044, i64* %PC, align 8
  %3045 = load double, double* %196, align 1
  %3046 = fcmp uno double %3017, %3045
  br i1 %3046, label %3047, label %3057

; <label>:3047:                                   ; preds = %block_400a6c
  %3048 = fadd double %3017, %3045
  %3049 = bitcast double %3048 to i64
  %3050 = and i64 %3049, 9221120237041090560
  %3051 = icmp eq i64 %3050, 9218868437227405312
  %3052 = and i64 %3049, 2251799813685247
  %3053 = icmp ne i64 %3052, 0
  %3054 = and i1 %3051, %3053
  br i1 %3054, label %3055, label %3063

; <label>:3055:                                   ; preds = %3047
  %3056 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3044, %struct.Memory* %2753) #9
  %.pre15 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:3057:                                   ; preds = %block_400a6c
  %3058 = fcmp ogt double %3017, %3045
  br i1 %3058, label %3063, label %3059

; <label>:3059:                                   ; preds = %3057
  %3060 = fcmp olt double %3017, %3045
  br i1 %3060, label %3063, label %3061

; <label>:3061:                                   ; preds = %3059
  %3062 = fcmp oeq double %3017, %3045
  br i1 %3062, label %3063, label %3067

; <label>:3063:                                   ; preds = %3061, %3059, %3057, %3047
  %3064 = phi i8 [ 0, %3057 ], [ 0, %3059 ], [ 1, %3061 ], [ 1, %3047 ]
  %3065 = phi i8 [ 0, %3057 ], [ 0, %3059 ], [ 0, %3061 ], [ 1, %3047 ]
  %3066 = phi i8 [ 0, %3057 ], [ 1, %3059 ], [ 0, %3061 ], [ 1, %3047 ]
  store i8 %3064, i8* %23, align 1, !tbaa !2456
  store i8 %3065, i8* %21, align 1, !tbaa !2456
  store i8 %3066, i8* %20, align 1, !tbaa !2456
  br label %3067

; <label>:3067:                                   ; preds = %3063, %3061
  store i8 0, i8* %25, align 1, !tbaa !2456
  store i8 0, i8* %24, align 1, !tbaa !2456
  store i8 0, i8* %22, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %3067, %3055
  %3068 = phi i64 [ %.pre15, %3055 ], [ %3044, %3067 ]
  %3069 = phi %struct.Memory* [ %3056, %3055 ], [ %2753, %3067 ]
  %3070 = load i8, i8* %20, align 1, !tbaa !2432
  %3071 = load i8, i8* %23, align 1, !tbaa !2447
  %3072 = or i8 %3071, %3070
  %3073 = icmp ne i8 %3072, 0
  %.v31 = select i1 %3073, i64 28, i64 6
  %3074 = add i64 %3068, %.v31
  store i64 %3074, i64* %PC, align 8, !tbaa !2428
  br i1 %3073, label %block_400ac6, label %block_400ab0

block_400a2e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %3075 = load i64, i64* %RBP, align 8
  %3076 = add i64 %3075, -28
  %3077 = add i64 %2756, 5
  store i64 %3077, i64* %PC, align 8
  %3078 = inttoptr i64 %3076 to i32*
  %3079 = load i32, i32* %3078, align 4
  store i32 %3079, i32* %29, align 1, !tbaa !2452
  store float 0.000000e+00, float* %31, align 1, !tbaa !2452
  store float 0.000000e+00, float* %33, align 1, !tbaa !2452
  store float 0.000000e+00, float* %35, align 1, !tbaa !2452
  %3080 = load <2 x float>, <2 x float>* %60, align 1
  %3081 = extractelement <2 x float> %3080, i32 0
  %3082 = fpext float %3081 to double
  store double %3082, double* %192, align 1, !tbaa !2454
  %3083 = add i64 %3075, -896
  %3084 = add i64 %2756, 17
  store i64 %3084, i64* %PC, align 8
  %3085 = inttoptr i64 %3083 to double*
  store double %3082, double* %3085, align 8
  %3086 = load i64, i64* %PC, align 8
  %3087 = add i64 %3086, 45
  store i64 %3087, i64* %PC, align 8, !tbaa !2428
  br label %block_400a6c

block_400907:                                     ; preds = %block_4008bb
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3088 = load i64, i64* %RBP, align 8
  %3089 = add i64 %3088, -20
  store i64 %3089, i64* %R8, align 8, !tbaa !2428
  %3090 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %3091 = zext i32 %3090 to i64
  store i64 %3091, i64* %RSI, align 8, !tbaa !2428
  %3092 = zext i32 %2642 to i64
  store i64 %3092, i64* %RDX, align 8, !tbaa !2428
  %3093 = add i64 %2669, 3753
  %3094 = add i64 %2669, 43
  %3095 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3096 = add i64 %3095, -8
  %3097 = inttoptr i64 %3096 to i64*
  store i64 %3094, i64* %3097, align 8
  store i64 %3096, i64* %RSP, align 8, !tbaa !2428
  store i64 %3093, i64* %PC, align 8, !tbaa !2428
  %3098 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %3093, %struct.Memory* %358)
  %3099 = load i64, i64* %PC, align 8
  %3100 = add i64 %3099, 11
  store i64 %3100, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3101 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3102 = bitcast %union.anon* %4 to [2 x i32]*
  %3103 = getelementptr inbounds [2 x i32], [2 x i32]* %3102, i64 0, i64 1
  br label %block_40093d

block_4013ab:                                     ; preds = %block_40139b
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3104 = add i64 %2877, -20
  store i64 %3104, i64* %R8, align 8, !tbaa !2428
  %3105 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %3106 = zext i32 %3105 to i64
  store i64 %3106, i64* %RSI, align 8, !tbaa !2428
  %3107 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3108 = zext i32 %3107 to i64
  store i64 %3108, i64* %RDX, align 8, !tbaa !2428
  %3109 = add i64 %2908, 1029
  %3110 = add i64 %2908, 43
  %3111 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3112 = add i64 %3111, -8
  %3113 = inttoptr i64 %3112 to i64*
  store i64 %3110, i64* %3113, align 8
  store i64 %3112, i64* %RSP, align 8, !tbaa !2428
  store i64 %3109, i64* %PC, align 8, !tbaa !2428
  %3114 = tail call %struct.Memory* @sub_4017b0_matgen_renamed_(%struct.State* nonnull %0, i64 %3109, %struct.Memory* %MEMORY.17)
  %3115 = load i64, i64* %PC, align 8
  %3116 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3117 = add i32 %3116, 1
  %3118 = zext i32 %3117 to i64
  store i64 %3118, i64* %RAX, align 8, !tbaa !2428
  %3119 = icmp eq i32 %3116, -1
  %3120 = icmp eq i32 %3117, 0
  %3121 = or i1 %3119, %3120
  %3122 = zext i1 %3121 to i8
  store i8 %3122, i8* %20, align 1, !tbaa !2432
  %3123 = and i32 %3117, 255
  %3124 = tail call i32 @llvm.ctpop.i32(i32 %3123) #8
  %3125 = trunc i32 %3124 to i8
  %3126 = and i8 %3125, 1
  %3127 = xor i8 %3126, 1
  store i8 %3127, i8* %21, align 1, !tbaa !2446
  %3128 = xor i32 %3116, %3117
  %3129 = lshr i32 %3128, 4
  %3130 = trunc i32 %3129 to i8
  %3131 = and i8 %3130, 1
  store i8 %3131, i8* %22, align 1, !tbaa !2450
  %3132 = zext i1 %3120 to i8
  store i8 %3132, i8* %23, align 1, !tbaa !2447
  %3133 = lshr i32 %3117, 31
  %3134 = trunc i32 %3133 to i8
  store i8 %3134, i8* %24, align 1, !tbaa !2448
  %3135 = lshr i32 %3116, 31
  %3136 = xor i32 %3133, %3135
  %3137 = add nuw nsw i32 %3136, %3133
  %3138 = icmp eq i32 %3137, 2
  %3139 = zext i1 %3138 to i8
  store i8 %3139, i8* %25, align 1, !tbaa !2449
  store i32 %3117, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3140 = add i64 %3115, -59
  store i64 %3140, i64* %PC, align 8, !tbaa !2428
  br label %block_40139b

block_401580:                                     ; preds = %block_4014fa
  %3141 = add i64 %1550, -4032
  %3142 = add i64 %1550, 5
  %3143 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3144 = add i64 %3143, -8
  %3145 = inttoptr i64 %3144 to i64*
  store i64 %3142, i64* %3145, align 8
  store i64 %3144, i64* %RSP, align 8, !tbaa !2428
  store i64 %3141, i64* %PC, align 8, !tbaa !2428
  %3146 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3141, %struct.Memory* %MEMORY.6)
  %3147 = load i64, i64* %RBP, align 8
  %3148 = add i64 %3147, -40
  %3149 = load i64, i64* %PC, align 8
  %3150 = add i64 %3149, 5
  store i64 %3150, i64* %PC, align 8
  %3151 = load <2 x float>, <2 x float>* %60, align 1
  %3152 = load <2 x i32>, <2 x i32>* %245, align 1
  %3153 = inttoptr i64 %3148 to float*
  %3154 = load float, float* %3153, align 4
  %3155 = extractelement <2 x float> %3151, i32 0
  %3156 = fsub float %3155, %3154
  store float %3156, float* %28, align 1, !tbaa !2452
  %3157 = bitcast <2 x float> %3151 to <2 x i32>
  %3158 = extractelement <2 x i32> %3157, i32 1
  store i32 %3158, i32* %252, align 1, !tbaa !2452
  %3159 = extractelement <2 x i32> %3152, i32 0
  store i32 %3159, i32* %254, align 1, !tbaa !2452
  %3160 = extractelement <2 x i32> %3152, i32 1
  store i32 %3160, i32* %256, align 1, !tbaa !2452
  %3161 = add i64 %3147, -44
  %3162 = add i64 %3149, 10
  store i64 %3162, i64* %PC, align 8
  %3163 = load <2 x float>, <2 x float>* %60, align 1
  %3164 = load <2 x i32>, <2 x i32>* %245, align 1
  %3165 = inttoptr i64 %3161 to float*
  %3166 = load float, float* %3165, align 4
  %3167 = extractelement <2 x float> %3163, i32 0
  %3168 = fsub float %3167, %3166
  store float %3168, float* %28, align 1, !tbaa !2452
  %3169 = bitcast <2 x float> %3163 to <2 x i32>
  %3170 = extractelement <2 x i32> %3169, i32 1
  store i32 %3170, i32* %252, align 1, !tbaa !2452
  %3171 = extractelement <2 x i32> %3164, i32 0
  store i32 %3171, i32* %254, align 1, !tbaa !2452
  %3172 = extractelement <2 x i32> %3164, i32 1
  store i32 %3172, i32* %256, align 1, !tbaa !2452
  %3173 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %3174 = zext i32 %3173 to i64
  store i64 %3174, i64* %RAX, align 8, !tbaa !2428
  %3175 = load <2 x i32>, <2 x i32>* %1486, align 1
  %3176 = load <2 x i32>, <2 x i32>* %1487, align 1
  %3177 = sitofp i32 %3173 to float
  store float %3177, float* %2571, align 1, !tbaa !2452
  %3178 = extractelement <2 x i32> %3175, i32 1
  store i32 %3178, i32* %2587, align 1, !tbaa !2452
  %3179 = extractelement <2 x i32> %3176, i32 0
  store i32 %3179, i32* %2588, align 1, !tbaa !2452
  %3180 = extractelement <2 x i32> %3176, i32 1
  store i32 %3180, i32* %2589, align 1, !tbaa !2452
  %3181 = load <2 x float>, <2 x float>* %60, align 1
  %3182 = load <2 x i32>, <2 x i32>* %245, align 1
  %3183 = load <2 x float>, <2 x float>* %2577, align 1
  %3184 = extractelement <2 x float> %3181, i32 0
  %3185 = extractelement <2 x float> %3183, i32 0
  %3186 = fdiv float %3184, %3185
  store float %3186, float* %28, align 1, !tbaa !2452
  %3187 = bitcast <2 x float> %3181 to <2 x i32>
  %3188 = extractelement <2 x i32> %3187, i32 1
  store i32 %3188, i32* %252, align 1, !tbaa !2452
  %3189 = extractelement <2 x i32> %3182, i32 0
  store i32 %3189, i32* %254, align 1, !tbaa !2452
  %3190 = extractelement <2 x i32> %3182, i32 1
  store i32 %3190, i32* %256, align 1, !tbaa !2452
  %3191 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %3192 = sext i32 %3191 to i64
  store i64 %3192, i64* %RCX, align 8, !tbaa !2428
  %3193 = shl nsw i64 %3192, 2
  %3194 = add i64 %3193, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3195 = add i64 %3149, 42
  store i64 %3195, i64* %PC, align 8
  %3196 = load <2 x float>, <2 x float>* %60, align 1
  %3197 = extractelement <2 x float> %3196, i32 0
  %3198 = inttoptr i64 %3194 to float*
  store float %3197, float* %3198, align 4
  %3199 = load i64, i64* %PC, align 8
  %3200 = add i64 %3199, -4079
  %3201 = add i64 %3199, 5
  %3202 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3203 = add i64 %3202, -8
  %3204 = inttoptr i64 %3203 to i64*
  store i64 %3201, i64* %3204, align 8
  store i64 %3203, i64* %RSP, align 8, !tbaa !2428
  store i64 %3200, i64* %PC, align 8, !tbaa !2428
  %3205 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3200, %struct.Memory* %3146)
  %3206 = load i64, i64* %RBP, align 8
  %3207 = add i64 %3206, -40
  %3208 = load i64, i64* %PC, align 8
  %3209 = add i64 %3208, 5
  store i64 %3209, i64* %PC, align 8
  %3210 = load <2 x float>, <2 x float>* %60, align 1
  %3211 = extractelement <2 x float> %3210, i32 0
  %3212 = inttoptr i64 %3207 to float*
  store float %3211, float* %3212, align 4
  %3213 = load i64, i64* %PC, align 8
  %3214 = add i64 %3213, 11
  store i64 %3214, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4015c4

block_400d80:                                     ; preds = %block_400e43, %block_400d39
  %3215 = phi i64 [ %.pre20, %block_400d39 ], [ %2686, %block_400e43 ]
  %MEMORY.19 = phi %struct.Memory* [ %1469, %block_400d39 ], [ %443, %block_400e43 ]
  %3216 = add i64 %3215, -1984
  %3217 = add i64 %3215, 5
  %3218 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3219 = add i64 %3218, -8
  %3220 = inttoptr i64 %3219 to i64*
  store i64 %3217, i64* %3220, align 8
  store i64 %3219, i64* %RSP, align 8, !tbaa !2428
  store i64 %3216, i64* %PC, align 8, !tbaa !2428
  %3221 = tail call %struct.Memory* @sub_4005c0_second_renamed_(%struct.State* nonnull %0, i64 %3216, %struct.Memory* %MEMORY.19)
  %3222 = load i64, i64* %RBP, align 8
  %3223 = add i64 %3222, -80
  %3224 = load i64, i64* %PC, align 8
  %3225 = add i64 %3224, 5
  store i64 %3225, i64* %PC, align 8
  %3226 = load <2 x float>, <2 x float>* %60, align 1
  %3227 = extractelement <2 x float> %3226, i32 0
  %3228 = inttoptr i64 %3223 to float*
  store float %3227, float* %3228, align 4
  %3229 = load i64, i64* %RBP, align 8
  %3230 = add i64 %3229, -64
  %3231 = load i64, i64* %PC, align 8
  %3232 = add i64 %3231, 3
  store i64 %3232, i64* %PC, align 8
  %3233 = inttoptr i64 %3230 to i32*
  %3234 = load i32, i32* %3233, align 4
  %3235 = add i32 %3234, 1
  %3236 = zext i32 %3235 to i64
  store i64 %3236, i64* %RAX, align 8, !tbaa !2428
  %3237 = icmp eq i32 %3234, -1
  %3238 = icmp eq i32 %3235, 0
  %3239 = or i1 %3237, %3238
  %3240 = zext i1 %3239 to i8
  store i8 %3240, i8* %20, align 1, !tbaa !2432
  %3241 = and i32 %3235, 255
  %3242 = tail call i32 @llvm.ctpop.i32(i32 %3241) #8
  %3243 = trunc i32 %3242 to i8
  %3244 = and i8 %3243, 1
  %3245 = xor i8 %3244, 1
  store i8 %3245, i8* %21, align 1, !tbaa !2446
  %3246 = xor i32 %3234, %3235
  %3247 = lshr i32 %3246, 4
  %3248 = trunc i32 %3247 to i8
  %3249 = and i8 %3248, 1
  store i8 %3249, i8* %22, align 1, !tbaa !2450
  %3250 = zext i1 %3238 to i8
  store i8 %3250, i8* %23, align 1, !tbaa !2447
  %3251 = lshr i32 %3235, 31
  %3252 = trunc i32 %3251 to i8
  store i8 %3252, i8* %24, align 1, !tbaa !2448
  %3253 = lshr i32 %3234, 31
  %3254 = xor i32 %3251, %3253
  %3255 = add nuw nsw i32 %3254, %3251
  %3256 = icmp eq i32 %3255, 2
  %3257 = zext i1 %3256 to i8
  store i8 %3257, i8* %25, align 1, !tbaa !2449
  %3258 = add i64 %3231, 9
  store i64 %3258, i64* %PC, align 8
  store i32 %3235, i32* %3233, align 4
  %3259 = load i64, i64* %PC, align 8
  %3260 = add i64 %3259, 11
  store i64 %3260, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400d9e
}

; Function Attrs: noinline
define %struct.Memory* @sub_402d70_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402d70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -12
  %14 = load i32, i32* %EDI, align 4
  %15 = add i64 %12, 6
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 5
  store i64 %20, i64* %PC, align 8
  %21 = bitcast %union.VectorReg* %5 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 1
  %23 = extractelement <2 x float> %22, i32 0
  %24 = inttoptr i64 %18 to float*
  store float %23, float* %24, align 4
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -16
  %27 = load i64, i64* %RSI, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -20
  %33 = load i32, i32* %EDX, align 4
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -32
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  store i32 0, i32* %41, align 4
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -28
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %53, align 1, !tbaa !2432
  %54 = and i32 %52, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #8
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %60, align 1, !tbaa !2450
  %61 = icmp eq i32 %52, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2447
  %64 = lshr i32 %52, 31
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %67, align 1, !tbaa !2449
  %68 = xor i1 %61, true
  %69 = icmp eq i8 %65, 0
  %70 = and i1 %69, %68
  %.v = select i1 %70, i64 15, i64 10
  %71 = add i64 %49, %.v
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  br i1 %70, label %block_402da0, label %block_402d9b

block_402d9b:                                     ; preds = %block_402d70
  %72 = add i64 %71, 158
  br label %block_402e39.sink.split

block_402dbb:                                     ; preds = %block_402dc7, %block_402daa
  %73 = phi i64 [ %360, %block_402dc7 ], [ %.pre, %block_402daa ]
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -24
  %76 = add i64 %73, 3
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %74, -36
  %81 = add i64 %73, 6
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = sub i32 %78, %83
  %85 = icmp ult i32 %78, %83
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %53, align 1, !tbaa !2432
  %87 = and i32 %84, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %59, align 1, !tbaa !2446
  %92 = xor i32 %83, %78
  %93 = xor i32 %92, %84
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  store i8 %96, i8* %60, align 1, !tbaa !2450
  %97 = icmp eq i32 %84, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %63, align 1, !tbaa !2447
  %99 = lshr i32 %84, 31
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %66, align 1, !tbaa !2448
  %101 = lshr i32 %78, 31
  %102 = lshr i32 %83, 31
  %103 = xor i32 %102, %101
  %104 = xor i32 %99, %101
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %67, align 1, !tbaa !2449
  %108 = icmp ne i8 %100, 0
  %109 = xor i1 %108, %106
  %.v5 = select i1 %109, i64 12, i64 57
  %110 = add i64 %73, %.v5
  store i64 %110, i64* %PC, align 8, !tbaa !2428
  br i1 %109, label %block_402dc7, label %block_402df4

block_402df9:                                     ; preds = %block_402da0
  %111 = add i64 %47, -24
  %112 = add i64 %386, 7
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i32*
  store i32 0, i32* %113, align 4
  %114 = bitcast %union.VectorReg* %5 to i8*
  %115 = bitcast %union.VectorReg* %5 to float*
  %116 = getelementptr inbounds i8, i8* %114, i64 4
  %117 = bitcast i8* %116 to float*
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %119 = bitcast i64* %118 to float*
  %120 = getelementptr inbounds i8, i8* %114, i64 12
  %121 = bitcast i8* %120 to float*
  %122 = bitcast i64* %118 to <2 x i32>*
  %123 = bitcast i8* %116 to i32*
  %124 = bitcast i64* %118 to i32*
  %125 = bitcast i8* %120 to i32*
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_402e00

block_402df4:                                     ; preds = %block_402dbb
  %126 = add i64 %110, 69
  br label %block_402e39.sink.split

block_402e0c:                                     ; preds = %block_402e00
  %127 = add i64 %247, -8
  %128 = add i64 %283, 5
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = bitcast %union.VectorReg* %5 to i32*
  store i32 %130, i32* %131, align 1, !tbaa !2452
  store float 0.000000e+00, float* %117, align 1, !tbaa !2452
  store float 0.000000e+00, float* %119, align 1, !tbaa !2452
  store float 0.000000e+00, float* %121, align 1, !tbaa !2452
  %132 = add i64 %247, -16
  %133 = add i64 %283, 9
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RAX, align 8, !tbaa !2428
  %136 = add i64 %283, 13
  store i64 %136, i64* %PC, align 8
  %137 = load i32, i32* %250, align 4
  %138 = sext i32 %137 to i64
  store i64 %138, i64* %RCX, align 8, !tbaa !2428
  %139 = shl nsw i64 %138, 2
  %140 = add i64 %139, %135
  %141 = add i64 %283, 18
  store i64 %141, i64* %PC, align 8
  %142 = load <2 x float>, <2 x float>* %21, align 1
  %143 = load <2 x i32>, <2 x i32>* %122, align 1
  %144 = inttoptr i64 %140 to float*
  %145 = load float, float* %144, align 4
  %146 = extractelement <2 x float> %142, i32 0
  %147 = fmul float %146, %145
  store float %147, float* %115, align 1, !tbaa !2452
  %148 = bitcast <2 x float> %142 to <2 x i32>
  %149 = extractelement <2 x i32> %148, i32 1
  store i32 %149, i32* %123, align 1, !tbaa !2452
  %150 = extractelement <2 x i32> %143, i32 0
  store i32 %150, i32* %124, align 1, !tbaa !2452
  %151 = extractelement <2 x i32> %143, i32 1
  store i32 %151, i32* %125, align 1, !tbaa !2452
  %152 = add i64 %283, 22
  store i64 %152, i64* %PC, align 8
  %153 = load i64, i64* %134, align 8
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = add i64 %283, 26
  store i64 %154, i64* %PC, align 8
  %155 = load i32, i32* %250, align 4
  %156 = sext i32 %155 to i64
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %157 = shl nsw i64 %156, 2
  %158 = add i64 %157, %153
  %159 = add i64 %283, 31
  store i64 %159, i64* %PC, align 8
  %160 = load <2 x float>, <2 x float>* %21, align 1
  %161 = extractelement <2 x float> %160, i32 0
  %162 = inttoptr i64 %158 to float*
  store float %161, float* %162, align 4
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -24
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, 3
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %164 to i32*
  %168 = load i32, i32* %167, align 4
  %169 = add i32 %168, 1
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RAX, align 8, !tbaa !2428
  %171 = icmp eq i32 %168, -1
  %172 = icmp eq i32 %169, 0
  %173 = or i1 %171, %172
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %53, align 1, !tbaa !2432
  %175 = and i32 %169, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #8
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %59, align 1, !tbaa !2446
  %180 = xor i32 %168, %169
  %181 = lshr i32 %180, 4
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  store i8 %183, i8* %60, align 1, !tbaa !2450
  %184 = zext i1 %172 to i8
  store i8 %184, i8* %63, align 1, !tbaa !2447
  %185 = lshr i32 %169, 31
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %66, align 1, !tbaa !2448
  %187 = lshr i32 %168, 31
  %188 = xor i32 %185, %187
  %189 = add nuw nsw i32 %188, %185
  %190 = icmp eq i32 %189, 2
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %67, align 1, !tbaa !2449
  %192 = add i64 %165, 9
  store i64 %192, i64* %PC, align 8
  store i32 %169, i32* %167, align 4
  %193 = load i64, i64* %PC, align 8
  %194 = add i64 %193, -52
  store i64 %194, i64* %PC, align 8, !tbaa !2428
  br label %block_402e00

block_402e39.sink.split:                          ; preds = %block_402d9b, %block_402df4
  %.sink = phi i64 [ %126, %block_402df4 ], [ %72, %block_402d9b ]
  store i64 %.sink, i64* %PC, align 8, !tbaa !2428
  br label %block_402e39

block_402e39:                                     ; preds = %block_402e00, %block_402e39.sink.split
  %195 = phi i64 [ %283, %block_402e00 ], [ %.sink, %block_402e39.sink.split ]
  %196 = add i64 %195, 1
  store i64 %196, i64* %PC, align 8
  %197 = load i64, i64* %8, align 8, !tbaa !2428
  %198 = add i64 %197, 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RBP, align 8, !tbaa !2428
  store i64 %198, i64* %8, align 8, !tbaa !2428
  %201 = add i64 %195, 2
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %198 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %PC, align 8, !tbaa !2428
  %204 = add i64 %197, 16
  store i64 %204, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402daa:                                     ; preds = %block_402da0
  %205 = add i64 %386, 3
  store i64 %205, i64* %PC, align 8
  %206 = load i32, i32* %51, align 4
  %207 = zext i32 %206 to i64
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %386, 7
  store i64 %208, i64* %PC, align 8
  %209 = load i32, i32* %363, align 4
  %210 = sext i32 %206 to i64
  %211 = sext i32 %209 to i64
  %212 = mul nsw i64 %211, %210
  %213 = trunc i64 %212 to i32
  %214 = and i64 %212, 4294967295
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = shl i64 %212, 32
  %216 = ashr exact i64 %215, 32
  %217 = icmp ne i64 %216, %212
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %53, align 1, !tbaa !2432
  %219 = and i32 %213, 255
  %220 = tail call i32 @llvm.ctpop.i32(i32 %219) #8
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  store i8 %223, i8* %59, align 1, !tbaa !2446
  store i8 0, i8* %60, align 1, !tbaa !2450
  store i8 0, i8* %63, align 1, !tbaa !2447
  %224 = lshr i32 %213, 31
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %66, align 1, !tbaa !2448
  store i8 %218, i8* %67, align 1, !tbaa !2449
  %226 = add i64 %47, -36
  %227 = add i64 %386, 10
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i32*
  store i32 %213, i32* %228, align 4
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -24
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %230 to i32*
  store i32 0, i32* %233, align 4
  %234 = bitcast %union.VectorReg* %5 to i8*
  %235 = bitcast %union.VectorReg* %5 to float*
  %236 = getelementptr inbounds i8, i8* %234, i64 4
  %237 = bitcast i8* %236 to float*
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %239 = bitcast i64* %238 to float*
  %240 = getelementptr inbounds i8, i8* %234, i64 12
  %241 = bitcast i8* %240 to float*
  %242 = bitcast i64* %238 to <2 x i32>*
  %243 = bitcast i8* %236 to i32*
  %244 = bitcast i64* %238 to i32*
  %245 = bitcast i8* %240 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402dbb

block_402e00:                                     ; preds = %block_402e0c, %block_402df9
  %246 = phi i64 [ %194, %block_402e0c ], [ %.pre1, %block_402df9 ]
  %247 = load i64, i64* %RBP, align 8
  %248 = add i64 %247, -24
  %249 = add i64 %246, 3
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = zext i32 %251 to i64
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  %253 = add i64 %247, -4
  %254 = add i64 %246, 6
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = sub i32 %251, %256
  %258 = icmp ult i32 %251, %256
  %259 = zext i1 %258 to i8
  store i8 %259, i8* %53, align 1, !tbaa !2432
  %260 = and i32 %257, 255
  %261 = tail call i32 @llvm.ctpop.i32(i32 %260) #8
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  store i8 %264, i8* %59, align 1, !tbaa !2446
  %265 = xor i32 %256, %251
  %266 = xor i32 %265, %257
  %267 = lshr i32 %266, 4
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  store i8 %269, i8* %60, align 1, !tbaa !2450
  %270 = icmp eq i32 %257, 0
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %63, align 1, !tbaa !2447
  %272 = lshr i32 %257, 31
  %273 = trunc i32 %272 to i8
  store i8 %273, i8* %66, align 1, !tbaa !2448
  %274 = lshr i32 %251, 31
  %275 = lshr i32 %256, 31
  %276 = xor i32 %275, %274
  %277 = xor i32 %272, %274
  %278 = add nuw nsw i32 %277, %276
  %279 = icmp eq i32 %278, 2
  %280 = zext i1 %279 to i8
  store i8 %280, i8* %67, align 1, !tbaa !2449
  %281 = icmp ne i8 %273, 0
  %282 = xor i1 %281, %279
  %.v6 = select i1 %282, i64 12, i64 57
  %283 = add i64 %246, %.v6
  store i64 %283, i64* %PC, align 8, !tbaa !2428
  br i1 %282, label %block_402e0c, label %block_402e39

block_402dc7:                                     ; preds = %block_402dbb
  %284 = add i64 %74, -8
  %285 = add i64 %110, 5
  store i64 %285, i64* %PC, align 8
  %286 = inttoptr i64 %284 to i32*
  %287 = load i32, i32* %286, align 4
  %288 = bitcast %union.VectorReg* %5 to i32*
  store i32 %287, i32* %288, align 1, !tbaa !2452
  store float 0.000000e+00, float* %237, align 1, !tbaa !2452
  store float 0.000000e+00, float* %239, align 1, !tbaa !2452
  store float 0.000000e+00, float* %241, align 1, !tbaa !2452
  %289 = add i64 %74, -16
  %290 = add i64 %110, 9
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  %293 = add i64 %110, 13
  store i64 %293, i64* %PC, align 8
  %294 = load i32, i32* %77, align 4
  %295 = sext i32 %294 to i64
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = shl nsw i64 %295, 2
  %297 = add i64 %296, %292
  %298 = add i64 %110, 18
  store i64 %298, i64* %PC, align 8
  %299 = load <2 x float>, <2 x float>* %21, align 1
  %300 = load <2 x i32>, <2 x i32>* %242, align 1
  %301 = inttoptr i64 %297 to float*
  %302 = load float, float* %301, align 4
  %303 = extractelement <2 x float> %299, i32 0
  %304 = fmul float %303, %302
  store float %304, float* %235, align 1, !tbaa !2452
  %305 = bitcast <2 x float> %299 to <2 x i32>
  %306 = extractelement <2 x i32> %305, i32 1
  store i32 %306, i32* %243, align 1, !tbaa !2452
  %307 = extractelement <2 x i32> %300, i32 0
  store i32 %307, i32* %244, align 1, !tbaa !2452
  %308 = extractelement <2 x i32> %300, i32 1
  store i32 %308, i32* %245, align 1, !tbaa !2452
  %309 = add i64 %110, 22
  store i64 %309, i64* %PC, align 8
  %310 = load i64, i64* %291, align 8
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = add i64 %110, 26
  store i64 %311, i64* %PC, align 8
  %312 = load i32, i32* %77, align 4
  %313 = sext i32 %312 to i64
  store i64 %313, i64* %RCX, align 8, !tbaa !2428
  %314 = shl nsw i64 %313, 2
  %315 = add i64 %314, %310
  %316 = add i64 %110, 31
  store i64 %316, i64* %PC, align 8
  %317 = load <2 x float>, <2 x float>* %21, align 1
  %318 = extractelement <2 x float> %317, i32 0
  %319 = inttoptr i64 %315 to float*
  store float %318, float* %319, align 4
  %320 = load i64, i64* %RBP, align 8
  %321 = add i64 %320, -24
  %322 = load i64, i64* %PC, align 8
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %321 to i32*
  %325 = load i32, i32* %324, align 4
  %326 = zext i32 %325 to i64
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = add i64 %320, -20
  %328 = add i64 %322, 6
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = add i32 %330, %325
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = icmp ult i32 %331, %325
  %334 = icmp ult i32 %331, %330
  %335 = or i1 %333, %334
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %53, align 1, !tbaa !2432
  %337 = and i32 %331, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #8
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %59, align 1, !tbaa !2446
  %342 = xor i32 %330, %325
  %343 = xor i32 %342, %331
  %344 = lshr i32 %343, 4
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  store i8 %346, i8* %60, align 1, !tbaa !2450
  %347 = icmp eq i32 %331, 0
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %63, align 1, !tbaa !2447
  %349 = lshr i32 %331, 31
  %350 = trunc i32 %349 to i8
  store i8 %350, i8* %66, align 1, !tbaa !2448
  %351 = lshr i32 %325, 31
  %352 = lshr i32 %330, 31
  %353 = xor i32 %349, %351
  %354 = xor i32 %349, %352
  %355 = add nuw nsw i32 %353, %354
  %356 = icmp eq i32 %355, 2
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %67, align 1, !tbaa !2449
  %358 = add i64 %322, 9
  store i64 %358, i64* %PC, align 8
  store i32 %331, i32* %324, align 4
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, -52
  store i64 %360, i64* %PC, align 8, !tbaa !2428
  br label %block_402dbb

block_402da0:                                     ; preds = %block_402d70
  %361 = add i64 %47, -20
  %362 = add i64 %71, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i32*
  %364 = load i32, i32* %363, align 4
  %365 = add i32 %364, -1
  %366 = icmp eq i32 %364, 0
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %53, align 1, !tbaa !2432
  %368 = and i32 %365, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #8
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %59, align 1, !tbaa !2446
  %373 = xor i32 %364, %365
  %374 = lshr i32 %373, 4
  %375 = trunc i32 %374 to i8
  %376 = and i8 %375, 1
  store i8 %376, i8* %60, align 1, !tbaa !2450
  %377 = icmp eq i32 %365, 0
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %63, align 1, !tbaa !2447
  %379 = lshr i32 %365, 31
  %380 = trunc i32 %379 to i8
  store i8 %380, i8* %66, align 1, !tbaa !2448
  %381 = lshr i32 %364, 31
  %382 = xor i32 %379, %381
  %383 = add nuw nsw i32 %382, %381
  %384 = icmp eq i32 %383, 2
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %67, align 1, !tbaa !2449
  %.v4 = select i1 %377, i64 89, i64 10
  %386 = add i64 %71, %.v4
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  br i1 %377, label %block_402df9, label %block_402daa
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028d0_print_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4028d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -12
  %12 = load i32, i32* %EDI, align 4
  %13 = add i64 %10, 6
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i32*
  store i32 %12, i32* %14, align 4
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %6, align 8, !tbaa !2428
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %18, i64* %6, align 8, !tbaa !2428
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %17, 16
  store i64 %24, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400510:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i8), i8* %10, align 1, !tbaa !2432
  %11 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i32), i32 255)) #8
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !2446
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (i64* @stderr to i64), i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64))), i64 4) to i8), i8 1), i8* %16, align 1, !tbaa !2450
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0) to i8), i8* %17, align 1, !tbaa !2447
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63) to i8), i8* %18, align 1, !tbaa !2448
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %19, align 1, !tbaa !2449
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %20 = add i64 %9, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16)
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), label %block_400538, label %block_400521

block_400538:                                     ; preds = %block_400521, %block_400510
  %21 = phi i64 [ %28, %block_400521 ], [ %20, %block_400510 ]
  %22 = add i64 %21, 1
  store i64 %22, i64* %PC, align 8
  %23 = load i64, i64* %8, align 8
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %24 = add i64 %21, 2
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %6 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %PC, align 8, !tbaa !2428
  %27 = add i64 %6, 8
  store i64 %27, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400521:                                     ; preds = %block_400510
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %10, align 1, !tbaa !2432
  store i8 1, i8* %15, align 1, !tbaa !2446
  store i8 1, i8* %17, align 1, !tbaa !2447
  store i8 0, i8* %18, align 1, !tbaa !2448
  store i8 0, i8* %19, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %28 = add i64 %9, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %28, i64* %PC, align 8, !tbaa !2428
  br label %block_400538
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402eb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402eb4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402eb4:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = icmp ult i64 %3, 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = lshr i64 %4, 63
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12 = lshr i64 %3, 63
  %13 = xor i64 %10, %12
  %14 = add nuw nsw i64 %13, %12
  %15 = icmp eq i64 %14, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = zext i1 %5 to i8
  store i8 %18, i8* %6, align 1, !tbaa !2432
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #8
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %7, align 1, !tbaa !2446
  %25 = xor i64 %4, %3
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %8, align 1, !tbaa !2450
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %9, align 1, !tbaa !2447
  %31 = trunc i64 %12 to i8
  store i8 %31, i8* %11, align 1, !tbaa !2448
  store i8 %16, i8* %17, align 1, !tbaa !2449
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400500__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400500:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e40___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402e40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2456
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #8
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2456
  store i8 0, i8* %45, align 1, !tbaa !2456
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2456
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2456
  store i8 0, i8* %48, align 1, !tbaa !2456
  %63 = add i64 %38, -10723
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400478__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #8
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2447
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2448
  store i8 0, i8* %48, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2450
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_402e96, label %block_402e76

block_402e96:                                     ; preds = %block_402e80, %block_402e40
  %81 = phi i64 [ %80, %block_402e40 ], [ %179, %block_402e80 ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_402e40 ], [ %149, %block_402e80 ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #8
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %82, %83
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2450
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2447
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2448
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2449
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402e76:                                     ; preds = %block_402e40
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2447
  store i8 0, i8* %47, align 1, !tbaa !2448
  store i8 0, i8* %48, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2450
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_402e80

block_402e80:                                     ; preds = %block_402e80, %block_402e76
  %134 = phi i64 [ 0, %block_402e76 ], [ %152, %block_402e80 ]
  %135 = phi i64 [ %133, %block_402e76 ], [ %179, %block_402e80 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_402e76 ], [ %149, %block_402e80 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #8
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2450
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2447
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2448
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2449
  %.v1 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v1
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_402e96, label %block_402e80
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c90_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401c90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %11 = load i64, i64* %RBP, align 8
  %12 = add i64 %1, 1
  store i64 %12, i64* %PC, align 8
  %13 = load i64, i64* %RSP, align 8, !tbaa !2428
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %11, i64* %15, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %14, i64* %RBP, align 8, !tbaa !2428
  %17 = add i64 %13, -104
  store i64 %17, i64* %RSP, align 8, !tbaa !2428
  %18 = icmp ult i64 %14, 96
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %19, i8* %20, align 1, !tbaa !2432
  %21 = trunc i64 %17 to i32
  %22 = and i32 %21, 255
  %23 = tail call i32 @llvm.ctpop.i32(i32 %22) #8
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = xor i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %26, i8* %27, align 1, !tbaa !2446
  %28 = xor i64 %14, %17
  %29 = lshr i64 %28, 4
  %30 = trunc i64 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = icmp eq i64 %17, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1, !tbaa !2447
  %36 = lshr i64 %17, 63
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !2448
  %39 = lshr i64 %14, 63
  %40 = xor i64 %36, %39
  %41 = add nuw nsw i64 %40, %39
  %42 = icmp eq i64 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = add i64 %13, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = add i64 %16, 11
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -12
  %51 = load i32, i32* %ESI, align 4
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %54, align 4
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i32, i32* %EDX, align 4
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i32*
  store i32 %57, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -24
  %63 = load i64, i64* %RCX, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -32
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -36
  %75 = load i32, i32* %R9D, align 4
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %74 to i32*
  store i32 %75, i32* %78, align 4
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %84, -1
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = icmp eq i32 %84, 0
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %20, align 1, !tbaa !2432
  %89 = and i32 %85, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #8
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %27, align 1, !tbaa !2446
  %94 = xor i32 %84, %85
  %95 = lshr i32 %94, 4
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %32, align 1, !tbaa !2450
  %98 = icmp eq i32 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %35, align 1, !tbaa !2447
  %100 = lshr i32 %85, 31
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %38, align 1, !tbaa !2448
  %102 = lshr i32 %84, 31
  %103 = xor i32 %100, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %44, align 1, !tbaa !2449
  %107 = add i64 %79, -56
  %108 = add i64 %81, 9
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  store i32 %85, i32* %109, align 4
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -36
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i32*
  %115 = load i32, i32* %114, align 4
  store i8 0, i8* %20, align 1, !tbaa !2432
  %116 = and i32 %115, 255
  %117 = tail call i32 @llvm.ctpop.i32(i32 %116) #8
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  store i8 %120, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  %121 = icmp eq i32 %115, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %35, align 1, !tbaa !2447
  %123 = lshr i32 %115, 31
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %38, align 1, !tbaa !2448
  store i8 0, i8* %44, align 1, !tbaa !2449
  %.v = select i1 %121, i64 10, i64 417
  %125 = add i64 %112, %.v
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  br i1 %121, label %block_401cc1, label %block_401e58

block_401ef6:                                     ; preds = %block_401eec
  %126 = add i64 %366, -48
  %127 = add i64 %1223, 7
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i32*
  store i32 1, i32* %128, align 4
  %129 = bitcast %union.VectorReg* %10 to i8*
  %130 = bitcast %union.VectorReg* %10 to float*
  %131 = getelementptr inbounds i8, i8* %129, i64 4
  %132 = bitcast i8* %131 to float*
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %134 = bitcast i64* %133 to float*
  %135 = getelementptr inbounds i8, i8* %129, i64 12
  %136 = bitcast i8* %135 to float*
  %137 = bitcast %union.VectorReg* %10 to <2 x float>*
  %138 = bitcast i64* %133 to <2 x i32>*
  %139 = bitcast i8* %131 to i32*
  %140 = bitcast i64* %133 to i32*
  %141 = bitcast i8* %135 to i32*
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_401efd

block_401e6b:                                     ; preds = %block_401e5f
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %142 = add i64 %402, 8
  store i64 %142, i64* %PC, align 8
  %143 = load i32, i32* %369, align 4
  %144 = zext i32 %143 to i64
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %145 = add i64 %366, -8
  %146 = add i64 %402, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %149 = add i64 %366, -12
  %150 = add i64 %402, 15
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %149 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %RDX, align 8, !tbaa !2428
  %154 = add i64 %402, 19
  store i64 %154, i64* %PC, align 8
  %155 = load i32, i32* %369, align 4
  %156 = sext i32 %152 to i64
  %157 = sext i32 %155 to i64
  %158 = mul nsw i64 %157, %156
  %159 = and i64 %158, 4294967295
  store i64 %159, i64* %RDX, align 8, !tbaa !2428
  %160 = shl i64 %158, 32
  %161 = ashr exact i64 %160, 30
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = lshr i64 %161, 63
  %163 = add i64 %161, %148
  store i64 %163, i64* %RCX, align 8, !tbaa !2428
  %164 = icmp ult i64 %163, %148
  %165 = icmp ult i64 %163, %161
  %166 = or i1 %164, %165
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %20, align 1, !tbaa !2432
  %168 = trunc i64 %163 to i32
  %169 = and i32 %168, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #8
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %27, align 1, !tbaa !2446
  %174 = xor i64 %161, %148
  %175 = xor i64 %174, %163
  %176 = lshr i64 %175, 4
  %177 = trunc i64 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %32, align 1, !tbaa !2450
  %179 = icmp eq i64 %163, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %35, align 1, !tbaa !2447
  %181 = lshr i64 %163, 63
  %182 = trunc i64 %181 to i8
  store i8 %182, i8* %38, align 1, !tbaa !2448
  %183 = lshr i64 %148, 63
  %184 = xor i64 %181, %183
  %185 = xor i64 %181, %162
  %186 = add nuw nsw i64 %184, %185
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %44, align 1, !tbaa !2449
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -32
  %191 = add i64 %402, 36
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %190 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = add i64 %189, -72
  %195 = add i64 %402, 40
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  store i64 %193, i64* %196, align 8
  %197 = load i64, i64* %RCX, align 8
  %198 = load i64, i64* %PC, align 8
  store i64 %197, i64* %RSI, align 8, !tbaa !2428
  %199 = load i32, i32* %EAX, align 4
  %200 = zext i32 %199 to i64
  store i64 %200, i64* %RDX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -72
  %203 = add i64 %198, 9
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RCX, align 8, !tbaa !2428
  store i64 %200, i64* %R8, align 8, !tbaa !2428
  %206 = add i64 %198, 3005
  %207 = add i64 %198, 17
  %208 = load i64, i64* %RSP, align 8, !tbaa !2428
  %209 = add i64 %208, -8
  %210 = inttoptr i64 %209 to i64*
  store i64 %207, i64* %210, align 8
  store i64 %209, i64* %RSP, align 8, !tbaa !2428
  store i64 %206, i64* %PC, align 8, !tbaa !2428
  %211 = tail call %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* nonnull %0, i64 %206, %struct.Memory* %MEMORY.0)
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -40
  %214 = load i64, i64* %PC, align 8
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC, align 8
  %216 = load <2 x float>, <2 x float>* %558, align 1
  %217 = extractelement <2 x float> %216, i32 0
  %218 = inttoptr i64 %213 to float*
  store float %217, float* %218, align 4
  %219 = load i64, i64* %RBP, align 8
  %220 = add i64 %219, -32
  %221 = load i64, i64* %PC, align 8
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %220 to i64*
  %224 = load i64, i64* %223, align 8
  store i64 %224, i64* %RCX, align 8, !tbaa !2428
  %225 = add i64 %219, -44
  %226 = add i64 %221, 8
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = sext i32 %228 to i64
  store i64 %229, i64* %RSI, align 8, !tbaa !2428
  %230 = shl nsw i64 %229, 2
  %231 = add i64 %230, %224
  %232 = add i64 %221, 13
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %234, i32* %235, align 1, !tbaa !2452
  store float 0.000000e+00, float* %562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %564, align 1, !tbaa !2452
  store float 0.000000e+00, float* %566, align 1, !tbaa !2452
  %236 = add i64 %219, -40
  %237 = add i64 %221, 18
  store i64 %237, i64* %PC, align 8
  %238 = load <2 x float>, <2 x float>* %558, align 1
  %239 = load <2 x i32>, <2 x i32>* %567, align 1
  %240 = inttoptr i64 %236 to float*
  %241 = load float, float* %240, align 4
  %242 = extractelement <2 x float> %238, i32 0
  %243 = fsub float %242, %241
  store float %243, float* %560, align 1, !tbaa !2452
  %244 = bitcast <2 x float> %238 to <2 x i32>
  %245 = extractelement <2 x i32> %244, i32 1
  store i32 %245, i32* %568, align 1, !tbaa !2452
  %246 = extractelement <2 x i32> %239, i32 0
  store i32 %246, i32* %569, align 1, !tbaa !2452
  %247 = extractelement <2 x i32> %239, i32 1
  store i32 %247, i32* %570, align 1, !tbaa !2452
  %248 = add i64 %219, -8
  %249 = add i64 %221, 22
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i64*
  %251 = load i64, i64* %250, align 8
  store i64 %251, i64* %RCX, align 8, !tbaa !2428
  %252 = add i64 %219, -12
  %253 = add i64 %221, 25
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %252 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = add i64 %221, 29
  store i64 %257, i64* %PC, align 8
  %258 = load i32, i32* %227, align 4
  %259 = sext i32 %255 to i64
  %260 = sext i32 %258 to i64
  %261 = mul nsw i64 %260, %259
  %262 = trunc i64 %261 to i32
  %263 = and i64 %261, 4294967295
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = shl i64 %261, 32
  %265 = ashr exact i64 %264, 32
  %266 = icmp ne i64 %265, %261
  %267 = zext i1 %266 to i8
  store i8 %267, i8* %20, align 1, !tbaa !2432
  %268 = and i32 %262, 255
  %269 = tail call i32 @llvm.ctpop.i32(i32 %268) #8
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  store i8 %272, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %273 = lshr i32 %262, 31
  %274 = trunc i32 %273 to i8
  store i8 %274, i8* %38, align 1, !tbaa !2448
  store i8 %267, i8* %44, align 1, !tbaa !2449
  %275 = add i64 %221, 32
  store i64 %275, i64* %PC, align 8
  %276 = load i32, i32* %227, align 4
  %277 = add i32 %276, %262
  %278 = zext i32 %277 to i64
  store i64 %278, i64* %RAX, align 8, !tbaa !2428
  %279 = icmp ult i32 %277, %262
  %280 = icmp ult i32 %277, %276
  %281 = or i1 %279, %280
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %20, align 1, !tbaa !2432
  %283 = and i32 %277, 255
  %284 = tail call i32 @llvm.ctpop.i32(i32 %283) #8
  %285 = trunc i32 %284 to i8
  %286 = and i8 %285, 1
  %287 = xor i8 %286, 1
  store i8 %287, i8* %27, align 1, !tbaa !2446
  %288 = xor i32 %276, %262
  %289 = xor i32 %288, %277
  %290 = lshr i32 %289, 4
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  store i8 %292, i8* %32, align 1, !tbaa !2450
  %293 = icmp eq i32 %277, 0
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %35, align 1, !tbaa !2447
  %295 = lshr i32 %277, 31
  %296 = trunc i32 %295 to i8
  store i8 %296, i8* %38, align 1, !tbaa !2448
  %297 = lshr i32 %276, 31
  %298 = xor i32 %295, %273
  %299 = xor i32 %295, %297
  %300 = add nuw nsw i32 %298, %299
  %301 = icmp eq i32 %300, 2
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %44, align 1, !tbaa !2449
  %303 = sext i32 %277 to i64
  store i64 %303, i64* %RSI, align 8, !tbaa !2428
  %304 = shl nsw i64 %303, 2
  %305 = add i64 %304, %251
  %306 = add i64 %221, 40
  store i64 %306, i64* %PC, align 8
  %307 = load <2 x float>, <2 x float>* %558, align 1
  %308 = load <2 x i32>, <2 x i32>* %567, align 1
  %309 = inttoptr i64 %305 to float*
  %310 = load float, float* %309, align 4
  %311 = extractelement <2 x float> %307, i32 0
  %312 = fdiv float %311, %310
  store float %312, float* %560, align 1, !tbaa !2452
  %313 = bitcast <2 x float> %307 to <2 x i32>
  %314 = extractelement <2 x i32> %313, i32 1
  store i32 %314, i32* %568, align 1, !tbaa !2452
  %315 = extractelement <2 x i32> %308, i32 0
  store i32 %315, i32* %569, align 1, !tbaa !2452
  %316 = extractelement <2 x i32> %308, i32 1
  store i32 %316, i32* %570, align 1, !tbaa !2452
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -32
  %319 = add i64 %221, 44
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = add i64 %317, -44
  %323 = add i64 %221, 48
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i32*
  %325 = load i32, i32* %324, align 4
  %326 = sext i32 %325 to i64
  store i64 %326, i64* %RSI, align 8, !tbaa !2428
  %327 = shl nsw i64 %326, 2
  %328 = add i64 %327, %321
  %329 = add i64 %221, 53
  store i64 %329, i64* %PC, align 8
  %330 = load <2 x float>, <2 x float>* %558, align 1
  %331 = extractelement <2 x float> %330, i32 0
  %332 = inttoptr i64 %328 to float*
  store float %331, float* %332, align 4
  %333 = load i64, i64* %RBP, align 8
  %334 = add i64 %333, -44
  %335 = load i64, i64* %PC, align 8
  %336 = add i64 %335, 3
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %334 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = add i32 %338, 1
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = icmp eq i32 %338, -1
  %342 = icmp eq i32 %339, 0
  %343 = or i1 %341, %342
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %20, align 1, !tbaa !2432
  %345 = and i32 %339, 255
  %346 = tail call i32 @llvm.ctpop.i32(i32 %345) #8
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  store i8 %349, i8* %27, align 1, !tbaa !2446
  %350 = xor i32 %338, %339
  %351 = lshr i32 %350, 4
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %32, align 1, !tbaa !2450
  %354 = zext i1 %342 to i8
  store i8 %354, i8* %35, align 1, !tbaa !2447
  %355 = lshr i32 %339, 31
  %356 = trunc i32 %355 to i8
  store i8 %356, i8* %38, align 1, !tbaa !2448
  %357 = lshr i32 %338, 31
  %358 = xor i32 %355, %357
  %359 = add nuw nsw i32 %358, %355
  %360 = icmp eq i32 %359, 2
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %44, align 1, !tbaa !2449
  %362 = add i64 %335, 9
  store i64 %362, i64* %PC, align 8
  store i32 %339, i32* %337, align 4
  %363 = load i64, i64* %PC, align 8
  %364 = add i64 %363, -136
  store i64 %364, i64* %PC, align 8, !tbaa !2428
  br label %block_401e5f

block_401e5f:                                     ; preds = %block_401e58, %block_401e6b
  %365 = phi i64 [ %.pre5, %block_401e58 ], [ %364, %block_401e6b ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e58 ], [ %211, %block_401e6b ]
  %366 = load i64, i64* %RBP, align 8
  %367 = add i64 %366, -44
  %368 = add i64 %365, 3
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %367 to i32*
  %370 = load i32, i32* %369, align 4
  %371 = zext i32 %370 to i64
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = add i64 %366, -16
  %373 = add i64 %365, 6
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %372 to i32*
  %375 = load i32, i32* %374, align 4
  %376 = sub i32 %370, %375
  %377 = icmp ult i32 %370, %375
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %20, align 1, !tbaa !2432
  %379 = and i32 %376, 255
  %380 = tail call i32 @llvm.ctpop.i32(i32 %379) #8
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  store i8 %383, i8* %27, align 1, !tbaa !2446
  %384 = xor i32 %375, %370
  %385 = xor i32 %384, %376
  %386 = lshr i32 %385, 4
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  store i8 %388, i8* %32, align 1, !tbaa !2450
  %389 = icmp eq i32 %376, 0
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %35, align 1, !tbaa !2447
  %391 = lshr i32 %376, 31
  %392 = trunc i32 %391 to i8
  store i8 %392, i8* %38, align 1, !tbaa !2448
  %393 = lshr i32 %370, 31
  %394 = lshr i32 %375, 31
  %395 = xor i32 %394, %393
  %396 = xor i32 %391, %393
  %397 = add nuw nsw i32 %396, %395
  %398 = icmp eq i32 %397, 2
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %44, align 1, !tbaa !2449
  %400 = icmp ne i8 %392, 0
  %401 = xor i1 %400, %398
  %.v35 = select i1 %401, i64 12, i64 141
  %402 = add i64 %365, %.v35
  store i64 %402, i64* %PC, align 8, !tbaa !2428
  br i1 %401, label %block_401e6b, label %block_401eec

block_401e53:                                     ; preds = %block_401da8
  %403 = add i64 %1150, 436
  br label %block_402007

block_401cd2:                                     ; preds = %block_401d36, %block_401ccb
  %404 = phi i64 [ %.pre, %block_401ccb ], [ %770, %block_401d36 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401ccb ], [ %738, %block_401d36 ]
  %405 = load i64, i64* %RBP, align 8
  %406 = add i64 %405, -44
  %407 = add i64 %404, 3
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %406 to i32*
  %409 = load i32, i32* %408, align 4
  %410 = zext i32 %409 to i64
  store i64 %410, i64* %RAX, align 8, !tbaa !2428
  %411 = add i64 %405, -56
  %412 = add i64 %404, 6
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i32*
  %414 = load i32, i32* %413, align 4
  %415 = sub i32 %409, %414
  %416 = icmp ult i32 %409, %414
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %20, align 1, !tbaa !2432
  %418 = and i32 %415, 255
  %419 = tail call i32 @llvm.ctpop.i32(i32 %418) #8
  %420 = trunc i32 %419 to i8
  %421 = and i8 %420, 1
  %422 = xor i8 %421, 1
  store i8 %422, i8* %27, align 1, !tbaa !2446
  %423 = xor i32 %414, %409
  %424 = xor i32 %423, %415
  %425 = lshr i32 %424, 4
  %426 = trunc i32 %425 to i8
  %427 = and i8 %426, 1
  store i8 %427, i8* %32, align 1, !tbaa !2450
  %428 = icmp eq i32 %415, 0
  %429 = zext i1 %428 to i8
  store i8 %429, i8* %35, align 1, !tbaa !2447
  %430 = lshr i32 %415, 31
  %431 = trunc i32 %430 to i8
  store i8 %431, i8* %38, align 1, !tbaa !2448
  %432 = lshr i32 %409, 31
  %433 = lshr i32 %414, 31
  %434 = xor i32 %433, %432
  %435 = xor i32 %430, %432
  %436 = add nuw nsw i32 %435, %434
  %437 = icmp eq i32 %436, 2
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %44, align 1, !tbaa !2449
  %439 = icmp ne i8 %431, 0
  %440 = xor i1 %439, %437
  %.v32 = select i1 %440, i64 12, i64 202
  %441 = add i64 %404, %.v32
  store i64 %441, i64* %PC, align 8, !tbaa !2428
  br i1 %440, label %block_401cde, label %block_401d9c

block_401ccb:                                     ; preds = %block_401cc1
  %442 = add i64 %110, -44
  %443 = add i64 %554, 7
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i32*
  store i32 0, i32* %444, align 4
  %445 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %446 = getelementptr inbounds i8, i8* %445, i64 4
  %447 = bitcast i8* %446 to float*
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %449 = bitcast i64* %448 to float*
  %450 = getelementptr inbounds i8, i8* %445, i64 12
  %451 = bitcast i8* %450 to float*
  %452 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401cd2

block_401cde:                                     ; preds = %block_401cd2
  %453 = add i64 %405, -24
  %454 = add i64 %441, 4
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %453 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = add i64 %441, 8
  store i64 %457, i64* %PC, align 8
  %458 = load i32, i32* %408, align 4
  %459 = sext i32 %458 to i64
  store i64 %459, i64* %RCX, align 8, !tbaa !2428
  %460 = shl nsw i64 %459, 2
  %461 = add i64 %460, %456
  %462 = add i64 %441, 11
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %461 to i32*
  %464 = load i32, i32* %463, align 4
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %RDX, align 8, !tbaa !2428
  %466 = add i64 %405, -52
  %467 = add i64 %441, 14
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i32*
  store i32 %464, i32* %468, align 4
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -32
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 4
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = add i64 %469, -52
  %476 = add i64 %471, 8
  store i64 %476, i64* %PC, align 8
  %477 = inttoptr i64 %475 to i32*
  %478 = load i32, i32* %477, align 4
  %479 = sext i32 %478 to i64
  store i64 %479, i64* %RCX, align 8, !tbaa !2428
  %480 = shl nsw i64 %479, 2
  %481 = add i64 %480, %474
  %482 = add i64 %471, 13
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i32*
  %484 = load i32, i32* %483, align 4
  %485 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %484, i32* %485, align 1, !tbaa !2452
  store float 0.000000e+00, float* %447, align 1, !tbaa !2452
  store float 0.000000e+00, float* %449, align 1, !tbaa !2452
  store float 0.000000e+00, float* %451, align 1, !tbaa !2452
  %486 = add i64 %469, -40
  %487 = add i64 %471, 18
  store i64 %487, i64* %PC, align 8
  %488 = load <2 x float>, <2 x float>* %452, align 1
  %489 = extractelement <2 x float> %488, i32 0
  %490 = inttoptr i64 %486 to float*
  store float %489, float* %490, align 4
  %491 = load i64, i64* %RBP, align 8
  %492 = add i64 %491, -52
  %493 = load i64, i64* %PC, align 8
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495, align 4
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RDX, align 8, !tbaa !2428
  %498 = add i64 %491, -44
  %499 = add i64 %493, 6
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %498 to i32*
  %501 = load i32, i32* %500, align 4
  %502 = sub i32 %496, %501
  %503 = icmp ult i32 %496, %501
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %20, align 1, !tbaa !2432
  %505 = and i32 %502, 255
  %506 = tail call i32 @llvm.ctpop.i32(i32 %505) #8
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 1
  %509 = xor i8 %508, 1
  store i8 %509, i8* %27, align 1, !tbaa !2446
  %510 = xor i32 %501, %496
  %511 = xor i32 %510, %502
  %512 = lshr i32 %511, 4
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  store i8 %514, i8* %32, align 1, !tbaa !2450
  %515 = icmp eq i32 %502, 0
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %35, align 1, !tbaa !2447
  %517 = lshr i32 %502, 31
  %518 = trunc i32 %517 to i8
  store i8 %518, i8* %38, align 1, !tbaa !2448
  %519 = lshr i32 %496, 31
  %520 = lshr i32 %501, 31
  %521 = xor i32 %520, %519
  %522 = xor i32 %517, %519
  %523 = add nuw nsw i32 %522, %521
  %524 = icmp eq i32 %523, 2
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %44, align 1, !tbaa !2449
  %.v33 = select i1 %515, i64 56, i64 12
  %526 = add i64 %493, %.v33
  store i64 %526, i64* %PC, align 8, !tbaa !2428
  br i1 %515, label %block_401d36, label %block_401d0a

block_401cc1:                                     ; preds = %block_401c90
  %527 = add i64 %110, -56
  %528 = add i64 %125, 4
  store i64 %528, i64* %PC, align 8
  %529 = inttoptr i64 %527 to i32*
  %530 = load i32, i32* %529, align 4
  %531 = add i32 %530, -1
  %532 = icmp eq i32 %530, 0
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %20, align 1, !tbaa !2432
  %534 = and i32 %531, 255
  %535 = tail call i32 @llvm.ctpop.i32(i32 %534) #8
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  store i8 %538, i8* %27, align 1, !tbaa !2446
  %539 = xor i32 %530, %531
  %540 = lshr i32 %539, 4
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  store i8 %542, i8* %32, align 1, !tbaa !2450
  %543 = icmp eq i32 %531, 0
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %35, align 1, !tbaa !2447
  %545 = lshr i32 %531, 31
  %546 = trunc i32 %545 to i8
  store i8 %546, i8* %38, align 1, !tbaa !2448
  %547 = lshr i32 %530, 31
  %548 = xor i32 %545, %547
  %549 = add nuw nsw i32 %548, %547
  %550 = icmp eq i32 %549, 2
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %44, align 1, !tbaa !2449
  %552 = icmp ne i8 %546, 0
  %553 = xor i1 %552, %550
  %.v31 = select i1 %553, i64 224, i64 10
  %554 = add i64 %125, %.v31
  store i64 %554, i64* %PC, align 8, !tbaa !2428
  br i1 %553, label %block_401cc1.block_401da1_crit_edge, label %block_401ccb

block_401cc1.block_401da1_crit_edge:              ; preds = %block_401cc1
  %.pre9 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %.pre12 = getelementptr inbounds i8, i8* %.pre9, i64 4
  %.pre14 = bitcast i8* %.pre12 to float*
  %.pre16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre18 = bitcast i64* %.pre16 to float*
  %.pre20 = getelementptr inbounds i8, i8* %.pre9, i64 12
  %.pre22 = bitcast i8* %.pre20 to float*
  %.pre26 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  br label %block_401da1

block_401e58:                                     ; preds = %block_401c90
  %555 = add i64 %110, -44
  %556 = add i64 %125, 7
  store i64 %556, i64* %PC, align 8
  %557 = inttoptr i64 %555 to i32*
  store i32 0, i32* %557, align 4
  %558 = bitcast [32 x %union.VectorReg]* %9 to <2 x float>*
  %559 = bitcast [32 x %union.VectorReg]* %9 to i8*
  %560 = bitcast [32 x %union.VectorReg]* %9 to float*
  %561 = getelementptr inbounds i8, i8* %559, i64 4
  %562 = bitcast i8* %561 to float*
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %564 = bitcast i64* %563 to float*
  %565 = getelementptr inbounds i8, i8* %559, i64 12
  %566 = bitcast i8* %565 to float*
  %567 = bitcast i64* %563 to <2 x i32>*
  %568 = bitcast i8* %561 to i32*
  %569 = bitcast i64* %563 to i32*
  %570 = bitcast i8* %565 to i32*
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401e5f

block_401d36:                                     ; preds = %block_401d0a, %block_401cde
  %571 = phi i64 [ %.pre3, %block_401d0a ], [ %491, %block_401cde ]
  %572 = phi i64 [ %.pre2, %block_401d0a ], [ %526, %block_401cde ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %573 = add i64 %571, -16
  %574 = add i64 %572, 8
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %573 to i32*
  %576 = load i32, i32* %575, align 4
  %577 = zext i32 %576 to i64
  store i64 %577, i64* %RCX, align 8, !tbaa !2428
  %578 = add i64 %571, -44
  %579 = add i64 %572, 11
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i32*
  %581 = load i32, i32* %580, align 4
  %582 = add i32 %581, 1
  %583 = zext i32 %582 to i64
  store i64 %583, i64* %RDX, align 8, !tbaa !2428
  %584 = lshr i32 %582, 31
  %585 = sub i32 %576, %582
  %586 = zext i32 %585 to i64
  store i64 %586, i64* %RCX, align 8, !tbaa !2428
  %587 = icmp ult i32 %576, %582
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %20, align 1, !tbaa !2432
  %589 = and i32 %585, 255
  %590 = tail call i32 @llvm.ctpop.i32(i32 %589) #8
  %591 = trunc i32 %590 to i8
  %592 = and i8 %591, 1
  %593 = xor i8 %592, 1
  store i8 %593, i8* %27, align 1, !tbaa !2446
  %594 = xor i32 %582, %576
  %595 = xor i32 %594, %585
  %596 = lshr i32 %595, 4
  %597 = trunc i32 %596 to i8
  %598 = and i8 %597, 1
  store i8 %598, i8* %32, align 1, !tbaa !2450
  %599 = icmp eq i32 %585, 0
  %600 = zext i1 %599 to i8
  store i8 %600, i8* %35, align 1, !tbaa !2447
  %601 = lshr i32 %585, 31
  %602 = trunc i32 %601 to i8
  store i8 %602, i8* %38, align 1, !tbaa !2448
  %603 = lshr i32 %576, 31
  %604 = xor i32 %584, %603
  %605 = xor i32 %601, %603
  %606 = add nuw nsw i32 %605, %604
  %607 = icmp eq i32 %606, 2
  %608 = zext i1 %607 to i8
  store i8 %608, i8* %44, align 1, !tbaa !2449
  %609 = add i64 %571, -40
  %610 = add i64 %572, 21
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %609 to i32*
  %612 = load i32, i32* %611, align 4
  store i32 %612, i32* %485, align 1, !tbaa !2452
  store float 0.000000e+00, float* %447, align 1, !tbaa !2452
  store float 0.000000e+00, float* %449, align 1, !tbaa !2452
  store float 0.000000e+00, float* %451, align 1, !tbaa !2452
  %613 = load i64, i64* %RBP, align 8
  %614 = add i64 %613, -8
  %615 = add i64 %572, 25
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %614 to i64*
  %617 = load i64, i64* %616, align 8
  store i64 %617, i64* %RSI, align 8, !tbaa !2428
  %618 = add i64 %613, -12
  %619 = add i64 %572, 28
  store i64 %619, i64* %PC, align 8
  %620 = inttoptr i64 %618 to i32*
  %621 = load i32, i32* %620, align 4
  %622 = zext i32 %621 to i64
  store i64 %622, i64* %RDX, align 8, !tbaa !2428
  %623 = add i64 %613, -44
  %624 = add i64 %572, 32
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %623 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = sext i32 %621 to i64
  %628 = sext i32 %626 to i64
  %629 = mul nsw i64 %628, %627
  %630 = trunc i64 %629 to i32
  %631 = and i64 %629, 4294967295
  store i64 %631, i64* %RDX, align 8, !tbaa !2428
  %632 = shl i64 %629, 32
  %633 = ashr exact i64 %632, 32
  %634 = icmp ne i64 %633, %629
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %20, align 1, !tbaa !2432
  %636 = and i32 %630, 255
  %637 = tail call i32 @llvm.ctpop.i32(i32 %636) #8
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = xor i8 %639, 1
  store i8 %640, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %641 = lshr i32 %630, 31
  %642 = trunc i32 %641 to i8
  store i8 %642, i8* %38, align 1, !tbaa !2448
  store i8 %635, i8* %44, align 1, !tbaa !2449
  %643 = add i64 %572, 35
  store i64 %643, i64* %PC, align 8
  %644 = load i32, i32* %625, align 4
  %645 = add i32 %644, %630
  %646 = add i32 %645, 1
  %647 = zext i32 %646 to i64
  store i64 %647, i64* %RDX, align 8, !tbaa !2428
  %648 = sext i32 %646 to i64
  %649 = shl nsw i64 %648, 2
  store i64 %649, i64* %RDI, align 8, !tbaa !2428
  %650 = lshr i64 %648, 61
  %651 = and i64 %650, 1
  %652 = load i64, i64* %RSI, align 8
  %653 = add i64 %649, %652
  store i64 %653, i64* %RSI, align 8, !tbaa !2428
  %654 = icmp ult i64 %653, %652
  %655 = icmp ult i64 %653, %649
  %656 = or i1 %654, %655
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %20, align 1, !tbaa !2432
  %658 = trunc i64 %653 to i32
  %659 = and i32 %658, 255
  %660 = tail call i32 @llvm.ctpop.i32(i32 %659) #8
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = xor i8 %662, 1
  store i8 %663, i8* %27, align 1, !tbaa !2446
  %664 = xor i64 %649, %652
  %665 = xor i64 %664, %653
  %666 = lshr i64 %665, 4
  %667 = trunc i64 %666 to i8
  %668 = and i8 %667, 1
  store i8 %668, i8* %32, align 1, !tbaa !2450
  %669 = icmp eq i64 %653, 0
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %35, align 1, !tbaa !2447
  %671 = lshr i64 %653, 63
  %672 = trunc i64 %671 to i8
  store i8 %672, i8* %38, align 1, !tbaa !2448
  %673 = lshr i64 %652, 63
  %674 = xor i64 %671, %673
  %675 = xor i64 %671, %651
  %676 = add nuw nsw i64 %674, %675
  %677 = icmp eq i64 %676, 2
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %44, align 1, !tbaa !2449
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -32
  %681 = add i64 %572, 52
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %680 to i64*
  %683 = load i64, i64* %682, align 8
  store i64 %683, i64* %RDI, align 8, !tbaa !2428
  %684 = add i64 %679, -44
  %685 = add i64 %572, 55
  store i64 %685, i64* %PC, align 8
  %686 = inttoptr i64 %684 to i32*
  %687 = load i32, i32* %686, align 4
  %688 = add i32 %687, 1
  %689 = sext i32 %688 to i64
  %690 = shl nsw i64 %689, 2
  store i64 %690, i64* %R8, align 8, !tbaa !2428
  %691 = lshr i64 %689, 61
  %692 = and i64 %691, 1
  %693 = add i64 %690, %683
  %694 = icmp ult i64 %693, %683
  %695 = icmp ult i64 %693, %690
  %696 = or i1 %694, %695
  %697 = zext i1 %696 to i8
  store i8 %697, i8* %20, align 1, !tbaa !2432
  %698 = trunc i64 %693 to i32
  %699 = and i32 %698, 255
  %700 = tail call i32 @llvm.ctpop.i32(i32 %699) #8
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = xor i8 %702, 1
  store i8 %703, i8* %27, align 1, !tbaa !2446
  %704 = xor i64 %690, %683
  %705 = xor i64 %704, %693
  %706 = lshr i64 %705, 4
  %707 = trunc i64 %706 to i8
  %708 = and i8 %707, 1
  store i8 %708, i8* %32, align 1, !tbaa !2450
  %709 = icmp eq i64 %693, 0
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %35, align 1, !tbaa !2447
  %711 = lshr i64 %693, 63
  %712 = trunc i64 %711 to i8
  store i8 %712, i8* %38, align 1, !tbaa !2448
  %713 = lshr i64 %683, 63
  %714 = xor i64 %711, %713
  %715 = xor i64 %711, %692
  %716 = add nuw nsw i64 %714, %715
  %717 = icmp eq i64 %716, 2
  %718 = zext i1 %717 to i8
  store i8 %718, i8* %44, align 1, !tbaa !2449
  %719 = load i64, i64* %RBP, align 8
  %720 = add i64 %719, -64
  %721 = add i64 %572, 72
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %720 to i64*
  store i64 %693, i64* %722, align 8
  %723 = load i32, i32* %ECX, align 4
  %724 = zext i32 %723 to i64
  %725 = load i64, i64* %PC, align 8
  store i64 %724, i64* %RDI, align 8, !tbaa !2428
  %726 = load i32, i32* %EAX, align 4
  %727 = zext i32 %726 to i64
  store i64 %727, i64* %RDX, align 8, !tbaa !2428
  %728 = load i64, i64* %RBP, align 8
  %729 = add i64 %728, -64
  %730 = add i64 %725, 8
  store i64 %730, i64* %PC, align 8
  %731 = inttoptr i64 %729 to i64*
  %732 = load i64, i64* %731, align 8
  store i64 %732, i64* %RCX, align 8, !tbaa !2428
  store i64 %727, i64* %R8, align 8, !tbaa !2428
  %733 = add i64 %725, 2914
  %734 = add i64 %725, 16
  %735 = load i64, i64* %RSP, align 8, !tbaa !2428
  %736 = add i64 %735, -8
  %737 = inttoptr i64 %736 to i64*
  store i64 %734, i64* %737, align 8
  store i64 %736, i64* %RSP, align 8, !tbaa !2428
  store i64 %733, i64* %PC, align 8, !tbaa !2428
  %738 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %733, %struct.Memory* %MEMORY.1)
  %739 = load i64, i64* %RBP, align 8
  %740 = add i64 %739, -44
  %741 = load i64, i64* %PC, align 8
  %742 = add i64 %741, 3
  store i64 %742, i64* %PC, align 8
  %743 = inttoptr i64 %740 to i32*
  %744 = load i32, i32* %743, align 4
  %745 = add i32 %744, 1
  %746 = zext i32 %745 to i64
  store i64 %746, i64* %RAX, align 8, !tbaa !2428
  %747 = icmp eq i32 %744, -1
  %748 = icmp eq i32 %745, 0
  %749 = or i1 %747, %748
  %750 = zext i1 %749 to i8
  store i8 %750, i8* %20, align 1, !tbaa !2432
  %751 = and i32 %745, 255
  %752 = tail call i32 @llvm.ctpop.i32(i32 %751) #8
  %753 = trunc i32 %752 to i8
  %754 = and i8 %753, 1
  %755 = xor i8 %754, 1
  store i8 %755, i8* %27, align 1, !tbaa !2446
  %756 = xor i32 %744, %745
  %757 = lshr i32 %756, 4
  %758 = trunc i32 %757 to i8
  %759 = and i8 %758, 1
  store i8 %759, i8* %32, align 1, !tbaa !2450
  %760 = zext i1 %748 to i8
  store i8 %760, i8* %35, align 1, !tbaa !2447
  %761 = lshr i32 %745, 31
  %762 = trunc i32 %761 to i8
  store i8 %762, i8* %38, align 1, !tbaa !2448
  %763 = lshr i32 %744, 31
  %764 = xor i32 %761, %763
  %765 = add nuw nsw i32 %764, %761
  %766 = icmp eq i32 %765, 2
  %767 = zext i1 %766 to i8
  store i8 %767, i8* %44, align 1, !tbaa !2449
  %768 = add i64 %741, 9
  store i64 %768, i64* %PC, align 8
  store i32 %745, i32* %743, align 4
  %769 = load i64, i64* %PC, align 8
  %770 = add i64 %769, -197
  store i64 %770, i64* %PC, align 8, !tbaa !2428
  br label %block_401cd2

block_401db4:                                     ; preds = %block_401da8
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %771 = add i64 %1150, 8
  store i64 %771, i64* %PC, align 8
  %772 = load i32, i32* %1122, align 4
  %773 = zext i32 %772 to i64
  store i64 %773, i64* %RCX, align 8, !tbaa !2428
  %774 = add i64 %1150, 11
  store i64 %774, i64* %PC, align 8
  %775 = load i32, i32* %1117, align 4
  %776 = add i32 %775, 1
  %777 = zext i32 %776 to i64
  store i64 %777, i64* %RDX, align 8, !tbaa !2428
  %778 = lshr i32 %776, 31
  %779 = sub i32 %772, %776
  %780 = zext i32 %779 to i64
  store i64 %780, i64* %RCX, align 8, !tbaa !2428
  %781 = icmp ult i32 %772, %776
  %782 = zext i1 %781 to i8
  store i8 %782, i8* %20, align 1, !tbaa !2432
  %783 = and i32 %779, 255
  %784 = tail call i32 @llvm.ctpop.i32(i32 %783) #8
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  store i8 %787, i8* %27, align 1, !tbaa !2446
  %788 = xor i32 %776, %772
  %789 = xor i32 %788, %779
  %790 = lshr i32 %789, 4
  %791 = trunc i32 %790 to i8
  %792 = and i8 %791, 1
  store i8 %792, i8* %32, align 1, !tbaa !2450
  %793 = icmp eq i32 %779, 0
  %794 = zext i1 %793 to i8
  store i8 %794, i8* %35, align 1, !tbaa !2447
  %795 = lshr i32 %779, 31
  %796 = trunc i32 %795 to i8
  store i8 %796, i8* %38, align 1, !tbaa !2448
  %797 = lshr i32 %772, 31
  %798 = xor i32 %778, %797
  %799 = xor i32 %795, %797
  %800 = add nuw nsw i32 %799, %798
  %801 = icmp eq i32 %800, 2
  %802 = zext i1 %801 to i8
  store i8 %802, i8* %44, align 1, !tbaa !2449
  %803 = add i64 %1114, -44
  %804 = add i64 %1150, 19
  store i64 %804, i64* %PC, align 8
  %805 = inttoptr i64 %803 to i32*
  store i32 %779, i32* %805, align 4
  %806 = load i64, i64* %RBP, align 8
  %807 = add i64 %806, -32
  %808 = load i64, i64* %PC, align 8
  %809 = add i64 %808, 4
  store i64 %809, i64* %PC, align 8
  %810 = inttoptr i64 %807 to i64*
  %811 = load i64, i64* %810, align 8
  store i64 %811, i64* %RSI, align 8, !tbaa !2428
  %812 = add i64 %806, -44
  %813 = add i64 %808, 8
  store i64 %813, i64* %PC, align 8
  %814 = inttoptr i64 %812 to i32*
  %815 = load i32, i32* %814, align 4
  %816 = sext i32 %815 to i64
  store i64 %816, i64* %RDI, align 8, !tbaa !2428
  %817 = shl nsw i64 %816, 2
  %818 = add i64 %817, %811
  %819 = add i64 %808, 13
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %818 to i32*
  %821 = load i32, i32* %820, align 4
  %822 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %821, i32* %822, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %823 = add i64 %806, -8
  %824 = add i64 %808, 17
  store i64 %824, i64* %PC, align 8
  %825 = inttoptr i64 %823 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* %RSI, align 8, !tbaa !2428
  %827 = add i64 %806, -12
  %828 = add i64 %808, 20
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %827 to i32*
  %830 = load i32, i32* %829, align 4
  %831 = zext i32 %830 to i64
  store i64 %831, i64* %RCX, align 8, !tbaa !2428
  %832 = add i64 %808, 24
  store i64 %832, i64* %PC, align 8
  %833 = load i32, i32* %814, align 4
  %834 = sext i32 %830 to i64
  %835 = sext i32 %833 to i64
  %836 = mul nsw i64 %835, %834
  %837 = trunc i64 %836 to i32
  %838 = and i64 %836, 4294967295
  store i64 %838, i64* %RCX, align 8, !tbaa !2428
  %839 = shl i64 %836, 32
  %840 = ashr exact i64 %839, 32
  %841 = icmp ne i64 %840, %836
  %842 = zext i1 %841 to i8
  store i8 %842, i8* %20, align 1, !tbaa !2432
  %843 = and i32 %837, 255
  %844 = tail call i32 @llvm.ctpop.i32(i32 %843) #8
  %845 = trunc i32 %844 to i8
  %846 = and i8 %845, 1
  %847 = xor i8 %846, 1
  store i8 %847, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %848 = lshr i32 %837, 31
  %849 = trunc i32 %848 to i8
  store i8 %849, i8* %38, align 1, !tbaa !2448
  store i8 %842, i8* %44, align 1, !tbaa !2449
  %850 = add i64 %808, 27
  store i64 %850, i64* %PC, align 8
  %851 = load i32, i32* %814, align 4
  %852 = add i32 %851, %837
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RCX, align 8, !tbaa !2428
  %854 = icmp ult i32 %852, %837
  %855 = icmp ult i32 %852, %851
  %856 = or i1 %854, %855
  %857 = zext i1 %856 to i8
  store i8 %857, i8* %20, align 1, !tbaa !2432
  %858 = and i32 %852, 255
  %859 = tail call i32 @llvm.ctpop.i32(i32 %858) #8
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  %862 = xor i8 %861, 1
  store i8 %862, i8* %27, align 1, !tbaa !2446
  %863 = xor i32 %851, %837
  %864 = xor i32 %863, %852
  %865 = lshr i32 %864, 4
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  store i8 %867, i8* %32, align 1, !tbaa !2450
  %868 = icmp eq i32 %852, 0
  %869 = zext i1 %868 to i8
  store i8 %869, i8* %35, align 1, !tbaa !2447
  %870 = lshr i32 %852, 31
  %871 = trunc i32 %870 to i8
  store i8 %871, i8* %38, align 1, !tbaa !2448
  %872 = lshr i32 %851, 31
  %873 = xor i32 %870, %848
  %874 = xor i32 %870, %872
  %875 = add nuw nsw i32 %873, %874
  %876 = icmp eq i32 %875, 2
  %877 = zext i1 %876 to i8
  store i8 %877, i8* %44, align 1, !tbaa !2449
  %878 = sext i32 %852 to i64
  store i64 %878, i64* %RDI, align 8, !tbaa !2428
  %879 = shl nsw i64 %878, 2
  %880 = add i64 %879, %826
  %881 = add i64 %808, 35
  store i64 %881, i64* %PC, align 8
  %882 = load <2 x float>, <2 x float>* %1639, align 1
  %883 = load <2 x i32>, <2 x i32>* %1640, align 1
  %884 = inttoptr i64 %880 to float*
  %885 = load float, float* %884, align 4
  %886 = extractelement <2 x float> %882, i32 0
  %887 = fdiv float %886, %885
  store float %887, float* %.pre-phi11, align 1, !tbaa !2452
  %888 = bitcast <2 x float> %882 to <2 x i32>
  %889 = extractelement <2 x i32> %888, i32 1
  store i32 %889, i32* %1641, align 1, !tbaa !2452
  %890 = extractelement <2 x i32> %883, i32 0
  store i32 %890, i32* %1642, align 1, !tbaa !2452
  %891 = extractelement <2 x i32> %883, i32 1
  store i32 %891, i32* %1643, align 1, !tbaa !2452
  %892 = load i64, i64* %RBP, align 8
  %893 = add i64 %892, -32
  %894 = add i64 %808, 39
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %893 to i64*
  %896 = load i64, i64* %895, align 8
  store i64 %896, i64* %RSI, align 8, !tbaa !2428
  %897 = add i64 %892, -44
  %898 = add i64 %808, 43
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i32*
  %900 = load i32, i32* %899, align 4
  %901 = sext i32 %900 to i64
  store i64 %901, i64* %RDI, align 8, !tbaa !2428
  %902 = shl nsw i64 %901, 2
  %903 = add i64 %902, %896
  %904 = add i64 %808, 48
  store i64 %904, i64* %PC, align 8
  %905 = load <2 x float>, <2 x float>* %.pre-phi27, align 1
  %906 = extractelement <2 x float> %905, i32 0
  %907 = inttoptr i64 %903 to float*
  store float %906, float* %907, align 4
  %908 = load i64, i64* %RBP, align 8
  %909 = add i64 %908, -32
  %910 = load i64, i64* %PC, align 8
  %911 = add i64 %910, 4
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %909 to i64*
  %913 = load i64, i64* %912, align 8
  store i64 %913, i64* %RSI, align 8, !tbaa !2428
  %914 = add i64 %908, -44
  %915 = add i64 %910, 8
  store i64 %915, i64* %PC, align 8
  %916 = inttoptr i64 %914 to i32*
  %917 = load i32, i32* %916, align 4
  %918 = sext i32 %917 to i64
  store i64 %918, i64* %RDI, align 8, !tbaa !2428
  %919 = shl nsw i64 %918, 2
  %920 = add i64 %919, %913
  %921 = add i64 %910, 13
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to i32*
  %923 = load i32, i32* %922, align 4
  store i32 %923, i32* %822, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %924 = add i64 %910, 17
  store i64 %924, i64* %PC, align 8
  %925 = load i64, i64* %1644, align 1
  %926 = trunc i64 %925 to i32
  store i32 %926, i32* %ECX, align 1, !tbaa !2451
  store i32 0, i32* %1646, align 1, !tbaa !2451
  %927 = load i64, i64* %RCX, align 8
  %928 = xor i64 %927, -2147483648
  %929 = trunc i64 %928 to i32
  %930 = and i64 %928, 4294967295
  store i64 %930, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %20, align 1, !tbaa !2432
  %931 = and i32 %929, 255
  %932 = tail call i32 @llvm.ctpop.i32(i32 %931) #8
  %933 = trunc i32 %932 to i8
  %934 = and i8 %933, 1
  %935 = xor i8 %934, 1
  store i8 %935, i8* %27, align 1, !tbaa !2446
  %936 = icmp eq i32 %929, 0
  %937 = zext i1 %936 to i8
  store i8 %937, i8* %35, align 1, !tbaa !2447
  %938 = lshr i32 %929, 31
  %939 = trunc i32 %938 to i8
  store i8 %939, i8* %38, align 1, !tbaa !2448
  store i8 0, i8* %44, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i32 %929, i32* %1647, align 1, !tbaa !2451
  store i32 0, i32* %1641, align 1, !tbaa !2451
  store i32 0, i32* %1642, align 1, !tbaa !2451
  store i32 0, i32* %1643, align 1, !tbaa !2451
  %940 = load i64, i64* %RBP, align 8
  %941 = add i64 %940, -40
  %942 = add i64 %910, 32
  store i64 %942, i64* %PC, align 8
  %943 = load <2 x float>, <2 x float>* %.pre-phi27, align 1
  %944 = extractelement <2 x float> %943, i32 0
  %945 = inttoptr i64 %941 to float*
  store float %944, float* %945, align 4
  %946 = load i64, i64* %RBP, align 8
  %947 = add i64 %946, -44
  %948 = load i64, i64* %PC, align 8
  %949 = add i64 %948, 3
  store i64 %949, i64* %PC, align 8
  %950 = inttoptr i64 %947 to i32*
  %951 = load i32, i32* %950, align 4
  %952 = zext i32 %951 to i64
  store i64 %952, i64* %RDI, align 8, !tbaa !2428
  %953 = add i64 %946, -40
  %954 = add i64 %948, 8
  store i64 %954, i64* %PC, align 8
  %955 = inttoptr i64 %953 to i32*
  %956 = load i32, i32* %955, align 4
  store i32 %956, i32* %822, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi19, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi23, align 1, !tbaa !2452
  %957 = add i64 %946, -8
  %958 = add i64 %948, 12
  store i64 %958, i64* %PC, align 8
  %959 = inttoptr i64 %957 to i64*
  %960 = load i64, i64* %959, align 8
  store i64 %960, i64* %RSI, align 8, !tbaa !2428
  %961 = add i64 %946, -12
  %962 = add i64 %948, 15
  store i64 %962, i64* %PC, align 8
  %963 = inttoptr i64 %961 to i32*
  %964 = load i32, i32* %963, align 4
  %965 = zext i32 %964 to i64
  store i64 %965, i64* %RCX, align 8, !tbaa !2428
  %966 = add i64 %948, 19
  store i64 %966, i64* %PC, align 8
  %967 = load i32, i32* %950, align 4
  %968 = sext i32 %964 to i64
  %969 = sext i32 %967 to i64
  %970 = mul nsw i64 %969, %968
  %971 = and i64 %970, 4294967295
  store i64 %971, i64* %RCX, align 8, !tbaa !2428
  %972 = shl i64 %970, 32
  %973 = ashr exact i64 %972, 30
  store i64 %973, i64* %R8, align 8, !tbaa !2428
  %974 = lshr i64 %973, 63
  %975 = add i64 %973, %960
  store i64 %975, i64* %RSI, align 8, !tbaa !2428
  %976 = icmp ult i64 %975, %960
  %977 = icmp ult i64 %975, %973
  %978 = or i1 %976, %977
  %979 = zext i1 %978 to i8
  store i8 %979, i8* %20, align 1, !tbaa !2432
  %980 = trunc i64 %975 to i32
  %981 = and i32 %980, 255
  %982 = tail call i32 @llvm.ctpop.i32(i32 %981) #8
  %983 = trunc i32 %982 to i8
  %984 = and i8 %983, 1
  %985 = xor i8 %984, 1
  store i8 %985, i8* %27, align 1, !tbaa !2446
  %986 = xor i64 %973, %960
  %987 = xor i64 %986, %975
  %988 = lshr i64 %987, 4
  %989 = trunc i64 %988 to i8
  %990 = and i8 %989, 1
  store i8 %990, i8* %32, align 1, !tbaa !2450
  %991 = icmp eq i64 %975, 0
  %992 = zext i1 %991 to i8
  store i8 %992, i8* %35, align 1, !tbaa !2447
  %993 = lshr i64 %975, 63
  %994 = trunc i64 %993 to i8
  store i8 %994, i8* %38, align 1, !tbaa !2448
  %995 = lshr i64 %960, 63
  %996 = xor i64 %993, %995
  %997 = xor i64 %993, %974
  %998 = add nuw nsw i64 %996, %997
  %999 = icmp eq i64 %998, 2
  %1000 = zext i1 %999 to i8
  store i8 %1000, i8* %44, align 1, !tbaa !2449
  %1001 = load i64, i64* %RBP, align 8
  %1002 = add i64 %1001, -32
  %1003 = add i64 %948, 36
  store i64 %1003, i64* %PC, align 8
  %1004 = inttoptr i64 %1002 to i64*
  %1005 = load i64, i64* %1004, align 8
  store i64 %1005, i64* %RCX, align 8, !tbaa !2428
  %1006 = load i32, i32* %EAX, align 4
  %1007 = zext i32 %1006 to i64
  store i64 %1007, i64* %RDX, align 8, !tbaa !2428
  store i64 %1007, i64* %.pre-phi29, align 8, !tbaa !2428
  %1008 = add i64 %948, 2761
  %1009 = add i64 %948, 46
  %1010 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1011 = add i64 %1010, -8
  %1012 = inttoptr i64 %1011 to i64*
  store i64 %1009, i64* %1012, align 8
  store i64 %1011, i64* %RSP, align 8, !tbaa !2428
  store i64 %1008, i64* %PC, align 8, !tbaa !2428
  %1013 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %1008, %struct.Memory* %MEMORY.3)
  %1014 = load i64, i64* %RBP, align 8
  %1015 = add i64 %1014, -48
  %1016 = load i64, i64* %PC, align 8
  %1017 = add i64 %1016, 3
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1015 to i32*
  %1019 = load i32, i32* %1018, align 4
  %1020 = add i32 %1019, 1
  %1021 = zext i32 %1020 to i64
  store i64 %1021, i64* %RAX, align 8, !tbaa !2428
  %1022 = icmp eq i32 %1019, -1
  %1023 = icmp eq i32 %1020, 0
  %1024 = or i1 %1022, %1023
  %1025 = zext i1 %1024 to i8
  store i8 %1025, i8* %20, align 1, !tbaa !2432
  %1026 = and i32 %1020, 255
  %1027 = tail call i32 @llvm.ctpop.i32(i32 %1026) #8
  %1028 = trunc i32 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = xor i8 %1029, 1
  store i8 %1030, i8* %27, align 1, !tbaa !2446
  %1031 = xor i32 %1019, %1020
  %1032 = lshr i32 %1031, 4
  %1033 = trunc i32 %1032 to i8
  %1034 = and i8 %1033, 1
  store i8 %1034, i8* %32, align 1, !tbaa !2450
  %1035 = zext i1 %1023 to i8
  store i8 %1035, i8* %35, align 1, !tbaa !2447
  %1036 = lshr i32 %1020, 31
  %1037 = trunc i32 %1036 to i8
  store i8 %1037, i8* %38, align 1, !tbaa !2448
  %1038 = lshr i32 %1019, 31
  %1039 = xor i32 %1036, %1038
  %1040 = add nuw nsw i32 %1039, %1036
  %1041 = icmp eq i32 %1040, 2
  %1042 = zext i1 %1041 to i8
  store i8 %1042, i8* %44, align 1, !tbaa !2449
  %1043 = add i64 %1016, 9
  store i64 %1043, i64* %PC, align 8
  store i32 %1020, i32* %1018, align 4
  %1044 = load i64, i64* %PC, align 8
  %1045 = add i64 %1044, -166
  store i64 %1045, i64* %PC, align 8, !tbaa !2428
  br label %block_401da8

block_401fac:                                     ; preds = %block_401f09
  %1046 = add i64 %1496, -32
  %1047 = add i64 %1531, 4
  store i64 %1047, i64* %PC, align 8
  %1048 = inttoptr i64 %1046 to i64*
  %1049 = load i64, i64* %1048, align 8
  store i64 %1049, i64* %RAX, align 8, !tbaa !2428
  %1050 = add i64 %1531, 8
  store i64 %1050, i64* %PC, align 8
  %1051 = load i32, i32* %1500, align 4
  %1052 = sext i32 %1051 to i64
  store i64 %1052, i64* %RCX, align 8, !tbaa !2428
  %1053 = shl nsw i64 %1052, 2
  %1054 = add i64 %1053, %1049
  %1055 = add i64 %1531, 13
  store i64 %1055, i64* %PC, align 8
  %1056 = inttoptr i64 %1054 to i32*
  %1057 = load i32, i32* %1056, align 4
  store i32 %1057, i32* %1277, align 1, !tbaa !2452
  store float 0.000000e+00, float* %562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %564, align 1, !tbaa !2452
  store float 0.000000e+00, float* %566, align 1, !tbaa !2452
  %1058 = add i64 %1496, -40
  %1059 = add i64 %1531, 18
  store i64 %1059, i64* %PC, align 8
  %1060 = load <2 x float>, <2 x float>* %558, align 1
  %1061 = extractelement <2 x float> %1060, i32 0
  %1062 = inttoptr i64 %1058 to float*
  store float %1061, float* %1062, align 4
  %1063 = load i64, i64* %RBP, align 8
  %1064 = add i64 %1063, -32
  %1065 = load i64, i64* %PC, align 8
  %1066 = add i64 %1065, 4
  store i64 %1066, i64* %PC, align 8
  %1067 = inttoptr i64 %1064 to i64*
  %1068 = load i64, i64* %1067, align 8
  store i64 %1068, i64* %RAX, align 8, !tbaa !2428
  %1069 = add i64 %1063, -44
  %1070 = add i64 %1065, 8
  store i64 %1070, i64* %PC, align 8
  %1071 = inttoptr i64 %1069 to i32*
  %1072 = load i32, i32* %1071, align 4
  %1073 = sext i32 %1072 to i64
  store i64 %1073, i64* %RCX, align 8, !tbaa !2428
  %1074 = shl nsw i64 %1073, 2
  %1075 = add i64 %1074, %1068
  %1076 = add i64 %1065, 13
  store i64 %1076, i64* %PC, align 8
  %1077 = inttoptr i64 %1075 to i32*
  %1078 = load i32, i32* %1077, align 4
  store i32 %1078, i32* %1277, align 1, !tbaa !2452
  store float 0.000000e+00, float* %562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %564, align 1, !tbaa !2452
  store float 0.000000e+00, float* %566, align 1, !tbaa !2452
  %1079 = add i64 %1065, 17
  store i64 %1079, i64* %PC, align 8
  %1080 = load i64, i64* %1067, align 8
  store i64 %1080, i64* %RAX, align 8, !tbaa !2428
  %1081 = add i64 %1063, -52
  %1082 = add i64 %1065, 21
  store i64 %1082, i64* %PC, align 8
  %1083 = inttoptr i64 %1081 to i32*
  %1084 = load i32, i32* %1083, align 4
  %1085 = sext i32 %1084 to i64
  store i64 %1085, i64* %RCX, align 8, !tbaa !2428
  %1086 = shl nsw i64 %1085, 2
  %1087 = add i64 %1086, %1080
  %1088 = add i64 %1065, 26
  store i64 %1088, i64* %PC, align 8
  %1089 = load <2 x float>, <2 x float>* %558, align 1
  %1090 = extractelement <2 x float> %1089, i32 0
  %1091 = inttoptr i64 %1087 to float*
  store float %1090, float* %1091, align 4
  %1092 = load i64, i64* %RBP, align 8
  %1093 = add i64 %1092, -40
  %1094 = load i64, i64* %PC, align 8
  %1095 = add i64 %1094, 5
  store i64 %1095, i64* %PC, align 8
  %1096 = inttoptr i64 %1093 to i32*
  %1097 = load i32, i32* %1096, align 4
  store i32 %1097, i32* %1277, align 1, !tbaa !2452
  store float 0.000000e+00, float* %562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %564, align 1, !tbaa !2452
  store float 0.000000e+00, float* %566, align 1, !tbaa !2452
  %1098 = add i64 %1092, -32
  %1099 = add i64 %1094, 9
  store i64 %1099, i64* %PC, align 8
  %1100 = inttoptr i64 %1098 to i64*
  %1101 = load i64, i64* %1100, align 8
  store i64 %1101, i64* %RAX, align 8, !tbaa !2428
  %1102 = add i64 %1092, -44
  %1103 = add i64 %1094, 13
  store i64 %1103, i64* %PC, align 8
  %1104 = inttoptr i64 %1102 to i32*
  %1105 = load i32, i32* %1104, align 4
  %1106 = sext i32 %1105 to i64
  store i64 %1106, i64* %RCX, align 8, !tbaa !2428
  %1107 = shl nsw i64 %1106, 2
  %1108 = add i64 %1107, %1101
  %1109 = add i64 %1094, 18
  store i64 %1109, i64* %PC, align 8
  %1110 = load <2 x float>, <2 x float>* %558, align 1
  %1111 = extractelement <2 x float> %1110, i32 0
  %1112 = inttoptr i64 %1108 to float*
  store float %1111, float* %1112, align 4
  %.pre7 = load i64, i64* %PC, align 8
  %.pre8 = load i64, i64* %RBP, align 8
  br label %block_401fea

block_401da8:                                     ; preds = %block_401da1, %block_401db4
  %1113 = phi i64 [ %.pre4, %block_401da1 ], [ %1045, %block_401db4 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.7, %block_401da1 ], [ %1013, %block_401db4 ]
  %1114 = load i64, i64* %RBP, align 8
  %1115 = add i64 %1114, -48
  %1116 = add i64 %1113, 3
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1115 to i32*
  %1118 = load i32, i32* %1117, align 4
  %1119 = zext i32 %1118 to i64
  store i64 %1119, i64* %RAX, align 8, !tbaa !2428
  %1120 = add i64 %1114, -16
  %1121 = add i64 %1113, 6
  store i64 %1121, i64* %PC, align 8
  %1122 = inttoptr i64 %1120 to i32*
  %1123 = load i32, i32* %1122, align 4
  %1124 = sub i32 %1118, %1123
  %1125 = icmp ult i32 %1118, %1123
  %1126 = zext i1 %1125 to i8
  store i8 %1126, i8* %20, align 1, !tbaa !2432
  %1127 = and i32 %1124, 255
  %1128 = tail call i32 @llvm.ctpop.i32(i32 %1127) #8
  %1129 = trunc i32 %1128 to i8
  %1130 = and i8 %1129, 1
  %1131 = xor i8 %1130, 1
  store i8 %1131, i8* %27, align 1, !tbaa !2446
  %1132 = xor i32 %1123, %1118
  %1133 = xor i32 %1132, %1124
  %1134 = lshr i32 %1133, 4
  %1135 = trunc i32 %1134 to i8
  %1136 = and i8 %1135, 1
  store i8 %1136, i8* %32, align 1, !tbaa !2450
  %1137 = icmp eq i32 %1124, 0
  %1138 = zext i1 %1137 to i8
  store i8 %1138, i8* %35, align 1, !tbaa !2447
  %1139 = lshr i32 %1124, 31
  %1140 = trunc i32 %1139 to i8
  store i8 %1140, i8* %38, align 1, !tbaa !2448
  %1141 = lshr i32 %1118, 31
  %1142 = lshr i32 %1123, 31
  %1143 = xor i32 %1142, %1141
  %1144 = xor i32 %1139, %1141
  %1145 = add nuw nsw i32 %1144, %1143
  %1146 = icmp eq i32 %1145, 2
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %44, align 1, !tbaa !2449
  %1148 = icmp ne i8 %1140, 0
  %1149 = xor i1 %1148, %1146
  %.v34 = select i1 %1149, i64 12, i64 171
  %1150 = add i64 %1113, %.v34
  store i64 %1150, i64* %PC, align 8, !tbaa !2428
  br i1 %1149, label %block_401db4, label %block_401e53

block_401ffd:                                     ; preds = %block_401efd
  store i64 %1633, i64* %PC, align 8, !tbaa !2428
  br label %block_402002

block_401d9c:                                     ; preds = %block_401cd2
  %1151 = add i64 %441, 5
  store i64 %1151, i64* %PC, align 8, !tbaa !2428
  br label %block_401da1

block_401d0a:                                     ; preds = %block_401cde
  %1152 = add i64 %491, -32
  %1153 = add i64 %526, 4
  store i64 %1153, i64* %PC, align 8
  %1154 = inttoptr i64 %1152 to i64*
  %1155 = load i64, i64* %1154, align 8
  store i64 %1155, i64* %RAX, align 8, !tbaa !2428
  %1156 = add i64 %526, 8
  store i64 %1156, i64* %PC, align 8
  %1157 = load i32, i32* %500, align 4
  %1158 = sext i32 %1157 to i64
  store i64 %1158, i64* %RCX, align 8, !tbaa !2428
  %1159 = shl nsw i64 %1158, 2
  %1160 = add i64 %1159, %1155
  %1161 = add i64 %526, 13
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1160 to i32*
  %1163 = load i32, i32* %1162, align 4
  store i32 %1163, i32* %485, align 1, !tbaa !2452
  store float 0.000000e+00, float* %447, align 1, !tbaa !2452
  store float 0.000000e+00, float* %449, align 1, !tbaa !2452
  store float 0.000000e+00, float* %451, align 1, !tbaa !2452
  %1164 = add i64 %526, 17
  store i64 %1164, i64* %PC, align 8
  %1165 = load i64, i64* %1154, align 8
  store i64 %1165, i64* %RAX, align 8, !tbaa !2428
  %1166 = add i64 %526, 21
  store i64 %1166, i64* %PC, align 8
  %1167 = load i32, i32* %495, align 4
  %1168 = sext i32 %1167 to i64
  store i64 %1168, i64* %RCX, align 8, !tbaa !2428
  %1169 = shl nsw i64 %1168, 2
  %1170 = add i64 %1169, %1165
  %1171 = add i64 %526, 26
  store i64 %1171, i64* %PC, align 8
  %1172 = load <2 x float>, <2 x float>* %452, align 1
  %1173 = extractelement <2 x float> %1172, i32 0
  %1174 = inttoptr i64 %1170 to float*
  store float %1173, float* %1174, align 4
  %1175 = load i64, i64* %RBP, align 8
  %1176 = add i64 %1175, -40
  %1177 = load i64, i64* %PC, align 8
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC, align 8
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179, align 4
  store i32 %1180, i32* %485, align 1, !tbaa !2452
  store float 0.000000e+00, float* %447, align 1, !tbaa !2452
  store float 0.000000e+00, float* %449, align 1, !tbaa !2452
  store float 0.000000e+00, float* %451, align 1, !tbaa !2452
  %1181 = add i64 %1175, -32
  %1182 = add i64 %1177, 9
  store i64 %1182, i64* %PC, align 8
  %1183 = inttoptr i64 %1181 to i64*
  %1184 = load i64, i64* %1183, align 8
  store i64 %1184, i64* %RAX, align 8, !tbaa !2428
  %1185 = add i64 %1175, -44
  %1186 = add i64 %1177, 13
  store i64 %1186, i64* %PC, align 8
  %1187 = inttoptr i64 %1185 to i32*
  %1188 = load i32, i32* %1187, align 4
  %1189 = sext i32 %1188 to i64
  store i64 %1189, i64* %RCX, align 8, !tbaa !2428
  %1190 = shl nsw i64 %1189, 2
  %1191 = add i64 %1190, %1184
  %1192 = add i64 %1177, 18
  store i64 %1192, i64* %PC, align 8
  %1193 = load <2 x float>, <2 x float>* %452, align 1
  %1194 = extractelement <2 x float> %1193, i32 0
  %1195 = inttoptr i64 %1191 to float*
  store float %1194, float* %1195, align 4
  %.pre2 = load i64, i64* %PC, align 8
  %.pre3 = load i64, i64* %RBP, align 8
  br label %block_401d36

block_401eec:                                     ; preds = %block_401e5f
  %1196 = add i64 %366, -56
  %1197 = add i64 %402, 4
  store i64 %1197, i64* %PC, align 8
  %1198 = inttoptr i64 %1196 to i32*
  %1199 = load i32, i32* %1198, align 4
  %1200 = add i32 %1199, -1
  %1201 = icmp eq i32 %1199, 0
  %1202 = zext i1 %1201 to i8
  store i8 %1202, i8* %20, align 1, !tbaa !2432
  %1203 = and i32 %1200, 255
  %1204 = tail call i32 @llvm.ctpop.i32(i32 %1203) #8
  %1205 = trunc i32 %1204 to i8
  %1206 = and i8 %1205, 1
  %1207 = xor i8 %1206, 1
  store i8 %1207, i8* %27, align 1, !tbaa !2446
  %1208 = xor i32 %1199, %1200
  %1209 = lshr i32 %1208, 4
  %1210 = trunc i32 %1209 to i8
  %1211 = and i8 %1210, 1
  store i8 %1211, i8* %32, align 1, !tbaa !2450
  %1212 = icmp eq i32 %1200, 0
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %35, align 1, !tbaa !2447
  %1214 = lshr i32 %1200, 31
  %1215 = trunc i32 %1214 to i8
  store i8 %1215, i8* %38, align 1, !tbaa !2448
  %1216 = lshr i32 %1199, 31
  %1217 = xor i32 %1214, %1216
  %1218 = add nuw nsw i32 %1217, %1216
  %1219 = icmp eq i32 %1218, 2
  %1220 = zext i1 %1219 to i8
  store i8 %1220, i8* %44, align 1, !tbaa !2449
  %1221 = icmp ne i8 %1215, 0
  %1222 = xor i1 %1221, %1219
  %.v36 = select i1 %1222, i64 278, i64 10
  %1223 = add i64 %402, %.v36
  store i64 %1223, i64* %PC, align 8, !tbaa !2428
  br i1 %1222, label %block_402002, label %block_401ef6

block_401f09:                                     ; preds = %block_401efd
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1224 = add i64 %1596, -16
  %1225 = add i64 %1632, 8
  store i64 %1225, i64* %PC, align 8
  %1226 = inttoptr i64 %1224 to i32*
  %1227 = load i32, i32* %1226, align 4
  %1228 = zext i32 %1227 to i64
  store i64 %1228, i64* %RCX, align 8, !tbaa !2428
  %1229 = add i64 %1632, 11
  store i64 %1229, i64* %PC, align 8
  %1230 = load i32, i32* %1599, align 4
  %1231 = add i32 %1230, 1
  %1232 = zext i32 %1231 to i64
  store i64 %1232, i64* %RDX, align 8, !tbaa !2428
  %1233 = lshr i32 %1231, 31
  %1234 = sub i32 %1227, %1231
  %1235 = zext i32 %1234 to i64
  store i64 %1235, i64* %RCX, align 8, !tbaa !2428
  %1236 = icmp ult i32 %1227, %1231
  %1237 = zext i1 %1236 to i8
  store i8 %1237, i8* %20, align 1, !tbaa !2432
  %1238 = and i32 %1234, 255
  %1239 = tail call i32 @llvm.ctpop.i32(i32 %1238) #8
  %1240 = trunc i32 %1239 to i8
  %1241 = and i8 %1240, 1
  %1242 = xor i8 %1241, 1
  store i8 %1242, i8* %27, align 1, !tbaa !2446
  %1243 = xor i32 %1231, %1227
  %1244 = xor i32 %1243, %1234
  %1245 = lshr i32 %1244, 4
  %1246 = trunc i32 %1245 to i8
  %1247 = and i8 %1246, 1
  store i8 %1247, i8* %32, align 1, !tbaa !2450
  %1248 = icmp eq i32 %1234, 0
  %1249 = zext i1 %1248 to i8
  store i8 %1249, i8* %35, align 1, !tbaa !2447
  %1250 = lshr i32 %1234, 31
  %1251 = trunc i32 %1250 to i8
  store i8 %1251, i8* %38, align 1, !tbaa !2448
  %1252 = lshr i32 %1227, 31
  %1253 = xor i32 %1233, %1252
  %1254 = xor i32 %1250, %1252
  %1255 = add nuw nsw i32 %1254, %1253
  %1256 = icmp eq i32 %1255, 2
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %44, align 1, !tbaa !2449
  %1258 = add i64 %1596, -44
  %1259 = add i64 %1632, 19
  store i64 %1259, i64* %PC, align 8
  %1260 = inttoptr i64 %1258 to i32*
  store i32 %1234, i32* %1260, align 4
  %1261 = load i64, i64* %RBP, align 8
  %1262 = add i64 %1261, -32
  %1263 = load i64, i64* %PC, align 8
  %1264 = add i64 %1263, 4
  store i64 %1264, i64* %PC, align 8
  %1265 = inttoptr i64 %1262 to i64*
  %1266 = load i64, i64* %1265, align 8
  store i64 %1266, i64* %RSI, align 8, !tbaa !2428
  %1267 = add i64 %1261, -44
  %1268 = add i64 %1263, 8
  store i64 %1268, i64* %PC, align 8
  %1269 = inttoptr i64 %1267 to i32*
  %1270 = load i32, i32* %1269, align 4
  %1271 = sext i32 %1270 to i64
  store i64 %1271, i64* %RDI, align 8, !tbaa !2428
  %1272 = shl nsw i64 %1271, 2
  %1273 = add i64 %1272, %1266
  %1274 = add i64 %1263, 13
  store i64 %1274, i64* %PC, align 8
  %1275 = inttoptr i64 %1273 to i32*
  %1276 = load i32, i32* %1275, align 4
  %1277 = bitcast [32 x %union.VectorReg]* %9 to i32*
  store i32 %1276, i32* %1277, align 1, !tbaa !2452
  store float 0.000000e+00, float* %562, align 1, !tbaa !2452
  store float 0.000000e+00, float* %564, align 1, !tbaa !2452
  store float 0.000000e+00, float* %566, align 1, !tbaa !2452
  %1278 = add i64 %1261, -16
  %1279 = add i64 %1263, 16
  store i64 %1279, i64* %PC, align 8
  %1280 = inttoptr i64 %1278 to i32*
  %1281 = load i32, i32* %1280, align 4
  %1282 = zext i32 %1281 to i64
  store i64 %1282, i64* %RCX, align 8, !tbaa !2428
  %1283 = add i64 %1263, 19
  store i64 %1283, i64* %PC, align 8
  %1284 = load i32, i32* %1269, align 4
  %1285 = add i32 %1284, 1
  %1286 = zext i32 %1285 to i64
  store i64 %1286, i64* %RDX, align 8, !tbaa !2428
  %1287 = lshr i32 %1285, 31
  %1288 = sub i32 %1281, %1285
  %1289 = zext i32 %1288 to i64
  store i64 %1289, i64* %RCX, align 8, !tbaa !2428
  %1290 = icmp ult i32 %1281, %1285
  %1291 = zext i1 %1290 to i8
  store i8 %1291, i8* %20, align 1, !tbaa !2432
  %1292 = and i32 %1288, 255
  %1293 = tail call i32 @llvm.ctpop.i32(i32 %1292) #8
  %1294 = trunc i32 %1293 to i8
  %1295 = and i8 %1294, 1
  %1296 = xor i8 %1295, 1
  store i8 %1296, i8* %27, align 1, !tbaa !2446
  %1297 = xor i32 %1285, %1281
  %1298 = xor i32 %1297, %1288
  %1299 = lshr i32 %1298, 4
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  store i8 %1301, i8* %32, align 1, !tbaa !2450
  %1302 = icmp eq i32 %1288, 0
  %1303 = zext i1 %1302 to i8
  store i8 %1303, i8* %35, align 1, !tbaa !2447
  %1304 = lshr i32 %1288, 31
  %1305 = trunc i32 %1304 to i8
  store i8 %1305, i8* %38, align 1, !tbaa !2448
  %1306 = lshr i32 %1281, 31
  %1307 = xor i32 %1287, %1306
  %1308 = xor i32 %1304, %1306
  %1309 = add nuw nsw i32 %1308, %1307
  %1310 = icmp eq i32 %1309, 2
  %1311 = zext i1 %1310 to i8
  store i8 %1311, i8* %44, align 1, !tbaa !2449
  %1312 = load i64, i64* %RBP, align 8
  %1313 = add i64 %1312, -8
  %1314 = add i64 %1263, 28
  store i64 %1314, i64* %PC, align 8
  %1315 = inttoptr i64 %1313 to i64*
  %1316 = load i64, i64* %1315, align 8
  store i64 %1316, i64* %RSI, align 8, !tbaa !2428
  %1317 = add i64 %1312, -12
  %1318 = add i64 %1263, 31
  store i64 %1318, i64* %PC, align 8
  %1319 = inttoptr i64 %1317 to i32*
  %1320 = load i32, i32* %1319, align 4
  %1321 = zext i32 %1320 to i64
  store i64 %1321, i64* %RDX, align 8, !tbaa !2428
  %1322 = add i64 %1312, -44
  %1323 = add i64 %1263, 35
  store i64 %1323, i64* %PC, align 8
  %1324 = inttoptr i64 %1322 to i32*
  %1325 = load i32, i32* %1324, align 4
  %1326 = sext i32 %1320 to i64
  %1327 = sext i32 %1325 to i64
  %1328 = mul nsw i64 %1327, %1326
  %1329 = trunc i64 %1328 to i32
  %1330 = and i64 %1328, 4294967295
  store i64 %1330, i64* %RDX, align 8, !tbaa !2428
  %1331 = shl i64 %1328, 32
  %1332 = ashr exact i64 %1331, 32
  %1333 = icmp ne i64 %1332, %1328
  %1334 = zext i1 %1333 to i8
  store i8 %1334, i8* %20, align 1, !tbaa !2432
  %1335 = and i32 %1329, 255
  %1336 = tail call i32 @llvm.ctpop.i32(i32 %1335) #8
  %1337 = trunc i32 %1336 to i8
  %1338 = and i8 %1337, 1
  %1339 = xor i8 %1338, 1
  store i8 %1339, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %35, align 1, !tbaa !2447
  %1340 = lshr i32 %1329, 31
  %1341 = trunc i32 %1340 to i8
  store i8 %1341, i8* %38, align 1, !tbaa !2448
  store i8 %1334, i8* %44, align 1, !tbaa !2449
  %1342 = add i64 %1263, 38
  store i64 %1342, i64* %PC, align 8
  %1343 = load i32, i32* %1324, align 4
  %1344 = add i32 %1343, %1329
  %1345 = add i32 %1344, 1
  %1346 = zext i32 %1345 to i64
  store i64 %1346, i64* %RDX, align 8, !tbaa !2428
  %1347 = sext i32 %1345 to i64
  %1348 = shl nsw i64 %1347, 2
  store i64 %1348, i64* %RDI, align 8, !tbaa !2428
  %1349 = lshr i64 %1347, 61
  %1350 = and i64 %1349, 1
  %1351 = load i64, i64* %RSI, align 8
  %1352 = add i64 %1348, %1351
  store i64 %1352, i64* %RSI, align 8, !tbaa !2428
  %1353 = icmp ult i64 %1352, %1351
  %1354 = icmp ult i64 %1352, %1348
  %1355 = or i1 %1353, %1354
  %1356 = zext i1 %1355 to i8
  store i8 %1356, i8* %20, align 1, !tbaa !2432
  %1357 = trunc i64 %1352 to i32
  %1358 = and i32 %1357, 255
  %1359 = tail call i32 @llvm.ctpop.i32(i32 %1358) #8
  %1360 = trunc i32 %1359 to i8
  %1361 = and i8 %1360, 1
  %1362 = xor i8 %1361, 1
  store i8 %1362, i8* %27, align 1, !tbaa !2446
  %1363 = xor i64 %1348, %1351
  %1364 = xor i64 %1363, %1352
  %1365 = lshr i64 %1364, 4
  %1366 = trunc i64 %1365 to i8
  %1367 = and i8 %1366, 1
  store i8 %1367, i8* %32, align 1, !tbaa !2450
  %1368 = icmp eq i64 %1352, 0
  %1369 = zext i1 %1368 to i8
  store i8 %1369, i8* %35, align 1, !tbaa !2447
  %1370 = lshr i64 %1352, 63
  %1371 = trunc i64 %1370 to i8
  store i8 %1371, i8* %38, align 1, !tbaa !2448
  %1372 = lshr i64 %1351, 63
  %1373 = xor i64 %1370, %1372
  %1374 = xor i64 %1370, %1350
  %1375 = add nuw nsw i64 %1373, %1374
  %1376 = icmp eq i64 %1375, 2
  %1377 = zext i1 %1376 to i8
  store i8 %1377, i8* %44, align 1, !tbaa !2449
  %1378 = load i64, i64* %RBP, align 8
  %1379 = add i64 %1378, -32
  %1380 = add i64 %1263, 55
  store i64 %1380, i64* %PC, align 8
  %1381 = inttoptr i64 %1379 to i64*
  %1382 = load i64, i64* %1381, align 8
  store i64 %1382, i64* %RDI, align 8, !tbaa !2428
  %1383 = add i64 %1378, -44
  %1384 = add i64 %1263, 58
  store i64 %1384, i64* %PC, align 8
  %1385 = inttoptr i64 %1383 to i32*
  %1386 = load i32, i32* %1385, align 4
  %1387 = add i32 %1386, 1
  %1388 = sext i32 %1387 to i64
  %1389 = shl nsw i64 %1388, 2
  store i64 %1389, i64* %R8, align 8, !tbaa !2428
  %1390 = lshr i64 %1388, 61
  %1391 = and i64 %1390, 1
  %1392 = add i64 %1389, %1382
  %1393 = icmp ult i64 %1392, %1382
  %1394 = icmp ult i64 %1392, %1389
  %1395 = or i1 %1393, %1394
  %1396 = zext i1 %1395 to i8
  store i8 %1396, i8* %20, align 1, !tbaa !2432
  %1397 = trunc i64 %1392 to i32
  %1398 = and i32 %1397, 255
  %1399 = tail call i32 @llvm.ctpop.i32(i32 %1398) #8
  %1400 = trunc i32 %1399 to i8
  %1401 = and i8 %1400, 1
  %1402 = xor i8 %1401, 1
  store i8 %1402, i8* %27, align 1, !tbaa !2446
  %1403 = xor i64 %1389, %1382
  %1404 = xor i64 %1403, %1392
  %1405 = lshr i64 %1404, 4
  %1406 = trunc i64 %1405 to i8
  %1407 = and i8 %1406, 1
  store i8 %1407, i8* %32, align 1, !tbaa !2450
  %1408 = icmp eq i64 %1392, 0
  %1409 = zext i1 %1408 to i8
  store i8 %1409, i8* %35, align 1, !tbaa !2447
  %1410 = lshr i64 %1392, 63
  %1411 = trunc i64 %1410 to i8
  store i8 %1411, i8* %38, align 1, !tbaa !2448
  %1412 = lshr i64 %1382, 63
  %1413 = xor i64 %1410, %1412
  %1414 = xor i64 %1410, %1391
  %1415 = add nuw nsw i64 %1413, %1414
  %1416 = icmp eq i64 %1415, 2
  %1417 = zext i1 %1416 to i8
  store i8 %1417, i8* %44, align 1, !tbaa !2449
  %1418 = load i64, i64* %RBP, align 8
  %1419 = add i64 %1418, -80
  %1420 = add i64 %1263, 75
  store i64 %1420, i64* %PC, align 8
  %1421 = inttoptr i64 %1419 to i64*
  store i64 %1392, i64* %1421, align 8
  %1422 = load i32, i32* %ECX, align 4
  %1423 = zext i32 %1422 to i64
  %1424 = load i64, i64* %PC, align 8
  store i64 %1423, i64* %RDI, align 8, !tbaa !2428
  %1425 = load i32, i32* %EAX, align 4
  %1426 = zext i32 %1425 to i64
  store i64 %1426, i64* %RDX, align 8, !tbaa !2428
  %1427 = load i64, i64* %RBP, align 8
  %1428 = add i64 %1427, -80
  %1429 = add i64 %1424, 8
  store i64 %1429, i64* %PC, align 8
  %1430 = inttoptr i64 %1428 to i64*
  %1431 = load i64, i64* %1430, align 8
  store i64 %1431, i64* %RCX, align 8, !tbaa !2428
  store i64 %1426, i64* %R8, align 8, !tbaa !2428
  %1432 = add i64 %1427, -84
  %1433 = add i64 %1424, 16
  store i64 %1433, i64* %PC, align 8
  %1434 = load <2 x float>, <2 x float>* %558, align 1
  %1435 = extractelement <2 x float> %1434, i32 0
  %1436 = inttoptr i64 %1432 to float*
  store float %1435, float* %1436, align 4
  %1437 = load i64, i64* %PC, align 8
  %1438 = add i64 %1437, 2777
  %1439 = add i64 %1437, 5
  %1440 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1441 = add i64 %1440, -8
  %1442 = inttoptr i64 %1441 to i64*
  store i64 %1439, i64* %1442, align 8
  store i64 %1441, i64* %RSP, align 8, !tbaa !2428
  store i64 %1438, i64* %PC, align 8, !tbaa !2428
  %1443 = tail call %struct.Memory* @sub_402a50_ddot_renamed_(%struct.State* nonnull %0, i64 %1438, %struct.Memory* %MEMORY.6)
  %1444 = load i64, i64* %RBP, align 8
  %1445 = add i64 %1444, -84
  %1446 = load i64, i64* %PC, align 8
  %1447 = add i64 %1446, 5
  store i64 %1447, i64* %PC, align 8
  %1448 = inttoptr i64 %1445 to i32*
  %1449 = load i32, i32* %1448, align 4
  %1450 = bitcast %union.VectorReg* %10 to i32*
  store i32 %1449, i32* %1450, align 1, !tbaa !2452
  store float 0.000000e+00, float* %132, align 1, !tbaa !2452
  store float 0.000000e+00, float* %134, align 1, !tbaa !2452
  store float 0.000000e+00, float* %136, align 1, !tbaa !2452
  %1451 = load <2 x float>, <2 x float>* %137, align 1
  %1452 = load <2 x i32>, <2 x i32>* %138, align 1
  %1453 = load <2 x float>, <2 x float>* %558, align 1
  %1454 = extractelement <2 x float> %1451, i32 0
  %1455 = extractelement <2 x float> %1453, i32 0
  %1456 = fadd float %1454, %1455
  store float %1456, float* %130, align 1, !tbaa !2452
  %1457 = bitcast <2 x float> %1451 to <2 x i32>
  %1458 = extractelement <2 x i32> %1457, i32 1
  store i32 %1458, i32* %139, align 1, !tbaa !2452
  %1459 = extractelement <2 x i32> %1452, i32 0
  store i32 %1459, i32* %140, align 1, !tbaa !2452
  %1460 = extractelement <2 x i32> %1452, i32 1
  store i32 %1460, i32* %141, align 1, !tbaa !2452
  %1461 = add i64 %1444, -32
  %1462 = add i64 %1446, 13
  store i64 %1462, i64* %PC, align 8
  %1463 = inttoptr i64 %1461 to i64*
  %1464 = load i64, i64* %1463, align 8
  store i64 %1464, i64* %RCX, align 8, !tbaa !2428
  %1465 = add i64 %1444, -44
  %1466 = add i64 %1446, 17
  store i64 %1466, i64* %PC, align 8
  %1467 = inttoptr i64 %1465 to i32*
  %1468 = load i32, i32* %1467, align 4
  %1469 = sext i32 %1468 to i64
  store i64 %1469, i64* %RSI, align 8, !tbaa !2428
  %1470 = shl nsw i64 %1469, 2
  %1471 = add i64 %1470, %1464
  %1472 = add i64 %1446, 22
  store i64 %1472, i64* %PC, align 8
  %1473 = load <2 x float>, <2 x float>* %137, align 1
  %1474 = extractelement <2 x float> %1473, i32 0
  %1475 = inttoptr i64 %1471 to float*
  store float %1474, float* %1475, align 4
  %1476 = load i64, i64* %RBP, align 8
  %1477 = add i64 %1476, -24
  %1478 = load i64, i64* %PC, align 8
  %1479 = add i64 %1478, 4
  store i64 %1479, i64* %PC, align 8
  %1480 = inttoptr i64 %1477 to i64*
  %1481 = load i64, i64* %1480, align 8
  store i64 %1481, i64* %RCX, align 8, !tbaa !2428
  %1482 = add i64 %1476, -44
  %1483 = add i64 %1478, 8
  store i64 %1483, i64* %PC, align 8
  %1484 = inttoptr i64 %1482 to i32*
  %1485 = load i32, i32* %1484, align 4
  %1486 = sext i32 %1485 to i64
  store i64 %1486, i64* %RSI, align 8, !tbaa !2428
  %1487 = shl nsw i64 %1486, 2
  %1488 = add i64 %1487, %1481
  %1489 = add i64 %1478, 11
  store i64 %1489, i64* %PC, align 8
  %1490 = inttoptr i64 %1488 to i32*
  %1491 = load i32, i32* %1490, align 4
  %1492 = zext i32 %1491 to i64
  store i64 %1492, i64* %RAX, align 8, !tbaa !2428
  %1493 = add i64 %1476, -52
  %1494 = add i64 %1478, 14
  store i64 %1494, i64* %PC, align 8
  %1495 = inttoptr i64 %1493 to i32*
  store i32 %1491, i32* %1495, align 4
  %1496 = load i64, i64* %RBP, align 8
  %1497 = add i64 %1496, -52
  %1498 = load i64, i64* %PC, align 8
  %1499 = add i64 %1498, 3
  store i64 %1499, i64* %PC, align 8
  %1500 = inttoptr i64 %1497 to i32*
  %1501 = load i32, i32* %1500, align 4
  %1502 = zext i32 %1501 to i64
  store i64 %1502, i64* %RAX, align 8, !tbaa !2428
  %1503 = add i64 %1496, -44
  %1504 = add i64 %1498, 6
  store i64 %1504, i64* %PC, align 8
  %1505 = inttoptr i64 %1503 to i32*
  %1506 = load i32, i32* %1505, align 4
  %1507 = sub i32 %1501, %1506
  %1508 = icmp ult i32 %1501, %1506
  %1509 = zext i1 %1508 to i8
  store i8 %1509, i8* %20, align 1, !tbaa !2432
  %1510 = and i32 %1507, 255
  %1511 = tail call i32 @llvm.ctpop.i32(i32 %1510) #8
  %1512 = trunc i32 %1511 to i8
  %1513 = and i8 %1512, 1
  %1514 = xor i8 %1513, 1
  store i8 %1514, i8* %27, align 1, !tbaa !2446
  %1515 = xor i32 %1506, %1501
  %1516 = xor i32 %1515, %1507
  %1517 = lshr i32 %1516, 4
  %1518 = trunc i32 %1517 to i8
  %1519 = and i8 %1518, 1
  store i8 %1519, i8* %32, align 1, !tbaa !2450
  %1520 = icmp eq i32 %1507, 0
  %1521 = zext i1 %1520 to i8
  store i8 %1521, i8* %35, align 1, !tbaa !2447
  %1522 = lshr i32 %1507, 31
  %1523 = trunc i32 %1522 to i8
  store i8 %1523, i8* %38, align 1, !tbaa !2448
  %1524 = lshr i32 %1501, 31
  %1525 = lshr i32 %1506, 31
  %1526 = xor i32 %1525, %1524
  %1527 = xor i32 %1522, %1524
  %1528 = add nuw nsw i32 %1527, %1526
  %1529 = icmp eq i32 %1528, 2
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %44, align 1, !tbaa !2449
  %.v38 = select i1 %1520, i64 74, i64 12
  %1531 = add i64 %1498, %.v38
  store i64 %1531, i64* %PC, align 8, !tbaa !2428
  br i1 %1520, label %block_401fea, label %block_401fac

block_401fea:                                     ; preds = %block_401f09, %block_401fac
  %1532 = phi i64 [ %1496, %block_401f09 ], [ %.pre8, %block_401fac ]
  %1533 = phi i64 [ %1531, %block_401f09 ], [ %.pre7, %block_401fac ]
  %1534 = add i64 %1532, -48
  %1535 = add i64 %1533, 8
  store i64 %1535, i64* %PC, align 8
  %1536 = inttoptr i64 %1534 to i32*
  %1537 = load i32, i32* %1536, align 4
  %1538 = add i32 %1537, 1
  %1539 = zext i32 %1538 to i64
  store i64 %1539, i64* %RAX, align 8, !tbaa !2428
  %1540 = icmp eq i32 %1537, -1
  %1541 = icmp eq i32 %1538, 0
  %1542 = or i1 %1540, %1541
  %1543 = zext i1 %1542 to i8
  store i8 %1543, i8* %20, align 1, !tbaa !2432
  %1544 = and i32 %1538, 255
  %1545 = tail call i32 @llvm.ctpop.i32(i32 %1544) #8
  %1546 = trunc i32 %1545 to i8
  %1547 = and i8 %1546, 1
  %1548 = xor i8 %1547, 1
  store i8 %1548, i8* %27, align 1, !tbaa !2446
  %1549 = xor i32 %1537, %1538
  %1550 = lshr i32 %1549, 4
  %1551 = trunc i32 %1550 to i8
  %1552 = and i8 %1551, 1
  store i8 %1552, i8* %32, align 1, !tbaa !2450
  %1553 = zext i1 %1541 to i8
  store i8 %1553, i8* %35, align 1, !tbaa !2447
  %1554 = lshr i32 %1538, 31
  %1555 = trunc i32 %1554 to i8
  store i8 %1555, i8* %38, align 1, !tbaa !2448
  %1556 = lshr i32 %1537, 31
  %1557 = xor i32 %1554, %1556
  %1558 = add nuw nsw i32 %1557, %1554
  %1559 = icmp eq i32 %1558, 2
  %1560 = zext i1 %1559 to i8
  store i8 %1560, i8* %44, align 1, !tbaa !2449
  %1561 = add i64 %1533, 14
  store i64 %1561, i64* %PC, align 8
  store i32 %1538, i32* %1536, align 4
  %1562 = load i64, i64* %PC, align 8
  %1563 = add i64 %1562, -251
  store i64 %1563, i64* %PC, align 8, !tbaa !2428
  br label %block_401efd

block_402007:                                     ; preds = %block_402002, %block_401e53
  %.sink = phi i64 [ %1649, %block_402002 ], [ %403, %block_401e53 ]
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.8, %block_402002 ], [ %MEMORY.3, %block_401e53 ]
  %1564 = load i64, i64* %RSP, align 8
  %1565 = add i64 %1564, 96
  store i64 %1565, i64* %RSP, align 8, !tbaa !2428
  %1566 = icmp ugt i64 %1564, -97
  %1567 = zext i1 %1566 to i8
  store i8 %1567, i8* %20, align 1, !tbaa !2432
  %1568 = trunc i64 %1565 to i32
  %1569 = and i32 %1568, 255
  %1570 = tail call i32 @llvm.ctpop.i32(i32 %1569) #8
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  %1573 = xor i8 %1572, 1
  store i8 %1573, i8* %27, align 1, !tbaa !2446
  %1574 = xor i64 %1564, %1565
  %1575 = lshr i64 %1574, 4
  %1576 = trunc i64 %1575 to i8
  %1577 = and i8 %1576, 1
  store i8 %1577, i8* %32, align 1, !tbaa !2450
  %1578 = icmp eq i64 %1565, 0
  %1579 = zext i1 %1578 to i8
  store i8 %1579, i8* %35, align 1, !tbaa !2447
  %1580 = lshr i64 %1565, 63
  %1581 = trunc i64 %1580 to i8
  store i8 %1581, i8* %38, align 1, !tbaa !2448
  %1582 = lshr i64 %1564, 63
  %1583 = xor i64 %1580, %1582
  %1584 = add nuw nsw i64 %1583, %1580
  %1585 = icmp eq i64 %1584, 2
  %1586 = zext i1 %1585 to i8
  store i8 %1586, i8* %44, align 1, !tbaa !2449
  %1587 = add i64 %.sink, 5
  store i64 %1587, i64* %PC, align 8
  %1588 = add i64 %1564, 104
  %1589 = inttoptr i64 %1565 to i64*
  %1590 = load i64, i64* %1589, align 8
  store i64 %1590, i64* %RBP, align 8, !tbaa !2428
  store i64 %1588, i64* %RSP, align 8, !tbaa !2428
  %1591 = add i64 %.sink, 6
  store i64 %1591, i64* %PC, align 8
  %1592 = inttoptr i64 %1588 to i64*
  %1593 = load i64, i64* %1592, align 8
  store i64 %1593, i64* %PC, align 8, !tbaa !2428
  %1594 = add i64 %1564, 112
  store i64 %1594, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_401efd:                                     ; preds = %block_401fea, %block_401ef6
  %1595 = phi i64 [ %.pre6, %block_401ef6 ], [ %1563, %block_401fea ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.0, %block_401ef6 ], [ %1443, %block_401fea ]
  %1596 = load i64, i64* %RBP, align 8
  %1597 = add i64 %1596, -48
  %1598 = add i64 %1595, 3
  store i64 %1598, i64* %PC, align 8
  %1599 = inttoptr i64 %1597 to i32*
  %1600 = load i32, i32* %1599, align 4
  %1601 = zext i32 %1600 to i64
  store i64 %1601, i64* %RAX, align 8, !tbaa !2428
  %1602 = add i64 %1596, -56
  %1603 = add i64 %1595, 6
  store i64 %1603, i64* %PC, align 8
  %1604 = inttoptr i64 %1602 to i32*
  %1605 = load i32, i32* %1604, align 4
  %1606 = sub i32 %1600, %1605
  %1607 = icmp ult i32 %1600, %1605
  %1608 = zext i1 %1607 to i8
  store i8 %1608, i8* %20, align 1, !tbaa !2432
  %1609 = and i32 %1606, 255
  %1610 = tail call i32 @llvm.ctpop.i32(i32 %1609) #8
  %1611 = trunc i32 %1610 to i8
  %1612 = and i8 %1611, 1
  %1613 = xor i8 %1612, 1
  store i8 %1613, i8* %27, align 1, !tbaa !2446
  %1614 = xor i32 %1605, %1600
  %1615 = xor i32 %1614, %1606
  %1616 = lshr i32 %1615, 4
  %1617 = trunc i32 %1616 to i8
  %1618 = and i8 %1617, 1
  store i8 %1618, i8* %32, align 1, !tbaa !2450
  %1619 = icmp eq i32 %1606, 0
  %1620 = zext i1 %1619 to i8
  store i8 %1620, i8* %35, align 1, !tbaa !2447
  %1621 = lshr i32 %1606, 31
  %1622 = trunc i32 %1621 to i8
  store i8 %1622, i8* %38, align 1, !tbaa !2448
  %1623 = lshr i32 %1600, 31
  %1624 = lshr i32 %1605, 31
  %1625 = xor i32 %1624, %1623
  %1626 = xor i32 %1621, %1623
  %1627 = add nuw nsw i32 %1626, %1625
  %1628 = icmp eq i32 %1627, 2
  %1629 = zext i1 %1628 to i8
  store i8 %1629, i8* %44, align 1, !tbaa !2449
  %1630 = icmp ne i8 %1622, 0
  %1631 = xor i1 %1630, %1628
  %.v37 = select i1 %1631, i64 12, i64 256
  %1632 = add i64 %1595, %.v37
  %1633 = add i64 %1632, 5
  store i64 %1633, i64* %PC, align 8
  br i1 %1631, label %block_401f09, label %block_401ffd

block_401da1:                                     ; preds = %block_401cc1.block_401da1_crit_edge, %block_401d9c
  %.pre-phi29 = phi i64* [ %R8, %block_401cc1.block_401da1_crit_edge ], [ %R8, %block_401d9c ]
  %.pre-phi27 = phi <2 x float>* [ %.pre26, %block_401cc1.block_401da1_crit_edge ], [ %452, %block_401d9c ]
  %.pre-phi23 = phi float* [ %.pre22, %block_401cc1.block_401da1_crit_edge ], [ %451, %block_401d9c ]
  %.pre-phi21 = phi i8* [ %.pre20, %block_401cc1.block_401da1_crit_edge ], [ %450, %block_401d9c ]
  %.pre-phi19 = phi float* [ %.pre18, %block_401cc1.block_401da1_crit_edge ], [ %449, %block_401d9c ]
  %.pre-phi17.in = phi i64* [ %.pre16, %block_401cc1.block_401da1_crit_edge ], [ %448, %block_401d9c ]
  %.pre-phi15 = phi float* [ %.pre14, %block_401cc1.block_401da1_crit_edge ], [ %447, %block_401d9c ]
  %.pre-phi13 = phi i8* [ %.pre12, %block_401cc1.block_401da1_crit_edge ], [ %446, %block_401d9c ]
  %.pre-phi = phi i8* [ %.pre9, %block_401cc1.block_401da1_crit_edge ], [ %445, %block_401d9c ]
  %1634 = phi i64 [ %554, %block_401cc1.block_401da1_crit_edge ], [ %1151, %block_401d9c ]
  %1635 = phi i64 [ %110, %block_401cc1.block_401da1_crit_edge ], [ %405, %block_401d9c ]
  %MEMORY.7 = phi %struct.Memory* [ %2, %block_401cc1.block_401da1_crit_edge ], [ %MEMORY.1, %block_401d9c ]
  %.pre-phi11 = bitcast [32 x %union.VectorReg]* %9 to float*
  %1636 = add i64 %1635, -48
  %1637 = add i64 %1634, 7
  store i64 %1637, i64* %PC, align 8
  %1638 = inttoptr i64 %1636 to i32*
  store i32 0, i32* %1638, align 4
  %1639 = bitcast i8* %.pre-phi to <2 x float>*
  %1640 = bitcast i64* %.pre-phi17.in to <2 x i32>*
  %1641 = bitcast i8* %.pre-phi13 to i32*
  %1642 = bitcast i64* %.pre-phi17.in to i32*
  %1643 = bitcast i8* %.pre-phi21 to i32*
  %1644 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1645 = bitcast %union.anon* %4 to [2 x i32]*
  %1646 = getelementptr inbounds [2 x i32], [2 x i32]* %1645, i64 0, i64 1
  %1647 = bitcast i8* %.pre-phi to i32*
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_401da8

block_402002:                                     ; preds = %block_401eec, %block_401ffd
  %1648 = phi i64 [ %1223, %block_401eec ], [ %1633, %block_401ffd ]
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.0, %block_401eec ], [ %MEMORY.6, %block_401ffd ]
  %1649 = add i64 %1648, 5
  br label %block_402007
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400540:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %RSI, align 8
  %10 = load i64, i64* %PC, align 8
  %11 = sub i64 %9, ptrtoint (i64* @stderr to i64)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %18 = ashr i64 %11, 3
  %19 = lshr i64 %18, 63
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  %20 = add nsw i64 %19, %18
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = ashr i64 %20, 1
  store i64 %23, i64* %RSI, align 8, !tbaa !2428
  store i8 %22, i8* %12, align 1, !tbaa !2456
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #8
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %13, align 1, !tbaa !2456
  store i8 0, i8* %14, align 1, !tbaa !2456
  %30 = icmp eq i64 %23, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %15, align 1, !tbaa !2456
  %32 = lshr i64 %23, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %16, align 1, !tbaa !2456
  store i8 0, i8* %17, align 1, !tbaa !2456
  %.v = select i1 %30, i64 50, i64 29
  %34 = add i64 %10, %.v
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br i1 %30, label %block_400578, label %block_400563

block_400578:                                     ; preds = %block_400563, %block_400540
  %35 = phi i64 [ %45, %block_400563 ], [ %34, %block_400540 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400563:                                     ; preds = %block_400540
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2447
  store i8 0, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %14, align 1, !tbaa !2450
  %45 = add i64 %34, 21
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  br label %block_400578
}

; Function Attrs: noinline
define %struct.Memory* @sub_401980_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401980:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -72
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = icmp ult i64 %13, 64
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2432
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #8
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2446
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2447
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2448
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2449
  %44 = add i64 %12, -16
  %45 = load i64, i64* %RDI, align 8
  %46 = add i64 %15, 11
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -12
  %50 = load i32, i32* %ESI, align 4
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  %56 = load i32, i32* %EDX, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -24
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -32
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -32
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RCX, align 8, !tbaa !2428
  %78 = add i64 %74, 10
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i32*
  store i32 0, i32* %79, align 4
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -16
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %81 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = add i32 %85, -1
  %87 = zext i32 %86 to i64
  store i64 %87, i64* %RDX, align 8, !tbaa !2428
  %88 = icmp eq i32 %85, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %19, align 1, !tbaa !2432
  %90 = and i32 %86, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #8
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %26, align 1, !tbaa !2446
  %95 = xor i32 %85, %86
  %96 = lshr i32 %95, 4
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %31, align 1, !tbaa !2450
  %99 = icmp eq i32 %86, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %34, align 1, !tbaa !2447
  %101 = lshr i32 %86, 31
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %37, align 1, !tbaa !2448
  %103 = lshr i32 %85, 31
  %104 = xor i32 %101, %103
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %43, align 1, !tbaa !2449
  %108 = add i64 %80, -56
  %109 = add i64 %82, 9
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i32*
  store i32 %86, i32* %110, align 4
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -56
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %112 to i32*
  %116 = load i32, i32* %115, align 4
  store i8 0, i8* %19, align 1, !tbaa !2432
  %117 = and i32 %116, 255
  %118 = tail call i32 @llvm.ctpop.i32(i32 %117) #8
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  store i8 %121, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  %122 = icmp eq i32 %116, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %34, align 1, !tbaa !2447
  %124 = lshr i32 %116, 31
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %37, align 1, !tbaa !2448
  store i8 0, i8* %43, align 1, !tbaa !2449
  %126 = icmp ne i8 %125, 0
  %.v = select i1 %126, i64 643, i64 10
  %127 = add i64 %113, %.v
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  br i1 %126, label %block_401980.block_401c30_crit_edge, label %block_4019b7

block_401980.block_401c30_crit_edge:              ; preds = %block_401980
  %.pre13 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %.pre18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre28 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %.pre30 = getelementptr inbounds i8, i8* %.pre13, i64 4
  %.pre32 = bitcast i8* %.pre30 to i32*
  %.pre34 = bitcast i64* %.pre18 to i32*
  %.pre36 = getelementptr inbounds i8, i8* %.pre13, i64 12
  %.pre38 = bitcast i8* %.pre36 to i32*
  %.pre40 = bitcast %union.VectorReg* %9 to i8*
  %.pre44 = getelementptr inbounds i8, i8* %.pre40, i64 4
  %.pre46 = bitcast i8* %.pre44 to float*
  %.pre48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %.pre50 = bitcast i64* %.pre48 to float*
  %.pre52 = getelementptr inbounds i8, i8* %.pre40, i64 12
  %.pre54 = bitcast i8* %.pre52 to float*
  %.pre58 = bitcast %union.VectorReg* %9 to <2 x float>*
  %.pre60 = bitcast %union.VectorReg* %9 to double*
  %.pre64 = bitcast [32 x %union.VectorReg]* %8 to double*
  br label %block_401c30

block_401b56:                                     ; preds = %block_401b2f
  %128 = add i64 %1117, -8
  %129 = add i64 %1152, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %1117, -12
  %133 = add i64 %1152, 7
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i32*
  %135 = load i32, i32* %134, align 4
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = add i64 %1117, -40
  %138 = add i64 %1152, 11
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = sext i32 %135 to i64
  %142 = sext i32 %140 to i64
  %143 = mul nsw i64 %142, %141
  %144 = trunc i64 %143 to i32
  %145 = and i64 %143, 4294967295
  store i64 %145, i64* %RCX, align 8, !tbaa !2428
  %146 = shl i64 %143, 32
  %147 = ashr exact i64 %146, 32
  %148 = icmp ne i64 %147, %143
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %19, align 1, !tbaa !2432
  %150 = and i32 %144, 255
  %151 = tail call i32 @llvm.ctpop.i32(i32 %150) #8
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  store i8 %154, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %155 = lshr i32 %144, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %37, align 1, !tbaa !2448
  store i8 %149, i8* %43, align 1, !tbaa !2449
  %157 = add i64 %1152, 14
  store i64 %157, i64* %PC, align 8
  %158 = load i32, i32* %1126, align 4
  %159 = add i32 %158, %144
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %RCX, align 8, !tbaa !2428
  %161 = icmp ult i32 %159, %144
  %162 = icmp ult i32 %159, %158
  %163 = or i1 %161, %162
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %19, align 1, !tbaa !2432
  %165 = and i32 %159, 255
  %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #8
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %26, align 1, !tbaa !2446
  %170 = xor i32 %158, %144
  %171 = xor i32 %170, %159
  %172 = lshr i32 %171, 4
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  store i8 %174, i8* %31, align 1, !tbaa !2450
  %175 = icmp eq i32 %159, 0
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %34, align 1, !tbaa !2447
  %177 = lshr i32 %159, 31
  %178 = trunc i32 %177 to i8
  store i8 %178, i8* %37, align 1, !tbaa !2448
  %179 = lshr i32 %158, 31
  %180 = xor i32 %177, %155
  %181 = xor i32 %177, %179
  %182 = add nuw nsw i32 %180, %181
  %183 = icmp eq i32 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %43, align 1, !tbaa !2449
  %185 = sext i32 %159 to i64
  store i64 %185, i64* %RDX, align 8, !tbaa !2428
  %186 = shl nsw i64 %185, 2
  %187 = add i64 %186, %131
  %188 = add i64 %1152, 22
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i32*
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %671, align 1, !tbaa !2452
  store float 0.000000e+00, float* %672, align 1, !tbaa !2452
  %191 = add i64 %1152, 26
  store i64 %191, i64* %PC, align 8
  %192 = load i64, i64* %130, align 8
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -12
  %195 = add i64 %1152, 29
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i32*
  %197 = load i32, i32* %196, align 4
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RCX, align 8, !tbaa !2428
  %199 = add i64 %193, -40
  %200 = add i64 %1152, 33
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = sext i32 %197 to i64
  %204 = sext i32 %202 to i64
  %205 = mul nsw i64 %204, %203
  %206 = trunc i64 %205 to i32
  %207 = and i64 %205, 4294967295
  store i64 %207, i64* %RCX, align 8, !tbaa !2428
  %208 = shl i64 %205, 32
  %209 = ashr exact i64 %208, 32
  %210 = icmp ne i64 %209, %205
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %19, align 1, !tbaa !2432
  %212 = and i32 %206, 255
  %213 = tail call i32 @llvm.ctpop.i32(i32 %212) #8
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  store i8 %216, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %217 = lshr i32 %206, 31
  %218 = trunc i32 %217 to i8
  store i8 %218, i8* %37, align 1, !tbaa !2448
  store i8 %211, i8* %43, align 1, !tbaa !2449
  %219 = add i64 %193, -52
  %220 = add i64 %1152, 36
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = add i32 %222, %206
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RCX, align 8, !tbaa !2428
  %225 = icmp ult i32 %223, %206
  %226 = icmp ult i32 %223, %222
  %227 = or i1 %225, %226
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %19, align 1, !tbaa !2432
  %229 = and i32 %223, 255
  %230 = tail call i32 @llvm.ctpop.i32(i32 %229) #8
  %231 = trunc i32 %230 to i8
  %232 = and i8 %231, 1
  %233 = xor i8 %232, 1
  store i8 %233, i8* %26, align 1, !tbaa !2446
  %234 = xor i32 %222, %206
  %235 = xor i32 %234, %223
  %236 = lshr i32 %235, 4
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  store i8 %238, i8* %31, align 1, !tbaa !2450
  %239 = icmp eq i32 %223, 0
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %34, align 1, !tbaa !2447
  %241 = lshr i32 %223, 31
  %242 = trunc i32 %241 to i8
  store i8 %242, i8* %37, align 1, !tbaa !2448
  %243 = lshr i32 %222, 31
  %244 = xor i32 %241, %217
  %245 = xor i32 %241, %243
  %246 = add nuw nsw i32 %244, %245
  %247 = icmp eq i32 %246, 2
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %43, align 1, !tbaa !2449
  %249 = sext i32 %223 to i64
  store i64 %249, i64* %RDX, align 8, !tbaa !2428
  %250 = shl nsw i64 %249, 2
  %251 = add i64 %250, %192
  %252 = add i64 %1152, 44
  store i64 %252, i64* %PC, align 8
  %253 = load <2 x float>, <2 x float>* %669, align 1
  %254 = extractelement <2 x float> %253, i32 0
  %255 = inttoptr i64 %251 to float*
  store float %254, float* %255, align 4
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -36
  %258 = load i64, i64* %PC, align 8
  %259 = add i64 %258, 5
  store i64 %259, i64* %PC, align 8
  %260 = inttoptr i64 %257 to i32*
  %261 = load i32, i32* %260, align 4
  store i32 %261, i32* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %671, align 1, !tbaa !2452
  store float 0.000000e+00, float* %672, align 1, !tbaa !2452
  %262 = add i64 %256, -8
  %263 = add i64 %258, 9
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %262 to i64*
  %265 = load i64, i64* %264, align 8
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = add i64 %256, -12
  %267 = add i64 %258, 12
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i32*
  %269 = load i32, i32* %268, align 4
  %270 = zext i32 %269 to i64
  store i64 %270, i64* %RCX, align 8, !tbaa !2428
  %271 = add i64 %256, -40
  %272 = add i64 %258, 16
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i32*
  %274 = load i32, i32* %273, align 4
  %275 = sext i32 %269 to i64
  %276 = sext i32 %274 to i64
  %277 = mul nsw i64 %276, %275
  %278 = trunc i64 %277 to i32
  %279 = and i64 %277, 4294967295
  store i64 %279, i64* %RCX, align 8, !tbaa !2428
  %280 = shl i64 %277, 32
  %281 = ashr exact i64 %280, 32
  %282 = icmp ne i64 %281, %277
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %19, align 1, !tbaa !2432
  %284 = and i32 %278, 255
  %285 = tail call i32 @llvm.ctpop.i32(i32 %284) #8
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  %288 = xor i8 %287, 1
  store i8 %288, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %289 = lshr i32 %278, 31
  %290 = trunc i32 %289 to i8
  store i8 %290, i8* %37, align 1, !tbaa !2448
  store i8 %283, i8* %43, align 1, !tbaa !2449
  %291 = add i64 %256, -44
  %292 = add i64 %258, 19
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to i32*
  %294 = load i32, i32* %293, align 4
  %295 = add i32 %294, %278
  %296 = zext i32 %295 to i64
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  %297 = icmp ult i32 %295, %278
  %298 = icmp ult i32 %295, %294
  %299 = or i1 %297, %298
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %19, align 1, !tbaa !2432
  %301 = and i32 %295, 255
  %302 = tail call i32 @llvm.ctpop.i32(i32 %301) #8
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  store i8 %305, i8* %26, align 1, !tbaa !2446
  %306 = xor i32 %294, %278
  %307 = xor i32 %306, %295
  %308 = lshr i32 %307, 4
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  store i8 %310, i8* %31, align 1, !tbaa !2450
  %311 = icmp eq i32 %295, 0
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %34, align 1, !tbaa !2447
  %313 = lshr i32 %295, 31
  %314 = trunc i32 %313 to i8
  store i8 %314, i8* %37, align 1, !tbaa !2448
  %315 = lshr i32 %294, 31
  %316 = xor i32 %313, %289
  %317 = xor i32 %313, %315
  %318 = add nuw nsw i32 %316, %317
  %319 = icmp eq i32 %318, 2
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %43, align 1, !tbaa !2449
  %321 = sext i32 %295 to i64
  store i64 %321, i64* %RDX, align 8, !tbaa !2428
  %322 = shl nsw i64 %321, 2
  %323 = add i64 %322, %265
  %324 = add i64 %258, 27
  store i64 %324, i64* %PC, align 8
  %325 = load <2 x float>, <2 x float>* %669, align 1
  %326 = extractelement <2 x float> %325, i32 0
  %327 = inttoptr i64 %323 to float*
  store float %326, float* %327, align 4
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %block_401b9d

block_401a46:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_401a3b
  %328 = phi i64 [ %1483, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %632, %block_401a3b ]
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -52
  %331 = add i64 %328, 3
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %330 to i32*
  %333 = load i32, i32* %332, align 4
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = add i64 %329, -44
  %336 = add i64 %328, 6
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = sub i32 %333, %338
  %340 = icmp ult i32 %333, %338
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %19, align 1, !tbaa !2432
  %342 = and i32 %339, 255
  %343 = tail call i32 @llvm.ctpop.i32(i32 %342) #8
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %26, align 1, !tbaa !2446
  %347 = xor i32 %338, %333
  %348 = xor i32 %347, %339
  %349 = lshr i32 %348, 4
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  store i8 %351, i8* %31, align 1, !tbaa !2450
  %352 = icmp eq i32 %339, 0
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %34, align 1, !tbaa !2447
  %354 = lshr i32 %339, 31
  %355 = trunc i32 %354 to i8
  store i8 %355, i8* %37, align 1, !tbaa !2448
  %356 = lshr i32 %333, 31
  %357 = lshr i32 %338, 31
  %358 = xor i32 %357, %356
  %359 = xor i32 %354, %356
  %360 = add nuw nsw i32 %359, %358
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %43, align 1, !tbaa !2449
  %.v69 = select i1 %352, i64 110, i64 12
  %363 = add i64 %328, %.v69
  store i64 %363, i64* %PC, align 8, !tbaa !2428
  br i1 %352, label %block_401ab4, label %block_401a52

block_401a52:                                     ; preds = %block_401a46
  %364 = add i64 %329, -8
  %365 = add i64 %363, 4
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i64*
  %367 = load i64, i64* %366, align 8
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  %368 = add i64 %329, -12
  %369 = add i64 %363, 7
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i32*
  %371 = load i32, i32* %370, align 4
  %372 = zext i32 %371 to i64
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = add i64 %363, 11
  store i64 %373, i64* %PC, align 8
  %374 = load i32, i32* %337, align 4
  %375 = sext i32 %371 to i64
  %376 = sext i32 %374 to i64
  %377 = mul nsw i64 %376, %375
  %378 = trunc i64 %377 to i32
  %379 = and i64 %377, 4294967295
  store i64 %379, i64* %RCX, align 8, !tbaa !2428
  %380 = shl i64 %377, 32
  %381 = ashr exact i64 %380, 32
  %382 = icmp ne i64 %381, %377
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %19, align 1, !tbaa !2432
  %384 = and i32 %378, 255
  %385 = tail call i32 @llvm.ctpop.i32(i32 %384) #8
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  %388 = xor i8 %387, 1
  store i8 %388, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %389 = lshr i32 %378, 31
  %390 = trunc i32 %389 to i8
  store i8 %390, i8* %37, align 1, !tbaa !2448
  store i8 %383, i8* %43, align 1, !tbaa !2449
  %391 = add i64 %363, 14
  store i64 %391, i64* %PC, align 8
  %392 = load i32, i32* %332, align 4
  %393 = add i32 %392, %378
  %394 = zext i32 %393 to i64
  store i64 %394, i64* %RCX, align 8, !tbaa !2428
  %395 = icmp ult i32 %393, %378
  %396 = icmp ult i32 %393, %392
  %397 = or i1 %395, %396
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %19, align 1, !tbaa !2432
  %399 = and i32 %393, 255
  %400 = tail call i32 @llvm.ctpop.i32(i32 %399) #8
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  %403 = xor i8 %402, 1
  store i8 %403, i8* %26, align 1, !tbaa !2446
  %404 = xor i32 %392, %378
  %405 = xor i32 %404, %393
  %406 = lshr i32 %405, 4
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  store i8 %408, i8* %31, align 1, !tbaa !2450
  %409 = icmp eq i32 %393, 0
  %410 = zext i1 %409 to i8
  store i8 %410, i8* %34, align 1, !tbaa !2447
  %411 = lshr i32 %393, 31
  %412 = trunc i32 %411 to i8
  store i8 %412, i8* %37, align 1, !tbaa !2448
  %413 = lshr i32 %392, 31
  %414 = xor i32 %411, %389
  %415 = xor i32 %411, %413
  %416 = add nuw nsw i32 %414, %415
  %417 = icmp eq i32 %416, 2
  %418 = zext i1 %417 to i8
  store i8 %418, i8* %43, align 1, !tbaa !2449
  %419 = sext i32 %393 to i64
  store i64 %419, i64* %RDX, align 8, !tbaa !2428
  %420 = shl nsw i64 %419, 2
  %421 = add i64 %420, %367
  %422 = add i64 %363, 22
  store i64 %422, i64* %PC, align 8
  %423 = inttoptr i64 %421 to i32*
  %424 = load i32, i32* %423, align 4
  store i32 %424, i32* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %671, align 1, !tbaa !2452
  store float 0.000000e+00, float* %672, align 1, !tbaa !2452
  %425 = add i64 %329, -36
  %426 = add i64 %363, 27
  store i64 %426, i64* %PC, align 8
  %427 = load <2 x float>, <2 x float>* %669, align 1
  %428 = extractelement <2 x float> %427, i32 0
  %429 = inttoptr i64 %425 to float*
  store float %428, float* %429, align 4
  %430 = load i64, i64* %RBP, align 8
  %431 = add i64 %430, -8
  %432 = load i64, i64* %PC, align 8
  %433 = add i64 %432, 4
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %431 to i64*
  %435 = load i64, i64* %434, align 8
  store i64 %435, i64* %RAX, align 8, !tbaa !2428
  %436 = add i64 %430, -12
  %437 = add i64 %432, 7
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %436 to i32*
  %439 = load i32, i32* %438, align 4
  %440 = zext i32 %439 to i64
  store i64 %440, i64* %RCX, align 8, !tbaa !2428
  %441 = add i64 %430, -44
  %442 = add i64 %432, 11
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i32*
  %444 = load i32, i32* %443, align 4
  %445 = sext i32 %439 to i64
  %446 = sext i32 %444 to i64
  %447 = mul nsw i64 %446, %445
  %448 = trunc i64 %447 to i32
  %449 = and i64 %447, 4294967295
  store i64 %449, i64* %RCX, align 8, !tbaa !2428
  %450 = shl i64 %447, 32
  %451 = ashr exact i64 %450, 32
  %452 = icmp ne i64 %451, %447
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %19, align 1, !tbaa !2432
  %454 = and i32 %448, 255
  %455 = tail call i32 @llvm.ctpop.i32(i32 %454) #8
  %456 = trunc i32 %455 to i8
  %457 = and i8 %456, 1
  %458 = xor i8 %457, 1
  store i8 %458, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %459 = lshr i32 %448, 31
  %460 = trunc i32 %459 to i8
  store i8 %460, i8* %37, align 1, !tbaa !2448
  store i8 %453, i8* %43, align 1, !tbaa !2449
  %461 = add i64 %432, 14
  store i64 %461, i64* %PC, align 8
  %462 = load i32, i32* %443, align 4
  %463 = add i32 %462, %448
  %464 = zext i32 %463 to i64
  store i64 %464, i64* %RCX, align 8, !tbaa !2428
  %465 = icmp ult i32 %463, %448
  %466 = icmp ult i32 %463, %462
  %467 = or i1 %465, %466
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %19, align 1, !tbaa !2432
  %469 = and i32 %463, 255
  %470 = tail call i32 @llvm.ctpop.i32(i32 %469) #8
  %471 = trunc i32 %470 to i8
  %472 = and i8 %471, 1
  %473 = xor i8 %472, 1
  store i8 %473, i8* %26, align 1, !tbaa !2446
  %474 = xor i32 %462, %448
  %475 = xor i32 %474, %463
  %476 = lshr i32 %475, 4
  %477 = trunc i32 %476 to i8
  %478 = and i8 %477, 1
  store i8 %478, i8* %31, align 1, !tbaa !2450
  %479 = icmp eq i32 %463, 0
  %480 = zext i1 %479 to i8
  store i8 %480, i8* %34, align 1, !tbaa !2447
  %481 = lshr i32 %463, 31
  %482 = trunc i32 %481 to i8
  store i8 %482, i8* %37, align 1, !tbaa !2448
  %483 = lshr i32 %462, 31
  %484 = xor i32 %481, %459
  %485 = xor i32 %481, %483
  %486 = add nuw nsw i32 %484, %485
  %487 = icmp eq i32 %486, 2
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %43, align 1, !tbaa !2449
  %489 = sext i32 %463 to i64
  store i64 %489, i64* %RDX, align 8, !tbaa !2428
  %490 = shl nsw i64 %489, 2
  %491 = add i64 %490, %435
  %492 = add i64 %432, 22
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %491 to i32*
  %494 = load i32, i32* %493, align 4
  store i32 %494, i32* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %671, align 1, !tbaa !2452
  store float 0.000000e+00, float* %672, align 1, !tbaa !2452
  %495 = add i64 %432, 26
  store i64 %495, i64* %PC, align 8
  %496 = load i64, i64* %434, align 8
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = load i64, i64* %RBP, align 8
  %498 = add i64 %497, -12
  %499 = add i64 %432, 29
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %498 to i32*
  %501 = load i32, i32* %500, align 4
  %502 = zext i32 %501 to i64
  store i64 %502, i64* %RCX, align 8, !tbaa !2428
  %503 = add i64 %497, -44
  %504 = add i64 %432, 33
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %503 to i32*
  %506 = load i32, i32* %505, align 4
  %507 = sext i32 %501 to i64
  %508 = sext i32 %506 to i64
  %509 = mul nsw i64 %508, %507
  %510 = trunc i64 %509 to i32
  %511 = and i64 %509, 4294967295
  store i64 %511, i64* %RCX, align 8, !tbaa !2428
  %512 = shl i64 %509, 32
  %513 = ashr exact i64 %512, 32
  %514 = icmp ne i64 %513, %509
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %19, align 1, !tbaa !2432
  %516 = and i32 %510, 255
  %517 = tail call i32 @llvm.ctpop.i32(i32 %516) #8
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  store i8 %520, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %521 = lshr i32 %510, 31
  %522 = trunc i32 %521 to i8
  store i8 %522, i8* %37, align 1, !tbaa !2448
  store i8 %515, i8* %43, align 1, !tbaa !2449
  %523 = add i64 %497, -52
  %524 = add i64 %432, 36
  store i64 %524, i64* %PC, align 8
  %525 = inttoptr i64 %523 to i32*
  %526 = load i32, i32* %525, align 4
  %527 = add i32 %526, %510
  %528 = zext i32 %527 to i64
  store i64 %528, i64* %RCX, align 8, !tbaa !2428
  %529 = icmp ult i32 %527, %510
  %530 = icmp ult i32 %527, %526
  %531 = or i1 %529, %530
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %19, align 1, !tbaa !2432
  %533 = and i32 %527, 255
  %534 = tail call i32 @llvm.ctpop.i32(i32 %533) #8
  %535 = trunc i32 %534 to i8
  %536 = and i8 %535, 1
  %537 = xor i8 %536, 1
  store i8 %537, i8* %26, align 1, !tbaa !2446
  %538 = xor i32 %526, %510
  %539 = xor i32 %538, %527
  %540 = lshr i32 %539, 4
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  store i8 %542, i8* %31, align 1, !tbaa !2450
  %543 = icmp eq i32 %527, 0
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %34, align 1, !tbaa !2447
  %545 = lshr i32 %527, 31
  %546 = trunc i32 %545 to i8
  store i8 %546, i8* %37, align 1, !tbaa !2448
  %547 = lshr i32 %526, 31
  %548 = xor i32 %545, %521
  %549 = xor i32 %545, %547
  %550 = add nuw nsw i32 %548, %549
  %551 = icmp eq i32 %550, 2
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %43, align 1, !tbaa !2449
  %553 = sext i32 %527 to i64
  store i64 %553, i64* %RDX, align 8, !tbaa !2428
  %554 = shl nsw i64 %553, 2
  %555 = add i64 %554, %496
  %556 = add i64 %432, 44
  store i64 %556, i64* %PC, align 8
  %557 = load <2 x float>, <2 x float>* %669, align 1
  %558 = extractelement <2 x float> %557, i32 0
  %559 = inttoptr i64 %555 to float*
  store float %558, float* %559, align 4
  %560 = load i64, i64* %RBP, align 8
  %561 = add i64 %560, -36
  %562 = load i64, i64* %PC, align 8
  %563 = add i64 %562, 5
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %561 to i32*
  %565 = load i32, i32* %564, align 4
  store i32 %565, i32* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %671, align 1, !tbaa !2452
  store float 0.000000e+00, float* %672, align 1, !tbaa !2452
  %566 = add i64 %560, -8
  %567 = add i64 %562, 9
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %566 to i64*
  %569 = load i64, i64* %568, align 8
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = add i64 %560, -12
  %571 = add i64 %562, 12
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i32*
  %573 = load i32, i32* %572, align 4
  %574 = zext i32 %573 to i64
  store i64 %574, i64* %RCX, align 8, !tbaa !2428
  %575 = add i64 %560, -44
  %576 = add i64 %562, 16
  store i64 %576, i64* %PC, align 8
  %577 = inttoptr i64 %575 to i32*
  %578 = load i32, i32* %577, align 4
  %579 = sext i32 %573 to i64
  %580 = sext i32 %578 to i64
  %581 = mul nsw i64 %580, %579
  %582 = trunc i64 %581 to i32
  %583 = and i64 %581, 4294967295
  store i64 %583, i64* %RCX, align 8, !tbaa !2428
  %584 = shl i64 %581, 32
  %585 = ashr exact i64 %584, 32
  %586 = icmp ne i64 %585, %581
  %587 = zext i1 %586 to i8
  store i8 %587, i8* %19, align 1, !tbaa !2432
  %588 = and i32 %582, 255
  %589 = tail call i32 @llvm.ctpop.i32(i32 %588) #8
  %590 = trunc i32 %589 to i8
  %591 = and i8 %590, 1
  %592 = xor i8 %591, 1
  store i8 %592, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %593 = lshr i32 %582, 31
  %594 = trunc i32 %593 to i8
  store i8 %594, i8* %37, align 1, !tbaa !2448
  store i8 %587, i8* %43, align 1, !tbaa !2449
  %595 = add i64 %562, 19
  store i64 %595, i64* %PC, align 8
  %596 = load i32, i32* %577, align 4
  %597 = add i32 %596, %582
  %598 = zext i32 %597 to i64
  store i64 %598, i64* %RCX, align 8, !tbaa !2428
  %599 = icmp ult i32 %597, %582
  %600 = icmp ult i32 %597, %596
  %601 = or i1 %599, %600
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %19, align 1, !tbaa !2432
  %603 = and i32 %597, 255
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603) #8
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %26, align 1, !tbaa !2446
  %608 = xor i32 %596, %582
  %609 = xor i32 %608, %597
  %610 = lshr i32 %609, 4
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  store i8 %612, i8* %31, align 1, !tbaa !2450
  %613 = icmp eq i32 %597, 0
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %34, align 1, !tbaa !2447
  %615 = lshr i32 %597, 31
  %616 = trunc i32 %615 to i8
  store i8 %616, i8* %37, align 1, !tbaa !2448
  %617 = lshr i32 %596, 31
  %618 = xor i32 %615, %593
  %619 = xor i32 %615, %617
  %620 = add nuw nsw i32 %618, %619
  %621 = icmp eq i32 %620, 2
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %43, align 1, !tbaa !2449
  %623 = sext i32 %597 to i64
  store i64 %623, i64* %RDX, align 8, !tbaa !2428
  %624 = shl nsw i64 %623, 2
  %625 = add i64 %624, %569
  %626 = add i64 %562, 27
  store i64 %626, i64* %PC, align 8
  %627 = load <2 x float>, <2 x float>* %669, align 1
  %628 = extractelement <2 x float> %627, i32 0
  %629 = inttoptr i64 %625 to float*
  store float %628, float* %629, align 4
  %.pre3 = load i64, i64* %PC, align 8
  %.pre4 = load i64, i64* %RBP, align 8
  br label %block_401ab4

block_401a3b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %630 = load i8, i8* %26, align 1, !tbaa !2446
  %631 = icmp ne i8 %630, 0
  %.v68 = select i1 %631, i64 11, i64 6
  %632 = add i64 %1483, %.v68
  store i64 %632, i64* %PC, align 8, !tbaa !2428
  %633 = icmp eq i8 %630, 1
  br i1 %633, label %block_401a46, label %block_401a41

block_401a41:                                     ; preds = %block_401a3b
  %634 = load i64, i64* %RBP, align 8
  %635 = add i64 %634, -44
  %636 = add i64 %632, 465
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %635 to i32*
  %638 = load i32, i32* %637, align 4
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %640 = add i64 %634, -32
  %641 = add i64 %632, 469
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i64*
  %643 = load i64, i64* %642, align 8
  store i64 %643, i64* %RCX, align 8, !tbaa !2428
  %644 = add i64 %632, 471
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to i32*
  store i32 %638, i32* %645, align 4
  %.pre8 = load i64, i64* %PC, align 8
  %.pre9 = load i64, i64* %RBP, align 8
  br label %block_401c18

block_4019b7:                                     ; preds = %block_401980
  %646 = add i64 %111, -44
  %647 = add i64 %127, 7
  store i64 %647, i64* %PC, align 8
  %648 = inttoptr i64 %646 to i32*
  store i32 0, i32* %648, align 4
  %649 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %651 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %652 = getelementptr inbounds i8, i8* %649, i64 4
  %653 = bitcast i8* %652 to i32*
  %654 = bitcast i64* %650 to i32*
  %655 = getelementptr inbounds i8, i8* %649, i64 12
  %656 = bitcast i8* %655 to i32*
  %657 = bitcast %union.VectorReg* %9 to i8*
  %658 = getelementptr inbounds i8, i8* %657, i64 4
  %659 = bitcast i8* %658 to float*
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %661 = bitcast i64* %660 to float*
  %662 = getelementptr inbounds i8, i8* %657, i64 12
  %663 = bitcast i8* %662 to float*
  %664 = bitcast %union.VectorReg* %9 to <2 x float>*
  %665 = bitcast %union.VectorReg* %9 to double*
  %666 = bitcast [32 x %union.VectorReg]* %8 to double*
  %667 = bitcast i64* %650 to double*
  %668 = bitcast [32 x %union.VectorReg]* %8 to float*
  %669 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %670 = bitcast i8* %652 to float*
  %671 = bitcast i64* %650 to float*
  %672 = bitcast i8* %655 to float*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4019be

block_401ab4:                                     ; preds = %block_401a52, %block_401a46
  %673 = phi i64 [ %.pre4, %block_401a52 ], [ %329, %block_401a46 ]
  %674 = phi i64 [ %.pre3, %block_401a52 ], [ %363, %block_401a46 ]
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %675 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 72) to i64*), align 8
  %676 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %675, i64* %676, align 1, !tbaa !2454
  store double 0.000000e+00, double* %667, align 1, !tbaa !2454
  %677 = add i64 %673, -8
  %678 = add i64 %674, 17
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %677 to i64*
  %680 = load i64, i64* %679, align 8
  store i64 %680, i64* %RAX, align 8, !tbaa !2428
  %681 = add i64 %673, -12
  %682 = add i64 %674, 20
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %681 to i32*
  %684 = load i32, i32* %683, align 4
  %685 = zext i32 %684 to i64
  store i64 %685, i64* %RCX, align 8, !tbaa !2428
  %686 = add i64 %673, -44
  %687 = add i64 %674, 24
  store i64 %687, i64* %PC, align 8
  %688 = inttoptr i64 %686 to i32*
  %689 = load i32, i32* %688, align 4
  %690 = sext i32 %684 to i64
  %691 = sext i32 %689 to i64
  %692 = mul nsw i64 %691, %690
  %693 = trunc i64 %692 to i32
  %694 = and i64 %692, 4294967295
  store i64 %694, i64* %RCX, align 8, !tbaa !2428
  %695 = shl i64 %692, 32
  %696 = ashr exact i64 %695, 32
  %697 = icmp ne i64 %696, %692
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %19, align 1, !tbaa !2432
  %699 = and i32 %693, 255
  %700 = tail call i32 @llvm.ctpop.i32(i32 %699) #8
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = xor i8 %702, 1
  store i8 %703, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %704 = lshr i32 %693, 31
  %705 = trunc i32 %704 to i8
  store i8 %705, i8* %37, align 1, !tbaa !2448
  store i8 %698, i8* %43, align 1, !tbaa !2449
  %706 = add i64 %674, 27
  store i64 %706, i64* %PC, align 8
  %707 = load i32, i32* %688, align 4
  %708 = add i32 %707, %693
  %709 = zext i32 %708 to i64
  store i64 %709, i64* %RCX, align 8, !tbaa !2428
  %710 = icmp ult i32 %708, %693
  %711 = icmp ult i32 %708, %707
  %712 = or i1 %710, %711
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %19, align 1, !tbaa !2432
  %714 = and i32 %708, 255
  %715 = tail call i32 @llvm.ctpop.i32(i32 %714) #8
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  store i8 %718, i8* %26, align 1, !tbaa !2446
  %719 = xor i32 %707, %693
  %720 = xor i32 %719, %708
  %721 = lshr i32 %720, 4
  %722 = trunc i32 %721 to i8
  %723 = and i8 %722, 1
  store i8 %723, i8* %31, align 1, !tbaa !2450
  %724 = icmp eq i32 %708, 0
  %725 = zext i1 %724 to i8
  store i8 %725, i8* %34, align 1, !tbaa !2447
  %726 = lshr i32 %708, 31
  %727 = trunc i32 %726 to i8
  store i8 %727, i8* %37, align 1, !tbaa !2448
  %728 = lshr i32 %707, 31
  %729 = xor i32 %726, %704
  %730 = xor i32 %726, %728
  %731 = add nuw nsw i32 %729, %730
  %732 = icmp eq i32 %731, 2
  %733 = zext i1 %732 to i8
  store i8 %733, i8* %43, align 1, !tbaa !2449
  %734 = sext i32 %708 to i64
  store i64 %734, i64* %RSI, align 8, !tbaa !2428
  %735 = shl nsw i64 %734, 2
  %736 = add i64 %735, %680
  %737 = add i64 %674, 35
  store i64 %737, i64* %PC, align 8
  %738 = inttoptr i64 %736 to i32*
  %739 = load i32, i32* %738, align 4
  store i32 %739, i32* %1450, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %661, align 1, !tbaa !2452
  store float 0.000000e+00, float* %663, align 1, !tbaa !2452
  %740 = load <2 x float>, <2 x float>* %664, align 1
  %741 = extractelement <2 x float> %740, i32 0
  %742 = fpext float %741 to double
  store double %742, double* %665, align 1, !tbaa !2454
  %743 = load double, double* %666, align 1
  %744 = bitcast i64* %650 to <2 x i32>*
  %745 = load <2 x i32>, <2 x i32>* %744, align 1
  %746 = fdiv double %743, %742
  %747 = bitcast double %746 to <2 x i32>
  %748 = fptrunc double %746 to float
  store float %748, float* %668, align 1, !tbaa !2452
  %749 = extractelement <2 x i32> %747, i32 1
  store i32 %749, i32* %653, align 1, !tbaa !2452
  %750 = extractelement <2 x i32> %745, i32 0
  store i32 %750, i32* %654, align 1, !tbaa !2452
  %751 = extractelement <2 x i32> %745, i32 1
  store i32 %751, i32* %656, align 1, !tbaa !2452
  %752 = load i64, i64* %RBP, align 8
  %753 = add i64 %752, -36
  %754 = add i64 %674, 52
  store i64 %754, i64* %PC, align 8
  %755 = load <2 x float>, <2 x float>* %669, align 1
  %756 = extractelement <2 x float> %755, i32 0
  %757 = inttoptr i64 %753 to float*
  store float %756, float* %757, align 4
  %758 = load i64, i64* %RBP, align 8
  %759 = add i64 %758, -16
  %760 = load i64, i64* %PC, align 8
  %761 = add i64 %760, 3
  store i64 %761, i64* %PC, align 8
  %762 = inttoptr i64 %759 to i32*
  %763 = load i32, i32* %762, align 4
  %764 = zext i32 %763 to i64
  store i64 %764, i64* %RCX, align 8, !tbaa !2428
  %765 = add i64 %758, -44
  %766 = add i64 %760, 6
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %765 to i32*
  %768 = load i32, i32* %767, align 4
  %769 = add i32 %768, 1
  %770 = zext i32 %769 to i64
  store i64 %770, i64* %RDI, align 8, !tbaa !2428
  %771 = lshr i32 %769, 31
  %772 = sub i32 %763, %769
  %773 = zext i32 %772 to i64
  store i64 %773, i64* %RCX, align 8, !tbaa !2428
  %774 = icmp ult i32 %763, %769
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %19, align 1, !tbaa !2432
  %776 = and i32 %772, 255
  %777 = tail call i32 @llvm.ctpop.i32(i32 %776) #8
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  store i8 %780, i8* %26, align 1, !tbaa !2446
  %781 = xor i32 %769, %763
  %782 = xor i32 %781, %772
  %783 = lshr i32 %782, 4
  %784 = trunc i32 %783 to i8
  %785 = and i8 %784, 1
  store i8 %785, i8* %31, align 1, !tbaa !2450
  %786 = icmp eq i32 %772, 0
  %787 = zext i1 %786 to i8
  store i8 %787, i8* %34, align 1, !tbaa !2447
  %788 = lshr i32 %772, 31
  %789 = trunc i32 %788 to i8
  store i8 %789, i8* %37, align 1, !tbaa !2448
  %790 = lshr i32 %763, 31
  %791 = xor i32 %771, %790
  %792 = xor i32 %788, %790
  %793 = add nuw nsw i32 %792, %791
  %794 = icmp eq i32 %793, 2
  %795 = zext i1 %794 to i8
  store i8 %795, i8* %43, align 1, !tbaa !2449
  %796 = add i64 %758, -36
  %797 = add i64 %760, 16
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %796 to i32*
  %799 = load i32, i32* %798, align 4
  store i32 %799, i32* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %671, align 1, !tbaa !2452
  store float 0.000000e+00, float* %672, align 1, !tbaa !2452
  %800 = add i64 %758, -8
  %801 = add i64 %760, 20
  store i64 %801, i64* %PC, align 8
  %802 = inttoptr i64 %800 to i64*
  %803 = load i64, i64* %802, align 8
  store i64 %803, i64* %RAX, align 8, !tbaa !2428
  %804 = load i64, i64* %RBP, align 8
  %805 = add i64 %804, -12
  %806 = add i64 %760, 23
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %805 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RDI, align 8, !tbaa !2428
  %810 = add i64 %804, -44
  %811 = add i64 %760, 27
  store i64 %811, i64* %PC, align 8
  %812 = inttoptr i64 %810 to i32*
  %813 = load i32, i32* %812, align 4
  %814 = sext i32 %808 to i64
  %815 = sext i32 %813 to i64
  %816 = mul nsw i64 %815, %814
  %817 = trunc i64 %816 to i32
  %818 = and i64 %816, 4294967295
  store i64 %818, i64* %RDI, align 8, !tbaa !2428
  %819 = shl i64 %816, 32
  %820 = ashr exact i64 %819, 32
  %821 = icmp ne i64 %820, %816
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %19, align 1, !tbaa !2432
  %823 = and i32 %817, 255
  %824 = tail call i32 @llvm.ctpop.i32(i32 %823) #8
  %825 = trunc i32 %824 to i8
  %826 = and i8 %825, 1
  %827 = xor i8 %826, 1
  store i8 %827, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %828 = lshr i32 %817, 31
  %829 = trunc i32 %828 to i8
  store i8 %829, i8* %37, align 1, !tbaa !2448
  store i8 %822, i8* %43, align 1, !tbaa !2449
  %830 = add i64 %760, 30
  store i64 %830, i64* %PC, align 8
  %831 = load i32, i32* %812, align 4
  %832 = add i32 %831, %817
  %833 = add i32 %832, 1
  %834 = sext i32 %833 to i64
  %835 = shl nsw i64 %834, 2
  %836 = lshr i64 %834, 61
  %837 = and i64 %836, 1
  %838 = load i64, i64* %RAX, align 8
  %839 = add i64 %835, %838
  store i64 %839, i64* %RAX, align 8, !tbaa !2428
  %840 = icmp ult i64 %839, %838
  %841 = icmp ult i64 %839, %835
  %842 = or i1 %840, %841
  %843 = zext i1 %842 to i8
  store i8 %843, i8* %19, align 1, !tbaa !2432
  %844 = trunc i64 %839 to i32
  %845 = and i32 %844, 255
  %846 = tail call i32 @llvm.ctpop.i32(i32 %845) #8
  %847 = trunc i32 %846 to i8
  %848 = and i8 %847, 1
  %849 = xor i8 %848, 1
  store i8 %849, i8* %26, align 1, !tbaa !2446
  %850 = xor i64 %835, %838
  %851 = xor i64 %850, %839
  %852 = lshr i64 %851, 4
  %853 = trunc i64 %852 to i8
  %854 = and i8 %853, 1
  store i8 %854, i8* %31, align 1, !tbaa !2450
  %855 = icmp eq i64 %839, 0
  %856 = zext i1 %855 to i8
  store i8 %856, i8* %34, align 1, !tbaa !2447
  %857 = lshr i64 %839, 63
  %858 = trunc i64 %857 to i8
  store i8 %858, i8* %37, align 1, !tbaa !2448
  %859 = lshr i64 %838, 63
  %860 = xor i64 %857, %859
  %861 = xor i64 %857, %837
  %862 = add nuw nsw i64 %860, %861
  %863 = icmp eq i64 %862, 2
  %864 = zext i1 %863 to i8
  store i8 %864, i8* %43, align 1, !tbaa !2449
  %865 = load i32, i32* %ECX, align 4
  %866 = zext i32 %865 to i64
  store i64 %866, i64* %RDI, align 8, !tbaa !2428
  store i64 %839, i64* %RSI, align 8, !tbaa !2428
  %867 = add i64 %760, 4744
  %868 = add i64 %760, 53
  %869 = load i64, i64* %RSP, align 8, !tbaa !2428
  %870 = add i64 %869, -8
  %871 = inttoptr i64 %870 to i64*
  store i64 %868, i64* %871, align 8
  store i64 %870, i64* %RSP, align 8, !tbaa !2428
  store i64 %867, i64* %PC, align 8, !tbaa !2428
  %872 = tail call %struct.Memory* @sub_402d70_dscal_renamed_(%struct.State* nonnull %0, i64 %867, %struct.Memory* %1481)
  %873 = load i64, i64* %RBP, align 8
  %874 = add i64 %873, -48
  %875 = load i64, i64* %PC, align 8
  %876 = add i64 %875, 3
  store i64 %876, i64* %PC, align 8
  %877 = inttoptr i64 %874 to i32*
  %878 = load i32, i32* %877, align 4
  %879 = zext i32 %878 to i64
  store i64 %879, i64* %RCX, align 8, !tbaa !2428
  %880 = add i64 %873, -40
  %881 = add i64 %875, 6
  store i64 %881, i64* %PC, align 8
  %882 = inttoptr i64 %880 to i32*
  store i32 %878, i32* %882, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401b23

block_401c30:                                     ; preds = %block_401980.block_401c30_crit_edge, %block_401c2b
  %.pre-phi65 = phi double* [ %.pre64, %block_401980.block_401c30_crit_edge ], [ %666, %block_401c2b ]
  %.pre-phi61 = phi double* [ %.pre60, %block_401980.block_401c30_crit_edge ], [ %665, %block_401c2b ]
  %.pre-phi59 = phi <2 x float>* [ %.pre58, %block_401980.block_401c30_crit_edge ], [ %664, %block_401c2b ]
  %.pre-phi55 = phi float* [ %.pre54, %block_401980.block_401c30_crit_edge ], [ %663, %block_401c2b ]
  %.pre-phi51 = phi float* [ %.pre50, %block_401980.block_401c30_crit_edge ], [ %661, %block_401c2b ]
  %.pre-phi47 = phi float* [ %.pre46, %block_401980.block_401c30_crit_edge ], [ %659, %block_401c2b ]
  %.pre-phi39 = phi i32* [ %.pre38, %block_401980.block_401c30_crit_edge ], [ %656, %block_401c2b ]
  %.pre-phi35 = phi i32* [ %.pre34, %block_401980.block_401c30_crit_edge ], [ %654, %block_401c2b ]
  %.pre-phi33 = phi i32* [ %.pre32, %block_401980.block_401c30_crit_edge ], [ %653, %block_401c2b ]
  %.pre-phi29 = phi i32* [ %.pre28, %block_401980.block_401c30_crit_edge ], [ %651, %block_401c2b ]
  %883 = phi i64 [ %111, %block_401980.block_401c30_crit_edge ], [ %1154, %block_401c2b ]
  %884 = phi i64 [ %127, %block_401980.block_401c30_crit_edge ], [ %1191, %block_401c2b ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_401980.block_401c30_crit_edge ], [ %MEMORY.3, %block_401c2b ]
  store i32 0, i32* %.pre-phi29, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi33, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi35, align 1, !tbaa !2451
  store i32 0, i32* %.pre-phi39, align 1, !tbaa !2451
  %885 = add i64 %883, -16
  %886 = add i64 %884, 6
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i32*
  %888 = load i32, i32* %887, align 4
  %889 = add i32 %888, -1
  %890 = zext i32 %889 to i64
  store i64 %890, i64* %RAX, align 8, !tbaa !2428
  %891 = icmp eq i32 %888, 0
  %892 = zext i1 %891 to i8
  store i8 %892, i8* %19, align 1, !tbaa !2432
  %893 = and i32 %889, 255
  %894 = tail call i32 @llvm.ctpop.i32(i32 %893) #8
  %895 = trunc i32 %894 to i8
  %896 = and i8 %895, 1
  %897 = xor i8 %896, 1
  store i8 %897, i8* %26, align 1, !tbaa !2446
  %898 = xor i32 %888, %889
  %899 = lshr i32 %898, 4
  %900 = trunc i32 %899 to i8
  %901 = and i8 %900, 1
  store i8 %901, i8* %31, align 1, !tbaa !2450
  %902 = icmp eq i32 %889, 0
  %903 = zext i1 %902 to i8
  store i8 %903, i8* %34, align 1, !tbaa !2447
  %904 = lshr i32 %889, 31
  %905 = trunc i32 %904 to i8
  store i8 %905, i8* %37, align 1, !tbaa !2448
  %906 = lshr i32 %888, 31
  %907 = xor i32 %904, %906
  %908 = add nuw nsw i32 %907, %906
  %909 = icmp eq i32 %908, 2
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %43, align 1, !tbaa !2449
  %911 = add i64 %883, -24
  %912 = add i64 %884, 13
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %911 to i64*
  %914 = load i64, i64* %913, align 8
  store i64 %914, i64* %RCX, align 8, !tbaa !2428
  %915 = add i64 %884, 16
  store i64 %915, i64* %PC, align 8
  %916 = load i32, i32* %887, align 4
  %917 = add i32 %916, -1
  %918 = zext i32 %917 to i64
  store i64 %918, i64* %RDX, align 8, !tbaa !2428
  %919 = icmp eq i32 %916, 0
  %920 = zext i1 %919 to i8
  store i8 %920, i8* %19, align 1, !tbaa !2432
  %921 = and i32 %917, 255
  %922 = tail call i32 @llvm.ctpop.i32(i32 %921) #8
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  store i8 %925, i8* %26, align 1, !tbaa !2446
  %926 = xor i32 %916, %917
  %927 = lshr i32 %926, 4
  %928 = trunc i32 %927 to i8
  %929 = and i8 %928, 1
  store i8 %929, i8* %31, align 1, !tbaa !2450
  %930 = icmp eq i32 %917, 0
  %931 = zext i1 %930 to i8
  store i8 %931, i8* %34, align 1, !tbaa !2447
  %932 = lshr i32 %917, 31
  %933 = trunc i32 %932 to i8
  store i8 %933, i8* %37, align 1, !tbaa !2448
  %934 = lshr i32 %916, 31
  %935 = xor i32 %932, %934
  %936 = add nuw nsw i32 %935, %934
  %937 = icmp eq i32 %936, 2
  %938 = zext i1 %937 to i8
  store i8 %938, i8* %43, align 1, !tbaa !2449
  %939 = sext i32 %917 to i64
  store i64 %939, i64* %RSI, align 8, !tbaa !2428
  %940 = shl nsw i64 %939, 2
  %941 = add i64 %940, %914
  %942 = add i64 %884, 25
  store i64 %942, i64* %PC, align 8
  %943 = inttoptr i64 %941 to i32*
  store i32 %889, i32* %943, align 4
  %944 = load i64, i64* %RBP, align 8
  %945 = add i64 %944, -8
  %946 = load i64, i64* %PC, align 8
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC, align 8
  %948 = inttoptr i64 %945 to i64*
  %949 = load i64, i64* %948, align 8
  store i64 %949, i64* %RCX, align 8, !tbaa !2428
  %950 = add i64 %944, -12
  %951 = add i64 %946, 7
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %950 to i32*
  %953 = load i32, i32* %952, align 4
  %954 = zext i32 %953 to i64
  store i64 %954, i64* %RAX, align 8, !tbaa !2428
  %955 = add i64 %944, -16
  %956 = add i64 %946, 10
  store i64 %956, i64* %PC, align 8
  %957 = inttoptr i64 %955 to i32*
  %958 = load i32, i32* %957, align 4
  %959 = add i32 %958, -1
  %960 = zext i32 %959 to i64
  store i64 %960, i64* %RDX, align 8, !tbaa !2428
  %961 = sext i32 %953 to i64
  %962 = sext i32 %959 to i64
  %963 = mul nsw i64 %962, %961
  %964 = trunc i64 %963 to i32
  %965 = and i64 %963, 4294967295
  store i64 %965, i64* %RAX, align 8, !tbaa !2428
  %966 = shl i64 %963, 32
  %967 = ashr exact i64 %966, 32
  %968 = icmp ne i64 %967, %963
  %969 = zext i1 %968 to i8
  store i8 %969, i8* %19, align 1, !tbaa !2432
  %970 = and i32 %964, 255
  %971 = tail call i32 @llvm.ctpop.i32(i32 %970) #8
  %972 = trunc i32 %971 to i8
  %973 = and i8 %972, 1
  %974 = xor i8 %973, 1
  store i8 %974, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %975 = lshr i32 %964, 31
  %976 = trunc i32 %975 to i8
  store i8 %976, i8* %37, align 1, !tbaa !2448
  store i8 %969, i8* %43, align 1, !tbaa !2449
  %977 = add i64 %946, 19
  store i64 %977, i64* %PC, align 8
  %978 = load i32, i32* %957, align 4
  %979 = add i32 %978, -1
  %980 = zext i32 %979 to i64
  store i64 %980, i64* %RDX, align 8, !tbaa !2428
  %981 = lshr i32 %979, 31
  %982 = add i32 %979, %964
  %983 = zext i32 %982 to i64
  store i64 %983, i64* %RAX, align 8, !tbaa !2428
  %984 = icmp ult i32 %982, %964
  %985 = icmp ult i32 %982, %979
  %986 = or i1 %984, %985
  %987 = zext i1 %986 to i8
  store i8 %987, i8* %19, align 1, !tbaa !2432
  %988 = and i32 %982, 255
  %989 = tail call i32 @llvm.ctpop.i32(i32 %988) #8
  %990 = trunc i32 %989 to i8
  %991 = and i8 %990, 1
  %992 = xor i8 %991, 1
  store i8 %992, i8* %26, align 1, !tbaa !2446
  %993 = xor i64 %980, %963
  %994 = trunc i64 %993 to i32
  %995 = xor i32 %994, %982
  %996 = lshr i32 %995, 4
  %997 = trunc i32 %996 to i8
  %998 = and i8 %997, 1
  store i8 %998, i8* %31, align 1, !tbaa !2450
  %999 = icmp eq i32 %982, 0
  %1000 = zext i1 %999 to i8
  store i8 %1000, i8* %34, align 1, !tbaa !2447
  %1001 = lshr i32 %982, 31
  %1002 = trunc i32 %1001 to i8
  store i8 %1002, i8* %37, align 1, !tbaa !2448
  %1003 = xor i32 %1001, %975
  %1004 = xor i32 %1001, %981
  %1005 = add nuw nsw i32 %1003, %1004
  %1006 = icmp eq i32 %1005, 2
  %1007 = zext i1 %1006 to i8
  store i8 %1007, i8* %43, align 1, !tbaa !2449
  %1008 = sext i32 %982 to i64
  store i64 %1008, i64* %RSI, align 8, !tbaa !2428
  %1009 = load i64, i64* %RCX, align 8
  %1010 = shl nsw i64 %1008, 2
  %1011 = add i64 %1010, %1009
  %1012 = add i64 %946, 32
  store i64 %1012, i64* %PC, align 8
  %1013 = inttoptr i64 %1011 to i32*
  %1014 = load i32, i32* %1013, align 4
  %1015 = bitcast %union.VectorReg* %9 to i32*
  store i32 %1014, i32* %1015, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi47, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi51, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi55, align 1, !tbaa !2452
  %1016 = load <2 x float>, <2 x float>* %.pre-phi59, align 1
  %1017 = extractelement <2 x float> %1016, i32 0
  %1018 = fpext float %1017 to double
  store double %1018, double* %.pre-phi61, align 1, !tbaa !2454
  %1019 = add i64 %946, 40
  store i64 %1019, i64* %PC, align 8
  %1020 = load double, double* %.pre-phi65, align 1
  %1021 = fcmp uno double %1018, %1020
  br i1 %1021, label %1022, label %1032

; <label>:1022:                                   ; preds = %block_401c30
  %1023 = fadd double %1018, %1020
  %1024 = bitcast double %1023 to i64
  %1025 = and i64 %1024, 9221120237041090560
  %1026 = icmp eq i64 %1025, 9218868437227405312
  %1027 = and i64 %1024, 2251799813685247
  %1028 = icmp ne i64 %1027, 0
  %1029 = and i1 %1026, %1028
  br i1 %1029, label %1030, label %1038

; <label>:1030:                                   ; preds = %1022
  %1031 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1019, %struct.Memory* %MEMORY.2) #9
  %.pre10 = load i64, i64* %PC, align 8
  %.pre11 = load i8, i8* %34, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:1032:                                   ; preds = %block_401c30
  %1033 = fcmp ogt double %1018, %1020
  br i1 %1033, label %1038, label %1034

; <label>:1034:                                   ; preds = %1032
  %1035 = fcmp olt double %1018, %1020
  br i1 %1035, label %1038, label %1036

; <label>:1036:                                   ; preds = %1034
  %1037 = fcmp oeq double %1018, %1020
  br i1 %1037, label %1038, label %1042

; <label>:1038:                                   ; preds = %1036, %1034, %1032, %1022
  %1039 = phi i8 [ 0, %1032 ], [ 0, %1034 ], [ 1, %1036 ], [ 1, %1022 ]
  %1040 = phi i8 [ 0, %1032 ], [ 0, %1034 ], [ 0, %1036 ], [ 1, %1022 ]
  %1041 = phi i8 [ 0, %1032 ], [ 1, %1034 ], [ 0, %1036 ], [ 1, %1022 ]
  store i8 %1039, i8* %34, align 1, !tbaa !2456
  store i8 %1040, i8* %26, align 1, !tbaa !2456
  store i8 %1041, i8* %19, align 1, !tbaa !2456
  br label %1042

; <label>:1042:                                   ; preds = %1038, %1036
  %1043 = phi i8 [ %1039, %1038 ], [ %1000, %1036 ]
  store i8 0, i8* %43, align 1, !tbaa !2456
  store i8 0, i8* %37, align 1, !tbaa !2456
  store i8 0, i8* %31, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %1042, %1030
  %1044 = phi i8 [ %.pre11, %1030 ], [ %1043, %1042 ]
  %1045 = phi i64 [ %.pre10, %1030 ], [ %1019, %1042 ]
  %1046 = phi %struct.Memory* [ %1031, %1030 ], [ %MEMORY.2, %1042 ]
  %1047 = icmp eq i8 %1044, 0
  %.v72 = select i1 %1047, i64 24, i64 6
  %1048 = add i64 %1045, %.v72
  store i64 %1048, i64* %PC, align 8, !tbaa !2428
  br i1 %1047, label %block_401c89, label %block_401c77

block_401b2f:                                     ; preds = %block_401b23
  %1049 = add i64 %1485, -8
  %1050 = add i64 %1521, 4
  store i64 %1050, i64* %PC, align 8
  %1051 = inttoptr i64 %1049 to i64*
  %1052 = load i64, i64* %1051, align 8
  store i64 %1052, i64* %RAX, align 8, !tbaa !2428
  %1053 = add i64 %1485, -12
  %1054 = add i64 %1521, 7
  store i64 %1054, i64* %PC, align 8
  %1055 = inttoptr i64 %1053 to i32*
  %1056 = load i32, i32* %1055, align 4
  %1057 = zext i32 %1056 to i64
  store i64 %1057, i64* %RCX, align 8, !tbaa !2428
  %1058 = add i64 %1521, 11
  store i64 %1058, i64* %PC, align 8
  %1059 = load i32, i32* %1488, align 4
  %1060 = sext i32 %1056 to i64
  %1061 = sext i32 %1059 to i64
  %1062 = mul nsw i64 %1061, %1060
  %1063 = trunc i64 %1062 to i32
  %1064 = and i64 %1062, 4294967295
  store i64 %1064, i64* %RCX, align 8, !tbaa !2428
  %1065 = shl i64 %1062, 32
  %1066 = ashr exact i64 %1065, 32
  %1067 = icmp ne i64 %1066, %1062
  %1068 = zext i1 %1067 to i8
  store i8 %1068, i8* %19, align 1, !tbaa !2432
  %1069 = and i32 %1063, 255
  %1070 = tail call i32 @llvm.ctpop.i32(i32 %1069) #8
  %1071 = trunc i32 %1070 to i8
  %1072 = and i8 %1071, 1
  %1073 = xor i8 %1072, 1
  store i8 %1073, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1074 = lshr i32 %1063, 31
  %1075 = trunc i32 %1074 to i8
  store i8 %1075, i8* %37, align 1, !tbaa !2448
  store i8 %1068, i8* %43, align 1, !tbaa !2449
  %1076 = add i64 %1485, -52
  %1077 = add i64 %1521, 14
  store i64 %1077, i64* %PC, align 8
  %1078 = inttoptr i64 %1076 to i32*
  %1079 = load i32, i32* %1078, align 4
  %1080 = add i32 %1079, %1063
  %1081 = zext i32 %1080 to i64
  store i64 %1081, i64* %RCX, align 8, !tbaa !2428
  %1082 = icmp ult i32 %1080, %1063
  %1083 = icmp ult i32 %1080, %1079
  %1084 = or i1 %1082, %1083
  %1085 = zext i1 %1084 to i8
  store i8 %1085, i8* %19, align 1, !tbaa !2432
  %1086 = and i32 %1080, 255
  %1087 = tail call i32 @llvm.ctpop.i32(i32 %1086) #8
  %1088 = trunc i32 %1087 to i8
  %1089 = and i8 %1088, 1
  %1090 = xor i8 %1089, 1
  store i8 %1090, i8* %26, align 1, !tbaa !2446
  %1091 = xor i32 %1079, %1063
  %1092 = xor i32 %1091, %1080
  %1093 = lshr i32 %1092, 4
  %1094 = trunc i32 %1093 to i8
  %1095 = and i8 %1094, 1
  store i8 %1095, i8* %31, align 1, !tbaa !2450
  %1096 = icmp eq i32 %1080, 0
  %1097 = zext i1 %1096 to i8
  store i8 %1097, i8* %34, align 1, !tbaa !2447
  %1098 = lshr i32 %1080, 31
  %1099 = trunc i32 %1098 to i8
  store i8 %1099, i8* %37, align 1, !tbaa !2448
  %1100 = lshr i32 %1079, 31
  %1101 = xor i32 %1098, %1074
  %1102 = xor i32 %1098, %1100
  %1103 = add nuw nsw i32 %1101, %1102
  %1104 = icmp eq i32 %1103, 2
  %1105 = zext i1 %1104 to i8
  store i8 %1105, i8* %43, align 1, !tbaa !2449
  %1106 = sext i32 %1080 to i64
  store i64 %1106, i64* %RDX, align 8, !tbaa !2428
  %1107 = shl nsw i64 %1106, 2
  %1108 = add i64 %1107, %1052
  %1109 = add i64 %1521, 22
  store i64 %1109, i64* %PC, align 8
  %1110 = inttoptr i64 %1108 to i32*
  %1111 = load i32, i32* %1110, align 4
  store i32 %1111, i32* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %671, align 1, !tbaa !2452
  store float 0.000000e+00, float* %672, align 1, !tbaa !2452
  %1112 = add i64 %1485, -36
  %1113 = add i64 %1521, 27
  store i64 %1113, i64* %PC, align 8
  %1114 = load <2 x float>, <2 x float>* %669, align 1
  %1115 = extractelement <2 x float> %1114, i32 0
  %1116 = inttoptr i64 %1112 to float*
  store float %1115, float* %1116, align 4
  %1117 = load i64, i64* %RBP, align 8
  %1118 = add i64 %1117, -52
  %1119 = load i64, i64* %PC, align 8
  %1120 = add i64 %1119, 3
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1118 to i32*
  %1122 = load i32, i32* %1121, align 4
  %1123 = zext i32 %1122 to i64
  store i64 %1123, i64* %RCX, align 8, !tbaa !2428
  %1124 = add i64 %1117, -44
  %1125 = add i64 %1119, 6
  store i64 %1125, i64* %PC, align 8
  %1126 = inttoptr i64 %1124 to i32*
  %1127 = load i32, i32* %1126, align 4
  %1128 = sub i32 %1122, %1127
  %1129 = icmp ult i32 %1122, %1127
  %1130 = zext i1 %1129 to i8
  store i8 %1130, i8* %19, align 1, !tbaa !2432
  %1131 = and i32 %1128, 255
  %1132 = tail call i32 @llvm.ctpop.i32(i32 %1131) #8
  %1133 = trunc i32 %1132 to i8
  %1134 = and i8 %1133, 1
  %1135 = xor i8 %1134, 1
  store i8 %1135, i8* %26, align 1, !tbaa !2446
  %1136 = xor i32 %1127, %1122
  %1137 = xor i32 %1136, %1128
  %1138 = lshr i32 %1137, 4
  %1139 = trunc i32 %1138 to i8
  %1140 = and i8 %1139, 1
  store i8 %1140, i8* %31, align 1, !tbaa !2450
  %1141 = icmp eq i32 %1128, 0
  %1142 = zext i1 %1141 to i8
  store i8 %1142, i8* %34, align 1, !tbaa !2447
  %1143 = lshr i32 %1128, 31
  %1144 = trunc i32 %1143 to i8
  store i8 %1144, i8* %37, align 1, !tbaa !2448
  %1145 = lshr i32 %1122, 31
  %1146 = lshr i32 %1127, 31
  %1147 = xor i32 %1146, %1145
  %1148 = xor i32 %1143, %1145
  %1149 = add nuw nsw i32 %1148, %1147
  %1150 = icmp eq i32 %1149, 2
  %1151 = zext i1 %1150 to i8
  store i8 %1151, i8* %43, align 1, !tbaa !2449
  %.v71 = select i1 %1141, i64 83, i64 12
  %1152 = add i64 %1119, %.v71
  store i64 %1152, i64* %PC, align 8, !tbaa !2428
  br i1 %1141, label %block_401b9d, label %block_401b56

block_4019be:                                     ; preds = %block_401c18, %block_4019b7
  %1153 = phi i64 [ %.pre, %block_4019b7 ], [ %1780, %block_401c18 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4019b7 ], [ %MEMORY.6, %block_401c18 ]
  %1154 = load i64, i64* %RBP, align 8
  %1155 = add i64 %1154, -44
  %1156 = add i64 %1153, 3
  store i64 %1156, i64* %PC, align 8
  %1157 = inttoptr i64 %1155 to i32*
  %1158 = load i32, i32* %1157, align 4
  %1159 = zext i32 %1158 to i64
  store i64 %1159, i64* %RAX, align 8, !tbaa !2428
  %1160 = add i64 %1154, -56
  %1161 = add i64 %1153, 6
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1160 to i32*
  %1163 = load i32, i32* %1162, align 4
  %1164 = sub i32 %1158, %1163
  %1165 = icmp ult i32 %1158, %1163
  %1166 = zext i1 %1165 to i8
  store i8 %1166, i8* %19, align 1, !tbaa !2432
  %1167 = and i32 %1164, 255
  %1168 = tail call i32 @llvm.ctpop.i32(i32 %1167) #8
  %1169 = trunc i32 %1168 to i8
  %1170 = and i8 %1169, 1
  %1171 = xor i8 %1170, 1
  store i8 %1171, i8* %26, align 1, !tbaa !2446
  %1172 = xor i32 %1163, %1158
  %1173 = xor i32 %1172, %1164
  %1174 = lshr i32 %1173, 4
  %1175 = trunc i32 %1174 to i8
  %1176 = and i8 %1175, 1
  store i8 %1176, i8* %31, align 1, !tbaa !2450
  %1177 = icmp eq i32 %1164, 0
  %1178 = zext i1 %1177 to i8
  store i8 %1178, i8* %34, align 1, !tbaa !2447
  %1179 = lshr i32 %1164, 31
  %1180 = trunc i32 %1179 to i8
  store i8 %1180, i8* %37, align 1, !tbaa !2448
  %1181 = lshr i32 %1158, 31
  %1182 = lshr i32 %1163, 31
  %1183 = xor i32 %1182, %1181
  %1184 = xor i32 %1179, %1181
  %1185 = add nuw nsw i32 %1184, %1183
  %1186 = icmp eq i32 %1185, 2
  %1187 = zext i1 %1186 to i8
  store i8 %1187, i8* %43, align 1, !tbaa !2449
  %1188 = icmp ne i8 %1180, 0
  %1189 = xor i1 %1188, %1186
  %.v66 = select i1 %1189, i64 12, i64 621
  %1190 = add i64 %1153, %.v66
  %1191 = add i64 %1190, 5
  store i64 %1191, i64* %PC, align 8
  br i1 %1189, label %block_4019ca, label %block_401c2b

block_401c2b:                                     ; preds = %block_4019be
  store i64 %1191, i64* %PC, align 8, !tbaa !2428
  br label %block_401c30

block_4019ca:                                     ; preds = %block_4019be
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %1192 = add i64 %1190, 8
  store i64 %1192, i64* %PC, align 8
  %1193 = load i32, i32* %1157, align 4
  %1194 = add i32 %1193, 1
  %1195 = zext i32 %1194 to i64
  store i64 %1195, i64* %RAX, align 8, !tbaa !2428
  %1196 = icmp eq i32 %1193, -1
  %1197 = icmp eq i32 %1194, 0
  %1198 = or i1 %1196, %1197
  %1199 = zext i1 %1198 to i8
  store i8 %1199, i8* %19, align 1, !tbaa !2432
  %1200 = and i32 %1194, 255
  %1201 = tail call i32 @llvm.ctpop.i32(i32 %1200) #8
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  store i8 %1204, i8* %26, align 1, !tbaa !2446
  %1205 = xor i32 %1193, %1194
  %1206 = lshr i32 %1205, 4
  %1207 = trunc i32 %1206 to i8
  %1208 = and i8 %1207, 1
  store i8 %1208, i8* %31, align 1, !tbaa !2450
  %1209 = zext i1 %1197 to i8
  store i8 %1209, i8* %34, align 1, !tbaa !2447
  %1210 = lshr i32 %1194, 31
  %1211 = trunc i32 %1210 to i8
  store i8 %1211, i8* %37, align 1, !tbaa !2448
  %1212 = lshr i32 %1193, 31
  %1213 = xor i32 %1210, %1212
  %1214 = add nuw nsw i32 %1213, %1210
  %1215 = icmp eq i32 %1214, 2
  %1216 = zext i1 %1215 to i8
  store i8 %1216, i8* %43, align 1, !tbaa !2449
  %1217 = add i64 %1154, -48
  %1218 = add i64 %1190, 14
  store i64 %1218, i64* %PC, align 8
  %1219 = inttoptr i64 %1217 to i32*
  store i32 %1194, i32* %1219, align 4
  %1220 = load i64, i64* %RBP, align 8
  %1221 = add i64 %1220, -16
  %1222 = load i64, i64* %PC, align 8
  %1223 = add i64 %1222, 3
  store i64 %1223, i64* %PC, align 8
  %1224 = inttoptr i64 %1221 to i32*
  %1225 = load i32, i32* %1224, align 4
  %1226 = zext i32 %1225 to i64
  store i64 %1226, i64* %RAX, align 8, !tbaa !2428
  %1227 = add i64 %1220, -44
  %1228 = add i64 %1222, 6
  store i64 %1228, i64* %PC, align 8
  %1229 = inttoptr i64 %1227 to i32*
  %1230 = load i32, i32* %1229, align 4
  %1231 = sub i32 %1225, %1230
  %1232 = zext i32 %1231 to i64
  store i64 %1232, i64* %RAX, align 8, !tbaa !2428
  %1233 = icmp ult i32 %1225, %1230
  %1234 = zext i1 %1233 to i8
  store i8 %1234, i8* %19, align 1, !tbaa !2432
  %1235 = and i32 %1231, 255
  %1236 = tail call i32 @llvm.ctpop.i32(i32 %1235) #8
  %1237 = trunc i32 %1236 to i8
  %1238 = and i8 %1237, 1
  %1239 = xor i8 %1238, 1
  store i8 %1239, i8* %26, align 1, !tbaa !2446
  %1240 = xor i32 %1230, %1225
  %1241 = xor i32 %1240, %1231
  %1242 = lshr i32 %1241, 4
  %1243 = trunc i32 %1242 to i8
  %1244 = and i8 %1243, 1
  store i8 %1244, i8* %31, align 1, !tbaa !2450
  %1245 = icmp eq i32 %1231, 0
  %1246 = zext i1 %1245 to i8
  store i8 %1246, i8* %34, align 1, !tbaa !2447
  %1247 = lshr i32 %1231, 31
  %1248 = trunc i32 %1247 to i8
  store i8 %1248, i8* %37, align 1, !tbaa !2448
  %1249 = lshr i32 %1225, 31
  %1250 = lshr i32 %1230, 31
  %1251 = xor i32 %1250, %1249
  %1252 = xor i32 %1247, %1249
  %1253 = add nuw nsw i32 %1252, %1251
  %1254 = icmp eq i32 %1253, 2
  %1255 = zext i1 %1254 to i8
  store i8 %1255, i8* %43, align 1, !tbaa !2449
  %1256 = add i64 %1220, -8
  %1257 = add i64 %1222, 10
  store i64 %1257, i64* %PC, align 8
  %1258 = inttoptr i64 %1256 to i64*
  %1259 = load i64, i64* %1258, align 8
  store i64 %1259, i64* %RCX, align 8, !tbaa !2428
  %1260 = add i64 %1220, -12
  %1261 = add i64 %1222, 13
  store i64 %1261, i64* %PC, align 8
  %1262 = inttoptr i64 %1260 to i32*
  %1263 = load i32, i32* %1262, align 4
  %1264 = zext i32 %1263 to i64
  store i64 %1264, i64* %RSI, align 8, !tbaa !2428
  %1265 = add i64 %1222, 17
  store i64 %1265, i64* %PC, align 8
  %1266 = load i32, i32* %1229, align 4
  %1267 = sext i32 %1263 to i64
  %1268 = sext i32 %1266 to i64
  %1269 = mul nsw i64 %1268, %1267
  %1270 = trunc i64 %1269 to i32
  %1271 = and i64 %1269, 4294967295
  store i64 %1271, i64* %RSI, align 8, !tbaa !2428
  %1272 = shl i64 %1269, 32
  %1273 = ashr exact i64 %1272, 32
  %1274 = icmp ne i64 %1273, %1269
  %1275 = zext i1 %1274 to i8
  store i8 %1275, i8* %19, align 1, !tbaa !2432
  %1276 = and i32 %1270, 255
  %1277 = tail call i32 @llvm.ctpop.i32(i32 %1276) #8
  %1278 = trunc i32 %1277 to i8
  %1279 = and i8 %1278, 1
  %1280 = xor i8 %1279, 1
  store i8 %1280, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1281 = lshr i32 %1270, 31
  %1282 = trunc i32 %1281 to i8
  store i8 %1282, i8* %37, align 1, !tbaa !2448
  store i8 %1275, i8* %43, align 1, !tbaa !2449
  %1283 = add i64 %1222, 20
  store i64 %1283, i64* %PC, align 8
  %1284 = load i32, i32* %1229, align 4
  %1285 = add i32 %1284, %1270
  %1286 = sext i32 %1285 to i64
  %1287 = shl nsw i64 %1286, 2
  %1288 = lshr i64 %1286, 61
  %1289 = and i64 %1288, 1
  %1290 = load i64, i64* %RCX, align 8
  %1291 = add i64 %1287, %1290
  store i64 %1291, i64* %RCX, align 8, !tbaa !2428
  %1292 = icmp ult i64 %1291, %1290
  %1293 = icmp ult i64 %1291, %1287
  %1294 = or i1 %1292, %1293
  %1295 = zext i1 %1294 to i8
  store i8 %1295, i8* %19, align 1, !tbaa !2432
  %1296 = trunc i64 %1291 to i32
  %1297 = and i32 %1296, 255
  %1298 = tail call i32 @llvm.ctpop.i32(i32 %1297) #8
  %1299 = trunc i32 %1298 to i8
  %1300 = and i8 %1299, 1
  %1301 = xor i8 %1300, 1
  store i8 %1301, i8* %26, align 1, !tbaa !2446
  %1302 = xor i64 %1287, %1290
  %1303 = xor i64 %1302, %1291
  %1304 = lshr i64 %1303, 4
  %1305 = trunc i64 %1304 to i8
  %1306 = and i8 %1305, 1
  store i8 %1306, i8* %31, align 1, !tbaa !2450
  %1307 = icmp eq i64 %1291, 0
  %1308 = zext i1 %1307 to i8
  store i8 %1308, i8* %34, align 1, !tbaa !2447
  %1309 = lshr i64 %1291, 63
  %1310 = trunc i64 %1309 to i8
  store i8 %1310, i8* %37, align 1, !tbaa !2448
  %1311 = lshr i64 %1290, 63
  %1312 = xor i64 %1309, %1311
  %1313 = xor i64 %1309, %1289
  %1314 = add nuw nsw i64 %1312, %1313
  %1315 = icmp eq i64 %1314, 2
  %1316 = zext i1 %1315 to i8
  store i8 %1316, i8* %43, align 1, !tbaa !2449
  %1317 = load i32, i32* %EAX, align 4
  %1318 = zext i32 %1317 to i64
  store i64 %1318, i64* %RDI, align 8, !tbaa !2428
  store i64 %1291, i64* %RSI, align 8, !tbaa !2428
  %1319 = add i64 %1222, 4568
  %1320 = add i64 %1222, 40
  %1321 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1322 = add i64 %1321, -8
  %1323 = inttoptr i64 %1322 to i64*
  store i64 %1320, i64* %1323, align 8
  store i64 %1322, i64* %RSP, align 8, !tbaa !2428
  store i64 %1319, i64* %PC, align 8, !tbaa !2428
  %1324 = tail call %struct.Memory* @sub_402bb0_idamax_renamed_(%struct.State* nonnull %0, i64 %1319, %struct.Memory* %MEMORY.3)
  %1325 = load i64, i64* %PC, align 8
  store i32 0, i32* %651, align 1, !tbaa !2451
  store i32 0, i32* %653, align 1, !tbaa !2451
  store i32 0, i32* %654, align 1, !tbaa !2451
  store i32 0, i32* %656, align 1, !tbaa !2451
  %1326 = load i64, i64* %RAX, align 8
  %1327 = load i64, i64* %RBP, align 8
  %1328 = add i64 %1327, -44
  %1329 = add i64 %1325, 6
  store i64 %1329, i64* %PC, align 8
  %1330 = trunc i64 %1326 to i32
  %1331 = inttoptr i64 %1328 to i32*
  %1332 = load i32, i32* %1331, align 4
  %1333 = add i32 %1332, %1330
  %1334 = zext i32 %1333 to i64
  store i64 %1334, i64* %RAX, align 8, !tbaa !2428
  %1335 = icmp ult i32 %1333, %1330
  %1336 = icmp ult i32 %1333, %1332
  %1337 = or i1 %1335, %1336
  %1338 = zext i1 %1337 to i8
  store i8 %1338, i8* %19, align 1, !tbaa !2432
  %1339 = and i32 %1333, 255
  %1340 = tail call i32 @llvm.ctpop.i32(i32 %1339) #8
  %1341 = trunc i32 %1340 to i8
  %1342 = and i8 %1341, 1
  %1343 = xor i8 %1342, 1
  store i8 %1343, i8* %26, align 1, !tbaa !2446
  %1344 = xor i32 %1332, %1330
  %1345 = xor i32 %1344, %1333
  %1346 = lshr i32 %1345, 4
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  store i8 %1348, i8* %31, align 1, !tbaa !2450
  %1349 = icmp eq i32 %1333, 0
  %1350 = zext i1 %1349 to i8
  store i8 %1350, i8* %34, align 1, !tbaa !2447
  %1351 = lshr i32 %1333, 31
  %1352 = trunc i32 %1351 to i8
  store i8 %1352, i8* %37, align 1, !tbaa !2448
  %1353 = lshr i32 %1330, 31
  %1354 = lshr i32 %1332, 31
  %1355 = xor i32 %1351, %1353
  %1356 = xor i32 %1351, %1354
  %1357 = add nuw nsw i32 %1355, %1356
  %1358 = icmp eq i32 %1357, 2
  %1359 = zext i1 %1358 to i8
  store i8 %1359, i8* %43, align 1, !tbaa !2449
  %1360 = add i64 %1327, -52
  %1361 = add i64 %1325, 9
  store i64 %1361, i64* %PC, align 8
  %1362 = inttoptr i64 %1360 to i32*
  store i32 %1333, i32* %1362, align 4
  %1363 = load i64, i64* %RBP, align 8
  %1364 = add i64 %1363, -52
  %1365 = load i64, i64* %PC, align 8
  %1366 = add i64 %1365, 3
  store i64 %1366, i64* %PC, align 8
  %1367 = inttoptr i64 %1364 to i32*
  %1368 = load i32, i32* %1367, align 4
  %1369 = zext i32 %1368 to i64
  store i64 %1369, i64* %RAX, align 8, !tbaa !2428
  %1370 = add i64 %1363, -24
  %1371 = add i64 %1365, 7
  store i64 %1371, i64* %PC, align 8
  %1372 = inttoptr i64 %1370 to i64*
  %1373 = load i64, i64* %1372, align 8
  store i64 %1373, i64* %RCX, align 8, !tbaa !2428
  %1374 = add i64 %1363, -44
  %1375 = add i64 %1365, 11
  store i64 %1375, i64* %PC, align 8
  %1376 = inttoptr i64 %1374 to i32*
  %1377 = load i32, i32* %1376, align 4
  %1378 = sext i32 %1377 to i64
  store i64 %1378, i64* %RSI, align 8, !tbaa !2428
  %1379 = shl nsw i64 %1378, 2
  %1380 = add i64 %1379, %1373
  %1381 = add i64 %1365, 14
  store i64 %1381, i64* %PC, align 8
  %1382 = inttoptr i64 %1380 to i32*
  store i32 %1368, i32* %1382, align 4
  %1383 = load i64, i64* %RBP, align 8
  %1384 = add i64 %1383, -8
  %1385 = load i64, i64* %PC, align 8
  %1386 = add i64 %1385, 4
  store i64 %1386, i64* %PC, align 8
  %1387 = inttoptr i64 %1384 to i64*
  %1388 = load i64, i64* %1387, align 8
  store i64 %1388, i64* %RCX, align 8, !tbaa !2428
  %1389 = add i64 %1383, -12
  %1390 = add i64 %1385, 7
  store i64 %1390, i64* %PC, align 8
  %1391 = inttoptr i64 %1389 to i32*
  %1392 = load i32, i32* %1391, align 4
  %1393 = zext i32 %1392 to i64
  store i64 %1393, i64* %RAX, align 8, !tbaa !2428
  %1394 = add i64 %1383, -44
  %1395 = add i64 %1385, 11
  store i64 %1395, i64* %PC, align 8
  %1396 = inttoptr i64 %1394 to i32*
  %1397 = load i32, i32* %1396, align 4
  %1398 = sext i32 %1392 to i64
  %1399 = sext i32 %1397 to i64
  %1400 = mul nsw i64 %1399, %1398
  %1401 = trunc i64 %1400 to i32
  %1402 = and i64 %1400, 4294967295
  store i64 %1402, i64* %RAX, align 8, !tbaa !2428
  %1403 = shl i64 %1400, 32
  %1404 = ashr exact i64 %1403, 32
  %1405 = icmp ne i64 %1404, %1400
  %1406 = zext i1 %1405 to i8
  store i8 %1406, i8* %19, align 1, !tbaa !2432
  %1407 = and i32 %1401, 255
  %1408 = tail call i32 @llvm.ctpop.i32(i32 %1407) #8
  %1409 = trunc i32 %1408 to i8
  %1410 = and i8 %1409, 1
  %1411 = xor i8 %1410, 1
  store i8 %1411, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1412 = lshr i32 %1401, 31
  %1413 = trunc i32 %1412 to i8
  store i8 %1413, i8* %37, align 1, !tbaa !2448
  store i8 %1406, i8* %43, align 1, !tbaa !2449
  %1414 = add i64 %1383, -52
  %1415 = add i64 %1385, 14
  store i64 %1415, i64* %PC, align 8
  %1416 = inttoptr i64 %1414 to i32*
  %1417 = load i32, i32* %1416, align 4
  %1418 = add i32 %1417, %1401
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RAX, align 8, !tbaa !2428
  %1420 = icmp ult i32 %1418, %1401
  %1421 = icmp ult i32 %1418, %1417
  %1422 = or i1 %1420, %1421
  %1423 = zext i1 %1422 to i8
  store i8 %1423, i8* %19, align 1, !tbaa !2432
  %1424 = and i32 %1418, 255
  %1425 = tail call i32 @llvm.ctpop.i32(i32 %1424) #8
  %1426 = trunc i32 %1425 to i8
  %1427 = and i8 %1426, 1
  %1428 = xor i8 %1427, 1
  store i8 %1428, i8* %26, align 1, !tbaa !2446
  %1429 = xor i32 %1417, %1401
  %1430 = xor i32 %1429, %1418
  %1431 = lshr i32 %1430, 4
  %1432 = trunc i32 %1431 to i8
  %1433 = and i8 %1432, 1
  store i8 %1433, i8* %31, align 1, !tbaa !2450
  %1434 = icmp eq i32 %1418, 0
  %1435 = zext i1 %1434 to i8
  store i8 %1435, i8* %34, align 1, !tbaa !2447
  %1436 = lshr i32 %1418, 31
  %1437 = trunc i32 %1436 to i8
  store i8 %1437, i8* %37, align 1, !tbaa !2448
  %1438 = lshr i32 %1417, 31
  %1439 = xor i32 %1436, %1412
  %1440 = xor i32 %1436, %1438
  %1441 = add nuw nsw i32 %1439, %1440
  %1442 = icmp eq i32 %1441, 2
  %1443 = zext i1 %1442 to i8
  store i8 %1443, i8* %43, align 1, !tbaa !2449
  %1444 = sext i32 %1418 to i64
  store i64 %1444, i64* %RSI, align 8, !tbaa !2428
  %1445 = shl nsw i64 %1444, 2
  %1446 = add i64 %1445, %1388
  %1447 = add i64 %1385, 22
  store i64 %1447, i64* %PC, align 8
  %1448 = inttoptr i64 %1446 to i32*
  %1449 = load i32, i32* %1448, align 4
  %1450 = bitcast %union.VectorReg* %9 to i32*
  store i32 %1449, i32* %1450, align 1, !tbaa !2452
  store float 0.000000e+00, float* %659, align 1, !tbaa !2452
  store float 0.000000e+00, float* %661, align 1, !tbaa !2452
  store float 0.000000e+00, float* %663, align 1, !tbaa !2452
  %1451 = load <2 x float>, <2 x float>* %664, align 1
  %1452 = extractelement <2 x float> %1451, i32 0
  %1453 = fpext float %1452 to double
  store double %1453, double* %665, align 1, !tbaa !2454
  %1454 = add i64 %1385, 30
  store i64 %1454, i64* %PC, align 8
  %1455 = load double, double* %666, align 1
  %1456 = fcmp uno double %1453, %1455
  br i1 %1456, label %1457, label %1467

; <label>:1457:                                   ; preds = %block_4019ca
  %1458 = fadd double %1453, %1455
  %1459 = bitcast double %1458 to i64
  %1460 = and i64 %1459, 9221120237041090560
  %1461 = icmp eq i64 %1460, 9218868437227405312
  %1462 = and i64 %1459, 2251799813685247
  %1463 = icmp ne i64 %1462, 0
  %1464 = and i1 %1461, %1463
  br i1 %1464, label %1465, label %1473

; <label>:1465:                                   ; preds = %1457
  %1466 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1454, %struct.Memory* %1324) #9
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i8, i8* %34, align 1, !tbaa !2447
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1467:                                   ; preds = %block_4019ca
  %1468 = fcmp ogt double %1453, %1455
  br i1 %1468, label %1473, label %1469

; <label>:1469:                                   ; preds = %1467
  %1470 = fcmp olt double %1453, %1455
  br i1 %1470, label %1473, label %1471

; <label>:1471:                                   ; preds = %1469
  %1472 = fcmp oeq double %1453, %1455
  br i1 %1472, label %1473, label %1477

; <label>:1473:                                   ; preds = %1471, %1469, %1467, %1457
  %1474 = phi i8 [ 0, %1467 ], [ 0, %1469 ], [ 1, %1471 ], [ 1, %1457 ]
  %1475 = phi i8 [ 0, %1467 ], [ 0, %1469 ], [ 0, %1471 ], [ 1, %1457 ]
  %1476 = phi i8 [ 0, %1467 ], [ 1, %1469 ], [ 0, %1471 ], [ 1, %1457 ]
  store i8 %1474, i8* %34, align 1, !tbaa !2456
  store i8 %1475, i8* %26, align 1, !tbaa !2456
  store i8 %1476, i8* %19, align 1, !tbaa !2456
  br label %1477

; <label>:1477:                                   ; preds = %1473, %1471
  %1478 = phi i8 [ %1474, %1473 ], [ %1435, %1471 ]
  store i8 0, i8* %43, align 1, !tbaa !2456
  store i8 0, i8* %37, align 1, !tbaa !2456
  store i8 0, i8* %31, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1477, %1465
  %1479 = phi i8 [ %.pre2, %1465 ], [ %1478, %1477 ]
  %1480 = phi i64 [ %.pre1, %1465 ], [ %1454, %1477 ]
  %1481 = phi %struct.Memory* [ %1466, %1465 ], [ %1324, %1477 ]
  %1482 = icmp eq i8 %1479, 0
  %.v67 = select i1 %1482, i64 17, i64 6
  %1483 = add i64 %1480, %.v67
  store i64 %1483, i64* %PC, align 8, !tbaa !2428
  br i1 %1482, label %block_401a46, label %block_401a3b

block_401b23:                                     ; preds = %block_401b9d, %block_401ab4
  %1484 = phi i64 [ %.pre5, %block_401ab4 ], [ %1748, %block_401b9d ]
  %MEMORY.4 = phi %struct.Memory* [ %872, %block_401ab4 ], [ %1716, %block_401b9d ]
  %1485 = load i64, i64* %RBP, align 8
  %1486 = add i64 %1485, -40
  %1487 = add i64 %1484, 3
  store i64 %1487, i64* %PC, align 8
  %1488 = inttoptr i64 %1486 to i32*
  %1489 = load i32, i32* %1488, align 4
  %1490 = zext i32 %1489 to i64
  store i64 %1490, i64* %RAX, align 8, !tbaa !2428
  %1491 = add i64 %1485, -16
  %1492 = add i64 %1484, 6
  store i64 %1492, i64* %PC, align 8
  %1493 = inttoptr i64 %1491 to i32*
  %1494 = load i32, i32* %1493, align 4
  %1495 = sub i32 %1489, %1494
  %1496 = icmp ult i32 %1489, %1494
  %1497 = zext i1 %1496 to i8
  store i8 %1497, i8* %19, align 1, !tbaa !2432
  %1498 = and i32 %1495, 255
  %1499 = tail call i32 @llvm.ctpop.i32(i32 %1498) #8
  %1500 = trunc i32 %1499 to i8
  %1501 = and i8 %1500, 1
  %1502 = xor i8 %1501, 1
  store i8 %1502, i8* %26, align 1, !tbaa !2446
  %1503 = xor i32 %1494, %1489
  %1504 = xor i32 %1503, %1495
  %1505 = lshr i32 %1504, 4
  %1506 = trunc i32 %1505 to i8
  %1507 = and i8 %1506, 1
  store i8 %1507, i8* %31, align 1, !tbaa !2450
  %1508 = icmp eq i32 %1495, 0
  %1509 = zext i1 %1508 to i8
  store i8 %1509, i8* %34, align 1, !tbaa !2447
  %1510 = lshr i32 %1495, 31
  %1511 = trunc i32 %1510 to i8
  store i8 %1511, i8* %37, align 1, !tbaa !2448
  %1512 = lshr i32 %1489, 31
  %1513 = lshr i32 %1494, 31
  %1514 = xor i32 %1513, %1512
  %1515 = xor i32 %1510, %1512
  %1516 = add nuw nsw i32 %1515, %1514
  %1517 = icmp eq i32 %1516, 2
  %1518 = zext i1 %1517 to i8
  store i8 %1518, i8* %43, align 1, !tbaa !2449
  %1519 = icmp ne i8 %1511, 0
  %1520 = xor i1 %1519, %1517
  %.v70 = select i1 %1520, i64 12, i64 231
  %1521 = add i64 %1484, %.v70
  store i64 %1521, i64* %PC, align 8, !tbaa !2428
  br i1 %1520, label %block_401b2f, label %block_401c0a

block_401b9d:                                     ; preds = %block_401b2f, %block_401b56
  %1522 = phi i64 [ %1117, %block_401b2f ], [ %.pre7, %block_401b56 ]
  %1523 = phi i64 [ %1152, %block_401b2f ], [ %.pre6, %block_401b56 ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1524 = add i64 %1522, -16
  %1525 = add i64 %1523, 8
  store i64 %1525, i64* %PC, align 8
  %1526 = inttoptr i64 %1524 to i32*
  %1527 = load i32, i32* %1526, align 4
  %1528 = zext i32 %1527 to i64
  store i64 %1528, i64* %RCX, align 8, !tbaa !2428
  %1529 = add i64 %1522, -44
  %1530 = add i64 %1523, 11
  store i64 %1530, i64* %PC, align 8
  %1531 = inttoptr i64 %1529 to i32*
  %1532 = load i32, i32* %1531, align 4
  %1533 = add i32 %1532, 1
  %1534 = zext i32 %1533 to i64
  store i64 %1534, i64* %RDX, align 8, !tbaa !2428
  %1535 = lshr i32 %1533, 31
  %1536 = sub i32 %1527, %1533
  %1537 = zext i32 %1536 to i64
  store i64 %1537, i64* %RCX, align 8, !tbaa !2428
  %1538 = icmp ult i32 %1527, %1533
  %1539 = zext i1 %1538 to i8
  store i8 %1539, i8* %19, align 1, !tbaa !2432
  %1540 = and i32 %1536, 255
  %1541 = tail call i32 @llvm.ctpop.i32(i32 %1540) #8
  %1542 = trunc i32 %1541 to i8
  %1543 = and i8 %1542, 1
  %1544 = xor i8 %1543, 1
  store i8 %1544, i8* %26, align 1, !tbaa !2446
  %1545 = xor i32 %1533, %1527
  %1546 = xor i32 %1545, %1536
  %1547 = lshr i32 %1546, 4
  %1548 = trunc i32 %1547 to i8
  %1549 = and i8 %1548, 1
  store i8 %1549, i8* %31, align 1, !tbaa !2450
  %1550 = icmp eq i32 %1536, 0
  %1551 = zext i1 %1550 to i8
  store i8 %1551, i8* %34, align 1, !tbaa !2447
  %1552 = lshr i32 %1536, 31
  %1553 = trunc i32 %1552 to i8
  store i8 %1553, i8* %37, align 1, !tbaa !2448
  %1554 = lshr i32 %1527, 31
  %1555 = xor i32 %1535, %1554
  %1556 = xor i32 %1552, %1554
  %1557 = add nuw nsw i32 %1556, %1555
  %1558 = icmp eq i32 %1557, 2
  %1559 = zext i1 %1558 to i8
  store i8 %1559, i8* %43, align 1, !tbaa !2449
  %1560 = add i64 %1522, -36
  %1561 = add i64 %1523, 21
  store i64 %1561, i64* %PC, align 8
  %1562 = inttoptr i64 %1560 to i32*
  %1563 = load i32, i32* %1562, align 4
  store i32 %1563, i32* %651, align 1, !tbaa !2452
  store float 0.000000e+00, float* %670, align 1, !tbaa !2452
  store float 0.000000e+00, float* %671, align 1, !tbaa !2452
  store float 0.000000e+00, float* %672, align 1, !tbaa !2452
  %1564 = load i64, i64* %RBP, align 8
  %1565 = add i64 %1564, -8
  %1566 = add i64 %1523, 25
  store i64 %1566, i64* %PC, align 8
  %1567 = inttoptr i64 %1565 to i64*
  %1568 = load i64, i64* %1567, align 8
  store i64 %1568, i64* %RSI, align 8, !tbaa !2428
  %1569 = add i64 %1564, -12
  %1570 = add i64 %1523, 28
  store i64 %1570, i64* %PC, align 8
  %1571 = inttoptr i64 %1569 to i32*
  %1572 = load i32, i32* %1571, align 4
  %1573 = zext i32 %1572 to i64
  store i64 %1573, i64* %RDX, align 8, !tbaa !2428
  %1574 = add i64 %1564, -44
  %1575 = add i64 %1523, 32
  store i64 %1575, i64* %PC, align 8
  %1576 = inttoptr i64 %1574 to i32*
  %1577 = load i32, i32* %1576, align 4
  %1578 = sext i32 %1572 to i64
  %1579 = sext i32 %1577 to i64
  %1580 = mul nsw i64 %1579, %1578
  %1581 = trunc i64 %1580 to i32
  %1582 = and i64 %1580, 4294967295
  store i64 %1582, i64* %RDX, align 8, !tbaa !2428
  %1583 = shl i64 %1580, 32
  %1584 = ashr exact i64 %1583, 32
  %1585 = icmp ne i64 %1584, %1580
  %1586 = zext i1 %1585 to i8
  store i8 %1586, i8* %19, align 1, !tbaa !2432
  %1587 = and i32 %1581, 255
  %1588 = tail call i32 @llvm.ctpop.i32(i32 %1587) #8
  %1589 = trunc i32 %1588 to i8
  %1590 = and i8 %1589, 1
  %1591 = xor i8 %1590, 1
  store i8 %1591, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1592 = lshr i32 %1581, 31
  %1593 = trunc i32 %1592 to i8
  store i8 %1593, i8* %37, align 1, !tbaa !2448
  store i8 %1586, i8* %43, align 1, !tbaa !2449
  %1594 = add i64 %1523, 35
  store i64 %1594, i64* %PC, align 8
  %1595 = load i32, i32* %1576, align 4
  %1596 = add i32 %1595, %1581
  %1597 = add i32 %1596, 1
  %1598 = zext i32 %1597 to i64
  store i64 %1598, i64* %RDX, align 8, !tbaa !2428
  %1599 = sext i32 %1597 to i64
  %1600 = shl nsw i64 %1599, 2
  store i64 %1600, i64* %RDI, align 8, !tbaa !2428
  %1601 = lshr i64 %1599, 61
  %1602 = and i64 %1601, 1
  %1603 = load i64, i64* %RSI, align 8
  %1604 = add i64 %1600, %1603
  store i64 %1604, i64* %RSI, align 8, !tbaa !2428
  %1605 = icmp ult i64 %1604, %1603
  %1606 = icmp ult i64 %1604, %1600
  %1607 = or i1 %1605, %1606
  %1608 = zext i1 %1607 to i8
  store i8 %1608, i8* %19, align 1, !tbaa !2432
  %1609 = trunc i64 %1604 to i32
  %1610 = and i32 %1609, 255
  %1611 = tail call i32 @llvm.ctpop.i32(i32 %1610) #8
  %1612 = trunc i32 %1611 to i8
  %1613 = and i8 %1612, 1
  %1614 = xor i8 %1613, 1
  store i8 %1614, i8* %26, align 1, !tbaa !2446
  %1615 = xor i64 %1600, %1603
  %1616 = xor i64 %1615, %1604
  %1617 = lshr i64 %1616, 4
  %1618 = trunc i64 %1617 to i8
  %1619 = and i8 %1618, 1
  store i8 %1619, i8* %31, align 1, !tbaa !2450
  %1620 = icmp eq i64 %1604, 0
  %1621 = zext i1 %1620 to i8
  store i8 %1621, i8* %34, align 1, !tbaa !2447
  %1622 = lshr i64 %1604, 63
  %1623 = trunc i64 %1622 to i8
  store i8 %1623, i8* %37, align 1, !tbaa !2448
  %1624 = lshr i64 %1603, 63
  %1625 = xor i64 %1622, %1624
  %1626 = xor i64 %1622, %1602
  %1627 = add nuw nsw i64 %1625, %1626
  %1628 = icmp eq i64 %1627, 2
  %1629 = zext i1 %1628 to i8
  store i8 %1629, i8* %43, align 1, !tbaa !2449
  %1630 = load i64, i64* %RBP, align 8
  %1631 = add i64 %1630, -8
  %1632 = add i64 %1523, 52
  store i64 %1632, i64* %PC, align 8
  %1633 = inttoptr i64 %1631 to i64*
  %1634 = load i64, i64* %1633, align 8
  store i64 %1634, i64* %RDI, align 8, !tbaa !2428
  %1635 = add i64 %1630, -12
  %1636 = add i64 %1523, 55
  store i64 %1636, i64* %PC, align 8
  %1637 = inttoptr i64 %1635 to i32*
  %1638 = load i32, i32* %1637, align 4
  %1639 = zext i32 %1638 to i64
  store i64 %1639, i64* %RDX, align 8, !tbaa !2428
  %1640 = add i64 %1630, -40
  %1641 = add i64 %1523, 59
  store i64 %1641, i64* %PC, align 8
  %1642 = inttoptr i64 %1640 to i32*
  %1643 = load i32, i32* %1642, align 4
  %1644 = sext i32 %1638 to i64
  %1645 = sext i32 %1643 to i64
  %1646 = mul nsw i64 %1645, %1644
  %1647 = trunc i64 %1646 to i32
  %1648 = and i64 %1646, 4294967295
  store i64 %1648, i64* %RDX, align 8, !tbaa !2428
  %1649 = shl i64 %1646, 32
  %1650 = ashr exact i64 %1649, 32
  %1651 = icmp ne i64 %1650, %1646
  %1652 = zext i1 %1651 to i8
  store i8 %1652, i8* %19, align 1, !tbaa !2432
  %1653 = and i32 %1647, 255
  %1654 = tail call i32 @llvm.ctpop.i32(i32 %1653) #8
  %1655 = trunc i32 %1654 to i8
  %1656 = and i8 %1655, 1
  %1657 = xor i8 %1656, 1
  store i8 %1657, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %34, align 1, !tbaa !2447
  %1658 = lshr i32 %1647, 31
  %1659 = trunc i32 %1658 to i8
  store i8 %1659, i8* %37, align 1, !tbaa !2448
  store i8 %1652, i8* %43, align 1, !tbaa !2449
  %1660 = add i64 %1630, -44
  %1661 = add i64 %1523, 62
  store i64 %1661, i64* %PC, align 8
  %1662 = inttoptr i64 %1660 to i32*
  %1663 = load i32, i32* %1662, align 4
  %1664 = add i32 %1663, %1647
  %1665 = add i32 %1664, 1
  %1666 = sext i32 %1665 to i64
  %1667 = shl nsw i64 %1666, 2
  store i64 %1667, i64* %R8, align 8, !tbaa !2428
  %1668 = lshr i64 %1666, 61
  %1669 = and i64 %1668, 1
  %1670 = load i64, i64* %RDI, align 8
  %1671 = add i64 %1667, %1670
  %1672 = icmp ult i64 %1671, %1670
  %1673 = icmp ult i64 %1671, %1667
  %1674 = or i1 %1672, %1673
  %1675 = zext i1 %1674 to i8
  store i8 %1675, i8* %19, align 1, !tbaa !2432
  %1676 = trunc i64 %1671 to i32
  %1677 = and i32 %1676, 255
  %1678 = tail call i32 @llvm.ctpop.i32(i32 %1677) #8
  %1679 = trunc i32 %1678 to i8
  %1680 = and i8 %1679, 1
  %1681 = xor i8 %1680, 1
  store i8 %1681, i8* %26, align 1, !tbaa !2446
  %1682 = xor i64 %1667, %1670
  %1683 = xor i64 %1682, %1671
  %1684 = lshr i64 %1683, 4
  %1685 = trunc i64 %1684 to i8
  %1686 = and i8 %1685, 1
  store i8 %1686, i8* %31, align 1, !tbaa !2450
  %1687 = icmp eq i64 %1671, 0
  %1688 = zext i1 %1687 to i8
  store i8 %1688, i8* %34, align 1, !tbaa !2447
  %1689 = lshr i64 %1671, 63
  %1690 = trunc i64 %1689 to i8
  store i8 %1690, i8* %37, align 1, !tbaa !2448
  %1691 = lshr i64 %1670, 63
  %1692 = xor i64 %1689, %1691
  %1693 = xor i64 %1689, %1669
  %1694 = add nuw nsw i64 %1692, %1693
  %1695 = icmp eq i64 %1694, 2
  %1696 = zext i1 %1695 to i8
  store i8 %1696, i8* %43, align 1, !tbaa !2449
  %1697 = load i64, i64* %RBP, align 8
  %1698 = add i64 %1697, -64
  %1699 = add i64 %1523, 79
  store i64 %1699, i64* %PC, align 8
  %1700 = inttoptr i64 %1698 to i64*
  store i64 %1671, i64* %1700, align 8
  %1701 = load i32, i32* %ECX, align 4
  %1702 = zext i32 %1701 to i64
  %1703 = load i64, i64* %PC, align 8
  store i64 %1702, i64* %RDI, align 8, !tbaa !2428
  %1704 = load i32, i32* %EAX, align 4
  %1705 = zext i32 %1704 to i64
  store i64 %1705, i64* %RDX, align 8, !tbaa !2428
  %1706 = load i64, i64* %RBP, align 8
  %1707 = add i64 %1706, -64
  %1708 = add i64 %1703, 8
  store i64 %1708, i64* %PC, align 8
  %1709 = inttoptr i64 %1707 to i64*
  %1710 = load i64, i64* %1709, align 8
  store i64 %1710, i64* %RCX, align 8, !tbaa !2428
  store i64 %1705, i64* %R8, align 8, !tbaa !2428
  %1711 = add i64 %1703, 3316
  %1712 = add i64 %1703, 16
  %1713 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1714 = add i64 %1713, -8
  %1715 = inttoptr i64 %1714 to i64*
  store i64 %1712, i64* %1715, align 8
  store i64 %1714, i64* %RSP, align 8, !tbaa !2428
  store i64 %1711, i64* %PC, align 8, !tbaa !2428
  %1716 = tail call %struct.Memory* @sub_4028e0_daxpy_renamed_(%struct.State* nonnull %0, i64 %1711, %struct.Memory* %MEMORY.4)
  %1717 = load i64, i64* %RBP, align 8
  %1718 = add i64 %1717, -40
  %1719 = load i64, i64* %PC, align 8
  %1720 = add i64 %1719, 3
  store i64 %1720, i64* %PC, align 8
  %1721 = inttoptr i64 %1718 to i32*
  %1722 = load i32, i32* %1721, align 4
  %1723 = add i32 %1722, 1
  %1724 = zext i32 %1723 to i64
  store i64 %1724, i64* %RAX, align 8, !tbaa !2428
  %1725 = icmp eq i32 %1722, -1
  %1726 = icmp eq i32 %1723, 0
  %1727 = or i1 %1725, %1726
  %1728 = zext i1 %1727 to i8
  store i8 %1728, i8* %19, align 1, !tbaa !2432
  %1729 = and i32 %1723, 255
  %1730 = tail call i32 @llvm.ctpop.i32(i32 %1729) #8
  %1731 = trunc i32 %1730 to i8
  %1732 = and i8 %1731, 1
  %1733 = xor i8 %1732, 1
  store i8 %1733, i8* %26, align 1, !tbaa !2446
  %1734 = xor i32 %1722, %1723
  %1735 = lshr i32 %1734, 4
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  store i8 %1737, i8* %31, align 1, !tbaa !2450
  %1738 = zext i1 %1726 to i8
  store i8 %1738, i8* %34, align 1, !tbaa !2447
  %1739 = lshr i32 %1723, 31
  %1740 = trunc i32 %1739 to i8
  store i8 %1740, i8* %37, align 1, !tbaa !2448
  %1741 = lshr i32 %1722, 31
  %1742 = xor i32 %1739, %1741
  %1743 = add nuw nsw i32 %1742, %1739
  %1744 = icmp eq i32 %1743, 2
  %1745 = zext i1 %1744 to i8
  store i8 %1745, i8* %43, align 1, !tbaa !2449
  %1746 = add i64 %1719, 9
  store i64 %1746, i64* %PC, align 8
  store i32 %1723, i32* %1721, align 4
  %1747 = load i64, i64* %PC, align 8
  %1748 = add i64 %1747, -226
  store i64 %1748, i64* %PC, align 8, !tbaa !2428
  br label %block_401b23

block_401c18:                                     ; preds = %block_401c0a, %block_401a41
  %1749 = phi i64 [ %1485, %block_401c0a ], [ %.pre9, %block_401a41 ]
  %1750 = phi i64 [ %1814, %block_401c0a ], [ %.pre8, %block_401a41 ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.4, %block_401c0a ], [ %1481, %block_401a41 ]
  %1751 = add i64 %1749, -44
  %1752 = add i64 %1750, 8
  store i64 %1752, i64* %PC, align 8
  %1753 = inttoptr i64 %1751 to i32*
  %1754 = load i32, i32* %1753, align 4
  %1755 = add i32 %1754, 1
  %1756 = zext i32 %1755 to i64
  store i64 %1756, i64* %RAX, align 8, !tbaa !2428
  %1757 = icmp eq i32 %1754, -1
  %1758 = icmp eq i32 %1755, 0
  %1759 = or i1 %1757, %1758
  %1760 = zext i1 %1759 to i8
  store i8 %1760, i8* %19, align 1, !tbaa !2432
  %1761 = and i32 %1755, 255
  %1762 = tail call i32 @llvm.ctpop.i32(i32 %1761) #8
  %1763 = trunc i32 %1762 to i8
  %1764 = and i8 %1763, 1
  %1765 = xor i8 %1764, 1
  store i8 %1765, i8* %26, align 1, !tbaa !2446
  %1766 = xor i32 %1754, %1755
  %1767 = lshr i32 %1766, 4
  %1768 = trunc i32 %1767 to i8
  %1769 = and i8 %1768, 1
  store i8 %1769, i8* %31, align 1, !tbaa !2450
  %1770 = zext i1 %1758 to i8
  store i8 %1770, i8* %34, align 1, !tbaa !2447
  %1771 = lshr i32 %1755, 31
  %1772 = trunc i32 %1771 to i8
  store i8 %1772, i8* %37, align 1, !tbaa !2448
  %1773 = lshr i32 %1754, 31
  %1774 = xor i32 %1771, %1773
  %1775 = add nuw nsw i32 %1774, %1771
  %1776 = icmp eq i32 %1775, 2
  %1777 = zext i1 %1776 to i8
  store i8 %1777, i8* %43, align 1, !tbaa !2449
  %1778 = add i64 %1750, 14
  store i64 %1778, i64* %PC, align 8
  store i32 %1755, i32* %1753, align 4
  %1779 = load i64, i64* %PC, align 8
  %1780 = add i64 %1779, -616
  store i64 %1780, i64* %PC, align 8, !tbaa !2428
  br label %block_4019be

block_401c7d:                                     ; preds = %block_401c77
  %1781 = load i64, i64* %RBP, align 8
  %1782 = add i64 %1781, -16
  %1783 = add i64 %1849, 3
  store i64 %1783, i64* %PC, align 8
  %1784 = inttoptr i64 %1782 to i32*
  %1785 = load i32, i32* %1784, align 4
  %1786 = add i32 %1785, -1
  %1787 = zext i32 %1786 to i64
  store i64 %1787, i64* %RAX, align 8, !tbaa !2428
  %1788 = icmp eq i32 %1785, 0
  %1789 = zext i1 %1788 to i8
  store i8 %1789, i8* %19, align 1, !tbaa !2432
  %1790 = and i32 %1786, 255
  %1791 = tail call i32 @llvm.ctpop.i32(i32 %1790) #8
  %1792 = trunc i32 %1791 to i8
  %1793 = and i8 %1792, 1
  %1794 = xor i8 %1793, 1
  store i8 %1794, i8* %26, align 1, !tbaa !2446
  %1795 = xor i32 %1785, %1786
  %1796 = lshr i32 %1795, 4
  %1797 = trunc i32 %1796 to i8
  %1798 = and i8 %1797, 1
  store i8 %1798, i8* %31, align 1, !tbaa !2450
  %1799 = icmp eq i32 %1786, 0
  %1800 = zext i1 %1799 to i8
  store i8 %1800, i8* %34, align 1, !tbaa !2447
  %1801 = lshr i32 %1786, 31
  %1802 = trunc i32 %1801 to i8
  store i8 %1802, i8* %37, align 1, !tbaa !2448
  %1803 = lshr i32 %1785, 31
  %1804 = xor i32 %1801, %1803
  %1805 = add nuw nsw i32 %1804, %1803
  %1806 = icmp eq i32 %1805, 2
  %1807 = zext i1 %1806 to i8
  store i8 %1807, i8* %43, align 1, !tbaa !2449
  %1808 = add i64 %1781, -32
  %1809 = add i64 %1849, 10
  store i64 %1809, i64* %PC, align 8
  %1810 = inttoptr i64 %1808 to i64*
  %1811 = load i64, i64* %1810, align 8
  store i64 %1811, i64* %RCX, align 8, !tbaa !2428
  %1812 = add i64 %1849, 12
  store i64 %1812, i64* %PC, align 8
  %1813 = inttoptr i64 %1811 to i32*
  store i32 %1786, i32* %1813, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_401c89

block_401c0a:                                     ; preds = %block_401b23
  %1814 = add i64 %1521, 14
  store i64 %1814, i64* %PC, align 8, !tbaa !2428
  br label %block_401c18

block_401c89:                                     ; preds = %block_401c77, %block_401c7d, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1815 = phi i64 [ %1849, %block_401c77 ], [ %.pre12, %block_401c7d ], [ %1048, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %1816 = load i64, i64* %RSP, align 8
  %1817 = add i64 %1816, 64
  store i64 %1817, i64* %RSP, align 8, !tbaa !2428
  %1818 = icmp ugt i64 %1816, -65
  %1819 = zext i1 %1818 to i8
  store i8 %1819, i8* %19, align 1, !tbaa !2432
  %1820 = trunc i64 %1817 to i32
  %1821 = and i32 %1820, 255
  %1822 = tail call i32 @llvm.ctpop.i32(i32 %1821) #8
  %1823 = trunc i32 %1822 to i8
  %1824 = and i8 %1823, 1
  %1825 = xor i8 %1824, 1
  store i8 %1825, i8* %26, align 1, !tbaa !2446
  %1826 = xor i64 %1816, %1817
  %1827 = lshr i64 %1826, 4
  %1828 = trunc i64 %1827 to i8
  %1829 = and i8 %1828, 1
  store i8 %1829, i8* %31, align 1, !tbaa !2450
  %1830 = icmp eq i64 %1817, 0
  %1831 = zext i1 %1830 to i8
  store i8 %1831, i8* %34, align 1, !tbaa !2447
  %1832 = lshr i64 %1817, 63
  %1833 = trunc i64 %1832 to i8
  store i8 %1833, i8* %37, align 1, !tbaa !2448
  %1834 = lshr i64 %1816, 63
  %1835 = xor i64 %1832, %1834
  %1836 = add nuw nsw i64 %1835, %1832
  %1837 = icmp eq i64 %1836, 2
  %1838 = zext i1 %1837 to i8
  store i8 %1838, i8* %43, align 1, !tbaa !2449
  %1839 = add i64 %1815, 5
  store i64 %1839, i64* %PC, align 8
  %1840 = add i64 %1816, 72
  %1841 = inttoptr i64 %1817 to i64*
  %1842 = load i64, i64* %1841, align 8
  store i64 %1842, i64* %RBP, align 8, !tbaa !2428
  store i64 %1840, i64* %RSP, align 8, !tbaa !2428
  %1843 = add i64 %1815, 6
  store i64 %1843, i64* %PC, align 8
  %1844 = inttoptr i64 %1840 to i64*
  %1845 = load i64, i64* %1844, align 8
  store i64 %1845, i64* %PC, align 8, !tbaa !2428
  %1846 = add i64 %1816, 80
  store i64 %1846, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1046

block_401c77:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1847 = load i8, i8* %26, align 1, !tbaa !2446
  %1848 = icmp ne i8 %1847, 0
  %.v73 = select i1 %1848, i64 18, i64 6
  %1849 = add i64 %1048, %.v73
  store i64 %1849, i64* %PC, align 8, !tbaa !2428
  %1850 = icmp eq i8 %1847, 1
  br i1 %1850, label %block_401c89, label %block_401c7d
}

; Function Attrs: noinline
define %struct.Memory* @sub_4017b0_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4017b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %18, align 1, !tbaa !2451
  %19 = getelementptr inbounds i8, i8* %16, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = bitcast i64* %17 to i32*
  store i32 0, i32* %21, align 1, !tbaa !2451
  %22 = getelementptr inbounds i8, i8* %16, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 1, !tbaa !2451
  %24 = add i64 %12, -16
  %25 = load i64, i64* %RDI, align 8
  %26 = add i64 %15, 10
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -12
  %30 = load i32, i32* %ESI, align 4
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 3
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %29 to i32*
  store i32 %30, i32* %33, align 4
  %34 = load i64, i64* %RBP, align 8
  %35 = add i64 %34, -16
  %36 = load i32, i32* %EDX, align 4
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %39, align 4
  %40 = load i64, i64* %RBP, align 8
  %41 = add i64 %40, -24
  %42 = load i64, i64* %RCX, align 8
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %45, align 8
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -32
  %48 = load i64, i64* %R8, align 8
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -36
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i32*
  store i32 1325, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -32
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RCX, align 8, !tbaa !2428
  %63 = add i64 %59, 8
  store i64 %63, i64* %PC, align 8
  %64 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %65 = load <2 x float>, <2 x float>* %64, align 1
  %66 = extractelement <2 x float> %65, i32 0
  %67 = inttoptr i64 %62 to float*
  store float %66, float* %67, align 4
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -44
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 7
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %69 to i32*
  store i32 0, i32* %72, align 4
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %79 = bitcast i64* %17 to double*
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %81 = bitcast i64* %80 to double*
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %83 = bitcast %union.VectorReg* %8 to double*
  %84 = bitcast %union.VectorReg* %7 to double*
  %85 = bitcast [32 x %union.VectorReg]* %6 to double*
  %86 = bitcast i64* %17 to <2 x i32>*
  %87 = bitcast [32 x %union.VectorReg]* %6 to float*
  %88 = bitcast i8* %19 to float*
  %89 = bitcast i64* %17 to float*
  %90 = bitcast i8* %22 to float*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4017df

block_4017fe:                                     ; preds = %block_4017f2
  %91 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 56) to i64*), align 8
  %92 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %91, i64* %92, align 1, !tbaa !2454
  store double 0.000000e+00, double* %79, align 1, !tbaa !2454
  %93 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 64) to i64*), align 16
  %94 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %93, i64* %94, align 1, !tbaa !2454
  store double 0.000000e+00, double* %81, align 1, !tbaa !2454
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %95 = add i64 %579, -36
  %96 = add i64 %615, 28
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  %100 = mul nsw i64 %99, 3125
  %101 = trunc i64 %100 to i32
  %102 = and i64 %100, 4294967295
  store i64 %102, i64* %RCX, align 8, !tbaa !2428
  %103 = mul i64 %99, 13421772800000
  %104 = ashr exact i64 %103, 32
  %105 = icmp ne i64 %104, %100
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %73, align 1, !tbaa !2432
  %107 = and i32 %101, 255
  %108 = tail call i32 @llvm.ctpop.i32(i32 %107) #8
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %112 = lshr i32 %101, 31
  %113 = trunc i32 %112 to i8
  store i8 %113, i8* %77, align 1, !tbaa !2448
  store i8 %106, i8* %78, align 1, !tbaa !2449
  %114 = add i64 %579, -48
  %115 = add i64 %615, 31
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i32*
  store i32 65536, i32* %116, align 4
  %117 = load i32, i32* %ECX, align 4
  %118 = zext i32 %117 to i64
  %119 = load i64, i64* %PC, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2428
  %120 = sext i32 %117 to i64
  %121 = lshr i64 %120, 32
  store i64 %121, i64* %82, align 8, !tbaa !2428
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, -48
  %124 = add i64 %119, 6
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  store i64 %127, i64* %RCX, align 8, !tbaa !2428
  %128 = add i64 %119, 8
  store i64 %128, i64* %PC, align 8
  %129 = sext i32 %126 to i64
  %130 = shl nuw i64 %121, 32
  %131 = or i64 %130, %118
  %132 = sdiv i64 %131, %129
  %133 = shl i64 %132, 32
  %134 = ashr exact i64 %133, 32
  %135 = icmp eq i64 %132, %134
  br i1 %135, label %138, label %136

; <label>:136:                                    ; preds = %block_4017fe
  %137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %128, %struct.Memory* %MEMORY.2) #9
  %.pre2 = load i64, i64* %RBP, align 8
  %.pre3 = load i32, i32* %EDX, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:138:                                    ; preds = %block_4017fe
  %139 = srem i64 %131, %129
  %140 = and i64 %132, 4294967295
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = and i64 %139, 4294967295
  store i64 %141, i64* %82, align 8, !tbaa !2428
  store i8 0, i8* %73, align 1, !tbaa !2432
  store i8 0, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %78, align 1, !tbaa !2449
  %142 = trunc i64 %139 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %138, %136
  %143 = phi i64 [ %.pre4, %136 ], [ %128, %138 ]
  %144 = phi i32 [ %.pre3, %136 ], [ %142, %138 ]
  %145 = phi i64 [ %.pre2, %136 ], [ %122, %138 ]
  %146 = phi %struct.Memory* [ %137, %136 ], [ %MEMORY.2, %138 ]
  %147 = add i64 %145, -36
  %148 = add i64 %143, 3
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %147 to i32*
  store i32 %144, i32* %149, align 4
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -36
  %152 = load i64, i64* %PC, align 8
  %153 = add i64 %152, 3
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %151 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RDX, align 8, !tbaa !2428
  %157 = sitofp i32 %155 to double
  %158 = load double, double* %84, align 1
  %159 = fsub double %157, %158
  %160 = load double, double* %85, align 1
  %161 = fdiv double %159, %160
  store double %161, double* %83, align 1, !tbaa !2454
  %162 = bitcast double %160 to <2 x i32>
  %163 = load <2 x i32>, <2 x i32>* %86, align 1
  %164 = fptrunc double %161 to float
  store float %164, float* %87, align 1, !tbaa !2452
  %165 = extractelement <2 x i32> %162, i32 1
  store i32 %165, i32* %20, align 1, !tbaa !2452
  %166 = extractelement <2 x i32> %163, i32 0
  store i32 %166, i32* %21, align 1, !tbaa !2452
  %167 = extractelement <2 x i32> %163, i32 1
  store i32 %167, i32* %23, align 1, !tbaa !2452
  %168 = add i64 %150, -8
  %169 = add i64 %152, 23
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %RSI, align 8, !tbaa !2428
  %172 = add i64 %150, -12
  %173 = add i64 %152, 26
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  store i64 %176, i64* %RDX, align 8, !tbaa !2428
  %177 = add i64 %150, -44
  %178 = add i64 %152, 30
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %177 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %175 to i64
  %182 = sext i32 %180 to i64
  %183 = mul nsw i64 %182, %181
  %184 = trunc i64 %183 to i32
  %185 = and i64 %183, 4294967295
  store i64 %185, i64* %RDX, align 8, !tbaa !2428
  %186 = shl i64 %183, 32
  %187 = ashr exact i64 %186, 32
  %188 = icmp ne i64 %187, %183
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %73, align 1, !tbaa !2432
  %190 = and i32 %184, 255
  %191 = tail call i32 @llvm.ctpop.i32(i32 %190) #8
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = xor i8 %193, 1
  store i8 %194, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %195 = lshr i32 %184, 31
  %196 = trunc i32 %195 to i8
  store i8 %196, i8* %77, align 1, !tbaa !2448
  store i8 %189, i8* %78, align 1, !tbaa !2449
  %197 = add i64 %150, -40
  %198 = add i64 %152, 33
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i32*
  %200 = load i32, i32* %199, align 4
  %201 = add i32 %200, %184
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %RDX, align 8, !tbaa !2428
  %203 = icmp ult i32 %201, %184
  %204 = icmp ult i32 %201, %200
  %205 = or i1 %203, %204
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %73, align 1, !tbaa !2432
  %207 = and i32 %201, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207) #8
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  store i8 %211, i8* %74, align 1, !tbaa !2446
  %212 = xor i32 %200, %184
  %213 = xor i32 %212, %201
  %214 = lshr i32 %213, 4
  %215 = trunc i32 %214 to i8
  %216 = and i8 %215, 1
  store i8 %216, i8* %75, align 1, !tbaa !2450
  %217 = icmp eq i32 %201, 0
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %76, align 1, !tbaa !2447
  %219 = lshr i32 %201, 31
  %220 = trunc i32 %219 to i8
  store i8 %220, i8* %77, align 1, !tbaa !2448
  %221 = lshr i32 %200, 31
  %222 = xor i32 %219, %195
  %223 = xor i32 %219, %221
  %224 = add nuw nsw i32 %222, %223
  %225 = icmp eq i32 %224, 2
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %78, align 1, !tbaa !2449
  %227 = sext i32 %201 to i64
  store i64 %227, i64* %RDI, align 8, !tbaa !2428
  %228 = shl nsw i64 %227, 2
  %229 = add i64 %228, %171
  %230 = add i64 %152, 41
  store i64 %230, i64* %PC, align 8
  %231 = load <2 x float>, <2 x float>* %64, align 1
  %232 = extractelement <2 x float> %231, i32 0
  %233 = inttoptr i64 %229 to float*
  store float %232, float* %233, align 4
  %234 = load i64, i64* %RBP, align 8
  %235 = add i64 %234, -8
  %236 = load i64, i64* %PC, align 8
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %235 to i64*
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %RSI, align 8, !tbaa !2428
  %240 = add i64 %234, -12
  %241 = add i64 %236, 7
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %240 to i32*
  %243 = load i32, i32* %242, align 4
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RDX, align 8, !tbaa !2428
  %245 = add i64 %234, -44
  %246 = add i64 %236, 11
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247, align 4
  %249 = sext i32 %243 to i64
  %250 = sext i32 %248 to i64
  %251 = mul nsw i64 %250, %249
  %252 = trunc i64 %251 to i32
  %253 = and i64 %251, 4294967295
  store i64 %253, i64* %RDX, align 8, !tbaa !2428
  %254 = shl i64 %251, 32
  %255 = ashr exact i64 %254, 32
  %256 = icmp ne i64 %255, %251
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %73, align 1, !tbaa !2432
  %258 = and i32 %252, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #8
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %263 = lshr i32 %252, 31
  %264 = trunc i32 %263 to i8
  store i8 %264, i8* %77, align 1, !tbaa !2448
  store i8 %257, i8* %78, align 1, !tbaa !2449
  %265 = add i64 %234, -40
  %266 = add i64 %236, 14
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i32*
  %268 = load i32, i32* %267, align 4
  %269 = add i32 %268, %252
  %270 = zext i32 %269 to i64
  store i64 %270, i64* %RDX, align 8, !tbaa !2428
  %271 = icmp ult i32 %269, %252
  %272 = icmp ult i32 %269, %268
  %273 = or i1 %271, %272
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %73, align 1, !tbaa !2432
  %275 = and i32 %269, 255
  %276 = tail call i32 @llvm.ctpop.i32(i32 %275) #8
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = xor i8 %278, 1
  store i8 %279, i8* %74, align 1, !tbaa !2446
  %280 = xor i32 %268, %252
  %281 = xor i32 %280, %269
  %282 = lshr i32 %281, 4
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  store i8 %284, i8* %75, align 1, !tbaa !2450
  %285 = icmp eq i32 %269, 0
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %76, align 1, !tbaa !2447
  %287 = lshr i32 %269, 31
  %288 = trunc i32 %287 to i8
  store i8 %288, i8* %77, align 1, !tbaa !2448
  %289 = lshr i32 %268, 31
  %290 = xor i32 %287, %263
  %291 = xor i32 %287, %289
  %292 = add nuw nsw i32 %290, %291
  %293 = icmp eq i32 %292, 2
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %78, align 1, !tbaa !2449
  %295 = sext i32 %269 to i64
  store i64 %295, i64* %RDI, align 8, !tbaa !2428
  %296 = shl nsw i64 %295, 2
  %297 = add i64 %296, %239
  %298 = add i64 %236, 22
  store i64 %298, i64* %PC, align 8
  %299 = inttoptr i64 %297 to i32*
  %300 = load i32, i32* %299, align 4
  store i32 %300, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %301 = load i64, i64* %RBP, align 8
  %302 = add i64 %301, -32
  %303 = add i64 %236, 26
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %RSI, align 8, !tbaa !2428
  %306 = add i64 %236, 29
  store i64 %306, i64* %PC, align 8
  %307 = load <2 x float>, <2 x float>* %64, align 1
  %308 = extractelement <2 x float> %307, i32 0
  %309 = inttoptr i64 %305 to float*
  %310 = load float, float* %309, align 4
  %311 = fcmp uno float %308, %310
  br i1 %311, label %312, label %322

; <label>:312:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %313 = fadd float %308, %310
  %314 = bitcast float %313 to i32
  %315 = and i32 %314, 2143289344
  %316 = icmp eq i32 %315, 2139095040
  %317 = and i32 %314, 4194303
  %318 = icmp ne i32 %317, 0
  %319 = and i1 %316, %318
  br i1 %319, label %320, label %328

; <label>:320:                                    ; preds = %312
  %321 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %306, %struct.Memory* %146) #9
  %.pre5 = load i64, i64* %PC, align 8
  %.pre6 = load i8, i8* %73, align 1, !tbaa !2432
  %.pre7 = load i8, i8* %76, align 1, !tbaa !2447
  %.pre8 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:322:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %323 = fcmp ogt float %308, %310
  br i1 %323, label %328, label %324

; <label>:324:                                    ; preds = %322
  %325 = fcmp olt float %308, %310
  br i1 %325, label %328, label %326

; <label>:326:                                    ; preds = %324
  %327 = fcmp oeq float %308, %310
  br i1 %327, label %328, label %332

; <label>:328:                                    ; preds = %326, %324, %322, %312
  %329 = phi i8 [ 0, %322 ], [ 0, %324 ], [ 1, %326 ], [ 1, %312 ]
  %330 = phi i8 [ 0, %322 ], [ 0, %324 ], [ 0, %326 ], [ 1, %312 ]
  %331 = phi i8 [ 0, %322 ], [ 1, %324 ], [ 0, %326 ], [ 1, %312 ]
  store i8 %329, i8* %76, align 1, !tbaa !2456
  store i8 %330, i8* %74, align 1, !tbaa !2456
  store i8 %331, i8* %73, align 1, !tbaa !2456
  br label %332

; <label>:332:                                    ; preds = %328, %326
  %333 = phi i8 [ %329, %328 ], [ %286, %326 ]
  %334 = phi i8 [ %331, %328 ], [ %274, %326 ]
  store i8 0, i8* %78, align 1, !tbaa !2456
  store i8 0, i8* %77, align 1, !tbaa !2456
  store i8 0, i8* %75, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %332, %320
  %335 = phi i64 [ %.pre8, %320 ], [ %301, %332 ]
  %336 = phi i8 [ %.pre7, %320 ], [ %333, %332 ]
  %337 = phi i8 [ %.pre6, %320 ], [ %334, %332 ]
  %338 = phi i64 [ %.pre5, %320 ], [ %306, %332 ]
  %339 = phi %struct.Memory* [ %321, %320 ], [ %146, %332 ]
  %340 = or i8 %336, %337
  %341 = icmp ne i8 %340, 0
  %.v14 = select i1 %341, i64 38, i64 6
  %342 = add i64 %338, %.v14
  store i64 %342, i64* %PC, align 8, !tbaa !2428
  br i1 %341, label %block_401894, label %block_401874

block_401874:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %343 = add i64 %335, -8
  %344 = add i64 %342, 4
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %343 to i64*
  %346 = load i64, i64* %345, align 8
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = add i64 %335, -12
  %348 = add i64 %342, 7
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %347 to i32*
  %350 = load i32, i32* %349, align 4
  %351 = zext i32 %350 to i64
  store i64 %351, i64* %RCX, align 8, !tbaa !2428
  %352 = add i64 %335, -44
  %353 = add i64 %342, 11
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %352 to i32*
  %355 = load i32, i32* %354, align 4
  %356 = sext i32 %350 to i64
  %357 = sext i32 %355 to i64
  %358 = mul nsw i64 %357, %356
  %359 = trunc i64 %358 to i32
  %360 = and i64 %358, 4294967295
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = shl i64 %358, 32
  %362 = ashr exact i64 %361, 32
  %363 = icmp ne i64 %362, %358
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %73, align 1, !tbaa !2432
  %365 = and i32 %359, 255
  %366 = tail call i32 @llvm.ctpop.i32(i32 %365) #8
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  store i8 %369, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %370 = lshr i32 %359, 31
  %371 = trunc i32 %370 to i8
  store i8 %371, i8* %77, align 1, !tbaa !2448
  store i8 %364, i8* %78, align 1, !tbaa !2449
  %372 = add i64 %335, -40
  %373 = add i64 %342, 14
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %372 to i32*
  %375 = load i32, i32* %374, align 4
  %376 = add i32 %375, %359
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %RCX, align 8, !tbaa !2428
  %378 = icmp ult i32 %376, %359
  %379 = icmp ult i32 %376, %375
  %380 = or i1 %378, %379
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %73, align 1, !tbaa !2432
  %382 = and i32 %376, 255
  %383 = tail call i32 @llvm.ctpop.i32(i32 %382) #8
  %384 = trunc i32 %383 to i8
  %385 = and i8 %384, 1
  %386 = xor i8 %385, 1
  store i8 %386, i8* %74, align 1, !tbaa !2446
  %387 = xor i32 %375, %359
  %388 = xor i32 %387, %376
  %389 = lshr i32 %388, 4
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  store i8 %391, i8* %75, align 1, !tbaa !2450
  %392 = icmp eq i32 %376, 0
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %76, align 1, !tbaa !2447
  %394 = lshr i32 %376, 31
  %395 = trunc i32 %394 to i8
  store i8 %395, i8* %77, align 1, !tbaa !2448
  %396 = lshr i32 %375, 31
  %397 = xor i32 %394, %370
  %398 = xor i32 %394, %396
  %399 = add nuw nsw i32 %397, %398
  %400 = icmp eq i32 %399, 2
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %78, align 1, !tbaa !2449
  %402 = sext i32 %376 to i64
  store i64 %402, i64* %RDX, align 8, !tbaa !2428
  %403 = shl nsw i64 %402, 2
  %404 = add i64 %403, %346
  %405 = add i64 %342, 22
  store i64 %405, i64* %PC, align 8
  %406 = inttoptr i64 %404 to i32*
  %407 = load i32, i32* %406, align 4
  store i32 %407, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %408 = add i64 %335, -52
  %409 = add i64 %342, 27
  store i64 %409, i64* %PC, align 8
  %410 = load <2 x float>, <2 x float>* %64, align 1
  %411 = extractelement <2 x float> %410, i32 0
  %412 = inttoptr i64 %408 to float*
  store float %411, float* %412, align 4
  %413 = load i64, i64* %PC, align 8
  %414 = add i64 %413, 18
  store i64 %414, i64* %PC, align 8, !tbaa !2428
  br label %block_4018a1

block_401964:                                     ; preds = %block_40191a
  %415 = add i64 %824, -44
  %416 = add i64 %860, 8
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = add i32 %418, 1
  %420 = zext i32 %419 to i64
  store i64 %420, i64* %RAX, align 8, !tbaa !2428
  %421 = icmp eq i32 %418, -1
  %422 = icmp eq i32 %419, 0
  %423 = or i1 %421, %422
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %73, align 1, !tbaa !2432
  %425 = and i32 %419, 255
  %426 = tail call i32 @llvm.ctpop.i32(i32 %425) #8
  %427 = trunc i32 %426 to i8
  %428 = and i8 %427, 1
  %429 = xor i8 %428, 1
  store i8 %429, i8* %74, align 1, !tbaa !2446
  %430 = xor i32 %418, %419
  %431 = lshr i32 %430, 4
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  store i8 %433, i8* %75, align 1, !tbaa !2450
  %434 = zext i1 %422 to i8
  store i8 %434, i8* %76, align 1, !tbaa !2447
  %435 = lshr i32 %419, 31
  %436 = trunc i32 %435 to i8
  store i8 %436, i8* %77, align 1, !tbaa !2448
  %437 = lshr i32 %418, 31
  %438 = xor i32 %435, %437
  %439 = add nuw nsw i32 %438, %435
  %440 = icmp eq i32 %439, 2
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %78, align 1, !tbaa !2449
  %442 = add i64 %860, 14
  store i64 %442, i64* %PC, align 8
  store i32 %419, i32* %417, align 4
  %443 = load i64, i64* %PC, align 8
  %444 = add i64 %443, -107
  store i64 %444, i64* %PC, align 8, !tbaa !2428
  br label %block_401907

block_4018e2:                                     ; preds = %block_4018d6
  store i32 0, i32* %18, align 1, !tbaa !2451
  store i32 0, i32* %20, align 1, !tbaa !2451
  store i32 0, i32* %21, align 1, !tbaa !2451
  store i32 0, i32* %23, align 1, !tbaa !2451
  %445 = add i64 %541, -24
  %446 = add i64 %577, 7
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %445 to i64*
  %448 = load i64, i64* %447, align 8
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = add i64 %577, 11
  store i64 %449, i64* %PC, align 8
  %450 = load i32, i32* %544, align 4
  %451 = sext i32 %450 to i64
  store i64 %451, i64* %RCX, align 8, !tbaa !2428
  %452 = shl nsw i64 %451, 2
  %453 = add i64 %452, %448
  %454 = add i64 %577, 16
  store i64 %454, i64* %PC, align 8
  %455 = load <2 x float>, <2 x float>* %64, align 1
  %456 = extractelement <2 x float> %455, i32 0
  %457 = inttoptr i64 %453 to float*
  store float %456, float* %457, align 4
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -40
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 3
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i32*
  %463 = load i32, i32* %462, align 4
  %464 = add i32 %463, 1
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %RAX, align 8, !tbaa !2428
  %466 = icmp eq i32 %463, -1
  %467 = icmp eq i32 %464, 0
  %468 = or i1 %466, %467
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %73, align 1, !tbaa !2432
  %470 = and i32 %464, 255
  %471 = tail call i32 @llvm.ctpop.i32(i32 %470) #8
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = xor i8 %473, 1
  store i8 %474, i8* %74, align 1, !tbaa !2446
  %475 = xor i32 %463, %464
  %476 = lshr i32 %475, 4
  %477 = trunc i32 %476 to i8
  %478 = and i8 %477, 1
  store i8 %478, i8* %75, align 1, !tbaa !2450
  %479 = zext i1 %467 to i8
  store i8 %479, i8* %76, align 1, !tbaa !2447
  %480 = lshr i32 %464, 31
  %481 = trunc i32 %480 to i8
  store i8 %481, i8* %77, align 1, !tbaa !2448
  %482 = lshr i32 %463, 31
  %483 = xor i32 %480, %482
  %484 = add nuw nsw i32 %483, %480
  %485 = icmp eq i32 %484, 2
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %78, align 1, !tbaa !2449
  %487 = add i64 %460, 9
  store i64 %487, i64* %PC, align 8
  store i32 %464, i32* %462, align 4
  %488 = load i64, i64* %PC, align 8
  %489 = add i64 %488, -37
  store i64 %489, i64* %PC, align 8, !tbaa !2428
  br label %block_4018d6

block_4017df:                                     ; preds = %block_4018bc, %block_4017b0
  %490 = phi i64 [ %.pre, %block_4017b0 ], [ %645, %block_4018bc ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4017b0 ], [ %MEMORY.2, %block_4018bc ]
  %491 = load i64, i64* %RBP, align 8
  %492 = add i64 %491, -44
  %493 = add i64 %490, 3
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to i32*
  %495 = load i32, i32* %494, align 4
  %496 = zext i32 %495 to i64
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = add i64 %491, -16
  %498 = add i64 %490, 6
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = sub i32 %495, %500
  %502 = icmp ult i32 %495, %500
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %73, align 1, !tbaa !2432
  %504 = and i32 %501, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #8
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %74, align 1, !tbaa !2446
  %509 = xor i32 %500, %495
  %510 = xor i32 %509, %501
  %511 = lshr i32 %510, 4
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  store i8 %513, i8* %75, align 1, !tbaa !2450
  %514 = icmp eq i32 %501, 0
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %76, align 1, !tbaa !2447
  %516 = lshr i32 %501, 31
  %517 = trunc i32 %516 to i8
  store i8 %517, i8* %77, align 1, !tbaa !2448
  %518 = lshr i32 %495, 31
  %519 = lshr i32 %500, 31
  %520 = xor i32 %519, %518
  %521 = xor i32 %516, %518
  %522 = add nuw nsw i32 %521, %520
  %523 = icmp eq i32 %522, 2
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %78, align 1, !tbaa !2449
  %525 = icmp ne i8 %517, 0
  %526 = xor i1 %525, %523
  %.v = select i1 %526, i64 12, i64 240
  %527 = add i64 %490, %.v
  %528 = add i64 %491, -40
  %529 = add i64 %527, 7
  store i64 %529, i64* %PC, align 8
  %530 = inttoptr i64 %528 to i32*
  store i32 0, i32* %530, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br i1 %526, label %block_4017f2, label %block_4018d6

block_401977:                                     ; preds = %block_401907
  %531 = add i64 %913, 1
  store i64 %531, i64* %PC, align 8
  %532 = load i64, i64* %11, align 8, !tbaa !2428
  %533 = add i64 %532, 8
  %534 = inttoptr i64 %532 to i64*
  %535 = load i64, i64* %534, align 8
  store i64 %535, i64* %RBP, align 8, !tbaa !2428
  store i64 %533, i64* %11, align 8, !tbaa !2428
  %536 = add i64 %913, 2
  store i64 %536, i64* %PC, align 8
  %537 = inttoptr i64 %533 to i64*
  %538 = load i64, i64* %537, align 8
  store i64 %538, i64* %PC, align 8, !tbaa !2428
  %539 = add i64 %532, 16
  store i64 %539, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4018d6:                                     ; preds = %block_4017df, %block_4018e2
  %540 = phi i64 [ %489, %block_4018e2 ], [ %.pre10, %block_4017df ]
  %541 = load i64, i64* %RBP, align 8
  %542 = add i64 %541, -40
  %543 = add i64 %540, 3
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i32*
  %545 = load i32, i32* %544, align 4
  %546 = zext i32 %545 to i64
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = add i64 %541, -16
  %548 = add i64 %540, 6
  store i64 %548, i64* %PC, align 8
  %549 = inttoptr i64 %547 to i32*
  %550 = load i32, i32* %549, align 4
  %551 = sub i32 %545, %550
  %552 = icmp ult i32 %545, %550
  %553 = zext i1 %552 to i8
  store i8 %553, i8* %73, align 1, !tbaa !2432
  %554 = and i32 %551, 255
  %555 = tail call i32 @llvm.ctpop.i32(i32 %554) #8
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = xor i8 %557, 1
  store i8 %558, i8* %74, align 1, !tbaa !2446
  %559 = xor i32 %550, %545
  %560 = xor i32 %559, %551
  %561 = lshr i32 %560, 4
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  store i8 %563, i8* %75, align 1, !tbaa !2450
  %564 = icmp eq i32 %551, 0
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %76, align 1, !tbaa !2447
  %566 = lshr i32 %551, 31
  %567 = trunc i32 %566 to i8
  store i8 %567, i8* %77, align 1, !tbaa !2448
  %568 = lshr i32 %545, 31
  %569 = lshr i32 %550, 31
  %570 = xor i32 %569, %568
  %571 = xor i32 %566, %568
  %572 = add nuw nsw i32 %571, %570
  %573 = icmp eq i32 %572, 2
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %78, align 1, !tbaa !2449
  %575 = icmp ne i8 %567, 0
  %576 = xor i1 %575, %573
  %.v15 = select i1 %576, i64 12, i64 42
  %577 = add i64 %540, %.v15
  store i64 %577, i64* %PC, align 8, !tbaa !2428
  br i1 %576, label %block_4018e2, label %block_401900

block_4017f2:                                     ; preds = %block_4017df, %block_4018a1
  %578 = phi i64 [ %822, %block_4018a1 ], [ %.pre10, %block_4017df ]
  %MEMORY.2 = phi %struct.Memory* [ %339, %block_4018a1 ], [ %MEMORY.0, %block_4017df ]
  %579 = load i64, i64* %RBP, align 8
  %580 = add i64 %579, -40
  %581 = add i64 %578, 3
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i32*
  %583 = load i32, i32* %582, align 4
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = add i64 %579, -16
  %586 = add i64 %578, 6
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %585 to i32*
  %588 = load i32, i32* %587, align 4
  %589 = sub i32 %583, %588
  %590 = icmp ult i32 %583, %588
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %73, align 1, !tbaa !2432
  %592 = and i32 %589, 255
  %593 = tail call i32 @llvm.ctpop.i32(i32 %592) #8
  %594 = trunc i32 %593 to i8
  %595 = and i8 %594, 1
  %596 = xor i8 %595, 1
  store i8 %596, i8* %74, align 1, !tbaa !2446
  %597 = xor i32 %588, %583
  %598 = xor i32 %597, %589
  %599 = lshr i32 %598, 4
  %600 = trunc i32 %599 to i8
  %601 = and i8 %600, 1
  store i8 %601, i8* %75, align 1, !tbaa !2450
  %602 = icmp eq i32 %589, 0
  %603 = zext i1 %602 to i8
  store i8 %603, i8* %76, align 1, !tbaa !2447
  %604 = lshr i32 %589, 31
  %605 = trunc i32 %604 to i8
  store i8 %605, i8* %77, align 1, !tbaa !2448
  %606 = lshr i32 %583, 31
  %607 = lshr i32 %588, 31
  %608 = xor i32 %607, %606
  %609 = xor i32 %604, %606
  %610 = add nuw nsw i32 %609, %608
  %611 = icmp eq i32 %610, 2
  %612 = zext i1 %611 to i8
  store i8 %612, i8* %78, align 1, !tbaa !2449
  %613 = icmp ne i8 %605, 0
  %614 = xor i1 %613, %611
  %.v13 = select i1 %614, i64 12, i64 202
  %615 = add i64 %578, %.v13
  store i64 %615, i64* %PC, align 8, !tbaa !2428
  br i1 %614, label %block_4017fe, label %block_4018bc

block_4018bc:                                     ; preds = %block_4017f2
  %616 = add i64 %579, -44
  %617 = add i64 %615, 8
  store i64 %617, i64* %PC, align 8
  %618 = inttoptr i64 %616 to i32*
  %619 = load i32, i32* %618, align 4
  %620 = add i32 %619, 1
  %621 = zext i32 %620 to i64
  store i64 %621, i64* %RAX, align 8, !tbaa !2428
  %622 = icmp eq i32 %619, -1
  %623 = icmp eq i32 %620, 0
  %624 = or i1 %622, %623
  %625 = zext i1 %624 to i8
  store i8 %625, i8* %73, align 1, !tbaa !2432
  %626 = and i32 %620, 255
  %627 = tail call i32 @llvm.ctpop.i32(i32 %626) #8
  %628 = trunc i32 %627 to i8
  %629 = and i8 %628, 1
  %630 = xor i8 %629, 1
  store i8 %630, i8* %74, align 1, !tbaa !2446
  %631 = xor i32 %619, %620
  %632 = lshr i32 %631, 4
  %633 = trunc i32 %632 to i8
  %634 = and i8 %633, 1
  store i8 %634, i8* %75, align 1, !tbaa !2450
  %635 = zext i1 %623 to i8
  store i8 %635, i8* %76, align 1, !tbaa !2447
  %636 = lshr i32 %620, 31
  %637 = trunc i32 %636 to i8
  store i8 %637, i8* %77, align 1, !tbaa !2448
  %638 = lshr i32 %619, 31
  %639 = xor i32 %636, %638
  %640 = add nuw nsw i32 %639, %636
  %641 = icmp eq i32 %640, 2
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %78, align 1, !tbaa !2449
  %643 = add i64 %615, 14
  store i64 %643, i64* %PC, align 8
  store i32 %620, i32* %618, align 4
  %644 = load i64, i64* %PC, align 8
  %645 = add i64 %644, -235
  store i64 %645, i64* %PC, align 8, !tbaa !2428
  br label %block_4017df

block_401926:                                     ; preds = %block_40191a
  %646 = add i64 %824, -24
  %647 = add i64 %860, 4
  store i64 %647, i64* %PC, align 8
  %648 = inttoptr i64 %646 to i64*
  %649 = load i64, i64* %648, align 8
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = add i64 %860, 8
  store i64 %650, i64* %PC, align 8
  %651 = load i32, i32* %827, align 4
  %652 = sext i32 %651 to i64
  store i64 %652, i64* %RCX, align 8, !tbaa !2428
  %653 = shl nsw i64 %652, 2
  %654 = add i64 %653, %649
  %655 = add i64 %860, 13
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %654 to i32*
  %657 = load i32, i32* %656, align 4
  store i32 %657, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %658 = add i64 %824, -8
  %659 = add i64 %860, 17
  store i64 %659, i64* %PC, align 8
  %660 = inttoptr i64 %658 to i64*
  %661 = load i64, i64* %660, align 8
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %662 = add i64 %824, -12
  %663 = add i64 %860, 20
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to i32*
  %665 = load i32, i32* %664, align 4
  %666 = zext i32 %665 to i64
  store i64 %666, i64* %RDX, align 8, !tbaa !2428
  %667 = add i64 %824, -44
  %668 = add i64 %860, 24
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i32*
  %670 = load i32, i32* %669, align 4
  %671 = sext i32 %665 to i64
  %672 = sext i32 %670 to i64
  %673 = mul nsw i64 %672, %671
  %674 = trunc i64 %673 to i32
  %675 = and i64 %673, 4294967295
  store i64 %675, i64* %RDX, align 8, !tbaa !2428
  %676 = shl i64 %673, 32
  %677 = ashr exact i64 %676, 32
  %678 = icmp ne i64 %677, %673
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %73, align 1, !tbaa !2432
  %680 = and i32 %674, 255
  %681 = tail call i32 @llvm.ctpop.i32(i32 %680) #8
  %682 = trunc i32 %681 to i8
  %683 = and i8 %682, 1
  %684 = xor i8 %683, 1
  store i8 %684, i8* %74, align 1, !tbaa !2446
  store i8 0, i8* %75, align 1, !tbaa !2450
  store i8 0, i8* %76, align 1, !tbaa !2447
  %685 = lshr i32 %674, 31
  %686 = trunc i32 %685 to i8
  store i8 %686, i8* %77, align 1, !tbaa !2448
  store i8 %679, i8* %78, align 1, !tbaa !2449
  %687 = add i64 %860, 27
  store i64 %687, i64* %PC, align 8
  %688 = load i32, i32* %827, align 4
  %689 = add i32 %688, %674
  %690 = zext i32 %689 to i64
  store i64 %690, i64* %RDX, align 8, !tbaa !2428
  %691 = icmp ult i32 %689, %674
  %692 = icmp ult i32 %689, %688
  %693 = or i1 %691, %692
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %73, align 1, !tbaa !2432
  %695 = and i32 %689, 255
  %696 = tail call i32 @llvm.ctpop.i32(i32 %695) #8
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  store i8 %699, i8* %74, align 1, !tbaa !2446
  %700 = xor i32 %688, %674
  %701 = xor i32 %700, %689
  %702 = lshr i32 %701, 4
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  store i8 %704, i8* %75, align 1, !tbaa !2450
  %705 = icmp eq i32 %689, 0
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %76, align 1, !tbaa !2447
  %707 = lshr i32 %689, 31
  %708 = trunc i32 %707 to i8
  store i8 %708, i8* %77, align 1, !tbaa !2448
  %709 = lshr i32 %688, 31
  %710 = xor i32 %707, %685
  %711 = xor i32 %707, %709
  %712 = add nuw nsw i32 %710, %711
  %713 = icmp eq i32 %712, 2
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %78, align 1, !tbaa !2449
  %715 = sext i32 %689 to i64
  store i64 %715, i64* %RCX, align 8, !tbaa !2428
  %716 = shl nsw i64 %715, 2
  %717 = add i64 %716, %661
  %718 = add i64 %860, 35
  store i64 %718, i64* %PC, align 8
  %719 = load <2 x float>, <2 x float>* %64, align 1
  %720 = load <2 x i32>, <2 x i32>* %86, align 1
  %721 = inttoptr i64 %717 to float*
  %722 = load float, float* %721, align 4
  %723 = extractelement <2 x float> %719, i32 0
  %724 = fadd float %723, %722
  store float %724, float* %87, align 1, !tbaa !2452
  %725 = bitcast <2 x float> %719 to <2 x i32>
  %726 = extractelement <2 x i32> %725, i32 1
  store i32 %726, i32* %20, align 1, !tbaa !2452
  %727 = extractelement <2 x i32> %720, i32 0
  store i32 %727, i32* %21, align 1, !tbaa !2452
  %728 = extractelement <2 x i32> %720, i32 1
  store i32 %728, i32* %23, align 1, !tbaa !2452
  %729 = load i64, i64* %RBP, align 8
  %730 = add i64 %729, -24
  %731 = add i64 %860, 39
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %730 to i64*
  %733 = load i64, i64* %732, align 8
  store i64 %733, i64* %RAX, align 8, !tbaa !2428
  %734 = add i64 %729, -40
  %735 = add i64 %860, 43
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to i32*
  %737 = load i32, i32* %736, align 4
  %738 = sext i32 %737 to i64
  store i64 %738, i64* %RCX, align 8, !tbaa !2428
  %739 = shl nsw i64 %738, 2
  %740 = add i64 %739, %733
  %741 = add i64 %860, 48
  store i64 %741, i64* %PC, align 8
  %742 = load <2 x float>, <2 x float>* %64, align 1
  %743 = extractelement <2 x float> %742, i32 0
  %744 = inttoptr i64 %740 to float*
  store float %743, float* %744, align 4
  %745 = load i64, i64* %RBP, align 8
  %746 = add i64 %745, -40
  %747 = load i64, i64* %PC, align 8
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %746 to i32*
  %750 = load i32, i32* %749, align 4
  %751 = add i32 %750, 1
  %752 = zext i32 %751 to i64
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = icmp eq i32 %750, -1
  %754 = icmp eq i32 %751, 0
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  store i8 %756, i8* %73, align 1, !tbaa !2432
  %757 = and i32 %751, 255
  %758 = tail call i32 @llvm.ctpop.i32(i32 %757) #8
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  store i8 %761, i8* %74, align 1, !tbaa !2446
  %762 = xor i32 %750, %751
  %763 = lshr i32 %762, 4
  %764 = trunc i32 %763 to i8
  %765 = and i8 %764, 1
  store i8 %765, i8* %75, align 1, !tbaa !2450
  %766 = zext i1 %754 to i8
  store i8 %766, i8* %76, align 1, !tbaa !2447
  %767 = lshr i32 %751, 31
  %768 = trunc i32 %767 to i8
  store i8 %768, i8* %77, align 1, !tbaa !2448
  %769 = lshr i32 %750, 31
  %770 = xor i32 %767, %769
  %771 = add nuw nsw i32 %770, %767
  %772 = icmp eq i32 %771, 2
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %78, align 1, !tbaa !2449
  %774 = add i64 %747, 9
  store i64 %774, i64* %PC, align 8
  store i32 %751, i32* %749, align 4
  %775 = load i64, i64* %PC, align 8
  %776 = add i64 %775, -69
  store i64 %776, i64* %PC, align 8, !tbaa !2428
  br label %block_40191a

block_4018a1:                                     ; preds = %block_401894, %block_401874
  %777 = phi i64 [ %.pre9, %block_401894 ], [ %414, %block_401874 ]
  %778 = load i64, i64* %RBP, align 8
  %779 = add i64 %778, -52
  %780 = add i64 %777, 5
  store i64 %780, i64* %PC, align 8
  %781 = inttoptr i64 %779 to i32*
  %782 = load i32, i32* %781, align 4
  store i32 %782, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %783 = add i64 %778, -32
  %784 = add i64 %777, 9
  store i64 %784, i64* %PC, align 8
  %785 = inttoptr i64 %783 to i64*
  %786 = load i64, i64* %785, align 8
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = add i64 %777, 13
  store i64 %787, i64* %PC, align 8
  %788 = load <2 x float>, <2 x float>* %64, align 1
  %789 = extractelement <2 x float> %788, i32 0
  %790 = inttoptr i64 %786 to float*
  store float %789, float* %790, align 4
  %791 = load i64, i64* %RBP, align 8
  %792 = add i64 %791, -40
  %793 = load i64, i64* %PC, align 8
  %794 = add i64 %793, 3
  store i64 %794, i64* %PC, align 8
  %795 = inttoptr i64 %792 to i32*
  %796 = load i32, i32* %795, align 4
  %797 = add i32 %796, 1
  %798 = zext i32 %797 to i64
  store i64 %798, i64* %RAX, align 8, !tbaa !2428
  %799 = icmp eq i32 %796, -1
  %800 = icmp eq i32 %797, 0
  %801 = or i1 %799, %800
  %802 = zext i1 %801 to i8
  store i8 %802, i8* %73, align 1, !tbaa !2432
  %803 = and i32 %797, 255
  %804 = tail call i32 @llvm.ctpop.i32(i32 %803) #8
  %805 = trunc i32 %804 to i8
  %806 = and i8 %805, 1
  %807 = xor i8 %806, 1
  store i8 %807, i8* %74, align 1, !tbaa !2446
  %808 = xor i32 %796, %797
  %809 = lshr i32 %808, 4
  %810 = trunc i32 %809 to i8
  %811 = and i8 %810, 1
  store i8 %811, i8* %75, align 1, !tbaa !2450
  %812 = zext i1 %800 to i8
  store i8 %812, i8* %76, align 1, !tbaa !2447
  %813 = lshr i32 %797, 31
  %814 = trunc i32 %813 to i8
  store i8 %814, i8* %77, align 1, !tbaa !2448
  %815 = lshr i32 %796, 31
  %816 = xor i32 %813, %815
  %817 = add nuw nsw i32 %816, %813
  %818 = icmp eq i32 %817, 2
  %819 = zext i1 %818 to i8
  store i8 %819, i8* %78, align 1, !tbaa !2449
  %820 = add i64 %793, 9
  store i64 %820, i64* %PC, align 8
  store i32 %797, i32* %795, align 4
  %821 = load i64, i64* %PC, align 8
  %822 = add i64 %821, -197
  store i64 %822, i64* %PC, align 8, !tbaa !2428
  br label %block_4017f2

block_40191a:                                     ; preds = %block_401913, %block_401926
  %823 = phi i64 [ %.pre12, %block_401913 ], [ %776, %block_401926 ]
  %824 = load i64, i64* %RBP, align 8
  %825 = add i64 %824, -40
  %826 = add i64 %823, 3
  store i64 %826, i64* %PC, align 8
  %827 = inttoptr i64 %825 to i32*
  %828 = load i32, i32* %827, align 4
  %829 = zext i32 %828 to i64
  store i64 %829, i64* %RAX, align 8, !tbaa !2428
  %830 = add i64 %824, -16
  %831 = add i64 %823, 6
  store i64 %831, i64* %PC, align 8
  %832 = inttoptr i64 %830 to i32*
  %833 = load i32, i32* %832, align 4
  %834 = sub i32 %828, %833
  %835 = icmp ult i32 %828, %833
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %73, align 1, !tbaa !2432
  %837 = and i32 %834, 255
  %838 = tail call i32 @llvm.ctpop.i32(i32 %837) #8
  %839 = trunc i32 %838 to i8
  %840 = and i8 %839, 1
  %841 = xor i8 %840, 1
  store i8 %841, i8* %74, align 1, !tbaa !2446
  %842 = xor i32 %833, %828
  %843 = xor i32 %842, %834
  %844 = lshr i32 %843, 4
  %845 = trunc i32 %844 to i8
  %846 = and i8 %845, 1
  store i8 %846, i8* %75, align 1, !tbaa !2450
  %847 = icmp eq i32 %834, 0
  %848 = zext i1 %847 to i8
  store i8 %848, i8* %76, align 1, !tbaa !2447
  %849 = lshr i32 %834, 31
  %850 = trunc i32 %849 to i8
  store i8 %850, i8* %77, align 1, !tbaa !2448
  %851 = lshr i32 %828, 31
  %852 = lshr i32 %833, 31
  %853 = xor i32 %852, %851
  %854 = xor i32 %849, %851
  %855 = add nuw nsw i32 %854, %853
  %856 = icmp eq i32 %855, 2
  %857 = zext i1 %856 to i8
  store i8 %857, i8* %78, align 1, !tbaa !2449
  %858 = icmp ne i8 %850, 0
  %859 = xor i1 %858, %856
  %.v17 = select i1 %859, i64 12, i64 74
  %860 = add i64 %823, %.v17
  store i64 %860, i64* %PC, align 8, !tbaa !2428
  br i1 %859, label %block_401926, label %block_401964

block_401913:                                     ; preds = %block_401907
  %861 = add i64 %877, -40
  %862 = add i64 %913, 7
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i32*
  store i32 0, i32* %863, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_40191a

block_401894:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %864 = add i64 %335, -32
  %865 = add i64 %342, 4
  store i64 %865, i64* %PC, align 8
  %866 = inttoptr i64 %864 to i64*
  %867 = load i64, i64* %866, align 8
  store i64 %867, i64* %RAX, align 8, !tbaa !2428
  %868 = add i64 %342, 8
  store i64 %868, i64* %PC, align 8
  %869 = inttoptr i64 %867 to i32*
  %870 = load i32, i32* %869, align 4
  store i32 %870, i32* %18, align 1, !tbaa !2452
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  store float 0.000000e+00, float* %89, align 1, !tbaa !2452
  store float 0.000000e+00, float* %90, align 1, !tbaa !2452
  %871 = add i64 %335, -52
  %872 = add i64 %342, 13
  store i64 %872, i64* %PC, align 8
  %873 = load <2 x float>, <2 x float>* %64, align 1
  %874 = extractelement <2 x float> %873, i32 0
  %875 = inttoptr i64 %871 to float*
  store float %874, float* %875, align 4
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_4018a1

block_401907:                                     ; preds = %block_401900, %block_401964
  %876 = phi i64 [ %.pre11, %block_401900 ], [ %444, %block_401964 ]
  %877 = load i64, i64* %RBP, align 8
  %878 = add i64 %877, -44
  %879 = add i64 %876, 3
  store i64 %879, i64* %PC, align 8
  %880 = inttoptr i64 %878 to i32*
  %881 = load i32, i32* %880, align 4
  %882 = zext i32 %881 to i64
  store i64 %882, i64* %RAX, align 8, !tbaa !2428
  %883 = add i64 %877, -16
  %884 = add i64 %876, 6
  store i64 %884, i64* %PC, align 8
  %885 = inttoptr i64 %883 to i32*
  %886 = load i32, i32* %885, align 4
  %887 = sub i32 %881, %886
  %888 = icmp ult i32 %881, %886
  %889 = zext i1 %888 to i8
  store i8 %889, i8* %73, align 1, !tbaa !2432
  %890 = and i32 %887, 255
  %891 = tail call i32 @llvm.ctpop.i32(i32 %890) #8
  %892 = trunc i32 %891 to i8
  %893 = and i8 %892, 1
  %894 = xor i8 %893, 1
  store i8 %894, i8* %74, align 1, !tbaa !2446
  %895 = xor i32 %886, %881
  %896 = xor i32 %895, %887
  %897 = lshr i32 %896, 4
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  store i8 %899, i8* %75, align 1, !tbaa !2450
  %900 = icmp eq i32 %887, 0
  %901 = zext i1 %900 to i8
  store i8 %901, i8* %76, align 1, !tbaa !2447
  %902 = lshr i32 %887, 31
  %903 = trunc i32 %902 to i8
  store i8 %903, i8* %77, align 1, !tbaa !2448
  %904 = lshr i32 %881, 31
  %905 = lshr i32 %886, 31
  %906 = xor i32 %905, %904
  %907 = xor i32 %902, %904
  %908 = add nuw nsw i32 %907, %906
  %909 = icmp eq i32 %908, 2
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %78, align 1, !tbaa !2449
  %911 = icmp ne i8 %903, 0
  %912 = xor i1 %911, %909
  %.v16 = select i1 %912, i64 12, i64 112
  %913 = add i64 %876, %.v16
  store i64 %913, i64* %PC, align 8, !tbaa !2428
  br i1 %912, label %block_401913, label %block_401977

block_401900:                                     ; preds = %block_4018d6
  %914 = add i64 %541, -44
  %915 = add i64 %577, 7
  store i64 %915, i64* %PC, align 8
  %916 = inttoptr i64 %914 to i32*
  store i32 0, i32* %916, align 4
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_401907
}

; Function Attrs: noinline
define %struct.Memory* @sub_402810_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402810:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = bitcast %union.VectorReg* %4 to i8*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast %union.VectorReg* %4 to i32*
  store i32 0, i32* %15, align 1, !tbaa !2451
  %16 = getelementptr inbounds i8, i8* %13, i64 4
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 1, !tbaa !2451
  %18 = bitcast i64* %14 to i32*
  store i32 0, i32* %18, align 1, !tbaa !2451
  %19 = getelementptr inbounds i8, i8* %13, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = bitcast %union.VectorReg* %5 to i8*
  %22 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 16) to i32*), align 16
  %23 = bitcast %union.VectorReg* %5 to i32*
  store i32 %22, i32* %23, align 1, !tbaa !2452
  %24 = getelementptr inbounds i8, i8* %21, i64 4
  %25 = bitcast i8* %24 to float*
  store float 0.000000e+00, float* %25, align 1, !tbaa !2452
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %27 = bitcast i64* %26 to float*
  store float 0.000000e+00, float* %27, align 1, !tbaa !2452
  %28 = getelementptr inbounds i8, i8* %21, i64 12
  %29 = bitcast i8* %28 to float*
  store float 0.000000e+00, float* %29, align 1, !tbaa !2452
  %30 = add i64 %9, -12
  %31 = add i64 %12, 19
  store i64 %31, i64* %PC, align 8
  %32 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 1
  %34 = extractelement <2 x float> %33, i32 0
  %35 = inttoptr i64 %30 to float*
  store float %34, float* %35, align 4
  %36 = load i64, i64* %RBP, align 8
  %37 = add i64 %36, -8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 5
  store i64 %39, i64* %PC, align 8
  %40 = bitcast %union.VectorReg* %5 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 1
  %42 = extractelement <2 x float> %41, i32 0
  %43 = inttoptr i64 %37 to float*
  store float %42, float* %43, align 4
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -20
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 5
  store i64 %47, i64* %PC, align 8
  %48 = bitcast %union.VectorReg* %4 to <2 x float>*
  %49 = load <2 x float>, <2 x float>* %48, align 1
  %50 = extractelement <2 x float> %49, i32 0
  %51 = inttoptr i64 %45 to float*
  store float %50, float* %51, align 4
  %52 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %54 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = bitcast [32 x %union.VectorReg]* %3 to i32*
  %56 = getelementptr inbounds i8, i8* %52, i64 4
  %57 = bitcast i8* %56 to i32*
  %58 = bitcast i64* %53 to i32*
  %59 = getelementptr inbounds i8, i8* %52, i64 12
  %60 = bitcast i8* %59 to i32*
  %61 = bitcast %union.VectorReg* %4 to float*
  %62 = bitcast i8* %16 to float*
  %63 = bitcast i64* %14 to float*
  %64 = bitcast i8* %19 to float*
  %65 = bitcast %union.VectorReg* %4 to double*
  %66 = bitcast [32 x %union.VectorReg]* %3 to double*
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %69 = bitcast i64* %53 to double*
  %70 = bitcast i64* %14 to <2 x i32>*
  %71 = bitcast [32 x %union.VectorReg]* %3 to float*
  %72 = bitcast i8* %56 to float*
  %73 = bitcast i64* %53 to float*
  %74 = bitcast i8* %59 to float*
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre = load i64, i64* %PC, align 8
  br label %block_40282e

block_40282e:                                     ; preds = %block_40284a, %block_402810
  %79 = phi i64 [ %.pre, %block_402810 ], [ %210, %block_40284a ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402810 ], [ %113, %block_40284a ]
  store i32 0, i32* %55, align 1, !tbaa !2451
  store i32 0, i32* %57, align 1, !tbaa !2451
  store i32 0, i32* %58, align 1, !tbaa !2451
  store i32 0, i32* %60, align 1, !tbaa !2451
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -20
  %82 = add i64 %79, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i32*
  %84 = load i32, i32* %83, align 4
  store i32 %84, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %85 = load <2 x float>, <2 x float>* %48, align 1
  %86 = extractelement <2 x float> %85, i32 0
  %87 = fpext float %86 to double
  store double %87, double* %65, align 1, !tbaa !2454
  %88 = add i64 %79, 16
  store i64 %88, i64* %PC, align 8
  %89 = load double, double* %66, align 1
  %90 = fcmp uno double %87, %89
  br i1 %90, label %91, label %101

; <label>:91:                                     ; preds = %block_40282e
  %92 = fadd double %87, %89
  %93 = bitcast double %92 to i64
  %94 = and i64 %93, 9221120237041090560
  %95 = icmp eq i64 %94, 9218868437227405312
  %96 = and i64 %93, 2251799813685247
  %97 = icmp ne i64 %96, 0
  %98 = and i1 %95, %97
  br i1 %98, label %99, label %107

; <label>:99:                                     ; preds = %91
  %100 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %88, %struct.Memory* %MEMORY.0) #9
  %.pre1 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:101:                                    ; preds = %block_40282e
  %102 = fcmp ogt double %87, %89
  br i1 %102, label %107, label %103

; <label>:103:                                    ; preds = %101
  %104 = fcmp olt double %87, %89
  br i1 %104, label %107, label %105

; <label>:105:                                    ; preds = %103
  %106 = fcmp oeq double %87, %89
  br i1 %106, label %107, label %111

; <label>:107:                                    ; preds = %105, %103, %101, %91
  %108 = phi i8 [ 0, %101 ], [ 0, %103 ], [ 1, %105 ], [ 1, %91 ]
  %109 = phi i8 [ 0, %101 ], [ 0, %103 ], [ 0, %105 ], [ 1, %91 ]
  %110 = phi i8 [ 0, %101 ], [ 1, %103 ], [ 0, %105 ], [ 1, %91 ]
  store i8 %108, i8* %67, align 1, !tbaa !2456
  store i8 %109, i8* %68, align 1, !tbaa !2456
  store i8 %110, i8* %75, align 1, !tbaa !2456
  br label %111

; <label>:111:                                    ; preds = %107, %105
  store i8 0, i8* %76, align 1, !tbaa !2456
  store i8 0, i8* %77, align 1, !tbaa !2456
  store i8 0, i8* %78, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %111, %99
  %112 = phi i64 [ %.pre1, %99 ], [ %88, %111 ]
  %113 = phi %struct.Memory* [ %100, %99 ], [ %MEMORY.0, %111 ]
  %114 = load i8, i8* %67, align 1, !tbaa !2447
  %115 = icmp eq i8 %114, 0
  %.v = select i1 %115, i64 100, i64 6
  %116 = add i64 %112, %.v
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br i1 %115, label %block_4028a2, label %block_402844

block_40284a:                                     ; preds = %block_402844
  %117 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 80) to double*), align 16
  store double %117, double* %66, align 1, !tbaa !2454
  store double 0.000000e+00, double* %69, align 1, !tbaa !2454
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -8
  %120 = add i64 %213, 13
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i32*
  %122 = load i32, i32* %121, align 4
  store i32 %122, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %123 = load <2 x float>, <2 x float>* %48, align 1
  %124 = extractelement <2 x float> %123, i32 0
  %125 = fpext float %124 to double
  %126 = load <2 x i32>, <2 x i32>* %70, align 1
  %127 = fsub double %125, %117
  %128 = bitcast double %127 to <2 x i32>
  %129 = fptrunc double %127 to float
  store float %129, float* %61, align 1, !tbaa !2452
  %130 = extractelement <2 x i32> %128, i32 1
  store i32 %130, i32* %17, align 1, !tbaa !2452
  %131 = extractelement <2 x i32> %126, i32 0
  store i32 %131, i32* %18, align 1, !tbaa !2452
  %132 = extractelement <2 x i32> %126, i32 1
  store i32 %132, i32* %20, align 1, !tbaa !2452
  %133 = add i64 %118, -12
  %134 = add i64 %213, 30
  store i64 %134, i64* %PC, align 8
  %135 = load <2 x float>, <2 x float>* %48, align 1
  %136 = extractelement <2 x float> %135, i32 0
  %137 = inttoptr i64 %133 to float*
  store float %136, float* %137, align 4
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -12
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, 5
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %139 to float*
  %143 = inttoptr i64 %139 to i32*
  %144 = load i32, i32* %143, align 4
  store i32 %144, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %145 = add i64 %140, 10
  store i64 %145, i64* %PC, align 8
  %146 = load <2 x float>, <2 x float>* %48, align 1
  %147 = load <2 x i32>, <2 x i32>* %70, align 1
  %148 = load float, float* %142, align 4
  %149 = extractelement <2 x float> %146, i32 0
  %150 = fadd float %149, %148
  store float %150, float* %61, align 1, !tbaa !2452
  %151 = bitcast <2 x float> %146 to <2 x i32>
  %152 = extractelement <2 x i32> %151, i32 1
  store i32 %152, i32* %17, align 1, !tbaa !2452
  %153 = extractelement <2 x i32> %147, i32 0
  store i32 %153, i32* %18, align 1, !tbaa !2452
  %154 = extractelement <2 x i32> %147, i32 1
  store i32 %154, i32* %20, align 1, !tbaa !2452
  %155 = add i64 %140, 15
  store i64 %155, i64* %PC, align 8
  %156 = load <2 x float>, <2 x float>* %48, align 1
  %157 = load <2 x i32>, <2 x i32>* %70, align 1
  %158 = load float, float* %142, align 4
  %159 = extractelement <2 x float> %156, i32 0
  %160 = fadd float %159, %158
  store float %160, float* %61, align 1, !tbaa !2452
  %161 = bitcast <2 x float> %156 to <2 x i32>
  %162 = extractelement <2 x i32> %161, i32 1
  store i32 %162, i32* %17, align 1, !tbaa !2452
  %163 = extractelement <2 x i32> %157, i32 0
  store i32 %163, i32* %18, align 1, !tbaa !2452
  %164 = extractelement <2 x i32> %157, i32 1
  store i32 %164, i32* %20, align 1, !tbaa !2452
  %165 = add i64 %138, -16
  %166 = add i64 %140, 20
  store i64 %166, i64* %PC, align 8
  %167 = load <2 x float>, <2 x float>* %48, align 1
  %168 = extractelement <2 x float> %167, i32 0
  %169 = inttoptr i64 %165 to float*
  store float %168, float* %169, align 4
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -16
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, 5
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %171 to i32*
  %175 = load i32, i32* %174, align 4
  store i32 %175, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %176 = load <2 x float>, <2 x float>* %48, align 1
  %177 = extractelement <2 x float> %176, i32 0
  %178 = fpext float %177 to double
  %179 = load i64, i64* %14, align 1
  %180 = load double, double* %66, align 1
  %181 = fsub double %178, %180
  %182 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %183 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %184 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %185 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %182, i32* %55, align 1, !tbaa !2452
  store i32 %183, i32* %57, align 1, !tbaa !2452
  store i32 %184, i32* %58, align 1, !tbaa !2452
  store i32 %185, i32* %60, align 1, !tbaa !2452
  %186 = bitcast double %181 to i64
  %187 = load i64, i64* %54, align 1
  %188 = load i64, i64* %53, align 1
  %189 = and i64 %187, %186
  %190 = and i64 %188, %179
  %191 = trunc i64 %189 to i32
  %192 = lshr i64 %189, 32
  %193 = trunc i64 %192 to i32
  store i32 %191, i32* %15, align 1, !tbaa !2451
  store i32 %193, i32* %17, align 1, !tbaa !2451
  %194 = trunc i64 %190 to i32
  store i32 %194, i32* %18, align 1, !tbaa !2451
  %195 = lshr i64 %190, 32
  %196 = trunc i64 %195 to i32
  store i32 %196, i32* %20, align 1, !tbaa !2451
  %197 = bitcast i64 %187 to <2 x i32>
  %198 = bitcast i64 %188 to <2 x i32>
  %199 = load double, double* %65, align 1
  %200 = fptrunc double %199 to float
  store float %200, float* %71, align 1, !tbaa !2452
  %201 = extractelement <2 x i32> %197, i32 1
  store i32 %201, i32* %57, align 1, !tbaa !2452
  %202 = extractelement <2 x i32> %198, i32 0
  store i32 %202, i32* %58, align 1, !tbaa !2452
  %203 = extractelement <2 x i32> %198, i32 1
  store i32 %203, i32* %60, align 1, !tbaa !2452
  %204 = add i64 %170, -20
  %205 = add i64 %172, 33
  store i64 %205, i64* %PC, align 8
  %206 = load <2 x float>, <2 x float>* %32, align 1
  %207 = extractelement <2 x float> %206, i32 0
  %208 = inttoptr i64 %204 to float*
  store float %207, float* %208, align 4
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, -111
  store i64 %210, i64* %PC, align 8, !tbaa !2428
  br label %block_40282e

block_402844:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %211 = load i8, i8* %68, align 1, !tbaa !2446
  %212 = icmp ne i8 %211, 0
  %.v2 = select i1 %212, i64 94, i64 6
  %213 = add i64 %116, %.v2
  store i64 %213, i64* %PC, align 8, !tbaa !2428
  %214 = icmp eq i8 %211, 1
  br i1 %214, label %block_4028a2, label %block_40284a

block_4028a2:                                     ; preds = %block_402844, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %215 = phi i64 [ %213, %block_402844 ], [ %116, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -20
  %218 = add i64 %215, 5
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i32*
  %220 = load i32, i32* %219, align 4
  store i32 %220, i32* %55, align 1, !tbaa !2452
  store float 0.000000e+00, float* %72, align 1, !tbaa !2452
  store float 0.000000e+00, float* %73, align 1, !tbaa !2452
  store float 0.000000e+00, float* %74, align 1, !tbaa !2452
  %221 = load <2 x float>, <2 x float>* %32, align 1
  %222 = extractelement <2 x float> %221, i32 0
  %223 = fpext float %222 to double
  store double %223, double* %66, align 1, !tbaa !2454
  %224 = add i64 %216, -4
  %225 = add i64 %215, 14
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %224 to i32*
  %227 = load i32, i32* %226, align 4
  store i32 %227, i32* %15, align 1, !tbaa !2452
  store float 0.000000e+00, float* %62, align 1, !tbaa !2452
  store float 0.000000e+00, float* %63, align 1, !tbaa !2452
  store float 0.000000e+00, float* %64, align 1, !tbaa !2452
  %228 = load <2 x float>, <2 x float>* %48, align 1
  %229 = extractelement <2 x float> %228, i32 0
  %230 = fpext float %229 to double
  %231 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 96) to i32*), align 16
  %232 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 100) to i32*), align 4
  %233 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 104) to i32*), align 8
  %234 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402ec0__rodata_type* @seg_402ec0__rodata to i64), i64 108) to i32*), align 4
  store i32 %231, i32* %23, align 1, !tbaa !2452
  %235 = bitcast i8* %24 to i32*
  store i32 %232, i32* %235, align 1, !tbaa !2452
  %236 = bitcast i64* %26 to i32*
  store i32 %233, i32* %236, align 1, !tbaa !2452
  %237 = bitcast i8* %28 to i32*
  store i32 %234, i32* %237, align 1, !tbaa !2452
  %238 = bitcast double %230 to i64
  %239 = load i64, i64* %14, align 1
  %240 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  %241 = load i64, i64* %240, align 1
  %242 = load i64, i64* %26, align 1
  %243 = and i64 %241, %238
  %244 = and i64 %242, %239
  %245 = trunc i64 %243 to i32
  %246 = lshr i64 %243, 32
  %247 = trunc i64 %246 to i32
  store i32 %245, i32* %15, align 1, !tbaa !2451
  store i32 %247, i32* %17, align 1, !tbaa !2451
  %248 = trunc i64 %244 to i32
  store i32 %248, i32* %18, align 1, !tbaa !2451
  %249 = lshr i64 %244, 32
  %250 = trunc i64 %249 to i32
  store i32 %250, i32* %20, align 1, !tbaa !2451
  %251 = bitcast i64* %53 to <2 x i32>*
  %252 = load <2 x i32>, <2 x i32>* %251, align 1
  %253 = load double, double* %65, align 1
  %254 = fmul double %223, %253
  %255 = bitcast double %254 to <2 x i32>
  %256 = fptrunc double %254 to float
  store float %256, float* %71, align 1, !tbaa !2452
  %257 = extractelement <2 x i32> %255, i32 1
  store i32 %257, i32* %57, align 1, !tbaa !2452
  %258 = extractelement <2 x i32> %252, i32 0
  store i32 %258, i32* %58, align 1, !tbaa !2452
  %259 = extractelement <2 x i32> %252, i32 1
  store i32 %259, i32* %60, align 1, !tbaa !2452
  %260 = add i64 %215, 38
  store i64 %260, i64* %PC, align 8
  %261 = load i64, i64* %8, align 8, !tbaa !2428
  %262 = add i64 %261, 8
  %263 = inttoptr i64 %261 to i64*
  %264 = load i64, i64* %263, align 8
  store i64 %264, i64* %RBP, align 8, !tbaa !2428
  store i64 %262, i64* %8, align 8, !tbaa !2428
  %265 = add i64 %215, 39
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %262 to i64*
  %267 = load i64, i64* %266, align 8
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %268 = add i64 %261, 16
  store i64 %268, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %113
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a50_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402a50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %17 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 0, i32* %17, align 1, !tbaa !2451
  %18 = getelementptr inbounds i8, i8* %15, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 0, i32* %19, align 1, !tbaa !2451
  %20 = bitcast i64* %16 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2451
  %21 = getelementptr inbounds i8, i8* %15, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 0, i32* %22, align 1, !tbaa !2451
  %23 = add i64 %11, -16
  %24 = load i32, i32* %EDI, align 4
  %25 = add i64 %14, 9
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %23 to i32*
  store i32 %24, i32* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -60
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -56
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -40
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 5
  store i64 %64, i64* %PC, align 8
  %65 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 1
  %67 = extractelement <2 x float> %66, i32 0
  %68 = inttoptr i64 %62 to float*
  store float %67, float* %68, align 4
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 4
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %75, align 1, !tbaa !2432
  %76 = and i32 %74, 255
  %77 = tail call i32 @llvm.ctpop.i32(i32 %76) #8
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %80, i8* %81, align 1, !tbaa !2446
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %82, align 1, !tbaa !2450
  %83 = icmp eq i32 %74, 0
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = lshr i32 %74, 31
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %89, align 1, !tbaa !2449
  %90 = xor i1 %83, true
  %91 = icmp eq i8 %87, 0
  %92 = and i1 %91, %90
  %.v = select i1 %92, i64 23, i64 10
  %93 = add i64 %71, %.v
  store i64 %93, i64* %PC, align 8, !tbaa !2428
  br i1 %92, label %block_402a93, label %block_402a86

block_402b9a:                                     ; preds = %block_402b58
  %94 = add i64 %100, -4
  %95 = add i64 %136, 10
  store i64 %95, i64* %PC, align 8
  %96 = load <2 x float>, <2 x float>* %65, align 1
  %97 = extractelement <2 x float> %96, i32 0
  %98 = inttoptr i64 %94 to float*
  store float %97, float* %98, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_402ba4

block_402b58:                                     ; preds = %block_402b64, %block_402b51
  %99 = phi i64 [ %684, %block_402b64 ], [ %.pre, %block_402b51 ]
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -44
  %102 = add i64 %99, 3
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = add i64 %100, -8
  %107 = add i64 %99, 6
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = sub i32 %104, %109
  %111 = icmp ult i32 %104, %109
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %75, align 1, !tbaa !2432
  %113 = and i32 %110, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #8
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %81, align 1, !tbaa !2446
  %118 = xor i32 %109, %104
  %119 = xor i32 %118, %110
  %120 = lshr i32 %119, 4
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %82, align 1, !tbaa !2450
  %123 = icmp eq i32 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %85, align 1, !tbaa !2447
  %125 = lshr i32 %110, 31
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %88, align 1, !tbaa !2448
  %127 = lshr i32 %104, 31
  %128 = lshr i32 %109, 31
  %129 = xor i32 %128, %127
  %130 = xor i32 %125, %127
  %131 = add nuw nsw i32 %130, %129
  %132 = icmp eq i32 %131, 2
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %89, align 1, !tbaa !2449
  %134 = icmp ne i8 %126, 0
  %135 = xor i1 %134, %132
  %.v20 = select i1 %135, i64 12, i64 66
  %136 = add i64 %99, %.v20
  %137 = add i64 %100, -40
  %138 = add i64 %136, 5
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  store i32 %140, i32* %17, align 1, !tbaa !2452
  store float 0.000000e+00, float* %589, align 1, !tbaa !2452
  store float 0.000000e+00, float* %590, align 1, !tbaa !2452
  store float 0.000000e+00, float* %591, align 1, !tbaa !2452
  br i1 %135, label %block_402b64, label %block_402b9a

block_402ba4:                                     ; preds = %block_402b42, %block_402a86, %block_402b9a
  %.pre-phi14 = phi float* [ %487, %block_402b42 ], [ %.pre13, %block_402a86 ], [ %591, %block_402b9a ]
  %.pre-phi12 = phi float* [ %486, %block_402b42 ], [ %.pre11, %block_402a86 ], [ %590, %block_402b9a ]
  %.pre-phi10 = phi float* [ %485, %block_402b42 ], [ %.pre9, %block_402a86 ], [ %589, %block_402b9a ]
  %.pre-phi = phi float* [ %484, %block_402b42 ], [ %.pre8, %block_402a86 ], [ %588, %block_402b9a ]
  %141 = phi i64 [ %691, %block_402b42 ], [ %558, %block_402a86 ], [ %.pre7, %block_402b9a ]
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -4
  %144 = add i64 %141, 5
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = bitcast float* %.pre-phi to i32*
  store i32 %146, i32* %147, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi10, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi12, align 1, !tbaa !2452
  store float 0.000000e+00, float* %.pre-phi14, align 1, !tbaa !2452
  %148 = add i64 %141, 6
  store i64 %148, i64* %PC, align 8
  %149 = load i64, i64* %10, align 8, !tbaa !2428
  %150 = add i64 %149, 8
  %151 = inttoptr i64 %149 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %RBP, align 8, !tbaa !2428
  store i64 %150, i64* %10, align 8, !tbaa !2428
  %153 = add i64 %141, 7
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %150 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  %156 = add i64 %149, 16
  store i64 %156, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402ad8:                                     ; preds = %block_402ace
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %75, align 1, !tbaa !2432
  store i8 1, i8* %81, align 1, !tbaa !2446
  store i8 1, i8* %85, align 1, !tbaa !2447
  store i8 0, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %82, align 1, !tbaa !2450
  %157 = add i64 %276, -8
  %158 = add i64 %291, 5
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i32*
  %160 = load i32, i32* %159, align 4
  %161 = sub i32 0, %160
  %162 = lshr i32 %161, 31
  %163 = sub i32 1, %160
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = icmp ult i32 %163, %161
  %166 = icmp eq i32 %163, 0
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %75, align 1, !tbaa !2432
  %169 = and i32 %163, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #8
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %81, align 1, !tbaa !2446
  %174 = xor i32 %163, %161
  %175 = lshr i32 %174, 4
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  store i8 %177, i8* %82, align 1, !tbaa !2450
  %178 = zext i1 %166 to i8
  store i8 %178, i8* %85, align 1, !tbaa !2447
  %179 = lshr i32 %163, 31
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %88, align 1, !tbaa !2448
  %181 = xor i32 %179, %162
  %182 = add nuw nsw i32 %181, %179
  %183 = icmp eq i32 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %89, align 1, !tbaa !2449
  %185 = add i64 %291, 12
  store i64 %185, i64* %PC, align 8
  %186 = load i32, i32* %279, align 4
  %187 = sext i32 %163 to i64
  %188 = sext i32 %186 to i64
  %189 = mul nsw i64 %188, %187
  %190 = trunc i64 %189 to i32
  %191 = and i64 %189, 4294967295
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = shl i64 %189, 32
  %193 = ashr exact i64 %192, 32
  %194 = icmp ne i64 %193, %189
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %75, align 1, !tbaa !2432
  %196 = and i32 %190, 255
  %197 = tail call i32 @llvm.ctpop.i32(i32 %196) #8
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  store i8 %200, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  store i8 0, i8* %85, align 1, !tbaa !2447
  %201 = lshr i32 %190, 31
  %202 = trunc i32 %201 to i8
  store i8 %202, i8* %88, align 1, !tbaa !2448
  store i8 %195, i8* %89, align 1, !tbaa !2449
  %203 = load i64, i64* %RBP, align 8
  %204 = add i64 %203, -52
  %205 = add i64 %291, 15
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i32*
  store i32 %190, i32* %206, align 4
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_402ae7

block_402aee:                                     ; preds = %block_402ae7, %block_402afa
  %207 = phi i64 [ %.pre6, %block_402ae7 ], [ %478, %block_402afa ]
  %208 = load i64, i64* %RBP, align 8
  %209 = add i64 %208, -44
  %210 = add i64 %207, 3
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %209 to i32*
  %212 = load i32, i32* %211, align 4
  %213 = zext i32 %212 to i64
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = add i64 %208, -8
  %215 = add i64 %207, 6
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i32*
  %217 = load i32, i32* %216, align 4
  %218 = sub i32 %212, %217
  %219 = icmp ult i32 %212, %217
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %75, align 1, !tbaa !2432
  %221 = and i32 %218, 255
  %222 = tail call i32 @llvm.ctpop.i32(i32 %221) #8
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  store i8 %225, i8* %81, align 1, !tbaa !2446
  %226 = xor i32 %217, %212
  %227 = xor i32 %226, %218
  %228 = lshr i32 %227, 4
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  store i8 %230, i8* %82, align 1, !tbaa !2450
  %231 = icmp eq i32 %218, 0
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %85, align 1, !tbaa !2447
  %233 = lshr i32 %218, 31
  %234 = trunc i32 %233 to i8
  store i8 %234, i8* %88, align 1, !tbaa !2448
  %235 = lshr i32 %212, 31
  %236 = lshr i32 %217, 31
  %237 = xor i32 %236, %235
  %238 = xor i32 %233, %235
  %239 = add nuw nsw i32 %238, %237
  %240 = icmp eq i32 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %89, align 1, !tbaa !2449
  %242 = icmp ne i8 %234, 0
  %243 = xor i1 %242, %240
  %.v19 = select i1 %243, i64 12, i64 84
  %244 = add i64 %207, %.v19
  %245 = add i64 %208, -40
  %246 = add i64 %244, 5
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %245 to i32*
  %248 = load i32, i32* %247, align 4
  store i32 %248, i32* %17, align 1, !tbaa !2452
  store float 0.000000e+00, float* %485, align 1, !tbaa !2452
  store float 0.000000e+00, float* %486, align 1, !tbaa !2452
  store float 0.000000e+00, float* %487, align 1, !tbaa !2452
  br i1 %243, label %block_402afa, label %block_402b42

block_402a9d:                                     ; preds = %block_402a93
  %249 = add i64 %69, -36
  %250 = add i64 %584, 4
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = add i32 %252, -1
  %254 = icmp eq i32 %252, 0
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %75, align 1, !tbaa !2432
  %256 = and i32 %253, 255
  %257 = tail call i32 @llvm.ctpop.i32(i32 %256) #8
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  store i8 %260, i8* %81, align 1, !tbaa !2446
  %261 = xor i32 %252, %253
  %262 = lshr i32 %261, 4
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  store i8 %264, i8* %82, align 1, !tbaa !2450
  %265 = icmp eq i32 %253, 0
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %85, align 1, !tbaa !2447
  %267 = lshr i32 %253, 31
  %268 = trunc i32 %267 to i8
  store i8 %268, i8* %88, align 1, !tbaa !2448
  %269 = lshr i32 %252, 31
  %270 = xor i32 %267, %269
  %271 = add nuw nsw i32 %270, %269
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %89, align 1, !tbaa !2449
  %.v16 = select i1 %265, i64 180, i64 10
  %274 = add i64 %584, %.v16
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  br i1 %265, label %block_402b51, label %block_402aa7

block_402ace:                                     ; preds = %block_402aa7, %block_402abf
  %275 = phi i64 [ %.pre3, %block_402abf ], [ %317, %block_402aa7 ]
  %276 = phi i64 [ %.pre2, %block_402abf ], [ %301, %block_402aa7 ]
  %277 = add i64 %276, -36
  %278 = add i64 %275, 4
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i32*
  %280 = load i32, i32* %279, align 4
  store i8 0, i8* %75, align 1, !tbaa !2432
  %281 = and i32 %280, 255
  %282 = tail call i32 @llvm.ctpop.i32(i32 %281) #8
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  store i8 %285, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  %286 = icmp eq i32 %280, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %85, align 1, !tbaa !2447
  %288 = lshr i32 %280, 31
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  %290 = icmp ne i8 %289, 0
  %.v18 = select i1 %290, i64 10, i64 25
  %291 = add i64 %275, %.v18
  store i64 %291, i64* %PC, align 8, !tbaa !2428
  br i1 %290, label %block_402ad8, label %block_402ae7

block_402aa7:                                     ; preds = %block_402a93, %block_402a9d
  %292 = phi i64 [ %584, %block_402a93 ], [ %274, %block_402a9d ]
  %293 = add i64 %69, -48
  %294 = add i64 %292, 7
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i32*
  store i32 0, i32* %295, align 4
  %296 = load i64, i64* %RBP, align 8
  %297 = add i64 %296, -52
  %298 = load i64, i64* %PC, align 8
  %299 = add i64 %298, 7
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %297 to i32*
  store i32 0, i32* %300, align 4
  %301 = load i64, i64* %RBP, align 8
  %302 = add i64 %301, -20
  %303 = load i64, i64* %PC, align 8
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %302 to i32*
  %306 = load i32, i32* %305, align 4
  store i8 0, i8* %75, align 1, !tbaa !2432
  %307 = and i32 %306, 255
  %308 = tail call i32 @llvm.ctpop.i32(i32 %307) #8
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  store i8 %311, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  %312 = icmp eq i32 %306, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %85, align 1, !tbaa !2447
  %314 = lshr i32 %306, 31
  %315 = trunc i32 %314 to i8
  store i8 %315, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  %316 = icmp ne i8 %315, 0
  %.v17 = select i1 %316, i64 10, i64 25
  %317 = add i64 %303, %.v17
  store i64 %317, i64* %PC, align 8, !tbaa !2428
  br i1 %316, label %block_402abf, label %block_402ace

block_402afa:                                     ; preds = %block_402aee
  %318 = inttoptr i64 %245 to float*
  %319 = add i64 %208, -16
  %320 = add i64 %244, 9
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = add i64 %208, -48
  %324 = add i64 %244, 13
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i32*
  %326 = load i32, i32* %325, align 4
  %327 = sext i32 %326 to i64
  store i64 %327, i64* %RCX, align 8, !tbaa !2428
  %328 = shl nsw i64 %327, 2
  %329 = add i64 %328, %322
  %330 = add i64 %244, 18
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i32*
  %332 = load i32, i32* %331, align 4
  %333 = bitcast %union.VectorReg* %7 to i32*
  store i32 %332, i32* %333, align 1, !tbaa !2452
  store float 0.000000e+00, float* %491, align 1, !tbaa !2452
  store float 0.000000e+00, float* %493, align 1, !tbaa !2452
  store float 0.000000e+00, float* %495, align 1, !tbaa !2452
  %334 = add i64 %208, -32
  %335 = add i64 %244, 22
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %334 to i64*
  %337 = load i64, i64* %336, align 8
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = add i64 %208, -52
  %339 = add i64 %244, 26
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %338 to i32*
  %341 = load i32, i32* %340, align 4
  %342 = sext i32 %341 to i64
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = shl nsw i64 %342, 2
  %344 = add i64 %343, %337
  %345 = add i64 %244, 31
  store i64 %345, i64* %PC, align 8
  %346 = load <2 x float>, <2 x float>* %496, align 1
  %347 = load <2 x i32>, <2 x i32>* %497, align 1
  %348 = inttoptr i64 %344 to float*
  %349 = load float, float* %348, align 4
  %350 = extractelement <2 x float> %346, i32 0
  %351 = fmul float %350, %349
  store float %351, float* %489, align 1, !tbaa !2452
  %352 = bitcast <2 x float> %346 to <2 x i32>
  %353 = extractelement <2 x i32> %352, i32 1
  store i32 %353, i32* %498, align 1, !tbaa !2452
  %354 = extractelement <2 x i32> %347, i32 0
  store i32 %354, i32* %499, align 1, !tbaa !2452
  %355 = extractelement <2 x i32> %347, i32 1
  store i32 %355, i32* %500, align 1, !tbaa !2452
  %356 = load <2 x float>, <2 x float>* %65, align 1
  %357 = load <2 x i32>, <2 x i32>* %501, align 1
  %358 = load <2 x float>, <2 x float>* %496, align 1
  %359 = extractelement <2 x float> %356, i32 0
  %360 = extractelement <2 x float> %358, i32 0
  %361 = fadd float %359, %360
  store float %361, float* %484, align 1, !tbaa !2452
  %362 = bitcast <2 x float> %356 to <2 x i32>
  %363 = extractelement <2 x i32> %362, i32 1
  store i32 %363, i32* %19, align 1, !tbaa !2452
  %364 = extractelement <2 x i32> %357, i32 0
  store i32 %364, i32* %20, align 1, !tbaa !2452
  %365 = extractelement <2 x i32> %357, i32 1
  store i32 %365, i32* %22, align 1, !tbaa !2452
  %366 = add i64 %244, 40
  store i64 %366, i64* %PC, align 8
  %367 = load <2 x float>, <2 x float>* %65, align 1
  %368 = extractelement <2 x float> %367, i32 0
  store float %368, float* %318, align 4
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -48
  %371 = load i64, i64* %PC, align 8
  %372 = add i64 %371, 3
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %370 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = zext i32 %374 to i64
  store i64 %375, i64* %RDX, align 8, !tbaa !2428
  %376 = add i64 %369, -20
  %377 = add i64 %371, 6
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = add i32 %379, %374
  %381 = zext i32 %380 to i64
  store i64 %381, i64* %RDX, align 8, !tbaa !2428
  %382 = icmp ult i32 %380, %374
  %383 = icmp ult i32 %380, %379
  %384 = or i1 %382, %383
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %75, align 1, !tbaa !2432
  %386 = and i32 %380, 255
  %387 = tail call i32 @llvm.ctpop.i32(i32 %386) #8
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  store i8 %390, i8* %81, align 1, !tbaa !2446
  %391 = xor i32 %379, %374
  %392 = xor i32 %391, %380
  %393 = lshr i32 %392, 4
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  store i8 %395, i8* %82, align 1, !tbaa !2450
  %396 = icmp eq i32 %380, 0
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %85, align 1, !tbaa !2447
  %398 = lshr i32 %380, 31
  %399 = trunc i32 %398 to i8
  store i8 %399, i8* %88, align 1, !tbaa !2448
  %400 = lshr i32 %374, 31
  %401 = lshr i32 %379, 31
  %402 = xor i32 %398, %400
  %403 = xor i32 %398, %401
  %404 = add nuw nsw i32 %402, %403
  %405 = icmp eq i32 %404, 2
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %89, align 1, !tbaa !2449
  %407 = add i64 %371, 9
  store i64 %407, i64* %PC, align 8
  store i32 %380, i32* %373, align 4
  %408 = load i64, i64* %RBP, align 8
  %409 = add i64 %408, -52
  %410 = load i64, i64* %PC, align 8
  %411 = add i64 %410, 3
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %409 to i32*
  %413 = load i32, i32* %412, align 4
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %RDX, align 8, !tbaa !2428
  %415 = add i64 %408, -36
  %416 = add i64 %410, 6
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = add i32 %418, %413
  %420 = zext i32 %419 to i64
  store i64 %420, i64* %RDX, align 8, !tbaa !2428
  %421 = icmp ult i32 %419, %413
  %422 = icmp ult i32 %419, %418
  %423 = or i1 %421, %422
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %75, align 1, !tbaa !2432
  %425 = and i32 %419, 255
  %426 = tail call i32 @llvm.ctpop.i32(i32 %425) #8
  %427 = trunc i32 %426 to i8
  %428 = and i8 %427, 1
  %429 = xor i8 %428, 1
  store i8 %429, i8* %81, align 1, !tbaa !2446
  %430 = xor i32 %418, %413
  %431 = xor i32 %430, %419
  %432 = lshr i32 %431, 4
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  store i8 %434, i8* %82, align 1, !tbaa !2450
  %435 = icmp eq i32 %419, 0
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %85, align 1, !tbaa !2447
  %437 = lshr i32 %419, 31
  %438 = trunc i32 %437 to i8
  store i8 %438, i8* %88, align 1, !tbaa !2448
  %439 = lshr i32 %413, 31
  %440 = lshr i32 %418, 31
  %441 = xor i32 %437, %439
  %442 = xor i32 %437, %440
  %443 = add nuw nsw i32 %441, %442
  %444 = icmp eq i32 %443, 2
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %89, align 1, !tbaa !2449
  %446 = add i64 %410, 9
  store i64 %446, i64* %PC, align 8
  store i32 %419, i32* %412, align 4
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -44
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, 3
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %448 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = add i32 %452, 1
  %454 = zext i32 %453 to i64
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = icmp eq i32 %452, -1
  %456 = icmp eq i32 %453, 0
  %457 = or i1 %455, %456
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %75, align 1, !tbaa !2432
  %459 = and i32 %453, 255
  %460 = tail call i32 @llvm.ctpop.i32(i32 %459) #8
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  store i8 %463, i8* %81, align 1, !tbaa !2446
  %464 = xor i32 %452, %453
  %465 = lshr i32 %464, 4
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  store i8 %467, i8* %82, align 1, !tbaa !2450
  %468 = zext i1 %456 to i8
  store i8 %468, i8* %85, align 1, !tbaa !2447
  %469 = lshr i32 %453, 31
  %470 = trunc i32 %469 to i8
  store i8 %470, i8* %88, align 1, !tbaa !2448
  %471 = lshr i32 %452, 31
  %472 = xor i32 %469, %471
  %473 = add nuw nsw i32 %472, %469
  %474 = icmp eq i32 %473, 2
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %89, align 1, !tbaa !2449
  %476 = add i64 %449, 9
  store i64 %476, i64* %PC, align 8
  store i32 %453, i32* %451, align 4
  %477 = load i64, i64* %PC, align 8
  %478 = add i64 %477, -79
  store i64 %478, i64* %PC, align 8, !tbaa !2428
  br label %block_402aee

block_402ae7:                                     ; preds = %block_402ace, %block_402ad8
  %479 = phi i64 [ %291, %block_402ace ], [ %.pre5, %block_402ad8 ]
  %480 = phi i64 [ %276, %block_402ace ], [ %.pre4, %block_402ad8 ]
  %481 = add i64 %480, -44
  %482 = add i64 %479, 7
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i32*
  store i32 0, i32* %483, align 4
  %484 = bitcast [32 x %union.VectorReg]* %6 to float*
  %485 = bitcast i8* %18 to float*
  %486 = bitcast i64* %16 to float*
  %487 = bitcast i8* %21 to float*
  %488 = bitcast %union.VectorReg* %7 to i8*
  %489 = bitcast %union.VectorReg* %7 to float*
  %490 = getelementptr inbounds i8, i8* %488, i64 4
  %491 = bitcast i8* %490 to float*
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %493 = bitcast i64* %492 to float*
  %494 = getelementptr inbounds i8, i8* %488, i64 12
  %495 = bitcast i8* %494 to float*
  %496 = bitcast %union.VectorReg* %7 to <2 x float>*
  %497 = bitcast i64* %492 to <2 x i32>*
  %498 = bitcast i8* %490 to i32*
  %499 = bitcast i64* %492 to i32*
  %500 = bitcast i8* %494 to i32*
  %501 = bitcast i64* %16 to <2 x i32>*
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_402aee

block_402abf:                                     ; preds = %block_402aa7
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %75, align 1, !tbaa !2432
  store i8 1, i8* %81, align 1, !tbaa !2446
  store i8 1, i8* %85, align 1, !tbaa !2447
  store i8 0, i8* %88, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %82, align 1, !tbaa !2450
  %502 = add i64 %301, -8
  %503 = add i64 %317, 5
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %502 to i32*
  %505 = load i32, i32* %504, align 4
  %506 = sub i32 0, %505
  %507 = lshr i32 %506, 31
  %508 = sub i32 1, %505
  %509 = zext i32 %508 to i64
  store i64 %509, i64* %RAX, align 8, !tbaa !2428
  %510 = icmp ult i32 %508, %506
  %511 = icmp eq i32 %508, 0
  %512 = or i1 %510, %511
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %75, align 1, !tbaa !2432
  %514 = and i32 %508, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #8
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %81, align 1, !tbaa !2446
  %519 = xor i32 %508, %506
  %520 = lshr i32 %519, 4
  %521 = trunc i32 %520 to i8
  %522 = and i8 %521, 1
  store i8 %522, i8* %82, align 1, !tbaa !2450
  %523 = zext i1 %511 to i8
  store i8 %523, i8* %85, align 1, !tbaa !2447
  %524 = lshr i32 %508, 31
  %525 = trunc i32 %524 to i8
  store i8 %525, i8* %88, align 1, !tbaa !2448
  %526 = xor i32 %524, %507
  %527 = add nuw nsw i32 %526, %524
  %528 = icmp eq i32 %527, 2
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %89, align 1, !tbaa !2449
  %530 = add i64 %317, 12
  store i64 %530, i64* %PC, align 8
  %531 = load i32, i32* %305, align 4
  %532 = sext i32 %508 to i64
  %533 = sext i32 %531 to i64
  %534 = mul nsw i64 %533, %532
  %535 = trunc i64 %534 to i32
  %536 = and i64 %534, 4294967295
  store i64 %536, i64* %RAX, align 8, !tbaa !2428
  %537 = shl i64 %534, 32
  %538 = ashr exact i64 %537, 32
  %539 = icmp ne i64 %538, %534
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %75, align 1, !tbaa !2432
  %541 = and i32 %535, 255
  %542 = tail call i32 @llvm.ctpop.i32(i32 %541) #8
  %543 = trunc i32 %542 to i8
  %544 = and i8 %543, 1
  %545 = xor i8 %544, 1
  store i8 %545, i8* %81, align 1, !tbaa !2446
  store i8 0, i8* %82, align 1, !tbaa !2450
  store i8 0, i8* %85, align 1, !tbaa !2447
  %546 = lshr i32 %535, 31
  %547 = trunc i32 %546 to i8
  store i8 %547, i8* %88, align 1, !tbaa !2448
  store i8 %540, i8* %89, align 1, !tbaa !2449
  %548 = load i64, i64* %RBP, align 8
  %549 = add i64 %548, -48
  %550 = add i64 %317, 15
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i32*
  store i32 %535, i32* %551, align 4
  %.pre2 = load i64, i64* %RBP, align 8
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_402ace

block_402a86:                                     ; preds = %block_402a50
  store i32 0, i32* %17, align 1, !tbaa !2451
  store i32 0, i32* %19, align 1, !tbaa !2451
  store i32 0, i32* %20, align 1, !tbaa !2451
  store i32 0, i32* %22, align 1, !tbaa !2451
  %552 = add i64 %69, -4
  %553 = add i64 %93, 8
  store i64 %553, i64* %PC, align 8
  %554 = load <2 x float>, <2 x float>* %65, align 1
  %555 = extractelement <2 x float> %554, i32 0
  %556 = inttoptr i64 %552 to float*
  store float %555, float* %556, align 4
  %557 = load i64, i64* %PC, align 8
  %558 = add i64 %557, 278
  store i64 %558, i64* %PC, align 8, !tbaa !2428
  %.pre8 = bitcast [32 x %union.VectorReg]* %6 to float*
  %.pre9 = bitcast i8* %18 to float*
  %.pre11 = bitcast i64* %16 to float*
  %.pre13 = bitcast i8* %21 to float*
  br label %block_402ba4

block_402a93:                                     ; preds = %block_402a50
  %559 = add i64 %69, -20
  %560 = add i64 %93, 4
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %559 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = add i32 %562, -1
  %564 = icmp eq i32 %562, 0
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %75, align 1, !tbaa !2432
  %566 = and i32 %563, 255
  %567 = tail call i32 @llvm.ctpop.i32(i32 %566) #8
  %568 = trunc i32 %567 to i8
  %569 = and i8 %568, 1
  %570 = xor i8 %569, 1
  store i8 %570, i8* %81, align 1, !tbaa !2446
  %571 = xor i32 %562, %563
  %572 = lshr i32 %571, 4
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  store i8 %574, i8* %82, align 1, !tbaa !2450
  %575 = icmp eq i32 %563, 0
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %85, align 1, !tbaa !2447
  %577 = lshr i32 %563, 31
  %578 = trunc i32 %577 to i8
  store i8 %578, i8* %88, align 1, !tbaa !2448
  %579 = lshr i32 %562, 31
  %580 = xor i32 %577, %579
  %581 = add nuw nsw i32 %580, %579
  %582 = icmp eq i32 %581, 2
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %89, align 1, !tbaa !2449
  %.v15 = select i1 %575, i64 10, i64 20
  %584 = add i64 %93, %.v15
  store i64 %584, i64* %PC, align 8, !tbaa !2428
  br i1 %575, label %block_402a9d, label %block_402aa7

block_402b51:                                     ; preds = %block_402a9d
  %585 = add i64 %69, -44
  %586 = add i64 %274, 7
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %585 to i32*
  store i32 0, i32* %587, align 4
  %588 = bitcast [32 x %union.VectorReg]* %6 to float*
  %589 = bitcast i8* %18 to float*
  %590 = bitcast i64* %16 to float*
  %591 = bitcast i8* %21 to float*
  %592 = bitcast %union.VectorReg* %7 to i8*
  %593 = bitcast %union.VectorReg* %7 to float*
  %594 = getelementptr inbounds i8, i8* %592, i64 4
  %595 = bitcast i8* %594 to float*
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %597 = bitcast i64* %596 to float*
  %598 = getelementptr inbounds i8, i8* %592, i64 12
  %599 = bitcast i8* %598 to float*
  %600 = bitcast %union.VectorReg* %7 to <2 x float>*
  %601 = bitcast i64* %596 to <2 x i32>*
  %602 = bitcast i8* %594 to i32*
  %603 = bitcast i64* %596 to i32*
  %604 = bitcast i8* %598 to i32*
  %605 = bitcast i64* %16 to <2 x i32>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402b58

block_402b64:                                     ; preds = %block_402b58
  %606 = inttoptr i64 %137 to float*
  %607 = add i64 %100, -16
  %608 = add i64 %136, 9
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %607 to i64*
  %610 = load i64, i64* %609, align 8
  store i64 %610, i64* %RAX, align 8, !tbaa !2428
  %611 = add i64 %136, 13
  store i64 %611, i64* %PC, align 8
  %612 = load i32, i32* %103, align 4
  %613 = sext i32 %612 to i64
  store i64 %613, i64* %RCX, align 8, !tbaa !2428
  %614 = shl nsw i64 %613, 2
  %615 = add i64 %614, %610
  %616 = add i64 %136, 18
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i32*
  %618 = load i32, i32* %617, align 4
  %619 = bitcast %union.VectorReg* %7 to i32*
  store i32 %618, i32* %619, align 1, !tbaa !2452
  store float 0.000000e+00, float* %595, align 1, !tbaa !2452
  store float 0.000000e+00, float* %597, align 1, !tbaa !2452
  store float 0.000000e+00, float* %599, align 1, !tbaa !2452
  %620 = add i64 %100, -32
  %621 = add i64 %136, 22
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %620 to i64*
  %623 = load i64, i64* %622, align 8
  store i64 %623, i64* %RAX, align 8, !tbaa !2428
  %624 = add i64 %136, 26
  store i64 %624, i64* %PC, align 8
  %625 = load i32, i32* %103, align 4
  %626 = sext i32 %625 to i64
  store i64 %626, i64* %RCX, align 8, !tbaa !2428
  %627 = shl nsw i64 %626, 2
  %628 = add i64 %627, %623
  %629 = add i64 %136, 31
  store i64 %629, i64* %PC, align 8
  %630 = load <2 x float>, <2 x float>* %600, align 1
  %631 = load <2 x i32>, <2 x i32>* %601, align 1
  %632 = inttoptr i64 %628 to float*
  %633 = load float, float* %632, align 4
  %634 = extractelement <2 x float> %630, i32 0
  %635 = fmul float %634, %633
  store float %635, float* %593, align 1, !tbaa !2452
  %636 = bitcast <2 x float> %630 to <2 x i32>
  %637 = extractelement <2 x i32> %636, i32 1
  store i32 %637, i32* %602, align 1, !tbaa !2452
  %638 = extractelement <2 x i32> %631, i32 0
  store i32 %638, i32* %603, align 1, !tbaa !2452
  %639 = extractelement <2 x i32> %631, i32 1
  store i32 %639, i32* %604, align 1, !tbaa !2452
  %640 = load <2 x float>, <2 x float>* %65, align 1
  %641 = load <2 x i32>, <2 x i32>* %605, align 1
  %642 = load <2 x float>, <2 x float>* %600, align 1
  %643 = extractelement <2 x float> %640, i32 0
  %644 = extractelement <2 x float> %642, i32 0
  %645 = fadd float %643, %644
  store float %645, float* %588, align 1, !tbaa !2452
  %646 = bitcast <2 x float> %640 to <2 x i32>
  %647 = extractelement <2 x i32> %646, i32 1
  store i32 %647, i32* %19, align 1, !tbaa !2452
  %648 = extractelement <2 x i32> %641, i32 0
  store i32 %648, i32* %20, align 1, !tbaa !2452
  %649 = extractelement <2 x i32> %641, i32 1
  store i32 %649, i32* %22, align 1, !tbaa !2452
  %650 = add i64 %136, 40
  store i64 %650, i64* %PC, align 8
  %651 = load <2 x float>, <2 x float>* %65, align 1
  %652 = extractelement <2 x float> %651, i32 0
  store float %652, float* %606, align 4
  %653 = load i64, i64* %RBP, align 8
  %654 = add i64 %653, -44
  %655 = load i64, i64* %PC, align 8
  %656 = add i64 %655, 3
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %654 to i32*
  %658 = load i32, i32* %657, align 4
  %659 = add i32 %658, 1
  %660 = zext i32 %659 to i64
  store i64 %660, i64* %RAX, align 8, !tbaa !2428
  %661 = icmp eq i32 %658, -1
  %662 = icmp eq i32 %659, 0
  %663 = or i1 %661, %662
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %75, align 1, !tbaa !2432
  %665 = and i32 %659, 255
  %666 = tail call i32 @llvm.ctpop.i32(i32 %665) #8
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = xor i8 %668, 1
  store i8 %669, i8* %81, align 1, !tbaa !2446
  %670 = xor i32 %658, %659
  %671 = lshr i32 %670, 4
  %672 = trunc i32 %671 to i8
  %673 = and i8 %672, 1
  store i8 %673, i8* %82, align 1, !tbaa !2450
  %674 = zext i1 %662 to i8
  store i8 %674, i8* %85, align 1, !tbaa !2447
  %675 = lshr i32 %659, 31
  %676 = trunc i32 %675 to i8
  store i8 %676, i8* %88, align 1, !tbaa !2448
  %677 = lshr i32 %658, 31
  %678 = xor i32 %675, %677
  %679 = add nuw nsw i32 %678, %675
  %680 = icmp eq i32 %679, 2
  %681 = zext i1 %680 to i8
  store i8 %681, i8* %89, align 1, !tbaa !2449
  %682 = add i64 %655, 9
  store i64 %682, i64* %PC, align 8
  store i32 %659, i32* %657, align 4
  %683 = load i64, i64* %PC, align 8
  %684 = add i64 %683, -61
  store i64 %684, i64* %PC, align 8, !tbaa !2428
  br label %block_402b58

block_402b42:                                     ; preds = %block_402aee
  %685 = add i64 %208, -4
  %686 = add i64 %244, 10
  store i64 %686, i64* %PC, align 8
  %687 = load <2 x float>, <2 x float>* %65, align 1
  %688 = extractelement <2 x float> %687, i32 0
  %689 = inttoptr i64 %685 to float*
  store float %688, float* %689, align 4
  %690 = load i64, i64* %PC, align 8
  %691 = add i64 %690, 88
  store i64 %691, i64* %PC, align 8, !tbaa !2428
  br label %block_402ba4
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005b0_frame_dummy() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_4005b0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005b0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400580___do_global_dtors_aux() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400580;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_400580___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400580___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402eb0___libc_csu_fini() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402eb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402eb0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402eb0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e40___libc_csu_init() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @callback_sub_402e40___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e40___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400610;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400610_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653140_clock(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_653138_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4004b0_memset(%struct.State*, %struct.Memory*) unnamed_addr #5 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400478;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400478__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dscal() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402d70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402d70_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dmxpy() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402010_dmxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @matgen() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4017b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4017b0_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @daxpy() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4028e0_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @ddot() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402a50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402a50_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @epslon() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402810;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402810_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgesl() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c90_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005c0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @idamax() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402bb0_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @print_time() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @print_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4028d0_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @what_date() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @what_date_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400600_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgefa() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401980;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401980_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() local_unnamed_addr #7 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402eb4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #8
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402eb4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

define internal void @__mcsema_destructor() {
  tail call void @callback_sub_402eb0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_402e40___libc_csu_init()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { naked nobuiltin noinline }
attributes #8 = { nounwind }
attributes #9 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2071}
!2448 = !{!2433, !2430, i64 2073}
!2449 = !{!2433, !2430, i64 2077}
!2450 = !{!2433, !2430, i64 2069}
!2451 = !{!2445, !2445, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"float", !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"double", !2430, i64 0}
!2456 = !{!2430, !2430, i64 0}
